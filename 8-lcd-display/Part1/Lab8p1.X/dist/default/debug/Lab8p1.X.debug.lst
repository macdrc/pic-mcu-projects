

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 02 21:02:41 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           	psect	idataCOMRAM
    89  00BEE3                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _wrap
    93  00BEE3  01                 	db	1
    94                           
    95                           ;initializer for _SW_EWLT_Txt
    96  00BEE4  30                 	db	48
    97  00BEE5  00                 	db	0
    98                           
    99                           ;initializer for _SW_EWPED_Txt
   100  00BEE6  30                 	db	48
   101  00BEE7  00                 	db	0
   102                           
   103                           	psect	idataBANK0
   104  00C07B                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _array
   108  00C07B  40                 	db	64
   109  00C07C  79                 	db	121
   110  00C07D  24                 	db	36
   111  00C07E  30                 	db	48
   112  00C07F  19                 	db	25
   113  00C080  12                 	db	18
   114  00C081  02                 	db	2
   115  00C082  78                 	db	120
   116  00C083  00                 	db	0
   117  00C084  10                 	db	16
   118  00C085  FF                 	db	255
   119                           
   120                           ;initializer for _EWLT_Count
   121  00C086  30                 	db	48
   122  00C087  30                 	db	48
   123  00C088  00                 	db	0
   124                           
   125                           ;initializer for _EW_Count
   126  00C089  30                 	db	48
   127  00C08A  30                 	db	48
   128  00C08B  00                 	db	0
   129                           
   130                           ;initializer for _NSLT_Count
   131  00C08C  30                 	db	48
   132  00C08D  30                 	db	48
   133  00C08E  00                 	db	0
   134                           
   135                           ;initializer for _NS_Count
   136  00C08F  30                 	db	48
   137  00C090  30                 	db	48
   138  00C091  00                 	db	0
   139                           
   140                           ;initializer for _PED_EW_Count
   141  00C092  30                 	db	48
   142  00C093  30                 	db	48
   143  00C094  00                 	db	0
   144                           
   145                           ;initializer for _PED_NS_Count
   146  00C095  30                 	db	48
   147  00C096  30                 	db	48
   148  00C097  00                 	db	0
   149                           
   150                           ;initializer for _Act_Mode_Txt
   151  00C098  44                 	db	68
   152  00C099  00                 	db	0
   153                           
   154                           ;initializer for _FlashingR_Txt
   155  00C09A  30                 	db	48
   156  00C09B  00                 	db	0
   157                           
   158                           ;initializer for _FlashingS_Txt
   159  00C09C  30                 	db	48
   160  00C09D  00                 	db	0
   161                           
   162                           ;initializer for _SW_MODE_Txt
   163  00C09E  44                 	db	68
   164  00C09F  00                 	db	0
   165                           
   166                           ;initializer for _SW_NSLT_Txt
   167  00C0A0  30                 	db	48
   168  00C0A1  00                 	db	0
   169                           
   170                           ;initializer for _SW_NSPED_Txt
   171  00C0A2  30                 	db	48
   172  00C0A3  00                 	db	0
   173                           
   174                           	psect	mediumconst
   175  00FA62                     __pmediumconst:
   176                           	opt stack 0
   177  00FA62  00                 	db	0
   178  00FA63                     _font:
   179                           	opt stack 0
   180  00FA63  00                 	db	0
   181  00FA64  00                 	db	0
   182  00FA65  00                 	db	0
   183  00FA66  00                 	db	0
   184  00FA67  00                 	db	0
   185  00FA68  00                 	db	0
   186  00FA69  00                 	db	0
   187  00FA6A  5F                 	db	95
   188  00FA6B  00                 	db	0
   189  00FA6C  00                 	db	0
   190  00FA6D  00                 	db	0
   191  00FA6E  07                 	db	7
   192  00FA6F  00                 	db	0
   193  00FA70  07                 	db	7
   194  00FA71  00                 	db	0
   195  00FA72  14                 	db	20
   196  00FA73  7F                 	db	127
   197  00FA74  14                 	db	20
   198  00FA75  7F                 	db	127
   199  00FA76  14                 	db	20
   200  00FA77  24                 	db	36
   201  00FA78  2A                 	db	42
   202  00FA79  7F                 	db	127
   203  00FA7A  2A                 	db	42
   204  00FA7B  12                 	db	18
   205  00FA7C  23                 	db	35
   206  00FA7D  13                 	db	19
   207  00FA7E  08                 	db	8
   208  00FA7F  64                 	db	100
   209  00FA80  62                 	db	98
   210  00FA81  36                 	db	54
   211  00FA82  49                 	db	73
   212  00FA83  56                 	db	86
   213  00FA84  20                 	db	32
   214  00FA85  50                 	db	80
   215  00FA86  00                 	db	0
   216  00FA87  08                 	db	8
   217  00FA88  07                 	db	7
   218  00FA89  03                 	db	3
   219  00FA8A  00                 	db	0
   220  00FA8B  00                 	db	0
   221  00FA8C  1C                 	db	28
   222  00FA8D  22                 	db	34
   223  00FA8E  41                 	db	65
   224  00FA8F  00                 	db	0
   225  00FA90  00                 	db	0
   226  00FA91  41                 	db	65
   227  00FA92  22                 	db	34
   228  00FA93  1C                 	db	28
   229  00FA94  00                 	db	0
   230  00FA95  2A                 	db	42
   231  00FA96  1C                 	db	28
   232  00FA97  7F                 	db	127
   233  00FA98  1C                 	db	28
   234  00FA99  2A                 	db	42
   235  00FA9A  08                 	db	8
   236  00FA9B  08                 	db	8
   237  00FA9C  3E                 	db	62
   238  00FA9D  08                 	db	8
   239  00FA9E  08                 	db	8
   240  00FA9F  00                 	db	0
   241  00FAA0  80                 	db	128
   242  00FAA1  70                 	db	112
   243  00FAA2  30                 	db	48
   244  00FAA3  00                 	db	0
   245  00FAA4  08                 	db	8
   246  00FAA5  08                 	db	8
   247  00FAA6  08                 	db	8
   248  00FAA7  08                 	db	8
   249  00FAA8  08                 	db	8
   250  00FAA9  00                 	db	0
   251  00FAAA  00                 	db	0
   252  00FAAB  60                 	db	96
   253  00FAAC  60                 	db	96
   254  00FAAD  00                 	db	0
   255  00FAAE  20                 	db	32
   256  00FAAF  10                 	db	16
   257  00FAB0  08                 	db	8
   258  00FAB1  04                 	db	4
   259  00FAB2  02                 	db	2
   260  00FAB3  3E                 	db	62
   261  00FAB4  51                 	db	81
   262  00FAB5  49                 	db	73
   263  00FAB6  45                 	db	69
   264  00FAB7  3E                 	db	62
   265  00FAB8  00                 	db	0
   266  00FAB9  42                 	db	66
   267  00FABA  7F                 	db	127
   268  00FABB  40                 	db	64
   269  00FABC  00                 	db	0
   270  00FABD  72                 	db	114
   271  00FABE  49                 	db	73
   272  00FABF  49                 	db	73
   273  00FAC0  49                 	db	73
   274  00FAC1  46                 	db	70
   275  00FAC2  21                 	db	33
   276  00FAC3  41                 	db	65
   277  00FAC4  49                 	db	73
   278  00FAC5  4D                 	db	77
   279  00FAC6  33                 	db	51
   280  00FAC7  18                 	db	24
   281  00FAC8  14                 	db	20
   282  00FAC9  12                 	db	18
   283  00FACA  7F                 	db	127
   284  00FACB  10                 	db	16
   285  00FACC  27                 	db	39
   286  00FACD  45                 	db	69
   287  00FACE  45                 	db	69
   288  00FACF  45                 	db	69
   289  00FAD0  39                 	db	57
   290  00FAD1  3C                 	db	60
   291  00FAD2  4A                 	db	74
   292  00FAD3  49                 	db	73
   293  00FAD4  49                 	db	73
   294  00FAD5  31                 	db	49
   295  00FAD6  41                 	db	65
   296  00FAD7  21                 	db	33
   297  00FAD8  11                 	db	17
   298  00FAD9  09                 	db	9
   299  00FADA  07                 	db	7
   300  00FADB  36                 	db	54
   301  00FADC  49                 	db	73
   302  00FADD  49                 	db	73
   303  00FADE  49                 	db	73
   304  00FADF  36                 	db	54
   305  00FAE0  46                 	db	70
   306  00FAE1  49                 	db	73
   307  00FAE2  49                 	db	73
   308  00FAE3  29                 	db	41
   309  00FAE4  1E                 	db	30
   310  00FAE5  00                 	db	0
   311  00FAE6  00                 	db	0
   312  00FAE7  14                 	db	20
   313  00FAE8  00                 	db	0
   314  00FAE9  00                 	db	0
   315  00FAEA  00                 	db	0
   316  00FAEB  40                 	db	64
   317  00FAEC  34                 	db	52
   318  00FAED  00                 	db	0
   319  00FAEE  00                 	db	0
   320  00FAEF  00                 	db	0
   321  00FAF0  08                 	db	8
   322  00FAF1  14                 	db	20
   323  00FAF2  22                 	db	34
   324  00FAF3  41                 	db	65
   325  00FAF4  14                 	db	20
   326  00FAF5  14                 	db	20
   327  00FAF6  14                 	db	20
   328  00FAF7  14                 	db	20
   329  00FAF8  14                 	db	20
   330  00FAF9  00                 	db	0
   331  00FAFA  41                 	db	65
   332  00FAFB  22                 	db	34
   333  00FAFC  14                 	db	20
   334  00FAFD  08                 	db	8
   335  00FAFE  02                 	db	2
   336  00FAFF  01                 	db	1
   337  00FB00  59                 	db	89
   338  00FB01  09                 	db	9
   339  00FB02  06                 	db	6
   340  00FB03  3E                 	db	62
   341  00FB04  41                 	db	65
   342  00FB05  5D                 	db	93
   343  00FB06  59                 	db	89
   344  00FB07  4E                 	db	78
   345  00FB08  7C                 	db	124
   346  00FB09  12                 	db	18
   347  00FB0A  11                 	db	17
   348  00FB0B  12                 	db	18
   349  00FB0C  7C                 	db	124
   350  00FB0D  7F                 	db	127
   351  00FB0E  49                 	db	73
   352  00FB0F  49                 	db	73
   353  00FB10  49                 	db	73
   354  00FB11  36                 	db	54
   355  00FB12  3E                 	db	62
   356  00FB13  41                 	db	65
   357  00FB14  41                 	db	65
   358  00FB15  41                 	db	65
   359  00FB16  22                 	db	34
   360  00FB17  7F                 	db	127
   361  00FB18  41                 	db	65
   362  00FB19  41                 	db	65
   363  00FB1A  41                 	db	65
   364  00FB1B  3E                 	db	62
   365  00FB1C  7F                 	db	127
   366  00FB1D  49                 	db	73
   367  00FB1E  49                 	db	73
   368  00FB1F  49                 	db	73
   369  00FB20  41                 	db	65
   370  00FB21  7F                 	db	127
   371  00FB22  09                 	db	9
   372  00FB23  09                 	db	9
   373  00FB24  09                 	db	9
   374  00FB25  01                 	db	1
   375  00FB26  3E                 	db	62
   376  00FB27  41                 	db	65
   377  00FB28  41                 	db	65
   378  00FB29  51                 	db	81
   379  00FB2A  73                 	db	115
   380  00FB2B  7F                 	db	127
   381  00FB2C  08                 	db	8
   382  00FB2D  08                 	db	8
   383  00FB2E  08                 	db	8
   384  00FB2F  7F                 	db	127
   385  00FB30  00                 	db	0
   386  00FB31  41                 	db	65
   387  00FB32  7F                 	db	127
   388  00FB33  41                 	db	65
   389  00FB34  00                 	db	0
   390  00FB35  20                 	db	32
   391  00FB36  40                 	db	64
   392  00FB37  41                 	db	65
   393  00FB38  3F                 	db	63
   394  00FB39  01                 	db	1
   395  00FB3A  7F                 	db	127
   396  00FB3B  08                 	db	8
   397  00FB3C  14                 	db	20
   398  00FB3D  22                 	db	34
   399  00FB3E  41                 	db	65
   400  00FB3F  7F                 	db	127
   401  00FB40  40                 	db	64
   402  00FB41  40                 	db	64
   403  00FB42  40                 	db	64
   404  00FB43  40                 	db	64
   405  00FB44  7F                 	db	127
   406  00FB45  02                 	db	2
   407  00FB46  1C                 	db	28
   408  00FB47  02                 	db	2
   409  00FB48  7F                 	db	127
   410  00FB49  7F                 	db	127
   411  00FB4A  04                 	db	4
   412  00FB4B  08                 	db	8
   413  00FB4C  10                 	db	16
   414  00FB4D  7F                 	db	127
   415  00FB4E  3E                 	db	62
   416  00FB4F  41                 	db	65
   417  00FB50  41                 	db	65
   418  00FB51  41                 	db	65
   419  00FB52  3E                 	db	62
   420  00FB53  7F                 	db	127
   421  00FB54  09                 	db	9
   422  00FB55  09                 	db	9
   423  00FB56  09                 	db	9
   424  00FB57  06                 	db	6
   425  00FB58  3E                 	db	62
   426  00FB59  41                 	db	65
   427  00FB5A  51                 	db	81
   428  00FB5B  21                 	db	33
   429  00FB5C  5E                 	db	94
   430  00FB5D  7F                 	db	127
   431  00FB5E  09                 	db	9
   432  00FB5F  19                 	db	25
   433  00FB60  29                 	db	41
   434  00FB61  46                 	db	70
   435  00FB62                     __end_of_font:
   436                           	opt stack 0
   437  00FB62                     _font2:
   438                           	opt stack 0
   439  00FB62  26                 	db	38
   440  00FB63  49                 	db	73
   441  00FB64  49                 	db	73
   442  00FB65  49                 	db	73
   443  00FB66  32                 	db	50
   444  00FB67  03                 	db	3
   445  00FB68  01                 	db	1
   446  00FB69  7F                 	db	127
   447  00FB6A  01                 	db	1
   448  00FB6B  03                 	db	3
   449  00FB6C  3F                 	db	63
   450  00FB6D  40                 	db	64
   451  00FB6E  40                 	db	64
   452  00FB6F  40                 	db	64
   453  00FB70  3F                 	db	63
   454  00FB71  1F                 	db	31
   455  00FB72  20                 	db	32
   456  00FB73  40                 	db	64
   457  00FB74  20                 	db	32
   458  00FB75  1F                 	db	31
   459  00FB76  3F                 	db	63
   460  00FB77  40                 	db	64
   461  00FB78  38                 	db	56
   462  00FB79  40                 	db	64
   463  00FB7A  3F                 	db	63
   464  00FB7B  63                 	db	99
   465  00FB7C  14                 	db	20
   466  00FB7D  08                 	db	8
   467  00FB7E  14                 	db	20
   468  00FB7F  63                 	db	99
   469  00FB80  03                 	db	3
   470  00FB81  04                 	db	4
   471  00FB82  78                 	db	120
   472  00FB83  04                 	db	4
   473  00FB84  03                 	db	3
   474  00FB85  61                 	db	97
   475  00FB86  59                 	db	89
   476  00FB87  49                 	db	73
   477  00FB88  4D                 	db	77
   478  00FB89  43                 	db	67
   479  00FB8A  00                 	db	0
   480  00FB8B  7F                 	db	127
   481  00FB8C  41                 	db	65
   482  00FB8D  41                 	db	65
   483  00FB8E  41                 	db	65
   484  00FB8F  02                 	db	2
   485  00FB90  04                 	db	4
   486  00FB91  08                 	db	8
   487  00FB92  10                 	db	16
   488  00FB93  20                 	db	32
   489  00FB94  00                 	db	0
   490  00FB95  41                 	db	65
   491  00FB96  41                 	db	65
   492  00FB97  41                 	db	65
   493  00FB98  7F                 	db	127
   494  00FB99  04                 	db	4
   495  00FB9A  02                 	db	2
   496  00FB9B  01                 	db	1
   497  00FB9C  02                 	db	2
   498  00FB9D  04                 	db	4
   499  00FB9E  40                 	db	64
   500  00FB9F  40                 	db	64
   501  00FBA0  40                 	db	64
   502  00FBA1  40                 	db	64
   503  00FBA2  40                 	db	64
   504  00FBA3  00                 	db	0
   505  00FBA4  03                 	db	3
   506  00FBA5  07                 	db	7
   507  00FBA6  08                 	db	8
   508  00FBA7  00                 	db	0
   509  00FBA8  20                 	db	32
   510  00FBA9  54                 	db	84
   511  00FBAA  54                 	db	84
   512  00FBAB  78                 	db	120
   513  00FBAC  40                 	db	64
   514  00FBAD  7F                 	db	127
   515  00FBAE  28                 	db	40
   516  00FBAF  44                 	db	68
   517  00FBB0  44                 	db	68
   518  00FBB1  38                 	db	56
   519  00FBB2  38                 	db	56
   520  00FBB3  44                 	db	68
   521  00FBB4  44                 	db	68
   522  00FBB5  44                 	db	68
   523  00FBB6  28                 	db	40
   524  00FBB7  38                 	db	56
   525  00FBB8  44                 	db	68
   526  00FBB9  44                 	db	68
   527  00FBBA  28                 	db	40
   528  00FBBB  7F                 	db	127
   529  00FBBC  38                 	db	56
   530  00FBBD  54                 	db	84
   531  00FBBE  54                 	db	84
   532  00FBBF  54                 	db	84
   533  00FBC0  18                 	db	24
   534  00FBC1  00                 	db	0
   535  00FBC2  08                 	db	8
   536  00FBC3  7E                 	db	126
   537  00FBC4  09                 	db	9
   538  00FBC5  02                 	db	2
   539  00FBC6  18                 	db	24
   540  00FBC7  A4                 	db	164
   541  00FBC8  A4                 	db	164
   542  00FBC9  9C                 	db	156
   543  00FBCA  78                 	db	120
   544  00FBCB  7F                 	db	127
   545  00FBCC  08                 	db	8
   546  00FBCD  04                 	db	4
   547  00FBCE  04                 	db	4
   548  00FBCF  78                 	db	120
   549  00FBD0  00                 	db	0
   550  00FBD1  44                 	db	68
   551  00FBD2  7D                 	db	125
   552  00FBD3  40                 	db	64
   553  00FBD4  00                 	db	0
   554  00FBD5  20                 	db	32
   555  00FBD6  40                 	db	64
   556  00FBD7  40                 	db	64
   557  00FBD8  3D                 	db	61
   558  00FBD9  00                 	db	0
   559  00FBDA  7F                 	db	127
   560  00FBDB  10                 	db	16
   561  00FBDC  28                 	db	40
   562  00FBDD  44                 	db	68
   563  00FBDE  00                 	db	0
   564  00FBDF  00                 	db	0
   565  00FBE0  41                 	db	65
   566  00FBE1  7F                 	db	127
   567  00FBE2  40                 	db	64
   568  00FBE3  00                 	db	0
   569  00FBE4  7C                 	db	124
   570  00FBE5  04                 	db	4
   571  00FBE6  78                 	db	120
   572  00FBE7  04                 	db	4
   573  00FBE8  78                 	db	120
   574  00FBE9  7C                 	db	124
   575  00FBEA  08                 	db	8
   576  00FBEB  04                 	db	4
   577  00FBEC  04                 	db	4
   578  00FBED  78                 	db	120
   579  00FBEE  38                 	db	56
   580  00FBEF  44                 	db	68
   581  00FBF0  44                 	db	68
   582  00FBF1  44                 	db	68
   583  00FBF2  38                 	db	56
   584  00FBF3  FC                 	db	252
   585  00FBF4  18                 	db	24
   586  00FBF5  24                 	db	36
   587  00FBF6  24                 	db	36
   588  00FBF7  18                 	db	24
   589  00FBF8  18                 	db	24
   590  00FBF9  24                 	db	36
   591  00FBFA  24                 	db	36
   592  00FBFB  18                 	db	24
   593  00FBFC  FC                 	db	252
   594  00FBFD  7C                 	db	124
   595  00FBFE  08                 	db	8
   596  00FBFF  04                 	db	4
   597  00FC00  04                 	db	4
   598  00FC01  08                 	db	8
   599  00FC02  48                 	db	72
   600  00FC03  54                 	db	84
   601  00FC04  54                 	db	84
   602  00FC05  54                 	db	84
   603  00FC06  24                 	db	36
   604  00FC07  04                 	db	4
   605  00FC08  04                 	db	4
   606  00FC09  3F                 	db	63
   607  00FC0A  44                 	db	68
   608  00FC0B  24                 	db	36
   609  00FC0C  3C                 	db	60
   610  00FC0D  40                 	db	64
   611  00FC0E  40                 	db	64
   612  00FC0F  20                 	db	32
   613  00FC10  7C                 	db	124
   614  00FC11  1C                 	db	28
   615  00FC12  20                 	db	32
   616  00FC13  40                 	db	64
   617  00FC14  20                 	db	32
   618  00FC15  1C                 	db	28
   619  00FC16  3C                 	db	60
   620  00FC17  40                 	db	64
   621  00FC18  30                 	db	48
   622  00FC19  40                 	db	64
   623  00FC1A  3C                 	db	60
   624  00FC1B  44                 	db	68
   625  00FC1C  28                 	db	40
   626  00FC1D  10                 	db	16
   627  00FC1E  28                 	db	40
   628  00FC1F  44                 	db	68
   629  00FC20  4C                 	db	76
   630  00FC21  90                 	db	144
   631  00FC22  90                 	db	144
   632  00FC23  90                 	db	144
   633  00FC24  7C                 	db	124
   634  00FC25  44                 	db	68
   635  00FC26  64                 	db	100
   636  00FC27  54                 	db	84
   637  00FC28  4C                 	db	76
   638  00FC29  44                 	db	68
   639  00FC2A  00                 	db	0
   640  00FC2B  08                 	db	8
   641  00FC2C  36                 	db	54
   642  00FC2D  41                 	db	65
   643  00FC2E  00                 	db	0
   644  00FC2F  00                 	db	0
   645  00FC30  00                 	db	0
   646  00FC31  77                 	db	119
   647  00FC32  00                 	db	0
   648  00FC33  00                 	db	0
   649  00FC34  00                 	db	0
   650  00FC35  41                 	db	65
   651  00FC36  36                 	db	54
   652  00FC37  08                 	db	8
   653  00FC38  00                 	db	0
   654  00FC39  02                 	db	2
   655  00FC3A  01                 	db	1
   656  00FC3B  02                 	db	2
   657  00FC3C  04                 	db	4
   658  00FC3D  02                 	db	2
   659  00FC3E                     __end_of_font2:
   660                           	opt stack 0
   661  00FC3E                     _dpowers:
   662                           	opt stack 0
   663  00FC3E  0001               	dw	1
   664  00FC40  0000               	dw	0
   665  00FC42  000A               	dw	10
   666  00FC44  0000               	dw	0
   667  00FC46  0064               	dw	100
   668  00FC48  0000               	dw	0
   669  00FC4A  03E8               	dw	1000
   670  00FC4C  0000               	dw	0
   671  00FC4E  2710               	dw	10000
   672  00FC50  0000               	dw	0
   673  00FC52  86A0               	dw	34464
   674  00FC54  0001               	dw	1
   675  00FC56  4240               	dw	16960
   676  00FC58  000F               	dw	15
   677  00FC5A  9680               	dw	38528
   678  00FC5C  0098               	dw	152
   679  00FC5E  E100               	dw	57600
   680  00FC60  05F5               	dw	1525
   681  00FC62  CA00               	dw	51712
   682  00FC64  3B9A               	dw	15258
   683  00FC66                     __end_of_dpowers:
   684                           	opt stack 0
   685  00FC66                     __npowers_:
   686                           	opt stack 0
   687  00FC66  00                 	db	0
   688  00FC67  80                 	db	128
   689  00FC68  3F                 	db	63
   690  00FC69  CD                 	db	205
   691  00FC6A  CC                 	db	204
   692  00FC6B  3D                 	db	61
   693  00FC6C  D7                 	db	215
   694  00FC6D  23                 	db	35
   695  00FC6E  3C                 	db	60
   696  00FC6F  12                 	db	18
   697  00FC70  83                 	db	131
   698  00FC71  3A                 	db	58
   699  00FC72  B7                 	db	183
   700  00FC73  D1                 	db	209
   701  00FC74  38                 	db	56
   702  00FC75  C6                 	db	198
   703  00FC76  27                 	db	39
   704  00FC77  37                 	db	55
   705  00FC78  38                 	db	56
   706  00FC79  86                 	db	134
   707  00FC7A  35                 	db	53
   708  00FC7B  C0                 	db	192
   709  00FC7C  D6                 	db	214
   710  00FC7D  33                 	db	51
   711  00FC7E  CC                 	db	204
   712  00FC7F  2B                 	db	43
   713  00FC80  32                 	db	50
   714  00FC81  70                 	db	112
   715  00FC82  89                 	db	137
   716  00FC83  30                 	db	48
   717  00FC84  E7                 	db	231
   718  00FC85  DB                 	db	219
   719  00FC86  2E                 	db	46
   720  00FC87  E5                 	db	229
   721  00FC88  3C                 	db	60
   722  00FC89  1E                 	db	30
   723  00FC8A  42                 	db	66
   724  00FC8B  A2                 	db	162
   725  00FC8C  0D                 	db	13
   726  00FC8D                     __end_of__npowers_:
   727                           	opt stack 0
   728  00FC8D                     __powers_:
   729                           	opt stack 0
   730  00FC8D  00                 	db	0
   731  00FC8E  80                 	db	128
   732  00FC8F  3F                 	db	63
   733  00FC90  00                 	db	0
   734  00FC91  20                 	db	32
   735  00FC92  41                 	db	65
   736  00FC93  00                 	db	0
   737  00FC94  C8                 	db	200
   738  00FC95  42                 	db	66
   739  00FC96  00                 	db	0
   740  00FC97  7A                 	db	122
   741  00FC98  44                 	db	68
   742  00FC99  40                 	db	64
   743  00FC9A  1C                 	db	28
   744  00FC9B  46                 	db	70
   745  00FC9C  50                 	db	80
   746  00FC9D  C3                 	db	195
   747  00FC9E  47                 	db	71
   748  00FC9F  24                 	db	36
   749  00FCA0  74                 	db	116
   750  00FCA1  49                 	db	73
   751  00FCA2  97                 	db	151
   752  00FCA3  18                 	db	24
   753  00FCA4  4B                 	db	75
   754  00FCA5  BC                 	db	188
   755  00FCA6  BE                 	db	190
   756  00FCA7  4C                 	db	76
   757  00FCA8  6B                 	db	107
   758  00FCA9  6E                 	db	110
   759  00FCAA  4E                 	db	78
   760  00FCAB  03                 	db	3
   761  00FCAC  15                 	db	21
   762  00FCAD  50                 	db	80
   763  00FCAE  79                 	db	121
   764  00FCAF  AD                 	db	173
   765  00FCB0  60                 	db	96
   766  00FCB1  F3                 	db	243
   767  00FCB2  49                 	db	73
   768  00FCB3  71                 	db	113
   769  00FCB4                     __end_of__powers_:
   770                           	opt stack 0
   771  0000                     _PORTAbits	set	3968
   772  0000                     _PORTBbits	set	3969
   773  0000                     _PORTCbits	set	3970
   774  0000                     _PORTD	set	3971
   775  0000                     _PORTDbits	set	3971
   776  0000                     _PORTEbits	set	3972
   777  0000                     _TRISA	set	3986
   778  0000                     _TRISB	set	3987
   779  0000                     _TRISC	set	3988
   780  0000                     _TRISCbits	set	3988
   781  0000                     _TRISD	set	3989
   782  0000                     _TRISE	set	3990
   783  0000                     _ADCON0	set	4034
   784  0000                     _ADCON0bits	set	4034
   785  0000                     _ADCON1	set	4033
   786  0000                     _ADCON2	set	4032
   787  0000                     _ADRESH	set	4036
   788  0000                     _ADRESL	set	4035
   789  0000                     _CCP2CON	set	4026
   790  0000                     _CCPR2L	set	4027
   791  0000                     _OSCCON	set	4051
   792  0000                     _PIE1bits	set	3997
   793  0000                     _PIR1bits	set	3998
   794  0000                     _PIR2bits	set	4001
   795  0000                     _PR2	set	4043
   796  0000                     _RCSTA	set	4011
   797  0000                     _RCSTAbits	set	4011
   798  0000                     _SPBRG	set	4015
   799  0000                     _SPBRGH	set	4016
   800  0000                     _SSPBUF	set	4041
   801  0000                     _SSPCON1	set	4038
   802  0000                     _SSPSTAT	set	4039
   803  0000                     _SSPSTATbits	set	4039
   804  0000                     _T2CON	set	4042
   805  0000                     _T3CON	set	4017
   806  0000                     _T3CONbits	set	4017
   807  0000                     _TXREG	set	4013
   808  0000                     _TXSTA	set	4012
   809  0000                     _TXSTAbits	set	4012
   810  0000                     _TRMT	set	32097
   811  0000                     _T0CON	set	4053
   812  0000                     _T0CONbits	set	4053
   813  0000                     _TMR0H	set	4055
   814  0000                     _TMR0L	set	4054
   815  0000                     _INTCONbits	set	4082
   816  0000                     _RBPU	set	32655
   817  00FCB4                     STR_12:
   818  00FCB4  45                 	db	69	;'E'
   819  00FCB5  57                 	db	87	;'W'
   820  00FCB6  50                 	db	80	;'P'
   821  00FCB7  20                 	db	32
   822  00FCB8  45                 	db	69	;'E'
   823  00FCB9  57                 	db	87	;'W'
   824  00FCBA  4C                 	db	76	;'L'
   825  00FCBB  54                 	db	84	;'T'
   826  00FCBC  20                 	db	32
   827  00FCBD  4E                 	db	78	;'N'
   828  00FCBE  53                 	db	83	;'S'
   829  00FCBF  50                 	db	80	;'P'
   830  00FCC0  20                 	db	32
   831  00FCC1  4E                 	db	78	;'N'
   832  00FCC2  53                 	db	83	;'S'
   833  00FCC3  4C                 	db	76	;'L'
   834  00FCC4  54                 	db	84	;'T'
   835  00FCC5  20                 	db	32
   836  00FCC6  4D                 	db	77	;'M'
   837  00FCC7  44                 	db	68	;'D'
   838  00FCC8  00                 	db	0
   839  00FCC9                     STR_1:
   840  00FCC9  45                 	db	69	;'E'
   841  00FCCA  43                 	db	67	;'C'
   842  00FCCB  45                 	db	69	;'E'
   843  00FCCC  33                 	db	51	;'3'
   844  00FCCD  33                 	db	51	;'3'
   845  00FCCE  30                 	db	48	;'0'
   846  00FCCF  31                 	db	49	;'1'
   847  00FCD0  4C                 	db	76	;'L'
   848  00FCD1  20                 	db	32
   849  00FCD2  46                 	db	70	;'F'
   850  00FCD3  61                 	db	97	;'a'
   851  00FCD4  6C                 	db	108	;'l'
   852  00FCD5  6C                 	db	108	;'l'
   853  00FCD6  20                 	db	32
   854  00FCD7  32                 	db	50	;'2'
   855  00FCD8  32                 	db	50	;'2'
   856  00FCD9  2D                 	db	45
   857  00FCDA  53                 	db	83	;'S'
   858  00FCDB  31                 	db	49	;'1'
   859  00FCDC  00                 	db	0
   860  00FCDD                     STR_15:
   861  00FCDD  76                 	db	118	;'v'
   862  00FCDE  6F                 	db	111	;'o'
   863  00FCDF  6C                 	db	108	;'l'
   864  00FCE0  74                 	db	116	;'t'
   865  00FCE1  73                 	db	115	;'s'
   866  00FCE2  20                 	db	32
   867  00FCE3  61                 	db	97	;'a'
   868  00FCE4  72                 	db	114	;'r'
   869  00FCE5  65                 	db	101	;'e'
   870  00FCE6  20                 	db	32
   871  00FCE7  25                 	db	37
   872  00FCE8  30                 	db	48	;'0'
   873  00FCE9  2E                 	db	46
   874  00FCEA  33                 	db	51	;'3'
   875  00FCEB  66                 	db	102	;'f'
   876  00FCEC  0D                 	db	13
   877  00FCED  0A                 	db	10
   878  00FCEE  0A                 	db	10
   879  00FCEF  00                 	db	0
   880  00FCF0                     STR_8:
   881  00FCF0  4E                 	db	78	;'N'
   882  00FCF1  4F                 	db	79	;'O'
   883  00FCF2  52                 	db	82	;'R'
   884  00FCF3  54                 	db	84	;'T'
   885  00FCF4  48                 	db	72	;'H'
   886  00FCF5  2F                 	db	47
   887  00FCF6  53                 	db	83	;'S'
   888  00FCF7  4F                 	db	79	;'O'
   889  00FCF8  55                 	db	85	;'U'
   890  00FCF9  54                 	db	84	;'T'
   891  00FCFA  48                 	db	72	;'H'
   892  00FCFB  00                 	db	0
   893  00FCFC                     STR_6:
   894  00FCFC  45                 	db	69	;'E'
   895  00FCFD  41                 	db	65	;'A'
   896  00FCFE  53                 	db	83	;'S'
   897  00FCFF  54                 	db	84	;'T'
   898  00FD00  2F                 	db	47
   899  00FD01  57                 	db	87	;'W'
   900  00FD02  45                 	db	69	;'E'
   901  00FD03  53                 	db	83	;'S'
   902  00FD04  54                 	db	84	;'T'
   903  00FD05  00                 	db	0
   904  00FD06                     STR_9:
   905  00FD06  4E                 	db	78	;'N'
   906  00FD07  2F                 	db	47
   907  00FD08  53                 	db	83	;'S'
   908  00FD09  20                 	db	32
   909  00FD0A  4C                 	db	76	;'L'
   910  00FD0B  54                 	db	84	;'T'
   911  00FD0C  00                 	db	0
   912  00FD0D                     STR_7:
   913  00FD0D  45                 	db	69	;'E'
   914  00FD0E  2F                 	db	47
   915  00FD0F  57                 	db	87	;'W'
   916  00FD10  20                 	db	32
   917  00FD11  4C                 	db	76	;'L'
   918  00FD12  54                 	db	84	;'T'
   919  00FD13  00                 	db	0
   920  00FD14                     STR_2:
   921  00FD14  4D                 	db	77	;'M'
   922  00FD15  6F                 	db	111	;'o'
   923  00FD16  64                 	db	100	;'d'
   924  00FD17  65                 	db	101	;'e'
   925  00FD18  3A                 	db	58	;':'
   926  00FD19  00                 	db	0
   927  00FD1A                     STR_3:
   928  00FD1A  46                 	db	70	;'F'
   929  00FD1B  52                 	db	82	;'R'
   930  00FD1C  3A                 	db	58	;':'
   931  00FD1D  00                 	db	0
   932  00FD1E                     STR_4:
   933  00FD1E  46                 	db	70	;'F'
   934  00FD1F  53                 	db	83	;'S'
   935  00FD20  3A                 	db	58	;':'
   936  00FD21  00                 	db	0
   937  00FD22                     STR_11:
   938  00FD22  50                 	db	80	;'P'
   939  00FD23  4E                 	db	78	;'N'
   940  00FD24  53                 	db	83	;'S'
   941  00FD25  00                 	db	0
   942  00FD26                     STR_10:
   943  00FD26  50                 	db	80	;'P'
   944  00FD27  45                 	db	69	;'E'
   945  00FD28  57                 	db	87	;'W'
   946  00FD29  00                 	db	0
   947  00FD2A                     STR_14:
   948  00FD2A  20                 	db	32
   949  00FD2B  00                 	db	0
   950  00FD2C                     STR_5:
   951  00FD2C  2A                 	db	42
   952  00FD2D  00                 	db	0
   953  0000                     
   954                           ; #config settings
   955  00FD2E  00                 	db	0	; dummy byte at the end
   956  0000                     
   957                           	psect	cinit
   958  00C536                     __pcinit:
   959                           	opt stack 0
   960  00C536                     start_initialization:
   961                           	opt stack 0
   962  00C536                     __initialization:
   963                           	opt stack 0
   964                           
   965                           ; Clear objects allocated to BANK0 (38 bytes)
   966  00C536  EE00  F0A9         	lfsr	0,__pbssBANK0
   967  00C53A  0E26               	movlw	38
   968  00C53C                     clear_0:
   969  00C53C  6AEE               	clrf	postinc0,c
   970  00C53E  06E8               	decf	wreg,f,c
   971  00C540  E1FD               	bnz	clear_0
   972                           
   973                           ; Clear objects allocated to COMRAM (14 bytes)
   974  00C542  EE00  F06D         	lfsr	0,__pbssCOMRAM
   975  00C546  0E0E               	movlw	14
   976  00C548                     clear_1:
   977  00C548  6AEE               	clrf	postinc0,c
   978  00C54A  06E8               	decf	wreg,f,c
   979  00C54C  E1FD               	bnz	clear_1
   980                           
   981                           ; Initialize objects allocated to BANK0 (41 bytes)
   982                           ; load TBLPTR registers with __pidataBANK0
   983  00C54E  0E7B               	movlw	low __pidataBANK0
   984  00C550  6EF6               	movwf	tblptrl,c
   985  00C552  0EC0               	movlw	high __pidataBANK0
   986  00C554  6EF7               	movwf	tblptrh,c
   987  00C556  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   988  00C558  6EF8               	movwf	tblptru,c
   989  00C55A  EE00  F080         	lfsr	0,__pdataBANK0
   990  00C55E  EE10 F029          	lfsr	1,41
   991  00C562                     copy_data0:
   992  00C562  0009               	tblrd		*+
   993  00C564  CFF5 FFEE          	movff	tablat,postinc0
   994  00C568  50E5               	movf	postdec1,w,c
   995  00C56A  50E1               	movf	fsr1l,w,c
   996  00C56C  E1FA               	bnz	copy_data0
   997                           
   998                           ; Initialize objects allocated to COMRAM (5 bytes)
   999                           ; load TBLPTR registers with __pidataCOMRAM
  1000  00C56E  0EE3               	movlw	low __pidataCOMRAM
  1001  00C570  6EF6               	movwf	tblptrl,c
  1002  00C572  0EBE               	movlw	high __pidataCOMRAM
  1003  00C574  6EF7               	movwf	tblptrh,c
  1004  00C576  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1005  00C578  6EF8               	movwf	tblptru,c
  1006  00C57A  EE00  F07B         	lfsr	0,__pdataCOMRAM
  1007  00C57E  EE10 F005          	lfsr	1,5
  1008  00C582                     copy_data1:
  1009  00C582  0009               	tblrd		*+
  1010  00C584  CFF5 FFEE          	movff	tablat,postinc0
  1011  00C588  50E5               	movf	postdec1,w,c
  1012  00C58A  50E1               	movf	fsr1l,w,c
  1013  00C58C  E1FA               	bnz	copy_data1
  1014  00C58E                     end_of_initialization:
  1015                           	opt stack 0
  1016  00C58E                     __end_of__initialization:
  1017                           	opt stack 0
  1018  00C58E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1019  00C590  6EF8               	movwf	tblptru,c
  1020  00C592  0100               	movlb	0
  1021  00C594  EF55  F065         	goto	_main	;jump to C main() function
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	bssCOMRAM
  1032  00006D                     __pbssCOMRAM:
  1033                           	opt stack 0
  1034  00006D                     _txt:
  1035                           	opt stack 0
  1036  00006D                     	ds	2
  1037  00006F                     _Count:
  1038                           	opt stack 0
  1039  00006F                     	ds	1
  1040  000070                     _PED_Count:
  1041                           	opt stack 0
  1042  000070                     	ds	1
  1043  000071                     _SW_EWLT:
  1044                           	opt stack 0
  1045  000071                     	ds	1
  1046  000072                     _SW_EWPED:
  1047                           	opt stack 0
  1048  000072                     	ds	1
  1049  000073                     _SW_MODE:
  1050                           	opt stack 0
  1051  000073                     	ds	1
  1052  000074                     _SW_NSLT:
  1053                           	opt stack 0
  1054  000074                     	ds	1
  1055  000075                     _SW_NSPED:
  1056                           	opt stack 0
  1057  000075                     	ds	1
  1058  000076                     __tft_type:
  1059                           	opt stack 0
  1060  000076                     	ds	1
  1061  000077                     _colstart:
  1062                           	opt stack 0
  1063  000077                     	ds	1
  1064  000078                     _dir:
  1065                           	opt stack 0
  1066  000078                     	ds	1
  1067  000079                     _direction:
  1068                           	opt stack 0
  1069  000079                     	ds	1
  1070  00007A                     _rowstart:
  1071                           	opt stack 0
  1072  00007A                     	ds	1
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           postdec1	equ	0xFE5
  1080                           fsr1l	equ	0xFE1
  1081                           
  1082                           	psect	dataCOMRAM
  1083  00007B                     __pdataCOMRAM:
  1084                           	opt stack 0
  1085  00007B                     _wrap:
  1086                           	opt stack 0
  1087  00007B                     	ds	1
  1088  00007C                     _SW_EWLT_Txt:
  1089                           	opt stack 0
  1090  00007C                     	ds	2
  1091  00007E                     _SW_EWPED_Txt:
  1092                           	opt stack 0
  1093  00007E                     	ds	2
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1l	equ	0xFE1
  1102                           
  1103                           	psect	bssBANK0
  1104  0000A9                     __pbssBANK0:
  1105                           	opt stack 0
  1106  0000A9                     _volts:
  1107                           	opt stack 0
  1108  0000A9                     	ds	3
  1109  0000AC                     _MODE:
  1110                           	opt stack 0
  1111  0000AC                     	ds	2
  1112  0000AE                     _nbr:
  1113                           	opt stack 0
  1114  0000AE                     	ds	2
  1115  0000B0                     _buffer:
  1116                           	opt stack 0
  1117  0000B0                     	ds	31
  1118                           tblptru	equ	0xFF8
  1119                           tblptrh	equ	0xFF7
  1120                           tblptrl	equ	0xFF6
  1121                           tablat	equ	0xFF5
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           postdec1	equ	0xFE5
  1125                           fsr1l	equ	0xFE1
  1126                           
  1127                           	psect	dataBANK0
  1128  000080                     __pdataBANK0:
  1129                           	opt stack 0
  1130  000080                     _array:
  1131                           	opt stack 0
  1132  000080                     	ds	11
  1133  00008B                     _EWLT_Count:
  1134                           	opt stack 0
  1135  00008B                     	ds	3
  1136  00008E                     _EW_Count:
  1137                           	opt stack 0
  1138  00008E                     	ds	3
  1139  000091                     _NSLT_Count:
  1140                           	opt stack 0
  1141  000091                     	ds	3
  1142  000094                     _NS_Count:
  1143                           	opt stack 0
  1144  000094                     	ds	3
  1145  000097                     _PED_EW_Count:
  1146                           	opt stack 0
  1147  000097                     	ds	3
  1148  00009A                     _PED_NS_Count:
  1149                           	opt stack 0
  1150  00009A                     	ds	3
  1151  00009D                     _Act_Mode_Txt:
  1152                           	opt stack 0
  1153  00009D                     	ds	2
  1154  00009F                     _FlashingR_Txt:
  1155                           	opt stack 0
  1156  00009F                     	ds	2
  1157  0000A1                     _FlashingS_Txt:
  1158                           	opt stack 0
  1159  0000A1                     	ds	2
  1160  0000A3                     _SW_MODE_Txt:
  1161                           	opt stack 0
  1162  0000A3                     	ds	2
  1163  0000A5                     _SW_NSLT_Txt:
  1164                           	opt stack 0
  1165  0000A5                     	ds	2
  1166  0000A7                     _SW_NSPED_Txt:
  1167                           	opt stack 0
  1168  0000A7                     	ds	2
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1l	equ	0xFE1
  1177                           
  1178                           	psect	cstackCOMRAM
  1179  000001                     __pcstackCOMRAM:
  1180                           	opt stack 0
  1181  000001                     ??_isdigit:
  1182  000001                     ?_strlen:
  1183                           	opt stack 0
  1184  000001                     ?_get_full_ADC:
  1185                           	opt stack 0
  1186  000001                     ?___awmod:
  1187                           	opt stack 0
  1188  000001                     ?___ftpack:
  1189                           	opt stack 0
  1190  000001                     ?___ftneg:
  1191                           	opt stack 0
  1192  000001                     ?__tdiv_to_l_:
  1193                           	opt stack 0
  1194  000001                     ?__div_to_l_:
  1195                           	opt stack 0
  1196  000001                     ?___lldiv:
  1197                           	opt stack 0
  1198  000001                     ?___llmod:
  1199                           	opt stack 0
  1200  000001                     spiwrite@x:
  1201                           	opt stack 0
  1202  000001                     putch@c:
  1203                           	opt stack 0
  1204  000001                     Select_ADC_Channel@channel:
  1205                           	opt stack 0
  1206  000001                     OpenUSART@spbrg:
  1207                           	opt stack 0
  1208  000001                     ___awmod@dividend:
  1209                           	opt stack 0
  1210  000001                     strcpy@to:
  1211                           	opt stack 0
  1212  000001                     strlen@s:
  1213                           	opt stack 0
  1214  000001                     __div_to_l_@f1:
  1215                           	opt stack 0
  1216  000001                     ___ftpack@arg:
  1217                           	opt stack 0
  1218  000001                     __tdiv_to_l_@f1:
  1219                           	opt stack 0
  1220  000001                     ___ftge@ff1:
  1221                           	opt stack 0
  1222  000001                     ___ftneg@f1:
  1223                           	opt stack 0
  1224  000001                     ___lldiv@dividend:
  1225                           	opt stack 0
  1226  000001                     ___llmod@dividend:
  1227                           	opt stack 0
  1228                           
  1229                           ; 4 bytes @ 0x0
  1230  000001                     	ds	1
  1231  000002                     spiwrite@spidata:
  1232                           	opt stack 0
  1233  000002                     _isdigit$2080:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x1
  1237  000002                     	ds	1
  1238  000003                     ??_strlen:
  1239  000003                     ??_get_full_ADC:
  1240  000003                     write_command@cmd_:
  1241                           	opt stack 0
  1242  000003                     write_data@data_:
  1243                           	opt stack 0
  1244  000003                     OpenUSART@config:
  1245                           	opt stack 0
  1246  000003                     isdigit@c:
  1247                           	opt stack 0
  1248  000003                     ___awmod@divisor:
  1249                           	opt stack 0
  1250  000003                     strcpy@from:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x2
  1254  000003                     	ds	1
  1255  000004                     setAddrWindow@y0:
  1256                           	opt stack 0
  1257  000004                     ___ftpack@exp:
  1258                           	opt stack 0
  1259  000004                     __div_to_l_@f2:
  1260                           	opt stack 0
  1261  000004                     __tdiv_to_l_@f2:
  1262                           	opt stack 0
  1263  000004                     ___ftge@ff2:
  1264                           	opt stack 0
  1265                           
  1266                           ; 3 bytes @ 0x3
  1267  000004                     	ds	1
  1268  000005                     setAddrWindow@x1:
  1269                           	opt stack 0
  1270  000005                     ___awmod@counter:
  1271                           	opt stack 0
  1272  000005                     ___ftpack@sign:
  1273                           	opt stack 0
  1274  000005                     get_full_ADC@result:
  1275                           	opt stack 0
  1276  000005                     strcpy@cp:
  1277                           	opt stack 0
  1278  000005                     strlen@cp:
  1279                           	opt stack 0
  1280  000005                     ___lldiv@divisor:
  1281                           	opt stack 0
  1282  000005                     ___llmod@divisor:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x4
  1286  000005                     	ds	1
  1287  000006                     ??___ftpack:
  1288  000006                     setAddrWindow@y1:
  1289                           	opt stack 0
  1290  000006                     ___awmod@sign:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x5
  1294  000006                     	ds	1
  1295  000007                     ??__tdiv_to_l_:
  1296  000007                     ??___ftge:
  1297  000007                     ?___awdiv:
  1298                           	opt stack 0
  1299  000007                     setAddrWindow@x0:
  1300                           	opt stack 0
  1301  000007                     ___awdiv@dividend:
  1302                           	opt stack 0
  1303  000007                     __div_to_l_@quot:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x6
  1307  000007                     	ds	1
  1308  000008                     drawPixel@y:
  1309                           	opt stack 0
  1310  000008                     drawFastVLine@y:
  1311                           	opt stack 0
  1312  000008                     fillRectangle@y:
  1313                           	opt stack 0
  1314  000008                     drawFastHLine@y:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x7
  1318  000008                     	ds	1
  1319  000009                     ?___lltoft:
  1320                           	opt stack 0
  1321  000009                     drawFastVLine@h:
  1322                           	opt stack 0
  1323  000009                     fillRectangle@w:
  1324                           	opt stack 0
  1325  000009                     drawFastHLine@w:
  1326                           	opt stack 0
  1327  000009                     ___llmod@counter:
  1328                           	opt stack 0
  1329  000009                     drawPixel@color:
  1330                           	opt stack 0
  1331  000009                     ___awdiv@divisor:
  1332                           	opt stack 0
  1333  000009                     ___lldiv@quotient:
  1334                           	opt stack 0
  1335  000009                     ___lltoft@c:
  1336                           	opt stack 0
  1337                           
  1338                           ; 4 bytes @ 0x8
  1339  000009                     	ds	1
  1340  00000A                     fillRectangle@h:
  1341                           	opt stack 0
  1342  00000A                     drawFastVLine@color:
  1343                           	opt stack 0
  1344  00000A                     drawFastHLine@color:
  1345                           	opt stack 0
  1346  00000A                     __tdiv_to_l_@quot:
  1347                           	opt stack 0
  1348                           
  1349                           ; 4 bytes @ 0x9
  1350  00000A                     	ds	1
  1351  00000B                     drawPixel@x:
  1352                           	opt stack 0
  1353  00000B                     ___awdiv@counter:
  1354                           	opt stack 0
  1355  00000B                     __div_to_l_@cntr:
  1356                           	opt stack 0
  1357  00000B                     fillRectangle@color:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0xA
  1361  00000B                     	ds	1
  1362  00000C                     ??_drawFastVLine:
  1363  00000C                     ??_drawFastHLine:
  1364  00000C                     ___awdiv@sign:
  1365                           	opt stack 0
  1366  00000C                     __div_to_l_@exp1:
  1367                           	opt stack 0
  1368  00000C                     drawCircle@x0:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0xB
  1372  00000C                     	ds	1
  1373  00000D                     ??_fillRectangle:
  1374  00000D                     ??___lltoft:
  1375  00000D                     ___lldiv@counter:
  1376                           	opt stack 0
  1377  00000D                     ___awdiv@quotient:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0xC
  1381  00000D                     	ds	1
  1382  00000E                     __tdiv_to_l_@cntr:
  1383                           	opt stack 0
  1384  00000E                     drawCircle@y0:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0xD
  1388  00000E                     	ds	1
  1389  00000F                     ?___wmul:
  1390                           	opt stack 0
  1391  00000F                     __tdiv_to_l_@exp1:
  1392                           	opt stack 0
  1393  00000F                     ___wmul@multiplier:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0xE
  1397  00000F                     	ds	1
  1398  000010                     drawFastVLine@hi:
  1399                           	opt stack 0
  1400  000010                     drawFastHLine@hi:
  1401                           	opt stack 0
  1402  000010                     drawCircle@r:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0xF
  1406  000010                     	ds	1
  1407  000011                     drawFastVLine@lo:
  1408                           	opt stack 0
  1409  000011                     fillRectangle@hi:
  1410                           	opt stack 0
  1411  000011                     drawFastHLine@lo:
  1412                           	opt stack 0
  1413  000011                     ___lltoft@exp:
  1414                           	opt stack 0
  1415  000011                     ___wmul@multiplicand:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x10
  1419  000011                     	ds	1
  1420  000012                     drawFastVLine@x:
  1421                           	opt stack 0
  1422  000012                     fillRectangle@lo:
  1423                           	opt stack 0
  1424  000012                     drawFastHLine@x:
  1425                           	opt stack 0
  1426  000012                     drawCircle@color:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x11
  1430  000012                     	ds	1
  1431  000013                     fillRect@y:
  1432                           	opt stack 0
  1433  000013                     fillRectangle@x:
  1434                           	opt stack 0
  1435  000013                     fillCircleHelper@x0:
  1436                           	opt stack 0
  1437  000013                     drawRect@x:
  1438                           	opt stack 0
  1439  000013                     ___wmul@product:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x12
  1443  000013                     	ds	1
  1444  000014                     ??_drawCircle:
  1445  000014                     fillRect@w:
  1446                           	opt stack 0
  1447  000014                     fillScreen@color:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x13
  1451  000014                     	ds	1
  1452  000015                     ?___ftmul:
  1453                           	opt stack 0
  1454  000015                     ?___awtoft:
  1455                           	opt stack 0
  1456  000015                     fillRect@h:
  1457                           	opt stack 0
  1458  000015                     delay_ms@ms:
  1459                           	opt stack 0
  1460  000015                     fillCircleHelper@y0:
  1461                           	opt stack 0
  1462  000015                     drawRect@y:
  1463                           	opt stack 0
  1464  000015                     ___awtoft@c:
  1465                           	opt stack 0
  1466  000015                     ___ftmul@f1:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x14
  1470  000015                     	ds	1
  1471  000016                     fillRect@color:
  1472                           	opt stack 0
  1473  000016                     drawCircle@ddF_x:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x15
  1477  000016                     	ds	1
  1478  000017                     ??_delay_ms:
  1479  000017                     fillCircleHelper@r:
  1480                           	opt stack 0
  1481  000017                     drawRect@w:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x16
  1485  000017                     	ds	1
  1486  000018                     ??_fillRect:
  1487  000018                     ___awtoft@sign:
  1488                           	opt stack 0
  1489  000018                     drawCircle@ddF_y:
  1490                           	opt stack 0
  1491  000018                     ___ftmul@f2:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x17
  1495  000018                     	ds	1
  1496  000019                     ?___ftdiv:
  1497                           	opt stack 0
  1498  000019                     delay_ms@count:
  1499                           	opt stack 0
  1500  000019                     fillCircleHelper@cornername:
  1501                           	opt stack 0
  1502  000019                     drawRect@h:
  1503                           	opt stack 0
  1504  000019                     ___ftdiv@f1:
  1505                           	opt stack 0
  1506                           
  1507                           ; 3 bytes @ 0x18
  1508  000019                     	ds	1
  1509  00001A                     drawCircle@f:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x19
  1513  00001A                     	ds	1
  1514  00001B                     ??___ftmul:
  1515  00001B                     fillRect@x:
  1516                           	opt stack 0
  1517  00001B                     fillCircleHelper@delta:
  1518                           	opt stack 0
  1519  00001B                     drawRect@color:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x1A
  1523  00001B                     	ds	1
  1524  00001C                     fillRect@i:
  1525                           	opt stack 0
  1526  00001C                     drawCircle@x:
  1527                           	opt stack 0
  1528  00001C                     ___ftdiv@f2:
  1529                           	opt stack 0
  1530                           
  1531                           ; 3 bytes @ 0x1B
  1532  00001C                     	ds	1
  1533  00001D                     ??_drawRect:
  1534  00001D                     fillCircleHelper@color:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x1C
  1538  00001D                     	ds	1
  1539  00001E                     drawChar@y:
  1540                           	opt stack 0
  1541  00001E                     ___ftmul@exp:
  1542                           	opt stack 0
  1543  00001E                     drawCircle@y:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x1D
  1547  00001E                     	ds	1
  1548  00001F                     ??___ftdiv:
  1549  00001F                     ??_fillCircleHelper:
  1550  00001F                     drawChar@c:
  1551                           	opt stack 0
  1552  00001F                     ___ftmul@f3_as_product:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x1E
  1556  00001F                     	ds	1
  1557  000020                     drawChar@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x1F
  1561  000020                     	ds	1
  1562  000021                     fillCircleHelper@ddF_x:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x20
  1566  000021                     	ds	1
  1567  000022                     ___ftdiv@cntr:
  1568                           	opt stack 0
  1569  000022                     ___ftmul@cntr:
  1570                           	opt stack 0
  1571  000022                     drawChar@bg:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x21
  1575  000022                     	ds	1
  1576  000023                     ___ftmul@sign:
  1577                           	opt stack 0
  1578  000023                     fillCircleHelper@ddF_y:
  1579                           	opt stack 0
  1580  000023                     ___ftdiv@f3:
  1581                           	opt stack 0
  1582                           
  1583                           ; 3 bytes @ 0x22
  1584  000023                     	ds	1
  1585  000024                     ?_fround:
  1586                           	opt stack 0
  1587  000024                     ?_scale:
  1588                           	opt stack 0
  1589  000024                     drawChar@size:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x23
  1593  000024                     	ds	1
  1594  000025                     drawChar@line:
  1595                           	opt stack 0
  1596  000025                     fillCircleHelper@f:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x24
  1600  000025                     	ds	1
  1601  000026                     drawChar@x:
  1602                           	opt stack 0
  1603  000026                     ___ftdiv@exp:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x25
  1607  000026                     	ds	1
  1608  000027                     drawChar@j:
  1609                           	opt stack 0
  1610  000027                     ___ftdiv@sign:
  1611                           	opt stack 0
  1612  000027                     fillCircleHelper@x:
  1613                           	opt stack 0
  1614  000027                     _fround$2384:
  1615                           	opt stack 0
  1616  000027                     _scale$2385:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x26
  1620  000027                     	ds	1
  1621  000028                     drawChar@i:
  1622                           	opt stack 0
  1623                           
  1624                           ; 1 bytes @ 0x27
  1625  000028                     	ds	1
  1626  000029                     drawtext@y:
  1627                           	opt stack 0
  1628  000029                     fillCircleHelper@y:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x28
  1632  000029                     	ds	1
  1633  00002A                     scale@scl:
  1634                           	opt stack 0
  1635  00002A                     drawtext@_text:
  1636                           	opt stack 0
  1637  00002A                     _fround$2383:
  1638                           	opt stack 0
  1639                           
  1640                           ; 3 bytes @ 0x29
  1641  00002A                     	ds	1
  1642  00002B                     ?___fttol:
  1643                           	opt stack 0
  1644  00002B                     fillCircle@x0:
  1645                           	opt stack 0
  1646  00002B                     ___fttol@f1:
  1647                           	opt stack 0
  1648                           
  1649                           ; 3 bytes @ 0x2A
  1650  00002B                     	ds	1
  1651  00002C                     drawtext@color:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x2B
  1655  00002C                     	ds	1
  1656  00002D                     fround@prec:
  1657                           	opt stack 0
  1658  00002D                     fillCircle@y0:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x2C
  1662  00002D                     	ds	1
  1663  00002E                     ?___ftadd:
  1664                           	opt stack 0
  1665  00002E                     drawtext@bg:
  1666                           	opt stack 0
  1667  00002E                     ___ftadd@f1:
  1668                           	opt stack 0
  1669                           
  1670                           ; 3 bytes @ 0x2D
  1671  00002E                     	ds	1
  1672  00002F                     ??___fttol:
  1673  00002F                     fillCircle@r:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x2E
  1677  00002F                     	ds	1
  1678  000030                     drawtext@size:
  1679                           	opt stack 0
  1680                           
  1681                           ; 1 bytes @ 0x2F
  1682  000030                     	ds	1
  1683  000031                     ??_drawtext:
  1684  000031                     fillCircle@color:
  1685                           	opt stack 0
  1686  000031                     ___ftadd@f2:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x30
  1690  000031                     	ds	2
  1691  000033                     update_LCD_color@color:
  1692                           	opt stack 0
  1693  000033                     drawtext@textsize:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x32
  1697  000033                     	ds	1
  1698  000034                     ??___ftadd:
  1699  000034                     update_LCD_color@direction:
  1700                           	opt stack 0
  1701  000034                     ___fttol@sign1:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x33
  1705  000034                     	ds	1
  1706  000035                     drawtext@x:
  1707                           	opt stack 0
  1708  000035                     update_LCD_color@Circle_Y:
  1709                           	opt stack 0
  1710  000035                     ___fttol@lval:
  1711                           	opt stack 0
  1712                           
  1713                           ; 4 bytes @ 0x34
  1714  000035                     	ds	1
  1715  000036                     Set_NS@color:
  1716                           	opt stack 0
  1717  000036                     Set_NSLT@color:
  1718                           	opt stack 0
  1719  000036                     Set_EW@color:
  1720                           	opt stack 0
  1721  000036                     Set_EWLT@color:
  1722                           	opt stack 0
  1723  000036                     drawtext@i:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x35
  1727  000036                     	ds	1
  1728  000037                     ___ftadd@sign:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x36
  1732  000037                     	ds	1
  1733  000038                     drawtext@cursor_y:
  1734                           	opt stack 0
  1735  000038                     ___ftadd@exp2:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x37
  1739  000038                     	ds	1
  1740  000039                     drawtext@cursor_x:
  1741                           	opt stack 0
  1742  000039                     ___ftadd@exp1:
  1743                           	opt stack 0
  1744  000039                     ___fttol@exp1:
  1745                           	opt stack 0
  1746                           
  1747                           ; 1 bytes @ 0x38
  1748  000039                     	ds	1
  1749  00003A                     ?___ftsub:
  1750                           	opt stack 0
  1751  00003A                     update_LCD_count@count:
  1752                           	opt stack 0
  1753  00003A                     update_LCD_PED_Count@count:
  1754                           	opt stack 0
  1755  00003A                     ___ftsub@f1:
  1756                           	opt stack 0
  1757                           
  1758                           ; 3 bytes @ 0x39
  1759  00003A                     	ds	1
  1760  00003B                     ??_update_LCD_count:
  1761  00003B                     ??_update_LCD_PED_Count:
  1762                           
  1763                           ; 0 bytes @ 0x3A
  1764  00003B                     	ds	1
  1765  00003C                     update_LCD_count@direction:
  1766                           	opt stack 0
  1767  00003C                     update_LCD_PED_Count@direction:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x3B
  1771  00003C                     	ds	1
  1772  00003D                     PED_Control@Num_Sec:
  1773                           	opt stack 0
  1774  00003D                     ___ftsub@f2:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x3C
  1778  00003D                     	ds	1
  1779  00003E                     PED_Control@i:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x3D
  1783  00003E                     	ds	2
  1784  000040                     ?_printf:
  1785                           	opt stack 0
  1786  000040                     printf@f:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x3F
  1790  000040                     	ds	5
  1791  000045                     ??_printf:
  1792                           
  1793                           ; 0 bytes @ 0x44
  1794  000045                     	ds	6
  1795  00004B                     _printf$2386:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x4A
  1799  00004B                     	ds	3
  1800  00004E                     printf@ap:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x4D
  1804  00004E                     	ds	2
  1805  000050                     printf@val:
  1806                           	opt stack 0
  1807                           
  1808                           ; 4 bytes @ 0x4F
  1809  000050                     	ds	4
  1810  000054                     printf@tmpval:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x53
  1814  000054                     	ds	4
  1815  000058                     printf@exp:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x57
  1819  000058                     	ds	2
  1820  00005A                     printf@flag:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x59
  1824  00005A                     	ds	2
  1825  00005C                     printf@width:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x5B
  1829  00005C                     	ds	2
  1830  00005E                     printf@fval:
  1831                           	opt stack 0
  1832                           
  1833                           ; 3 bytes @ 0x5D
  1834  00005E                     	ds	3
  1835  000061                     printf@prec:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x60
  1839  000061                     	ds	2
  1840  000063                     printf@c:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x62
  1844  000063                     	ds	1
  1845  000064                     update_LCD_misc@nStep:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x63
  1849  000064                     	ds	2
  1850  000066                     update_LCD_misc@volts:
  1851                           	opt stack 0
  1852                           
  1853                           ; 3 bytes @ 0x65
  1854  000066                     	ds	3
  1855  000069                     WAIT_N_SEC@seconds:
  1856                           	opt stack 0
  1857                           
  1858                           ; 1 bytes @ 0x68
  1859  000069                     	ds	1
  1860  00006A                     WAIT_N_SEC@i:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x69
  1864  00006A                     	ds	1
  1865  00006B                     main@nStep:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x6A
  1869  00006B                     	ds	2
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           
  1879 ;;
  1880 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1881 ;;
  1882 ;; *************** function _main *****************
  1883 ;; Defined at:
  1884 ;;		line 293 in file "Lab8p1.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  nStep           2  106[COMRAM] int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;		None               void
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;Total ram usage:        2 bytes
  1903 ;; Hardware stack levels required when called:   11
  1904 ;; This function calls:
  1905 ;;		_Day_Mode
  1906 ;;		_Init_ADC
  1907 ;;		_Init_TRIS
  1908 ;;		_Initialize_Screen
  1909 ;;		_Night_Mode
  1910 ;;		_Select_ADC_Channel
  1911 ;;		___awtoft
  1912 ;;		___ftdiv
  1913 ;;		___ftge
  1914 ;;		___wmul
  1915 ;;		_get_full_ADC
  1916 ;;		_init_UART
  1917 ;; This function is called by:
  1918 ;;		Startup code after reset
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text0
  1923  00CAAA                     __ptext0:
  1924                           	opt stack 0
  1925  00CAAA                     _main:
  1926                           	opt stack 20
  1927                           
  1928                           ;Lab8p1.c: 295: Init_ADC();
  1929                           
  1930                           ;incstack = 0
  1931  00CAAA  EC85  F05F         	call	_Init_ADC	;wreg free
  1932                           
  1933                           ;Lab8p1.c: 296: Init_TRIS();
  1934  00CAAE  ECCD  F05F         	call	_Init_TRIS	;wreg free
  1935                           
  1936                           ;Lab8p1.c: 297: init_UART ();
  1937  00CAB2  ECB8  F05F         	call	_init_UART	;wreg free
  1938                           
  1939                           ;Lab8p1.c: 298: Select_ADC_Channel(0);
  1940  00CAB6  0E00               	movlw	0
  1941  00CAB8  EC78  F05F         	call	_Select_ADC_Channel
  1942                           
  1943                           ;Lab8p1.c: 300: OSCCON = 0x70;
  1944  00CABC  0E70               	movlw	112
  1945  00CABE  6ED3               	movwf	4051,c	;volatile
  1946                           
  1947                           ;Lab8p1.c: 301: RBPU = 0;
  1948  00CAC0  9EF1               	bcf	intcon2,7,c	;volatile
  1949                           
  1950                           ;Lab8p1.c: 302: Initialize_Screen();
  1951  00CAC2  EC06  F075         	call	_Initialize_Screen	;wreg free
  1952  00CAC6  D000               	goto	l5478
  1953  00CAC8                     l5478:
  1954                           
  1955                           ;Lab8p1.c: 305: {
  1956                           ;Lab8p1.c: 306: int nStep = get_full_ADC ();
  1957  00CAC8  EC16  F060         	call	_get_full_ADC	;wreg free
  1958  00CACC  C001  F06B         	movff	?_get_full_ADC,main@nStep
  1959  00CAD0  C002  F06C         	movff	?_get_full_ADC+1,main@nStep+1
  1960                           
  1961                           ;Lab8p1.c: 307: volts = nStep*5/1024.0;
  1962  00CAD4  C06B  F00F         	movff	main@nStep,___wmul@multiplier
  1963  00CAD8  C06C  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1964  00CADC  0E00               	movlw	0
  1965  00CADE  6E12               	movwf	___wmul@multiplicand+1,c
  1966  00CAE0  0E05               	movlw	5
  1967  00CAE2  6E11               	movwf	___wmul@multiplicand,c
  1968  00CAE4  EC29  F060         	call	___wmul	;wreg free
  1969  00CAE8  C00F  F015         	movff	?___wmul,___awtoft@c
  1970  00CAEC  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  1971  00CAF0  ECC7  F060         	call	___awtoft	;wreg free
  1972  00CAF4  C015  F019         	movff	?___awtoft,___ftdiv@f1
  1973  00CAF8  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  1974  00CAFC  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  1975  00CB00  0E00               	movlw	0
  1976  00CB02  6E1C               	movwf	___ftdiv@f2,c
  1977  00CB04  0E80               	movlw	128
  1978  00CB06  6E1D               	movwf	___ftdiv@f2+1,c
  1979  00CB08  0E44               	movlw	68
  1980  00CB0A  6E1E               	movwf	___ftdiv@f2+2,c
  1981  00CB0C  EC9D  F067         	call	___ftdiv	;wreg free
  1982  00CB10  C019  F0A9         	movff	?___ftdiv,_volts
  1983  00CB14  C01A  F0AA         	movff	?___ftdiv+1,_volts+1
  1984  00CB18  C01B  F0AB         	movff	?___ftdiv+2,_volts+2
  1985                           
  1986                           ;Lab8p1.c: 309: if (volts < 2.570)
  1987  00CB1C  C0A9  F001         	movff	_volts,___ftge@ff1
  1988  00CB20  C0AA  F002         	movff	_volts+1,___ftge@ff1+1
  1989  00CB24  C0AB  F003         	movff	_volts+2,___ftge@ff1+2
  1990  00CB28  0E7B               	movlw	123
  1991  00CB2A  6E04               	movwf	___ftge@ff2,c
  1992  00CB2C  0E24               	movlw	36
  1993  00CB2E  6E05               	movwf	___ftge@ff2+1,c
  1994  00CB30  0E40               	movlw	64
  1995  00CB32  6E06               	movwf	___ftge@ff2+2,c
  1996  00CB34  EC0A  F065         	call	___ftge	;wreg free
  1997  00CB38  B0D8               	btfsc	status,0,c
  1998  00CB3A  D003               	goto	l5486
  1999                           
  2000                           ;Lab8p1.c: 310: {
  2001                           ;Lab8p1.c: 311: Day_Mode();
  2002  00CB3C  ECFD  F065         	call	_Day_Mode	;wreg free
  2003                           
  2004                           ;Lab8p1.c: 312: }
  2005  00CB40  D7C3               	goto	l5478
  2006  00CB42                     l5486:
  2007                           
  2008                           ;Lab8p1.c: 313: else
  2009                           ;Lab8p1.c: 314: {
  2010                           ;Lab8p1.c: 315: Night_Mode();
  2011  00CB42  ECA6  F065         	call	_Night_Mode	;wreg free
  2012  00CB46  D7C0               	goto	l5478
  2013  00CB48  EF00  F000         	goto	start
  2014  00CB4C                     __end_of_main:
  2015                           	opt stack 0
  2016                           tblptru	equ	0xFF8
  2017                           tblptrh	equ	0xFF7
  2018                           tblptrl	equ	0xFF6
  2019                           tablat	equ	0xFF5
  2020                           intcon2	equ	0xFF1
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _init_UART *****************
  2028 ;; Defined at:
  2029 ;;		line 278 in file "Lab8p1.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:        0 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		_OpenUSART
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text1
  2058  00BF70                     __ptext1:
  2059                           	opt stack 0
  2060  00BF70                     _init_UART:
  2061                           	opt stack 29
  2062                           
  2063                           ;Lab8p1.c: 280: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  2064                           ;Lab8p1.c: 281: & 0b11111111 & 0b11111111, 25);
  2065                           
  2066                           ;incstack = 0
  2067  00BF70  0E00               	movlw	0
  2068  00BF72  6E02               	movwf	OpenUSART@spbrg+1,c
  2069  00BF74  0E19               	movlw	25
  2070  00BF76  6E01               	movwf	OpenUSART@spbrg,c
  2071  00BF78  0E3C               	movlw	60
  2072  00BF7A  EC37  F063         	call	_OpenUSART
  2073                           
  2074                           ;Lab8p1.c: 282: OSCCON = 0x60;
  2075  00BF7E  0E60               	movlw	96
  2076  00BF80  6ED3               	movwf	4051,c	;volatile
  2077  00BF82  0012               	return		;funcret
  2078  00BF84                     __end_of_init_UART:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon2	equ	0xFF1
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1l	equ	0xFE1
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _OpenUSART *****************
  2092 ;; Defined at:
  2093 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  config          1    wreg     unsigned char 
  2096 ;;  spbrg           2    0[COMRAM] unsigned int 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  config          1    2[COMRAM] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		wreg, status,2
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;Total ram usage:        3 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_init_UART
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text2
  2122  00C66E                     __ptext2:
  2123                           	opt stack 0
  2124  00C66E                     _OpenUSART:
  2125                           	opt stack 29
  2126                           
  2127                           ;incstack = 0
  2128                           ;OpenUSART@config stored from wreg
  2129  00C66E  6E03               	movwf	OpenUSART@config,c
  2130  00C670  0E00               	movlw	0
  2131  00C672  6EAC               	movwf	4012,c	;volatile
  2132  00C674  0E00               	movlw	0
  2133  00C676  6EAB               	movwf	4011,c	;volatile
  2134  00C678  A003               	btfss	OpenUSART@config,0,c
  2135  00C67A  D002               	goto	l4902
  2136  00C67C  88AC               	bsf	4012,4,c	;volatile
  2137  00C67E  D000               	goto	l4902
  2138  00C680                     l4902:
  2139  00C680  A203               	btfss	OpenUSART@config,1,c
  2140  00C682  D003               	goto	l4906
  2141  00C684  8CAC               	bsf	4012,6,c	;volatile
  2142  00C686  8CAB               	bsf	4011,6,c	;volatile
  2143  00C688  D000               	goto	l4906
  2144  00C68A                     l4906:
  2145  00C68A  A403               	btfss	OpenUSART@config,2,c
  2146  00C68C  D002               	goto	l4910
  2147  00C68E  8EAC               	bsf	4012,7,c	;volatile
  2148  00C690  D000               	goto	l4910
  2149  00C692                     l4910:
  2150  00C692  A603               	btfss	OpenUSART@config,3,c
  2151  00C694  D002               	goto	l674
  2152  00C696  88AB               	bsf	4011,4,c	;volatile
  2153  00C698  D002               	goto	l4914
  2154  00C69A                     l674:
  2155  00C69A  8AAB               	bsf	4011,5,c	;volatile
  2156  00C69C  D000               	goto	l4914
  2157  00C69E                     l4914:
  2158  00C69E  B803               	btfsc	OpenUSART@config,4,c
  2159  00C6A0  84AC               	bsf	4012,2,c	;volatile
  2160  00C6A2  989E               	bcf	3998,4,c	;volatile
  2161  00C6A4  AA03               	btfss	OpenUSART@config,5,c
  2162  00C6A6  D002               	goto	l4922
  2163  00C6A8  86AB               	bsf	4011,3,c	;volatile
  2164  00C6AA  D000               	goto	l4922
  2165  00C6AC                     l4922:
  2166  00C6AC  AC03               	btfss	OpenUSART@config,6,c
  2167  00C6AE  D002               	goto	l678
  2168  00C6B0  8A9D               	bsf	3997,5,c	;volatile
  2169  00C6B2  D001               	goto	l679
  2170  00C6B4                     l678:
  2171  00C6B4  9A9D               	bcf	3997,5,c	;volatile
  2172  00C6B6                     l679:
  2173  00C6B6  9A9E               	bcf	3998,5,c	;volatile
  2174  00C6B8  AE03               	btfss	OpenUSART@config,7,c
  2175  00C6BA  D002               	goto	l680
  2176  00C6BC  889D               	bsf	3997,4,c	;volatile
  2177  00C6BE  D001               	goto	l681
  2178  00C6C0                     l680:
  2179  00C6C0  989D               	bcf	3997,4,c	;volatile
  2180  00C6C2                     l681:
  2181  00C6C2  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2182  00C6C6  5002               	movf	OpenUSART@spbrg+1,w,c
  2183  00C6C8  6EB0               	movwf	4016,c	;volatile
  2184  00C6CA  8AAC               	bsf	4012,5,c	;volatile
  2185  00C6CC  8EAB               	bsf	4011,7,c	;volatile
  2186  00C6CE  9C94               	bcf	3988,6,c	;volatile
  2187  00C6D0  8E94               	bsf	3988,7,c	;volatile
  2188  00C6D2  B8AC               	btfsc	4012,4,c	;volatile
  2189  00C6D4  BEAC               	btfsc	4012,7,c	;volatile
  2190  00C6D6  D002               	goto	l683
  2191  00C6D8  8C94               	bsf	3988,6,c	;volatile
  2192  00C6DA  D000               	goto	l683
  2193  00C6DC                     l683:
  2194  00C6DC  0012               	return		;funcret
  2195  00C6DE                     __end_of_OpenUSART:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           intcon2	equ	0xFF1
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postdec1	equ	0xFE5
  2205                           fsr1l	equ	0xFE1
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _Select_ADC_Channel *****************
  2209 ;; Defined at:
  2210 ;;		line 446 in file "Lab8p1.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  channel         1    wreg     unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  channel         1    0[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;		None               void
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, prodl, prodh
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;Total ram usage:        1 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text3
  2238  00BEF0                     __ptext3:
  2239                           	opt stack 0
  2240  00BEF0                     _Select_ADC_Channel:
  2241                           	opt stack 30
  2242                           
  2243                           ;incstack = 0
  2244                           ;Select_ADC_Channel@channel stored from wreg
  2245  00BEF0  6E01               	movwf	Select_ADC_Channel@channel,c
  2246                           
  2247                           ;Lab8p1.c: 448: ADCON0 = channel * 4 + 1;
  2248  00BEF2  5001               	movf	Select_ADC_Channel@channel,w,c
  2249  00BEF4  0D04               	mullw	4
  2250  00BEF6  28F3               	incf	prodl,w,c
  2251  00BEF8  6EC2               	movwf	4034,c	;volatile
  2252  00BEFA  0012               	return		;funcret
  2253  00BEFC                     __end_of_Select_ADC_Channel:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodl	equ	0xFF3
  2260                           intcon2	equ	0xFF1
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           postdec1	equ	0xFE5
  2264                           fsr1l	equ	0xFE1
  2265                           status	equ	0xFD8
  2266                           
  2267 ;; *************** function _Night_Mode *****************
  2268 ;; Defined at:
  2269 ;;		line 379 in file "Lab8p1.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;		None               void
  2276 ;; Registers used:
  2277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;Total ram usage:        0 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:   10
  2290 ;; This function calls:
  2291 ;;		_Set_EW
  2292 ;;		_Set_EWLT
  2293 ;;		_Set_NS
  2294 ;;		_Set_NSLT
  2295 ;;		_WAIT_N_SEC
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text4
  2302  00CB4C                     __ptext4:
  2303                           	opt stack 0
  2304  00CB4C                     _Night_Mode:
  2305                           	opt stack 20
  2306                           
  2307                           ;Lab8p1.c: 381: MODE = 0;
  2308                           
  2309                           ;incstack = 0
  2310  00CB4C  0E00               	movlw	0
  2311  00CB4E  0100               	movlb	0	; () banked
  2312  00CB50  6FAD               	movwf	(_MODE+1)& (0+255),b
  2313  00CB52  0E00               	movlw	0
  2314  00CB54  6FAC               	movwf	_MODE& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;Lab8p1.c: 382: PORTBbits.RB7 = 1;
  2318  00CB56  8E81               	bsf	3969,7,c	;volatile
  2319                           
  2320                           ;Lab8p1.c: 383: Act_Mode_Txt[0] = 'N';
  2321  00CB58  0E4E               	movlw	78
  2322  00CB5A  0100               	movlb	0	; () banked
  2323  00CB5C  6F9D               	movwf	_Act_Mode_Txt& (0+255),b
  2324  00CB5E  D000               	goto	l5190
  2325  00CB60                     l5190:
  2326                           
  2327                           ;Lab8p1.c: 386: {
  2328                           ;Lab8p1.c: 387: Set_NSLT (1);
  2329  00CB60  0E01               	movlw	1
  2330  00CB62  EC89  F061         	call	_Set_NSLT
  2331                           
  2332                           ;Lab8p1.c: 388: Set_EW (1);
  2333  00CB66  0E01               	movlw	1
  2334  00CB68  EC23  F061         	call	_Set_EW
  2335                           
  2336                           ;Lab8p1.c: 389: Set_EWLT (1);
  2337  00CB6C  0E01               	movlw	1
  2338  00CB6E  EC45  F061         	call	_Set_EWLT
  2339                           
  2340                           ;Lab8p1.c: 390: Set_NS (2);
  2341  00CB72  0E02               	movlw	2
  2342  00CB74  EC67  F061         	call	_Set_NS
  2343                           
  2344                           ;Lab8p1.c: 392: WAIT_N_SEC (8);
  2345  00CB78  0E08               	movlw	8
  2346  00CB7A  EC67  F060         	call	_WAIT_N_SEC
  2347                           
  2348                           ;Lab8p1.c: 393: Set_NS (3);
  2349  00CB7E  0E03               	movlw	3
  2350  00CB80  EC67  F061         	call	_Set_NS
  2351                           
  2352                           ;Lab8p1.c: 395: WAIT_N_SEC (2);
  2353  00CB84  0E02               	movlw	2
  2354  00CB86  EC67  F060         	call	_WAIT_N_SEC
  2355                           
  2356                           ;Lab8p1.c: 396: Set_NS (1);
  2357  00CB8A  0E01               	movlw	1
  2358  00CB8C  EC67  F061         	call	_Set_NS
  2359                           
  2360                           ;Lab8p1.c: 398: if (PORTAbits.RA4 == 1)
  2361  00CB90  A880               	btfss	3968,4,c	;volatile
  2362  00CB92  D010               	goto	l5216
  2363                           
  2364                           ;Lab8p1.c: 399: {
  2365                           ;Lab8p1.c: 400: Set_EWLT (2);
  2366  00CB94  0E02               	movlw	2
  2367  00CB96  EC45  F061         	call	_Set_EWLT
  2368                           
  2369                           ;Lab8p1.c: 401: WAIT_N_SEC (6);
  2370  00CB9A  0E06               	movlw	6
  2371  00CB9C  EC67  F060         	call	_WAIT_N_SEC
  2372                           
  2373                           ;Lab8p1.c: 402: Set_EWLT (3);
  2374  00CBA0  0E03               	movlw	3
  2375  00CBA2  EC45  F061         	call	_Set_EWLT
  2376                           
  2377                           ;Lab8p1.c: 403: WAIT_N_SEC (2);
  2378  00CBA6  0E02               	movlw	2
  2379  00CBA8  EC67  F060         	call	_WAIT_N_SEC
  2380                           
  2381                           ;Lab8p1.c: 404: Set_EWLT (1);
  2382  00CBAC  0E01               	movlw	1
  2383  00CBAE  EC45  F061         	call	_Set_EWLT
  2384  00CBB2  D000               	goto	l5216
  2385  00CBB4                     l5216:
  2386                           
  2387                           ;Lab8p1.c: 405: }
  2388                           ;Lab8p1.c: 407: Set_EW (2);
  2389  00CBB4  0E02               	movlw	2
  2390  00CBB6  EC23  F061         	call	_Set_EW
  2391                           
  2392                           ;Lab8p1.c: 408: WAIT_N_SEC (9);
  2393  00CBBA  0E09               	movlw	9
  2394  00CBBC  EC67  F060         	call	_WAIT_N_SEC
  2395                           
  2396                           ;Lab8p1.c: 410: Set_EW (3);
  2397  00CBC0  0E03               	movlw	3
  2398  00CBC2  EC23  F061         	call	_Set_EW
  2399                           
  2400                           ;Lab8p1.c: 411: WAIT_N_SEC (2);
  2401  00CBC6  0E02               	movlw	2
  2402  00CBC8  EC67  F060         	call	_WAIT_N_SEC
  2403                           
  2404                           ;Lab8p1.c: 413: Set_EW (1);
  2405  00CBCC  0E01               	movlw	1
  2406  00CBCE  EC23  F061         	call	_Set_EW
  2407                           
  2408                           ;Lab8p1.c: 415: if (PORTAbits.RA3 == 1)
  2409  00CBD2  A680               	btfss	3968,3,c	;volatile
  2410  00CBD4  D011               	goto	l403
  2411                           
  2412                           ;Lab8p1.c: 416: {
  2413                           ;Lab8p1.c: 417: Set_NSLT (2);
  2414  00CBD6  0E02               	movlw	2
  2415  00CBD8  EC89  F061         	call	_Set_NSLT
  2416                           
  2417                           ;Lab8p1.c: 418: WAIT_N_SEC (7);
  2418  00CBDC  0E07               	movlw	7
  2419  00CBDE  EC67  F060         	call	_WAIT_N_SEC
  2420                           
  2421                           ;Lab8p1.c: 420: Set_NSLT (3);
  2422  00CBE2  0E03               	movlw	3
  2423  00CBE4  EC89  F061         	call	_Set_NSLT
  2424                           
  2425                           ;Lab8p1.c: 421: WAIT_N_SEC (2);
  2426  00CBE8  0E02               	movlw	2
  2427  00CBEA  EC67  F060         	call	_WAIT_N_SEC
  2428                           
  2429                           ;Lab8p1.c: 423: Set_NSLT (1);
  2430  00CBEE  0E01               	movlw	1
  2431  00CBF0  EC89  F061         	call	_Set_NSLT
  2432                           
  2433                           ;Lab8p1.c: 424: }
  2434                           ;Lab8p1.c: 425: break;
  2435  00CBF4  D001               	goto	l403
  2436  00CBF6  D7B4               	goto	l5190
  2437  00CBF8                     l403:
  2438  00CBF8  0012               	return		;funcret
  2439  00CBFA                     __end_of_Night_Mode:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodl	equ	0xFF3
  2446                           intcon2	equ	0xFF1
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1l	equ	0xFE1
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _Initialize_Screen *****************
  2454 ;; Defined at:
  2455 ;;		line 190 in file "Lab8p1.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;		None               void
  2462 ;; Registers used:
  2463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    7
  2476 ;; This function calls:
  2477 ;;		_LCD_Reset
  2478 ;;		_TFT_GreenTab_Initialize
  2479 ;;		_drawCircle
  2480 ;;		_drawRect
  2481 ;;		_drawtext
  2482 ;;		_fillCircle
  2483 ;;		_fillScreen
  2484 ;;		_strcpy
  2485 ;; This function is called by:
  2486 ;;		_main
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text5
  2491  00EA0C                     __ptext5:
  2492                           	opt stack 0
  2493  00EA0C                     _Initialize_Screen:
  2494                           	opt stack 23
  2495                           
  2496                           ;Lab8p1.c: 192: LCD_Reset();
  2497                           
  2498                           ;incstack = 0
  2499  00EA0C  ECA5  F05F         	call	_LCD_Reset	;wreg free
  2500                           
  2501                           ;Lab8p1.c: 193: TFT_GreenTab_Initialize();
  2502  00EA10  EC52  F060         	call	_TFT_GreenTab_Initialize	;wreg free
  2503                           
  2504                           ;Lab8p1.c: 194: fillScreen(0x0000);
  2505  00EA14  0E00               	movlw	0
  2506  00EA16  6E15               	movwf	fillScreen@color+1,c
  2507  00EA18  0E00               	movlw	0
  2508  00EA1A  6E14               	movwf	fillScreen@color,c
  2509  00EA1C  ECE5  F05F         	call	_fillScreen	;wreg free
  2510                           
  2511                           ;Lab8p1.c: 197: txt = buffer;
  2512  00EA20  0EB0               	movlw	low _buffer
  2513  00EA22  6E6D               	movwf	_txt,c
  2514  00EA24  0E00               	movlw	high _buffer
  2515  00EA26  6E6E               	movwf	_txt+1,c
  2516                           
  2517                           ;Lab8p1.c: 198: strcpy(txt, "ECE3301L Fall 22-S1");
  2518  00EA28  C06D  F001         	movff	_txt,strcpy@to
  2519  00EA2C  C06E  F002         	movff	_txt+1,strcpy@to+1
  2520  00EA30  0EC9               	movlw	low STR_1
  2521  00EA32  6E03               	movwf	strcpy@from,c
  2522  00EA34  0EFC               	movlw	high STR_1
  2523  00EA36  6E04               	movwf	strcpy@from+1,c
  2524  00EA38  ECAE  F060         	call	_strcpy	;wreg free
  2525                           
  2526                           ;Lab8p1.c: 199: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2527  00EA3C  0E02               	movlw	2
  2528  00EA3E  6E29               	movwf	drawtext@y,c
  2529  00EA40  C06D  F02A         	movff	_txt,drawtext@_text
  2530  00EA44  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2531  00EA48  0EFF               	movlw	255
  2532  00EA4A  6E2D               	movwf	drawtext@color+1,c
  2533  00EA4C  682C               	setf	drawtext@color,c
  2534  00EA4E  0E00               	movlw	0
  2535  00EA50  6E2F               	movwf	drawtext@bg+1,c
  2536  00EA52  0E00               	movlw	0
  2537  00EA54  6E2E               	movwf	drawtext@bg,c
  2538  00EA56  0E01               	movlw	1
  2539  00EA58  6E30               	movwf	drawtext@size,c
  2540  00EA5A  0E02               	movlw	2
  2541  00EA5C  EC2E  F067         	call	_drawtext
  2542                           
  2543                           ;Lab8p1.c: 202: strcpy(txt, "Mode:");
  2544  00EA60  C06D  F001         	movff	_txt,strcpy@to
  2545  00EA64  C06E  F002         	movff	_txt+1,strcpy@to+1
  2546  00EA68  0E14               	movlw	low STR_2
  2547  00EA6A  6E03               	movwf	strcpy@from,c
  2548  00EA6C  0EFD               	movlw	high STR_2
  2549  00EA6E  6E04               	movwf	strcpy@from+1,c
  2550  00EA70  ECAE  F060         	call	_strcpy	;wreg free
  2551                           
  2552                           ;Lab8p1.c: 203: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2553  00EA74  0E0A               	movlw	10
  2554  00EA76  6E29               	movwf	drawtext@y,c
  2555  00EA78  C06D  F02A         	movff	_txt,drawtext@_text
  2556  00EA7C  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2557  00EA80  0EFF               	movlw	255
  2558  00EA82  6E2D               	movwf	drawtext@color+1,c
  2559  00EA84  682C               	setf	drawtext@color,c
  2560  00EA86  0E00               	movlw	0
  2561  00EA88  6E2F               	movwf	drawtext@bg+1,c
  2562  00EA8A  0E00               	movlw	0
  2563  00EA8C  6E2E               	movwf	drawtext@bg,c
  2564  00EA8E  0E01               	movlw	1
  2565  00EA90  6E30               	movwf	drawtext@size,c
  2566  00EA92  0E02               	movlw	2
  2567  00EA94  EC2E  F067         	call	_drawtext
  2568                           
  2569                           ;Lab8p1.c: 204: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2570  00EA98  0E0A               	movlw	10
  2571  00EA9A  6E29               	movwf	drawtext@y,c
  2572  00EA9C  0E9D               	movlw	low _Act_Mode_Txt
  2573  00EA9E  6E2A               	movwf	drawtext@_text,c
  2574  00EAA0  0E00               	movlw	high _Act_Mode_Txt
  2575  00EAA2  6E2B               	movwf	drawtext@_text+1,c
  2576  00EAA4  0EFF               	movlw	255
  2577  00EAA6  6E2D               	movwf	drawtext@color+1,c
  2578  00EAA8  682C               	setf	drawtext@color,c
  2579  00EAAA  0E00               	movlw	0
  2580  00EAAC  6E2F               	movwf	drawtext@bg+1,c
  2581  00EAAE  0E00               	movlw	0
  2582  00EAB0  6E2E               	movwf	drawtext@bg,c
  2583  00EAB2  0E01               	movlw	1
  2584  00EAB4  6E30               	movwf	drawtext@size,c
  2585  00EAB6  0E23               	movlw	35
  2586  00EAB8  EC2E  F067         	call	_drawtext
  2587                           
  2588                           ;Lab8p1.c: 207: strcpy(txt, "FR:");
  2589  00EABC  C06D  F001         	movff	_txt,strcpy@to
  2590  00EAC0  C06E  F002         	movff	_txt+1,strcpy@to+1
  2591  00EAC4  0E1A               	movlw	low STR_3
  2592  00EAC6  6E03               	movwf	strcpy@from,c
  2593  00EAC8  0EFD               	movlw	high STR_3
  2594  00EACA  6E04               	movwf	strcpy@from+1,c
  2595  00EACC  ECAE  F060         	call	_strcpy	;wreg free
  2596                           
  2597                           ;Lab8p1.c: 208: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2598  00EAD0  0E0A               	movlw	10
  2599  00EAD2  6E29               	movwf	drawtext@y,c
  2600  00EAD4  C06D  F02A         	movff	_txt,drawtext@_text
  2601  00EAD8  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2602  00EADC  0EFF               	movlw	255
  2603  00EADE  6E2D               	movwf	drawtext@color+1,c
  2604  00EAE0  682C               	setf	drawtext@color,c
  2605  00EAE2  0E00               	movlw	0
  2606  00EAE4  6E2F               	movwf	drawtext@bg+1,c
  2607  00EAE6  0E00               	movlw	0
  2608  00EAE8  6E2E               	movwf	drawtext@bg,c
  2609  00EAEA  0E01               	movlw	1
  2610  00EAEC  6E30               	movwf	drawtext@size,c
  2611  00EAEE  0E32               	movlw	50
  2612  00EAF0  EC2E  F067         	call	_drawtext
  2613                           
  2614                           ;Lab8p1.c: 209: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2615  00EAF4  0E0A               	movlw	10
  2616  00EAF6  6E29               	movwf	drawtext@y,c
  2617  00EAF8  0E9F               	movlw	low _FlashingR_Txt
  2618  00EAFA  6E2A               	movwf	drawtext@_text,c
  2619  00EAFC  0E00               	movlw	high _FlashingR_Txt
  2620  00EAFE  6E2B               	movwf	drawtext@_text+1,c
  2621  00EB00  0EFF               	movlw	255
  2622  00EB02  6E2D               	movwf	drawtext@color+1,c
  2623  00EB04  682C               	setf	drawtext@color,c
  2624  00EB06  0E00               	movlw	0
  2625  00EB08  6E2F               	movwf	drawtext@bg+1,c
  2626  00EB0A  0E00               	movlw	0
  2627  00EB0C  6E2E               	movwf	drawtext@bg,c
  2628  00EB0E  0E01               	movlw	1
  2629  00EB10  6E30               	movwf	drawtext@size,c
  2630  00EB12  0E46               	movlw	70
  2631  00EB14  EC2E  F067         	call	_drawtext
  2632                           
  2633                           ;Lab8p1.c: 212: strcpy(txt, "FS:");
  2634  00EB18  C06D  F001         	movff	_txt,strcpy@to
  2635  00EB1C  C06E  F002         	movff	_txt+1,strcpy@to+1
  2636  00EB20  0E1E               	movlw	low STR_4
  2637  00EB22  6E03               	movwf	strcpy@from,c
  2638  00EB24  0EFD               	movlw	high STR_4
  2639  00EB26  6E04               	movwf	strcpy@from+1,c
  2640  00EB28  ECAE  F060         	call	_strcpy	;wreg free
  2641                           
  2642                           ;Lab8p1.c: 213: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2643  00EB2C  0E0A               	movlw	10
  2644  00EB2E  6E29               	movwf	drawtext@y,c
  2645  00EB30  C06D  F02A         	movff	_txt,drawtext@_text
  2646  00EB34  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2647  00EB38  0EFF               	movlw	255
  2648  00EB3A  6E2D               	movwf	drawtext@color+1,c
  2649  00EB3C  682C               	setf	drawtext@color,c
  2650  00EB3E  0E00               	movlw	0
  2651  00EB40  6E2F               	movwf	drawtext@bg+1,c
  2652  00EB42  0E00               	movlw	0
  2653  00EB44  6E2E               	movwf	drawtext@bg,c
  2654  00EB46  0E01               	movlw	1
  2655  00EB48  6E30               	movwf	drawtext@size,c
  2656  00EB4A  0E50               	movlw	80
  2657  00EB4C  EC2E  F067         	call	_drawtext
  2658                           
  2659                           ;Lab8p1.c: 214: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2660  00EB50  0E0A               	movlw	10
  2661  00EB52  6E29               	movwf	drawtext@y,c
  2662  00EB54  0EA1               	movlw	low _FlashingS_Txt
  2663  00EB56  6E2A               	movwf	drawtext@_text,c
  2664  00EB58  0E00               	movlw	high _FlashingS_Txt
  2665  00EB5A  6E2B               	movwf	drawtext@_text+1,c
  2666  00EB5C  0EFF               	movlw	255
  2667  00EB5E  6E2D               	movwf	drawtext@color+1,c
  2668  00EB60  682C               	setf	drawtext@color,c
  2669  00EB62  0E00               	movlw	0
  2670  00EB64  6E2F               	movwf	drawtext@bg+1,c
  2671  00EB66  0E00               	movlw	0
  2672  00EB68  6E2E               	movwf	drawtext@bg,c
  2673  00EB6A  0E01               	movlw	1
  2674  00EB6C  6E30               	movwf	drawtext@size,c
  2675  00EB6E  0E64               	movlw	100
  2676  00EB70  EC2E  F067         	call	_drawtext
  2677                           
  2678                           ;Lab8p1.c: 217: strcpy(txt, "*");
  2679  00EB74  C06D  F001         	movff	_txt,strcpy@to
  2680  00EB78  C06E  F002         	movff	_txt+1,strcpy@to+1
  2681  00EB7C  0E2C               	movlw	low STR_5
  2682  00EB7E  6E03               	movwf	strcpy@from,c
  2683  00EB80  0EFD               	movlw	high STR_5
  2684  00EB82  6E04               	movwf	strcpy@from+1,c
  2685  00EB84  ECAE  F060         	call	_strcpy	;wreg free
  2686                           
  2687                           ;Lab8p1.c: 218: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2688  00EB88  0E0A               	movlw	10
  2689  00EB8A  6E29               	movwf	drawtext@y,c
  2690  00EB8C  C06D  F02A         	movff	_txt,drawtext@_text
  2691  00EB90  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2692  00EB94  0EFF               	movlw	255
  2693  00EB96  6E2D               	movwf	drawtext@color+1,c
  2694  00EB98  682C               	setf	drawtext@color,c
  2695  00EB9A  0E00               	movlw	0
  2696  00EB9C  6E2F               	movwf	drawtext@bg+1,c
  2697  00EB9E  0E00               	movlw	0
  2698  00EBA0  6E2E               	movwf	drawtext@bg,c
  2699  00EBA2  0E01               	movlw	1
  2700  00EBA4  6E30               	movwf	drawtext@size,c
  2701  00EBA6  0E78               	movlw	120
  2702  00EBA8  EC2E  F067         	call	_drawtext
  2703                           
  2704                           ;Lab8p1.c: 221: strcpy(txt, "EAST/WEST");
  2705  00EBAC  C06D  F001         	movff	_txt,strcpy@to
  2706  00EBB0  C06E  F002         	movff	_txt+1,strcpy@to+1
  2707  00EBB4  0EFC               	movlw	low STR_6
  2708  00EBB6  6E03               	movwf	strcpy@from,c
  2709  00EBB8  0EFC               	movlw	high STR_6
  2710  00EBBA  6E04               	movwf	strcpy@from+1,c
  2711  00EBBC  ECAE  F060         	call	_strcpy	;wreg free
  2712                           
  2713                           ;Lab8p1.c: 222: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2714  00EBC0  0E14               	movlw	20
  2715  00EBC2  6E29               	movwf	drawtext@y,c
  2716  00EBC4  C06D  F02A         	movff	_txt,drawtext@_text
  2717  00EBC8  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2718  00EBCC  0E07               	movlw	7
  2719  00EBCE  6E2D               	movwf	drawtext@color+1,c
  2720  00EBD0  682C               	setf	drawtext@color,c
  2721  00EBD2  0E00               	movlw	0
  2722  00EBD4  6E2F               	movwf	drawtext@bg+1,c
  2723  00EBD6  0E00               	movlw	0
  2724  00EBD8  6E2E               	movwf	drawtext@bg,c
  2725  00EBDA  0E01               	movlw	1
  2726  00EBDC  6E30               	movwf	drawtext@size,c
  2727  00EBDE  0E1E               	movlw	30
  2728  00EBE0  EC2E  F067         	call	_drawtext
  2729                           
  2730                           ;Lab8p1.c: 223: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2731  00EBE4  0E00               	movlw	0
  2732  00EBE6  6E14               	movwf	drawRect@x+1,c
  2733  00EBE8  0E1E               	movlw	30
  2734  00EBEA  6E13               	movwf	drawRect@x,c
  2735  00EBEC  0E00               	movlw	0
  2736  00EBEE  6E16               	movwf	drawRect@y+1,c
  2737  00EBF0  0E1B               	movlw	27
  2738  00EBF2  6E15               	movwf	drawRect@y,c
  2739  00EBF4  0E00               	movlw	0
  2740  00EBF6  6E18               	movwf	drawRect@w+1,c
  2741  00EBF8  0E3C               	movlw	60
  2742  00EBFA  6E17               	movwf	drawRect@w,c
  2743  00EBFC  0E00               	movlw	0
  2744  00EBFE  6E1A               	movwf	drawRect@h+1,c
  2745  00EC00  0E12               	movlw	18
  2746  00EC02  6E19               	movwf	drawRect@h,c
  2747  00EC04  0E07               	movlw	7
  2748  00EC06  6E1C               	movwf	drawRect@color+1,c
  2749  00EC08  681B               	setf	drawRect@color,c
  2750  00EC0A  ECCC  F062         	call	_drawRect	;wreg free
  2751                           
  2752                           ;Lab8p1.c: 224: fillCircle(40, 20 + 15, 7, 0xF800);
  2753  00EC0E  0E00               	movlw	0
  2754  00EC10  6E2C               	movwf	fillCircle@x0+1,c
  2755  00EC12  0E28               	movlw	40
  2756  00EC14  6E2B               	movwf	fillCircle@x0,c
  2757  00EC16  0E00               	movlw	0
  2758  00EC18  6E2E               	movwf	fillCircle@y0+1,c
  2759  00EC1A  0E23               	movlw	35
  2760  00EC1C  6E2D               	movwf	fillCircle@y0,c
  2761  00EC1E  0E00               	movlw	0
  2762  00EC20  6E30               	movwf	fillCircle@r+1,c
  2763  00EC22  0E07               	movlw	7
  2764  00EC24  6E2F               	movwf	fillCircle@r,c
  2765  00EC26  0EF8               	movlw	248
  2766  00EC28  6E32               	movwf	fillCircle@color+1,c
  2767  00EC2A  0E00               	movlw	0
  2768  00EC2C  6E31               	movwf	fillCircle@color,c
  2769  00EC2E  EC19  F062         	call	_fillCircle	;wreg free
  2770                           
  2771                           ;Lab8p1.c: 225: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2772  00EC32  0E00               	movlw	0
  2773  00EC34  6E0D               	movwf	drawCircle@x0+1,c
  2774  00EC36  0E3C               	movlw	60
  2775  00EC38  6E0C               	movwf	drawCircle@x0,c
  2776  00EC3A  0E00               	movlw	0
  2777  00EC3C  6E0F               	movwf	drawCircle@y0+1,c
  2778  00EC3E  0E23               	movlw	35
  2779  00EC40  6E0E               	movwf	drawCircle@y0,c
  2780  00EC42  0E00               	movlw	0
  2781  00EC44  6E11               	movwf	drawCircle@r+1,c
  2782  00EC46  0E07               	movlw	7
  2783  00EC48  6E10               	movwf	drawCircle@r,c
  2784  00EC4A  0EFF               	movlw	255
  2785  00EC4C  6E13               	movwf	drawCircle@color+1,c
  2786  00EC4E  0EE0               	movlw	224
  2787  00EC50  6E12               	movwf	drawCircle@color,c
  2788  00EC52  EC9B  F06D         	call	_drawCircle	;wreg free
  2789                           
  2790                           ;Lab8p1.c: 226: drawCircle(80, 20 + 15, 7, 0x07E0);
  2791  00EC56  0E00               	movlw	0
  2792  00EC58  6E0D               	movwf	drawCircle@x0+1,c
  2793  00EC5A  0E50               	movlw	80
  2794  00EC5C  6E0C               	movwf	drawCircle@x0,c
  2795  00EC5E  0E00               	movlw	0
  2796  00EC60  6E0F               	movwf	drawCircle@y0+1,c
  2797  00EC62  0E23               	movlw	35
  2798  00EC64  6E0E               	movwf	drawCircle@y0,c
  2799  00EC66  0E00               	movlw	0
  2800  00EC68  6E11               	movwf	drawCircle@r+1,c
  2801  00EC6A  0E07               	movlw	7
  2802  00EC6C  6E10               	movwf	drawCircle@r,c
  2803  00EC6E  0E07               	movlw	7
  2804  00EC70  6E13               	movwf	drawCircle@color+1,c
  2805  00EC72  0EE0               	movlw	224
  2806  00EC74  6E12               	movwf	drawCircle@color,c
  2807  00EC76  EC9B  F06D         	call	_drawCircle	;wreg free
  2808                           
  2809                           ;Lab8p1.c: 227: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2810  00EC7A  0E1E               	movlw	30
  2811  00EC7C  6E29               	movwf	drawtext@y,c
  2812  00EC7E  0E8E               	movlw	low _EW_Count
  2813  00EC80  6E2A               	movwf	drawtext@_text,c
  2814  00EC82  0E00               	movlw	high _EW_Count
  2815  00EC84  6E2B               	movwf	drawtext@_text+1,c
  2816  00EC86  0E07               	movlw	7
  2817  00EC88  6E2D               	movwf	drawtext@color+1,c
  2818  00EC8A  682C               	setf	drawtext@color,c
  2819  00EC8C  0E00               	movlw	0
  2820  00EC8E  6E2F               	movwf	drawtext@bg+1,c
  2821  00EC90  0E00               	movlw	0
  2822  00EC92  6E2E               	movwf	drawtext@bg,c
  2823  00EC94  0E02               	movlw	2
  2824  00EC96  6E30               	movwf	drawtext@size,c
  2825  00EC98  0E64               	movlw	100
  2826  00EC9A  EC2E  F067         	call	_drawtext
  2827                           
  2828                           ;Lab8p1.c: 230: strcpy(txt, "E/W LT");
  2829  00EC9E  C06D  F001         	movff	_txt,strcpy@to
  2830  00ECA2  C06E  F002         	movff	_txt+1,strcpy@to+1
  2831  00ECA6  0E0D               	movlw	low STR_7
  2832  00ECA8  6E03               	movwf	strcpy@from,c
  2833  00ECAA  0EFD               	movlw	high STR_7
  2834  00ECAC  6E04               	movwf	strcpy@from+1,c
  2835  00ECAE  ECAE  F060         	call	_strcpy	;wreg free
  2836                           
  2837                           ;Lab8p1.c: 231: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2838  00ECB2  0E32               	movlw	50
  2839  00ECB4  6E29               	movwf	drawtext@y,c
  2840  00ECB6  C06D  F02A         	movff	_txt,drawtext@_text
  2841  00ECBA  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2842  00ECBE  0EFF               	movlw	255
  2843  00ECC0  6E2D               	movwf	drawtext@color+1,c
  2844  00ECC2  682C               	setf	drawtext@color,c
  2845  00ECC4  0E00               	movlw	0
  2846  00ECC6  6E2F               	movwf	drawtext@bg+1,c
  2847  00ECC8  0E00               	movlw	0
  2848  00ECCA  6E2E               	movwf	drawtext@bg,c
  2849  00ECCC  0E01               	movlw	1
  2850  00ECCE  6E30               	movwf	drawtext@size,c
  2851  00ECD0  0E1E               	movlw	30
  2852  00ECD2  EC2E  F067         	call	_drawtext
  2853                           
  2854                           ;Lab8p1.c: 232: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2855  00ECD6  0E00               	movlw	0
  2856  00ECD8  6E14               	movwf	drawRect@x+1,c
  2857  00ECDA  0E1E               	movlw	30
  2858  00ECDC  6E13               	movwf	drawRect@x,c
  2859  00ECDE  0E00               	movlw	0
  2860  00ECE0  6E16               	movwf	drawRect@y+1,c
  2861  00ECE2  0E39               	movlw	57
  2862  00ECE4  6E15               	movwf	drawRect@y,c
  2863  00ECE6  0E00               	movlw	0
  2864  00ECE8  6E18               	movwf	drawRect@w+1,c
  2865  00ECEA  0E3C               	movlw	60
  2866  00ECEC  6E17               	movwf	drawRect@w,c
  2867  00ECEE  0E00               	movlw	0
  2868  00ECF0  6E1A               	movwf	drawRect@h+1,c
  2869  00ECF2  0E12               	movlw	18
  2870  00ECF4  6E19               	movwf	drawRect@h,c
  2871  00ECF6  0EFF               	movlw	255
  2872  00ECF8  6E1C               	movwf	drawRect@color+1,c
  2873  00ECFA  681B               	setf	drawRect@color,c
  2874  00ECFC  ECCC  F062         	call	_drawRect	;wreg free
  2875                           
  2876                           ;Lab8p1.c: 233: fillCircle(40, 50 + 15, 7, 0xF800);
  2877  00ED00  0E00               	movlw	0
  2878  00ED02  6E2C               	movwf	fillCircle@x0+1,c
  2879  00ED04  0E28               	movlw	40
  2880  00ED06  6E2B               	movwf	fillCircle@x0,c
  2881  00ED08  0E00               	movlw	0
  2882  00ED0A  6E2E               	movwf	fillCircle@y0+1,c
  2883  00ED0C  0E41               	movlw	65
  2884  00ED0E  6E2D               	movwf	fillCircle@y0,c
  2885  00ED10  0E00               	movlw	0
  2886  00ED12  6E30               	movwf	fillCircle@r+1,c
  2887  00ED14  0E07               	movlw	7
  2888  00ED16  6E2F               	movwf	fillCircle@r,c
  2889  00ED18  0EF8               	movlw	248
  2890  00ED1A  6E32               	movwf	fillCircle@color+1,c
  2891  00ED1C  0E00               	movlw	0
  2892  00ED1E  6E31               	movwf	fillCircle@color,c
  2893  00ED20  EC19  F062         	call	_fillCircle	;wreg free
  2894                           
  2895                           ;Lab8p1.c: 234: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2896  00ED24  0E00               	movlw	0
  2897  00ED26  6E0D               	movwf	drawCircle@x0+1,c
  2898  00ED28  0E3C               	movlw	60
  2899  00ED2A  6E0C               	movwf	drawCircle@x0,c
  2900  00ED2C  0E00               	movlw	0
  2901  00ED2E  6E0F               	movwf	drawCircle@y0+1,c
  2902  00ED30  0E41               	movlw	65
  2903  00ED32  6E0E               	movwf	drawCircle@y0,c
  2904  00ED34  0E00               	movlw	0
  2905  00ED36  6E11               	movwf	drawCircle@r+1,c
  2906  00ED38  0E07               	movlw	7
  2907  00ED3A  6E10               	movwf	drawCircle@r,c
  2908  00ED3C  0EFF               	movlw	255
  2909  00ED3E  6E13               	movwf	drawCircle@color+1,c
  2910  00ED40  0EE0               	movlw	224
  2911  00ED42  6E12               	movwf	drawCircle@color,c
  2912  00ED44  EC9B  F06D         	call	_drawCircle	;wreg free
  2913                           
  2914                           ;Lab8p1.c: 235: drawCircle(80, 50 + 15, 7, 0x07E0);
  2915  00ED48  0E00               	movlw	0
  2916  00ED4A  6E0D               	movwf	drawCircle@x0+1,c
  2917  00ED4C  0E50               	movlw	80
  2918  00ED4E  6E0C               	movwf	drawCircle@x0,c
  2919  00ED50  0E00               	movlw	0
  2920  00ED52  6E0F               	movwf	drawCircle@y0+1,c
  2921  00ED54  0E41               	movlw	65
  2922  00ED56  6E0E               	movwf	drawCircle@y0,c
  2923  00ED58  0E00               	movlw	0
  2924  00ED5A  6E11               	movwf	drawCircle@r+1,c
  2925  00ED5C  0E07               	movlw	7
  2926  00ED5E  6E10               	movwf	drawCircle@r,c
  2927  00ED60  0E07               	movlw	7
  2928  00ED62  6E13               	movwf	drawCircle@color+1,c
  2929  00ED64  0EE0               	movlw	224
  2930  00ED66  6E12               	movwf	drawCircle@color,c
  2931  00ED68  EC9B  F06D         	call	_drawCircle	;wreg free
  2932                           
  2933                           ;Lab8p1.c: 236: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2934  00ED6C  0E3C               	movlw	60
  2935  00ED6E  6E29               	movwf	drawtext@y,c
  2936  00ED70  0E8B               	movlw	low _EWLT_Count
  2937  00ED72  6E2A               	movwf	drawtext@_text,c
  2938  00ED74  0E00               	movlw	high _EWLT_Count
  2939  00ED76  6E2B               	movwf	drawtext@_text+1,c
  2940  00ED78  0EFF               	movlw	255
  2941  00ED7A  6E2D               	movwf	drawtext@color+1,c
  2942  00ED7C  682C               	setf	drawtext@color,c
  2943  00ED7E  0E00               	movlw	0
  2944  00ED80  6E2F               	movwf	drawtext@bg+1,c
  2945  00ED82  0E00               	movlw	0
  2946  00ED84  6E2E               	movwf	drawtext@bg,c
  2947  00ED86  0E02               	movlw	2
  2948  00ED88  6E30               	movwf	drawtext@size,c
  2949  00ED8A  0E64               	movlw	100
  2950  00ED8C  EC2E  F067         	call	_drawtext
  2951                           
  2952                           ;Lab8p1.c: 239: strcpy(txt, "NORTH/SOUTH");
  2953  00ED90  C06D  F001         	movff	_txt,strcpy@to
  2954  00ED94  C06E  F002         	movff	_txt+1,strcpy@to+1
  2955  00ED98  0EF0               	movlw	low STR_8
  2956  00ED9A  6E03               	movwf	strcpy@from,c
  2957  00ED9C  0EFC               	movlw	high STR_8
  2958  00ED9E  6E04               	movwf	strcpy@from+1,c
  2959  00EDA0  ECAE  F060         	call	_strcpy	;wreg free
  2960                           
  2961                           ;Lab8p1.c: 240: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2962  00EDA4  0E50               	movlw	80
  2963  00EDA6  6E29               	movwf	drawtext@y,c
  2964  00EDA8  C06D  F02A         	movff	_txt,drawtext@_text
  2965  00EDAC  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2966  00EDB0  0E00               	movlw	0
  2967  00EDB2  6E2D               	movwf	drawtext@color+1,c
  2968  00EDB4  0E1F               	movlw	31
  2969  00EDB6  6E2C               	movwf	drawtext@color,c
  2970  00EDB8  0E00               	movlw	0
  2971  00EDBA  6E2F               	movwf	drawtext@bg+1,c
  2972  00EDBC  0E00               	movlw	0
  2973  00EDBE  6E2E               	movwf	drawtext@bg,c
  2974  00EDC0  0E01               	movlw	1
  2975  00EDC2  6E30               	movwf	drawtext@size,c
  2976  00EDC4  0E1E               	movlw	30
  2977  00EDC6  EC2E  F067         	call	_drawtext
  2978                           
  2979                           ;Lab8p1.c: 241: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2980  00EDCA  0E00               	movlw	0
  2981  00EDCC  6E14               	movwf	drawRect@x+1,c
  2982  00EDCE  0E1E               	movlw	30
  2983  00EDD0  6E13               	movwf	drawRect@x,c
  2984  00EDD2  0E00               	movlw	0
  2985  00EDD4  6E16               	movwf	drawRect@y+1,c
  2986  00EDD6  0E57               	movlw	87
  2987  00EDD8  6E15               	movwf	drawRect@y,c
  2988  00EDDA  0E00               	movlw	0
  2989  00EDDC  6E18               	movwf	drawRect@w+1,c
  2990  00EDDE  0E3C               	movlw	60
  2991  00EDE0  6E17               	movwf	drawRect@w,c
  2992  00EDE2  0E00               	movlw	0
  2993  00EDE4  6E1A               	movwf	drawRect@h+1,c
  2994  00EDE6  0E12               	movlw	18
  2995  00EDE8  6E19               	movwf	drawRect@h,c
  2996  00EDEA  0E00               	movlw	0
  2997  00EDEC  6E1C               	movwf	drawRect@color+1,c
  2998  00EDEE  0E1F               	movlw	31
  2999  00EDF0  6E1B               	movwf	drawRect@color,c
  3000  00EDF2  ECCC  F062         	call	_drawRect	;wreg free
  3001                           
  3002                           ;Lab8p1.c: 242: drawCircle(40, 80 + 15 , 7, 0xF800);
  3003  00EDF6  0E00               	movlw	0
  3004  00EDF8  6E0D               	movwf	drawCircle@x0+1,c
  3005  00EDFA  0E28               	movlw	40
  3006  00EDFC  6E0C               	movwf	drawCircle@x0,c
  3007  00EDFE  0E00               	movlw	0
  3008  00EE00  6E0F               	movwf	drawCircle@y0+1,c
  3009  00EE02  0E5F               	movlw	95
  3010  00EE04  6E0E               	movwf	drawCircle@y0,c
  3011  00EE06  0E00               	movlw	0
  3012  00EE08  6E11               	movwf	drawCircle@r+1,c
  3013  00EE0A  0E07               	movlw	7
  3014  00EE0C  6E10               	movwf	drawCircle@r,c
  3015  00EE0E  0EF8               	movlw	248
  3016  00EE10  6E13               	movwf	drawCircle@color+1,c
  3017  00EE12  0E00               	movlw	0
  3018  00EE14  6E12               	movwf	drawCircle@color,c
  3019  00EE16  EC9B  F06D         	call	_drawCircle	;wreg free
  3020                           
  3021                           ;Lab8p1.c: 243: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  3022  00EE1A  0E00               	movlw	0
  3023  00EE1C  6E0D               	movwf	drawCircle@x0+1,c
  3024  00EE1E  0E3C               	movlw	60
  3025  00EE20  6E0C               	movwf	drawCircle@x0,c
  3026  00EE22  0E00               	movlw	0
  3027  00EE24  6E0F               	movwf	drawCircle@y0+1,c
  3028  00EE26  0E5F               	movlw	95
  3029  00EE28  6E0E               	movwf	drawCircle@y0,c
  3030  00EE2A  0E00               	movlw	0
  3031  00EE2C  6E11               	movwf	drawCircle@r+1,c
  3032  00EE2E  0E07               	movlw	7
  3033  00EE30  6E10               	movwf	drawCircle@r,c
  3034  00EE32  0EFF               	movlw	255
  3035  00EE34  6E13               	movwf	drawCircle@color+1,c
  3036  00EE36  0EE0               	movlw	224
  3037  00EE38  6E12               	movwf	drawCircle@color,c
  3038  00EE3A  EC9B  F06D         	call	_drawCircle	;wreg free
  3039                           
  3040                           ;Lab8p1.c: 244: fillCircle(80, 80 + 15 , 7, 0x07E0);
  3041  00EE3E  0E00               	movlw	0
  3042  00EE40  6E2C               	movwf	fillCircle@x0+1,c
  3043  00EE42  0E50               	movlw	80
  3044  00EE44  6E2B               	movwf	fillCircle@x0,c
  3045  00EE46  0E00               	movlw	0
  3046  00EE48  6E2E               	movwf	fillCircle@y0+1,c
  3047  00EE4A  0E5F               	movlw	95
  3048  00EE4C  6E2D               	movwf	fillCircle@y0,c
  3049  00EE4E  0E00               	movlw	0
  3050  00EE50  6E30               	movwf	fillCircle@r+1,c
  3051  00EE52  0E07               	movlw	7
  3052  00EE54  6E2F               	movwf	fillCircle@r,c
  3053  00EE56  0E07               	movlw	7
  3054  00EE58  6E32               	movwf	fillCircle@color+1,c
  3055  00EE5A  0EE0               	movlw	224
  3056  00EE5C  6E31               	movwf	fillCircle@color,c
  3057  00EE5E  EC19  F062         	call	_fillCircle	;wreg free
  3058                           
  3059                           ;Lab8p1.c: 245: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  3060  00EE62  0E5A               	movlw	90
  3061  00EE64  6E29               	movwf	drawtext@y,c
  3062  00EE66  0E94               	movlw	low _NS_Count
  3063  00EE68  6E2A               	movwf	drawtext@_text,c
  3064  00EE6A  0E00               	movlw	high _NS_Count
  3065  00EE6C  6E2B               	movwf	drawtext@_text+1,c
  3066  00EE6E  0E00               	movlw	0
  3067  00EE70  6E2D               	movwf	drawtext@color+1,c
  3068  00EE72  0E1F               	movlw	31
  3069  00EE74  6E2C               	movwf	drawtext@color,c
  3070  00EE76  0E00               	movlw	0
  3071  00EE78  6E2F               	movwf	drawtext@bg+1,c
  3072  00EE7A  0E00               	movlw	0
  3073  00EE7C  6E2E               	movwf	drawtext@bg,c
  3074  00EE7E  0E02               	movlw	2
  3075  00EE80  6E30               	movwf	drawtext@size,c
  3076  00EE82  0E64               	movlw	100
  3077  00EE84  EC2E  F067         	call	_drawtext
  3078                           
  3079                           ;Lab8p1.c: 248: strcpy(txt, "N/S LT");
  3080  00EE88  C06D  F001         	movff	_txt,strcpy@to
  3081  00EE8C  C06E  F002         	movff	_txt+1,strcpy@to+1
  3082  00EE90  0E06               	movlw	low STR_9
  3083  00EE92  6E03               	movwf	strcpy@from,c
  3084  00EE94  0EFD               	movlw	high STR_9
  3085  00EE96  6E04               	movwf	strcpy@from+1,c
  3086  00EE98  ECAE  F060         	call	_strcpy	;wreg free
  3087                           
  3088                           ;Lab8p1.c: 249: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  3089  00EE9C  0E6E               	movlw	110
  3090  00EE9E  6E29               	movwf	drawtext@y,c
  3091  00EEA0  C06D  F02A         	movff	_txt,drawtext@_text
  3092  00EEA4  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3093  00EEA8  0EF8               	movlw	248
  3094  00EEAA  6E2D               	movwf	drawtext@color+1,c
  3095  00EEAC  0E1F               	movlw	31
  3096  00EEAE  6E2C               	movwf	drawtext@color,c
  3097  00EEB0  0E00               	movlw	0
  3098  00EEB2  6E2F               	movwf	drawtext@bg+1,c
  3099  00EEB4  0E00               	movlw	0
  3100  00EEB6  6E2E               	movwf	drawtext@bg,c
  3101  00EEB8  0E01               	movlw	1
  3102  00EEBA  6E30               	movwf	drawtext@size,c
  3103  00EEBC  0E1E               	movlw	30
  3104  00EEBE  EC2E  F067         	call	_drawtext
  3105                           
  3106                           ;Lab8p1.c: 250: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  3107  00EEC2  0E00               	movlw	0
  3108  00EEC4  6E14               	movwf	drawRect@x+1,c
  3109  00EEC6  0E1E               	movlw	30
  3110  00EEC8  6E13               	movwf	drawRect@x,c
  3111  00EECA  0E00               	movlw	0
  3112  00EECC  6E16               	movwf	drawRect@y+1,c
  3113  00EECE  0E75               	movlw	117
  3114  00EED0  6E15               	movwf	drawRect@y,c
  3115  00EED2  0E00               	movlw	0
  3116  00EED4  6E18               	movwf	drawRect@w+1,c
  3117  00EED6  0E3C               	movlw	60
  3118  00EED8  6E17               	movwf	drawRect@w,c
  3119  00EEDA  0E00               	movlw	0
  3120  00EEDC  6E1A               	movwf	drawRect@h+1,c
  3121  00EEDE  0E12               	movlw	18
  3122  00EEE0  6E19               	movwf	drawRect@h,c
  3123  00EEE2  0EF8               	movlw	248
  3124  00EEE4  6E1C               	movwf	drawRect@color+1,c
  3125  00EEE6  0E1F               	movlw	31
  3126  00EEE8  6E1B               	movwf	drawRect@color,c
  3127  00EEEA  ECCC  F062         	call	_drawRect	;wreg free
  3128                           
  3129                           ;Lab8p1.c: 251: fillCircle(40, 110 + 15, 7, 0xF800);
  3130  00EEEE  0E00               	movlw	0
  3131  00EEF0  6E2C               	movwf	fillCircle@x0+1,c
  3132  00EEF2  0E28               	movlw	40
  3133  00EEF4  6E2B               	movwf	fillCircle@x0,c
  3134  00EEF6  0E00               	movlw	0
  3135  00EEF8  6E2E               	movwf	fillCircle@y0+1,c
  3136  00EEFA  0E7D               	movlw	125
  3137  00EEFC  6E2D               	movwf	fillCircle@y0,c
  3138  00EEFE  0E00               	movlw	0
  3139  00EF00  6E30               	movwf	fillCircle@r+1,c
  3140  00EF02  0E07               	movlw	7
  3141  00EF04  6E2F               	movwf	fillCircle@r,c
  3142  00EF06  0EF8               	movlw	248
  3143  00EF08  6E32               	movwf	fillCircle@color+1,c
  3144  00EF0A  0E00               	movlw	0
  3145  00EF0C  6E31               	movwf	fillCircle@color,c
  3146  00EF0E  EC19  F062         	call	_fillCircle	;wreg free
  3147                           
  3148                           ;Lab8p1.c: 252: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3149  00EF12  0E00               	movlw	0
  3150  00EF14  6E0D               	movwf	drawCircle@x0+1,c
  3151  00EF16  0E3C               	movlw	60
  3152  00EF18  6E0C               	movwf	drawCircle@x0,c
  3153  00EF1A  0E00               	movlw	0
  3154  00EF1C  6E0F               	movwf	drawCircle@y0+1,c
  3155  00EF1E  0E7D               	movlw	125
  3156  00EF20  6E0E               	movwf	drawCircle@y0,c
  3157  00EF22  0E00               	movlw	0
  3158  00EF24  6E11               	movwf	drawCircle@r+1,c
  3159  00EF26  0E07               	movlw	7
  3160  00EF28  6E10               	movwf	drawCircle@r,c
  3161  00EF2A  0EFF               	movlw	255
  3162  00EF2C  6E13               	movwf	drawCircle@color+1,c
  3163  00EF2E  0EE0               	movlw	224
  3164  00EF30  6E12               	movwf	drawCircle@color,c
  3165  00EF32  EC9B  F06D         	call	_drawCircle	;wreg free
  3166                           
  3167                           ;Lab8p1.c: 253: drawCircle(80, 110 + 15, 7, 0x07E0);
  3168  00EF36  0E00               	movlw	0
  3169  00EF38  6E0D               	movwf	drawCircle@x0+1,c
  3170  00EF3A  0E50               	movlw	80
  3171  00EF3C  6E0C               	movwf	drawCircle@x0,c
  3172  00EF3E  0E00               	movlw	0
  3173  00EF40  6E0F               	movwf	drawCircle@y0+1,c
  3174  00EF42  0E7D               	movlw	125
  3175  00EF44  6E0E               	movwf	drawCircle@y0,c
  3176  00EF46  0E00               	movlw	0
  3177  00EF48  6E11               	movwf	drawCircle@r+1,c
  3178  00EF4A  0E07               	movlw	7
  3179  00EF4C  6E10               	movwf	drawCircle@r,c
  3180  00EF4E  0E07               	movlw	7
  3181  00EF50  6E13               	movwf	drawCircle@color+1,c
  3182  00EF52  0EE0               	movlw	224
  3183  00EF54  6E12               	movwf	drawCircle@color,c
  3184  00EF56  EC9B  F06D         	call	_drawCircle	;wreg free
  3185                           
  3186                           ;Lab8p1.c: 254: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3187  00EF5A  0E78               	movlw	120
  3188  00EF5C  6E29               	movwf	drawtext@y,c
  3189  00EF5E  0E91               	movlw	low _NSLT_Count
  3190  00EF60  6E2A               	movwf	drawtext@_text,c
  3191  00EF62  0E00               	movlw	high _NSLT_Count
  3192  00EF64  6E2B               	movwf	drawtext@_text+1,c
  3193  00EF66  0EF8               	movlw	248
  3194  00EF68  6E2D               	movwf	drawtext@color+1,c
  3195  00EF6A  0E1F               	movlw	31
  3196  00EF6C  6E2C               	movwf	drawtext@color,c
  3197  00EF6E  0E00               	movlw	0
  3198  00EF70  6E2F               	movwf	drawtext@bg+1,c
  3199  00EF72  0E00               	movlw	0
  3200  00EF74  6E2E               	movwf	drawtext@bg,c
  3201  00EF76  0E02               	movlw	2
  3202  00EF78  6E30               	movwf	drawtext@size,c
  3203  00EF7A  0E64               	movlw	100
  3204  00EF7C  EC2E  F067         	call	_drawtext
  3205                           
  3206                           ;Lab8p1.c: 258: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  3207  00EF80  0E1E               	movlw	30
  3208  00EF82  6E29               	movwf	drawtext@y,c
  3209  00EF84  0E97               	movlw	low _PED_EW_Count
  3210  00EF86  6E2A               	movwf	drawtext@_text,c
  3211  00EF88  0E00               	movlw	high _PED_EW_Count
  3212  00EF8A  6E2B               	movwf	drawtext@_text+1,c
  3213  00EF8C  0E07               	movlw	7
  3214  00EF8E  6E2D               	movwf	drawtext@color+1,c
  3215  00EF90  682C               	setf	drawtext@color,c
  3216  00EF92  0E00               	movlw	0
  3217  00EF94  6E2F               	movwf	drawtext@bg+1,c
  3218  00EF96  0E00               	movlw	0
  3219  00EF98  6E2E               	movwf	drawtext@bg,c
  3220  00EF9A  0E02               	movlw	2
  3221  00EF9C  6E30               	movwf	drawtext@size,c
  3222  00EF9E  0E02               	movlw	2
  3223  00EFA0  EC2E  F067         	call	_drawtext
  3224                           
  3225                           ;Lab8p1.c: 259: strcpy(txt, "PEW");
  3226  00EFA4  C06D  F001         	movff	_txt,strcpy@to
  3227  00EFA8  C06E  F002         	movff	_txt+1,strcpy@to+1
  3228  00EFAC  0E26               	movlw	low STR_10
  3229  00EFAE  6E03               	movwf	strcpy@from,c
  3230  00EFB0  0EFD               	movlw	high STR_10
  3231  00EFB2  6E04               	movwf	strcpy@from+1,c
  3232  00EFB4  ECAE  F060         	call	_strcpy	;wreg free
  3233                           
  3234                           ;Lab8p1.c: 260: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  3235  00EFB8  0E14               	movlw	20
  3236  00EFBA  6E29               	movwf	drawtext@y,c
  3237  00EFBC  C06D  F02A         	movff	_txt,drawtext@_text
  3238  00EFC0  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3239  00EFC4  0E07               	movlw	7
  3240  00EFC6  6E2D               	movwf	drawtext@color+1,c
  3241  00EFC8  682C               	setf	drawtext@color,c
  3242  00EFCA  0E00               	movlw	0
  3243  00EFCC  6E2F               	movwf	drawtext@bg+1,c
  3244  00EFCE  0E00               	movlw	0
  3245  00EFD0  6E2E               	movwf	drawtext@bg,c
  3246  00EFD2  0E01               	movlw	1
  3247  00EFD4  6E30               	movwf	drawtext@size,c
  3248  00EFD6  0E03               	movlw	3
  3249  00EFD8  EC2E  F067         	call	_drawtext
  3250                           
  3251                           ;Lab8p1.c: 263: strcpy(txt, "PNS");
  3252  00EFDC  C06D  F001         	movff	_txt,strcpy@to
  3253  00EFE0  C06E  F002         	movff	_txt+1,strcpy@to+1
  3254  00EFE4  0E22               	movlw	low STR_11
  3255  00EFE6  6E03               	movwf	strcpy@from,c
  3256  00EFE8  0EFD               	movlw	high STR_11
  3257  00EFEA  6E04               	movwf	strcpy@from+1,c
  3258  00EFEC  ECAE  F060         	call	_strcpy	;wreg free
  3259                           
  3260                           ;Lab8p1.c: 264: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3261  00EFF0  0E50               	movlw	80
  3262  00EFF2  6E29               	movwf	drawtext@y,c
  3263  00EFF4  C06D  F02A         	movff	_txt,drawtext@_text
  3264  00EFF8  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3265  00EFFC  0E00               	movlw	0
  3266  00EFFE  6E2D               	movwf	drawtext@color+1,c
  3267  00F000  0E1F               	movlw	31
  3268  00F002  6E2C               	movwf	drawtext@color,c
  3269  00F004  0E00               	movlw	0
  3270  00F006  6E2F               	movwf	drawtext@bg+1,c
  3271  00F008  0E00               	movlw	0
  3272  00F00A  6E2E               	movwf	drawtext@bg,c
  3273  00F00C  0E01               	movlw	1
  3274  00F00E  6E30               	movwf	drawtext@size,c
  3275  00F010  0E03               	movlw	3
  3276  00F012  EC2E  F067         	call	_drawtext
  3277                           
  3278                           ;Lab8p1.c: 265: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3279  00F016  0E5A               	movlw	90
  3280  00F018  6E29               	movwf	drawtext@y,c
  3281  00F01A  0E9A               	movlw	low _PED_NS_Count
  3282  00F01C  6E2A               	movwf	drawtext@_text,c
  3283  00F01E  0E00               	movlw	high _PED_NS_Count
  3284  00F020  6E2B               	movwf	drawtext@_text+1,c
  3285  00F022  0E00               	movlw	0
  3286  00F024  6E2D               	movwf	drawtext@color+1,c
  3287  00F026  0E1F               	movlw	31
  3288  00F028  6E2C               	movwf	drawtext@color,c
  3289  00F02A  0E00               	movlw	0
  3290  00F02C  6E2F               	movwf	drawtext@bg+1,c
  3291  00F02E  0E00               	movlw	0
  3292  00F030  6E2E               	movwf	drawtext@bg,c
  3293  00F032  0E02               	movlw	2
  3294  00F034  6E30               	movwf	drawtext@size,c
  3295  00F036  0E02               	movlw	2
  3296  00F038  EC2E  F067         	call	_drawtext
  3297                           
  3298                           ;Lab8p1.c: 268: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3299  00F03C  C06D  F001         	movff	_txt,strcpy@to
  3300  00F040  C06E  F002         	movff	_txt+1,strcpy@to+1
  3301  00F044  0EB4               	movlw	low STR_12
  3302  00F046  6E03               	movwf	strcpy@from,c
  3303  00F048  0EFC               	movlw	high STR_12
  3304  00F04A  6E04               	movwf	strcpy@from+1,c
  3305  00F04C  ECAE  F060         	call	_strcpy	;wreg free
  3306                           
  3307                           ;Lab8p1.c: 269: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3308  00F050  0E8C               	movlw	140
  3309  00F052  6E29               	movwf	drawtext@y,c
  3310  00F054  C06D  F02A         	movff	_txt,drawtext@_text
  3311  00F058  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3312  00F05C  0EFF               	movlw	255
  3313  00F05E  6E2D               	movwf	drawtext@color+1,c
  3314  00F060  682C               	setf	drawtext@color,c
  3315  00F062  0E00               	movlw	0
  3316  00F064  6E2F               	movwf	drawtext@bg+1,c
  3317  00F066  0E00               	movlw	0
  3318  00F068  6E2E               	movwf	drawtext@bg,c
  3319  00F06A  0E01               	movlw	1
  3320  00F06C  6E30               	movwf	drawtext@size,c
  3321  00F06E  0E01               	movlw	1
  3322  00F070  EC2E  F067         	call	_drawtext
  3323                           
  3324                           ;Lab8p1.c: 270: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3325  00F074  0E95               	movlw	149
  3326  00F076  6E29               	movwf	drawtext@y,c
  3327  00F078  0E7E               	movlw	low _SW_EWPED_Txt
  3328  00F07A  6E2A               	movwf	drawtext@_text,c
  3329  00F07C  0E00               	movlw	high _SW_EWPED_Txt
  3330  00F07E  6E2B               	movwf	drawtext@_text+1,c
  3331  00F080  0EFF               	movlw	255
  3332  00F082  6E2D               	movwf	drawtext@color+1,c
  3333  00F084  682C               	setf	drawtext@color,c
  3334  00F086  0E00               	movlw	0
  3335  00F088  6E2F               	movwf	drawtext@bg+1,c
  3336  00F08A  0E00               	movlw	0
  3337  00F08C  6E2E               	movwf	drawtext@bg,c
  3338  00F08E  0E01               	movlw	1
  3339  00F090  6E30               	movwf	drawtext@size,c
  3340  00F092  0E06               	movlw	6
  3341  00F094  EC2E  F067         	call	_drawtext
  3342                           
  3343                           ;Lab8p1.c: 271: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3344  00F098  0E95               	movlw	149
  3345  00F09A  6E29               	movwf	drawtext@y,c
  3346  00F09C  0E7C               	movlw	low _SW_EWLT_Txt
  3347  00F09E  6E2A               	movwf	drawtext@_text,c
  3348  00F0A0  0E00               	movlw	high _SW_EWLT_Txt
  3349  00F0A2  6E2B               	movwf	drawtext@_text+1,c
  3350  00F0A4  0EFF               	movlw	255
  3351  00F0A6  6E2D               	movwf	drawtext@color+1,c
  3352  00F0A8  682C               	setf	drawtext@color,c
  3353  00F0AA  0E00               	movlw	0
  3354  00F0AC  6E2F               	movwf	drawtext@bg+1,c
  3355  00F0AE  0E00               	movlw	0
  3356  00F0B0  6E2E               	movwf	drawtext@bg,c
  3357  00F0B2  0E01               	movlw	1
  3358  00F0B4  6E30               	movwf	drawtext@size,c
  3359  00F0B6  0E20               	movlw	32
  3360  00F0B8  EC2E  F067         	call	_drawtext
  3361                           
  3362                           ;Lab8p1.c: 272: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3363  00F0BC  0E95               	movlw	149
  3364  00F0BE  6E29               	movwf	drawtext@y,c
  3365  00F0C0  0EA7               	movlw	low _SW_NSPED_Txt
  3366  00F0C2  6E2A               	movwf	drawtext@_text,c
  3367  00F0C4  0E00               	movlw	high _SW_NSPED_Txt
  3368  00F0C6  6E2B               	movwf	drawtext@_text+1,c
  3369  00F0C8  0EFF               	movlw	255
  3370  00F0CA  6E2D               	movwf	drawtext@color+1,c
  3371  00F0CC  682C               	setf	drawtext@color,c
  3372  00F0CE  0E00               	movlw	0
  3373  00F0D0  6E2F               	movwf	drawtext@bg+1,c
  3374  00F0D2  0E00               	movlw	0
  3375  00F0D4  6E2E               	movwf	drawtext@bg,c
  3376  00F0D6  0E01               	movlw	1
  3377  00F0D8  6E30               	movwf	drawtext@size,c
  3378  00F0DA  0E3A               	movlw	58
  3379  00F0DC  EC2E  F067         	call	_drawtext
  3380                           
  3381                           ;Lab8p1.c: 273: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3382  00F0E0  0E95               	movlw	149
  3383  00F0E2  6E29               	movwf	drawtext@y,c
  3384  00F0E4  0EA5               	movlw	low _SW_NSLT_Txt
  3385  00F0E6  6E2A               	movwf	drawtext@_text,c
  3386  00F0E8  0E00               	movlw	high _SW_NSLT_Txt
  3387  00F0EA  6E2B               	movwf	drawtext@_text+1,c
  3388  00F0EC  0EFF               	movlw	255
  3389  00F0EE  6E2D               	movwf	drawtext@color+1,c
  3390  00F0F0  682C               	setf	drawtext@color,c
  3391  00F0F2  0E00               	movlw	0
  3392  00F0F4  6E2F               	movwf	drawtext@bg+1,c
  3393  00F0F6  0E00               	movlw	0
  3394  00F0F8  6E2E               	movwf	drawtext@bg,c
  3395  00F0FA  0E01               	movlw	1
  3396  00F0FC  6E30               	movwf	drawtext@size,c
  3397  00F0FE  0E57               	movlw	87
  3398  00F100  EC2E  F067         	call	_drawtext
  3399                           
  3400                           ;Lab8p1.c: 275: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3401  00F104  0E95               	movlw	149
  3402  00F106  6E29               	movwf	drawtext@y,c
  3403  00F108  0EA3               	movlw	low _SW_MODE_Txt
  3404  00F10A  6E2A               	movwf	drawtext@_text,c
  3405  00F10C  0E00               	movlw	high _SW_MODE_Txt
  3406  00F10E  6E2B               	movwf	drawtext@_text+1,c
  3407  00F110  0EFF               	movlw	255
  3408  00F112  6E2D               	movwf	drawtext@color+1,c
  3409  00F114  682C               	setf	drawtext@color,c
  3410  00F116  0E00               	movlw	0
  3411  00F118  6E2F               	movwf	drawtext@bg+1,c
  3412  00F11A  0E00               	movlw	0
  3413  00F11C  6E2E               	movwf	drawtext@bg,c
  3414  00F11E  0E01               	movlw	1
  3415  00F120  6E30               	movwf	drawtext@size,c
  3416  00F122  0E70               	movlw	112
  3417  00F124  EC2E  F067         	call	_drawtext
  3418  00F128  0012               	return		;funcret
  3419  00F12A                     __end_of_Initialize_Screen:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodl	equ	0xFF3
  3426                           intcon2	equ	0xFF1
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1l	equ	0xFE1
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function _fillScreen *****************
  3434 ;; Defined at:
  3435 ;;		line 652 in file "ST7735_TFT.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  color           2   19[COMRAM] unsigned int 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;		None               void
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    4
  3456 ;; This function calls:
  3457 ;;		_fillRectangle
  3458 ;; This function is called by:
  3459 ;;		_Initialize_Screen
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text6
  3464  00BFCA                     __ptext6:
  3465                           	opt stack 0
  3466  00BFCA                     _fillScreen:
  3467                           	opt stack 25
  3468                           
  3469                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3470                           
  3471                           ;incstack = 0
  3472  00BFCA  0E00               	movlw	0
  3473  00BFCC  6E08               	movwf	fillRectangle@y,c
  3474  00BFCE  0E80               	movlw	128
  3475  00BFD0  6E09               	movwf	fillRectangle@w,c
  3476  00BFD2  0EA0               	movlw	160
  3477  00BFD4  6E0A               	movwf	fillRectangle@h,c
  3478  00BFD6  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3479  00BFDA  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3480  00BFDE  0E00               	movlw	0
  3481  00BFE0  ECC0  F066         	call	_fillRectangle
  3482  00BFE4  0012               	return		;funcret
  3483  00BFE6                     __end_of_fillScreen:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodl	equ	0xFF3
  3490                           intcon2	equ	0xFF1
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postdec1	equ	0xFE5
  3494                           fsr1l	equ	0xFE1
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _fillRectangle *****************
  3498 ;; Defined at:
  3499 ;;		line 536 in file "ST7735_TFT.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  x               1    wreg     unsigned char 
  3502 ;;  y               1    7[COMRAM] unsigned char 
  3503 ;;  w               1    8[COMRAM] unsigned char 
  3504 ;;  h               1    9[COMRAM] unsigned char 
  3505 ;;  color           2   10[COMRAM] unsigned int 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  x               1   18[COMRAM] unsigned char 
  3508 ;;  lo              1   17[COMRAM] unsigned char 
  3509 ;;  hi              1   16[COMRAM] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;		None               void
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:       12 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    3
  3526 ;; This function calls:
  3527 ;;		_setAddrWindow
  3528 ;;		_spiwrite
  3529 ;; This function is called by:
  3530 ;;		_fillScreen
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text7
  3535  00CD80                     __ptext7:
  3536                           	opt stack 0
  3537  00CD80                     _fillRectangle:
  3538                           	opt stack 25
  3539                           
  3540                           ;incstack = 0
  3541                           ;fillRectangle@x stored from wreg
  3542  00CD80  6E13               	movwf	fillRectangle@x,c
  3543                           
  3544                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3545                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3546  00CD82  0E80               	movlw	128
  3547  00CD84  6013               	cpfslt	fillRectangle@x,c
  3548  00CD86  D069               	goto	l246
  3549  00CD88  0E9F               	movlw	159
  3550  00CD8A  6408               	cpfsgt	fillRectangle@y,c
  3551  00CD8C  D001               	goto	l4736
  3552                           
  3553                           ;ST7735_TFT.c: 540: return;
  3554  00CD8E  D065               	goto	l246
  3555  00CD90                     l4736:
  3556                           
  3557                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3558  00CD90  0EFF               	movlw	255
  3559  00CD92  6E0D               	movwf	??_fillRectangle& (0+255),c
  3560  00CD94  0EFF               	movlw	255
  3561  00CD96  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3562  00CD98  5009               	movf	fillRectangle@w,w,c
  3563  00CD9A  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3564  00CD9E  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3565  00CDA0  260F               	addwf	??_fillRectangle+2,f,c
  3566  00CDA2  0E00               	movlw	0
  3567  00CDA4  2210               	addwfc	??_fillRectangle+3,f,c
  3568  00CDA6  500D               	movf	??_fillRectangle,w,c
  3569  00CDA8  260F               	addwf	??_fillRectangle+2,f,c
  3570  00CDAA  500E               	movf	??_fillRectangle+1,w,c
  3571  00CDAC  2210               	addwfc	??_fillRectangle+3,f,c
  3572  00CDAE  BE10               	btfsc	??_fillRectangle+3,7,c
  3573  00CDB0  D00A               	goto	l247
  3574  00CDB2  5010               	movf	??_fillRectangle+3,w,c
  3575  00CDB4  E104               	bnz	u4450
  3576  00CDB6  0E80               	movlw	128
  3577  00CDB8  5C0F               	subwf	??_fillRectangle+2,w,c
  3578  00CDBA  A0D8               	btfss	status,0,c
  3579  00CDBC  D004               	goto	l247
  3580  00CDBE                     u4450:
  3581                           
  3582                           ;ST7735_TFT.c: 542: w = 128 - x;
  3583  00CDBE  5013               	movf	fillRectangle@x,w,c
  3584  00CDC0  0800               	sublw	0
  3585  00CDC2  0F80               	addlw	128
  3586  00CDC4  6E09               	movwf	fillRectangle@w,c
  3587  00CDC6                     l247:
  3588                           
  3589                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3590  00CDC6  0EFF               	movlw	255
  3591  00CDC8  6E0D               	movwf	??_fillRectangle& (0+255),c
  3592  00CDCA  0EFF               	movlw	255
  3593  00CDCC  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3594  00CDCE  500A               	movf	fillRectangle@h,w,c
  3595  00CDD0  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3596  00CDD4  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3597  00CDD6  260F               	addwf	??_fillRectangle+2,f,c
  3598  00CDD8  0E00               	movlw	0
  3599  00CDDA  2210               	addwfc	??_fillRectangle+3,f,c
  3600  00CDDC  500D               	movf	??_fillRectangle,w,c
  3601  00CDDE  260F               	addwf	??_fillRectangle+2,f,c
  3602  00CDE0  500E               	movf	??_fillRectangle+1,w,c
  3603  00CDE2  2210               	addwfc	??_fillRectangle+3,f,c
  3604  00CDE4  BE10               	btfsc	??_fillRectangle+3,7,c
  3605  00CDE6  D00B               	goto	l4742
  3606  00CDE8  5010               	movf	??_fillRectangle+3,w,c
  3607  00CDEA  E104               	bnz	u4460
  3608  00CDEC  0EA0               	movlw	160
  3609  00CDEE  5C0F               	subwf	??_fillRectangle+2,w,c
  3610  00CDF0  A0D8               	btfss	status,0,c
  3611  00CDF2  D005               	goto	l4742
  3612  00CDF4                     u4460:
  3613                           
  3614                           ;ST7735_TFT.c: 544: h = 160 - y;
  3615  00CDF4  5008               	movf	fillRectangle@y,w,c
  3616  00CDF6  0800               	sublw	0
  3617  00CDF8  0FA0               	addlw	160
  3618  00CDFA  6E0A               	movwf	fillRectangle@h,c
  3619  00CDFC  D000               	goto	l4742
  3620  00CDFE                     l4742:
  3621                           
  3622                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3623  00CDFE  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3624  00CE02  5013               	movf	fillRectangle@x,w,c
  3625  00CE04  2409               	addwf	fillRectangle@w,w,c
  3626  00CE06  6E0D               	movwf	??_fillRectangle& (0+255),c
  3627  00CE08  040D               	decf	??_fillRectangle,w,c
  3628  00CE0A  6E05               	movwf	setAddrWindow@x1,c
  3629  00CE0C  5008               	movf	fillRectangle@y,w,c
  3630  00CE0E  240A               	addwf	fillRectangle@h,w,c
  3631  00CE10  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3632  00CE12  040E               	decf	??_fillRectangle+1,w,c
  3633  00CE14  6E06               	movwf	setAddrWindow@y1,c
  3634  00CE16  5013               	movf	fillRectangle@x,w,c
  3635  00CE18  ECF2  F061         	call	_setAddrWindow
  3636                           
  3637                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3638  00CE1C  500C               	movf	fillRectangle@color+1,w,c
  3639  00CE1E  6E11               	movwf	fillRectangle@hi,c
  3640  00CE20  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3641                           
  3642                           ;ST7735_TFT.c: 547: PORTCbits.RC2 = 1;
  3643  00CE24  8482               	bsf	3970,2,c	;volatile
  3644                           
  3645                           ;ST7735_TFT.c: 548: PORTCbits.RC4 = 0;
  3646  00CE26  9882               	bcf	3970,4,c	;volatile
  3647                           
  3648                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3649  00CE28  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3650  00CE2C                     l4754:
  3651  00CE2C  5008               	movf	fillRectangle@y,w,c
  3652  00CE2E  B4D8               	btfsc	status,2,c
  3653  00CE30  D013               	goto	l250
  3654  00CE32  D001               	goto	l249
  3655  00CE34  D011               	goto	l250
  3656  00CE36                     l249:
  3657                           
  3658                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3659  00CE36  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3660  00CE3A                     l4758:
  3661  00CE3A  5013               	movf	fillRectangle@x,w,c
  3662  00CE3C  B4D8               	btfsc	status,2,c
  3663  00CE3E  D00A               	goto	l4768
  3664  00CE40  D001               	goto	l4762
  3665  00CE42  D008               	goto	l4768
  3666  00CE44                     l4762:
  3667                           
  3668                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3669  00CE44  5011               	movf	fillRectangle@hi,w,c
  3670  00CE46  ECAE  F05F         	call	_spiwrite
  3671                           
  3672                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3673  00CE4A  5012               	movf	fillRectangle@lo,w,c
  3674  00CE4C  ECAE  F05F         	call	_spiwrite
  3675  00CE50  0613               	decf	fillRectangle@x,f,c
  3676  00CE52  D7F3               	goto	l4758
  3677  00CE54                     l4768:
  3678  00CE54  0608               	decf	fillRectangle@y,f,c
  3679  00CE56  D7EA               	goto	l4754
  3680  00CE58                     l250:
  3681                           
  3682                           ;ST7735_TFT.c: 554: }
  3683                           ;ST7735_TFT.c: 555: }
  3684                           ;ST7735_TFT.c: 556: PORTCbits.RC4 = 1;
  3685  00CE58  8882               	bsf	3970,4,c	;volatile
  3686  00CE5A                     l246:
  3687  00CE5A  0012               	return		;funcret
  3688  00CE5C                     __end_of_fillRectangle:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodl	equ	0xFF3
  3695                           intcon2	equ	0xFF1
  3696                           postinc0	equ	0xFEE
  3697                           wreg	equ	0xFE8
  3698                           postdec1	equ	0xFE5
  3699                           fsr1l	equ	0xFE1
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _drawRect *****************
  3703 ;; Defined at:
  3704 ;;		line 718 in file "ST7735_TFT.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  x               2   18[COMRAM] unsigned int 
  3707 ;;  y               2   20[COMRAM] unsigned int 
  3708 ;;  w               2   22[COMRAM] unsigned int 
  3709 ;;  h               2   24[COMRAM] unsigned int 
  3710 ;;  color           2   26[COMRAM] unsigned int 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;		None               void
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3722 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;Total ram usage:       11 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    4
  3729 ;; This function calls:
  3730 ;;		_drawFastHLine
  3731 ;;		_drawFastVLine
  3732 ;; This function is called by:
  3733 ;;		_Initialize_Screen
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           	psect	text8
  3738  00C598                     __ptext8:
  3739                           	opt stack 0
  3740  00C598                     _drawRect:
  3741                           	opt stack 25
  3742                           
  3743                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3744                           
  3745                           ;incstack = 0
  3746  00C598  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3747  00C59C  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3748  00C5A0  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3749  00C5A4  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3750  00C5A8  5013               	movf	drawRect@x,w,c
  3751  00C5AA  EC35  F064         	call	_drawFastHLine
  3752                           
  3753                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3754  00C5AE  5015               	movf	drawRect@y,w,c
  3755  00C5B0  2419               	addwf	drawRect@h,w,c
  3756  00C5B2  6E1D               	movwf	??_drawRect& (0+255),c
  3757  00C5B4  041D               	decf	??_drawRect,w,c
  3758  00C5B6  6E08               	movwf	drawFastHLine@y,c
  3759  00C5B8  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3760  00C5BC  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3761  00C5C0  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3762  00C5C4  5013               	movf	drawRect@x,w,c
  3763  00C5C6  EC35  F064         	call	_drawFastHLine
  3764                           
  3765                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3766  00C5CA  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3767  00C5CE  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3768  00C5D2  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3769  00C5D6  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3770  00C5DA  5013               	movf	drawRect@x,w,c
  3771  00C5DC  ECF1  F063         	call	_drawFastVLine
  3772                           
  3773                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3774  00C5E0  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3775  00C5E4  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3776  00C5E8  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3777  00C5EC  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3778  00C5F0  5013               	movf	drawRect@x,w,c
  3779  00C5F2  2417               	addwf	drawRect@w,w,c
  3780  00C5F4  6E1D               	movwf	??_drawRect& (0+255),c
  3781  00C5F6  041D               	decf	??_drawRect,w,c
  3782  00C5F8  ECF1  F063         	call	_drawFastVLine
  3783  00C5FC  0012               	return		;funcret
  3784  00C5FE                     __end_of_drawRect:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodl	equ	0xFF3
  3791                           intcon2	equ	0xFF1
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           postdec1	equ	0xFE5
  3795                           fsr1l	equ	0xFE1
  3796                           status	equ	0xFD8
  3797                           
  3798 ;; *************** function _drawFastHLine *****************
  3799 ;; Defined at:
  3800 ;;		line 657 in file "ST7735_TFT.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  x               1    wreg     unsigned char 
  3803 ;;  y               1    7[COMRAM] unsigned char 
  3804 ;;  w               1    8[COMRAM] unsigned char 
  3805 ;;  color           2    9[COMRAM] unsigned int 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  x               1   17[COMRAM] unsigned char 
  3808 ;;  lo              1   16[COMRAM] unsigned char 
  3809 ;;  hi              1   15[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:       11 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		_setAddrWindow
  3828 ;;		_spiwrite
  3829 ;; This function is called by:
  3830 ;;		_drawRect
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text9
  3835  00C86A                     __ptext9:
  3836                           	opt stack 0
  3837  00C86A                     _drawFastHLine:
  3838                           	opt stack 25
  3839                           
  3840                           ;incstack = 0
  3841                           ;drawFastHLine@x stored from wreg
  3842  00C86A  6E12               	movwf	drawFastHLine@x,c
  3843                           
  3844                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3845                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3846  00C86C  0E80               	movlw	128
  3847  00C86E  6012               	cpfslt	drawFastHLine@x,c
  3848  00C870  D03F               	goto	l291
  3849  00C872  0E9F               	movlw	159
  3850  00C874  6408               	cpfsgt	drawFastHLine@y,c
  3851  00C876  D001               	goto	l4776
  3852                           
  3853                           ;ST7735_TFT.c: 661: return;
  3854  00C878  D03B               	goto	l291
  3855  00C87A                     l4776:
  3856                           
  3857                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3858  00C87A  0EFF               	movlw	255
  3859  00C87C  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3860  00C87E  0EFF               	movlw	255
  3861  00C880  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3862  00C882  5009               	movf	drawFastHLine@w,w,c
  3863  00C884  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3864  00C888  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3865  00C88A  260E               	addwf	??_drawFastHLine+2,f,c
  3866  00C88C  0E00               	movlw	0
  3867  00C88E  220F               	addwfc	??_drawFastHLine+3,f,c
  3868  00C890  500C               	movf	??_drawFastHLine,w,c
  3869  00C892  260E               	addwf	??_drawFastHLine+2,f,c
  3870  00C894  500D               	movf	??_drawFastHLine+1,w,c
  3871  00C896  220F               	addwfc	??_drawFastHLine+3,f,c
  3872  00C898  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3873  00C89A  D00B               	goto	l4780
  3874  00C89C  500F               	movf	??_drawFastHLine+3,w,c
  3875  00C89E  E104               	bnz	u4530
  3876  00C8A0  0E80               	movlw	128
  3877  00C8A2  5C0E               	subwf	??_drawFastHLine+2,w,c
  3878  00C8A4  A0D8               	btfss	status,0,c
  3879  00C8A6  D005               	goto	l4780
  3880  00C8A8                     u4530:
  3881                           
  3882                           ;ST7735_TFT.c: 663: w = 128 - x;
  3883  00C8A8  5012               	movf	drawFastHLine@x,w,c
  3884  00C8AA  0800               	sublw	0
  3885  00C8AC  0F80               	addlw	128
  3886  00C8AE  6E09               	movwf	drawFastHLine@w,c
  3887  00C8B0  D000               	goto	l4780
  3888  00C8B2                     l4780:
  3889                           
  3890                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3891  00C8B2  500B               	movf	drawFastHLine@color+1,w,c
  3892  00C8B4  6E10               	movwf	drawFastHLine@hi,c
  3893  00C8B6  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3894                           
  3895                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3896  00C8BA  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3897  00C8BE  5012               	movf	drawFastHLine@x,w,c
  3898  00C8C0  2409               	addwf	drawFastHLine@w,w,c
  3899  00C8C2  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3900  00C8C4  040C               	decf	??_drawFastHLine,w,c
  3901  00C8C6  6E05               	movwf	setAddrWindow@x1,c
  3902  00C8C8  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3903  00C8CC  5012               	movf	drawFastHLine@x,w,c
  3904  00C8CE  ECF2  F061         	call	_setAddrWindow
  3905                           
  3906                           ;ST7735_TFT.c: 666: PORTCbits.RC2 = 1;
  3907  00C8D2  8482               	bsf	3970,2,c	;volatile
  3908                           
  3909                           ;ST7735_TFT.c: 667: PORTCbits.RC4 = 0;
  3910  00C8D4  9882               	bcf	3970,4,c	;volatile
  3911                           
  3912                           ;ST7735_TFT.c: 669: while (w--) {
  3913  00C8D6  D007               	goto	l4792
  3914  00C8D8                     l4790:
  3915                           
  3916                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3917  00C8D8  5010               	movf	drawFastHLine@hi,w,c
  3918  00C8DA  ECAE  F05F         	call	_spiwrite
  3919                           
  3920                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3921  00C8DE  5011               	movf	drawFastHLine@lo,w,c
  3922  00C8E0  ECAE  F05F         	call	_spiwrite
  3923  00C8E4  D000               	goto	l4792
  3924  00C8E6                     l4792:
  3925  00C8E6  0609               	decf	drawFastHLine@w,f,c
  3926  00C8E8  2809               	incf	drawFastHLine@w,w,c
  3927  00C8EA  A4D8               	btfss	status,2,c
  3928  00C8EC  D7F5               	goto	l4790
  3929                           
  3930                           ;ST7735_TFT.c: 672: }
  3931                           ;ST7735_TFT.c: 673: PORTCbits.RC4 = 1;
  3932  00C8EE  8882               	bsf	3970,4,c	;volatile
  3933  00C8F0                     l291:
  3934  00C8F0  0012               	return		;funcret
  3935  00C8F2                     __end_of_drawFastHLine:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodl	equ	0xFF3
  3942                           intcon2	equ	0xFF1
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           postdec1	equ	0xFE5
  3946                           fsr1l	equ	0xFE1
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _TFT_GreenTab_Initialize *****************
  3950 ;; Defined at:
  3951 ;;		line 677 in file "ST7735_TFT.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;		None               void
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    3
  3972 ;; This function calls:
  3973 ;;		_Rcmd1
  3974 ;;		_Rcmd2red
  3975 ;;		_Rcmd3
  3976 ;;		_write_command
  3977 ;;		_write_data
  3978 ;; This function is called by:
  3979 ;;		_Initialize_Screen
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text10
  3984  00C0A4                     __ptext10:
  3985                           	opt stack 0
  3986  00C0A4                     _TFT_GreenTab_Initialize:
  3987                           	opt stack 26
  3988                           
  3989                           ;ST7735_TFT.c: 679: PORTCbits.RC4 = 1;
  3990                           
  3991                           ;incstack = 0
  3992  00C0A4  8882               	bsf	3970,4,c	;volatile
  3993                           
  3994                           ;ST7735_TFT.c: 680: PORTCbits.RC2 = 0;
  3995  00C0A6  9482               	bcf	3970,2,c	;volatile
  3996                           
  3997                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3998  00C0A8  0E80               	movlw	128
  3999  00C0AA  6EC7               	movwf	4039,c	;volatile
  4000                           
  4001                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  4002  00C0AC  0E30               	movlw	48
  4003  00C0AE  6EC6               	movwf	4038,c	;volatile
  4004                           
  4005                           ;ST7735_TFT.c: 686: Rcmd1();
  4006  00C0B0  ECF7  F06A         	call	_Rcmd1	;wreg free
  4007                           
  4008                           ;ST7735_TFT.c: 687: Rcmd2red();
  4009  00C0B4  EC04  F061         	call	_Rcmd2red	;wreg free
  4010                           
  4011                           ;ST7735_TFT.c: 688: Rcmd3();
  4012  00C0B8  ECF5  F068         	call	_Rcmd3	;wreg free
  4013                           
  4014                           ;ST7735_TFT.c: 689: write_command(0x36);
  4015  00C0BC  0E36               	movlw	54
  4016  00C0BE  EC8C  F05F         	call	_write_command
  4017                           
  4018                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4019  00C0C2  0EC0               	movlw	192
  4020  00C0C4  EC94  F05F         	call	_write_data
  4021                           
  4022                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4023  00C0C8  0E01               	movlw	1
  4024  00C0CA  6E76               	movwf	__tft_type,c
  4025  00C0CC  0012               	return		;funcret
  4026  00C0CE                     __end_of_TFT_GreenTab_Initialize:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodl	equ	0xFF3
  4033                           intcon2	equ	0xFF1
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           postdec1	equ	0xFE5
  4037                           fsr1l	equ	0xFE1
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _Rcmd3 *****************
  4041 ;; Defined at:
  4042 ;;		line 371 in file "ST7735_TFT.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    2
  4063 ;; This function calls:
  4064 ;;		_delay_ms
  4065 ;;		_write_command
  4066 ;;		_write_data
  4067 ;; This function is called by:
  4068 ;;		_TFT_GreenTab_Initialize
  4069 ;;		_TFT_BlackTab_Initialize
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text11
  4074  00D1EA                     __ptext11:
  4075                           	opt stack 0
  4076  00D1EA                     _Rcmd3:
  4077                           	opt stack 26
  4078                           
  4079                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4080                           
  4081                           ;incstack = 0
  4082  00D1EA  0EE0               	movlw	224
  4083  00D1EC  EC8C  F05F         	call	_write_command
  4084                           
  4085                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4086  00D1F0  0E02               	movlw	2
  4087  00D1F2  EC94  F05F         	call	_write_data
  4088  00D1F6  0E1C               	movlw	28
  4089  00D1F8  EC94  F05F         	call	_write_data
  4090  00D1FC  0E07               	movlw	7
  4091  00D1FE  EC94  F05F         	call	_write_data
  4092  00D202  0E12               	movlw	18
  4093  00D204  EC94  F05F         	call	_write_data
  4094                           
  4095                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4096  00D208  0E37               	movlw	55
  4097  00D20A  EC94  F05F         	call	_write_data
  4098  00D20E  0E32               	movlw	50
  4099  00D210  EC94  F05F         	call	_write_data
  4100  00D214  0E29               	movlw	41
  4101  00D216  EC94  F05F         	call	_write_data
  4102  00D21A  0E2D               	movlw	45
  4103  00D21C  EC94  F05F         	call	_write_data
  4104                           
  4105                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4106  00D220  0E29               	movlw	41
  4107  00D222  EC94  F05F         	call	_write_data
  4108  00D226  0E25               	movlw	37
  4109  00D228  EC94  F05F         	call	_write_data
  4110  00D22C  0E2B               	movlw	43
  4111  00D22E  EC94  F05F         	call	_write_data
  4112  00D232  0E39               	movlw	57
  4113  00D234  EC94  F05F         	call	_write_data
  4114                           
  4115                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4116  00D238  0E00               	movlw	0
  4117  00D23A  EC94  F05F         	call	_write_data
  4118  00D23E  0E01               	movlw	1
  4119  00D240  EC94  F05F         	call	_write_data
  4120  00D244  0E03               	movlw	3
  4121  00D246  EC94  F05F         	call	_write_data
  4122  00D24A  0E10               	movlw	16
  4123  00D24C  EC94  F05F         	call	_write_data
  4124                           
  4125                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4126  00D250  0EE1               	movlw	225
  4127  00D252  EC8C  F05F         	call	_write_command
  4128                           
  4129                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4130  00D256  0E03               	movlw	3
  4131  00D258  EC94  F05F         	call	_write_data
  4132  00D25C  0E1D               	movlw	29
  4133  00D25E  EC94  F05F         	call	_write_data
  4134  00D262  0E07               	movlw	7
  4135  00D264  EC94  F05F         	call	_write_data
  4136  00D268  0E06               	movlw	6
  4137  00D26A  EC94  F05F         	call	_write_data
  4138                           
  4139                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4140  00D26E  0E2E               	movlw	46
  4141  00D270  EC94  F05F         	call	_write_data
  4142  00D274  0E2C               	movlw	44
  4143  00D276  EC94  F05F         	call	_write_data
  4144  00D27A  0E29               	movlw	41
  4145  00D27C  EC94  F05F         	call	_write_data
  4146  00D280  0E2D               	movlw	45
  4147  00D282  EC94  F05F         	call	_write_data
  4148                           
  4149                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4150  00D286  0E2E               	movlw	46
  4151  00D288  EC94  F05F         	call	_write_data
  4152  00D28C  0E2E               	movlw	46
  4153  00D28E  EC94  F05F         	call	_write_data
  4154  00D292  0E37               	movlw	55
  4155  00D294  EC94  F05F         	call	_write_data
  4156  00D298  0E3F               	movlw	63
  4157  00D29A  EC94  F05F         	call	_write_data
  4158                           
  4159                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4160  00D29E  0E00               	movlw	0
  4161  00D2A0  EC94  F05F         	call	_write_data
  4162  00D2A4  0E00               	movlw	0
  4163  00D2A6  EC94  F05F         	call	_write_data
  4164  00D2AA  0E02               	movlw	2
  4165  00D2AC  EC94  F05F         	call	_write_data
  4166  00D2B0  0E10               	movlw	16
  4167  00D2B2  EC94  F05F         	call	_write_data
  4168                           
  4169                           ;ST7735_TFT.c: 383: write_command(0x13);
  4170  00D2B6  0E13               	movlw	19
  4171  00D2B8  EC8C  F05F         	call	_write_command
  4172                           
  4173                           ;ST7735_TFT.c: 384: delay_ms(10);
  4174  00D2BC  0E00               	movlw	0
  4175  00D2BE  6E16               	movwf	delay_ms@ms+1,c
  4176  00D2C0  0E0A               	movlw	10
  4177  00D2C2  6E15               	movwf	delay_ms@ms,c
  4178  00D2C4  EC42  F062         	call	_delay_ms	;wreg free
  4179                           
  4180                           ;ST7735_TFT.c: 385: write_command(0x29);
  4181  00D2C8  0E29               	movlw	41
  4182  00D2CA  EC8C  F05F         	call	_write_command
  4183                           
  4184                           ;ST7735_TFT.c: 386: delay_ms(100);
  4185  00D2CE  0E00               	movlw	0
  4186  00D2D0  6E16               	movwf	delay_ms@ms+1,c
  4187  00D2D2  0E64               	movlw	100
  4188  00D2D4  6E15               	movwf	delay_ms@ms,c
  4189  00D2D6  EC42  F062         	call	_delay_ms	;wreg free
  4190  00D2DA  0012               	return		;funcret
  4191  00D2DC                     __end_of_Rcmd3:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodl	equ	0xFF3
  4198                           intcon2	equ	0xFF1
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           postdec1	equ	0xFE5
  4202                           fsr1l	equ	0xFE1
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _Rcmd2red *****************
  4206 ;; Defined at:
  4207 ;;		line 361 in file "ST7735_TFT.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    2
  4228 ;; This function calls:
  4229 ;;		_write_command
  4230 ;;		_write_data
  4231 ;; This function is called by:
  4232 ;;		_TFT_GreenTab_Initialize
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text12
  4237  00C208                     __ptext12:
  4238                           	opt stack 0
  4239  00C208                     _Rcmd2red:
  4240                           	opt stack 26
  4241                           
  4242                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4243                           
  4244                           ;incstack = 0
  4245  00C208  0E2A               	movlw	42
  4246  00C20A  EC8C  F05F         	call	_write_command
  4247                           
  4248                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4249  00C20E  0E00               	movlw	0
  4250  00C210  EC94  F05F         	call	_write_data
  4251  00C214  0E00               	movlw	0
  4252  00C216  EC94  F05F         	call	_write_data
  4253                           
  4254                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4255  00C21A  0E00               	movlw	0
  4256  00C21C  EC94  F05F         	call	_write_data
  4257  00C220  0E7F               	movlw	127
  4258  00C222  EC94  F05F         	call	_write_data
  4259                           
  4260                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4261  00C226  0E2B               	movlw	43
  4262  00C228  EC8C  F05F         	call	_write_command
  4263                           
  4264                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4265  00C22C  0E00               	movlw	0
  4266  00C22E  EC94  F05F         	call	_write_data
  4267  00C232  0E00               	movlw	0
  4268  00C234  EC94  F05F         	call	_write_data
  4269                           
  4270                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4271  00C238  0E00               	movlw	0
  4272  00C23A  EC94  F05F         	call	_write_data
  4273  00C23E  0E9F               	movlw	159
  4274  00C240  EC94  F05F         	call	_write_data
  4275  00C244  0012               	return		;funcret
  4276  00C246                     __end_of_Rcmd2red:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodl	equ	0xFF3
  4283                           intcon2	equ	0xFF1
  4284                           postinc0	equ	0xFEE
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function _Rcmd1 *****************
  4291 ;; Defined at:
  4292 ;;		line 314 in file "ST7735_TFT.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;		None               void
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;Total ram usage:        0 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    2
  4313 ;; This function calls:
  4314 ;;		_delay_ms
  4315 ;;		_write_command
  4316 ;;		_write_data
  4317 ;; This function is called by:
  4318 ;;		_TFT_GreenTab_Initialize
  4319 ;;		_TFT_BlackTab_Initialize
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text13
  4324  00D5EE                     __ptext13:
  4325                           	opt stack 0
  4326  00D5EE                     _Rcmd1:
  4327                           	opt stack 26
  4328                           
  4329                           ;ST7735_TFT.c: 316: write_command(0x01);
  4330                           
  4331                           ;incstack = 0
  4332  00D5EE  0E01               	movlw	1
  4333  00D5F0  EC8C  F05F         	call	_write_command
  4334                           
  4335                           ;ST7735_TFT.c: 317: delay_ms(150);
  4336  00D5F4  0E00               	movlw	0
  4337  00D5F6  6E16               	movwf	delay_ms@ms+1,c
  4338  00D5F8  0E96               	movlw	150
  4339  00D5FA  6E15               	movwf	delay_ms@ms,c
  4340  00D5FC  EC42  F062         	call	_delay_ms	;wreg free
  4341                           
  4342                           ;ST7735_TFT.c: 318: write_command(0x11);
  4343  00D600  0E11               	movlw	17
  4344  00D602  EC8C  F05F         	call	_write_command
  4345                           
  4346                           ;ST7735_TFT.c: 319: delay_ms(500);
  4347  00D606  0E01               	movlw	1
  4348  00D608  6E16               	movwf	delay_ms@ms+1,c
  4349  00D60A  0EF4               	movlw	244
  4350  00D60C  6E15               	movwf	delay_ms@ms,c
  4351  00D60E  EC42  F062         	call	_delay_ms	;wreg free
  4352                           
  4353                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4354  00D612  0EB1               	movlw	177
  4355  00D614  EC8C  F05F         	call	_write_command
  4356                           
  4357                           ;ST7735_TFT.c: 321: write_data(0x01);
  4358  00D618  0E01               	movlw	1
  4359  00D61A  EC94  F05F         	call	_write_data
  4360                           
  4361                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4362  00D61E  0E2C               	movlw	44
  4363  00D620  EC94  F05F         	call	_write_data
  4364                           
  4365                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4366  00D624  0E2D               	movlw	45
  4367  00D626  EC94  F05F         	call	_write_data
  4368                           
  4369                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4370  00D62A  0EB2               	movlw	178
  4371  00D62C  EC8C  F05F         	call	_write_command
  4372                           
  4373                           ;ST7735_TFT.c: 325: write_data(0x01);
  4374  00D630  0E01               	movlw	1
  4375  00D632  EC94  F05F         	call	_write_data
  4376                           
  4377                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4378  00D636  0E2C               	movlw	44
  4379  00D638  EC94  F05F         	call	_write_data
  4380                           
  4381                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4382  00D63C  0E2D               	movlw	45
  4383  00D63E  EC94  F05F         	call	_write_data
  4384                           
  4385                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4386  00D642  0EB3               	movlw	179
  4387  00D644  EC8C  F05F         	call	_write_command
  4388                           
  4389                           ;ST7735_TFT.c: 329: write_data(0x01);
  4390  00D648  0E01               	movlw	1
  4391  00D64A  EC94  F05F         	call	_write_data
  4392                           
  4393                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4394  00D64E  0E2C               	movlw	44
  4395  00D650  EC94  F05F         	call	_write_data
  4396                           
  4397                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4398  00D654  0E2D               	movlw	45
  4399  00D656  EC94  F05F         	call	_write_data
  4400                           
  4401                           ;ST7735_TFT.c: 332: write_data(0x01);
  4402  00D65A  0E01               	movlw	1
  4403  00D65C  EC94  F05F         	call	_write_data
  4404                           
  4405                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4406  00D660  0E2C               	movlw	44
  4407  00D662  EC94  F05F         	call	_write_data
  4408                           
  4409                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4410  00D666  0E2D               	movlw	45
  4411  00D668  EC94  F05F         	call	_write_data
  4412                           
  4413                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4414  00D66C  0EB4               	movlw	180
  4415  00D66E  EC8C  F05F         	call	_write_command
  4416                           
  4417                           ;ST7735_TFT.c: 336: write_data(0x07);
  4418  00D672  0E07               	movlw	7
  4419  00D674  EC94  F05F         	call	_write_data
  4420                           
  4421                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4422  00D678  0EC0               	movlw	192
  4423  00D67A  EC8C  F05F         	call	_write_command
  4424                           
  4425                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4426  00D67E  0EA2               	movlw	162
  4427  00D680  EC94  F05F         	call	_write_data
  4428                           
  4429                           ;ST7735_TFT.c: 339: write_data(0x02);
  4430  00D684  0E02               	movlw	2
  4431  00D686  EC94  F05F         	call	_write_data
  4432                           
  4433                           ;ST7735_TFT.c: 340: write_data(0x84);
  4434  00D68A  0E84               	movlw	132
  4435  00D68C  EC94  F05F         	call	_write_data
  4436                           
  4437                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4438  00D690  0EC1               	movlw	193
  4439  00D692  EC8C  F05F         	call	_write_command
  4440                           
  4441                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4442  00D696  0EC5               	movlw	197
  4443  00D698  EC94  F05F         	call	_write_data
  4444                           
  4445                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4446  00D69C  0EC2               	movlw	194
  4447  00D69E  EC8C  F05F         	call	_write_command
  4448                           
  4449                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4450  00D6A2  0E0A               	movlw	10
  4451  00D6A4  EC94  F05F         	call	_write_data
  4452                           
  4453                           ;ST7735_TFT.c: 345: write_data(0x00);
  4454  00D6A8  0E00               	movlw	0
  4455  00D6AA  EC94  F05F         	call	_write_data
  4456                           
  4457                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4458  00D6AE  0EC3               	movlw	195
  4459  00D6B0  EC8C  F05F         	call	_write_command
  4460                           
  4461                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4462  00D6B4  0E8A               	movlw	138
  4463  00D6B6  EC94  F05F         	call	_write_data
  4464                           
  4465                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4466  00D6BA  0E2A               	movlw	42
  4467  00D6BC  EC94  F05F         	call	_write_data
  4468                           
  4469                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4470  00D6C0  0EC4               	movlw	196
  4471  00D6C2  EC8C  F05F         	call	_write_command
  4472                           
  4473                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4474  00D6C6  0E8A               	movlw	138
  4475  00D6C8  EC94  F05F         	call	_write_data
  4476                           
  4477                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4478  00D6CC  0EEE               	movlw	238
  4479  00D6CE  EC94  F05F         	call	_write_data
  4480                           
  4481                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4482  00D6D2  0EC5               	movlw	197
  4483  00D6D4  EC8C  F05F         	call	_write_command
  4484                           
  4485                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4486  00D6D8  0E0E               	movlw	14
  4487  00D6DA  EC94  F05F         	call	_write_data
  4488                           
  4489                           ;ST7735_TFT.c: 354: write_command(0x20);
  4490  00D6DE  0E20               	movlw	32
  4491  00D6E0  EC8C  F05F         	call	_write_command
  4492                           
  4493                           ;ST7735_TFT.c: 355: write_command(0x36);
  4494  00D6E4  0E36               	movlw	54
  4495  00D6E6  EC8C  F05F         	call	_write_command
  4496                           
  4497                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4498  00D6EA  0EC8               	movlw	200
  4499  00D6EC  EC94  F05F         	call	_write_data
  4500                           
  4501                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4502  00D6F0  0E3A               	movlw	58
  4503  00D6F2  EC8C  F05F         	call	_write_command
  4504                           
  4505                           ;ST7735_TFT.c: 358: write_data(0x05);
  4506  00D6F6  0E05               	movlw	5
  4507  00D6F8  EC94  F05F         	call	_write_data
  4508  00D6FC  0012               	return		;funcret
  4509  00D6FE                     __end_of_Rcmd1:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodl	equ	0xFF3
  4516                           intcon2	equ	0xFF1
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postdec1	equ	0xFE5
  4520                           fsr1l	equ	0xFE1
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _LCD_Reset *****************
  4524 ;; Defined at:
  4525 ;;		line 250 in file "ST7735_TFT.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;		None               void
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    2
  4546 ;; This function calls:
  4547 ;;		_delay_ms
  4548 ;; This function is called by:
  4549 ;;		_Initialize_Screen
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text14
  4554  00BF4A                     __ptext14:
  4555                           	opt stack 0
  4556  00BF4A                     _LCD_Reset:
  4557                           	opt stack 27
  4558                           
  4559                           ;ST7735_TFT.c: 252: PORTCbits.RC1 = 0;
  4560                           
  4561                           ;incstack = 0
  4562  00BF4A  9282               	bcf	3970,1,c	;volatile
  4563                           
  4564                           ;ST7735_TFT.c: 253: delay_ms(100);
  4565  00BF4C  0E00               	movlw	0
  4566  00BF4E  6E16               	movwf	delay_ms@ms+1,c
  4567  00BF50  0E64               	movlw	100
  4568  00BF52  6E15               	movwf	delay_ms@ms,c
  4569  00BF54  EC42  F062         	call	_delay_ms	;wreg free
  4570                           
  4571                           ;ST7735_TFT.c: 254: PORTCbits.RC1 = 1;
  4572  00BF58  8282               	bsf	3970,1,c	;volatile
  4573  00BF5A  0012               	return		;funcret
  4574  00BF5C                     __end_of_LCD_Reset:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           prodl	equ	0xFF3
  4581                           intcon2	equ	0xFF1
  4582                           postinc0	equ	0xFEE
  4583                           wreg	equ	0xFE8
  4584                           postdec1	equ	0xFE5
  4585                           fsr1l	equ	0xFE1
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function _delay_ms *****************
  4589 ;; Defined at:
  4590 ;;		line 97 in file "ST7735_TFT.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  ms              2   20[COMRAM] int 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  count           2   24[COMRAM] int 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;		None               void
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;Total ram usage:        6 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    1
  4611 ;; This function calls:
  4612 ;;		___wmul
  4613 ;; This function is called by:
  4614 ;;		_LCD_Reset
  4615 ;;		_Rcmd1
  4616 ;;		_Rcmd3
  4617 ;;		_Bcmd
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text15
  4622  00C484                     __ptext15:
  4623                           	opt stack 0
  4624  00C484                     _delay_ms:
  4625                           	opt stack 26
  4626                           
  4627                           ;ST7735_TFT.c: 103: int count;
  4628                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4629                           
  4630                           ;incstack = 0
  4631  00C484  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4632  00C488  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4633  00C48C  0E00               	movlw	0
  4634  00C48E  6E12               	movwf	___wmul@multiplicand+1,c
  4635  00C490  0EFA               	movlw	250
  4636  00C492  6E11               	movwf	___wmul@multiplicand,c
  4637  00C494  EC29  F060         	call	___wmul	;wreg free
  4638  00C498  C00F  F019         	movff	?___wmul,delay_ms@count
  4639  00C49C  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4640                           
  4641                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4642  00C4A0  C019  F017         	movff	delay_ms@count,??_delay_ms
  4643  00C4A4  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4644  00C4A8  1E17               	comf	??_delay_ms,f,c
  4645  00C4AA  1E18               	comf	??_delay_ms+1,f,c
  4646  00C4AC  4A17               	infsnz	??_delay_ms,f,c
  4647  00C4AE  2A18               	incf	??_delay_ms+1,f,c
  4648  00C4B0  0EFF               	movlw	255
  4649  00C4B2  2417               	addwf	??_delay_ms,w,c
  4650  00C4B4  6E19               	movwf	delay_ms@count,c
  4651  00C4B6  0EFF               	movlw	255
  4652  00C4B8  2018               	addwfc	??_delay_ms+1,w,c
  4653  00C4BA  6E1A               	movwf	delay_ms@count+1,c
  4654                           
  4655                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4656  00C4BC  0EB8               	movlw	184
  4657  00C4BE  6EB1               	movwf	4017,c	;volatile
  4658                           
  4659                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4660  00C4C0  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4661                           
  4662                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4663  00C4C4  501A               	movf	delay_ms@count+1,w,c
  4664  00C4C6  6ED7               	movwf	4055,c	;volatile
  4665                           
  4666                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4667  00C4C8  92A1               	bcf	4001,1,c	;volatile
  4668                           
  4669                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4670  00C4CA  80B1               	bsf	4017,0,c	;volatile
  4671                           
  4672                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4673  00C4CC  D000               	goto	l133
  4674  00C4CE                     l133:
  4675  00C4CE  A2A1               	btfss	4001,1,c	;volatile
  4676  00C4D0  D7FE               	goto	l133
  4677                           
  4678                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4679  00C4D2  90B1               	bcf	4017,0,c	;volatile
  4680  00C4D4  0012               	return		;funcret
  4681  00C4D6                     __end_of_delay_ms:
  4682                           	opt stack 0
  4683                           tblptru	equ	0xFF8
  4684                           tblptrh	equ	0xFF7
  4685                           tblptrl	equ	0xFF6
  4686                           tablat	equ	0xFF5
  4687                           prodl	equ	0xFF3
  4688                           intcon2	equ	0xFF1
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           postdec1	equ	0xFE5
  4692                           fsr1l	equ	0xFE1
  4693                           status	equ	0xFD8
  4694                           
  4695 ;; *************** function _Init_TRIS *****************
  4696 ;; Defined at:
  4697 ;;		line 437 in file "Lab8p1.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;		None
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;		None
  4702 ;; Return value:  Size  Location     Type
  4703 ;;		None               void
  4704 ;; Registers used:
  4705 ;;		wreg, status,2
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:        0 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_main
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text16
  4725  00BF9A                     __ptext16:
  4726                           	opt stack 0
  4727  00BF9A                     _Init_TRIS:
  4728                           	opt stack 30
  4729                           
  4730                           ;Lab8p1.c: 439: TRISA = 0b00011001;
  4731                           
  4732                           ;incstack = 0
  4733  00BF9A  0E19               	movlw	25
  4734  00BF9C  6E92               	movwf	3986,c	;volatile
  4735                           
  4736                           ;Lab8p1.c: 440: TRISB = 0b00000111;
  4737  00BF9E  0E07               	movlw	7
  4738  00BFA0  6E93               	movwf	3987,c	;volatile
  4739                           
  4740                           ;Lab8p1.c: 441: TRISC = 0x00;
  4741  00BFA2  0E00               	movlw	0
  4742  00BFA4  6E94               	movwf	3988,c	;volatile
  4743                           
  4744                           ;Lab8p1.c: 442: TRISD = 0x00;
  4745  00BFA6  0E00               	movlw	0
  4746  00BFA8  6E95               	movwf	3989,c	;volatile
  4747                           
  4748                           ;Lab8p1.c: 443: TRISE = 0x00;
  4749  00BFAA  0E00               	movlw	0
  4750  00BFAC  6E96               	movwf	3990,c	;volatile
  4751  00BFAE  0012               	return		;funcret
  4752  00BFB0                     __end_of_Init_TRIS:
  4753                           	opt stack 0
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodl	equ	0xFF3
  4759                           intcon2	equ	0xFF1
  4760                           postinc0	equ	0xFEE
  4761                           wreg	equ	0xFE8
  4762                           postdec1	equ	0xFE5
  4763                           fsr1l	equ	0xFE1
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _Init_ADC *****************
  4767 ;; Defined at:
  4768 ;;		line 430 in file "Lab8p1.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;		None               void
  4775 ;; Registers used:
  4776 ;;		wreg, status,2
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; This function calls:
  4789 ;;		Nothing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text17
  4796  00BF0A                     __ptext17:
  4797                           	opt stack 0
  4798  00BF0A                     _Init_ADC:
  4799                           	opt stack 30
  4800                           
  4801                           ;Lab8p1.c: 432: ADCON0 = 0b00000001;
  4802                           
  4803                           ;incstack = 0
  4804  00BF0A  0E01               	movlw	1
  4805  00BF0C  6EC2               	movwf	4034,c	;volatile
  4806                           
  4807                           ;Lab8p1.c: 433: ADCON1 = 0b00001110;
  4808  00BF0E  0E0E               	movlw	14
  4809  00BF10  6EC1               	movwf	4033,c	;volatile
  4810                           
  4811                           ;Lab8p1.c: 434: ADCON2 = 0xA9;
  4812  00BF12  0EA9               	movlw	169
  4813  00BF14  6EC0               	movwf	4032,c	;volatile
  4814  00BF16  0012               	return		;funcret
  4815  00BF18                     __end_of_Init_ADC:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodl	equ	0xFF3
  4822                           intcon2	equ	0xFF1
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function _Day_Mode *****************
  4830 ;; Defined at:
  4831 ;;		line 320 in file "Lab8p1.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;		None               void
  4838 ;; Registers used:
  4839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:   10
  4852 ;; This function calls:
  4853 ;;		_PED_Control
  4854 ;;		_Set_EW
  4855 ;;		_Set_EWLT
  4856 ;;		_Set_NS
  4857 ;;		_Set_NSLT
  4858 ;;		_WAIT_N_SEC
  4859 ;; This function is called by:
  4860 ;;		_main
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text18
  4865  00CBFA                     __ptext18:
  4866                           	opt stack 0
  4867  00CBFA                     _Day_Mode:
  4868                           	opt stack 20
  4869                           
  4870                           ;Lab8p1.c: 322: PORTBbits.RB7 = 0;
  4871                           
  4872                           ;incstack = 0
  4873  00CBFA  9E81               	bcf	3969,7,c	;volatile
  4874                           
  4875                           ;Lab8p1.c: 323: Act_Mode_Txt[0] = 'D';
  4876  00CBFC  0E44               	movlw	68
  4877  00CBFE  0100               	movlb	0	; () banked
  4878  00CC00  6F9D               	movwf	_Act_Mode_Txt& (0+255),b
  4879  00CC02  D000               	goto	l5140
  4880  00CC04                     l5140:
  4881                           
  4882                           ;Lab8p1.c: 326: {
  4883                           ;Lab8p1.c: 327: Set_NSLT (1);
  4884  00CC04  0E01               	movlw	1
  4885  00CC06  EC89  F061         	call	_Set_NSLT
  4886                           
  4887                           ;Lab8p1.c: 328: Set_EW (1);
  4888  00CC0A  0E01               	movlw	1
  4889  00CC0C  EC23  F061         	call	_Set_EW
  4890                           
  4891                           ;Lab8p1.c: 329: Set_EWLT (1);
  4892  00CC10  0E01               	movlw	1
  4893  00CC12  EC45  F061         	call	_Set_EWLT
  4894                           
  4895                           ;Lab8p1.c: 330: Set_NS (2);
  4896  00CC16  0E02               	movlw	2
  4897  00CC18  EC67  F061         	call	_Set_NS
  4898                           
  4899                           ;Lab8p1.c: 332: if (PORTBbits.RB0 == 1)
  4900  00CC1C  A081               	btfss	3969,0,c	;volatile
  4901  00CC1E  D005               	goto	l389
  4902                           
  4903                           ;Lab8p1.c: 333: {
  4904                           ;Lab8p1.c: 334: PED_Control(0, 9);
  4905  00CC20  0E09               	movlw	9
  4906  00CC22  6E3D               	movwf	PED_Control@Num_Sec,c
  4907  00CC24  0E00               	movlw	0
  4908  00CC26  EC96  F060         	call	_PED_Control
  4909  00CC2A                     l389:
  4910                           
  4911                           ;Lab8p1.c: 335: }
  4912                           ;Lab8p1.c: 336: WAIT_N_SEC (8);
  4913  00CC2A  0E08               	movlw	8
  4914  00CC2C  EC67  F060         	call	_WAIT_N_SEC
  4915                           
  4916                           ;Lab8p1.c: 338: Set_NS (3);
  4917  00CC30  0E03               	movlw	3
  4918  00CC32  EC67  F061         	call	_Set_NS
  4919                           
  4920                           ;Lab8p1.c: 339: WAIT_N_SEC (3);
  4921  00CC36  0E03               	movlw	3
  4922  00CC38  EC67  F060         	call	_WAIT_N_SEC
  4923                           
  4924                           ;Lab8p1.c: 341: Set_NS (1);
  4925  00CC3C  0E01               	movlw	1
  4926  00CC3E  EC67  F061         	call	_Set_NS
  4927                           
  4928                           ;Lab8p1.c: 343: if (PORTAbits.RA4 == 1)
  4929  00CC42  A880               	btfss	3968,4,c	;volatile
  4930  00CC44  D010               	goto	l5166
  4931                           
  4932                           ;Lab8p1.c: 344: {
  4933                           ;Lab8p1.c: 345: Set_EWLT (2);
  4934  00CC46  0E02               	movlw	2
  4935  00CC48  EC45  F061         	call	_Set_EWLT
  4936                           
  4937                           ;Lab8p1.c: 346: WAIT_N_SEC (7);
  4938  00CC4C  0E07               	movlw	7
  4939  00CC4E  EC67  F060         	call	_WAIT_N_SEC
  4940                           
  4941                           ;Lab8p1.c: 347: Set_EWLT (3);
  4942  00CC52  0E03               	movlw	3
  4943  00CC54  EC45  F061         	call	_Set_EWLT
  4944                           
  4945                           ;Lab8p1.c: 348: WAIT_N_SEC (3);
  4946  00CC58  0E03               	movlw	3
  4947  00CC5A  EC67  F060         	call	_WAIT_N_SEC
  4948                           
  4949                           ;Lab8p1.c: 349: Set_EWLT (1);
  4950  00CC5E  0E01               	movlw	1
  4951  00CC60  EC45  F061         	call	_Set_EWLT
  4952  00CC64  D000               	goto	l5166
  4953  00CC66                     l5166:
  4954                           
  4955                           ;Lab8p1.c: 350: }
  4956                           ;Lab8p1.c: 352: Set_EW (2);
  4957  00CC66  0E02               	movlw	2
  4958  00CC68  EC23  F061         	call	_Set_EW
  4959                           
  4960                           ;Lab8p1.c: 354: if (PORTBbits.RB1 == 1)
  4961  00CC6C  A281               	btfss	3969,1,c	;volatile
  4962  00CC6E  D005               	goto	l391
  4963                           
  4964                           ;Lab8p1.c: 355: {
  4965                           ;Lab8p1.c: 356: PED_Control(1, 8);
  4966  00CC70  0E08               	movlw	8
  4967  00CC72  6E3D               	movwf	PED_Control@Num_Sec,c
  4968  00CC74  0E01               	movlw	1
  4969  00CC76  EC96  F060         	call	_PED_Control
  4970  00CC7A                     l391:
  4971                           
  4972                           ;Lab8p1.c: 357: }
  4973                           ;Lab8p1.c: 358: WAIT_N_SEC (6);
  4974  00CC7A  0E06               	movlw	6
  4975  00CC7C  EC67  F060         	call	_WAIT_N_SEC
  4976                           
  4977                           ;Lab8p1.c: 360: Set_EW (3);
  4978  00CC80  0E03               	movlw	3
  4979  00CC82  EC23  F061         	call	_Set_EW
  4980                           
  4981                           ;Lab8p1.c: 361: WAIT_N_SEC (3);
  4982  00CC86  0E03               	movlw	3
  4983  00CC88  EC67  F060         	call	_WAIT_N_SEC
  4984                           
  4985                           ;Lab8p1.c: 363: Set_EW (1);
  4986  00CC8C  0E01               	movlw	1
  4987  00CC8E  EC23  F061         	call	_Set_EW
  4988                           
  4989                           ;Lab8p1.c: 365: if (PORTAbits.RA3 == 1)
  4990  00CC92  A680               	btfss	3968,3,c	;volatile
  4991  00CC94  D011               	goto	l395
  4992                           
  4993                           ;Lab8p1.c: 366: {
  4994                           ;Lab8p1.c: 367: Set_NSLT (2);
  4995  00CC96  0E02               	movlw	2
  4996  00CC98  EC89  F061         	call	_Set_NSLT
  4997                           
  4998                           ;Lab8p1.c: 368: WAIT_N_SEC (6);
  4999  00CC9C  0E06               	movlw	6
  5000  00CC9E  EC67  F060         	call	_WAIT_N_SEC
  5001                           
  5002                           ;Lab8p1.c: 370: Set_NSLT (3);
  5003  00CCA2  0E03               	movlw	3
  5004  00CCA4  EC89  F061         	call	_Set_NSLT
  5005                           
  5006                           ;Lab8p1.c: 371: WAIT_N_SEC (3);
  5007  00CCA8  0E03               	movlw	3
  5008  00CCAA  EC67  F060         	call	_WAIT_N_SEC
  5009                           
  5010                           ;Lab8p1.c: 373: Set_NSLT (1);
  5011  00CCAE  0E01               	movlw	1
  5012  00CCB0  EC89  F061         	call	_Set_NSLT
  5013                           
  5014                           ;Lab8p1.c: 374: }
  5015                           ;Lab8p1.c: 375: break;
  5016  00CCB4  D001               	goto	l395
  5017  00CCB6  D7A6               	goto	l5140
  5018  00CCB8                     l395:
  5019  00CCB8  0012               	return		;funcret
  5020  00CCBA                     __end_of_Day_Mode:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodl	equ	0xFF3
  5027                           intcon2	equ	0xFF1
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           postdec1	equ	0xFE5
  5031                           fsr1l	equ	0xFE1
  5032                           status	equ	0xFD8
  5033                           
  5034 ;; *************** function _WAIT_N_SEC *****************
  5035 ;; Defined at:
  5036 ;;		line 489 in file "Lab8p1.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  seconds         1    wreg     unsigned char 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  seconds         1  104[COMRAM] unsigned char 
  5041 ;;  i               1  105[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;		None               void
  5044 ;; Registers used:
  5045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;Total ram usage:        2 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    9
  5058 ;; This function calls:
  5059 ;;		_WAIT_1_SEC
  5060 ;;		_update_LCD_count
  5061 ;; This function is called by:
  5062 ;;		_Day_Mode
  5063 ;;		_Night_Mode
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text19
  5068  00C0CE                     __ptext19:
  5069                           	opt stack 0
  5070  00C0CE                     _WAIT_N_SEC:
  5071                           	opt stack 20
  5072                           
  5073                           ;incstack = 0
  5074                           ;WAIT_N_SEC@seconds stored from wreg
  5075  00C0CE  6E69               	movwf	WAIT_N_SEC@seconds,c
  5076                           
  5077                           ;Lab8p1.c: 491: char i;
  5078                           ;Lab8p1.c: 492: for (i = seconds; i > 0; i--)
  5079  00C0D0  C069  F06A         	movff	WAIT_N_SEC@seconds,WAIT_N_SEC@i
  5080  00C0D4                     l4998:
  5081  00C0D4  506A               	movf	WAIT_N_SEC@i,w,c
  5082  00C0D6  B4D8               	btfsc	status,2,c
  5083  00C0D8  D00B               	goto	l5008
  5084  00C0DA  D001               	goto	l5002
  5085  00C0DC  D009               	goto	l5008
  5086  00C0DE                     l5002:
  5087                           
  5088                           ;Lab8p1.c: 493: {
  5089                           ;Lab8p1.c: 494: update_LCD_count(direction, i);
  5090  00C0DE  C06A  F03A         	movff	WAIT_N_SEC@i,update_LCD_count@count
  5091  00C0E2  5079               	movf	_direction,w,c
  5092  00C0E4  ECC6  F06C         	call	_update_LCD_count
  5093                           
  5094                           ;Lab8p1.c: 495: WAIT_1_SEC();
  5095  00C0E8  ECB0  F063         	call	_WAIT_1_SEC	;wreg free
  5096  00C0EC  066A               	decf	WAIT_N_SEC@i,f,c
  5097  00C0EE  D7F2               	goto	l4998
  5098  00C0F0                     l5008:
  5099                           
  5100                           ;Lab8p1.c: 496: }
  5101                           ;Lab8p1.c: 497: update_LCD_count(direction, 0);
  5102  00C0F0  0E00               	movlw	0
  5103  00C0F2  6E3A               	movwf	update_LCD_count@count,c
  5104  00C0F4  5079               	movf	_direction,w,c
  5105  00C0F6  ECC6  F06C         	call	_update_LCD_count
  5106  00C0FA  0012               	return		;funcret
  5107  00C0FC                     __end_of_WAIT_N_SEC:
  5108                           	opt stack 0
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodl	equ	0xFF3
  5114                           intcon2	equ	0xFF1
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           postdec1	equ	0xFE5
  5118                           fsr1l	equ	0xFE1
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _update_LCD_count *****************
  5122 ;; Defined at:
  5123 ;;		line 638 in file "Lab8p1.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  direction       1    wreg     unsigned char 
  5126 ;;  count           1   57[COMRAM] unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  direction       1   59[COMRAM] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;		None               void
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:        3 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    7
  5145 ;; This function calls:
  5146 ;;		___awdiv
  5147 ;;		___awmod
  5148 ;;		_drawtext
  5149 ;; This function is called by:
  5150 ;;		_WAIT_N_SEC
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text20
  5155  00D98C                     __ptext20:
  5156                           	opt stack 0
  5157  00D98C                     _update_LCD_count:
  5158                           	opt stack 21
  5159                           
  5160                           ;incstack = 0
  5161                           ;update_LCD_count@direction stored from wreg
  5162  00D98C  6E3C               	movwf	update_LCD_count@direction,c
  5163                           
  5164                           ;Lab8p1.c: 640: PORTD = (PORTD & 0x80) | array[count];
  5165  00D98E  503A               	movf	update_LCD_count@count,w,c
  5166  00D990  0D01               	mullw	1
  5167  00D992  0E80               	movlw	low _array
  5168  00D994  24F3               	addwf	prodl,w,c
  5169  00D996  6ED9               	movwf	fsr2l,c
  5170  00D998  0E00               	movlw	high _array
  5171  00D99A  20F4               	addwfc	prodh,w,c
  5172  00D99C  6EDA               	movwf	fsr2h,c
  5173  00D99E  50DF               	movf	indf2,w,c
  5174  00D9A0  6E3B               	movwf	??_update_LCD_count& (0+255),c
  5175  00D9A2  5083               	movf	3971,w,c	;volatile
  5176  00D9A4  0B80               	andlw	128
  5177  00D9A6  103B               	iorwf	??_update_LCD_count,w,c
  5178  00D9A8  6E83               	movwf	3971,c	;volatile
  5179                           
  5180                           ;Lab8p1.c: 641: switch (direction)
  5181  00D9AA  D0B6               	goto	l4830
  5182  00D9AC                     l4812:
  5183                           
  5184                           ;Lab8p1.c: 644: EW_Count[0] = count/10 + '0';
  5185  00D9AC  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5186  00D9B0  6A08               	clrf	___awdiv@dividend+1,c
  5187  00D9B2  0E00               	movlw	0
  5188  00D9B4  6E0A               	movwf	___awdiv@divisor+1,c
  5189  00D9B6  0E0A               	movlw	10
  5190  00D9B8  6E09               	movwf	___awdiv@divisor,c
  5191  00D9BA  ECBF  F064         	call	___awdiv	;wreg free
  5192  00D9BE  5007               	movf	?___awdiv,w,c
  5193  00D9C0  0F30               	addlw	48
  5194  00D9C2  0100               	movlb	0	; () banked
  5195  00D9C4  6F8E               	movwf	_EW_Count& (0+255),b
  5196                           
  5197                           ;Lab8p1.c: 645: EW_Count[1] = count%10 + '0';
  5198  00D9C6  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5199  00D9CA  6A02               	clrf	___awmod@dividend+1,c
  5200  00D9CC  0E00               	movlw	0
  5201  00D9CE  6E04               	movwf	___awmod@divisor+1,c
  5202  00D9D0  0E0A               	movlw	10
  5203  00D9D2  6E03               	movwf	___awmod@divisor,c
  5204  00D9D4  EC6F  F063         	call	___awmod	;wreg free
  5205  00D9D8  5001               	movf	?___awmod,w,c
  5206  00D9DA  0F30               	addlw	48
  5207  00D9DC  0100               	movlb	0	; () banked
  5208  00D9DE  6F8F               	movwf	(_EW_Count+1)& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;Lab8p1.c: 646: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5212  00D9E0  0E1E               	movlw	30
  5213  00D9E2  6E29               	movwf	drawtext@y,c
  5214  00D9E4  0E8E               	movlw	low _EW_Count
  5215  00D9E6  6E2A               	movwf	drawtext@_text,c
  5216  00D9E8  0E00               	movlw	high _EW_Count
  5217  00D9EA  6E2B               	movwf	drawtext@_text+1,c
  5218  00D9EC  0E07               	movlw	7
  5219  00D9EE  6E2D               	movwf	drawtext@color+1,c
  5220  00D9F0  682C               	setf	drawtext@color,c
  5221  00D9F2  0E00               	movlw	0
  5222  00D9F4  6E2F               	movwf	drawtext@bg+1,c
  5223  00D9F6  0E00               	movlw	0
  5224  00D9F8  6E2E               	movwf	drawtext@bg,c
  5225  00D9FA  0E02               	movlw	2
  5226  00D9FC  6E30               	movwf	drawtext@size,c
  5227  00D9FE  0E64               	movlw	100
  5228  00DA00  EC2E  F067         	call	_drawtext
  5229                           
  5230                           ;Lab8p1.c: 647: break;
  5231  00DA04  D097               	goto	l498
  5232  00DA06                     l4816:
  5233                           
  5234                           ;Lab8p1.c: 650: NS_Count[0] = count/10 + '0';
  5235  00DA06  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5236  00DA0A  6A08               	clrf	___awdiv@dividend+1,c
  5237  00DA0C  0E00               	movlw	0
  5238  00DA0E  6E0A               	movwf	___awdiv@divisor+1,c
  5239  00DA10  0E0A               	movlw	10
  5240  00DA12  6E09               	movwf	___awdiv@divisor,c
  5241  00DA14  ECBF  F064         	call	___awdiv	;wreg free
  5242  00DA18  5007               	movf	?___awdiv,w,c
  5243  00DA1A  0F30               	addlw	48
  5244  00DA1C  0100               	movlb	0	; () banked
  5245  00DA1E  6F94               	movwf	_NS_Count& (0+255),b
  5246                           
  5247                           ;Lab8p1.c: 651: NS_Count[1] = count%10 + '0';
  5248  00DA20  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5249  00DA24  6A02               	clrf	___awmod@dividend+1,c
  5250  00DA26  0E00               	movlw	0
  5251  00DA28  6E04               	movwf	___awmod@divisor+1,c
  5252  00DA2A  0E0A               	movlw	10
  5253  00DA2C  6E03               	movwf	___awmod@divisor,c
  5254  00DA2E  EC6F  F063         	call	___awmod	;wreg free
  5255  00DA32  5001               	movf	?___awmod,w,c
  5256  00DA34  0F30               	addlw	48
  5257  00DA36  0100               	movlb	0	; () banked
  5258  00DA38  6F95               	movwf	(_NS_Count+1)& (0+255),b
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;Lab8p1.c: 652: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5262  00DA3A  0E5A               	movlw	90
  5263  00DA3C  6E29               	movwf	drawtext@y,c
  5264  00DA3E  0E94               	movlw	low _NS_Count
  5265  00DA40  6E2A               	movwf	drawtext@_text,c
  5266  00DA42  0E00               	movlw	high _NS_Count
  5267  00DA44  6E2B               	movwf	drawtext@_text+1,c
  5268  00DA46  0E00               	movlw	0
  5269  00DA48  6E2D               	movwf	drawtext@color+1,c
  5270  00DA4A  0E1F               	movlw	31
  5271  00DA4C  6E2C               	movwf	drawtext@color,c
  5272  00DA4E  0E00               	movlw	0
  5273  00DA50  6E2F               	movwf	drawtext@bg+1,c
  5274  00DA52  0E00               	movlw	0
  5275  00DA54  6E2E               	movwf	drawtext@bg,c
  5276  00DA56  0E02               	movlw	2
  5277  00DA58  6E30               	movwf	drawtext@size,c
  5278  00DA5A  0E64               	movlw	100
  5279  00DA5C  EC2E  F067         	call	_drawtext
  5280                           
  5281                           ;Lab8p1.c: 653: break;
  5282  00DA60  D069               	goto	l498
  5283  00DA62                     l4820:
  5284                           
  5285                           ;Lab8p1.c: 656: EWLT_Count[0] = count/10 + '0';
  5286  00DA62  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5287  00DA66  6A08               	clrf	___awdiv@dividend+1,c
  5288  00DA68  0E00               	movlw	0
  5289  00DA6A  6E0A               	movwf	___awdiv@divisor+1,c
  5290  00DA6C  0E0A               	movlw	10
  5291  00DA6E  6E09               	movwf	___awdiv@divisor,c
  5292  00DA70  ECBF  F064         	call	___awdiv	;wreg free
  5293  00DA74  5007               	movf	?___awdiv,w,c
  5294  00DA76  0F30               	addlw	48
  5295  00DA78  0100               	movlb	0	; () banked
  5296  00DA7A  6F8B               	movwf	_EWLT_Count& (0+255),b
  5297                           
  5298                           ;Lab8p1.c: 657: EWLT_Count[1] = count%10 + '0';
  5299  00DA7C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5300  00DA80  6A02               	clrf	___awmod@dividend+1,c
  5301  00DA82  0E00               	movlw	0
  5302  00DA84  6E04               	movwf	___awmod@divisor+1,c
  5303  00DA86  0E0A               	movlw	10
  5304  00DA88  6E03               	movwf	___awmod@divisor,c
  5305  00DA8A  EC6F  F063         	call	___awmod	;wreg free
  5306  00DA8E  5001               	movf	?___awmod,w,c
  5307  00DA90  0F30               	addlw	48
  5308  00DA92  0100               	movlb	0	; () banked
  5309  00DA94  6F8C               	movwf	(_EWLT_Count+1)& (0+255),b
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;Lab8p1.c: 658: drawtext(100, 50 + 10, EWLT_Count,
  5313                           ;Lab8p1.c: 659: 0xFFFF, 0x0000, 2);
  5314  00DA96  0E3C               	movlw	60
  5315  00DA98  6E29               	movwf	drawtext@y,c
  5316  00DA9A  0E8B               	movlw	low _EWLT_Count
  5317  00DA9C  6E2A               	movwf	drawtext@_text,c
  5318  00DA9E  0E00               	movlw	high _EWLT_Count
  5319  00DAA0  6E2B               	movwf	drawtext@_text+1,c
  5320  00DAA2  0EFF               	movlw	255
  5321  00DAA4  6E2D               	movwf	drawtext@color+1,c
  5322  00DAA6  682C               	setf	drawtext@color,c
  5323  00DAA8  0E00               	movlw	0
  5324  00DAAA  6E2F               	movwf	drawtext@bg+1,c
  5325  00DAAC  0E00               	movlw	0
  5326  00DAAE  6E2E               	movwf	drawtext@bg,c
  5327  00DAB0  0E02               	movlw	2
  5328  00DAB2  6E30               	movwf	drawtext@size,c
  5329  00DAB4  0E64               	movlw	100
  5330  00DAB6  EC2E  F067         	call	_drawtext
  5331                           
  5332                           ;Lab8p1.c: 660: break;
  5333  00DABA  D03C               	goto	l498
  5334  00DABC                     l4824:
  5335                           
  5336                           ;Lab8p1.c: 663: NSLT_Count[0] = count/10 + '0';
  5337  00DABC  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5338  00DAC0  6A08               	clrf	___awdiv@dividend+1,c
  5339  00DAC2  0E00               	movlw	0
  5340  00DAC4  6E0A               	movwf	___awdiv@divisor+1,c
  5341  00DAC6  0E0A               	movlw	10
  5342  00DAC8  6E09               	movwf	___awdiv@divisor,c
  5343  00DACA  ECBF  F064         	call	___awdiv	;wreg free
  5344  00DACE  5007               	movf	?___awdiv,w,c
  5345  00DAD0  0F30               	addlw	48
  5346  00DAD2  0100               	movlb	0	; () banked
  5347  00DAD4  6F91               	movwf	_NSLT_Count& (0+255),b
  5348                           
  5349                           ;Lab8p1.c: 664: NSLT_Count[1] = count%10 + '0';
  5350  00DAD6  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5351  00DADA  6A02               	clrf	___awmod@dividend+1,c
  5352  00DADC  0E00               	movlw	0
  5353  00DADE  6E04               	movwf	___awmod@divisor+1,c
  5354  00DAE0  0E0A               	movlw	10
  5355  00DAE2  6E03               	movwf	___awmod@divisor,c
  5356  00DAE4  EC6F  F063         	call	___awmod	;wreg free
  5357  00DAE8  5001               	movf	?___awmod,w,c
  5358  00DAEA  0F30               	addlw	48
  5359  00DAEC  0100               	movlb	0	; () banked
  5360  00DAEE  6F92               	movwf	(_NSLT_Count+1)& (0+255),b
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;Lab8p1.c: 665: drawtext(100, 110 + 10, NSLT_Count,
  5364                           ;Lab8p1.c: 666: 0xF81F, 0x0000, 2);
  5365  00DAF0  0E78               	movlw	120
  5366  00DAF2  6E29               	movwf	drawtext@y,c
  5367  00DAF4  0E91               	movlw	low _NSLT_Count
  5368  00DAF6  6E2A               	movwf	drawtext@_text,c
  5369  00DAF8  0E00               	movlw	high _NSLT_Count
  5370  00DAFA  6E2B               	movwf	drawtext@_text+1,c
  5371  00DAFC  0EF8               	movlw	248
  5372  00DAFE  6E2D               	movwf	drawtext@color+1,c
  5373  00DB00  0E1F               	movlw	31
  5374  00DB02  6E2C               	movwf	drawtext@color,c
  5375  00DB04  0E00               	movlw	0
  5376  00DB06  6E2F               	movwf	drawtext@bg+1,c
  5377  00DB08  0E00               	movlw	0
  5378  00DB0A  6E2E               	movwf	drawtext@bg,c
  5379  00DB0C  0E02               	movlw	2
  5380  00DB0E  6E30               	movwf	drawtext@size,c
  5381  00DB10  0E64               	movlw	100
  5382  00DB12  EC2E  F067         	call	_drawtext
  5383                           
  5384                           ;Lab8p1.c: 670: }
  5385                           
  5386                           ;Lab8p1.c: 667: break;
  5387  00DB16  D00E               	goto	l498
  5388  00DB18                     l4830:
  5389  00DB18  503C               	movf	update_LCD_count@direction,w,c
  5390                           
  5391                           ; Switch size 1, requested type "space"
  5392                           ; Number of cases is 4, Range of values is 0 to 3
  5393                           ; switch strategies available:
  5394                           ; Name         Instructions Cycles
  5395                           ; simple_byte           13     7 (average)
  5396                           ;	Chosen strategy is simple_byte
  5397  00DB1A  0A00               	xorlw	0	; case 0
  5398  00DB1C  B4D8               	btfsc	status,2,c
  5399  00DB1E  D746               	goto	l4812
  5400  00DB20  0A01               	xorlw	1	; case 1
  5401  00DB22  B4D8               	btfsc	status,2,c
  5402  00DB24  D79E               	goto	l4820
  5403  00DB26  0A03               	xorlw	3	; case 2
  5404  00DB28  B4D8               	btfsc	status,2,c
  5405  00DB2A  D76D               	goto	l4816
  5406  00DB2C  0A01               	xorlw	1	; case 3
  5407  00DB2E  B4D8               	btfsc	status,2,c
  5408  00DB30  D7C5               	goto	l4824
  5409  00DB32  D000               	goto	l498
  5410  00DB34                     l498:
  5411  00DB34  0012               	return		;funcret
  5412  00DB36                     __end_of_update_LCD_count:
  5413                           	opt stack 0
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           intcon2	equ	0xFF1
  5421                           postinc0	equ	0xFEE
  5422                           wreg	equ	0xFE8
  5423                           postdec1	equ	0xFE5
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function _WAIT_1_SEC *****************
  5431 ;; Defined at:
  5432 ;;		line 461 in file "Lab8p1.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;		None
  5437 ;; Return value:  Size  Location     Type
  5438 ;;		None               void
  5439 ;; Registers used:
  5440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;Total ram usage:        0 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    8
  5453 ;; This function calls:
  5454 ;;		_WAIT_HALF_SEC
  5455 ;;		_drawtext
  5456 ;;		_strcpy
  5457 ;;		_update_LCD_misc
  5458 ;; This function is called by:
  5459 ;;		_WAIT_N_SEC
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text21
  5464  00C760                     __ptext21:
  5465                           	opt stack 0
  5466  00C760                     _WAIT_1_SEC:
  5467                           	opt stack 20
  5468                           
  5469                           ;Lab8p1.c: 463: PORTDbits.RD7 = 1;
  5470                           
  5471                           ;incstack = 0
  5472  00C760  8E83               	bsf	3971,7,c	;volatile
  5473                           
  5474                           ;Lab8p1.c: 464: strcpy(txt,"*");
  5475  00C762  C06D  F001         	movff	_txt,strcpy@to
  5476  00C766  C06E  F002         	movff	_txt+1,strcpy@to+1
  5477  00C76A  0E2C               	movlw	low STR_5
  5478  00C76C  6E03               	movwf	strcpy@from,c
  5479  00C76E  0EFD               	movlw	high STR_5
  5480  00C770  6E04               	movwf	strcpy@from+1,c
  5481  00C772  ECAE  F060         	call	_strcpy	;wreg free
  5482                           
  5483                           ;Lab8p1.c: 465: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5484  00C776  0E0A               	movlw	10
  5485  00C778  6E29               	movwf	drawtext@y,c
  5486  00C77A  C06D  F02A         	movff	_txt,drawtext@_text
  5487  00C77E  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  5488  00C782  0EFF               	movlw	255
  5489  00C784  6E2D               	movwf	drawtext@color+1,c
  5490  00C786  682C               	setf	drawtext@color,c
  5491  00C788  0E00               	movlw	0
  5492  00C78A  6E2F               	movwf	drawtext@bg+1,c
  5493  00C78C  0E00               	movlw	0
  5494  00C78E  6E2E               	movwf	drawtext@bg,c
  5495  00C790  0E01               	movlw	1
  5496  00C792  6E30               	movwf	drawtext@size,c
  5497  00C794  0E78               	movlw	120
  5498  00C796  EC2E  F067         	call	_drawtext
  5499                           
  5500                           ;Lab8p1.c: 467: WAIT_HALF_SEC();
  5501  00C79A  ECD8  F05F         	call	_WAIT_HALF_SEC	;wreg free
  5502                           
  5503                           ;Lab8p1.c: 469: PORTDbits.RD7 = 0;
  5504  00C79E  9E83               	bcf	3971,7,c	;volatile
  5505                           
  5506                           ;Lab8p1.c: 470: strcpy(txt," ");
  5507  00C7A0  C06D  F001         	movff	_txt,strcpy@to
  5508  00C7A4  C06E  F002         	movff	_txt+1,strcpy@to+1
  5509  00C7A8  0E2A               	movlw	low STR_14
  5510  00C7AA  6E03               	movwf	strcpy@from,c
  5511  00C7AC  0EFD               	movlw	high STR_14
  5512  00C7AE  6E04               	movwf	strcpy@from+1,c
  5513  00C7B0  ECAE  F060         	call	_strcpy	;wreg free
  5514                           
  5515                           ;Lab8p1.c: 471: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5516  00C7B4  0E0A               	movlw	10
  5517  00C7B6  6E29               	movwf	drawtext@y,c
  5518  00C7B8  C06D  F02A         	movff	_txt,drawtext@_text
  5519  00C7BC  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  5520  00C7C0  0EFF               	movlw	255
  5521  00C7C2  6E2D               	movwf	drawtext@color+1,c
  5522  00C7C4  682C               	setf	drawtext@color,c
  5523  00C7C6  0E00               	movlw	0
  5524  00C7C8  6E2F               	movwf	drawtext@bg+1,c
  5525  00C7CA  0E00               	movlw	0
  5526  00C7CC  6E2E               	movwf	drawtext@bg,c
  5527  00C7CE  0E01               	movlw	1
  5528  00C7D0  6E30               	movwf	drawtext@size,c
  5529  00C7D2  0E78               	movlw	120
  5530  00C7D4  EC2E  F067         	call	_drawtext
  5531                           
  5532                           ;Lab8p1.c: 473: WAIT_HALF_SEC();
  5533  00C7D8  ECD8  F05F         	call	_WAIT_HALF_SEC	;wreg free
  5534                           
  5535                           ;Lab8p1.c: 474: update_LCD_misc();
  5536  00C7DC  EC54  F06F         	call	_update_LCD_misc	;wreg free
  5537  00C7E0  0012               	return		;funcret
  5538  00C7E2                     __end_of_WAIT_1_SEC:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon2	equ	0xFF1
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function _update_LCD_misc *****************
  5557 ;; Defined at:
  5558 ;;		line 696 in file "Lab8p1.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;		None
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  volts           3  101[COMRAM] float 
  5563 ;;  nStep           2   99[COMRAM] int 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;		None               void
  5566 ;; Registers used:
  5567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;Total ram usage:        5 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    7
  5580 ;; This function calls:
  5581 ;;		___awtoft
  5582 ;;		___ftdiv
  5583 ;;		___ftge
  5584 ;;		___wmul
  5585 ;;		_drawtext
  5586 ;;		_get_full_ADC
  5587 ;;		_printf
  5588 ;; This function is called by:
  5589 ;;		_WAIT_1_SEC
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text22
  5594  00DEA8                     __ptext22:
  5595                           	opt stack 0
  5596  00DEA8                     _update_LCD_misc:
  5597                           	opt stack 20
  5598                           
  5599                           ;Lab8p1.c: 698: int nStep = get_full_ADC ();
  5600                           
  5601                           ;incstack = 0
  5602  00DEA8  EC16  F060         	call	_get_full_ADC	;wreg free
  5603  00DEAC  C001  F064         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5604  00DEB0  C002  F065         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5605                           
  5606                           ;Lab8p1.c: 699: float volts = nStep*5/1024.0;
  5607  00DEB4  C064  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5608  00DEB8  C065  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5609  00DEBC  0E00               	movlw	0
  5610  00DEBE  6E12               	movwf	___wmul@multiplicand+1,c
  5611  00DEC0  0E05               	movlw	5
  5612  00DEC2  6E11               	movwf	___wmul@multiplicand,c
  5613  00DEC4  EC29  F060         	call	___wmul	;wreg free
  5614  00DEC8  C00F  F015         	movff	?___wmul,___awtoft@c
  5615  00DECC  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5616  00DED0  ECC7  F060         	call	___awtoft	;wreg free
  5617  00DED4  C015  F019         	movff	?___awtoft,___ftdiv@f1
  5618  00DED8  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  5619  00DEDC  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  5620  00DEE0  0E00               	movlw	0
  5621  00DEE2  6E1C               	movwf	___ftdiv@f2,c
  5622  00DEE4  0E80               	movlw	128
  5623  00DEE6  6E1D               	movwf	___ftdiv@f2+1,c
  5624  00DEE8  0E44               	movlw	68
  5625  00DEEA  6E1E               	movwf	___ftdiv@f2+2,c
  5626  00DEEC  EC9D  F067         	call	___ftdiv	;wreg free
  5627  00DEF0  C019  F066         	movff	?___ftdiv,update_LCD_misc@volts
  5628  00DEF4  C01A  F067         	movff	?___ftdiv+1,update_LCD_misc@volts+1
  5629  00DEF8  C01B  F068         	movff	?___ftdiv+2,update_LCD_misc@volts+2
  5630                           
  5631                           ;Lab8p1.c: 701: printf ("volts are %0.3f\r\n\n", volts);
  5632  00DEFC  0EDD               	movlw	low STR_15
  5633  00DEFE  6E40               	movwf	printf@f,c
  5634  00DF00  0EFC               	movlw	high STR_15
  5635  00DF02  6E41               	movwf	printf@f+1,c
  5636  00DF04  C066  F042         	movff	update_LCD_misc@volts,?_printf+2
  5637  00DF08  C067  F043         	movff	update_LCD_misc@volts+1,?_printf+3
  5638  00DF0C  C068  F044         	movff	update_LCD_misc@volts+2,?_printf+4
  5639  00DF10  EC95  F078         	call	_printf	;wreg free
  5640                           
  5641                           ;Lab8p1.c: 704: if (volts < 2.570)
  5642  00DF14  C066  F001         	movff	update_LCD_misc@volts,___ftge@ff1
  5643  00DF18  C067  F002         	movff	update_LCD_misc@volts+1,___ftge@ff1+1
  5644  00DF1C  C068  F003         	movff	update_LCD_misc@volts+2,___ftge@ff1+2
  5645  00DF20  0E7B               	movlw	123
  5646  00DF22  6E04               	movwf	___ftge@ff2,c
  5647  00DF24  0E24               	movlw	36
  5648  00DF26  6E05               	movwf	___ftge@ff2+1,c
  5649  00DF28  0E40               	movlw	64
  5650  00DF2A  6E06               	movwf	___ftge@ff2+2,c
  5651  00DF2C  EC0A  F065         	call	___ftge	;wreg free
  5652  00DF30  B0D8               	btfsc	status,0,c
  5653  00DF32  D002               	goto	l4592
  5654                           
  5655                           ;Lab8p1.c: 705: {
  5656                           ;Lab8p1.c: 706: SW_MODE = 1;
  5657  00DF34  0E01               	movlw	1
  5658  00DF36  D001               	goto	L1
  5659  00DF38                     l4592:
  5660                           
  5661                           ;Lab8p1.c: 708: else
  5662                           ;Lab8p1.c: 709: {
  5663                           ;Lab8p1.c: 710: SW_MODE = 0;
  5664  00DF38  0E00               	movlw	0
  5665  00DF3A                     L1:
  5666  00DF3A  6E73               	movwf	_SW_MODE,c
  5667  00DF3C  D000               	goto	l4594
  5668  00DF3E                     l4594:
  5669                           
  5670                           ;Lab8p1.c: 711: }
  5671                           ;Lab8p1.c: 714: SW_EWPED = PORTBbits.RB1;
  5672  00DF3E  0E00               	movlw	0
  5673  00DF40  B281               	btfsc	3969,1,c	;volatile
  5674  00DF42  0E01               	movlw	1
  5675  00DF44  6E72               	movwf	_SW_EWPED,c
  5676                           
  5677                           ;Lab8p1.c: 715: SW_EWLT = PORTAbits.RA4;
  5678  00DF46  0E00               	movlw	0
  5679  00DF48  B880               	btfsc	3968,4,c	;volatile
  5680  00DF4A  0E01               	movlw	1
  5681  00DF4C  6E71               	movwf	_SW_EWLT,c
  5682                           
  5683                           ;Lab8p1.c: 716: SW_NSPED = PORTBbits.RB0;
  5684  00DF4E  0E00               	movlw	0
  5685  00DF50  B081               	btfsc	3969,0,c	;volatile
  5686  00DF52  0E01               	movlw	1
  5687  00DF54  6E75               	movwf	_SW_NSPED,c
  5688                           
  5689                           ;Lab8p1.c: 717: SW_NSLT = PORTAbits.RA3;
  5690  00DF56  0E00               	movlw	0
  5691  00DF58  B680               	btfsc	3968,3,c	;volatile
  5692  00DF5A  0E01               	movlw	1
  5693  00DF5C  6E74               	movwf	_SW_NSLT,c
  5694                           
  5695                           ;Lab8p1.c: 719: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5696  00DF5E  5073               	movf	_SW_MODE,w,c
  5697  00DF60  A4D8               	btfss	status,2,c
  5698  00DF62  D002               	goto	l4604
  5699  00DF64  0E4E               	movlw	78
  5700  00DF66  D001               	goto	L2
  5701  00DF68                     l4604:
  5702  00DF68  0E44               	movlw	68
  5703  00DF6A                     L2:
  5704  00DF6A  0100               	movlb	0	; () banked
  5705  00DF6C  6FA3               	movwf	_SW_MODE_Txt& (0+255),b
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;Lab8p1.c: 720: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5709  00DF6E  5075               	movf	_SW_NSPED,w,c
  5710  00DF70  A4D8               	btfss	status,2,c
  5711  00DF72  D002               	goto	l4608
  5712                           
  5713                           ; BSR set to: 0
  5714  00DF74  0E30               	movlw	48
  5715  00DF76  D001               	goto	L3
  5716  00DF78                     l4608:
  5717                           
  5718                           ; BSR set to: 0
  5719  00DF78  0E31               	movlw	49
  5720  00DF7A                     L3:
  5721  00DF7A  0100               	movlb	0	; () banked
  5722  00DF7C  6FA7               	movwf	_SW_NSPED_Txt& (0+255),b
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;Lab8p1.c: 721: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5726  00DF7E  5074               	movf	_SW_NSLT,w,c
  5727  00DF80  A4D8               	btfss	status,2,c
  5728  00DF82  D002               	goto	l4612
  5729                           
  5730                           ; BSR set to: 0
  5731  00DF84  0E30               	movlw	48
  5732  00DF86  D001               	goto	L4
  5733  00DF88                     l4612:
  5734                           
  5735                           ; BSR set to: 0
  5736  00DF88  0E31               	movlw	49
  5737  00DF8A                     L4:
  5738  00DF8A  0100               	movlb	0	; () banked
  5739  00DF8C  6FA5               	movwf	_SW_NSLT_Txt& (0+255),b
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;Lab8p1.c: 722: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5743  00DF8E  5072               	movf	_SW_EWPED,w,c
  5744  00DF90  A4D8               	btfss	status,2,c
  5745  00DF92  D002               	goto	l4616
  5746                           
  5747                           ; BSR set to: 0
  5748  00DF94  0E30               	movlw	48
  5749  00DF96  D001               	goto	L5
  5750  00DF98                     l4616:
  5751                           
  5752                           ; BSR set to: 0
  5753  00DF98  0E31               	movlw	49
  5754  00DF9A                     L5:
  5755  00DF9A  6E7E               	movwf	_SW_EWPED_Txt,c
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;Lab8p1.c: 723: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5759  00DF9C  5071               	movf	_SW_EWLT,w,c
  5760  00DF9E  A4D8               	btfss	status,2,c
  5761  00DFA0  D002               	goto	l4620
  5762                           
  5763                           ; BSR set to: 0
  5764  00DFA2  0E30               	movlw	48
  5765  00DFA4  D001               	goto	L6
  5766  00DFA6                     l4620:
  5767                           
  5768                           ; BSR set to: 0
  5769  00DFA6  0E31               	movlw	49
  5770  00DFA8                     L6:
  5771  00DFA8  6E7C               	movwf	_SW_EWLT_Txt,c
  5772  00DFAA  D000               	goto	l4622
  5773  00DFAC                     l4622:
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;Lab8p1.c: 725: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5777  00DFAC  0E0A               	movlw	10
  5778  00DFAE  6E29               	movwf	drawtext@y,c
  5779  00DFB0  0E9D               	movlw	low _Act_Mode_Txt
  5780  00DFB2  6E2A               	movwf	drawtext@_text,c
  5781  00DFB4  0E00               	movlw	high _Act_Mode_Txt
  5782  00DFB6  6E2B               	movwf	drawtext@_text+1,c
  5783  00DFB8  0EFF               	movlw	255
  5784  00DFBA  6E2D               	movwf	drawtext@color+1,c
  5785  00DFBC  682C               	setf	drawtext@color,c
  5786  00DFBE  0E00               	movlw	0
  5787  00DFC0  6E2F               	movwf	drawtext@bg+1,c
  5788  00DFC2  0E00               	movlw	0
  5789  00DFC4  6E2E               	movwf	drawtext@bg,c
  5790  00DFC6  0E01               	movlw	1
  5791  00DFC8  6E30               	movwf	drawtext@size,c
  5792  00DFCA  0E23               	movlw	35
  5793  00DFCC  EC2E  F067         	call	_drawtext
  5794                           
  5795                           ;Lab8p1.c: 726: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5796  00DFD0  0E95               	movlw	149
  5797  00DFD2  6E29               	movwf	drawtext@y,c
  5798  00DFD4  0E7E               	movlw	low _SW_EWPED_Txt
  5799  00DFD6  6E2A               	movwf	drawtext@_text,c
  5800  00DFD8  0E00               	movlw	high _SW_EWPED_Txt
  5801  00DFDA  6E2B               	movwf	drawtext@_text+1,c
  5802  00DFDC  0EFF               	movlw	255
  5803  00DFDE  6E2D               	movwf	drawtext@color+1,c
  5804  00DFE0  682C               	setf	drawtext@color,c
  5805  00DFE2  0E00               	movlw	0
  5806  00DFE4  6E2F               	movwf	drawtext@bg+1,c
  5807  00DFE6  0E00               	movlw	0
  5808  00DFE8  6E2E               	movwf	drawtext@bg,c
  5809  00DFEA  0E01               	movlw	1
  5810  00DFEC  6E30               	movwf	drawtext@size,c
  5811  00DFEE  0E06               	movlw	6
  5812  00DFF0  EC2E  F067         	call	_drawtext
  5813                           
  5814                           ;Lab8p1.c: 727: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5815  00DFF4  0E95               	movlw	149
  5816  00DFF6  6E29               	movwf	drawtext@y,c
  5817  00DFF8  0E7C               	movlw	low _SW_EWLT_Txt
  5818  00DFFA  6E2A               	movwf	drawtext@_text,c
  5819  00DFFC  0E00               	movlw	high _SW_EWLT_Txt
  5820  00DFFE  6E2B               	movwf	drawtext@_text+1,c
  5821  00E000  0EFF               	movlw	255
  5822  00E002  6E2D               	movwf	drawtext@color+1,c
  5823  00E004  682C               	setf	drawtext@color,c
  5824  00E006  0E00               	movlw	0
  5825  00E008  6E2F               	movwf	drawtext@bg+1,c
  5826  00E00A  0E00               	movlw	0
  5827  00E00C  6E2E               	movwf	drawtext@bg,c
  5828  00E00E  0E01               	movlw	1
  5829  00E010  6E30               	movwf	drawtext@size,c
  5830  00E012  0E20               	movlw	32
  5831  00E014  EC2E  F067         	call	_drawtext
  5832                           
  5833                           ;Lab8p1.c: 728: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5834  00E018  0E95               	movlw	149
  5835  00E01A  6E29               	movwf	drawtext@y,c
  5836  00E01C  0EA7               	movlw	low _SW_NSPED_Txt
  5837  00E01E  6E2A               	movwf	drawtext@_text,c
  5838  00E020  0E00               	movlw	high _SW_NSPED_Txt
  5839  00E022  6E2B               	movwf	drawtext@_text+1,c
  5840  00E024  0EFF               	movlw	255
  5841  00E026  6E2D               	movwf	drawtext@color+1,c
  5842  00E028  682C               	setf	drawtext@color,c
  5843  00E02A  0E00               	movlw	0
  5844  00E02C  6E2F               	movwf	drawtext@bg+1,c
  5845  00E02E  0E00               	movlw	0
  5846  00E030  6E2E               	movwf	drawtext@bg,c
  5847  00E032  0E01               	movlw	1
  5848  00E034  6E30               	movwf	drawtext@size,c
  5849  00E036  0E3A               	movlw	58
  5850  00E038  EC2E  F067         	call	_drawtext
  5851                           
  5852                           ;Lab8p1.c: 729: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5853  00E03C  0E95               	movlw	149
  5854  00E03E  6E29               	movwf	drawtext@y,c
  5855  00E040  0EA5               	movlw	low _SW_NSLT_Txt
  5856  00E042  6E2A               	movwf	drawtext@_text,c
  5857  00E044  0E00               	movlw	high _SW_NSLT_Txt
  5858  00E046  6E2B               	movwf	drawtext@_text+1,c
  5859  00E048  0EFF               	movlw	255
  5860  00E04A  6E2D               	movwf	drawtext@color+1,c
  5861  00E04C  682C               	setf	drawtext@color,c
  5862  00E04E  0E00               	movlw	0
  5863  00E050  6E2F               	movwf	drawtext@bg+1,c
  5864  00E052  0E00               	movlw	0
  5865  00E054  6E2E               	movwf	drawtext@bg,c
  5866  00E056  0E01               	movlw	1
  5867  00E058  6E30               	movwf	drawtext@size,c
  5868  00E05A  0E57               	movlw	87
  5869  00E05C  EC2E  F067         	call	_drawtext
  5870                           
  5871                           ;Lab8p1.c: 731: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5872  00E060  0E95               	movlw	149
  5873  00E062  6E29               	movwf	drawtext@y,c
  5874  00E064  0EA3               	movlw	low _SW_MODE_Txt
  5875  00E066  6E2A               	movwf	drawtext@_text,c
  5876  00E068  0E00               	movlw	high _SW_MODE_Txt
  5877  00E06A  6E2B               	movwf	drawtext@_text+1,c
  5878  00E06C  0EFF               	movlw	255
  5879  00E06E  6E2D               	movwf	drawtext@color+1,c
  5880  00E070  682C               	setf	drawtext@color,c
  5881  00E072  0E00               	movlw	0
  5882  00E074  6E2F               	movwf	drawtext@bg+1,c
  5883  00E076  0E00               	movlw	0
  5884  00E078  6E2E               	movwf	drawtext@bg,c
  5885  00E07A  0E01               	movlw	1
  5886  00E07C  6E30               	movwf	drawtext@size,c
  5887  00E07E  0E70               	movlw	112
  5888  00E080  EC2E  F067         	call	_drawtext
  5889  00E084  0012               	return		;funcret
  5890  00E086                     __end_of_update_LCD_misc:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon2	equ	0xFF1
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           postdec1	equ	0xFE5
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           fsr2h	equ	0xFDA
  5905                           fsr2l	equ	0xFD9
  5906                           status	equ	0xFD8
  5907                           
  5908 ;; *************** function _printf *****************
  5909 ;; Defined at:
  5910 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  f               2   63[COMRAM] PTR const unsigned char 
  5913 ;;		 -> STR_15(19), 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;  tmpval          4   83[COMRAM] struct .
  5916 ;;  val             4   79[COMRAM] unsigned long 
  5917 ;;  fval            3   93[COMRAM] unsigned long 
  5918 ;;  cp              3    0        PTR const unsigned char 
  5919 ;;  prec            2   96[COMRAM] int 
  5920 ;;  width           2   91[COMRAM] int 
  5921 ;;  flag            2   89[COMRAM] unsigned short 
  5922 ;;  exp             2   87[COMRAM] int 
  5923 ;;  ap              2   77[COMRAM] PTR void [1]
  5924 ;;		 -> ?_printf(2), 
  5925 ;;  len             2    0        unsigned int 
  5926 ;;  c               1   98[COMRAM] char 
  5927 ;;  d               1    0        unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  2   63[COMRAM] int 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5937 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;Total ram usage:       36 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    3
  5944 ;; This function calls:
  5945 ;;		___awdiv
  5946 ;;		___ftadd
  5947 ;;		___ftge
  5948 ;;		___ftmul
  5949 ;;		___ftneg
  5950 ;;		___ftsub
  5951 ;;		___fttol
  5952 ;;		___lldiv
  5953 ;;		___llmod
  5954 ;;		___lltoft
  5955 ;;		___wmul
  5956 ;;		__div_to_l_
  5957 ;;		__tdiv_to_l_
  5958 ;;		_fround
  5959 ;;		_isdigit
  5960 ;;		_putch
  5961 ;;		_scale
  5962 ;; This function is called by:
  5963 ;;		_update_LCD_misc
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text23
  5968  00F12A                     __ptext23:
  5969                           	opt stack 0
  5970  00F12A                     _printf:
  5971                           	opt stack 23
  5972                           
  5973                           ;doprnt.c: 466: va_list ap;
  5974                           ;doprnt.c: 499: signed char c;
  5975                           ;doprnt.c: 501: int width;
  5976                           ;doprnt.c: 504: int prec;
  5977                           ;doprnt.c: 508: unsigned short flag;
  5978                           ;doprnt.c: 515: char d;
  5979                           ;doprnt.c: 516: double fval;
  5980                           ;doprnt.c: 517: int exp;
  5981                           ;doprnt.c: 523: union {
  5982                           ;doprnt.c: 524: unsigned long vd;
  5983                           ;doprnt.c: 525: double integ;
  5984                           ;doprnt.c: 526: } tmpval;
  5985                           ;doprnt.c: 528: unsigned long val;
  5986                           ;doprnt.c: 529: unsigned len;
  5987                           ;doprnt.c: 530: const char * cp;
  5988                           ;doprnt.c: 533: *ap = __va_start();
  5989                           
  5990                           ;incstack = 0
  5991  00F12A  0E42               	movlw	low (?_printf+2)
  5992  00F12C  6E4E               	movwf	printf@ap,c
  5993  00F12E  0E00               	movlw	high (?_printf+2)
  5994  00F130  6E4F               	movwf	printf@ap+1,c
  5995                           
  5996                           ;doprnt.c: 536: while(c = *f++) {
  5997  00F132  EF21  F07D         	goto	l4446
  5998  00F136                     l4184:
  5999                           
  6000                           ;doprnt.c: 538: if(c != '%')
  6001  00F136  0E25               	movlw	37
  6002  00F138  1863               	xorwf	printf@c,w,c
  6003  00F13A  B4D8               	btfsc	status,2,c
  6004  00F13C  D005               	goto	l4188
  6005                           
  6006                           ;doprnt.c: 540: {
  6007                           ;doprnt.c: 541: (putch(c) );
  6008  00F13E  5063               	movf	printf@c,w,c
  6009  00F140  EC7E  F05F         	call	_putch
  6010                           
  6011                           ;doprnt.c: 542: continue;
  6012  00F144  EF21  F07D         	goto	l4446
  6013  00F148                     l4188:
  6014                           
  6015                           ;doprnt.c: 543: }
  6016                           ;doprnt.c: 546: width = 0;
  6017  00F148  0E00               	movlw	0
  6018  00F14A  6E5D               	movwf	printf@width+1,c
  6019  00F14C  0E00               	movlw	0
  6020  00F14E  6E5C               	movwf	printf@width,c
  6021                           
  6022                           ;doprnt.c: 548: flag = 0;
  6023  00F150  0E00               	movlw	0
  6024  00F152  6E5B               	movwf	printf@flag+1,c
  6025  00F154  0E00               	movlw	0
  6026  00F156  6E5A               	movwf	printf@flag,c
  6027                           
  6028                           ;doprnt.c: 551: switch(*f) {
  6029                           
  6030                           ;doprnt.c: 550: for(;;) {
  6031  00F158  D005               	goto	l4194
  6032  00F15A                     l4190:
  6033                           
  6034                           ;doprnt.c: 580: flag |= 0x04;
  6035  00F15A  845A               	bsf	printf@flag,2,c
  6036                           
  6037                           ;doprnt.c: 581: f++;
  6038  00F15C  4A40               	infsnz	printf@f,f,c
  6039  00F15E  2A41               	incf	printf@f+1,f,c
  6040                           
  6041                           ;doprnt.c: 582: continue;
  6042  00F160  D001               	goto	l4194
  6043                           
  6044                           ;doprnt.c: 584: }
  6045  00F162  D00B               	goto	l4196
  6046  00F164                     l4194:
  6047  00F164  C040  FFF6         	movff	printf@f,tblptrl
  6048  00F168  C041  FFF7         	movff	printf@f+1,tblptrh
  6049  00F16C                     	if	0	;tblptru may be non-zero
  6050  00F16C                     	endif
  6051  00F16C                     	if	0	;tblptru may be non-zero
  6052  00F16C                     	endif
  6053  00F16C  0008               	tblrd		*
  6054  00F16E  50F5               	movf	tablat,w,c
  6055                           
  6056                           ; Switch size 1, requested type "space"
  6057                           ; Number of cases is 1, Range of values is 48 to 48
  6058                           ; switch strategies available:
  6059                           ; Name         Instructions Cycles
  6060                           ; simple_byte            4     3 (average)
  6061                           ;	Chosen strategy is simple_byte
  6062  00F170  0A30               	xorlw	48	; case 48
  6063  00F172  B4D8               	btfsc	status,2,c
  6064  00F174  D7F2               	goto	l4190
  6065                           
  6066                           ;doprnt.c: 585: break;
  6067  00F176  D001               	goto	l4196
  6068                           
  6069                           ;doprnt.c: 586: }
  6070  00F178  D7F5               	goto	l4194
  6071  00F17A                     l4196:
  6072                           
  6073                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6074  00F17A  C040  FFF6         	movff	printf@f,tblptrl
  6075  00F17E  C041  FFF7         	movff	printf@f+1,tblptrh
  6076  00F182                     	if	0	;tblptru may be non-zero
  6077  00F182                     	endif
  6078  00F182                     	if	0	;tblptru may be non-zero
  6079  00F182                     	endif
  6080  00F182  0008               	tblrd		*
  6081  00F184  50F5               	movf	tablat,w,c
  6082  00F186  ECF3  F05F         	call	_isdigit
  6083  00F18A  A0D8               	btfss	status,0,c
  6084  00F18C  D035               	goto	l4208
  6085                           
  6086                           ;doprnt.c: 598: width = 0;
  6087  00F18E  0E00               	movlw	0
  6088  00F190  6E5D               	movwf	printf@width+1,c
  6089  00F192  0E00               	movlw	0
  6090  00F194  6E5C               	movwf	printf@width,c
  6091  00F196  D000               	goto	l4200
  6092  00F198                     l4200:
  6093                           
  6094                           ;doprnt.c: 600: width *= 10;
  6095  00F198  C05C  F00F         	movff	printf@width,___wmul@multiplier
  6096  00F19C  C05D  F010         	movff	printf@width+1,___wmul@multiplier+1
  6097  00F1A0  0E00               	movlw	0
  6098  00F1A2  6E12               	movwf	___wmul@multiplicand+1,c
  6099  00F1A4  0E0A               	movlw	10
  6100  00F1A6  6E11               	movwf	___wmul@multiplicand,c
  6101  00F1A8  EC29  F060         	call	___wmul	;wreg free
  6102  00F1AC  C00F  F05C         	movff	?___wmul,printf@width
  6103  00F1B0  C010  F05D         	movff	?___wmul+1,printf@width+1
  6104                           
  6105                           ;doprnt.c: 601: width += *f++ - '0';
  6106  00F1B4  0ED0               	movlw	208
  6107  00F1B6  6E45               	movwf	??_printf& (0+255),c
  6108  00F1B8  0EFF               	movlw	255
  6109  00F1BA  6E46               	movwf	(??_printf+1)& (0+255),c
  6110  00F1BC  C040  FFF6         	movff	printf@f,tblptrl
  6111  00F1C0  C041  FFF7         	movff	printf@f+1,tblptrh
  6112  00F1C4                     	if	0	;tblptru may be non-zero
  6113  00F1C4                     	endif
  6114  00F1C4                     	if	0	;tblptru may be non-zero
  6115  00F1C4                     	endif
  6116  00F1C4  0008               	tblrd		*
  6117  00F1C6  50F5               	movf	tablat,w,c
  6118  00F1C8  6E47               	movwf	(??_printf+2)& (0+255),c
  6119  00F1CA  6A48               	clrf	(??_printf+3)& (0+255),c
  6120  00F1CC  5045               	movf	??_printf,w,c
  6121  00F1CE  2647               	addwf	??_printf+2,f,c
  6122  00F1D0  5046               	movf	??_printf+1,w,c
  6123  00F1D2  2248               	addwfc	??_printf+3,f,c
  6124  00F1D4  5047               	movf	??_printf+2,w,c
  6125  00F1D6  265C               	addwf	printf@width,f,c
  6126  00F1D8  5048               	movf	??_printf+3,w,c
  6127  00F1DA  225D               	addwfc	printf@width+1,f,c
  6128  00F1DC  4A40               	infsnz	printf@f,f,c
  6129  00F1DE  2A41               	incf	printf@f+1,f,c
  6130                           
  6131                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6132  00F1E0  C040  FFF6         	movff	printf@f,tblptrl
  6133  00F1E4  C041  FFF7         	movff	printf@f+1,tblptrh
  6134  00F1E8                     	if	0	;tblptru may be non-zero
  6135  00F1E8                     	endif
  6136  00F1E8                     	if	0	;tblptru may be non-zero
  6137  00F1E8                     	endif
  6138  00F1E8  0008               	tblrd		*
  6139  00F1EA  50F5               	movf	tablat,w,c
  6140  00F1EC  ECF3  F05F         	call	_isdigit
  6141  00F1F0  A0D8               	btfss	status,0,c
  6142  00F1F2  D002               	goto	l4208
  6143  00F1F4  D7D1               	goto	l4200
  6144  00F1F6  D000               	goto	l4208
  6145  00F1F8                     l4208:
  6146                           
  6147                           ;doprnt.c: 608: }
  6148                           ;doprnt.c: 611: if(*f == '.') {
  6149  00F1F8  C040  FFF6         	movff	printf@f,tblptrl
  6150  00F1FC  C041  FFF7         	movff	printf@f+1,tblptrh
  6151  00F200                     	if	0	;tblptru may be non-zero
  6152  00F200                     	endif
  6153  00F200                     	if	0	;tblptru may be non-zero
  6154  00F200                     	endif
  6155  00F200  0008               	tblrd		*
  6156  00F202  50F5               	movf	tablat,w,c
  6157  00F204  0A2E               	xorlw	46
  6158  00F206  A4D8               	btfss	status,2,c
  6159  00F208  D030               	goto	l4220
  6160                           
  6161                           ;doprnt.c: 612: flag |= 0x4000;
  6162  00F20A  8C5B               	bsf	printf@flag+1,6,c
  6163                           
  6164                           ;doprnt.c: 613: f++;
  6165  00F20C  4A40               	infsnz	printf@f,f,c
  6166  00F20E  2A41               	incf	printf@f+1,f,c
  6167                           
  6168                           ;doprnt.c: 620: {
  6169                           ;doprnt.c: 621: prec = 0;
  6170  00F210  0E00               	movlw	0
  6171  00F212  6E62               	movwf	printf@prec+1,c
  6172  00F214  0E00               	movlw	0
  6173  00F216  6E61               	movwf	printf@prec,c
  6174                           
  6175                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6176  00F218  D01C               	goto	l4218
  6177  00F21A                     l4214:
  6178                           
  6179                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6180  00F21A  C061  F00F         	movff	printf@prec,___wmul@multiplier
  6181  00F21E  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  6182  00F222  0E00               	movlw	0
  6183  00F224  6E12               	movwf	___wmul@multiplicand+1,c
  6184  00F226  0E0A               	movlw	10
  6185  00F228  6E11               	movwf	___wmul@multiplicand,c
  6186  00F22A  EC29  F060         	call	___wmul	;wreg free
  6187  00F22E  C040  FFF6         	movff	printf@f,tblptrl
  6188  00F232  C041  FFF7         	movff	printf@f+1,tblptrh
  6189  00F236                     	if	0	;tblptru may be non-zero
  6190  00F236                     	endif
  6191  00F236                     	if	0	;tblptru may be non-zero
  6192  00F236                     	endif
  6193  00F236  0008               	tblrd		*
  6194  00F238  50F5               	movf	tablat,w,c
  6195  00F23A  260F               	addwf	?___wmul,f,c
  6196  00F23C  0E00               	movlw	0
  6197  00F23E  2210               	addwfc	?___wmul+1,f,c
  6198  00F240  0ED0               	movlw	208
  6199  00F242  240F               	addwf	?___wmul,w,c
  6200  00F244  6E61               	movwf	printf@prec,c
  6201  00F246  0EFF               	movlw	255
  6202  00F248  2010               	addwfc	?___wmul+1,w,c
  6203  00F24A  6E62               	movwf	printf@prec+1,c
  6204  00F24C  4A40               	infsnz	printf@f,f,c
  6205  00F24E  2A41               	incf	printf@f+1,f,c
  6206  00F250  D000               	goto	l4218
  6207  00F252                     l4218:
  6208  00F252  C040  FFF6         	movff	printf@f,tblptrl
  6209  00F256  C041  FFF7         	movff	printf@f+1,tblptrh
  6210  00F25A                     	if	0	;tblptru may be non-zero
  6211  00F25A                     	endif
  6212  00F25A                     	if	0	;tblptru may be non-zero
  6213  00F25A                     	endif
  6214  00F25A  0008               	tblrd		*
  6215  00F25C  50F5               	movf	tablat,w,c
  6216  00F25E  ECF3  F05F         	call	_isdigit
  6217  00F262  A0D8               	btfss	status,0,c
  6218  00F264  D00D               	goto	l4228
  6219  00F266  D7D9               	goto	l4214
  6220                           
  6221                           ;doprnt.c: 624: }
  6222                           ;doprnt.c: 625: } else {
  6223  00F268  D00B               	goto	l4228
  6224  00F26A                     l4220:
  6225                           
  6226                           ;doprnt.c: 626: prec = 0;
  6227  00F26A  0E00               	movlw	0
  6228  00F26C  6E62               	movwf	printf@prec+1,c
  6229  00F26E  0E00               	movlw	0
  6230  00F270  6E61               	movwf	printf@prec,c
  6231                           
  6232                           ;doprnt.c: 628: flag |= 0x1000;
  6233  00F272  885B               	bsf	printf@flag+1,4,c
  6234                           
  6235                           ;doprnt.c: 630: }
  6236                           ;doprnt.c: 635: switch(c = *f++) {
  6237  00F274  D005               	goto	l4228
  6238                           
  6239                           ;doprnt.c: 638: goto alldone;
  6240                           
  6241                           ;doprnt.c: 637: case 0:
  6242  00F276  D3F4               	goto	l650
  6243  00F278                     l4224:
  6244                           
  6245                           ;doprnt.c: 663: flag |= 0x400;
  6246  00F278  845B               	bsf	printf@flag+1,2,c
  6247                           
  6248                           ;doprnt.c: 664: break;
  6249  00F27A  D013               	goto	l4230
  6250                           
  6251                           ;doprnt.c: 813: continue;
  6252                           
  6253                           ;doprnt.c: 802: default:
  6254  00F27C  D3E2               	goto	l4446
  6255                           
  6256                           ;doprnt.c: 822: }
  6257  00F27E  D011               	goto	l4230
  6258  00F280                     l4228:
  6259  00F280  C040  FFF6         	movff	printf@f,tblptrl
  6260  00F284  C041  FFF7         	movff	printf@f+1,tblptrh
  6261  00F288  4A40               	infsnz	printf@f,f,c
  6262  00F28A  2A41               	incf	printf@f+1,f,c
  6263  00F28C                     	if	0	;tblptru may be non-zero
  6264  00F28C                     	endif
  6265  00F28C                     	if	0	;tblptru may be non-zero
  6266  00F28C                     	endif
  6267  00F28C  0008               	tblrd		*
  6268  00F28E  CFF5 F063          	movff	tablat,printf@c
  6269  00F292  5063               	movf	printf@c,w,c
  6270                           
  6271                           ; Switch size 1, requested type "space"
  6272                           ; Number of cases is 2, Range of values is 0 to 102
  6273                           ; switch strategies available:
  6274                           ; Name         Instructions Cycles
  6275                           ; simple_byte            7     4 (average)
  6276                           ;	Chosen strategy is simple_byte
  6277  00F294  0A00               	xorlw	0	; case 0
  6278  00F296  B4D8               	btfsc	status,2,c
  6279  00F298  D3E3               	goto	l650
  6280  00F29A  0A66               	xorlw	102	; case 102
  6281  00F29C  B4D8               	btfsc	status,2,c
  6282  00F29E  D7EC               	goto	l4224
  6283  00F2A0  D3D0               	goto	l4446
  6284  00F2A2                     l4230:
  6285                           
  6286                           ;doprnt.c: 825: if(flag & (0x700)) {
  6287  00F2A2  0E07               	movlw	7
  6288  00F2A4  145B               	andwf	printf@flag+1,w,c
  6289  00F2A6  B4D8               	btfsc	status,2,c
  6290  00F2A8  D323               	goto	l4390
  6291                           
  6292                           ;doprnt.c: 827: if(flag & 0x1000)
  6293  00F2AA  A85B               	btfss	printf@flag+1,4,c
  6294  00F2AC  D005               	goto	l4236
  6295                           
  6296                           ;doprnt.c: 829: prec = 6;
  6297  00F2AE  0E00               	movlw	0
  6298  00F2B0  6E62               	movwf	printf@prec+1,c
  6299  00F2B2  0E06               	movlw	6
  6300  00F2B4  6E61               	movwf	printf@prec,c
  6301  00F2B6  D000               	goto	l4236
  6302  00F2B8                     l4236:
  6303                           
  6304                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6305  00F2B8  C04E  FFD9         	movff	printf@ap,fsr2l
  6306  00F2BC  C04F  FFDA         	movff	printf@ap+1,fsr2h
  6307  00F2C0  CFDE F05E          	movff	postinc2,printf@fval
  6308  00F2C4  CFDE F05F          	movff	postinc2,printf@fval+1
  6309  00F2C8  CFDD F060          	movff	postdec2,printf@fval+2
  6310  00F2CC  0E03               	movlw	3
  6311  00F2CE  264E               	addwf	printf@ap,f,c
  6312  00F2D0  0E00               	movlw	0
  6313  00F2D2  224F               	addwfc	printf@ap+1,f,c
  6314                           
  6315                           ;doprnt.c: 831: if(fval < 0.0) {
  6316  00F2D4  AE60               	btfss	printf@fval+2,7,c
  6317  00F2D6  D011               	goto	l4246
  6318                           
  6319                           ;doprnt.c: 832: fval = -fval;
  6320  00F2D8  C05E  F001         	movff	printf@fval,___ftneg@f1
  6321  00F2DC  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  6322  00F2E0  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  6323  00F2E4  EC04  F060         	call	___ftneg	;wreg free
  6324  00F2E8  C001  F05E         	movff	?___ftneg,printf@fval
  6325  00F2EC  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  6326  00F2F0  C003  F060         	movff	?___ftneg+2,printf@fval+2
  6327                           
  6328                           ;doprnt.c: 833: flag |= 0x03;
  6329  00F2F4  0E03               	movlw	3
  6330  00F2F6  125A               	iorwf	printf@flag,f,c
  6331  00F2F8  D000               	goto	l4246
  6332  00F2FA                     l4246:
  6333                           
  6334                           ;doprnt.c: 834: }
  6335                           ;doprnt.c: 835: exp = 0;
  6336  00F2FA  0E00               	movlw	0
  6337  00F2FC  6E59               	movwf	printf@exp+1,c
  6338  00F2FE  0E00               	movlw	0
  6339  00F300  6E58               	movwf	printf@exp,c
  6340                           
  6341                           ;doprnt.c: 836: if( fval!=0) {
  6342  00F302  505E               	movf	printf@fval,w,c
  6343  00F304  105F               	iorwf	printf@fval+1,w,c
  6344  00F306  1060               	iorwf	printf@fval+2,w,c
  6345  00F308  B4D8               	btfsc	status,2,c
  6346  00F30A  D085               	goto	l4274
  6347                           
  6348                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6349  00F30C  0E82               	movlw	130
  6350  00F30E  6E45               	movwf	??_printf& (0+255),c
  6351  00F310  0EFF               	movlw	255
  6352  00F312  6E46               	movwf	(??_printf+1)& (0+255),c
  6353  00F314  C05E  F047         	movff	printf@fval,??_printf+2
  6354  00F318  C05F  F048         	movff	printf@fval+1,??_printf+3
  6355  00F31C  C060  F049         	movff	printf@fval+2,??_printf+4
  6356  00F320  C061  F04A         	movff	printf@fval+3,??_printf+5
  6357  00F324  0E10               	movlw	16
  6358  00F326  D005               	goto	u3830
  6359  00F328                     u3835:
  6360  00F328  90D8               	bcf	status,0,c
  6361  00F32A  324A               	rrcf	??_printf+5,f,c
  6362  00F32C  3249               	rrcf	??_printf+4,f,c
  6363  00F32E  3248               	rrcf	??_printf+3,f,c
  6364  00F330  3247               	rrcf	??_printf+2,f,c
  6365  00F332                     u3830:
  6366  00F332  2EE8               	decfsz	wreg,f,c
  6367  00F334  D7F9               	goto	u3835
  6368  00F336  5047               	movf	??_printf+2,w,c
  6369  00F338  2445               	addwf	??_printf,w,c
  6370  00F33A  6E58               	movwf	printf@exp,c
  6371  00F33C  0E00               	movlw	0
  6372  00F33E  2046               	addwfc	??_printf+1,w,c
  6373  00F340  6E59               	movwf	printf@exp+1,c
  6374                           
  6375                           ;doprnt.c: 838: exp--;
  6376  00F342  0658               	decf	printf@exp,f,c
  6377  00F344  A0D8               	btfss	status,0,c
  6378  00F346  0659               	decf	printf@exp+1,f,c
  6379                           
  6380                           ;doprnt.c: 839: exp *= 3;
  6381  00F348  C058  F00F         	movff	printf@exp,___wmul@multiplier
  6382  00F34C  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  6383  00F350  0E00               	movlw	0
  6384  00F352  6E12               	movwf	___wmul@multiplicand+1,c
  6385  00F354  0E03               	movlw	3
  6386  00F356  6E11               	movwf	___wmul@multiplicand,c
  6387  00F358  EC29  F060         	call	___wmul	;wreg free
  6388  00F35C  C00F  F058         	movff	?___wmul,printf@exp
  6389  00F360  C010  F059         	movff	?___wmul+1,printf@exp+1
  6390                           
  6391                           ;doprnt.c: 840: exp /= 10;
  6392  00F364  C058  F007         	movff	printf@exp,___awdiv@dividend
  6393  00F368  C059  F008         	movff	printf@exp+1,___awdiv@dividend+1
  6394  00F36C  0E00               	movlw	0
  6395  00F36E  6E0A               	movwf	___awdiv@divisor+1,c
  6396  00F370  0E0A               	movlw	10
  6397  00F372  6E09               	movwf	___awdiv@divisor,c
  6398  00F374  ECBF  F064         	call	___awdiv	;wreg free
  6399  00F378  C007  F058         	movff	?___awdiv,printf@exp
  6400  00F37C  C008  F059         	movff	?___awdiv+1,printf@exp+1
  6401                           
  6402                           ;doprnt.c: 841: if(exp < 0)
  6403  00F380  AE59               	btfss	printf@exp+1,7,c
  6404  00F382  D004               	goto	l4262
  6405                           
  6406                           ;doprnt.c: 842: exp--;
  6407  00F384  0658               	decf	printf@exp,f,c
  6408  00F386  A0D8               	btfss	status,0,c
  6409  00F388  0659               	decf	printf@exp+1,f,c
  6410  00F38A  D000               	goto	l4262
  6411  00F38C                     l4262:
  6412                           
  6413                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6414  00F38C  5058               	movf	printf@exp,w,c
  6415  00F38E  0800               	sublw	0
  6416  00F390  EC16  F073         	call	_scale
  6417  00F394  C024  F054         	movff	?_scale,printf@tmpval
  6418  00F398  C025  F055         	movff	?_scale+1,printf@tmpval+1
  6419  00F39C  C026  F056         	movff	?_scale+2,printf@tmpval+2
  6420                           
  6421                           ;doprnt.c: 847: tmpval.integ *= fval;
  6422  00F3A0  C054  F015         	movff	printf@tmpval,___ftmul@f1
  6423  00F3A4  C055  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  6424  00F3A8  C056  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  6425  00F3AC  C05E  F018         	movff	printf@fval,___ftmul@f2
  6426  00F3B0  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  6427  00F3B4  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  6428  00F3B8  EC6E  F069         	call	___ftmul	;wreg free
  6429  00F3BC  C015  F054         	movff	?___ftmul,printf@tmpval
  6430  00F3C0  C016  F055         	movff	?___ftmul+1,printf@tmpval+1
  6431  00F3C4  C017  F056         	movff	?___ftmul+2,printf@tmpval+2
  6432                           
  6433                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6434  00F3C8  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6435  00F3CC  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6436  00F3D0  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6437  00F3D4  0E00               	movlw	0
  6438  00F3D6  6E04               	movwf	___ftge@ff2,c
  6439  00F3D8  0E80               	movlw	128
  6440  00F3DA  6E05               	movwf	___ftge@ff2+1,c
  6441  00F3DC  0E3F               	movlw	63
  6442  00F3DE  6E06               	movwf	___ftge@ff2+2,c
  6443  00F3E0  EC0A  F065         	call	___ftge	;wreg free
  6444  00F3E4  B0D8               	btfsc	status,0,c
  6445  00F3E6  D004               	goto	l4270
  6446                           
  6447                           ;doprnt.c: 849: exp--;
  6448  00F3E8  0658               	decf	printf@exp,f,c
  6449  00F3EA  A0D8               	btfss	status,0,c
  6450  00F3EC  0659               	decf	printf@exp+1,f,c
  6451  00F3EE  D013               	goto	l4274
  6452  00F3F0                     l4270:
  6453                           
  6454                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6455  00F3F0  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6456  00F3F4  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6457  00F3F8  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6458  00F3FC  0E00               	movlw	0
  6459  00F3FE  6E04               	movwf	___ftge@ff2,c
  6460  00F400  0E20               	movlw	32
  6461  00F402  6E05               	movwf	___ftge@ff2+1,c
  6462  00F404  0E41               	movlw	65
  6463  00F406  6E06               	movwf	___ftge@ff2+2,c
  6464  00F408  EC0A  F065         	call	___ftge	;wreg free
  6465  00F40C  A0D8               	btfss	status,0,c
  6466  00F40E  D003               	goto	l4274
  6467                           
  6468                           ;doprnt.c: 851: exp++;
  6469  00F410  4A58               	infsnz	printf@exp,f,c
  6470  00F412  2A59               	incf	printf@exp+1,f,c
  6471  00F414  D000               	goto	l4274
  6472  00F416                     l4274:
  6473                           
  6474                           ;doprnt.c: 852: }
  6475                           ;doprnt.c: 1112: if(prec <= 12)
  6476  00F416  BE62               	btfsc	printf@prec+1,7,c
  6477  00F418  D006               	goto	l4276
  6478  00F41A  5062               	movf	printf@prec+1,w,c
  6479  00F41C  E11C               	bnz	l4278
  6480  00F41E  0E0D               	movlw	13
  6481  00F420  5C61               	subwf	printf@prec,w,c
  6482  00F422  B0D8               	btfsc	status,0,c
  6483  00F424  D018               	goto	l4278
  6484  00F426                     l4276:
  6485                           
  6486                           ;doprnt.c: 1113: fval += fround(prec);
  6487  00F426  C05E  F02E         	movff	printf@fval,___ftadd@f1
  6488  00F42A  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  6489  00F42E  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  6490  00F432  5061               	movf	printf@prec,w,c
  6491  00F434  EC43  F070         	call	_fround
  6492  00F438  C024  F031         	movff	?_fround,___ftadd@f2
  6493  00F43C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  6494  00F440  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  6495  00F444  EC72  F06E         	call	___ftadd	;wreg free
  6496  00F448  C02E  F05E         	movff	?___ftadd,printf@fval
  6497  00F44C  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  6498  00F450  C030  F060         	movff	?___ftadd+2,printf@fval+2
  6499  00F454  D000               	goto	l4278
  6500  00F456                     l4278:
  6501                           
  6502                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6503  00F456  BE59               	btfsc	printf@exp+1,7,c
  6504  00F458  D006               	goto	l4280
  6505  00F45A  5059               	movf	printf@exp+1,w,c
  6506  00F45C  E120               	bnz	l4286
  6507  00F45E  0E0A               	movlw	10
  6508  00F460  5C58               	subwf	printf@exp,w,c
  6509  00F462  B0D8               	btfsc	status,0,c
  6510  00F464  D01C               	goto	l4286
  6511  00F466                     l4280:
  6512  00F466  505E               	movf	printf@fval,w,c
  6513  00F468  105F               	iorwf	printf@fval+1,w,c
  6514  00F46A  1060               	iorwf	printf@fval+2,w,c
  6515  00F46C  B4D8               	btfsc	status,2,c
  6516  00F46E  D06D               	goto	l4300
  6517  00F470  C05E  F02B         	movff	printf@fval,___fttol@f1
  6518  00F474  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  6519  00F478  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  6520  00F47C  EC0E  F068         	call	___fttol	;wreg free
  6521  00F480  502B               	movf	?___fttol,w,c
  6522  00F482  102C               	iorwf	?___fttol+1,w,c
  6523  00F484  102D               	iorwf	?___fttol+2,w,c
  6524  00F486  102E               	iorwf	?___fttol+3,w,c
  6525  00F488  B4D8               	btfsc	status,2,c
  6526  00F48A  BE59               	btfsc	printf@exp+1,7,c
  6527  00F48C  D05E               	goto	l4300
  6528  00F48E  5059               	movf	printf@exp+1,w,c
  6529  00F490  E106               	bnz	l4286
  6530  00F492  0E02               	movlw	2
  6531  00F494  5C58               	subwf	printf@exp,w,c
  6532  00F496  B0D8               	btfsc	status,0,c
  6533  00F498  D002               	goto	l4286
  6534  00F49A  D057               	goto	l4300
  6535  00F49C  D000               	goto	l4286
  6536  00F49E                     l4286:
  6537                           
  6538                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6539  00F49E  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6540  00F4A2  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6541  00F4A6  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6542  00F4AA  0E70               	movlw	112
  6543  00F4AC  6E04               	movwf	___ftge@ff2,c
  6544  00F4AE  0E89               	movlw	137
  6545  00F4B0  6E05               	movwf	___ftge@ff2+1,c
  6546  00F4B2  0E40               	movlw	64
  6547  00F4B4  6E06               	movwf	___ftge@ff2+2,c
  6548  00F4B6  EC0A  F065         	call	___ftge	;wreg free
  6549  00F4BA  B0D8               	btfsc	status,0,c
  6550  00F4BC  D002               	goto	l4290
  6551                           
  6552                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6553  00F4BE  0EF7               	movlw	247
  6554  00F4C0  D001               	goto	L7
  6555  00F4C2                     l4290:
  6556                           
  6557                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6558  00F4C2  0EF8               	movlw	248
  6559  00F4C4                     L7:
  6560  00F4C4  2658               	addwf	printf@exp,f,c
  6561  00F4C6  0EFF               	movlw	255
  6562  00F4C8  2259               	addwfc	printf@exp+1,f,c
  6563  00F4CA  D000               	goto	l4292
  6564  00F4CC                     l4292:
  6565                           
  6566                           ;doprnt.c: 1124: }
  6567                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6568  00F4CC  5058               	movf	printf@exp,w,c
  6569  00F4CE  EC16  F073         	call	_scale
  6570  00F4D2  C024  F054         	movff	?_scale,printf@tmpval
  6571  00F4D6  C025  F055         	movff	?_scale+1,printf@tmpval+1
  6572  00F4DA  C026  F056         	movff	?_scale+2,printf@tmpval+2
  6573                           
  6574                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6575  00F4DE  D017               	goto	l4296
  6576  00F4E0  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  6577  00F4E4  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  6578  00F4E8  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  6579  00F4EC  C054  F004         	movff	printf@tmpval,__div_to_l_@f2
  6580  00F4F0  C055  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  6581  00F4F4  C056  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  6582  00F4F8  ECEA  F069         	call	__div_to_l_	;wreg free
  6583  00F4FC  C001  F050         	movff	?__div_to_l_,printf@val
  6584  00F500  C002  F051         	movff	?__div_to_l_+1,printf@val+1
  6585  00F504  C003  F052         	movff	?__div_to_l_+2,printf@val+2
  6586  00F508  C004  F053         	movff	?__div_to_l_+3,printf@val+3
  6587  00F50C  D017               	goto	l4298
  6588  00F50E                     l4296:
  6589  00F50E  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  6590  00F512  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6591  00F516  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6592  00F51A  C054  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  6593  00F51E  C055  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6594  00F522  C056  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6595  00F526  EC6F  F06A         	call	__tdiv_to_l_	;wreg free
  6596  00F52A  C001  F050         	movff	?__tdiv_to_l_,printf@val
  6597  00F52E  C002  F051         	movff	?__tdiv_to_l_+1,printf@val+1
  6598  00F532  C003  F052         	movff	?__tdiv_to_l_+2,printf@val+2
  6599  00F536  C004  F053         	movff	?__tdiv_to_l_+3,printf@val+3
  6600  00F53A  D000               	goto	l4298
  6601  00F53C                     l4298:
  6602                           
  6603                           ;doprnt.c: 1129: fval = 0.0;
  6604  00F53C  0E00               	movlw	0
  6605  00F53E  6E5E               	movwf	printf@fval,c
  6606  00F540  0E00               	movlw	0
  6607  00F542  6E5F               	movwf	printf@fval+1,c
  6608  00F544  0E00               	movlw	0
  6609  00F546  6E60               	movwf	printf@fval+2,c
  6610                           
  6611                           ;doprnt.c: 1130: } else {
  6612  00F548  D033               	goto	l4304
  6613  00F54A                     l4300:
  6614                           
  6615                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6616  00F54A  C05E  F02B         	movff	printf@fval,___fttol@f1
  6617  00F54E  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  6618  00F552  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  6619  00F556  EC0E  F068         	call	___fttol	;wreg free
  6620  00F55A  C02B  F050         	movff	?___fttol,printf@val
  6621  00F55E  C02C  F051         	movff	?___fttol+1,printf@val+1
  6622  00F562  C02D  F052         	movff	?___fttol+2,printf@val+2
  6623  00F566  C02E  F053         	movff	?___fttol+3,printf@val+3
  6624                           
  6625                           ;doprnt.c: 1132: fval -= (double)val;
  6626  00F56A  C05E  F03A         	movff	printf@fval,___ftsub@f1
  6627  00F56E  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  6628  00F572  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  6629  00F576  C050  F009         	movff	printf@val,___lltoft@c
  6630  00F57A  C051  F00A         	movff	printf@val+1,___lltoft@c+1
  6631  00F57E  C052  F00B         	movff	printf@val+2,___lltoft@c+2
  6632  00F582  C053  F00C         	movff	printf@val+3,___lltoft@c+3
  6633  00F586  EC6B  F062         	call	___lltoft	;wreg free
  6634  00F58A  C009  F03D         	movff	?___lltoft,___ftsub@f2
  6635  00F58E  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  6636  00F592  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  6637  00F596  ECAB  F061         	call	___ftsub	;wreg free
  6638  00F59A  C03A  F05E         	movff	?___ftsub,printf@fval
  6639  00F59E  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  6640  00F5A2  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  6641                           
  6642                           ;doprnt.c: 1133: exp = 0;
  6643  00F5A6  0E00               	movlw	0
  6644  00F5A8  6E59               	movwf	printf@exp+1,c
  6645  00F5AA  0E00               	movlw	0
  6646  00F5AC  6E58               	movwf	printf@exp,c
  6647  00F5AE  D000               	goto	l4304
  6648  00F5B0                     l4304:
  6649                           
  6650                           ;doprnt.c: 1134: }
  6651                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6652  00F5B0  0E01               	movlw	1
  6653  00F5B2  6E63               	movwf	printf@c,c
  6654  00F5B4                     l4306:
  6655  00F5B4  0E0A               	movlw	10
  6656  00F5B6  1863               	xorwf	printf@c,w,c
  6657  00F5B8  B4D8               	btfsc	status,2,c
  6658  00F5BA  D01C               	goto	l4318
  6659  00F5BC  D001               	goto	l4310
  6660  00F5BE  D01A               	goto	l4318
  6661  00F5C0                     l4310:
  6662                           
  6663                           ;doprnt.c: 1137: if(val < dpowers[c])
  6664  00F5C0  5063               	movf	printf@c,w,c
  6665  00F5C2  0D04               	mullw	4
  6666  00F5C4  0E3E               	movlw	low _dpowers
  6667  00F5C6  24F3               	addwf	prodl,w,c
  6668  00F5C8  6EF6               	movwf	tblptrl,c
  6669  00F5CA  0EFC               	movlw	high _dpowers
  6670  00F5CC  20F4               	addwfc	prodh,w,c
  6671  00F5CE  6EF7               	movwf	tblptrh,c
  6672  00F5D0                     	if	0	;There are less than 3 active tblptr bytes
  6673  00F5D0                     	endif
  6674  00F5D0  0009               	tblrd		*+
  6675  00F5D2  50F5               	movf	tablat,w,c
  6676  00F5D4  5C50               	subwf	printf@val,w,c
  6677  00F5D6  0009               	tblrd		*+
  6678  00F5D8  50F5               	movf	tablat,w,c
  6679  00F5DA  5851               	subwfb	printf@val+1,w,c
  6680  00F5DC  0009               	tblrd		*+
  6681  00F5DE  50F5               	movf	tablat,w,c
  6682  00F5E0  5852               	subwfb	printf@val+2,w,c
  6683  00F5E2  0009               	tblrd		*+
  6684  00F5E4  50F5               	movf	tablat,w,c
  6685  00F5E6  5853               	subwfb	printf@val+3,w,c
  6686  00F5E8  A0D8               	btfss	status,0,c
  6687  00F5EA  D004               	goto	l4318
  6688  00F5EC  D001               	goto	l4314
  6689                           
  6690                           ;doprnt.c: 1138: break;
  6691  00F5EE  D002               	goto	l4318
  6692  00F5F0                     l4314:
  6693  00F5F0  2A63               	incf	printf@c,f,c
  6694  00F5F2  D7E0               	goto	l4306
  6695  00F5F4                     l4318:
  6696                           
  6697                           ;doprnt.c: 1142: width -= prec + c + exp;
  6698  00F5F4  C063  F045         	movff	printf@c,??_printf
  6699  00F5F8  6A46               	clrf	(??_printf+1)& (0+255),c
  6700  00F5FA  BE45               	btfsc	??_printf& (0+255),7,c
  6701  00F5FC  0646               	decf	(??_printf+1)& (0+255),f,c
  6702  00F5FE  5061               	movf	printf@prec,w,c
  6703  00F600  2645               	addwf	??_printf,f,c
  6704  00F602  5062               	movf	printf@prec+1,w,c
  6705  00F604  2246               	addwfc	??_printf+1,f,c
  6706  00F606  5058               	movf	printf@exp,w,c
  6707  00F608  2645               	addwf	??_printf,f,c
  6708  00F60A  5059               	movf	printf@exp+1,w,c
  6709  00F60C  2246               	addwfc	??_printf+1,f,c
  6710  00F60E  5045               	movf	??_printf,w,c
  6711  00F610  5E5C               	subwf	printf@width,f,c
  6712  00F612  5046               	movf	??_printf+1,w,c
  6713  00F614  5A5D               	subwfb	printf@width+1,f,c
  6714                           
  6715                           ;doprnt.c: 1143: if(
  6716                           ;doprnt.c: 1147: prec)
  6717  00F616  5061               	movf	printf@prec,w,c
  6718  00F618  1062               	iorwf	printf@prec+1,w,c
  6719  00F61A  B4D8               	btfsc	status,2,c
  6720  00F61C  D004               	goto	l4322
  6721                           
  6722                           ;doprnt.c: 1148: width--;
  6723  00F61E  065C               	decf	printf@width,f,c
  6724  00F620  A0D8               	btfss	status,0,c
  6725  00F622  065D               	decf	printf@width+1,f,c
  6726  00F624  D000               	goto	l4322
  6727  00F626                     l4322:
  6728                           
  6729                           ;doprnt.c: 1149: if(flag & 0x03)
  6730  00F626  0E03               	movlw	3
  6731  00F628  145A               	andwf	printf@flag,w,c
  6732  00F62A  6E45               	movwf	??_printf& (0+255),c
  6733  00F62C  0E00               	movlw	0
  6734  00F62E  145B               	andwf	printf@flag+1,w,c
  6735  00F630  6E46               	movwf	(??_printf+1)& (0+255),c
  6736  00F632  5045               	movf	??_printf,w,c
  6737  00F634  1046               	iorwf	??_printf+1,w,c
  6738  00F636  B4D8               	btfsc	status,2,c
  6739  00F638  D004               	goto	l4326
  6740                           
  6741                           ;doprnt.c: 1150: width--;
  6742  00F63A  065C               	decf	printf@width,f,c
  6743  00F63C  A0D8               	btfss	status,0,c
  6744  00F63E  065D               	decf	printf@width+1,f,c
  6745  00F640  D000               	goto	l4326
  6746  00F642                     l4326:
  6747                           
  6748                           ;doprnt.c: 1153: if(flag & 0x04) {
  6749  00F642  A45A               	btfss	printf@flag,2,c
  6750  00F644  D026               	goto	l4342
  6751                           
  6752                           ;doprnt.c: 1157: if(flag & 0x03)
  6753  00F646  0E03               	movlw	3
  6754  00F648  145A               	andwf	printf@flag,w,c
  6755  00F64A  6E45               	movwf	??_printf& (0+255),c
  6756  00F64C  0E00               	movlw	0
  6757  00F64E  145B               	andwf	printf@flag+1,w,c
  6758  00F650  6E46               	movwf	(??_printf+1)& (0+255),c
  6759  00F652  5045               	movf	??_printf,w,c
  6760  00F654  1046               	iorwf	??_printf+1,w,c
  6761  00F656  B4D8               	btfsc	status,2,c
  6762  00F658  D00B               	goto	l4336
  6763                           
  6764                           ;doprnt.c: 1159: (putch('-') );
  6765  00F65A  0E2D               	movlw	45
  6766  00F65C  EC7E  F05F         	call	_putch
  6767                           
  6768                           ;doprnt.c: 1168: while(width > 0) {
  6769  00F660  D007               	goto	l4336
  6770  00F662                     l4332:
  6771                           
  6772                           ;doprnt.c: 1169: (putch('0') );
  6773  00F662  0E30               	movlw	48
  6774  00F664  EC7E  F05F         	call	_putch
  6775                           
  6776                           ;doprnt.c: 1170: width--;
  6777  00F668  065C               	decf	printf@width,f,c
  6778  00F66A  A0D8               	btfss	status,0,c
  6779  00F66C  065D               	decf	printf@width+1,f,c
  6780  00F66E  D000               	goto	l4336
  6781  00F670                     l4336:
  6782  00F670  BE5D               	btfsc	printf@width+1,7,c
  6783  00F672  D069               	goto	l4354
  6784  00F674  505D               	movf	printf@width+1,w,c
  6785  00F676  E1F5               	bnz	l4332
  6786  00F678  045C               	decf	printf@width,w,c
  6787  00F67A  A0D8               	btfss	status,0,c
  6788  00F67C  D064               	goto	l4354
  6789  00F67E  D7F1               	goto	l4332
  6790                           
  6791                           ;doprnt.c: 1171: }
  6792                           ;doprnt.c: 1173: } else
  6793  00F680  D062               	goto	l4354
  6794                           
  6795                           ;doprnt.c: 1175: {
  6796                           ;doprnt.c: 1180: while(width > 0) {
  6797  00F682  D007               	goto	l4342
  6798  00F684                     l4338:
  6799                           
  6800                           ;doprnt.c: 1181: (putch(' ') );
  6801  00F684  0E20               	movlw	32
  6802  00F686  EC7E  F05F         	call	_putch
  6803                           
  6804                           ;doprnt.c: 1182: width--;
  6805  00F68A  065C               	decf	printf@width,f,c
  6806  00F68C  A0D8               	btfss	status,0,c
  6807  00F68E  065D               	decf	printf@width+1,f,c
  6808  00F690  D000               	goto	l4342
  6809  00F692                     l4342:
  6810  00F692  BE5D               	btfsc	printf@width+1,7,c
  6811  00F694  D005               	goto	l4344
  6812  00F696  505D               	movf	printf@width+1,w,c
  6813  00F698  E1F5               	bnz	l4338
  6814  00F69A  045C               	decf	printf@width,w,c
  6815  00F69C  B0D8               	btfsc	status,0,c
  6816  00F69E  D7F2               	goto	l4338
  6817  00F6A0                     l4344:
  6818                           
  6819                           ;doprnt.c: 1183: }
  6820                           ;doprnt.c: 1188: if(flag & 0x03)
  6821  00F6A0  0E03               	movlw	3
  6822  00F6A2  145A               	andwf	printf@flag,w,c
  6823  00F6A4  6E45               	movwf	??_printf& (0+255),c
  6824  00F6A6  0E00               	movlw	0
  6825  00F6A8  145B               	andwf	printf@flag+1,w,c
  6826  00F6AA  6E46               	movwf	(??_printf+1)& (0+255),c
  6827  00F6AC  5045               	movf	??_printf,w,c
  6828  00F6AE  1046               	iorwf	??_printf+1,w,c
  6829  00F6B0  B4D8               	btfsc	status,2,c
  6830  00F6B2  D049               	goto	l4354
  6831                           
  6832                           ;doprnt.c: 1190: (putch('-') );
  6833  00F6B4  0E2D               	movlw	45
  6834  00F6B6  EC7E  F05F         	call	_putch
  6835                           
  6836                           ;doprnt.c: 1195: }
  6837                           ;doprnt.c: 1196: while(c--) {
  6838  00F6BA  D045               	goto	l4354
  6839  00F6BC                     l4348:
  6840                           
  6841                           ;doprnt.c: 1200: {
  6842                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6843  00F6BC  C050  F001         	movff	printf@val,___lldiv@dividend
  6844  00F6C0  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  6845  00F6C4  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  6846  00F6C8  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  6847  00F6CC  5063               	movf	printf@c,w,c
  6848  00F6CE  0D04               	mullw	4
  6849  00F6D0  0E3E               	movlw	low _dpowers
  6850  00F6D2  24F3               	addwf	prodl,w,c
  6851  00F6D4  6EF6               	movwf	tblptrl,c
  6852  00F6D6  0EFC               	movlw	high _dpowers
  6853  00F6D8  20F4               	addwfc	prodh,w,c
  6854  00F6DA  6EF7               	movwf	tblptrh,c
  6855  00F6DC                     	if	0	;There are less than 3 active tblptr bytes
  6856  00F6DC                     	endif
  6857  00F6DC  0009               	tblrd		*+
  6858  00F6DE  CFF5 F005          	movff	tablat,___lldiv@divisor
  6859  00F6E2  0009               	tblrd		*+
  6860  00F6E4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6861  00F6E8  0009               	tblrd		*+
  6862  00F6EA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6863  00F6EE  000A               	tblrd		*-
  6864  00F6F0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6865  00F6F4  EC79  F064         	call	___lldiv	;wreg free
  6866  00F6F8  C001  F054         	movff	?___lldiv,printf@tmpval
  6867  00F6FC  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  6868  00F700  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  6869  00F704  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  6870                           
  6871                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6872  00F708  C054  F001         	movff	printf@tmpval,___llmod@dividend
  6873  00F70C  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  6874  00F710  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  6875  00F714  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  6876  00F718  0E0A               	movlw	10
  6877  00F71A  6E05               	movwf	___llmod@divisor,c
  6878  00F71C  0E00               	movlw	0
  6879  00F71E  6E06               	movwf	___llmod@divisor+1,c
  6880  00F720  0E00               	movlw	0
  6881  00F722  6E07               	movwf	___llmod@divisor+2,c
  6882  00F724  0E00               	movlw	0
  6883  00F726  6E08               	movwf	___llmod@divisor+3,c
  6884  00F728  ECFF  F062         	call	___llmod	;wreg free
  6885  00F72C  C001  F054         	movff	?___llmod,printf@tmpval
  6886  00F730  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  6887  00F734  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  6888  00F738  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  6889                           
  6890                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6891  00F73C  5054               	movf	printf@tmpval,w,c
  6892  00F73E  0F30               	addlw	48
  6893  00F740  EC7E  F05F         	call	_putch
  6894  00F744  D000               	goto	l4354
  6895  00F746                     l4354:
  6896  00F746  0663               	decf	printf@c,f,c
  6897  00F748  2863               	incf	printf@c,w,c
  6898  00F74A  B4D8               	btfsc	status,2,c
  6899  00F74C  D009               	goto	l4360
  6900  00F74E  D7B6               	goto	l4348
  6901                           
  6902                           ;doprnt.c: 1204: }
  6903                           ;doprnt.c: 1206: }
  6904                           ;doprnt.c: 1207: while(exp > 0) {
  6905  00F750  D007               	goto	l4360
  6906  00F752                     l4356:
  6907                           
  6908                           ;doprnt.c: 1208: (putch('0') );
  6909  00F752  0E30               	movlw	48
  6910  00F754  EC7E  F05F         	call	_putch
  6911                           
  6912                           ;doprnt.c: 1209: exp--;
  6913  00F758  0658               	decf	printf@exp,f,c
  6914  00F75A  A0D8               	btfss	status,0,c
  6915  00F75C  0659               	decf	printf@exp+1,f,c
  6916  00F75E  D000               	goto	l4360
  6917  00F760                     l4360:
  6918  00F760  BE59               	btfsc	printf@exp+1,7,c
  6919  00F762  D005               	goto	l4362
  6920  00F764  5059               	movf	printf@exp+1,w,c
  6921  00F766  E1F5               	bnz	l4356
  6922  00F768  0458               	decf	printf@exp,w,c
  6923  00F76A  B0D8               	btfsc	status,0,c
  6924  00F76C  D7F2               	goto	l4356
  6925  00F76E                     l4362:
  6926                           
  6927                           ;doprnt.c: 1210: }
  6928                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6929  00F76E  BE62               	btfsc	printf@prec+1,7,c
  6930  00F770  D009               	goto	l620
  6931  00F772  5062               	movf	printf@prec+1,w,c
  6932  00F774  E104               	bnz	u4050
  6933  00F776  0E09               	movlw	9
  6934  00F778  5C61               	subwf	printf@prec,w,c
  6935  00F77A  A0D8               	btfss	status,0,c
  6936  00F77C  D003               	goto	l620
  6937  00F77E                     u4050:
  6938                           
  6939                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6940  00F77E  0E08               	movlw	8
  6941  00F780  6E63               	movwf	printf@c,c
  6942  00F782  D003               	goto	l4366
  6943  00F784                     l620:
  6944                           
  6945                           ;doprnt.c: 1213: else
  6946                           ;doprnt.c: 1214: c = prec;
  6947  00F784  C061  F063         	movff	printf@prec,printf@c
  6948  00F788  D000               	goto	l4366
  6949  00F78A                     l4366:
  6950                           
  6951                           ;doprnt.c: 1215: prec -= c;
  6952  00F78A  5063               	movf	printf@c,w,c
  6953  00F78C  5E61               	subwf	printf@prec,f,c
  6954  00F78E  0E00               	movlw	0
  6955  00F790  BE63               	btfsc	printf@c,7,c
  6956  00F792  0EFF               	movlw	255
  6957  00F794  5A62               	subwfb	printf@prec+1,f,c
  6958                           
  6959                           ;doprnt.c: 1219: if(c)
  6960  00F796  5063               	movf	printf@c,w,c
  6961  00F798  B4D8               	btfsc	status,2,c
  6962  00F79A  D004               	goto	l4372
  6963                           
  6964                           ;doprnt.c: 1221: (putch('.') );
  6965  00F79C  0E2E               	movlw	46
  6966  00F79E  EC7E  F05F         	call	_putch
  6967  00F7A2  D000               	goto	l4372
  6968  00F7A4                     l4372:
  6969                           
  6970                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6971  00F7A4  5063               	movf	printf@c,w,c
  6972  00F7A6  EC16  F073         	call	_scale
  6973  00F7AA  C024  F04B         	movff	?_scale,_printf$2386
  6974  00F7AE  C025  F04C         	movff	?_scale+1,_printf$2386+1
  6975  00F7B2  C026  F04D         	movff	?_scale+2,_printf$2386+2
  6976                           
  6977                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6978  00F7B6  C05E  F018         	movff	printf@fval,___ftmul@f2
  6979  00F7BA  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  6980  00F7BE  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  6981  00F7C2  C04B  F015         	movff	_printf$2386,___ftmul@f1
  6982  00F7C6  C04C  F016         	movff	_printf$2386+1,___ftmul@f1+1
  6983  00F7CA  C04D  F017         	movff	_printf$2386+2,___ftmul@f1+2
  6984  00F7CE  EC6E  F069         	call	___ftmul	;wreg free
  6985  00F7D2  C015  F02B         	movff	?___ftmul,___fttol@f1
  6986  00F7D6  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6987  00F7DA  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6988  00F7DE  EC0E  F068         	call	___fttol	;wreg free
  6989  00F7E2  C02B  F050         	movff	?___fttol,printf@val
  6990  00F7E6  C02C  F051         	movff	?___fttol+1,printf@val+1
  6991  00F7EA  C02D  F052         	movff	?___fttol+2,printf@val+2
  6992  00F7EE  C02E  F053         	movff	?___fttol+3,printf@val+3
  6993                           
  6994                           ;doprnt.c: 1228: while(c--) {
  6995  00F7F2  D06B               	goto	l4382
  6996  00F7F4                     l4376:
  6997                           
  6998                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6999  00F7F4  C050  F001         	movff	printf@val,___lldiv@dividend
  7000  00F7F8  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  7001  00F7FC  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  7002  00F800  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  7003  00F804  5063               	movf	printf@c,w,c
  7004  00F806  0D04               	mullw	4
  7005  00F808  0E3E               	movlw	low _dpowers
  7006  00F80A  24F3               	addwf	prodl,w,c
  7007  00F80C  6EF6               	movwf	tblptrl,c
  7008  00F80E  0EFC               	movlw	high _dpowers
  7009  00F810  20F4               	addwfc	prodh,w,c
  7010  00F812  6EF7               	movwf	tblptrh,c
  7011  00F814                     	if	0	;There are less than 3 active tblptr bytes
  7012  00F814                     	endif
  7013  00F814  0009               	tblrd		*+
  7014  00F816  CFF5 F005          	movff	tablat,___lldiv@divisor
  7015  00F81A  0009               	tblrd		*+
  7016  00F81C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7017  00F820  0009               	tblrd		*+
  7018  00F822  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7019  00F826  000A               	tblrd		*-
  7020  00F828  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7021  00F82C  EC79  F064         	call	___lldiv	;wreg free
  7022  00F830  C001  F054         	movff	?___lldiv,printf@tmpval
  7023  00F834  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  7024  00F838  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  7025  00F83C  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  7026                           
  7027                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7028  00F840  C054  F001         	movff	printf@tmpval,___llmod@dividend
  7029  00F844  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  7030  00F848  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  7031  00F84C  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  7032  00F850  0E0A               	movlw	10
  7033  00F852  6E05               	movwf	___llmod@divisor,c
  7034  00F854  0E00               	movlw	0
  7035  00F856  6E06               	movwf	___llmod@divisor+1,c
  7036  00F858  0E00               	movlw	0
  7037  00F85A  6E07               	movwf	___llmod@divisor+2,c
  7038  00F85C  0E00               	movlw	0
  7039  00F85E  6E08               	movwf	___llmod@divisor+3,c
  7040  00F860  ECFF  F062         	call	___llmod	;wreg free
  7041  00F864  C001  F054         	movff	?___llmod,printf@tmpval
  7042  00F868  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  7043  00F86C  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  7044  00F870  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  7045                           
  7046                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7047  00F874  5054               	movf	printf@tmpval,w,c
  7048  00F876  0F30               	addlw	48
  7049  00F878  EC7E  F05F         	call	_putch
  7050                           
  7051                           ;doprnt.c: 1232: val %= dpowers[c];
  7052  00F87C  C050  F001         	movff	printf@val,___llmod@dividend
  7053  00F880  C051  F002         	movff	printf@val+1,___llmod@dividend+1
  7054  00F884  C052  F003         	movff	printf@val+2,___llmod@dividend+2
  7055  00F888  C053  F004         	movff	printf@val+3,___llmod@dividend+3
  7056  00F88C  5063               	movf	printf@c,w,c
  7057  00F88E  0D04               	mullw	4
  7058  00F890  0E3E               	movlw	low _dpowers
  7059  00F892  24F3               	addwf	prodl,w,c
  7060  00F894  6EF6               	movwf	tblptrl,c
  7061  00F896  0EFC               	movlw	high _dpowers
  7062  00F898  20F4               	addwfc	prodh,w,c
  7063  00F89A  6EF7               	movwf	tblptrh,c
  7064  00F89C                     	if	0	;There are less than 3 active tblptr bytes
  7065  00F89C                     	endif
  7066  00F89C  0009               	tblrd		*+
  7067  00F89E  CFF5 F005          	movff	tablat,___llmod@divisor
  7068  00F8A2  0009               	tblrd		*+
  7069  00F8A4  CFF5 F006          	movff	tablat,___llmod@divisor+1
  7070  00F8A8  0009               	tblrd		*+
  7071  00F8AA  CFF5 F007          	movff	tablat,___llmod@divisor+2
  7072  00F8AE  000A               	tblrd		*-
  7073  00F8B0  CFF5 F008          	movff	tablat,___llmod@divisor+3
  7074  00F8B4  ECFF  F062         	call	___llmod	;wreg free
  7075  00F8B8  C001  F050         	movff	?___llmod,printf@val
  7076  00F8BC  C002  F051         	movff	?___llmod+1,printf@val+1
  7077  00F8C0  C003  F052         	movff	?___llmod+2,printf@val+2
  7078  00F8C4  C004  F053         	movff	?___llmod+3,printf@val+3
  7079  00F8C8  D000               	goto	l4382
  7080  00F8CA                     l4382:
  7081  00F8CA  0663               	decf	printf@c,f,c
  7082  00F8CC  2863               	incf	printf@c,w,c
  7083  00F8CE  B4D8               	btfsc	status,2,c
  7084  00F8D0  D009               	goto	l4388
  7085  00F8D2  D790               	goto	l4376
  7086                           
  7087                           ;doprnt.c: 1233: }
  7088                           ;doprnt.c: 1235: while(prec) {
  7089  00F8D4  D007               	goto	l4388
  7090  00F8D6                     l4384:
  7091                           
  7092                           ;doprnt.c: 1236: (putch('0') );
  7093  00F8D6  0E30               	movlw	48
  7094  00F8D8  EC7E  F05F         	call	_putch
  7095                           
  7096                           ;doprnt.c: 1237: prec--;
  7097  00F8DC  0661               	decf	printf@prec,f,c
  7098  00F8DE  A0D8               	btfss	status,0,c
  7099  00F8E0  0662               	decf	printf@prec+1,f,c
  7100  00F8E2  D000               	goto	l4388
  7101  00F8E4                     l4388:
  7102  00F8E4  5061               	movf	printf@prec,w,c
  7103  00F8E6  1062               	iorwf	printf@prec+1,w,c
  7104  00F8E8  B4D8               	btfsc	status,2,c
  7105  00F8EA  D0AB               	goto	l4446
  7106  00F8EC  D7F4               	goto	l4384
  7107                           
  7108                           ;doprnt.c: 1238: }
  7109                           ;doprnt.c: 1245: continue;
  7110  00F8EE  D0A9               	goto	l4446
  7111  00F8F0                     l4390:
  7112                           
  7113                           ;doprnt.c: 1246: }
  7114                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7115  00F8F0  5061               	movf	printf@prec,w,c
  7116  00F8F2  1062               	iorwf	printf@prec+1,w,c
  7117  00F8F4  A4D8               	btfss	status,2,c
  7118  00F8F6  D009               	goto	l4396
  7119  00F8F8  5050               	movf	printf@val,w,c
  7120  00F8FA  1051               	iorwf	printf@val+1,w,c
  7121  00F8FC  1052               	iorwf	printf@val+2,w,c
  7122  00F8FE  1053               	iorwf	printf@val+3,w,c
  7123  00F900  A4D8               	btfss	status,2,c
  7124  00F902  D003               	goto	l4396
  7125                           
  7126                           ;doprnt.c: 1291: prec++;
  7127  00F904  4A61               	infsnz	printf@prec,f,c
  7128  00F906  2A62               	incf	printf@prec+1,f,c
  7129  00F908  D000               	goto	l4396
  7130  00F90A                     l4396:
  7131                           
  7132                           ;doprnt.c: 1339: if(c < prec)
  7133  00F90A  0E80               	movlw	128
  7134  00F90C  BE63               	btfsc	printf@c,7,c
  7135  00F90E  0E7F               	movlw	127
  7136  00F910  6E45               	movwf	??_printf& (0+255),c
  7137  00F912  5061               	movf	printf@prec,w,c
  7138  00F914  5C63               	subwf	printf@c,w,c
  7139  00F916  5062               	movf	printf@prec+1,w,c
  7140  00F918  0A80               	xorlw	128
  7141  00F91A  5845               	subwfb	??_printf& (0+255),w,c
  7142  00F91C  B0D8               	btfsc	status,0,c
  7143  00F91E  D003               	goto	l4400
  7144                           
  7145                           ;doprnt.c: 1340: c = prec;
  7146  00F920  C061  F063         	movff	printf@prec,printf@c
  7147  00F924  D011               	goto	l4404
  7148  00F926                     l4400:
  7149                           
  7150                           ;doprnt.c: 1341: else if(prec < c)
  7151  00F926  5062               	movf	printf@prec+1,w,c
  7152  00F928  0A80               	xorlw	128
  7153  00F92A  6E45               	movwf	??_printf& (0+255),c
  7154  00F92C  5063               	movf	printf@c,w,c
  7155  00F92E  5C61               	subwf	printf@prec,w,c
  7156  00F930  0E80               	movlw	128
  7157  00F932  BE63               	btfsc	printf@c,7,c
  7158  00F934  0E7F               	movlw	127
  7159  00F936  5845               	subwfb	??_printf& (0+255),w,c
  7160  00F938  B0D8               	btfsc	status,0,c
  7161  00F93A  D006               	goto	l4404
  7162                           
  7163                           ;doprnt.c: 1342: prec = c;
  7164  00F93C  5063               	movf	printf@c,w,c
  7165  00F93E  6E61               	movwf	printf@prec,c
  7166  00F940  6A62               	clrf	printf@prec+1,c
  7167  00F942  BE61               	btfsc	printf@prec,7,c
  7168  00F944  0662               	decf	printf@prec+1,f,c
  7169  00F946  D000               	goto	l4404
  7170  00F948                     l4404:
  7171                           
  7172                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7173  00F948  505C               	movf	printf@width,w,c
  7174  00F94A  105D               	iorwf	printf@width+1,w,c
  7175  00F94C  B4D8               	btfsc	status,2,c
  7176  00F94E  D00E               	goto	l4410
  7177  00F950  0E03               	movlw	3
  7178  00F952  145A               	andwf	printf@flag,w,c
  7179  00F954  6E45               	movwf	??_printf& (0+255),c
  7180  00F956  0E00               	movlw	0
  7181  00F958  145B               	andwf	printf@flag+1,w,c
  7182  00F95A  6E46               	movwf	(??_printf+1)& (0+255),c
  7183  00F95C  5045               	movf	??_printf,w,c
  7184  00F95E  1046               	iorwf	??_printf+1,w,c
  7185  00F960  B4D8               	btfsc	status,2,c
  7186  00F962  D004               	goto	l4410
  7187                           
  7188                           ;doprnt.c: 1346: width--;
  7189  00F964  065C               	decf	printf@width,f,c
  7190  00F966  A0D8               	btfss	status,0,c
  7191  00F968  065D               	decf	printf@width+1,f,c
  7192  00F96A  D000               	goto	l4410
  7193  00F96C                     l4410:
  7194                           
  7195                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7196  00F96C  AC5B               	btfss	printf@flag+1,6,c
  7197  00F96E  D014               	goto	l4418
  7198                           
  7199                           ;doprnt.c: 1349: if(width > prec)
  7200  00F970  505C               	movf	printf@width,w,c
  7201  00F972  5C61               	subwf	printf@prec,w,c
  7202  00F974  5062               	movf	printf@prec+1,w,c
  7203  00F976  0A80               	xorlw	128
  7204  00F978  6E45               	movwf	??_printf& (0+255),c
  7205  00F97A  505D               	movf	printf@width+1,w,c
  7206  00F97C  0A80               	xorlw	128
  7207  00F97E  5845               	subwfb	??_printf& (0+255),w,c
  7208  00F980  B0D8               	btfsc	status,0,c
  7209  00F982  D005               	goto	l4416
  7210                           
  7211                           ;doprnt.c: 1350: width -= prec;
  7212  00F984  5061               	movf	printf@prec,w,c
  7213  00F986  5E5C               	subwf	printf@width,f,c
  7214  00F988  5062               	movf	printf@prec+1,w,c
  7215  00F98A  5A5D               	subwfb	printf@width+1,f,c
  7216  00F98C  D005               	goto	l4418
  7217  00F98E                     l4416:
  7218                           
  7219                           ;doprnt.c: 1351: else
  7220                           ;doprnt.c: 1352: width = 0;
  7221  00F98E  0E00               	movlw	0
  7222  00F990  6E5D               	movwf	printf@width+1,c
  7223  00F992  0E00               	movlw	0
  7224  00F994  6E5C               	movwf	printf@width,c
  7225  00F996  D000               	goto	l4418
  7226  00F998                     l4418:
  7227                           
  7228                           ;doprnt.c: 1353: }
  7229                           ;doprnt.c: 1381: if(width > c)
  7230  00F998  0E80               	movlw	128
  7231  00F99A  BE63               	btfsc	printf@c,7,c
  7232  00F99C  0E7F               	movlw	127
  7233  00F99E  6E45               	movwf	??_printf& (0+255),c
  7234  00F9A0  505C               	movf	printf@width,w,c
  7235  00F9A2  5C63               	subwf	printf@c,w,c
  7236  00F9A4  505D               	movf	printf@width+1,w,c
  7237  00F9A6  0A80               	xorlw	128
  7238  00F9A8  5845               	subwfb	??_printf& (0+255),w,c
  7239  00F9AA  B0D8               	btfsc	status,0,c
  7240  00F9AC  D007               	goto	l4422
  7241                           
  7242                           ;doprnt.c: 1382: width -= c;
  7243  00F9AE  5063               	movf	printf@c,w,c
  7244  00F9B0  5E5C               	subwf	printf@width,f,c
  7245  00F9B2  0E00               	movlw	0
  7246  00F9B4  BE63               	btfsc	printf@c,7,c
  7247  00F9B6  0EFF               	movlw	255
  7248  00F9B8  5A5D               	subwfb	printf@width+1,f,c
  7249  00F9BA  D005               	goto	l4424
  7250  00F9BC                     l4422:
  7251                           
  7252                           ;doprnt.c: 1383: else
  7253                           ;doprnt.c: 1384: width = 0;
  7254  00F9BC  0E00               	movlw	0
  7255  00F9BE  6E5D               	movwf	printf@width+1,c
  7256  00F9C0  0E00               	movlw	0
  7257  00F9C2  6E5C               	movwf	printf@width,c
  7258  00F9C4  D000               	goto	l4424
  7259  00F9C6                     l4424:
  7260                           
  7261                           ;doprnt.c: 1387: if(flag & 0x04) {
  7262  00F9C6  A45A               	btfss	printf@flag,2,c
  7263  00F9C8  D01E               	goto	l4436
  7264                           
  7265                           ;doprnt.c: 1392: if(flag & 0x03)
  7266  00F9CA  0E03               	movlw	3
  7267  00F9CC  145A               	andwf	printf@flag,w,c
  7268  00F9CE  6E45               	movwf	??_printf& (0+255),c
  7269  00F9D0  0E00               	movlw	0
  7270  00F9D2  145B               	andwf	printf@flag+1,w,c
  7271  00F9D4  6E46               	movwf	(??_printf+1)& (0+255),c
  7272  00F9D6  5045               	movf	??_printf,w,c
  7273  00F9D8  1046               	iorwf	??_printf+1,w,c
  7274  00F9DA  B4D8               	btfsc	status,2,c
  7275  00F9DC  D004               	goto	l4430
  7276                           
  7277                           ;doprnt.c: 1393: (putch('-') );
  7278  00F9DE  0E2D               	movlw	45
  7279  00F9E0  EC7E  F05F         	call	_putch
  7280  00F9E4  D000               	goto	l4430
  7281  00F9E6                     l4430:
  7282                           
  7283                           ;doprnt.c: 1415: if(width)
  7284  00F9E6  505C               	movf	printf@width,w,c
  7285  00F9E8  105D               	iorwf	printf@width+1,w,c
  7286  00F9EA  B4D8               	btfsc	status,2,c
  7287  00F9EC  D02A               	goto	l4446
  7288  00F9EE                     l4432:
  7289                           
  7290                           ;doprnt.c: 1417: (putch('0') );
  7291  00F9EE  0E30               	movlw	48
  7292  00F9F0  EC7E  F05F         	call	_putch
  7293                           
  7294                           ;doprnt.c: 1418: while(--width);
  7295  00F9F4  065C               	decf	printf@width,f,c
  7296  00F9F6  A0D8               	btfss	status,0,c
  7297  00F9F8  065D               	decf	printf@width+1,f,c
  7298  00F9FA  505C               	movf	printf@width,w,c
  7299  00F9FC  105D               	iorwf	printf@width+1,w,c
  7300  00F9FE  B4D8               	btfsc	status,2,c
  7301  00FA00  D020               	goto	l4446
  7302  00FA02  D7F5               	goto	l4432
  7303                           
  7304                           ;doprnt.c: 1420: } else
  7305  00FA04  D01E               	goto	l4446
  7306  00FA06                     l4436:
  7307                           
  7308                           ;doprnt.c: 1422: {
  7309                           ;doprnt.c: 1424: if(width
  7310                           ;doprnt.c: 1428: )
  7311  00FA06  505C               	movf	printf@width,w,c
  7312  00FA08  105D               	iorwf	printf@width+1,w,c
  7313  00FA0A  B4D8               	btfsc	status,2,c
  7314  00FA0C  D00C               	goto	l4442
  7315  00FA0E                     l4438:
  7316                           
  7317                           ;doprnt.c: 1430: (putch(' ') );
  7318  00FA0E  0E20               	movlw	32
  7319  00FA10  EC7E  F05F         	call	_putch
  7320                           
  7321                           ;doprnt.c: 1431: while(--width);
  7322  00FA14  065C               	decf	printf@width,f,c
  7323  00FA16  A0D8               	btfss	status,0,c
  7324  00FA18  065D               	decf	printf@width+1,f,c
  7325  00FA1A  505C               	movf	printf@width,w,c
  7326  00FA1C  105D               	iorwf	printf@width+1,w,c
  7327  00FA1E  B4D8               	btfsc	status,2,c
  7328  00FA20  D002               	goto	l4442
  7329  00FA22  D7F5               	goto	l4438
  7330  00FA24  D000               	goto	l4442
  7331  00FA26                     l4442:
  7332                           
  7333                           ;doprnt.c: 1438: if(flag & 0x03)
  7334  00FA26  0E03               	movlw	3
  7335  00FA28  145A               	andwf	printf@flag,w,c
  7336  00FA2A  6E45               	movwf	??_printf& (0+255),c
  7337  00FA2C  0E00               	movlw	0
  7338  00FA2E  145B               	andwf	printf@flag+1,w,c
  7339  00FA30  6E46               	movwf	(??_printf+1)& (0+255),c
  7340  00FA32  5045               	movf	??_printf,w,c
  7341  00FA34  1046               	iorwf	??_printf+1,w,c
  7342  00FA36  B4D8               	btfsc	status,2,c
  7343  00FA38  D004               	goto	l4446
  7344                           
  7345                           ;doprnt.c: 1439: (putch('-') );
  7346  00FA3A  0E2D               	movlw	45
  7347  00FA3C  EC7E  F05F         	call	_putch
  7348  00FA40  D000               	goto	l4446
  7349  00FA42                     l4446:
  7350  00FA42  C040  FFF6         	movff	printf@f,tblptrl
  7351  00FA46  C041  FFF7         	movff	printf@f+1,tblptrh
  7352  00FA4A  4A40               	infsnz	printf@f,f,c
  7353  00FA4C  2A41               	incf	printf@f+1,f,c
  7354  00FA4E                     	if	0	;tblptru may be non-zero
  7355  00FA4E                     	endif
  7356  00FA4E                     	if	0	;tblptru may be non-zero
  7357  00FA4E                     	endif
  7358  00FA4E  0008               	tblrd		*
  7359  00FA50  CFF5 F063          	movff	tablat,printf@c
  7360  00FA54  5063               	movf	printf@c,w,c
  7361  00FA56  B4D8               	btfsc	status,2,c
  7362  00FA58  D003               	goto	l650
  7363  00FA5A  EF9B  F078         	goto	l4184
  7364  00FA5E  D000               	goto	l650
  7365  00FA60                     l650:
  7366  00FA60  0012               	return		;funcret
  7367  00FA62                     __end_of_printf:
  7368                           	opt stack 0
  7369                           tblptru	equ	0xFF8
  7370                           tblptrh	equ	0xFF7
  7371                           tblptrl	equ	0xFF6
  7372                           tablat	equ	0xFF5
  7373                           prodh	equ	0xFF4
  7374                           prodl	equ	0xFF3
  7375                           intcon2	equ	0xFF1
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           postdec1	equ	0xFE5
  7379                           fsr1l	equ	0xFE1
  7380                           indf2	equ	0xFDF
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _scale *****************
  7388 ;; Defined at:
  7389 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  scl             1    wreg     char 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  scl             1   41[COMRAM] char 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  3   35[COMRAM] char 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7403 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;Total ram usage:        7 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    2
  7410 ;; This function calls:
  7411 ;;		___awdiv
  7412 ;;		___awmod
  7413 ;;		___ftmul
  7414 ;;		___wmul
  7415 ;; This function is called by:
  7416 ;;		_printf
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text24
  7421  00E62C                     __ptext24:
  7422                           	opt stack 0
  7423  00E62C                     _scale:
  7424                           	opt stack 23
  7425                           
  7426                           ;incstack = 0
  7427                           ;scale@scl stored from wreg
  7428  00E62C  6E2A               	movwf	scale@scl,c
  7429                           
  7430                           ;doprnt.c: 428: if(scl < 0) {
  7431  00E62E  AE2A               	btfss	scale@scl,7,c
  7432  00E630  D0EF               	goto	l3836
  7433                           
  7434                           ;doprnt.c: 429: scl = -scl;
  7435  00E632  6C2A               	negf	scale@scl,c
  7436                           
  7437                           ;doprnt.c: 430: if(scl>=110)
  7438  00E634  502A               	movf	scale@scl,w,c
  7439  00E636  0A80               	xorlw	128
  7440  00E638  0F12               	addlw	-238
  7441  00E63A  A0D8               	btfss	status,0,c
  7442  00E63C  D08D               	goto	l3826
  7443                           
  7444                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7445  00E63E  0E00               	movlw	0
  7446  00E640  6E12               	movwf	___wmul@multiplicand+1,c
  7447  00E642  0E03               	movlw	3
  7448  00E644  6E11               	movwf	___wmul@multiplicand,c
  7449  00E646  0E00               	movlw	0
  7450  00E648  6E0A               	movwf	___awdiv@divisor+1,c
  7451  00E64A  0E0A               	movlw	10
  7452  00E64C  6E09               	movwf	___awdiv@divisor,c
  7453  00E64E  0E00               	movlw	0
  7454  00E650  6E04               	movwf	___awmod@divisor+1,c
  7455  00E652  0E64               	movlw	100
  7456  00E654  6E03               	movwf	___awmod@divisor,c
  7457  00E656  502A               	movf	scale@scl,w,c
  7458  00E658  6E01               	movwf	___awmod@dividend,c
  7459  00E65A  6A02               	clrf	___awmod@dividend+1,c
  7460  00E65C  BE01               	btfsc	___awmod@dividend,7,c
  7461  00E65E  0602               	decf	___awmod@dividend+1,f,c
  7462  00E660  EC6F  F063         	call	___awmod	;wreg free
  7463  00E664  C001  F007         	movff	?___awmod,___awdiv@dividend
  7464  00E668  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7465  00E66C  ECBF  F064         	call	___awdiv	;wreg free
  7466  00E670  0E09               	movlw	9
  7467  00E672  2407               	addwf	?___awdiv,w,c
  7468  00E674  6E0F               	movwf	___wmul@multiplier,c
  7469  00E676  0E00               	movlw	0
  7470  00E678  2008               	addwfc	?___awdiv+1,w,c
  7471  00E67A  6E10               	movwf	___wmul@multiplier+1,c
  7472  00E67C  EC29  F060         	call	___wmul	;wreg free
  7473  00E680  0E66               	movlw	low __npowers_
  7474  00E682  240F               	addwf	?___wmul,w,c
  7475  00E684  6EF6               	movwf	tblptrl,c
  7476  00E686  0EFC               	movlw	high __npowers_
  7477  00E688  2010               	addwfc	?___wmul+1,w,c
  7478  00E68A  6EF7               	movwf	tblptrh,c
  7479  00E68C                     	if	0	;There are less than 3 active tblptr bytes
  7480  00E68C                     	endif
  7481  00E68C  0009               	tblrd		*+
  7482  00E68E  CFF5 F018          	movff	tablat,___ftmul@f2
  7483  00E692  0009               	tblrd		*+
  7484  00E694  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7485  00E698  000A               	tblrd		*-
  7486  00E69A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7487  00E69E  0E00               	movlw	0
  7488  00E6A0  6E0A               	movwf	___awdiv@divisor+1,c
  7489  00E6A2  0E64               	movlw	100
  7490  00E6A4  6E09               	movwf	___awdiv@divisor,c
  7491  00E6A6  502A               	movf	scale@scl,w,c
  7492  00E6A8  6E07               	movwf	___awdiv@dividend,c
  7493  00E6AA  6A08               	clrf	___awdiv@dividend+1,c
  7494  00E6AC  BE07               	btfsc	___awdiv@dividend,7,c
  7495  00E6AE  0608               	decf	___awdiv@dividend+1,f,c
  7496  00E6B0  ECBF  F064         	call	___awdiv	;wreg free
  7497  00E6B4  0E12               	movlw	18
  7498  00E6B6  2407               	addwf	?___awdiv,w,c
  7499  00E6B8  6E0F               	movwf	___wmul@multiplier,c
  7500  00E6BA  0E00               	movlw	0
  7501  00E6BC  2008               	addwfc	?___awdiv+1,w,c
  7502  00E6BE  6E10               	movwf	___wmul@multiplier+1,c
  7503  00E6C0  0E00               	movlw	0
  7504  00E6C2  6E12               	movwf	___wmul@multiplicand+1,c
  7505  00E6C4  0E03               	movlw	3
  7506  00E6C6  6E11               	movwf	___wmul@multiplicand,c
  7507  00E6C8  EC29  F060         	call	___wmul	;wreg free
  7508  00E6CC  0E66               	movlw	low __npowers_
  7509  00E6CE  240F               	addwf	?___wmul,w,c
  7510  00E6D0  6EF6               	movwf	tblptrl,c
  7511  00E6D2  0EFC               	movlw	high __npowers_
  7512  00E6D4  2010               	addwfc	?___wmul+1,w,c
  7513  00E6D6  6EF7               	movwf	tblptrh,c
  7514  00E6D8                     	if	0	;There are less than 3 active tblptr bytes
  7515  00E6D8                     	endif
  7516  00E6D8  0009               	tblrd		*+
  7517  00E6DA  CFF5 F015          	movff	tablat,___ftmul@f1
  7518  00E6DE  0009               	tblrd		*+
  7519  00E6E0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7520  00E6E4  000A               	tblrd		*-
  7521  00E6E6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7522  00E6EA  EC6E  F069         	call	___ftmul	;wreg free
  7523  00E6EE  C015  F027         	movff	?___ftmul,_scale$2385
  7524  00E6F2  C016  F028         	movff	?___ftmul+1,_scale$2385+1
  7525  00E6F6  C017  F029         	movff	?___ftmul+2,_scale$2385+2
  7526                           
  7527                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7528  00E6FA  C027  F015         	movff	_scale$2385,___ftmul@f1
  7529  00E6FE  C028  F016         	movff	_scale$2385+1,___ftmul@f1+1
  7530  00E702  C029  F017         	movff	_scale$2385+2,___ftmul@f1+2
  7531  00E706  0E00               	movlw	0
  7532  00E708  6E12               	movwf	___wmul@multiplicand+1,c
  7533  00E70A  0E03               	movlw	3
  7534  00E70C  6E11               	movwf	___wmul@multiplicand,c
  7535  00E70E  0E00               	movlw	0
  7536  00E710  6E04               	movwf	___awmod@divisor+1,c
  7537  00E712  0E0A               	movlw	10
  7538  00E714  6E03               	movwf	___awmod@divisor,c
  7539  00E716  502A               	movf	scale@scl,w,c
  7540  00E718  6E01               	movwf	___awmod@dividend,c
  7541  00E71A  6A02               	clrf	___awmod@dividend+1,c
  7542  00E71C  BE01               	btfsc	___awmod@dividend,7,c
  7543  00E71E  0602               	decf	___awmod@dividend+1,f,c
  7544  00E720  EC6F  F063         	call	___awmod	;wreg free
  7545  00E724  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7546  00E728  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7547  00E72C  EC29  F060         	call	___wmul	;wreg free
  7548  00E730  0E66               	movlw	low __npowers_
  7549  00E732  240F               	addwf	?___wmul,w,c
  7550  00E734  6EF6               	movwf	tblptrl,c
  7551  00E736  0EFC               	movlw	high __npowers_
  7552  00E738  2010               	addwfc	?___wmul+1,w,c
  7553  00E73A  6EF7               	movwf	tblptrh,c
  7554  00E73C                     	if	0	;There are less than 3 active tblptr bytes
  7555  00E73C                     	endif
  7556  00E73C  0009               	tblrd		*+
  7557  00E73E  CFF5 F018          	movff	tablat,___ftmul@f2
  7558  00E742  0009               	tblrd		*+
  7559  00E744  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7560  00E748  000A               	tblrd		*-
  7561  00E74A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7562  00E74E  EC6E  F069         	call	___ftmul	;wreg free
  7563  00E752  D141               	goto	L11
  7564  00E754  D15A               	goto	l549
  7565  00E756  D054               	goto	l3832
  7566  00E758                     l3826:
  7567                           
  7568                           ;doprnt.c: 432: else if(scl > 10)
  7569  00E758  502A               	movf	scale@scl,w,c
  7570  00E75A  0A80               	xorlw	128
  7571  00E75C  0F75               	addlw	-139
  7572  00E75E  A0D8               	btfss	status,0,c
  7573  00E760  D04F               	goto	l3832
  7574                           
  7575                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7576  00E762  0E00               	movlw	0
  7577  00E764  6E0A               	movwf	___awdiv@divisor+1,c
  7578  00E766  0E0A               	movlw	10
  7579  00E768  6E09               	movwf	___awdiv@divisor,c
  7580  00E76A  502A               	movf	scale@scl,w,c
  7581  00E76C  6E07               	movwf	___awdiv@dividend,c
  7582  00E76E  6A08               	clrf	___awdiv@dividend+1,c
  7583  00E770  BE07               	btfsc	___awdiv@dividend,7,c
  7584  00E772  0608               	decf	___awdiv@dividend+1,f,c
  7585  00E774  ECBF  F064         	call	___awdiv	;wreg free
  7586  00E778  0E09               	movlw	9
  7587  00E77A  2407               	addwf	?___awdiv,w,c
  7588  00E77C  6E0F               	movwf	___wmul@multiplier,c
  7589  00E77E  0E00               	movlw	0
  7590  00E780  2008               	addwfc	?___awdiv+1,w,c
  7591  00E782  6E10               	movwf	___wmul@multiplier+1,c
  7592  00E784  0E00               	movlw	0
  7593  00E786  6E12               	movwf	___wmul@multiplicand+1,c
  7594  00E788  0E03               	movlw	3
  7595  00E78A  6E11               	movwf	___wmul@multiplicand,c
  7596  00E78C  EC29  F060         	call	___wmul	;wreg free
  7597  00E790  0E66               	movlw	low __npowers_
  7598  00E792  240F               	addwf	?___wmul,w,c
  7599  00E794  6EF6               	movwf	tblptrl,c
  7600  00E796  0EFC               	movlw	high __npowers_
  7601  00E798  2010               	addwfc	?___wmul+1,w,c
  7602  00E79A  6EF7               	movwf	tblptrh,c
  7603  00E79C                     	if	0	;There are less than 3 active tblptr bytes
  7604  00E79C                     	endif
  7605  00E79C  0009               	tblrd		*+
  7606  00E79E  CFF5 F015          	movff	tablat,___ftmul@f1
  7607  00E7A2  0009               	tblrd		*+
  7608  00E7A4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7609  00E7A8  000A               	tblrd		*-
  7610  00E7AA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7611  00E7AE  0E00               	movlw	0
  7612  00E7B0  6E12               	movwf	___wmul@multiplicand+1,c
  7613  00E7B2  0E03               	movlw	3
  7614  00E7B4  6E11               	movwf	___wmul@multiplicand,c
  7615  00E7B6  0E00               	movlw	0
  7616  00E7B8  6E04               	movwf	___awmod@divisor+1,c
  7617  00E7BA  0E0A               	movlw	10
  7618  00E7BC  6E03               	movwf	___awmod@divisor,c
  7619  00E7BE  502A               	movf	scale@scl,w,c
  7620  00E7C0  6E01               	movwf	___awmod@dividend,c
  7621  00E7C2  6A02               	clrf	___awmod@dividend+1,c
  7622  00E7C4  BE01               	btfsc	___awmod@dividend,7,c
  7623  00E7C6  0602               	decf	___awmod@dividend+1,f,c
  7624  00E7C8  EC6F  F063         	call	___awmod	;wreg free
  7625  00E7CC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7626  00E7D0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7627  00E7D4  EC29  F060         	call	___wmul	;wreg free
  7628  00E7D8  0E66               	movlw	low __npowers_
  7629  00E7DA  240F               	addwf	?___wmul,w,c
  7630  00E7DC  6EF6               	movwf	tblptrl,c
  7631  00E7DE  0EFC               	movlw	high __npowers_
  7632  00E7E0  2010               	addwfc	?___wmul+1,w,c
  7633  00E7E2  6EF7               	movwf	tblptrh,c
  7634  00E7E4                     	if	0	;There are less than 3 active tblptr bytes
  7635  00E7E4                     	endif
  7636  00E7E4  0009               	tblrd		*+
  7637  00E7E6  CFF5 F018          	movff	tablat,___ftmul@f2
  7638  00E7EA  0009               	tblrd		*+
  7639  00E7EC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7640  00E7F0  000A               	tblrd		*-
  7641  00E7F2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7642  00E7F6  EC6E  F069         	call	___ftmul	;wreg free
  7643  00E7FA  D0ED               	goto	L11
  7644  00E7FC  D106               	goto	l549
  7645  00E7FE  D000               	goto	l3832
  7646  00E800                     l3832:
  7647                           
  7648                           ;doprnt.c: 434: return _npowers_[scl];
  7649  00E800  502A               	movf	scale@scl,w,c
  7650  00E802  0D03               	mullw	3
  7651  00E804  0E66               	movlw	low __npowers_
  7652  00E806  24F3               	addwf	prodl,w,c
  7653  00E808  6EF6               	movwf	tblptrl,c
  7654  00E80A  0EFC               	movlw	high __npowers_
  7655  00E80C  D0F2               	goto	L10
  7656  00E80E  D0FD               	goto	l549
  7657  00E810                     l3836:
  7658                           
  7659                           ;doprnt.c: 435: }
  7660                           ;doprnt.c: 436: if(scl>=110)
  7661  00E810  502A               	movf	scale@scl,w,c
  7662  00E812  0A80               	xorlw	128
  7663  00E814  0F12               	addlw	-238
  7664  00E816  A0D8               	btfss	status,0,c
  7665  00E818  D08D               	goto	l3844
  7666                           
  7667                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7668  00E81A  0E00               	movlw	0
  7669  00E81C  6E12               	movwf	___wmul@multiplicand+1,c
  7670  00E81E  0E03               	movlw	3
  7671  00E820  6E11               	movwf	___wmul@multiplicand,c
  7672  00E822  0E00               	movlw	0
  7673  00E824  6E0A               	movwf	___awdiv@divisor+1,c
  7674  00E826  0E0A               	movlw	10
  7675  00E828  6E09               	movwf	___awdiv@divisor,c
  7676  00E82A  0E00               	movlw	0
  7677  00E82C  6E04               	movwf	___awmod@divisor+1,c
  7678  00E82E  0E64               	movlw	100
  7679  00E830  6E03               	movwf	___awmod@divisor,c
  7680  00E832  502A               	movf	scale@scl,w,c
  7681  00E834  6E01               	movwf	___awmod@dividend,c
  7682  00E836  6A02               	clrf	___awmod@dividend+1,c
  7683  00E838  BE01               	btfsc	___awmod@dividend,7,c
  7684  00E83A  0602               	decf	___awmod@dividend+1,f,c
  7685  00E83C  EC6F  F063         	call	___awmod	;wreg free
  7686  00E840  C001  F007         	movff	?___awmod,___awdiv@dividend
  7687  00E844  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7688  00E848  ECBF  F064         	call	___awdiv	;wreg free
  7689  00E84C  0E09               	movlw	9
  7690  00E84E  2407               	addwf	?___awdiv,w,c
  7691  00E850  6E0F               	movwf	___wmul@multiplier,c
  7692  00E852  0E00               	movlw	0
  7693  00E854  2008               	addwfc	?___awdiv+1,w,c
  7694  00E856  6E10               	movwf	___wmul@multiplier+1,c
  7695  00E858  EC29  F060         	call	___wmul	;wreg free
  7696  00E85C  0E8D               	movlw	low __powers_
  7697  00E85E  240F               	addwf	?___wmul,w,c
  7698  00E860  6EF6               	movwf	tblptrl,c
  7699  00E862  0EFC               	movlw	high __powers_
  7700  00E864  2010               	addwfc	?___wmul+1,w,c
  7701  00E866  6EF7               	movwf	tblptrh,c
  7702  00E868                     	if	0	;There are less than 3 active tblptr bytes
  7703  00E868                     	endif
  7704  00E868  0009               	tblrd		*+
  7705  00E86A  CFF5 F018          	movff	tablat,___ftmul@f2
  7706  00E86E  0009               	tblrd		*+
  7707  00E870  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7708  00E874  000A               	tblrd		*-
  7709  00E876  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7710  00E87A  0E00               	movlw	0
  7711  00E87C  6E0A               	movwf	___awdiv@divisor+1,c
  7712  00E87E  0E64               	movlw	100
  7713  00E880  6E09               	movwf	___awdiv@divisor,c
  7714  00E882  502A               	movf	scale@scl,w,c
  7715  00E884  6E07               	movwf	___awdiv@dividend,c
  7716  00E886  6A08               	clrf	___awdiv@dividend+1,c
  7717  00E888  BE07               	btfsc	___awdiv@dividend,7,c
  7718  00E88A  0608               	decf	___awdiv@dividend+1,f,c
  7719  00E88C  ECBF  F064         	call	___awdiv	;wreg free
  7720  00E890  0E12               	movlw	18
  7721  00E892  2407               	addwf	?___awdiv,w,c
  7722  00E894  6E0F               	movwf	___wmul@multiplier,c
  7723  00E896  0E00               	movlw	0
  7724  00E898  2008               	addwfc	?___awdiv+1,w,c
  7725  00E89A  6E10               	movwf	___wmul@multiplier+1,c
  7726  00E89C  0E00               	movlw	0
  7727  00E89E  6E12               	movwf	___wmul@multiplicand+1,c
  7728  00E8A0  0E03               	movlw	3
  7729  00E8A2  6E11               	movwf	___wmul@multiplicand,c
  7730  00E8A4  EC29  F060         	call	___wmul	;wreg free
  7731  00E8A8  0E8D               	movlw	low __powers_
  7732  00E8AA  240F               	addwf	?___wmul,w,c
  7733  00E8AC  6EF6               	movwf	tblptrl,c
  7734  00E8AE  0EFC               	movlw	high __powers_
  7735  00E8B0  2010               	addwfc	?___wmul+1,w,c
  7736  00E8B2  6EF7               	movwf	tblptrh,c
  7737  00E8B4                     	if	0	;There are less than 3 active tblptr bytes
  7738  00E8B4                     	endif
  7739  00E8B4  0009               	tblrd		*+
  7740  00E8B6  CFF5 F015          	movff	tablat,___ftmul@f1
  7741  00E8BA  0009               	tblrd		*+
  7742  00E8BC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7743  00E8C0  000A               	tblrd		*-
  7744  00E8C2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7745  00E8C6  EC6E  F069         	call	___ftmul	;wreg free
  7746  00E8CA  C015  F027         	movff	?___ftmul,_scale$2385
  7747  00E8CE  C016  F028         	movff	?___ftmul+1,_scale$2385+1
  7748  00E8D2  C017  F029         	movff	?___ftmul+2,_scale$2385+2
  7749                           
  7750                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7751  00E8D6  C027  F015         	movff	_scale$2385,___ftmul@f1
  7752  00E8DA  C028  F016         	movff	_scale$2385+1,___ftmul@f1+1
  7753  00E8DE  C029  F017         	movff	_scale$2385+2,___ftmul@f1+2
  7754  00E8E2  0E00               	movlw	0
  7755  00E8E4  6E12               	movwf	___wmul@multiplicand+1,c
  7756  00E8E6  0E03               	movlw	3
  7757  00E8E8  6E11               	movwf	___wmul@multiplicand,c
  7758  00E8EA  0E00               	movlw	0
  7759  00E8EC  6E04               	movwf	___awmod@divisor+1,c
  7760  00E8EE  0E0A               	movlw	10
  7761  00E8F0  6E03               	movwf	___awmod@divisor,c
  7762  00E8F2  502A               	movf	scale@scl,w,c
  7763  00E8F4  6E01               	movwf	___awmod@dividend,c
  7764  00E8F6  6A02               	clrf	___awmod@dividend+1,c
  7765  00E8F8  BE01               	btfsc	___awmod@dividend,7,c
  7766  00E8FA  0602               	decf	___awmod@dividend+1,f,c
  7767  00E8FC  EC6F  F063         	call	___awmod	;wreg free
  7768  00E900  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7769  00E904  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7770  00E908  EC29  F060         	call	___wmul	;wreg free
  7771  00E90C  0E8D               	movlw	low __powers_
  7772  00E90E  240F               	addwf	?___wmul,w,c
  7773  00E910  6EF6               	movwf	tblptrl,c
  7774  00E912  0EFC               	movlw	high __powers_
  7775  00E914  2010               	addwfc	?___wmul+1,w,c
  7776  00E916  6EF7               	movwf	tblptrh,c
  7777  00E918                     	if	0	;There are less than 3 active tblptr bytes
  7778  00E918                     	endif
  7779  00E918  0009               	tblrd		*+
  7780  00E91A  CFF5 F018          	movff	tablat,___ftmul@f2
  7781  00E91E  0009               	tblrd		*+
  7782  00E920  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7783  00E924  000A               	tblrd		*-
  7784  00E926  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7785  00E92A  EC6E  F069         	call	___ftmul	;wreg free
  7786  00E92E  D053               	goto	L11
  7787  00E930  D06C               	goto	l549
  7788  00E932  D059               	goto	l3850
  7789  00E934                     l3844:
  7790                           
  7791                           ;doprnt.c: 438: else if(scl > 10)
  7792  00E934  502A               	movf	scale@scl,w,c
  7793  00E936  0A80               	xorlw	128
  7794  00E938  0F75               	addlw	-139
  7795  00E93A  A0D8               	btfss	status,0,c
  7796  00E93C  D054               	goto	l3850
  7797                           
  7798                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7799  00E93E  0E00               	movlw	0
  7800  00E940  6E0A               	movwf	___awdiv@divisor+1,c
  7801  00E942  0E0A               	movlw	10
  7802  00E944  6E09               	movwf	___awdiv@divisor,c
  7803  00E946  502A               	movf	scale@scl,w,c
  7804  00E948  6E07               	movwf	___awdiv@dividend,c
  7805  00E94A  6A08               	clrf	___awdiv@dividend+1,c
  7806  00E94C  BE07               	btfsc	___awdiv@dividend,7,c
  7807  00E94E  0608               	decf	___awdiv@dividend+1,f,c
  7808  00E950  ECBF  F064         	call	___awdiv	;wreg free
  7809  00E954  0E09               	movlw	9
  7810  00E956  2407               	addwf	?___awdiv,w,c
  7811  00E958  6E0F               	movwf	___wmul@multiplier,c
  7812  00E95A  0E00               	movlw	0
  7813  00E95C  2008               	addwfc	?___awdiv+1,w,c
  7814  00E95E  6E10               	movwf	___wmul@multiplier+1,c
  7815  00E960  0E00               	movlw	0
  7816  00E962  6E12               	movwf	___wmul@multiplicand+1,c
  7817  00E964  0E03               	movlw	3
  7818  00E966  6E11               	movwf	___wmul@multiplicand,c
  7819  00E968  EC29  F060         	call	___wmul	;wreg free
  7820  00E96C  0E8D               	movlw	low __powers_
  7821  00E96E  240F               	addwf	?___wmul,w,c
  7822  00E970  6EF6               	movwf	tblptrl,c
  7823  00E972  0EFC               	movlw	high __powers_
  7824  00E974  2010               	addwfc	?___wmul+1,w,c
  7825  00E976  6EF7               	movwf	tblptrh,c
  7826  00E978                     	if	0	;There are less than 3 active tblptr bytes
  7827  00E978                     	endif
  7828  00E978  0009               	tblrd		*+
  7829  00E97A  CFF5 F015          	movff	tablat,___ftmul@f1
  7830  00E97E  0009               	tblrd		*+
  7831  00E980  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7832  00E984  000A               	tblrd		*-
  7833  00E986  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7834  00E98A  0E00               	movlw	0
  7835  00E98C  6E12               	movwf	___wmul@multiplicand+1,c
  7836  00E98E  0E03               	movlw	3
  7837  00E990  6E11               	movwf	___wmul@multiplicand,c
  7838  00E992  0E00               	movlw	0
  7839  00E994  6E04               	movwf	___awmod@divisor+1,c
  7840  00E996  0E0A               	movlw	10
  7841  00E998  6E03               	movwf	___awmod@divisor,c
  7842  00E99A  502A               	movf	scale@scl,w,c
  7843  00E99C  6E01               	movwf	___awmod@dividend,c
  7844  00E99E  6A02               	clrf	___awmod@dividend+1,c
  7845  00E9A0  BE01               	btfsc	___awmod@dividend,7,c
  7846  00E9A2  0602               	decf	___awmod@dividend+1,f,c
  7847  00E9A4  EC6F  F063         	call	___awmod	;wreg free
  7848  00E9A8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7849  00E9AC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7850  00E9B0  EC29  F060         	call	___wmul	;wreg free
  7851  00E9B4  0E8D               	movlw	low __powers_
  7852  00E9B6  240F               	addwf	?___wmul,w,c
  7853  00E9B8  6EF6               	movwf	tblptrl,c
  7854  00E9BA  0EFC               	movlw	high __powers_
  7855  00E9BC  2010               	addwfc	?___wmul+1,w,c
  7856  00E9BE  6EF7               	movwf	tblptrh,c
  7857  00E9C0                     	if	0	;There are less than 3 active tblptr bytes
  7858  00E9C0                     	endif
  7859  00E9C0  0009               	tblrd		*+
  7860  00E9C2  CFF5 F018          	movff	tablat,___ftmul@f2
  7861  00E9C6  0009               	tblrd		*+
  7862  00E9C8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7863  00E9CC  000A               	tblrd		*-
  7864  00E9CE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7865  00E9D2  EC6E  F069         	call	___ftmul	;wreg free
  7866  00E9D6                     L11:
  7867  00E9D6  C015  F024         	movff	?___ftmul,?_scale
  7868  00E9DA  C016  F025         	movff	?___ftmul+1,?_scale+1
  7869  00E9DE  C017  F026         	movff	?___ftmul+2,?_scale+2
  7870  00E9E2  D013               	goto	l549
  7871  00E9E4  D000               	goto	l3850
  7872  00E9E6                     l3850:
  7873                           
  7874                           ;doprnt.c: 440: return _powers_[scl];
  7875  00E9E6  502A               	movf	scale@scl,w,c
  7876  00E9E8  0D03               	mullw	3
  7877  00E9EA  0E8D               	movlw	low __powers_
  7878  00E9EC  24F3               	addwf	prodl,w,c
  7879  00E9EE  6EF6               	movwf	tblptrl,c
  7880  00E9F0  0EFC               	movlw	high __powers_
  7881  00E9F2                     L10:
  7882  00E9F2  20F4               	addwfc	prodh,w,c
  7883  00E9F4  6EF7               	movwf	tblptrh,c
  7884  00E9F6                     	if	0	;There are less than 3 active tblptr bytes
  7885  00E9F6                     	endif
  7886  00E9F6  0009               	tblrd		*+
  7887  00E9F8  CFF5 F024          	movff	tablat,?_scale
  7888  00E9FC  0009               	tblrd		*+
  7889  00E9FE  CFF5 F025          	movff	tablat,?_scale+1
  7890  00EA02  000A               	tblrd		*-
  7891  00EA04  CFF5 F026          	movff	tablat,?_scale+2
  7892  00EA08  D000               	goto	l549
  7893  00EA0A                     l549:
  7894  00EA0A  0012               	return		;funcret
  7895  00EA0C                     __end_of_scale:
  7896                           	opt stack 0
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           intcon2	equ	0xFF1
  7904                           postinc0	equ	0xFEE
  7905                           wreg	equ	0xFE8
  7906                           postdec1	equ	0xFE5
  7907                           fsr1l	equ	0xFE1
  7908                           indf2	equ	0xFDF
  7909                           postinc2	equ	0xFDE
  7910                           postdec2	equ	0xFDD
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915 ;; *************** function _putch *****************
  7916 ;; Defined at:
  7917 ;;		line 285 in file "Lab8p1.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  c               1    wreg     unsigned char 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  c               1    0[COMRAM] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;		None               void
  7924 ;; Registers used:
  7925 ;;		wreg
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;Total ram usage:        1 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; This function calls:
  7938 ;;		Nothing
  7939 ;; This function is called by:
  7940 ;;		_printf
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text25
  7945  00BEFC                     __ptext25:
  7946                           	opt stack 0
  7947  00BEFC                     _putch:
  7948                           	opt stack 25
  7949                           
  7950                           ;incstack = 0
  7951                           ;putch@c stored from wreg
  7952  00BEFC  6E01               	movwf	putch@c,c
  7953                           
  7954                           ;Lab8p1.c: 287: while (!TRMT);
  7955  00BEFE  D000               	goto	l374
  7956  00BF00                     l374:
  7957  00BF00  A2AC               	btfss	4012,1,c	;volatile
  7958  00BF02  D7FE               	goto	l374
  7959                           
  7960                           ;Lab8p1.c: 288: TXREG = c;
  7961  00BF04  C001  FFAD         	movff	putch@c,4013	;volatile
  7962  00BF08  0012               	return		;funcret
  7963  00BF0A                     __end_of_putch:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           intcon2	equ	0xFF1
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           postdec1	equ	0xFE5
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function _isdigit *****************
  7984 ;; Defined at:
  7985 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  c               1    wreg     unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  c               1    2[COMRAM] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;		None               void
  7992 ;; Registers used:
  7993 ;;		wreg, status,2, status,0
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;Total ram usage:        3 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_printf
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text26
  8013  00BFE6                     __ptext26:
  8014                           	opt stack 0
  8015  00BFE6                     _isdigit:
  8016                           	opt stack 25
  8017                           
  8018                           ;incstack = 0
  8019                           ;isdigit@c stored from wreg
  8020  00BFE6  6E03               	movwf	isdigit@c,c
  8021  00BFE8  0E00               	movlw	0
  8022  00BFEA  6E02               	movwf	_isdigit$2080,c
  8023  00BFEC  0E3A               	movlw	58
  8024  00BFEE  6003               	cpfslt	isdigit@c,c
  8025  00BFF0  D006               	goto	l3862
  8026  00BFF2  0E2F               	movlw	47
  8027  00BFF4  6403               	cpfsgt	isdigit@c,c
  8028  00BFF6  D003               	goto	l3862
  8029  00BFF8  0E01               	movlw	1
  8030  00BFFA  6E02               	movwf	_isdigit$2080,c
  8031  00BFFC  D000               	goto	l3862
  8032  00BFFE                     l3862:
  8033  00BFFE  C002  F001         	movff	_isdigit$2080,??_isdigit
  8034  00C002  3001               	rrcf	??_isdigit,w,c
  8035  00C004  D000               	goto	l1151
  8036  00C006                     l1151:
  8037  00C006  0012               	return		;funcret
  8038  00C008                     __end_of_isdigit:
  8039                           	opt stack 0
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon2	equ	0xFF1
  8047                           postinc0	equ	0xFEE
  8048                           wreg	equ	0xFE8
  8049                           postdec1	equ	0xFE5
  8050                           fsr1l	equ	0xFE1
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _fround *****************
  8059 ;; Defined at:
  8060 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  prec            1    wreg     unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  prec            1   44[COMRAM] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  3   35[COMRAM] unsigned char 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8074 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;Total ram usage:       10 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    2
  8081 ;; This function calls:
  8082 ;;		___awdiv
  8083 ;;		___awmod
  8084 ;;		___ftmul
  8085 ;;		___wmul
  8086 ;; This function is called by:
  8087 ;;		_printf
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text27
  8092  00E086                     __ptext27:
  8093                           	opt stack 0
  8094  00E086                     _fround:
  8095                           	opt stack 23
  8096                           
  8097                           ;incstack = 0
  8098                           ;fround@prec stored from wreg
  8099  00E086  6E2D               	movwf	fround@prec,c
  8100                           
  8101                           ;doprnt.c: 413: if(prec>=110)
  8102  00E088  0E6D               	movlw	109
  8103  00E08A  642D               	cpfsgt	fround@prec,c
  8104  00E08C  D09B               	goto	l3804
  8105                           
  8106                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8107  00E08E  0E00               	movlw	0
  8108  00E090  6E12               	movwf	___wmul@multiplicand+1,c
  8109  00E092  0E03               	movlw	3
  8110  00E094  6E11               	movwf	___wmul@multiplicand,c
  8111  00E096  0E00               	movlw	0
  8112  00E098  6E0A               	movwf	___awdiv@divisor+1,c
  8113  00E09A  0E0A               	movlw	10
  8114  00E09C  6E09               	movwf	___awdiv@divisor,c
  8115  00E09E  0E00               	movlw	0
  8116  00E0A0  6E04               	movwf	___awmod@divisor+1,c
  8117  00E0A2  0E64               	movlw	100
  8118  00E0A4  6E03               	movwf	___awmod@divisor,c
  8119  00E0A6  C02D  F001         	movff	fround@prec,___awmod@dividend
  8120  00E0AA  6A02               	clrf	___awmod@dividend+1,c
  8121  00E0AC  EC6F  F063         	call	___awmod	;wreg free
  8122  00E0B0  C001  F007         	movff	?___awmod,___awdiv@dividend
  8123  00E0B4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8124  00E0B8  ECBF  F064         	call	___awdiv	;wreg free
  8125  00E0BC  0E09               	movlw	9
  8126  00E0BE  2407               	addwf	?___awdiv,w,c
  8127  00E0C0  6E0F               	movwf	___wmul@multiplier,c
  8128  00E0C2  0E00               	movlw	0
  8129  00E0C4  2008               	addwfc	?___awdiv+1,w,c
  8130  00E0C6  6E10               	movwf	___wmul@multiplier+1,c
  8131  00E0C8  EC29  F060         	call	___wmul	;wreg free
  8132  00E0CC  0E66               	movlw	low __npowers_
  8133  00E0CE  240F               	addwf	?___wmul,w,c
  8134  00E0D0  6EF6               	movwf	tblptrl,c
  8135  00E0D2  0EFC               	movlw	high __npowers_
  8136  00E0D4  2010               	addwfc	?___wmul+1,w,c
  8137  00E0D6  6EF7               	movwf	tblptrh,c
  8138  00E0D8                     	if	0	;There are less than 3 active tblptr bytes
  8139  00E0D8                     	endif
  8140  00E0D8  0009               	tblrd		*+
  8141  00E0DA  CFF5 F018          	movff	tablat,___ftmul@f2
  8142  00E0DE  0009               	tblrd		*+
  8143  00E0E0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8144  00E0E4  000A               	tblrd		*-
  8145  00E0E6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8146  00E0EA  0E00               	movlw	0
  8147  00E0EC  6E0A               	movwf	___awdiv@divisor+1,c
  8148  00E0EE  0E64               	movlw	100
  8149  00E0F0  6E09               	movwf	___awdiv@divisor,c
  8150  00E0F2  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8151  00E0F6  6A08               	clrf	___awdiv@dividend+1,c
  8152  00E0F8  ECBF  F064         	call	___awdiv	;wreg free
  8153  00E0FC  0E12               	movlw	18
  8154  00E0FE  2407               	addwf	?___awdiv,w,c
  8155  00E100  6E0F               	movwf	___wmul@multiplier,c
  8156  00E102  0E00               	movlw	0
  8157  00E104  2008               	addwfc	?___awdiv+1,w,c
  8158  00E106  6E10               	movwf	___wmul@multiplier+1,c
  8159  00E108  0E00               	movlw	0
  8160  00E10A  6E12               	movwf	___wmul@multiplicand+1,c
  8161  00E10C  0E03               	movlw	3
  8162  00E10E  6E11               	movwf	___wmul@multiplicand,c
  8163  00E110  EC29  F060         	call	___wmul	;wreg free
  8164  00E114  0E66               	movlw	low __npowers_
  8165  00E116  240F               	addwf	?___wmul,w,c
  8166  00E118  6EF6               	movwf	tblptrl,c
  8167  00E11A  0EFC               	movlw	high __npowers_
  8168  00E11C  2010               	addwfc	?___wmul+1,w,c
  8169  00E11E  6EF7               	movwf	tblptrh,c
  8170  00E120                     	if	0	;There are less than 3 active tblptr bytes
  8171  00E120                     	endif
  8172  00E120  0009               	tblrd		*+
  8173  00E122  CFF5 F015          	movff	tablat,___ftmul@f1
  8174  00E126  0009               	tblrd		*+
  8175  00E128  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8176  00E12C  000A               	tblrd		*-
  8177  00E12E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8178  00E132  EC6E  F069         	call	___ftmul	;wreg free
  8179  00E136  C015  F02A         	movff	?___ftmul,_fround$2383
  8180  00E13A  C016  F02B         	movff	?___ftmul+1,_fround$2383+1
  8181  00E13E  C017  F02C         	movff	?___ftmul+2,_fround$2383+2
  8182                           
  8183                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8184  00E142  0E00               	movlw	0
  8185  00E144  6E12               	movwf	___wmul@multiplicand+1,c
  8186  00E146  0E03               	movlw	3
  8187  00E148  6E11               	movwf	___wmul@multiplicand,c
  8188  00E14A  0E00               	movlw	0
  8189  00E14C  6E04               	movwf	___awmod@divisor+1,c
  8190  00E14E  0E0A               	movlw	10
  8191  00E150  6E03               	movwf	___awmod@divisor,c
  8192  00E152  C02D  F001         	movff	fround@prec,___awmod@dividend
  8193  00E156  6A02               	clrf	___awmod@dividend+1,c
  8194  00E158  EC6F  F063         	call	___awmod	;wreg free
  8195  00E15C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8196  00E160  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8197  00E164  EC29  F060         	call	___wmul	;wreg free
  8198  00E168  0E66               	movlw	low __npowers_
  8199  00E16A  240F               	addwf	?___wmul,w,c
  8200  00E16C  6EF6               	movwf	tblptrl,c
  8201  00E16E  0EFC               	movlw	high __npowers_
  8202  00E170  2010               	addwfc	?___wmul+1,w,c
  8203  00E172  6EF7               	movwf	tblptrh,c
  8204  00E174                     	if	0	;There are less than 3 active tblptr bytes
  8205  00E174                     	endif
  8206  00E174  0009               	tblrd		*+
  8207  00E176  CFF5 F018          	movff	tablat,___ftmul@f2
  8208  00E17A  0009               	tblrd		*+
  8209  00E17C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8210  00E180  000A               	tblrd		*-
  8211  00E182  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8212  00E186  C02A  F015         	movff	_fround$2383,___ftmul@f1
  8213  00E18A  C02B  F016         	movff	_fround$2383+1,___ftmul@f1+1
  8214  00E18E  C02C  F017         	movff	_fround$2383+2,___ftmul@f1+2
  8215  00E192  EC6E  F069         	call	___ftmul	;wreg free
  8216  00E196  C015  F027         	movff	?___ftmul,_fround$2384
  8217  00E19A  C016  F028         	movff	?___ftmul+1,_fround$2384+1
  8218  00E19E  C017  F029         	movff	?___ftmul+2,_fround$2384+2
  8219                           
  8220                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8221  00E1A2  C027  F015         	movff	_fround$2384,___ftmul@f1
  8222  00E1A6  C028  F016         	movff	_fround$2384+1,___ftmul@f1+1
  8223  00E1AA  C029  F017         	movff	_fround$2384+2,___ftmul@f1+2
  8224  00E1AE  0E00               	movlw	0
  8225  00E1B0  6E18               	movwf	___ftmul@f2,c
  8226  00E1B2  0E00               	movlw	0
  8227  00E1B4  6E19               	movwf	___ftmul@f2+1,c
  8228  00E1B6  0E3F               	movlw	63
  8229  00E1B8  6E1A               	movwf	___ftmul@f2+2,c
  8230  00E1BA  EC6E  F069         	call	___ftmul	;wreg free
  8231  00E1BE  D07D               	goto	L13
  8232  00E1C0  D083               	goto	l542
  8233  00E1C2  D062               	goto	l3812
  8234  00E1C4                     l3804:
  8235                           
  8236                           ;doprnt.c: 415: else if(prec > 10)
  8237  00E1C4  0E0A               	movlw	10
  8238  00E1C6  642D               	cpfsgt	fround@prec,c
  8239  00E1C8  D05F               	goto	l3812
  8240                           
  8241                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8242  00E1CA  0E00               	movlw	0
  8243  00E1CC  6E12               	movwf	___wmul@multiplicand+1,c
  8244  00E1CE  0E03               	movlw	3
  8245  00E1D0  6E11               	movwf	___wmul@multiplicand,c
  8246  00E1D2  0E00               	movlw	0
  8247  00E1D4  6E04               	movwf	___awmod@divisor+1,c
  8248  00E1D6  0E0A               	movlw	10
  8249  00E1D8  6E03               	movwf	___awmod@divisor,c
  8250  00E1DA  C02D  F001         	movff	fround@prec,___awmod@dividend
  8251  00E1DE  6A02               	clrf	___awmod@dividend+1,c
  8252  00E1E0  EC6F  F063         	call	___awmod	;wreg free
  8253  00E1E4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8254  00E1E8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8255  00E1EC  EC29  F060         	call	___wmul	;wreg free
  8256  00E1F0  0E66               	movlw	low __npowers_
  8257  00E1F2  240F               	addwf	?___wmul,w,c
  8258  00E1F4  6EF6               	movwf	tblptrl,c
  8259  00E1F6  0EFC               	movlw	high __npowers_
  8260  00E1F8  2010               	addwfc	?___wmul+1,w,c
  8261  00E1FA  6EF7               	movwf	tblptrh,c
  8262  00E1FC                     	if	0	;There are less than 3 active tblptr bytes
  8263  00E1FC                     	endif
  8264  00E1FC  0009               	tblrd		*+
  8265  00E1FE  CFF5 F018          	movff	tablat,___ftmul@f2
  8266  00E202  0009               	tblrd		*+
  8267  00E204  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8268  00E208  000A               	tblrd		*-
  8269  00E20A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8270  00E20E  0E00               	movlw	0
  8271  00E210  6E0A               	movwf	___awdiv@divisor+1,c
  8272  00E212  0E0A               	movlw	10
  8273  00E214  6E09               	movwf	___awdiv@divisor,c
  8274  00E216  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8275  00E21A  6A08               	clrf	___awdiv@dividend+1,c
  8276  00E21C  ECBF  F064         	call	___awdiv	;wreg free
  8277  00E220  0E09               	movlw	9
  8278  00E222  2407               	addwf	?___awdiv,w,c
  8279  00E224  6E0F               	movwf	___wmul@multiplier,c
  8280  00E226  0E00               	movlw	0
  8281  00E228  2008               	addwfc	?___awdiv+1,w,c
  8282  00E22A  6E10               	movwf	___wmul@multiplier+1,c
  8283  00E22C  0E00               	movlw	0
  8284  00E22E  6E12               	movwf	___wmul@multiplicand+1,c
  8285  00E230  0E03               	movlw	3
  8286  00E232  6E11               	movwf	___wmul@multiplicand,c
  8287  00E234  EC29  F060         	call	___wmul	;wreg free
  8288  00E238  0E66               	movlw	low __npowers_
  8289  00E23A  240F               	addwf	?___wmul,w,c
  8290  00E23C  6EF6               	movwf	tblptrl,c
  8291  00E23E  0EFC               	movlw	high __npowers_
  8292  00E240  2010               	addwfc	?___wmul+1,w,c
  8293  00E242  6EF7               	movwf	tblptrh,c
  8294  00E244                     	if	0	;There are less than 3 active tblptr bytes
  8295  00E244                     	endif
  8296  00E244  0009               	tblrd		*+
  8297  00E246  CFF5 F015          	movff	tablat,___ftmul@f1
  8298  00E24A  0009               	tblrd		*+
  8299  00E24C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8300  00E250  000A               	tblrd		*-
  8301  00E252  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8302  00E256  EC6E  F069         	call	___ftmul	;wreg free
  8303  00E25A  C015  F02A         	movff	?___ftmul,_fround$2383
  8304  00E25E  C016  F02B         	movff	?___ftmul+1,_fround$2383+1
  8305  00E262  C017  F02C         	movff	?___ftmul+2,_fround$2383+2
  8306                           
  8307                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8308  00E266  C02A  F015         	movff	_fround$2383,___ftmul@f1
  8309  00E26A  C02B  F016         	movff	_fround$2383+1,___ftmul@f1+1
  8310  00E26E  C02C  F017         	movff	_fround$2383+2,___ftmul@f1+2
  8311  00E272  0E00               	movlw	0
  8312  00E274  6E18               	movwf	___ftmul@f2,c
  8313  00E276  0E00               	movlw	0
  8314  00E278  6E19               	movwf	___ftmul@f2+1,c
  8315  00E27A  0E3F               	movlw	63
  8316  00E27C  6E1A               	movwf	___ftmul@f2+2,c
  8317  00E27E  EC6E  F069         	call	___ftmul	;wreg free
  8318  00E282  D01B               	goto	L13
  8319  00E284  D021               	goto	l542
  8320  00E286  D000               	goto	l3812
  8321  00E288                     l3812:
  8322                           
  8323                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8324  00E288  502D               	movf	fround@prec,w,c
  8325  00E28A  0D03               	mullw	3
  8326  00E28C  0E66               	movlw	low __npowers_
  8327  00E28E  24F3               	addwf	prodl,w,c
  8328  00E290  6EF6               	movwf	tblptrl,c
  8329  00E292  0EFC               	movlw	high __npowers_
  8330  00E294  20F4               	addwfc	prodh,w,c
  8331  00E296  6EF7               	movwf	tblptrh,c
  8332  00E298                     	if	0	;There are less than 3 active tblptr bytes
  8333  00E298                     	endif
  8334  00E298  0009               	tblrd		*+
  8335  00E29A  CFF5 F015          	movff	tablat,___ftmul@f1
  8336  00E29E  0009               	tblrd		*+
  8337  00E2A0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8338  00E2A4  000A               	tblrd		*-
  8339  00E2A6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8340  00E2AA  0E00               	movlw	0
  8341  00E2AC  6E18               	movwf	___ftmul@f2,c
  8342  00E2AE  0E00               	movlw	0
  8343  00E2B0  6E19               	movwf	___ftmul@f2+1,c
  8344  00E2B2  0E3F               	movlw	63
  8345  00E2B4  6E1A               	movwf	___ftmul@f2+2,c
  8346  00E2B6  EC6E  F069         	call	___ftmul	;wreg free
  8347  00E2BA                     L13:
  8348  00E2BA  C015  F024         	movff	?___ftmul,?_fround
  8349  00E2BE  C016  F025         	movff	?___ftmul+1,?_fround+1
  8350  00E2C2  C017  F026         	movff	?___ftmul+2,?_fround+2
  8351  00E2C6  D000               	goto	l542
  8352  00E2C8                     l542:
  8353  00E2C8  0012               	return		;funcret
  8354  00E2CA                     __end_of_fround:
  8355                           	opt stack 0
  8356                           tblptru	equ	0xFF8
  8357                           tblptrh	equ	0xFF7
  8358                           tblptrl	equ	0xFF6
  8359                           tablat	equ	0xFF5
  8360                           prodh	equ	0xFF4
  8361                           prodl	equ	0xFF3
  8362                           intcon2	equ	0xFF1
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function ___ftmul *****************
  8375 ;; Defined at:
  8376 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  f1              3   20[COMRAM] float 
  8379 ;;  f2              3   23[COMRAM] float 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  8382 ;;  sign            1   34[COMRAM] unsigned char 
  8383 ;;  cntr            1   33[COMRAM] unsigned char 
  8384 ;;  exp             1   29[COMRAM] unsigned char 
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  3   20[COMRAM] float 
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0, cstack
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8394 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;Total ram usage:       15 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    1
  8401 ;; This function calls:
  8402 ;;		___ftpack
  8403 ;; This function is called by:
  8404 ;;		_fround
  8405 ;;		_scale
  8406 ;;		_printf
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text28
  8411  00D2DC                     __ptext28:
  8412                           	opt stack 0
  8413  00D2DC                     ___ftmul:
  8414                           	opt stack 23
  8415                           
  8416                           ;incstack = 0
  8417  00D2DC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  8418  00D2E0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8419  00D2E2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8420  00D2E4  3416               	rlcf	___ftmul@f1+1,w,c
  8421  00D2E6  361B               	rlcf	??___ftmul& (0+255),f,c
  8422  00D2E8  E301               	bnc	u2841
  8423  00D2EA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8424  00D2EC                     u2841:
  8425  00D2EC  501B               	movf	??___ftmul,w,c
  8426  00D2EE  6E1E               	movwf	___ftmul@exp,c
  8427  00D2F0  501E               	movf	___ftmul@exp,w,c
  8428  00D2F2  A4D8               	btfss	status,2,c
  8429  00D2F4  D002               	goto	l3604
  8430  00D2F6  D00E               	goto	l3606
  8431  00D2F8  D06C               	goto	l1115
  8432  00D2FA                     l3604:
  8433  00D2FA  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  8434  00D2FE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8435  00D300  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8436  00D302  3419               	rlcf	___ftmul@f2+1,w,c
  8437  00D304  361B               	rlcf	??___ftmul& (0+255),f,c
  8438  00D306  E301               	bnc	u2861
  8439  00D308  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8440  00D30A                     u2861:
  8441  00D30A  501B               	movf	??___ftmul,w,c
  8442  00D30C  6E23               	movwf	___ftmul@sign,c
  8443  00D30E  5023               	movf	___ftmul@sign,w,c
  8444  00D310  A4D8               	btfss	status,2,c
  8445  00D312  D007               	goto	l3610
  8446  00D314                     l3606:
  8447  00D314  0E00               	movlw	0
  8448  00D316  6E15               	movwf	?___ftmul,c
  8449  00D318  0E00               	movlw	0
  8450  00D31A  6E16               	movwf	?___ftmul+1,c
  8451  00D31C  0E00               	movlw	0
  8452  00D31E  6E17               	movwf	?___ftmul+2,c
  8453  00D320  D058               	goto	l1115
  8454  00D322                     l3610:
  8455  00D322  5023               	movf	___ftmul@sign,w,c
  8456  00D324  0F7B               	addlw	123
  8457  00D326  261E               	addwf	___ftmul@exp,f,c
  8458  00D328  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  8459  00D32C  501A               	movf	___ftmul@f2+2,w,c
  8460  00D32E  1A23               	xorwf	___ftmul@sign,f,c
  8461  00D330  0E80               	movlw	128
  8462  00D332  1623               	andwf	___ftmul@sign,f,c
  8463  00D334  8E16               	bsf	___ftmul@f1+1,7,c
  8464  00D336  8E19               	bsf	___ftmul@f2+1,7,c
  8465  00D338  0EFF               	movlw	255
  8466  00D33A  1618               	andwf	___ftmul@f2,f,c
  8467  00D33C  0EFF               	movlw	255
  8468  00D33E  1619               	andwf	___ftmul@f2+1,f,c
  8469  00D340  0E00               	movlw	0
  8470  00D342  161A               	andwf	___ftmul@f2+2,f,c
  8471  00D344  0E00               	movlw	0
  8472  00D346  6E1F               	movwf	___ftmul@f3_as_product,c
  8473  00D348  0E00               	movlw	0
  8474  00D34A  6E20               	movwf	___ftmul@f3_as_product+1,c
  8475  00D34C  0E00               	movlw	0
  8476  00D34E  6E21               	movwf	___ftmul@f3_as_product+2,c
  8477  00D350  0E07               	movlw	7
  8478  00D352  6E22               	movwf	___ftmul@cntr,c
  8479  00D354  D000               	goto	l3624
  8480  00D356                     l3624:
  8481  00D356  A015               	btfss	___ftmul@f1,0,c
  8482  00D358  D007               	goto	l3628
  8483  00D35A  5018               	movf	___ftmul@f2,w,c
  8484  00D35C  261F               	addwf	___ftmul@f3_as_product,f,c
  8485  00D35E  5019               	movf	___ftmul@f2+1,w,c
  8486  00D360  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8487  00D362  501A               	movf	___ftmul@f2+2,w,c
  8488  00D364  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8489  00D366  D000               	goto	l3628
  8490  00D368                     l3628:
  8491  00D368  90D8               	bcf	status,0,c
  8492  00D36A  3217               	rrcf	___ftmul@f1+2,f,c
  8493  00D36C  3216               	rrcf	___ftmul@f1+1,f,c
  8494  00D36E  3215               	rrcf	___ftmul@f1,f,c
  8495  00D370  90D8               	bcf	status,0,c
  8496  00D372  3618               	rlcf	___ftmul@f2,f,c
  8497  00D374  3619               	rlcf	___ftmul@f2+1,f,c
  8498  00D376  361A               	rlcf	___ftmul@f2+2,f,c
  8499  00D378  2E22               	decfsz	___ftmul@cntr,f,c
  8500  00D37A  D7ED               	goto	l3624
  8501  00D37C  D000               	goto	l3632
  8502  00D37E                     l3632:
  8503  00D37E  0E09               	movlw	9
  8504  00D380  6E22               	movwf	___ftmul@cntr,c
  8505  00D382  D000               	goto	l3634
  8506  00D384                     l3634:
  8507  00D384  A015               	btfss	___ftmul@f1,0,c
  8508  00D386  D007               	goto	l3638
  8509  00D388  5018               	movf	___ftmul@f2,w,c
  8510  00D38A  261F               	addwf	___ftmul@f3_as_product,f,c
  8511  00D38C  5019               	movf	___ftmul@f2+1,w,c
  8512  00D38E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8513  00D390  501A               	movf	___ftmul@f2+2,w,c
  8514  00D392  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8515  00D394  D000               	goto	l3638
  8516  00D396                     l3638:
  8517  00D396  90D8               	bcf	status,0,c
  8518  00D398  3217               	rrcf	___ftmul@f1+2,f,c
  8519  00D39A  3216               	rrcf	___ftmul@f1+1,f,c
  8520  00D39C  3215               	rrcf	___ftmul@f1,f,c
  8521  00D39E  90D8               	bcf	status,0,c
  8522  00D3A0  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  8523  00D3A2  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  8524  00D3A4  321F               	rrcf	___ftmul@f3_as_product,f,c
  8525  00D3A6  2E22               	decfsz	___ftmul@cntr,f,c
  8526  00D3A8  D7ED               	goto	l3634
  8527  00D3AA  D000               	goto	l3642
  8528  00D3AC                     l3642:
  8529  00D3AC  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8530  00D3B0  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8531  00D3B4  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8532  00D3B8  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  8533  00D3BC  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  8534  00D3C0  EC5D  F066         	call	___ftpack	;wreg free
  8535  00D3C4  C001  F015         	movff	?___ftpack,?___ftmul
  8536  00D3C8  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  8537  00D3CC  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  8538  00D3D0  D000               	goto	l1115
  8539  00D3D2                     l1115:
  8540  00D3D2  0012               	return		;funcret
  8541  00D3D4                     __end_of___ftmul:
  8542                           	opt stack 0
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           prodh	equ	0xFF4
  8548                           prodl	equ	0xFF3
  8549                           intcon2	equ	0xFF1
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function __tdiv_to_l_ *****************
  8562 ;; Defined at:
  8563 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  f1              3    0[COMRAM] float 
  8566 ;;  f2              3    3[COMRAM] float 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  quot            4    9[COMRAM] unsigned long 
  8569 ;;  exp1            1   14[COMRAM] unsigned char 
  8570 ;;  cntr            1   13[COMRAM] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  4    0[COMRAM] unsigned long 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8580 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;Total ram usage:       15 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; This function calls:
  8587 ;;		Nothing
  8588 ;; This function is called by:
  8589 ;;		_printf
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text29
  8594  00D4DE                     __ptext29:
  8595                           	opt stack 0
  8596  00D4DE                     __tdiv_to_l_:
  8597                           	opt stack 25
  8598                           
  8599                           ;incstack = 0
  8600  00D4DE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8601  00D4E2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8602  00D4E4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8603  00D4E6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  8604  00D4E8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8605  00D4EA  E301               	bnc	u3271
  8606  00D4EC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8607  00D4EE                     u3271:
  8608  00D4EE  5007               	movf	??__tdiv_to_l_,w,c
  8609  00D4F0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  8610  00D4F2  500F               	movf	__tdiv_to_l_@exp1,w,c
  8611  00D4F4  A4D8               	btfss	status,2,c
  8612  00D4F6  D002               	goto	l3872
  8613  00D4F8  D05D               	goto	l3914
  8614  00D4FA  D078               	goto	l1091
  8615  00D4FC                     l3872:
  8616  00D4FC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8617  00D500  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8618  00D502  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8619  00D504  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  8620  00D506  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8621  00D508  E301               	bnc	u3291
  8622  00D50A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8623  00D50C                     u3291:
  8624  00D50C  5007               	movf	??__tdiv_to_l_,w,c
  8625  00D50E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8626  00D510  500E               	movf	__tdiv_to_l_@cntr,w,c
  8627  00D512  A4D8               	btfss	status,2,c
  8628  00D514  D002               	goto	l3878
  8629  00D516  D04E               	goto	l3914
  8630  00D518  D069               	goto	l1091
  8631  00D51A                     l3878:
  8632  00D51A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  8633  00D51C  0EFF               	movlw	255
  8634  00D51E  1601               	andwf	__tdiv_to_l_@f1,f,c
  8635  00D520  0EFF               	movlw	255
  8636  00D522  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  8637  00D524  0E00               	movlw	0
  8638  00D526  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  8639  00D528  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  8640  00D52A  0EFF               	movlw	255
  8641  00D52C  1604               	andwf	__tdiv_to_l_@f2,f,c
  8642  00D52E  0EFF               	movlw	255
  8643  00D530  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  8644  00D532  0E00               	movlw	0
  8645  00D534  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  8646  00D536  0E00               	movlw	0
  8647  00D538  6E0A               	movwf	__tdiv_to_l_@quot,c
  8648  00D53A  0E00               	movlw	0
  8649  00D53C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  8650  00D53E  0E00               	movlw	0
  8651  00D540  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  8652  00D542  0E00               	movlw	0
  8653  00D544  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  8654  00D546  0E7F               	movlw	127
  8655  00D548  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8656  00D54A  500E               	movf	__tdiv_to_l_@cntr,w,c
  8657  00D54C  0F98               	addlw	152
  8658  00D54E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8659  00D550  0E18               	movlw	24
  8660  00D552  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8661  00D554                     l1093:
  8662  00D554  90D8               	bcf	status,0,c
  8663  00D556  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8664  00D558  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8665  00D55A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8666  00D55C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8667  00D55E  5004               	movf	__tdiv_to_l_@f2,w,c
  8668  00D560  5C01               	subwf	__tdiv_to_l_@f1,w,c
  8669  00D562  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8670  00D564  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  8671  00D566  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8672  00D568  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  8673  00D56A  A0D8               	btfss	status,0,c
  8674  00D56C  D007               	goto	l1094
  8675  00D56E  5004               	movf	__tdiv_to_l_@f2,w,c
  8676  00D570  5E01               	subwf	__tdiv_to_l_@f1,f,c
  8677  00D572  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8678  00D574  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  8679  00D576  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8680  00D578  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  8681  00D57A  800A               	bsf	__tdiv_to_l_@quot,0,c
  8682  00D57C                     l1094:
  8683  00D57C  90D8               	bcf	status,0,c
  8684  00D57E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  8685  00D580  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  8686  00D582  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  8687  00D584  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  8688  00D586  D7E6               	goto	l1093
  8689  00D588  D000               	goto	l3900
  8690  00D58A                     l3900:
  8691  00D58A  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  8692  00D58C  D010               	goto	l3912
  8693  00D58E  500F               	movf	__tdiv_to_l_@exp1,w,c
  8694  00D590  0A80               	xorlw	128
  8695  00D592  0F97               	addlw	151
  8696  00D594  B0D8               	btfsc	status,0,c
  8697  00D596  D003               	goto	l3908
  8698  00D598  D00D               	goto	l3914
  8699  00D59A  D028               	goto	l1091
  8700  00D59C  D000               	goto	l3908
  8701  00D59E                     l3908:
  8702  00D59E  90D8               	bcf	status,0,c
  8703  00D5A0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  8704  00D5A2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  8705  00D5A4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  8706  00D5A6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  8707  00D5A8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  8708  00D5AA  D7F9               	goto	l3908
  8709  00D5AC  D017               	goto	l1100
  8710  00D5AE                     l3912:
  8711  00D5AE  0E17               	movlw	23
  8712  00D5B0  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  8713  00D5B2  D011               	goto	l3920
  8714  00D5B4                     l3914:
  8715  00D5B4  0E00               	movlw	0
  8716  00D5B6  6E01               	movwf	?__tdiv_to_l_,c
  8717  00D5B8  0E00               	movlw	0
  8718  00D5BA  6E02               	movwf	?__tdiv_to_l_+1,c
  8719  00D5BC  0E00               	movlw	0
  8720  00D5BE  6E03               	movwf	?__tdiv_to_l_+2,c
  8721  00D5C0  0E00               	movlw	0
  8722  00D5C2  6E04               	movwf	?__tdiv_to_l_+3,c
  8723  00D5C4  D013               	goto	l1091
  8724  00D5C6  D007               	goto	l3920
  8725  00D5C8                     l3918:
  8726  00D5C8  90D8               	bcf	status,0,c
  8727  00D5CA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8728  00D5CC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8729  00D5CE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8730  00D5D0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8731  00D5D2  060F               	decf	__tdiv_to_l_@exp1,f,c
  8732  00D5D4  D000               	goto	l3920
  8733  00D5D6                     l3920:
  8734  00D5D6  500F               	movf	__tdiv_to_l_@exp1,w,c
  8735  00D5D8  A4D8               	btfss	status,2,c
  8736  00D5DA  D7F6               	goto	l3918
  8737  00D5DC                     l1100:
  8738  00D5DC  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8739  00D5E0  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8740  00D5E4  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8741  00D5E8  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8742  00D5EC                     l1091:
  8743  00D5EC  0012               	return		;funcret
  8744  00D5EE                     __end_of__tdiv_to_l_:
  8745                           	opt stack 0
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon2	equ	0xFF1
  8753                           postinc0	equ	0xFEE
  8754                           wreg	equ	0xFE8
  8755                           postdec1	equ	0xFE5
  8756                           fsr1l	equ	0xFE1
  8757                           indf2	equ	0xFDF
  8758                           postinc2	equ	0xFDE
  8759                           postdec2	equ	0xFDD
  8760                           fsr2h	equ	0xFDA
  8761                           fsr2l	equ	0xFD9
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function __div_to_l_ *****************
  8765 ;; Defined at:
  8766 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  f1              3    0[COMRAM] unsigned long 
  8769 ;;  f2              3    3[COMRAM] unsigned long 
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;  quot            4    6[COMRAM] unsigned long 
  8772 ;;  exp1            1   11[COMRAM] unsigned char 
  8773 ;;  cntr            1   10[COMRAM] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  4    0[COMRAM] unsigned long 
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8783 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;Total ram usage:       12 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_printf
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	text30
  8797  00D3D4                     __ptext30:
  8798                           	opt stack 0
  8799  00D3D4                     __div_to_l_:
  8800                           	opt stack 25
  8801                           
  8802                           ;incstack = 0
  8803  00D3D4  3403               	rlcf	__div_to_l_@f1+2,w,c
  8804  00D3D6  3404               	rlcf	__div_to_l_@f1+3,w,c
  8805  00D3D8  6E0C               	movwf	__div_to_l_@exp1,c
  8806  00D3DA  500C               	movf	__div_to_l_@exp1,w,c
  8807  00D3DC  A4D8               	btfss	status,2,c
  8808  00D3DE  D002               	goto	l3928
  8809  00D3E0  D061               	goto	l3974
  8810  00D3E2  D07C               	goto	l970
  8811  00D3E4                     l3928:
  8812  00D3E4  3406               	rlcf	__div_to_l_@f2+2,w,c
  8813  00D3E6  3407               	rlcf	__div_to_l_@f2+3,w,c
  8814  00D3E8  6E0B               	movwf	__div_to_l_@cntr,c
  8815  00D3EA  500B               	movf	__div_to_l_@cntr,w,c
  8816  00D3EC  A4D8               	btfss	status,2,c
  8817  00D3EE  D002               	goto	l3934
  8818  00D3F0  D059               	goto	l3974
  8819  00D3F2  D074               	goto	l970
  8820  00D3F4                     l3934:
  8821  00D3F4  8E03               	bsf	__div_to_l_@f1+2,7,c
  8822  00D3F6  0EFF               	movlw	255
  8823  00D3F8  1601               	andwf	__div_to_l_@f1,f,c
  8824  00D3FA  0EFF               	movlw	255
  8825  00D3FC  1602               	andwf	__div_to_l_@f1+1,f,c
  8826  00D3FE  0EFF               	movlw	255
  8827  00D400  1603               	andwf	__div_to_l_@f1+2,f,c
  8828  00D402  0E00               	movlw	0
  8829  00D404  1604               	andwf	__div_to_l_@f1+3,f,c
  8830  00D406  8E06               	bsf	__div_to_l_@f2+2,7,c
  8831  00D408  0EFF               	movlw	255
  8832  00D40A  1604               	andwf	__div_to_l_@f2,f,c
  8833  00D40C  0EFF               	movlw	255
  8834  00D40E  1605               	andwf	__div_to_l_@f2+1,f,c
  8835  00D410  0EFF               	movlw	255
  8836  00D412  1606               	andwf	__div_to_l_@f2+2,f,c
  8837  00D414  0E00               	movlw	0
  8838  00D416  1607               	andwf	__div_to_l_@f2+3,f,c
  8839  00D418  0E00               	movlw	0
  8840  00D41A  6E07               	movwf	__div_to_l_@quot,c
  8841  00D41C  0E00               	movlw	0
  8842  00D41E  6E08               	movwf	__div_to_l_@quot+1,c
  8843  00D420  0E00               	movlw	0
  8844  00D422  6E09               	movwf	__div_to_l_@quot+2,c
  8845  00D424  0E00               	movlw	0
  8846  00D426  6E0A               	movwf	__div_to_l_@quot+3,c
  8847  00D428  0E7F               	movlw	127
  8848  00D42A  5E0C               	subwf	__div_to_l_@exp1,f,c
  8849  00D42C  500B               	movf	__div_to_l_@cntr,w,c
  8850  00D42E  0FA0               	addlw	160
  8851  00D430  5E0C               	subwf	__div_to_l_@exp1,f,c
  8852  00D432  0E20               	movlw	32
  8853  00D434  6E0B               	movwf	__div_to_l_@cntr,c
  8854  00D436  D000               	goto	l3948
  8855  00D438                     l3948:
  8856  00D438  90D8               	bcf	status,0,c
  8857  00D43A  3607               	rlcf	__div_to_l_@quot,f,c
  8858  00D43C  3608               	rlcf	__div_to_l_@quot+1,f,c
  8859  00D43E  3609               	rlcf	__div_to_l_@quot+2,f,c
  8860  00D440  360A               	rlcf	__div_to_l_@quot+3,f,c
  8861  00D442  5004               	movf	__div_to_l_@f2,w,c
  8862  00D444  5C01               	subwf	__div_to_l_@f1,w,c
  8863  00D446  5005               	movf	__div_to_l_@f2+1,w,c
  8864  00D448  5802               	subwfb	__div_to_l_@f1+1,w,c
  8865  00D44A  5006               	movf	__div_to_l_@f2+2,w,c
  8866  00D44C  5803               	subwfb	__div_to_l_@f1+2,w,c
  8867  00D44E  5007               	movf	__div_to_l_@f2+3,w,c
  8868  00D450  5804               	subwfb	__div_to_l_@f1+3,w,c
  8869  00D452  A0D8               	btfss	status,0,c
  8870  00D454  D00A               	goto	l3956
  8871  00D456  5004               	movf	__div_to_l_@f2,w,c
  8872  00D458  5E01               	subwf	__div_to_l_@f1,f,c
  8873  00D45A  5005               	movf	__div_to_l_@f2+1,w,c
  8874  00D45C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  8875  00D45E  5006               	movf	__div_to_l_@f2+2,w,c
  8876  00D460  5A03               	subwfb	__div_to_l_@f1+2,f,c
  8877  00D462  5007               	movf	__div_to_l_@f2+3,w,c
  8878  00D464  5A04               	subwfb	__div_to_l_@f1+3,f,c
  8879  00D466  8007               	bsf	__div_to_l_@quot,0,c
  8880  00D468  D000               	goto	l3956
  8881  00D46A                     l3956:
  8882  00D46A  90D8               	bcf	status,0,c
  8883  00D46C  3601               	rlcf	__div_to_l_@f1,f,c
  8884  00D46E  3602               	rlcf	__div_to_l_@f1+1,f,c
  8885  00D470  3603               	rlcf	__div_to_l_@f1+2,f,c
  8886  00D472  3604               	rlcf	__div_to_l_@f1+3,f,c
  8887  00D474  2E0B               	decfsz	__div_to_l_@cntr,f,c
  8888  00D476  D7E0               	goto	l3948
  8889  00D478  D000               	goto	l3960
  8890  00D47A                     l3960:
  8891  00D47A  AE0C               	btfss	__div_to_l_@exp1,7,c
  8892  00D47C  D010               	goto	l3972
  8893  00D47E  500C               	movf	__div_to_l_@exp1,w,c
  8894  00D480  0A80               	xorlw	128
  8895  00D482  0F9F               	addlw	159
  8896  00D484  B0D8               	btfsc	status,0,c
  8897  00D486  D003               	goto	l3968
  8898  00D488  D00D               	goto	l3974
  8899  00D48A  D028               	goto	l970
  8900  00D48C  D000               	goto	l3968
  8901  00D48E                     l3968:
  8902  00D48E  90D8               	bcf	status,0,c
  8903  00D490  320A               	rrcf	__div_to_l_@quot+3,f,c
  8904  00D492  3209               	rrcf	__div_to_l_@quot+2,f,c
  8905  00D494  3208               	rrcf	__div_to_l_@quot+1,f,c
  8906  00D496  3207               	rrcf	__div_to_l_@quot,f,c
  8907  00D498  3E0C               	incfsz	__div_to_l_@exp1,f,c
  8908  00D49A  D7F9               	goto	l3968
  8909  00D49C  D017               	goto	l979
  8910  00D49E                     l3972:
  8911  00D49E  0E1F               	movlw	31
  8912  00D4A0  640C               	cpfsgt	__div_to_l_@exp1,c
  8913  00D4A2  D011               	goto	l3980
  8914  00D4A4                     l3974:
  8915  00D4A4  0E00               	movlw	0
  8916  00D4A6  6E01               	movwf	?__div_to_l_,c
  8917  00D4A8  0E00               	movlw	0
  8918  00D4AA  6E02               	movwf	?__div_to_l_+1,c
  8919  00D4AC  0E00               	movlw	0
  8920  00D4AE  6E03               	movwf	?__div_to_l_+2,c
  8921  00D4B0  0E00               	movlw	0
  8922  00D4B2  6E04               	movwf	?__div_to_l_+3,c
  8923  00D4B4  D013               	goto	l970
  8924  00D4B6  D007               	goto	l3980
  8925  00D4B8                     l3978:
  8926  00D4B8  90D8               	bcf	status,0,c
  8927  00D4BA  3607               	rlcf	__div_to_l_@quot,f,c
  8928  00D4BC  3608               	rlcf	__div_to_l_@quot+1,f,c
  8929  00D4BE  3609               	rlcf	__div_to_l_@quot+2,f,c
  8930  00D4C0  360A               	rlcf	__div_to_l_@quot+3,f,c
  8931  00D4C2  060C               	decf	__div_to_l_@exp1,f,c
  8932  00D4C4  D000               	goto	l3980
  8933  00D4C6                     l3980:
  8934  00D4C6  500C               	movf	__div_to_l_@exp1,w,c
  8935  00D4C8  A4D8               	btfss	status,2,c
  8936  00D4CA  D7F6               	goto	l3978
  8937  00D4CC                     l979:
  8938  00D4CC  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  8939  00D4D0  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8940  00D4D4  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8941  00D4D8  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8942  00D4DC                     l970:
  8943  00D4DC  0012               	return		;funcret
  8944  00D4DE                     __end_of__div_to_l_:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon2	equ	0xFF1
  8953                           postinc0	equ	0xFEE
  8954                           wreg	equ	0xFE8
  8955                           postdec1	equ	0xFE5
  8956                           fsr1l	equ	0xFE1
  8957                           indf2	equ	0xFDF
  8958                           postinc2	equ	0xFDE
  8959                           postdec2	equ	0xFDD
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function ___lltoft *****************
  8965 ;; Defined at:
  8966 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  c               4    8[COMRAM] unsigned long 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  exp             1   16[COMRAM] unsigned char 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  3    8[COMRAM] float 
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;Total ram usage:        9 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    1
  8987 ;; This function calls:
  8988 ;;		___ftpack
  8989 ;; This function is called by:
  8990 ;;		_printf
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text31
  8995  00C4D6                     __ptext31:
  8996                           	opt stack 0
  8997  00C4D6                     ___lltoft:
  8998                           	opt stack 24
  8999                           
  9000                           ;incstack = 0
  9001  00C4D6  0E8E               	movlw	142
  9002  00C4D8  6E11               	movwf	___lltoft@exp,c
  9003  00C4DA  D007               	goto	l4100
  9004  00C4DC                     l4098:
  9005  00C4DC  90D8               	bcf	status,0,c
  9006  00C4DE  320C               	rrcf	___lltoft@c+3,f,c
  9007  00C4E0  320B               	rrcf	___lltoft@c+2,f,c
  9008  00C4E2  320A               	rrcf	___lltoft@c+1,f,c
  9009  00C4E4  3209               	rrcf	___lltoft@c,f,c
  9010  00C4E6  2A11               	incf	___lltoft@exp,f,c
  9011  00C4E8  D000               	goto	l4100
  9012  00C4EA                     l4100:
  9013  00C4EA  0E00               	movlw	0
  9014  00C4EC  1409               	andwf	___lltoft@c,w,c
  9015  00C4EE  6E0D               	movwf	??___lltoft& (0+255),c
  9016  00C4F0  0E00               	movlw	0
  9017  00C4F2  140A               	andwf	___lltoft@c+1,w,c
  9018  00C4F4  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9019  00C4F6  0E00               	movlw	0
  9020  00C4F8  140B               	andwf	___lltoft@c+2,w,c
  9021  00C4FA  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9022  00C4FC  0EFF               	movlw	255
  9023  00C4FE  140C               	andwf	___lltoft@c+3,w,c
  9024  00C500  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9025  00C502  500D               	movf	??___lltoft,w,c
  9026  00C504  100E               	iorwf	??___lltoft+1,w,c
  9027  00C506  100F               	iorwf	??___lltoft+2,w,c
  9028  00C508  1010               	iorwf	??___lltoft+3,w,c
  9029  00C50A  A4D8               	btfss	status,2,c
  9030  00C50C  D7E7               	goto	l4098
  9031  00C50E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9032  00C512  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9033  00C516  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9034  00C51A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9035  00C51E  0E00               	movlw	0
  9036  00C520  6E05               	movwf	___ftpack@sign,c
  9037  00C522  EC5D  F066         	call	___ftpack	;wreg free
  9038  00C526  C001  F009         	movff	?___ftpack,?___lltoft
  9039  00C52A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9040  00C52E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9041  00C532  D000               	goto	l1210
  9042  00C534                     l1210:
  9043  00C534  0012               	return		;funcret
  9044  00C536                     __end_of___lltoft:
  9045                           	opt stack 0
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon2	equ	0xFF1
  9053                           postinc0	equ	0xFEE
  9054                           wreg	equ	0xFE8
  9055                           postdec1	equ	0xFE5
  9056                           fsr1l	equ	0xFE1
  9057                           indf2	equ	0xFDF
  9058                           postinc2	equ	0xFDE
  9059                           postdec2	equ	0xFDD
  9060                           fsr2h	equ	0xFDA
  9061                           fsr2l	equ	0xFD9
  9062                           status	equ	0xFD8
  9063                           
  9064 ;; *************** function ___llmod *****************
  9065 ;; Defined at:
  9066 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  9067 ;; Parameters:    Size  Location     Type
  9068 ;;  dividend        4    0[COMRAM] unsigned long 
  9069 ;;  divisor         4    4[COMRAM] unsigned long 
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;  counter         1    8[COMRAM] unsigned char 
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  4    0[COMRAM] unsigned long 
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9081 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;Total ram usage:        9 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; This function calls:
  9088 ;;		Nothing
  9089 ;; This function is called by:
  9090 ;;		_printf
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text32
  9095  00C5FE                     __ptext32:
  9096                           	opt stack 0
  9097  00C5FE                     ___llmod:
  9098                           	opt stack 25
  9099                           
  9100                           ;incstack = 0
  9101  00C5FE  5005               	movf	___llmod@divisor,w,c
  9102  00C600  1006               	iorwf	___llmod@divisor+1,w,c
  9103  00C602  1007               	iorwf	___llmod@divisor+2,w,c
  9104  00C604  1008               	iorwf	___llmod@divisor+3,w,c
  9105  00C606  B4D8               	btfsc	status,2,c
  9106  00C608  D029               	goto	l1190
  9107  00C60A  0E01               	movlw	1
  9108  00C60C  6E09               	movwf	___llmod@counter,c
  9109  00C60E  D007               	goto	l4086
  9110  00C610                     l4084:
  9111  00C610  90D8               	bcf	status,0,c
  9112  00C612  3605               	rlcf	___llmod@divisor,f,c
  9113  00C614  3606               	rlcf	___llmod@divisor+1,f,c
  9114  00C616  3607               	rlcf	___llmod@divisor+2,f,c
  9115  00C618  3608               	rlcf	___llmod@divisor+3,f,c
  9116  00C61A  2A09               	incf	___llmod@counter,f,c
  9117  00C61C  D000               	goto	l4086
  9118  00C61E                     l4086:
  9119  00C61E  BE08               	btfsc	___llmod@divisor+3,7,c
  9120  00C620  D002               	goto	l4088
  9121  00C622  D7F6               	goto	l4084
  9122  00C624  D000               	goto	l4088
  9123  00C626                     l4088:
  9124  00C626  5005               	movf	___llmod@divisor,w,c
  9125  00C628  5C01               	subwf	___llmod@dividend,w,c
  9126  00C62A  5006               	movf	___llmod@divisor+1,w,c
  9127  00C62C  5802               	subwfb	___llmod@dividend+1,w,c
  9128  00C62E  5007               	movf	___llmod@divisor+2,w,c
  9129  00C630  5803               	subwfb	___llmod@dividend+2,w,c
  9130  00C632  5008               	movf	___llmod@divisor+3,w,c
  9131  00C634  5804               	subwfb	___llmod@dividend+3,w,c
  9132  00C636  A0D8               	btfss	status,0,c
  9133  00C638  D009               	goto	l4092
  9134  00C63A  5005               	movf	___llmod@divisor,w,c
  9135  00C63C  5E01               	subwf	___llmod@dividend,f,c
  9136  00C63E  5006               	movf	___llmod@divisor+1,w,c
  9137  00C640  5A02               	subwfb	___llmod@dividend+1,f,c
  9138  00C642  5007               	movf	___llmod@divisor+2,w,c
  9139  00C644  5A03               	subwfb	___llmod@dividend+2,f,c
  9140  00C646  5008               	movf	___llmod@divisor+3,w,c
  9141  00C648  5A04               	subwfb	___llmod@dividend+3,f,c
  9142  00C64A  D000               	goto	l4092
  9143  00C64C                     l4092:
  9144  00C64C  90D8               	bcf	status,0,c
  9145  00C64E  3208               	rrcf	___llmod@divisor+3,f,c
  9146  00C650  3207               	rrcf	___llmod@divisor+2,f,c
  9147  00C652  3206               	rrcf	___llmod@divisor+1,f,c
  9148  00C654  3205               	rrcf	___llmod@divisor,f,c
  9149  00C656  2E09               	decfsz	___llmod@counter,f,c
  9150  00C658  D7E6               	goto	l4088
  9151  00C65A  D000               	goto	l1190
  9152  00C65C                     l1190:
  9153  00C65C  C001  F001         	movff	___llmod@dividend,?___llmod
  9154  00C660  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  9155  00C664  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  9156  00C668  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  9157  00C66C  0012               	return		;funcret
  9158  00C66E                     __end_of___llmod:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon2	equ	0xFF1
  9167                           postinc0	equ	0xFEE
  9168                           wreg	equ	0xFE8
  9169                           postdec1	equ	0xFE5
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function ___lldiv *****************
  9179 ;; Defined at:
  9180 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;  dividend        4    0[COMRAM] unsigned long 
  9183 ;;  divisor         4    4[COMRAM] unsigned long 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  quotient        4    8[COMRAM] unsigned long 
  9186 ;;  counter         1   12[COMRAM] unsigned char 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  4    0[COMRAM] unsigned long 
  9189 ;; Registers used:
  9190 ;;		wreg, status,2, status,0
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9196 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;Total ram usage:       13 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; This function calls:
  9203 ;;		Nothing
  9204 ;; This function is called by:
  9205 ;;		_printf
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           	psect	text33
  9210  00C8F2                     __ptext33:
  9211                           	opt stack 0
  9212  00C8F2                     ___lldiv:
  9213                           	opt stack 25
  9214                           
  9215                           ;incstack = 0
  9216  00C8F2  0E00               	movlw	0
  9217  00C8F4  6E09               	movwf	___lldiv@quotient,c
  9218  00C8F6  0E00               	movlw	0
  9219  00C8F8  6E0A               	movwf	___lldiv@quotient+1,c
  9220  00C8FA  0E00               	movlw	0
  9221  00C8FC  6E0B               	movwf	___lldiv@quotient+2,c
  9222  00C8FE  0E00               	movlw	0
  9223  00C900  6E0C               	movwf	___lldiv@quotient+3,c
  9224  00C902  5005               	movf	___lldiv@divisor,w,c
  9225  00C904  1006               	iorwf	___lldiv@divisor+1,w,c
  9226  00C906  1007               	iorwf	___lldiv@divisor+2,w,c
  9227  00C908  1008               	iorwf	___lldiv@divisor+3,w,c
  9228  00C90A  B4D8               	btfsc	status,2,c
  9229  00C90C  D02F               	goto	l1180
  9230  00C90E  0E01               	movlw	1
  9231  00C910  6E0D               	movwf	___lldiv@counter,c
  9232  00C912  D007               	goto	l4066
  9233  00C914                     l4064:
  9234  00C914  90D8               	bcf	status,0,c
  9235  00C916  3605               	rlcf	___lldiv@divisor,f,c
  9236  00C918  3606               	rlcf	___lldiv@divisor+1,f,c
  9237  00C91A  3607               	rlcf	___lldiv@divisor+2,f,c
  9238  00C91C  3608               	rlcf	___lldiv@divisor+3,f,c
  9239  00C91E  2A0D               	incf	___lldiv@counter,f,c
  9240  00C920  D000               	goto	l4066
  9241  00C922                     l4066:
  9242  00C922  BE08               	btfsc	___lldiv@divisor+3,7,c
  9243  00C924  D002               	goto	l4068
  9244  00C926  D7F6               	goto	l4064
  9245  00C928  D000               	goto	l4068
  9246  00C92A                     l4068:
  9247  00C92A  90D8               	bcf	status,0,c
  9248  00C92C  3609               	rlcf	___lldiv@quotient,f,c
  9249  00C92E  360A               	rlcf	___lldiv@quotient+1,f,c
  9250  00C930  360B               	rlcf	___lldiv@quotient+2,f,c
  9251  00C932  360C               	rlcf	___lldiv@quotient+3,f,c
  9252  00C934  5005               	movf	___lldiv@divisor,w,c
  9253  00C936  5C01               	subwf	___lldiv@dividend,w,c
  9254  00C938  5006               	movf	___lldiv@divisor+1,w,c
  9255  00C93A  5802               	subwfb	___lldiv@dividend+1,w,c
  9256  00C93C  5007               	movf	___lldiv@divisor+2,w,c
  9257  00C93E  5803               	subwfb	___lldiv@dividend+2,w,c
  9258  00C940  5008               	movf	___lldiv@divisor+3,w,c
  9259  00C942  5804               	subwfb	___lldiv@dividend+3,w,c
  9260  00C944  A0D8               	btfss	status,0,c
  9261  00C946  D00A               	goto	l4076
  9262  00C948  5005               	movf	___lldiv@divisor,w,c
  9263  00C94A  5E01               	subwf	___lldiv@dividend,f,c
  9264  00C94C  5006               	movf	___lldiv@divisor+1,w,c
  9265  00C94E  5A02               	subwfb	___lldiv@dividend+1,f,c
  9266  00C950  5007               	movf	___lldiv@divisor+2,w,c
  9267  00C952  5A03               	subwfb	___lldiv@dividend+2,f,c
  9268  00C954  5008               	movf	___lldiv@divisor+3,w,c
  9269  00C956  5A04               	subwfb	___lldiv@dividend+3,f,c
  9270  00C958  8009               	bsf	___lldiv@quotient,0,c
  9271  00C95A  D000               	goto	l4076
  9272  00C95C                     l4076:
  9273  00C95C  90D8               	bcf	status,0,c
  9274  00C95E  3208               	rrcf	___lldiv@divisor+3,f,c
  9275  00C960  3207               	rrcf	___lldiv@divisor+2,f,c
  9276  00C962  3206               	rrcf	___lldiv@divisor+1,f,c
  9277  00C964  3205               	rrcf	___lldiv@divisor,f,c
  9278  00C966  2E0D               	decfsz	___lldiv@counter,f,c
  9279  00C968  D7E0               	goto	l4068
  9280  00C96A  D000               	goto	l1180
  9281  00C96C                     l1180:
  9282  00C96C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9283  00C970  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9284  00C974  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9285  00C978  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9286  00C97C  0012               	return		;funcret
  9287  00C97E                     __end_of___lldiv:
  9288                           	opt stack 0
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon2	equ	0xFF1
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function ___fttol *****************
  9308 ;; Defined at:
  9309 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  f1              3   42[COMRAM] float 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  lval            4   52[COMRAM] unsigned long 
  9314 ;;  exp1            1   56[COMRAM] unsigned char 
  9315 ;;  sign1           1   51[COMRAM] unsigned char 
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  4   42[COMRAM] long 
  9318 ;; Registers used:
  9319 ;;		wreg, status,2, status,0
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;Total ram usage:       15 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; This function calls:
  9332 ;;		Nothing
  9333 ;; This function is called by:
  9334 ;;		_printf
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text34
  9339  00D01C                     __ptext34:
  9340                           	opt stack 0
  9341  00D01C                     ___fttol:
  9342                           	opt stack 25
  9343                           
  9344                           ;incstack = 0
  9345  00D01C  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  9346  00D020  6A30               	clrf	(??___fttol+1)& (0+255),c
  9347  00D022  6A31               	clrf	(??___fttol+2)& (0+255),c
  9348  00D024  342C               	rlcf	___fttol@f1+1,w,c
  9349  00D026  362F               	rlcf	??___fttol& (0+255),f,c
  9350  00D028  E301               	bnc	u3481
  9351  00D02A  8030               	bsf	(??___fttol+1)& (0+255),0,c
  9352  00D02C                     u3481:
  9353  00D02C  502F               	movf	??___fttol,w,c
  9354  00D02E  6E39               	movwf	___fttol@exp1,c
  9355  00D030  5039               	movf	___fttol@exp1,w,c
  9356  00D032  A4D8               	btfss	status,2,c
  9357  00D034  D002               	goto	l4018
  9358  00D036  D039               	goto	l4042
  9359  00D038  D063               	goto	l1136
  9360  00D03A                     l4018:
  9361  00D03A  0E17               	movlw	23
  9362  00D03C  6E2F               	movwf	??___fttol& (0+255),c
  9363  00D03E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  9364  00D042  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  9365  00D046  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  9366  00D04A  282F               	incf	??___fttol,w,c
  9367  00D04C  6E33               	movwf	(??___fttol+4)& (0+255),c
  9368  00D04E  D004               	goto	u3500
  9369  00D050                     u3505:
  9370  00D050  90D8               	bcf	status,0,c
  9371  00D052  3232               	rrcf	??___fttol+3,f,c
  9372  00D054  3231               	rrcf	??___fttol+2,f,c
  9373  00D056  3230               	rrcf	??___fttol+1,f,c
  9374  00D058                     u3500:
  9375  00D058  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  9376  00D05A  D7FA               	goto	u3505
  9377  00D05C  5030               	movf	??___fttol+1,w,c
  9378  00D05E  6E34               	movwf	___fttol@sign1,c
  9379  00D060  8E2C               	bsf	___fttol@f1+1,7,c
  9380  00D062  0EFF               	movlw	255
  9381  00D064  162B               	andwf	___fttol@f1,f,c
  9382  00D066  0EFF               	movlw	255
  9383  00D068  162C               	andwf	___fttol@f1+1,f,c
  9384  00D06A  0E00               	movlw	0
  9385  00D06C  162D               	andwf	___fttol@f1+2,f,c
  9386  00D06E  502B               	movf	___fttol@f1,w,c
  9387  00D070  6E35               	movwf	___fttol@lval,c
  9388  00D072  502C               	movf	___fttol@f1+1,w,c
  9389  00D074  6E36               	movwf	___fttol@lval+1,c
  9390  00D076  502D               	movf	___fttol@f1+2,w,c
  9391  00D078  6E37               	movwf	___fttol@lval+2,c
  9392  00D07A  6A38               	clrf	___fttol@lval+3,c
  9393  00D07C  0E8E               	movlw	142
  9394  00D07E  5E39               	subwf	___fttol@exp1,f,c
  9395  00D080  AE39               	btfss	___fttol@exp1,7,c
  9396  00D082  D010               	goto	l4040
  9397  00D084  5039               	movf	___fttol@exp1,w,c
  9398  00D086  0A80               	xorlw	128
  9399  00D088  0F8F               	addlw	143
  9400  00D08A  B0D8               	btfsc	status,0,c
  9401  00D08C  D003               	goto	l4036
  9402  00D08E  D00D               	goto	l4042
  9403  00D090  D037               	goto	l1136
  9404  00D092  D000               	goto	l4036
  9405  00D094                     l4036:
  9406  00D094  90D8               	bcf	status,0,c
  9407  00D096  3238               	rrcf	___fttol@lval+3,f,c
  9408  00D098  3237               	rrcf	___fttol@lval+2,f,c
  9409  00D09A  3236               	rrcf	___fttol@lval+1,f,c
  9410  00D09C  3235               	rrcf	___fttol@lval,f,c
  9411  00D09E  3E39               	incfsz	___fttol@exp1,f,c
  9412  00D0A0  D7F9               	goto	l4036
  9413  00D0A2  D019               	goto	l4050
  9414  00D0A4                     l4040:
  9415  00D0A4  0E17               	movlw	23
  9416  00D0A6  6439               	cpfsgt	___fttol@exp1,c
  9417  00D0A8  D011               	goto	l4048
  9418  00D0AA                     l4042:
  9419  00D0AA  0E00               	movlw	0
  9420  00D0AC  6E2B               	movwf	?___fttol,c
  9421  00D0AE  0E00               	movlw	0
  9422  00D0B0  6E2C               	movwf	?___fttol+1,c
  9423  00D0B2  0E00               	movlw	0
  9424  00D0B4  6E2D               	movwf	?___fttol+2,c
  9425  00D0B6  0E00               	movlw	0
  9426  00D0B8  6E2E               	movwf	?___fttol+3,c
  9427  00D0BA  D022               	goto	l1136
  9428  00D0BC  D007               	goto	l4048
  9429  00D0BE                     l4046:
  9430  00D0BE  90D8               	bcf	status,0,c
  9431  00D0C0  3635               	rlcf	___fttol@lval,f,c
  9432  00D0C2  3636               	rlcf	___fttol@lval+1,f,c
  9433  00D0C4  3637               	rlcf	___fttol@lval+2,f,c
  9434  00D0C6  3638               	rlcf	___fttol@lval+3,f,c
  9435  00D0C8  0639               	decf	___fttol@exp1,f,c
  9436  00D0CA  D000               	goto	l4048
  9437  00D0CC                     l4048:
  9438  00D0CC  5039               	movf	___fttol@exp1,w,c
  9439  00D0CE  B4D8               	btfsc	status,2,c
  9440  00D0D0  D002               	goto	l4050
  9441  00D0D2  D7F5               	goto	l4046
  9442  00D0D4  D000               	goto	l4050
  9443  00D0D6                     l4050:
  9444  00D0D6  5034               	movf	___fttol@sign1,w,c
  9445  00D0D8  B4D8               	btfsc	status,2,c
  9446  00D0DA  D009               	goto	l4054
  9447  00D0DC  1E38               	comf	___fttol@lval+3,f,c
  9448  00D0DE  1E37               	comf	___fttol@lval+2,f,c
  9449  00D0E0  1E36               	comf	___fttol@lval+1,f,c
  9450  00D0E2  6C35               	negf	___fttol@lval,c
  9451  00D0E4  0E00               	movlw	0
  9452  00D0E6  2236               	addwfc	___fttol@lval+1,f,c
  9453  00D0E8  2237               	addwfc	___fttol@lval+2,f,c
  9454  00D0EA  2238               	addwfc	___fttol@lval+3,f,c
  9455  00D0EC  D000               	goto	l4054
  9456  00D0EE                     l4054:
  9457  00D0EE  C035  F02B         	movff	___fttol@lval,?___fttol
  9458  00D0F2  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  9459  00D0F6  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  9460  00D0FA  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  9461  00D0FE  D000               	goto	l1136
  9462  00D100                     l1136:
  9463  00D100  0012               	return		;funcret
  9464  00D102                     __end_of___fttol:
  9465                           	opt stack 0
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           intcon2	equ	0xFF1
  9473                           postinc0	equ	0xFEE
  9474                           wreg	equ	0xFE8
  9475                           postdec1	equ	0xFE5
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function ___ftsub *****************
  9485 ;; Defined at:
  9486 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  f1              3   57[COMRAM] float 
  9489 ;;  f2              3   60[COMRAM] float 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  3   57[COMRAM] float 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9501 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;Total ram usage:        6 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    2
  9508 ;; This function calls:
  9509 ;;		___ftadd
  9510 ;; This function is called by:
  9511 ;;		_printf
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text35
  9516  00C356                     __ptext35:
  9517                           	opt stack 0
  9518  00C356                     ___ftsub:
  9519                           	opt stack 23
  9520                           
  9521                           ;incstack = 0
  9522  00C356  503D               	movf	___ftsub@f2,w,c
  9523  00C358  103E               	iorwf	___ftsub@f2+1,w,c
  9524  00C35A  103F               	iorwf	___ftsub@f2+2,w,c
  9525  00C35C  B4D8               	btfsc	status,2,c
  9526  00C35E  D007               	goto	l3986
  9527  00C360  0E00               	movlw	0
  9528  00C362  1A3D               	xorwf	___ftsub@f2,f,c
  9529  00C364  0E00               	movlw	0
  9530  00C366  1A3E               	xorwf	___ftsub@f2+1,f,c
  9531  00C368  0E80               	movlw	128
  9532  00C36A  1A3F               	xorwf	___ftsub@f2+2,f,c
  9533  00C36C  D000               	goto	l3986
  9534  00C36E                     l3986:
  9535  00C36E  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  9536  00C372  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  9537  00C376  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  9538  00C37A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  9539  00C37E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  9540  00C382  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  9541  00C386  EC72  F06E         	call	___ftadd	;wreg free
  9542  00C38A  C02E  F03A         	movff	?___ftadd,?___ftsub
  9543  00C38E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  9544  00C392  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  9545  00C396  D000               	goto	l1132
  9546  00C398                     l1132:
  9547  00C398  0012               	return		;funcret
  9548  00C39A                     __end_of___ftsub:
  9549                           	opt stack 0
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodh	equ	0xFF4
  9555                           prodl	equ	0xFF3
  9556                           intcon2	equ	0xFF1
  9557                           postinc0	equ	0xFEE
  9558                           wreg	equ	0xFE8
  9559                           postdec1	equ	0xFE5
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           postdec2	equ	0xFDD
  9564                           fsr2h	equ	0xFDA
  9565                           fsr2l	equ	0xFD9
  9566                           status	equ	0xFD8
  9567                           
  9568 ;; *************** function ___ftadd *****************
  9569 ;; Defined at:
  9570 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  f1              3   45[COMRAM] float 
  9573 ;;  f2              3   48[COMRAM] float 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  exp1            1   56[COMRAM] unsigned char 
  9576 ;;  exp2            1   55[COMRAM] unsigned char 
  9577 ;;  sign            1   54[COMRAM] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  3   45[COMRAM] float 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:       12 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    1
  9594 ;; This function calls:
  9595 ;;		___ftpack
  9596 ;; This function is called by:
  9597 ;;		_printf
  9598 ;;		___ftsub
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           	psect	text36
  9603  00DCE4                     __ptext36:
  9604                           	opt stack 0
  9605  00DCE4                     ___ftadd:
  9606                           	opt stack 23
  9607                           
  9608                           ;incstack = 0
  9609  00DCE4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  9610  00DCE8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9611  00DCEA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9612  00DCEC  342F               	rlcf	___ftadd@f1+1,w,c
  9613  00DCEE  3634               	rlcf	??___ftadd& (0+255),f,c
  9614  00DCF0  E301               	bnc	u2631
  9615  00DCF2  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9616  00DCF4                     u2631:
  9617  00DCF4  5034               	movf	??___ftadd,w,c
  9618  00DCF6  6E39               	movwf	___ftadd@exp1,c
  9619  00DCF8  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  9620  00DCFC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9621  00DCFE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9622  00DD00  3432               	rlcf	___ftadd@f2+1,w,c
  9623  00DD02  3634               	rlcf	??___ftadd& (0+255),f,c
  9624  00DD04  E301               	bnc	u2641
  9625  00DD06  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9626  00DD08                     u2641:
  9627  00DD08  5034               	movf	??___ftadd,w,c
  9628  00DD0A  6E38               	movwf	___ftadd@exp2,c
  9629  00DD0C  5039               	movf	___ftadd@exp1,w,c
  9630  00DD0E  B4D8               	btfsc	status,2,c
  9631  00DD10  D00B               	goto	l1051
  9632  00DD12  5038               	movf	___ftadd@exp2,w,c
  9633  00DD14  5C39               	subwf	___ftadd@exp1,w,c
  9634  00DD16  B0D8               	btfsc	status,0,c
  9635  00DD18  D00E               	goto	l3536
  9636  00DD1A  5039               	movf	___ftadd@exp1,w,c
  9637  00DD1C  0800               	sublw	0
  9638  00DD1E  2438               	addwf	___ftadd@exp2,w,c
  9639  00DD20  6E34               	movwf	??___ftadd& (0+255),c
  9640  00DD22  0E18               	movlw	24
  9641  00DD24  6434               	cpfsgt	??___ftadd,c
  9642  00DD26  D007               	goto	l3536
  9643  00DD28                     l1051:
  9644  00DD28  C031  F02E         	movff	___ftadd@f2,?___ftadd
  9645  00DD2C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  9646  00DD30  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  9647  00DD34  D0B8               	goto	l1052
  9648  00DD36                     l3536:
  9649  00DD36  5038               	movf	___ftadd@exp2,w,c
  9650  00DD38  B4D8               	btfsc	status,2,c
  9651  00DD3A  D00B               	goto	l1055
  9652  00DD3C  5039               	movf	___ftadd@exp1,w,c
  9653  00DD3E  5C38               	subwf	___ftadd@exp2,w,c
  9654  00DD40  B0D8               	btfsc	status,0,c
  9655  00DD42  D00E               	goto	l3542
  9656  00DD44  5038               	movf	___ftadd@exp2,w,c
  9657  00DD46  0800               	sublw	0
  9658  00DD48  2439               	addwf	___ftadd@exp1,w,c
  9659  00DD4A  6E34               	movwf	??___ftadd& (0+255),c
  9660  00DD4C  0E18               	movlw	24
  9661  00DD4E  6434               	cpfsgt	??___ftadd,c
  9662  00DD50  D007               	goto	l3542
  9663  00DD52                     l1055:
  9664  00DD52  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  9665  00DD56  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  9666  00DD5A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  9667  00DD5E  D0A3               	goto	l1052
  9668  00DD60                     l3542:
  9669  00DD60  0E06               	movlw	6
  9670  00DD62  6E37               	movwf	___ftadd@sign,c
  9671  00DD64  AE30               	btfss	___ftadd@f1+2,7,c
  9672  00DD66  D002               	goto	l3548
  9673  00DD68  8E37               	bsf	___ftadd@sign,7,c
  9674  00DD6A  D000               	goto	l3548
  9675  00DD6C                     l3548:
  9676  00DD6C  BE33               	btfsc	___ftadd@f2+2,7,c
  9677  00DD6E  8C37               	bsf	___ftadd@sign,6,c
  9678  00DD70  8E2F               	bsf	___ftadd@f1+1,7,c
  9679  00DD72  0EFF               	movlw	255
  9680  00DD74  162E               	andwf	___ftadd@f1,f,c
  9681  00DD76  0EFF               	movlw	255
  9682  00DD78  162F               	andwf	___ftadd@f1+1,f,c
  9683  00DD7A  0E00               	movlw	0
  9684  00DD7C  1630               	andwf	___ftadd@f1+2,f,c
  9685  00DD7E  8E32               	bsf	___ftadd@f2+1,7,c
  9686  00DD80  0EFF               	movlw	255
  9687  00DD82  1631               	andwf	___ftadd@f2,f,c
  9688  00DD84  0EFF               	movlw	255
  9689  00DD86  1632               	andwf	___ftadd@f2+1,f,c
  9690  00DD88  0E00               	movlw	0
  9691  00DD8A  1633               	andwf	___ftadd@f2+2,f,c
  9692  00DD8C  5038               	movf	___ftadd@exp2,w,c
  9693  00DD8E  5C39               	subwf	___ftadd@exp1,w,c
  9694  00DD90  B0D8               	btfsc	status,0,c
  9695  00DD92  D01E               	goto	l3568
  9696  00DD94                     l3558:
  9697  00DD94  90D8               	bcf	status,0,c
  9698  00DD96  3631               	rlcf	___ftadd@f2,f,c
  9699  00DD98  3632               	rlcf	___ftadd@f2+1,f,c
  9700  00DD9A  3633               	rlcf	___ftadd@f2+2,f,c
  9701  00DD9C  0638               	decf	___ftadd@exp2,f,c
  9702  00DD9E  5039               	movf	___ftadd@exp1,w,c
  9703  00DDA0  1838               	xorwf	___ftadd@exp2,w,c
  9704  00DDA2  B4D8               	btfsc	status,2,c
  9705  00DDA4  D00F               	goto	l3566
  9706  00DDA6  0637               	decf	___ftadd@sign,f,c
  9707  00DDA8  C037  F034         	movff	___ftadd@sign,??___ftadd
  9708  00DDAC  0E07               	movlw	7
  9709  00DDAE  1634               	andwf	??___ftadd,f,c
  9710  00DDB0  B4D8               	btfsc	status,2,c
  9711  00DDB2  D008               	goto	l3566
  9712  00DDB4  D7EF               	goto	l3558
  9713  00DDB6  D006               	goto	l3566
  9714  00DDB8                     l3564:
  9715  00DDB8  90D8               	bcf	status,0,c
  9716  00DDBA  3230               	rrcf	___ftadd@f1+2,f,c
  9717  00DDBC  322F               	rrcf	___ftadd@f1+1,f,c
  9718  00DDBE  322E               	rrcf	___ftadd@f1,f,c
  9719  00DDC0  2A39               	incf	___ftadd@exp1,f,c
  9720  00DDC2  D000               	goto	l3566
  9721  00DDC4                     l3566:
  9722  00DDC4  5038               	movf	___ftadd@exp2,w,c
  9723  00DDC6  1839               	xorwf	___ftadd@exp1,w,c
  9724  00DDC8  B4D8               	btfsc	status,2,c
  9725  00DDCA  D024               	goto	l1066
  9726  00DDCC  D7F5               	goto	l3564
  9727  00DDCE  D022               	goto	l1066
  9728  00DDD0                     l3568:
  9729  00DDD0  5039               	movf	___ftadd@exp1,w,c
  9730  00DDD2  5C38               	subwf	___ftadd@exp2,w,c
  9731  00DDD4  B0D8               	btfsc	status,0,c
  9732  00DDD6  D01E               	goto	l1066
  9733  00DDD8                     l3570:
  9734  00DDD8  90D8               	bcf	status,0,c
  9735  00DDDA  362E               	rlcf	___ftadd@f1,f,c
  9736  00DDDC  362F               	rlcf	___ftadd@f1+1,f,c
  9737  00DDDE  3630               	rlcf	___ftadd@f1+2,f,c
  9738  00DDE0  0639               	decf	___ftadd@exp1,f,c
  9739  00DDE2  5039               	movf	___ftadd@exp1,w,c
  9740  00DDE4  1838               	xorwf	___ftadd@exp2,w,c
  9741  00DDE6  B4D8               	btfsc	status,2,c
  9742  00DDE8  D00F               	goto	l3578
  9743  00DDEA  0637               	decf	___ftadd@sign,f,c
  9744  00DDEC  C037  F034         	movff	___ftadd@sign,??___ftadd
  9745  00DDF0  0E07               	movlw	7
  9746  00DDF2  1634               	andwf	??___ftadd,f,c
  9747  00DDF4  B4D8               	btfsc	status,2,c
  9748  00DDF6  D008               	goto	l3578
  9749  00DDF8  D7EF               	goto	l3570
  9750  00DDFA  D006               	goto	l3578
  9751  00DDFC                     l3576:
  9752  00DDFC  90D8               	bcf	status,0,c
  9753  00DDFE  3233               	rrcf	___ftadd@f2+2,f,c
  9754  00DE00  3232               	rrcf	___ftadd@f2+1,f,c
  9755  00DE02  3231               	rrcf	___ftadd@f2,f,c
  9756  00DE04  2A38               	incf	___ftadd@exp2,f,c
  9757  00DE06  D000               	goto	l3578
  9758  00DE08                     l3578:
  9759  00DE08  5038               	movf	___ftadd@exp2,w,c
  9760  00DE0A  1839               	xorwf	___ftadd@exp1,w,c
  9761  00DE0C  B4D8               	btfsc	status,2,c
  9762  00DE0E  D002               	goto	l1066
  9763  00DE10  D7F5               	goto	l3576
  9764  00DE12  D000               	goto	l1066
  9765  00DE14                     l1066:
  9766  00DE14  AE37               	btfss	___ftadd@sign,7,c
  9767  00DE16  D00C               	goto	l1075
  9768  00DE18  0EFF               	movlw	255
  9769  00DE1A  1A2E               	xorwf	___ftadd@f1,f,c
  9770  00DE1C  0EFF               	movlw	255
  9771  00DE1E  1A2F               	xorwf	___ftadd@f1+1,f,c
  9772  00DE20  0EFF               	movlw	255
  9773  00DE22  1A30               	xorwf	___ftadd@f1+2,f,c
  9774  00DE24  0E01               	movlw	1
  9775  00DE26  262E               	addwf	___ftadd@f1,f,c
  9776  00DE28  0E00               	movlw	0
  9777  00DE2A  222F               	addwfc	___ftadd@f1+1,f,c
  9778  00DE2C  0E00               	movlw	0
  9779  00DE2E  2230               	addwfc	___ftadd@f1+2,f,c
  9780  00DE30                     l1075:
  9781  00DE30  AC37               	btfss	___ftadd@sign,6,c
  9782  00DE32  D00D               	goto	l3584
  9783  00DE34  0EFF               	movlw	255
  9784  00DE36  1A31               	xorwf	___ftadd@f2,f,c
  9785  00DE38  0EFF               	movlw	255
  9786  00DE3A  1A32               	xorwf	___ftadd@f2+1,f,c
  9787  00DE3C  0EFF               	movlw	255
  9788  00DE3E  1A33               	xorwf	___ftadd@f2+2,f,c
  9789  00DE40  0E01               	movlw	1
  9790  00DE42  2631               	addwf	___ftadd@f2,f,c
  9791  00DE44  0E00               	movlw	0
  9792  00DE46  2232               	addwfc	___ftadd@f2+1,f,c
  9793  00DE48  0E00               	movlw	0
  9794  00DE4A  2233               	addwfc	___ftadd@f2+2,f,c
  9795  00DE4C  D000               	goto	l3584
  9796  00DE4E                     l3584:
  9797  00DE4E  0E00               	movlw	0
  9798  00DE50  6E37               	movwf	___ftadd@sign,c
  9799  00DE52  502E               	movf	___ftadd@f1,w,c
  9800  00DE54  2631               	addwf	___ftadd@f2,f,c
  9801  00DE56  502F               	movf	___ftadd@f1+1,w,c
  9802  00DE58  2232               	addwfc	___ftadd@f2+1,f,c
  9803  00DE5A  5030               	movf	___ftadd@f1+2,w,c
  9804  00DE5C  2233               	addwfc	___ftadd@f2+2,f,c
  9805  00DE5E  AE33               	btfss	___ftadd@f2+2,7,c
  9806  00DE60  D00F               	goto	l3594
  9807  00DE62  0EFF               	movlw	255
  9808  00DE64  1A31               	xorwf	___ftadd@f2,f,c
  9809  00DE66  0EFF               	movlw	255
  9810  00DE68  1A32               	xorwf	___ftadd@f2+1,f,c
  9811  00DE6A  0EFF               	movlw	255
  9812  00DE6C  1A33               	xorwf	___ftadd@f2+2,f,c
  9813  00DE6E  0E01               	movlw	1
  9814  00DE70  2631               	addwf	___ftadd@f2,f,c
  9815  00DE72  0E00               	movlw	0
  9816  00DE74  2232               	addwfc	___ftadd@f2+1,f,c
  9817  00DE76  0E00               	movlw	0
  9818  00DE78  2233               	addwfc	___ftadd@f2+2,f,c
  9819  00DE7A  0E01               	movlw	1
  9820  00DE7C  6E37               	movwf	___ftadd@sign,c
  9821  00DE7E  D000               	goto	l3594
  9822  00DE80                     l3594:
  9823  00DE80  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  9824  00DE84  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9825  00DE88  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9826  00DE8C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  9827  00DE90  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  9828  00DE94  EC5D  F066         	call	___ftpack	;wreg free
  9829  00DE98  C001  F02E         	movff	?___ftpack,?___ftadd
  9830  00DE9C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  9831  00DEA0  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  9832  00DEA4  D000               	goto	l1052
  9833  00DEA6                     l1052:
  9834  00DEA6  0012               	return		;funcret
  9835  00DEA8                     __end_of___ftadd:
  9836                           	opt stack 0
  9837                           tblptru	equ	0xFF8
  9838                           tblptrh	equ	0xFF7
  9839                           tblptrl	equ	0xFF6
  9840                           tablat	equ	0xFF5
  9841                           prodh	equ	0xFF4
  9842                           prodl	equ	0xFF3
  9843                           intcon2	equ	0xFF1
  9844                           postinc0	equ	0xFEE
  9845                           wreg	equ	0xFE8
  9846                           postdec1	equ	0xFE5
  9847                           fsr1l	equ	0xFE1
  9848                           indf2	equ	0xFDF
  9849                           postinc2	equ	0xFDE
  9850                           postdec2	equ	0xFDD
  9851                           fsr2h	equ	0xFDA
  9852                           fsr2l	equ	0xFD9
  9853                           status	equ	0xFD8
  9854                           
  9855 ;; *************** function ___ftneg *****************
  9856 ;; Defined at:
  9857 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  f1              3    0[COMRAM] float 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  3    0[COMRAM] float 
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9871 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9875 ;;Total ram usage:        3 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		_printf
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text37
  9885  00C008                     __ptext37:
  9886                           	opt stack 0
  9887  00C008                     ___ftneg:
  9888                           	opt stack 25
  9889                           
  9890                           ;incstack = 0
  9891  00C008  5001               	movf	___ftneg@f1,w,c
  9892  00C00A  1002               	iorwf	___ftneg@f1+1,w,c
  9893  00C00C  1003               	iorwf	___ftneg@f1+2,w,c
  9894  00C00E  B4D8               	btfsc	status,2,c
  9895  00C010  D006               	goto	l1125
  9896  00C012  0E00               	movlw	0
  9897  00C014  1A01               	xorwf	___ftneg@f1,f,c
  9898  00C016  0E00               	movlw	0
  9899  00C018  1A02               	xorwf	___ftneg@f1+1,f,c
  9900  00C01A  0E80               	movlw	128
  9901  00C01C  1A03               	xorwf	___ftneg@f1+2,f,c
  9902  00C01E                     l1125:
  9903  00C01E  C001  F001         	movff	___ftneg@f1,?___ftneg
  9904  00C022  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9905  00C026  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9906  00C02A  0012               	return		;funcret
  9907  00C02C                     __end_of___ftneg:
  9908                           	opt stack 0
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon2	equ	0xFF1
  9916                           postinc0	equ	0xFEE
  9917                           wreg	equ	0xFE8
  9918                           postdec1	equ	0xFE5
  9919                           fsr1l	equ	0xFE1
  9920                           indf2	equ	0xFDF
  9921                           postinc2	equ	0xFDE
  9922                           postdec2	equ	0xFDD
  9923                           fsr2h	equ	0xFDA
  9924                           fsr2l	equ	0xFD9
  9925                           status	equ	0xFD8
  9926                           
  9927 ;; *************** function ___ftge *****************
  9928 ;; Defined at:
  9929 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;  ff1             3    0[COMRAM] float 
  9932 ;;  ff2             3    3[COMRAM] float 
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;		None
  9935 ;; Return value:  Size  Location     Type
  9936 ;;		None               void
  9937 ;; Registers used:
  9938 ;;		wreg, status,2, status,0
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9944 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;Total ram usage:        9 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; This function calls:
  9951 ;;		Nothing
  9952 ;; This function is called by:
  9953 ;;		_main
  9954 ;;		_update_LCD_misc
  9955 ;;		_printf
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           	psect	text38
  9960  00CA14                     __ptext38:
  9961                           	opt stack 0
  9962  00CA14                     ___ftge:
  9963                           	opt stack 30
  9964                           
  9965                           ;incstack = 0
  9966  00CA14  AE03               	btfss	___ftge@ff1+2,7,c
  9967  00CA16  D017               	goto	l3994
  9968  00CA18  C001  F007         	movff	___ftge@ff1,??___ftge
  9969  00CA1C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9970  00CA20  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9971  00CA24  1E07               	comf	??___ftge,f,c
  9972  00CA26  1E08               	comf	??___ftge+1,f,c
  9973  00CA28  1E09               	comf	??___ftge+2,f,c
  9974  00CA2A  2A07               	incf	??___ftge,f,c
  9975  00CA2C  0E00               	movlw	0
  9976  00CA2E  2208               	addwfc	??___ftge+1,f,c
  9977  00CA30  2209               	addwfc	??___ftge+2,f,c
  9978  00CA32  0E00               	movlw	0
  9979  00CA34  2407               	addwf	??___ftge,w,c
  9980  00CA36  6E01               	movwf	___ftge@ff1,c
  9981  00CA38  0E00               	movlw	0
  9982  00CA3A  2008               	addwfc	??___ftge+1,w,c
  9983  00CA3C  6E02               	movwf	___ftge@ff1+1,c
  9984  00CA3E  0E80               	movlw	128
  9985  00CA40  2009               	addwfc	??___ftge+2,w,c
  9986  00CA42  6E03               	movwf	___ftge@ff1+2,c
  9987  00CA44  D000               	goto	l3994
  9988  00CA46                     l3994:
  9989  00CA46  AE06               	btfss	___ftge@ff2+2,7,c
  9990  00CA48  D017               	goto	l3998
  9991  00CA4A  C004  F007         	movff	___ftge@ff2,??___ftge
  9992  00CA4E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9993  00CA52  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9994  00CA56  1E07               	comf	??___ftge,f,c
  9995  00CA58  1E08               	comf	??___ftge+1,f,c
  9996  00CA5A  1E09               	comf	??___ftge+2,f,c
  9997  00CA5C  2A07               	incf	??___ftge,f,c
  9998  00CA5E  0E00               	movlw	0
  9999  00CA60  2208               	addwfc	??___ftge+1,f,c
 10000  00CA62  2209               	addwfc	??___ftge+2,f,c
 10001  00CA64  0E00               	movlw	0
 10002  00CA66  2407               	addwf	??___ftge,w,c
 10003  00CA68  6E04               	movwf	___ftge@ff2,c
 10004  00CA6A  0E00               	movlw	0
 10005  00CA6C  2008               	addwfc	??___ftge+1,w,c
 10006  00CA6E  6E05               	movwf	___ftge@ff2+1,c
 10007  00CA70  0E80               	movlw	128
 10008  00CA72  2009               	addwfc	??___ftge+2,w,c
 10009  00CA74  6E06               	movwf	___ftge@ff2+2,c
 10010  00CA76  D000               	goto	l3998
 10011  00CA78                     l3998:
 10012  00CA78  0E00               	movlw	0
 10013  00CA7A  1A01               	xorwf	___ftge@ff1,f,c
 10014  00CA7C  0E00               	movlw	0
 10015  00CA7E  1A02               	xorwf	___ftge@ff1+1,f,c
 10016  00CA80  0E80               	movlw	128
 10017  00CA82  1A03               	xorwf	___ftge@ff1+2,f,c
 10018  00CA84  0E00               	movlw	0
 10019  00CA86  1A04               	xorwf	___ftge@ff2,f,c
 10020  00CA88  0E00               	movlw	0
 10021  00CA8A  1A05               	xorwf	___ftge@ff2+1,f,c
 10022  00CA8C  0E80               	movlw	128
 10023  00CA8E  1A06               	xorwf	___ftge@ff2+2,f,c
 10024  00CA90  5004               	movf	___ftge@ff2,w,c
 10025  00CA92  5C01               	subwf	___ftge@ff1,w,c
 10026  00CA94  5005               	movf	___ftge@ff2+1,w,c
 10027  00CA96  5802               	subwfb	___ftge@ff1+1,w,c
 10028  00CA98  5006               	movf	___ftge@ff2+2,w,c
 10029  00CA9A  5803               	subwfb	___ftge@ff1+2,w,c
 10030  00CA9C  B0D8               	btfsc	status,0,c
 10031  00CA9E  D002               	goto	l4004
 10032  00CAA0  90D8               	bcf	status,0,c
 10033  00CAA2  D002               	goto	l1109
 10034  00CAA4                     l4004:
 10035  00CAA4  80D8               	bsf	status,0,c
 10036  00CAA6  D000               	goto	l1109
 10037  00CAA8                     l1109:
 10038  00CAA8  0012               	return		;funcret
 10039  00CAAA                     __end_of___ftge:
 10040                           	opt stack 0
 10041                           tblptru	equ	0xFF8
 10042                           tblptrh	equ	0xFF7
 10043                           tblptrl	equ	0xFF6
 10044                           tablat	equ	0xFF5
 10045                           prodh	equ	0xFF4
 10046                           prodl	equ	0xFF3
 10047                           intcon2	equ	0xFF1
 10048                           postinc0	equ	0xFEE
 10049                           wreg	equ	0xFE8
 10050                           postdec1	equ	0xFE5
 10051                           fsr1l	equ	0xFE1
 10052                           indf2	equ	0xFDF
 10053                           postinc2	equ	0xFDE
 10054                           postdec2	equ	0xFDD
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           
 10059 ;; *************** function _get_full_ADC *****************
 10060 ;; Defined at:
 10061 ;;		line 451 in file "Lab8p1.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  result          2    4[COMRAM] int 
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  2    0[COMRAM] unsigned int 
 10068 ;; Registers used:
 10069 ;;		wreg, status,2, status,0
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;Total ram usage:        6 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; This function calls:
 10082 ;;		Nothing
 10083 ;; This function is called by:
 10084 ;;		_main
 10085 ;;		_update_LCD_misc
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text39
 10090  00C02C                     __ptext39:
 10091                           	opt stack 0
 10092  00C02C                     _get_full_ADC:
 10093                           	opt stack 30
 10094                           
 10095                           ;Lab8p1.c: 453: int result;
 10096                           ;Lab8p1.c: 454: ADCON0bits.GO=1;
 10097                           
 10098                           ;incstack = 0
 10099  00C02C  82C2               	bsf	4034,1,c	;volatile
 10100                           
 10101                           ;Lab8p1.c: 455: while(ADCON0bits.DONE==1);
 10102  00C02E  D000               	goto	l415
 10103  00C030                     l415:
 10104  00C030  B2C2               	btfsc	4034,1,c	;volatile
 10105  00C032  D7FE               	goto	l415
 10106                           
 10107                           ;Lab8p1.c: 456: result = (ADRESH * 0x100) + ADRESL;
 10108  00C034  50C4               	movf	4036,w,c	;volatile
 10109  00C036  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
 10110  00C038  6A03               	clrf	??_get_full_ADC& (0+255),c
 10111  00C03A  50C3               	movf	4035,w,c	;volatile
 10112  00C03C  2403               	addwf	??_get_full_ADC,w,c
 10113  00C03E  6E05               	movwf	get_full_ADC@result,c
 10114  00C040  0E00               	movlw	0
 10115  00C042  2004               	addwfc	??_get_full_ADC+1,w,c
 10116  00C044  6E06               	movwf	get_full_ADC@result+1,c
 10117                           
 10118                           ;Lab8p1.c: 458: return result;
 10119  00C046  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
 10120  00C04A  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 10121  00C04E  D000               	goto	l418
 10122  00C050                     l418:
 10123  00C050  0012               	return		;funcret
 10124  00C052                     __end_of_get_full_ADC:
 10125                           	opt stack 0
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon2	equ	0xFF1
 10133                           postinc0	equ	0xFEE
 10134                           wreg	equ	0xFE8
 10135                           postdec1	equ	0xFE5
 10136                           fsr1l	equ	0xFE1
 10137                           indf2	equ	0xFDF
 10138                           postinc2	equ	0xFDE
 10139                           postdec2	equ	0xFDD
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function ___ftdiv *****************
 10145 ;; Defined at:
 10146 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  f1              3   24[COMRAM] float 
 10149 ;;  f2              3   27[COMRAM] float 
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  f3              3   34[COMRAM] float 
 10152 ;;  sign            1   38[COMRAM] unsigned char 
 10153 ;;  exp             1   37[COMRAM] unsigned char 
 10154 ;;  cntr            1   33[COMRAM] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  3   24[COMRAM] float 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0, cstack
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10164 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;Total ram usage:       15 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    1
 10171 ;; This function calls:
 10172 ;;		___ftpack
 10173 ;; This function is called by:
 10174 ;;		_main
 10175 ;;		_update_LCD_misc
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text40
 10180  00CF3A                     __ptext40:
 10181                           	opt stack 0
 10182  00CF3A                     ___ftdiv:
 10183                           	opt stack 29
 10184                           
 10185                           ;incstack = 0
 10186  00CF3A  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
 10187  00CF3E  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 10188  00CF40  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 10189  00CF42  341A               	rlcf	___ftdiv@f1+1,w,c
 10190  00CF44  361F               	rlcf	??___ftdiv& (0+255),f,c
 10191  00CF46  E301               	bnc	u4261
 10192  00CF48  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 10193  00CF4A                     u4261:
 10194  00CF4A  501F               	movf	??___ftdiv,w,c
 10195  00CF4C  6E26               	movwf	___ftdiv@exp,c
 10196  00CF4E  5026               	movf	___ftdiv@exp,w,c
 10197  00CF50  A4D8               	btfss	status,2,c
 10198  00CF52  D002               	goto	l4454
 10199  00CF54  D00E               	goto	l4456
 10200  00CF56  D061               	goto	l1083
 10201  00CF58                     l4454:
 10202  00CF58  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
 10203  00CF5C  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 10204  00CF5E  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 10205  00CF60  341D               	rlcf	___ftdiv@f2+1,w,c
 10206  00CF62  361F               	rlcf	??___ftdiv& (0+255),f,c
 10207  00CF64  E301               	bnc	u4281
 10208  00CF66  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 10209  00CF68                     u4281:
 10210  00CF68  501F               	movf	??___ftdiv,w,c
 10211  00CF6A  6E27               	movwf	___ftdiv@sign,c
 10212  00CF6C  5027               	movf	___ftdiv@sign,w,c
 10213  00CF6E  A4D8               	btfss	status,2,c
 10214  00CF70  D007               	goto	l4460
 10215  00CF72                     l4456:
 10216  00CF72  0E00               	movlw	0
 10217  00CF74  6E19               	movwf	?___ftdiv,c
 10218  00CF76  0E00               	movlw	0
 10219  00CF78  6E1A               	movwf	?___ftdiv+1,c
 10220  00CF7A  0E00               	movlw	0
 10221  00CF7C  6E1B               	movwf	?___ftdiv+2,c
 10222  00CF7E  D04D               	goto	l1083
 10223  00CF80                     l4460:
 10224  00CF80  0E00               	movlw	0
 10225  00CF82  6E23               	movwf	___ftdiv@f3,c
 10226  00CF84  0E00               	movlw	0
 10227  00CF86  6E24               	movwf	___ftdiv@f3+1,c
 10228  00CF88  0E00               	movlw	0
 10229  00CF8A  6E25               	movwf	___ftdiv@f3+2,c
 10230  00CF8C  5027               	movf	___ftdiv@sign,w,c
 10231  00CF8E  0F89               	addlw	137
 10232  00CF90  5E26               	subwf	___ftdiv@exp,f,c
 10233  00CF92  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
 10234  00CF96  501E               	movf	___ftdiv@f2+2,w,c
 10235  00CF98  1A27               	xorwf	___ftdiv@sign,f,c
 10236  00CF9A  0E80               	movlw	128
 10237  00CF9C  1627               	andwf	___ftdiv@sign,f,c
 10238  00CF9E  8E1A               	bsf	___ftdiv@f1+1,7,c
 10239  00CFA0  0EFF               	movlw	255
 10240  00CFA2  1619               	andwf	___ftdiv@f1,f,c
 10241  00CFA4  0EFF               	movlw	255
 10242  00CFA6  161A               	andwf	___ftdiv@f1+1,f,c
 10243  00CFA8  0E00               	movlw	0
 10244  00CFAA  161B               	andwf	___ftdiv@f1+2,f,c
 10245  00CFAC  8E1D               	bsf	___ftdiv@f2+1,7,c
 10246  00CFAE  0EFF               	movlw	255
 10247  00CFB0  161C               	andwf	___ftdiv@f2,f,c
 10248  00CFB2  0EFF               	movlw	255
 10249  00CFB4  161D               	andwf	___ftdiv@f2+1,f,c
 10250  00CFB6  0E00               	movlw	0
 10251  00CFB8  161E               	andwf	___ftdiv@f2+2,f,c
 10252  00CFBA  0E18               	movlw	24
 10253  00CFBC  6E22               	movwf	___ftdiv@cntr,c
 10254  00CFBE  D000               	goto	l4480
 10255  00CFC0                     l4480:
 10256  00CFC0  90D8               	bcf	status,0,c
 10257  00CFC2  3623               	rlcf	___ftdiv@f3,f,c
 10258  00CFC4  3624               	rlcf	___ftdiv@f3+1,f,c
 10259  00CFC6  3625               	rlcf	___ftdiv@f3+2,f,c
 10260  00CFC8  501C               	movf	___ftdiv@f2,w,c
 10261  00CFCA  5C19               	subwf	___ftdiv@f1,w,c
 10262  00CFCC  501D               	movf	___ftdiv@f2+1,w,c
 10263  00CFCE  581A               	subwfb	___ftdiv@f1+1,w,c
 10264  00CFD0  501E               	movf	___ftdiv@f2+2,w,c
 10265  00CFD2  581B               	subwfb	___ftdiv@f1+2,w,c
 10266  00CFD4  A0D8               	btfss	status,0,c
 10267  00CFD6  D007               	goto	l1086
 10268  00CFD8  501C               	movf	___ftdiv@f2,w,c
 10269  00CFDA  5E19               	subwf	___ftdiv@f1,f,c
 10270  00CFDC  501D               	movf	___ftdiv@f2+1,w,c
 10271  00CFDE  5A1A               	subwfb	___ftdiv@f1+1,f,c
 10272  00CFE0  501E               	movf	___ftdiv@f2+2,w,c
 10273  00CFE2  5A1B               	subwfb	___ftdiv@f1+2,f,c
 10274  00CFE4  8023               	bsf	___ftdiv@f3,0,c
 10275  00CFE6                     l1086:
 10276  00CFE6  90D8               	bcf	status,0,c
 10277  00CFE8  3619               	rlcf	___ftdiv@f1,f,c
 10278  00CFEA  361A               	rlcf	___ftdiv@f1+1,f,c
 10279  00CFEC  361B               	rlcf	___ftdiv@f1+2,f,c
 10280  00CFEE  2E22               	decfsz	___ftdiv@cntr,f,c
 10281  00CFF0  D7E7               	goto	l4480
 10282  00CFF2  D000               	goto	l4490
 10283  00CFF4                     l4490:
 10284  00CFF4  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
 10285  00CFF8  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10286  00CFFC  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10287  00D000  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
 10288  00D004  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
 10289  00D008  EC5D  F066         	call	___ftpack	;wreg free
 10290  00D00C  C001  F019         	movff	?___ftpack,?___ftdiv
 10291  00D010  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
 10292  00D014  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
 10293  00D018  D000               	goto	l1083
 10294  00D01A                     l1083:
 10295  00D01A  0012               	return		;funcret
 10296  00D01C                     __end_of___ftdiv:
 10297                           	opt stack 0
 10298                           tblptru	equ	0xFF8
 10299                           tblptrh	equ	0xFF7
 10300                           tblptrl	equ	0xFF6
 10301                           tablat	equ	0xFF5
 10302                           prodh	equ	0xFF4
 10303                           prodl	equ	0xFF3
 10304                           intcon2	equ	0xFF1
 10305                           postinc0	equ	0xFEE
 10306                           wreg	equ	0xFE8
 10307                           postdec1	equ	0xFE5
 10308                           fsr1l	equ	0xFE1
 10309                           indf2	equ	0xFDF
 10310                           postinc2	equ	0xFDE
 10311                           postdec2	equ	0xFDD
 10312                           fsr2h	equ	0xFDA
 10313                           fsr2l	equ	0xFD9
 10314                           status	equ	0xFD8
 10315                           
 10316 ;; *************** function ___awtoft *****************
 10317 ;; Defined at:
 10318 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  c               2   20[COMRAM] int 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;  sign            1   23[COMRAM] unsigned char 
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  3   20[COMRAM] float 
 10325 ;; Registers used:
 10326 ;;		wreg, status,2, status,0, cstack
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10332 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10335 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10336 ;;Total ram usage:        4 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    1
 10339 ;; This function calls:
 10340 ;;		___ftpack
 10341 ;; This function is called by:
 10342 ;;		_main
 10343 ;;		_update_LCD_misc
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text41
 10348  00C18E                     __ptext41:
 10349                           	opt stack 0
 10350  00C18E                     ___awtoft:
 10351                           	opt stack 29
 10352                           
 10353                           ;incstack = 0
 10354  00C18E  0E00               	movlw	0
 10355  00C190  6E18               	movwf	___awtoft@sign,c
 10356  00C192  AE16               	btfss	___awtoft@c+1,7,c
 10357  00C194  D007               	goto	l4502
 10358  00C196  6C15               	negf	___awtoft@c,c
 10359  00C198  1E16               	comf	___awtoft@c+1,f,c
 10360  00C19A  B0D8               	btfsc	status,0,c
 10361  00C19C  2A16               	incf	___awtoft@c+1,f,c
 10362  00C19E  0E01               	movlw	1
 10363  00C1A0  6E18               	movwf	___awtoft@sign,c
 10364  00C1A2  D000               	goto	l4502
 10365  00C1A4                     l4502:
 10366  00C1A4  C015  F001         	movff	___awtoft@c,___ftpack@arg
 10367  00C1A8  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10368  00C1AC  6A03               	clrf	___ftpack@arg+2,c
 10369  00C1AE  0E8E               	movlw	142
 10370  00C1B0  6E04               	movwf	___ftpack@exp,c
 10371  00C1B2  C018  F005         	movff	___awtoft@sign,___ftpack@sign
 10372  00C1B6  EC5D  F066         	call	___ftpack	;wreg free
 10373  00C1BA  C001  F015         	movff	?___ftpack,?___awtoft
 10374  00C1BE  C002  F016         	movff	?___ftpack+1,?___awtoft+1
 10375  00C1C2  C003  F017         	movff	?___ftpack+2,?___awtoft+2
 10376  00C1C6  D000               	goto	l904
 10377  00C1C8                     l904:
 10378  00C1C8  0012               	return		;funcret
 10379  00C1CA                     __end_of___awtoft:
 10380                           	opt stack 0
 10381                           tblptru	equ	0xFF8
 10382                           tblptrh	equ	0xFF7
 10383                           tblptrl	equ	0xFF6
 10384                           tablat	equ	0xFF5
 10385                           prodh	equ	0xFF4
 10386                           prodl	equ	0xFF3
 10387                           intcon2	equ	0xFF1
 10388                           postinc0	equ	0xFEE
 10389                           wreg	equ	0xFE8
 10390                           postdec1	equ	0xFE5
 10391                           fsr1l	equ	0xFE1
 10392                           indf2	equ	0xFDF
 10393                           postinc2	equ	0xFDE
 10394                           postdec2	equ	0xFDD
 10395                           fsr2h	equ	0xFDA
 10396                           fsr2l	equ	0xFD9
 10397                           status	equ	0xFD8
 10398                           
 10399 ;; *************** function ___ftpack *****************
 10400 ;; Defined at:
 10401 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;  arg             3    0[COMRAM] unsigned um
 10404 ;;  exp             1    3[COMRAM] unsigned char 
 10405 ;;  sign            1    4[COMRAM] unsigned char 
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  3    0[COMRAM] float 
 10410 ;; Registers used:
 10411 ;;		wreg, status,2, status,0
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10417 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;Total ram usage:        8 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		___awtoft
 10427 ;;		___ftadd
 10428 ;;		___ftdiv
 10429 ;;		___ftmul
 10430 ;;		___lltoft
 10431 ;; This function uses a non-reentrant model
 10432 ;;
 10433                           
 10434                           	psect	text42
 10435  00CCBA                     __ptext42:
 10436                           	opt stack 0
 10437  00CCBA                     ___ftpack:
 10438                           	opt stack 29
 10439                           
 10440                           ;incstack = 0
 10441  00CCBA  5004               	movf	___ftpack@exp,w,c
 10442  00CCBC  B4D8               	btfsc	status,2,c
 10443  00CCBE  D005               	goto	l3472
 10444  00CCC0  5001               	movf	___ftpack@arg,w,c
 10445  00CCC2  1002               	iorwf	___ftpack@arg+1,w,c
 10446  00CCC4  1003               	iorwf	___ftpack@arg+2,w,c
 10447  00CCC6  A4D8               	btfss	status,2,c
 10448  00CCC8  D00E               	goto	l3478
 10449  00CCCA                     l3472:
 10450  00CCCA  0E00               	movlw	0
 10451  00CCCC  6E01               	movwf	?___ftpack,c
 10452  00CCCE  0E00               	movlw	0
 10453  00CCD0  6E02               	movwf	?___ftpack+1,c
 10454  00CCD2  0E00               	movlw	0
 10455  00CCD4  6E03               	movwf	?___ftpack+2,c
 10456  00CCD6  D053               	goto	l1011
 10457  00CCD8  D006               	goto	l3478
 10458  00CCDA                     l3476:
 10459  00CCDA  2A04               	incf	___ftpack@exp,f,c
 10460  00CCDC  90D8               	bcf	status,0,c
 10461  00CCDE  3203               	rrcf	___ftpack@arg+2,f,c
 10462  00CCE0  3202               	rrcf	___ftpack@arg+1,f,c
 10463  00CCE2  3201               	rrcf	___ftpack@arg,f,c
 10464  00CCE4  D000               	goto	l3478
 10465  00CCE6                     l3478:
 10466  00CCE6  0E00               	movlw	0
 10467  00CCE8  1401               	andwf	___ftpack@arg,w,c
 10468  00CCEA  6E06               	movwf	??___ftpack& (0+255),c
 10469  00CCEC  0E00               	movlw	0
 10470  00CCEE  1402               	andwf	___ftpack@arg+1,w,c
 10471  00CCF0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10472  00CCF2  0EFE               	movlw	254
 10473  00CCF4  1403               	andwf	___ftpack@arg+2,w,c
 10474  00CCF6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10475  00CCF8  5006               	movf	??___ftpack,w,c
 10476  00CCFA  1007               	iorwf	??___ftpack+1,w,c
 10477  00CCFC  1008               	iorwf	??___ftpack+2,w,c
 10478  00CCFE  B4D8               	btfsc	status,2,c
 10479  00CD00  D00E               	goto	l3484
 10480  00CD02  D7EB               	goto	l3476
 10481  00CD04  D00C               	goto	l3484
 10482  00CD06                     l3480:
 10483  00CD06  2A04               	incf	___ftpack@exp,f,c
 10484  00CD08  0E01               	movlw	1
 10485  00CD0A  2601               	addwf	___ftpack@arg,f,c
 10486  00CD0C  0E00               	movlw	0
 10487  00CD0E  2202               	addwfc	___ftpack@arg+1,f,c
 10488  00CD10  0E00               	movlw	0
 10489  00CD12  2203               	addwfc	___ftpack@arg+2,f,c
 10490  00CD14  90D8               	bcf	status,0,c
 10491  00CD16  3203               	rrcf	___ftpack@arg+2,f,c
 10492  00CD18  3202               	rrcf	___ftpack@arg+1,f,c
 10493  00CD1A  3201               	rrcf	___ftpack@arg,f,c
 10494  00CD1C  D000               	goto	l3484
 10495  00CD1E                     l3484:
 10496  00CD1E  0E00               	movlw	0
 10497  00CD20  1401               	andwf	___ftpack@arg,w,c
 10498  00CD22  6E06               	movwf	??___ftpack& (0+255),c
 10499  00CD24  0E00               	movlw	0
 10500  00CD26  1402               	andwf	___ftpack@arg+1,w,c
 10501  00CD28  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10502  00CD2A  0EFF               	movlw	255
 10503  00CD2C  1403               	andwf	___ftpack@arg+2,w,c
 10504  00CD2E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10505  00CD30  5006               	movf	??___ftpack,w,c
 10506  00CD32  1007               	iorwf	??___ftpack+1,w,c
 10507  00CD34  1008               	iorwf	??___ftpack+2,w,c
 10508  00CD36  B4D8               	btfsc	status,2,c
 10509  00CD38  D008               	goto	l3488
 10510  00CD3A  D7E5               	goto	l3480
 10511  00CD3C  D006               	goto	l3488
 10512  00CD3E                     l3486:
 10513  00CD3E  0604               	decf	___ftpack@exp,f,c
 10514  00CD40  90D8               	bcf	status,0,c
 10515  00CD42  3601               	rlcf	___ftpack@arg,f,c
 10516  00CD44  3602               	rlcf	___ftpack@arg+1,f,c
 10517  00CD46  3603               	rlcf	___ftpack@arg+2,f,c
 10518  00CD48  D000               	goto	l3488
 10519  00CD4A                     l3488:
 10520  00CD4A  BE02               	btfsc	___ftpack@arg+1,7,c
 10521  00CD4C  D004               	goto	l1022
 10522  00CD4E  0E02               	movlw	2
 10523  00CD50  6004               	cpfslt	___ftpack@exp,c
 10524  00CD52  D7F5               	goto	l3486
 10525  00CD54  D000               	goto	l1022
 10526  00CD56                     l1022:
 10527  00CD56  B004               	btfsc	___ftpack@exp,0,c
 10528  00CD58  D002               	goto	l3494
 10529  00CD5A  9E02               	bcf	___ftpack@arg+1,7,c
 10530  00CD5C  D000               	goto	l3494
 10531  00CD5E                     l3494:
 10532  00CD5E  90D8               	bcf	status,0,c
 10533  00CD60  3204               	rrcf	___ftpack@exp,f,c
 10534  00CD62  5004               	movf	___ftpack@exp,w,c
 10535  00CD64  1203               	iorwf	___ftpack@arg+2,f,c
 10536  00CD66  5005               	movf	___ftpack@sign,w,c
 10537  00CD68  B4D8               	btfsc	status,2,c
 10538  00CD6A  D002               	goto	l3500
 10539  00CD6C  8E03               	bsf	___ftpack@arg+2,7,c
 10540  00CD6E  D000               	goto	l3500
 10541  00CD70                     l3500:
 10542  00CD70  C001  F001         	movff	___ftpack@arg,?___ftpack
 10543  00CD74  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10544  00CD78  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10545  00CD7C  D000               	goto	l1011
 10546  00CD7E                     l1011:
 10547  00CD7E  0012               	return		;funcret
 10548  00CD80                     __end_of___ftpack:
 10549                           	opt stack 0
 10550                           tblptru	equ	0xFF8
 10551                           tblptrh	equ	0xFF7
 10552                           tblptrl	equ	0xFF6
 10553                           tablat	equ	0xFF5
 10554                           prodh	equ	0xFF4
 10555                           prodl	equ	0xFF3
 10556                           intcon2	equ	0xFF1
 10557                           postinc0	equ	0xFEE
 10558                           wreg	equ	0xFE8
 10559                           postdec1	equ	0xFE5
 10560                           fsr1l	equ	0xFE1
 10561                           indf2	equ	0xFDF
 10562                           postinc2	equ	0xFDE
 10563                           postdec2	equ	0xFDD
 10564                           fsr2h	equ	0xFDA
 10565                           fsr2l	equ	0xFD9
 10566                           status	equ	0xFD8
 10567                           
 10568 ;; *************** function _strcpy *****************
 10569 ;; Defined at:
 10570 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;  to              2    0[COMRAM] PTR unsigned char 
 10573 ;;		 -> NULL(0), buffer(31), 
 10574 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10575 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
 10576 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
 10577 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
 10578 ;;		 -> STR_2(6), STR_1(20), 
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  cp              2    4[COMRAM] PTR unsigned char 
 10581 ;;		 -> NULL(0), buffer(31), 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  2    0[COMRAM] PTR unsigned char 
 10584 ;; Registers used:
 10585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10591 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;Total ram usage:        6 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; This function calls:
 10598 ;;		Nothing
 10599 ;; This function is called by:
 10600 ;;		_Initialize_Screen
 10601 ;;		_WAIT_1_SEC
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           	psect	text43
 10606  00C15C                     __ptext43:
 10607                           	opt stack 0
 10608  00C15C                     _strcpy:
 10609                           	opt stack 27
 10610                           
 10611                           ;incstack = 0
 10612  00C15C  C001  F005         	movff	strcpy@to,strcpy@cp
 10613  00C160  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
 10614  00C164  D005               	goto	l4574
 10615  00C166                     l4572:
 10616  00C166  4A05               	infsnz	strcpy@cp,f,c
 10617  00C168  2A06               	incf	strcpy@cp+1,f,c
 10618  00C16A  4A03               	infsnz	strcpy@from,f,c
 10619  00C16C  2A04               	incf	strcpy@from+1,f,c
 10620  00C16E  D000               	goto	l4574
 10621  00C170                     l4574:
 10622  00C170  C003  FFF6         	movff	strcpy@from,tblptrl
 10623  00C174  C004  FFF7         	movff	strcpy@from+1,tblptrh
 10624  00C178                     	if	0	;tblptru may be non-zero
 10625  00C178                     	endif
 10626  00C178                     	if	0	;tblptru may be non-zero
 10627  00C178                     	endif
 10628  00C178  C005  FFD9         	movff	strcpy@cp,fsr2l
 10629  00C17C  C006  FFDA         	movff	strcpy@cp+1,fsr2h
 10630  00C180  0008               	tblrd		*
 10631  00C182  CFF5 FFDF          	movff	tablat,indf2
 10632  00C186  50DF               	movf	indf2,w,c
 10633  00C188  A4D8               	btfss	status,2,c
 10634  00C18A  D7ED               	goto	l4572
 10635                           
 10636                           ;	Return value of _strcpy is never used
 10637  00C18C  0012               	return		;funcret
 10638  00C18E                     __end_of_strcpy:
 10639                           	opt stack 0
 10640                           tblptru	equ	0xFF8
 10641                           tblptrh	equ	0xFF7
 10642                           tblptrl	equ	0xFF6
 10643                           tablat	equ	0xFF5
 10644                           prodh	equ	0xFF4
 10645                           prodl	equ	0xFF3
 10646                           intcon2	equ	0xFF1
 10647                           postinc0	equ	0xFEE
 10648                           wreg	equ	0xFE8
 10649                           postdec1	equ	0xFE5
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           postdec2	equ	0xFDD
 10654                           fsr2h	equ	0xFDA
 10655                           fsr2l	equ	0xFD9
 10656                           status	equ	0xFD8
 10657                           
 10658 ;; *************** function _Set_NSLT *****************
 10659 ;; Defined at:
 10660 ;;		line 551 in file "Lab8p1.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  color           1    wreg     unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;  color           1   53[COMRAM] unsigned char 
 10665 ;; Return value:  Size  Location     Type
 10666 ;;		None               void
 10667 ;; Registers used:
 10668 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;Total ram usage:        1 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    7
 10681 ;; This function calls:
 10682 ;;		_update_LCD_color
 10683 ;; This function is called by:
 10684 ;;		_Day_Mode
 10685 ;;		_Night_Mode
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text44
 10690  00C312                     __ptext44:
 10691                           	opt stack 0
 10692  00C312                     _Set_NSLT:
 10693                           	opt stack 22
 10694                           
 10695                           ;incstack = 0
 10696                           ;Set_NSLT@color stored from wreg
 10697  00C312  6E36               	movwf	Set_NSLT@color,c
 10698                           
 10699                           ;Lab8p1.c: 553: direction = 3;
 10700  00C314  0E03               	movlw	3
 10701  00C316  6E79               	movwf	_direction,c
 10702                           
 10703                           ;Lab8p1.c: 554: update_LCD_color(direction, color);
 10704  00C318  C036  F033         	movff	Set_NSLT@color,update_LCD_color@color
 10705  00C31C  5079               	movf	_direction,w,c
 10706  00C31E  EC65  F071         	call	_update_LCD_color
 10707                           
 10708                           ;Lab8p1.c: 555: switch (color)
 10709  00C322  D00A               	goto	l4952
 10710  00C324                     l459:
 10711  00C324  9881               	bcf	3969,4,c	;volatile
 10712  00C326  D001               	goto	L14
 10713  00C328                     l461:
 10714  00C328  8881               	bsf	3969,4,c	;volatile
 10715  00C32A                     L14:
 10716  00C32A  9A81               	bcf	3969,5,c	;volatile
 10717  00C32C  D013               	goto	l464
 10718  00C32E                     l462:
 10719  00C32E  9881               	bcf	3969,4,c	;volatile
 10720  00C330  D001               	goto	L15
 10721  00C332                     l463:
 10722  00C332  8881               	bsf	3969,4,c	;volatile
 10723  00C334                     L15:
 10724  00C334  8A81               	bsf	3969,5,c	;volatile
 10725                           
 10726                           ;Lab8p1.c: 561: }
 10727  00C336  D00E               	goto	l464
 10728  00C338                     l4952:
 10729  00C338  5036               	movf	Set_NSLT@color,w,c
 10730                           
 10731                           ; Switch size 1, requested type "space"
 10732                           ; Number of cases is 4, Range of values is 0 to 3
 10733                           ; switch strategies available:
 10734                           ; Name         Instructions Cycles
 10735                           ; simple_byte           13     7 (average)
 10736                           ;	Chosen strategy is simple_byte
 10737  00C33A  0A00               	xorlw	0	; case 0
 10738  00C33C  B4D8               	btfsc	status,2,c
 10739  00C33E  D7F2               	goto	l459
 10740  00C340  0A01               	xorlw	1	; case 1
 10741  00C342  B4D8               	btfsc	status,2,c
 10742  00C344  D7F1               	goto	l461
 10743  00C346  0A03               	xorlw	3	; case 2
 10744  00C348  B4D8               	btfsc	status,2,c
 10745  00C34A  D7F1               	goto	l462
 10746  00C34C  0A01               	xorlw	1	; case 3
 10747  00C34E  B4D8               	btfsc	status,2,c
 10748  00C350  D7F0               	goto	l463
 10749  00C352  D000               	goto	l464
 10750  00C354                     l464:
 10751  00C354  0012               	return		;funcret
 10752  00C356                     __end_of_Set_NSLT:
 10753                           	opt stack 0
 10754                           tblptru	equ	0xFF8
 10755                           tblptrh	equ	0xFF7
 10756                           tblptrl	equ	0xFF6
 10757                           tablat	equ	0xFF5
 10758                           prodh	equ	0xFF4
 10759                           prodl	equ	0xFF3
 10760                           intcon2	equ	0xFF1
 10761                           postinc0	equ	0xFEE
 10762                           wreg	equ	0xFE8
 10763                           postdec1	equ	0xFE5
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _Set_NS *****************
 10773 ;; Defined at:
 10774 ;;		line 538 in file "Lab8p1.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  color           1    wreg     unsigned char 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  color           1   53[COMRAM] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;		None               void
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;Total ram usage:        1 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    7
 10795 ;; This function calls:
 10796 ;;		_update_LCD_color
 10797 ;; This function is called by:
 10798 ;;		_Day_Mode
 10799 ;;		_Night_Mode
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           	psect	text45
 10804  00C2CE                     __ptext45:
 10805                           	opt stack 0
 10806  00C2CE                     _Set_NS:
 10807                           	opt stack 22
 10808                           
 10809                           ;incstack = 0
 10810                           ;Set_NS@color stored from wreg
 10811  00C2CE  6E36               	movwf	Set_NS@color,c
 10812                           
 10813                           ;Lab8p1.c: 540: direction = 2;
 10814  00C2D0  0E02               	movlw	2
 10815  00C2D2  6E79               	movwf	_direction,c
 10816                           
 10817                           ;Lab8p1.c: 541: update_LCD_color(direction, color);
 10818  00C2D4  C036  F033         	movff	Set_NS@color,update_LCD_color@color
 10819  00C2D8  5079               	movf	_direction,w,c
 10820  00C2DA  EC65  F071         	call	_update_LCD_color
 10821                           
 10822                           ;Lab8p1.c: 542: switch (color)
 10823  00C2DE  D00A               	goto	l4976
 10824  00C2E0                     l450:
 10825  00C2E0  9280               	bcf	3968,1,c	;volatile
 10826  00C2E2  D001               	goto	L16
 10827  00C2E4                     l452:
 10828  00C2E4  8280               	bsf	3968,1,c	;volatile
 10829  00C2E6                     L16:
 10830  00C2E6  9480               	bcf	3968,2,c	;volatile
 10831  00C2E8  D013               	goto	l455
 10832  00C2EA                     l453:
 10833  00C2EA  9280               	bcf	3968,1,c	;volatile
 10834  00C2EC  D001               	goto	L17
 10835  00C2EE                     l454:
 10836  00C2EE  8280               	bsf	3968,1,c	;volatile
 10837  00C2F0                     L17:
 10838  00C2F0  8480               	bsf	3968,2,c	;volatile
 10839                           
 10840                           ;Lab8p1.c: 548: }
 10841  00C2F2  D00E               	goto	l455
 10842  00C2F4                     l4976:
 10843  00C2F4  5036               	movf	Set_NS@color,w,c
 10844                           
 10845                           ; Switch size 1, requested type "space"
 10846                           ; Number of cases is 4, Range of values is 0 to 3
 10847                           ; switch strategies available:
 10848                           ; Name         Instructions Cycles
 10849                           ; simple_byte           13     7 (average)
 10850                           ;	Chosen strategy is simple_byte
 10851  00C2F6  0A00               	xorlw	0	; case 0
 10852  00C2F8  B4D8               	btfsc	status,2,c
 10853  00C2FA  D7F2               	goto	l450
 10854  00C2FC  0A01               	xorlw	1	; case 1
 10855  00C2FE  B4D8               	btfsc	status,2,c
 10856  00C300  D7F1               	goto	l452
 10857  00C302  0A03               	xorlw	3	; case 2
 10858  00C304  B4D8               	btfsc	status,2,c
 10859  00C306  D7F1               	goto	l453
 10860  00C308  0A01               	xorlw	1	; case 3
 10861  00C30A  B4D8               	btfsc	status,2,c
 10862  00C30C  D7F0               	goto	l454
 10863  00C30E  D000               	goto	l455
 10864  00C310                     l455:
 10865  00C310  0012               	return		;funcret
 10866  00C312                     __end_of_Set_NS:
 10867                           	opt stack 0
 10868                           tblptru	equ	0xFF8
 10869                           tblptrh	equ	0xFF7
 10870                           tblptrl	equ	0xFF6
 10871                           tablat	equ	0xFF5
 10872                           prodh	equ	0xFF4
 10873                           prodl	equ	0xFF3
 10874                           intcon2	equ	0xFF1
 10875                           postinc0	equ	0xFEE
 10876                           wreg	equ	0xFE8
 10877                           postdec1	equ	0xFE5
 10878                           fsr1l	equ	0xFE1
 10879                           indf2	equ	0xFDF
 10880                           postinc2	equ	0xFDE
 10881                           postdec2	equ	0xFDD
 10882                           fsr2h	equ	0xFDA
 10883                           fsr2l	equ	0xFD9
 10884                           status	equ	0xFD8
 10885                           
 10886 ;; *************** function _Set_EWLT *****************
 10887 ;; Defined at:
 10888 ;;		line 577 in file "Lab8p1.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;  color           1    wreg     unsigned char 
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  color           1   53[COMRAM] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;		None               void
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:        1 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    7
 10909 ;; This function calls:
 10910 ;;		_update_LCD_color
 10911 ;; This function is called by:
 10912 ;;		_Day_Mode
 10913 ;;		_Night_Mode
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text46
 10918  00C28A                     __ptext46:
 10919                           	opt stack 0
 10920  00C28A                     _Set_EWLT:
 10921                           	opt stack 22
 10922                           
 10923                           ;incstack = 0
 10924                           ;Set_EWLT@color stored from wreg
 10925  00C28A  6E36               	movwf	Set_EWLT@color,c
 10926                           
 10927                           ;Lab8p1.c: 579: direction = 1;
 10928  00C28C  0E01               	movlw	1
 10929  00C28E  6E79               	movwf	_direction,c
 10930                           
 10931                           ;Lab8p1.c: 580: update_LCD_color(direction, color);
 10932  00C290  C036  F033         	movff	Set_EWLT@color,update_LCD_color@color
 10933  00C294  5079               	movf	_direction,w,c
 10934  00C296  EC65  F071         	call	_update_LCD_color
 10935                           
 10936                           ;Lab8p1.c: 581: switch (color)
 10937  00C29A  D00A               	goto	l4968
 10938  00C29C                     l477:
 10939  00C29C  9284               	bcf	3972,1,c	;volatile
 10940  00C29E  D001               	goto	L18
 10941  00C2A0                     l479:
 10942  00C2A0  8284               	bsf	3972,1,c	;volatile
 10943  00C2A2                     L18:
 10944  00C2A2  9484               	bcf	3972,2,c	;volatile
 10945  00C2A4  D013               	goto	l482
 10946  00C2A6                     l480:
 10947  00C2A6  9284               	bcf	3972,1,c	;volatile
 10948  00C2A8  D001               	goto	L19
 10949  00C2AA                     l481:
 10950  00C2AA  8284               	bsf	3972,1,c	;volatile
 10951  00C2AC                     L19:
 10952  00C2AC  8484               	bsf	3972,2,c	;volatile
 10953                           
 10954                           ;Lab8p1.c: 587: }
 10955  00C2AE  D00E               	goto	l482
 10956  00C2B0                     l4968:
 10957  00C2B0  5036               	movf	Set_EWLT@color,w,c
 10958                           
 10959                           ; Switch size 1, requested type "space"
 10960                           ; Number of cases is 4, Range of values is 0 to 3
 10961                           ; switch strategies available:
 10962                           ; Name         Instructions Cycles
 10963                           ; simple_byte           13     7 (average)
 10964                           ;	Chosen strategy is simple_byte
 10965  00C2B2  0A00               	xorlw	0	; case 0
 10966  00C2B4  B4D8               	btfsc	status,2,c
 10967  00C2B6  D7F2               	goto	l477
 10968  00C2B8  0A01               	xorlw	1	; case 1
 10969  00C2BA  B4D8               	btfsc	status,2,c
 10970  00C2BC  D7F1               	goto	l479
 10971  00C2BE  0A03               	xorlw	3	; case 2
 10972  00C2C0  B4D8               	btfsc	status,2,c
 10973  00C2C2  D7F1               	goto	l480
 10974  00C2C4  0A01               	xorlw	1	; case 3
 10975  00C2C6  B4D8               	btfsc	status,2,c
 10976  00C2C8  D7F0               	goto	l481
 10977  00C2CA  D000               	goto	l482
 10978  00C2CC                     l482:
 10979  00C2CC  0012               	return		;funcret
 10980  00C2CE                     __end_of_Set_EWLT:
 10981                           	opt stack 0
 10982                           tblptru	equ	0xFF8
 10983                           tblptrh	equ	0xFF7
 10984                           tblptrl	equ	0xFF6
 10985                           tablat	equ	0xFF5
 10986                           prodh	equ	0xFF4
 10987                           prodl	equ	0xFF3
 10988                           intcon2	equ	0xFF1
 10989                           postinc0	equ	0xFEE
 10990                           wreg	equ	0xFE8
 10991                           postdec1	equ	0xFE5
 10992                           fsr1l	equ	0xFE1
 10993                           indf2	equ	0xFDF
 10994                           postinc2	equ	0xFDE
 10995                           postdec2	equ	0xFDD
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _Set_EW *****************
 11001 ;; Defined at:
 11002 ;;		line 564 in file "Lab8p1.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;  color           1    wreg     unsigned char 
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  color           1   53[COMRAM] unsigned char 
 11007 ;; Return value:  Size  Location     Type
 11008 ;;		None               void
 11009 ;; Registers used:
 11010 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;Total ram usage:        1 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    7
 11023 ;; This function calls:
 11024 ;;		_update_LCD_color
 11025 ;; This function is called by:
 11026 ;;		_Day_Mode
 11027 ;;		_Night_Mode
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           	psect	text47
 11032  00C246                     __ptext47:
 11033                           	opt stack 0
 11034  00C246                     _Set_EW:
 11035                           	opt stack 22
 11036                           
 11037                           ;incstack = 0
 11038                           ;Set_EW@color stored from wreg
 11039  00C246  6E36               	movwf	Set_EW@color,c
 11040                           
 11041                           ;Lab8p1.c: 566: direction = 0;
 11042  00C248  0E00               	movlw	0
 11043  00C24A  6E79               	movwf	_direction,c
 11044                           
 11045                           ;Lab8p1.c: 567: update_LCD_color(direction, color);
 11046  00C24C  C036  F033         	movff	Set_EW@color,update_LCD_color@color
 11047  00C250  5079               	movf	_direction,w,c
 11048  00C252  EC65  F071         	call	_update_LCD_color
 11049                           
 11050                           ;Lab8p1.c: 568: switch (color)
 11051  00C256  D00A               	goto	l4960
 11052  00C258                     l468:
 11053  00C258  9A80               	bcf	3968,5,c	;volatile
 11054  00C25A  D001               	goto	L20
 11055  00C25C                     l470:
 11056  00C25C  8A80               	bsf	3968,5,c	;volatile
 11057  00C25E                     L20:
 11058  00C25E  9C81               	bcf	3969,6,c	;volatile
 11059  00C260  D013               	goto	l473
 11060  00C262                     l471:
 11061  00C262  9A80               	bcf	3968,5,c	;volatile
 11062  00C264  D001               	goto	L21
 11063  00C266                     l472:
 11064  00C266  8A80               	bsf	3968,5,c	;volatile
 11065  00C268                     L21:
 11066  00C268  8C81               	bsf	3969,6,c	;volatile
 11067                           
 11068                           ;Lab8p1.c: 574: }
 11069  00C26A  D00E               	goto	l473
 11070  00C26C                     l4960:
 11071  00C26C  5036               	movf	Set_EW@color,w,c
 11072                           
 11073                           ; Switch size 1, requested type "space"
 11074                           ; Number of cases is 4, Range of values is 0 to 3
 11075                           ; switch strategies available:
 11076                           ; Name         Instructions Cycles
 11077                           ; simple_byte           13     7 (average)
 11078                           ;	Chosen strategy is simple_byte
 11079  00C26E  0A00               	xorlw	0	; case 0
 11080  00C270  B4D8               	btfsc	status,2,c
 11081  00C272  D7F2               	goto	l468
 11082  00C274  0A01               	xorlw	1	; case 1
 11083  00C276  B4D8               	btfsc	status,2,c
 11084  00C278  D7F1               	goto	l470
 11085  00C27A  0A03               	xorlw	3	; case 2
 11086  00C27C  B4D8               	btfsc	status,2,c
 11087  00C27E  D7F1               	goto	l471
 11088  00C280  0A01               	xorlw	1	; case 3
 11089  00C282  B4D8               	btfsc	status,2,c
 11090  00C284  D7F0               	goto	l472
 11091  00C286  D000               	goto	l473
 11092  00C288                     l473:
 11093  00C288  0012               	return		;funcret
 11094  00C28A                     __end_of_Set_EW:
 11095                           	opt stack 0
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon2	equ	0xFF1
 11103                           postinc0	equ	0xFEE
 11104                           wreg	equ	0xFE8
 11105                           postdec1	equ	0xFE5
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           postdec2	equ	0xFDD
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _update_LCD_color *****************
 11115 ;; Defined at:
 11116 ;;		line 590 in file "Lab8p1.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;  direction       1    wreg     unsigned char 
 11119 ;;  color           1   50[COMRAM] unsigned char 
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;  direction       1   51[COMRAM] unsigned char 
 11122 ;;  Circle_Y        1   52[COMRAM] unsigned char 
 11123 ;; Return value:  Size  Location     Type
 11124 ;;		None               void
 11125 ;; Registers used:
 11126 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11127 ;; Tracked objects:
 11128 ;;		On entry : 0/0
 11129 ;;		On exit  : 0/0
 11130 ;;		Unchanged: 0/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11132 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;Total ram usage:        3 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    6
 11139 ;; This function calls:
 11140 ;;		_drawCircle
 11141 ;;		_fillCircle
 11142 ;; This function is called by:
 11143 ;;		_Set_NS
 11144 ;;		_Set_NSLT
 11145 ;;		_Set_EW
 11146 ;;		_Set_EWLT
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text48
 11151  00E2CA                     __ptext48:
 11152                           	opt stack 0
 11153  00E2CA                     _update_LCD_color:
 11154                           	opt stack 22
 11155                           
 11156                           ;incstack = 0
 11157                           ;update_LCD_color@direction stored from wreg
 11158  00E2CA  6E34               	movwf	update_LCD_color@direction,c
 11159                           
 11160                           ;Lab8p1.c: 592: char Circle_Y;
 11161                           ;Lab8p1.c: 593: Circle_Y = 20 + 15 + direction * 30;
 11162  00E2CC  5034               	movf	update_LCD_color@direction,w,c
 11163  00E2CE  0D1E               	mullw	30
 11164  00E2D0  50F3               	movf	prodl,w,c
 11165  00E2D2  0F23               	addlw	35
 11166  00E2D4  6E35               	movwf	update_LCD_color@Circle_Y,c
 11167                           
 11168                           ;Lab8p1.c: 595: if (color == 0)
 11169  00E2D6  5033               	movf	update_LCD_color@color,w,c
 11170  00E2D8  A4D8               	btfss	status,2,c
 11171  00E2DA  D067               	goto	l4858
 11172                           
 11173                           ;Lab8p1.c: 596: {
 11174                           ;Lab8p1.c: 597: fillCircle(40, Circle_Y, 7, 0x0000);
 11175  00E2DC  0E00               	movlw	0
 11176  00E2DE  6E2C               	movwf	fillCircle@x0+1,c
 11177  00E2E0  0E28               	movlw	40
 11178  00E2E2  6E2B               	movwf	fillCircle@x0,c
 11179  00E2E4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11180  00E2E8  6A2E               	clrf	fillCircle@y0+1,c
 11181  00E2EA  0E00               	movlw	0
 11182  00E2EC  6E30               	movwf	fillCircle@r+1,c
 11183  00E2EE  0E07               	movlw	7
 11184  00E2F0  6E2F               	movwf	fillCircle@r,c
 11185  00E2F2  0E00               	movlw	0
 11186  00E2F4  6E32               	movwf	fillCircle@color+1,c
 11187  00E2F6  0E00               	movlw	0
 11188  00E2F8  6E31               	movwf	fillCircle@color,c
 11189  00E2FA  EC19  F062         	call	_fillCircle	;wreg free
 11190                           
 11191                           ;Lab8p1.c: 598: fillCircle(60, Circle_Y, 7, 0x0000);
 11192  00E2FE  0E00               	movlw	0
 11193  00E300  6E2C               	movwf	fillCircle@x0+1,c
 11194  00E302  0E3C               	movlw	60
 11195  00E304  6E2B               	movwf	fillCircle@x0,c
 11196  00E306  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11197  00E30A  6A2E               	clrf	fillCircle@y0+1,c
 11198  00E30C  0E00               	movlw	0
 11199  00E30E  6E30               	movwf	fillCircle@r+1,c
 11200  00E310  0E07               	movlw	7
 11201  00E312  6E2F               	movwf	fillCircle@r,c
 11202  00E314  0E00               	movlw	0
 11203  00E316  6E32               	movwf	fillCircle@color+1,c
 11204  00E318  0E00               	movlw	0
 11205  00E31A  6E31               	movwf	fillCircle@color,c
 11206  00E31C  EC19  F062         	call	_fillCircle	;wreg free
 11207                           
 11208                           ;Lab8p1.c: 599: fillCircle(80, Circle_Y, 7, 0x0000);
 11209  00E320  0E00               	movlw	0
 11210  00E322  6E2C               	movwf	fillCircle@x0+1,c
 11211  00E324  0E50               	movlw	80
 11212  00E326  6E2B               	movwf	fillCircle@x0,c
 11213  00E328  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11214  00E32C  6A2E               	clrf	fillCircle@y0+1,c
 11215  00E32E  0E00               	movlw	0
 11216  00E330  6E30               	movwf	fillCircle@r+1,c
 11217  00E332  0E07               	movlw	7
 11218  00E334  6E2F               	movwf	fillCircle@r,c
 11219  00E336  0E00               	movlw	0
 11220  00E338  6E32               	movwf	fillCircle@color+1,c
 11221  00E33A  0E00               	movlw	0
 11222  00E33C  6E31               	movwf	fillCircle@color,c
 11223  00E33E  EC19  F062         	call	_fillCircle	;wreg free
 11224                           
 11225                           ;Lab8p1.c: 600: drawCircle(40, Circle_Y, 7, 0xF800);
 11226  00E342  0E00               	movlw	0
 11227  00E344  6E0D               	movwf	drawCircle@x0+1,c
 11228  00E346  0E28               	movlw	40
 11229  00E348  6E0C               	movwf	drawCircle@x0,c
 11230  00E34A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11231  00E34E  6A0F               	clrf	drawCircle@y0+1,c
 11232  00E350  0E00               	movlw	0
 11233  00E352  6E11               	movwf	drawCircle@r+1,c
 11234  00E354  0E07               	movlw	7
 11235  00E356  6E10               	movwf	drawCircle@r,c
 11236  00E358  0EF8               	movlw	248
 11237  00E35A  6E13               	movwf	drawCircle@color+1,c
 11238  00E35C  0E00               	movlw	0
 11239  00E35E  6E12               	movwf	drawCircle@color,c
 11240  00E360  EC9B  F06D         	call	_drawCircle	;wreg free
 11241                           
 11242                           ;Lab8p1.c: 601: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11243  00E364  0E00               	movlw	0
 11244  00E366  6E0D               	movwf	drawCircle@x0+1,c
 11245  00E368  0E3C               	movlw	60
 11246  00E36A  6E0C               	movwf	drawCircle@x0,c
 11247  00E36C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11248  00E370  6A0F               	clrf	drawCircle@y0+1,c
 11249  00E372  0E00               	movlw	0
 11250  00E374  6E11               	movwf	drawCircle@r+1,c
 11251  00E376  0E07               	movlw	7
 11252  00E378  6E10               	movwf	drawCircle@r,c
 11253  00E37A  0EFF               	movlw	255
 11254  00E37C  6E13               	movwf	drawCircle@color+1,c
 11255  00E37E  0EE0               	movlw	224
 11256  00E380  6E12               	movwf	drawCircle@color,c
 11257  00E382  EC9B  F06D         	call	_drawCircle	;wreg free
 11258                           
 11259                           ;Lab8p1.c: 602: drawCircle(80, Circle_Y, 7, 0x07E0);
 11260  00E386  0E00               	movlw	0
 11261  00E388  6E0D               	movwf	drawCircle@x0+1,c
 11262  00E38A  0E50               	movlw	80
 11263  00E38C  6E0C               	movwf	drawCircle@x0,c
 11264  00E38E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11265  00E392  6A0F               	clrf	drawCircle@y0+1,c
 11266  00E394  0E00               	movlw	0
 11267  00E396  6E11               	movwf	drawCircle@r+1,c
 11268  00E398  0E07               	movlw	7
 11269  00E39A  6E10               	movwf	drawCircle@r,c
 11270  00E39C  0E07               	movlw	7
 11271  00E39E  6E13               	movwf	drawCircle@color+1,c
 11272  00E3A0  0EE0               	movlw	224
 11273  00E3A2  6E12               	movwf	drawCircle@color,c
 11274  00E3A4  EC9B  F06D         	call	_drawCircle	;wreg free
 11275  00E3A8  D000               	goto	l4858
 11276  00E3AA                     l4858:
 11277                           
 11278                           ;Lab8p1.c: 603: }
 11279                           ;Lab8p1.c: 605: if (color == 1)
 11280  00E3AA  0433               	decf	update_LCD_color@color,w,c
 11281  00E3AC  A4D8               	btfss	status,2,c
 11282  00E3AE  D067               	goto	l4862
 11283                           
 11284                           ;Lab8p1.c: 606: {
 11285                           ;Lab8p1.c: 607: fillCircle(40, Circle_Y, 7, 0xF800);
 11286  00E3B0  0E00               	movlw	0
 11287  00E3B2  6E2C               	movwf	fillCircle@x0+1,c
 11288  00E3B4  0E28               	movlw	40
 11289  00E3B6  6E2B               	movwf	fillCircle@x0,c
 11290  00E3B8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11291  00E3BC  6A2E               	clrf	fillCircle@y0+1,c
 11292  00E3BE  0E00               	movlw	0
 11293  00E3C0  6E30               	movwf	fillCircle@r+1,c
 11294  00E3C2  0E07               	movlw	7
 11295  00E3C4  6E2F               	movwf	fillCircle@r,c
 11296  00E3C6  0EF8               	movlw	248
 11297  00E3C8  6E32               	movwf	fillCircle@color+1,c
 11298  00E3CA  0E00               	movlw	0
 11299  00E3CC  6E31               	movwf	fillCircle@color,c
 11300  00E3CE  EC19  F062         	call	_fillCircle	;wreg free
 11301                           
 11302                           ;Lab8p1.c: 608: fillCircle(60, Circle_Y, 7, 0x0000);
 11303  00E3D2  0E00               	movlw	0
 11304  00E3D4  6E2C               	movwf	fillCircle@x0+1,c
 11305  00E3D6  0E3C               	movlw	60
 11306  00E3D8  6E2B               	movwf	fillCircle@x0,c
 11307  00E3DA  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11308  00E3DE  6A2E               	clrf	fillCircle@y0+1,c
 11309  00E3E0  0E00               	movlw	0
 11310  00E3E2  6E30               	movwf	fillCircle@r+1,c
 11311  00E3E4  0E07               	movlw	7
 11312  00E3E6  6E2F               	movwf	fillCircle@r,c
 11313  00E3E8  0E00               	movlw	0
 11314  00E3EA  6E32               	movwf	fillCircle@color+1,c
 11315  00E3EC  0E00               	movlw	0
 11316  00E3EE  6E31               	movwf	fillCircle@color,c
 11317  00E3F0  EC19  F062         	call	_fillCircle	;wreg free
 11318                           
 11319                           ;Lab8p1.c: 609: fillCircle(80, Circle_Y, 7, 0x0000);
 11320  00E3F4  0E00               	movlw	0
 11321  00E3F6  6E2C               	movwf	fillCircle@x0+1,c
 11322  00E3F8  0E50               	movlw	80
 11323  00E3FA  6E2B               	movwf	fillCircle@x0,c
 11324  00E3FC  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11325  00E400  6A2E               	clrf	fillCircle@y0+1,c
 11326  00E402  0E00               	movlw	0
 11327  00E404  6E30               	movwf	fillCircle@r+1,c
 11328  00E406  0E07               	movlw	7
 11329  00E408  6E2F               	movwf	fillCircle@r,c
 11330  00E40A  0E00               	movlw	0
 11331  00E40C  6E32               	movwf	fillCircle@color+1,c
 11332  00E40E  0E00               	movlw	0
 11333  00E410  6E31               	movwf	fillCircle@color,c
 11334  00E412  EC19  F062         	call	_fillCircle	;wreg free
 11335                           
 11336                           ;Lab8p1.c: 610: drawCircle(40, Circle_Y, 7, 0xF800);
 11337  00E416  0E00               	movlw	0
 11338  00E418  6E0D               	movwf	drawCircle@x0+1,c
 11339  00E41A  0E28               	movlw	40
 11340  00E41C  6E0C               	movwf	drawCircle@x0,c
 11341  00E41E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11342  00E422  6A0F               	clrf	drawCircle@y0+1,c
 11343  00E424  0E00               	movlw	0
 11344  00E426  6E11               	movwf	drawCircle@r+1,c
 11345  00E428  0E07               	movlw	7
 11346  00E42A  6E10               	movwf	drawCircle@r,c
 11347  00E42C  0EF8               	movlw	248
 11348  00E42E  6E13               	movwf	drawCircle@color+1,c
 11349  00E430  0E00               	movlw	0
 11350  00E432  6E12               	movwf	drawCircle@color,c
 11351  00E434  EC9B  F06D         	call	_drawCircle	;wreg free
 11352                           
 11353                           ;Lab8p1.c: 611: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11354  00E438  0E00               	movlw	0
 11355  00E43A  6E0D               	movwf	drawCircle@x0+1,c
 11356  00E43C  0E3C               	movlw	60
 11357  00E43E  6E0C               	movwf	drawCircle@x0,c
 11358  00E440  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11359  00E444  6A0F               	clrf	drawCircle@y0+1,c
 11360  00E446  0E00               	movlw	0
 11361  00E448  6E11               	movwf	drawCircle@r+1,c
 11362  00E44A  0E07               	movlw	7
 11363  00E44C  6E10               	movwf	drawCircle@r,c
 11364  00E44E  0EFF               	movlw	255
 11365  00E450  6E13               	movwf	drawCircle@color+1,c
 11366  00E452  0EE0               	movlw	224
 11367  00E454  6E12               	movwf	drawCircle@color,c
 11368  00E456  EC9B  F06D         	call	_drawCircle	;wreg free
 11369                           
 11370                           ;Lab8p1.c: 612: drawCircle(80, Circle_Y, 7, 0x07E0);
 11371  00E45A  0E00               	movlw	0
 11372  00E45C  6E0D               	movwf	drawCircle@x0+1,c
 11373  00E45E  0E50               	movlw	80
 11374  00E460  6E0C               	movwf	drawCircle@x0,c
 11375  00E462  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11376  00E466  6A0F               	clrf	drawCircle@y0+1,c
 11377  00E468  0E00               	movlw	0
 11378  00E46A  6E11               	movwf	drawCircle@r+1,c
 11379  00E46C  0E07               	movlw	7
 11380  00E46E  6E10               	movwf	drawCircle@r,c
 11381  00E470  0E07               	movlw	7
 11382  00E472  6E13               	movwf	drawCircle@color+1,c
 11383  00E474  0EE0               	movlw	224
 11384  00E476  6E12               	movwf	drawCircle@color,c
 11385  00E478  EC9B  F06D         	call	_drawCircle	;wreg free
 11386  00E47C  D000               	goto	l4862
 11387  00E47E                     l4862:
 11388                           
 11389                           ;Lab8p1.c: 613: }
 11390                           ;Lab8p1.c: 615: if (color == 2)
 11391  00E47E  0E02               	movlw	2
 11392  00E480  1833               	xorwf	update_LCD_color@color,w,c
 11393  00E482  A4D8               	btfss	status,2,c
 11394  00E484  D067               	goto	l4866
 11395                           
 11396                           ;Lab8p1.c: 616: {
 11397                           ;Lab8p1.c: 617: fillCircle(40, Circle_Y, 7, 0x0000);
 11398  00E486  0E00               	movlw	0
 11399  00E488  6E2C               	movwf	fillCircle@x0+1,c
 11400  00E48A  0E28               	movlw	40
 11401  00E48C  6E2B               	movwf	fillCircle@x0,c
 11402  00E48E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11403  00E492  6A2E               	clrf	fillCircle@y0+1,c
 11404  00E494  0E00               	movlw	0
 11405  00E496  6E30               	movwf	fillCircle@r+1,c
 11406  00E498  0E07               	movlw	7
 11407  00E49A  6E2F               	movwf	fillCircle@r,c
 11408  00E49C  0E00               	movlw	0
 11409  00E49E  6E32               	movwf	fillCircle@color+1,c
 11410  00E4A0  0E00               	movlw	0
 11411  00E4A2  6E31               	movwf	fillCircle@color,c
 11412  00E4A4  EC19  F062         	call	_fillCircle	;wreg free
 11413                           
 11414                           ;Lab8p1.c: 618: fillCircle(60, Circle_Y, 7, 0x0000);
 11415  00E4A8  0E00               	movlw	0
 11416  00E4AA  6E2C               	movwf	fillCircle@x0+1,c
 11417  00E4AC  0E3C               	movlw	60
 11418  00E4AE  6E2B               	movwf	fillCircle@x0,c
 11419  00E4B0  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11420  00E4B4  6A2E               	clrf	fillCircle@y0+1,c
 11421  00E4B6  0E00               	movlw	0
 11422  00E4B8  6E30               	movwf	fillCircle@r+1,c
 11423  00E4BA  0E07               	movlw	7
 11424  00E4BC  6E2F               	movwf	fillCircle@r,c
 11425  00E4BE  0E00               	movlw	0
 11426  00E4C0  6E32               	movwf	fillCircle@color+1,c
 11427  00E4C2  0E00               	movlw	0
 11428  00E4C4  6E31               	movwf	fillCircle@color,c
 11429  00E4C6  EC19  F062         	call	_fillCircle	;wreg free
 11430                           
 11431                           ;Lab8p1.c: 619: fillCircle(80, Circle_Y, 7, 0x07E0);
 11432  00E4CA  0E00               	movlw	0
 11433  00E4CC  6E2C               	movwf	fillCircle@x0+1,c
 11434  00E4CE  0E50               	movlw	80
 11435  00E4D0  6E2B               	movwf	fillCircle@x0,c
 11436  00E4D2  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11437  00E4D6  6A2E               	clrf	fillCircle@y0+1,c
 11438  00E4D8  0E00               	movlw	0
 11439  00E4DA  6E30               	movwf	fillCircle@r+1,c
 11440  00E4DC  0E07               	movlw	7
 11441  00E4DE  6E2F               	movwf	fillCircle@r,c
 11442  00E4E0  0E07               	movlw	7
 11443  00E4E2  6E32               	movwf	fillCircle@color+1,c
 11444  00E4E4  0EE0               	movlw	224
 11445  00E4E6  6E31               	movwf	fillCircle@color,c
 11446  00E4E8  EC19  F062         	call	_fillCircle	;wreg free
 11447                           
 11448                           ;Lab8p1.c: 620: drawCircle(40, Circle_Y, 7, 0xF800);
 11449  00E4EC  0E00               	movlw	0
 11450  00E4EE  6E0D               	movwf	drawCircle@x0+1,c
 11451  00E4F0  0E28               	movlw	40
 11452  00E4F2  6E0C               	movwf	drawCircle@x0,c
 11453  00E4F4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11454  00E4F8  6A0F               	clrf	drawCircle@y0+1,c
 11455  00E4FA  0E00               	movlw	0
 11456  00E4FC  6E11               	movwf	drawCircle@r+1,c
 11457  00E4FE  0E07               	movlw	7
 11458  00E500  6E10               	movwf	drawCircle@r,c
 11459  00E502  0EF8               	movlw	248
 11460  00E504  6E13               	movwf	drawCircle@color+1,c
 11461  00E506  0E00               	movlw	0
 11462  00E508  6E12               	movwf	drawCircle@color,c
 11463  00E50A  EC9B  F06D         	call	_drawCircle	;wreg free
 11464                           
 11465                           ;Lab8p1.c: 621: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11466  00E50E  0E00               	movlw	0
 11467  00E510  6E0D               	movwf	drawCircle@x0+1,c
 11468  00E512  0E3C               	movlw	60
 11469  00E514  6E0C               	movwf	drawCircle@x0,c
 11470  00E516  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11471  00E51A  6A0F               	clrf	drawCircle@y0+1,c
 11472  00E51C  0E00               	movlw	0
 11473  00E51E  6E11               	movwf	drawCircle@r+1,c
 11474  00E520  0E07               	movlw	7
 11475  00E522  6E10               	movwf	drawCircle@r,c
 11476  00E524  0EFF               	movlw	255
 11477  00E526  6E13               	movwf	drawCircle@color+1,c
 11478  00E528  0EE0               	movlw	224
 11479  00E52A  6E12               	movwf	drawCircle@color,c
 11480  00E52C  EC9B  F06D         	call	_drawCircle	;wreg free
 11481                           
 11482                           ;Lab8p1.c: 622: drawCircle(80, Circle_Y, 7, 0x07E0);
 11483  00E530  0E00               	movlw	0
 11484  00E532  6E0D               	movwf	drawCircle@x0+1,c
 11485  00E534  0E50               	movlw	80
 11486  00E536  6E0C               	movwf	drawCircle@x0,c
 11487  00E538  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11488  00E53C  6A0F               	clrf	drawCircle@y0+1,c
 11489  00E53E  0E00               	movlw	0
 11490  00E540  6E11               	movwf	drawCircle@r+1,c
 11491  00E542  0E07               	movlw	7
 11492  00E544  6E10               	movwf	drawCircle@r,c
 11493  00E546  0E07               	movlw	7
 11494  00E548  6E13               	movwf	drawCircle@color+1,c
 11495  00E54A  0EE0               	movlw	224
 11496  00E54C  6E12               	movwf	drawCircle@color,c
 11497  00E54E  EC9B  F06D         	call	_drawCircle	;wreg free
 11498  00E552  D000               	goto	l4866
 11499  00E554                     l4866:
 11500                           
 11501                           ;Lab8p1.c: 623: }
 11502                           ;Lab8p1.c: 625: if (color == 3)
 11503  00E554  0E03               	movlw	3
 11504  00E556  1833               	xorwf	update_LCD_color@color,w,c
 11505  00E558  A4D8               	btfss	status,2,c
 11506  00E55A  D067               	goto	l489
 11507                           
 11508                           ;Lab8p1.c: 626: {
 11509                           ;Lab8p1.c: 627: fillCircle(40, Circle_Y, 7, 0x0000);
 11510  00E55C  0E00               	movlw	0
 11511  00E55E  6E2C               	movwf	fillCircle@x0+1,c
 11512  00E560  0E28               	movlw	40
 11513  00E562  6E2B               	movwf	fillCircle@x0,c
 11514  00E564  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11515  00E568  6A2E               	clrf	fillCircle@y0+1,c
 11516  00E56A  0E00               	movlw	0
 11517  00E56C  6E30               	movwf	fillCircle@r+1,c
 11518  00E56E  0E07               	movlw	7
 11519  00E570  6E2F               	movwf	fillCircle@r,c
 11520  00E572  0E00               	movlw	0
 11521  00E574  6E32               	movwf	fillCircle@color+1,c
 11522  00E576  0E00               	movlw	0
 11523  00E578  6E31               	movwf	fillCircle@color,c
 11524  00E57A  EC19  F062         	call	_fillCircle	;wreg free
 11525                           
 11526                           ;Lab8p1.c: 628: fillCircle(60, Circle_Y, 7, 0xFFE0);
 11527  00E57E  0E00               	movlw	0
 11528  00E580  6E2C               	movwf	fillCircle@x0+1,c
 11529  00E582  0E3C               	movlw	60
 11530  00E584  6E2B               	movwf	fillCircle@x0,c
 11531  00E586  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11532  00E58A  6A2E               	clrf	fillCircle@y0+1,c
 11533  00E58C  0E00               	movlw	0
 11534  00E58E  6E30               	movwf	fillCircle@r+1,c
 11535  00E590  0E07               	movlw	7
 11536  00E592  6E2F               	movwf	fillCircle@r,c
 11537  00E594  0EFF               	movlw	255
 11538  00E596  6E32               	movwf	fillCircle@color+1,c
 11539  00E598  0EE0               	movlw	224
 11540  00E59A  6E31               	movwf	fillCircle@color,c
 11541  00E59C  EC19  F062         	call	_fillCircle	;wreg free
 11542                           
 11543                           ;Lab8p1.c: 629: fillCircle(80, Circle_Y, 7, 0x0000);
 11544  00E5A0  0E00               	movlw	0
 11545  00E5A2  6E2C               	movwf	fillCircle@x0+1,c
 11546  00E5A4  0E50               	movlw	80
 11547  00E5A6  6E2B               	movwf	fillCircle@x0,c
 11548  00E5A8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11549  00E5AC  6A2E               	clrf	fillCircle@y0+1,c
 11550  00E5AE  0E00               	movlw	0
 11551  00E5B0  6E30               	movwf	fillCircle@r+1,c
 11552  00E5B2  0E07               	movlw	7
 11553  00E5B4  6E2F               	movwf	fillCircle@r,c
 11554  00E5B6  0E00               	movlw	0
 11555  00E5B8  6E32               	movwf	fillCircle@color+1,c
 11556  00E5BA  0E00               	movlw	0
 11557  00E5BC  6E31               	movwf	fillCircle@color,c
 11558  00E5BE  EC19  F062         	call	_fillCircle	;wreg free
 11559                           
 11560                           ;Lab8p1.c: 630: drawCircle(40, Circle_Y, 7, 0xF800);
 11561  00E5C2  0E00               	movlw	0
 11562  00E5C4  6E0D               	movwf	drawCircle@x0+1,c
 11563  00E5C6  0E28               	movlw	40
 11564  00E5C8  6E0C               	movwf	drawCircle@x0,c
 11565  00E5CA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11566  00E5CE  6A0F               	clrf	drawCircle@y0+1,c
 11567  00E5D0  0E00               	movlw	0
 11568  00E5D2  6E11               	movwf	drawCircle@r+1,c
 11569  00E5D4  0E07               	movlw	7
 11570  00E5D6  6E10               	movwf	drawCircle@r,c
 11571  00E5D8  0EF8               	movlw	248
 11572  00E5DA  6E13               	movwf	drawCircle@color+1,c
 11573  00E5DC  0E00               	movlw	0
 11574  00E5DE  6E12               	movwf	drawCircle@color,c
 11575  00E5E0  EC9B  F06D         	call	_drawCircle	;wreg free
 11576                           
 11577                           ;Lab8p1.c: 631: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11578  00E5E4  0E00               	movlw	0
 11579  00E5E6  6E0D               	movwf	drawCircle@x0+1,c
 11580  00E5E8  0E3C               	movlw	60
 11581  00E5EA  6E0C               	movwf	drawCircle@x0,c
 11582  00E5EC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11583  00E5F0  6A0F               	clrf	drawCircle@y0+1,c
 11584  00E5F2  0E00               	movlw	0
 11585  00E5F4  6E11               	movwf	drawCircle@r+1,c
 11586  00E5F6  0E07               	movlw	7
 11587  00E5F8  6E10               	movwf	drawCircle@r,c
 11588  00E5FA  0EFF               	movlw	255
 11589  00E5FC  6E13               	movwf	drawCircle@color+1,c
 11590  00E5FE  0EE0               	movlw	224
 11591  00E600  6E12               	movwf	drawCircle@color,c
 11592  00E602  EC9B  F06D         	call	_drawCircle	;wreg free
 11593                           
 11594                           ;Lab8p1.c: 632: drawCircle(80, Circle_Y, 7, 0x07E0);
 11595  00E606  0E00               	movlw	0
 11596  00E608  6E0D               	movwf	drawCircle@x0+1,c
 11597  00E60A  0E50               	movlw	80
 11598  00E60C  6E0C               	movwf	drawCircle@x0,c
 11599  00E60E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11600  00E612  6A0F               	clrf	drawCircle@y0+1,c
 11601  00E614  0E00               	movlw	0
 11602  00E616  6E11               	movwf	drawCircle@r+1,c
 11603  00E618  0E07               	movlw	7
 11604  00E61A  6E10               	movwf	drawCircle@r,c
 11605  00E61C  0E07               	movlw	7
 11606  00E61E  6E13               	movwf	drawCircle@color+1,c
 11607  00E620  0EE0               	movlw	224
 11608  00E622  6E12               	movwf	drawCircle@color,c
 11609  00E624  EC9B  F06D         	call	_drawCircle	;wreg free
 11610  00E628  D000               	goto	l489
 11611  00E62A                     l489:
 11612  00E62A  0012               	return		;funcret
 11613  00E62C                     __end_of_update_LCD_color:
 11614                           	opt stack 0
 11615                           tblptru	equ	0xFF8
 11616                           tblptrh	equ	0xFF7
 11617                           tblptrl	equ	0xFF6
 11618                           tablat	equ	0xFF5
 11619                           prodh	equ	0xFF4
 11620                           prodl	equ	0xFF3
 11621                           intcon2	equ	0xFF1
 11622                           postinc0	equ	0xFEE
 11623                           wreg	equ	0xFE8
 11624                           postdec1	equ	0xFE5
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           fsr2h	equ	0xFDA
 11630                           fsr2l	equ	0xFD9
 11631                           status	equ	0xFD8
 11632                           
 11633 ;; *************** function _fillCircle *****************
 11634 ;; Defined at:
 11635 ;;		line 647 in file "ST7735_TFT.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;  x0              2   42[COMRAM] int 
 11638 ;;  y0              2   44[COMRAM] int 
 11639 ;;  r               2   46[COMRAM] int 
 11640 ;;  color           2   48[COMRAM] unsigned int 
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;		None
 11643 ;; Return value:  Size  Location     Type
 11644 ;;		None               void
 11645 ;; Registers used:
 11646 ;;		wreg, status,2, status,0, cstack
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11652 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11655 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11656 ;;Total ram usage:        8 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    5
 11659 ;; This function calls:
 11660 ;;		_drawFastVLine
 11661 ;;		_fillCircleHelper
 11662 ;; This function is called by:
 11663 ;;		_Initialize_Screen
 11664 ;;		_update_LCD_color
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           	psect	text49
 11669  00C432                     __ptext49:
 11670                           	opt stack 0
 11671  00C432                     _fillCircle:
 11672                           	opt stack 22
 11673                           
 11674                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 11675                           
 11676                           ;incstack = 0
 11677  00C432  502F               	movf	fillCircle@r,w,c
 11678  00C434  0800               	sublw	0
 11679  00C436  242D               	addwf	fillCircle@y0,w,c
 11680  00C438  6E08               	movwf	drawFastVLine@y,c
 11681  00C43A  80D8               	bsf	status,0,c
 11682  00C43C  342F               	rlcf	fillCircle@r,w,c
 11683  00C43E  6E09               	movwf	drawFastVLine@h,c
 11684  00C440  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
 11685  00C444  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
 11686  00C448  502B               	movf	fillCircle@x0,w,c
 11687  00C44A  ECF1  F063         	call	_drawFastVLine
 11688                           
 11689                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 11690  00C44E  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
 11691  00C452  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 11692  00C456  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
 11693  00C45A  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 11694  00C45E  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
 11695  00C462  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
 11696  00C466  0E00               	movlw	0
 11697  00C468  6E1A               	movwf	fillCircleHelper@cornername+1,c
 11698  00C46A  0E03               	movlw	3
 11699  00C46C  6E19               	movwf	fillCircleHelper@cornername,c
 11700  00C46E  0E00               	movlw	0
 11701  00C470  6E1C               	movwf	fillCircleHelper@delta+1,c
 11702  00C472  0E00               	movlw	0
 11703  00C474  6E1B               	movwf	fillCircleHelper@delta,c
 11704  00C476  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
 11705  00C47A  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
 11706  00C47E  EC7F  F06B         	call	_fillCircleHelper	;wreg free
 11707  00C482  0012               	return		;funcret
 11708  00C484                     __end_of_fillCircle:
 11709                           	opt stack 0
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon2	equ	0xFF1
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           postdec1	equ	0xFE5
 11720                           fsr1l	equ	0xFE1
 11721                           indf2	equ	0xFDF
 11722                           postinc2	equ	0xFDE
 11723                           postdec2	equ	0xFDD
 11724                           fsr2h	equ	0xFDA
 11725                           fsr2l	equ	0xFD9
 11726                           status	equ	0xFD8
 11727                           
 11728 ;; *************** function _fillCircleHelper *****************
 11729 ;; Defined at:
 11730 ;;		line 622 in file "ST7735_TFT.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;  x0              2   18[COMRAM] int 
 11733 ;;  y0              2   20[COMRAM] int 
 11734 ;;  r               2   22[COMRAM] int 
 11735 ;;  cornername      2   24[COMRAM] unsigned int 
 11736 ;;  delta           2   26[COMRAM] int 
 11737 ;;  color           2   28[COMRAM] unsigned int 
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  y               2   40[COMRAM] int 
 11740 ;;  x               2   38[COMRAM] int 
 11741 ;;  f               2   36[COMRAM] int 
 11742 ;;  ddF_y           2   34[COMRAM] int 
 11743 ;;  ddF_x           2   32[COMRAM] int 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;		None               void
 11746 ;; Registers used:
 11747 ;;		wreg, status,2, status,0, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11753 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;Total ram usage:       24 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    4
 11760 ;; This function calls:
 11761 ;;		_drawFastVLine
 11762 ;; This function is called by:
 11763 ;;		_fillCircle
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text50
 11768  00D6FE                     __ptext50:
 11769                           	opt stack 0
 11770  00D6FE                     _fillCircleHelper:
 11771                           	opt stack 22
 11772                           
 11773                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 11774                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11775                           
 11776                           ;incstack = 0
 11777  00D6FE  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
 11778  00D702  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11779  00D706  1E1F               	comf	??_fillCircleHelper,f,c
 11780  00D708  1E20               	comf	??_fillCircleHelper+1,f,c
 11781  00D70A  4A1F               	infsnz	??_fillCircleHelper,f,c
 11782  00D70C  2A20               	incf	??_fillCircleHelper+1,f,c
 11783  00D70E  0E01               	movlw	1
 11784  00D710  241F               	addwf	??_fillCircleHelper,w,c
 11785  00D712  6E25               	movwf	fillCircleHelper@f,c
 11786  00D714  0E00               	movlw	0
 11787  00D716  2020               	addwfc	??_fillCircleHelper+1,w,c
 11788  00D718  6E26               	movwf	fillCircleHelper@f+1,c
 11789  00D71A  0E00               	movlw	0
 11790  00D71C  6E22               	movwf	fillCircleHelper@ddF_x+1,c
 11791  00D71E  0E01               	movlw	1
 11792  00D720  6E21               	movwf	fillCircleHelper@ddF_x,c
 11793  00D722  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
 11794  00D726  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11795  00D72A  90D8               	bcf	status,0,c
 11796  00D72C  361F               	rlcf	??_fillCircleHelper,f,c
 11797  00D72E  3620               	rlcf	??_fillCircleHelper+1,f,c
 11798  00D730  1E1F               	comf	??_fillCircleHelper,f,c
 11799  00D732  1E20               	comf	??_fillCircleHelper+1,f,c
 11800  00D734  4A1F               	infsnz	??_fillCircleHelper,f,c
 11801  00D736  2A20               	incf	??_fillCircleHelper+1,f,c
 11802  00D738  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 11803  00D73C  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 11804  00D740  0E00               	movlw	0
 11805  00D742  6E28               	movwf	fillCircleHelper@x+1,c
 11806  00D744  0E00               	movlw	0
 11807  00D746  6E27               	movwf	fillCircleHelper@x,c
 11808  00D748  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
 11809  00D74C  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 11810                           
 11811                           ;ST7735_TFT.c: 626: while (x<y) {
 11812  00D750  D067               	goto	l4172
 11813  00D752                     l4152:
 11814                           
 11815                           ;ST7735_TFT.c: 627: if (f >= 0) {
 11816  00D752  BE26               	btfsc	fillCircleHelper@f+1,7,c
 11817  00D754  D00B               	goto	l275
 11818                           
 11819                           ;ST7735_TFT.c: 628: y--;
 11820  00D756  0629               	decf	fillCircleHelper@y,f,c
 11821  00D758  A0D8               	btfss	status,0,c
 11822  00D75A  062A               	decf	fillCircleHelper@y+1,f,c
 11823                           
 11824                           ;ST7735_TFT.c: 629: ddF_y += 2;
 11825  00D75C  0E02               	movlw	2
 11826  00D75E  2623               	addwf	fillCircleHelper@ddF_y,f,c
 11827  00D760  0E00               	movlw	0
 11828  00D762  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
 11829                           
 11830                           ;ST7735_TFT.c: 630: f += ddF_y;
 11831  00D764  5023               	movf	fillCircleHelper@ddF_y,w,c
 11832  00D766  2625               	addwf	fillCircleHelper@f,f,c
 11833  00D768  5024               	movf	fillCircleHelper@ddF_y+1,w,c
 11834  00D76A  2226               	addwfc	fillCircleHelper@f+1,f,c
 11835  00D76C                     l275:
 11836                           
 11837                           ;ST7735_TFT.c: 631: }
 11838                           ;ST7735_TFT.c: 632: x++;
 11839  00D76C  4A27               	infsnz	fillCircleHelper@x,f,c
 11840  00D76E  2A28               	incf	fillCircleHelper@x+1,f,c
 11841                           
 11842                           ;ST7735_TFT.c: 633: ddF_x += 2;
 11843  00D770  0E02               	movlw	2
 11844  00D772  2621               	addwf	fillCircleHelper@ddF_x,f,c
 11845  00D774  0E00               	movlw	0
 11846  00D776  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
 11847                           
 11848                           ;ST7735_TFT.c: 634: f += ddF_x;
 11849  00D778  5021               	movf	fillCircleHelper@ddF_x,w,c
 11850  00D77A  2625               	addwf	fillCircleHelper@f,f,c
 11851  00D77C  5022               	movf	fillCircleHelper@ddF_x+1,w,c
 11852  00D77E  2226               	addwfc	fillCircleHelper@f+1,f,c
 11853                           
 11854                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 11855  00D780  A019               	btfss	fillCircleHelper@cornername,0,c
 11856  00D782  D025               	goto	l4168
 11857                           
 11858                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 11859  00D784  5029               	movf	fillCircleHelper@y,w,c
 11860  00D786  0800               	sublw	0
 11861  00D788  2415               	addwf	fillCircleHelper@y0,w,c
 11862  00D78A  6E08               	movwf	drawFastVLine@y,c
 11863  00D78C  5029               	movf	fillCircleHelper@y,w,c
 11864  00D78E  2429               	addwf	fillCircleHelper@y,w,c
 11865  00D790  241B               	addwf	fillCircleHelper@delta,w,c
 11866  00D792  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11867  00D794  281F               	incf	??_fillCircleHelper,w,c
 11868  00D796  6E09               	movwf	drawFastVLine@h,c
 11869  00D798  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11870  00D79C  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11871  00D7A0  5013               	movf	fillCircleHelper@x0,w,c
 11872  00D7A2  2427               	addwf	fillCircleHelper@x,w,c
 11873  00D7A4  ECF1  F063         	call	_drawFastVLine
 11874                           
 11875                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 11876  00D7A8  5027               	movf	fillCircleHelper@x,w,c
 11877  00D7AA  0800               	sublw	0
 11878  00D7AC  2415               	addwf	fillCircleHelper@y0,w,c
 11879  00D7AE  6E08               	movwf	drawFastVLine@y,c
 11880  00D7B0  5027               	movf	fillCircleHelper@x,w,c
 11881  00D7B2  2427               	addwf	fillCircleHelper@x,w,c
 11882  00D7B4  241B               	addwf	fillCircleHelper@delta,w,c
 11883  00D7B6  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11884  00D7B8  281F               	incf	??_fillCircleHelper,w,c
 11885  00D7BA  6E09               	movwf	drawFastVLine@h,c
 11886  00D7BC  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11887  00D7C0  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11888  00D7C4  5013               	movf	fillCircleHelper@x0,w,c
 11889  00D7C6  2429               	addwf	fillCircleHelper@y,w,c
 11890  00D7C8  ECF1  F063         	call	_drawFastVLine
 11891  00D7CC  D000               	goto	l4168
 11892  00D7CE                     l4168:
 11893                           
 11894                           ;ST7735_TFT.c: 639: }
 11895                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 11896  00D7CE  A219               	btfss	fillCircleHelper@cornername,1,c
 11897  00D7D0  D027               	goto	l4172
 11898                           
 11899                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 11900  00D7D2  5029               	movf	fillCircleHelper@y,w,c
 11901  00D7D4  0800               	sublw	0
 11902  00D7D6  2415               	addwf	fillCircleHelper@y0,w,c
 11903  00D7D8  6E08               	movwf	drawFastVLine@y,c
 11904  00D7DA  5029               	movf	fillCircleHelper@y,w,c
 11905  00D7DC  2429               	addwf	fillCircleHelper@y,w,c
 11906  00D7DE  241B               	addwf	fillCircleHelper@delta,w,c
 11907  00D7E0  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11908  00D7E2  281F               	incf	??_fillCircleHelper,w,c
 11909  00D7E4  6E09               	movwf	drawFastVLine@h,c
 11910  00D7E6  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11911  00D7EA  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11912  00D7EE  5027               	movf	fillCircleHelper@x,w,c
 11913  00D7F0  0800               	sublw	0
 11914  00D7F2  2413               	addwf	fillCircleHelper@x0,w,c
 11915  00D7F4  ECF1  F063         	call	_drawFastVLine
 11916                           
 11917                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 11918  00D7F8  5027               	movf	fillCircleHelper@x,w,c
 11919  00D7FA  0800               	sublw	0
 11920  00D7FC  2415               	addwf	fillCircleHelper@y0,w,c
 11921  00D7FE  6E08               	movwf	drawFastVLine@y,c
 11922  00D800  5027               	movf	fillCircleHelper@x,w,c
 11923  00D802  2427               	addwf	fillCircleHelper@x,w,c
 11924  00D804  241B               	addwf	fillCircleHelper@delta,w,c
 11925  00D806  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11926  00D808  281F               	incf	??_fillCircleHelper,w,c
 11927  00D80A  6E09               	movwf	drawFastVLine@h,c
 11928  00D80C  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11929  00D810  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11930  00D814  5029               	movf	fillCircleHelper@y,w,c
 11931  00D816  0800               	sublw	0
 11932  00D818  2413               	addwf	fillCircleHelper@x0,w,c
 11933  00D81A  ECF1  F063         	call	_drawFastVLine
 11934  00D81E  D000               	goto	l4172
 11935  00D820                     l4172:
 11936  00D820  5029               	movf	fillCircleHelper@y,w,c
 11937  00D822  5C27               	subwf	fillCircleHelper@x,w,c
 11938  00D824  5028               	movf	fillCircleHelper@x+1,w,c
 11939  00D826  0A80               	xorlw	128
 11940  00D828  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11941  00D82A  502A               	movf	fillCircleHelper@y+1,w,c
 11942  00D82C  0A80               	xorlw	128
 11943  00D82E  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
 11944  00D830  A0D8               	btfss	status,0,c
 11945  00D832  D78F               	goto	l4152
 11946  00D834  0012               	return		;funcret
 11947  00D836                     __end_of_fillCircleHelper:
 11948                           	opt stack 0
 11949                           tblptru	equ	0xFF8
 11950                           tblptrh	equ	0xFF7
 11951                           tblptrl	equ	0xFF6
 11952                           tablat	equ	0xFF5
 11953                           prodh	equ	0xFF4
 11954                           prodl	equ	0xFF3
 11955                           intcon2	equ	0xFF1
 11956                           postinc0	equ	0xFEE
 11957                           wreg	equ	0xFE8
 11958                           postdec1	equ	0xFE5
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           postdec2	equ	0xFDD
 11963                           fsr2h	equ	0xFDA
 11964                           fsr2l	equ	0xFD9
 11965                           status	equ	0xFD8
 11966                           
 11967 ;; *************** function _drawCircle *****************
 11968 ;; Defined at:
 11969 ;;		line 561 in file "ST7735_TFT.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;  x0              2   11[COMRAM] int 
 11972 ;;  y0              2   13[COMRAM] int 
 11973 ;;  r               2   15[COMRAM] int 
 11974 ;;  color           2   17[COMRAM] unsigned int 
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  y               2   29[COMRAM] int 
 11977 ;;  x               2   27[COMRAM] int 
 11978 ;;  f               2   25[COMRAM] int 
 11979 ;;  ddF_y           2   23[COMRAM] int 
 11980 ;;  ddF_x           2   21[COMRAM] int 
 11981 ;; Return value:  Size  Location     Type
 11982 ;;		None               void
 11983 ;; Registers used:
 11984 ;;		wreg, status,2, status,0, cstack
 11985 ;; Tracked objects:
 11986 ;;		On entry : 0/0
 11987 ;;		On exit  : 0/0
 11988 ;;		Unchanged: 0/0
 11989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11990 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;Total ram usage:       20 bytes
 11995 ;; Hardware stack levels used:    1
 11996 ;; Hardware stack levels required when called:    4
 11997 ;; This function calls:
 11998 ;;		_drawPixel
 11999 ;; This function is called by:
 12000 ;;		_Initialize_Screen
 12001 ;;		_update_LCD_color
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text51
 12006  00DB36                     __ptext51:
 12007                           	opt stack 0
 12008  00DB36                     _drawCircle:
 12009                           	opt stack 23
 12010                           
 12011                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12012                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12013                           
 12014                           ;incstack = 0
 12015  00DB36  C010  F014         	movff	drawCircle@r,??_drawCircle
 12016  00DB3A  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
 12017  00DB3E  1E14               	comf	??_drawCircle,f,c
 12018  00DB40  1E15               	comf	??_drawCircle+1,f,c
 12019  00DB42  4A14               	infsnz	??_drawCircle,f,c
 12020  00DB44  2A15               	incf	??_drawCircle+1,f,c
 12021  00DB46  0E01               	movlw	1
 12022  00DB48  2414               	addwf	??_drawCircle,w,c
 12023  00DB4A  6E1A               	movwf	drawCircle@f,c
 12024  00DB4C  0E00               	movlw	0
 12025  00DB4E  2015               	addwfc	??_drawCircle+1,w,c
 12026  00DB50  6E1B               	movwf	drawCircle@f+1,c
 12027  00DB52  0E00               	movlw	0
 12028  00DB54  6E17               	movwf	drawCircle@ddF_x+1,c
 12029  00DB56  0E01               	movlw	1
 12030  00DB58  6E16               	movwf	drawCircle@ddF_x,c
 12031  00DB5A  C010  F014         	movff	drawCircle@r,??_drawCircle
 12032  00DB5E  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
 12033  00DB62  90D8               	bcf	status,0,c
 12034  00DB64  3614               	rlcf	??_drawCircle,f,c
 12035  00DB66  3615               	rlcf	??_drawCircle+1,f,c
 12036  00DB68  1E14               	comf	??_drawCircle,f,c
 12037  00DB6A  1E15               	comf	??_drawCircle+1,f,c
 12038  00DB6C  4A14               	infsnz	??_drawCircle,f,c
 12039  00DB6E  2A15               	incf	??_drawCircle+1,f,c
 12040  00DB70  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
 12041  00DB74  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12042  00DB78  0E00               	movlw	0
 12043  00DB7A  6E1D               	movwf	drawCircle@x+1,c
 12044  00DB7C  0E00               	movlw	0
 12045  00DB7E  6E1C               	movwf	drawCircle@x,c
 12046  00DB80  C010  F01E         	movff	drawCircle@r,drawCircle@y
 12047  00DB84  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
 12048                           
 12049                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12050  00DB88  500E               	movf	drawCircle@y0,w,c
 12051  00DB8A  2410               	addwf	drawCircle@r,w,c
 12052  00DB8C  6E08               	movwf	drawPixel@y,c
 12053  00DB8E  C012  F009         	movff	drawCircle@color,drawPixel@color
 12054  00DB92  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12055  00DB96  500C               	movf	drawCircle@x0,w,c
 12056  00DB98  EC7E  F060         	call	_drawPixel
 12057                           
 12058                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12059  00DB9C  5010               	movf	drawCircle@r,w,c
 12060  00DB9E  0800               	sublw	0
 12061  00DBA0  240E               	addwf	drawCircle@y0,w,c
 12062  00DBA2  6E08               	movwf	drawPixel@y,c
 12063  00DBA4  C012  F009         	movff	drawCircle@color,drawPixel@color
 12064  00DBA8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12065  00DBAC  500C               	movf	drawCircle@x0,w,c
 12066  00DBAE  EC7E  F060         	call	_drawPixel
 12067                           
 12068                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12069  00DBB2  C00E  F008         	movff	drawCircle@y0,drawPixel@y
 12070  00DBB6  C012  F009         	movff	drawCircle@color,drawPixel@color
 12071  00DBBA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12072  00DBBE  500C               	movf	drawCircle@x0,w,c
 12073  00DBC0  2410               	addwf	drawCircle@r,w,c
 12074  00DBC2  EC7E  F060         	call	_drawPixel
 12075                           
 12076                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 12077  00DBC6  C00E  F008         	movff	drawCircle@y0,drawPixel@y
 12078  00DBCA  C012  F009         	movff	drawCircle@color,drawPixel@color
 12079  00DBCE  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12080  00DBD2  5010               	movf	drawCircle@r,w,c
 12081  00DBD4  0800               	sublw	0
 12082  00DBD6  240C               	addwf	drawCircle@x0,w,c
 12083  00DBD8  EC7E  F060         	call	_drawPixel
 12084                           
 12085                           ;ST7735_TFT.c: 569: while (x < y) {
 12086  00DBDC  D078               	goto	l4566
 12087  00DBDE                     l4538:
 12088                           
 12089                           ;ST7735_TFT.c: 570: if (f >= 0) {
 12090  00DBDE  BE1B               	btfsc	drawCircle@f+1,7,c
 12091  00DBE0  D00B               	goto	l257
 12092                           
 12093                           ;ST7735_TFT.c: 571: y--;
 12094  00DBE2  061E               	decf	drawCircle@y,f,c
 12095  00DBE4  A0D8               	btfss	status,0,c
 12096  00DBE6  061F               	decf	drawCircle@y+1,f,c
 12097                           
 12098                           ;ST7735_TFT.c: 572: ddF_y += 2;
 12099  00DBE8  0E02               	movlw	2
 12100  00DBEA  2618               	addwf	drawCircle@ddF_y,f,c
 12101  00DBEC  0E00               	movlw	0
 12102  00DBEE  2219               	addwfc	drawCircle@ddF_y+1,f,c
 12103                           
 12104                           ;ST7735_TFT.c: 573: f += ddF_y;
 12105  00DBF0  5018               	movf	drawCircle@ddF_y,w,c
 12106  00DBF2  261A               	addwf	drawCircle@f,f,c
 12107  00DBF4  5019               	movf	drawCircle@ddF_y+1,w,c
 12108  00DBF6  221B               	addwfc	drawCircle@f+1,f,c
 12109  00DBF8                     l257:
 12110                           
 12111                           ;ST7735_TFT.c: 574: }
 12112                           ;ST7735_TFT.c: 575: x++;
 12113  00DBF8  4A1C               	infsnz	drawCircle@x,f,c
 12114  00DBFA  2A1D               	incf	drawCircle@x+1,f,c
 12115                           
 12116                           ;ST7735_TFT.c: 576: ddF_x += 2;
 12117  00DBFC  0E02               	movlw	2
 12118  00DBFE  2616               	addwf	drawCircle@ddF_x,f,c
 12119  00DC00  0E00               	movlw	0
 12120  00DC02  2217               	addwfc	drawCircle@ddF_x+1,f,c
 12121                           
 12122                           ;ST7735_TFT.c: 577: f += ddF_x;
 12123  00DC04  5016               	movf	drawCircle@ddF_x,w,c
 12124  00DC06  261A               	addwf	drawCircle@f,f,c
 12125  00DC08  5017               	movf	drawCircle@ddF_x+1,w,c
 12126  00DC0A  221B               	addwfc	drawCircle@f+1,f,c
 12127                           
 12128                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 12129  00DC0C  500E               	movf	drawCircle@y0,w,c
 12130  00DC0E  241E               	addwf	drawCircle@y,w,c
 12131  00DC10  6E08               	movwf	drawPixel@y,c
 12132  00DC12  C012  F009         	movff	drawCircle@color,drawPixel@color
 12133  00DC16  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12134  00DC1A  500C               	movf	drawCircle@x0,w,c
 12135  00DC1C  241C               	addwf	drawCircle@x,w,c
 12136  00DC1E  EC7E  F060         	call	_drawPixel
 12137                           
 12138                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 12139  00DC22  500E               	movf	drawCircle@y0,w,c
 12140  00DC24  241E               	addwf	drawCircle@y,w,c
 12141  00DC26  6E08               	movwf	drawPixel@y,c
 12142  00DC28  C012  F009         	movff	drawCircle@color,drawPixel@color
 12143  00DC2C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12144  00DC30  501C               	movf	drawCircle@x,w,c
 12145  00DC32  0800               	sublw	0
 12146  00DC34  240C               	addwf	drawCircle@x0,w,c
 12147  00DC36  EC7E  F060         	call	_drawPixel
 12148                           
 12149                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 12150  00DC3A  501E               	movf	drawCircle@y,w,c
 12151  00DC3C  0800               	sublw	0
 12152  00DC3E  240E               	addwf	drawCircle@y0,w,c
 12153  00DC40  6E08               	movwf	drawPixel@y,c
 12154  00DC42  C012  F009         	movff	drawCircle@color,drawPixel@color
 12155  00DC46  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12156  00DC4A  500C               	movf	drawCircle@x0,w,c
 12157  00DC4C  241C               	addwf	drawCircle@x,w,c
 12158  00DC4E  EC7E  F060         	call	_drawPixel
 12159                           
 12160                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 12161  00DC52  501E               	movf	drawCircle@y,w,c
 12162  00DC54  0800               	sublw	0
 12163  00DC56  240E               	addwf	drawCircle@y0,w,c
 12164  00DC58  6E08               	movwf	drawPixel@y,c
 12165  00DC5A  C012  F009         	movff	drawCircle@color,drawPixel@color
 12166  00DC5E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12167  00DC62  501C               	movf	drawCircle@x,w,c
 12168  00DC64  0800               	sublw	0
 12169  00DC66  240C               	addwf	drawCircle@x0,w,c
 12170  00DC68  EC7E  F060         	call	_drawPixel
 12171                           
 12172                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 12173  00DC6C  500E               	movf	drawCircle@y0,w,c
 12174  00DC6E  241C               	addwf	drawCircle@x,w,c
 12175  00DC70  6E08               	movwf	drawPixel@y,c
 12176  00DC72  C012  F009         	movff	drawCircle@color,drawPixel@color
 12177  00DC76  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12178  00DC7A  500C               	movf	drawCircle@x0,w,c
 12179  00DC7C  241E               	addwf	drawCircle@y,w,c
 12180  00DC7E  EC7E  F060         	call	_drawPixel
 12181                           
 12182                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 12183  00DC82  500E               	movf	drawCircle@y0,w,c
 12184  00DC84  241C               	addwf	drawCircle@x,w,c
 12185  00DC86  6E08               	movwf	drawPixel@y,c
 12186  00DC88  C012  F009         	movff	drawCircle@color,drawPixel@color
 12187  00DC8C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12188  00DC90  501E               	movf	drawCircle@y,w,c
 12189  00DC92  0800               	sublw	0
 12190  00DC94  240C               	addwf	drawCircle@x0,w,c
 12191  00DC96  EC7E  F060         	call	_drawPixel
 12192                           
 12193                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 12194  00DC9A  501C               	movf	drawCircle@x,w,c
 12195  00DC9C  0800               	sublw	0
 12196  00DC9E  240E               	addwf	drawCircle@y0,w,c
 12197  00DCA0  6E08               	movwf	drawPixel@y,c
 12198  00DCA2  C012  F009         	movff	drawCircle@color,drawPixel@color
 12199  00DCA6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12200  00DCAA  500C               	movf	drawCircle@x0,w,c
 12201  00DCAC  241E               	addwf	drawCircle@y,w,c
 12202  00DCAE  EC7E  F060         	call	_drawPixel
 12203                           
 12204                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 12205  00DCB2  501C               	movf	drawCircle@x,w,c
 12206  00DCB4  0800               	sublw	0
 12207  00DCB6  240E               	addwf	drawCircle@y0,w,c
 12208  00DCB8  6E08               	movwf	drawPixel@y,c
 12209  00DCBA  C012  F009         	movff	drawCircle@color,drawPixel@color
 12210  00DCBE  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12211  00DCC2  501E               	movf	drawCircle@y,w,c
 12212  00DCC4  0800               	sublw	0
 12213  00DCC6  240C               	addwf	drawCircle@x0,w,c
 12214  00DCC8  EC7E  F060         	call	_drawPixel
 12215  00DCCC  D000               	goto	l4566
 12216  00DCCE                     l4566:
 12217  00DCCE  501E               	movf	drawCircle@y,w,c
 12218  00DCD0  5C1C               	subwf	drawCircle@x,w,c
 12219  00DCD2  501D               	movf	drawCircle@x+1,w,c
 12220  00DCD4  0A80               	xorlw	128
 12221  00DCD6  6E14               	movwf	??_drawCircle& (0+255),c
 12222  00DCD8  501F               	movf	drawCircle@y+1,w,c
 12223  00DCDA  0A80               	xorlw	128
 12224  00DCDC  5814               	subwfb	??_drawCircle& (0+255),w,c
 12225  00DCDE  A0D8               	btfss	status,0,c
 12226  00DCE0  D77E               	goto	l4538
 12227  00DCE2  0012               	return		;funcret
 12228  00DCE4                     __end_of_drawCircle:
 12229                           	opt stack 0
 12230                           tblptru	equ	0xFF8
 12231                           tblptrh	equ	0xFF7
 12232                           tblptrl	equ	0xFF6
 12233                           tablat	equ	0xFF5
 12234                           prodh	equ	0xFF4
 12235                           prodl	equ	0xFF3
 12236                           intcon2	equ	0xFF1
 12237                           postinc0	equ	0xFEE
 12238                           wreg	equ	0xFE8
 12239                           postdec1	equ	0xFE5
 12240                           fsr1l	equ	0xFE1
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           fsr2h	equ	0xFDA
 12245                           fsr2l	equ	0xFD9
 12246                           status	equ	0xFD8
 12247                           
 12248 ;; *************** function _PED_Control *****************
 12249 ;; Defined at:
 12250 ;;		line 526 in file "Lab8p1.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  Direction       1    wreg     unsigned char 
 12253 ;;  Num_Sec         1   60[COMRAM] unsigned char 
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;  Direction       1    0[COMRAM] unsigned char 
 12256 ;;  i               1   61[COMRAM] unsigned char 
 12257 ;; Return value:  Size  Location     Type
 12258 ;;		None               void
 12259 ;; Registers used:
 12260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12266 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;Total ram usage:        2 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    8
 12273 ;; This function calls:
 12274 ;;		_WAIT_1_SEC_W_BEEP
 12275 ;;		_update_LCD_PED_Count
 12276 ;; This function is called by:
 12277 ;;		_Day_Mode
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           	psect	text52
 12282  00C12C                     __ptext52:
 12283                           	opt stack 0
 12284  00C12C                     _PED_Control:
 12285                           	opt stack 21
 12286                           
 12287                           ;Lab8p1.c: 528: for(char i = Num_Sec-1;i>0; i--)
 12288                           
 12289                           ;incstack = 0
 12290  00C12C  043D               	decf	PED_Control@Num_Sec,w,c
 12291  00C12E  6E3E               	movwf	PED_Control@i,c
 12292  00C130                     l4980:
 12293  00C130  503E               	movf	PED_Control@i,w,c
 12294  00C132  B4D8               	btfsc	status,2,c
 12295  00C134  D00B               	goto	l4992
 12296  00C136  D001               	goto	l4984
 12297  00C138  D009               	goto	l4992
 12298  00C13A                     l4984:
 12299                           
 12300                           ;Lab8p1.c: 529: {
 12301                           ;Lab8p1.c: 530: update_LCD_PED_Count(direction, i);
 12302  00C13A  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
 12303  00C13E  5079               	movf	_direction,w,c
 12304  00C140  EC81  F068         	call	_update_LCD_PED_Count
 12305                           
 12306                           ;Lab8p1.c: 531: WAIT_1_SEC_W_BEEP();
 12307  00C144  ECC2  F05F         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12308  00C148  063E               	decf	PED_Control@i,f,c
 12309  00C14A  D7F2               	goto	l4980
 12310  00C14C                     l4992:
 12311                           
 12312                           ;Lab8p1.c: 532: }
 12313                           ;Lab8p1.c: 533: update_LCD_PED_Count(direction, 0);
 12314  00C14C  0E00               	movlw	0
 12315  00C14E  6E3A               	movwf	update_LCD_PED_Count@count,c
 12316  00C150  5079               	movf	_direction,w,c
 12317  00C152  EC81  F068         	call	_update_LCD_PED_Count
 12318                           
 12319                           ;Lab8p1.c: 534: WAIT_1_SEC_W_BEEP();
 12320  00C156  ECC2  F05F         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12321  00C15A  0012               	return		;funcret
 12322  00C15C                     __end_of_PED_Control:
 12323                           	opt stack 0
 12324                           tblptru	equ	0xFF8
 12325                           tblptrh	equ	0xFF7
 12326                           tblptrl	equ	0xFF6
 12327                           tablat	equ	0xFF5
 12328                           prodh	equ	0xFF4
 12329                           prodl	equ	0xFF3
 12330                           intcon2	equ	0xFF1
 12331                           postinc0	equ	0xFEE
 12332                           wreg	equ	0xFE8
 12333                           postdec1	equ	0xFE5
 12334                           fsr1l	equ	0xFE1
 12335                           indf2	equ	0xFDF
 12336                           postinc2	equ	0xFDE
 12337                           postdec2	equ	0xFDD
 12338                           fsr2h	equ	0xFDA
 12339                           fsr2l	equ	0xFD9
 12340                           status	equ	0xFD8
 12341                           
 12342 ;; *************** function _update_LCD_PED_Count *****************
 12343 ;; Defined at:
 12344 ;;		line 676 in file "Lab8p1.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;  direction       1    wreg     unsigned char 
 12347 ;;  count           1   57[COMRAM] unsigned char 
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;  direction       1   59[COMRAM] unsigned char 
 12350 ;; Return value:  Size  Location     Type
 12351 ;;		None               void
 12352 ;; Registers used:
 12353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12354 ;; Tracked objects:
 12355 ;;		On entry : 0/0
 12356 ;;		On exit  : 0/0
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12359 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12361 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12363 ;;Total ram usage:        3 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:    7
 12366 ;; This function calls:
 12367 ;;		___awdiv
 12368 ;;		___awmod
 12369 ;;		_drawtext
 12370 ;; This function is called by:
 12371 ;;		_PED_Control
 12372 ;; This function uses a non-reentrant model
 12373 ;;
 12374                           
 12375                           	psect	text53
 12376  00D102                     __ptext53:
 12377                           	opt stack 0
 12378  00D102                     _update_LCD_PED_Count:
 12379                           	opt stack 21
 12380                           
 12381                           ;incstack = 0
 12382                           ;update_LCD_PED_Count@direction stored from wreg
 12383  00D102  6E3C               	movwf	update_LCD_PED_Count@direction,c
 12384                           
 12385                           ;Lab8p1.c: 678: PORTD = (PORTD & 0x80) | array[count];
 12386  00D104  503A               	movf	update_LCD_PED_Count@count,w,c
 12387  00D106  0D01               	mullw	1
 12388  00D108  0E80               	movlw	low _array
 12389  00D10A  24F3               	addwf	prodl,w,c
 12390  00D10C  6ED9               	movwf	fsr2l,c
 12391  00D10E  0E00               	movlw	high _array
 12392  00D110  20F4               	addwfc	prodh,w,c
 12393  00D112  6EDA               	movwf	fsr2h,c
 12394  00D114  50DF               	movf	indf2,w,c
 12395  00D116  6E3B               	movwf	??_update_LCD_PED_Count& (0+255),c
 12396  00D118  5083               	movf	3971,w,c	;volatile
 12397  00D11A  0B80               	andlw	128
 12398  00D11C  103B               	iorwf	??_update_LCD_PED_Count,w,c
 12399  00D11E  6E83               	movwf	3971,c	;volatile
 12400                           
 12401                           ;Lab8p1.c: 679: switch (direction)
 12402  00D120  D05B               	goto	l4850
 12403  00D122                     l4840:
 12404                           
 12405                           ;Lab8p1.c: 682: PED_EW_Count[0] = count/10 + '0';
 12406  00D122  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12407  00D126  6A08               	clrf	___awdiv@dividend+1,c
 12408  00D128  0E00               	movlw	0
 12409  00D12A  6E0A               	movwf	___awdiv@divisor+1,c
 12410  00D12C  0E0A               	movlw	10
 12411  00D12E  6E09               	movwf	___awdiv@divisor,c
 12412  00D130  ECBF  F064         	call	___awdiv	;wreg free
 12413  00D134  5007               	movf	?___awdiv,w,c
 12414  00D136  0F30               	addlw	48
 12415  00D138  0100               	movlb	0	; () banked
 12416  00D13A  6F97               	movwf	_PED_EW_Count& (0+255),b
 12417                           
 12418                           ;Lab8p1.c: 683: PED_EW_Count[1] = count%10 + '0';
 12419  00D13C  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12420  00D140  6A02               	clrf	___awmod@dividend+1,c
 12421  00D142  0E00               	movlw	0
 12422  00D144  6E04               	movwf	___awmod@divisor+1,c
 12423  00D146  0E0A               	movlw	10
 12424  00D148  6E03               	movwf	___awmod@divisor,c
 12425  00D14A  EC6F  F063         	call	___awmod	;wreg free
 12426  00D14E  5001               	movf	?___awmod,w,c
 12427  00D150  0F30               	addlw	48
 12428  00D152  0100               	movlb	0	; () banked
 12429  00D154  6F98               	movwf	(_PED_EW_Count+1)& (0+255),b
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;Lab8p1.c: 684: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 12433  00D156  0E1E               	movlw	30
 12434  00D158  6E29               	movwf	drawtext@y,c
 12435  00D15A  0E97               	movlw	low _PED_EW_Count
 12436  00D15C  6E2A               	movwf	drawtext@_text,c
 12437  00D15E  0E00               	movlw	high _PED_EW_Count
 12438  00D160  6E2B               	movwf	drawtext@_text+1,c
 12439  00D162  0E07               	movlw	7
 12440  00D164  6E2D               	movwf	drawtext@color+1,c
 12441  00D166  682C               	setf	drawtext@color,c
 12442  00D168  0E00               	movlw	0
 12443  00D16A  6E2F               	movwf	drawtext@bg+1,c
 12444  00D16C  0E00               	movlw	0
 12445  00D16E  6E2E               	movwf	drawtext@bg,c
 12446  00D170  0E02               	movlw	2
 12447  00D172  6E30               	movwf	drawtext@size,c
 12448  00D174  0E02               	movlw	2
 12449  00D176  EC2E  F067         	call	_drawtext
 12450                           
 12451                           ;Lab8p1.c: 685: break;
 12452  00D17A  D036               	goto	l505
 12453  00D17C                     l4844:
 12454                           
 12455                           ;Lab8p1.c: 688: PED_NS_Count[0] = count/10 + '0';
 12456  00D17C  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12457  00D180  6A08               	clrf	___awdiv@dividend+1,c
 12458  00D182  0E00               	movlw	0
 12459  00D184  6E0A               	movwf	___awdiv@divisor+1,c
 12460  00D186  0E0A               	movlw	10
 12461  00D188  6E09               	movwf	___awdiv@divisor,c
 12462  00D18A  ECBF  F064         	call	___awdiv	;wreg free
 12463  00D18E  5007               	movf	?___awdiv,w,c
 12464  00D190  0F30               	addlw	48
 12465  00D192  0100               	movlb	0	; () banked
 12466  00D194  6F9A               	movwf	_PED_NS_Count& (0+255),b
 12467                           
 12468                           ;Lab8p1.c: 689: PED_NS_Count[1] = count%10 + '0';
 12469  00D196  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12470  00D19A  6A02               	clrf	___awmod@dividend+1,c
 12471  00D19C  0E00               	movlw	0
 12472  00D19E  6E04               	movwf	___awmod@divisor+1,c
 12473  00D1A0  0E0A               	movlw	10
 12474  00D1A2  6E03               	movwf	___awmod@divisor,c
 12475  00D1A4  EC6F  F063         	call	___awmod	;wreg free
 12476  00D1A8  5001               	movf	?___awmod,w,c
 12477  00D1AA  0F30               	addlw	48
 12478  00D1AC  0100               	movlb	0	; () banked
 12479  00D1AE  6F9B               	movwf	(_PED_NS_Count+1)& (0+255),b
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;Lab8p1.c: 690: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
 12483  00D1B0  0E5A               	movlw	90
 12484  00D1B2  6E29               	movwf	drawtext@y,c
 12485  00D1B4  0E9A               	movlw	low _PED_NS_Count
 12486  00D1B6  6E2A               	movwf	drawtext@_text,c
 12487  00D1B8  0E00               	movlw	high _PED_NS_Count
 12488  00D1BA  6E2B               	movwf	drawtext@_text+1,c
 12489  00D1BC  0E00               	movlw	0
 12490  00D1BE  6E2D               	movwf	drawtext@color+1,c
 12491  00D1C0  0E1F               	movlw	31
 12492  00D1C2  6E2C               	movwf	drawtext@color,c
 12493  00D1C4  0E00               	movlw	0
 12494  00D1C6  6E2F               	movwf	drawtext@bg+1,c
 12495  00D1C8  0E00               	movlw	0
 12496  00D1CA  6E2E               	movwf	drawtext@bg,c
 12497  00D1CC  0E02               	movlw	2
 12498  00D1CE  6E30               	movwf	drawtext@size,c
 12499  00D1D0  0E02               	movlw	2
 12500  00D1D2  EC2E  F067         	call	_drawtext
 12501                           
 12502                           ;Lab8p1.c: 692: }
 12503                           
 12504                           ;Lab8p1.c: 691: break;
 12505  00D1D6  D008               	goto	l505
 12506  00D1D8                     l4850:
 12507  00D1D8  503C               	movf	update_LCD_PED_Count@direction,w,c
 12508                           
 12509                           ; Switch size 1, requested type "space"
 12510                           ; Number of cases is 2, Range of values is 0 to 2
 12511                           ; switch strategies available:
 12512                           ; Name         Instructions Cycles
 12513                           ; simple_byte            7     4 (average)
 12514                           ;	Chosen strategy is simple_byte
 12515  00D1DA  0A00               	xorlw	0	; case 0
 12516  00D1DC  B4D8               	btfsc	status,2,c
 12517  00D1DE  D7A1               	goto	l4840
 12518  00D1E0  0A02               	xorlw	2	; case 2
 12519  00D1E2  B4D8               	btfsc	status,2,c
 12520  00D1E4  D7CB               	goto	l4844
 12521  00D1E6  D000               	goto	l505
 12522  00D1E8                     l505:
 12523  00D1E8  0012               	return		;funcret
 12524  00D1EA                     __end_of_update_LCD_PED_Count:
 12525                           	opt stack 0
 12526                           tblptru	equ	0xFF8
 12527                           tblptrh	equ	0xFF7
 12528                           tblptrl	equ	0xFF6
 12529                           tablat	equ	0xFF5
 12530                           prodh	equ	0xFF4
 12531                           prodl	equ	0xFF3
 12532                           intcon2	equ	0xFF1
 12533                           postinc0	equ	0xFEE
 12534                           wreg	equ	0xFE8
 12535                           postdec1	equ	0xFE5
 12536                           fsr1l	equ	0xFE1
 12537                           indf2	equ	0xFDF
 12538                           postinc2	equ	0xFDE
 12539                           postdec2	equ	0xFDD
 12540                           fsr2h	equ	0xFDA
 12541                           fsr2l	equ	0xFD9
 12542                           status	equ	0xFD8
 12543                           
 12544 ;; *************** function _drawtext *****************
 12545 ;; Defined at:
 12546 ;;		line 507 in file "ST7735_TFT.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;  x               1    wreg     unsigned char 
 12549 ;;  y               1   40[COMRAM] unsigned char 
 12550 ;;  _text           2   41[COMRAM] PTR unsigned char 
 12551 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12552 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12553 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12554 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12555 ;;  color           2   43[COMRAM] unsigned int 
 12556 ;;  bg              2   45[COMRAM] unsigned int 
 12557 ;;  size            1   47[COMRAM] unsigned char 
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  x               1   52[COMRAM] unsigned char 
 12560 ;;  i               2   53[COMRAM] unsigned int 
 12561 ;;  textsize        2   50[COMRAM] unsigned int 
 12562 ;;  cursor_x        1   56[COMRAM] unsigned char 
 12563 ;;  cursor_y        1   55[COMRAM] unsigned char 
 12564 ;; Return value:  Size  Location     Type
 12565 ;;		None               void
 12566 ;; Registers used:
 12567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12573 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;Total ram usage:       17 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:    6
 12580 ;; This function calls:
 12581 ;;		_drawChar
 12582 ;;		_strlen
 12583 ;; This function is called by:
 12584 ;;		_Initialize_Screen
 12585 ;;		_WAIT_1_SEC
 12586 ;;		_update_LCD_count
 12587 ;;		_update_LCD_PED_Count
 12588 ;;		_update_LCD_misc
 12589 ;; This function uses a non-reentrant model
 12590 ;;
 12591                           
 12592                           	psect	text54
 12593  00CE5C                     __ptext54:
 12594                           	opt stack 0
 12595  00CE5C                     _drawtext:
 12596                           	opt stack 21
 12597                           
 12598                           ;incstack = 0
 12599                           ;drawtext@x stored from wreg
 12600  00CE5C  6E35               	movwf	drawtext@x,c
 12601                           
 12602                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 12603                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 12604                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 12605  00CE5E  C035  F039         	movff	drawtext@x,drawtext@cursor_x
 12606  00CE62  C029  F038         	movff	drawtext@y,drawtext@cursor_y
 12607                           
 12608                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 12609  00CE66  C02A  F001         	movff	drawtext@_text,strlen@s
 12610  00CE6A  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
 12611  00CE6E  ECE5  F060         	call	_strlen	;wreg free
 12612  00CE72  C001  F033         	movff	?_strlen,drawtext@textsize
 12613  00CE76  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
 12614                           
 12615                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 12616  00CE7A  0E00               	movlw	0
 12617  00CE7C  6E37               	movwf	drawtext@i+1,c
 12618  00CE7E  0E00               	movlw	0
 12619  00CE80  6E36               	movwf	drawtext@i,c
 12620  00CE82  D054               	goto	l4140
 12621  00CE84                     l4114:
 12622                           
 12623                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 12624  00CE84  507B               	movf	_wrap,w,c
 12625  00CE86  B4D8               	btfsc	status,2,c
 12626  00CE88  D02C               	goto	l4130
 12627  00CE8A  5030               	movf	drawtext@size,w,c
 12628  00CE8C  0D05               	mullw	5
 12629  00CE8E  5039               	movf	drawtext@cursor_x,w,c
 12630  00CE90  6E31               	movwf	??_drawtext& (0+255),c
 12631  00CE92  6A32               	clrf	(??_drawtext+1)& (0+255),c
 12632  00CE94  50F3               	movf	prodl,w,c
 12633  00CE96  2631               	addwf	??_drawtext,f,c
 12634  00CE98  50F4               	movf	prodh,w,c
 12635  00CE9A  2232               	addwfc	??_drawtext+1,f,c
 12636  00CE9C  BE32               	btfsc	??_drawtext+1,7,c
 12637  00CE9E  D021               	goto	l4130
 12638  00CEA0  5032               	movf	??_drawtext+1,w,c
 12639  00CEA2  E104               	bnz	u3640
 12640  00CEA4  0E81               	movlw	129
 12641  00CEA6  5C31               	subwf	??_drawtext,w,c
 12642  00CEA8  A0D8               	btfss	status,0,c
 12643  00CEAA  D01B               	goto	l4130
 12644  00CEAC                     u3640:
 12645                           
 12646                           ;ST7735_TFT.c: 515: cursor_x = 0;
 12647  00CEAC  0E00               	movlw	0
 12648  00CEAE  6E39               	movwf	drawtext@cursor_x,c
 12649                           
 12650                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 12651  00CEB0  5030               	movf	drawtext@size,w,c
 12652  00CEB2  0D07               	mullw	7
 12653  00CEB4  50F3               	movf	prodl,w,c
 12654  00CEB6  2438               	addwf	drawtext@cursor_y,w,c
 12655  00CEB8  0F03               	addlw	3
 12656  00CEBA  6E38               	movwf	drawtext@cursor_y,c
 12657                           
 12658                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 12659  00CEBC  0EA0               	movlw	160
 12660  00CEBE  6438               	cpfsgt	drawtext@cursor_y,c
 12661  00CEC0  D003               	goto	l4126
 12662  00CEC2  0EA0               	movlw	160
 12663  00CEC4  6E38               	movwf	drawtext@cursor_y,c
 12664  00CEC6  D000               	goto	l4126
 12665  00CEC8                     l4126:
 12666                           
 12667                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 12668  00CEC8  5036               	movf	drawtext@i,w,c
 12669  00CECA  242A               	addwf	drawtext@_text,w,c
 12670  00CECC  6ED9               	movwf	fsr2l,c
 12671  00CECE  5037               	movf	drawtext@i+1,w,c
 12672  00CED0  202B               	addwfc	drawtext@_text+1,w,c
 12673  00CED2  6EDA               	movwf	fsr2h,c
 12674  00CED4  0E20               	movlw	32
 12675  00CED6  18DE               	xorwf	postinc2,w,c
 12676  00CED8  B4D8               	btfsc	status,2,c
 12677  00CEDA  D025               	goto	l4138
 12678  00CEDC  D002               	goto	l4130
 12679  00CEDE  D023               	goto	l4138
 12680  00CEE0  D000               	goto	l4130
 12681  00CEE2                     l4130:
 12682                           
 12683                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 12684  00CEE2  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
 12685  00CEE6  5036               	movf	drawtext@i,w,c
 12686  00CEE8  242A               	addwf	drawtext@_text,w,c
 12687  00CEEA  6ED9               	movwf	fsr2l,c
 12688  00CEEC  5037               	movf	drawtext@i+1,w,c
 12689  00CEEE  202B               	addwfc	drawtext@_text+1,w,c
 12690  00CEF0  6EDA               	movwf	fsr2h,c
 12691  00CEF2  50DF               	movf	indf2,w,c
 12692  00CEF4  6E1F               	movwf	drawChar@c,c
 12693  00CEF6  C02C  F020         	movff	drawtext@color,drawChar@color
 12694  00CEFA  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
 12695  00CEFE  C02E  F022         	movff	drawtext@bg,drawChar@bg
 12696  00CF02  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
 12697  00CF06  C030  F024         	movff	drawtext@size,drawChar@size
 12698  00CF0A  5039               	movf	drawtext@cursor_x,w,c
 12699  00CF0C  EC1B  F06C         	call	_drawChar
 12700                           
 12701                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 12702  00CF10  5030               	movf	drawtext@size,w,c
 12703  00CF12  0D06               	mullw	6
 12704  00CF14  50F3               	movf	prodl,w,c
 12705  00CF16  2439               	addwf	drawtext@cursor_x,w,c
 12706  00CF18  6E39               	movwf	drawtext@cursor_x,c
 12707                           
 12708                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 12709  00CF1A  0E80               	movlw	128
 12710  00CF1C  6439               	cpfsgt	drawtext@cursor_x,c
 12711  00CF1E  D003               	goto	l4138
 12712  00CF20  0E80               	movlw	128
 12713  00CF22  6E39               	movwf	drawtext@cursor_x,c
 12714  00CF24  D000               	goto	l4138
 12715  00CF26                     l4138:
 12716  00CF26  4A36               	infsnz	drawtext@i,f,c
 12717  00CF28  2A37               	incf	drawtext@i+1,f,c
 12718  00CF2A  D000               	goto	l4140
 12719  00CF2C                     l4140:
 12720  00CF2C  5033               	movf	drawtext@textsize,w,c
 12721  00CF2E  5C36               	subwf	drawtext@i,w,c
 12722  00CF30  5034               	movf	drawtext@textsize+1,w,c
 12723  00CF32  5837               	subwfb	drawtext@i+1,w,c
 12724  00CF34  A0D8               	btfss	status,0,c
 12725  00CF36  D7A6               	goto	l4114
 12726  00CF38  0012               	return		;funcret
 12727  00CF3A                     __end_of_drawtext:
 12728                           	opt stack 0
 12729                           tblptru	equ	0xFF8
 12730                           tblptrh	equ	0xFF7
 12731                           tblptrl	equ	0xFF6
 12732                           tablat	equ	0xFF5
 12733                           prodh	equ	0xFF4
 12734                           prodl	equ	0xFF3
 12735                           intcon2	equ	0xFF1
 12736                           postinc0	equ	0xFEE
 12737                           wreg	equ	0xFE8
 12738                           postdec1	equ	0xFE5
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           fsr2h	equ	0xFDA
 12744                           fsr2l	equ	0xFD9
 12745                           status	equ	0xFD8
 12746                           
 12747 ;; *************** function _strlen *****************
 12748 ;; Defined at:
 12749 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;  s               2    0[COMRAM] PTR const unsigned char 
 12752 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12753 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12754 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12755 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;  cp              2    4[COMRAM] PTR const unsigned char 
 12758 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12759 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12760 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12761 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12762 ;; Return value:  Size  Location     Type
 12763 ;;                  2    0[COMRAM] unsigned int 
 12764 ;; Registers used:
 12765 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12774 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;Total ram usage:        6 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; This function calls:
 12778 ;;		Nothing
 12779 ;; This function is called by:
 12780 ;;		_drawtext
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           	psect	text55
 12785  00C1CA                     __ptext55:
 12786                           	opt stack 0
 12787  00C1CA                     _strlen:
 12788                           	opt stack 26
 12789                           
 12790                           ;incstack = 0
 12791  00C1CA  C001  F005         	movff	strlen@s,strlen@cp
 12792  00C1CE  C002  F006         	movff	strlen@s+1,strlen@cp+1
 12793  00C1D2  D003               	goto	l3784
 12794  00C1D4                     l3782:
 12795  00C1D4  4A05               	infsnz	strlen@cp,f,c
 12796  00C1D6  2A06               	incf	strlen@cp+1,f,c
 12797  00C1D8  D000               	goto	l3784
 12798  00C1DA                     l3784:
 12799  00C1DA  C005  FFD9         	movff	strlen@cp,fsr2l
 12800  00C1DE  C006  FFDA         	movff	strlen@cp+1,fsr2h
 12801  00C1E2  50DF               	movf	indf2,w,c
 12802  00C1E4  A4D8               	btfss	status,2,c
 12803  00C1E6  D7F6               	goto	l3782
 12804  00C1E8  C001  F003         	movff	strlen@s,??_strlen
 12805  00C1EC  C002  F004         	movff	strlen@s+1,??_strlen+1
 12806  00C1F0  1E03               	comf	??_strlen,f,c
 12807  00C1F2  1E04               	comf	??_strlen+1,f,c
 12808  00C1F4  4A03               	infsnz	??_strlen,f,c
 12809  00C1F6  2A04               	incf	??_strlen+1,f,c
 12810  00C1F8  5005               	movf	strlen@cp,w,c
 12811  00C1FA  2403               	addwf	??_strlen,w,c
 12812  00C1FC  6E01               	movwf	?_strlen,c
 12813  00C1FE  5006               	movf	strlen@cp+1,w,c
 12814  00C200  2004               	addwfc	??_strlen+1,w,c
 12815  00C202  6E02               	movwf	?_strlen+1,c
 12816  00C204  D000               	goto	l1286
 12817  00C206                     l1286:
 12818  00C206  0012               	return		;funcret
 12819  00C208                     __end_of_strlen:
 12820                           	opt stack 0
 12821                           tblptru	equ	0xFF8
 12822                           tblptrh	equ	0xFF7
 12823                           tblptrl	equ	0xFF6
 12824                           tablat	equ	0xFF5
 12825                           prodh	equ	0xFF4
 12826                           prodl	equ	0xFF3
 12827                           intcon2	equ	0xFF1
 12828                           postinc0	equ	0xFEE
 12829                           wreg	equ	0xFE8
 12830                           postdec1	equ	0xFE5
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           fsr2h	equ	0xFDA
 12836                           fsr2l	equ	0xFD9
 12837                           status	equ	0xFD8
 12838                           
 12839 ;; *************** function _drawChar *****************
 12840 ;; Defined at:
 12841 ;;		line 480 in file "ST7735_TFT.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;  x               1    wreg     unsigned char 
 12844 ;;  y               1   29[COMRAM] unsigned char 
 12845 ;;  c               1   30[COMRAM] unsigned char 
 12846 ;;  color           2   31[COMRAM] unsigned int 
 12847 ;;  bg              2   33[COMRAM] unsigned int 
 12848 ;;  size            1   35[COMRAM] unsigned char 
 12849 ;; Auto vars:     Size  Location     Type
 12850 ;;  x               1   37[COMRAM] unsigned char 
 12851 ;;  line            1   36[COMRAM] unsigned char 
 12852 ;;  i               1   39[COMRAM] unsigned char 
 12853 ;;  j               1   38[COMRAM] unsigned char 
 12854 ;; Return value:  Size  Location     Type
 12855 ;;		None               void
 12856 ;; Registers used:
 12857 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12863 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12866 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12867 ;;Total ram usage:       11 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    5
 12870 ;; This function calls:
 12871 ;;		___wmul
 12872 ;;		_drawPixel
 12873 ;;		_fillRect
 12874 ;; This function is called by:
 12875 ;;		_drawtext
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           	psect	text56
 12880  00D836                     __ptext56:
 12881                           	opt stack 0
 12882  00D836                     _drawChar:
 12883                           	opt stack 21
 12884                           
 12885                           ;incstack = 0
 12886                           ;drawChar@x stored from wreg
 12887  00D836  6E26               	movwf	drawChar@x,c
 12888                           
 12889                           ;ST7735_TFT.c: 482: char i, j;
 12890                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 12891  00D838  0E80               	movlw	128
 12892  00D83A  6026               	cpfslt	drawChar@x,c
 12893  00D83C  D0A6               	goto	l209
 12894  00D83E  0E9F               	movlw	159
 12895  00D840  641E               	cpfsgt	drawChar@y,c
 12896  00D842  D001               	goto	l3730
 12897                           
 12898                           ;ST7735_TFT.c: 484: return;
 12899  00D844  D0A2               	goto	l209
 12900  00D846                     l3730:
 12901                           
 12902                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 12903  00D846  5024               	movf	drawChar@size,w,c
 12904  00D848  A4D8               	btfss	status,2,c
 12905  00D84A  D003               	goto	l3734
 12906  00D84C  0E01               	movlw	1
 12907  00D84E  6E24               	movwf	drawChar@size,c
 12908  00D850  D000               	goto	l3734
 12909  00D852                     l3734:
 12910                           
 12911                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 12912  00D852  0E1F               	movlw	31
 12913  00D854  641F               	cpfsgt	drawChar@c,c
 12914  00D856  D004               	goto	l3738
 12915  00D858  0E7E               	movlw	126
 12916  00D85A  641F               	cpfsgt	drawChar@c,c
 12917  00D85C  D003               	goto	l211
 12918  00D85E  D000               	goto	l3738
 12919  00D860                     l3738:
 12920                           
 12921                           ;ST7735_TFT.c: 487: c = '?';
 12922  00D860  0E3F               	movlw	63
 12923  00D862  6E1F               	movwf	drawChar@c,c
 12924  00D864                     l211:
 12925                           
 12926                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 12927  00D864  0E00               	movlw	0
 12928  00D866  6E28               	movwf	drawChar@i,c
 12929  00D868                     l3740:
 12930  00D868  0E04               	movlw	4
 12931  00D86A  6428               	cpfsgt	drawChar@i,c
 12932  00D86C  D001               	goto	l3744
 12933  00D86E  D08D               	goto	l209
 12934  00D870                     l3744:
 12935                           
 12936                           ;ST7735_TFT.c: 489: unsigned char line;
 12937                           ;ST7735_TFT.c: 490: if(c < 'S')
 12938  00D870  0E53               	movlw	83
 12939  00D872  601F               	cpfslt	drawChar@c,c
 12940  00D874  D015               	goto	l3748
 12941                           
 12942                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 12943  00D876  0EE0               	movlw	224
 12944  00D878  241F               	addwf	drawChar@c,w,c
 12945  00D87A  6E0F               	movwf	___wmul@multiplier,c
 12946  00D87C  6A10               	clrf	___wmul@multiplier+1,c
 12947  00D87E  0EFF               	movlw	255
 12948  00D880  2210               	addwfc	___wmul@multiplier+1,f,c
 12949  00D882  0E00               	movlw	0
 12950  00D884  6E12               	movwf	___wmul@multiplicand+1,c
 12951  00D886  0E05               	movlw	5
 12952  00D888  6E11               	movwf	___wmul@multiplicand,c
 12953  00D88A  EC29  F060         	call	___wmul	;wreg free
 12954  00D88E  5028               	movf	drawChar@i,w,c
 12955  00D890  260F               	addwf	?___wmul,f,c
 12956  00D892  0E00               	movlw	0
 12957  00D894  2210               	addwfc	?___wmul+1,f,c
 12958  00D896  0E63               	movlw	low _font
 12959  00D898  240F               	addwf	?___wmul,w,c
 12960  00D89A  6EF6               	movwf	tblptrl,c
 12961  00D89C  0EFA               	movlw	high _font
 12962  00D89E  D014               	goto	L22
 12963  00D8A0                     l3748:
 12964                           
 12965                           ;ST7735_TFT.c: 492: else
 12966                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 12967  00D8A0  0EAD               	movlw	173
 12968  00D8A2  241F               	addwf	drawChar@c,w,c
 12969  00D8A4  6E0F               	movwf	___wmul@multiplier,c
 12970  00D8A6  6A10               	clrf	___wmul@multiplier+1,c
 12971  00D8A8  0EFF               	movlw	255
 12972  00D8AA  2210               	addwfc	___wmul@multiplier+1,f,c
 12973  00D8AC  0E00               	movlw	0
 12974  00D8AE  6E12               	movwf	___wmul@multiplicand+1,c
 12975  00D8B0  0E05               	movlw	5
 12976  00D8B2  6E11               	movwf	___wmul@multiplicand,c
 12977  00D8B4  EC29  F060         	call	___wmul	;wreg free
 12978  00D8B8  5028               	movf	drawChar@i,w,c
 12979  00D8BA  260F               	addwf	?___wmul,f,c
 12980  00D8BC  0E00               	movlw	0
 12981  00D8BE  2210               	addwfc	?___wmul+1,f,c
 12982  00D8C0  0E62               	movlw	low _font2
 12983  00D8C2  240F               	addwf	?___wmul,w,c
 12984  00D8C4  6EF6               	movwf	tblptrl,c
 12985  00D8C6  0EFB               	movlw	high _font2
 12986  00D8C8                     L22:
 12987  00D8C8  2010               	addwfc	?___wmul+1,w,c
 12988  00D8CA  6EF7               	movwf	tblptrh,c
 12989  00D8CC                     	if	0	;There are less than 3 active tblptr bytes
 12990  00D8CC                     	endif
 12991  00D8CC  0008               	tblrd		*
 12992  00D8CE  CFF5 F025          	movff	tablat,drawChar@line
 12993  00D8D2  D000               	goto	l3750
 12994  00D8D4                     l3750:
 12995                           
 12996                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 12997  00D8D4  0E00               	movlw	0
 12998  00D8D6  6E27               	movwf	drawChar@j,c
 12999  00D8D8                     l3752:
 13000  00D8D8  0E06               	movlw	6
 13001  00D8DA  6427               	cpfsgt	drawChar@j,c
 13002  00D8DC  D001               	goto	l218
 13003  00D8DE  D053               	goto	l3776
 13004  00D8E0                     l218:
 13005                           
 13006                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 13007  00D8E0  A025               	btfss	drawChar@line,0,c
 13008  00D8E2  D023               	goto	l3762
 13009                           
 13010                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 13011  00D8E4  0424               	decf	drawChar@size,w,c
 13012  00D8E6  A4D8               	btfss	status,2,c
 13013  00D8E8  D00C               	goto	l3760
 13014  00D8EA  501E               	movf	drawChar@y,w,c
 13015  00D8EC  2427               	addwf	drawChar@j,w,c
 13016  00D8EE  6E08               	movwf	drawPixel@y,c
 13017  00D8F0  C020  F009         	movff	drawChar@color,drawPixel@color
 13018  00D8F4  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
 13019  00D8F8  5026               	movf	drawChar@x,w,c
 13020  00D8FA  2428               	addwf	drawChar@i,w,c
 13021  00D8FC  EC7E  F060         	call	_drawPixel
 13022  00D900  D03E               	goto	l3770
 13023  00D902                     l3760:
 13024                           
 13025                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13026  00D902  5027               	movf	drawChar@j,w,c
 13027  00D904  0224               	mulwf	drawChar@size,c
 13028  00D906  50F3               	movf	prodl,w,c
 13029  00D908  241E               	addwf	drawChar@y,w,c
 13030  00D90A  6E13               	movwf	fillRect@y,c
 13031  00D90C  C024  F014         	movff	drawChar@size,fillRect@w
 13032  00D910  C024  F015         	movff	drawChar@size,fillRect@h
 13033  00D914  C020  F016         	movff	drawChar@color,fillRect@color
 13034  00D918  C021  F017         	movff	drawChar@color+1,fillRect@color+1
 13035  00D91C  5028               	movf	drawChar@i,w,c
 13036  00D91E  0224               	mulwf	drawChar@size,c
 13037  00D920  50F3               	movf	prodl,w,c
 13038  00D922  2426               	addwf	drawChar@x,w,c
 13039  00D924  ECCD  F061         	call	_fillRect
 13040                           
 13041                           ;ST7735_TFT.c: 498: }
 13042  00D928  D02A               	goto	l3770
 13043  00D92A                     l3762:
 13044                           
 13045                           ;ST7735_TFT.c: 499: else if(bg != color) {
 13046  00D92A  5020               	movf	drawChar@color,w,c
 13047  00D92C  1822               	xorwf	drawChar@bg,w,c
 13048  00D92E  E104               	bnz	u3120
 13049  00D930  5021               	movf	drawChar@color+1,w,c
 13050  00D932  1823               	xorwf	drawChar@bg+1,w,c
 13051  00D934  B4D8               	btfsc	status,2,c
 13052  00D936  D023               	goto	l3770
 13053  00D938                     u3120:
 13054                           
 13055                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 13056  00D938  0424               	decf	drawChar@size,w,c
 13057  00D93A  A4D8               	btfss	status,2,c
 13058  00D93C  D00C               	goto	l3768
 13059  00D93E  501E               	movf	drawChar@y,w,c
 13060  00D940  2427               	addwf	drawChar@j,w,c
 13061  00D942  6E08               	movwf	drawPixel@y,c
 13062  00D944  C022  F009         	movff	drawChar@bg,drawPixel@color
 13063  00D948  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
 13064  00D94C  5026               	movf	drawChar@x,w,c
 13065  00D94E  2428               	addwf	drawChar@i,w,c
 13066  00D950  EC7E  F060         	call	_drawPixel
 13067  00D954  D014               	goto	l3770
 13068  00D956                     l3768:
 13069                           
 13070                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 13071  00D956  5027               	movf	drawChar@j,w,c
 13072  00D958  0224               	mulwf	drawChar@size,c
 13073  00D95A  50F3               	movf	prodl,w,c
 13074  00D95C  241E               	addwf	drawChar@y,w,c
 13075  00D95E  6E13               	movwf	fillRect@y,c
 13076  00D960  C024  F014         	movff	drawChar@size,fillRect@w
 13077  00D964  C024  F015         	movff	drawChar@size,fillRect@h
 13078  00D968  C022  F016         	movff	drawChar@bg,fillRect@color
 13079  00D96C  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
 13080  00D970  5028               	movf	drawChar@i,w,c
 13081  00D972  0224               	mulwf	drawChar@size,c
 13082  00D974  50F3               	movf	prodl,w,c
 13083  00D976  2426               	addwf	drawChar@x,w,c
 13084  00D978  ECCD  F061         	call	_fillRect
 13085  00D97C  D000               	goto	l3770
 13086  00D97E                     l3770:
 13087  00D97E  2A27               	incf	drawChar@j,f,c
 13088  00D980  90D8               	bcf	status,0,c
 13089  00D982  3225               	rrcf	drawChar@line,f,c
 13090  00D984  D7A9               	goto	l3752
 13091  00D986                     l3776:
 13092  00D986  2A28               	incf	drawChar@i,f,c
 13093  00D988  D76F               	goto	l3740
 13094  00D98A                     l209:
 13095  00D98A  0012               	return		;funcret
 13096  00D98C                     __end_of_drawChar:
 13097                           	opt stack 0
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon2	equ	0xFF1
 13105                           postinc0	equ	0xFEE
 13106                           wreg	equ	0xFE8
 13107                           postdec1	equ	0xFE5
 13108                           fsr1l	equ	0xFE1
 13109                           indf2	equ	0xFDF
 13110                           postinc2	equ	0xFDE
 13111                           postdec2	equ	0xFDD
 13112                           fsr2h	equ	0xFDA
 13113                           fsr2l	equ	0xFD9
 13114                           status	equ	0xFD8
 13115                           
 13116 ;; *************** function _fillRect *****************
 13117 ;; Defined at:
 13118 ;;		line 470 in file "ST7735_TFT.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;  x               1    wreg     unsigned char 
 13121 ;;  y               1   18[COMRAM] unsigned char 
 13122 ;;  w               1   19[COMRAM] unsigned char 
 13123 ;;  h               1   20[COMRAM] unsigned char 
 13124 ;;  color           2   21[COMRAM] unsigned int 
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  x               1   26[COMRAM] unsigned char 
 13127 ;;  i               2   27[COMRAM] int 
 13128 ;; Return value:  Size  Location     Type
 13129 ;;		None               void
 13130 ;; Registers used:
 13131 ;;		wreg, status,2, status,0, cstack
 13132 ;; Tracked objects:
 13133 ;;		On entry : 0/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13137 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13141 ;;Total ram usage:       11 bytes
 13142 ;; Hardware stack levels used:    1
 13143 ;; Hardware stack levels required when called:    4
 13144 ;; This function calls:
 13145 ;;		_drawFastVLine
 13146 ;; This function is called by:
 13147 ;;		_drawChar
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           	psect	text57
 13152  00C39A                     __ptext57:
 13153                           	opt stack 0
 13154  00C39A                     _fillRect:
 13155                           	opt stack 21
 13156                           
 13157                           ;incstack = 0
 13158                           ;fillRect@x stored from wreg
 13159  00C39A  6E1B               	movwf	fillRect@x,c
 13160                           
 13161                           ;ST7735_TFT.c: 472: signed int i;
 13162                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 13163  00C39C  C01B  F01C         	movff	fillRect@x,fillRect@i
 13164  00C3A0  6A1D               	clrf	fillRect@i+1,c
 13165  00C3A2  D00E               	goto	l3520
 13166  00C3A4                     l3516:
 13167                           
 13168                           ;ST7735_TFT.c: 475: {
 13169                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 13170  00C3A4  C013  F008         	movff	fillRect@y,drawFastVLine@y
 13171  00C3A8  C015  F009         	movff	fillRect@h,drawFastVLine@h
 13172  00C3AC  C016  F00A         	movff	fillRect@color,drawFastVLine@color
 13173  00C3B0  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
 13174  00C3B4  501C               	movf	fillRect@i,w,c
 13175  00C3B6  ECF1  F063         	call	_drawFastVLine
 13176  00C3BA  4A1C               	infsnz	fillRect@i,f,c
 13177  00C3BC  2A1D               	incf	fillRect@i+1,f,c
 13178  00C3BE  D000               	goto	l3520
 13179  00C3C0                     l3520:
 13180  00C3C0  5014               	movf	fillRect@w,w,c
 13181  00C3C2  C01B  F018         	movff	fillRect@x,??_fillRect
 13182  00C3C6  6A19               	clrf	(??_fillRect+1)& (0+255),c
 13183  00C3C8  2618               	addwf	??_fillRect,f,c
 13184  00C3CA  0E00               	movlw	0
 13185  00C3CC  2219               	addwfc	??_fillRect+1,f,c
 13186  00C3CE  5018               	movf	??_fillRect,w,c
 13187  00C3D0  5C1C               	subwf	fillRect@i,w,c
 13188  00C3D2  501D               	movf	fillRect@i+1,w,c
 13189  00C3D4  0A80               	xorlw	128
 13190  00C3D6  6E1A               	movwf	(??_fillRect+2)& (0+255),c
 13191  00C3D8  5019               	movf	??_fillRect+1,w,c
 13192  00C3DA  0A80               	xorlw	128
 13193  00C3DC  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
 13194  00C3DE  A0D8               	btfss	status,0,c
 13195  00C3E0  D7E1               	goto	l3516
 13196  00C3E2  0012               	return		;funcret
 13197  00C3E4                     __end_of_fillRect:
 13198                           	opt stack 0
 13199                           tblptru	equ	0xFF8
 13200                           tblptrh	equ	0xFF7
 13201                           tblptrl	equ	0xFF6
 13202                           tablat	equ	0xFF5
 13203                           prodh	equ	0xFF4
 13204                           prodl	equ	0xFF3
 13205                           intcon2	equ	0xFF1
 13206                           postinc0	equ	0xFEE
 13207                           wreg	equ	0xFE8
 13208                           postdec1	equ	0xFE5
 13209                           fsr1l	equ	0xFE1
 13210                           indf2	equ	0xFDF
 13211                           postinc2	equ	0xFDE
 13212                           postdec2	equ	0xFDD
 13213                           fsr2h	equ	0xFDA
 13214                           fsr2l	equ	0xFD9
 13215                           status	equ	0xFD8
 13216                           
 13217 ;; *************** function _drawFastVLine *****************
 13218 ;; Defined at:
 13219 ;;		line 449 in file "ST7735_TFT.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;  x               1    wreg     unsigned char 
 13222 ;;  y               1    7[COMRAM] unsigned char 
 13223 ;;  h               1    8[COMRAM] unsigned char 
 13224 ;;  color           2    9[COMRAM] unsigned int 
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;  x               1   17[COMRAM] unsigned char 
 13227 ;;  lo              1   16[COMRAM] unsigned char 
 13228 ;;  hi              1   15[COMRAM] unsigned char 
 13229 ;; Return value:  Size  Location     Type
 13230 ;;		None               void
 13231 ;; Registers used:
 13232 ;;		wreg, status,2, status,0, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;Total ram usage:       11 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    3
 13245 ;; This function calls:
 13246 ;;		_setAddrWindow
 13247 ;;		_spiwrite
 13248 ;; This function is called by:
 13249 ;;		_fillRect
 13250 ;;		_fillCircleHelper
 13251 ;;		_fillCircle
 13252 ;;		_drawRect
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           	psect	text58
 13257  00C7E2                     __ptext58:
 13258                           	opt stack 0
 13259  00C7E2                     _drawFastVLine:
 13260                           	opt stack 21
 13261                           
 13262                           ;incstack = 0
 13263                           ;drawFastVLine@x stored from wreg
 13264  00C7E2  6E12               	movwf	drawFastVLine@x,c
 13265                           
 13266                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 13267                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 13268  00C7E4  0E80               	movlw	128
 13269  00C7E6  6012               	cpfslt	drawFastVLine@x,c
 13270  00C7E8  D03F               	goto	l193
 13271  00C7EA  0E9F               	movlw	159
 13272  00C7EC  6408               	cpfsgt	drawFastVLine@y,c
 13273  00C7EE  D001               	goto	l3450
 13274                           
 13275                           ;ST7735_TFT.c: 453: return;
 13276  00C7F0  D03B               	goto	l193
 13277  00C7F2                     l3450:
 13278                           
 13279                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 13280  00C7F2  0EFF               	movlw	255
 13281  00C7F4  6E0C               	movwf	??_drawFastVLine& (0+255),c
 13282  00C7F6  0EFF               	movlw	255
 13283  00C7F8  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
 13284  00C7FA  5009               	movf	drawFastVLine@h,w,c
 13285  00C7FC  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
 13286  00C800  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
 13287  00C802  260E               	addwf	??_drawFastVLine+2,f,c
 13288  00C804  0E00               	movlw	0
 13289  00C806  220F               	addwfc	??_drawFastVLine+3,f,c
 13290  00C808  500C               	movf	??_drawFastVLine,w,c
 13291  00C80A  260E               	addwf	??_drawFastVLine+2,f,c
 13292  00C80C  500D               	movf	??_drawFastVLine+1,w,c
 13293  00C80E  220F               	addwfc	??_drawFastVLine+3,f,c
 13294  00C810  BE0F               	btfsc	??_drawFastVLine+3,7,c
 13295  00C812  D00B               	goto	l3454
 13296  00C814  500F               	movf	??_drawFastVLine+3,w,c
 13297  00C816  E104               	bnz	u2500
 13298  00C818  0EA0               	movlw	160
 13299  00C81A  5C0E               	subwf	??_drawFastVLine+2,w,c
 13300  00C81C  A0D8               	btfss	status,0,c
 13301  00C81E  D005               	goto	l3454
 13302  00C820                     u2500:
 13303                           
 13304                           ;ST7735_TFT.c: 455: h = 160 - y;
 13305  00C820  5008               	movf	drawFastVLine@y,w,c
 13306  00C822  0800               	sublw	0
 13307  00C824  0FA0               	addlw	160
 13308  00C826  6E09               	movwf	drawFastVLine@h,c
 13309  00C828  D000               	goto	l3454
 13310  00C82A                     l3454:
 13311                           
 13312                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 13313  00C82A  500B               	movf	drawFastVLine@color+1,w,c
 13314  00C82C  6E10               	movwf	drawFastVLine@hi,c
 13315  00C82E  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
 13316                           
 13317                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 13318  00C832  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
 13319  00C836  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
 13320  00C83A  5008               	movf	drawFastVLine@y,w,c
 13321  00C83C  2409               	addwf	drawFastVLine@h,w,c
 13322  00C83E  6E0C               	movwf	??_drawFastVLine& (0+255),c
 13323  00C840  040C               	decf	??_drawFastVLine,w,c
 13324  00C842  6E06               	movwf	setAddrWindow@y1,c
 13325  00C844  5012               	movf	drawFastVLine@x,w,c
 13326  00C846  ECF2  F061         	call	_setAddrWindow
 13327                           
 13328                           ;ST7735_TFT.c: 458: PORTCbits.RC2 = 1;
 13329  00C84A  8482               	bsf	3970,2,c	;volatile
 13330                           
 13331                           ;ST7735_TFT.c: 459: PORTCbits.RC4 = 0;
 13332  00C84C  9882               	bcf	3970,4,c	;volatile
 13333                           
 13334                           ;ST7735_TFT.c: 461: while (h--) {
 13335  00C84E  D007               	goto	l3466
 13336  00C850                     l3464:
 13337                           
 13338                           ;ST7735_TFT.c: 462: spiwrite(hi);
 13339  00C850  5010               	movf	drawFastVLine@hi,w,c
 13340  00C852  ECAE  F05F         	call	_spiwrite
 13341                           
 13342                           ;ST7735_TFT.c: 463: spiwrite(lo);
 13343  00C856  5011               	movf	drawFastVLine@lo,w,c
 13344  00C858  ECAE  F05F         	call	_spiwrite
 13345  00C85C  D000               	goto	l3466
 13346  00C85E                     l3466:
 13347  00C85E  0609               	decf	drawFastVLine@h,f,c
 13348  00C860  2809               	incf	drawFastVLine@h,w,c
 13349  00C862  A4D8               	btfss	status,2,c
 13350  00C864  D7F5               	goto	l3464
 13351                           
 13352                           ;ST7735_TFT.c: 464: }
 13353                           ;ST7735_TFT.c: 465: PORTCbits.RC4 = 1;
 13354  00C866  8882               	bsf	3970,4,c	;volatile
 13355  00C868                     l193:
 13356  00C868  0012               	return		;funcret
 13357  00C86A                     __end_of_drawFastVLine:
 13358                           	opt stack 0
 13359                           tblptru	equ	0xFF8
 13360                           tblptrh	equ	0xFF7
 13361                           tblptrl	equ	0xFF6
 13362                           tablat	equ	0xFF5
 13363                           prodh	equ	0xFF4
 13364                           prodl	equ	0xFF3
 13365                           intcon2	equ	0xFF1
 13366                           postinc0	equ	0xFEE
 13367                           wreg	equ	0xFE8
 13368                           postdec1	equ	0xFE5
 13369                           fsr1l	equ	0xFE1
 13370                           indf2	equ	0xFDF
 13371                           postinc2	equ	0xFDE
 13372                           postdec2	equ	0xFDD
 13373                           fsr2h	equ	0xFDA
 13374                           fsr2l	equ	0xFD9
 13375                           status	equ	0xFD8
 13376                           
 13377 ;; *************** function _drawPixel *****************
 13378 ;; Defined at:
 13379 ;;		line 440 in file "ST7735_TFT.c"
 13380 ;; Parameters:    Size  Location     Type
 13381 ;;  x               1    wreg     unsigned char 
 13382 ;;  y               1    7[COMRAM] unsigned char 
 13383 ;;  color           2    8[COMRAM] unsigned int 
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;  x               1   10[COMRAM] unsigned char 
 13386 ;; Return value:  Size  Location     Type
 13387 ;;		None               void
 13388 ;; Registers used:
 13389 ;;		wreg, status,2, status,0, cstack
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13395 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;Total ram usage:        4 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    3
 13402 ;; This function calls:
 13403 ;;		_setAddrWindow
 13404 ;;		_write_data
 13405 ;; This function is called by:
 13406 ;;		_drawChar
 13407 ;;		_drawCircle
 13408 ;;		_drawCircleHelper
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           	psect	text59
 13413  00C0FC                     __ptext59:
 13414                           	opt stack 0
 13415  00C0FC                     _drawPixel:
 13416                           	opt stack 22
 13417                           
 13418                           ;incstack = 0
 13419                           ;drawPixel@x stored from wreg
 13420  00C0FC  6E0B               	movwf	drawPixel@x,c
 13421                           
 13422                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 13423  00C0FE  0E80               	movlw	128
 13424  00C100  600B               	cpfslt	drawPixel@x,c
 13425  00C102  D013               	goto	l187
 13426  00C104  0E9F               	movlw	159
 13427  00C106  6408               	cpfsgt	drawPixel@y,c
 13428  00C108  D001               	goto	l3508
 13429                           
 13430                           ;ST7735_TFT.c: 443: return;
 13431  00C10A  D00F               	goto	l187
 13432  00C10C                     l3508:
 13433                           
 13434                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 13435  00C10C  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
 13436  00C110  280B               	incf	drawPixel@x,w,c
 13437  00C112  6E05               	movwf	setAddrWindow@x1,c
 13438  00C114  2808               	incf	drawPixel@y,w,c
 13439  00C116  6E06               	movwf	setAddrWindow@y1,c
 13440  00C118  500B               	movf	drawPixel@x,w,c
 13441  00C11A  ECF2  F061         	call	_setAddrWindow
 13442                           
 13443                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 13444  00C11E  500A               	movf	drawPixel@color+1,w,c
 13445  00C120  EC94  F05F         	call	_write_data
 13446                           
 13447                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 13448  00C124  5009               	movf	drawPixel@color,w,c
 13449  00C126  EC94  F05F         	call	_write_data
 13450  00C12A                     l187:
 13451  00C12A  0012               	return		;funcret
 13452  00C12C                     __end_of_drawPixel:
 13453                           	opt stack 0
 13454                           tblptru	equ	0xFF8
 13455                           tblptrh	equ	0xFF7
 13456                           tblptrl	equ	0xFF6
 13457                           tablat	equ	0xFF5
 13458                           prodh	equ	0xFF4
 13459                           prodl	equ	0xFF3
 13460                           intcon2	equ	0xFF1
 13461                           postinc0	equ	0xFEE
 13462                           wreg	equ	0xFE8
 13463                           postdec1	equ	0xFE5
 13464                           fsr1l	equ	0xFE1
 13465                           indf2	equ	0xFDF
 13466                           postinc2	equ	0xFDE
 13467                           postdec2	equ	0xFDD
 13468                           fsr2h	equ	0xFDA
 13469                           fsr2l	equ	0xFD9
 13470                           status	equ	0xFD8
 13471                           
 13472 ;; *************** function _setAddrWindow *****************
 13473 ;; Defined at:
 13474 ;;		line 425 in file "ST7735_TFT.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  x0              1    wreg     unsigned char 
 13477 ;;  y0              1    3[COMRAM] unsigned char 
 13478 ;;  x1              1    4[COMRAM] unsigned char 
 13479 ;;  y1              1    5[COMRAM] unsigned char 
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  x0              1    6[COMRAM] unsigned char 
 13482 ;; Return value:  Size  Location     Type
 13483 ;;		None               void
 13484 ;; Registers used:
 13485 ;;		wreg, status,2, status,0, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 0/0
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13491 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13494 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13495 ;;Total ram usage:        4 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    2
 13498 ;; This function calls:
 13499 ;;		_write_command
 13500 ;;		_write_data
 13501 ;; This function is called by:
 13502 ;;		_drawPixel
 13503 ;;		_drawFastVLine
 13504 ;;		_fillRectangle
 13505 ;;		_drawFastHLine
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           	psect	text60
 13510  00C3E4                     __ptext60:
 13511                           	opt stack 0
 13512  00C3E4                     _setAddrWindow:
 13513                           	opt stack 21
 13514                           
 13515                           ;incstack = 0
 13516                           ;setAddrWindow@x0 stored from wreg
 13517  00C3E4  6E07               	movwf	setAddrWindow@x0,c
 13518                           
 13519                           ;ST7735_TFT.c: 427: write_command(0x2A);
 13520  00C3E6  0E2A               	movlw	42
 13521  00C3E8  EC8C  F05F         	call	_write_command
 13522                           
 13523                           ;ST7735_TFT.c: 428: write_data(0);
 13524  00C3EC  0E00               	movlw	0
 13525  00C3EE  EC94  F05F         	call	_write_data
 13526                           
 13527                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 13528  00C3F2  5007               	movf	setAddrWindow@x0,w,c
 13529  00C3F4  2477               	addwf	_colstart,w,c
 13530  00C3F6  EC94  F05F         	call	_write_data
 13531                           
 13532                           ;ST7735_TFT.c: 430: write_data(0);
 13533  00C3FA  0E00               	movlw	0
 13534  00C3FC  EC94  F05F         	call	_write_data
 13535                           
 13536                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 13537  00C400  5005               	movf	setAddrWindow@x1,w,c
 13538  00C402  2477               	addwf	_colstart,w,c
 13539  00C404  EC94  F05F         	call	_write_data
 13540                           
 13541                           ;ST7735_TFT.c: 432: write_command(0x2B);
 13542  00C408  0E2B               	movlw	43
 13543  00C40A  EC8C  F05F         	call	_write_command
 13544                           
 13545                           ;ST7735_TFT.c: 433: write_data(0);
 13546  00C40E  0E00               	movlw	0
 13547  00C410  EC94  F05F         	call	_write_data
 13548                           
 13549                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 13550  00C414  5004               	movf	setAddrWindow@y0,w,c
 13551  00C416  247A               	addwf	_rowstart,w,c
 13552  00C418  EC94  F05F         	call	_write_data
 13553                           
 13554                           ;ST7735_TFT.c: 435: write_data(0);
 13555  00C41C  0E00               	movlw	0
 13556  00C41E  EC94  F05F         	call	_write_data
 13557                           
 13558                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 13559  00C422  5006               	movf	setAddrWindow@y1,w,c
 13560  00C424  247A               	addwf	_rowstart,w,c
 13561  00C426  EC94  F05F         	call	_write_data
 13562                           
 13563                           ;ST7735_TFT.c: 437: write_command(0x2C);
 13564  00C42A  0E2C               	movlw	44
 13565  00C42C  EC8C  F05F         	call	_write_command
 13566  00C430  0012               	return		;funcret
 13567  00C432                     __end_of_setAddrWindow:
 13568                           	opt stack 0
 13569                           tblptru	equ	0xFF8
 13570                           tblptrh	equ	0xFF7
 13571                           tblptrl	equ	0xFF6
 13572                           tablat	equ	0xFF5
 13573                           prodh	equ	0xFF4
 13574                           prodl	equ	0xFF3
 13575                           intcon2	equ	0xFF1
 13576                           postinc0	equ	0xFEE
 13577                           wreg	equ	0xFE8
 13578                           postdec1	equ	0xFE5
 13579                           fsr1l	equ	0xFE1
 13580                           indf2	equ	0xFDF
 13581                           postinc2	equ	0xFDE
 13582                           postdec2	equ	0xFDD
 13583                           fsr2h	equ	0xFDA
 13584                           fsr2l	equ	0xFD9
 13585                           status	equ	0xFD8
 13586                           
 13587 ;; *************** function _write_data *****************
 13588 ;; Defined at:
 13589 ;;		line 242 in file "ST7735_TFT.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;  data_           1    wreg     unsigned char 
 13592 ;; Auto vars:     Size  Location     Type
 13593 ;;  data_           1    2[COMRAM] unsigned char 
 13594 ;; Return value:  Size  Location     Type
 13595 ;;		None               void
 13596 ;; Registers used:
 13597 ;;		wreg, status,2, cstack
 13598 ;; Tracked objects:
 13599 ;;		On entry : 0/0
 13600 ;;		On exit  : 0/0
 13601 ;;		Unchanged: 0/0
 13602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;Total ram usage:        1 bytes
 13608 ;; Hardware stack levels used:    1
 13609 ;; Hardware stack levels required when called:    1
 13610 ;; This function calls:
 13611 ;;		_spiwrite
 13612 ;; This function is called by:
 13613 ;;		_Rcmd1
 13614 ;;		_Rcmd2red
 13615 ;;		_Rcmd3
 13616 ;;		_setAddrWindow
 13617 ;;		_drawPixel
 13618 ;;		_TFT_GreenTab_Initialize
 13619 ;;		_Bcmd
 13620 ;;		_setScrollDefinition
 13621 ;;		_Rcmd2green
 13622 ;;		_VerticalScroll
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           	psect	text61
 13627  00BF28                     __ptext61:
 13628                           	opt stack 0
 13629  00BF28                     _write_data:
 13630                           	opt stack 21
 13631                           
 13632                           ;incstack = 0
 13633                           ;write_data@data_ stored from wreg
 13634  00BF28  6E03               	movwf	write_data@data_,c
 13635                           
 13636                           ;ST7735_TFT.c: 244: PORTCbits.RC4 = 0;
 13637  00BF2A  9882               	bcf	3970,4,c	;volatile
 13638                           
 13639                           ;ST7735_TFT.c: 245: PORTCbits.RC2 = 1;
 13640  00BF2C  8482               	bsf	3970,2,c	;volatile
 13641                           
 13642                           ;ST7735_TFT.c: 246: spiwrite(data_);
 13643  00BF2E  5003               	movf	write_data@data_,w,c
 13644  00BF30  ECAE  F05F         	call	_spiwrite
 13645                           
 13646                           ;ST7735_TFT.c: 247: PORTCbits.RC4 = 1;
 13647  00BF34  8882               	bsf	3970,4,c	;volatile
 13648  00BF36  0012               	return		;funcret
 13649  00BF38                     __end_of_write_data:
 13650                           	opt stack 0
 13651                           tblptru	equ	0xFF8
 13652                           tblptrh	equ	0xFF7
 13653                           tblptrl	equ	0xFF6
 13654                           tablat	equ	0xFF5
 13655                           prodh	equ	0xFF4
 13656                           prodl	equ	0xFF3
 13657                           intcon2	equ	0xFF1
 13658                           postinc0	equ	0xFEE
 13659                           wreg	equ	0xFE8
 13660                           postdec1	equ	0xFE5
 13661                           fsr1l	equ	0xFE1
 13662                           indf2	equ	0xFDF
 13663                           postinc2	equ	0xFDE
 13664                           postdec2	equ	0xFDD
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function _write_command *****************
 13670 ;; Defined at:
 13671 ;;		line 231 in file "ST7735_TFT.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  cmd_            1    wreg     unsigned char 
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;  cmd_            1    2[COMRAM] unsigned char 
 13676 ;; Return value:  Size  Location     Type
 13677 ;;		None               void
 13678 ;; Registers used:
 13679 ;;		wreg, status,2, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;Total ram usage:        1 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    1
 13692 ;; This function calls:
 13693 ;;		_spiwrite
 13694 ;; This function is called by:
 13695 ;;		_Rcmd1
 13696 ;;		_Rcmd2red
 13697 ;;		_Rcmd3
 13698 ;;		_setAddrWindow
 13699 ;;		_TFT_GreenTab_Initialize
 13700 ;;		_Bcmd
 13701 ;;		_setScrollDefinition
 13702 ;;		_Rcmd2green
 13703 ;;		_VerticalScroll
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707                           	psect	text62
 13708  00BF18                     __ptext62:
 13709                           	opt stack 0
 13710  00BF18                     _write_command:
 13711                           	opt stack 21
 13712                           
 13713                           ;incstack = 0
 13714                           ;write_command@cmd_ stored from wreg
 13715  00BF18  6E03               	movwf	write_command@cmd_,c
 13716                           
 13717                           ;ST7735_TFT.c: 233: PORTCbits.RC4 = 0;
 13718  00BF1A  9882               	bcf	3970,4,c	;volatile
 13719                           
 13720                           ;ST7735_TFT.c: 235: PORTCbits.RC2 = 0;
 13721  00BF1C  9482               	bcf	3970,2,c	;volatile
 13722                           
 13723                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 13724  00BF1E  5003               	movf	write_command@cmd_,w,c
 13725  00BF20  ECAE  F05F         	call	_spiwrite
 13726                           
 13727                           ;ST7735_TFT.c: 238: PORTCbits.RC4 = 1;
 13728  00BF24  8882               	bsf	3970,4,c	;volatile
 13729  00BF26  0012               	return		;funcret
 13730  00BF28                     __end_of_write_command:
 13731                           	opt stack 0
 13732                           tblptru	equ	0xFF8
 13733                           tblptrh	equ	0xFF7
 13734                           tblptrl	equ	0xFF6
 13735                           tablat	equ	0xFF5
 13736                           prodh	equ	0xFF4
 13737                           prodl	equ	0xFF3
 13738                           intcon2	equ	0xFF1
 13739                           postinc0	equ	0xFEE
 13740                           wreg	equ	0xFE8
 13741                           postdec1	equ	0xFE5
 13742                           fsr1l	equ	0xFE1
 13743                           indf2	equ	0xFDF
 13744                           postinc2	equ	0xFDE
 13745                           postdec2	equ	0xFDD
 13746                           fsr2h	equ	0xFDA
 13747                           fsr2l	equ	0xFD9
 13748                           status	equ	0xFD8
 13749                           
 13750 ;; *************** function _spiwrite *****************
 13751 ;; Defined at:
 13752 ;;		line 222 in file "ST7735_TFT.c"
 13753 ;; Parameters:    Size  Location     Type
 13754 ;;  spidata         1    wreg     unsigned char 
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;  spidata         1    1[COMRAM] unsigned char 
 13757 ;;  x               1    0[COMRAM] unsigned char 
 13758 ;; Return value:  Size  Location     Type
 13759 ;;		None               void
 13760 ;; Registers used:
 13761 ;;		wreg
 13762 ;; Tracked objects:
 13763 ;;		On entry : 0/0
 13764 ;;		On exit  : 0/0
 13765 ;;		Unchanged: 0/0
 13766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;Total ram usage:        2 bytes
 13772 ;; Hardware stack levels used:    1
 13773 ;; This function calls:
 13774 ;;		Nothing
 13775 ;; This function is called by:
 13776 ;;		_write_command
 13777 ;;		_write_data
 13778 ;;		_drawFastVLine
 13779 ;;		_fillRectangle
 13780 ;;		_drawFastHLine
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           	psect	text63
 13785  00BF5C                     __ptext63:
 13786                           	opt stack 0
 13787  00BF5C                     _spiwrite:
 13788                           	opt stack 23
 13789                           
 13790                           ;incstack = 0
 13791                           ;spiwrite@spidata stored from wreg
 13792  00BF5C  6E02               	movwf	spiwrite@spidata,c
 13793                           
 13794                           ;ST7735_TFT.c: 224: char x;
 13795                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 13796  00BF5E  969E               	bcf	3998,3,c	;volatile
 13797                           
 13798                           ;ST7735_TFT.c: 226: x = SSPBUF;
 13799  00BF60  CFC9 F001          	movff	4041,spiwrite@x	;volatile
 13800                           
 13801                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 13802  00BF64  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
 13803                           
 13804                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 13805  00BF68  D000               	goto	l143
 13806  00BF6A                     l143:
 13807  00BF6A  A0C7               	btfss	4039,0,c	;volatile
 13808  00BF6C  D7FE               	goto	l143
 13809  00BF6E  0012               	return		;funcret
 13810  00BF70                     __end_of_spiwrite:
 13811                           	opt stack 0
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon2	equ	0xFF1
 13819                           postinc0	equ	0xFEE
 13820                           wreg	equ	0xFE8
 13821                           postdec1	equ	0xFE5
 13822                           fsr1l	equ	0xFE1
 13823                           indf2	equ	0xFDF
 13824                           postinc2	equ	0xFDE
 13825                           postdec2	equ	0xFDD
 13826                           fsr2h	equ	0xFDA
 13827                           fsr2l	equ	0xFD9
 13828                           status	equ	0xFD8
 13829                           
 13830 ;; *************** function ___wmul *****************
 13831 ;; Defined at:
 13832 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  multiplier      2   14[COMRAM] unsigned int 
 13835 ;;  multiplicand    2   16[COMRAM] unsigned int 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  product         2   18[COMRAM] unsigned int 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  2   14[COMRAM] unsigned int 
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0, prodl, prodh
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;Total ram usage:        6 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; This function calls:
 13854 ;;		Nothing
 13855 ;; This function is called by:
 13856 ;;		_delay_ms
 13857 ;;		_drawChar
 13858 ;;		_main
 13859 ;;		_update_LCD_misc
 13860 ;;		_fround
 13861 ;;		_scale
 13862 ;;		_printf
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text64
 13867  00C052                     __ptext64:
 13868                           	opt stack 0
 13869  00C052                     ___wmul:
 13870                           	opt stack 30
 13871                           
 13872                           ;incstack = 0
 13873  00C052  500F               	movf	___wmul@multiplier,w,c
 13874  00C054  0211               	mulwf	___wmul@multiplicand,c
 13875  00C056  CFF3 F013          	movff	prodl,___wmul@product
 13876  00C05A  CFF4 F014          	movff	prodh,___wmul@product+1
 13877  00C05E  500F               	movf	___wmul@multiplier,w,c
 13878  00C060  0212               	mulwf	___wmul@multiplicand+1,c
 13879  00C062  50F3               	movf	prodl,w,c
 13880  00C064  2614               	addwf	___wmul@product+1,f,c
 13881  00C066  5010               	movf	___wmul@multiplier+1,w,c
 13882  00C068  0211               	mulwf	___wmul@multiplicand,c
 13883  00C06A  50F3               	movf	prodl,w,c
 13884  00C06C  2614               	addwf	___wmul@product+1,f,c
 13885  00C06E  C013  F00F         	movff	___wmul@product,?___wmul
 13886  00C072  C014  F010         	movff	___wmul@product+1,?___wmul+1
 13887  00C076  D000               	goto	l686
 13888  00C078                     l686:
 13889  00C078  0012               	return		;funcret
 13890  00C07A                     __end_of___wmul:
 13891                           	opt stack 0
 13892                           tblptru	equ	0xFF8
 13893                           tblptrh	equ	0xFF7
 13894                           tblptrl	equ	0xFF6
 13895                           tablat	equ	0xFF5
 13896                           prodh	equ	0xFF4
 13897                           prodl	equ	0xFF3
 13898                           intcon2	equ	0xFF1
 13899                           postinc0	equ	0xFEE
 13900                           wreg	equ	0xFE8
 13901                           postdec1	equ	0xFE5
 13902                           fsr1l	equ	0xFE1
 13903                           indf2	equ	0xFDF
 13904                           postinc2	equ	0xFDE
 13905                           postdec2	equ	0xFDD
 13906                           fsr2h	equ	0xFDA
 13907                           fsr2l	equ	0xFD9
 13908                           status	equ	0xFD8
 13909                           
 13910 ;; *************** function ___awmod *****************
 13911 ;; Defined at:
 13912 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;  dividend        2    0[COMRAM] int 
 13915 ;;  divisor         2    2[COMRAM] int 
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;  sign            1    5[COMRAM] unsigned char 
 13918 ;;  counter         1    4[COMRAM] unsigned char 
 13919 ;; Return value:  Size  Location     Type
 13920 ;;                  2    0[COMRAM] int 
 13921 ;; Registers used:
 13922 ;;		wreg, status,2, status,0
 13923 ;; Tracked objects:
 13924 ;;		On entry : 0/0
 13925 ;;		On exit  : 0/0
 13926 ;;		Unchanged: 0/0
 13927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;Total ram usage:        6 bytes
 13933 ;; Hardware stack levels used:    1
 13934 ;; This function calls:
 13935 ;;		Nothing
 13936 ;; This function is called by:
 13937 ;;		_update_LCD_count
 13938 ;;		_update_LCD_PED_Count
 13939 ;;		_fround
 13940 ;;		_scale
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           	psect	text65
 13945  00C6DE                     __ptext65:
 13946                           	opt stack 0
 13947  00C6DE                     ___awmod:
 13948                           	opt stack 27
 13949                           
 13950                           ;incstack = 0
 13951  00C6DE  0E00               	movlw	0
 13952  00C6E0  6E06               	movwf	___awmod@sign,c
 13953  00C6E2  AE02               	btfss	___awmod@dividend+1,7,c
 13954  00C6E4  D007               	goto	l3698
 13955  00C6E6  6C01               	negf	___awmod@dividend,c
 13956  00C6E8  1E02               	comf	___awmod@dividend+1,f,c
 13957  00C6EA  B0D8               	btfsc	status,0,c
 13958  00C6EC  2A02               	incf	___awmod@dividend+1,f,c
 13959  00C6EE  0E01               	movlw	1
 13960  00C6F0  6E06               	movwf	___awmod@sign,c
 13961  00C6F2  D000               	goto	l3698
 13962  00C6F4                     l3698:
 13963  00C6F4  AE04               	btfss	___awmod@divisor+1,7,c
 13964  00C6F6  D005               	goto	l3702
 13965  00C6F8  6C03               	negf	___awmod@divisor,c
 13966  00C6FA  1E04               	comf	___awmod@divisor+1,f,c
 13967  00C6FC  B0D8               	btfsc	status,0,c
 13968  00C6FE  2A04               	incf	___awmod@divisor+1,f,c
 13969  00C700  D000               	goto	l3702
 13970  00C702                     l3702:
 13971  00C702  5003               	movf	___awmod@divisor,w,c
 13972  00C704  1004               	iorwf	___awmod@divisor+1,w,c
 13973  00C706  B4D8               	btfsc	status,2,c
 13974  00C708  D01D               	goto	l3718
 13975  00C70A  0E01               	movlw	1
 13976  00C70C  6E05               	movwf	___awmod@counter,c
 13977  00C70E  D005               	goto	l3708
 13978  00C710                     l3706:
 13979  00C710  90D8               	bcf	status,0,c
 13980  00C712  3603               	rlcf	___awmod@divisor,f,c
 13981  00C714  3604               	rlcf	___awmod@divisor+1,f,c
 13982  00C716  2A05               	incf	___awmod@counter,f,c
 13983  00C718  D000               	goto	l3708
 13984  00C71A                     l3708:
 13985  00C71A  BE04               	btfsc	___awmod@divisor+1,7,c
 13986  00C71C  D002               	goto	l3710
 13987  00C71E  D7F8               	goto	l3706
 13988  00C720  D000               	goto	l3710
 13989  00C722                     l3710:
 13990  00C722  5003               	movf	___awmod@divisor,w,c
 13991  00C724  5C01               	subwf	___awmod@dividend,w,c
 13992  00C726  5004               	movf	___awmod@divisor+1,w,c
 13993  00C728  5802               	subwfb	___awmod@dividend+1,w,c
 13994  00C72A  A0D8               	btfss	status,0,c
 13995  00C72C  D005               	goto	l3714
 13996  00C72E  5003               	movf	___awmod@divisor,w,c
 13997  00C730  5E01               	subwf	___awmod@dividend,f,c
 13998  00C732  5004               	movf	___awmod@divisor+1,w,c
 13999  00C734  5A02               	subwfb	___awmod@dividend+1,f,c
 14000  00C736  D000               	goto	l3714
 14001  00C738                     l3714:
 14002  00C738  90D8               	bcf	status,0,c
 14003  00C73A  3204               	rrcf	___awmod@divisor+1,f,c
 14004  00C73C  3203               	rrcf	___awmod@divisor,f,c
 14005  00C73E  2E05               	decfsz	___awmod@counter,f,c
 14006  00C740  D7F0               	goto	l3710
 14007  00C742  D000               	goto	l3718
 14008  00C744                     l3718:
 14009  00C744  5006               	movf	___awmod@sign,w,c
 14010  00C746  B4D8               	btfsc	status,2,c
 14011  00C748  D005               	goto	l3722
 14012  00C74A  6C01               	negf	___awmod@dividend,c
 14013  00C74C  1E02               	comf	___awmod@dividend+1,f,c
 14014  00C74E  B0D8               	btfsc	status,0,c
 14015  00C750  2A02               	incf	___awmod@dividend+1,f,c
 14016  00C752  D000               	goto	l3722
 14017  00C754                     l3722:
 14018  00C754  C001  F001         	movff	___awmod@dividend,?___awmod
 14019  00C758  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14020  00C75C  D000               	goto	l892
 14021  00C75E                     l892:
 14022  00C75E  0012               	return		;funcret
 14023  00C760                     __end_of___awmod:
 14024                           	opt stack 0
 14025                           tblptru	equ	0xFF8
 14026                           tblptrh	equ	0xFF7
 14027                           tblptrl	equ	0xFF6
 14028                           tablat	equ	0xFF5
 14029                           prodh	equ	0xFF4
 14030                           prodl	equ	0xFF3
 14031                           intcon2	equ	0xFF1
 14032                           postinc0	equ	0xFEE
 14033                           wreg	equ	0xFE8
 14034                           postdec1	equ	0xFE5
 14035                           fsr1l	equ	0xFE1
 14036                           indf2	equ	0xFDF
 14037                           postinc2	equ	0xFDE
 14038                           postdec2	equ	0xFDD
 14039                           fsr2h	equ	0xFDA
 14040                           fsr2l	equ	0xFD9
 14041                           status	equ	0xFD8
 14042                           
 14043 ;; *************** function ___awdiv *****************
 14044 ;; Defined at:
 14045 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14046 ;; Parameters:    Size  Location     Type
 14047 ;;  dividend        2    6[COMRAM] int 
 14048 ;;  divisor         2    8[COMRAM] int 
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;  quotient        2   12[COMRAM] int 
 14051 ;;  sign            1   11[COMRAM] unsigned char 
 14052 ;;  counter         1   10[COMRAM] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  2    6[COMRAM] int 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14066 ;;Total ram usage:        8 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; This function calls:
 14069 ;;		Nothing
 14070 ;; This function is called by:
 14071 ;;		_update_LCD_count
 14072 ;;		_update_LCD_PED_Count
 14073 ;;		_fround
 14074 ;;		_scale
 14075 ;;		_printf
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           	psect	text66
 14080  00C97E                     __ptext66:
 14081                           	opt stack 0
 14082  00C97E                     ___awdiv:
 14083                           	opt stack 27
 14084                           
 14085                           ;incstack = 0
 14086  00C97E  0E00               	movlw	0
 14087  00C980  6E0C               	movwf	___awdiv@sign,c
 14088  00C982  AE0A               	btfss	___awdiv@divisor+1,7,c
 14089  00C984  D007               	goto	l3654
 14090  00C986  6C09               	negf	___awdiv@divisor,c
 14091  00C988  1E0A               	comf	___awdiv@divisor+1,f,c
 14092  00C98A  B0D8               	btfsc	status,0,c
 14093  00C98C  2A0A               	incf	___awdiv@divisor+1,f,c
 14094  00C98E  0E01               	movlw	1
 14095  00C990  6E0C               	movwf	___awdiv@sign,c
 14096  00C992  D000               	goto	l3654
 14097  00C994                     l3654:
 14098  00C994  AE08               	btfss	___awdiv@dividend+1,7,c
 14099  00C996  D007               	goto	l3660
 14100  00C998  6C07               	negf	___awdiv@dividend,c
 14101  00C99A  1E08               	comf	___awdiv@dividend+1,f,c
 14102  00C99C  B0D8               	btfsc	status,0,c
 14103  00C99E  2A08               	incf	___awdiv@dividend+1,f,c
 14104  00C9A0  0E01               	movlw	1
 14105  00C9A2  1A0C               	xorwf	___awdiv@sign,f,c
 14106  00C9A4  D000               	goto	l3660
 14107  00C9A6                     l3660:
 14108  00C9A6  0E00               	movlw	0
 14109  00C9A8  6E0E               	movwf	___awdiv@quotient+1,c
 14110  00C9AA  0E00               	movlw	0
 14111  00C9AC  6E0D               	movwf	___awdiv@quotient,c
 14112  00C9AE  5009               	movf	___awdiv@divisor,w,c
 14113  00C9B0  100A               	iorwf	___awdiv@divisor+1,w,c
 14114  00C9B2  B4D8               	btfsc	status,2,c
 14115  00C9B4  D021               	goto	l3682
 14116  00C9B6  0E01               	movlw	1
 14117  00C9B8  6E0B               	movwf	___awdiv@counter,c
 14118  00C9BA  D005               	goto	l3668
 14119  00C9BC                     l3666:
 14120  00C9BC  90D8               	bcf	status,0,c
 14121  00C9BE  3609               	rlcf	___awdiv@divisor,f,c
 14122  00C9C0  360A               	rlcf	___awdiv@divisor+1,f,c
 14123  00C9C2  2A0B               	incf	___awdiv@counter,f,c
 14124  00C9C4  D000               	goto	l3668
 14125  00C9C6                     l3668:
 14126  00C9C6  BE0A               	btfsc	___awdiv@divisor+1,7,c
 14127  00C9C8  D002               	goto	l3670
 14128  00C9CA  D7F8               	goto	l3666
 14129  00C9CC  D000               	goto	l3670
 14130  00C9CE                     l3670:
 14131  00C9CE  90D8               	bcf	status,0,c
 14132  00C9D0  360D               	rlcf	___awdiv@quotient,f,c
 14133  00C9D2  360E               	rlcf	___awdiv@quotient+1,f,c
 14134  00C9D4  5009               	movf	___awdiv@divisor,w,c
 14135  00C9D6  5C07               	subwf	___awdiv@dividend,w,c
 14136  00C9D8  500A               	movf	___awdiv@divisor+1,w,c
 14137  00C9DA  5808               	subwfb	___awdiv@dividend+1,w,c
 14138  00C9DC  A0D8               	btfss	status,0,c
 14139  00C9DE  D006               	goto	l3678
 14140  00C9E0  5009               	movf	___awdiv@divisor,w,c
 14141  00C9E2  5E07               	subwf	___awdiv@dividend,f,c
 14142  00C9E4  500A               	movf	___awdiv@divisor+1,w,c
 14143  00C9E6  5A08               	subwfb	___awdiv@dividend+1,f,c
 14144  00C9E8  800D               	bsf	___awdiv@quotient,0,c
 14145  00C9EA  D000               	goto	l3678
 14146  00C9EC                     l3678:
 14147  00C9EC  90D8               	bcf	status,0,c
 14148  00C9EE  320A               	rrcf	___awdiv@divisor+1,f,c
 14149  00C9F0  3209               	rrcf	___awdiv@divisor,f,c
 14150  00C9F2  2E0B               	decfsz	___awdiv@counter,f,c
 14151  00C9F4  D7EC               	goto	l3670
 14152  00C9F6  D000               	goto	l3682
 14153  00C9F8                     l3682:
 14154  00C9F8  500C               	movf	___awdiv@sign,w,c
 14155  00C9FA  B4D8               	btfsc	status,2,c
 14156  00C9FC  D005               	goto	l3686
 14157  00C9FE  6C0D               	negf	___awdiv@quotient,c
 14158  00CA00  1E0E               	comf	___awdiv@quotient+1,f,c
 14159  00CA02  B0D8               	btfsc	status,0,c
 14160  00CA04  2A0E               	incf	___awdiv@quotient+1,f,c
 14161  00CA06  D000               	goto	l3686
 14162  00CA08                     l3686:
 14163  00CA08  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 14164  00CA0C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 14165  00CA10  D000               	goto	l879
 14166  00CA12                     l879:
 14167  00CA12  0012               	return		;funcret
 14168  00CA14                     __end_of___awdiv:
 14169                           	opt stack 0
 14170                           tblptru	equ	0xFF8
 14171                           tblptrh	equ	0xFF7
 14172                           tblptrl	equ	0xFF6
 14173                           tablat	equ	0xFF5
 14174                           prodh	equ	0xFF4
 14175                           prodl	equ	0xFF3
 14176                           intcon2	equ	0xFF1
 14177                           postinc0	equ	0xFEE
 14178                           wreg	equ	0xFE8
 14179                           postdec1	equ	0xFE5
 14180                           fsr1l	equ	0xFE1
 14181                           indf2	equ	0xFDF
 14182                           postinc2	equ	0xFDE
 14183                           postdec2	equ	0xFDD
 14184                           fsr2h	equ	0xFDA
 14185                           fsr2l	equ	0xFD9
 14186                           status	equ	0xFD8
 14187                           
 14188 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
 14189 ;; Defined at:
 14190 ;;		line 501 in file "Lab8p1.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;		None
 14195 ;; Return value:  Size  Location     Type
 14196 ;;		None               void
 14197 ;; Registers used:
 14198 ;;		wreg, status,2, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14208 ;;Total ram usage:        0 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    1
 14211 ;; This function calls:
 14212 ;;		_Activate_Buzzer
 14213 ;;		_Deactivate_Buzzer
 14214 ;;		_WAIT_HALF_SEC
 14215 ;; This function is called by:
 14216 ;;		_PED_Control
 14217 ;; This function uses a non-reentrant model
 14218 ;;
 14219                           
 14220                           	psect	text67
 14221  00BF84                     __ptext67:
 14222                           	opt stack 0
 14223  00BF84                     _WAIT_1_SEC_W_BEEP:
 14224                           	opt stack 27
 14225                           
 14226                           ;Lab8p1.c: 503: PORTDbits.RD7 = 1;
 14227                           
 14228                           ;incstack = 0
 14229  00BF84  8E83               	bsf	3971,7,c	;volatile
 14230                           
 14231                           ;Lab8p1.c: 504: Activate_Buzzer();
 14232  00BF86  EC9C  F05F         	call	_Activate_Buzzer	;wreg free
 14233                           
 14234                           ;Lab8p1.c: 505: WAIT_HALF_SEC();
 14235  00BF8A  ECD8  F05F         	call	_WAIT_HALF_SEC	;wreg free
 14236                           
 14237                           ;Lab8p1.c: 506: PORTDbits.RD7 = 0;
 14238  00BF8E  9E83               	bcf	3971,7,c	;volatile
 14239                           
 14240                           ;Lab8p1.c: 507: Deactivate_Buzzer ();
 14241  00BF90  EC74  F05F         	call	_Deactivate_Buzzer	;wreg free
 14242                           
 14243                           ;Lab8p1.c: 508: WAIT_HALF_SEC();
 14244  00BF94  ECD8  F05F         	call	_WAIT_HALF_SEC	;wreg free
 14245  00BF98  0012               	return		;funcret
 14246  00BF9A                     __end_of_WAIT_1_SEC_W_BEEP:
 14247                           	opt stack 0
 14248                           tblptru	equ	0xFF8
 14249                           tblptrh	equ	0xFF7
 14250                           tblptrl	equ	0xFF6
 14251                           tablat	equ	0xFF5
 14252                           prodh	equ	0xFF4
 14253                           prodl	equ	0xFF3
 14254                           intcon2	equ	0xFF1
 14255                           postinc0	equ	0xFEE
 14256                           wreg	equ	0xFE8
 14257                           postdec1	equ	0xFE5
 14258                           fsr1l	equ	0xFE1
 14259                           indf2	equ	0xFDF
 14260                           postinc2	equ	0xFDE
 14261                           postdec2	equ	0xFDD
 14262                           fsr2h	equ	0xFDA
 14263                           fsr2l	equ	0xFD9
 14264                           status	equ	0xFD8
 14265                           
 14266 ;; *************** function _WAIT_HALF_SEC *****************
 14267 ;; Defined at:
 14268 ;;		line 478 in file "Lab8p1.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;		None
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;		None
 14273 ;; Return value:  Size  Location     Type
 14274 ;;		None               void
 14275 ;; Registers used:
 14276 ;;		wreg, status,2
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14286 ;;Total ram usage:        0 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; This function calls:
 14289 ;;		Nothing
 14290 ;; This function is called by:
 14291 ;;		_WAIT_1_SEC
 14292 ;;		_WAIT_1_SEC_W_BEEP
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           	psect	text68
 14297  00BFB0                     __ptext68:
 14298                           	opt stack 0
 14299  00BFB0                     _WAIT_HALF_SEC:
 14300                           	opt stack 27
 14301                           
 14302                           ;Lab8p1.c: 480: T0CON = 0x03;
 14303                           
 14304                           ;incstack = 0
 14305  00BFB0  0E03               	movlw	3
 14306  00BFB2  6ED5               	movwf	4053,c	;volatile
 14307                           
 14308                           ;Lab8p1.c: 481: TMR0L = 0xDB;
 14309  00BFB4  0EDB               	movlw	219
 14310  00BFB6  6ED6               	movwf	4054,c	;volatile
 14311                           
 14312                           ;Lab8p1.c: 482: TMR0H = 0xB;
 14313  00BFB8  0E0B               	movlw	11
 14314  00BFBA  6ED7               	movwf	4055,c	;volatile
 14315                           
 14316                           ;Lab8p1.c: 483: INTCONbits.TMR0IF = 0;
 14317  00BFBC  94F2               	bcf	intcon,2,c	;volatile
 14318                           
 14319                           ;Lab8p1.c: 484: T0CONbits.TMR0ON = 1;
 14320  00BFBE  8ED5               	bsf	4053,7,c	;volatile
 14321                           
 14322                           ;Lab8p1.c: 485: while (INTCONbits.TMR0IF == 0);
 14323  00BFC0  D000               	goto	l424
 14324  00BFC2                     l424:
 14325  00BFC2  A4F2               	btfss	intcon,2,c	;volatile
 14326  00BFC4  D7FE               	goto	l424
 14327                           
 14328                           ;Lab8p1.c: 486: T0CONbits.TMR0ON = 0;
 14329  00BFC6  9ED5               	bcf	4053,7,c	;volatile
 14330  00BFC8  0012               	return		;funcret
 14331  00BFCA                     __end_of_WAIT_HALF_SEC:
 14332                           	opt stack 0
 14333                           tblptru	equ	0xFF8
 14334                           tblptrh	equ	0xFF7
 14335                           tblptrl	equ	0xFF6
 14336                           tablat	equ	0xFF5
 14337                           prodh	equ	0xFF4
 14338                           prodl	equ	0xFF3
 14339                           intcon	equ	0xFF2
 14340                           intcon2	equ	0xFF1
 14341                           postinc0	equ	0xFEE
 14342                           wreg	equ	0xFE8
 14343                           postdec1	equ	0xFE5
 14344                           fsr1l	equ	0xFE1
 14345                           indf2	equ	0xFDF
 14346                           postinc2	equ	0xFDE
 14347                           postdec2	equ	0xFDD
 14348                           fsr2h	equ	0xFDA
 14349                           fsr2l	equ	0xFD9
 14350                           status	equ	0xFD8
 14351                           
 14352 ;; *************** function _Deactivate_Buzzer *****************
 14353 ;; Defined at:
 14354 ;;		line 519 in file "Lab8p1.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;		None
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;		None
 14359 ;; Return value:  Size  Location     Type
 14360 ;;		None               void
 14361 ;; Registers used:
 14362 ;;		wreg, status,2
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;Total ram usage:        0 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_WAIT_1_SEC_W_BEEP
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           	psect	text69
 14382  00BEE8                     __ptext69:
 14383                           	opt stack 0
 14384  00BEE8                     _Deactivate_Buzzer:
 14385                           	opt stack 27
 14386                           
 14387                           ;Lab8p1.c: 521: CCP2CON = 0x0;
 14388                           
 14389                           ;incstack = 0
 14390  00BEE8  0E00               	movlw	0
 14391  00BEEA  6EBA               	movwf	4026,c	;volatile
 14392                           
 14393                           ;Lab8p1.c: 522: PORTBbits.RB3 = 0;
 14394  00BEEC  9681               	bcf	3969,3,c	;volatile
 14395  00BEEE  0012               	return		;funcret
 14396  00BEF0                     __end_of_Deactivate_Buzzer:
 14397                           	opt stack 0
 14398                           tblptru	equ	0xFF8
 14399                           tblptrh	equ	0xFF7
 14400                           tblptrl	equ	0xFF6
 14401                           tablat	equ	0xFF5
 14402                           prodh	equ	0xFF4
 14403                           prodl	equ	0xFF3
 14404                           intcon	equ	0xFF2
 14405                           intcon2	equ	0xFF1
 14406                           postinc0	equ	0xFEE
 14407                           wreg	equ	0xFE8
 14408                           postdec1	equ	0xFE5
 14409                           fsr1l	equ	0xFE1
 14410                           indf2	equ	0xFDF
 14411                           postinc2	equ	0xFDE
 14412                           postdec2	equ	0xFDD
 14413                           fsr2h	equ	0xFDA
 14414                           fsr2l	equ	0xFD9
 14415                           status	equ	0xFD8
 14416                           
 14417 ;; *************** function _Activate_Buzzer *****************
 14418 ;; Defined at:
 14419 ;;		line 511 in file "Lab8p1.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;		None
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;		None
 14424 ;; Return value:  Size  Location     Type
 14425 ;;		None               void
 14426 ;; Registers used:
 14427 ;;		wreg, status,2
 14428 ;; Tracked objects:
 14429 ;;		On entry : 0/0
 14430 ;;		On exit  : 0/0
 14431 ;;		Unchanged: 0/0
 14432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;Total ram usage:        0 bytes
 14438 ;; Hardware stack levels used:    1
 14439 ;; This function calls:
 14440 ;;		Nothing
 14441 ;; This function is called by:
 14442 ;;		_WAIT_1_SEC_W_BEEP
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445                           
 14446                           	psect	text70
 14447  00BF38                     __ptext70:
 14448                           	opt stack 0
 14449  00BF38                     _Activate_Buzzer:
 14450                           	opt stack 27
 14451                           
 14452                           ;Lab8p1.c: 513: PR2 = 0b11111001 ;
 14453                           
 14454                           ;incstack = 0
 14455  00BF38  0EF9               	movlw	249
 14456  00BF3A  6ECB               	movwf	4043,c	;volatile
 14457                           
 14458                           ;Lab8p1.c: 514: T2CON = 0b00000101 ;
 14459  00BF3C  0E05               	movlw	5
 14460  00BF3E  6ECA               	movwf	4042,c	;volatile
 14461                           
 14462                           ;Lab8p1.c: 515: CCPR2L = 0b01001010 ;
 14463  00BF40  0E4A               	movlw	74
 14464  00BF42  6EBB               	movwf	4027,c	;volatile
 14465                           
 14466                           ;Lab8p1.c: 516: CCP2CON = 0b00111100 ;
 14467  00BF44  0E3C               	movlw	60
 14468  00BF46  6EBA               	movwf	4026,c	;volatile
 14469  00BF48  0012               	return		;funcret
 14470  00BF4A                     __end_of_Activate_Buzzer:
 14471                           	opt stack 0
 14472                           tblptru	equ	0xFF8
 14473                           tblptrh	equ	0xFF7
 14474                           tblptrl	equ	0xFF6
 14475                           tablat	equ	0xFF5
 14476                           prodh	equ	0xFF4
 14477                           prodl	equ	0xFF3
 14478                           intcon	equ	0xFF2
 14479                           intcon2	equ	0xFF1
 14480                           postinc0	equ	0xFEE
 14481                           wreg	equ	0xFE8
 14482                           postdec1	equ	0xFE5
 14483                           fsr1l	equ	0xFE1
 14484                           indf2	equ	0xFDF
 14485                           postinc2	equ	0xFDE
 14486                           postdec2	equ	0xFDD
 14487                           fsr2h	equ	0xFDA
 14488                           fsr2l	equ	0xFD9
 14489                           status	equ	0xFD8
 14490                           tblptru	equ	0xFF8
 14491                           tblptrh	equ	0xFF7
 14492                           tblptrl	equ	0xFF6
 14493                           tablat	equ	0xFF5
 14494                           prodh	equ	0xFF4
 14495                           prodl	equ	0xFF3
 14496                           intcon	equ	0xFF2
 14497                           intcon2	equ	0xFF1
 14498                           postinc0	equ	0xFEE
 14499                           wreg	equ	0xFE8
 14500                           postdec1	equ	0xFE5
 14501                           fsr1l	equ	0xFE1
 14502                           indf2	equ	0xFDF
 14503                           postinc2	equ	0xFDE
 14504                           postdec2	equ	0xFDD
 14505                           fsr2h	equ	0xFDA
 14506                           fsr2l	equ	0xFD9
 14507                           status	equ	0xFD8
 14508                           
 14509                           	psect	rparam
 14510  0000                     tblptru	equ	0xFF8
 14511                           tblptrh	equ	0xFF7
 14512                           tblptrl	equ	0xFF6
 14513                           tablat	equ	0xFF5
 14514                           prodh	equ	0xFF4
 14515                           prodl	equ	0xFF3
 14516                           intcon	equ	0xFF2
 14517                           intcon2	equ	0xFF1
 14518                           postinc0	equ	0xFEE
 14519                           wreg	equ	0xFE8
 14520                           postdec1	equ	0xFE5
 14521                           fsr1l	equ	0xFE1
 14522                           indf2	equ	0xFDF
 14523                           postinc2	equ	0xFDE
 14524                           postdec2	equ	0xFDD
 14525                           fsr2h	equ	0xFDA
 14526                           fsr2l	equ	0xFD9
 14527                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    593
    Data        46
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    108     127
    BANK0           128      0      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_15(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_WAIT_N_SEC
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_WAIT_N_SEC
    _update_LCD_count->_drawtext
    _WAIT_1_SEC->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  491114
                                            106 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  198955
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   59470
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    7218
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    3519
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    3519
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    3429
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    3429
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  224824
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0  120715
                                            104 COMRAM     2     2      0
                         _WAIT_1_SEC
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     3     2      1   25761
                                             57 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0   94864
                      _WAIT_HALF_SEC
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   71752
                                             99 COMRAM     5     5      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   42584
                                             63 COMRAM    36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   10604
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   10406
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3636
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    3131
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    2878
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     666
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2318
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1943
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   25869
                                             60 COMRAM     2     1      1
                  _WAIT_1_SEC_W_BEEP
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 3     2      1   25673
                                             57 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   21553
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10316
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2597
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1886
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1996
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      4F       5       61.7%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6C      7F       1      100.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE       6        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 02 21:02:41 2022

                     drawCircle@f 001A                       drawCircle@r 0010  
                     drawCircle@x 001C                       drawCircle@y 001E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 000C  
                    drawCircle@y0 000E                      ___awdiv@sign 000C  
             ___wmul@multiplicand 0011          update_LCD_color@Circle_Y 0035  
                    ___ftadd@exp1 0039                      ___ftadd@exp2 0038  
                    ___ftadd@sign 0037                               l211 D864  
                             l133 C4CE                               l143 BF6A  
                             l209 D98A                               l218 D8E0  
                             l250 CE58                               l403 CBF8  
                             l246 CE5A                               l415 C030  
                             l247 CDC6                               l424 BFC2  
                             l193 C868                               l505 D1E8  
                             l257 DBF8                               l249 CE36  
                             l450 C2E0                               l418 C050  
                             l187 C12A                               l275 D76C  
                             l291 C8F0                               l452 C2E4  
                             l620 F784                               l453 C2EA  
                             l461 C328                               l470 C25C  
                             l454 C2EE                               l462 C32E  
                             l542 E2C8                               l374 BF00  
                             l471 C262                               l455 C310  
                             l463 C332                               l391 CC7A  
                             l472 C266                               l480 C2A6  
                             l464 C354                               l473 C288  
                             l481 C2AA                               l482 C2CC  
                             l650 FA60                               l459 C324  
                             l395 CCB8                               l468 C258  
                             l477 C29C                               l549 EA0A  
                             l389 CC2A                               l479 C2A0  
                             l904 C1C8                               l680 C6C0  
                             l489 E62A                               l681 C6C2  
                             l498 DB34                               l674 C69A  
                             l683 C6DC                               l686 C078  
                             l678 C6B4                               l679 C6B6  
                             l970 D4DC                               l892 C75E  
                             l879 CA12                               l979 D4CC  
   update_LCD_PED_Count@direction 003C                               _PR2 000FCB  
               _Deactivate_Buzzer BEE8                               _dir 0078  
                             _nbr 00AE                               _txt 006D  
                  drawFastHLine@w 0009                    drawFastHLine@x 0012  
                  drawFastHLine@y 0008                      ___awmod@sign 0006  
         __end_of_update_LCD_misc E086                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 000D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize C0A4              PED_Control@Direction 0001  
                    ___ftdiv@cntr 0022                      ___ftdiv@sign 0027  
                    __CFG_WDT$OFF 000000                              l1011 CD7E  
                            l1100 D5DC                              l1022 CD56  
                            l1210 C534                              l1051 DD28  
                            l1115 D3D2                              l1052 DEA6  
                            l1132 C398                    drawFastVLine@h 0009  
                            l1109 CAA8                              l1125 C01E  
                            l1055 DD52                              l1151 C006  
                            l1136 D100                              l1066 DE14  
                            l1083 D01A                              l1075 DE30  
                            l1091 D5EC                              l1180 C96C  
                            l1093 D554                              l1086 CFE6  
                            l1190 C65C                              l1094 D57C  
                            l4004 CAA4                              l4100 C4EA  
                  drawFastVLine@x 0012                    drawFastVLine@y 0008  
                            l1286 C206                              l4040 D0A4  
                            l4200 F198                              l4130 CEE2  
                            l4114 CE84                              l4042 D0AA  
                            l4050 D0D6                              l4018 D03A  
                            l5002 C0DE                              l4140 CF2C  
                            l3500 CD70                              l4036 D094  
                            l4300 F54A                              l4220 F26A  
                            l4126 CEC8                              l4054 D0EE  
                            l4046 D0BE                              l4310 F5C0  
                            l4230 F2A2                              l4214 F21A  
                            l3520 C3C0                              l4152 D752  
                            l4048 D0CC                              l4064 C914  
                            l4400 F926                              l4304 F5B0  
                            l4224 F278                              l4208 F1F8  
                            l5008 C0F0                              l3450 C7F2  
                            l4138 CF26                              l4066 C922  
                            l3610 D322                              l4410 F96C  
                            l4322 F626                              l4314 F5F0  
                            l4306 F5B4                              l4218 F252  
                            l3508 C10C                              l3516 C3A4  
                            l4172 D820                              l4076 C95C  
                            l4068 C92A                              l4092 C64C  
                            l4084 C610                              l3604 D2FA  
                            l4404 F948                              l4332 F662  
                            l4236 F2B8                              l4228 F280  
                            l5140 CC04                              l3710 C722  
                            l3702 C702                              l3454 C82A  
                            l4502 C1A4                              l3542 DD60  
                            l4086 C61E                              l3606 D314  
                            l4430 F9E6                              l4422 F9BC  
                            l4342 F692                              l4326 F642  
                            l4318 F5F4                              l4270 F3F0  
                            l4262 F38C                              l4246 F2FA  
                            l4190 F15A                              l3464 C850  
                            l4168 D7CE                              l3480 CD06  
                            l3472 CCCA                              l3536 DD36  
                            l4088 C626                              l3632 D37E  
                            l3624 D356                              l4432 F9EE  
                            l4424 F9C6                              l4416 F98E  
                            l4360 F760                              l4344 F6A0  
                            l4336 F670                              l4280 F466  
                            l4184 F136                              l5216 CBB4  
                            l3722 C754                              l3714 C738  
                            l3706 C710                              l3466 C85E  
                            l3730 D846                              l3570 DDD8  
                            l4098 C4DC                              l3642 D3AC  
                            l3634 D384                              l4442 FA26  
                            l4418 F998                              l4362 F76E  
                            l4338 F684                              l4354 F746  
                            l4290 F4C2                              l4274 F416  
                            l4194 F164                              l3660 C9A6  
                            l3708 C71A                              l3740 D868  
                            l3484 CD1E                              l3476 CCDA  
                            l4460 CF80                              l3564 DDB8  
                            l3548 DD6C                              l3900 D58A  
                            l3628 D368                              l3812 E288  
                            l3804 E1C4                              l4436 FA06  
                            l4372 F7A4                              l4356 F752  
                            l4348 F6BC                              l4292 F4CC  
                            l4276 F426                              l4196 F17A  
                            l4188 F148                              l4620 DFA6  
                            l4612 DF88                              l4604 DF68  
                            l3670 C9CE                              l3654 C994  
                            l3718 C744                              l3750 D8D4  
                            l3734 D852                              l3494 CD5E  
                            l3486 CD3E                              l3478 CCE6  
                            l4454 CF58                              l3566 DDC4  
                            l3558 DD94                              l3638 D396  
                            l4438 FA0E                              l4382 F8CA  
                            l4366 F78A                              l4286 F49E  
                            l4278 F456                              l4390 F8F0  
                            l4446 FA42                              l4622 DFAC  
                            l5166 CC66                              l5190 CB60  
                            l3760 D902                              l3752 D8D8  
                            l3744 D870                              l3488 CD4A  
                            l4480 CFC0                              l4456 CF72  
                            l3584 DE4E                              l3576 DDFC  
                            l3568 DDD0                              l3920 D5D6  
                            l3912 D5AE                              l3832 E800  
                            l4384 F8D6                              l4376 F7F4  
                            l4296 F50E                              l4616 DF98  
                            l4608 DF78                              l3666 C9BC  
                            l3682 C9F8                              l3770 D97E  
                            l3762 D92A                              l3738 D860  
                            l4538 DBDE                              l4490 CFF4  
                            l3594 DE80                              l3578 DE08  
                            l3914 D5B4                              l3850 E9E6  
                            l3826 E758                              l4298 F53C  
                            l3668 C9C6                              l3748 D8A0  
                            l4572 C166                              l3908 D59E  
                            l3844 E934                              l3836 E810  
                            l4396 F90A                              l4388 F8E4  
                            l4820 DA62                              l4812 D9AC  
                            l3686 CA08                              l3678 C9EC  
                            l3782 C1D4                              l4566 DCCE  
                            l4574 C170                              l3934 D3F4  
                            l3918 D5C8                              l3862 BFFE  
                            l4830 DB18                              l4742 CDFE  
                            l4910 C692                              l4902 C680  
                            l3768 D956                              l3776 D986  
                            l3784 C1DA                              l4840 D122  
                            l3960 D47A                              l3928 D3E4  
                            l3872 D4FC                              l4592 DF38  
                            l4824 DABC                              l4816 DA06  
                            l4736 CD90                              l3698 C6F4  
                            l4850 D1D8                              l4594 DF3E  
                            l4762 CE44                              l4754 CE2C  
                            l4922 C6AC                              l4914 C69E  
                            l4906 C68A                              l4844 D17C  
                            l3980 D4C6                              l3972 D49E  
                            l3956 D46A                              l3948 D438  
                            l4780 C8B2                              l4862 E47E  
                            l3974 D4A4                              l3878 D51A  
                            l4790 C8D8                              l4758 CE3A  
                            l5486 CB42                              l5478 CAC8  
                            l4960 C26C                              l4952 C338  
                            l3968 D48E                              l4792 C8E6  
                            l4776 C87A                              l4768 CE54  
                            l4866 E554                              l4858 E3AA  
                            l3994 CA46                              l3986 C36E  
                            l3978 D4B8                              l4980 C130  
                            l3998 CA78                              l4992 C14C  
                            l4984 C13A                              l4968 C2B0  
                            l4976 C2F4                              l4998 C0D4  
                            STR_1 FCC9                              STR_2 FD14  
                            STR_3 FD1A                              STR_4 FD1E  
                            STR_5 FD2C                              STR_6 FCFC  
                            STR_7 FD0D                              STR_8 FCF0  
                            STR_9 FD06                              u3120 D938  
                            u2500 C820                              u4050 F77E  
                            u3500 D058                              u2631 DCF4  
                            u3271 D4EE                              u2641 DD08  
                            u3505 D050                              u3291 D50C  
                    printf@tmpval 0054                              u4261 CF4A  
                            u3640 CEAC                              u4281 CF68  
                            u3481 D02C                              u2841 D2EC  
                            u4530 C8A8                              u4450 CDBE  
                            u4460 CDF4                              u2861 D30A  
                            u3830 F332                              _MODE 00AC  
                            u3835 F328                              _RBPU 007F8F  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0001  
                            _main CAAA                              _font FA63  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                  ??_get_full_ADC 0003                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 007B  
                 drawFastHLine@hi 0010                   drawFastHLine@lo 0011  
        __end_of_update_LCD_color E62C          __end_of_update_LCD_count DB36  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                 ??_drawFastHLine 000C                   ??_drawFastVLine 000C  
                    ___ftmul@cntr 0022                      ___param_bank 000010  
                    ___ftmul@sign 0023                      ___fttol@exp1 0039  
                    ___fttol@lval 0035                      _Act_Mode_Txt 009D  
                     ?_WAIT_1_SEC 0001         __end_of_Deactivate_Buzzer BEF0  
                 drawFastVLine@hi 0010                   drawFastVLine@lo 0011  
                     _SW_EWLT_Txt 007C                       _SW_MODE_Txt 00A3  
                           ?_main 0001                   __end_of___awdiv CA14  
                 __end_of___ftadd DEA8                   drawCircle@ddF_x 0016  
                           STR_10 FD26                   drawCircle@ddF_y 0018  
                           STR_11 FD22                             STR_12 FCB4  
                           STR_13 FD2C                             STR_14 FD2A  
                           STR_15 FCDD                   __end_of___awmod C760  
                 __end_of___ftdiv D01C                   __end_of___ftneg C02C  
                 __end_of___lldiv C97E                   __end_of___ftmul D3D4  
                           _T0CON 000FD5                   ___awdiv@divisor 0009  
                 __end_of___llmod C66E                   __end_of___ftsub C39A  
                 __end_of___fttol D102                             _T2CON 000FCA  
                           _T3CON 000FB1                       ?_WAIT_N_SEC 0001  
                 ___awdiv@counter 000B                   drawCircle@color 0012  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Count 006F                      ?_PED_Control 003D  
                           _Rcmd1 D5EE                             _Rcmd3 D1EA  
                    ___lltoft@exp 0011                       _SW_NSLT_Txt 00A5  
                   drawRect@color 001B                     ___awtoft@sign 0018  
                 __end_of_dpowers FC66                             _array 0080  
                           _font2 FB62             fillCircleHelper@ddF_x 0021  
           fillCircleHelper@ddF_y 0023                             _scale E62C  
                 __end_of_isdigit C008                     ___ftpack@sign 0005  
           fillCircleHelper@delta 001B                             _putch BEFC  
           fillCircleHelper@color 001D                             _volts 00A9  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8            ??_update_LCD_PED_Count 003B  
                __end_of_Day_Mode CCBA                   write_data@data_ 0003  
                 __initialization C536             __end_of_WAIT_HALF_SEC BFCA  
                    __end_of_main CB4C                      __end_of_font FB62  
                __end_of_Init_ADC BF18                  __end_of_Rcmd2red C246  
                      _Night_Mode CB4C                  __end_of_Set_EWLT C2CE  
                __end_of_Set_NSLT C356                            ??_main 006B  
                   ___fttol@sign1 0034                     __activetblptr 000002  
               __end_of_LCD_Reset BF5C                      _SW_EWPED_Txt 007E  
            __size_of__tdiv_to_l_ 0110         ??_TFT_GreenTab_Initialize 001B  
                ?_update_LCD_misc 0001                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 0001                            ?_scale 0024  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0007  
                __end_of___awtoft C1CA                            ?_putch 0001  
                __end_of___ftpack CD80                  __end_of___lltoft C536  
                          _OSCCON 000FD3                __size_of_Init_TRIS 0016  
                          _SPBRGH 000FB0               __size_of_WAIT_1_SEC 0082  
                          _SSPBUF 000FC9                      _SW_NSPED_Txt 00A7  
                __end_of_delay_ms C4D6               __size_of_WAIT_N_SEC 002E  
                          _Set_EW C246                            _Set_NS C2CE  
                __end_of_fillRect C3E4                  __end_of_drawChar D98C  
                __end_of__powers_ FCB4                  __end_of_drawRect C5FE  
              __size_of_OpenUSART 0070                            ___ftge CA14  
        __size_of_Activate_Buzzer 0012                            ___wmul C052  
                       ??___awdiv 000B         __size_of_fillCircleHelper 0138  
                __end_of_drawtext CF3A                         ??___ftadd 0034  
                       ??___awmod 0005                         ??___ftdiv 001F  
                       ??___ftneg 0004                         ??___lldiv 0009  
                       ??___ftmul 001B                         ??___llmod 0009  
                       ??___ftsub 0040                         ??___fttol 002F  
                          _buffer 00B0                            _fround E086  
                          clear_0 C53C                            clear_1 C548  
                ___awdiv@quotient 000D                   ___awmod@divisor 0003  
      __size_of_Deactivate_Buzzer 0008                   ___awmod@counter 0005  
                          _printf F12A                 WAIT_N_SEC@seconds 0069  
                    drawtext@size 0030                            _strcpy C15C  
                          _strlen C1CA             ___ftmul@f3_as_product 001F  
            __end_of_get_full_ADC C052                      __pdataCOMRAM 007B  
                       ??_isdigit 0001                       Set_EW@color 0036  
                    __mediumconst FA62                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0001                  __end_of_spiwrite BF70  
                     Set_NS@color 0036                        __accesstop 0080  
         __end_of__initialization C58E                        ___ftadd@f1 002E  
                      ___ftadd@f2 0031                        ___ftge@ff1 0001  
                      ___ftge@ff2 0004                     ___rparam_used 000001  
                      ___ftdiv@f1 0019                        ___ftdiv@f2 001C  
                      ___ftdiv@f3 0023                        ___ftneg@f1 0001  
                      ___awtoft@c 0015                        ___ftmul@f1 0015  
                      ___ftmul@f2 0018                        ___ftsub@f1 003A  
                      ___ftsub@f2 003D                        ___fttol@f1 002B  
                   __end_of_Rcmd1 D6FE                     __end_of_Rcmd3 D2DC  
                  __pcstackCOMRAM 0001                      __pidataBANK0 C07B  
                      ___lltoft@c 0009                     __end_of_font2 FC3E  
                   __end_of_scale EA0C                     __end_of_putch BF0A  
                     ?_Night_Mode 0001                 __end_of_Init_TRIS BFB0  
                  drawPixel@color 0009            __size_of_write_command 0010  
                      __div_to_l_ D3D4                         ?_Day_Mode 0001  
      fillCircleHelper@cornername 0019                           ??_Rcmd1 001B  
                         ??_Rcmd3 001B                __size_of_drawPixel 0030  
               __end_of_OpenUSART C6DE                   __div_to_l_@exp1 000C  
                 __div_to_l_@cntr 000B                           ??_scale 0027  
            __size_of_PED_Control 0030                   __div_to_l_@quot 0007  
                         ??_putch 0001                        __pbssBANK0 00A9  
                       ?_Init_ADC 0001                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014        __end_of_Select_ADC_Channel BEFC  
                 spiwrite@spidata 0002                         ?_Set_EWLT 0001  
                   __div_to_l_@f1 0001                     __div_to_l_@f2 0004  
                       ?_Set_NSLT 0001                 ?_update_LCD_color 0033  
               ?_update_LCD_count 003A                           ?_Set_EW 0001  
                         ?_Set_NS 0001                __CFG_CCP2MX$PORTBE 000000  
              ??_update_LCD_color 0034                ??_update_LCD_count 003B  
                         ?___ftge 0001                           ?___wmul 000F  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
       update_LCD_PED_Count@count 003A                           ?_fround 0024  
                    ??_WAIT_1_SEC 0069                         ?___awtoft 0015  
                       ?___ftpack 0001                        _fillCircle C432  
                         ?_printf 0040         Select_ADC_Channel@channel 0001  
                       ?___lltoft 0009                           ?_strcpy 0001  
                         ?_strlen 0001                      ??_WAIT_N_SEC 0069  
               ??_Activate_Buzzer 0001                        _fillScreen BFCA  
                      _drawCircle DB36                        ??_Day_Mode 006B  
                       ?_delay_ms 0015                         ?_fillRect 0013  
       update_LCD_count@direction 003C                         ?_drawChar 001E  
                         _SSPCON1 000FC6                         ?_drawRect 0013  
                         _SSPSTAT 000FC7             __end_of_fillRectangle CE5C  
                       ?_drawtext 0029                           _SW_EWLT 0071  
                         _SW_MODE 0073                        ??_Init_ADC 0001  
                         _SW_NSLT 0074                        ??_Rcmd2red 0004  
             __size_of_Night_Mode 00AE                     _write_command BF18  
              __end_of_WAIT_1_SEC C7E2                        ??_Set_EWLT 0036  
                      ??_Set_NSLT 0036                       WAIT_N_SEC@i 006A  
               __end_of__npowers_ FC8D                           __Hparam 0000  
                      _scale$2385 0027                __end_of_WAIT_N_SEC C0FC  
                         __Lparam 0000                   __size_of_Set_EW 0044  
                 __size_of_Set_NS 0044             __end_of_drawFastHLine C8F2  
               __end_of_drawPixel C12C             __end_of_drawFastVLine C86A  
                _fillCircleHelper D6FE                   __size_of___ftge 0096  
                         ___awdiv C97E                           ___ftadd DCE4  
                         ___awmod C6DE                           ___ftdiv CF3A  
                         ___ftneg C008                           ___lldiv C8F2  
                 __size_of___wmul 0028                           ___ftmul D2DC  
                         ___llmod C5FE                           ___ftsub C356  
                         ___fttol D01C             __size_of_get_full_ADC 0026  
                       ?_spiwrite 0001                           __pcinit C536  
                      ??___awtoft 0018                        ??___ftpack 0006  
                 __size_of_fround 0244                           __ramtop 1000  
                      ??___lltoft 000D                           __ptext0 CAAA  
                         __ptext1 BF70                           __ptext2 C66E  
                         __ptext3 BEF0                           __ptext4 CB4C  
                         __ptext5 EA0C                           __ptext6 BFCA  
                         __ptext7 CD80                           __ptext8 C598  
                         __ptext9 C86A                   __size_of_printf 0938  
               __end_of_init_UART BF84                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
                     ?__div_to_l_ 0001                           _dpowers FC3E  
                         _isdigit BFE6                         _T3CONbits 000FB1  
                ___awmod@dividend 0001                        ??_delay_ms 0017  
                   drawtext@_text 002A                     drawtext@color 002C  
                      ??_fillRect 0018                        ??_drawChar 0025  
                       _LCD_Reset BF4A                        ??_drawRect 001D  
                   _setAddrWindow C3E4                drawFastHLine@color 000A  
                      delay_ms@ms 0015              end_of_initialization C58E  
                      ??_drawtext 0031                    ?_write_command 0001  
                   __Lmediumconst FA62                         _PED_Count 0070  
                    _get_full_ADC C02C                   ___lldiv@divisor 0005  
                    PED_Control@i 003E     __size_of_update_LCD_PED_Count 00E8  
                 ___lldiv@counter 000D                         _RCSTAbits 000FAB  
                         printf@c 0063                           printf@f 0040  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
               _WAIT_1_SEC_W_BEEP BF84                    __tdiv_to_l_@f1 0001  
                  __tdiv_to_l_@f2 0004                        ??_spiwrite 0001  
                         strlen@s 0001                   fillCircle@color 0031  
              ?_WAIT_1_SEC_W_BEEP 0001                     ??__tdiv_to_l_ 0007  
                     ?_fillCircle 002B                         _PORTAbits 000F80  
                drawtext@cursor_x 0039                  drawtext@cursor_y 0038  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                     ?_fillScreen 0014                       ?_drawCircle 000C  
                      drawChar@bg 0022               ??_WAIT_1_SEC_W_BEEP 0001  
                       _TRISCbits 000F94                    ?_setAddrWindow 0004  
                      ?_LCD_Reset 0001                  drawtext@textsize 0033  
          __size_of_WAIT_HALF_SEC 001A          __size_of_update_LCD_misc 01DE  
                      drawPixel@x 000B                        drawPixel@y 0008  
                     ___ftdiv@exp 0026                       printf@width 005C  
                       _TXSTAbits 000FAC                PED_Control@Num_Sec 003D  
              get_full_ADC@result 0005               __size_of__div_to_l_ 010A  
       __end_of_WAIT_1_SEC_W_BEEP BF9A                       ___ftmul@exp 001E  
                  __end_of_Set_EW C28A                    __end_of_Set_NS C312  
                  __end_of___ftge CAAA                    __end_of___wmul C07A  
                   delay_ms@count 0019                        _write_data BF28  
                   __pidataCOMRAM BEE3                      ??_Night_Mode 006B  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 002E  
                  __end_of_fround E2CA                    __end_of_printf FA62  
                  __end_of_strcpy C18E                    __end_of_strlen C208  
             start_initialization C536                         _Init_TRIS BF9A  
             __end_of__tdiv_to_l_ D5EE                 __size_of_Day_Mode 00C0  
                 ??_write_command 0003                         _OpenUSART C66E  
             __size_of_fillCircle 0052                   ___llmod@divisor 0005  
                __CFG_OSC$INTIO67 000000                 __size_of_Init_ADC 000E  
                 ___llmod@counter 0009                __end_of_Night_Mode CBFA  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??_Set_EW 0036  
                        ??_Set_NS 0036                 __size_of_Set_EWLT 0044  
                 _Activate_Buzzer BF38                 __size_of_Set_NSLT 0044  
                        ??___ftge 0007                          ??___wmul 0013  
                   _WAIT_HALF_SEC BFB0                       __pdataBANK0 0080  
              _Select_ADC_Channel BEF0                          ??_fround 0027  
                 setAddrWindow@x0 0007                   setAddrWindow@x1 0005  
                 setAddrWindow@y0 0004                   setAddrWindow@y1 0006  
                        ??_printf 0045                          ??_strcpy 0005  
                        ??_strlen 0003                      _PED_EW_Count 0097  
       __size_of_update_LCD_color 0362         __size_of_update_LCD_count 01AA  
                      fround@prec 002D                 __size_of___awtoft 003C  
               __size_of___ftpack 00C6               ?_Select_ADC_Channel 0001  
               __size_of___lltoft 0060                       __pbssCOMRAM 006D  
                   ??_PED_Control 003E                   ??_setAddrWindow 0007  
                      ?_Init_TRIS 0001                      _PED_NS_Count 009A  
                     ??_LCD_Reset 001B                      _isdigit$2080 0002  
        __end_of_fillCircleHelper D836                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0001                 __size_of_drawRect 0066  
               __size_of_drawtext 00DE              ??_Select_ADC_Channel 0001  
      __size_of_WAIT_1_SEC_W_BEEP 0016                 ??_update_LCD_misc 0064  
 __end_of_TFT_GreenTab_Initialize C0CE                    ?_WAIT_HALF_SEC 0001  
                   __pmediumconst FA62                          ?___awdiv 0007  
                        ?___ftadd 002E                          ?___awmod 0001  
                        ?___ftdiv 0019                          ?___ftneg 0001  
                        ?___lldiv 0001                          ?___ftmul 0015  
                        ?___llmod 0001                          ?___ftsub 003A  
                       __npowers_ FC66                          ?___fttol 002B  
                       __tft_type 0076                         _direction 0079  
              drawFastVLine@color 000A                       ?_write_data 0001  
                       _drawPixel C0FC                       __tdiv_to_l_ D4DE  
               __size_of_spiwrite 0014                      ??__div_to_l_ 0007  
                        ?_isdigit 0001                 _Initialize_Screen EA0C  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART BF70                ?_Initialize_Screen 0001  
                  __size_of_scale 03E0                    __size_of_putch 000E  
             __end_of_PED_Control C15C           __end_of_Activate_Buzzer BF4A  
                  ___wmul@product 0013               ??_Initialize_Screen 003A  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
              __end_of__div_to_l_ D4DE                          _PIR2bits 000FA1  
                        _EW_Count 008E                         fillRect@h 0015  
                       fillRect@i 001C                         fillRect@w 0014  
                       fillRect@x 001B                         fillRect@y 0013  
                       drawChar@c 001F                         drawChar@i 0028  
                       drawChar@j 0027                      ??_fillCircle 0033  
                       drawChar@x 0026                         drawChar@y 001E  
                      ?_drawPixel 0008            __size_of_fillRectangle 00DC  
                        _NS_Count 0094                        _ADCON0bits 000FC2  
               ___wmul@multiplier 000F         __end_of_Initialize_Screen F12A  
                    ??_fillScreen 0016                         drawRect@h 0019  
                       drawRect@w 0017                         drawRect@x 0013  
                       drawRect@y 0015                     _FlashingR_Txt 009F  
                   _FlashingS_Txt 00A1                      ??_drawCircle 0014  
                      printf@flag 005A      __end_of_update_LCD_PED_Count D1EA  
                      printf@fval 005E                         main@nStep 006B  
                        _SW_EWPED 0072                        printf@prec 0061  
           update_LCD_color@color 0033                          _Day_Mode CBFA  
                        _SW_NSPED 0075         update_LCD_color@direction 0034  
                     ??_Init_TRIS 0001                        ?_init_UART 0001  
          __size_of_drawFastHLine 0088                         copy_data0 C562  
                       copy_data1 C582                         drawtext@i 0036  
          __size_of_drawFastVLine 0088                         drawtext@x 0035  
                       drawtext@y 0029                          _Init_ADC BF0A  
               write_command@cmd_ 0003                       ??_OpenUSART 0003  
                        _Rcmd2red C208               __size_of_write_data 0010  
                 OpenUSART@config 0003                          _Set_EWLT C28A  
              __end_of_fillCircle C484                          _Set_NSLT C312  
                        __Hrparam 0000                   ??_WAIT_HALF_SEC 0001  
              __end_of_fillScreen BFE6             update_LCD_count@count 003A  
                        __Lrparam 0000                __end_of_drawCircle DCE4  
                __size_of___awdiv 0096                  __size_of___ftadd 01C4  
                __size_of___awmod 0082                  __size_of___ftdiv 00E2  
                __size_of___ftneg 0024                  __size_of___lldiv 008C  
                __size_of___ftmul 00F8                  __size_of___llmod 0070  
                __size_of___ftsub 0044                  __size_of___fttol 00E6  
                        ___awtoft C18E                          ___ftpack CCBA  
                     _fround$2383 002A                       _fround$2384 0027  
                        ___lltoft C4D6                  _update_LCD_color E2CA  
                _update_LCD_count D98C                  __size_of_isdigit 0022  
                     _PED_Control C12C                          _delay_ms C484  
                        __ptext10 C0A4                          __ptext11 D1EA  
                        __ptext20 D98C                          __ptext12 C208  
                        __ptext21 C760                          __ptext13 D5EE  
                        __ptext30 D3D4                          __ptext22 DEA8  
                        __ptext14 BF4A                          __ptext31 C4D6  
                        __ptext23 F12A                          __ptext15 C484  
                        __ptext40 CF3A                          __ptext32 C5FE  
                        __ptext24 E62C                          __ptext16 BF9A  
                        __ptext41 C18E                          __ptext33 C8F2  
                        __ptext25 BEFC                          __ptext17 BF0A  
                        __ptext50 D6FE                          __ptext42 CCBA  
                        __ptext34 D01C                          __ptext26 BFE6  
                        __ptext18 CBFA                          __ptext51 DB36  
                        __ptext43 C15C                          __ptext35 C356  
                        __ptext27 E086                          __ptext19 C0CE  
                        __ptext60 C3E4                          __ptext52 C12C  
                        __ptext44 C312                          __ptext36 DCE4  
                        __ptext28 D2DC                          __ptext61 BF28  
                        __ptext53 D102                          __ptext45 C2CE  
                        __ptext37 C008                          __ptext29 D4DE  
                        __ptext70 BF38                          __ptext62 BF18  
                        __ptext54 CE5C                          __ptext46 C28A  
                        __ptext38 CA14                          __ptext63 BF5C  
                        __ptext55 C1CA                          __ptext47 C246  
                        __ptext39 C02C                          __ptext64 C052  
                        __ptext56 D836                          __ptext48 E2CA  
                        __ptext65 C6DE                          __ptext57 C39A  
                        __ptext49 C432                          __ptext66 C97E  
                        __ptext58 C7E2                          __ptext67 BF84  
                        __ptext59 C0FC                          __ptext68 BFB0  
                        __ptext69 BEE8                          _fillRect C39A  
                        _drawChar D836                          __powers_ FC8D  
                        _drawRect C598  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 0077                          _drawtext CE5C  
                      strcpy@from 0003                     _fillRectangle CD80  
                ?_Activate_Buzzer 0001                     __size_of_main 00A2  
                 fillRectangle@hi 0011                   fillRectangle@lo 0012  
                   _drawFastHLine C86A                     _drawFastVLine C7E2  
                       printf@exp 0058                          _spiwrite BF5C  
                       printf@val 0050                       ??_drawPixel 000B  
                        _rowstart 007A                fillCircleHelper@x0 0013  
              fillCircleHelper@y0 0015        __size_of_Initialize_Screen 071E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0001  
                     ??_init_UART 0004                          isdigit@c 0003  
                   Set_EWLT@color 0036                          scale@scl 002A  
                      _EWLT_Count 008B                 ?_fillCircleHelper 0013  
                       spiwrite@x 0001                   _update_LCD_misc DEA8  
                  ?_fillRectangle 0008                  __tdiv_to_l_@exp1 000F  
                __tdiv_to_l_@cntr 000E                  __tdiv_to_l_@quot 000A  
              ??_fillCircleHelper 001F             __end_of_write_command BF28  
                ___lldiv@dividend 0001                   fillScreen@color 0014  
            update_LCD_misc@nStep 0064              _update_LCD_PED_Count D102  
            update_LCD_misc@volts 0066                      fillCircle@x0 002B  
                    fillCircle@y0 002D                    ?_drawFastHLine 0008  
                  fillRectangle@h 000A                    fillRectangle@w 0009  
                  fillRectangle@x 0013                    fillRectangle@y 0008  
                  ?_drawFastVLine 0008                          printf@ap 004E  
               fillCircleHelper@f 0025                 fillCircleHelper@r 0017  
               fillCircleHelper@x 0027                 fillCircleHelper@y 0029  
                    ??_write_data 0003                        _WAIT_1_SEC C760  
                   fillRect@color 0016                      ?__tdiv_to_l_ 0001  
                     _printf$2386 004B                        _WAIT_N_SEC C0CE  
                ___lldiv@quotient 0009                          strcpy@cp 0005  
                        strlen@cp 0005                          strcpy@to 0001  
                   Set_NSLT@color 0036                        _NSLT_Count 0091  
                     fillCircle@r 002F             __end_of_setAddrWindow C432  
              fillRectangle@color 000B                     drawChar@color 0020  
              __end_of_write_data BF38                      drawChar@line 0025  
                   ?_get_full_ADC 0001                      drawChar@size 0024  
           ?_update_LCD_PED_Count 003A       __size_of_Select_ADC_Channel 000C  
