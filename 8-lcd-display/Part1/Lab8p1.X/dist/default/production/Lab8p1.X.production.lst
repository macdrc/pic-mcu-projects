

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 03 11:09:54 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           	psect	idataCOMRAM
    89  00C1BD                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _wrap
    93  00C1BD  01                 	db	1
    94                           
    95                           ;initializer for _SW_EWLT_Txt
    96  00C1BE  30                 	db	48
    97  00C1BF  00                 	db	0
    98                           
    99                           ;initializer for _SW_EWPED_Txt
   100  00C1C0  30                 	db	48
   101  00C1C1  00                 	db	0
   102                           
   103                           	psect	idataBANK0
   104  00C355                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _array
   108  00C355  40                 	db	64
   109  00C356  79                 	db	121
   110  00C357  24                 	db	36
   111  00C358  30                 	db	48
   112  00C359  19                 	db	25
   113  00C35A  12                 	db	18
   114  00C35B  02                 	db	2
   115  00C35C  78                 	db	120
   116  00C35D  00                 	db	0
   117  00C35E  10                 	db	16
   118  00C35F  FF                 	db	255
   119                           
   120                           ;initializer for _EWLT_Count
   121  00C360  30                 	db	48
   122  00C361  30                 	db	48
   123  00C362  00                 	db	0
   124                           
   125                           ;initializer for _EW_Count
   126  00C363  30                 	db	48
   127  00C364  30                 	db	48
   128  00C365  00                 	db	0
   129                           
   130                           ;initializer for _NSLT_Count
   131  00C366  30                 	db	48
   132  00C367  30                 	db	48
   133  00C368  00                 	db	0
   134                           
   135                           ;initializer for _NS_Count
   136  00C369  30                 	db	48
   137  00C36A  30                 	db	48
   138  00C36B  00                 	db	0
   139                           
   140                           ;initializer for _PED_EW_Count
   141  00C36C  30                 	db	48
   142  00C36D  30                 	db	48
   143  00C36E  00                 	db	0
   144                           
   145                           ;initializer for _PED_NS_Count
   146  00C36F  30                 	db	48
   147  00C370  30                 	db	48
   148  00C371  00                 	db	0
   149                           
   150                           ;initializer for _Act_Mode_Txt
   151  00C372  44                 	db	68
   152  00C373  00                 	db	0
   153                           
   154                           ;initializer for _FlashingR_Txt
   155  00C374  30                 	db	48
   156  00C375  00                 	db	0
   157                           
   158                           ;initializer for _FlashingS_Txt
   159  00C376  30                 	db	48
   160  00C377  00                 	db	0
   161                           
   162                           ;initializer for _SW_MODE_Txt
   163  00C378  44                 	db	68
   164  00C379  00                 	db	0
   165                           
   166                           ;initializer for _SW_NSLT_Txt
   167  00C37A  30                 	db	48
   168  00C37B  00                 	db	0
   169                           
   170                           ;initializer for _SW_NSPED_Txt
   171  00C37C  30                 	db	48
   172  00C37D  00                 	db	0
   173                           
   174                           	psect	mediumconst
   175  00FD32                     __pmediumconst:
   176                           	opt stack 0
   177  00FD32  00                 	db	0
   178  00FD33                     _font:
   179                           	opt stack 0
   180  00FD33  00                 	db	0
   181  00FD34  00                 	db	0
   182  00FD35  00                 	db	0
   183  00FD36  00                 	db	0
   184  00FD37  00                 	db	0
   185  00FD38  00                 	db	0
   186  00FD39  00                 	db	0
   187  00FD3A  5F                 	db	95
   188  00FD3B  00                 	db	0
   189  00FD3C  00                 	db	0
   190  00FD3D  00                 	db	0
   191  00FD3E  07                 	db	7
   192  00FD3F  00                 	db	0
   193  00FD40  07                 	db	7
   194  00FD41  00                 	db	0
   195  00FD42  14                 	db	20
   196  00FD43  7F                 	db	127
   197  00FD44  14                 	db	20
   198  00FD45  7F                 	db	127
   199  00FD46  14                 	db	20
   200  00FD47  24                 	db	36
   201  00FD48  2A                 	db	42
   202  00FD49  7F                 	db	127
   203  00FD4A  2A                 	db	42
   204  00FD4B  12                 	db	18
   205  00FD4C  23                 	db	35
   206  00FD4D  13                 	db	19
   207  00FD4E  08                 	db	8
   208  00FD4F  64                 	db	100
   209  00FD50  62                 	db	98
   210  00FD51  36                 	db	54
   211  00FD52  49                 	db	73
   212  00FD53  56                 	db	86
   213  00FD54  20                 	db	32
   214  00FD55  50                 	db	80
   215  00FD56  00                 	db	0
   216  00FD57  08                 	db	8
   217  00FD58  07                 	db	7
   218  00FD59  03                 	db	3
   219  00FD5A  00                 	db	0
   220  00FD5B  00                 	db	0
   221  00FD5C  1C                 	db	28
   222  00FD5D  22                 	db	34
   223  00FD5E  41                 	db	65
   224  00FD5F  00                 	db	0
   225  00FD60  00                 	db	0
   226  00FD61  41                 	db	65
   227  00FD62  22                 	db	34
   228  00FD63  1C                 	db	28
   229  00FD64  00                 	db	0
   230  00FD65  2A                 	db	42
   231  00FD66  1C                 	db	28
   232  00FD67  7F                 	db	127
   233  00FD68  1C                 	db	28
   234  00FD69  2A                 	db	42
   235  00FD6A  08                 	db	8
   236  00FD6B  08                 	db	8
   237  00FD6C  3E                 	db	62
   238  00FD6D  08                 	db	8
   239  00FD6E  08                 	db	8
   240  00FD6F  00                 	db	0
   241  00FD70  80                 	db	128
   242  00FD71  70                 	db	112
   243  00FD72  30                 	db	48
   244  00FD73  00                 	db	0
   245  00FD74  08                 	db	8
   246  00FD75  08                 	db	8
   247  00FD76  08                 	db	8
   248  00FD77  08                 	db	8
   249  00FD78  08                 	db	8
   250  00FD79  00                 	db	0
   251  00FD7A  00                 	db	0
   252  00FD7B  60                 	db	96
   253  00FD7C  60                 	db	96
   254  00FD7D  00                 	db	0
   255  00FD7E  20                 	db	32
   256  00FD7F  10                 	db	16
   257  00FD80  08                 	db	8
   258  00FD81  04                 	db	4
   259  00FD82  02                 	db	2
   260  00FD83  3E                 	db	62
   261  00FD84  51                 	db	81
   262  00FD85  49                 	db	73
   263  00FD86  45                 	db	69
   264  00FD87  3E                 	db	62
   265  00FD88  00                 	db	0
   266  00FD89  42                 	db	66
   267  00FD8A  7F                 	db	127
   268  00FD8B  40                 	db	64
   269  00FD8C  00                 	db	0
   270  00FD8D  72                 	db	114
   271  00FD8E  49                 	db	73
   272  00FD8F  49                 	db	73
   273  00FD90  49                 	db	73
   274  00FD91  46                 	db	70
   275  00FD92  21                 	db	33
   276  00FD93  41                 	db	65
   277  00FD94  49                 	db	73
   278  00FD95  4D                 	db	77
   279  00FD96  33                 	db	51
   280  00FD97  18                 	db	24
   281  00FD98  14                 	db	20
   282  00FD99  12                 	db	18
   283  00FD9A  7F                 	db	127
   284  00FD9B  10                 	db	16
   285  00FD9C  27                 	db	39
   286  00FD9D  45                 	db	69
   287  00FD9E  45                 	db	69
   288  00FD9F  45                 	db	69
   289  00FDA0  39                 	db	57
   290  00FDA1  3C                 	db	60
   291  00FDA2  4A                 	db	74
   292  00FDA3  49                 	db	73
   293  00FDA4  49                 	db	73
   294  00FDA5  31                 	db	49
   295  00FDA6  41                 	db	65
   296  00FDA7  21                 	db	33
   297  00FDA8  11                 	db	17
   298  00FDA9  09                 	db	9
   299  00FDAA  07                 	db	7
   300  00FDAB  36                 	db	54
   301  00FDAC  49                 	db	73
   302  00FDAD  49                 	db	73
   303  00FDAE  49                 	db	73
   304  00FDAF  36                 	db	54
   305  00FDB0  46                 	db	70
   306  00FDB1  49                 	db	73
   307  00FDB2  49                 	db	73
   308  00FDB3  29                 	db	41
   309  00FDB4  1E                 	db	30
   310  00FDB5  00                 	db	0
   311  00FDB6  00                 	db	0
   312  00FDB7  14                 	db	20
   313  00FDB8  00                 	db	0
   314  00FDB9  00                 	db	0
   315  00FDBA  00                 	db	0
   316  00FDBB  40                 	db	64
   317  00FDBC  34                 	db	52
   318  00FDBD  00                 	db	0
   319  00FDBE  00                 	db	0
   320  00FDBF  00                 	db	0
   321  00FDC0  08                 	db	8
   322  00FDC1  14                 	db	20
   323  00FDC2  22                 	db	34
   324  00FDC3  41                 	db	65
   325  00FDC4  14                 	db	20
   326  00FDC5  14                 	db	20
   327  00FDC6  14                 	db	20
   328  00FDC7  14                 	db	20
   329  00FDC8  14                 	db	20
   330  00FDC9  00                 	db	0
   331  00FDCA  41                 	db	65
   332  00FDCB  22                 	db	34
   333  00FDCC  14                 	db	20
   334  00FDCD  08                 	db	8
   335  00FDCE  02                 	db	2
   336  00FDCF  01                 	db	1
   337  00FDD0  59                 	db	89
   338  00FDD1  09                 	db	9
   339  00FDD2  06                 	db	6
   340  00FDD3  3E                 	db	62
   341  00FDD4  41                 	db	65
   342  00FDD5  5D                 	db	93
   343  00FDD6  59                 	db	89
   344  00FDD7  4E                 	db	78
   345  00FDD8  7C                 	db	124
   346  00FDD9  12                 	db	18
   347  00FDDA  11                 	db	17
   348  00FDDB  12                 	db	18
   349  00FDDC  7C                 	db	124
   350  00FDDD  7F                 	db	127
   351  00FDDE  49                 	db	73
   352  00FDDF  49                 	db	73
   353  00FDE0  49                 	db	73
   354  00FDE1  36                 	db	54
   355  00FDE2  3E                 	db	62
   356  00FDE3  41                 	db	65
   357  00FDE4  41                 	db	65
   358  00FDE5  41                 	db	65
   359  00FDE6  22                 	db	34
   360  00FDE7  7F                 	db	127
   361  00FDE8  41                 	db	65
   362  00FDE9  41                 	db	65
   363  00FDEA  41                 	db	65
   364  00FDEB  3E                 	db	62
   365  00FDEC  7F                 	db	127
   366  00FDED  49                 	db	73
   367  00FDEE  49                 	db	73
   368  00FDEF  49                 	db	73
   369  00FDF0  41                 	db	65
   370  00FDF1  7F                 	db	127
   371  00FDF2  09                 	db	9
   372  00FDF3  09                 	db	9
   373  00FDF4  09                 	db	9
   374  00FDF5  01                 	db	1
   375  00FDF6  3E                 	db	62
   376  00FDF7  41                 	db	65
   377  00FDF8  41                 	db	65
   378  00FDF9  51                 	db	81
   379  00FDFA  73                 	db	115
   380  00FDFB  7F                 	db	127
   381  00FDFC  08                 	db	8
   382  00FDFD  08                 	db	8
   383  00FDFE  08                 	db	8
   384  00FDFF  7F                 	db	127
   385  00FE00  00                 	db	0
   386  00FE01  41                 	db	65
   387  00FE02  7F                 	db	127
   388  00FE03  41                 	db	65
   389  00FE04  00                 	db	0
   390  00FE05  20                 	db	32
   391  00FE06  40                 	db	64
   392  00FE07  41                 	db	65
   393  00FE08  3F                 	db	63
   394  00FE09  01                 	db	1
   395  00FE0A  7F                 	db	127
   396  00FE0B  08                 	db	8
   397  00FE0C  14                 	db	20
   398  00FE0D  22                 	db	34
   399  00FE0E  41                 	db	65
   400  00FE0F  7F                 	db	127
   401  00FE10  40                 	db	64
   402  00FE11  40                 	db	64
   403  00FE12  40                 	db	64
   404  00FE13  40                 	db	64
   405  00FE14  7F                 	db	127
   406  00FE15  02                 	db	2
   407  00FE16  1C                 	db	28
   408  00FE17  02                 	db	2
   409  00FE18  7F                 	db	127
   410  00FE19  7F                 	db	127
   411  00FE1A  04                 	db	4
   412  00FE1B  08                 	db	8
   413  00FE1C  10                 	db	16
   414  00FE1D  7F                 	db	127
   415  00FE1E  3E                 	db	62
   416  00FE1F  41                 	db	65
   417  00FE20  41                 	db	65
   418  00FE21  41                 	db	65
   419  00FE22  3E                 	db	62
   420  00FE23  7F                 	db	127
   421  00FE24  09                 	db	9
   422  00FE25  09                 	db	9
   423  00FE26  09                 	db	9
   424  00FE27  06                 	db	6
   425  00FE28  3E                 	db	62
   426  00FE29  41                 	db	65
   427  00FE2A  51                 	db	81
   428  00FE2B  21                 	db	33
   429  00FE2C  5E                 	db	94
   430  00FE2D  7F                 	db	127
   431  00FE2E  09                 	db	9
   432  00FE2F  19                 	db	25
   433  00FE30  29                 	db	41
   434  00FE31  46                 	db	70
   435  00FE32                     __end_of_font:
   436                           	opt stack 0
   437  00FE32                     _font2:
   438                           	opt stack 0
   439  00FE32  26                 	db	38
   440  00FE33  49                 	db	73
   441  00FE34  49                 	db	73
   442  00FE35  49                 	db	73
   443  00FE36  32                 	db	50
   444  00FE37  03                 	db	3
   445  00FE38  01                 	db	1
   446  00FE39  7F                 	db	127
   447  00FE3A  01                 	db	1
   448  00FE3B  03                 	db	3
   449  00FE3C  3F                 	db	63
   450  00FE3D  40                 	db	64
   451  00FE3E  40                 	db	64
   452  00FE3F  40                 	db	64
   453  00FE40  3F                 	db	63
   454  00FE41  1F                 	db	31
   455  00FE42  20                 	db	32
   456  00FE43  40                 	db	64
   457  00FE44  20                 	db	32
   458  00FE45  1F                 	db	31
   459  00FE46  3F                 	db	63
   460  00FE47  40                 	db	64
   461  00FE48  38                 	db	56
   462  00FE49  40                 	db	64
   463  00FE4A  3F                 	db	63
   464  00FE4B  63                 	db	99
   465  00FE4C  14                 	db	20
   466  00FE4D  08                 	db	8
   467  00FE4E  14                 	db	20
   468  00FE4F  63                 	db	99
   469  00FE50  03                 	db	3
   470  00FE51  04                 	db	4
   471  00FE52  78                 	db	120
   472  00FE53  04                 	db	4
   473  00FE54  03                 	db	3
   474  00FE55  61                 	db	97
   475  00FE56  59                 	db	89
   476  00FE57  49                 	db	73
   477  00FE58  4D                 	db	77
   478  00FE59  43                 	db	67
   479  00FE5A  00                 	db	0
   480  00FE5B  7F                 	db	127
   481  00FE5C  41                 	db	65
   482  00FE5D  41                 	db	65
   483  00FE5E  41                 	db	65
   484  00FE5F  02                 	db	2
   485  00FE60  04                 	db	4
   486  00FE61  08                 	db	8
   487  00FE62  10                 	db	16
   488  00FE63  20                 	db	32
   489  00FE64  00                 	db	0
   490  00FE65  41                 	db	65
   491  00FE66  41                 	db	65
   492  00FE67  41                 	db	65
   493  00FE68  7F                 	db	127
   494  00FE69  04                 	db	4
   495  00FE6A  02                 	db	2
   496  00FE6B  01                 	db	1
   497  00FE6C  02                 	db	2
   498  00FE6D  04                 	db	4
   499  00FE6E  40                 	db	64
   500  00FE6F  40                 	db	64
   501  00FE70  40                 	db	64
   502  00FE71  40                 	db	64
   503  00FE72  40                 	db	64
   504  00FE73  00                 	db	0
   505  00FE74  03                 	db	3
   506  00FE75  07                 	db	7
   507  00FE76  08                 	db	8
   508  00FE77  00                 	db	0
   509  00FE78  20                 	db	32
   510  00FE79  54                 	db	84
   511  00FE7A  54                 	db	84
   512  00FE7B  78                 	db	120
   513  00FE7C  40                 	db	64
   514  00FE7D  7F                 	db	127
   515  00FE7E  28                 	db	40
   516  00FE7F  44                 	db	68
   517  00FE80  44                 	db	68
   518  00FE81  38                 	db	56
   519  00FE82  38                 	db	56
   520  00FE83  44                 	db	68
   521  00FE84  44                 	db	68
   522  00FE85  44                 	db	68
   523  00FE86  28                 	db	40
   524  00FE87  38                 	db	56
   525  00FE88  44                 	db	68
   526  00FE89  44                 	db	68
   527  00FE8A  28                 	db	40
   528  00FE8B  7F                 	db	127
   529  00FE8C  38                 	db	56
   530  00FE8D  54                 	db	84
   531  00FE8E  54                 	db	84
   532  00FE8F  54                 	db	84
   533  00FE90  18                 	db	24
   534  00FE91  00                 	db	0
   535  00FE92  08                 	db	8
   536  00FE93  7E                 	db	126
   537  00FE94  09                 	db	9
   538  00FE95  02                 	db	2
   539  00FE96  18                 	db	24
   540  00FE97  A4                 	db	164
   541  00FE98  A4                 	db	164
   542  00FE99  9C                 	db	156
   543  00FE9A  78                 	db	120
   544  00FE9B  7F                 	db	127
   545  00FE9C  08                 	db	8
   546  00FE9D  04                 	db	4
   547  00FE9E  04                 	db	4
   548  00FE9F  78                 	db	120
   549  00FEA0  00                 	db	0
   550  00FEA1  44                 	db	68
   551  00FEA2  7D                 	db	125
   552  00FEA3  40                 	db	64
   553  00FEA4  00                 	db	0
   554  00FEA5  20                 	db	32
   555  00FEA6  40                 	db	64
   556  00FEA7  40                 	db	64
   557  00FEA8  3D                 	db	61
   558  00FEA9  00                 	db	0
   559  00FEAA  7F                 	db	127
   560  00FEAB  10                 	db	16
   561  00FEAC  28                 	db	40
   562  00FEAD  44                 	db	68
   563  00FEAE  00                 	db	0
   564  00FEAF  00                 	db	0
   565  00FEB0  41                 	db	65
   566  00FEB1  7F                 	db	127
   567  00FEB2  40                 	db	64
   568  00FEB3  00                 	db	0
   569  00FEB4  7C                 	db	124
   570  00FEB5  04                 	db	4
   571  00FEB6  78                 	db	120
   572  00FEB7  04                 	db	4
   573  00FEB8  78                 	db	120
   574  00FEB9  7C                 	db	124
   575  00FEBA  08                 	db	8
   576  00FEBB  04                 	db	4
   577  00FEBC  04                 	db	4
   578  00FEBD  78                 	db	120
   579  00FEBE  38                 	db	56
   580  00FEBF  44                 	db	68
   581  00FEC0  44                 	db	68
   582  00FEC1  44                 	db	68
   583  00FEC2  38                 	db	56
   584  00FEC3  FC                 	db	252
   585  00FEC4  18                 	db	24
   586  00FEC5  24                 	db	36
   587  00FEC6  24                 	db	36
   588  00FEC7  18                 	db	24
   589  00FEC8  18                 	db	24
   590  00FEC9  24                 	db	36
   591  00FECA  24                 	db	36
   592  00FECB  18                 	db	24
   593  00FECC  FC                 	db	252
   594  00FECD  7C                 	db	124
   595  00FECE  08                 	db	8
   596  00FECF  04                 	db	4
   597  00FED0  04                 	db	4
   598  00FED1  08                 	db	8
   599  00FED2  48                 	db	72
   600  00FED3  54                 	db	84
   601  00FED4  54                 	db	84
   602  00FED5  54                 	db	84
   603  00FED6  24                 	db	36
   604  00FED7  04                 	db	4
   605  00FED8  04                 	db	4
   606  00FED9  3F                 	db	63
   607  00FEDA  44                 	db	68
   608  00FEDB  24                 	db	36
   609  00FEDC  3C                 	db	60
   610  00FEDD  40                 	db	64
   611  00FEDE  40                 	db	64
   612  00FEDF  20                 	db	32
   613  00FEE0  7C                 	db	124
   614  00FEE1  1C                 	db	28
   615  00FEE2  20                 	db	32
   616  00FEE3  40                 	db	64
   617  00FEE4  20                 	db	32
   618  00FEE5  1C                 	db	28
   619  00FEE6  3C                 	db	60
   620  00FEE7  40                 	db	64
   621  00FEE8  30                 	db	48
   622  00FEE9  40                 	db	64
   623  00FEEA  3C                 	db	60
   624  00FEEB  44                 	db	68
   625  00FEEC  28                 	db	40
   626  00FEED  10                 	db	16
   627  00FEEE  28                 	db	40
   628  00FEEF  44                 	db	68
   629  00FEF0  4C                 	db	76
   630  00FEF1  90                 	db	144
   631  00FEF2  90                 	db	144
   632  00FEF3  90                 	db	144
   633  00FEF4  7C                 	db	124
   634  00FEF5  44                 	db	68
   635  00FEF6  64                 	db	100
   636  00FEF7  54                 	db	84
   637  00FEF8  4C                 	db	76
   638  00FEF9  44                 	db	68
   639  00FEFA  00                 	db	0
   640  00FEFB  08                 	db	8
   641  00FEFC  36                 	db	54
   642  00FEFD  41                 	db	65
   643  00FEFE  00                 	db	0
   644  00FEFF  00                 	db	0
   645  00FF00  00                 	db	0
   646  00FF01  77                 	db	119
   647  00FF02  00                 	db	0
   648  00FF03  00                 	db	0
   649  00FF04  00                 	db	0
   650  00FF05  41                 	db	65
   651  00FF06  36                 	db	54
   652  00FF07  08                 	db	8
   653  00FF08  00                 	db	0
   654  00FF09  02                 	db	2
   655  00FF0A  01                 	db	1
   656  00FF0B  02                 	db	2
   657  00FF0C  04                 	db	4
   658  00FF0D  02                 	db	2
   659  00FF0E                     __end_of_font2:
   660                           	opt stack 0
   661  00FF0E                     _dpowers:
   662                           	opt stack 0
   663  00FF0E  0001               	dw	1
   664  00FF10  0000               	dw	0
   665  00FF12  000A               	dw	10
   666  00FF14  0000               	dw	0
   667  00FF16  0064               	dw	100
   668  00FF18  0000               	dw	0
   669  00FF1A  03E8               	dw	1000
   670  00FF1C  0000               	dw	0
   671  00FF1E  2710               	dw	10000
   672  00FF20  0000               	dw	0
   673  00FF22  86A0               	dw	34464
   674  00FF24  0001               	dw	1
   675  00FF26  4240               	dw	16960
   676  00FF28  000F               	dw	15
   677  00FF2A  9680               	dw	38528
   678  00FF2C  0098               	dw	152
   679  00FF2E  E100               	dw	57600
   680  00FF30  05F5               	dw	1525
   681  00FF32  CA00               	dw	51712
   682  00FF34  3B9A               	dw	15258
   683  00FF36                     __end_of_dpowers:
   684                           	opt stack 0
   685  00FF36                     __npowers_:
   686                           	opt stack 0
   687  00FF36  00                 	db	0
   688  00FF37  80                 	db	128
   689  00FF38  3F                 	db	63
   690  00FF39  CD                 	db	205
   691  00FF3A  CC                 	db	204
   692  00FF3B  3D                 	db	61
   693  00FF3C  D7                 	db	215
   694  00FF3D  23                 	db	35
   695  00FF3E  3C                 	db	60
   696  00FF3F  12                 	db	18
   697  00FF40  83                 	db	131
   698  00FF41  3A                 	db	58
   699  00FF42  B7                 	db	183
   700  00FF43  D1                 	db	209
   701  00FF44  38                 	db	56
   702  00FF45  C6                 	db	198
   703  00FF46  27                 	db	39
   704  00FF47  37                 	db	55
   705  00FF48  38                 	db	56
   706  00FF49  86                 	db	134
   707  00FF4A  35                 	db	53
   708  00FF4B  C0                 	db	192
   709  00FF4C  D6                 	db	214
   710  00FF4D  33                 	db	51
   711  00FF4E  CC                 	db	204
   712  00FF4F  2B                 	db	43
   713  00FF50  32                 	db	50
   714  00FF51  70                 	db	112
   715  00FF52  89                 	db	137
   716  00FF53  30                 	db	48
   717  00FF54  E7                 	db	231
   718  00FF55  DB                 	db	219
   719  00FF56  2E                 	db	46
   720  00FF57  E5                 	db	229
   721  00FF58  3C                 	db	60
   722  00FF59  1E                 	db	30
   723  00FF5A  42                 	db	66
   724  00FF5B  A2                 	db	162
   725  00FF5C  0D                 	db	13
   726  00FF5D                     __end_of__npowers_:
   727                           	opt stack 0
   728  00FF5D                     __powers_:
   729                           	opt stack 0
   730  00FF5D  00                 	db	0
   731  00FF5E  80                 	db	128
   732  00FF5F  3F                 	db	63
   733  00FF60  00                 	db	0
   734  00FF61  20                 	db	32
   735  00FF62  41                 	db	65
   736  00FF63  00                 	db	0
   737  00FF64  C8                 	db	200
   738  00FF65  42                 	db	66
   739  00FF66  00                 	db	0
   740  00FF67  7A                 	db	122
   741  00FF68  44                 	db	68
   742  00FF69  40                 	db	64
   743  00FF6A  1C                 	db	28
   744  00FF6B  46                 	db	70
   745  00FF6C  50                 	db	80
   746  00FF6D  C3                 	db	195
   747  00FF6E  47                 	db	71
   748  00FF6F  24                 	db	36
   749  00FF70  74                 	db	116
   750  00FF71  49                 	db	73
   751  00FF72  97                 	db	151
   752  00FF73  18                 	db	24
   753  00FF74  4B                 	db	75
   754  00FF75  BC                 	db	188
   755  00FF76  BE                 	db	190
   756  00FF77  4C                 	db	76
   757  00FF78  6B                 	db	107
   758  00FF79  6E                 	db	110
   759  00FF7A  4E                 	db	78
   760  00FF7B  03                 	db	3
   761  00FF7C  15                 	db	21
   762  00FF7D  50                 	db	80
   763  00FF7E  79                 	db	121
   764  00FF7F  AD                 	db	173
   765  00FF80  60                 	db	96
   766  00FF81  F3                 	db	243
   767  00FF82  49                 	db	73
   768  00FF83  71                 	db	113
   769  00FF84                     __end_of__powers_:
   770                           	opt stack 0
   771  0000                     _ADCON0	set	4034
   772  0000                     _ADCON0bits	set	4034
   773  0000                     _ADCON1	set	4033
   774  0000                     _ADCON2	set	4032
   775  0000                     _ADRESH	set	4036
   776  0000                     _ADRESL	set	4035
   777  0000                     _CCP2CON	set	4026
   778  0000                     _CCPR2L	set	4027
   779  0000                     _INTCONbits	set	4082
   780  0000                     _OSCCON	set	4051
   781  0000                     _PIE1bits	set	3997
   782  0000                     _PIR1bits	set	3998
   783  0000                     _PIR2bits	set	4001
   784  0000                     _PORTAbits	set	3968
   785  0000                     _PORTBbits	set	3969
   786  0000                     _PORTCbits	set	3970
   787  0000                     _PORTD	set	3971
   788  0000                     _PORTDbits	set	3971
   789  0000                     _PORTEbits	set	3972
   790  0000                     _PR2	set	4043
   791  0000                     _RCSTA	set	4011
   792  0000                     _RCSTAbits	set	4011
   793  0000                     _SPBRG	set	4015
   794  0000                     _SPBRGH	set	4016
   795  0000                     _SSPBUF	set	4041
   796  0000                     _SSPCON1	set	4038
   797  0000                     _SSPSTAT	set	4039
   798  0000                     _SSPSTATbits	set	4039
   799  0000                     _T0CON	set	4053
   800  0000                     _T0CONbits	set	4053
   801  0000                     _T2CON	set	4042
   802  0000                     _T3CON	set	4017
   803  0000                     _T3CONbits	set	4017
   804  0000                     _TMR0H	set	4055
   805  0000                     _TMR0L	set	4054
   806  0000                     _TRISA	set	3986
   807  0000                     _TRISB	set	3987
   808  0000                     _TRISC	set	3988
   809  0000                     _TRISCbits	set	3988
   810  0000                     _TRISD	set	3989
   811  0000                     _TRISE	set	3990
   812  0000                     _TXREG	set	4013
   813  0000                     _TXSTA	set	4012
   814  0000                     _TXSTAbits	set	4012
   815  0000                     _RBPU	set	32655
   816  0000                     _TRMT	set	32097
   817  00FF84                     STR_12:
   818  00FF84  45                 	db	69	;'E'
   819  00FF85  57                 	db	87	;'W'
   820  00FF86  50                 	db	80	;'P'
   821  00FF87  20                 	db	32
   822  00FF88  45                 	db	69	;'E'
   823  00FF89  57                 	db	87	;'W'
   824  00FF8A  4C                 	db	76	;'L'
   825  00FF8B  54                 	db	84	;'T'
   826  00FF8C  20                 	db	32
   827  00FF8D  4E                 	db	78	;'N'
   828  00FF8E  53                 	db	83	;'S'
   829  00FF8F  50                 	db	80	;'P'
   830  00FF90  20                 	db	32
   831  00FF91  4E                 	db	78	;'N'
   832  00FF92  53                 	db	83	;'S'
   833  00FF93  4C                 	db	76	;'L'
   834  00FF94  54                 	db	84	;'T'
   835  00FF95  20                 	db	32
   836  00FF96  4D                 	db	77	;'M'
   837  00FF97  44                 	db	68	;'D'
   838  00FF98  00                 	db	0
   839  00FF99                     STR_1:
   840  00FF99  45                 	db	69	;'E'
   841  00FF9A  43                 	db	67	;'C'
   842  00FF9B  45                 	db	69	;'E'
   843  00FF9C  33                 	db	51	;'3'
   844  00FF9D  33                 	db	51	;'3'
   845  00FF9E  30                 	db	48	;'0'
   846  00FF9F  31                 	db	49	;'1'
   847  00FFA0  4C                 	db	76	;'L'
   848  00FFA1  20                 	db	32
   849  00FFA2  46                 	db	70	;'F'
   850  00FFA3  61                 	db	97	;'a'
   851  00FFA4  6C                 	db	108	;'l'
   852  00FFA5  6C                 	db	108	;'l'
   853  00FFA6  20                 	db	32
   854  00FFA7  32                 	db	50	;'2'
   855  00FFA8  32                 	db	50	;'2'
   856  00FFA9  2D                 	db	45
   857  00FFAA  53                 	db	83	;'S'
   858  00FFAB  31                 	db	49	;'1'
   859  00FFAC  00                 	db	0
   860  00FFAD                     STR_15:
   861  00FFAD  76                 	db	118	;'v'
   862  00FFAE  6F                 	db	111	;'o'
   863  00FFAF  6C                 	db	108	;'l'
   864  00FFB0  74                 	db	116	;'t'
   865  00FFB1  73                 	db	115	;'s'
   866  00FFB2  20                 	db	32
   867  00FFB3  61                 	db	97	;'a'
   868  00FFB4  72                 	db	114	;'r'
   869  00FFB5  65                 	db	101	;'e'
   870  00FFB6  20                 	db	32
   871  00FFB7  25                 	db	37
   872  00FFB8  30                 	db	48	;'0'
   873  00FFB9  2E                 	db	46
   874  00FFBA  33                 	db	51	;'3'
   875  00FFBB  66                 	db	102	;'f'
   876  00FFBC  0D                 	db	13
   877  00FFBD  0A                 	db	10
   878  00FFBE  0A                 	db	10
   879  00FFBF  00                 	db	0
   880  00FFC0                     STR_8:
   881  00FFC0  4E                 	db	78	;'N'
   882  00FFC1  4F                 	db	79	;'O'
   883  00FFC2  52                 	db	82	;'R'
   884  00FFC3  54                 	db	84	;'T'
   885  00FFC4  48                 	db	72	;'H'
   886  00FFC5  2F                 	db	47
   887  00FFC6  53                 	db	83	;'S'
   888  00FFC7  4F                 	db	79	;'O'
   889  00FFC8  55                 	db	85	;'U'
   890  00FFC9  54                 	db	84	;'T'
   891  00FFCA  48                 	db	72	;'H'
   892  00FFCB  00                 	db	0
   893  00FFCC                     STR_6:
   894  00FFCC  45                 	db	69	;'E'
   895  00FFCD  41                 	db	65	;'A'
   896  00FFCE  53                 	db	83	;'S'
   897  00FFCF  54                 	db	84	;'T'
   898  00FFD0  2F                 	db	47
   899  00FFD1  57                 	db	87	;'W'
   900  00FFD2  45                 	db	69	;'E'
   901  00FFD3  53                 	db	83	;'S'
   902  00FFD4  54                 	db	84	;'T'
   903  00FFD5  00                 	db	0
   904  00FFD6                     STR_9:
   905  00FFD6  4E                 	db	78	;'N'
   906  00FFD7  2F                 	db	47
   907  00FFD8  53                 	db	83	;'S'
   908  00FFD9  20                 	db	32
   909  00FFDA  4C                 	db	76	;'L'
   910  00FFDB  54                 	db	84	;'T'
   911  00FFDC  00                 	db	0
   912  00FFDD                     STR_7:
   913  00FFDD  45                 	db	69	;'E'
   914  00FFDE  2F                 	db	47
   915  00FFDF  57                 	db	87	;'W'
   916  00FFE0  20                 	db	32
   917  00FFE1  4C                 	db	76	;'L'
   918  00FFE2  54                 	db	84	;'T'
   919  00FFE3  00                 	db	0
   920  00FFE4                     STR_2:
   921  00FFE4  4D                 	db	77	;'M'
   922  00FFE5  6F                 	db	111	;'o'
   923  00FFE6  64                 	db	100	;'d'
   924  00FFE7  65                 	db	101	;'e'
   925  00FFE8  3A                 	db	58	;':'
   926  00FFE9  00                 	db	0
   927  00FFEA                     STR_3:
   928  00FFEA  46                 	db	70	;'F'
   929  00FFEB  52                 	db	82	;'R'
   930  00FFEC  3A                 	db	58	;':'
   931  00FFED  00                 	db	0
   932  00FFEE                     STR_4:
   933  00FFEE  46                 	db	70	;'F'
   934  00FFEF  53                 	db	83	;'S'
   935  00FFF0  3A                 	db	58	;':'
   936  00FFF1  00                 	db	0
   937  00FFF2                     STR_11:
   938  00FFF2  50                 	db	80	;'P'
   939  00FFF3  4E                 	db	78	;'N'
   940  00FFF4  53                 	db	83	;'S'
   941  00FFF5  00                 	db	0
   942  00FFF6                     STR_10:
   943  00FFF6  50                 	db	80	;'P'
   944  00FFF7  45                 	db	69	;'E'
   945  00FFF8  57                 	db	87	;'W'
   946  00FFF9  00                 	db	0
   947  00FFFA                     STR_14:
   948  00FFFA  20                 	db	32
   949  00FFFB  00                 	db	0
   950  00FFFC                     STR_5:
   951  00FFFC  2A                 	db	42
   952  00FFFD  00                 	db	0
   953  0000                     
   954                           ; #config settings
   955  00FFFE  00                 	db	0	; dummy byte at the end
   956  0000                     
   957                           	psect	cinit
   958  00C810                     __pcinit:
   959                           	opt stack 0
   960  00C810                     start_initialization:
   961                           	opt stack 0
   962  00C810                     __initialization:
   963                           	opt stack 0
   964                           
   965                           ; Clear objects allocated to BANK0 (38 bytes)
   966  00C810  EE00  F0A9         	lfsr	0,__pbssBANK0
   967  00C814  0E26               	movlw	38
   968  00C816                     clear_0:
   969  00C816  6AEE               	clrf	postinc0,c
   970  00C818  06E8               	decf	wreg,f,c
   971  00C81A  E1FD               	bnz	clear_0
   972                           
   973                           ; Clear objects allocated to COMRAM (14 bytes)
   974  00C81C  EE00  F06D         	lfsr	0,__pbssCOMRAM
   975  00C820  0E0E               	movlw	14
   976  00C822                     clear_1:
   977  00C822  6AEE               	clrf	postinc0,c
   978  00C824  06E8               	decf	wreg,f,c
   979  00C826  E1FD               	bnz	clear_1
   980                           
   981                           ; Initialize objects allocated to BANK0 (41 bytes)
   982                           ; load TBLPTR registers with __pidataBANK0
   983  00C828  0E55               	movlw	low __pidataBANK0
   984  00C82A  6EF6               	movwf	tblptrl,c
   985  00C82C  0EC3               	movlw	high __pidataBANK0
   986  00C82E  6EF7               	movwf	tblptrh,c
   987  00C830  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   988  00C832  6EF8               	movwf	tblptru,c
   989  00C834  EE00  F080         	lfsr	0,__pdataBANK0
   990  00C838  EE10 F029          	lfsr	1,41
   991  00C83C                     copy_data0:
   992  00C83C  0009               	tblrd		*+
   993  00C83E  CFF5 FFEE          	movff	tablat,postinc0
   994  00C842  50E5               	movf	postdec1,w,c
   995  00C844  50E1               	movf	fsr1l,w,c
   996  00C846  E1FA               	bnz	copy_data0
   997                           
   998                           ; Initialize objects allocated to COMRAM (5 bytes)
   999                           ; load TBLPTR registers with __pidataCOMRAM
  1000  00C848  0EBD               	movlw	low __pidataCOMRAM
  1001  00C84A  6EF6               	movwf	tblptrl,c
  1002  00C84C  0EC1               	movlw	high __pidataCOMRAM
  1003  00C84E  6EF7               	movwf	tblptrh,c
  1004  00C850  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1005  00C852  6EF8               	movwf	tblptru,c
  1006  00C854  EE00  F07B         	lfsr	0,__pdataCOMRAM
  1007  00C858  EE10 F005          	lfsr	1,5
  1008  00C85C                     copy_data1:
  1009  00C85C  0009               	tblrd		*+
  1010  00C85E  CFF5 FFEE          	movff	tablat,postinc0
  1011  00C862  50E5               	movf	postdec1,w,c
  1012  00C864  50E1               	movf	fsr1l,w,c
  1013  00C866  E1FA               	bnz	copy_data1
  1014  00C868                     end_of_initialization:
  1015                           	opt stack 0
  1016  00C868                     __end_of__initialization:
  1017                           	opt stack 0
  1018  00C868  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1019  00C86A  6EF8               	movwf	tblptru,c
  1020  00C86C  0100               	movlb	0
  1021  00C86E  EFC2  F066         	goto	_main	;jump to C main() function
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	bssCOMRAM
  1032  00006D                     __pbssCOMRAM:
  1033                           	opt stack 0
  1034  00006D                     _txt:
  1035                           	opt stack 0
  1036  00006D                     	ds	2
  1037  00006F                     _Count:
  1038                           	opt stack 0
  1039  00006F                     	ds	1
  1040  000070                     _PED_Count:
  1041                           	opt stack 0
  1042  000070                     	ds	1
  1043  000071                     _SW_EWLT:
  1044                           	opt stack 0
  1045  000071                     	ds	1
  1046  000072                     _SW_EWPED:
  1047                           	opt stack 0
  1048  000072                     	ds	1
  1049  000073                     _SW_MODE:
  1050                           	opt stack 0
  1051  000073                     	ds	1
  1052  000074                     _SW_NSLT:
  1053                           	opt stack 0
  1054  000074                     	ds	1
  1055  000075                     _SW_NSPED:
  1056                           	opt stack 0
  1057  000075                     	ds	1
  1058  000076                     __tft_type:
  1059                           	opt stack 0
  1060  000076                     	ds	1
  1061  000077                     _colstart:
  1062                           	opt stack 0
  1063  000077                     	ds	1
  1064  000078                     _dir:
  1065                           	opt stack 0
  1066  000078                     	ds	1
  1067  000079                     _direction:
  1068                           	opt stack 0
  1069  000079                     	ds	1
  1070  00007A                     _rowstart:
  1071                           	opt stack 0
  1072  00007A                     	ds	1
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           postdec1	equ	0xFE5
  1080                           fsr1l	equ	0xFE1
  1081                           
  1082                           	psect	dataCOMRAM
  1083  00007B                     __pdataCOMRAM:
  1084                           	opt stack 0
  1085  00007B                     _wrap:
  1086                           	opt stack 0
  1087  00007B                     	ds	1
  1088  00007C                     _SW_EWLT_Txt:
  1089                           	opt stack 0
  1090  00007C                     	ds	2
  1091  00007E                     _SW_EWPED_Txt:
  1092                           	opt stack 0
  1093  00007E                     	ds	2
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1l	equ	0xFE1
  1102                           
  1103                           	psect	bssBANK0
  1104  0000A9                     __pbssBANK0:
  1105                           	opt stack 0
  1106  0000A9                     _volts:
  1107                           	opt stack 0
  1108  0000A9                     	ds	3
  1109  0000AC                     _MODE:
  1110                           	opt stack 0
  1111  0000AC                     	ds	2
  1112  0000AE                     _nbr:
  1113                           	opt stack 0
  1114  0000AE                     	ds	2
  1115  0000B0                     _buffer:
  1116                           	opt stack 0
  1117  0000B0                     	ds	31
  1118                           tblptru	equ	0xFF8
  1119                           tblptrh	equ	0xFF7
  1120                           tblptrl	equ	0xFF6
  1121                           tablat	equ	0xFF5
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           postdec1	equ	0xFE5
  1125                           fsr1l	equ	0xFE1
  1126                           
  1127                           	psect	dataBANK0
  1128  000080                     __pdataBANK0:
  1129                           	opt stack 0
  1130  000080                     _array:
  1131                           	opt stack 0
  1132  000080                     	ds	11
  1133  00008B                     _EWLT_Count:
  1134                           	opt stack 0
  1135  00008B                     	ds	3
  1136  00008E                     _EW_Count:
  1137                           	opt stack 0
  1138  00008E                     	ds	3
  1139  000091                     _NSLT_Count:
  1140                           	opt stack 0
  1141  000091                     	ds	3
  1142  000094                     _NS_Count:
  1143                           	opt stack 0
  1144  000094                     	ds	3
  1145  000097                     _PED_EW_Count:
  1146                           	opt stack 0
  1147  000097                     	ds	3
  1148  00009A                     _PED_NS_Count:
  1149                           	opt stack 0
  1150  00009A                     	ds	3
  1151  00009D                     _Act_Mode_Txt:
  1152                           	opt stack 0
  1153  00009D                     	ds	2
  1154  00009F                     _FlashingR_Txt:
  1155                           	opt stack 0
  1156  00009F                     	ds	2
  1157  0000A1                     _FlashingS_Txt:
  1158                           	opt stack 0
  1159  0000A1                     	ds	2
  1160  0000A3                     _SW_MODE_Txt:
  1161                           	opt stack 0
  1162  0000A3                     	ds	2
  1163  0000A5                     _SW_NSLT_Txt:
  1164                           	opt stack 0
  1165  0000A5                     	ds	2
  1166  0000A7                     _SW_NSPED_Txt:
  1167                           	opt stack 0
  1168  0000A7                     	ds	2
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1l	equ	0xFE1
  1177                           
  1178                           	psect	cstackCOMRAM
  1179  000001                     __pcstackCOMRAM:
  1180                           	opt stack 0
  1181  000001                     ??_isdigit:
  1182  000001                     ?_strlen:
  1183                           	opt stack 0
  1184  000001                     ?_get_full_ADC:
  1185                           	opt stack 0
  1186  000001                     ?___awmod:
  1187                           	opt stack 0
  1188  000001                     ?___ftpack:
  1189                           	opt stack 0
  1190  000001                     ?___ftneg:
  1191                           	opt stack 0
  1192  000001                     ?__tdiv_to_l_:
  1193                           	opt stack 0
  1194  000001                     ?__div_to_l_:
  1195                           	opt stack 0
  1196  000001                     ?___lldiv:
  1197                           	opt stack 0
  1198  000001                     ?___llmod:
  1199                           	opt stack 0
  1200  000001                     spiwrite@x:
  1201                           	opt stack 0
  1202  000001                     putch@c:
  1203                           	opt stack 0
  1204  000001                     Select_ADC_Channel@channel:
  1205                           	opt stack 0
  1206  000001                     OpenUSART@spbrg:
  1207                           	opt stack 0
  1208  000001                     ___awmod@dividend:
  1209                           	opt stack 0
  1210  000001                     strcpy@to:
  1211                           	opt stack 0
  1212  000001                     strlen@s:
  1213                           	opt stack 0
  1214  000001                     __div_to_l_@f1:
  1215                           	opt stack 0
  1216  000001                     ___ftpack@arg:
  1217                           	opt stack 0
  1218  000001                     __tdiv_to_l_@f1:
  1219                           	opt stack 0
  1220  000001                     ___ftge@ff1:
  1221                           	opt stack 0
  1222  000001                     ___ftneg@f1:
  1223                           	opt stack 0
  1224  000001                     ___lldiv@dividend:
  1225                           	opt stack 0
  1226  000001                     ___llmod@dividend:
  1227                           	opt stack 0
  1228                           
  1229                           ; 4 bytes @ 0x0
  1230  000001                     	ds	1
  1231  000002                     spiwrite@spidata:
  1232                           	opt stack 0
  1233  000002                     _isdigit$2080:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x1
  1237  000002                     	ds	1
  1238  000003                     ??_strlen:
  1239  000003                     ??_get_full_ADC:
  1240  000003                     write_command@cmd_:
  1241                           	opt stack 0
  1242  000003                     write_data@data_:
  1243                           	opt stack 0
  1244  000003                     OpenUSART@config:
  1245                           	opt stack 0
  1246  000003                     isdigit@c:
  1247                           	opt stack 0
  1248  000003                     ___awmod@divisor:
  1249                           	opt stack 0
  1250  000003                     strcpy@from:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x2
  1254  000003                     	ds	1
  1255  000004                     setAddrWindow@y0:
  1256                           	opt stack 0
  1257  000004                     ___ftpack@exp:
  1258                           	opt stack 0
  1259  000004                     __div_to_l_@f2:
  1260                           	opt stack 0
  1261  000004                     __tdiv_to_l_@f2:
  1262                           	opt stack 0
  1263  000004                     ___ftge@ff2:
  1264                           	opt stack 0
  1265                           
  1266                           ; 3 bytes @ 0x3
  1267  000004                     	ds	1
  1268  000005                     setAddrWindow@x1:
  1269                           	opt stack 0
  1270  000005                     ___awmod@counter:
  1271                           	opt stack 0
  1272  000005                     ___ftpack@sign:
  1273                           	opt stack 0
  1274  000005                     get_full_ADC@result:
  1275                           	opt stack 0
  1276  000005                     strcpy@cp:
  1277                           	opt stack 0
  1278  000005                     strlen@cp:
  1279                           	opt stack 0
  1280  000005                     ___lldiv@divisor:
  1281                           	opt stack 0
  1282  000005                     ___llmod@divisor:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x4
  1286  000005                     	ds	1
  1287  000006                     ??___ftpack:
  1288  000006                     setAddrWindow@y1:
  1289                           	opt stack 0
  1290  000006                     ___awmod@sign:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x5
  1294  000006                     	ds	1
  1295  000007                     ??__tdiv_to_l_:
  1296  000007                     ??___ftge:
  1297  000007                     ?___awdiv:
  1298                           	opt stack 0
  1299  000007                     setAddrWindow@x0:
  1300                           	opt stack 0
  1301  000007                     ___awdiv@dividend:
  1302                           	opt stack 0
  1303  000007                     __div_to_l_@quot:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x6
  1307  000007                     	ds	1
  1308  000008                     drawPixel@y:
  1309                           	opt stack 0
  1310  000008                     drawFastVLine@y:
  1311                           	opt stack 0
  1312  000008                     fillRectangle@y:
  1313                           	opt stack 0
  1314  000008                     drawFastHLine@y:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x7
  1318  000008                     	ds	1
  1319  000009                     ?___lltoft:
  1320                           	opt stack 0
  1321  000009                     drawFastVLine@h:
  1322                           	opt stack 0
  1323  000009                     fillRectangle@w:
  1324                           	opt stack 0
  1325  000009                     drawFastHLine@w:
  1326                           	opt stack 0
  1327  000009                     ___llmod@counter:
  1328                           	opt stack 0
  1329  000009                     drawPixel@color:
  1330                           	opt stack 0
  1331  000009                     ___awdiv@divisor:
  1332                           	opt stack 0
  1333  000009                     ___lldiv@quotient:
  1334                           	opt stack 0
  1335  000009                     ___lltoft@c:
  1336                           	opt stack 0
  1337                           
  1338                           ; 4 bytes @ 0x8
  1339  000009                     	ds	1
  1340  00000A                     fillRectangle@h:
  1341                           	opt stack 0
  1342  00000A                     drawFastVLine@color:
  1343                           	opt stack 0
  1344  00000A                     drawFastHLine@color:
  1345                           	opt stack 0
  1346  00000A                     __tdiv_to_l_@quot:
  1347                           	opt stack 0
  1348                           
  1349                           ; 4 bytes @ 0x9
  1350  00000A                     	ds	1
  1351  00000B                     drawPixel@x:
  1352                           	opt stack 0
  1353  00000B                     ___awdiv@counter:
  1354                           	opt stack 0
  1355  00000B                     __div_to_l_@cntr:
  1356                           	opt stack 0
  1357  00000B                     fillRectangle@color:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0xA
  1361  00000B                     	ds	1
  1362  00000C                     ??_drawFastVLine:
  1363  00000C                     ??_drawFastHLine:
  1364  00000C                     ___awdiv@sign:
  1365                           	opt stack 0
  1366  00000C                     __div_to_l_@exp1:
  1367                           	opt stack 0
  1368  00000C                     drawCircle@x0:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0xB
  1372  00000C                     	ds	1
  1373  00000D                     ??_fillRectangle:
  1374  00000D                     ??___lltoft:
  1375  00000D                     ___lldiv@counter:
  1376                           	opt stack 0
  1377  00000D                     ___awdiv@quotient:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0xC
  1381  00000D                     	ds	1
  1382  00000E                     __tdiv_to_l_@cntr:
  1383                           	opt stack 0
  1384  00000E                     drawCircle@y0:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0xD
  1388  00000E                     	ds	1
  1389  00000F                     ?___wmul:
  1390                           	opt stack 0
  1391  00000F                     __tdiv_to_l_@exp1:
  1392                           	opt stack 0
  1393  00000F                     ___wmul@multiplier:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0xE
  1397  00000F                     	ds	1
  1398  000010                     drawFastVLine@hi:
  1399                           	opt stack 0
  1400  000010                     drawFastHLine@hi:
  1401                           	opt stack 0
  1402  000010                     drawCircle@r:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0xF
  1406  000010                     	ds	1
  1407  000011                     drawFastVLine@lo:
  1408                           	opt stack 0
  1409  000011                     fillRectangle@hi:
  1410                           	opt stack 0
  1411  000011                     drawFastHLine@lo:
  1412                           	opt stack 0
  1413  000011                     ___lltoft@exp:
  1414                           	opt stack 0
  1415  000011                     ___wmul@multiplicand:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x10
  1419  000011                     	ds	1
  1420  000012                     drawFastVLine@x:
  1421                           	opt stack 0
  1422  000012                     fillRectangle@lo:
  1423                           	opt stack 0
  1424  000012                     drawFastHLine@x:
  1425                           	opt stack 0
  1426  000012                     drawCircle@color:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x11
  1430  000012                     	ds	1
  1431  000013                     fillRect@y:
  1432                           	opt stack 0
  1433  000013                     fillRectangle@x:
  1434                           	opt stack 0
  1435  000013                     fillCircleHelper@x0:
  1436                           	opt stack 0
  1437  000013                     drawRect@x:
  1438                           	opt stack 0
  1439  000013                     ___wmul@product:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x12
  1443  000013                     	ds	1
  1444  000014                     ??_drawCircle:
  1445  000014                     fillRect@w:
  1446                           	opt stack 0
  1447  000014                     fillScreen@color:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x13
  1451  000014                     	ds	1
  1452  000015                     ?___ftmul:
  1453                           	opt stack 0
  1454  000015                     ?___awtoft:
  1455                           	opt stack 0
  1456  000015                     fillRect@h:
  1457                           	opt stack 0
  1458  000015                     delay_ms@ms:
  1459                           	opt stack 0
  1460  000015                     fillCircleHelper@y0:
  1461                           	opt stack 0
  1462  000015                     drawRect@y:
  1463                           	opt stack 0
  1464  000015                     ___awtoft@c:
  1465                           	opt stack 0
  1466  000015                     ___ftmul@f1:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x14
  1470  000015                     	ds	1
  1471  000016                     fillRect@color:
  1472                           	opt stack 0
  1473  000016                     drawCircle@ddF_x:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x15
  1477  000016                     	ds	1
  1478  000017                     ??_delay_ms:
  1479  000017                     fillCircleHelper@r:
  1480                           	opt stack 0
  1481  000017                     drawRect@w:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x16
  1485  000017                     	ds	1
  1486  000018                     ??_fillRect:
  1487  000018                     ___awtoft@sign:
  1488                           	opt stack 0
  1489  000018                     drawCircle@ddF_y:
  1490                           	opt stack 0
  1491  000018                     ___ftmul@f2:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x17
  1495  000018                     	ds	1
  1496  000019                     ?___ftdiv:
  1497                           	opt stack 0
  1498  000019                     delay_ms@count:
  1499                           	opt stack 0
  1500  000019                     fillCircleHelper@cornername:
  1501                           	opt stack 0
  1502  000019                     drawRect@h:
  1503                           	opt stack 0
  1504  000019                     ___ftdiv@f1:
  1505                           	opt stack 0
  1506                           
  1507                           ; 3 bytes @ 0x18
  1508  000019                     	ds	1
  1509  00001A                     drawCircle@f:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x19
  1513  00001A                     	ds	1
  1514  00001B                     ??___ftmul:
  1515  00001B                     fillRect@x:
  1516                           	opt stack 0
  1517  00001B                     fillCircleHelper@delta:
  1518                           	opt stack 0
  1519  00001B                     drawRect@color:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x1A
  1523  00001B                     	ds	1
  1524  00001C                     fillRect@i:
  1525                           	opt stack 0
  1526  00001C                     drawCircle@x:
  1527                           	opt stack 0
  1528  00001C                     ___ftdiv@f2:
  1529                           	opt stack 0
  1530                           
  1531                           ; 3 bytes @ 0x1B
  1532  00001C                     	ds	1
  1533  00001D                     ??_drawRect:
  1534  00001D                     fillCircleHelper@color:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x1C
  1538  00001D                     	ds	1
  1539  00001E                     drawChar@y:
  1540                           	opt stack 0
  1541  00001E                     ___ftmul@exp:
  1542                           	opt stack 0
  1543  00001E                     drawCircle@y:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x1D
  1547  00001E                     	ds	1
  1548  00001F                     ??___ftdiv:
  1549  00001F                     ??_fillCircleHelper:
  1550  00001F                     drawChar@c:
  1551                           	opt stack 0
  1552  00001F                     ___ftmul@f3_as_product:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x1E
  1556  00001F                     	ds	1
  1557  000020                     drawChar@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x1F
  1561  000020                     	ds	1
  1562  000021                     fillCircleHelper@ddF_x:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x20
  1566  000021                     	ds	1
  1567  000022                     ___ftdiv@cntr:
  1568                           	opt stack 0
  1569  000022                     ___ftmul@cntr:
  1570                           	opt stack 0
  1571  000022                     drawChar@bg:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x21
  1575  000022                     	ds	1
  1576  000023                     ___ftmul@sign:
  1577                           	opt stack 0
  1578  000023                     fillCircleHelper@ddF_y:
  1579                           	opt stack 0
  1580  000023                     ___ftdiv@f3:
  1581                           	opt stack 0
  1582                           
  1583                           ; 3 bytes @ 0x22
  1584  000023                     	ds	1
  1585  000024                     ?_fround:
  1586                           	opt stack 0
  1587  000024                     ?_scale:
  1588                           	opt stack 0
  1589  000024                     drawChar@size:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x23
  1593  000024                     	ds	1
  1594  000025                     drawChar@line:
  1595                           	opt stack 0
  1596  000025                     fillCircleHelper@f:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x24
  1600  000025                     	ds	1
  1601  000026                     drawChar@x:
  1602                           	opt stack 0
  1603  000026                     ___ftdiv@exp:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x25
  1607  000026                     	ds	1
  1608  000027                     drawChar@j:
  1609                           	opt stack 0
  1610  000027                     ___ftdiv@sign:
  1611                           	opt stack 0
  1612  000027                     fillCircleHelper@x:
  1613                           	opt stack 0
  1614  000027                     _fround$2384:
  1615                           	opt stack 0
  1616  000027                     _scale$2385:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x26
  1620  000027                     	ds	1
  1621  000028                     drawChar@i:
  1622                           	opt stack 0
  1623                           
  1624                           ; 1 bytes @ 0x27
  1625  000028                     	ds	1
  1626  000029                     drawtext@y:
  1627                           	opt stack 0
  1628  000029                     fillCircleHelper@y:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x28
  1632  000029                     	ds	1
  1633  00002A                     scale@scl:
  1634                           	opt stack 0
  1635  00002A                     drawtext@_text:
  1636                           	opt stack 0
  1637  00002A                     _fround$2383:
  1638                           	opt stack 0
  1639                           
  1640                           ; 3 bytes @ 0x29
  1641  00002A                     	ds	1
  1642  00002B                     ?___fttol:
  1643                           	opt stack 0
  1644  00002B                     fillCircle@x0:
  1645                           	opt stack 0
  1646  00002B                     ___fttol@f1:
  1647                           	opt stack 0
  1648                           
  1649                           ; 3 bytes @ 0x2A
  1650  00002B                     	ds	1
  1651  00002C                     drawtext@color:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x2B
  1655  00002C                     	ds	1
  1656  00002D                     fround@prec:
  1657                           	opt stack 0
  1658  00002D                     fillCircle@y0:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x2C
  1662  00002D                     	ds	1
  1663  00002E                     ?___ftadd:
  1664                           	opt stack 0
  1665  00002E                     drawtext@bg:
  1666                           	opt stack 0
  1667  00002E                     ___ftadd@f1:
  1668                           	opt stack 0
  1669                           
  1670                           ; 3 bytes @ 0x2D
  1671  00002E                     	ds	1
  1672  00002F                     ??___fttol:
  1673  00002F                     fillCircle@r:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x2E
  1677  00002F                     	ds	1
  1678  000030                     drawtext@size:
  1679                           	opt stack 0
  1680                           
  1681                           ; 1 bytes @ 0x2F
  1682  000030                     	ds	1
  1683  000031                     ??_drawtext:
  1684  000031                     fillCircle@color:
  1685                           	opt stack 0
  1686  000031                     ___ftadd@f2:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x30
  1690  000031                     	ds	2
  1691  000033                     update_LCD_color@color:
  1692                           	opt stack 0
  1693  000033                     drawtext@textsize:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x32
  1697  000033                     	ds	1
  1698  000034                     ??___ftadd:
  1699  000034                     update_LCD_color@direction:
  1700                           	opt stack 0
  1701  000034                     ___fttol@sign1:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x33
  1705  000034                     	ds	1
  1706  000035                     drawtext@x:
  1707                           	opt stack 0
  1708  000035                     update_LCD_color@Circle_Y:
  1709                           	opt stack 0
  1710  000035                     ___fttol@lval:
  1711                           	opt stack 0
  1712                           
  1713                           ; 4 bytes @ 0x34
  1714  000035                     	ds	1
  1715  000036                     Set_NS@color:
  1716                           	opt stack 0
  1717  000036                     Set_NSLT@color:
  1718                           	opt stack 0
  1719  000036                     Set_EW@color:
  1720                           	opt stack 0
  1721  000036                     Set_EWLT@color:
  1722                           	opt stack 0
  1723  000036                     drawtext@i:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x35
  1727  000036                     	ds	1
  1728  000037                     ___ftadd@sign:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x36
  1732  000037                     	ds	1
  1733  000038                     drawtext@cursor_y:
  1734                           	opt stack 0
  1735  000038                     ___ftadd@exp2:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x37
  1739  000038                     	ds	1
  1740  000039                     drawtext@cursor_x:
  1741                           	opt stack 0
  1742  000039                     ___ftadd@exp1:
  1743                           	opt stack 0
  1744  000039                     ___fttol@exp1:
  1745                           	opt stack 0
  1746                           
  1747                           ; 1 bytes @ 0x38
  1748  000039                     	ds	1
  1749  00003A                     ?___ftsub:
  1750                           	opt stack 0
  1751  00003A                     update_LCD_count@count:
  1752                           	opt stack 0
  1753  00003A                     update_LCD_PED_Count@count:
  1754                           	opt stack 0
  1755  00003A                     ___ftsub@f1:
  1756                           	opt stack 0
  1757                           
  1758                           ; 3 bytes @ 0x39
  1759  00003A                     	ds	1
  1760  00003B                     ??_update_LCD_count:
  1761  00003B                     ??_update_LCD_PED_Count:
  1762                           
  1763                           ; 0 bytes @ 0x3A
  1764  00003B                     	ds	1
  1765  00003C                     update_LCD_count@direction:
  1766                           	opt stack 0
  1767  00003C                     update_LCD_PED_Count@direction:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x3B
  1771  00003C                     	ds	1
  1772  00003D                     PED_Control@Num_Sec:
  1773                           	opt stack 0
  1774  00003D                     ___ftsub@f2:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x3C
  1778  00003D                     	ds	1
  1779  00003E                     PED_Control@i:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x3D
  1783  00003E                     	ds	2
  1784  000040                     ?_printf:
  1785                           	opt stack 0
  1786  000040                     printf@f:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x3F
  1790  000040                     	ds	5
  1791  000045                     ??_printf:
  1792                           
  1793                           ; 0 bytes @ 0x44
  1794  000045                     	ds	6
  1795  00004B                     _printf$2386:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x4A
  1799  00004B                     	ds	3
  1800  00004E                     printf@ap:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x4D
  1804  00004E                     	ds	2
  1805  000050                     printf@val:
  1806                           	opt stack 0
  1807                           
  1808                           ; 4 bytes @ 0x4F
  1809  000050                     	ds	4
  1810  000054                     printf@tmpval:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x53
  1814  000054                     	ds	4
  1815  000058                     printf@exp:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x57
  1819  000058                     	ds	2
  1820  00005A                     printf@flag:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x59
  1824  00005A                     	ds	2
  1825  00005C                     printf@width:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x5B
  1829  00005C                     	ds	2
  1830  00005E                     printf@fval:
  1831                           	opt stack 0
  1832                           
  1833                           ; 3 bytes @ 0x5D
  1834  00005E                     	ds	3
  1835  000061                     printf@prec:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x60
  1839  000061                     	ds	2
  1840  000063                     printf@c:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x62
  1844  000063                     	ds	1
  1845  000064                     update_LCD_misc@nStep:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x63
  1849  000064                     	ds	2
  1850  000066                     update_LCD_misc@volts:
  1851                           	opt stack 0
  1852                           
  1853                           ; 3 bytes @ 0x65
  1854  000066                     	ds	3
  1855  000069                     WAIT_N_SEC@seconds:
  1856                           	opt stack 0
  1857                           
  1858                           ; 1 bytes @ 0x68
  1859  000069                     	ds	1
  1860  00006A                     WAIT_N_SEC@i:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x69
  1864  00006A                     	ds	1
  1865  00006B                     main@nStep:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x6A
  1869  00006B                     	ds	2
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           
  1879 ;;
  1880 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1881 ;;
  1882 ;; *************** function _main *****************
  1883 ;; Defined at:
  1884 ;;		line 293 in file "Lab8p1.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  nStep           2  106[COMRAM] int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;		None               void
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;Total ram usage:        2 bytes
  1903 ;; Hardware stack levels required when called:   11
  1904 ;; This function calls:
  1905 ;;		_Day_Mode
  1906 ;;		_Init_ADC
  1907 ;;		_Init_TRIS
  1908 ;;		_Initialize_Screen
  1909 ;;		_Night_Mode
  1910 ;;		_Select_ADC_Channel
  1911 ;;		___awtoft
  1912 ;;		___ftdiv
  1913 ;;		___ftge
  1914 ;;		___wmul
  1915 ;;		_get_full_ADC
  1916 ;;		_init_UART
  1917 ;; This function is called by:
  1918 ;;		Startup code after reset
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text0
  1923  00CD84                     __ptext0:
  1924                           	opt stack 0
  1925  00CD84                     _main:
  1926                           	opt stack 20
  1927                           
  1928                           ;Lab8p1.c: 295: Init_ADC();
  1929                           
  1930                           ;incstack = 0
  1931  00CD84  ECF2  F060         	call	_Init_ADC	;wreg free
  1932                           
  1933                           ;Lab8p1.c: 296: Init_TRIS();
  1934  00CD88  EC3A  F061         	call	_Init_TRIS	;wreg free
  1935                           
  1936                           ;Lab8p1.c: 297: init_UART ();
  1937  00CD8C  EC25  F061         	call	_init_UART	;wreg free
  1938                           
  1939                           ;Lab8p1.c: 298: Select_ADC_Channel(0);
  1940  00CD90  0E00               	movlw	0
  1941  00CD92  ECE5  F060         	call	_Select_ADC_Channel
  1942                           
  1943                           ;Lab8p1.c: 300: OSCCON = 0x70;
  1944  00CD96  0E70               	movlw	112
  1945  00CD98  6ED3               	movwf	4051,c	;volatile
  1946                           
  1947                           ;Lab8p1.c: 301: RBPU = 0;
  1948  00CD9A  9EF1               	bcf	intcon2,7,c	;volatile
  1949                           
  1950                           ;Lab8p1.c: 302: Initialize_Screen();
  1951  00CD9C  EC6E  F076         	call	_Initialize_Screen	;wreg free
  1952  00CDA0  D000               	goto	l5478
  1953  00CDA2                     l5478:
  1954                           
  1955                           ;Lab8p1.c: 305: {
  1956                           ;Lab8p1.c: 306: int nStep = get_full_ADC ();
  1957  00CDA2  EC83  F061         	call	_get_full_ADC	;wreg free
  1958  00CDA6  C001  F06B         	movff	?_get_full_ADC,main@nStep
  1959  00CDAA  C002  F06C         	movff	?_get_full_ADC+1,main@nStep+1
  1960                           
  1961                           ;Lab8p1.c: 307: volts = nStep*5/1024.0;
  1962  00CDAE  C06B  F00F         	movff	main@nStep,___wmul@multiplier
  1963  00CDB2  C06C  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1964  00CDB6  0E00               	movlw	0
  1965  00CDB8  6E12               	movwf	___wmul@multiplicand+1,c
  1966  00CDBA  0E05               	movlw	5
  1967  00CDBC  6E11               	movwf	___wmul@multiplicand,c
  1968  00CDBE  EC96  F061         	call	___wmul	;wreg free
  1969  00CDC2  C00F  F015         	movff	?___wmul,___awtoft@c
  1970  00CDC6  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  1971  00CDCA  EC34  F062         	call	___awtoft	;wreg free
  1972  00CDCE  C015  F019         	movff	?___awtoft,___ftdiv@f1
  1973  00CDD2  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  1974  00CDD6  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  1975  00CDDA  0E00               	movlw	0
  1976  00CDDC  6E1C               	movwf	___ftdiv@f2,c
  1977  00CDDE  0E80               	movlw	128
  1978  00CDE0  6E1D               	movwf	___ftdiv@f2+1,c
  1979  00CDE2  0E44               	movlw	68
  1980  00CDE4  6E1E               	movwf	___ftdiv@f2+2,c
  1981  00CDE6  EC05  F069         	call	___ftdiv	;wreg free
  1982  00CDEA  C019  F0A9         	movff	?___ftdiv,_volts
  1983  00CDEE  C01A  F0AA         	movff	?___ftdiv+1,_volts+1
  1984  00CDF2  C01B  F0AB         	movff	?___ftdiv+2,_volts+2
  1985                           
  1986                           ;Lab8p1.c: 309: if (volts < 2.570)
  1987  00CDF6  C0A9  F001         	movff	_volts,___ftge@ff1
  1988  00CDFA  C0AA  F002         	movff	_volts+1,___ftge@ff1+1
  1989  00CDFE  C0AB  F003         	movff	_volts+2,___ftge@ff1+2
  1990  00CE02  0E7B               	movlw	123
  1991  00CE04  6E04               	movwf	___ftge@ff2,c
  1992  00CE06  0E24               	movlw	36
  1993  00CE08  6E05               	movwf	___ftge@ff2+1,c
  1994  00CE0A  0E40               	movlw	64
  1995  00CE0C  6E06               	movwf	___ftge@ff2+2,c
  1996  00CE0E  EC77  F066         	call	___ftge	;wreg free
  1997  00CE12  B0D8               	btfsc	status,0,c
  1998  00CE14  D003               	goto	l5486
  1999                           
  2000                           ;Lab8p1.c: 310: {
  2001                           ;Lab8p1.c: 311: Day_Mode();
  2002  00CE16  EC65  F067         	call	_Day_Mode	;wreg free
  2003                           
  2004                           ;Lab8p1.c: 312: }
  2005  00CE1A  D7C3               	goto	l5478
  2006  00CE1C                     l5486:
  2007                           
  2008                           ;Lab8p1.c: 313: else
  2009                           ;Lab8p1.c: 314: {
  2010                           ;Lab8p1.c: 315: Night_Mode();
  2011  00CE1C  EC13  F067         	call	_Night_Mode	;wreg free
  2012  00CE20  D7C0               	goto	l5478
  2013  00CE22  EF00  F000         	goto	start
  2014  00CE26                     __end_of_main:
  2015                           	opt stack 0
  2016                           tblptru	equ	0xFF8
  2017                           tblptrh	equ	0xFF7
  2018                           tblptrl	equ	0xFF6
  2019                           tablat	equ	0xFF5
  2020                           intcon2	equ	0xFF1
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _init_UART *****************
  2028 ;; Defined at:
  2029 ;;		line 278 in file "Lab8p1.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:        0 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		_OpenUSART
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text1
  2058  00C24A                     __ptext1:
  2059                           	opt stack 0
  2060  00C24A                     _init_UART:
  2061                           	opt stack 29
  2062                           
  2063                           ;Lab8p1.c: 280: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  2064                           ;Lab8p1.c: 281: & 0b11111111 & 0b11111111, 25);
  2065                           
  2066                           ;incstack = 0
  2067  00C24A  0E00               	movlw	0
  2068  00C24C  6E02               	movwf	OpenUSART@spbrg+1,c
  2069  00C24E  0E19               	movlw	25
  2070  00C250  6E01               	movwf	OpenUSART@spbrg,c
  2071  00C252  0E3C               	movlw	60
  2072  00C254  ECA4  F064         	call	_OpenUSART
  2073                           
  2074                           ;Lab8p1.c: 282: OSCCON = 0x60;
  2075  00C258  0E60               	movlw	96
  2076  00C25A  6ED3               	movwf	4051,c	;volatile
  2077  00C25C  0012               	return		;funcret
  2078  00C25E                     __end_of_init_UART:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon2	equ	0xFF1
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1l	equ	0xFE1
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _OpenUSART *****************
  2092 ;; Defined at:
  2093 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  config          1    wreg     unsigned char 
  2096 ;;  spbrg           2    0[COMRAM] unsigned int 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  config          1    2[COMRAM] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		wreg, status,2
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;Total ram usage:        3 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_init_UART
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text2
  2122  00C948                     __ptext2:
  2123                           	opt stack 0
  2124  00C948                     _OpenUSART:
  2125                           	opt stack 29
  2126                           
  2127                           ;incstack = 0
  2128                           ;OpenUSART@config stored from wreg
  2129  00C948  6E03               	movwf	OpenUSART@config,c
  2130  00C94A  0E00               	movlw	0
  2131  00C94C  6EAC               	movwf	4012,c	;volatile
  2132  00C94E  0E00               	movlw	0
  2133  00C950  6EAB               	movwf	4011,c	;volatile
  2134  00C952  A003               	btfss	OpenUSART@config,0,c
  2135  00C954  D002               	goto	l4902
  2136  00C956  88AC               	bsf	4012,4,c	;volatile
  2137  00C958  D000               	goto	l4902
  2138  00C95A                     l4902:
  2139  00C95A  A203               	btfss	OpenUSART@config,1,c
  2140  00C95C  D003               	goto	l4906
  2141  00C95E  8CAC               	bsf	4012,6,c	;volatile
  2142  00C960  8CAB               	bsf	4011,6,c	;volatile
  2143  00C962  D000               	goto	l4906
  2144  00C964                     l4906:
  2145  00C964  A403               	btfss	OpenUSART@config,2,c
  2146  00C966  D002               	goto	l4910
  2147  00C968  8EAC               	bsf	4012,7,c	;volatile
  2148  00C96A  D000               	goto	l4910
  2149  00C96C                     l4910:
  2150  00C96C  A603               	btfss	OpenUSART@config,3,c
  2151  00C96E  D002               	goto	l674
  2152  00C970  88AB               	bsf	4011,4,c	;volatile
  2153  00C972  D002               	goto	l4914
  2154  00C974                     l674:
  2155  00C974  8AAB               	bsf	4011,5,c	;volatile
  2156  00C976  D000               	goto	l4914
  2157  00C978                     l4914:
  2158  00C978  B803               	btfsc	OpenUSART@config,4,c
  2159  00C97A  84AC               	bsf	4012,2,c	;volatile
  2160  00C97C  989E               	bcf	3998,4,c	;volatile
  2161  00C97E  AA03               	btfss	OpenUSART@config,5,c
  2162  00C980  D002               	goto	l4922
  2163  00C982  86AB               	bsf	4011,3,c	;volatile
  2164  00C984  D000               	goto	l4922
  2165  00C986                     l4922:
  2166  00C986  AC03               	btfss	OpenUSART@config,6,c
  2167  00C988  D002               	goto	l678
  2168  00C98A  8A9D               	bsf	3997,5,c	;volatile
  2169  00C98C  D001               	goto	l679
  2170  00C98E                     l678:
  2171  00C98E  9A9D               	bcf	3997,5,c	;volatile
  2172  00C990                     l679:
  2173  00C990  9A9E               	bcf	3998,5,c	;volatile
  2174  00C992  AE03               	btfss	OpenUSART@config,7,c
  2175  00C994  D002               	goto	l680
  2176  00C996  889D               	bsf	3997,4,c	;volatile
  2177  00C998  D001               	goto	l681
  2178  00C99A                     l680:
  2179  00C99A  989D               	bcf	3997,4,c	;volatile
  2180  00C99C                     l681:
  2181  00C99C  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2182  00C9A0  5002               	movf	OpenUSART@spbrg+1,w,c
  2183  00C9A2  6EB0               	movwf	4016,c	;volatile
  2184  00C9A4  8AAC               	bsf	4012,5,c	;volatile
  2185  00C9A6  8EAB               	bsf	4011,7,c	;volatile
  2186  00C9A8  9C94               	bcf	3988,6,c	;volatile
  2187  00C9AA  8E94               	bsf	3988,7,c	;volatile
  2188  00C9AC  B8AC               	btfsc	4012,4,c	;volatile
  2189  00C9AE  BEAC               	btfsc	4012,7,c	;volatile
  2190  00C9B0  D002               	goto	l683
  2191  00C9B2  8C94               	bsf	3988,6,c	;volatile
  2192  00C9B4  D000               	goto	l683
  2193  00C9B6                     l683:
  2194  00C9B6  0012               	return		;funcret
  2195  00C9B8                     __end_of_OpenUSART:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           intcon2	equ	0xFF1
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postdec1	equ	0xFE5
  2205                           fsr1l	equ	0xFE1
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _Select_ADC_Channel *****************
  2209 ;; Defined at:
  2210 ;;		line 445 in file "Lab8p1.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  channel         1    wreg     unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  channel         1    0[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;		None               void
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, prodl, prodh
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;Total ram usage:        1 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text3
  2238  00C1CA                     __ptext3:
  2239                           	opt stack 0
  2240  00C1CA                     _Select_ADC_Channel:
  2241                           	opt stack 30
  2242                           
  2243                           ;incstack = 0
  2244                           ;Select_ADC_Channel@channel stored from wreg
  2245  00C1CA  6E01               	movwf	Select_ADC_Channel@channel,c
  2246                           
  2247                           ;Lab8p1.c: 447: ADCON0 = channel * 4 + 1;
  2248  00C1CC  5001               	movf	Select_ADC_Channel@channel,w,c
  2249  00C1CE  0D04               	mullw	4
  2250  00C1D0  28F3               	incf	prodl,w,c
  2251  00C1D2  6EC2               	movwf	4034,c	;volatile
  2252  00C1D4  0012               	return		;funcret
  2253  00C1D6                     __end_of_Select_ADC_Channel:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodl	equ	0xFF3
  2260                           intcon2	equ	0xFF1
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           postdec1	equ	0xFE5
  2264                           fsr1l	equ	0xFE1
  2265                           status	equ	0xFD8
  2266                           
  2267 ;; *************** function _Night_Mode *****************
  2268 ;; Defined at:
  2269 ;;		line 379 in file "Lab8p1.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;		None               void
  2276 ;; Registers used:
  2277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;Total ram usage:        0 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:   10
  2290 ;; This function calls:
  2291 ;;		_Set_EW
  2292 ;;		_Set_EWLT
  2293 ;;		_Set_NS
  2294 ;;		_Set_NSLT
  2295 ;;		_WAIT_N_SEC
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text4
  2302  00CE26                     __ptext4:
  2303                           	opt stack 0
  2304  00CE26                     _Night_Mode:
  2305                           	opt stack 20
  2306                           
  2307                           ;Lab8p1.c: 381: PORTBbits.RB7 = 1;
  2308                           
  2309                           ;incstack = 0
  2310  00CE26  8E81               	bsf	3969,7,c	;volatile
  2311                           
  2312                           ;Lab8p1.c: 382: Act_Mode_Txt[0] = 'N';
  2313  00CE28  0E4E               	movlw	78
  2314  00CE2A  0100               	movlb	0	; () banked
  2315  00CE2C  6F9D               	movwf	_Act_Mode_Txt& (0+255),b
  2316  00CE2E  D000               	goto	l5190
  2317  00CE30                     l5190:
  2318                           
  2319                           ;Lab8p1.c: 385: {
  2320                           ;Lab8p1.c: 386: Set_NSLT (1);
  2321  00CE30  0E01               	movlw	1
  2322  00CE32  ECF6  F062         	call	_Set_NSLT
  2323                           
  2324                           ;Lab8p1.c: 387: Set_EW (1);
  2325  00CE36  0E01               	movlw	1
  2326  00CE38  EC90  F062         	call	_Set_EW
  2327                           
  2328                           ;Lab8p1.c: 388: Set_EWLT (1);
  2329  00CE3C  0E01               	movlw	1
  2330  00CE3E  ECB2  F062         	call	_Set_EWLT
  2331                           
  2332                           ;Lab8p1.c: 389: Set_NS (2);
  2333  00CE42  0E02               	movlw	2
  2334  00CE44  ECD4  F062         	call	_Set_NS
  2335                           
  2336                           ;Lab8p1.c: 391: WAIT_N_SEC (8);
  2337  00CE48  0E08               	movlw	8
  2338  00CE4A  ECD4  F061         	call	_WAIT_N_SEC
  2339                           
  2340                           ;Lab8p1.c: 392: Set_NS (3);
  2341  00CE4E  0E03               	movlw	3
  2342  00CE50  ECD4  F062         	call	_Set_NS
  2343                           
  2344                           ;Lab8p1.c: 394: WAIT_N_SEC (2);
  2345  00CE54  0E02               	movlw	2
  2346  00CE56  ECD4  F061         	call	_WAIT_N_SEC
  2347                           
  2348                           ;Lab8p1.c: 395: Set_NS (1);
  2349  00CE5A  0E01               	movlw	1
  2350  00CE5C  ECD4  F062         	call	_Set_NS
  2351                           
  2352                           ;Lab8p1.c: 397: if (PORTAbits.RA4 == 1)
  2353  00CE60  A880               	btfss	3968,4,c	;volatile
  2354  00CE62  D010               	goto	l5216
  2355                           
  2356                           ;Lab8p1.c: 398: {
  2357                           ;Lab8p1.c: 399: Set_EWLT (2);
  2358  00CE64  0E02               	movlw	2
  2359  00CE66  ECB2  F062         	call	_Set_EWLT
  2360                           
  2361                           ;Lab8p1.c: 400: WAIT_N_SEC (6);
  2362  00CE6A  0E06               	movlw	6
  2363  00CE6C  ECD4  F061         	call	_WAIT_N_SEC
  2364                           
  2365                           ;Lab8p1.c: 401: Set_EWLT (3);
  2366  00CE70  0E03               	movlw	3
  2367  00CE72  ECB2  F062         	call	_Set_EWLT
  2368                           
  2369                           ;Lab8p1.c: 402: WAIT_N_SEC (2);
  2370  00CE76  0E02               	movlw	2
  2371  00CE78  ECD4  F061         	call	_WAIT_N_SEC
  2372                           
  2373                           ;Lab8p1.c: 403: Set_EWLT (1);
  2374  00CE7C  0E01               	movlw	1
  2375  00CE7E  ECB2  F062         	call	_Set_EWLT
  2376  00CE82  D000               	goto	l5216
  2377  00CE84                     l5216:
  2378                           
  2379                           ;Lab8p1.c: 404: }
  2380                           ;Lab8p1.c: 406: Set_EW (2);
  2381  00CE84  0E02               	movlw	2
  2382  00CE86  EC90  F062         	call	_Set_EW
  2383                           
  2384                           ;Lab8p1.c: 407: WAIT_N_SEC (9);
  2385  00CE8A  0E09               	movlw	9
  2386  00CE8C  ECD4  F061         	call	_WAIT_N_SEC
  2387                           
  2388                           ;Lab8p1.c: 409: Set_EW (3);
  2389  00CE90  0E03               	movlw	3
  2390  00CE92  EC90  F062         	call	_Set_EW
  2391                           
  2392                           ;Lab8p1.c: 410: WAIT_N_SEC (2);
  2393  00CE96  0E02               	movlw	2
  2394  00CE98  ECD4  F061         	call	_WAIT_N_SEC
  2395                           
  2396                           ;Lab8p1.c: 412: Set_EW (1);
  2397  00CE9C  0E01               	movlw	1
  2398  00CE9E  EC90  F062         	call	_Set_EW
  2399                           
  2400                           ;Lab8p1.c: 414: if (PORTAbits.RA3 == 1)
  2401  00CEA2  A680               	btfss	3968,3,c	;volatile
  2402  00CEA4  D011               	goto	l403
  2403                           
  2404                           ;Lab8p1.c: 415: {
  2405                           ;Lab8p1.c: 416: Set_NSLT (2);
  2406  00CEA6  0E02               	movlw	2
  2407  00CEA8  ECF6  F062         	call	_Set_NSLT
  2408                           
  2409                           ;Lab8p1.c: 417: WAIT_N_SEC (7);
  2410  00CEAC  0E07               	movlw	7
  2411  00CEAE  ECD4  F061         	call	_WAIT_N_SEC
  2412                           
  2413                           ;Lab8p1.c: 419: Set_NSLT (3);
  2414  00CEB2  0E03               	movlw	3
  2415  00CEB4  ECF6  F062         	call	_Set_NSLT
  2416                           
  2417                           ;Lab8p1.c: 420: WAIT_N_SEC (2);
  2418  00CEB8  0E02               	movlw	2
  2419  00CEBA  ECD4  F061         	call	_WAIT_N_SEC
  2420                           
  2421                           ;Lab8p1.c: 422: Set_NSLT (1);
  2422  00CEBE  0E01               	movlw	1
  2423  00CEC0  ECF6  F062         	call	_Set_NSLT
  2424                           
  2425                           ;Lab8p1.c: 423: }
  2426                           ;Lab8p1.c: 424: break;
  2427  00CEC4  D001               	goto	l403
  2428  00CEC6  D7B4               	goto	l5190
  2429  00CEC8                     l403:
  2430  00CEC8  0012               	return		;funcret
  2431  00CECA                     __end_of_Night_Mode:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodl	equ	0xFF3
  2438                           intcon2	equ	0xFF1
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postdec1	equ	0xFE5
  2442                           fsr1l	equ	0xFE1
  2443                           status	equ	0xFD8
  2444                           
  2445 ;; *************** function _Initialize_Screen *****************
  2446 ;; Defined at:
  2447 ;;		line 190 in file "Lab8p1.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;		None
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;		None
  2452 ;; Return value:  Size  Location     Type
  2453 ;;		None               void
  2454 ;; Registers used:
  2455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;Total ram usage:        0 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    7
  2468 ;; This function calls:
  2469 ;;		_LCD_Reset
  2470 ;;		_TFT_GreenTab_Initialize
  2471 ;;		_drawCircle
  2472 ;;		_drawRect
  2473 ;;		_drawtext
  2474 ;;		_fillCircle
  2475 ;;		_fillScreen
  2476 ;;		_strcpy
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text5
  2483  00ECDC                     __ptext5:
  2484                           	opt stack 0
  2485  00ECDC                     _Initialize_Screen:
  2486                           	opt stack 23
  2487                           
  2488                           ;Lab8p1.c: 192: LCD_Reset();
  2489                           
  2490                           ;incstack = 0
  2491  00ECDC  EC12  F061         	call	_LCD_Reset	;wreg free
  2492                           
  2493                           ;Lab8p1.c: 193: TFT_GreenTab_Initialize();
  2494  00ECE0  ECBF  F061         	call	_TFT_GreenTab_Initialize	;wreg free
  2495                           
  2496                           ;Lab8p1.c: 194: fillScreen(0x0000);
  2497  00ECE4  0E00               	movlw	0
  2498  00ECE6  6E15               	movwf	fillScreen@color+1,c
  2499  00ECE8  0E00               	movlw	0
  2500  00ECEA  6E14               	movwf	fillScreen@color,c
  2501  00ECEC  EC52  F061         	call	_fillScreen	;wreg free
  2502                           
  2503                           ;Lab8p1.c: 197: txt = buffer;
  2504  00ECF0  0EB0               	movlw	low _buffer
  2505  00ECF2  6E6D               	movwf	_txt,c
  2506  00ECF4  0E00               	movlw	high _buffer
  2507  00ECF6  6E6E               	movwf	_txt+1,c
  2508                           
  2509                           ;Lab8p1.c: 198: strcpy(txt, "ECE3301L Fall 22-S1");
  2510  00ECF8  C06D  F001         	movff	_txt,strcpy@to
  2511  00ECFC  C06E  F002         	movff	_txt+1,strcpy@to+1
  2512  00ED00  0E99               	movlw	low STR_1
  2513  00ED02  6E03               	movwf	strcpy@from,c
  2514  00ED04  0EFF               	movlw	high STR_1
  2515  00ED06  6E04               	movwf	strcpy@from+1,c
  2516  00ED08  EC1B  F062         	call	_strcpy	;wreg free
  2517                           
  2518                           ;Lab8p1.c: 199: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2519  00ED0C  0E02               	movlw	2
  2520  00ED0E  6E29               	movwf	drawtext@y,c
  2521  00ED10  C06D  F02A         	movff	_txt,drawtext@_text
  2522  00ED14  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2523  00ED18  0EFF               	movlw	255
  2524  00ED1A  6E2D               	movwf	drawtext@color+1,c
  2525  00ED1C  682C               	setf	drawtext@color,c
  2526  00ED1E  0E00               	movlw	0
  2527  00ED20  6E2F               	movwf	drawtext@bg+1,c
  2528  00ED22  0E00               	movlw	0
  2529  00ED24  6E2E               	movwf	drawtext@bg,c
  2530  00ED26  0E01               	movlw	1
  2531  00ED28  6E30               	movwf	drawtext@size,c
  2532  00ED2A  0E02               	movlw	2
  2533  00ED2C  EC96  F068         	call	_drawtext
  2534                           
  2535                           ;Lab8p1.c: 202: strcpy(txt, "Mode:");
  2536  00ED30  C06D  F001         	movff	_txt,strcpy@to
  2537  00ED34  C06E  F002         	movff	_txt+1,strcpy@to+1
  2538  00ED38  0EE4               	movlw	low STR_2
  2539  00ED3A  6E03               	movwf	strcpy@from,c
  2540  00ED3C  0EFF               	movlw	high STR_2
  2541  00ED3E  6E04               	movwf	strcpy@from+1,c
  2542  00ED40  EC1B  F062         	call	_strcpy	;wreg free
  2543                           
  2544                           ;Lab8p1.c: 203: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2545  00ED44  0E0A               	movlw	10
  2546  00ED46  6E29               	movwf	drawtext@y,c
  2547  00ED48  C06D  F02A         	movff	_txt,drawtext@_text
  2548  00ED4C  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2549  00ED50  0EFF               	movlw	255
  2550  00ED52  6E2D               	movwf	drawtext@color+1,c
  2551  00ED54  682C               	setf	drawtext@color,c
  2552  00ED56  0E00               	movlw	0
  2553  00ED58  6E2F               	movwf	drawtext@bg+1,c
  2554  00ED5A  0E00               	movlw	0
  2555  00ED5C  6E2E               	movwf	drawtext@bg,c
  2556  00ED5E  0E01               	movlw	1
  2557  00ED60  6E30               	movwf	drawtext@size,c
  2558  00ED62  0E02               	movlw	2
  2559  00ED64  EC96  F068         	call	_drawtext
  2560                           
  2561                           ;Lab8p1.c: 204: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2562  00ED68  0E0A               	movlw	10
  2563  00ED6A  6E29               	movwf	drawtext@y,c
  2564  00ED6C  0E9D               	movlw	low _Act_Mode_Txt
  2565  00ED6E  6E2A               	movwf	drawtext@_text,c
  2566  00ED70  0E00               	movlw	high _Act_Mode_Txt
  2567  00ED72  6E2B               	movwf	drawtext@_text+1,c
  2568  00ED74  0EFF               	movlw	255
  2569  00ED76  6E2D               	movwf	drawtext@color+1,c
  2570  00ED78  682C               	setf	drawtext@color,c
  2571  00ED7A  0E00               	movlw	0
  2572  00ED7C  6E2F               	movwf	drawtext@bg+1,c
  2573  00ED7E  0E00               	movlw	0
  2574  00ED80  6E2E               	movwf	drawtext@bg,c
  2575  00ED82  0E01               	movlw	1
  2576  00ED84  6E30               	movwf	drawtext@size,c
  2577  00ED86  0E23               	movlw	35
  2578  00ED88  EC96  F068         	call	_drawtext
  2579                           
  2580                           ;Lab8p1.c: 207: strcpy(txt, "FR:");
  2581  00ED8C  C06D  F001         	movff	_txt,strcpy@to
  2582  00ED90  C06E  F002         	movff	_txt+1,strcpy@to+1
  2583  00ED94  0EEA               	movlw	low STR_3
  2584  00ED96  6E03               	movwf	strcpy@from,c
  2585  00ED98  0EFF               	movlw	high STR_3
  2586  00ED9A  6E04               	movwf	strcpy@from+1,c
  2587  00ED9C  EC1B  F062         	call	_strcpy	;wreg free
  2588                           
  2589                           ;Lab8p1.c: 208: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2590  00EDA0  0E0A               	movlw	10
  2591  00EDA2  6E29               	movwf	drawtext@y,c
  2592  00EDA4  C06D  F02A         	movff	_txt,drawtext@_text
  2593  00EDA8  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2594  00EDAC  0EFF               	movlw	255
  2595  00EDAE  6E2D               	movwf	drawtext@color+1,c
  2596  00EDB0  682C               	setf	drawtext@color,c
  2597  00EDB2  0E00               	movlw	0
  2598  00EDB4  6E2F               	movwf	drawtext@bg+1,c
  2599  00EDB6  0E00               	movlw	0
  2600  00EDB8  6E2E               	movwf	drawtext@bg,c
  2601  00EDBA  0E01               	movlw	1
  2602  00EDBC  6E30               	movwf	drawtext@size,c
  2603  00EDBE  0E32               	movlw	50
  2604  00EDC0  EC96  F068         	call	_drawtext
  2605                           
  2606                           ;Lab8p1.c: 209: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2607  00EDC4  0E0A               	movlw	10
  2608  00EDC6  6E29               	movwf	drawtext@y,c
  2609  00EDC8  0E9F               	movlw	low _FlashingR_Txt
  2610  00EDCA  6E2A               	movwf	drawtext@_text,c
  2611  00EDCC  0E00               	movlw	high _FlashingR_Txt
  2612  00EDCE  6E2B               	movwf	drawtext@_text+1,c
  2613  00EDD0  0EFF               	movlw	255
  2614  00EDD2  6E2D               	movwf	drawtext@color+1,c
  2615  00EDD4  682C               	setf	drawtext@color,c
  2616  00EDD6  0E00               	movlw	0
  2617  00EDD8  6E2F               	movwf	drawtext@bg+1,c
  2618  00EDDA  0E00               	movlw	0
  2619  00EDDC  6E2E               	movwf	drawtext@bg,c
  2620  00EDDE  0E01               	movlw	1
  2621  00EDE0  6E30               	movwf	drawtext@size,c
  2622  00EDE2  0E46               	movlw	70
  2623  00EDE4  EC96  F068         	call	_drawtext
  2624                           
  2625                           ;Lab8p1.c: 212: strcpy(txt, "FS:");
  2626  00EDE8  C06D  F001         	movff	_txt,strcpy@to
  2627  00EDEC  C06E  F002         	movff	_txt+1,strcpy@to+1
  2628  00EDF0  0EEE               	movlw	low STR_4
  2629  00EDF2  6E03               	movwf	strcpy@from,c
  2630  00EDF4  0EFF               	movlw	high STR_4
  2631  00EDF6  6E04               	movwf	strcpy@from+1,c
  2632  00EDF8  EC1B  F062         	call	_strcpy	;wreg free
  2633                           
  2634                           ;Lab8p1.c: 213: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2635  00EDFC  0E0A               	movlw	10
  2636  00EDFE  6E29               	movwf	drawtext@y,c
  2637  00EE00  C06D  F02A         	movff	_txt,drawtext@_text
  2638  00EE04  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2639  00EE08  0EFF               	movlw	255
  2640  00EE0A  6E2D               	movwf	drawtext@color+1,c
  2641  00EE0C  682C               	setf	drawtext@color,c
  2642  00EE0E  0E00               	movlw	0
  2643  00EE10  6E2F               	movwf	drawtext@bg+1,c
  2644  00EE12  0E00               	movlw	0
  2645  00EE14  6E2E               	movwf	drawtext@bg,c
  2646  00EE16  0E01               	movlw	1
  2647  00EE18  6E30               	movwf	drawtext@size,c
  2648  00EE1A  0E50               	movlw	80
  2649  00EE1C  EC96  F068         	call	_drawtext
  2650                           
  2651                           ;Lab8p1.c: 214: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2652  00EE20  0E0A               	movlw	10
  2653  00EE22  6E29               	movwf	drawtext@y,c
  2654  00EE24  0EA1               	movlw	low _FlashingS_Txt
  2655  00EE26  6E2A               	movwf	drawtext@_text,c
  2656  00EE28  0E00               	movlw	high _FlashingS_Txt
  2657  00EE2A  6E2B               	movwf	drawtext@_text+1,c
  2658  00EE2C  0EFF               	movlw	255
  2659  00EE2E  6E2D               	movwf	drawtext@color+1,c
  2660  00EE30  682C               	setf	drawtext@color,c
  2661  00EE32  0E00               	movlw	0
  2662  00EE34  6E2F               	movwf	drawtext@bg+1,c
  2663  00EE36  0E00               	movlw	0
  2664  00EE38  6E2E               	movwf	drawtext@bg,c
  2665  00EE3A  0E01               	movlw	1
  2666  00EE3C  6E30               	movwf	drawtext@size,c
  2667  00EE3E  0E64               	movlw	100
  2668  00EE40  EC96  F068         	call	_drawtext
  2669                           
  2670                           ;Lab8p1.c: 217: strcpy(txt, "*");
  2671  00EE44  C06D  F001         	movff	_txt,strcpy@to
  2672  00EE48  C06E  F002         	movff	_txt+1,strcpy@to+1
  2673  00EE4C  0EFC               	movlw	low STR_5
  2674  00EE4E  6E03               	movwf	strcpy@from,c
  2675  00EE50  0EFF               	movlw	high STR_5
  2676  00EE52  6E04               	movwf	strcpy@from+1,c
  2677  00EE54  EC1B  F062         	call	_strcpy	;wreg free
  2678                           
  2679                           ;Lab8p1.c: 218: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2680  00EE58  0E0A               	movlw	10
  2681  00EE5A  6E29               	movwf	drawtext@y,c
  2682  00EE5C  C06D  F02A         	movff	_txt,drawtext@_text
  2683  00EE60  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2684  00EE64  0EFF               	movlw	255
  2685  00EE66  6E2D               	movwf	drawtext@color+1,c
  2686  00EE68  682C               	setf	drawtext@color,c
  2687  00EE6A  0E00               	movlw	0
  2688  00EE6C  6E2F               	movwf	drawtext@bg+1,c
  2689  00EE6E  0E00               	movlw	0
  2690  00EE70  6E2E               	movwf	drawtext@bg,c
  2691  00EE72  0E01               	movlw	1
  2692  00EE74  6E30               	movwf	drawtext@size,c
  2693  00EE76  0E78               	movlw	120
  2694  00EE78  EC96  F068         	call	_drawtext
  2695                           
  2696                           ;Lab8p1.c: 221: strcpy(txt, "EAST/WEST");
  2697  00EE7C  C06D  F001         	movff	_txt,strcpy@to
  2698  00EE80  C06E  F002         	movff	_txt+1,strcpy@to+1
  2699  00EE84  0ECC               	movlw	low STR_6
  2700  00EE86  6E03               	movwf	strcpy@from,c
  2701  00EE88  0EFF               	movlw	high STR_6
  2702  00EE8A  6E04               	movwf	strcpy@from+1,c
  2703  00EE8C  EC1B  F062         	call	_strcpy	;wreg free
  2704                           
  2705                           ;Lab8p1.c: 222: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2706  00EE90  0E14               	movlw	20
  2707  00EE92  6E29               	movwf	drawtext@y,c
  2708  00EE94  C06D  F02A         	movff	_txt,drawtext@_text
  2709  00EE98  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2710  00EE9C  0E07               	movlw	7
  2711  00EE9E  6E2D               	movwf	drawtext@color+1,c
  2712  00EEA0  682C               	setf	drawtext@color,c
  2713  00EEA2  0E00               	movlw	0
  2714  00EEA4  6E2F               	movwf	drawtext@bg+1,c
  2715  00EEA6  0E00               	movlw	0
  2716  00EEA8  6E2E               	movwf	drawtext@bg,c
  2717  00EEAA  0E01               	movlw	1
  2718  00EEAC  6E30               	movwf	drawtext@size,c
  2719  00EEAE  0E1E               	movlw	30
  2720  00EEB0  EC96  F068         	call	_drawtext
  2721                           
  2722                           ;Lab8p1.c: 223: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2723  00EEB4  0E00               	movlw	0
  2724  00EEB6  6E14               	movwf	drawRect@x+1,c
  2725  00EEB8  0E1E               	movlw	30
  2726  00EEBA  6E13               	movwf	drawRect@x,c
  2727  00EEBC  0E00               	movlw	0
  2728  00EEBE  6E16               	movwf	drawRect@y+1,c
  2729  00EEC0  0E1B               	movlw	27
  2730  00EEC2  6E15               	movwf	drawRect@y,c
  2731  00EEC4  0E00               	movlw	0
  2732  00EEC6  6E18               	movwf	drawRect@w+1,c
  2733  00EEC8  0E3C               	movlw	60
  2734  00EECA  6E17               	movwf	drawRect@w,c
  2735  00EECC  0E00               	movlw	0
  2736  00EECE  6E1A               	movwf	drawRect@h+1,c
  2737  00EED0  0E12               	movlw	18
  2738  00EED2  6E19               	movwf	drawRect@h,c
  2739  00EED4  0E07               	movlw	7
  2740  00EED6  6E1C               	movwf	drawRect@color+1,c
  2741  00EED8  681B               	setf	drawRect@color,c
  2742  00EEDA  EC39  F064         	call	_drawRect	;wreg free
  2743                           
  2744                           ;Lab8p1.c: 224: fillCircle(40, 20 + 15, 7, 0xF800);
  2745  00EEDE  0E00               	movlw	0
  2746  00EEE0  6E2C               	movwf	fillCircle@x0+1,c
  2747  00EEE2  0E28               	movlw	40
  2748  00EEE4  6E2B               	movwf	fillCircle@x0,c
  2749  00EEE6  0E00               	movlw	0
  2750  00EEE8  6E2E               	movwf	fillCircle@y0+1,c
  2751  00EEEA  0E23               	movlw	35
  2752  00EEEC  6E2D               	movwf	fillCircle@y0,c
  2753  00EEEE  0E00               	movlw	0
  2754  00EEF0  6E30               	movwf	fillCircle@r+1,c
  2755  00EEF2  0E07               	movlw	7
  2756  00EEF4  6E2F               	movwf	fillCircle@r,c
  2757  00EEF6  0EF8               	movlw	248
  2758  00EEF8  6E32               	movwf	fillCircle@color+1,c
  2759  00EEFA  0E00               	movlw	0
  2760  00EEFC  6E31               	movwf	fillCircle@color,c
  2761  00EEFE  EC86  F063         	call	_fillCircle	;wreg free
  2762                           
  2763                           ;Lab8p1.c: 225: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2764  00EF02  0E00               	movlw	0
  2765  00EF04  6E0D               	movwf	drawCircle@x0+1,c
  2766  00EF06  0E3C               	movlw	60
  2767  00EF08  6E0C               	movwf	drawCircle@x0,c
  2768  00EF0A  0E00               	movlw	0
  2769  00EF0C  6E0F               	movwf	drawCircle@y0+1,c
  2770  00EF0E  0E23               	movlw	35
  2771  00EF10  6E0E               	movwf	drawCircle@y0,c
  2772  00EF12  0E00               	movlw	0
  2773  00EF14  6E11               	movwf	drawCircle@r+1,c
  2774  00EF16  0E07               	movlw	7
  2775  00EF18  6E10               	movwf	drawCircle@r,c
  2776  00EF1A  0EFF               	movlw	255
  2777  00EF1C  6E13               	movwf	drawCircle@color+1,c
  2778  00EF1E  0EE0               	movlw	224
  2779  00EF20  6E12               	movwf	drawCircle@color,c
  2780  00EF22  EC03  F06F         	call	_drawCircle	;wreg free
  2781                           
  2782                           ;Lab8p1.c: 226: drawCircle(80, 20 + 15, 7, 0x07E0);
  2783  00EF26  0E00               	movlw	0
  2784  00EF28  6E0D               	movwf	drawCircle@x0+1,c
  2785  00EF2A  0E50               	movlw	80
  2786  00EF2C  6E0C               	movwf	drawCircle@x0,c
  2787  00EF2E  0E00               	movlw	0
  2788  00EF30  6E0F               	movwf	drawCircle@y0+1,c
  2789  00EF32  0E23               	movlw	35
  2790  00EF34  6E0E               	movwf	drawCircle@y0,c
  2791  00EF36  0E00               	movlw	0
  2792  00EF38  6E11               	movwf	drawCircle@r+1,c
  2793  00EF3A  0E07               	movlw	7
  2794  00EF3C  6E10               	movwf	drawCircle@r,c
  2795  00EF3E  0E07               	movlw	7
  2796  00EF40  6E13               	movwf	drawCircle@color+1,c
  2797  00EF42  0EE0               	movlw	224
  2798  00EF44  6E12               	movwf	drawCircle@color,c
  2799  00EF46  EC03  F06F         	call	_drawCircle	;wreg free
  2800                           
  2801                           ;Lab8p1.c: 227: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2802  00EF4A  0E1E               	movlw	30
  2803  00EF4C  6E29               	movwf	drawtext@y,c
  2804  00EF4E  0E8E               	movlw	low _EW_Count
  2805  00EF50  6E2A               	movwf	drawtext@_text,c
  2806  00EF52  0E00               	movlw	high _EW_Count
  2807  00EF54  6E2B               	movwf	drawtext@_text+1,c
  2808  00EF56  0E07               	movlw	7
  2809  00EF58  6E2D               	movwf	drawtext@color+1,c
  2810  00EF5A  682C               	setf	drawtext@color,c
  2811  00EF5C  0E00               	movlw	0
  2812  00EF5E  6E2F               	movwf	drawtext@bg+1,c
  2813  00EF60  0E00               	movlw	0
  2814  00EF62  6E2E               	movwf	drawtext@bg,c
  2815  00EF64  0E02               	movlw	2
  2816  00EF66  6E30               	movwf	drawtext@size,c
  2817  00EF68  0E64               	movlw	100
  2818  00EF6A  EC96  F068         	call	_drawtext
  2819                           
  2820                           ;Lab8p1.c: 230: strcpy(txt, "E/W LT");
  2821  00EF6E  C06D  F001         	movff	_txt,strcpy@to
  2822  00EF72  C06E  F002         	movff	_txt+1,strcpy@to+1
  2823  00EF76  0EDD               	movlw	low STR_7
  2824  00EF78  6E03               	movwf	strcpy@from,c
  2825  00EF7A  0EFF               	movlw	high STR_7
  2826  00EF7C  6E04               	movwf	strcpy@from+1,c
  2827  00EF7E  EC1B  F062         	call	_strcpy	;wreg free
  2828                           
  2829                           ;Lab8p1.c: 231: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2830  00EF82  0E32               	movlw	50
  2831  00EF84  6E29               	movwf	drawtext@y,c
  2832  00EF86  C06D  F02A         	movff	_txt,drawtext@_text
  2833  00EF8A  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2834  00EF8E  0EFF               	movlw	255
  2835  00EF90  6E2D               	movwf	drawtext@color+1,c
  2836  00EF92  682C               	setf	drawtext@color,c
  2837  00EF94  0E00               	movlw	0
  2838  00EF96  6E2F               	movwf	drawtext@bg+1,c
  2839  00EF98  0E00               	movlw	0
  2840  00EF9A  6E2E               	movwf	drawtext@bg,c
  2841  00EF9C  0E01               	movlw	1
  2842  00EF9E  6E30               	movwf	drawtext@size,c
  2843  00EFA0  0E1E               	movlw	30
  2844  00EFA2  EC96  F068         	call	_drawtext
  2845                           
  2846                           ;Lab8p1.c: 232: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2847  00EFA6  0E00               	movlw	0
  2848  00EFA8  6E14               	movwf	drawRect@x+1,c
  2849  00EFAA  0E1E               	movlw	30
  2850  00EFAC  6E13               	movwf	drawRect@x,c
  2851  00EFAE  0E00               	movlw	0
  2852  00EFB0  6E16               	movwf	drawRect@y+1,c
  2853  00EFB2  0E39               	movlw	57
  2854  00EFB4  6E15               	movwf	drawRect@y,c
  2855  00EFB6  0E00               	movlw	0
  2856  00EFB8  6E18               	movwf	drawRect@w+1,c
  2857  00EFBA  0E3C               	movlw	60
  2858  00EFBC  6E17               	movwf	drawRect@w,c
  2859  00EFBE  0E00               	movlw	0
  2860  00EFC0  6E1A               	movwf	drawRect@h+1,c
  2861  00EFC2  0E12               	movlw	18
  2862  00EFC4  6E19               	movwf	drawRect@h,c
  2863  00EFC6  0EFF               	movlw	255
  2864  00EFC8  6E1C               	movwf	drawRect@color+1,c
  2865  00EFCA  681B               	setf	drawRect@color,c
  2866  00EFCC  EC39  F064         	call	_drawRect	;wreg free
  2867                           
  2868                           ;Lab8p1.c: 233: fillCircle(40, 50 + 15, 7, 0xF800);
  2869  00EFD0  0E00               	movlw	0
  2870  00EFD2  6E2C               	movwf	fillCircle@x0+1,c
  2871  00EFD4  0E28               	movlw	40
  2872  00EFD6  6E2B               	movwf	fillCircle@x0,c
  2873  00EFD8  0E00               	movlw	0
  2874  00EFDA  6E2E               	movwf	fillCircle@y0+1,c
  2875  00EFDC  0E41               	movlw	65
  2876  00EFDE  6E2D               	movwf	fillCircle@y0,c
  2877  00EFE0  0E00               	movlw	0
  2878  00EFE2  6E30               	movwf	fillCircle@r+1,c
  2879  00EFE4  0E07               	movlw	7
  2880  00EFE6  6E2F               	movwf	fillCircle@r,c
  2881  00EFE8  0EF8               	movlw	248
  2882  00EFEA  6E32               	movwf	fillCircle@color+1,c
  2883  00EFEC  0E00               	movlw	0
  2884  00EFEE  6E31               	movwf	fillCircle@color,c
  2885  00EFF0  EC86  F063         	call	_fillCircle	;wreg free
  2886                           
  2887                           ;Lab8p1.c: 234: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2888  00EFF4  0E00               	movlw	0
  2889  00EFF6  6E0D               	movwf	drawCircle@x0+1,c
  2890  00EFF8  0E3C               	movlw	60
  2891  00EFFA  6E0C               	movwf	drawCircle@x0,c
  2892  00EFFC  0E00               	movlw	0
  2893  00EFFE  6E0F               	movwf	drawCircle@y0+1,c
  2894  00F000  0E41               	movlw	65
  2895  00F002  6E0E               	movwf	drawCircle@y0,c
  2896  00F004  0E00               	movlw	0
  2897  00F006  6E11               	movwf	drawCircle@r+1,c
  2898  00F008  0E07               	movlw	7
  2899  00F00A  6E10               	movwf	drawCircle@r,c
  2900  00F00C  0EFF               	movlw	255
  2901  00F00E  6E13               	movwf	drawCircle@color+1,c
  2902  00F010  0EE0               	movlw	224
  2903  00F012  6E12               	movwf	drawCircle@color,c
  2904  00F014  EC03  F06F         	call	_drawCircle	;wreg free
  2905                           
  2906                           ;Lab8p1.c: 235: drawCircle(80, 50 + 15, 7, 0x07E0);
  2907  00F018  0E00               	movlw	0
  2908  00F01A  6E0D               	movwf	drawCircle@x0+1,c
  2909  00F01C  0E50               	movlw	80
  2910  00F01E  6E0C               	movwf	drawCircle@x0,c
  2911  00F020  0E00               	movlw	0
  2912  00F022  6E0F               	movwf	drawCircle@y0+1,c
  2913  00F024  0E41               	movlw	65
  2914  00F026  6E0E               	movwf	drawCircle@y0,c
  2915  00F028  0E00               	movlw	0
  2916  00F02A  6E11               	movwf	drawCircle@r+1,c
  2917  00F02C  0E07               	movlw	7
  2918  00F02E  6E10               	movwf	drawCircle@r,c
  2919  00F030  0E07               	movlw	7
  2920  00F032  6E13               	movwf	drawCircle@color+1,c
  2921  00F034  0EE0               	movlw	224
  2922  00F036  6E12               	movwf	drawCircle@color,c
  2923  00F038  EC03  F06F         	call	_drawCircle	;wreg free
  2924                           
  2925                           ;Lab8p1.c: 236: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2926  00F03C  0E3C               	movlw	60
  2927  00F03E  6E29               	movwf	drawtext@y,c
  2928  00F040  0E8B               	movlw	low _EWLT_Count
  2929  00F042  6E2A               	movwf	drawtext@_text,c
  2930  00F044  0E00               	movlw	high _EWLT_Count
  2931  00F046  6E2B               	movwf	drawtext@_text+1,c
  2932  00F048  0EFF               	movlw	255
  2933  00F04A  6E2D               	movwf	drawtext@color+1,c
  2934  00F04C  682C               	setf	drawtext@color,c
  2935  00F04E  0E00               	movlw	0
  2936  00F050  6E2F               	movwf	drawtext@bg+1,c
  2937  00F052  0E00               	movlw	0
  2938  00F054  6E2E               	movwf	drawtext@bg,c
  2939  00F056  0E02               	movlw	2
  2940  00F058  6E30               	movwf	drawtext@size,c
  2941  00F05A  0E64               	movlw	100
  2942  00F05C  EC96  F068         	call	_drawtext
  2943                           
  2944                           ;Lab8p1.c: 239: strcpy(txt, "NORTH/SOUTH");
  2945  00F060  C06D  F001         	movff	_txt,strcpy@to
  2946  00F064  C06E  F002         	movff	_txt+1,strcpy@to+1
  2947  00F068  0EC0               	movlw	low STR_8
  2948  00F06A  6E03               	movwf	strcpy@from,c
  2949  00F06C  0EFF               	movlw	high STR_8
  2950  00F06E  6E04               	movwf	strcpy@from+1,c
  2951  00F070  EC1B  F062         	call	_strcpy	;wreg free
  2952                           
  2953                           ;Lab8p1.c: 240: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2954  00F074  0E50               	movlw	80
  2955  00F076  6E29               	movwf	drawtext@y,c
  2956  00F078  C06D  F02A         	movff	_txt,drawtext@_text
  2957  00F07C  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  2958  00F080  0E00               	movlw	0
  2959  00F082  6E2D               	movwf	drawtext@color+1,c
  2960  00F084  0E1F               	movlw	31
  2961  00F086  6E2C               	movwf	drawtext@color,c
  2962  00F088  0E00               	movlw	0
  2963  00F08A  6E2F               	movwf	drawtext@bg+1,c
  2964  00F08C  0E00               	movlw	0
  2965  00F08E  6E2E               	movwf	drawtext@bg,c
  2966  00F090  0E01               	movlw	1
  2967  00F092  6E30               	movwf	drawtext@size,c
  2968  00F094  0E1E               	movlw	30
  2969  00F096  EC96  F068         	call	_drawtext
  2970                           
  2971                           ;Lab8p1.c: 241: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2972  00F09A  0E00               	movlw	0
  2973  00F09C  6E14               	movwf	drawRect@x+1,c
  2974  00F09E  0E1E               	movlw	30
  2975  00F0A0  6E13               	movwf	drawRect@x,c
  2976  00F0A2  0E00               	movlw	0
  2977  00F0A4  6E16               	movwf	drawRect@y+1,c
  2978  00F0A6  0E57               	movlw	87
  2979  00F0A8  6E15               	movwf	drawRect@y,c
  2980  00F0AA  0E00               	movlw	0
  2981  00F0AC  6E18               	movwf	drawRect@w+1,c
  2982  00F0AE  0E3C               	movlw	60
  2983  00F0B0  6E17               	movwf	drawRect@w,c
  2984  00F0B2  0E00               	movlw	0
  2985  00F0B4  6E1A               	movwf	drawRect@h+1,c
  2986  00F0B6  0E12               	movlw	18
  2987  00F0B8  6E19               	movwf	drawRect@h,c
  2988  00F0BA  0E00               	movlw	0
  2989  00F0BC  6E1C               	movwf	drawRect@color+1,c
  2990  00F0BE  0E1F               	movlw	31
  2991  00F0C0  6E1B               	movwf	drawRect@color,c
  2992  00F0C2  EC39  F064         	call	_drawRect	;wreg free
  2993                           
  2994                           ;Lab8p1.c: 242: drawCircle(40, 80 + 15 , 7, 0xF800);
  2995  00F0C6  0E00               	movlw	0
  2996  00F0C8  6E0D               	movwf	drawCircle@x0+1,c
  2997  00F0CA  0E28               	movlw	40
  2998  00F0CC  6E0C               	movwf	drawCircle@x0,c
  2999  00F0CE  0E00               	movlw	0
  3000  00F0D0  6E0F               	movwf	drawCircle@y0+1,c
  3001  00F0D2  0E5F               	movlw	95
  3002  00F0D4  6E0E               	movwf	drawCircle@y0,c
  3003  00F0D6  0E00               	movlw	0
  3004  00F0D8  6E11               	movwf	drawCircle@r+1,c
  3005  00F0DA  0E07               	movlw	7
  3006  00F0DC  6E10               	movwf	drawCircle@r,c
  3007  00F0DE  0EF8               	movlw	248
  3008  00F0E0  6E13               	movwf	drawCircle@color+1,c
  3009  00F0E2  0E00               	movlw	0
  3010  00F0E4  6E12               	movwf	drawCircle@color,c
  3011  00F0E6  EC03  F06F         	call	_drawCircle	;wreg free
  3012                           
  3013                           ;Lab8p1.c: 243: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  3014  00F0EA  0E00               	movlw	0
  3015  00F0EC  6E0D               	movwf	drawCircle@x0+1,c
  3016  00F0EE  0E3C               	movlw	60
  3017  00F0F0  6E0C               	movwf	drawCircle@x0,c
  3018  00F0F2  0E00               	movlw	0
  3019  00F0F4  6E0F               	movwf	drawCircle@y0+1,c
  3020  00F0F6  0E5F               	movlw	95
  3021  00F0F8  6E0E               	movwf	drawCircle@y0,c
  3022  00F0FA  0E00               	movlw	0
  3023  00F0FC  6E11               	movwf	drawCircle@r+1,c
  3024  00F0FE  0E07               	movlw	7
  3025  00F100  6E10               	movwf	drawCircle@r,c
  3026  00F102  0EFF               	movlw	255
  3027  00F104  6E13               	movwf	drawCircle@color+1,c
  3028  00F106  0EE0               	movlw	224
  3029  00F108  6E12               	movwf	drawCircle@color,c
  3030  00F10A  EC03  F06F         	call	_drawCircle	;wreg free
  3031                           
  3032                           ;Lab8p1.c: 244: fillCircle(80, 80 + 15 , 7, 0x07E0);
  3033  00F10E  0E00               	movlw	0
  3034  00F110  6E2C               	movwf	fillCircle@x0+1,c
  3035  00F112  0E50               	movlw	80
  3036  00F114  6E2B               	movwf	fillCircle@x0,c
  3037  00F116  0E00               	movlw	0
  3038  00F118  6E2E               	movwf	fillCircle@y0+1,c
  3039  00F11A  0E5F               	movlw	95
  3040  00F11C  6E2D               	movwf	fillCircle@y0,c
  3041  00F11E  0E00               	movlw	0
  3042  00F120  6E30               	movwf	fillCircle@r+1,c
  3043  00F122  0E07               	movlw	7
  3044  00F124  6E2F               	movwf	fillCircle@r,c
  3045  00F126  0E07               	movlw	7
  3046  00F128  6E32               	movwf	fillCircle@color+1,c
  3047  00F12A  0EE0               	movlw	224
  3048  00F12C  6E31               	movwf	fillCircle@color,c
  3049  00F12E  EC86  F063         	call	_fillCircle	;wreg free
  3050                           
  3051                           ;Lab8p1.c: 245: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  3052  00F132  0E5A               	movlw	90
  3053  00F134  6E29               	movwf	drawtext@y,c
  3054  00F136  0E94               	movlw	low _NS_Count
  3055  00F138  6E2A               	movwf	drawtext@_text,c
  3056  00F13A  0E00               	movlw	high _NS_Count
  3057  00F13C  6E2B               	movwf	drawtext@_text+1,c
  3058  00F13E  0E00               	movlw	0
  3059  00F140  6E2D               	movwf	drawtext@color+1,c
  3060  00F142  0E1F               	movlw	31
  3061  00F144  6E2C               	movwf	drawtext@color,c
  3062  00F146  0E00               	movlw	0
  3063  00F148  6E2F               	movwf	drawtext@bg+1,c
  3064  00F14A  0E00               	movlw	0
  3065  00F14C  6E2E               	movwf	drawtext@bg,c
  3066  00F14E  0E02               	movlw	2
  3067  00F150  6E30               	movwf	drawtext@size,c
  3068  00F152  0E64               	movlw	100
  3069  00F154  EC96  F068         	call	_drawtext
  3070                           
  3071                           ;Lab8p1.c: 248: strcpy(txt, "N/S LT");
  3072  00F158  C06D  F001         	movff	_txt,strcpy@to
  3073  00F15C  C06E  F002         	movff	_txt+1,strcpy@to+1
  3074  00F160  0ED6               	movlw	low STR_9
  3075  00F162  6E03               	movwf	strcpy@from,c
  3076  00F164  0EFF               	movlw	high STR_9
  3077  00F166  6E04               	movwf	strcpy@from+1,c
  3078  00F168  EC1B  F062         	call	_strcpy	;wreg free
  3079                           
  3080                           ;Lab8p1.c: 249: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  3081  00F16C  0E6E               	movlw	110
  3082  00F16E  6E29               	movwf	drawtext@y,c
  3083  00F170  C06D  F02A         	movff	_txt,drawtext@_text
  3084  00F174  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3085  00F178  0EF8               	movlw	248
  3086  00F17A  6E2D               	movwf	drawtext@color+1,c
  3087  00F17C  0E1F               	movlw	31
  3088  00F17E  6E2C               	movwf	drawtext@color,c
  3089  00F180  0E00               	movlw	0
  3090  00F182  6E2F               	movwf	drawtext@bg+1,c
  3091  00F184  0E00               	movlw	0
  3092  00F186  6E2E               	movwf	drawtext@bg,c
  3093  00F188  0E01               	movlw	1
  3094  00F18A  6E30               	movwf	drawtext@size,c
  3095  00F18C  0E1E               	movlw	30
  3096  00F18E  EC96  F068         	call	_drawtext
  3097                           
  3098                           ;Lab8p1.c: 250: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  3099  00F192  0E00               	movlw	0
  3100  00F194  6E14               	movwf	drawRect@x+1,c
  3101  00F196  0E1E               	movlw	30
  3102  00F198  6E13               	movwf	drawRect@x,c
  3103  00F19A  0E00               	movlw	0
  3104  00F19C  6E16               	movwf	drawRect@y+1,c
  3105  00F19E  0E75               	movlw	117
  3106  00F1A0  6E15               	movwf	drawRect@y,c
  3107  00F1A2  0E00               	movlw	0
  3108  00F1A4  6E18               	movwf	drawRect@w+1,c
  3109  00F1A6  0E3C               	movlw	60
  3110  00F1A8  6E17               	movwf	drawRect@w,c
  3111  00F1AA  0E00               	movlw	0
  3112  00F1AC  6E1A               	movwf	drawRect@h+1,c
  3113  00F1AE  0E12               	movlw	18
  3114  00F1B0  6E19               	movwf	drawRect@h,c
  3115  00F1B2  0EF8               	movlw	248
  3116  00F1B4  6E1C               	movwf	drawRect@color+1,c
  3117  00F1B6  0E1F               	movlw	31
  3118  00F1B8  6E1B               	movwf	drawRect@color,c
  3119  00F1BA  EC39  F064         	call	_drawRect	;wreg free
  3120                           
  3121                           ;Lab8p1.c: 251: fillCircle(40, 110 + 15, 7, 0xF800);
  3122  00F1BE  0E00               	movlw	0
  3123  00F1C0  6E2C               	movwf	fillCircle@x0+1,c
  3124  00F1C2  0E28               	movlw	40
  3125  00F1C4  6E2B               	movwf	fillCircle@x0,c
  3126  00F1C6  0E00               	movlw	0
  3127  00F1C8  6E2E               	movwf	fillCircle@y0+1,c
  3128  00F1CA  0E7D               	movlw	125
  3129  00F1CC  6E2D               	movwf	fillCircle@y0,c
  3130  00F1CE  0E00               	movlw	0
  3131  00F1D0  6E30               	movwf	fillCircle@r+1,c
  3132  00F1D2  0E07               	movlw	7
  3133  00F1D4  6E2F               	movwf	fillCircle@r,c
  3134  00F1D6  0EF8               	movlw	248
  3135  00F1D8  6E32               	movwf	fillCircle@color+1,c
  3136  00F1DA  0E00               	movlw	0
  3137  00F1DC  6E31               	movwf	fillCircle@color,c
  3138  00F1DE  EC86  F063         	call	_fillCircle	;wreg free
  3139                           
  3140                           ;Lab8p1.c: 252: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3141  00F1E2  0E00               	movlw	0
  3142  00F1E4  6E0D               	movwf	drawCircle@x0+1,c
  3143  00F1E6  0E3C               	movlw	60
  3144  00F1E8  6E0C               	movwf	drawCircle@x0,c
  3145  00F1EA  0E00               	movlw	0
  3146  00F1EC  6E0F               	movwf	drawCircle@y0+1,c
  3147  00F1EE  0E7D               	movlw	125
  3148  00F1F0  6E0E               	movwf	drawCircle@y0,c
  3149  00F1F2  0E00               	movlw	0
  3150  00F1F4  6E11               	movwf	drawCircle@r+1,c
  3151  00F1F6  0E07               	movlw	7
  3152  00F1F8  6E10               	movwf	drawCircle@r,c
  3153  00F1FA  0EFF               	movlw	255
  3154  00F1FC  6E13               	movwf	drawCircle@color+1,c
  3155  00F1FE  0EE0               	movlw	224
  3156  00F200  6E12               	movwf	drawCircle@color,c
  3157  00F202  EC03  F06F         	call	_drawCircle	;wreg free
  3158                           
  3159                           ;Lab8p1.c: 253: drawCircle(80, 110 + 15, 7, 0x07E0);
  3160  00F206  0E00               	movlw	0
  3161  00F208  6E0D               	movwf	drawCircle@x0+1,c
  3162  00F20A  0E50               	movlw	80
  3163  00F20C  6E0C               	movwf	drawCircle@x0,c
  3164  00F20E  0E00               	movlw	0
  3165  00F210  6E0F               	movwf	drawCircle@y0+1,c
  3166  00F212  0E7D               	movlw	125
  3167  00F214  6E0E               	movwf	drawCircle@y0,c
  3168  00F216  0E00               	movlw	0
  3169  00F218  6E11               	movwf	drawCircle@r+1,c
  3170  00F21A  0E07               	movlw	7
  3171  00F21C  6E10               	movwf	drawCircle@r,c
  3172  00F21E  0E07               	movlw	7
  3173  00F220  6E13               	movwf	drawCircle@color+1,c
  3174  00F222  0EE0               	movlw	224
  3175  00F224  6E12               	movwf	drawCircle@color,c
  3176  00F226  EC03  F06F         	call	_drawCircle	;wreg free
  3177                           
  3178                           ;Lab8p1.c: 254: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3179  00F22A  0E78               	movlw	120
  3180  00F22C  6E29               	movwf	drawtext@y,c
  3181  00F22E  0E91               	movlw	low _NSLT_Count
  3182  00F230  6E2A               	movwf	drawtext@_text,c
  3183  00F232  0E00               	movlw	high _NSLT_Count
  3184  00F234  6E2B               	movwf	drawtext@_text+1,c
  3185  00F236  0EF8               	movlw	248
  3186  00F238  6E2D               	movwf	drawtext@color+1,c
  3187  00F23A  0E1F               	movlw	31
  3188  00F23C  6E2C               	movwf	drawtext@color,c
  3189  00F23E  0E00               	movlw	0
  3190  00F240  6E2F               	movwf	drawtext@bg+1,c
  3191  00F242  0E00               	movlw	0
  3192  00F244  6E2E               	movwf	drawtext@bg,c
  3193  00F246  0E02               	movlw	2
  3194  00F248  6E30               	movwf	drawtext@size,c
  3195  00F24A  0E64               	movlw	100
  3196  00F24C  EC96  F068         	call	_drawtext
  3197                           
  3198                           ;Lab8p1.c: 258: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  3199  00F250  0E1E               	movlw	30
  3200  00F252  6E29               	movwf	drawtext@y,c
  3201  00F254  0E97               	movlw	low _PED_EW_Count
  3202  00F256  6E2A               	movwf	drawtext@_text,c
  3203  00F258  0E00               	movlw	high _PED_EW_Count
  3204  00F25A  6E2B               	movwf	drawtext@_text+1,c
  3205  00F25C  0E07               	movlw	7
  3206  00F25E  6E2D               	movwf	drawtext@color+1,c
  3207  00F260  682C               	setf	drawtext@color,c
  3208  00F262  0E00               	movlw	0
  3209  00F264  6E2F               	movwf	drawtext@bg+1,c
  3210  00F266  0E00               	movlw	0
  3211  00F268  6E2E               	movwf	drawtext@bg,c
  3212  00F26A  0E02               	movlw	2
  3213  00F26C  6E30               	movwf	drawtext@size,c
  3214  00F26E  0E02               	movlw	2
  3215  00F270  EC96  F068         	call	_drawtext
  3216                           
  3217                           ;Lab8p1.c: 259: strcpy(txt, "PEW");
  3218  00F274  C06D  F001         	movff	_txt,strcpy@to
  3219  00F278  C06E  F002         	movff	_txt+1,strcpy@to+1
  3220  00F27C  0EF6               	movlw	low STR_10
  3221  00F27E  6E03               	movwf	strcpy@from,c
  3222  00F280  0EFF               	movlw	high STR_10
  3223  00F282  6E04               	movwf	strcpy@from+1,c
  3224  00F284  EC1B  F062         	call	_strcpy	;wreg free
  3225                           
  3226                           ;Lab8p1.c: 260: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  3227  00F288  0E14               	movlw	20
  3228  00F28A  6E29               	movwf	drawtext@y,c
  3229  00F28C  C06D  F02A         	movff	_txt,drawtext@_text
  3230  00F290  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3231  00F294  0E07               	movlw	7
  3232  00F296  6E2D               	movwf	drawtext@color+1,c
  3233  00F298  682C               	setf	drawtext@color,c
  3234  00F29A  0E00               	movlw	0
  3235  00F29C  6E2F               	movwf	drawtext@bg+1,c
  3236  00F29E  0E00               	movlw	0
  3237  00F2A0  6E2E               	movwf	drawtext@bg,c
  3238  00F2A2  0E01               	movlw	1
  3239  00F2A4  6E30               	movwf	drawtext@size,c
  3240  00F2A6  0E03               	movlw	3
  3241  00F2A8  EC96  F068         	call	_drawtext
  3242                           
  3243                           ;Lab8p1.c: 263: strcpy(txt, "PNS");
  3244  00F2AC  C06D  F001         	movff	_txt,strcpy@to
  3245  00F2B0  C06E  F002         	movff	_txt+1,strcpy@to+1
  3246  00F2B4  0EF2               	movlw	low STR_11
  3247  00F2B6  6E03               	movwf	strcpy@from,c
  3248  00F2B8  0EFF               	movlw	high STR_11
  3249  00F2BA  6E04               	movwf	strcpy@from+1,c
  3250  00F2BC  EC1B  F062         	call	_strcpy	;wreg free
  3251                           
  3252                           ;Lab8p1.c: 264: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3253  00F2C0  0E50               	movlw	80
  3254  00F2C2  6E29               	movwf	drawtext@y,c
  3255  00F2C4  C06D  F02A         	movff	_txt,drawtext@_text
  3256  00F2C8  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3257  00F2CC  0E00               	movlw	0
  3258  00F2CE  6E2D               	movwf	drawtext@color+1,c
  3259  00F2D0  0E1F               	movlw	31
  3260  00F2D2  6E2C               	movwf	drawtext@color,c
  3261  00F2D4  0E00               	movlw	0
  3262  00F2D6  6E2F               	movwf	drawtext@bg+1,c
  3263  00F2D8  0E00               	movlw	0
  3264  00F2DA  6E2E               	movwf	drawtext@bg,c
  3265  00F2DC  0E01               	movlw	1
  3266  00F2DE  6E30               	movwf	drawtext@size,c
  3267  00F2E0  0E03               	movlw	3
  3268  00F2E2  EC96  F068         	call	_drawtext
  3269                           
  3270                           ;Lab8p1.c: 265: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3271  00F2E6  0E5A               	movlw	90
  3272  00F2E8  6E29               	movwf	drawtext@y,c
  3273  00F2EA  0E9A               	movlw	low _PED_NS_Count
  3274  00F2EC  6E2A               	movwf	drawtext@_text,c
  3275  00F2EE  0E00               	movlw	high _PED_NS_Count
  3276  00F2F0  6E2B               	movwf	drawtext@_text+1,c
  3277  00F2F2  0E00               	movlw	0
  3278  00F2F4  6E2D               	movwf	drawtext@color+1,c
  3279  00F2F6  0E1F               	movlw	31
  3280  00F2F8  6E2C               	movwf	drawtext@color,c
  3281  00F2FA  0E00               	movlw	0
  3282  00F2FC  6E2F               	movwf	drawtext@bg+1,c
  3283  00F2FE  0E00               	movlw	0
  3284  00F300  6E2E               	movwf	drawtext@bg,c
  3285  00F302  0E02               	movlw	2
  3286  00F304  6E30               	movwf	drawtext@size,c
  3287  00F306  0E02               	movlw	2
  3288  00F308  EC96  F068         	call	_drawtext
  3289                           
  3290                           ;Lab8p1.c: 268: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3291  00F30C  C06D  F001         	movff	_txt,strcpy@to
  3292  00F310  C06E  F002         	movff	_txt+1,strcpy@to+1
  3293  00F314  0E84               	movlw	low STR_12
  3294  00F316  6E03               	movwf	strcpy@from,c
  3295  00F318  0EFF               	movlw	high STR_12
  3296  00F31A  6E04               	movwf	strcpy@from+1,c
  3297  00F31C  EC1B  F062         	call	_strcpy	;wreg free
  3298                           
  3299                           ;Lab8p1.c: 269: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3300  00F320  0E8C               	movlw	140
  3301  00F322  6E29               	movwf	drawtext@y,c
  3302  00F324  C06D  F02A         	movff	_txt,drawtext@_text
  3303  00F328  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  3304  00F32C  0EFF               	movlw	255
  3305  00F32E  6E2D               	movwf	drawtext@color+1,c
  3306  00F330  682C               	setf	drawtext@color,c
  3307  00F332  0E00               	movlw	0
  3308  00F334  6E2F               	movwf	drawtext@bg+1,c
  3309  00F336  0E00               	movlw	0
  3310  00F338  6E2E               	movwf	drawtext@bg,c
  3311  00F33A  0E01               	movlw	1
  3312  00F33C  6E30               	movwf	drawtext@size,c
  3313  00F33E  0E01               	movlw	1
  3314  00F340  EC96  F068         	call	_drawtext
  3315                           
  3316                           ;Lab8p1.c: 270: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3317  00F344  0E95               	movlw	149
  3318  00F346  6E29               	movwf	drawtext@y,c
  3319  00F348  0E7E               	movlw	low _SW_EWPED_Txt
  3320  00F34A  6E2A               	movwf	drawtext@_text,c
  3321  00F34C  0E00               	movlw	high _SW_EWPED_Txt
  3322  00F34E  6E2B               	movwf	drawtext@_text+1,c
  3323  00F350  0EFF               	movlw	255
  3324  00F352  6E2D               	movwf	drawtext@color+1,c
  3325  00F354  682C               	setf	drawtext@color,c
  3326  00F356  0E00               	movlw	0
  3327  00F358  6E2F               	movwf	drawtext@bg+1,c
  3328  00F35A  0E00               	movlw	0
  3329  00F35C  6E2E               	movwf	drawtext@bg,c
  3330  00F35E  0E01               	movlw	1
  3331  00F360  6E30               	movwf	drawtext@size,c
  3332  00F362  0E06               	movlw	6
  3333  00F364  EC96  F068         	call	_drawtext
  3334                           
  3335                           ;Lab8p1.c: 271: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3336  00F368  0E95               	movlw	149
  3337  00F36A  6E29               	movwf	drawtext@y,c
  3338  00F36C  0E7C               	movlw	low _SW_EWLT_Txt
  3339  00F36E  6E2A               	movwf	drawtext@_text,c
  3340  00F370  0E00               	movlw	high _SW_EWLT_Txt
  3341  00F372  6E2B               	movwf	drawtext@_text+1,c
  3342  00F374  0EFF               	movlw	255
  3343  00F376  6E2D               	movwf	drawtext@color+1,c
  3344  00F378  682C               	setf	drawtext@color,c
  3345  00F37A  0E00               	movlw	0
  3346  00F37C  6E2F               	movwf	drawtext@bg+1,c
  3347  00F37E  0E00               	movlw	0
  3348  00F380  6E2E               	movwf	drawtext@bg,c
  3349  00F382  0E01               	movlw	1
  3350  00F384  6E30               	movwf	drawtext@size,c
  3351  00F386  0E20               	movlw	32
  3352  00F388  EC96  F068         	call	_drawtext
  3353                           
  3354                           ;Lab8p1.c: 272: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3355  00F38C  0E95               	movlw	149
  3356  00F38E  6E29               	movwf	drawtext@y,c
  3357  00F390  0EA7               	movlw	low _SW_NSPED_Txt
  3358  00F392  6E2A               	movwf	drawtext@_text,c
  3359  00F394  0E00               	movlw	high _SW_NSPED_Txt
  3360  00F396  6E2B               	movwf	drawtext@_text+1,c
  3361  00F398  0EFF               	movlw	255
  3362  00F39A  6E2D               	movwf	drawtext@color+1,c
  3363  00F39C  682C               	setf	drawtext@color,c
  3364  00F39E  0E00               	movlw	0
  3365  00F3A0  6E2F               	movwf	drawtext@bg+1,c
  3366  00F3A2  0E00               	movlw	0
  3367  00F3A4  6E2E               	movwf	drawtext@bg,c
  3368  00F3A6  0E01               	movlw	1
  3369  00F3A8  6E30               	movwf	drawtext@size,c
  3370  00F3AA  0E3A               	movlw	58
  3371  00F3AC  EC96  F068         	call	_drawtext
  3372                           
  3373                           ;Lab8p1.c: 273: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3374  00F3B0  0E95               	movlw	149
  3375  00F3B2  6E29               	movwf	drawtext@y,c
  3376  00F3B4  0EA5               	movlw	low _SW_NSLT_Txt
  3377  00F3B6  6E2A               	movwf	drawtext@_text,c
  3378  00F3B8  0E00               	movlw	high _SW_NSLT_Txt
  3379  00F3BA  6E2B               	movwf	drawtext@_text+1,c
  3380  00F3BC  0EFF               	movlw	255
  3381  00F3BE  6E2D               	movwf	drawtext@color+1,c
  3382  00F3C0  682C               	setf	drawtext@color,c
  3383  00F3C2  0E00               	movlw	0
  3384  00F3C4  6E2F               	movwf	drawtext@bg+1,c
  3385  00F3C6  0E00               	movlw	0
  3386  00F3C8  6E2E               	movwf	drawtext@bg,c
  3387  00F3CA  0E01               	movlw	1
  3388  00F3CC  6E30               	movwf	drawtext@size,c
  3389  00F3CE  0E57               	movlw	87
  3390  00F3D0  EC96  F068         	call	_drawtext
  3391                           
  3392                           ;Lab8p1.c: 275: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3393  00F3D4  0E95               	movlw	149
  3394  00F3D6  6E29               	movwf	drawtext@y,c
  3395  00F3D8  0EA3               	movlw	low _SW_MODE_Txt
  3396  00F3DA  6E2A               	movwf	drawtext@_text,c
  3397  00F3DC  0E00               	movlw	high _SW_MODE_Txt
  3398  00F3DE  6E2B               	movwf	drawtext@_text+1,c
  3399  00F3E0  0EFF               	movlw	255
  3400  00F3E2  6E2D               	movwf	drawtext@color+1,c
  3401  00F3E4  682C               	setf	drawtext@color,c
  3402  00F3E6  0E00               	movlw	0
  3403  00F3E8  6E2F               	movwf	drawtext@bg+1,c
  3404  00F3EA  0E00               	movlw	0
  3405  00F3EC  6E2E               	movwf	drawtext@bg,c
  3406  00F3EE  0E01               	movlw	1
  3407  00F3F0  6E30               	movwf	drawtext@size,c
  3408  00F3F2  0E70               	movlw	112
  3409  00F3F4  EC96  F068         	call	_drawtext
  3410  00F3F8  0012               	return		;funcret
  3411  00F3FA                     __end_of_Initialize_Screen:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodl	equ	0xFF3
  3418                           intcon2	equ	0xFF1
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _fillScreen *****************
  3426 ;; Defined at:
  3427 ;;		line 652 in file "ST7735_TFT.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  color           2   19[COMRAM] unsigned int 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;		None               void
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        2 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		_fillRectangle
  3450 ;; This function is called by:
  3451 ;;		_Initialize_Screen
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text6
  3456  00C2A4                     __ptext6:
  3457                           	opt stack 0
  3458  00C2A4                     _fillScreen:
  3459                           	opt stack 25
  3460                           
  3461                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3462                           
  3463                           ;incstack = 0
  3464  00C2A4  0E00               	movlw	0
  3465  00C2A6  6E08               	movwf	fillRectangle@y,c
  3466  00C2A8  0E80               	movlw	128
  3467  00C2AA  6E09               	movwf	fillRectangle@w,c
  3468  00C2AC  0EA0               	movlw	160
  3469  00C2AE  6E0A               	movwf	fillRectangle@h,c
  3470  00C2B0  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3471  00C2B4  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3472  00C2B8  0E00               	movlw	0
  3473  00C2BA  EC28  F068         	call	_fillRectangle
  3474  00C2BE  0012               	return		;funcret
  3475  00C2C0                     __end_of_fillScreen:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodl	equ	0xFF3
  3482                           intcon2	equ	0xFF1
  3483                           postinc0	equ	0xFEE
  3484                           wreg	equ	0xFE8
  3485                           postdec1	equ	0xFE5
  3486                           fsr1l	equ	0xFE1
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _fillRectangle *****************
  3490 ;; Defined at:
  3491 ;;		line 536 in file "ST7735_TFT.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  x               1    wreg     unsigned char 
  3494 ;;  y               1    7[COMRAM] unsigned char 
  3495 ;;  w               1    8[COMRAM] unsigned char 
  3496 ;;  h               1    9[COMRAM] unsigned char 
  3497 ;;  color           2   10[COMRAM] unsigned int 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  x               1   18[COMRAM] unsigned char 
  3500 ;;  lo              1   17[COMRAM] unsigned char 
  3501 ;;  hi              1   16[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:       12 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		_setAddrWindow
  3520 ;;		_spiwrite
  3521 ;; This function is called by:
  3522 ;;		_fillScreen
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text7
  3527  00D050                     __ptext7:
  3528                           	opt stack 0
  3529  00D050                     _fillRectangle:
  3530                           	opt stack 25
  3531                           
  3532                           ;incstack = 0
  3533                           ;fillRectangle@x stored from wreg
  3534  00D050  6E13               	movwf	fillRectangle@x,c
  3535                           
  3536                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3537                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3538  00D052  0E80               	movlw	128
  3539  00D054  6013               	cpfslt	fillRectangle@x,c
  3540  00D056  D069               	goto	l246
  3541  00D058  0E9F               	movlw	159
  3542  00D05A  6408               	cpfsgt	fillRectangle@y,c
  3543  00D05C  D001               	goto	l4736
  3544                           
  3545                           ;ST7735_TFT.c: 540: return;
  3546  00D05E  D065               	goto	l246
  3547  00D060                     l4736:
  3548                           
  3549                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3550  00D060  0EFF               	movlw	255
  3551  00D062  6E0D               	movwf	??_fillRectangle& (0+255),c
  3552  00D064  0EFF               	movlw	255
  3553  00D066  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3554  00D068  5009               	movf	fillRectangle@w,w,c
  3555  00D06A  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3556  00D06E  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3557  00D070  260F               	addwf	??_fillRectangle+2,f,c
  3558  00D072  0E00               	movlw	0
  3559  00D074  2210               	addwfc	??_fillRectangle+3,f,c
  3560  00D076  500D               	movf	??_fillRectangle,w,c
  3561  00D078  260F               	addwf	??_fillRectangle+2,f,c
  3562  00D07A  500E               	movf	??_fillRectangle+1,w,c
  3563  00D07C  2210               	addwfc	??_fillRectangle+3,f,c
  3564  00D07E  BE10               	btfsc	??_fillRectangle+3,7,c
  3565  00D080  D00A               	goto	l247
  3566  00D082  5010               	movf	??_fillRectangle+3,w,c
  3567  00D084  E104               	bnz	u4450
  3568  00D086  0E80               	movlw	128
  3569  00D088  5C0F               	subwf	??_fillRectangle+2,w,c
  3570  00D08A  A0D8               	btfss	status,0,c
  3571  00D08C  D004               	goto	l247
  3572  00D08E                     u4450:
  3573                           
  3574                           ;ST7735_TFT.c: 542: w = 128 - x;
  3575  00D08E  5013               	movf	fillRectangle@x,w,c
  3576  00D090  0800               	sublw	0
  3577  00D092  0F80               	addlw	128
  3578  00D094  6E09               	movwf	fillRectangle@w,c
  3579  00D096                     l247:
  3580                           
  3581                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3582  00D096  0EFF               	movlw	255
  3583  00D098  6E0D               	movwf	??_fillRectangle& (0+255),c
  3584  00D09A  0EFF               	movlw	255
  3585  00D09C  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3586  00D09E  500A               	movf	fillRectangle@h,w,c
  3587  00D0A0  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3588  00D0A4  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3589  00D0A6  260F               	addwf	??_fillRectangle+2,f,c
  3590  00D0A8  0E00               	movlw	0
  3591  00D0AA  2210               	addwfc	??_fillRectangle+3,f,c
  3592  00D0AC  500D               	movf	??_fillRectangle,w,c
  3593  00D0AE  260F               	addwf	??_fillRectangle+2,f,c
  3594  00D0B0  500E               	movf	??_fillRectangle+1,w,c
  3595  00D0B2  2210               	addwfc	??_fillRectangle+3,f,c
  3596  00D0B4  BE10               	btfsc	??_fillRectangle+3,7,c
  3597  00D0B6  D00B               	goto	l4742
  3598  00D0B8  5010               	movf	??_fillRectangle+3,w,c
  3599  00D0BA  E104               	bnz	u4460
  3600  00D0BC  0EA0               	movlw	160
  3601  00D0BE  5C0F               	subwf	??_fillRectangle+2,w,c
  3602  00D0C0  A0D8               	btfss	status,0,c
  3603  00D0C2  D005               	goto	l4742
  3604  00D0C4                     u4460:
  3605                           
  3606                           ;ST7735_TFT.c: 544: h = 160 - y;
  3607  00D0C4  5008               	movf	fillRectangle@y,w,c
  3608  00D0C6  0800               	sublw	0
  3609  00D0C8  0FA0               	addlw	160
  3610  00D0CA  6E0A               	movwf	fillRectangle@h,c
  3611  00D0CC  D000               	goto	l4742
  3612  00D0CE                     l4742:
  3613                           
  3614                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3615  00D0CE  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3616  00D0D2  5013               	movf	fillRectangle@x,w,c
  3617  00D0D4  2409               	addwf	fillRectangle@w,w,c
  3618  00D0D6  6E0D               	movwf	??_fillRectangle& (0+255),c
  3619  00D0D8  040D               	decf	??_fillRectangle,w,c
  3620  00D0DA  6E05               	movwf	setAddrWindow@x1,c
  3621  00D0DC  5008               	movf	fillRectangle@y,w,c
  3622  00D0DE  240A               	addwf	fillRectangle@h,w,c
  3623  00D0E0  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3624  00D0E2  040E               	decf	??_fillRectangle+1,w,c
  3625  00D0E4  6E06               	movwf	setAddrWindow@y1,c
  3626  00D0E6  5013               	movf	fillRectangle@x,w,c
  3627  00D0E8  EC5F  F063         	call	_setAddrWindow
  3628                           
  3629                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3630  00D0EC  500C               	movf	fillRectangle@color+1,w,c
  3631  00D0EE  6E11               	movwf	fillRectangle@hi,c
  3632  00D0F0  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3633                           
  3634                           ;ST7735_TFT.c: 547: PORTCbits.RC2 = 1;
  3635  00D0F4  8482               	bsf	3970,2,c	;volatile
  3636                           
  3637                           ;ST7735_TFT.c: 548: PORTCbits.RC4 = 0;
  3638  00D0F6  9882               	bcf	3970,4,c	;volatile
  3639                           
  3640                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3641  00D0F8  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3642  00D0FC                     l4754:
  3643  00D0FC  5008               	movf	fillRectangle@y,w,c
  3644  00D0FE  B4D8               	btfsc	status,2,c
  3645  00D100  D013               	goto	l250
  3646  00D102  D001               	goto	l249
  3647  00D104  D011               	goto	l250
  3648  00D106                     l249:
  3649                           
  3650                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3651  00D106  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3652  00D10A                     l4758:
  3653  00D10A  5013               	movf	fillRectangle@x,w,c
  3654  00D10C  B4D8               	btfsc	status,2,c
  3655  00D10E  D00A               	goto	l4768
  3656  00D110  D001               	goto	l4762
  3657  00D112  D008               	goto	l4768
  3658  00D114                     l4762:
  3659                           
  3660                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3661  00D114  5011               	movf	fillRectangle@hi,w,c
  3662  00D116  EC1B  F061         	call	_spiwrite
  3663                           
  3664                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3665  00D11A  5012               	movf	fillRectangle@lo,w,c
  3666  00D11C  EC1B  F061         	call	_spiwrite
  3667  00D120  0613               	decf	fillRectangle@x,f,c
  3668  00D122  D7F3               	goto	l4758
  3669  00D124                     l4768:
  3670  00D124  0608               	decf	fillRectangle@y,f,c
  3671  00D126  D7EA               	goto	l4754
  3672  00D128                     l250:
  3673                           
  3674                           ;ST7735_TFT.c: 554: }
  3675                           ;ST7735_TFT.c: 555: }
  3676                           ;ST7735_TFT.c: 556: PORTCbits.RC4 = 1;
  3677  00D128  8882               	bsf	3970,4,c	;volatile
  3678  00D12A                     l246:
  3679  00D12A  0012               	return		;funcret
  3680  00D12C                     __end_of_fillRectangle:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodl	equ	0xFF3
  3687                           intcon2	equ	0xFF1
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1l	equ	0xFE1
  3692                           status	equ	0xFD8
  3693                           
  3694 ;; *************** function _drawRect *****************
  3695 ;; Defined at:
  3696 ;;		line 718 in file "ST7735_TFT.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  x               2   18[COMRAM] unsigned int 
  3699 ;;  y               2   20[COMRAM] unsigned int 
  3700 ;;  w               2   22[COMRAM] unsigned int 
  3701 ;;  h               2   24[COMRAM] unsigned int 
  3702 ;;  color           2   26[COMRAM] unsigned int 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3714 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;Total ram usage:       11 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    4
  3721 ;; This function calls:
  3722 ;;		_drawFastHLine
  3723 ;;		_drawFastVLine
  3724 ;; This function is called by:
  3725 ;;		_Initialize_Screen
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text8
  3730  00C872                     __ptext8:
  3731                           	opt stack 0
  3732  00C872                     _drawRect:
  3733                           	opt stack 25
  3734                           
  3735                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3736                           
  3737                           ;incstack = 0
  3738  00C872  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3739  00C876  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3740  00C87A  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3741  00C87E  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3742  00C882  5013               	movf	drawRect@x,w,c
  3743  00C884  ECA2  F065         	call	_drawFastHLine
  3744                           
  3745                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3746  00C888  5015               	movf	drawRect@y,w,c
  3747  00C88A  2419               	addwf	drawRect@h,w,c
  3748  00C88C  6E1D               	movwf	??_drawRect& (0+255),c
  3749  00C88E  041D               	decf	??_drawRect,w,c
  3750  00C890  6E08               	movwf	drawFastHLine@y,c
  3751  00C892  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3752  00C896  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3753  00C89A  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3754  00C89E  5013               	movf	drawRect@x,w,c
  3755  00C8A0  ECA2  F065         	call	_drawFastHLine
  3756                           
  3757                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3758  00C8A4  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3759  00C8A8  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3760  00C8AC  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3761  00C8B0  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3762  00C8B4  5013               	movf	drawRect@x,w,c
  3763  00C8B6  EC5E  F065         	call	_drawFastVLine
  3764                           
  3765                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3766  00C8BA  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3767  00C8BE  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3768  00C8C2  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3769  00C8C6  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3770  00C8CA  5013               	movf	drawRect@x,w,c
  3771  00C8CC  2417               	addwf	drawRect@w,w,c
  3772  00C8CE  6E1D               	movwf	??_drawRect& (0+255),c
  3773  00C8D0  041D               	decf	??_drawRect,w,c
  3774  00C8D2  EC5E  F065         	call	_drawFastVLine
  3775  00C8D6  0012               	return		;funcret
  3776  00C8D8                     __end_of_drawRect:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodl	equ	0xFF3
  3783                           intcon2	equ	0xFF1
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           status	equ	0xFD8
  3789                           
  3790 ;; *************** function _drawFastHLine *****************
  3791 ;; Defined at:
  3792 ;;		line 657 in file "ST7735_TFT.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  x               1    wreg     unsigned char 
  3795 ;;  y               1    7[COMRAM] unsigned char 
  3796 ;;  w               1    8[COMRAM] unsigned char 
  3797 ;;  color           2    9[COMRAM] unsigned int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  x               1   17[COMRAM] unsigned char 
  3800 ;;  lo              1   16[COMRAM] unsigned char 
  3801 ;;  hi              1   15[COMRAM] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;		None               void
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:       11 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    3
  3818 ;; This function calls:
  3819 ;;		_setAddrWindow
  3820 ;;		_spiwrite
  3821 ;; This function is called by:
  3822 ;;		_drawRect
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text9
  3827  00CB44                     __ptext9:
  3828                           	opt stack 0
  3829  00CB44                     _drawFastHLine:
  3830                           	opt stack 25
  3831                           
  3832                           ;incstack = 0
  3833                           ;drawFastHLine@x stored from wreg
  3834  00CB44  6E12               	movwf	drawFastHLine@x,c
  3835                           
  3836                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3837                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3838  00CB46  0E80               	movlw	128
  3839  00CB48  6012               	cpfslt	drawFastHLine@x,c
  3840  00CB4A  D03F               	goto	l291
  3841  00CB4C  0E9F               	movlw	159
  3842  00CB4E  6408               	cpfsgt	drawFastHLine@y,c
  3843  00CB50  D001               	goto	l4776
  3844                           
  3845                           ;ST7735_TFT.c: 661: return;
  3846  00CB52  D03B               	goto	l291
  3847  00CB54                     l4776:
  3848                           
  3849                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3850  00CB54  0EFF               	movlw	255
  3851  00CB56  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3852  00CB58  0EFF               	movlw	255
  3853  00CB5A  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3854  00CB5C  5009               	movf	drawFastHLine@w,w,c
  3855  00CB5E  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3856  00CB62  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3857  00CB64  260E               	addwf	??_drawFastHLine+2,f,c
  3858  00CB66  0E00               	movlw	0
  3859  00CB68  220F               	addwfc	??_drawFastHLine+3,f,c
  3860  00CB6A  500C               	movf	??_drawFastHLine,w,c
  3861  00CB6C  260E               	addwf	??_drawFastHLine+2,f,c
  3862  00CB6E  500D               	movf	??_drawFastHLine+1,w,c
  3863  00CB70  220F               	addwfc	??_drawFastHLine+3,f,c
  3864  00CB72  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3865  00CB74  D00B               	goto	l4780
  3866  00CB76  500F               	movf	??_drawFastHLine+3,w,c
  3867  00CB78  E104               	bnz	u4530
  3868  00CB7A  0E80               	movlw	128
  3869  00CB7C  5C0E               	subwf	??_drawFastHLine+2,w,c
  3870  00CB7E  A0D8               	btfss	status,0,c
  3871  00CB80  D005               	goto	l4780
  3872  00CB82                     u4530:
  3873                           
  3874                           ;ST7735_TFT.c: 663: w = 128 - x;
  3875  00CB82  5012               	movf	drawFastHLine@x,w,c
  3876  00CB84  0800               	sublw	0
  3877  00CB86  0F80               	addlw	128
  3878  00CB88  6E09               	movwf	drawFastHLine@w,c
  3879  00CB8A  D000               	goto	l4780
  3880  00CB8C                     l4780:
  3881                           
  3882                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3883  00CB8C  500B               	movf	drawFastHLine@color+1,w,c
  3884  00CB8E  6E10               	movwf	drawFastHLine@hi,c
  3885  00CB90  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3886                           
  3887                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3888  00CB94  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3889  00CB98  5012               	movf	drawFastHLine@x,w,c
  3890  00CB9A  2409               	addwf	drawFastHLine@w,w,c
  3891  00CB9C  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3892  00CB9E  040C               	decf	??_drawFastHLine,w,c
  3893  00CBA0  6E05               	movwf	setAddrWindow@x1,c
  3894  00CBA2  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3895  00CBA6  5012               	movf	drawFastHLine@x,w,c
  3896  00CBA8  EC5F  F063         	call	_setAddrWindow
  3897                           
  3898                           ;ST7735_TFT.c: 666: PORTCbits.RC2 = 1;
  3899  00CBAC  8482               	bsf	3970,2,c	;volatile
  3900                           
  3901                           ;ST7735_TFT.c: 667: PORTCbits.RC4 = 0;
  3902  00CBAE  9882               	bcf	3970,4,c	;volatile
  3903                           
  3904                           ;ST7735_TFT.c: 669: while (w--) {
  3905  00CBB0  D007               	goto	l4792
  3906  00CBB2                     l4790:
  3907                           
  3908                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3909  00CBB2  5010               	movf	drawFastHLine@hi,w,c
  3910  00CBB4  EC1B  F061         	call	_spiwrite
  3911                           
  3912                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3913  00CBB8  5011               	movf	drawFastHLine@lo,w,c
  3914  00CBBA  EC1B  F061         	call	_spiwrite
  3915  00CBBE  D000               	goto	l4792
  3916  00CBC0                     l4792:
  3917  00CBC0  0609               	decf	drawFastHLine@w,f,c
  3918  00CBC2  2809               	incf	drawFastHLine@w,w,c
  3919  00CBC4  A4D8               	btfss	status,2,c
  3920  00CBC6  D7F5               	goto	l4790
  3921                           
  3922                           ;ST7735_TFT.c: 672: }
  3923                           ;ST7735_TFT.c: 673: PORTCbits.RC4 = 1;
  3924  00CBC8  8882               	bsf	3970,4,c	;volatile
  3925  00CBCA                     l291:
  3926  00CBCA  0012               	return		;funcret
  3927  00CBCC                     __end_of_drawFastHLine:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           tblptrh	equ	0xFF7
  3931                           tblptrl	equ	0xFF6
  3932                           tablat	equ	0xFF5
  3933                           prodl	equ	0xFF3
  3934                           intcon2	equ	0xFF1
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           postdec1	equ	0xFE5
  3938                           fsr1l	equ	0xFE1
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _TFT_GreenTab_Initialize *****************
  3942 ;; Defined at:
  3943 ;;		line 677 in file "ST7735_TFT.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;		None               void
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    3
  3964 ;; This function calls:
  3965 ;;		_Rcmd1
  3966 ;;		_Rcmd2red
  3967 ;;		_Rcmd3
  3968 ;;		_write_command
  3969 ;;		_write_data
  3970 ;; This function is called by:
  3971 ;;		_Initialize_Screen
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text10
  3976  00C37E                     __ptext10:
  3977                           	opt stack 0
  3978  00C37E                     _TFT_GreenTab_Initialize:
  3979                           	opt stack 26
  3980                           
  3981                           ;ST7735_TFT.c: 679: PORTCbits.RC4 = 1;
  3982                           
  3983                           ;incstack = 0
  3984  00C37E  8882               	bsf	3970,4,c	;volatile
  3985                           
  3986                           ;ST7735_TFT.c: 680: PORTCbits.RC2 = 0;
  3987  00C380  9482               	bcf	3970,2,c	;volatile
  3988                           
  3989                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3990  00C382  0E80               	movlw	128
  3991  00C384  6EC7               	movwf	4039,c	;volatile
  3992                           
  3993                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3994  00C386  0E30               	movlw	48
  3995  00C388  6EC6               	movwf	4038,c	;volatile
  3996                           
  3997                           ;ST7735_TFT.c: 686: Rcmd1();
  3998  00C38A  EC5F  F06C         	call	_Rcmd1	;wreg free
  3999                           
  4000                           ;ST7735_TFT.c: 687: Rcmd2red();
  4001  00C38E  EC71  F062         	call	_Rcmd2red	;wreg free
  4002                           
  4003                           ;ST7735_TFT.c: 688: Rcmd3();
  4004  00C392  EC5D  F06A         	call	_Rcmd3	;wreg free
  4005                           
  4006                           ;ST7735_TFT.c: 689: write_command(0x36);
  4007  00C396  0E36               	movlw	54
  4008  00C398  ECF9  F060         	call	_write_command
  4009                           
  4010                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4011  00C39C  0EC0               	movlw	192
  4012  00C39E  EC01  F061         	call	_write_data
  4013                           
  4014                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4015  00C3A2  0E01               	movlw	1
  4016  00C3A4  6E76               	movwf	__tft_type,c
  4017  00C3A6  0012               	return		;funcret
  4018  00C3A8                     __end_of_TFT_GreenTab_Initialize:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           prodl	equ	0xFF3
  4025                           intcon2	equ	0xFF1
  4026                           postinc0	equ	0xFEE
  4027                           wreg	equ	0xFE8
  4028                           postdec1	equ	0xFE5
  4029                           fsr1l	equ	0xFE1
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _Rcmd3 *****************
  4033 ;; Defined at:
  4034 ;;		line 371 in file "ST7735_TFT.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;		None               void
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    2
  4055 ;; This function calls:
  4056 ;;		_delay_ms
  4057 ;;		_write_command
  4058 ;;		_write_data
  4059 ;; This function is called by:
  4060 ;;		_TFT_GreenTab_Initialize
  4061 ;;		_TFT_BlackTab_Initialize
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text11
  4066  00D4BA                     __ptext11:
  4067                           	opt stack 0
  4068  00D4BA                     _Rcmd3:
  4069                           	opt stack 26
  4070                           
  4071                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4072                           
  4073                           ;incstack = 0
  4074  00D4BA  0EE0               	movlw	224
  4075  00D4BC  ECF9  F060         	call	_write_command
  4076                           
  4077                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4078  00D4C0  0E02               	movlw	2
  4079  00D4C2  EC01  F061         	call	_write_data
  4080  00D4C6  0E1C               	movlw	28
  4081  00D4C8  EC01  F061         	call	_write_data
  4082  00D4CC  0E07               	movlw	7
  4083  00D4CE  EC01  F061         	call	_write_data
  4084  00D4D2  0E12               	movlw	18
  4085  00D4D4  EC01  F061         	call	_write_data
  4086                           
  4087                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4088  00D4D8  0E37               	movlw	55
  4089  00D4DA  EC01  F061         	call	_write_data
  4090  00D4DE  0E32               	movlw	50
  4091  00D4E0  EC01  F061         	call	_write_data
  4092  00D4E4  0E29               	movlw	41
  4093  00D4E6  EC01  F061         	call	_write_data
  4094  00D4EA  0E2D               	movlw	45
  4095  00D4EC  EC01  F061         	call	_write_data
  4096                           
  4097                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4098  00D4F0  0E29               	movlw	41
  4099  00D4F2  EC01  F061         	call	_write_data
  4100  00D4F6  0E25               	movlw	37
  4101  00D4F8  EC01  F061         	call	_write_data
  4102  00D4FC  0E2B               	movlw	43
  4103  00D4FE  EC01  F061         	call	_write_data
  4104  00D502  0E39               	movlw	57
  4105  00D504  EC01  F061         	call	_write_data
  4106                           
  4107                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4108  00D508  0E00               	movlw	0
  4109  00D50A  EC01  F061         	call	_write_data
  4110  00D50E  0E01               	movlw	1
  4111  00D510  EC01  F061         	call	_write_data
  4112  00D514  0E03               	movlw	3
  4113  00D516  EC01  F061         	call	_write_data
  4114  00D51A  0E10               	movlw	16
  4115  00D51C  EC01  F061         	call	_write_data
  4116                           
  4117                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4118  00D520  0EE1               	movlw	225
  4119  00D522  ECF9  F060         	call	_write_command
  4120                           
  4121                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4122  00D526  0E03               	movlw	3
  4123  00D528  EC01  F061         	call	_write_data
  4124  00D52C  0E1D               	movlw	29
  4125  00D52E  EC01  F061         	call	_write_data
  4126  00D532  0E07               	movlw	7
  4127  00D534  EC01  F061         	call	_write_data
  4128  00D538  0E06               	movlw	6
  4129  00D53A  EC01  F061         	call	_write_data
  4130                           
  4131                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4132  00D53E  0E2E               	movlw	46
  4133  00D540  EC01  F061         	call	_write_data
  4134  00D544  0E2C               	movlw	44
  4135  00D546  EC01  F061         	call	_write_data
  4136  00D54A  0E29               	movlw	41
  4137  00D54C  EC01  F061         	call	_write_data
  4138  00D550  0E2D               	movlw	45
  4139  00D552  EC01  F061         	call	_write_data
  4140                           
  4141                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4142  00D556  0E2E               	movlw	46
  4143  00D558  EC01  F061         	call	_write_data
  4144  00D55C  0E2E               	movlw	46
  4145  00D55E  EC01  F061         	call	_write_data
  4146  00D562  0E37               	movlw	55
  4147  00D564  EC01  F061         	call	_write_data
  4148  00D568  0E3F               	movlw	63
  4149  00D56A  EC01  F061         	call	_write_data
  4150                           
  4151                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4152  00D56E  0E00               	movlw	0
  4153  00D570  EC01  F061         	call	_write_data
  4154  00D574  0E00               	movlw	0
  4155  00D576  EC01  F061         	call	_write_data
  4156  00D57A  0E02               	movlw	2
  4157  00D57C  EC01  F061         	call	_write_data
  4158  00D580  0E10               	movlw	16
  4159  00D582  EC01  F061         	call	_write_data
  4160                           
  4161                           ;ST7735_TFT.c: 383: write_command(0x13);
  4162  00D586  0E13               	movlw	19
  4163  00D588  ECF9  F060         	call	_write_command
  4164                           
  4165                           ;ST7735_TFT.c: 384: delay_ms(10);
  4166  00D58C  0E00               	movlw	0
  4167  00D58E  6E16               	movwf	delay_ms@ms+1,c
  4168  00D590  0E0A               	movlw	10
  4169  00D592  6E15               	movwf	delay_ms@ms,c
  4170  00D594  ECAF  F063         	call	_delay_ms	;wreg free
  4171                           
  4172                           ;ST7735_TFT.c: 385: write_command(0x29);
  4173  00D598  0E29               	movlw	41
  4174  00D59A  ECF9  F060         	call	_write_command
  4175                           
  4176                           ;ST7735_TFT.c: 386: delay_ms(100);
  4177  00D59E  0E00               	movlw	0
  4178  00D5A0  6E16               	movwf	delay_ms@ms+1,c
  4179  00D5A2  0E64               	movlw	100
  4180  00D5A4  6E15               	movwf	delay_ms@ms,c
  4181  00D5A6  ECAF  F063         	call	_delay_ms	;wreg free
  4182  00D5AA  0012               	return		;funcret
  4183  00D5AC                     __end_of_Rcmd3:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodl	equ	0xFF3
  4190                           intcon2	equ	0xFF1
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _Rcmd2red *****************
  4198 ;; Defined at:
  4199 ;;		line 361 in file "ST7735_TFT.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;		None               void
  4206 ;; Registers used:
  4207 ;;		wreg, status,2, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    2
  4220 ;; This function calls:
  4221 ;;		_write_command
  4222 ;;		_write_data
  4223 ;; This function is called by:
  4224 ;;		_TFT_GreenTab_Initialize
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text12
  4229  00C4E2                     __ptext12:
  4230                           	opt stack 0
  4231  00C4E2                     _Rcmd2red:
  4232                           	opt stack 26
  4233                           
  4234                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4235                           
  4236                           ;incstack = 0
  4237  00C4E2  0E2A               	movlw	42
  4238  00C4E4  ECF9  F060         	call	_write_command
  4239                           
  4240                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4241  00C4E8  0E00               	movlw	0
  4242  00C4EA  EC01  F061         	call	_write_data
  4243  00C4EE  0E00               	movlw	0
  4244  00C4F0  EC01  F061         	call	_write_data
  4245                           
  4246                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4247  00C4F4  0E00               	movlw	0
  4248  00C4F6  EC01  F061         	call	_write_data
  4249  00C4FA  0E7F               	movlw	127
  4250  00C4FC  EC01  F061         	call	_write_data
  4251                           
  4252                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4253  00C500  0E2B               	movlw	43
  4254  00C502  ECF9  F060         	call	_write_command
  4255                           
  4256                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4257  00C506  0E00               	movlw	0
  4258  00C508  EC01  F061         	call	_write_data
  4259  00C50C  0E00               	movlw	0
  4260  00C50E  EC01  F061         	call	_write_data
  4261                           
  4262                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4263  00C512  0E00               	movlw	0
  4264  00C514  EC01  F061         	call	_write_data
  4265  00C518  0E9F               	movlw	159
  4266  00C51A  EC01  F061         	call	_write_data
  4267  00C51E  0012               	return		;funcret
  4268  00C520                     __end_of_Rcmd2red:
  4269                           	opt stack 0
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodl	equ	0xFF3
  4275                           intcon2	equ	0xFF1
  4276                           postinc0	equ	0xFEE
  4277                           wreg	equ	0xFE8
  4278                           postdec1	equ	0xFE5
  4279                           fsr1l	equ	0xFE1
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _Rcmd1 *****************
  4283 ;; Defined at:
  4284 ;;		line 314 in file "ST7735_TFT.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:        0 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    2
  4305 ;; This function calls:
  4306 ;;		_delay_ms
  4307 ;;		_write_command
  4308 ;;		_write_data
  4309 ;; This function is called by:
  4310 ;;		_TFT_GreenTab_Initialize
  4311 ;;		_TFT_BlackTab_Initialize
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text13
  4316  00D8BE                     __ptext13:
  4317                           	opt stack 0
  4318  00D8BE                     _Rcmd1:
  4319                           	opt stack 26
  4320                           
  4321                           ;ST7735_TFT.c: 316: write_command(0x01);
  4322                           
  4323                           ;incstack = 0
  4324  00D8BE  0E01               	movlw	1
  4325  00D8C0  ECF9  F060         	call	_write_command
  4326                           
  4327                           ;ST7735_TFT.c: 317: delay_ms(150);
  4328  00D8C4  0E00               	movlw	0
  4329  00D8C6  6E16               	movwf	delay_ms@ms+1,c
  4330  00D8C8  0E96               	movlw	150
  4331  00D8CA  6E15               	movwf	delay_ms@ms,c
  4332  00D8CC  ECAF  F063         	call	_delay_ms	;wreg free
  4333                           
  4334                           ;ST7735_TFT.c: 318: write_command(0x11);
  4335  00D8D0  0E11               	movlw	17
  4336  00D8D2  ECF9  F060         	call	_write_command
  4337                           
  4338                           ;ST7735_TFT.c: 319: delay_ms(500);
  4339  00D8D6  0E01               	movlw	1
  4340  00D8D8  6E16               	movwf	delay_ms@ms+1,c
  4341  00D8DA  0EF4               	movlw	244
  4342  00D8DC  6E15               	movwf	delay_ms@ms,c
  4343  00D8DE  ECAF  F063         	call	_delay_ms	;wreg free
  4344                           
  4345                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4346  00D8E2  0EB1               	movlw	177
  4347  00D8E4  ECF9  F060         	call	_write_command
  4348                           
  4349                           ;ST7735_TFT.c: 321: write_data(0x01);
  4350  00D8E8  0E01               	movlw	1
  4351  00D8EA  EC01  F061         	call	_write_data
  4352                           
  4353                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4354  00D8EE  0E2C               	movlw	44
  4355  00D8F0  EC01  F061         	call	_write_data
  4356                           
  4357                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4358  00D8F4  0E2D               	movlw	45
  4359  00D8F6  EC01  F061         	call	_write_data
  4360                           
  4361                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4362  00D8FA  0EB2               	movlw	178
  4363  00D8FC  ECF9  F060         	call	_write_command
  4364                           
  4365                           ;ST7735_TFT.c: 325: write_data(0x01);
  4366  00D900  0E01               	movlw	1
  4367  00D902  EC01  F061         	call	_write_data
  4368                           
  4369                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4370  00D906  0E2C               	movlw	44
  4371  00D908  EC01  F061         	call	_write_data
  4372                           
  4373                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4374  00D90C  0E2D               	movlw	45
  4375  00D90E  EC01  F061         	call	_write_data
  4376                           
  4377                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4378  00D912  0EB3               	movlw	179
  4379  00D914  ECF9  F060         	call	_write_command
  4380                           
  4381                           ;ST7735_TFT.c: 329: write_data(0x01);
  4382  00D918  0E01               	movlw	1
  4383  00D91A  EC01  F061         	call	_write_data
  4384                           
  4385                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4386  00D91E  0E2C               	movlw	44
  4387  00D920  EC01  F061         	call	_write_data
  4388                           
  4389                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4390  00D924  0E2D               	movlw	45
  4391  00D926  EC01  F061         	call	_write_data
  4392                           
  4393                           ;ST7735_TFT.c: 332: write_data(0x01);
  4394  00D92A  0E01               	movlw	1
  4395  00D92C  EC01  F061         	call	_write_data
  4396                           
  4397                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4398  00D930  0E2C               	movlw	44
  4399  00D932  EC01  F061         	call	_write_data
  4400                           
  4401                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4402  00D936  0E2D               	movlw	45
  4403  00D938  EC01  F061         	call	_write_data
  4404                           
  4405                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4406  00D93C  0EB4               	movlw	180
  4407  00D93E  ECF9  F060         	call	_write_command
  4408                           
  4409                           ;ST7735_TFT.c: 336: write_data(0x07);
  4410  00D942  0E07               	movlw	7
  4411  00D944  EC01  F061         	call	_write_data
  4412                           
  4413                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4414  00D948  0EC0               	movlw	192
  4415  00D94A  ECF9  F060         	call	_write_command
  4416                           
  4417                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4418  00D94E  0EA2               	movlw	162
  4419  00D950  EC01  F061         	call	_write_data
  4420                           
  4421                           ;ST7735_TFT.c: 339: write_data(0x02);
  4422  00D954  0E02               	movlw	2
  4423  00D956  EC01  F061         	call	_write_data
  4424                           
  4425                           ;ST7735_TFT.c: 340: write_data(0x84);
  4426  00D95A  0E84               	movlw	132
  4427  00D95C  EC01  F061         	call	_write_data
  4428                           
  4429                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4430  00D960  0EC1               	movlw	193
  4431  00D962  ECF9  F060         	call	_write_command
  4432                           
  4433                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4434  00D966  0EC5               	movlw	197
  4435  00D968  EC01  F061         	call	_write_data
  4436                           
  4437                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4438  00D96C  0EC2               	movlw	194
  4439  00D96E  ECF9  F060         	call	_write_command
  4440                           
  4441                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4442  00D972  0E0A               	movlw	10
  4443  00D974  EC01  F061         	call	_write_data
  4444                           
  4445                           ;ST7735_TFT.c: 345: write_data(0x00);
  4446  00D978  0E00               	movlw	0
  4447  00D97A  EC01  F061         	call	_write_data
  4448                           
  4449                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4450  00D97E  0EC3               	movlw	195
  4451  00D980  ECF9  F060         	call	_write_command
  4452                           
  4453                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4454  00D984  0E8A               	movlw	138
  4455  00D986  EC01  F061         	call	_write_data
  4456                           
  4457                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4458  00D98A  0E2A               	movlw	42
  4459  00D98C  EC01  F061         	call	_write_data
  4460                           
  4461                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4462  00D990  0EC4               	movlw	196
  4463  00D992  ECF9  F060         	call	_write_command
  4464                           
  4465                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4466  00D996  0E8A               	movlw	138
  4467  00D998  EC01  F061         	call	_write_data
  4468                           
  4469                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4470  00D99C  0EEE               	movlw	238
  4471  00D99E  EC01  F061         	call	_write_data
  4472                           
  4473                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4474  00D9A2  0EC5               	movlw	197
  4475  00D9A4  ECF9  F060         	call	_write_command
  4476                           
  4477                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4478  00D9A8  0E0E               	movlw	14
  4479  00D9AA  EC01  F061         	call	_write_data
  4480                           
  4481                           ;ST7735_TFT.c: 354: write_command(0x20);
  4482  00D9AE  0E20               	movlw	32
  4483  00D9B0  ECF9  F060         	call	_write_command
  4484                           
  4485                           ;ST7735_TFT.c: 355: write_command(0x36);
  4486  00D9B4  0E36               	movlw	54
  4487  00D9B6  ECF9  F060         	call	_write_command
  4488                           
  4489                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4490  00D9BA  0EC8               	movlw	200
  4491  00D9BC  EC01  F061         	call	_write_data
  4492                           
  4493                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4494  00D9C0  0E3A               	movlw	58
  4495  00D9C2  ECF9  F060         	call	_write_command
  4496                           
  4497                           ;ST7735_TFT.c: 358: write_data(0x05);
  4498  00D9C6  0E05               	movlw	5
  4499  00D9C8  EC01  F061         	call	_write_data
  4500  00D9CC  0012               	return		;funcret
  4501  00D9CE                     __end_of_Rcmd1:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodl	equ	0xFF3
  4508                           intcon2	equ	0xFF1
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           status	equ	0xFD8
  4514                           
  4515 ;; *************** function _LCD_Reset *****************
  4516 ;; Defined at:
  4517 ;;		line 250 in file "ST7735_TFT.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;Total ram usage:        0 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    2
  4538 ;; This function calls:
  4539 ;;		_delay_ms
  4540 ;; This function is called by:
  4541 ;;		_Initialize_Screen
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text14
  4546  00C224                     __ptext14:
  4547                           	opt stack 0
  4548  00C224                     _LCD_Reset:
  4549                           	opt stack 27
  4550                           
  4551                           ;ST7735_TFT.c: 252: PORTCbits.RC1 = 0;
  4552                           
  4553                           ;incstack = 0
  4554  00C224  9282               	bcf	3970,1,c	;volatile
  4555                           
  4556                           ;ST7735_TFT.c: 253: delay_ms(100);
  4557  00C226  0E00               	movlw	0
  4558  00C228  6E16               	movwf	delay_ms@ms+1,c
  4559  00C22A  0E64               	movlw	100
  4560  00C22C  6E15               	movwf	delay_ms@ms,c
  4561  00C22E  ECAF  F063         	call	_delay_ms	;wreg free
  4562                           
  4563                           ;ST7735_TFT.c: 254: PORTCbits.RC1 = 1;
  4564  00C232  8282               	bsf	3970,1,c	;volatile
  4565  00C234  0012               	return		;funcret
  4566  00C236                     __end_of_LCD_Reset:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodl	equ	0xFF3
  4573                           intcon2	equ	0xFF1
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _delay_ms *****************
  4581 ;; Defined at:
  4582 ;;		line 97 in file "ST7735_TFT.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  ms              2   20[COMRAM] int 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  count           2   24[COMRAM] int 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;		None               void
  4589 ;; Registers used:
  4590 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;Total ram usage:        6 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    1
  4603 ;; This function calls:
  4604 ;;		___wmul
  4605 ;; This function is called by:
  4606 ;;		_LCD_Reset
  4607 ;;		_Rcmd1
  4608 ;;		_Rcmd3
  4609 ;;		_Bcmd
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text15
  4614  00C75E                     __ptext15:
  4615                           	opt stack 0
  4616  00C75E                     _delay_ms:
  4617                           	opt stack 26
  4618                           
  4619                           ;ST7735_TFT.c: 103: int count;
  4620                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4621                           
  4622                           ;incstack = 0
  4623  00C75E  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4624  00C762  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4625  00C766  0E00               	movlw	0
  4626  00C768  6E12               	movwf	___wmul@multiplicand+1,c
  4627  00C76A  0EFA               	movlw	250
  4628  00C76C  6E11               	movwf	___wmul@multiplicand,c
  4629  00C76E  EC96  F061         	call	___wmul	;wreg free
  4630  00C772  C00F  F019         	movff	?___wmul,delay_ms@count
  4631  00C776  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4632                           
  4633                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4634  00C77A  C019  F017         	movff	delay_ms@count,??_delay_ms
  4635  00C77E  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4636  00C782  1E17               	comf	??_delay_ms,f,c
  4637  00C784  1E18               	comf	??_delay_ms+1,f,c
  4638  00C786  4A17               	infsnz	??_delay_ms,f,c
  4639  00C788  2A18               	incf	??_delay_ms+1,f,c
  4640  00C78A  0EFF               	movlw	255
  4641  00C78C  2417               	addwf	??_delay_ms,w,c
  4642  00C78E  6E19               	movwf	delay_ms@count,c
  4643  00C790  0EFF               	movlw	255
  4644  00C792  2018               	addwfc	??_delay_ms+1,w,c
  4645  00C794  6E1A               	movwf	delay_ms@count+1,c
  4646                           
  4647                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4648  00C796  0EB8               	movlw	184
  4649  00C798  6EB1               	movwf	4017,c	;volatile
  4650                           
  4651                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4652  00C79A  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4653                           
  4654                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4655  00C79E  501A               	movf	delay_ms@count+1,w,c
  4656  00C7A0  6ED7               	movwf	4055,c	;volatile
  4657                           
  4658                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4659  00C7A2  92A1               	bcf	4001,1,c	;volatile
  4660                           
  4661                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4662  00C7A4  80B1               	bsf	4017,0,c	;volatile
  4663                           
  4664                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4665  00C7A6  D000               	goto	l133
  4666  00C7A8                     l133:
  4667  00C7A8  A2A1               	btfss	4001,1,c	;volatile
  4668  00C7AA  D7FE               	goto	l133
  4669                           
  4670                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4671  00C7AC  90B1               	bcf	4017,0,c	;volatile
  4672  00C7AE  0012               	return		;funcret
  4673  00C7B0                     __end_of_delay_ms:
  4674                           	opt stack 0
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodl	equ	0xFF3
  4680                           intcon2	equ	0xFF1
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           fsr1l	equ	0xFE1
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _Init_TRIS *****************
  4688 ;; Defined at:
  4689 ;;		line 436 in file "Lab8p1.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;		None               void
  4696 ;; Registers used:
  4697 ;;		wreg, status,2
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_main
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text16
  4717  00C274                     __ptext16:
  4718                           	opt stack 0
  4719  00C274                     _Init_TRIS:
  4720                           	opt stack 30
  4721                           
  4722                           ;Lab8p1.c: 438: TRISA = 0b00011001;
  4723                           
  4724                           ;incstack = 0
  4725  00C274  0E19               	movlw	25
  4726  00C276  6E92               	movwf	3986,c	;volatile
  4727                           
  4728                           ;Lab8p1.c: 439: TRISB = 0b00000111;
  4729  00C278  0E07               	movlw	7
  4730  00C27A  6E93               	movwf	3987,c	;volatile
  4731                           
  4732                           ;Lab8p1.c: 440: TRISC = 0x00;
  4733  00C27C  0E00               	movlw	0
  4734  00C27E  6E94               	movwf	3988,c	;volatile
  4735                           
  4736                           ;Lab8p1.c: 441: TRISD = 0x00;
  4737  00C280  0E00               	movlw	0
  4738  00C282  6E95               	movwf	3989,c	;volatile
  4739                           
  4740                           ;Lab8p1.c: 442: TRISE = 0x00;
  4741  00C284  0E00               	movlw	0
  4742  00C286  6E96               	movwf	3990,c	;volatile
  4743  00C288  0012               	return		;funcret
  4744  00C28A                     __end_of_Init_TRIS:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodl	equ	0xFF3
  4751                           intcon2	equ	0xFF1
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _Init_ADC *****************
  4759 ;; Defined at:
  4760 ;;		line 429 in file "Lab8p1.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;		None
  4765 ;; Return value:  Size  Location     Type
  4766 ;;		None               void
  4767 ;; Registers used:
  4768 ;;		wreg, status,2
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;Total ram usage:        0 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; This function calls:
  4781 ;;		Nothing
  4782 ;; This function is called by:
  4783 ;;		_main
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text17
  4788  00C1E4                     __ptext17:
  4789                           	opt stack 0
  4790  00C1E4                     _Init_ADC:
  4791                           	opt stack 30
  4792                           
  4793                           ;Lab8p1.c: 431: ADCON0 = 0b00000001;
  4794                           
  4795                           ;incstack = 0
  4796  00C1E4  0E01               	movlw	1
  4797  00C1E6  6EC2               	movwf	4034,c	;volatile
  4798                           
  4799                           ;Lab8p1.c: 432: ADCON1 = 0b00001110;
  4800  00C1E8  0E0E               	movlw	14
  4801  00C1EA  6EC1               	movwf	4033,c	;volatile
  4802                           
  4803                           ;Lab8p1.c: 433: ADCON2 = 0xA9;
  4804  00C1EC  0EA9               	movlw	169
  4805  00C1EE  6EC0               	movwf	4032,c	;volatile
  4806  00C1F0  0012               	return		;funcret
  4807  00C1F2                     __end_of_Init_ADC:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodl	equ	0xFF3
  4814                           intcon2	equ	0xFF1
  4815                           postinc0	equ	0xFEE
  4816                           wreg	equ	0xFE8
  4817                           postdec1	equ	0xFE5
  4818                           fsr1l	equ	0xFE1
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _Day_Mode *****************
  4822 ;; Defined at:
  4823 ;;		line 320 in file "Lab8p1.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;		None               void
  4830 ;; Registers used:
  4831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        0 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:   10
  4844 ;; This function calls:
  4845 ;;		_PED_Control
  4846 ;;		_Set_EW
  4847 ;;		_Set_EWLT
  4848 ;;		_Set_NS
  4849 ;;		_Set_NSLT
  4850 ;;		_WAIT_N_SEC
  4851 ;; This function is called by:
  4852 ;;		_main
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text18
  4857  00CECA                     __ptext18:
  4858                           	opt stack 0
  4859  00CECA                     _Day_Mode:
  4860                           	opt stack 20
  4861                           
  4862                           ;Lab8p1.c: 322: PORTBbits.RB7 = 0;
  4863                           
  4864                           ;incstack = 0
  4865  00CECA  9E81               	bcf	3969,7,c	;volatile
  4866                           
  4867                           ;Lab8p1.c: 323: Act_Mode_Txt[0] = 'D';
  4868  00CECC  0E44               	movlw	68
  4869  00CECE  0100               	movlb	0	; () banked
  4870  00CED0  6F9D               	movwf	_Act_Mode_Txt& (0+255),b
  4871  00CED2  D000               	goto	l5140
  4872  00CED4                     l5140:
  4873                           
  4874                           ;Lab8p1.c: 326: {
  4875                           ;Lab8p1.c: 327: Set_NSLT (1);
  4876  00CED4  0E01               	movlw	1
  4877  00CED6  ECF6  F062         	call	_Set_NSLT
  4878                           
  4879                           ;Lab8p1.c: 328: Set_EW (1);
  4880  00CEDA  0E01               	movlw	1
  4881  00CEDC  EC90  F062         	call	_Set_EW
  4882                           
  4883                           ;Lab8p1.c: 329: Set_EWLT (1);
  4884  00CEE0  0E01               	movlw	1
  4885  00CEE2  ECB2  F062         	call	_Set_EWLT
  4886                           
  4887                           ;Lab8p1.c: 330: Set_NS (2);
  4888  00CEE6  0E02               	movlw	2
  4889  00CEE8  ECD4  F062         	call	_Set_NS
  4890                           
  4891                           ;Lab8p1.c: 332: if (PORTBbits.RB0 == 1)
  4892  00CEEC  A081               	btfss	3969,0,c	;volatile
  4893  00CEEE  D005               	goto	l389
  4894                           
  4895                           ;Lab8p1.c: 333: {
  4896                           ;Lab8p1.c: 334: PED_Control(0, 9);
  4897  00CEF0  0E09               	movlw	9
  4898  00CEF2  6E3D               	movwf	PED_Control@Num_Sec,c
  4899  00CEF4  0E00               	movlw	0
  4900  00CEF6  EC03  F062         	call	_PED_Control
  4901  00CEFA                     l389:
  4902                           
  4903                           ;Lab8p1.c: 335: }
  4904                           ;Lab8p1.c: 336: WAIT_N_SEC (8);
  4905  00CEFA  0E08               	movlw	8
  4906  00CEFC  ECD4  F061         	call	_WAIT_N_SEC
  4907                           
  4908                           ;Lab8p1.c: 338: Set_NS (3);
  4909  00CF00  0E03               	movlw	3
  4910  00CF02  ECD4  F062         	call	_Set_NS
  4911                           
  4912                           ;Lab8p1.c: 339: WAIT_N_SEC (3);
  4913  00CF06  0E03               	movlw	3
  4914  00CF08  ECD4  F061         	call	_WAIT_N_SEC
  4915                           
  4916                           ;Lab8p1.c: 341: Set_NS (1);
  4917  00CF0C  0E01               	movlw	1
  4918  00CF0E  ECD4  F062         	call	_Set_NS
  4919                           
  4920                           ;Lab8p1.c: 343: if (PORTAbits.RA4 == 1)
  4921  00CF12  A880               	btfss	3968,4,c	;volatile
  4922  00CF14  D010               	goto	l5166
  4923                           
  4924                           ;Lab8p1.c: 344: {
  4925                           ;Lab8p1.c: 345: Set_EWLT (2);
  4926  00CF16  0E02               	movlw	2
  4927  00CF18  ECB2  F062         	call	_Set_EWLT
  4928                           
  4929                           ;Lab8p1.c: 346: WAIT_N_SEC (7);
  4930  00CF1C  0E07               	movlw	7
  4931  00CF1E  ECD4  F061         	call	_WAIT_N_SEC
  4932                           
  4933                           ;Lab8p1.c: 347: Set_EWLT (3);
  4934  00CF22  0E03               	movlw	3
  4935  00CF24  ECB2  F062         	call	_Set_EWLT
  4936                           
  4937                           ;Lab8p1.c: 348: WAIT_N_SEC (3);
  4938  00CF28  0E03               	movlw	3
  4939  00CF2A  ECD4  F061         	call	_WAIT_N_SEC
  4940                           
  4941                           ;Lab8p1.c: 349: Set_EWLT (1);
  4942  00CF2E  0E01               	movlw	1
  4943  00CF30  ECB2  F062         	call	_Set_EWLT
  4944  00CF34  D000               	goto	l5166
  4945  00CF36                     l5166:
  4946                           
  4947                           ;Lab8p1.c: 350: }
  4948                           ;Lab8p1.c: 352: Set_EW (2);
  4949  00CF36  0E02               	movlw	2
  4950  00CF38  EC90  F062         	call	_Set_EW
  4951                           
  4952                           ;Lab8p1.c: 354: if (PORTBbits.RB1 == 1)
  4953  00CF3C  A281               	btfss	3969,1,c	;volatile
  4954  00CF3E  D005               	goto	l391
  4955                           
  4956                           ;Lab8p1.c: 355: {
  4957                           ;Lab8p1.c: 356: PED_Control(1, 8);
  4958  00CF40  0E08               	movlw	8
  4959  00CF42  6E3D               	movwf	PED_Control@Num_Sec,c
  4960  00CF44  0E01               	movlw	1
  4961  00CF46  EC03  F062         	call	_PED_Control
  4962  00CF4A                     l391:
  4963                           
  4964                           ;Lab8p1.c: 357: }
  4965                           ;Lab8p1.c: 358: WAIT_N_SEC (6);
  4966  00CF4A  0E06               	movlw	6
  4967  00CF4C  ECD4  F061         	call	_WAIT_N_SEC
  4968                           
  4969                           ;Lab8p1.c: 360: Set_EW (3);
  4970  00CF50  0E03               	movlw	3
  4971  00CF52  EC90  F062         	call	_Set_EW
  4972                           
  4973                           ;Lab8p1.c: 361: WAIT_N_SEC (3);
  4974  00CF56  0E03               	movlw	3
  4975  00CF58  ECD4  F061         	call	_WAIT_N_SEC
  4976                           
  4977                           ;Lab8p1.c: 363: Set_EW (1);
  4978  00CF5C  0E01               	movlw	1
  4979  00CF5E  EC90  F062         	call	_Set_EW
  4980                           
  4981                           ;Lab8p1.c: 365: if (PORTAbits.RA3 == 1)
  4982  00CF62  A680               	btfss	3968,3,c	;volatile
  4983  00CF64  D011               	goto	l395
  4984                           
  4985                           ;Lab8p1.c: 366: {
  4986                           ;Lab8p1.c: 367: Set_NSLT (2);
  4987  00CF66  0E02               	movlw	2
  4988  00CF68  ECF6  F062         	call	_Set_NSLT
  4989                           
  4990                           ;Lab8p1.c: 368: WAIT_N_SEC (6);
  4991  00CF6C  0E06               	movlw	6
  4992  00CF6E  ECD4  F061         	call	_WAIT_N_SEC
  4993                           
  4994                           ;Lab8p1.c: 370: Set_NSLT (3);
  4995  00CF72  0E03               	movlw	3
  4996  00CF74  ECF6  F062         	call	_Set_NSLT
  4997                           
  4998                           ;Lab8p1.c: 371: WAIT_N_SEC (3);
  4999  00CF78  0E03               	movlw	3
  5000  00CF7A  ECD4  F061         	call	_WAIT_N_SEC
  5001                           
  5002                           ;Lab8p1.c: 373: Set_NSLT (1);
  5003  00CF7E  0E01               	movlw	1
  5004  00CF80  ECF6  F062         	call	_Set_NSLT
  5005                           
  5006                           ;Lab8p1.c: 374: }
  5007                           ;Lab8p1.c: 375: break;
  5008  00CF84  D001               	goto	l395
  5009  00CF86  D7A6               	goto	l5140
  5010  00CF88                     l395:
  5011  00CF88  0012               	return		;funcret
  5012  00CF8A                     __end_of_Day_Mode:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodl	equ	0xFF3
  5019                           intcon2	equ	0xFF1
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1l	equ	0xFE1
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _WAIT_N_SEC *****************
  5027 ;; Defined at:
  5028 ;;		line 488 in file "Lab8p1.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  seconds         1    wreg     unsigned char 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  seconds         1  104[COMRAM] unsigned char 
  5033 ;;  i               1  105[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:        2 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    9
  5050 ;; This function calls:
  5051 ;;		_WAIT_1_SEC
  5052 ;;		_update_LCD_count
  5053 ;; This function is called by:
  5054 ;;		_Day_Mode
  5055 ;;		_Night_Mode
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text19
  5060  00C3A8                     __ptext19:
  5061                           	opt stack 0
  5062  00C3A8                     _WAIT_N_SEC:
  5063                           	opt stack 20
  5064                           
  5065                           ;incstack = 0
  5066                           ;WAIT_N_SEC@seconds stored from wreg
  5067  00C3A8  6E69               	movwf	WAIT_N_SEC@seconds,c
  5068                           
  5069                           ;Lab8p1.c: 490: char i;
  5070                           ;Lab8p1.c: 491: for (i = seconds; i > 0; i--)
  5071  00C3AA  C069  F06A         	movff	WAIT_N_SEC@seconds,WAIT_N_SEC@i
  5072  00C3AE                     l4998:
  5073  00C3AE  506A               	movf	WAIT_N_SEC@i,w,c
  5074  00C3B0  B4D8               	btfsc	status,2,c
  5075  00C3B2  D00B               	goto	l5008
  5076  00C3B4  D001               	goto	l5002
  5077  00C3B6  D009               	goto	l5008
  5078  00C3B8                     l5002:
  5079                           
  5080                           ;Lab8p1.c: 492: {
  5081                           ;Lab8p1.c: 493: update_LCD_count(direction, i);
  5082  00C3B8  C06A  F03A         	movff	WAIT_N_SEC@i,update_LCD_count@count
  5083  00C3BC  5079               	movf	_direction,w,c
  5084  00C3BE  EC2E  F06E         	call	_update_LCD_count
  5085                           
  5086                           ;Lab8p1.c: 494: WAIT_1_SEC();
  5087  00C3C2  EC1D  F065         	call	_WAIT_1_SEC	;wreg free
  5088  00C3C6  066A               	decf	WAIT_N_SEC@i,f,c
  5089  00C3C8  D7F2               	goto	l4998
  5090  00C3CA                     l5008:
  5091                           
  5092                           ;Lab8p1.c: 495: }
  5093                           ;Lab8p1.c: 496: update_LCD_count(direction, 0);
  5094  00C3CA  0E00               	movlw	0
  5095  00C3CC  6E3A               	movwf	update_LCD_count@count,c
  5096  00C3CE  5079               	movf	_direction,w,c
  5097  00C3D0  EC2E  F06E         	call	_update_LCD_count
  5098  00C3D4  0012               	return		;funcret
  5099  00C3D6                     __end_of_WAIT_N_SEC:
  5100                           	opt stack 0
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodl	equ	0xFF3
  5106                           intcon2	equ	0xFF1
  5107                           postinc0	equ	0xFEE
  5108                           wreg	equ	0xFE8
  5109                           postdec1	equ	0xFE5
  5110                           fsr1l	equ	0xFE1
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _update_LCD_count *****************
  5114 ;; Defined at:
  5115 ;;		line 637 in file "Lab8p1.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  direction       1    wreg     unsigned char 
  5118 ;;  count           1   57[COMRAM] unsigned char 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  direction       1   59[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        3 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    7
  5137 ;; This function calls:
  5138 ;;		___awdiv
  5139 ;;		___awmod
  5140 ;;		_drawtext
  5141 ;; This function is called by:
  5142 ;;		_WAIT_N_SEC
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text20
  5147  00DC5C                     __ptext20:
  5148                           	opt stack 0
  5149  00DC5C                     _update_LCD_count:
  5150                           	opt stack 21
  5151                           
  5152                           ;incstack = 0
  5153                           ;update_LCD_count@direction stored from wreg
  5154  00DC5C  6E3C               	movwf	update_LCD_count@direction,c
  5155                           
  5156                           ;Lab8p1.c: 639: PORTD = (PORTD & 0x80) | array[count];
  5157  00DC5E  503A               	movf	update_LCD_count@count,w,c
  5158  00DC60  0D01               	mullw	1
  5159  00DC62  0E80               	movlw	low _array
  5160  00DC64  24F3               	addwf	prodl,w,c
  5161  00DC66  6ED9               	movwf	fsr2l,c
  5162  00DC68  0E00               	movlw	high _array
  5163  00DC6A  20F4               	addwfc	prodh,w,c
  5164  00DC6C  6EDA               	movwf	fsr2h,c
  5165  00DC6E  50DF               	movf	indf2,w,c
  5166  00DC70  6E3B               	movwf	??_update_LCD_count& (0+255),c
  5167  00DC72  5083               	movf	3971,w,c	;volatile
  5168  00DC74  0B80               	andlw	128
  5169  00DC76  103B               	iorwf	??_update_LCD_count,w,c
  5170  00DC78  6E83               	movwf	3971,c	;volatile
  5171                           
  5172                           ;Lab8p1.c: 640: switch (direction)
  5173  00DC7A  D0B6               	goto	l4830
  5174  00DC7C                     l4812:
  5175                           
  5176                           ;Lab8p1.c: 643: EW_Count[0] = count/10 + '0';
  5177  00DC7C  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5178  00DC80  6A08               	clrf	___awdiv@dividend+1,c
  5179  00DC82  0E00               	movlw	0
  5180  00DC84  6E0A               	movwf	___awdiv@divisor+1,c
  5181  00DC86  0E0A               	movlw	10
  5182  00DC88  6E09               	movwf	___awdiv@divisor,c
  5183  00DC8A  EC2C  F066         	call	___awdiv	;wreg free
  5184  00DC8E  5007               	movf	?___awdiv,w,c
  5185  00DC90  0F30               	addlw	48
  5186  00DC92  0100               	movlb	0	; () banked
  5187  00DC94  6F8E               	movwf	_EW_Count& (0+255),b
  5188                           
  5189                           ;Lab8p1.c: 644: EW_Count[1] = count%10 + '0';
  5190  00DC96  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5191  00DC9A  6A02               	clrf	___awmod@dividend+1,c
  5192  00DC9C  0E00               	movlw	0
  5193  00DC9E  6E04               	movwf	___awmod@divisor+1,c
  5194  00DCA0  0E0A               	movlw	10
  5195  00DCA2  6E03               	movwf	___awmod@divisor,c
  5196  00DCA4  ECDC  F064         	call	___awmod	;wreg free
  5197  00DCA8  5001               	movf	?___awmod,w,c
  5198  00DCAA  0F30               	addlw	48
  5199  00DCAC  0100               	movlb	0	; () banked
  5200  00DCAE  6F8F               	movwf	(_EW_Count+1)& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;Lab8p1.c: 645: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5204  00DCB0  0E1E               	movlw	30
  5205  00DCB2  6E29               	movwf	drawtext@y,c
  5206  00DCB4  0E8E               	movlw	low _EW_Count
  5207  00DCB6  6E2A               	movwf	drawtext@_text,c
  5208  00DCB8  0E00               	movlw	high _EW_Count
  5209  00DCBA  6E2B               	movwf	drawtext@_text+1,c
  5210  00DCBC  0E07               	movlw	7
  5211  00DCBE  6E2D               	movwf	drawtext@color+1,c
  5212  00DCC0  682C               	setf	drawtext@color,c
  5213  00DCC2  0E00               	movlw	0
  5214  00DCC4  6E2F               	movwf	drawtext@bg+1,c
  5215  00DCC6  0E00               	movlw	0
  5216  00DCC8  6E2E               	movwf	drawtext@bg,c
  5217  00DCCA  0E02               	movlw	2
  5218  00DCCC  6E30               	movwf	drawtext@size,c
  5219  00DCCE  0E64               	movlw	100
  5220  00DCD0  EC96  F068         	call	_drawtext
  5221                           
  5222                           ;Lab8p1.c: 646: break;
  5223  00DCD4  D097               	goto	l498
  5224  00DCD6                     l4816:
  5225                           
  5226                           ;Lab8p1.c: 649: NS_Count[0] = count/10 + '0';
  5227  00DCD6  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5228  00DCDA  6A08               	clrf	___awdiv@dividend+1,c
  5229  00DCDC  0E00               	movlw	0
  5230  00DCDE  6E0A               	movwf	___awdiv@divisor+1,c
  5231  00DCE0  0E0A               	movlw	10
  5232  00DCE2  6E09               	movwf	___awdiv@divisor,c
  5233  00DCE4  EC2C  F066         	call	___awdiv	;wreg free
  5234  00DCE8  5007               	movf	?___awdiv,w,c
  5235  00DCEA  0F30               	addlw	48
  5236  00DCEC  0100               	movlb	0	; () banked
  5237  00DCEE  6F94               	movwf	_NS_Count& (0+255),b
  5238                           
  5239                           ;Lab8p1.c: 650: NS_Count[1] = count%10 + '0';
  5240  00DCF0  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5241  00DCF4  6A02               	clrf	___awmod@dividend+1,c
  5242  00DCF6  0E00               	movlw	0
  5243  00DCF8  6E04               	movwf	___awmod@divisor+1,c
  5244  00DCFA  0E0A               	movlw	10
  5245  00DCFC  6E03               	movwf	___awmod@divisor,c
  5246  00DCFE  ECDC  F064         	call	___awmod	;wreg free
  5247  00DD02  5001               	movf	?___awmod,w,c
  5248  00DD04  0F30               	addlw	48
  5249  00DD06  0100               	movlb	0	; () banked
  5250  00DD08  6F95               	movwf	(_NS_Count+1)& (0+255),b
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;Lab8p1.c: 651: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5254  00DD0A  0E5A               	movlw	90
  5255  00DD0C  6E29               	movwf	drawtext@y,c
  5256  00DD0E  0E94               	movlw	low _NS_Count
  5257  00DD10  6E2A               	movwf	drawtext@_text,c
  5258  00DD12  0E00               	movlw	high _NS_Count
  5259  00DD14  6E2B               	movwf	drawtext@_text+1,c
  5260  00DD16  0E00               	movlw	0
  5261  00DD18  6E2D               	movwf	drawtext@color+1,c
  5262  00DD1A  0E1F               	movlw	31
  5263  00DD1C  6E2C               	movwf	drawtext@color,c
  5264  00DD1E  0E00               	movlw	0
  5265  00DD20  6E2F               	movwf	drawtext@bg+1,c
  5266  00DD22  0E00               	movlw	0
  5267  00DD24  6E2E               	movwf	drawtext@bg,c
  5268  00DD26  0E02               	movlw	2
  5269  00DD28  6E30               	movwf	drawtext@size,c
  5270  00DD2A  0E64               	movlw	100
  5271  00DD2C  EC96  F068         	call	_drawtext
  5272                           
  5273                           ;Lab8p1.c: 652: break;
  5274  00DD30  D069               	goto	l498
  5275  00DD32                     l4820:
  5276                           
  5277                           ;Lab8p1.c: 655: EWLT_Count[0] = count/10 + '0';
  5278  00DD32  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5279  00DD36  6A08               	clrf	___awdiv@dividend+1,c
  5280  00DD38  0E00               	movlw	0
  5281  00DD3A  6E0A               	movwf	___awdiv@divisor+1,c
  5282  00DD3C  0E0A               	movlw	10
  5283  00DD3E  6E09               	movwf	___awdiv@divisor,c
  5284  00DD40  EC2C  F066         	call	___awdiv	;wreg free
  5285  00DD44  5007               	movf	?___awdiv,w,c
  5286  00DD46  0F30               	addlw	48
  5287  00DD48  0100               	movlb	0	; () banked
  5288  00DD4A  6F8B               	movwf	_EWLT_Count& (0+255),b
  5289                           
  5290                           ;Lab8p1.c: 656: EWLT_Count[1] = count%10 + '0';
  5291  00DD4C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5292  00DD50  6A02               	clrf	___awmod@dividend+1,c
  5293  00DD52  0E00               	movlw	0
  5294  00DD54  6E04               	movwf	___awmod@divisor+1,c
  5295  00DD56  0E0A               	movlw	10
  5296  00DD58  6E03               	movwf	___awmod@divisor,c
  5297  00DD5A  ECDC  F064         	call	___awmod	;wreg free
  5298  00DD5E  5001               	movf	?___awmod,w,c
  5299  00DD60  0F30               	addlw	48
  5300  00DD62  0100               	movlb	0	; () banked
  5301  00DD64  6F8C               	movwf	(_EWLT_Count+1)& (0+255),b
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;Lab8p1.c: 657: drawtext(100, 50 + 10, EWLT_Count,
  5305                           ;Lab8p1.c: 658: 0xFFFF, 0x0000, 2);
  5306  00DD66  0E3C               	movlw	60
  5307  00DD68  6E29               	movwf	drawtext@y,c
  5308  00DD6A  0E8B               	movlw	low _EWLT_Count
  5309  00DD6C  6E2A               	movwf	drawtext@_text,c
  5310  00DD6E  0E00               	movlw	high _EWLT_Count
  5311  00DD70  6E2B               	movwf	drawtext@_text+1,c
  5312  00DD72  0EFF               	movlw	255
  5313  00DD74  6E2D               	movwf	drawtext@color+1,c
  5314  00DD76  682C               	setf	drawtext@color,c
  5315  00DD78  0E00               	movlw	0
  5316  00DD7A  6E2F               	movwf	drawtext@bg+1,c
  5317  00DD7C  0E00               	movlw	0
  5318  00DD7E  6E2E               	movwf	drawtext@bg,c
  5319  00DD80  0E02               	movlw	2
  5320  00DD82  6E30               	movwf	drawtext@size,c
  5321  00DD84  0E64               	movlw	100
  5322  00DD86  EC96  F068         	call	_drawtext
  5323                           
  5324                           ;Lab8p1.c: 659: break;
  5325  00DD8A  D03C               	goto	l498
  5326  00DD8C                     l4824:
  5327                           
  5328                           ;Lab8p1.c: 662: NSLT_Count[0] = count/10 + '0';
  5329  00DD8C  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5330  00DD90  6A08               	clrf	___awdiv@dividend+1,c
  5331  00DD92  0E00               	movlw	0
  5332  00DD94  6E0A               	movwf	___awdiv@divisor+1,c
  5333  00DD96  0E0A               	movlw	10
  5334  00DD98  6E09               	movwf	___awdiv@divisor,c
  5335  00DD9A  EC2C  F066         	call	___awdiv	;wreg free
  5336  00DD9E  5007               	movf	?___awdiv,w,c
  5337  00DDA0  0F30               	addlw	48
  5338  00DDA2  0100               	movlb	0	; () banked
  5339  00DDA4  6F91               	movwf	_NSLT_Count& (0+255),b
  5340                           
  5341                           ;Lab8p1.c: 663: NSLT_Count[1] = count%10 + '0';
  5342  00DDA6  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5343  00DDAA  6A02               	clrf	___awmod@dividend+1,c
  5344  00DDAC  0E00               	movlw	0
  5345  00DDAE  6E04               	movwf	___awmod@divisor+1,c
  5346  00DDB0  0E0A               	movlw	10
  5347  00DDB2  6E03               	movwf	___awmod@divisor,c
  5348  00DDB4  ECDC  F064         	call	___awmod	;wreg free
  5349  00DDB8  5001               	movf	?___awmod,w,c
  5350  00DDBA  0F30               	addlw	48
  5351  00DDBC  0100               	movlb	0	; () banked
  5352  00DDBE  6F92               	movwf	(_NSLT_Count+1)& (0+255),b
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;Lab8p1.c: 664: drawtext(100, 110 + 10, NSLT_Count,
  5356                           ;Lab8p1.c: 665: 0xF81F, 0x0000, 2);
  5357  00DDC0  0E78               	movlw	120
  5358  00DDC2  6E29               	movwf	drawtext@y,c
  5359  00DDC4  0E91               	movlw	low _NSLT_Count
  5360  00DDC6  6E2A               	movwf	drawtext@_text,c
  5361  00DDC8  0E00               	movlw	high _NSLT_Count
  5362  00DDCA  6E2B               	movwf	drawtext@_text+1,c
  5363  00DDCC  0EF8               	movlw	248
  5364  00DDCE  6E2D               	movwf	drawtext@color+1,c
  5365  00DDD0  0E1F               	movlw	31
  5366  00DDD2  6E2C               	movwf	drawtext@color,c
  5367  00DDD4  0E00               	movlw	0
  5368  00DDD6  6E2F               	movwf	drawtext@bg+1,c
  5369  00DDD8  0E00               	movlw	0
  5370  00DDDA  6E2E               	movwf	drawtext@bg,c
  5371  00DDDC  0E02               	movlw	2
  5372  00DDDE  6E30               	movwf	drawtext@size,c
  5373  00DDE0  0E64               	movlw	100
  5374  00DDE2  EC96  F068         	call	_drawtext
  5375                           
  5376                           ;Lab8p1.c: 669: }
  5377                           
  5378                           ;Lab8p1.c: 666: break;
  5379  00DDE6  D00E               	goto	l498
  5380  00DDE8                     l4830:
  5381  00DDE8  503C               	movf	update_LCD_count@direction,w,c
  5382                           
  5383                           ; Switch size 1, requested type "space"
  5384                           ; Number of cases is 4, Range of values is 0 to 3
  5385                           ; switch strategies available:
  5386                           ; Name         Instructions Cycles
  5387                           ; simple_byte           13     7 (average)
  5388                           ;	Chosen strategy is simple_byte
  5389  00DDEA  0A00               	xorlw	0	; case 0
  5390  00DDEC  B4D8               	btfsc	status,2,c
  5391  00DDEE  D746               	goto	l4812
  5392  00DDF0  0A01               	xorlw	1	; case 1
  5393  00DDF2  B4D8               	btfsc	status,2,c
  5394  00DDF4  D79E               	goto	l4820
  5395  00DDF6  0A03               	xorlw	3	; case 2
  5396  00DDF8  B4D8               	btfsc	status,2,c
  5397  00DDFA  D76D               	goto	l4816
  5398  00DDFC  0A01               	xorlw	1	; case 3
  5399  00DDFE  B4D8               	btfsc	status,2,c
  5400  00DE00  D7C5               	goto	l4824
  5401  00DE02  D000               	goto	l498
  5402  00DE04                     l498:
  5403  00DE04  0012               	return		;funcret
  5404  00DE06                     __end_of_update_LCD_count:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           intcon2	equ	0xFF1
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _WAIT_1_SEC *****************
  5423 ;; Defined at:
  5424 ;;		line 460 in file "Lab8p1.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    8
  5445 ;; This function calls:
  5446 ;;		_WAIT_HALF_SEC
  5447 ;;		_drawtext
  5448 ;;		_strcpy
  5449 ;;		_update_LCD_misc
  5450 ;; This function is called by:
  5451 ;;		_WAIT_N_SEC
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           	psect	text21
  5456  00CA3A                     __ptext21:
  5457                           	opt stack 0
  5458  00CA3A                     _WAIT_1_SEC:
  5459                           	opt stack 20
  5460                           
  5461                           ;Lab8p1.c: 462: PORTDbits.RD7 = 1;
  5462                           
  5463                           ;incstack = 0
  5464  00CA3A  8E83               	bsf	3971,7,c	;volatile
  5465                           
  5466                           ;Lab8p1.c: 463: strcpy(txt,"*");
  5467  00CA3C  C06D  F001         	movff	_txt,strcpy@to
  5468  00CA40  C06E  F002         	movff	_txt+1,strcpy@to+1
  5469  00CA44  0EFC               	movlw	low STR_5
  5470  00CA46  6E03               	movwf	strcpy@from,c
  5471  00CA48  0EFF               	movlw	high STR_5
  5472  00CA4A  6E04               	movwf	strcpy@from+1,c
  5473  00CA4C  EC1B  F062         	call	_strcpy	;wreg free
  5474                           
  5475                           ;Lab8p1.c: 464: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5476  00CA50  0E0A               	movlw	10
  5477  00CA52  6E29               	movwf	drawtext@y,c
  5478  00CA54  C06D  F02A         	movff	_txt,drawtext@_text
  5479  00CA58  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  5480  00CA5C  0EFF               	movlw	255
  5481  00CA5E  6E2D               	movwf	drawtext@color+1,c
  5482  00CA60  682C               	setf	drawtext@color,c
  5483  00CA62  0E00               	movlw	0
  5484  00CA64  6E2F               	movwf	drawtext@bg+1,c
  5485  00CA66  0E00               	movlw	0
  5486  00CA68  6E2E               	movwf	drawtext@bg,c
  5487  00CA6A  0E01               	movlw	1
  5488  00CA6C  6E30               	movwf	drawtext@size,c
  5489  00CA6E  0E78               	movlw	120
  5490  00CA70  EC96  F068         	call	_drawtext
  5491                           
  5492                           ;Lab8p1.c: 466: WAIT_HALF_SEC();
  5493  00CA74  EC45  F061         	call	_WAIT_HALF_SEC	;wreg free
  5494                           
  5495                           ;Lab8p1.c: 468: PORTDbits.RD7 = 0;
  5496  00CA78  9E83               	bcf	3971,7,c	;volatile
  5497                           
  5498                           ;Lab8p1.c: 469: strcpy(txt," ");
  5499  00CA7A  C06D  F001         	movff	_txt,strcpy@to
  5500  00CA7E  C06E  F002         	movff	_txt+1,strcpy@to+1
  5501  00CA82  0EFA               	movlw	low STR_14
  5502  00CA84  6E03               	movwf	strcpy@from,c
  5503  00CA86  0EFF               	movlw	high STR_14
  5504  00CA88  6E04               	movwf	strcpy@from+1,c
  5505  00CA8A  EC1B  F062         	call	_strcpy	;wreg free
  5506                           
  5507                           ;Lab8p1.c: 470: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5508  00CA8E  0E0A               	movlw	10
  5509  00CA90  6E29               	movwf	drawtext@y,c
  5510  00CA92  C06D  F02A         	movff	_txt,drawtext@_text
  5511  00CA96  C06E  F02B         	movff	_txt+1,drawtext@_text+1
  5512  00CA9A  0EFF               	movlw	255
  5513  00CA9C  6E2D               	movwf	drawtext@color+1,c
  5514  00CA9E  682C               	setf	drawtext@color,c
  5515  00CAA0  0E00               	movlw	0
  5516  00CAA2  6E2F               	movwf	drawtext@bg+1,c
  5517  00CAA4  0E00               	movlw	0
  5518  00CAA6  6E2E               	movwf	drawtext@bg,c
  5519  00CAA8  0E01               	movlw	1
  5520  00CAAA  6E30               	movwf	drawtext@size,c
  5521  00CAAC  0E78               	movlw	120
  5522  00CAAE  EC96  F068         	call	_drawtext
  5523                           
  5524                           ;Lab8p1.c: 472: WAIT_HALF_SEC();
  5525  00CAB2  EC45  F061         	call	_WAIT_HALF_SEC	;wreg free
  5526                           
  5527                           ;Lab8p1.c: 473: update_LCD_misc();
  5528  00CAB6  ECBC  F070         	call	_update_LCD_misc	;wreg free
  5529  00CABA  0012               	return		;funcret
  5530  00CABC                     __end_of_WAIT_1_SEC:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon2	equ	0xFF1
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           postdec1	equ	0xFE5
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _update_LCD_misc *****************
  5549 ;; Defined at:
  5550 ;;		line 695 in file "Lab8p1.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  volts           3  101[COMRAM] float 
  5555 ;;  nStep           2   99[COMRAM] int 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;		None               void
  5558 ;; Registers used:
  5559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;Total ram usage:        5 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    7
  5572 ;; This function calls:
  5573 ;;		___awtoft
  5574 ;;		___ftdiv
  5575 ;;		___ftge
  5576 ;;		___wmul
  5577 ;;		_drawtext
  5578 ;;		_get_full_ADC
  5579 ;;		_printf
  5580 ;; This function is called by:
  5581 ;;		_WAIT_1_SEC
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text22
  5586  00E178                     __ptext22:
  5587                           	opt stack 0
  5588  00E178                     _update_LCD_misc:
  5589                           	opt stack 20
  5590                           
  5591                           ;Lab8p1.c: 697: int nStep = get_full_ADC ();
  5592                           
  5593                           ;incstack = 0
  5594  00E178  EC83  F061         	call	_get_full_ADC	;wreg free
  5595  00E17C  C001  F064         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5596  00E180  C002  F065         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5597                           
  5598                           ;Lab8p1.c: 698: float volts = nStep*5/1024.0;
  5599  00E184  C064  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5600  00E188  C065  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5601  00E18C  0E00               	movlw	0
  5602  00E18E  6E12               	movwf	___wmul@multiplicand+1,c
  5603  00E190  0E05               	movlw	5
  5604  00E192  6E11               	movwf	___wmul@multiplicand,c
  5605  00E194  EC96  F061         	call	___wmul	;wreg free
  5606  00E198  C00F  F015         	movff	?___wmul,___awtoft@c
  5607  00E19C  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5608  00E1A0  EC34  F062         	call	___awtoft	;wreg free
  5609  00E1A4  C015  F019         	movff	?___awtoft,___ftdiv@f1
  5610  00E1A8  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  5611  00E1AC  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  5612  00E1B0  0E00               	movlw	0
  5613  00E1B2  6E1C               	movwf	___ftdiv@f2,c
  5614  00E1B4  0E80               	movlw	128
  5615  00E1B6  6E1D               	movwf	___ftdiv@f2+1,c
  5616  00E1B8  0E44               	movlw	68
  5617  00E1BA  6E1E               	movwf	___ftdiv@f2+2,c
  5618  00E1BC  EC05  F069         	call	___ftdiv	;wreg free
  5619  00E1C0  C019  F066         	movff	?___ftdiv,update_LCD_misc@volts
  5620  00E1C4  C01A  F067         	movff	?___ftdiv+1,update_LCD_misc@volts+1
  5621  00E1C8  C01B  F068         	movff	?___ftdiv+2,update_LCD_misc@volts+2
  5622                           
  5623                           ;Lab8p1.c: 700: printf ("volts are %0.3f\r\n\n", volts);
  5624  00E1CC  0EAD               	movlw	low STR_15
  5625  00E1CE  6E40               	movwf	printf@f,c
  5626  00E1D0  0EFF               	movlw	high STR_15
  5627  00E1D2  6E41               	movwf	printf@f+1,c
  5628  00E1D4  C066  F042         	movff	update_LCD_misc@volts,?_printf+2
  5629  00E1D8  C067  F043         	movff	update_LCD_misc@volts+1,?_printf+3
  5630  00E1DC  C068  F044         	movff	update_LCD_misc@volts+2,?_printf+4
  5631  00E1E0  ECFD  F079         	call	_printf	;wreg free
  5632                           
  5633                           ;Lab8p1.c: 703: if (volts < 2.570)
  5634  00E1E4  C066  F001         	movff	update_LCD_misc@volts,___ftge@ff1
  5635  00E1E8  C067  F002         	movff	update_LCD_misc@volts+1,___ftge@ff1+1
  5636  00E1EC  C068  F003         	movff	update_LCD_misc@volts+2,___ftge@ff1+2
  5637  00E1F0  0E7B               	movlw	123
  5638  00E1F2  6E04               	movwf	___ftge@ff2,c
  5639  00E1F4  0E24               	movlw	36
  5640  00E1F6  6E05               	movwf	___ftge@ff2+1,c
  5641  00E1F8  0E40               	movlw	64
  5642  00E1FA  6E06               	movwf	___ftge@ff2+2,c
  5643  00E1FC  EC77  F066         	call	___ftge	;wreg free
  5644  00E200  B0D8               	btfsc	status,0,c
  5645  00E202  D002               	goto	l4592
  5646                           
  5647                           ;Lab8p1.c: 704: {
  5648                           ;Lab8p1.c: 705: SW_MODE = 1;
  5649  00E204  0E01               	movlw	1
  5650  00E206  D001               	goto	L1
  5651  00E208                     l4592:
  5652                           
  5653                           ;Lab8p1.c: 707: else
  5654                           ;Lab8p1.c: 708: {
  5655                           ;Lab8p1.c: 709: SW_MODE = 0;
  5656  00E208  0E00               	movlw	0
  5657  00E20A                     L1:
  5658  00E20A  6E73               	movwf	_SW_MODE,c
  5659  00E20C  D000               	goto	l4594
  5660  00E20E                     l4594:
  5661                           
  5662                           ;Lab8p1.c: 710: }
  5663                           ;Lab8p1.c: 713: SW_EWPED = PORTBbits.RB1;
  5664  00E20E  0E00               	movlw	0
  5665  00E210  B281               	btfsc	3969,1,c	;volatile
  5666  00E212  0E01               	movlw	1
  5667  00E214  6E72               	movwf	_SW_EWPED,c
  5668                           
  5669                           ;Lab8p1.c: 714: SW_EWLT = PORTAbits.RA4;
  5670  00E216  0E00               	movlw	0
  5671  00E218  B880               	btfsc	3968,4,c	;volatile
  5672  00E21A  0E01               	movlw	1
  5673  00E21C  6E71               	movwf	_SW_EWLT,c
  5674                           
  5675                           ;Lab8p1.c: 715: SW_NSPED = PORTBbits.RB0;
  5676  00E21E  0E00               	movlw	0
  5677  00E220  B081               	btfsc	3969,0,c	;volatile
  5678  00E222  0E01               	movlw	1
  5679  00E224  6E75               	movwf	_SW_NSPED,c
  5680                           
  5681                           ;Lab8p1.c: 716: SW_NSLT = PORTAbits.RA3;
  5682  00E226  0E00               	movlw	0
  5683  00E228  B680               	btfsc	3968,3,c	;volatile
  5684  00E22A  0E01               	movlw	1
  5685  00E22C  6E74               	movwf	_SW_NSLT,c
  5686                           
  5687                           ;Lab8p1.c: 718: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5688  00E22E  5073               	movf	_SW_MODE,w,c
  5689  00E230  A4D8               	btfss	status,2,c
  5690  00E232  D002               	goto	l4604
  5691  00E234  0E4E               	movlw	78
  5692  00E236  D001               	goto	L2
  5693  00E238                     l4604:
  5694  00E238  0E44               	movlw	68
  5695  00E23A                     L2:
  5696  00E23A  0100               	movlb	0	; () banked
  5697  00E23C  6FA3               	movwf	_SW_MODE_Txt& (0+255),b
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;Lab8p1.c: 719: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5701  00E23E  5075               	movf	_SW_NSPED,w,c
  5702  00E240  A4D8               	btfss	status,2,c
  5703  00E242  D002               	goto	l4608
  5704                           
  5705                           ; BSR set to: 0
  5706  00E244  0E30               	movlw	48
  5707  00E246  D001               	goto	L3
  5708  00E248                     l4608:
  5709                           
  5710                           ; BSR set to: 0
  5711  00E248  0E31               	movlw	49
  5712  00E24A                     L3:
  5713  00E24A  0100               	movlb	0	; () banked
  5714  00E24C  6FA7               	movwf	_SW_NSPED_Txt& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;Lab8p1.c: 720: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5718  00E24E  5074               	movf	_SW_NSLT,w,c
  5719  00E250  A4D8               	btfss	status,2,c
  5720  00E252  D002               	goto	l4612
  5721                           
  5722                           ; BSR set to: 0
  5723  00E254  0E30               	movlw	48
  5724  00E256  D001               	goto	L4
  5725  00E258                     l4612:
  5726                           
  5727                           ; BSR set to: 0
  5728  00E258  0E31               	movlw	49
  5729  00E25A                     L4:
  5730  00E25A  0100               	movlb	0	; () banked
  5731  00E25C  6FA5               	movwf	_SW_NSLT_Txt& (0+255),b
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;Lab8p1.c: 721: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5735  00E25E  5072               	movf	_SW_EWPED,w,c
  5736  00E260  A4D8               	btfss	status,2,c
  5737  00E262  D002               	goto	l4616
  5738                           
  5739                           ; BSR set to: 0
  5740  00E264  0E30               	movlw	48
  5741  00E266  D001               	goto	L5
  5742  00E268                     l4616:
  5743                           
  5744                           ; BSR set to: 0
  5745  00E268  0E31               	movlw	49
  5746  00E26A                     L5:
  5747  00E26A  6E7E               	movwf	_SW_EWPED_Txt,c
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;Lab8p1.c: 722: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5751  00E26C  5071               	movf	_SW_EWLT,w,c
  5752  00E26E  A4D8               	btfss	status,2,c
  5753  00E270  D002               	goto	l4620
  5754                           
  5755                           ; BSR set to: 0
  5756  00E272  0E30               	movlw	48
  5757  00E274  D001               	goto	L6
  5758  00E276                     l4620:
  5759                           
  5760                           ; BSR set to: 0
  5761  00E276  0E31               	movlw	49
  5762  00E278                     L6:
  5763  00E278  6E7C               	movwf	_SW_EWLT_Txt,c
  5764  00E27A  D000               	goto	l4622
  5765  00E27C                     l4622:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;Lab8p1.c: 724: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5769  00E27C  0E0A               	movlw	10
  5770  00E27E  6E29               	movwf	drawtext@y,c
  5771  00E280  0E9D               	movlw	low _Act_Mode_Txt
  5772  00E282  6E2A               	movwf	drawtext@_text,c
  5773  00E284  0E00               	movlw	high _Act_Mode_Txt
  5774  00E286  6E2B               	movwf	drawtext@_text+1,c
  5775  00E288  0EFF               	movlw	255
  5776  00E28A  6E2D               	movwf	drawtext@color+1,c
  5777  00E28C  682C               	setf	drawtext@color,c
  5778  00E28E  0E00               	movlw	0
  5779  00E290  6E2F               	movwf	drawtext@bg+1,c
  5780  00E292  0E00               	movlw	0
  5781  00E294  6E2E               	movwf	drawtext@bg,c
  5782  00E296  0E01               	movlw	1
  5783  00E298  6E30               	movwf	drawtext@size,c
  5784  00E29A  0E23               	movlw	35
  5785  00E29C  EC96  F068         	call	_drawtext
  5786                           
  5787                           ;Lab8p1.c: 725: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5788  00E2A0  0E95               	movlw	149
  5789  00E2A2  6E29               	movwf	drawtext@y,c
  5790  00E2A4  0E7E               	movlw	low _SW_EWPED_Txt
  5791  00E2A6  6E2A               	movwf	drawtext@_text,c
  5792  00E2A8  0E00               	movlw	high _SW_EWPED_Txt
  5793  00E2AA  6E2B               	movwf	drawtext@_text+1,c
  5794  00E2AC  0EFF               	movlw	255
  5795  00E2AE  6E2D               	movwf	drawtext@color+1,c
  5796  00E2B0  682C               	setf	drawtext@color,c
  5797  00E2B2  0E00               	movlw	0
  5798  00E2B4  6E2F               	movwf	drawtext@bg+1,c
  5799  00E2B6  0E00               	movlw	0
  5800  00E2B8  6E2E               	movwf	drawtext@bg,c
  5801  00E2BA  0E01               	movlw	1
  5802  00E2BC  6E30               	movwf	drawtext@size,c
  5803  00E2BE  0E06               	movlw	6
  5804  00E2C0  EC96  F068         	call	_drawtext
  5805                           
  5806                           ;Lab8p1.c: 726: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5807  00E2C4  0E95               	movlw	149
  5808  00E2C6  6E29               	movwf	drawtext@y,c
  5809  00E2C8  0E7C               	movlw	low _SW_EWLT_Txt
  5810  00E2CA  6E2A               	movwf	drawtext@_text,c
  5811  00E2CC  0E00               	movlw	high _SW_EWLT_Txt
  5812  00E2CE  6E2B               	movwf	drawtext@_text+1,c
  5813  00E2D0  0EFF               	movlw	255
  5814  00E2D2  6E2D               	movwf	drawtext@color+1,c
  5815  00E2D4  682C               	setf	drawtext@color,c
  5816  00E2D6  0E00               	movlw	0
  5817  00E2D8  6E2F               	movwf	drawtext@bg+1,c
  5818  00E2DA  0E00               	movlw	0
  5819  00E2DC  6E2E               	movwf	drawtext@bg,c
  5820  00E2DE  0E01               	movlw	1
  5821  00E2E0  6E30               	movwf	drawtext@size,c
  5822  00E2E2  0E20               	movlw	32
  5823  00E2E4  EC96  F068         	call	_drawtext
  5824                           
  5825                           ;Lab8p1.c: 727: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5826  00E2E8  0E95               	movlw	149
  5827  00E2EA  6E29               	movwf	drawtext@y,c
  5828  00E2EC  0EA7               	movlw	low _SW_NSPED_Txt
  5829  00E2EE  6E2A               	movwf	drawtext@_text,c
  5830  00E2F0  0E00               	movlw	high _SW_NSPED_Txt
  5831  00E2F2  6E2B               	movwf	drawtext@_text+1,c
  5832  00E2F4  0EFF               	movlw	255
  5833  00E2F6  6E2D               	movwf	drawtext@color+1,c
  5834  00E2F8  682C               	setf	drawtext@color,c
  5835  00E2FA  0E00               	movlw	0
  5836  00E2FC  6E2F               	movwf	drawtext@bg+1,c
  5837  00E2FE  0E00               	movlw	0
  5838  00E300  6E2E               	movwf	drawtext@bg,c
  5839  00E302  0E01               	movlw	1
  5840  00E304  6E30               	movwf	drawtext@size,c
  5841  00E306  0E3A               	movlw	58
  5842  00E308  EC96  F068         	call	_drawtext
  5843                           
  5844                           ;Lab8p1.c: 728: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5845  00E30C  0E95               	movlw	149
  5846  00E30E  6E29               	movwf	drawtext@y,c
  5847  00E310  0EA5               	movlw	low _SW_NSLT_Txt
  5848  00E312  6E2A               	movwf	drawtext@_text,c
  5849  00E314  0E00               	movlw	high _SW_NSLT_Txt
  5850  00E316  6E2B               	movwf	drawtext@_text+1,c
  5851  00E318  0EFF               	movlw	255
  5852  00E31A  6E2D               	movwf	drawtext@color+1,c
  5853  00E31C  682C               	setf	drawtext@color,c
  5854  00E31E  0E00               	movlw	0
  5855  00E320  6E2F               	movwf	drawtext@bg+1,c
  5856  00E322  0E00               	movlw	0
  5857  00E324  6E2E               	movwf	drawtext@bg,c
  5858  00E326  0E01               	movlw	1
  5859  00E328  6E30               	movwf	drawtext@size,c
  5860  00E32A  0E57               	movlw	87
  5861  00E32C  EC96  F068         	call	_drawtext
  5862                           
  5863                           ;Lab8p1.c: 730: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5864  00E330  0E95               	movlw	149
  5865  00E332  6E29               	movwf	drawtext@y,c
  5866  00E334  0EA3               	movlw	low _SW_MODE_Txt
  5867  00E336  6E2A               	movwf	drawtext@_text,c
  5868  00E338  0E00               	movlw	high _SW_MODE_Txt
  5869  00E33A  6E2B               	movwf	drawtext@_text+1,c
  5870  00E33C  0EFF               	movlw	255
  5871  00E33E  6E2D               	movwf	drawtext@color+1,c
  5872  00E340  682C               	setf	drawtext@color,c
  5873  00E342  0E00               	movlw	0
  5874  00E344  6E2F               	movwf	drawtext@bg+1,c
  5875  00E346  0E00               	movlw	0
  5876  00E348  6E2E               	movwf	drawtext@bg,c
  5877  00E34A  0E01               	movlw	1
  5878  00E34C  6E30               	movwf	drawtext@size,c
  5879  00E34E  0E70               	movlw	112
  5880  00E350  EC96  F068         	call	_drawtext
  5881  00E354  0012               	return		;funcret
  5882  00E356                     __end_of_update_LCD_misc:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon2	equ	0xFF1
  5891                           postinc0	equ	0xFEE
  5892                           wreg	equ	0xFE8
  5893                           postdec1	equ	0xFE5
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _printf *****************
  5901 ;; Defined at:
  5902 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  f               2   63[COMRAM] PTR const unsigned char 
  5905 ;;		 -> STR_15(19), 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  tmpval          4   83[COMRAM] struct .
  5908 ;;  val             4   79[COMRAM] unsigned long 
  5909 ;;  fval            3   93[COMRAM] unsigned long 
  5910 ;;  cp              3    0        PTR const unsigned char 
  5911 ;;  prec            2   96[COMRAM] int 
  5912 ;;  width           2   91[COMRAM] int 
  5913 ;;  flag            2   89[COMRAM] unsigned short 
  5914 ;;  exp             2   87[COMRAM] int 
  5915 ;;  ap              2   77[COMRAM] PTR void [1]
  5916 ;;		 -> ?_printf(2), 
  5917 ;;  len             2    0        unsigned int 
  5918 ;;  c               1   98[COMRAM] char 
  5919 ;;  d               1    0        unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  2   63[COMRAM] int 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:       36 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    3
  5936 ;; This function calls:
  5937 ;;		___awdiv
  5938 ;;		___ftadd
  5939 ;;		___ftge
  5940 ;;		___ftmul
  5941 ;;		___ftneg
  5942 ;;		___ftsub
  5943 ;;		___fttol
  5944 ;;		___lldiv
  5945 ;;		___llmod
  5946 ;;		___lltoft
  5947 ;;		___wmul
  5948 ;;		__div_to_l_
  5949 ;;		__tdiv_to_l_
  5950 ;;		_fround
  5951 ;;		_isdigit
  5952 ;;		_putch
  5953 ;;		_scale
  5954 ;; This function is called by:
  5955 ;;		_update_LCD_misc
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text23
  5960  00F3FA                     __ptext23:
  5961                           	opt stack 0
  5962  00F3FA                     _printf:
  5963                           	opt stack 23
  5964                           
  5965                           ;doprnt.c: 466: va_list ap;
  5966                           ;doprnt.c: 499: signed char c;
  5967                           ;doprnt.c: 501: int width;
  5968                           ;doprnt.c: 504: int prec;
  5969                           ;doprnt.c: 508: unsigned short flag;
  5970                           ;doprnt.c: 515: char d;
  5971                           ;doprnt.c: 516: double fval;
  5972                           ;doprnt.c: 517: int exp;
  5973                           ;doprnt.c: 523: union {
  5974                           ;doprnt.c: 524: unsigned long vd;
  5975                           ;doprnt.c: 525: double integ;
  5976                           ;doprnt.c: 526: } tmpval;
  5977                           ;doprnt.c: 528: unsigned long val;
  5978                           ;doprnt.c: 529: unsigned len;
  5979                           ;doprnt.c: 530: const char * cp;
  5980                           ;doprnt.c: 533: *ap = __va_start();
  5981                           
  5982                           ;incstack = 0
  5983  00F3FA  0E42               	movlw	low (?_printf+2)
  5984  00F3FC  6E4E               	movwf	printf@ap,c
  5985  00F3FE  0E00               	movlw	high (?_printf+2)
  5986  00F400  6E4F               	movwf	printf@ap+1,c
  5987                           
  5988                           ;doprnt.c: 536: while(c = *f++) {
  5989  00F402  EF89  F07E         	goto	l4446
  5990  00F406                     l4184:
  5991                           
  5992                           ;doprnt.c: 538: if(c != '%')
  5993  00F406  0E25               	movlw	37
  5994  00F408  1863               	xorwf	printf@c,w,c
  5995  00F40A  B4D8               	btfsc	status,2,c
  5996  00F40C  D005               	goto	l4188
  5997                           
  5998                           ;doprnt.c: 540: {
  5999                           ;doprnt.c: 541: (putch(c) );
  6000  00F40E  5063               	movf	printf@c,w,c
  6001  00F410  ECEB  F060         	call	_putch
  6002                           
  6003                           ;doprnt.c: 542: continue;
  6004  00F414  EF89  F07E         	goto	l4446
  6005  00F418                     l4188:
  6006                           
  6007                           ;doprnt.c: 543: }
  6008                           ;doprnt.c: 546: width = 0;
  6009  00F418  0E00               	movlw	0
  6010  00F41A  6E5D               	movwf	printf@width+1,c
  6011  00F41C  0E00               	movlw	0
  6012  00F41E  6E5C               	movwf	printf@width,c
  6013                           
  6014                           ;doprnt.c: 548: flag = 0;
  6015  00F420  0E00               	movlw	0
  6016  00F422  6E5B               	movwf	printf@flag+1,c
  6017  00F424  0E00               	movlw	0
  6018  00F426  6E5A               	movwf	printf@flag,c
  6019                           
  6020                           ;doprnt.c: 551: switch(*f) {
  6021                           
  6022                           ;doprnt.c: 550: for(;;) {
  6023  00F428  D005               	goto	l4194
  6024  00F42A                     l4190:
  6025                           
  6026                           ;doprnt.c: 580: flag |= 0x04;
  6027  00F42A  845A               	bsf	printf@flag,2,c
  6028                           
  6029                           ;doprnt.c: 581: f++;
  6030  00F42C  4A40               	infsnz	printf@f,f,c
  6031  00F42E  2A41               	incf	printf@f+1,f,c
  6032                           
  6033                           ;doprnt.c: 582: continue;
  6034  00F430  D001               	goto	l4194
  6035                           
  6036                           ;doprnt.c: 584: }
  6037  00F432  D00B               	goto	l4196
  6038  00F434                     l4194:
  6039  00F434  C040  FFF6         	movff	printf@f,tblptrl
  6040  00F438  C041  FFF7         	movff	printf@f+1,tblptrh
  6041  00F43C                     	if	0	;tblptru may be non-zero
  6042  00F43C                     	endif
  6043  00F43C                     	if	0	;tblptru may be non-zero
  6044  00F43C                     	endif
  6045  00F43C  0008               	tblrd		*
  6046  00F43E  50F5               	movf	tablat,w,c
  6047                           
  6048                           ; Switch size 1, requested type "space"
  6049                           ; Number of cases is 1, Range of values is 48 to 48
  6050                           ; switch strategies available:
  6051                           ; Name         Instructions Cycles
  6052                           ; simple_byte            4     3 (average)
  6053                           ;	Chosen strategy is simple_byte
  6054  00F440  0A30               	xorlw	48	; case 48
  6055  00F442  B4D8               	btfsc	status,2,c
  6056  00F444  D7F2               	goto	l4190
  6057                           
  6058                           ;doprnt.c: 585: break;
  6059  00F446  D001               	goto	l4196
  6060                           
  6061                           ;doprnt.c: 586: }
  6062  00F448  D7F5               	goto	l4194
  6063  00F44A                     l4196:
  6064                           
  6065                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6066  00F44A  C040  FFF6         	movff	printf@f,tblptrl
  6067  00F44E  C041  FFF7         	movff	printf@f+1,tblptrh
  6068  00F452                     	if	0	;tblptru may be non-zero
  6069  00F452                     	endif
  6070  00F452                     	if	0	;tblptru may be non-zero
  6071  00F452                     	endif
  6072  00F452  0008               	tblrd		*
  6073  00F454  50F5               	movf	tablat,w,c
  6074  00F456  EC60  F061         	call	_isdigit
  6075  00F45A  A0D8               	btfss	status,0,c
  6076  00F45C  D035               	goto	l4208
  6077                           
  6078                           ;doprnt.c: 598: width = 0;
  6079  00F45E  0E00               	movlw	0
  6080  00F460  6E5D               	movwf	printf@width+1,c
  6081  00F462  0E00               	movlw	0
  6082  00F464  6E5C               	movwf	printf@width,c
  6083  00F466  D000               	goto	l4200
  6084  00F468                     l4200:
  6085                           
  6086                           ;doprnt.c: 600: width *= 10;
  6087  00F468  C05C  F00F         	movff	printf@width,___wmul@multiplier
  6088  00F46C  C05D  F010         	movff	printf@width+1,___wmul@multiplier+1
  6089  00F470  0E00               	movlw	0
  6090  00F472  6E12               	movwf	___wmul@multiplicand+1,c
  6091  00F474  0E0A               	movlw	10
  6092  00F476  6E11               	movwf	___wmul@multiplicand,c
  6093  00F478  EC96  F061         	call	___wmul	;wreg free
  6094  00F47C  C00F  F05C         	movff	?___wmul,printf@width
  6095  00F480  C010  F05D         	movff	?___wmul+1,printf@width+1
  6096                           
  6097                           ;doprnt.c: 601: width += *f++ - '0';
  6098  00F484  0ED0               	movlw	208
  6099  00F486  6E45               	movwf	??_printf& (0+255),c
  6100  00F488  0EFF               	movlw	255
  6101  00F48A  6E46               	movwf	(??_printf+1)& (0+255),c
  6102  00F48C  C040  FFF6         	movff	printf@f,tblptrl
  6103  00F490  C041  FFF7         	movff	printf@f+1,tblptrh
  6104  00F494                     	if	0	;tblptru may be non-zero
  6105  00F494                     	endif
  6106  00F494                     	if	0	;tblptru may be non-zero
  6107  00F494                     	endif
  6108  00F494  0008               	tblrd		*
  6109  00F496  50F5               	movf	tablat,w,c
  6110  00F498  6E47               	movwf	(??_printf+2)& (0+255),c
  6111  00F49A  6A48               	clrf	(??_printf+3)& (0+255),c
  6112  00F49C  5045               	movf	??_printf,w,c
  6113  00F49E  2647               	addwf	??_printf+2,f,c
  6114  00F4A0  5046               	movf	??_printf+1,w,c
  6115  00F4A2  2248               	addwfc	??_printf+3,f,c
  6116  00F4A4  5047               	movf	??_printf+2,w,c
  6117  00F4A6  265C               	addwf	printf@width,f,c
  6118  00F4A8  5048               	movf	??_printf+3,w,c
  6119  00F4AA  225D               	addwfc	printf@width+1,f,c
  6120  00F4AC  4A40               	infsnz	printf@f,f,c
  6121  00F4AE  2A41               	incf	printf@f+1,f,c
  6122                           
  6123                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6124  00F4B0  C040  FFF6         	movff	printf@f,tblptrl
  6125  00F4B4  C041  FFF7         	movff	printf@f+1,tblptrh
  6126  00F4B8                     	if	0	;tblptru may be non-zero
  6127  00F4B8                     	endif
  6128  00F4B8                     	if	0	;tblptru may be non-zero
  6129  00F4B8                     	endif
  6130  00F4B8  0008               	tblrd		*
  6131  00F4BA  50F5               	movf	tablat,w,c
  6132  00F4BC  EC60  F061         	call	_isdigit
  6133  00F4C0  A0D8               	btfss	status,0,c
  6134  00F4C2  D002               	goto	l4208
  6135  00F4C4  D7D1               	goto	l4200
  6136  00F4C6  D000               	goto	l4208
  6137  00F4C8                     l4208:
  6138                           
  6139                           ;doprnt.c: 608: }
  6140                           ;doprnt.c: 611: if(*f == '.') {
  6141  00F4C8  C040  FFF6         	movff	printf@f,tblptrl
  6142  00F4CC  C041  FFF7         	movff	printf@f+1,tblptrh
  6143  00F4D0                     	if	0	;tblptru may be non-zero
  6144  00F4D0                     	endif
  6145  00F4D0                     	if	0	;tblptru may be non-zero
  6146  00F4D0                     	endif
  6147  00F4D0  0008               	tblrd		*
  6148  00F4D2  50F5               	movf	tablat,w,c
  6149  00F4D4  0A2E               	xorlw	46
  6150  00F4D6  A4D8               	btfss	status,2,c
  6151  00F4D8  D030               	goto	l4220
  6152                           
  6153                           ;doprnt.c: 612: flag |= 0x4000;
  6154  00F4DA  8C5B               	bsf	printf@flag+1,6,c
  6155                           
  6156                           ;doprnt.c: 613: f++;
  6157  00F4DC  4A40               	infsnz	printf@f,f,c
  6158  00F4DE  2A41               	incf	printf@f+1,f,c
  6159                           
  6160                           ;doprnt.c: 620: {
  6161                           ;doprnt.c: 621: prec = 0;
  6162  00F4E0  0E00               	movlw	0
  6163  00F4E2  6E62               	movwf	printf@prec+1,c
  6164  00F4E4  0E00               	movlw	0
  6165  00F4E6  6E61               	movwf	printf@prec,c
  6166                           
  6167                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6168  00F4E8  D01C               	goto	l4218
  6169  00F4EA                     l4214:
  6170                           
  6171                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6172  00F4EA  C061  F00F         	movff	printf@prec,___wmul@multiplier
  6173  00F4EE  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  6174  00F4F2  0E00               	movlw	0
  6175  00F4F4  6E12               	movwf	___wmul@multiplicand+1,c
  6176  00F4F6  0E0A               	movlw	10
  6177  00F4F8  6E11               	movwf	___wmul@multiplicand,c
  6178  00F4FA  EC96  F061         	call	___wmul	;wreg free
  6179  00F4FE  C040  FFF6         	movff	printf@f,tblptrl
  6180  00F502  C041  FFF7         	movff	printf@f+1,tblptrh
  6181  00F506                     	if	0	;tblptru may be non-zero
  6182  00F506                     	endif
  6183  00F506                     	if	0	;tblptru may be non-zero
  6184  00F506                     	endif
  6185  00F506  0008               	tblrd		*
  6186  00F508  50F5               	movf	tablat,w,c
  6187  00F50A  260F               	addwf	?___wmul,f,c
  6188  00F50C  0E00               	movlw	0
  6189  00F50E  2210               	addwfc	?___wmul+1,f,c
  6190  00F510  0ED0               	movlw	208
  6191  00F512  240F               	addwf	?___wmul,w,c
  6192  00F514  6E61               	movwf	printf@prec,c
  6193  00F516  0EFF               	movlw	255
  6194  00F518  2010               	addwfc	?___wmul+1,w,c
  6195  00F51A  6E62               	movwf	printf@prec+1,c
  6196  00F51C  4A40               	infsnz	printf@f,f,c
  6197  00F51E  2A41               	incf	printf@f+1,f,c
  6198  00F520  D000               	goto	l4218
  6199  00F522                     l4218:
  6200  00F522  C040  FFF6         	movff	printf@f,tblptrl
  6201  00F526  C041  FFF7         	movff	printf@f+1,tblptrh
  6202  00F52A                     	if	0	;tblptru may be non-zero
  6203  00F52A                     	endif
  6204  00F52A                     	if	0	;tblptru may be non-zero
  6205  00F52A                     	endif
  6206  00F52A  0008               	tblrd		*
  6207  00F52C  50F5               	movf	tablat,w,c
  6208  00F52E  EC60  F061         	call	_isdigit
  6209  00F532  A0D8               	btfss	status,0,c
  6210  00F534  D00D               	goto	l4228
  6211  00F536  D7D9               	goto	l4214
  6212                           
  6213                           ;doprnt.c: 624: }
  6214                           ;doprnt.c: 625: } else {
  6215  00F538  D00B               	goto	l4228
  6216  00F53A                     l4220:
  6217                           
  6218                           ;doprnt.c: 626: prec = 0;
  6219  00F53A  0E00               	movlw	0
  6220  00F53C  6E62               	movwf	printf@prec+1,c
  6221  00F53E  0E00               	movlw	0
  6222  00F540  6E61               	movwf	printf@prec,c
  6223                           
  6224                           ;doprnt.c: 628: flag |= 0x1000;
  6225  00F542  885B               	bsf	printf@flag+1,4,c
  6226                           
  6227                           ;doprnt.c: 630: }
  6228                           ;doprnt.c: 635: switch(c = *f++) {
  6229  00F544  D005               	goto	l4228
  6230                           
  6231                           ;doprnt.c: 638: goto alldone;
  6232                           
  6233                           ;doprnt.c: 637: case 0:
  6234  00F546  D3F4               	goto	l650
  6235  00F548                     l4224:
  6236                           
  6237                           ;doprnt.c: 663: flag |= 0x400;
  6238  00F548  845B               	bsf	printf@flag+1,2,c
  6239                           
  6240                           ;doprnt.c: 664: break;
  6241  00F54A  D013               	goto	l4230
  6242                           
  6243                           ;doprnt.c: 813: continue;
  6244                           
  6245                           ;doprnt.c: 802: default:
  6246  00F54C  D3E2               	goto	l4446
  6247                           
  6248                           ;doprnt.c: 822: }
  6249  00F54E  D011               	goto	l4230
  6250  00F550                     l4228:
  6251  00F550  C040  FFF6         	movff	printf@f,tblptrl
  6252  00F554  C041  FFF7         	movff	printf@f+1,tblptrh
  6253  00F558  4A40               	infsnz	printf@f,f,c
  6254  00F55A  2A41               	incf	printf@f+1,f,c
  6255  00F55C                     	if	0	;tblptru may be non-zero
  6256  00F55C                     	endif
  6257  00F55C                     	if	0	;tblptru may be non-zero
  6258  00F55C                     	endif
  6259  00F55C  0008               	tblrd		*
  6260  00F55E  CFF5 F063          	movff	tablat,printf@c
  6261  00F562  5063               	movf	printf@c,w,c
  6262                           
  6263                           ; Switch size 1, requested type "space"
  6264                           ; Number of cases is 2, Range of values is 0 to 102
  6265                           ; switch strategies available:
  6266                           ; Name         Instructions Cycles
  6267                           ; simple_byte            7     4 (average)
  6268                           ;	Chosen strategy is simple_byte
  6269  00F564  0A00               	xorlw	0	; case 0
  6270  00F566  B4D8               	btfsc	status,2,c
  6271  00F568  D3E3               	goto	l650
  6272  00F56A  0A66               	xorlw	102	; case 102
  6273  00F56C  B4D8               	btfsc	status,2,c
  6274  00F56E  D7EC               	goto	l4224
  6275  00F570  D3D0               	goto	l4446
  6276  00F572                     l4230:
  6277                           
  6278                           ;doprnt.c: 825: if(flag & (0x700)) {
  6279  00F572  0E07               	movlw	7
  6280  00F574  145B               	andwf	printf@flag+1,w,c
  6281  00F576  B4D8               	btfsc	status,2,c
  6282  00F578  D323               	goto	l4390
  6283                           
  6284                           ;doprnt.c: 827: if(flag & 0x1000)
  6285  00F57A  A85B               	btfss	printf@flag+1,4,c
  6286  00F57C  D005               	goto	l4236
  6287                           
  6288                           ;doprnt.c: 829: prec = 6;
  6289  00F57E  0E00               	movlw	0
  6290  00F580  6E62               	movwf	printf@prec+1,c
  6291  00F582  0E06               	movlw	6
  6292  00F584  6E61               	movwf	printf@prec,c
  6293  00F586  D000               	goto	l4236
  6294  00F588                     l4236:
  6295                           
  6296                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6297  00F588  C04E  FFD9         	movff	printf@ap,fsr2l
  6298  00F58C  C04F  FFDA         	movff	printf@ap+1,fsr2h
  6299  00F590  CFDE F05E          	movff	postinc2,printf@fval
  6300  00F594  CFDE F05F          	movff	postinc2,printf@fval+1
  6301  00F598  CFDD F060          	movff	postdec2,printf@fval+2
  6302  00F59C  0E03               	movlw	3
  6303  00F59E  264E               	addwf	printf@ap,f,c
  6304  00F5A0  0E00               	movlw	0
  6305  00F5A2  224F               	addwfc	printf@ap+1,f,c
  6306                           
  6307                           ;doprnt.c: 831: if(fval < 0.0) {
  6308  00F5A4  AE60               	btfss	printf@fval+2,7,c
  6309  00F5A6  D011               	goto	l4246
  6310                           
  6311                           ;doprnt.c: 832: fval = -fval;
  6312  00F5A8  C05E  F001         	movff	printf@fval,___ftneg@f1
  6313  00F5AC  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  6314  00F5B0  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  6315  00F5B4  EC71  F061         	call	___ftneg	;wreg free
  6316  00F5B8  C001  F05E         	movff	?___ftneg,printf@fval
  6317  00F5BC  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  6318  00F5C0  C003  F060         	movff	?___ftneg+2,printf@fval+2
  6319                           
  6320                           ;doprnt.c: 833: flag |= 0x03;
  6321  00F5C4  0E03               	movlw	3
  6322  00F5C6  125A               	iorwf	printf@flag,f,c
  6323  00F5C8  D000               	goto	l4246
  6324  00F5CA                     l4246:
  6325                           
  6326                           ;doprnt.c: 834: }
  6327                           ;doprnt.c: 835: exp = 0;
  6328  00F5CA  0E00               	movlw	0
  6329  00F5CC  6E59               	movwf	printf@exp+1,c
  6330  00F5CE  0E00               	movlw	0
  6331  00F5D0  6E58               	movwf	printf@exp,c
  6332                           
  6333                           ;doprnt.c: 836: if( fval!=0) {
  6334  00F5D2  505E               	movf	printf@fval,w,c
  6335  00F5D4  105F               	iorwf	printf@fval+1,w,c
  6336  00F5D6  1060               	iorwf	printf@fval+2,w,c
  6337  00F5D8  B4D8               	btfsc	status,2,c
  6338  00F5DA  D085               	goto	l4274
  6339                           
  6340                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6341  00F5DC  0E82               	movlw	130
  6342  00F5DE  6E45               	movwf	??_printf& (0+255),c
  6343  00F5E0  0EFF               	movlw	255
  6344  00F5E2  6E46               	movwf	(??_printf+1)& (0+255),c
  6345  00F5E4  C05E  F047         	movff	printf@fval,??_printf+2
  6346  00F5E8  C05F  F048         	movff	printf@fval+1,??_printf+3
  6347  00F5EC  C060  F049         	movff	printf@fval+2,??_printf+4
  6348  00F5F0  C061  F04A         	movff	printf@fval+3,??_printf+5
  6349  00F5F4  0E10               	movlw	16
  6350  00F5F6  D005               	goto	u3830
  6351  00F5F8                     u3835:
  6352  00F5F8  90D8               	bcf	status,0,c
  6353  00F5FA  324A               	rrcf	??_printf+5,f,c
  6354  00F5FC  3249               	rrcf	??_printf+4,f,c
  6355  00F5FE  3248               	rrcf	??_printf+3,f,c
  6356  00F600  3247               	rrcf	??_printf+2,f,c
  6357  00F602                     u3830:
  6358  00F602  2EE8               	decfsz	wreg,f,c
  6359  00F604  D7F9               	goto	u3835
  6360  00F606  5047               	movf	??_printf+2,w,c
  6361  00F608  2445               	addwf	??_printf,w,c
  6362  00F60A  6E58               	movwf	printf@exp,c
  6363  00F60C  0E00               	movlw	0
  6364  00F60E  2046               	addwfc	??_printf+1,w,c
  6365  00F610  6E59               	movwf	printf@exp+1,c
  6366                           
  6367                           ;doprnt.c: 838: exp--;
  6368  00F612  0658               	decf	printf@exp,f,c
  6369  00F614  A0D8               	btfss	status,0,c
  6370  00F616  0659               	decf	printf@exp+1,f,c
  6371                           
  6372                           ;doprnt.c: 839: exp *= 3;
  6373  00F618  C058  F00F         	movff	printf@exp,___wmul@multiplier
  6374  00F61C  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  6375  00F620  0E00               	movlw	0
  6376  00F622  6E12               	movwf	___wmul@multiplicand+1,c
  6377  00F624  0E03               	movlw	3
  6378  00F626  6E11               	movwf	___wmul@multiplicand,c
  6379  00F628  EC96  F061         	call	___wmul	;wreg free
  6380  00F62C  C00F  F058         	movff	?___wmul,printf@exp
  6381  00F630  C010  F059         	movff	?___wmul+1,printf@exp+1
  6382                           
  6383                           ;doprnt.c: 840: exp /= 10;
  6384  00F634  C058  F007         	movff	printf@exp,___awdiv@dividend
  6385  00F638  C059  F008         	movff	printf@exp+1,___awdiv@dividend+1
  6386  00F63C  0E00               	movlw	0
  6387  00F63E  6E0A               	movwf	___awdiv@divisor+1,c
  6388  00F640  0E0A               	movlw	10
  6389  00F642  6E09               	movwf	___awdiv@divisor,c
  6390  00F644  EC2C  F066         	call	___awdiv	;wreg free
  6391  00F648  C007  F058         	movff	?___awdiv,printf@exp
  6392  00F64C  C008  F059         	movff	?___awdiv+1,printf@exp+1
  6393                           
  6394                           ;doprnt.c: 841: if(exp < 0)
  6395  00F650  AE59               	btfss	printf@exp+1,7,c
  6396  00F652  D004               	goto	l4262
  6397                           
  6398                           ;doprnt.c: 842: exp--;
  6399  00F654  0658               	decf	printf@exp,f,c
  6400  00F656  A0D8               	btfss	status,0,c
  6401  00F658  0659               	decf	printf@exp+1,f,c
  6402  00F65A  D000               	goto	l4262
  6403  00F65C                     l4262:
  6404                           
  6405                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6406  00F65C  5058               	movf	printf@exp,w,c
  6407  00F65E  0800               	sublw	0
  6408  00F660  EC7E  F074         	call	_scale
  6409  00F664  C024  F054         	movff	?_scale,printf@tmpval
  6410  00F668  C025  F055         	movff	?_scale+1,printf@tmpval+1
  6411  00F66C  C026  F056         	movff	?_scale+2,printf@tmpval+2
  6412                           
  6413                           ;doprnt.c: 847: tmpval.integ *= fval;
  6414  00F670  C054  F015         	movff	printf@tmpval,___ftmul@f1
  6415  00F674  C055  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  6416  00F678  C056  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  6417  00F67C  C05E  F018         	movff	printf@fval,___ftmul@f2
  6418  00F680  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  6419  00F684  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  6420  00F688  ECD6  F06A         	call	___ftmul	;wreg free
  6421  00F68C  C015  F054         	movff	?___ftmul,printf@tmpval
  6422  00F690  C016  F055         	movff	?___ftmul+1,printf@tmpval+1
  6423  00F694  C017  F056         	movff	?___ftmul+2,printf@tmpval+2
  6424                           
  6425                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6426  00F698  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6427  00F69C  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6428  00F6A0  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6429  00F6A4  0E00               	movlw	0
  6430  00F6A6  6E04               	movwf	___ftge@ff2,c
  6431  00F6A8  0E80               	movlw	128
  6432  00F6AA  6E05               	movwf	___ftge@ff2+1,c
  6433  00F6AC  0E3F               	movlw	63
  6434  00F6AE  6E06               	movwf	___ftge@ff2+2,c
  6435  00F6B0  EC77  F066         	call	___ftge	;wreg free
  6436  00F6B4  B0D8               	btfsc	status,0,c
  6437  00F6B6  D004               	goto	l4270
  6438                           
  6439                           ;doprnt.c: 849: exp--;
  6440  00F6B8  0658               	decf	printf@exp,f,c
  6441  00F6BA  A0D8               	btfss	status,0,c
  6442  00F6BC  0659               	decf	printf@exp+1,f,c
  6443  00F6BE  D013               	goto	l4274
  6444  00F6C0                     l4270:
  6445                           
  6446                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6447  00F6C0  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6448  00F6C4  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6449  00F6C8  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6450  00F6CC  0E00               	movlw	0
  6451  00F6CE  6E04               	movwf	___ftge@ff2,c
  6452  00F6D0  0E20               	movlw	32
  6453  00F6D2  6E05               	movwf	___ftge@ff2+1,c
  6454  00F6D4  0E41               	movlw	65
  6455  00F6D6  6E06               	movwf	___ftge@ff2+2,c
  6456  00F6D8  EC77  F066         	call	___ftge	;wreg free
  6457  00F6DC  A0D8               	btfss	status,0,c
  6458  00F6DE  D003               	goto	l4274
  6459                           
  6460                           ;doprnt.c: 851: exp++;
  6461  00F6E0  4A58               	infsnz	printf@exp,f,c
  6462  00F6E2  2A59               	incf	printf@exp+1,f,c
  6463  00F6E4  D000               	goto	l4274
  6464  00F6E6                     l4274:
  6465                           
  6466                           ;doprnt.c: 852: }
  6467                           ;doprnt.c: 1112: if(prec <= 12)
  6468  00F6E6  BE62               	btfsc	printf@prec+1,7,c
  6469  00F6E8  D006               	goto	l4276
  6470  00F6EA  5062               	movf	printf@prec+1,w,c
  6471  00F6EC  E11C               	bnz	l4278
  6472  00F6EE  0E0D               	movlw	13
  6473  00F6F0  5C61               	subwf	printf@prec,w,c
  6474  00F6F2  B0D8               	btfsc	status,0,c
  6475  00F6F4  D018               	goto	l4278
  6476  00F6F6                     l4276:
  6477                           
  6478                           ;doprnt.c: 1113: fval += fround(prec);
  6479  00F6F6  C05E  F02E         	movff	printf@fval,___ftadd@f1
  6480  00F6FA  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  6481  00F6FE  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  6482  00F702  5061               	movf	printf@prec,w,c
  6483  00F704  ECAB  F071         	call	_fround
  6484  00F708  C024  F031         	movff	?_fround,___ftadd@f2
  6485  00F70C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  6486  00F710  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  6487  00F714  ECDA  F06F         	call	___ftadd	;wreg free
  6488  00F718  C02E  F05E         	movff	?___ftadd,printf@fval
  6489  00F71C  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  6490  00F720  C030  F060         	movff	?___ftadd+2,printf@fval+2
  6491  00F724  D000               	goto	l4278
  6492  00F726                     l4278:
  6493                           
  6494                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6495  00F726  BE59               	btfsc	printf@exp+1,7,c
  6496  00F728  D006               	goto	l4280
  6497  00F72A  5059               	movf	printf@exp+1,w,c
  6498  00F72C  E120               	bnz	l4286
  6499  00F72E  0E0A               	movlw	10
  6500  00F730  5C58               	subwf	printf@exp,w,c
  6501  00F732  B0D8               	btfsc	status,0,c
  6502  00F734  D01C               	goto	l4286
  6503  00F736                     l4280:
  6504  00F736  505E               	movf	printf@fval,w,c
  6505  00F738  105F               	iorwf	printf@fval+1,w,c
  6506  00F73A  1060               	iorwf	printf@fval+2,w,c
  6507  00F73C  B4D8               	btfsc	status,2,c
  6508  00F73E  D06D               	goto	l4300
  6509  00F740  C05E  F02B         	movff	printf@fval,___fttol@f1
  6510  00F744  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  6511  00F748  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  6512  00F74C  EC76  F069         	call	___fttol	;wreg free
  6513  00F750  502B               	movf	?___fttol,w,c
  6514  00F752  102C               	iorwf	?___fttol+1,w,c
  6515  00F754  102D               	iorwf	?___fttol+2,w,c
  6516  00F756  102E               	iorwf	?___fttol+3,w,c
  6517  00F758  B4D8               	btfsc	status,2,c
  6518  00F75A  BE59               	btfsc	printf@exp+1,7,c
  6519  00F75C  D05E               	goto	l4300
  6520  00F75E  5059               	movf	printf@exp+1,w,c
  6521  00F760  E106               	bnz	l4286
  6522  00F762  0E02               	movlw	2
  6523  00F764  5C58               	subwf	printf@exp,w,c
  6524  00F766  B0D8               	btfsc	status,0,c
  6525  00F768  D002               	goto	l4286
  6526  00F76A  D057               	goto	l4300
  6527  00F76C  D000               	goto	l4286
  6528  00F76E                     l4286:
  6529                           
  6530                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6531  00F76E  C054  F001         	movff	printf@tmpval,___ftge@ff1
  6532  00F772  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  6533  00F776  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  6534  00F77A  0E70               	movlw	112
  6535  00F77C  6E04               	movwf	___ftge@ff2,c
  6536  00F77E  0E89               	movlw	137
  6537  00F780  6E05               	movwf	___ftge@ff2+1,c
  6538  00F782  0E40               	movlw	64
  6539  00F784  6E06               	movwf	___ftge@ff2+2,c
  6540  00F786  EC77  F066         	call	___ftge	;wreg free
  6541  00F78A  B0D8               	btfsc	status,0,c
  6542  00F78C  D002               	goto	l4290
  6543                           
  6544                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6545  00F78E  0EF7               	movlw	247
  6546  00F790  D001               	goto	L7
  6547  00F792                     l4290:
  6548                           
  6549                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6550  00F792  0EF8               	movlw	248
  6551  00F794                     L7:
  6552  00F794  2658               	addwf	printf@exp,f,c
  6553  00F796  0EFF               	movlw	255
  6554  00F798  2259               	addwfc	printf@exp+1,f,c
  6555  00F79A  D000               	goto	l4292
  6556  00F79C                     l4292:
  6557                           
  6558                           ;doprnt.c: 1124: }
  6559                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6560  00F79C  5058               	movf	printf@exp,w,c
  6561  00F79E  EC7E  F074         	call	_scale
  6562  00F7A2  C024  F054         	movff	?_scale,printf@tmpval
  6563  00F7A6  C025  F055         	movff	?_scale+1,printf@tmpval+1
  6564  00F7AA  C026  F056         	movff	?_scale+2,printf@tmpval+2
  6565                           
  6566                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6567  00F7AE  D017               	goto	l4296
  6568  00F7B0  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  6569  00F7B4  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  6570  00F7B8  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  6571  00F7BC  C054  F004         	movff	printf@tmpval,__div_to_l_@f2
  6572  00F7C0  C055  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  6573  00F7C4  C056  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  6574  00F7C8  EC52  F06B         	call	__div_to_l_	;wreg free
  6575  00F7CC  C001  F050         	movff	?__div_to_l_,printf@val
  6576  00F7D0  C002  F051         	movff	?__div_to_l_+1,printf@val+1
  6577  00F7D4  C003  F052         	movff	?__div_to_l_+2,printf@val+2
  6578  00F7D8  C004  F053         	movff	?__div_to_l_+3,printf@val+3
  6579  00F7DC  D017               	goto	l4298
  6580  00F7DE                     l4296:
  6581  00F7DE  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  6582  00F7E2  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6583  00F7E6  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6584  00F7EA  C054  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  6585  00F7EE  C055  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6586  00F7F2  C056  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6587  00F7F6  ECD7  F06B         	call	__tdiv_to_l_	;wreg free
  6588  00F7FA  C001  F050         	movff	?__tdiv_to_l_,printf@val
  6589  00F7FE  C002  F051         	movff	?__tdiv_to_l_+1,printf@val+1
  6590  00F802  C003  F052         	movff	?__tdiv_to_l_+2,printf@val+2
  6591  00F806  C004  F053         	movff	?__tdiv_to_l_+3,printf@val+3
  6592  00F80A  D000               	goto	l4298
  6593  00F80C                     l4298:
  6594                           
  6595                           ;doprnt.c: 1129: fval = 0.0;
  6596  00F80C  0E00               	movlw	0
  6597  00F80E  6E5E               	movwf	printf@fval,c
  6598  00F810  0E00               	movlw	0
  6599  00F812  6E5F               	movwf	printf@fval+1,c
  6600  00F814  0E00               	movlw	0
  6601  00F816  6E60               	movwf	printf@fval+2,c
  6602                           
  6603                           ;doprnt.c: 1130: } else {
  6604  00F818  D033               	goto	l4304
  6605  00F81A                     l4300:
  6606                           
  6607                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6608  00F81A  C05E  F02B         	movff	printf@fval,___fttol@f1
  6609  00F81E  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  6610  00F822  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  6611  00F826  EC76  F069         	call	___fttol	;wreg free
  6612  00F82A  C02B  F050         	movff	?___fttol,printf@val
  6613  00F82E  C02C  F051         	movff	?___fttol+1,printf@val+1
  6614  00F832  C02D  F052         	movff	?___fttol+2,printf@val+2
  6615  00F836  C02E  F053         	movff	?___fttol+3,printf@val+3
  6616                           
  6617                           ;doprnt.c: 1132: fval -= (double)val;
  6618  00F83A  C05E  F03A         	movff	printf@fval,___ftsub@f1
  6619  00F83E  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  6620  00F842  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  6621  00F846  C050  F009         	movff	printf@val,___lltoft@c
  6622  00F84A  C051  F00A         	movff	printf@val+1,___lltoft@c+1
  6623  00F84E  C052  F00B         	movff	printf@val+2,___lltoft@c+2
  6624  00F852  C053  F00C         	movff	printf@val+3,___lltoft@c+3
  6625  00F856  ECD8  F063         	call	___lltoft	;wreg free
  6626  00F85A  C009  F03D         	movff	?___lltoft,___ftsub@f2
  6627  00F85E  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  6628  00F862  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  6629  00F866  EC18  F063         	call	___ftsub	;wreg free
  6630  00F86A  C03A  F05E         	movff	?___ftsub,printf@fval
  6631  00F86E  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  6632  00F872  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  6633                           
  6634                           ;doprnt.c: 1133: exp = 0;
  6635  00F876  0E00               	movlw	0
  6636  00F878  6E59               	movwf	printf@exp+1,c
  6637  00F87A  0E00               	movlw	0
  6638  00F87C  6E58               	movwf	printf@exp,c
  6639  00F87E  D000               	goto	l4304
  6640  00F880                     l4304:
  6641                           
  6642                           ;doprnt.c: 1134: }
  6643                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6644  00F880  0E01               	movlw	1
  6645  00F882  6E63               	movwf	printf@c,c
  6646  00F884                     l4306:
  6647  00F884  0E0A               	movlw	10
  6648  00F886  1863               	xorwf	printf@c,w,c
  6649  00F888  B4D8               	btfsc	status,2,c
  6650  00F88A  D01C               	goto	l4318
  6651  00F88C  D001               	goto	l4310
  6652  00F88E  D01A               	goto	l4318
  6653  00F890                     l4310:
  6654                           
  6655                           ;doprnt.c: 1137: if(val < dpowers[c])
  6656  00F890  5063               	movf	printf@c,w,c
  6657  00F892  0D04               	mullw	4
  6658  00F894  0E0E               	movlw	low _dpowers
  6659  00F896  24F3               	addwf	prodl,w,c
  6660  00F898  6EF6               	movwf	tblptrl,c
  6661  00F89A  0EFF               	movlw	high _dpowers
  6662  00F89C  20F4               	addwfc	prodh,w,c
  6663  00F89E  6EF7               	movwf	tblptrh,c
  6664  00F8A0                     	if	0	;There are less than 3 active tblptr bytes
  6665  00F8A0                     	endif
  6666  00F8A0  0009               	tblrd		*+
  6667  00F8A2  50F5               	movf	tablat,w,c
  6668  00F8A4  5C50               	subwf	printf@val,w,c
  6669  00F8A6  0009               	tblrd		*+
  6670  00F8A8  50F5               	movf	tablat,w,c
  6671  00F8AA  5851               	subwfb	printf@val+1,w,c
  6672  00F8AC  0009               	tblrd		*+
  6673  00F8AE  50F5               	movf	tablat,w,c
  6674  00F8B0  5852               	subwfb	printf@val+2,w,c
  6675  00F8B2  0009               	tblrd		*+
  6676  00F8B4  50F5               	movf	tablat,w,c
  6677  00F8B6  5853               	subwfb	printf@val+3,w,c
  6678  00F8B8  A0D8               	btfss	status,0,c
  6679  00F8BA  D004               	goto	l4318
  6680  00F8BC  D001               	goto	l4314
  6681                           
  6682                           ;doprnt.c: 1138: break;
  6683  00F8BE  D002               	goto	l4318
  6684  00F8C0                     l4314:
  6685  00F8C0  2A63               	incf	printf@c,f,c
  6686  00F8C2  D7E0               	goto	l4306
  6687  00F8C4                     l4318:
  6688                           
  6689                           ;doprnt.c: 1142: width -= prec + c + exp;
  6690  00F8C4  C063  F045         	movff	printf@c,??_printf
  6691  00F8C8  6A46               	clrf	(??_printf+1)& (0+255),c
  6692  00F8CA  BE45               	btfsc	??_printf& (0+255),7,c
  6693  00F8CC  0646               	decf	(??_printf+1)& (0+255),f,c
  6694  00F8CE  5061               	movf	printf@prec,w,c
  6695  00F8D0  2645               	addwf	??_printf,f,c
  6696  00F8D2  5062               	movf	printf@prec+1,w,c
  6697  00F8D4  2246               	addwfc	??_printf+1,f,c
  6698  00F8D6  5058               	movf	printf@exp,w,c
  6699  00F8D8  2645               	addwf	??_printf,f,c
  6700  00F8DA  5059               	movf	printf@exp+1,w,c
  6701  00F8DC  2246               	addwfc	??_printf+1,f,c
  6702  00F8DE  5045               	movf	??_printf,w,c
  6703  00F8E0  5E5C               	subwf	printf@width,f,c
  6704  00F8E2  5046               	movf	??_printf+1,w,c
  6705  00F8E4  5A5D               	subwfb	printf@width+1,f,c
  6706                           
  6707                           ;doprnt.c: 1143: if(
  6708                           ;doprnt.c: 1147: prec)
  6709  00F8E6  5061               	movf	printf@prec,w,c
  6710  00F8E8  1062               	iorwf	printf@prec+1,w,c
  6711  00F8EA  B4D8               	btfsc	status,2,c
  6712  00F8EC  D004               	goto	l4322
  6713                           
  6714                           ;doprnt.c: 1148: width--;
  6715  00F8EE  065C               	decf	printf@width,f,c
  6716  00F8F0  A0D8               	btfss	status,0,c
  6717  00F8F2  065D               	decf	printf@width+1,f,c
  6718  00F8F4  D000               	goto	l4322
  6719  00F8F6                     l4322:
  6720                           
  6721                           ;doprnt.c: 1149: if(flag & 0x03)
  6722  00F8F6  0E03               	movlw	3
  6723  00F8F8  145A               	andwf	printf@flag,w,c
  6724  00F8FA  6E45               	movwf	??_printf& (0+255),c
  6725  00F8FC  0E00               	movlw	0
  6726  00F8FE  145B               	andwf	printf@flag+1,w,c
  6727  00F900  6E46               	movwf	(??_printf+1)& (0+255),c
  6728  00F902  5045               	movf	??_printf,w,c
  6729  00F904  1046               	iorwf	??_printf+1,w,c
  6730  00F906  B4D8               	btfsc	status,2,c
  6731  00F908  D004               	goto	l4326
  6732                           
  6733                           ;doprnt.c: 1150: width--;
  6734  00F90A  065C               	decf	printf@width,f,c
  6735  00F90C  A0D8               	btfss	status,0,c
  6736  00F90E  065D               	decf	printf@width+1,f,c
  6737  00F910  D000               	goto	l4326
  6738  00F912                     l4326:
  6739                           
  6740                           ;doprnt.c: 1153: if(flag & 0x04) {
  6741  00F912  A45A               	btfss	printf@flag,2,c
  6742  00F914  D026               	goto	l4342
  6743                           
  6744                           ;doprnt.c: 1157: if(flag & 0x03)
  6745  00F916  0E03               	movlw	3
  6746  00F918  145A               	andwf	printf@flag,w,c
  6747  00F91A  6E45               	movwf	??_printf& (0+255),c
  6748  00F91C  0E00               	movlw	0
  6749  00F91E  145B               	andwf	printf@flag+1,w,c
  6750  00F920  6E46               	movwf	(??_printf+1)& (0+255),c
  6751  00F922  5045               	movf	??_printf,w,c
  6752  00F924  1046               	iorwf	??_printf+1,w,c
  6753  00F926  B4D8               	btfsc	status,2,c
  6754  00F928  D00B               	goto	l4336
  6755                           
  6756                           ;doprnt.c: 1159: (putch('-') );
  6757  00F92A  0E2D               	movlw	45
  6758  00F92C  ECEB  F060         	call	_putch
  6759                           
  6760                           ;doprnt.c: 1168: while(width > 0) {
  6761  00F930  D007               	goto	l4336
  6762  00F932                     l4332:
  6763                           
  6764                           ;doprnt.c: 1169: (putch('0') );
  6765  00F932  0E30               	movlw	48
  6766  00F934  ECEB  F060         	call	_putch
  6767                           
  6768                           ;doprnt.c: 1170: width--;
  6769  00F938  065C               	decf	printf@width,f,c
  6770  00F93A  A0D8               	btfss	status,0,c
  6771  00F93C  065D               	decf	printf@width+1,f,c
  6772  00F93E  D000               	goto	l4336
  6773  00F940                     l4336:
  6774  00F940  BE5D               	btfsc	printf@width+1,7,c
  6775  00F942  D069               	goto	l4354
  6776  00F944  505D               	movf	printf@width+1,w,c
  6777  00F946  E1F5               	bnz	l4332
  6778  00F948  045C               	decf	printf@width,w,c
  6779  00F94A  A0D8               	btfss	status,0,c
  6780  00F94C  D064               	goto	l4354
  6781  00F94E  D7F1               	goto	l4332
  6782                           
  6783                           ;doprnt.c: 1171: }
  6784                           ;doprnt.c: 1173: } else
  6785  00F950  D062               	goto	l4354
  6786                           
  6787                           ;doprnt.c: 1175: {
  6788                           ;doprnt.c: 1180: while(width > 0) {
  6789  00F952  D007               	goto	l4342
  6790  00F954                     l4338:
  6791                           
  6792                           ;doprnt.c: 1181: (putch(' ') );
  6793  00F954  0E20               	movlw	32
  6794  00F956  ECEB  F060         	call	_putch
  6795                           
  6796                           ;doprnt.c: 1182: width--;
  6797  00F95A  065C               	decf	printf@width,f,c
  6798  00F95C  A0D8               	btfss	status,0,c
  6799  00F95E  065D               	decf	printf@width+1,f,c
  6800  00F960  D000               	goto	l4342
  6801  00F962                     l4342:
  6802  00F962  BE5D               	btfsc	printf@width+1,7,c
  6803  00F964  D005               	goto	l4344
  6804  00F966  505D               	movf	printf@width+1,w,c
  6805  00F968  E1F5               	bnz	l4338
  6806  00F96A  045C               	decf	printf@width,w,c
  6807  00F96C  B0D8               	btfsc	status,0,c
  6808  00F96E  D7F2               	goto	l4338
  6809  00F970                     l4344:
  6810                           
  6811                           ;doprnt.c: 1183: }
  6812                           ;doprnt.c: 1188: if(flag & 0x03)
  6813  00F970  0E03               	movlw	3
  6814  00F972  145A               	andwf	printf@flag,w,c
  6815  00F974  6E45               	movwf	??_printf& (0+255),c
  6816  00F976  0E00               	movlw	0
  6817  00F978  145B               	andwf	printf@flag+1,w,c
  6818  00F97A  6E46               	movwf	(??_printf+1)& (0+255),c
  6819  00F97C  5045               	movf	??_printf,w,c
  6820  00F97E  1046               	iorwf	??_printf+1,w,c
  6821  00F980  B4D8               	btfsc	status,2,c
  6822  00F982  D049               	goto	l4354
  6823                           
  6824                           ;doprnt.c: 1190: (putch('-') );
  6825  00F984  0E2D               	movlw	45
  6826  00F986  ECEB  F060         	call	_putch
  6827                           
  6828                           ;doprnt.c: 1195: }
  6829                           ;doprnt.c: 1196: while(c--) {
  6830  00F98A  D045               	goto	l4354
  6831  00F98C                     l4348:
  6832                           
  6833                           ;doprnt.c: 1200: {
  6834                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6835  00F98C  C050  F001         	movff	printf@val,___lldiv@dividend
  6836  00F990  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  6837  00F994  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  6838  00F998  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  6839  00F99C  5063               	movf	printf@c,w,c
  6840  00F99E  0D04               	mullw	4
  6841  00F9A0  0E0E               	movlw	low _dpowers
  6842  00F9A2  24F3               	addwf	prodl,w,c
  6843  00F9A4  6EF6               	movwf	tblptrl,c
  6844  00F9A6  0EFF               	movlw	high _dpowers
  6845  00F9A8  20F4               	addwfc	prodh,w,c
  6846  00F9AA  6EF7               	movwf	tblptrh,c
  6847  00F9AC                     	if	0	;There are less than 3 active tblptr bytes
  6848  00F9AC                     	endif
  6849  00F9AC  0009               	tblrd		*+
  6850  00F9AE  CFF5 F005          	movff	tablat,___lldiv@divisor
  6851  00F9B2  0009               	tblrd		*+
  6852  00F9B4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6853  00F9B8  0009               	tblrd		*+
  6854  00F9BA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6855  00F9BE  000A               	tblrd		*-
  6856  00F9C0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6857  00F9C4  ECE6  F065         	call	___lldiv	;wreg free
  6858  00F9C8  C001  F054         	movff	?___lldiv,printf@tmpval
  6859  00F9CC  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  6860  00F9D0  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  6861  00F9D4  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  6862                           
  6863                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6864  00F9D8  C054  F001         	movff	printf@tmpval,___llmod@dividend
  6865  00F9DC  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  6866  00F9E0  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  6867  00F9E4  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  6868  00F9E8  0E0A               	movlw	10
  6869  00F9EA  6E05               	movwf	___llmod@divisor,c
  6870  00F9EC  0E00               	movlw	0
  6871  00F9EE  6E06               	movwf	___llmod@divisor+1,c
  6872  00F9F0  0E00               	movlw	0
  6873  00F9F2  6E07               	movwf	___llmod@divisor+2,c
  6874  00F9F4  0E00               	movlw	0
  6875  00F9F6  6E08               	movwf	___llmod@divisor+3,c
  6876  00F9F8  EC6C  F064         	call	___llmod	;wreg free
  6877  00F9FC  C001  F054         	movff	?___llmod,printf@tmpval
  6878  00FA00  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  6879  00FA04  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  6880  00FA08  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  6881                           
  6882                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6883  00FA0C  5054               	movf	printf@tmpval,w,c
  6884  00FA0E  0F30               	addlw	48
  6885  00FA10  ECEB  F060         	call	_putch
  6886  00FA14  D000               	goto	l4354
  6887  00FA16                     l4354:
  6888  00FA16  0663               	decf	printf@c,f,c
  6889  00FA18  2863               	incf	printf@c,w,c
  6890  00FA1A  B4D8               	btfsc	status,2,c
  6891  00FA1C  D009               	goto	l4360
  6892  00FA1E  D7B6               	goto	l4348
  6893                           
  6894                           ;doprnt.c: 1204: }
  6895                           ;doprnt.c: 1206: }
  6896                           ;doprnt.c: 1207: while(exp > 0) {
  6897  00FA20  D007               	goto	l4360
  6898  00FA22                     l4356:
  6899                           
  6900                           ;doprnt.c: 1208: (putch('0') );
  6901  00FA22  0E30               	movlw	48
  6902  00FA24  ECEB  F060         	call	_putch
  6903                           
  6904                           ;doprnt.c: 1209: exp--;
  6905  00FA28  0658               	decf	printf@exp,f,c
  6906  00FA2A  A0D8               	btfss	status,0,c
  6907  00FA2C  0659               	decf	printf@exp+1,f,c
  6908  00FA2E  D000               	goto	l4360
  6909  00FA30                     l4360:
  6910  00FA30  BE59               	btfsc	printf@exp+1,7,c
  6911  00FA32  D005               	goto	l4362
  6912  00FA34  5059               	movf	printf@exp+1,w,c
  6913  00FA36  E1F5               	bnz	l4356
  6914  00FA38  0458               	decf	printf@exp,w,c
  6915  00FA3A  B0D8               	btfsc	status,0,c
  6916  00FA3C  D7F2               	goto	l4356
  6917  00FA3E                     l4362:
  6918                           
  6919                           ;doprnt.c: 1210: }
  6920                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6921  00FA3E  BE62               	btfsc	printf@prec+1,7,c
  6922  00FA40  D009               	goto	l620
  6923  00FA42  5062               	movf	printf@prec+1,w,c
  6924  00FA44  E104               	bnz	u4050
  6925  00FA46  0E09               	movlw	9
  6926  00FA48  5C61               	subwf	printf@prec,w,c
  6927  00FA4A  A0D8               	btfss	status,0,c
  6928  00FA4C  D003               	goto	l620
  6929  00FA4E                     u4050:
  6930                           
  6931                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6932  00FA4E  0E08               	movlw	8
  6933  00FA50  6E63               	movwf	printf@c,c
  6934  00FA52  D003               	goto	l4366
  6935  00FA54                     l620:
  6936                           
  6937                           ;doprnt.c: 1213: else
  6938                           ;doprnt.c: 1214: c = prec;
  6939  00FA54  C061  F063         	movff	printf@prec,printf@c
  6940  00FA58  D000               	goto	l4366
  6941  00FA5A                     l4366:
  6942                           
  6943                           ;doprnt.c: 1215: prec -= c;
  6944  00FA5A  5063               	movf	printf@c,w,c
  6945  00FA5C  5E61               	subwf	printf@prec,f,c
  6946  00FA5E  0E00               	movlw	0
  6947  00FA60  BE63               	btfsc	printf@c,7,c
  6948  00FA62  0EFF               	movlw	255
  6949  00FA64  5A62               	subwfb	printf@prec+1,f,c
  6950                           
  6951                           ;doprnt.c: 1219: if(c)
  6952  00FA66  5063               	movf	printf@c,w,c
  6953  00FA68  B4D8               	btfsc	status,2,c
  6954  00FA6A  D004               	goto	l4372
  6955                           
  6956                           ;doprnt.c: 1221: (putch('.') );
  6957  00FA6C  0E2E               	movlw	46
  6958  00FA6E  ECEB  F060         	call	_putch
  6959  00FA72  D000               	goto	l4372
  6960  00FA74                     l4372:
  6961                           
  6962                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6963  00FA74  5063               	movf	printf@c,w,c
  6964  00FA76  EC7E  F074         	call	_scale
  6965  00FA7A  C024  F04B         	movff	?_scale,_printf$2386
  6966  00FA7E  C025  F04C         	movff	?_scale+1,_printf$2386+1
  6967  00FA82  C026  F04D         	movff	?_scale+2,_printf$2386+2
  6968                           
  6969                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6970  00FA86  C05E  F018         	movff	printf@fval,___ftmul@f2
  6971  00FA8A  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  6972  00FA8E  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  6973  00FA92  C04B  F015         	movff	_printf$2386,___ftmul@f1
  6974  00FA96  C04C  F016         	movff	_printf$2386+1,___ftmul@f1+1
  6975  00FA9A  C04D  F017         	movff	_printf$2386+2,___ftmul@f1+2
  6976  00FA9E  ECD6  F06A         	call	___ftmul	;wreg free
  6977  00FAA2  C015  F02B         	movff	?___ftmul,___fttol@f1
  6978  00FAA6  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6979  00FAAA  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6980  00FAAE  EC76  F069         	call	___fttol	;wreg free
  6981  00FAB2  C02B  F050         	movff	?___fttol,printf@val
  6982  00FAB6  C02C  F051         	movff	?___fttol+1,printf@val+1
  6983  00FABA  C02D  F052         	movff	?___fttol+2,printf@val+2
  6984  00FABE  C02E  F053         	movff	?___fttol+3,printf@val+3
  6985                           
  6986                           ;doprnt.c: 1228: while(c--) {
  6987  00FAC2  D06B               	goto	l4382
  6988  00FAC4                     l4376:
  6989                           
  6990                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6991  00FAC4  C050  F001         	movff	printf@val,___lldiv@dividend
  6992  00FAC8  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  6993  00FACC  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  6994  00FAD0  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  6995  00FAD4  5063               	movf	printf@c,w,c
  6996  00FAD6  0D04               	mullw	4
  6997  00FAD8  0E0E               	movlw	low _dpowers
  6998  00FADA  24F3               	addwf	prodl,w,c
  6999  00FADC  6EF6               	movwf	tblptrl,c
  7000  00FADE  0EFF               	movlw	high _dpowers
  7001  00FAE0  20F4               	addwfc	prodh,w,c
  7002  00FAE2  6EF7               	movwf	tblptrh,c
  7003  00FAE4                     	if	0	;There are less than 3 active tblptr bytes
  7004  00FAE4                     	endif
  7005  00FAE4  0009               	tblrd		*+
  7006  00FAE6  CFF5 F005          	movff	tablat,___lldiv@divisor
  7007  00FAEA  0009               	tblrd		*+
  7008  00FAEC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7009  00FAF0  0009               	tblrd		*+
  7010  00FAF2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7011  00FAF6  000A               	tblrd		*-
  7012  00FAF8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7013  00FAFC  ECE6  F065         	call	___lldiv	;wreg free
  7014  00FB00  C001  F054         	movff	?___lldiv,printf@tmpval
  7015  00FB04  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  7016  00FB08  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  7017  00FB0C  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  7018                           
  7019                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7020  00FB10  C054  F001         	movff	printf@tmpval,___llmod@dividend
  7021  00FB14  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  7022  00FB18  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  7023  00FB1C  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  7024  00FB20  0E0A               	movlw	10
  7025  00FB22  6E05               	movwf	___llmod@divisor,c
  7026  00FB24  0E00               	movlw	0
  7027  00FB26  6E06               	movwf	___llmod@divisor+1,c
  7028  00FB28  0E00               	movlw	0
  7029  00FB2A  6E07               	movwf	___llmod@divisor+2,c
  7030  00FB2C  0E00               	movlw	0
  7031  00FB2E  6E08               	movwf	___llmod@divisor+3,c
  7032  00FB30  EC6C  F064         	call	___llmod	;wreg free
  7033  00FB34  C001  F054         	movff	?___llmod,printf@tmpval
  7034  00FB38  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  7035  00FB3C  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  7036  00FB40  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  7037                           
  7038                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7039  00FB44  5054               	movf	printf@tmpval,w,c
  7040  00FB46  0F30               	addlw	48
  7041  00FB48  ECEB  F060         	call	_putch
  7042                           
  7043                           ;doprnt.c: 1232: val %= dpowers[c];
  7044  00FB4C  C050  F001         	movff	printf@val,___llmod@dividend
  7045  00FB50  C051  F002         	movff	printf@val+1,___llmod@dividend+1
  7046  00FB54  C052  F003         	movff	printf@val+2,___llmod@dividend+2
  7047  00FB58  C053  F004         	movff	printf@val+3,___llmod@dividend+3
  7048  00FB5C  5063               	movf	printf@c,w,c
  7049  00FB5E  0D04               	mullw	4
  7050  00FB60  0E0E               	movlw	low _dpowers
  7051  00FB62  24F3               	addwf	prodl,w,c
  7052  00FB64  6EF6               	movwf	tblptrl,c
  7053  00FB66  0EFF               	movlw	high _dpowers
  7054  00FB68  20F4               	addwfc	prodh,w,c
  7055  00FB6A  6EF7               	movwf	tblptrh,c
  7056  00FB6C                     	if	0	;There are less than 3 active tblptr bytes
  7057  00FB6C                     	endif
  7058  00FB6C  0009               	tblrd		*+
  7059  00FB6E  CFF5 F005          	movff	tablat,___llmod@divisor
  7060  00FB72  0009               	tblrd		*+
  7061  00FB74  CFF5 F006          	movff	tablat,___llmod@divisor+1
  7062  00FB78  0009               	tblrd		*+
  7063  00FB7A  CFF5 F007          	movff	tablat,___llmod@divisor+2
  7064  00FB7E  000A               	tblrd		*-
  7065  00FB80  CFF5 F008          	movff	tablat,___llmod@divisor+3
  7066  00FB84  EC6C  F064         	call	___llmod	;wreg free
  7067  00FB88  C001  F050         	movff	?___llmod,printf@val
  7068  00FB8C  C002  F051         	movff	?___llmod+1,printf@val+1
  7069  00FB90  C003  F052         	movff	?___llmod+2,printf@val+2
  7070  00FB94  C004  F053         	movff	?___llmod+3,printf@val+3
  7071  00FB98  D000               	goto	l4382
  7072  00FB9A                     l4382:
  7073  00FB9A  0663               	decf	printf@c,f,c
  7074  00FB9C  2863               	incf	printf@c,w,c
  7075  00FB9E  B4D8               	btfsc	status,2,c
  7076  00FBA0  D009               	goto	l4388
  7077  00FBA2  D790               	goto	l4376
  7078                           
  7079                           ;doprnt.c: 1233: }
  7080                           ;doprnt.c: 1235: while(prec) {
  7081  00FBA4  D007               	goto	l4388
  7082  00FBA6                     l4384:
  7083                           
  7084                           ;doprnt.c: 1236: (putch('0') );
  7085  00FBA6  0E30               	movlw	48
  7086  00FBA8  ECEB  F060         	call	_putch
  7087                           
  7088                           ;doprnt.c: 1237: prec--;
  7089  00FBAC  0661               	decf	printf@prec,f,c
  7090  00FBAE  A0D8               	btfss	status,0,c
  7091  00FBB0  0662               	decf	printf@prec+1,f,c
  7092  00FBB2  D000               	goto	l4388
  7093  00FBB4                     l4388:
  7094  00FBB4  5061               	movf	printf@prec,w,c
  7095  00FBB6  1062               	iorwf	printf@prec+1,w,c
  7096  00FBB8  B4D8               	btfsc	status,2,c
  7097  00FBBA  D0AB               	goto	l4446
  7098  00FBBC  D7F4               	goto	l4384
  7099                           
  7100                           ;doprnt.c: 1238: }
  7101                           ;doprnt.c: 1245: continue;
  7102  00FBBE  D0A9               	goto	l4446
  7103  00FBC0                     l4390:
  7104                           
  7105                           ;doprnt.c: 1246: }
  7106                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7107  00FBC0  5061               	movf	printf@prec,w,c
  7108  00FBC2  1062               	iorwf	printf@prec+1,w,c
  7109  00FBC4  A4D8               	btfss	status,2,c
  7110  00FBC6  D009               	goto	l4396
  7111  00FBC8  5050               	movf	printf@val,w,c
  7112  00FBCA  1051               	iorwf	printf@val+1,w,c
  7113  00FBCC  1052               	iorwf	printf@val+2,w,c
  7114  00FBCE  1053               	iorwf	printf@val+3,w,c
  7115  00FBD0  A4D8               	btfss	status,2,c
  7116  00FBD2  D003               	goto	l4396
  7117                           
  7118                           ;doprnt.c: 1291: prec++;
  7119  00FBD4  4A61               	infsnz	printf@prec,f,c
  7120  00FBD6  2A62               	incf	printf@prec+1,f,c
  7121  00FBD8  D000               	goto	l4396
  7122  00FBDA                     l4396:
  7123                           
  7124                           ;doprnt.c: 1339: if(c < prec)
  7125  00FBDA  0E80               	movlw	128
  7126  00FBDC  BE63               	btfsc	printf@c,7,c
  7127  00FBDE  0E7F               	movlw	127
  7128  00FBE0  6E45               	movwf	??_printf& (0+255),c
  7129  00FBE2  5061               	movf	printf@prec,w,c
  7130  00FBE4  5C63               	subwf	printf@c,w,c
  7131  00FBE6  5062               	movf	printf@prec+1,w,c
  7132  00FBE8  0A80               	xorlw	128
  7133  00FBEA  5845               	subwfb	??_printf& (0+255),w,c
  7134  00FBEC  B0D8               	btfsc	status,0,c
  7135  00FBEE  D003               	goto	l4400
  7136                           
  7137                           ;doprnt.c: 1340: c = prec;
  7138  00FBF0  C061  F063         	movff	printf@prec,printf@c
  7139  00FBF4  D011               	goto	l4404
  7140  00FBF6                     l4400:
  7141                           
  7142                           ;doprnt.c: 1341: else if(prec < c)
  7143  00FBF6  5062               	movf	printf@prec+1,w,c
  7144  00FBF8  0A80               	xorlw	128
  7145  00FBFA  6E45               	movwf	??_printf& (0+255),c
  7146  00FBFC  5063               	movf	printf@c,w,c
  7147  00FBFE  5C61               	subwf	printf@prec,w,c
  7148  00FC00  0E80               	movlw	128
  7149  00FC02  BE63               	btfsc	printf@c,7,c
  7150  00FC04  0E7F               	movlw	127
  7151  00FC06  5845               	subwfb	??_printf& (0+255),w,c
  7152  00FC08  B0D8               	btfsc	status,0,c
  7153  00FC0A  D006               	goto	l4404
  7154                           
  7155                           ;doprnt.c: 1342: prec = c;
  7156  00FC0C  5063               	movf	printf@c,w,c
  7157  00FC0E  6E61               	movwf	printf@prec,c
  7158  00FC10  6A62               	clrf	printf@prec+1,c
  7159  00FC12  BE61               	btfsc	printf@prec,7,c
  7160  00FC14  0662               	decf	printf@prec+1,f,c
  7161  00FC16  D000               	goto	l4404
  7162  00FC18                     l4404:
  7163                           
  7164                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7165  00FC18  505C               	movf	printf@width,w,c
  7166  00FC1A  105D               	iorwf	printf@width+1,w,c
  7167  00FC1C  B4D8               	btfsc	status,2,c
  7168  00FC1E  D00E               	goto	l4410
  7169  00FC20  0E03               	movlw	3
  7170  00FC22  145A               	andwf	printf@flag,w,c
  7171  00FC24  6E45               	movwf	??_printf& (0+255),c
  7172  00FC26  0E00               	movlw	0
  7173  00FC28  145B               	andwf	printf@flag+1,w,c
  7174  00FC2A  6E46               	movwf	(??_printf+1)& (0+255),c
  7175  00FC2C  5045               	movf	??_printf,w,c
  7176  00FC2E  1046               	iorwf	??_printf+1,w,c
  7177  00FC30  B4D8               	btfsc	status,2,c
  7178  00FC32  D004               	goto	l4410
  7179                           
  7180                           ;doprnt.c: 1346: width--;
  7181  00FC34  065C               	decf	printf@width,f,c
  7182  00FC36  A0D8               	btfss	status,0,c
  7183  00FC38  065D               	decf	printf@width+1,f,c
  7184  00FC3A  D000               	goto	l4410
  7185  00FC3C                     l4410:
  7186                           
  7187                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7188  00FC3C  AC5B               	btfss	printf@flag+1,6,c
  7189  00FC3E  D014               	goto	l4418
  7190                           
  7191                           ;doprnt.c: 1349: if(width > prec)
  7192  00FC40  505C               	movf	printf@width,w,c
  7193  00FC42  5C61               	subwf	printf@prec,w,c
  7194  00FC44  5062               	movf	printf@prec+1,w,c
  7195  00FC46  0A80               	xorlw	128
  7196  00FC48  6E45               	movwf	??_printf& (0+255),c
  7197  00FC4A  505D               	movf	printf@width+1,w,c
  7198  00FC4C  0A80               	xorlw	128
  7199  00FC4E  5845               	subwfb	??_printf& (0+255),w,c
  7200  00FC50  B0D8               	btfsc	status,0,c
  7201  00FC52  D005               	goto	l4416
  7202                           
  7203                           ;doprnt.c: 1350: width -= prec;
  7204  00FC54  5061               	movf	printf@prec,w,c
  7205  00FC56  5E5C               	subwf	printf@width,f,c
  7206  00FC58  5062               	movf	printf@prec+1,w,c
  7207  00FC5A  5A5D               	subwfb	printf@width+1,f,c
  7208  00FC5C  D005               	goto	l4418
  7209  00FC5E                     l4416:
  7210                           
  7211                           ;doprnt.c: 1351: else
  7212                           ;doprnt.c: 1352: width = 0;
  7213  00FC5E  0E00               	movlw	0
  7214  00FC60  6E5D               	movwf	printf@width+1,c
  7215  00FC62  0E00               	movlw	0
  7216  00FC64  6E5C               	movwf	printf@width,c
  7217  00FC66  D000               	goto	l4418
  7218  00FC68                     l4418:
  7219                           
  7220                           ;doprnt.c: 1353: }
  7221                           ;doprnt.c: 1381: if(width > c)
  7222  00FC68  0E80               	movlw	128
  7223  00FC6A  BE63               	btfsc	printf@c,7,c
  7224  00FC6C  0E7F               	movlw	127
  7225  00FC6E  6E45               	movwf	??_printf& (0+255),c
  7226  00FC70  505C               	movf	printf@width,w,c
  7227  00FC72  5C63               	subwf	printf@c,w,c
  7228  00FC74  505D               	movf	printf@width+1,w,c
  7229  00FC76  0A80               	xorlw	128
  7230  00FC78  5845               	subwfb	??_printf& (0+255),w,c
  7231  00FC7A  B0D8               	btfsc	status,0,c
  7232  00FC7C  D007               	goto	l4422
  7233                           
  7234                           ;doprnt.c: 1382: width -= c;
  7235  00FC7E  5063               	movf	printf@c,w,c
  7236  00FC80  5E5C               	subwf	printf@width,f,c
  7237  00FC82  0E00               	movlw	0
  7238  00FC84  BE63               	btfsc	printf@c,7,c
  7239  00FC86  0EFF               	movlw	255
  7240  00FC88  5A5D               	subwfb	printf@width+1,f,c
  7241  00FC8A  D005               	goto	l4424
  7242  00FC8C                     l4422:
  7243                           
  7244                           ;doprnt.c: 1383: else
  7245                           ;doprnt.c: 1384: width = 0;
  7246  00FC8C  0E00               	movlw	0
  7247  00FC8E  6E5D               	movwf	printf@width+1,c
  7248  00FC90  0E00               	movlw	0
  7249  00FC92  6E5C               	movwf	printf@width,c
  7250  00FC94  D000               	goto	l4424
  7251  00FC96                     l4424:
  7252                           
  7253                           ;doprnt.c: 1387: if(flag & 0x04) {
  7254  00FC96  A45A               	btfss	printf@flag,2,c
  7255  00FC98  D01E               	goto	l4436
  7256                           
  7257                           ;doprnt.c: 1392: if(flag & 0x03)
  7258  00FC9A  0E03               	movlw	3
  7259  00FC9C  145A               	andwf	printf@flag,w,c
  7260  00FC9E  6E45               	movwf	??_printf& (0+255),c
  7261  00FCA0  0E00               	movlw	0
  7262  00FCA2  145B               	andwf	printf@flag+1,w,c
  7263  00FCA4  6E46               	movwf	(??_printf+1)& (0+255),c
  7264  00FCA6  5045               	movf	??_printf,w,c
  7265  00FCA8  1046               	iorwf	??_printf+1,w,c
  7266  00FCAA  B4D8               	btfsc	status,2,c
  7267  00FCAC  D004               	goto	l4430
  7268                           
  7269                           ;doprnt.c: 1393: (putch('-') );
  7270  00FCAE  0E2D               	movlw	45
  7271  00FCB0  ECEB  F060         	call	_putch
  7272  00FCB4  D000               	goto	l4430
  7273  00FCB6                     l4430:
  7274                           
  7275                           ;doprnt.c: 1415: if(width)
  7276  00FCB6  505C               	movf	printf@width,w,c
  7277  00FCB8  105D               	iorwf	printf@width+1,w,c
  7278  00FCBA  B4D8               	btfsc	status,2,c
  7279  00FCBC  D02A               	goto	l4446
  7280  00FCBE                     l4432:
  7281                           
  7282                           ;doprnt.c: 1417: (putch('0') );
  7283  00FCBE  0E30               	movlw	48
  7284  00FCC0  ECEB  F060         	call	_putch
  7285                           
  7286                           ;doprnt.c: 1418: while(--width);
  7287  00FCC4  065C               	decf	printf@width,f,c
  7288  00FCC6  A0D8               	btfss	status,0,c
  7289  00FCC8  065D               	decf	printf@width+1,f,c
  7290  00FCCA  505C               	movf	printf@width,w,c
  7291  00FCCC  105D               	iorwf	printf@width+1,w,c
  7292  00FCCE  B4D8               	btfsc	status,2,c
  7293  00FCD0  D020               	goto	l4446
  7294  00FCD2  D7F5               	goto	l4432
  7295                           
  7296                           ;doprnt.c: 1420: } else
  7297  00FCD4  D01E               	goto	l4446
  7298  00FCD6                     l4436:
  7299                           
  7300                           ;doprnt.c: 1422: {
  7301                           ;doprnt.c: 1424: if(width
  7302                           ;doprnt.c: 1428: )
  7303  00FCD6  505C               	movf	printf@width,w,c
  7304  00FCD8  105D               	iorwf	printf@width+1,w,c
  7305  00FCDA  B4D8               	btfsc	status,2,c
  7306  00FCDC  D00C               	goto	l4442
  7307  00FCDE                     l4438:
  7308                           
  7309                           ;doprnt.c: 1430: (putch(' ') );
  7310  00FCDE  0E20               	movlw	32
  7311  00FCE0  ECEB  F060         	call	_putch
  7312                           
  7313                           ;doprnt.c: 1431: while(--width);
  7314  00FCE4  065C               	decf	printf@width,f,c
  7315  00FCE6  A0D8               	btfss	status,0,c
  7316  00FCE8  065D               	decf	printf@width+1,f,c
  7317  00FCEA  505C               	movf	printf@width,w,c
  7318  00FCEC  105D               	iorwf	printf@width+1,w,c
  7319  00FCEE  B4D8               	btfsc	status,2,c
  7320  00FCF0  D002               	goto	l4442
  7321  00FCF2  D7F5               	goto	l4438
  7322  00FCF4  D000               	goto	l4442
  7323  00FCF6                     l4442:
  7324                           
  7325                           ;doprnt.c: 1438: if(flag & 0x03)
  7326  00FCF6  0E03               	movlw	3
  7327  00FCF8  145A               	andwf	printf@flag,w,c
  7328  00FCFA  6E45               	movwf	??_printf& (0+255),c
  7329  00FCFC  0E00               	movlw	0
  7330  00FCFE  145B               	andwf	printf@flag+1,w,c
  7331  00FD00  6E46               	movwf	(??_printf+1)& (0+255),c
  7332  00FD02  5045               	movf	??_printf,w,c
  7333  00FD04  1046               	iorwf	??_printf+1,w,c
  7334  00FD06  B4D8               	btfsc	status,2,c
  7335  00FD08  D004               	goto	l4446
  7336                           
  7337                           ;doprnt.c: 1439: (putch('-') );
  7338  00FD0A  0E2D               	movlw	45
  7339  00FD0C  ECEB  F060         	call	_putch
  7340  00FD10  D000               	goto	l4446
  7341  00FD12                     l4446:
  7342  00FD12  C040  FFF6         	movff	printf@f,tblptrl
  7343  00FD16  C041  FFF7         	movff	printf@f+1,tblptrh
  7344  00FD1A  4A40               	infsnz	printf@f,f,c
  7345  00FD1C  2A41               	incf	printf@f+1,f,c
  7346  00FD1E                     	if	0	;tblptru may be non-zero
  7347  00FD1E                     	endif
  7348  00FD1E                     	if	0	;tblptru may be non-zero
  7349  00FD1E                     	endif
  7350  00FD1E  0008               	tblrd		*
  7351  00FD20  CFF5 F063          	movff	tablat,printf@c
  7352  00FD24  5063               	movf	printf@c,w,c
  7353  00FD26  B4D8               	btfsc	status,2,c
  7354  00FD28  D003               	goto	l650
  7355  00FD2A  EF03  F07A         	goto	l4184
  7356  00FD2E  D000               	goto	l650
  7357  00FD30                     l650:
  7358  00FD30  0012               	return		;funcret
  7359  00FD32                     __end_of_printf:
  7360                           	opt stack 0
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon2	equ	0xFF1
  7368                           postinc0	equ	0xFEE
  7369                           wreg	equ	0xFE8
  7370                           postdec1	equ	0xFE5
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function _scale *****************
  7380 ;; Defined at:
  7381 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  scl             1    wreg     char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  scl             1   41[COMRAM] char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  3   35[COMRAM] char 
  7388 ;; Registers used:
  7389 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7395 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;Total ram usage:        7 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    2
  7402 ;; This function calls:
  7403 ;;		___awdiv
  7404 ;;		___awmod
  7405 ;;		___ftmul
  7406 ;;		___wmul
  7407 ;; This function is called by:
  7408 ;;		_printf
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text24
  7413  00E8FC                     __ptext24:
  7414                           	opt stack 0
  7415  00E8FC                     _scale:
  7416                           	opt stack 23
  7417                           
  7418                           ;incstack = 0
  7419                           ;scale@scl stored from wreg
  7420  00E8FC  6E2A               	movwf	scale@scl,c
  7421                           
  7422                           ;doprnt.c: 428: if(scl < 0) {
  7423  00E8FE  AE2A               	btfss	scale@scl,7,c
  7424  00E900  D0EF               	goto	l3836
  7425                           
  7426                           ;doprnt.c: 429: scl = -scl;
  7427  00E902  6C2A               	negf	scale@scl,c
  7428                           
  7429                           ;doprnt.c: 430: if(scl>=110)
  7430  00E904  502A               	movf	scale@scl,w,c
  7431  00E906  0A80               	xorlw	128
  7432  00E908  0F12               	addlw	-238
  7433  00E90A  A0D8               	btfss	status,0,c
  7434  00E90C  D08D               	goto	l3826
  7435                           
  7436                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7437  00E90E  0E00               	movlw	0
  7438  00E910  6E12               	movwf	___wmul@multiplicand+1,c
  7439  00E912  0E03               	movlw	3
  7440  00E914  6E11               	movwf	___wmul@multiplicand,c
  7441  00E916  0E00               	movlw	0
  7442  00E918  6E0A               	movwf	___awdiv@divisor+1,c
  7443  00E91A  0E0A               	movlw	10
  7444  00E91C  6E09               	movwf	___awdiv@divisor,c
  7445  00E91E  0E00               	movlw	0
  7446  00E920  6E04               	movwf	___awmod@divisor+1,c
  7447  00E922  0E64               	movlw	100
  7448  00E924  6E03               	movwf	___awmod@divisor,c
  7449  00E926  502A               	movf	scale@scl,w,c
  7450  00E928  6E01               	movwf	___awmod@dividend,c
  7451  00E92A  6A02               	clrf	___awmod@dividend+1,c
  7452  00E92C  BE01               	btfsc	___awmod@dividend,7,c
  7453  00E92E  0602               	decf	___awmod@dividend+1,f,c
  7454  00E930  ECDC  F064         	call	___awmod	;wreg free
  7455  00E934  C001  F007         	movff	?___awmod,___awdiv@dividend
  7456  00E938  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7457  00E93C  EC2C  F066         	call	___awdiv	;wreg free
  7458  00E940  0E09               	movlw	9
  7459  00E942  2407               	addwf	?___awdiv,w,c
  7460  00E944  6E0F               	movwf	___wmul@multiplier,c
  7461  00E946  0E00               	movlw	0
  7462  00E948  2008               	addwfc	?___awdiv+1,w,c
  7463  00E94A  6E10               	movwf	___wmul@multiplier+1,c
  7464  00E94C  EC96  F061         	call	___wmul	;wreg free
  7465  00E950  0E36               	movlw	low __npowers_
  7466  00E952  240F               	addwf	?___wmul,w,c
  7467  00E954  6EF6               	movwf	tblptrl,c
  7468  00E956  0EFF               	movlw	high __npowers_
  7469  00E958  2010               	addwfc	?___wmul+1,w,c
  7470  00E95A  6EF7               	movwf	tblptrh,c
  7471  00E95C                     	if	0	;There are less than 3 active tblptr bytes
  7472  00E95C                     	endif
  7473  00E95C  0009               	tblrd		*+
  7474  00E95E  CFF5 F018          	movff	tablat,___ftmul@f2
  7475  00E962  0009               	tblrd		*+
  7476  00E964  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7477  00E968  000A               	tblrd		*-
  7478  00E96A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7479  00E96E  0E00               	movlw	0
  7480  00E970  6E0A               	movwf	___awdiv@divisor+1,c
  7481  00E972  0E64               	movlw	100
  7482  00E974  6E09               	movwf	___awdiv@divisor,c
  7483  00E976  502A               	movf	scale@scl,w,c
  7484  00E978  6E07               	movwf	___awdiv@dividend,c
  7485  00E97A  6A08               	clrf	___awdiv@dividend+1,c
  7486  00E97C  BE07               	btfsc	___awdiv@dividend,7,c
  7487  00E97E  0608               	decf	___awdiv@dividend+1,f,c
  7488  00E980  EC2C  F066         	call	___awdiv	;wreg free
  7489  00E984  0E12               	movlw	18
  7490  00E986  2407               	addwf	?___awdiv,w,c
  7491  00E988  6E0F               	movwf	___wmul@multiplier,c
  7492  00E98A  0E00               	movlw	0
  7493  00E98C  2008               	addwfc	?___awdiv+1,w,c
  7494  00E98E  6E10               	movwf	___wmul@multiplier+1,c
  7495  00E990  0E00               	movlw	0
  7496  00E992  6E12               	movwf	___wmul@multiplicand+1,c
  7497  00E994  0E03               	movlw	3
  7498  00E996  6E11               	movwf	___wmul@multiplicand,c
  7499  00E998  EC96  F061         	call	___wmul	;wreg free
  7500  00E99C  0E36               	movlw	low __npowers_
  7501  00E99E  240F               	addwf	?___wmul,w,c
  7502  00E9A0  6EF6               	movwf	tblptrl,c
  7503  00E9A2  0EFF               	movlw	high __npowers_
  7504  00E9A4  2010               	addwfc	?___wmul+1,w,c
  7505  00E9A6  6EF7               	movwf	tblptrh,c
  7506  00E9A8                     	if	0	;There are less than 3 active tblptr bytes
  7507  00E9A8                     	endif
  7508  00E9A8  0009               	tblrd		*+
  7509  00E9AA  CFF5 F015          	movff	tablat,___ftmul@f1
  7510  00E9AE  0009               	tblrd		*+
  7511  00E9B0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7512  00E9B4  000A               	tblrd		*-
  7513  00E9B6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7514  00E9BA  ECD6  F06A         	call	___ftmul	;wreg free
  7515  00E9BE  C015  F027         	movff	?___ftmul,_scale$2385
  7516  00E9C2  C016  F028         	movff	?___ftmul+1,_scale$2385+1
  7517  00E9C6  C017  F029         	movff	?___ftmul+2,_scale$2385+2
  7518                           
  7519                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7520  00E9CA  C027  F015         	movff	_scale$2385,___ftmul@f1
  7521  00E9CE  C028  F016         	movff	_scale$2385+1,___ftmul@f1+1
  7522  00E9D2  C029  F017         	movff	_scale$2385+2,___ftmul@f1+2
  7523  00E9D6  0E00               	movlw	0
  7524  00E9D8  6E12               	movwf	___wmul@multiplicand+1,c
  7525  00E9DA  0E03               	movlw	3
  7526  00E9DC  6E11               	movwf	___wmul@multiplicand,c
  7527  00E9DE  0E00               	movlw	0
  7528  00E9E0  6E04               	movwf	___awmod@divisor+1,c
  7529  00E9E2  0E0A               	movlw	10
  7530  00E9E4  6E03               	movwf	___awmod@divisor,c
  7531  00E9E6  502A               	movf	scale@scl,w,c
  7532  00E9E8  6E01               	movwf	___awmod@dividend,c
  7533  00E9EA  6A02               	clrf	___awmod@dividend+1,c
  7534  00E9EC  BE01               	btfsc	___awmod@dividend,7,c
  7535  00E9EE  0602               	decf	___awmod@dividend+1,f,c
  7536  00E9F0  ECDC  F064         	call	___awmod	;wreg free
  7537  00E9F4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7538  00E9F8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7539  00E9FC  EC96  F061         	call	___wmul	;wreg free
  7540  00EA00  0E36               	movlw	low __npowers_
  7541  00EA02  240F               	addwf	?___wmul,w,c
  7542  00EA04  6EF6               	movwf	tblptrl,c
  7543  00EA06  0EFF               	movlw	high __npowers_
  7544  00EA08  2010               	addwfc	?___wmul+1,w,c
  7545  00EA0A  6EF7               	movwf	tblptrh,c
  7546  00EA0C                     	if	0	;There are less than 3 active tblptr bytes
  7547  00EA0C                     	endif
  7548  00EA0C  0009               	tblrd		*+
  7549  00EA0E  CFF5 F018          	movff	tablat,___ftmul@f2
  7550  00EA12  0009               	tblrd		*+
  7551  00EA14  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7552  00EA18  000A               	tblrd		*-
  7553  00EA1A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7554  00EA1E  ECD6  F06A         	call	___ftmul	;wreg free
  7555  00EA22  D141               	goto	L11
  7556  00EA24  D15A               	goto	l549
  7557  00EA26  D054               	goto	l3832
  7558  00EA28                     l3826:
  7559                           
  7560                           ;doprnt.c: 432: else if(scl > 10)
  7561  00EA28  502A               	movf	scale@scl,w,c
  7562  00EA2A  0A80               	xorlw	128
  7563  00EA2C  0F75               	addlw	-139
  7564  00EA2E  A0D8               	btfss	status,0,c
  7565  00EA30  D04F               	goto	l3832
  7566                           
  7567                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7568  00EA32  0E00               	movlw	0
  7569  00EA34  6E0A               	movwf	___awdiv@divisor+1,c
  7570  00EA36  0E0A               	movlw	10
  7571  00EA38  6E09               	movwf	___awdiv@divisor,c
  7572  00EA3A  502A               	movf	scale@scl,w,c
  7573  00EA3C  6E07               	movwf	___awdiv@dividend,c
  7574  00EA3E  6A08               	clrf	___awdiv@dividend+1,c
  7575  00EA40  BE07               	btfsc	___awdiv@dividend,7,c
  7576  00EA42  0608               	decf	___awdiv@dividend+1,f,c
  7577  00EA44  EC2C  F066         	call	___awdiv	;wreg free
  7578  00EA48  0E09               	movlw	9
  7579  00EA4A  2407               	addwf	?___awdiv,w,c
  7580  00EA4C  6E0F               	movwf	___wmul@multiplier,c
  7581  00EA4E  0E00               	movlw	0
  7582  00EA50  2008               	addwfc	?___awdiv+1,w,c
  7583  00EA52  6E10               	movwf	___wmul@multiplier+1,c
  7584  00EA54  0E00               	movlw	0
  7585  00EA56  6E12               	movwf	___wmul@multiplicand+1,c
  7586  00EA58  0E03               	movlw	3
  7587  00EA5A  6E11               	movwf	___wmul@multiplicand,c
  7588  00EA5C  EC96  F061         	call	___wmul	;wreg free
  7589  00EA60  0E36               	movlw	low __npowers_
  7590  00EA62  240F               	addwf	?___wmul,w,c
  7591  00EA64  6EF6               	movwf	tblptrl,c
  7592  00EA66  0EFF               	movlw	high __npowers_
  7593  00EA68  2010               	addwfc	?___wmul+1,w,c
  7594  00EA6A  6EF7               	movwf	tblptrh,c
  7595  00EA6C                     	if	0	;There are less than 3 active tblptr bytes
  7596  00EA6C                     	endif
  7597  00EA6C  0009               	tblrd		*+
  7598  00EA6E  CFF5 F015          	movff	tablat,___ftmul@f1
  7599  00EA72  0009               	tblrd		*+
  7600  00EA74  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7601  00EA78  000A               	tblrd		*-
  7602  00EA7A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7603  00EA7E  0E00               	movlw	0
  7604  00EA80  6E12               	movwf	___wmul@multiplicand+1,c
  7605  00EA82  0E03               	movlw	3
  7606  00EA84  6E11               	movwf	___wmul@multiplicand,c
  7607  00EA86  0E00               	movlw	0
  7608  00EA88  6E04               	movwf	___awmod@divisor+1,c
  7609  00EA8A  0E0A               	movlw	10
  7610  00EA8C  6E03               	movwf	___awmod@divisor,c
  7611  00EA8E  502A               	movf	scale@scl,w,c
  7612  00EA90  6E01               	movwf	___awmod@dividend,c
  7613  00EA92  6A02               	clrf	___awmod@dividend+1,c
  7614  00EA94  BE01               	btfsc	___awmod@dividend,7,c
  7615  00EA96  0602               	decf	___awmod@dividend+1,f,c
  7616  00EA98  ECDC  F064         	call	___awmod	;wreg free
  7617  00EA9C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7618  00EAA0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7619  00EAA4  EC96  F061         	call	___wmul	;wreg free
  7620  00EAA8  0E36               	movlw	low __npowers_
  7621  00EAAA  240F               	addwf	?___wmul,w,c
  7622  00EAAC  6EF6               	movwf	tblptrl,c
  7623  00EAAE  0EFF               	movlw	high __npowers_
  7624  00EAB0  2010               	addwfc	?___wmul+1,w,c
  7625  00EAB2  6EF7               	movwf	tblptrh,c
  7626  00EAB4                     	if	0	;There are less than 3 active tblptr bytes
  7627  00EAB4                     	endif
  7628  00EAB4  0009               	tblrd		*+
  7629  00EAB6  CFF5 F018          	movff	tablat,___ftmul@f2
  7630  00EABA  0009               	tblrd		*+
  7631  00EABC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7632  00EAC0  000A               	tblrd		*-
  7633  00EAC2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7634  00EAC6  ECD6  F06A         	call	___ftmul	;wreg free
  7635  00EACA  D0ED               	goto	L11
  7636  00EACC  D106               	goto	l549
  7637  00EACE  D000               	goto	l3832
  7638  00EAD0                     l3832:
  7639                           
  7640                           ;doprnt.c: 434: return _npowers_[scl];
  7641  00EAD0  502A               	movf	scale@scl,w,c
  7642  00EAD2  0D03               	mullw	3
  7643  00EAD4  0E36               	movlw	low __npowers_
  7644  00EAD6  24F3               	addwf	prodl,w,c
  7645  00EAD8  6EF6               	movwf	tblptrl,c
  7646  00EADA  0EFF               	movlw	high __npowers_
  7647  00EADC  D0F2               	goto	L10
  7648  00EADE  D0FD               	goto	l549
  7649  00EAE0                     l3836:
  7650                           
  7651                           ;doprnt.c: 435: }
  7652                           ;doprnt.c: 436: if(scl>=110)
  7653  00EAE0  502A               	movf	scale@scl,w,c
  7654  00EAE2  0A80               	xorlw	128
  7655  00EAE4  0F12               	addlw	-238
  7656  00EAE6  A0D8               	btfss	status,0,c
  7657  00EAE8  D08D               	goto	l3844
  7658                           
  7659                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7660  00EAEA  0E00               	movlw	0
  7661  00EAEC  6E12               	movwf	___wmul@multiplicand+1,c
  7662  00EAEE  0E03               	movlw	3
  7663  00EAF0  6E11               	movwf	___wmul@multiplicand,c
  7664  00EAF2  0E00               	movlw	0
  7665  00EAF4  6E0A               	movwf	___awdiv@divisor+1,c
  7666  00EAF6  0E0A               	movlw	10
  7667  00EAF8  6E09               	movwf	___awdiv@divisor,c
  7668  00EAFA  0E00               	movlw	0
  7669  00EAFC  6E04               	movwf	___awmod@divisor+1,c
  7670  00EAFE  0E64               	movlw	100
  7671  00EB00  6E03               	movwf	___awmod@divisor,c
  7672  00EB02  502A               	movf	scale@scl,w,c
  7673  00EB04  6E01               	movwf	___awmod@dividend,c
  7674  00EB06  6A02               	clrf	___awmod@dividend+1,c
  7675  00EB08  BE01               	btfsc	___awmod@dividend,7,c
  7676  00EB0A  0602               	decf	___awmod@dividend+1,f,c
  7677  00EB0C  ECDC  F064         	call	___awmod	;wreg free
  7678  00EB10  C001  F007         	movff	?___awmod,___awdiv@dividend
  7679  00EB14  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7680  00EB18  EC2C  F066         	call	___awdiv	;wreg free
  7681  00EB1C  0E09               	movlw	9
  7682  00EB1E  2407               	addwf	?___awdiv,w,c
  7683  00EB20  6E0F               	movwf	___wmul@multiplier,c
  7684  00EB22  0E00               	movlw	0
  7685  00EB24  2008               	addwfc	?___awdiv+1,w,c
  7686  00EB26  6E10               	movwf	___wmul@multiplier+1,c
  7687  00EB28  EC96  F061         	call	___wmul	;wreg free
  7688  00EB2C  0E5D               	movlw	low __powers_
  7689  00EB2E  240F               	addwf	?___wmul,w,c
  7690  00EB30  6EF6               	movwf	tblptrl,c
  7691  00EB32  0EFF               	movlw	high __powers_
  7692  00EB34  2010               	addwfc	?___wmul+1,w,c
  7693  00EB36  6EF7               	movwf	tblptrh,c
  7694  00EB38                     	if	0	;There are less than 3 active tblptr bytes
  7695  00EB38                     	endif
  7696  00EB38  0009               	tblrd		*+
  7697  00EB3A  CFF5 F018          	movff	tablat,___ftmul@f2
  7698  00EB3E  0009               	tblrd		*+
  7699  00EB40  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7700  00EB44  000A               	tblrd		*-
  7701  00EB46  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7702  00EB4A  0E00               	movlw	0
  7703  00EB4C  6E0A               	movwf	___awdiv@divisor+1,c
  7704  00EB4E  0E64               	movlw	100
  7705  00EB50  6E09               	movwf	___awdiv@divisor,c
  7706  00EB52  502A               	movf	scale@scl,w,c
  7707  00EB54  6E07               	movwf	___awdiv@dividend,c
  7708  00EB56  6A08               	clrf	___awdiv@dividend+1,c
  7709  00EB58  BE07               	btfsc	___awdiv@dividend,7,c
  7710  00EB5A  0608               	decf	___awdiv@dividend+1,f,c
  7711  00EB5C  EC2C  F066         	call	___awdiv	;wreg free
  7712  00EB60  0E12               	movlw	18
  7713  00EB62  2407               	addwf	?___awdiv,w,c
  7714  00EB64  6E0F               	movwf	___wmul@multiplier,c
  7715  00EB66  0E00               	movlw	0
  7716  00EB68  2008               	addwfc	?___awdiv+1,w,c
  7717  00EB6A  6E10               	movwf	___wmul@multiplier+1,c
  7718  00EB6C  0E00               	movlw	0
  7719  00EB6E  6E12               	movwf	___wmul@multiplicand+1,c
  7720  00EB70  0E03               	movlw	3
  7721  00EB72  6E11               	movwf	___wmul@multiplicand,c
  7722  00EB74  EC96  F061         	call	___wmul	;wreg free
  7723  00EB78  0E5D               	movlw	low __powers_
  7724  00EB7A  240F               	addwf	?___wmul,w,c
  7725  00EB7C  6EF6               	movwf	tblptrl,c
  7726  00EB7E  0EFF               	movlw	high __powers_
  7727  00EB80  2010               	addwfc	?___wmul+1,w,c
  7728  00EB82  6EF7               	movwf	tblptrh,c
  7729  00EB84                     	if	0	;There are less than 3 active tblptr bytes
  7730  00EB84                     	endif
  7731  00EB84  0009               	tblrd		*+
  7732  00EB86  CFF5 F015          	movff	tablat,___ftmul@f1
  7733  00EB8A  0009               	tblrd		*+
  7734  00EB8C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7735  00EB90  000A               	tblrd		*-
  7736  00EB92  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7737  00EB96  ECD6  F06A         	call	___ftmul	;wreg free
  7738  00EB9A  C015  F027         	movff	?___ftmul,_scale$2385
  7739  00EB9E  C016  F028         	movff	?___ftmul+1,_scale$2385+1
  7740  00EBA2  C017  F029         	movff	?___ftmul+2,_scale$2385+2
  7741                           
  7742                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7743  00EBA6  C027  F015         	movff	_scale$2385,___ftmul@f1
  7744  00EBAA  C028  F016         	movff	_scale$2385+1,___ftmul@f1+1
  7745  00EBAE  C029  F017         	movff	_scale$2385+2,___ftmul@f1+2
  7746  00EBB2  0E00               	movlw	0
  7747  00EBB4  6E12               	movwf	___wmul@multiplicand+1,c
  7748  00EBB6  0E03               	movlw	3
  7749  00EBB8  6E11               	movwf	___wmul@multiplicand,c
  7750  00EBBA  0E00               	movlw	0
  7751  00EBBC  6E04               	movwf	___awmod@divisor+1,c
  7752  00EBBE  0E0A               	movlw	10
  7753  00EBC0  6E03               	movwf	___awmod@divisor,c
  7754  00EBC2  502A               	movf	scale@scl,w,c
  7755  00EBC4  6E01               	movwf	___awmod@dividend,c
  7756  00EBC6  6A02               	clrf	___awmod@dividend+1,c
  7757  00EBC8  BE01               	btfsc	___awmod@dividend,7,c
  7758  00EBCA  0602               	decf	___awmod@dividend+1,f,c
  7759  00EBCC  ECDC  F064         	call	___awmod	;wreg free
  7760  00EBD0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7761  00EBD4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7762  00EBD8  EC96  F061         	call	___wmul	;wreg free
  7763  00EBDC  0E5D               	movlw	low __powers_
  7764  00EBDE  240F               	addwf	?___wmul,w,c
  7765  00EBE0  6EF6               	movwf	tblptrl,c
  7766  00EBE2  0EFF               	movlw	high __powers_
  7767  00EBE4  2010               	addwfc	?___wmul+1,w,c
  7768  00EBE6  6EF7               	movwf	tblptrh,c
  7769  00EBE8                     	if	0	;There are less than 3 active tblptr bytes
  7770  00EBE8                     	endif
  7771  00EBE8  0009               	tblrd		*+
  7772  00EBEA  CFF5 F018          	movff	tablat,___ftmul@f2
  7773  00EBEE  0009               	tblrd		*+
  7774  00EBF0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7775  00EBF4  000A               	tblrd		*-
  7776  00EBF6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7777  00EBFA  ECD6  F06A         	call	___ftmul	;wreg free
  7778  00EBFE  D053               	goto	L11
  7779  00EC00  D06C               	goto	l549
  7780  00EC02  D059               	goto	l3850
  7781  00EC04                     l3844:
  7782                           
  7783                           ;doprnt.c: 438: else if(scl > 10)
  7784  00EC04  502A               	movf	scale@scl,w,c
  7785  00EC06  0A80               	xorlw	128
  7786  00EC08  0F75               	addlw	-139
  7787  00EC0A  A0D8               	btfss	status,0,c
  7788  00EC0C  D054               	goto	l3850
  7789                           
  7790                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7791  00EC0E  0E00               	movlw	0
  7792  00EC10  6E0A               	movwf	___awdiv@divisor+1,c
  7793  00EC12  0E0A               	movlw	10
  7794  00EC14  6E09               	movwf	___awdiv@divisor,c
  7795  00EC16  502A               	movf	scale@scl,w,c
  7796  00EC18  6E07               	movwf	___awdiv@dividend,c
  7797  00EC1A  6A08               	clrf	___awdiv@dividend+1,c
  7798  00EC1C  BE07               	btfsc	___awdiv@dividend,7,c
  7799  00EC1E  0608               	decf	___awdiv@dividend+1,f,c
  7800  00EC20  EC2C  F066         	call	___awdiv	;wreg free
  7801  00EC24  0E09               	movlw	9
  7802  00EC26  2407               	addwf	?___awdiv,w,c
  7803  00EC28  6E0F               	movwf	___wmul@multiplier,c
  7804  00EC2A  0E00               	movlw	0
  7805  00EC2C  2008               	addwfc	?___awdiv+1,w,c
  7806  00EC2E  6E10               	movwf	___wmul@multiplier+1,c
  7807  00EC30  0E00               	movlw	0
  7808  00EC32  6E12               	movwf	___wmul@multiplicand+1,c
  7809  00EC34  0E03               	movlw	3
  7810  00EC36  6E11               	movwf	___wmul@multiplicand,c
  7811  00EC38  EC96  F061         	call	___wmul	;wreg free
  7812  00EC3C  0E5D               	movlw	low __powers_
  7813  00EC3E  240F               	addwf	?___wmul,w,c
  7814  00EC40  6EF6               	movwf	tblptrl,c
  7815  00EC42  0EFF               	movlw	high __powers_
  7816  00EC44  2010               	addwfc	?___wmul+1,w,c
  7817  00EC46  6EF7               	movwf	tblptrh,c
  7818  00EC48                     	if	0	;There are less than 3 active tblptr bytes
  7819  00EC48                     	endif
  7820  00EC48  0009               	tblrd		*+
  7821  00EC4A  CFF5 F015          	movff	tablat,___ftmul@f1
  7822  00EC4E  0009               	tblrd		*+
  7823  00EC50  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7824  00EC54  000A               	tblrd		*-
  7825  00EC56  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7826  00EC5A  0E00               	movlw	0
  7827  00EC5C  6E12               	movwf	___wmul@multiplicand+1,c
  7828  00EC5E  0E03               	movlw	3
  7829  00EC60  6E11               	movwf	___wmul@multiplicand,c
  7830  00EC62  0E00               	movlw	0
  7831  00EC64  6E04               	movwf	___awmod@divisor+1,c
  7832  00EC66  0E0A               	movlw	10
  7833  00EC68  6E03               	movwf	___awmod@divisor,c
  7834  00EC6A  502A               	movf	scale@scl,w,c
  7835  00EC6C  6E01               	movwf	___awmod@dividend,c
  7836  00EC6E  6A02               	clrf	___awmod@dividend+1,c
  7837  00EC70  BE01               	btfsc	___awmod@dividend,7,c
  7838  00EC72  0602               	decf	___awmod@dividend+1,f,c
  7839  00EC74  ECDC  F064         	call	___awmod	;wreg free
  7840  00EC78  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7841  00EC7C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7842  00EC80  EC96  F061         	call	___wmul	;wreg free
  7843  00EC84  0E5D               	movlw	low __powers_
  7844  00EC86  240F               	addwf	?___wmul,w,c
  7845  00EC88  6EF6               	movwf	tblptrl,c
  7846  00EC8A  0EFF               	movlw	high __powers_
  7847  00EC8C  2010               	addwfc	?___wmul+1,w,c
  7848  00EC8E  6EF7               	movwf	tblptrh,c
  7849  00EC90                     	if	0	;There are less than 3 active tblptr bytes
  7850  00EC90                     	endif
  7851  00EC90  0009               	tblrd		*+
  7852  00EC92  CFF5 F018          	movff	tablat,___ftmul@f2
  7853  00EC96  0009               	tblrd		*+
  7854  00EC98  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7855  00EC9C  000A               	tblrd		*-
  7856  00EC9E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7857  00ECA2  ECD6  F06A         	call	___ftmul	;wreg free
  7858  00ECA6                     L11:
  7859  00ECA6  C015  F024         	movff	?___ftmul,?_scale
  7860  00ECAA  C016  F025         	movff	?___ftmul+1,?_scale+1
  7861  00ECAE  C017  F026         	movff	?___ftmul+2,?_scale+2
  7862  00ECB2  D013               	goto	l549
  7863  00ECB4  D000               	goto	l3850
  7864  00ECB6                     l3850:
  7865                           
  7866                           ;doprnt.c: 440: return _powers_[scl];
  7867  00ECB6  502A               	movf	scale@scl,w,c
  7868  00ECB8  0D03               	mullw	3
  7869  00ECBA  0E5D               	movlw	low __powers_
  7870  00ECBC  24F3               	addwf	prodl,w,c
  7871  00ECBE  6EF6               	movwf	tblptrl,c
  7872  00ECC0  0EFF               	movlw	high __powers_
  7873  00ECC2                     L10:
  7874  00ECC2  20F4               	addwfc	prodh,w,c
  7875  00ECC4  6EF7               	movwf	tblptrh,c
  7876  00ECC6                     	if	0	;There are less than 3 active tblptr bytes
  7877  00ECC6                     	endif
  7878  00ECC6  0009               	tblrd		*+
  7879  00ECC8  CFF5 F024          	movff	tablat,?_scale
  7880  00ECCC  0009               	tblrd		*+
  7881  00ECCE  CFF5 F025          	movff	tablat,?_scale+1
  7882  00ECD2  000A               	tblrd		*-
  7883  00ECD4  CFF5 F026          	movff	tablat,?_scale+2
  7884  00ECD8  D000               	goto	l549
  7885  00ECDA                     l549:
  7886  00ECDA  0012               	return		;funcret
  7887  00ECDC                     __end_of_scale:
  7888                           	opt stack 0
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           prodh	equ	0xFF4
  7894                           prodl	equ	0xFF3
  7895                           intcon2	equ	0xFF1
  7896                           postinc0	equ	0xFEE
  7897                           wreg	equ	0xFE8
  7898                           postdec1	equ	0xFE5
  7899                           fsr1l	equ	0xFE1
  7900                           indf2	equ	0xFDF
  7901                           postinc2	equ	0xFDE
  7902                           postdec2	equ	0xFDD
  7903                           fsr2h	equ	0xFDA
  7904                           fsr2l	equ	0xFD9
  7905                           status	equ	0xFD8
  7906                           
  7907 ;; *************** function _putch *****************
  7908 ;; Defined at:
  7909 ;;		line 285 in file "Lab8p1.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  c               1    wreg     unsigned char 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  c               1    0[COMRAM] unsigned char 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;		None               void
  7916 ;; Registers used:
  7917 ;;		wreg
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;Total ram usage:        1 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; This function calls:
  7930 ;;		Nothing
  7931 ;; This function is called by:
  7932 ;;		_printf
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text25
  7937  00C1D6                     __ptext25:
  7938                           	opt stack 0
  7939  00C1D6                     _putch:
  7940                           	opt stack 25
  7941                           
  7942                           ;incstack = 0
  7943                           ;putch@c stored from wreg
  7944  00C1D6  6E01               	movwf	putch@c,c
  7945                           
  7946                           ;Lab8p1.c: 287: while (!TRMT);
  7947  00C1D8  D000               	goto	l374
  7948  00C1DA                     l374:
  7949  00C1DA  A2AC               	btfss	4012,1,c	;volatile
  7950  00C1DC  D7FE               	goto	l374
  7951                           
  7952                           ;Lab8p1.c: 288: TXREG = c;
  7953  00C1DE  C001  FFAD         	movff	putch@c,4013	;volatile
  7954  00C1E2  0012               	return		;funcret
  7955  00C1E4                     __end_of_putch:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           fsr2h	equ	0xFDA
  7972                           fsr2l	equ	0xFD9
  7973                           status	equ	0xFD8
  7974                           
  7975 ;; *************** function _isdigit *****************
  7976 ;; Defined at:
  7977 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  c               1    wreg     unsigned char 
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  c               1    2[COMRAM] unsigned char 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;		None               void
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;Total ram usage:        3 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_printf
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text26
  8005  00C2C0                     __ptext26:
  8006                           	opt stack 0
  8007  00C2C0                     _isdigit:
  8008                           	opt stack 25
  8009                           
  8010                           ;incstack = 0
  8011                           ;isdigit@c stored from wreg
  8012  00C2C0  6E03               	movwf	isdigit@c,c
  8013  00C2C2  0E00               	movlw	0
  8014  00C2C4  6E02               	movwf	_isdigit$2080,c
  8015  00C2C6  0E3A               	movlw	58
  8016  00C2C8  6003               	cpfslt	isdigit@c,c
  8017  00C2CA  D006               	goto	l3862
  8018  00C2CC  0E2F               	movlw	47
  8019  00C2CE  6403               	cpfsgt	isdigit@c,c
  8020  00C2D0  D003               	goto	l3862
  8021  00C2D2  0E01               	movlw	1
  8022  00C2D4  6E02               	movwf	_isdigit$2080,c
  8023  00C2D6  D000               	goto	l3862
  8024  00C2D8                     l3862:
  8025  00C2D8  C002  F001         	movff	_isdigit$2080,??_isdigit
  8026  00C2DC  3001               	rrcf	??_isdigit,w,c
  8027  00C2DE  D000               	goto	l1151
  8028  00C2E0                     l1151:
  8029  00C2E0  0012               	return		;funcret
  8030  00C2E2                     __end_of_isdigit:
  8031                           	opt stack 0
  8032                           tblptru	equ	0xFF8
  8033                           tblptrh	equ	0xFF7
  8034                           tblptrl	equ	0xFF6
  8035                           tablat	equ	0xFF5
  8036                           prodh	equ	0xFF4
  8037                           prodl	equ	0xFF3
  8038                           intcon2	equ	0xFF1
  8039                           postinc0	equ	0xFEE
  8040                           wreg	equ	0xFE8
  8041                           postdec1	equ	0xFE5
  8042                           fsr1l	equ	0xFE1
  8043                           indf2	equ	0xFDF
  8044                           postinc2	equ	0xFDE
  8045                           postdec2	equ	0xFDD
  8046                           fsr2h	equ	0xFDA
  8047                           fsr2l	equ	0xFD9
  8048                           status	equ	0xFD8
  8049                           
  8050 ;; *************** function _fround *****************
  8051 ;; Defined at:
  8052 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;  prec            1    wreg     unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  prec            1   44[COMRAM] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;                  3   35[COMRAM] unsigned char 
  8059 ;; Registers used:
  8060 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8066 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8070 ;;Total ram usage:       10 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    2
  8073 ;; This function calls:
  8074 ;;		___awdiv
  8075 ;;		___awmod
  8076 ;;		___ftmul
  8077 ;;		___wmul
  8078 ;; This function is called by:
  8079 ;;		_printf
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           	psect	text27
  8084  00E356                     __ptext27:
  8085                           	opt stack 0
  8086  00E356                     _fround:
  8087                           	opt stack 23
  8088                           
  8089                           ;incstack = 0
  8090                           ;fround@prec stored from wreg
  8091  00E356  6E2D               	movwf	fround@prec,c
  8092                           
  8093                           ;doprnt.c: 413: if(prec>=110)
  8094  00E358  0E6D               	movlw	109
  8095  00E35A  642D               	cpfsgt	fround@prec,c
  8096  00E35C  D09B               	goto	l3804
  8097                           
  8098                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8099  00E35E  0E00               	movlw	0
  8100  00E360  6E12               	movwf	___wmul@multiplicand+1,c
  8101  00E362  0E03               	movlw	3
  8102  00E364  6E11               	movwf	___wmul@multiplicand,c
  8103  00E366  0E00               	movlw	0
  8104  00E368  6E0A               	movwf	___awdiv@divisor+1,c
  8105  00E36A  0E0A               	movlw	10
  8106  00E36C  6E09               	movwf	___awdiv@divisor,c
  8107  00E36E  0E00               	movlw	0
  8108  00E370  6E04               	movwf	___awmod@divisor+1,c
  8109  00E372  0E64               	movlw	100
  8110  00E374  6E03               	movwf	___awmod@divisor,c
  8111  00E376  C02D  F001         	movff	fround@prec,___awmod@dividend
  8112  00E37A  6A02               	clrf	___awmod@dividend+1,c
  8113  00E37C  ECDC  F064         	call	___awmod	;wreg free
  8114  00E380  C001  F007         	movff	?___awmod,___awdiv@dividend
  8115  00E384  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8116  00E388  EC2C  F066         	call	___awdiv	;wreg free
  8117  00E38C  0E09               	movlw	9
  8118  00E38E  2407               	addwf	?___awdiv,w,c
  8119  00E390  6E0F               	movwf	___wmul@multiplier,c
  8120  00E392  0E00               	movlw	0
  8121  00E394  2008               	addwfc	?___awdiv+1,w,c
  8122  00E396  6E10               	movwf	___wmul@multiplier+1,c
  8123  00E398  EC96  F061         	call	___wmul	;wreg free
  8124  00E39C  0E36               	movlw	low __npowers_
  8125  00E39E  240F               	addwf	?___wmul,w,c
  8126  00E3A0  6EF6               	movwf	tblptrl,c
  8127  00E3A2  0EFF               	movlw	high __npowers_
  8128  00E3A4  2010               	addwfc	?___wmul+1,w,c
  8129  00E3A6  6EF7               	movwf	tblptrh,c
  8130  00E3A8                     	if	0	;There are less than 3 active tblptr bytes
  8131  00E3A8                     	endif
  8132  00E3A8  0009               	tblrd		*+
  8133  00E3AA  CFF5 F018          	movff	tablat,___ftmul@f2
  8134  00E3AE  0009               	tblrd		*+
  8135  00E3B0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8136  00E3B4  000A               	tblrd		*-
  8137  00E3B6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8138  00E3BA  0E00               	movlw	0
  8139  00E3BC  6E0A               	movwf	___awdiv@divisor+1,c
  8140  00E3BE  0E64               	movlw	100
  8141  00E3C0  6E09               	movwf	___awdiv@divisor,c
  8142  00E3C2  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8143  00E3C6  6A08               	clrf	___awdiv@dividend+1,c
  8144  00E3C8  EC2C  F066         	call	___awdiv	;wreg free
  8145  00E3CC  0E12               	movlw	18
  8146  00E3CE  2407               	addwf	?___awdiv,w,c
  8147  00E3D0  6E0F               	movwf	___wmul@multiplier,c
  8148  00E3D2  0E00               	movlw	0
  8149  00E3D4  2008               	addwfc	?___awdiv+1,w,c
  8150  00E3D6  6E10               	movwf	___wmul@multiplier+1,c
  8151  00E3D8  0E00               	movlw	0
  8152  00E3DA  6E12               	movwf	___wmul@multiplicand+1,c
  8153  00E3DC  0E03               	movlw	3
  8154  00E3DE  6E11               	movwf	___wmul@multiplicand,c
  8155  00E3E0  EC96  F061         	call	___wmul	;wreg free
  8156  00E3E4  0E36               	movlw	low __npowers_
  8157  00E3E6  240F               	addwf	?___wmul,w,c
  8158  00E3E8  6EF6               	movwf	tblptrl,c
  8159  00E3EA  0EFF               	movlw	high __npowers_
  8160  00E3EC  2010               	addwfc	?___wmul+1,w,c
  8161  00E3EE  6EF7               	movwf	tblptrh,c
  8162  00E3F0                     	if	0	;There are less than 3 active tblptr bytes
  8163  00E3F0                     	endif
  8164  00E3F0  0009               	tblrd		*+
  8165  00E3F2  CFF5 F015          	movff	tablat,___ftmul@f1
  8166  00E3F6  0009               	tblrd		*+
  8167  00E3F8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8168  00E3FC  000A               	tblrd		*-
  8169  00E3FE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8170  00E402  ECD6  F06A         	call	___ftmul	;wreg free
  8171  00E406  C015  F02A         	movff	?___ftmul,_fround$2383
  8172  00E40A  C016  F02B         	movff	?___ftmul+1,_fround$2383+1
  8173  00E40E  C017  F02C         	movff	?___ftmul+2,_fround$2383+2
  8174                           
  8175                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8176  00E412  0E00               	movlw	0
  8177  00E414  6E12               	movwf	___wmul@multiplicand+1,c
  8178  00E416  0E03               	movlw	3
  8179  00E418  6E11               	movwf	___wmul@multiplicand,c
  8180  00E41A  0E00               	movlw	0
  8181  00E41C  6E04               	movwf	___awmod@divisor+1,c
  8182  00E41E  0E0A               	movlw	10
  8183  00E420  6E03               	movwf	___awmod@divisor,c
  8184  00E422  C02D  F001         	movff	fround@prec,___awmod@dividend
  8185  00E426  6A02               	clrf	___awmod@dividend+1,c
  8186  00E428  ECDC  F064         	call	___awmod	;wreg free
  8187  00E42C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8188  00E430  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8189  00E434  EC96  F061         	call	___wmul	;wreg free
  8190  00E438  0E36               	movlw	low __npowers_
  8191  00E43A  240F               	addwf	?___wmul,w,c
  8192  00E43C  6EF6               	movwf	tblptrl,c
  8193  00E43E  0EFF               	movlw	high __npowers_
  8194  00E440  2010               	addwfc	?___wmul+1,w,c
  8195  00E442  6EF7               	movwf	tblptrh,c
  8196  00E444                     	if	0	;There are less than 3 active tblptr bytes
  8197  00E444                     	endif
  8198  00E444  0009               	tblrd		*+
  8199  00E446  CFF5 F018          	movff	tablat,___ftmul@f2
  8200  00E44A  0009               	tblrd		*+
  8201  00E44C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8202  00E450  000A               	tblrd		*-
  8203  00E452  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8204  00E456  C02A  F015         	movff	_fround$2383,___ftmul@f1
  8205  00E45A  C02B  F016         	movff	_fround$2383+1,___ftmul@f1+1
  8206  00E45E  C02C  F017         	movff	_fround$2383+2,___ftmul@f1+2
  8207  00E462  ECD6  F06A         	call	___ftmul	;wreg free
  8208  00E466  C015  F027         	movff	?___ftmul,_fround$2384
  8209  00E46A  C016  F028         	movff	?___ftmul+1,_fround$2384+1
  8210  00E46E  C017  F029         	movff	?___ftmul+2,_fround$2384+2
  8211                           
  8212                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8213  00E472  C027  F015         	movff	_fround$2384,___ftmul@f1
  8214  00E476  C028  F016         	movff	_fround$2384+1,___ftmul@f1+1
  8215  00E47A  C029  F017         	movff	_fround$2384+2,___ftmul@f1+2
  8216  00E47E  0E00               	movlw	0
  8217  00E480  6E18               	movwf	___ftmul@f2,c
  8218  00E482  0E00               	movlw	0
  8219  00E484  6E19               	movwf	___ftmul@f2+1,c
  8220  00E486  0E3F               	movlw	63
  8221  00E488  6E1A               	movwf	___ftmul@f2+2,c
  8222  00E48A  ECD6  F06A         	call	___ftmul	;wreg free
  8223  00E48E  D07D               	goto	L13
  8224  00E490  D083               	goto	l542
  8225  00E492  D062               	goto	l3812
  8226  00E494                     l3804:
  8227                           
  8228                           ;doprnt.c: 415: else if(prec > 10)
  8229  00E494  0E0A               	movlw	10
  8230  00E496  642D               	cpfsgt	fround@prec,c
  8231  00E498  D05F               	goto	l3812
  8232                           
  8233                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8234  00E49A  0E00               	movlw	0
  8235  00E49C  6E12               	movwf	___wmul@multiplicand+1,c
  8236  00E49E  0E03               	movlw	3
  8237  00E4A0  6E11               	movwf	___wmul@multiplicand,c
  8238  00E4A2  0E00               	movlw	0
  8239  00E4A4  6E04               	movwf	___awmod@divisor+1,c
  8240  00E4A6  0E0A               	movlw	10
  8241  00E4A8  6E03               	movwf	___awmod@divisor,c
  8242  00E4AA  C02D  F001         	movff	fround@prec,___awmod@dividend
  8243  00E4AE  6A02               	clrf	___awmod@dividend+1,c
  8244  00E4B0  ECDC  F064         	call	___awmod	;wreg free
  8245  00E4B4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8246  00E4B8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8247  00E4BC  EC96  F061         	call	___wmul	;wreg free
  8248  00E4C0  0E36               	movlw	low __npowers_
  8249  00E4C2  240F               	addwf	?___wmul,w,c
  8250  00E4C4  6EF6               	movwf	tblptrl,c
  8251  00E4C6  0EFF               	movlw	high __npowers_
  8252  00E4C8  2010               	addwfc	?___wmul+1,w,c
  8253  00E4CA  6EF7               	movwf	tblptrh,c
  8254  00E4CC                     	if	0	;There are less than 3 active tblptr bytes
  8255  00E4CC                     	endif
  8256  00E4CC  0009               	tblrd		*+
  8257  00E4CE  CFF5 F018          	movff	tablat,___ftmul@f2
  8258  00E4D2  0009               	tblrd		*+
  8259  00E4D4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8260  00E4D8  000A               	tblrd		*-
  8261  00E4DA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8262  00E4DE  0E00               	movlw	0
  8263  00E4E0  6E0A               	movwf	___awdiv@divisor+1,c
  8264  00E4E2  0E0A               	movlw	10
  8265  00E4E4  6E09               	movwf	___awdiv@divisor,c
  8266  00E4E6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8267  00E4EA  6A08               	clrf	___awdiv@dividend+1,c
  8268  00E4EC  EC2C  F066         	call	___awdiv	;wreg free
  8269  00E4F0  0E09               	movlw	9
  8270  00E4F2  2407               	addwf	?___awdiv,w,c
  8271  00E4F4  6E0F               	movwf	___wmul@multiplier,c
  8272  00E4F6  0E00               	movlw	0
  8273  00E4F8  2008               	addwfc	?___awdiv+1,w,c
  8274  00E4FA  6E10               	movwf	___wmul@multiplier+1,c
  8275  00E4FC  0E00               	movlw	0
  8276  00E4FE  6E12               	movwf	___wmul@multiplicand+1,c
  8277  00E500  0E03               	movlw	3
  8278  00E502  6E11               	movwf	___wmul@multiplicand,c
  8279  00E504  EC96  F061         	call	___wmul	;wreg free
  8280  00E508  0E36               	movlw	low __npowers_
  8281  00E50A  240F               	addwf	?___wmul,w,c
  8282  00E50C  6EF6               	movwf	tblptrl,c
  8283  00E50E  0EFF               	movlw	high __npowers_
  8284  00E510  2010               	addwfc	?___wmul+1,w,c
  8285  00E512  6EF7               	movwf	tblptrh,c
  8286  00E514                     	if	0	;There are less than 3 active tblptr bytes
  8287  00E514                     	endif
  8288  00E514  0009               	tblrd		*+
  8289  00E516  CFF5 F015          	movff	tablat,___ftmul@f1
  8290  00E51A  0009               	tblrd		*+
  8291  00E51C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8292  00E520  000A               	tblrd		*-
  8293  00E522  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8294  00E526  ECD6  F06A         	call	___ftmul	;wreg free
  8295  00E52A  C015  F02A         	movff	?___ftmul,_fround$2383
  8296  00E52E  C016  F02B         	movff	?___ftmul+1,_fround$2383+1
  8297  00E532  C017  F02C         	movff	?___ftmul+2,_fround$2383+2
  8298                           
  8299                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8300  00E536  C02A  F015         	movff	_fround$2383,___ftmul@f1
  8301  00E53A  C02B  F016         	movff	_fround$2383+1,___ftmul@f1+1
  8302  00E53E  C02C  F017         	movff	_fround$2383+2,___ftmul@f1+2
  8303  00E542  0E00               	movlw	0
  8304  00E544  6E18               	movwf	___ftmul@f2,c
  8305  00E546  0E00               	movlw	0
  8306  00E548  6E19               	movwf	___ftmul@f2+1,c
  8307  00E54A  0E3F               	movlw	63
  8308  00E54C  6E1A               	movwf	___ftmul@f2+2,c
  8309  00E54E  ECD6  F06A         	call	___ftmul	;wreg free
  8310  00E552  D01B               	goto	L13
  8311  00E554  D021               	goto	l542
  8312  00E556  D000               	goto	l3812
  8313  00E558                     l3812:
  8314                           
  8315                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8316  00E558  502D               	movf	fround@prec,w,c
  8317  00E55A  0D03               	mullw	3
  8318  00E55C  0E36               	movlw	low __npowers_
  8319  00E55E  24F3               	addwf	prodl,w,c
  8320  00E560  6EF6               	movwf	tblptrl,c
  8321  00E562  0EFF               	movlw	high __npowers_
  8322  00E564  20F4               	addwfc	prodh,w,c
  8323  00E566  6EF7               	movwf	tblptrh,c
  8324  00E568                     	if	0	;There are less than 3 active tblptr bytes
  8325  00E568                     	endif
  8326  00E568  0009               	tblrd		*+
  8327  00E56A  CFF5 F015          	movff	tablat,___ftmul@f1
  8328  00E56E  0009               	tblrd		*+
  8329  00E570  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8330  00E574  000A               	tblrd		*-
  8331  00E576  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8332  00E57A  0E00               	movlw	0
  8333  00E57C  6E18               	movwf	___ftmul@f2,c
  8334  00E57E  0E00               	movlw	0
  8335  00E580  6E19               	movwf	___ftmul@f2+1,c
  8336  00E582  0E3F               	movlw	63
  8337  00E584  6E1A               	movwf	___ftmul@f2+2,c
  8338  00E586  ECD6  F06A         	call	___ftmul	;wreg free
  8339  00E58A                     L13:
  8340  00E58A  C015  F024         	movff	?___ftmul,?_fround
  8341  00E58E  C016  F025         	movff	?___ftmul+1,?_fround+1
  8342  00E592  C017  F026         	movff	?___ftmul+2,?_fround+2
  8343  00E596  D000               	goto	l542
  8344  00E598                     l542:
  8345  00E598  0012               	return		;funcret
  8346  00E59A                     __end_of_fround:
  8347                           	opt stack 0
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon2	equ	0xFF1
  8355                           postinc0	equ	0xFEE
  8356                           wreg	equ	0xFE8
  8357                           postdec1	equ	0xFE5
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           fsr2h	equ	0xFDA
  8363                           fsr2l	equ	0xFD9
  8364                           status	equ	0xFD8
  8365                           
  8366 ;; *************** function ___ftmul *****************
  8367 ;; Defined at:
  8368 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;  f1              3   20[COMRAM] float 
  8371 ;;  f2              3   23[COMRAM] float 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  8374 ;;  sign            1   34[COMRAM] unsigned char 
  8375 ;;  cntr            1   33[COMRAM] unsigned char 
  8376 ;;  exp             1   29[COMRAM] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  3   20[COMRAM] float 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8386 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;Total ram usage:       15 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    1
  8393 ;; This function calls:
  8394 ;;		___ftpack
  8395 ;; This function is called by:
  8396 ;;		_fround
  8397 ;;		_scale
  8398 ;;		_printf
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	text28
  8403  00D5AC                     __ptext28:
  8404                           	opt stack 0
  8405  00D5AC                     ___ftmul:
  8406                           	opt stack 23
  8407                           
  8408                           ;incstack = 0
  8409  00D5AC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  8410  00D5B0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8411  00D5B2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8412  00D5B4  3416               	rlcf	___ftmul@f1+1,w,c
  8413  00D5B6  361B               	rlcf	??___ftmul& (0+255),f,c
  8414  00D5B8  E301               	bnc	u2841
  8415  00D5BA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8416  00D5BC                     u2841:
  8417  00D5BC  501B               	movf	??___ftmul,w,c
  8418  00D5BE  6E1E               	movwf	___ftmul@exp,c
  8419  00D5C0  501E               	movf	___ftmul@exp,w,c
  8420  00D5C2  A4D8               	btfss	status,2,c
  8421  00D5C4  D002               	goto	l3604
  8422  00D5C6  D00E               	goto	l3606
  8423  00D5C8  D06C               	goto	l1115
  8424  00D5CA                     l3604:
  8425  00D5CA  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  8426  00D5CE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8427  00D5D0  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8428  00D5D2  3419               	rlcf	___ftmul@f2+1,w,c
  8429  00D5D4  361B               	rlcf	??___ftmul& (0+255),f,c
  8430  00D5D6  E301               	bnc	u2861
  8431  00D5D8  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8432  00D5DA                     u2861:
  8433  00D5DA  501B               	movf	??___ftmul,w,c
  8434  00D5DC  6E23               	movwf	___ftmul@sign,c
  8435  00D5DE  5023               	movf	___ftmul@sign,w,c
  8436  00D5E0  A4D8               	btfss	status,2,c
  8437  00D5E2  D007               	goto	l3610
  8438  00D5E4                     l3606:
  8439  00D5E4  0E00               	movlw	0
  8440  00D5E6  6E15               	movwf	?___ftmul,c
  8441  00D5E8  0E00               	movlw	0
  8442  00D5EA  6E16               	movwf	?___ftmul+1,c
  8443  00D5EC  0E00               	movlw	0
  8444  00D5EE  6E17               	movwf	?___ftmul+2,c
  8445  00D5F0  D058               	goto	l1115
  8446  00D5F2                     l3610:
  8447  00D5F2  5023               	movf	___ftmul@sign,w,c
  8448  00D5F4  0F7B               	addlw	123
  8449  00D5F6  261E               	addwf	___ftmul@exp,f,c
  8450  00D5F8  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  8451  00D5FC  501A               	movf	___ftmul@f2+2,w,c
  8452  00D5FE  1A23               	xorwf	___ftmul@sign,f,c
  8453  00D600  0E80               	movlw	128
  8454  00D602  1623               	andwf	___ftmul@sign,f,c
  8455  00D604  8E16               	bsf	___ftmul@f1+1,7,c
  8456  00D606  8E19               	bsf	___ftmul@f2+1,7,c
  8457  00D608  0EFF               	movlw	255
  8458  00D60A  1618               	andwf	___ftmul@f2,f,c
  8459  00D60C  0EFF               	movlw	255
  8460  00D60E  1619               	andwf	___ftmul@f2+1,f,c
  8461  00D610  0E00               	movlw	0
  8462  00D612  161A               	andwf	___ftmul@f2+2,f,c
  8463  00D614  0E00               	movlw	0
  8464  00D616  6E1F               	movwf	___ftmul@f3_as_product,c
  8465  00D618  0E00               	movlw	0
  8466  00D61A  6E20               	movwf	___ftmul@f3_as_product+1,c
  8467  00D61C  0E00               	movlw	0
  8468  00D61E  6E21               	movwf	___ftmul@f3_as_product+2,c
  8469  00D620  0E07               	movlw	7
  8470  00D622  6E22               	movwf	___ftmul@cntr,c
  8471  00D624  D000               	goto	l3624
  8472  00D626                     l3624:
  8473  00D626  A015               	btfss	___ftmul@f1,0,c
  8474  00D628  D007               	goto	l3628
  8475  00D62A  5018               	movf	___ftmul@f2,w,c
  8476  00D62C  261F               	addwf	___ftmul@f3_as_product,f,c
  8477  00D62E  5019               	movf	___ftmul@f2+1,w,c
  8478  00D630  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8479  00D632  501A               	movf	___ftmul@f2+2,w,c
  8480  00D634  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8481  00D636  D000               	goto	l3628
  8482  00D638                     l3628:
  8483  00D638  90D8               	bcf	status,0,c
  8484  00D63A  3217               	rrcf	___ftmul@f1+2,f,c
  8485  00D63C  3216               	rrcf	___ftmul@f1+1,f,c
  8486  00D63E  3215               	rrcf	___ftmul@f1,f,c
  8487  00D640  90D8               	bcf	status,0,c
  8488  00D642  3618               	rlcf	___ftmul@f2,f,c
  8489  00D644  3619               	rlcf	___ftmul@f2+1,f,c
  8490  00D646  361A               	rlcf	___ftmul@f2+2,f,c
  8491  00D648  2E22               	decfsz	___ftmul@cntr,f,c
  8492  00D64A  D7ED               	goto	l3624
  8493  00D64C  D000               	goto	l3632
  8494  00D64E                     l3632:
  8495  00D64E  0E09               	movlw	9
  8496  00D650  6E22               	movwf	___ftmul@cntr,c
  8497  00D652  D000               	goto	l3634
  8498  00D654                     l3634:
  8499  00D654  A015               	btfss	___ftmul@f1,0,c
  8500  00D656  D007               	goto	l3638
  8501  00D658  5018               	movf	___ftmul@f2,w,c
  8502  00D65A  261F               	addwf	___ftmul@f3_as_product,f,c
  8503  00D65C  5019               	movf	___ftmul@f2+1,w,c
  8504  00D65E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8505  00D660  501A               	movf	___ftmul@f2+2,w,c
  8506  00D662  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8507  00D664  D000               	goto	l3638
  8508  00D666                     l3638:
  8509  00D666  90D8               	bcf	status,0,c
  8510  00D668  3217               	rrcf	___ftmul@f1+2,f,c
  8511  00D66A  3216               	rrcf	___ftmul@f1+1,f,c
  8512  00D66C  3215               	rrcf	___ftmul@f1,f,c
  8513  00D66E  90D8               	bcf	status,0,c
  8514  00D670  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  8515  00D672  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  8516  00D674  321F               	rrcf	___ftmul@f3_as_product,f,c
  8517  00D676  2E22               	decfsz	___ftmul@cntr,f,c
  8518  00D678  D7ED               	goto	l3634
  8519  00D67A  D000               	goto	l3642
  8520  00D67C                     l3642:
  8521  00D67C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8522  00D680  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8523  00D684  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8524  00D688  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  8525  00D68C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  8526  00D690  ECC5  F067         	call	___ftpack	;wreg free
  8527  00D694  C001  F015         	movff	?___ftpack,?___ftmul
  8528  00D698  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  8529  00D69C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  8530  00D6A0  D000               	goto	l1115
  8531  00D6A2                     l1115:
  8532  00D6A2  0012               	return		;funcret
  8533  00D6A4                     __end_of___ftmul:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon2	equ	0xFF1
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           postdec1	equ	0xFE5
  8545                           fsr1l	equ	0xFE1
  8546                           indf2	equ	0xFDF
  8547                           postinc2	equ	0xFDE
  8548                           postdec2	equ	0xFDD
  8549                           fsr2h	equ	0xFDA
  8550                           fsr2l	equ	0xFD9
  8551                           status	equ	0xFD8
  8552                           
  8553 ;; *************** function __tdiv_to_l_ *****************
  8554 ;; Defined at:
  8555 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;  f1              3    0[COMRAM] float 
  8558 ;;  f2              3    3[COMRAM] float 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;  quot            4    9[COMRAM] unsigned long 
  8561 ;;  exp1            1   14[COMRAM] unsigned char 
  8562 ;;  cntr            1   13[COMRAM] unsigned char 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  4    0[COMRAM] unsigned long 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8572 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;Total ram usage:       15 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_printf
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           	psect	text29
  8586  00D7AE                     __ptext29:
  8587                           	opt stack 0
  8588  00D7AE                     __tdiv_to_l_:
  8589                           	opt stack 25
  8590                           
  8591                           ;incstack = 0
  8592  00D7AE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8593  00D7B2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8594  00D7B4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8595  00D7B6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  8596  00D7B8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8597  00D7BA  E301               	bnc	u3271
  8598  00D7BC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8599  00D7BE                     u3271:
  8600  00D7BE  5007               	movf	??__tdiv_to_l_,w,c
  8601  00D7C0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  8602  00D7C2  500F               	movf	__tdiv_to_l_@exp1,w,c
  8603  00D7C4  A4D8               	btfss	status,2,c
  8604  00D7C6  D002               	goto	l3872
  8605  00D7C8  D05D               	goto	l3914
  8606  00D7CA  D078               	goto	l1091
  8607  00D7CC                     l3872:
  8608  00D7CC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8609  00D7D0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8610  00D7D2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8611  00D7D4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  8612  00D7D6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8613  00D7D8  E301               	bnc	u3291
  8614  00D7DA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8615  00D7DC                     u3291:
  8616  00D7DC  5007               	movf	??__tdiv_to_l_,w,c
  8617  00D7DE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8618  00D7E0  500E               	movf	__tdiv_to_l_@cntr,w,c
  8619  00D7E2  A4D8               	btfss	status,2,c
  8620  00D7E4  D002               	goto	l3878
  8621  00D7E6  D04E               	goto	l3914
  8622  00D7E8  D069               	goto	l1091
  8623  00D7EA                     l3878:
  8624  00D7EA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  8625  00D7EC  0EFF               	movlw	255
  8626  00D7EE  1601               	andwf	__tdiv_to_l_@f1,f,c
  8627  00D7F0  0EFF               	movlw	255
  8628  00D7F2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  8629  00D7F4  0E00               	movlw	0
  8630  00D7F6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  8631  00D7F8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  8632  00D7FA  0EFF               	movlw	255
  8633  00D7FC  1604               	andwf	__tdiv_to_l_@f2,f,c
  8634  00D7FE  0EFF               	movlw	255
  8635  00D800  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  8636  00D802  0E00               	movlw	0
  8637  00D804  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  8638  00D806  0E00               	movlw	0
  8639  00D808  6E0A               	movwf	__tdiv_to_l_@quot,c
  8640  00D80A  0E00               	movlw	0
  8641  00D80C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  8642  00D80E  0E00               	movlw	0
  8643  00D810  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  8644  00D812  0E00               	movlw	0
  8645  00D814  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  8646  00D816  0E7F               	movlw	127
  8647  00D818  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8648  00D81A  500E               	movf	__tdiv_to_l_@cntr,w,c
  8649  00D81C  0F98               	addlw	152
  8650  00D81E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8651  00D820  0E18               	movlw	24
  8652  00D822  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8653  00D824                     l1093:
  8654  00D824  90D8               	bcf	status,0,c
  8655  00D826  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8656  00D828  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8657  00D82A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8658  00D82C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8659  00D82E  5004               	movf	__tdiv_to_l_@f2,w,c
  8660  00D830  5C01               	subwf	__tdiv_to_l_@f1,w,c
  8661  00D832  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8662  00D834  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  8663  00D836  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8664  00D838  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  8665  00D83A  A0D8               	btfss	status,0,c
  8666  00D83C  D007               	goto	l1094
  8667  00D83E  5004               	movf	__tdiv_to_l_@f2,w,c
  8668  00D840  5E01               	subwf	__tdiv_to_l_@f1,f,c
  8669  00D842  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8670  00D844  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  8671  00D846  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8672  00D848  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  8673  00D84A  800A               	bsf	__tdiv_to_l_@quot,0,c
  8674  00D84C                     l1094:
  8675  00D84C  90D8               	bcf	status,0,c
  8676  00D84E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  8677  00D850  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  8678  00D852  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  8679  00D854  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  8680  00D856  D7E6               	goto	l1093
  8681  00D858  D000               	goto	l3900
  8682  00D85A                     l3900:
  8683  00D85A  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  8684  00D85C  D010               	goto	l3912
  8685  00D85E  500F               	movf	__tdiv_to_l_@exp1,w,c
  8686  00D860  0A80               	xorlw	128
  8687  00D862  0F97               	addlw	151
  8688  00D864  B0D8               	btfsc	status,0,c
  8689  00D866  D003               	goto	l3908
  8690  00D868  D00D               	goto	l3914
  8691  00D86A  D028               	goto	l1091
  8692  00D86C  D000               	goto	l3908
  8693  00D86E                     l3908:
  8694  00D86E  90D8               	bcf	status,0,c
  8695  00D870  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  8696  00D872  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  8697  00D874  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  8698  00D876  320A               	rrcf	__tdiv_to_l_@quot,f,c
  8699  00D878  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  8700  00D87A  D7F9               	goto	l3908
  8701  00D87C  D017               	goto	l1100
  8702  00D87E                     l3912:
  8703  00D87E  0E17               	movlw	23
  8704  00D880  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  8705  00D882  D011               	goto	l3920
  8706  00D884                     l3914:
  8707  00D884  0E00               	movlw	0
  8708  00D886  6E01               	movwf	?__tdiv_to_l_,c
  8709  00D888  0E00               	movlw	0
  8710  00D88A  6E02               	movwf	?__tdiv_to_l_+1,c
  8711  00D88C  0E00               	movlw	0
  8712  00D88E  6E03               	movwf	?__tdiv_to_l_+2,c
  8713  00D890  0E00               	movlw	0
  8714  00D892  6E04               	movwf	?__tdiv_to_l_+3,c
  8715  00D894  D013               	goto	l1091
  8716  00D896  D007               	goto	l3920
  8717  00D898                     l3918:
  8718  00D898  90D8               	bcf	status,0,c
  8719  00D89A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8720  00D89C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8721  00D89E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8722  00D8A0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8723  00D8A2  060F               	decf	__tdiv_to_l_@exp1,f,c
  8724  00D8A4  D000               	goto	l3920
  8725  00D8A6                     l3920:
  8726  00D8A6  500F               	movf	__tdiv_to_l_@exp1,w,c
  8727  00D8A8  A4D8               	btfss	status,2,c
  8728  00D8AA  D7F6               	goto	l3918
  8729  00D8AC                     l1100:
  8730  00D8AC  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8731  00D8B0  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8732  00D8B4  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8733  00D8B8  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8734  00D8BC                     l1091:
  8735  00D8BC  0012               	return		;funcret
  8736  00D8BE                     __end_of__tdiv_to_l_:
  8737                           	opt stack 0
  8738                           tblptru	equ	0xFF8
  8739                           tblptrh	equ	0xFF7
  8740                           tblptrl	equ	0xFF6
  8741                           tablat	equ	0xFF5
  8742                           prodh	equ	0xFF4
  8743                           prodl	equ	0xFF3
  8744                           intcon2	equ	0xFF1
  8745                           postinc0	equ	0xFEE
  8746                           wreg	equ	0xFE8
  8747                           postdec1	equ	0xFE5
  8748                           fsr1l	equ	0xFE1
  8749                           indf2	equ	0xFDF
  8750                           postinc2	equ	0xFDE
  8751                           postdec2	equ	0xFDD
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756 ;; *************** function __div_to_l_ *****************
  8757 ;; Defined at:
  8758 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;  f1              3    0[COMRAM] unsigned long 
  8761 ;;  f2              3    3[COMRAM] unsigned long 
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  quot            4    6[COMRAM] unsigned long 
  8764 ;;  exp1            1   11[COMRAM] unsigned char 
  8765 ;;  cntr            1   10[COMRAM] unsigned char 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  4    0[COMRAM] unsigned long 
  8768 ;; Registers used:
  8769 ;;		wreg, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8775 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;Total ram usage:       12 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_printf
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text30
  8789  00D6A4                     __ptext30:
  8790                           	opt stack 0
  8791  00D6A4                     __div_to_l_:
  8792                           	opt stack 25
  8793                           
  8794                           ;incstack = 0
  8795  00D6A4  3403               	rlcf	__div_to_l_@f1+2,w,c
  8796  00D6A6  3404               	rlcf	__div_to_l_@f1+3,w,c
  8797  00D6A8  6E0C               	movwf	__div_to_l_@exp1,c
  8798  00D6AA  500C               	movf	__div_to_l_@exp1,w,c
  8799  00D6AC  A4D8               	btfss	status,2,c
  8800  00D6AE  D002               	goto	l3928
  8801  00D6B0  D061               	goto	l3974
  8802  00D6B2  D07C               	goto	l970
  8803  00D6B4                     l3928:
  8804  00D6B4  3406               	rlcf	__div_to_l_@f2+2,w,c
  8805  00D6B6  3407               	rlcf	__div_to_l_@f2+3,w,c
  8806  00D6B8  6E0B               	movwf	__div_to_l_@cntr,c
  8807  00D6BA  500B               	movf	__div_to_l_@cntr,w,c
  8808  00D6BC  A4D8               	btfss	status,2,c
  8809  00D6BE  D002               	goto	l3934
  8810  00D6C0  D059               	goto	l3974
  8811  00D6C2  D074               	goto	l970
  8812  00D6C4                     l3934:
  8813  00D6C4  8E03               	bsf	__div_to_l_@f1+2,7,c
  8814  00D6C6  0EFF               	movlw	255
  8815  00D6C8  1601               	andwf	__div_to_l_@f1,f,c
  8816  00D6CA  0EFF               	movlw	255
  8817  00D6CC  1602               	andwf	__div_to_l_@f1+1,f,c
  8818  00D6CE  0EFF               	movlw	255
  8819  00D6D0  1603               	andwf	__div_to_l_@f1+2,f,c
  8820  00D6D2  0E00               	movlw	0
  8821  00D6D4  1604               	andwf	__div_to_l_@f1+3,f,c
  8822  00D6D6  8E06               	bsf	__div_to_l_@f2+2,7,c
  8823  00D6D8  0EFF               	movlw	255
  8824  00D6DA  1604               	andwf	__div_to_l_@f2,f,c
  8825  00D6DC  0EFF               	movlw	255
  8826  00D6DE  1605               	andwf	__div_to_l_@f2+1,f,c
  8827  00D6E0  0EFF               	movlw	255
  8828  00D6E2  1606               	andwf	__div_to_l_@f2+2,f,c
  8829  00D6E4  0E00               	movlw	0
  8830  00D6E6  1607               	andwf	__div_to_l_@f2+3,f,c
  8831  00D6E8  0E00               	movlw	0
  8832  00D6EA  6E07               	movwf	__div_to_l_@quot,c
  8833  00D6EC  0E00               	movlw	0
  8834  00D6EE  6E08               	movwf	__div_to_l_@quot+1,c
  8835  00D6F0  0E00               	movlw	0
  8836  00D6F2  6E09               	movwf	__div_to_l_@quot+2,c
  8837  00D6F4  0E00               	movlw	0
  8838  00D6F6  6E0A               	movwf	__div_to_l_@quot+3,c
  8839  00D6F8  0E7F               	movlw	127
  8840  00D6FA  5E0C               	subwf	__div_to_l_@exp1,f,c
  8841  00D6FC  500B               	movf	__div_to_l_@cntr,w,c
  8842  00D6FE  0FA0               	addlw	160
  8843  00D700  5E0C               	subwf	__div_to_l_@exp1,f,c
  8844  00D702  0E20               	movlw	32
  8845  00D704  6E0B               	movwf	__div_to_l_@cntr,c
  8846  00D706  D000               	goto	l3948
  8847  00D708                     l3948:
  8848  00D708  90D8               	bcf	status,0,c
  8849  00D70A  3607               	rlcf	__div_to_l_@quot,f,c
  8850  00D70C  3608               	rlcf	__div_to_l_@quot+1,f,c
  8851  00D70E  3609               	rlcf	__div_to_l_@quot+2,f,c
  8852  00D710  360A               	rlcf	__div_to_l_@quot+3,f,c
  8853  00D712  5004               	movf	__div_to_l_@f2,w,c
  8854  00D714  5C01               	subwf	__div_to_l_@f1,w,c
  8855  00D716  5005               	movf	__div_to_l_@f2+1,w,c
  8856  00D718  5802               	subwfb	__div_to_l_@f1+1,w,c
  8857  00D71A  5006               	movf	__div_to_l_@f2+2,w,c
  8858  00D71C  5803               	subwfb	__div_to_l_@f1+2,w,c
  8859  00D71E  5007               	movf	__div_to_l_@f2+3,w,c
  8860  00D720  5804               	subwfb	__div_to_l_@f1+3,w,c
  8861  00D722  A0D8               	btfss	status,0,c
  8862  00D724  D00A               	goto	l3956
  8863  00D726  5004               	movf	__div_to_l_@f2,w,c
  8864  00D728  5E01               	subwf	__div_to_l_@f1,f,c
  8865  00D72A  5005               	movf	__div_to_l_@f2+1,w,c
  8866  00D72C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  8867  00D72E  5006               	movf	__div_to_l_@f2+2,w,c
  8868  00D730  5A03               	subwfb	__div_to_l_@f1+2,f,c
  8869  00D732  5007               	movf	__div_to_l_@f2+3,w,c
  8870  00D734  5A04               	subwfb	__div_to_l_@f1+3,f,c
  8871  00D736  8007               	bsf	__div_to_l_@quot,0,c
  8872  00D738  D000               	goto	l3956
  8873  00D73A                     l3956:
  8874  00D73A  90D8               	bcf	status,0,c
  8875  00D73C  3601               	rlcf	__div_to_l_@f1,f,c
  8876  00D73E  3602               	rlcf	__div_to_l_@f1+1,f,c
  8877  00D740  3603               	rlcf	__div_to_l_@f1+2,f,c
  8878  00D742  3604               	rlcf	__div_to_l_@f1+3,f,c
  8879  00D744  2E0B               	decfsz	__div_to_l_@cntr,f,c
  8880  00D746  D7E0               	goto	l3948
  8881  00D748  D000               	goto	l3960
  8882  00D74A                     l3960:
  8883  00D74A  AE0C               	btfss	__div_to_l_@exp1,7,c
  8884  00D74C  D010               	goto	l3972
  8885  00D74E  500C               	movf	__div_to_l_@exp1,w,c
  8886  00D750  0A80               	xorlw	128
  8887  00D752  0F9F               	addlw	159
  8888  00D754  B0D8               	btfsc	status,0,c
  8889  00D756  D003               	goto	l3968
  8890  00D758  D00D               	goto	l3974
  8891  00D75A  D028               	goto	l970
  8892  00D75C  D000               	goto	l3968
  8893  00D75E                     l3968:
  8894  00D75E  90D8               	bcf	status,0,c
  8895  00D760  320A               	rrcf	__div_to_l_@quot+3,f,c
  8896  00D762  3209               	rrcf	__div_to_l_@quot+2,f,c
  8897  00D764  3208               	rrcf	__div_to_l_@quot+1,f,c
  8898  00D766  3207               	rrcf	__div_to_l_@quot,f,c
  8899  00D768  3E0C               	incfsz	__div_to_l_@exp1,f,c
  8900  00D76A  D7F9               	goto	l3968
  8901  00D76C  D017               	goto	l979
  8902  00D76E                     l3972:
  8903  00D76E  0E1F               	movlw	31
  8904  00D770  640C               	cpfsgt	__div_to_l_@exp1,c
  8905  00D772  D011               	goto	l3980
  8906  00D774                     l3974:
  8907  00D774  0E00               	movlw	0
  8908  00D776  6E01               	movwf	?__div_to_l_,c
  8909  00D778  0E00               	movlw	0
  8910  00D77A  6E02               	movwf	?__div_to_l_+1,c
  8911  00D77C  0E00               	movlw	0
  8912  00D77E  6E03               	movwf	?__div_to_l_+2,c
  8913  00D780  0E00               	movlw	0
  8914  00D782  6E04               	movwf	?__div_to_l_+3,c
  8915  00D784  D013               	goto	l970
  8916  00D786  D007               	goto	l3980
  8917  00D788                     l3978:
  8918  00D788  90D8               	bcf	status,0,c
  8919  00D78A  3607               	rlcf	__div_to_l_@quot,f,c
  8920  00D78C  3608               	rlcf	__div_to_l_@quot+1,f,c
  8921  00D78E  3609               	rlcf	__div_to_l_@quot+2,f,c
  8922  00D790  360A               	rlcf	__div_to_l_@quot+3,f,c
  8923  00D792  060C               	decf	__div_to_l_@exp1,f,c
  8924  00D794  D000               	goto	l3980
  8925  00D796                     l3980:
  8926  00D796  500C               	movf	__div_to_l_@exp1,w,c
  8927  00D798  A4D8               	btfss	status,2,c
  8928  00D79A  D7F6               	goto	l3978
  8929  00D79C                     l979:
  8930  00D79C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  8931  00D7A0  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8932  00D7A4  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8933  00D7A8  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8934  00D7AC                     l970:
  8935  00D7AC  0012               	return		;funcret
  8936  00D7AE                     __end_of__div_to_l_:
  8937                           	opt stack 0
  8938                           tblptru	equ	0xFF8
  8939                           tblptrh	equ	0xFF7
  8940                           tblptrl	equ	0xFF6
  8941                           tablat	equ	0xFF5
  8942                           prodh	equ	0xFF4
  8943                           prodl	equ	0xFF3
  8944                           intcon2	equ	0xFF1
  8945                           postinc0	equ	0xFEE
  8946                           wreg	equ	0xFE8
  8947                           postdec1	equ	0xFE5
  8948                           fsr1l	equ	0xFE1
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           fsr2h	equ	0xFDA
  8953                           fsr2l	equ	0xFD9
  8954                           status	equ	0xFD8
  8955                           
  8956 ;; *************** function ___lltoft *****************
  8957 ;; Defined at:
  8958 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  c               4    8[COMRAM] unsigned long 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  exp             1   16[COMRAM] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  3    8[COMRAM] float 
  8965 ;; Registers used:
  8966 ;;		wreg, status,2, status,0, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;Total ram usage:        9 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    1
  8979 ;; This function calls:
  8980 ;;		___ftpack
  8981 ;; This function is called by:
  8982 ;;		_printf
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text31
  8987  00C7B0                     __ptext31:
  8988                           	opt stack 0
  8989  00C7B0                     ___lltoft:
  8990                           	opt stack 24
  8991                           
  8992                           ;incstack = 0
  8993  00C7B0  0E8E               	movlw	142
  8994  00C7B2  6E11               	movwf	___lltoft@exp,c
  8995  00C7B4  D007               	goto	l4100
  8996  00C7B6                     l4098:
  8997  00C7B6  90D8               	bcf	status,0,c
  8998  00C7B8  320C               	rrcf	___lltoft@c+3,f,c
  8999  00C7BA  320B               	rrcf	___lltoft@c+2,f,c
  9000  00C7BC  320A               	rrcf	___lltoft@c+1,f,c
  9001  00C7BE  3209               	rrcf	___lltoft@c,f,c
  9002  00C7C0  2A11               	incf	___lltoft@exp,f,c
  9003  00C7C2  D000               	goto	l4100
  9004  00C7C4                     l4100:
  9005  00C7C4  0E00               	movlw	0
  9006  00C7C6  1409               	andwf	___lltoft@c,w,c
  9007  00C7C8  6E0D               	movwf	??___lltoft& (0+255),c
  9008  00C7CA  0E00               	movlw	0
  9009  00C7CC  140A               	andwf	___lltoft@c+1,w,c
  9010  00C7CE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9011  00C7D0  0E00               	movlw	0
  9012  00C7D2  140B               	andwf	___lltoft@c+2,w,c
  9013  00C7D4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9014  00C7D6  0EFF               	movlw	255
  9015  00C7D8  140C               	andwf	___lltoft@c+3,w,c
  9016  00C7DA  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9017  00C7DC  500D               	movf	??___lltoft,w,c
  9018  00C7DE  100E               	iorwf	??___lltoft+1,w,c
  9019  00C7E0  100F               	iorwf	??___lltoft+2,w,c
  9020  00C7E2  1010               	iorwf	??___lltoft+3,w,c
  9021  00C7E4  A4D8               	btfss	status,2,c
  9022  00C7E6  D7E7               	goto	l4098
  9023  00C7E8  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9024  00C7EC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9025  00C7F0  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9026  00C7F4  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9027  00C7F8  0E00               	movlw	0
  9028  00C7FA  6E05               	movwf	___ftpack@sign,c
  9029  00C7FC  ECC5  F067         	call	___ftpack	;wreg free
  9030  00C800  C001  F009         	movff	?___ftpack,?___lltoft
  9031  00C804  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9032  00C808  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9033  00C80C  D000               	goto	l1210
  9034  00C80E                     l1210:
  9035  00C80E  0012               	return		;funcret
  9036  00C810                     __end_of___lltoft:
  9037                           	opt stack 0
  9038                           tblptru	equ	0xFF8
  9039                           tblptrh	equ	0xFF7
  9040                           tblptrl	equ	0xFF6
  9041                           tablat	equ	0xFF5
  9042                           prodh	equ	0xFF4
  9043                           prodl	equ	0xFF3
  9044                           intcon2	equ	0xFF1
  9045                           postinc0	equ	0xFEE
  9046                           wreg	equ	0xFE8
  9047                           postdec1	equ	0xFE5
  9048                           fsr1l	equ	0xFE1
  9049                           indf2	equ	0xFDF
  9050                           postinc2	equ	0xFDE
  9051                           postdec2	equ	0xFDD
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           
  9056 ;; *************** function ___llmod *****************
  9057 ;; Defined at:
  9058 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  dividend        4    0[COMRAM] unsigned long 
  9061 ;;  divisor         4    4[COMRAM] unsigned long 
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  counter         1    8[COMRAM] unsigned char 
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  4    0[COMRAM] unsigned long 
  9066 ;; Registers used:
  9067 ;;		wreg, status,2, status,0
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;Total ram usage:        9 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_printf
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           	psect	text32
  9087  00C8D8                     __ptext32:
  9088                           	opt stack 0
  9089  00C8D8                     ___llmod:
  9090                           	opt stack 25
  9091                           
  9092                           ;incstack = 0
  9093  00C8D8  5005               	movf	___llmod@divisor,w,c
  9094  00C8DA  1006               	iorwf	___llmod@divisor+1,w,c
  9095  00C8DC  1007               	iorwf	___llmod@divisor+2,w,c
  9096  00C8DE  1008               	iorwf	___llmod@divisor+3,w,c
  9097  00C8E0  B4D8               	btfsc	status,2,c
  9098  00C8E2  D029               	goto	l1190
  9099  00C8E4  0E01               	movlw	1
  9100  00C8E6  6E09               	movwf	___llmod@counter,c
  9101  00C8E8  D007               	goto	l4086
  9102  00C8EA                     l4084:
  9103  00C8EA  90D8               	bcf	status,0,c
  9104  00C8EC  3605               	rlcf	___llmod@divisor,f,c
  9105  00C8EE  3606               	rlcf	___llmod@divisor+1,f,c
  9106  00C8F0  3607               	rlcf	___llmod@divisor+2,f,c
  9107  00C8F2  3608               	rlcf	___llmod@divisor+3,f,c
  9108  00C8F4  2A09               	incf	___llmod@counter,f,c
  9109  00C8F6  D000               	goto	l4086
  9110  00C8F8                     l4086:
  9111  00C8F8  BE08               	btfsc	___llmod@divisor+3,7,c
  9112  00C8FA  D002               	goto	l4088
  9113  00C8FC  D7F6               	goto	l4084
  9114  00C8FE  D000               	goto	l4088
  9115  00C900                     l4088:
  9116  00C900  5005               	movf	___llmod@divisor,w,c
  9117  00C902  5C01               	subwf	___llmod@dividend,w,c
  9118  00C904  5006               	movf	___llmod@divisor+1,w,c
  9119  00C906  5802               	subwfb	___llmod@dividend+1,w,c
  9120  00C908  5007               	movf	___llmod@divisor+2,w,c
  9121  00C90A  5803               	subwfb	___llmod@dividend+2,w,c
  9122  00C90C  5008               	movf	___llmod@divisor+3,w,c
  9123  00C90E  5804               	subwfb	___llmod@dividend+3,w,c
  9124  00C910  A0D8               	btfss	status,0,c
  9125  00C912  D009               	goto	l4092
  9126  00C914  5005               	movf	___llmod@divisor,w,c
  9127  00C916  5E01               	subwf	___llmod@dividend,f,c
  9128  00C918  5006               	movf	___llmod@divisor+1,w,c
  9129  00C91A  5A02               	subwfb	___llmod@dividend+1,f,c
  9130  00C91C  5007               	movf	___llmod@divisor+2,w,c
  9131  00C91E  5A03               	subwfb	___llmod@dividend+2,f,c
  9132  00C920  5008               	movf	___llmod@divisor+3,w,c
  9133  00C922  5A04               	subwfb	___llmod@dividend+3,f,c
  9134  00C924  D000               	goto	l4092
  9135  00C926                     l4092:
  9136  00C926  90D8               	bcf	status,0,c
  9137  00C928  3208               	rrcf	___llmod@divisor+3,f,c
  9138  00C92A  3207               	rrcf	___llmod@divisor+2,f,c
  9139  00C92C  3206               	rrcf	___llmod@divisor+1,f,c
  9140  00C92E  3205               	rrcf	___llmod@divisor,f,c
  9141  00C930  2E09               	decfsz	___llmod@counter,f,c
  9142  00C932  D7E6               	goto	l4088
  9143  00C934  D000               	goto	l1190
  9144  00C936                     l1190:
  9145  00C936  C001  F001         	movff	___llmod@dividend,?___llmod
  9146  00C93A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  9147  00C93E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  9148  00C942  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  9149  00C946  0012               	return		;funcret
  9150  00C948                     __end_of___llmod:
  9151                           	opt stack 0
  9152                           tblptru	equ	0xFF8
  9153                           tblptrh	equ	0xFF7
  9154                           tblptrl	equ	0xFF6
  9155                           tablat	equ	0xFF5
  9156                           prodh	equ	0xFF4
  9157                           prodl	equ	0xFF3
  9158                           intcon2	equ	0xFF1
  9159                           postinc0	equ	0xFEE
  9160                           wreg	equ	0xFE8
  9161                           postdec1	equ	0xFE5
  9162                           fsr1l	equ	0xFE1
  9163                           indf2	equ	0xFDF
  9164                           postinc2	equ	0xFDE
  9165                           postdec2	equ	0xFDD
  9166                           fsr2h	equ	0xFDA
  9167                           fsr2l	equ	0xFD9
  9168                           status	equ	0xFD8
  9169                           
  9170 ;; *************** function ___lldiv *****************
  9171 ;; Defined at:
  9172 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;  dividend        4    0[COMRAM] unsigned long 
  9175 ;;  divisor         4    4[COMRAM] unsigned long 
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  quotient        4    8[COMRAM] unsigned long 
  9178 ;;  counter         1   12[COMRAM] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  4    0[COMRAM] unsigned long 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:       13 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_printf
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           	psect	text33
  9202  00CBCC                     __ptext33:
  9203                           	opt stack 0
  9204  00CBCC                     ___lldiv:
  9205                           	opt stack 25
  9206                           
  9207                           ;incstack = 0
  9208  00CBCC  0E00               	movlw	0
  9209  00CBCE  6E09               	movwf	___lldiv@quotient,c
  9210  00CBD0  0E00               	movlw	0
  9211  00CBD2  6E0A               	movwf	___lldiv@quotient+1,c
  9212  00CBD4  0E00               	movlw	0
  9213  00CBD6  6E0B               	movwf	___lldiv@quotient+2,c
  9214  00CBD8  0E00               	movlw	0
  9215  00CBDA  6E0C               	movwf	___lldiv@quotient+3,c
  9216  00CBDC  5005               	movf	___lldiv@divisor,w,c
  9217  00CBDE  1006               	iorwf	___lldiv@divisor+1,w,c
  9218  00CBE0  1007               	iorwf	___lldiv@divisor+2,w,c
  9219  00CBE2  1008               	iorwf	___lldiv@divisor+3,w,c
  9220  00CBE4  B4D8               	btfsc	status,2,c
  9221  00CBE6  D02F               	goto	l1180
  9222  00CBE8  0E01               	movlw	1
  9223  00CBEA  6E0D               	movwf	___lldiv@counter,c
  9224  00CBEC  D007               	goto	l4066
  9225  00CBEE                     l4064:
  9226  00CBEE  90D8               	bcf	status,0,c
  9227  00CBF0  3605               	rlcf	___lldiv@divisor,f,c
  9228  00CBF2  3606               	rlcf	___lldiv@divisor+1,f,c
  9229  00CBF4  3607               	rlcf	___lldiv@divisor+2,f,c
  9230  00CBF6  3608               	rlcf	___lldiv@divisor+3,f,c
  9231  00CBF8  2A0D               	incf	___lldiv@counter,f,c
  9232  00CBFA  D000               	goto	l4066
  9233  00CBFC                     l4066:
  9234  00CBFC  BE08               	btfsc	___lldiv@divisor+3,7,c
  9235  00CBFE  D002               	goto	l4068
  9236  00CC00  D7F6               	goto	l4064
  9237  00CC02  D000               	goto	l4068
  9238  00CC04                     l4068:
  9239  00CC04  90D8               	bcf	status,0,c
  9240  00CC06  3609               	rlcf	___lldiv@quotient,f,c
  9241  00CC08  360A               	rlcf	___lldiv@quotient+1,f,c
  9242  00CC0A  360B               	rlcf	___lldiv@quotient+2,f,c
  9243  00CC0C  360C               	rlcf	___lldiv@quotient+3,f,c
  9244  00CC0E  5005               	movf	___lldiv@divisor,w,c
  9245  00CC10  5C01               	subwf	___lldiv@dividend,w,c
  9246  00CC12  5006               	movf	___lldiv@divisor+1,w,c
  9247  00CC14  5802               	subwfb	___lldiv@dividend+1,w,c
  9248  00CC16  5007               	movf	___lldiv@divisor+2,w,c
  9249  00CC18  5803               	subwfb	___lldiv@dividend+2,w,c
  9250  00CC1A  5008               	movf	___lldiv@divisor+3,w,c
  9251  00CC1C  5804               	subwfb	___lldiv@dividend+3,w,c
  9252  00CC1E  A0D8               	btfss	status,0,c
  9253  00CC20  D00A               	goto	l4076
  9254  00CC22  5005               	movf	___lldiv@divisor,w,c
  9255  00CC24  5E01               	subwf	___lldiv@dividend,f,c
  9256  00CC26  5006               	movf	___lldiv@divisor+1,w,c
  9257  00CC28  5A02               	subwfb	___lldiv@dividend+1,f,c
  9258  00CC2A  5007               	movf	___lldiv@divisor+2,w,c
  9259  00CC2C  5A03               	subwfb	___lldiv@dividend+2,f,c
  9260  00CC2E  5008               	movf	___lldiv@divisor+3,w,c
  9261  00CC30  5A04               	subwfb	___lldiv@dividend+3,f,c
  9262  00CC32  8009               	bsf	___lldiv@quotient,0,c
  9263  00CC34  D000               	goto	l4076
  9264  00CC36                     l4076:
  9265  00CC36  90D8               	bcf	status,0,c
  9266  00CC38  3208               	rrcf	___lldiv@divisor+3,f,c
  9267  00CC3A  3207               	rrcf	___lldiv@divisor+2,f,c
  9268  00CC3C  3206               	rrcf	___lldiv@divisor+1,f,c
  9269  00CC3E  3205               	rrcf	___lldiv@divisor,f,c
  9270  00CC40  2E0D               	decfsz	___lldiv@counter,f,c
  9271  00CC42  D7E0               	goto	l4068
  9272  00CC44  D000               	goto	l1180
  9273  00CC46                     l1180:
  9274  00CC46  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9275  00CC4A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9276  00CC4E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9277  00CC52  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9278  00CC56  0012               	return		;funcret
  9279  00CC58                     __end_of___lldiv:
  9280                           	opt stack 0
  9281                           tblptru	equ	0xFF8
  9282                           tblptrh	equ	0xFF7
  9283                           tblptrl	equ	0xFF6
  9284                           tablat	equ	0xFF5
  9285                           prodh	equ	0xFF4
  9286                           prodl	equ	0xFF3
  9287                           intcon2	equ	0xFF1
  9288                           postinc0	equ	0xFEE
  9289                           wreg	equ	0xFE8
  9290                           postdec1	equ	0xFE5
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function ___fttol *****************
  9300 ;; Defined at:
  9301 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  f1              3   42[COMRAM] float 
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  lval            4   52[COMRAM] unsigned long 
  9306 ;;  exp1            1   56[COMRAM] unsigned char 
  9307 ;;  sign1           1   51[COMRAM] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  4   42[COMRAM] long 
  9310 ;; Registers used:
  9311 ;;		wreg, status,2, status,0
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:       15 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_printf
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           	psect	text34
  9331  00D2EC                     __ptext34:
  9332                           	opt stack 0
  9333  00D2EC                     ___fttol:
  9334                           	opt stack 25
  9335                           
  9336                           ;incstack = 0
  9337  00D2EC  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  9338  00D2F0  6A30               	clrf	(??___fttol+1)& (0+255),c
  9339  00D2F2  6A31               	clrf	(??___fttol+2)& (0+255),c
  9340  00D2F4  342C               	rlcf	___fttol@f1+1,w,c
  9341  00D2F6  362F               	rlcf	??___fttol& (0+255),f,c
  9342  00D2F8  E301               	bnc	u3481
  9343  00D2FA  8030               	bsf	(??___fttol+1)& (0+255),0,c
  9344  00D2FC                     u3481:
  9345  00D2FC  502F               	movf	??___fttol,w,c
  9346  00D2FE  6E39               	movwf	___fttol@exp1,c
  9347  00D300  5039               	movf	___fttol@exp1,w,c
  9348  00D302  A4D8               	btfss	status,2,c
  9349  00D304  D002               	goto	l4018
  9350  00D306  D039               	goto	l4042
  9351  00D308  D063               	goto	l1136
  9352  00D30A                     l4018:
  9353  00D30A  0E17               	movlw	23
  9354  00D30C  6E2F               	movwf	??___fttol& (0+255),c
  9355  00D30E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  9356  00D312  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  9357  00D316  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  9358  00D31A  282F               	incf	??___fttol,w,c
  9359  00D31C  6E33               	movwf	(??___fttol+4)& (0+255),c
  9360  00D31E  D004               	goto	u3500
  9361  00D320                     u3505:
  9362  00D320  90D8               	bcf	status,0,c
  9363  00D322  3232               	rrcf	??___fttol+3,f,c
  9364  00D324  3231               	rrcf	??___fttol+2,f,c
  9365  00D326  3230               	rrcf	??___fttol+1,f,c
  9366  00D328                     u3500:
  9367  00D328  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  9368  00D32A  D7FA               	goto	u3505
  9369  00D32C  5030               	movf	??___fttol+1,w,c
  9370  00D32E  6E34               	movwf	___fttol@sign1,c
  9371  00D330  8E2C               	bsf	___fttol@f1+1,7,c
  9372  00D332  0EFF               	movlw	255
  9373  00D334  162B               	andwf	___fttol@f1,f,c
  9374  00D336  0EFF               	movlw	255
  9375  00D338  162C               	andwf	___fttol@f1+1,f,c
  9376  00D33A  0E00               	movlw	0
  9377  00D33C  162D               	andwf	___fttol@f1+2,f,c
  9378  00D33E  502B               	movf	___fttol@f1,w,c
  9379  00D340  6E35               	movwf	___fttol@lval,c
  9380  00D342  502C               	movf	___fttol@f1+1,w,c
  9381  00D344  6E36               	movwf	___fttol@lval+1,c
  9382  00D346  502D               	movf	___fttol@f1+2,w,c
  9383  00D348  6E37               	movwf	___fttol@lval+2,c
  9384  00D34A  6A38               	clrf	___fttol@lval+3,c
  9385  00D34C  0E8E               	movlw	142
  9386  00D34E  5E39               	subwf	___fttol@exp1,f,c
  9387  00D350  AE39               	btfss	___fttol@exp1,7,c
  9388  00D352  D010               	goto	l4040
  9389  00D354  5039               	movf	___fttol@exp1,w,c
  9390  00D356  0A80               	xorlw	128
  9391  00D358  0F8F               	addlw	143
  9392  00D35A  B0D8               	btfsc	status,0,c
  9393  00D35C  D003               	goto	l4036
  9394  00D35E  D00D               	goto	l4042
  9395  00D360  D037               	goto	l1136
  9396  00D362  D000               	goto	l4036
  9397  00D364                     l4036:
  9398  00D364  90D8               	bcf	status,0,c
  9399  00D366  3238               	rrcf	___fttol@lval+3,f,c
  9400  00D368  3237               	rrcf	___fttol@lval+2,f,c
  9401  00D36A  3236               	rrcf	___fttol@lval+1,f,c
  9402  00D36C  3235               	rrcf	___fttol@lval,f,c
  9403  00D36E  3E39               	incfsz	___fttol@exp1,f,c
  9404  00D370  D7F9               	goto	l4036
  9405  00D372  D019               	goto	l4050
  9406  00D374                     l4040:
  9407  00D374  0E17               	movlw	23
  9408  00D376  6439               	cpfsgt	___fttol@exp1,c
  9409  00D378  D011               	goto	l4048
  9410  00D37A                     l4042:
  9411  00D37A  0E00               	movlw	0
  9412  00D37C  6E2B               	movwf	?___fttol,c
  9413  00D37E  0E00               	movlw	0
  9414  00D380  6E2C               	movwf	?___fttol+1,c
  9415  00D382  0E00               	movlw	0
  9416  00D384  6E2D               	movwf	?___fttol+2,c
  9417  00D386  0E00               	movlw	0
  9418  00D388  6E2E               	movwf	?___fttol+3,c
  9419  00D38A  D022               	goto	l1136
  9420  00D38C  D007               	goto	l4048
  9421  00D38E                     l4046:
  9422  00D38E  90D8               	bcf	status,0,c
  9423  00D390  3635               	rlcf	___fttol@lval,f,c
  9424  00D392  3636               	rlcf	___fttol@lval+1,f,c
  9425  00D394  3637               	rlcf	___fttol@lval+2,f,c
  9426  00D396  3638               	rlcf	___fttol@lval+3,f,c
  9427  00D398  0639               	decf	___fttol@exp1,f,c
  9428  00D39A  D000               	goto	l4048
  9429  00D39C                     l4048:
  9430  00D39C  5039               	movf	___fttol@exp1,w,c
  9431  00D39E  B4D8               	btfsc	status,2,c
  9432  00D3A0  D002               	goto	l4050
  9433  00D3A2  D7F5               	goto	l4046
  9434  00D3A4  D000               	goto	l4050
  9435  00D3A6                     l4050:
  9436  00D3A6  5034               	movf	___fttol@sign1,w,c
  9437  00D3A8  B4D8               	btfsc	status,2,c
  9438  00D3AA  D009               	goto	l4054
  9439  00D3AC  1E38               	comf	___fttol@lval+3,f,c
  9440  00D3AE  1E37               	comf	___fttol@lval+2,f,c
  9441  00D3B0  1E36               	comf	___fttol@lval+1,f,c
  9442  00D3B2  6C35               	negf	___fttol@lval,c
  9443  00D3B4  0E00               	movlw	0
  9444  00D3B6  2236               	addwfc	___fttol@lval+1,f,c
  9445  00D3B8  2237               	addwfc	___fttol@lval+2,f,c
  9446  00D3BA  2238               	addwfc	___fttol@lval+3,f,c
  9447  00D3BC  D000               	goto	l4054
  9448  00D3BE                     l4054:
  9449  00D3BE  C035  F02B         	movff	___fttol@lval,?___fttol
  9450  00D3C2  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  9451  00D3C6  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  9452  00D3CA  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  9453  00D3CE  D000               	goto	l1136
  9454  00D3D0                     l1136:
  9455  00D3D0  0012               	return		;funcret
  9456  00D3D2                     __end_of___fttol:
  9457                           	opt stack 0
  9458                           tblptru	equ	0xFF8
  9459                           tblptrh	equ	0xFF7
  9460                           tblptrl	equ	0xFF6
  9461                           tablat	equ	0xFF5
  9462                           prodh	equ	0xFF4
  9463                           prodl	equ	0xFF3
  9464                           intcon2	equ	0xFF1
  9465                           postinc0	equ	0xFEE
  9466                           wreg	equ	0xFE8
  9467                           postdec1	equ	0xFE5
  9468                           fsr1l	equ	0xFE1
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           postdec2	equ	0xFDD
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function ___ftsub *****************
  9477 ;; Defined at:
  9478 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  f1              3   57[COMRAM] float 
  9481 ;;  f2              3   60[COMRAM] float 
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  3   57[COMRAM] float 
  9486 ;; Registers used:
  9487 ;;		wreg, status,2, status,0, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9493 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;Total ram usage:        6 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    2
  9500 ;; This function calls:
  9501 ;;		___ftadd
  9502 ;; This function is called by:
  9503 ;;		_printf
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           	psect	text35
  9508  00C630                     __ptext35:
  9509                           	opt stack 0
  9510  00C630                     ___ftsub:
  9511                           	opt stack 23
  9512                           
  9513                           ;incstack = 0
  9514  00C630  503D               	movf	___ftsub@f2,w,c
  9515  00C632  103E               	iorwf	___ftsub@f2+1,w,c
  9516  00C634  103F               	iorwf	___ftsub@f2+2,w,c
  9517  00C636  B4D8               	btfsc	status,2,c
  9518  00C638  D007               	goto	l3986
  9519  00C63A  0E00               	movlw	0
  9520  00C63C  1A3D               	xorwf	___ftsub@f2,f,c
  9521  00C63E  0E00               	movlw	0
  9522  00C640  1A3E               	xorwf	___ftsub@f2+1,f,c
  9523  00C642  0E80               	movlw	128
  9524  00C644  1A3F               	xorwf	___ftsub@f2+2,f,c
  9525  00C646  D000               	goto	l3986
  9526  00C648                     l3986:
  9527  00C648  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  9528  00C64C  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  9529  00C650  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  9530  00C654  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  9531  00C658  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  9532  00C65C  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  9533  00C660  ECDA  F06F         	call	___ftadd	;wreg free
  9534  00C664  C02E  F03A         	movff	?___ftadd,?___ftsub
  9535  00C668  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  9536  00C66C  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  9537  00C670  D000               	goto	l1132
  9538  00C672                     l1132:
  9539  00C672  0012               	return		;funcret
  9540  00C674                     __end_of___ftsub:
  9541                           	opt stack 0
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           intcon2	equ	0xFF1
  9549                           postinc0	equ	0xFEE
  9550                           wreg	equ	0xFE8
  9551                           postdec1	equ	0xFE5
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function ___ftadd *****************
  9561 ;; Defined at:
  9562 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  f1              3   45[COMRAM] float 
  9565 ;;  f2              3   48[COMRAM] float 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  exp1            1   56[COMRAM] unsigned char 
  9568 ;;  exp2            1   55[COMRAM] unsigned char 
  9569 ;;  sign            1   54[COMRAM] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  3   45[COMRAM] float 
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, status,0, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9579 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;Total ram usage:       12 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    1
  9586 ;; This function calls:
  9587 ;;		___ftpack
  9588 ;; This function is called by:
  9589 ;;		_printf
  9590 ;;		___ftsub
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text36
  9595  00DFB4                     __ptext36:
  9596                           	opt stack 0
  9597  00DFB4                     ___ftadd:
  9598                           	opt stack 23
  9599                           
  9600                           ;incstack = 0
  9601  00DFB4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  9602  00DFB8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9603  00DFBA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9604  00DFBC  342F               	rlcf	___ftadd@f1+1,w,c
  9605  00DFBE  3634               	rlcf	??___ftadd& (0+255),f,c
  9606  00DFC0  E301               	bnc	u2631
  9607  00DFC2  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9608  00DFC4                     u2631:
  9609  00DFC4  5034               	movf	??___ftadd,w,c
  9610  00DFC6  6E39               	movwf	___ftadd@exp1,c
  9611  00DFC8  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  9612  00DFCC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9613  00DFCE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9614  00DFD0  3432               	rlcf	___ftadd@f2+1,w,c
  9615  00DFD2  3634               	rlcf	??___ftadd& (0+255),f,c
  9616  00DFD4  E301               	bnc	u2641
  9617  00DFD6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9618  00DFD8                     u2641:
  9619  00DFD8  5034               	movf	??___ftadd,w,c
  9620  00DFDA  6E38               	movwf	___ftadd@exp2,c
  9621  00DFDC  5039               	movf	___ftadd@exp1,w,c
  9622  00DFDE  B4D8               	btfsc	status,2,c
  9623  00DFE0  D00B               	goto	l1051
  9624  00DFE2  5038               	movf	___ftadd@exp2,w,c
  9625  00DFE4  5C39               	subwf	___ftadd@exp1,w,c
  9626  00DFE6  B0D8               	btfsc	status,0,c
  9627  00DFE8  D00E               	goto	l3536
  9628  00DFEA  5039               	movf	___ftadd@exp1,w,c
  9629  00DFEC  0800               	sublw	0
  9630  00DFEE  2438               	addwf	___ftadd@exp2,w,c
  9631  00DFF0  6E34               	movwf	??___ftadd& (0+255),c
  9632  00DFF2  0E18               	movlw	24
  9633  00DFF4  6434               	cpfsgt	??___ftadd,c
  9634  00DFF6  D007               	goto	l3536
  9635  00DFF8                     l1051:
  9636  00DFF8  C031  F02E         	movff	___ftadd@f2,?___ftadd
  9637  00DFFC  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  9638  00E000  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  9639  00E004  D0B8               	goto	l1052
  9640  00E006                     l3536:
  9641  00E006  5038               	movf	___ftadd@exp2,w,c
  9642  00E008  B4D8               	btfsc	status,2,c
  9643  00E00A  D00B               	goto	l1055
  9644  00E00C  5039               	movf	___ftadd@exp1,w,c
  9645  00E00E  5C38               	subwf	___ftadd@exp2,w,c
  9646  00E010  B0D8               	btfsc	status,0,c
  9647  00E012  D00E               	goto	l3542
  9648  00E014  5038               	movf	___ftadd@exp2,w,c
  9649  00E016  0800               	sublw	0
  9650  00E018  2439               	addwf	___ftadd@exp1,w,c
  9651  00E01A  6E34               	movwf	??___ftadd& (0+255),c
  9652  00E01C  0E18               	movlw	24
  9653  00E01E  6434               	cpfsgt	??___ftadd,c
  9654  00E020  D007               	goto	l3542
  9655  00E022                     l1055:
  9656  00E022  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  9657  00E026  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  9658  00E02A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  9659  00E02E  D0A3               	goto	l1052
  9660  00E030                     l3542:
  9661  00E030  0E06               	movlw	6
  9662  00E032  6E37               	movwf	___ftadd@sign,c
  9663  00E034  AE30               	btfss	___ftadd@f1+2,7,c
  9664  00E036  D002               	goto	l3548
  9665  00E038  8E37               	bsf	___ftadd@sign,7,c
  9666  00E03A  D000               	goto	l3548
  9667  00E03C                     l3548:
  9668  00E03C  BE33               	btfsc	___ftadd@f2+2,7,c
  9669  00E03E  8C37               	bsf	___ftadd@sign,6,c
  9670  00E040  8E2F               	bsf	___ftadd@f1+1,7,c
  9671  00E042  0EFF               	movlw	255
  9672  00E044  162E               	andwf	___ftadd@f1,f,c
  9673  00E046  0EFF               	movlw	255
  9674  00E048  162F               	andwf	___ftadd@f1+1,f,c
  9675  00E04A  0E00               	movlw	0
  9676  00E04C  1630               	andwf	___ftadd@f1+2,f,c
  9677  00E04E  8E32               	bsf	___ftadd@f2+1,7,c
  9678  00E050  0EFF               	movlw	255
  9679  00E052  1631               	andwf	___ftadd@f2,f,c
  9680  00E054  0EFF               	movlw	255
  9681  00E056  1632               	andwf	___ftadd@f2+1,f,c
  9682  00E058  0E00               	movlw	0
  9683  00E05A  1633               	andwf	___ftadd@f2+2,f,c
  9684  00E05C  5038               	movf	___ftadd@exp2,w,c
  9685  00E05E  5C39               	subwf	___ftadd@exp1,w,c
  9686  00E060  B0D8               	btfsc	status,0,c
  9687  00E062  D01E               	goto	l3568
  9688  00E064                     l3558:
  9689  00E064  90D8               	bcf	status,0,c
  9690  00E066  3631               	rlcf	___ftadd@f2,f,c
  9691  00E068  3632               	rlcf	___ftadd@f2+1,f,c
  9692  00E06A  3633               	rlcf	___ftadd@f2+2,f,c
  9693  00E06C  0638               	decf	___ftadd@exp2,f,c
  9694  00E06E  5039               	movf	___ftadd@exp1,w,c
  9695  00E070  1838               	xorwf	___ftadd@exp2,w,c
  9696  00E072  B4D8               	btfsc	status,2,c
  9697  00E074  D00F               	goto	l3566
  9698  00E076  0637               	decf	___ftadd@sign,f,c
  9699  00E078  C037  F034         	movff	___ftadd@sign,??___ftadd
  9700  00E07C  0E07               	movlw	7
  9701  00E07E  1634               	andwf	??___ftadd,f,c
  9702  00E080  B4D8               	btfsc	status,2,c
  9703  00E082  D008               	goto	l3566
  9704  00E084  D7EF               	goto	l3558
  9705  00E086  D006               	goto	l3566
  9706  00E088                     l3564:
  9707  00E088  90D8               	bcf	status,0,c
  9708  00E08A  3230               	rrcf	___ftadd@f1+2,f,c
  9709  00E08C  322F               	rrcf	___ftadd@f1+1,f,c
  9710  00E08E  322E               	rrcf	___ftadd@f1,f,c
  9711  00E090  2A39               	incf	___ftadd@exp1,f,c
  9712  00E092  D000               	goto	l3566
  9713  00E094                     l3566:
  9714  00E094  5038               	movf	___ftadd@exp2,w,c
  9715  00E096  1839               	xorwf	___ftadd@exp1,w,c
  9716  00E098  B4D8               	btfsc	status,2,c
  9717  00E09A  D024               	goto	l1066
  9718  00E09C  D7F5               	goto	l3564
  9719  00E09E  D022               	goto	l1066
  9720  00E0A0                     l3568:
  9721  00E0A0  5039               	movf	___ftadd@exp1,w,c
  9722  00E0A2  5C38               	subwf	___ftadd@exp2,w,c
  9723  00E0A4  B0D8               	btfsc	status,0,c
  9724  00E0A6  D01E               	goto	l1066
  9725  00E0A8                     l3570:
  9726  00E0A8  90D8               	bcf	status,0,c
  9727  00E0AA  362E               	rlcf	___ftadd@f1,f,c
  9728  00E0AC  362F               	rlcf	___ftadd@f1+1,f,c
  9729  00E0AE  3630               	rlcf	___ftadd@f1+2,f,c
  9730  00E0B0  0639               	decf	___ftadd@exp1,f,c
  9731  00E0B2  5039               	movf	___ftadd@exp1,w,c
  9732  00E0B4  1838               	xorwf	___ftadd@exp2,w,c
  9733  00E0B6  B4D8               	btfsc	status,2,c
  9734  00E0B8  D00F               	goto	l3578
  9735  00E0BA  0637               	decf	___ftadd@sign,f,c
  9736  00E0BC  C037  F034         	movff	___ftadd@sign,??___ftadd
  9737  00E0C0  0E07               	movlw	7
  9738  00E0C2  1634               	andwf	??___ftadd,f,c
  9739  00E0C4  B4D8               	btfsc	status,2,c
  9740  00E0C6  D008               	goto	l3578
  9741  00E0C8  D7EF               	goto	l3570
  9742  00E0CA  D006               	goto	l3578
  9743  00E0CC                     l3576:
  9744  00E0CC  90D8               	bcf	status,0,c
  9745  00E0CE  3233               	rrcf	___ftadd@f2+2,f,c
  9746  00E0D0  3232               	rrcf	___ftadd@f2+1,f,c
  9747  00E0D2  3231               	rrcf	___ftadd@f2,f,c
  9748  00E0D4  2A38               	incf	___ftadd@exp2,f,c
  9749  00E0D6  D000               	goto	l3578
  9750  00E0D8                     l3578:
  9751  00E0D8  5038               	movf	___ftadd@exp2,w,c
  9752  00E0DA  1839               	xorwf	___ftadd@exp1,w,c
  9753  00E0DC  B4D8               	btfsc	status,2,c
  9754  00E0DE  D002               	goto	l1066
  9755  00E0E0  D7F5               	goto	l3576
  9756  00E0E2  D000               	goto	l1066
  9757  00E0E4                     l1066:
  9758  00E0E4  AE37               	btfss	___ftadd@sign,7,c
  9759  00E0E6  D00C               	goto	l1075
  9760  00E0E8  0EFF               	movlw	255
  9761  00E0EA  1A2E               	xorwf	___ftadd@f1,f,c
  9762  00E0EC  0EFF               	movlw	255
  9763  00E0EE  1A2F               	xorwf	___ftadd@f1+1,f,c
  9764  00E0F0  0EFF               	movlw	255
  9765  00E0F2  1A30               	xorwf	___ftadd@f1+2,f,c
  9766  00E0F4  0E01               	movlw	1
  9767  00E0F6  262E               	addwf	___ftadd@f1,f,c
  9768  00E0F8  0E00               	movlw	0
  9769  00E0FA  222F               	addwfc	___ftadd@f1+1,f,c
  9770  00E0FC  0E00               	movlw	0
  9771  00E0FE  2230               	addwfc	___ftadd@f1+2,f,c
  9772  00E100                     l1075:
  9773  00E100  AC37               	btfss	___ftadd@sign,6,c
  9774  00E102  D00D               	goto	l3584
  9775  00E104  0EFF               	movlw	255
  9776  00E106  1A31               	xorwf	___ftadd@f2,f,c
  9777  00E108  0EFF               	movlw	255
  9778  00E10A  1A32               	xorwf	___ftadd@f2+1,f,c
  9779  00E10C  0EFF               	movlw	255
  9780  00E10E  1A33               	xorwf	___ftadd@f2+2,f,c
  9781  00E110  0E01               	movlw	1
  9782  00E112  2631               	addwf	___ftadd@f2,f,c
  9783  00E114  0E00               	movlw	0
  9784  00E116  2232               	addwfc	___ftadd@f2+1,f,c
  9785  00E118  0E00               	movlw	0
  9786  00E11A  2233               	addwfc	___ftadd@f2+2,f,c
  9787  00E11C  D000               	goto	l3584
  9788  00E11E                     l3584:
  9789  00E11E  0E00               	movlw	0
  9790  00E120  6E37               	movwf	___ftadd@sign,c
  9791  00E122  502E               	movf	___ftadd@f1,w,c
  9792  00E124  2631               	addwf	___ftadd@f2,f,c
  9793  00E126  502F               	movf	___ftadd@f1+1,w,c
  9794  00E128  2232               	addwfc	___ftadd@f2+1,f,c
  9795  00E12A  5030               	movf	___ftadd@f1+2,w,c
  9796  00E12C  2233               	addwfc	___ftadd@f2+2,f,c
  9797  00E12E  AE33               	btfss	___ftadd@f2+2,7,c
  9798  00E130  D00F               	goto	l3594
  9799  00E132  0EFF               	movlw	255
  9800  00E134  1A31               	xorwf	___ftadd@f2,f,c
  9801  00E136  0EFF               	movlw	255
  9802  00E138  1A32               	xorwf	___ftadd@f2+1,f,c
  9803  00E13A  0EFF               	movlw	255
  9804  00E13C  1A33               	xorwf	___ftadd@f2+2,f,c
  9805  00E13E  0E01               	movlw	1
  9806  00E140  2631               	addwf	___ftadd@f2,f,c
  9807  00E142  0E00               	movlw	0
  9808  00E144  2232               	addwfc	___ftadd@f2+1,f,c
  9809  00E146  0E00               	movlw	0
  9810  00E148  2233               	addwfc	___ftadd@f2+2,f,c
  9811  00E14A  0E01               	movlw	1
  9812  00E14C  6E37               	movwf	___ftadd@sign,c
  9813  00E14E  D000               	goto	l3594
  9814  00E150                     l3594:
  9815  00E150  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  9816  00E154  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9817  00E158  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9818  00E15C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  9819  00E160  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  9820  00E164  ECC5  F067         	call	___ftpack	;wreg free
  9821  00E168  C001  F02E         	movff	?___ftpack,?___ftadd
  9822  00E16C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  9823  00E170  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  9824  00E174  D000               	goto	l1052
  9825  00E176                     l1052:
  9826  00E176  0012               	return		;funcret
  9827  00E178                     __end_of___ftadd:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           intcon2	equ	0xFF1
  9836                           postinc0	equ	0xFEE
  9837                           wreg	equ	0xFE8
  9838                           postdec1	equ	0xFE5
  9839                           fsr1l	equ	0xFE1
  9840                           indf2	equ	0xFDF
  9841                           postinc2	equ	0xFDE
  9842                           postdec2	equ	0xFDD
  9843                           fsr2h	equ	0xFDA
  9844                           fsr2l	equ	0xFD9
  9845                           status	equ	0xFD8
  9846                           
  9847 ;; *************** function ___ftneg *****************
  9848 ;; Defined at:
  9849 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;  f1              3    0[COMRAM] float 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;		None
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  3    0[COMRAM] float 
  9856 ;; Registers used:
  9857 ;;		wreg, status,2, status,0
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9863 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;Total ram usage:        3 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_printf
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text37
  9877  00C2E2                     __ptext37:
  9878                           	opt stack 0
  9879  00C2E2                     ___ftneg:
  9880                           	opt stack 25
  9881                           
  9882                           ;incstack = 0
  9883  00C2E2  5001               	movf	___ftneg@f1,w,c
  9884  00C2E4  1002               	iorwf	___ftneg@f1+1,w,c
  9885  00C2E6  1003               	iorwf	___ftneg@f1+2,w,c
  9886  00C2E8  B4D8               	btfsc	status,2,c
  9887  00C2EA  D006               	goto	l1125
  9888  00C2EC  0E00               	movlw	0
  9889  00C2EE  1A01               	xorwf	___ftneg@f1,f,c
  9890  00C2F0  0E00               	movlw	0
  9891  00C2F2  1A02               	xorwf	___ftneg@f1+1,f,c
  9892  00C2F4  0E80               	movlw	128
  9893  00C2F6  1A03               	xorwf	___ftneg@f1+2,f,c
  9894  00C2F8                     l1125:
  9895  00C2F8  C001  F001         	movff	___ftneg@f1,?___ftneg
  9896  00C2FC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9897  00C300  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9898  00C304  0012               	return		;funcret
  9899  00C306                     __end_of___ftneg:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           postdec1	equ	0xFE5
  9911                           fsr1l	equ	0xFE1
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function ___ftge *****************
  9920 ;; Defined at:
  9921 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;  ff1             3    0[COMRAM] float 
  9924 ;;  ff2             3    3[COMRAM] float 
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;		None               void
  9929 ;; Registers used:
  9930 ;;		wreg, status,2, status,0
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9936 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;Total ram usage:        9 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; This function calls:
  9943 ;;		Nothing
  9944 ;; This function is called by:
  9945 ;;		_main
  9946 ;;		_update_LCD_misc
  9947 ;;		_printf
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text38
  9952  00CCEE                     __ptext38:
  9953                           	opt stack 0
  9954  00CCEE                     ___ftge:
  9955                           	opt stack 30
  9956                           
  9957                           ;incstack = 0
  9958  00CCEE  AE03               	btfss	___ftge@ff1+2,7,c
  9959  00CCF0  D017               	goto	l3994
  9960  00CCF2  C001  F007         	movff	___ftge@ff1,??___ftge
  9961  00CCF6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9962  00CCFA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9963  00CCFE  1E07               	comf	??___ftge,f,c
  9964  00CD00  1E08               	comf	??___ftge+1,f,c
  9965  00CD02  1E09               	comf	??___ftge+2,f,c
  9966  00CD04  2A07               	incf	??___ftge,f,c
  9967  00CD06  0E00               	movlw	0
  9968  00CD08  2208               	addwfc	??___ftge+1,f,c
  9969  00CD0A  2209               	addwfc	??___ftge+2,f,c
  9970  00CD0C  0E00               	movlw	0
  9971  00CD0E  2407               	addwf	??___ftge,w,c
  9972  00CD10  6E01               	movwf	___ftge@ff1,c
  9973  00CD12  0E00               	movlw	0
  9974  00CD14  2008               	addwfc	??___ftge+1,w,c
  9975  00CD16  6E02               	movwf	___ftge@ff1+1,c
  9976  00CD18  0E80               	movlw	128
  9977  00CD1A  2009               	addwfc	??___ftge+2,w,c
  9978  00CD1C  6E03               	movwf	___ftge@ff1+2,c
  9979  00CD1E  D000               	goto	l3994
  9980  00CD20                     l3994:
  9981  00CD20  AE06               	btfss	___ftge@ff2+2,7,c
  9982  00CD22  D017               	goto	l3998
  9983  00CD24  C004  F007         	movff	___ftge@ff2,??___ftge
  9984  00CD28  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9985  00CD2C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9986  00CD30  1E07               	comf	??___ftge,f,c
  9987  00CD32  1E08               	comf	??___ftge+1,f,c
  9988  00CD34  1E09               	comf	??___ftge+2,f,c
  9989  00CD36  2A07               	incf	??___ftge,f,c
  9990  00CD38  0E00               	movlw	0
  9991  00CD3A  2208               	addwfc	??___ftge+1,f,c
  9992  00CD3C  2209               	addwfc	??___ftge+2,f,c
  9993  00CD3E  0E00               	movlw	0
  9994  00CD40  2407               	addwf	??___ftge,w,c
  9995  00CD42  6E04               	movwf	___ftge@ff2,c
  9996  00CD44  0E00               	movlw	0
  9997  00CD46  2008               	addwfc	??___ftge+1,w,c
  9998  00CD48  6E05               	movwf	___ftge@ff2+1,c
  9999  00CD4A  0E80               	movlw	128
 10000  00CD4C  2009               	addwfc	??___ftge+2,w,c
 10001  00CD4E  6E06               	movwf	___ftge@ff2+2,c
 10002  00CD50  D000               	goto	l3998
 10003  00CD52                     l3998:
 10004  00CD52  0E00               	movlw	0
 10005  00CD54  1A01               	xorwf	___ftge@ff1,f,c
 10006  00CD56  0E00               	movlw	0
 10007  00CD58  1A02               	xorwf	___ftge@ff1+1,f,c
 10008  00CD5A  0E80               	movlw	128
 10009  00CD5C  1A03               	xorwf	___ftge@ff1+2,f,c
 10010  00CD5E  0E00               	movlw	0
 10011  00CD60  1A04               	xorwf	___ftge@ff2,f,c
 10012  00CD62  0E00               	movlw	0
 10013  00CD64  1A05               	xorwf	___ftge@ff2+1,f,c
 10014  00CD66  0E80               	movlw	128
 10015  00CD68  1A06               	xorwf	___ftge@ff2+2,f,c
 10016  00CD6A  5004               	movf	___ftge@ff2,w,c
 10017  00CD6C  5C01               	subwf	___ftge@ff1,w,c
 10018  00CD6E  5005               	movf	___ftge@ff2+1,w,c
 10019  00CD70  5802               	subwfb	___ftge@ff1+1,w,c
 10020  00CD72  5006               	movf	___ftge@ff2+2,w,c
 10021  00CD74  5803               	subwfb	___ftge@ff1+2,w,c
 10022  00CD76  B0D8               	btfsc	status,0,c
 10023  00CD78  D002               	goto	l4004
 10024  00CD7A  90D8               	bcf	status,0,c
 10025  00CD7C  D002               	goto	l1109
 10026  00CD7E                     l4004:
 10027  00CD7E  80D8               	bsf	status,0,c
 10028  00CD80  D000               	goto	l1109
 10029  00CD82                     l1109:
 10030  00CD82  0012               	return		;funcret
 10031  00CD84                     __end_of___ftge:
 10032                           	opt stack 0
 10033                           tblptru	equ	0xFF8
 10034                           tblptrh	equ	0xFF7
 10035                           tblptrl	equ	0xFF6
 10036                           tablat	equ	0xFF5
 10037                           prodh	equ	0xFF4
 10038                           prodl	equ	0xFF3
 10039                           intcon2	equ	0xFF1
 10040                           postinc0	equ	0xFEE
 10041                           wreg	equ	0xFE8
 10042                           postdec1	equ	0xFE5
 10043                           fsr1l	equ	0xFE1
 10044                           indf2	equ	0xFDF
 10045                           postinc2	equ	0xFDE
 10046                           postdec2	equ	0xFDD
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function _get_full_ADC *****************
 10052 ;; Defined at:
 10053 ;;		line 450 in file "Lab8p1.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  result          2    4[COMRAM] int 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  2    0[COMRAM] unsigned int 
 10060 ;; Registers used:
 10061 ;;		wreg, status,2, status,0
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10071 ;;Total ram usage:        6 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; This function calls:
 10074 ;;		Nothing
 10075 ;; This function is called by:
 10076 ;;		_main
 10077 ;;		_update_LCD_misc
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text39
 10082  00C306                     __ptext39:
 10083                           	opt stack 0
 10084  00C306                     _get_full_ADC:
 10085                           	opt stack 30
 10086                           
 10087                           ;Lab8p1.c: 452: int result;
 10088                           ;Lab8p1.c: 453: ADCON0bits.GO=1;
 10089                           
 10090                           ;incstack = 0
 10091  00C306  82C2               	bsf	4034,1,c	;volatile
 10092                           
 10093                           ;Lab8p1.c: 454: while(ADCON0bits.DONE==1);
 10094  00C308  D000               	goto	l415
 10095  00C30A                     l415:
 10096  00C30A  B2C2               	btfsc	4034,1,c	;volatile
 10097  00C30C  D7FE               	goto	l415
 10098                           
 10099                           ;Lab8p1.c: 455: result = (ADRESH * 0x100) + ADRESL;
 10100  00C30E  50C4               	movf	4036,w,c	;volatile
 10101  00C310  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
 10102  00C312  6A03               	clrf	??_get_full_ADC& (0+255),c
 10103  00C314  50C3               	movf	4035,w,c	;volatile
 10104  00C316  2403               	addwf	??_get_full_ADC,w,c
 10105  00C318  6E05               	movwf	get_full_ADC@result,c
 10106  00C31A  0E00               	movlw	0
 10107  00C31C  2004               	addwfc	??_get_full_ADC+1,w,c
 10108  00C31E  6E06               	movwf	get_full_ADC@result+1,c
 10109                           
 10110                           ;Lab8p1.c: 457: return result;
 10111  00C320  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
 10112  00C324  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 10113  00C328  D000               	goto	l418
 10114  00C32A                     l418:
 10115  00C32A  0012               	return		;funcret
 10116  00C32C                     __end_of_get_full_ADC:
 10117                           	opt stack 0
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon2	equ	0xFF1
 10125                           postinc0	equ	0xFEE
 10126                           wreg	equ	0xFE8
 10127                           postdec1	equ	0xFE5
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           
 10136 ;; *************** function ___ftdiv *****************
 10137 ;; Defined at:
 10138 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;  f1              3   24[COMRAM] float 
 10141 ;;  f2              3   27[COMRAM] float 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  f3              3   34[COMRAM] float 
 10144 ;;  sign            1   38[COMRAM] unsigned char 
 10145 ;;  exp             1   37[COMRAM] unsigned char 
 10146 ;;  cntr            1   33[COMRAM] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  3   24[COMRAM] float 
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10156 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;Total ram usage:       15 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    1
 10163 ;; This function calls:
 10164 ;;		___ftpack
 10165 ;; This function is called by:
 10166 ;;		_main
 10167 ;;		_update_LCD_misc
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text40
 10172  00D20A                     __ptext40:
 10173                           	opt stack 0
 10174  00D20A                     ___ftdiv:
 10175                           	opt stack 29
 10176                           
 10177                           ;incstack = 0
 10178  00D20A  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
 10179  00D20E  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 10180  00D210  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 10181  00D212  341A               	rlcf	___ftdiv@f1+1,w,c
 10182  00D214  361F               	rlcf	??___ftdiv& (0+255),f,c
 10183  00D216  E301               	bnc	u4261
 10184  00D218  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 10185  00D21A                     u4261:
 10186  00D21A  501F               	movf	??___ftdiv,w,c
 10187  00D21C  6E26               	movwf	___ftdiv@exp,c
 10188  00D21E  5026               	movf	___ftdiv@exp,w,c
 10189  00D220  A4D8               	btfss	status,2,c
 10190  00D222  D002               	goto	l4454
 10191  00D224  D00E               	goto	l4456
 10192  00D226  D061               	goto	l1083
 10193  00D228                     l4454:
 10194  00D228  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
 10195  00D22C  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 10196  00D22E  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 10197  00D230  341D               	rlcf	___ftdiv@f2+1,w,c
 10198  00D232  361F               	rlcf	??___ftdiv& (0+255),f,c
 10199  00D234  E301               	bnc	u4281
 10200  00D236  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 10201  00D238                     u4281:
 10202  00D238  501F               	movf	??___ftdiv,w,c
 10203  00D23A  6E27               	movwf	___ftdiv@sign,c
 10204  00D23C  5027               	movf	___ftdiv@sign,w,c
 10205  00D23E  A4D8               	btfss	status,2,c
 10206  00D240  D007               	goto	l4460
 10207  00D242                     l4456:
 10208  00D242  0E00               	movlw	0
 10209  00D244  6E19               	movwf	?___ftdiv,c
 10210  00D246  0E00               	movlw	0
 10211  00D248  6E1A               	movwf	?___ftdiv+1,c
 10212  00D24A  0E00               	movlw	0
 10213  00D24C  6E1B               	movwf	?___ftdiv+2,c
 10214  00D24E  D04D               	goto	l1083
 10215  00D250                     l4460:
 10216  00D250  0E00               	movlw	0
 10217  00D252  6E23               	movwf	___ftdiv@f3,c
 10218  00D254  0E00               	movlw	0
 10219  00D256  6E24               	movwf	___ftdiv@f3+1,c
 10220  00D258  0E00               	movlw	0
 10221  00D25A  6E25               	movwf	___ftdiv@f3+2,c
 10222  00D25C  5027               	movf	___ftdiv@sign,w,c
 10223  00D25E  0F89               	addlw	137
 10224  00D260  5E26               	subwf	___ftdiv@exp,f,c
 10225  00D262  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
 10226  00D266  501E               	movf	___ftdiv@f2+2,w,c
 10227  00D268  1A27               	xorwf	___ftdiv@sign,f,c
 10228  00D26A  0E80               	movlw	128
 10229  00D26C  1627               	andwf	___ftdiv@sign,f,c
 10230  00D26E  8E1A               	bsf	___ftdiv@f1+1,7,c
 10231  00D270  0EFF               	movlw	255
 10232  00D272  1619               	andwf	___ftdiv@f1,f,c
 10233  00D274  0EFF               	movlw	255
 10234  00D276  161A               	andwf	___ftdiv@f1+1,f,c
 10235  00D278  0E00               	movlw	0
 10236  00D27A  161B               	andwf	___ftdiv@f1+2,f,c
 10237  00D27C  8E1D               	bsf	___ftdiv@f2+1,7,c
 10238  00D27E  0EFF               	movlw	255
 10239  00D280  161C               	andwf	___ftdiv@f2,f,c
 10240  00D282  0EFF               	movlw	255
 10241  00D284  161D               	andwf	___ftdiv@f2+1,f,c
 10242  00D286  0E00               	movlw	0
 10243  00D288  161E               	andwf	___ftdiv@f2+2,f,c
 10244  00D28A  0E18               	movlw	24
 10245  00D28C  6E22               	movwf	___ftdiv@cntr,c
 10246  00D28E  D000               	goto	l4480
 10247  00D290                     l4480:
 10248  00D290  90D8               	bcf	status,0,c
 10249  00D292  3623               	rlcf	___ftdiv@f3,f,c
 10250  00D294  3624               	rlcf	___ftdiv@f3+1,f,c
 10251  00D296  3625               	rlcf	___ftdiv@f3+2,f,c
 10252  00D298  501C               	movf	___ftdiv@f2,w,c
 10253  00D29A  5C19               	subwf	___ftdiv@f1,w,c
 10254  00D29C  501D               	movf	___ftdiv@f2+1,w,c
 10255  00D29E  581A               	subwfb	___ftdiv@f1+1,w,c
 10256  00D2A0  501E               	movf	___ftdiv@f2+2,w,c
 10257  00D2A2  581B               	subwfb	___ftdiv@f1+2,w,c
 10258  00D2A4  A0D8               	btfss	status,0,c
 10259  00D2A6  D007               	goto	l1086
 10260  00D2A8  501C               	movf	___ftdiv@f2,w,c
 10261  00D2AA  5E19               	subwf	___ftdiv@f1,f,c
 10262  00D2AC  501D               	movf	___ftdiv@f2+1,w,c
 10263  00D2AE  5A1A               	subwfb	___ftdiv@f1+1,f,c
 10264  00D2B0  501E               	movf	___ftdiv@f2+2,w,c
 10265  00D2B2  5A1B               	subwfb	___ftdiv@f1+2,f,c
 10266  00D2B4  8023               	bsf	___ftdiv@f3,0,c
 10267  00D2B6                     l1086:
 10268  00D2B6  90D8               	bcf	status,0,c
 10269  00D2B8  3619               	rlcf	___ftdiv@f1,f,c
 10270  00D2BA  361A               	rlcf	___ftdiv@f1+1,f,c
 10271  00D2BC  361B               	rlcf	___ftdiv@f1+2,f,c
 10272  00D2BE  2E22               	decfsz	___ftdiv@cntr,f,c
 10273  00D2C0  D7E7               	goto	l4480
 10274  00D2C2  D000               	goto	l4490
 10275  00D2C4                     l4490:
 10276  00D2C4  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
 10277  00D2C8  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10278  00D2CC  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10279  00D2D0  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
 10280  00D2D4  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
 10281  00D2D8  ECC5  F067         	call	___ftpack	;wreg free
 10282  00D2DC  C001  F019         	movff	?___ftpack,?___ftdiv
 10283  00D2E0  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
 10284  00D2E4  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
 10285  00D2E8  D000               	goto	l1083
 10286  00D2EA                     l1083:
 10287  00D2EA  0012               	return		;funcret
 10288  00D2EC                     __end_of___ftdiv:
 10289                           	opt stack 0
 10290                           tblptru	equ	0xFF8
 10291                           tblptrh	equ	0xFF7
 10292                           tblptrl	equ	0xFF6
 10293                           tablat	equ	0xFF5
 10294                           prodh	equ	0xFF4
 10295                           prodl	equ	0xFF3
 10296                           intcon2	equ	0xFF1
 10297                           postinc0	equ	0xFEE
 10298                           wreg	equ	0xFE8
 10299                           postdec1	equ	0xFE5
 10300                           fsr1l	equ	0xFE1
 10301                           indf2	equ	0xFDF
 10302                           postinc2	equ	0xFDE
 10303                           postdec2	equ	0xFDD
 10304                           fsr2h	equ	0xFDA
 10305                           fsr2l	equ	0xFD9
 10306                           status	equ	0xFD8
 10307                           
 10308 ;; *************** function ___awtoft *****************
 10309 ;; Defined at:
 10310 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;  c               2   20[COMRAM] int 
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;  sign            1   23[COMRAM] unsigned char 
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  3   20[COMRAM] float 
 10317 ;; Registers used:
 10318 ;;		wreg, status,2, status,0, cstack
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10324 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10327 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;Total ram usage:        4 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; Hardware stack levels required when called:    1
 10331 ;; This function calls:
 10332 ;;		___ftpack
 10333 ;; This function is called by:
 10334 ;;		_main
 10335 ;;		_update_LCD_misc
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           	psect	text41
 10340  00C468                     __ptext41:
 10341                           	opt stack 0
 10342  00C468                     ___awtoft:
 10343                           	opt stack 29
 10344                           
 10345                           ;incstack = 0
 10346  00C468  0E00               	movlw	0
 10347  00C46A  6E18               	movwf	___awtoft@sign,c
 10348  00C46C  AE16               	btfss	___awtoft@c+1,7,c
 10349  00C46E  D007               	goto	l4502
 10350  00C470  6C15               	negf	___awtoft@c,c
 10351  00C472  1E16               	comf	___awtoft@c+1,f,c
 10352  00C474  B0D8               	btfsc	status,0,c
 10353  00C476  2A16               	incf	___awtoft@c+1,f,c
 10354  00C478  0E01               	movlw	1
 10355  00C47A  6E18               	movwf	___awtoft@sign,c
 10356  00C47C  D000               	goto	l4502
 10357  00C47E                     l4502:
 10358  00C47E  C015  F001         	movff	___awtoft@c,___ftpack@arg
 10359  00C482  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10360  00C486  6A03               	clrf	___ftpack@arg+2,c
 10361  00C488  0E8E               	movlw	142
 10362  00C48A  6E04               	movwf	___ftpack@exp,c
 10363  00C48C  C018  F005         	movff	___awtoft@sign,___ftpack@sign
 10364  00C490  ECC5  F067         	call	___ftpack	;wreg free
 10365  00C494  C001  F015         	movff	?___ftpack,?___awtoft
 10366  00C498  C002  F016         	movff	?___ftpack+1,?___awtoft+1
 10367  00C49C  C003  F017         	movff	?___ftpack+2,?___awtoft+2
 10368  00C4A0  D000               	goto	l904
 10369  00C4A2                     l904:
 10370  00C4A2  0012               	return		;funcret
 10371  00C4A4                     __end_of___awtoft:
 10372                           	opt stack 0
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon2	equ	0xFF1
 10380                           postinc0	equ	0xFEE
 10381                           wreg	equ	0xFE8
 10382                           postdec1	equ	0xFE5
 10383                           fsr1l	equ	0xFE1
 10384                           indf2	equ	0xFDF
 10385                           postinc2	equ	0xFDE
 10386                           postdec2	equ	0xFDD
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function ___ftpack *****************
 10392 ;; Defined at:
 10393 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  arg             3    0[COMRAM] unsigned um
 10396 ;;  exp             1    3[COMRAM] unsigned char 
 10397 ;;  sign            1    4[COMRAM] unsigned char 
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;		None
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  3    0[COMRAM] float 
 10402 ;; Registers used:
 10403 ;;		wreg, status,2, status,0
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10409 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;Total ram usage:        8 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; This function calls:
 10416 ;;		Nothing
 10417 ;; This function is called by:
 10418 ;;		___awtoft
 10419 ;;		___ftadd
 10420 ;;		___ftdiv
 10421 ;;		___ftmul
 10422 ;;		___lltoft
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text42
 10427  00CF8A                     __ptext42:
 10428                           	opt stack 0
 10429  00CF8A                     ___ftpack:
 10430                           	opt stack 29
 10431                           
 10432                           ;incstack = 0
 10433  00CF8A  5004               	movf	___ftpack@exp,w,c
 10434  00CF8C  B4D8               	btfsc	status,2,c
 10435  00CF8E  D005               	goto	l3472
 10436  00CF90  5001               	movf	___ftpack@arg,w,c
 10437  00CF92  1002               	iorwf	___ftpack@arg+1,w,c
 10438  00CF94  1003               	iorwf	___ftpack@arg+2,w,c
 10439  00CF96  A4D8               	btfss	status,2,c
 10440  00CF98  D00E               	goto	l3478
 10441  00CF9A                     l3472:
 10442  00CF9A  0E00               	movlw	0
 10443  00CF9C  6E01               	movwf	?___ftpack,c
 10444  00CF9E  0E00               	movlw	0
 10445  00CFA0  6E02               	movwf	?___ftpack+1,c
 10446  00CFA2  0E00               	movlw	0
 10447  00CFA4  6E03               	movwf	?___ftpack+2,c
 10448  00CFA6  D053               	goto	l1011
 10449  00CFA8  D006               	goto	l3478
 10450  00CFAA                     l3476:
 10451  00CFAA  2A04               	incf	___ftpack@exp,f,c
 10452  00CFAC  90D8               	bcf	status,0,c
 10453  00CFAE  3203               	rrcf	___ftpack@arg+2,f,c
 10454  00CFB0  3202               	rrcf	___ftpack@arg+1,f,c
 10455  00CFB2  3201               	rrcf	___ftpack@arg,f,c
 10456  00CFB4  D000               	goto	l3478
 10457  00CFB6                     l3478:
 10458  00CFB6  0E00               	movlw	0
 10459  00CFB8  1401               	andwf	___ftpack@arg,w,c
 10460  00CFBA  6E06               	movwf	??___ftpack& (0+255),c
 10461  00CFBC  0E00               	movlw	0
 10462  00CFBE  1402               	andwf	___ftpack@arg+1,w,c
 10463  00CFC0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10464  00CFC2  0EFE               	movlw	254
 10465  00CFC4  1403               	andwf	___ftpack@arg+2,w,c
 10466  00CFC6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10467  00CFC8  5006               	movf	??___ftpack,w,c
 10468  00CFCA  1007               	iorwf	??___ftpack+1,w,c
 10469  00CFCC  1008               	iorwf	??___ftpack+2,w,c
 10470  00CFCE  B4D8               	btfsc	status,2,c
 10471  00CFD0  D00E               	goto	l3484
 10472  00CFD2  D7EB               	goto	l3476
 10473  00CFD4  D00C               	goto	l3484
 10474  00CFD6                     l3480:
 10475  00CFD6  2A04               	incf	___ftpack@exp,f,c
 10476  00CFD8  0E01               	movlw	1
 10477  00CFDA  2601               	addwf	___ftpack@arg,f,c
 10478  00CFDC  0E00               	movlw	0
 10479  00CFDE  2202               	addwfc	___ftpack@arg+1,f,c
 10480  00CFE0  0E00               	movlw	0
 10481  00CFE2  2203               	addwfc	___ftpack@arg+2,f,c
 10482  00CFE4  90D8               	bcf	status,0,c
 10483  00CFE6  3203               	rrcf	___ftpack@arg+2,f,c
 10484  00CFE8  3202               	rrcf	___ftpack@arg+1,f,c
 10485  00CFEA  3201               	rrcf	___ftpack@arg,f,c
 10486  00CFEC  D000               	goto	l3484
 10487  00CFEE                     l3484:
 10488  00CFEE  0E00               	movlw	0
 10489  00CFF0  1401               	andwf	___ftpack@arg,w,c
 10490  00CFF2  6E06               	movwf	??___ftpack& (0+255),c
 10491  00CFF4  0E00               	movlw	0
 10492  00CFF6  1402               	andwf	___ftpack@arg+1,w,c
 10493  00CFF8  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10494  00CFFA  0EFF               	movlw	255
 10495  00CFFC  1403               	andwf	___ftpack@arg+2,w,c
 10496  00CFFE  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10497  00D000  5006               	movf	??___ftpack,w,c
 10498  00D002  1007               	iorwf	??___ftpack+1,w,c
 10499  00D004  1008               	iorwf	??___ftpack+2,w,c
 10500  00D006  B4D8               	btfsc	status,2,c
 10501  00D008  D008               	goto	l3488
 10502  00D00A  D7E5               	goto	l3480
 10503  00D00C  D006               	goto	l3488
 10504  00D00E                     l3486:
 10505  00D00E  0604               	decf	___ftpack@exp,f,c
 10506  00D010  90D8               	bcf	status,0,c
 10507  00D012  3601               	rlcf	___ftpack@arg,f,c
 10508  00D014  3602               	rlcf	___ftpack@arg+1,f,c
 10509  00D016  3603               	rlcf	___ftpack@arg+2,f,c
 10510  00D018  D000               	goto	l3488
 10511  00D01A                     l3488:
 10512  00D01A  BE02               	btfsc	___ftpack@arg+1,7,c
 10513  00D01C  D004               	goto	l1022
 10514  00D01E  0E02               	movlw	2
 10515  00D020  6004               	cpfslt	___ftpack@exp,c
 10516  00D022  D7F5               	goto	l3486
 10517  00D024  D000               	goto	l1022
 10518  00D026                     l1022:
 10519  00D026  B004               	btfsc	___ftpack@exp,0,c
 10520  00D028  D002               	goto	l3494
 10521  00D02A  9E02               	bcf	___ftpack@arg+1,7,c
 10522  00D02C  D000               	goto	l3494
 10523  00D02E                     l3494:
 10524  00D02E  90D8               	bcf	status,0,c
 10525  00D030  3204               	rrcf	___ftpack@exp,f,c
 10526  00D032  5004               	movf	___ftpack@exp,w,c
 10527  00D034  1203               	iorwf	___ftpack@arg+2,f,c
 10528  00D036  5005               	movf	___ftpack@sign,w,c
 10529  00D038  B4D8               	btfsc	status,2,c
 10530  00D03A  D002               	goto	l3500
 10531  00D03C  8E03               	bsf	___ftpack@arg+2,7,c
 10532  00D03E  D000               	goto	l3500
 10533  00D040                     l3500:
 10534  00D040  C001  F001         	movff	___ftpack@arg,?___ftpack
 10535  00D044  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10536  00D048  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10537  00D04C  D000               	goto	l1011
 10538  00D04E                     l1011:
 10539  00D04E  0012               	return		;funcret
 10540  00D050                     __end_of___ftpack:
 10541                           	opt stack 0
 10542                           tblptru	equ	0xFF8
 10543                           tblptrh	equ	0xFF7
 10544                           tblptrl	equ	0xFF6
 10545                           tablat	equ	0xFF5
 10546                           prodh	equ	0xFF4
 10547                           prodl	equ	0xFF3
 10548                           intcon2	equ	0xFF1
 10549                           postinc0	equ	0xFEE
 10550                           wreg	equ	0xFE8
 10551                           postdec1	equ	0xFE5
 10552                           fsr1l	equ	0xFE1
 10553                           indf2	equ	0xFDF
 10554                           postinc2	equ	0xFDE
 10555                           postdec2	equ	0xFDD
 10556                           fsr2h	equ	0xFDA
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _strcpy *****************
 10561 ;; Defined at:
 10562 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;  to              2    0[COMRAM] PTR unsigned char 
 10565 ;;		 -> NULL(0), buffer(31), 
 10566 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10567 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
 10568 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
 10569 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
 10570 ;;		 -> STR_2(6), STR_1(20), 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;  cp              2    4[COMRAM] PTR unsigned char 
 10573 ;;		 -> NULL(0), buffer(31), 
 10574 ;; Return value:  Size  Location     Type
 10575 ;;                  2    0[COMRAM] PTR unsigned char 
 10576 ;; Registers used:
 10577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10578 ;; Tracked objects:
 10579 ;;		On entry : 0/0
 10580 ;;		On exit  : 0/0
 10581 ;;		Unchanged: 0/0
 10582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;Total ram usage:        6 bytes
 10588 ;; Hardware stack levels used:    1
 10589 ;; This function calls:
 10590 ;;		Nothing
 10591 ;; This function is called by:
 10592 ;;		_Initialize_Screen
 10593 ;;		_WAIT_1_SEC
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text43
 10598  00C436                     __ptext43:
 10599                           	opt stack 0
 10600  00C436                     _strcpy:
 10601                           	opt stack 27
 10602                           
 10603                           ;incstack = 0
 10604  00C436  C001  F005         	movff	strcpy@to,strcpy@cp
 10605  00C43A  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
 10606  00C43E  D005               	goto	l4574
 10607  00C440                     l4572:
 10608  00C440  4A05               	infsnz	strcpy@cp,f,c
 10609  00C442  2A06               	incf	strcpy@cp+1,f,c
 10610  00C444  4A03               	infsnz	strcpy@from,f,c
 10611  00C446  2A04               	incf	strcpy@from+1,f,c
 10612  00C448  D000               	goto	l4574
 10613  00C44A                     l4574:
 10614  00C44A  C003  FFF6         	movff	strcpy@from,tblptrl
 10615  00C44E  C004  FFF7         	movff	strcpy@from+1,tblptrh
 10616  00C452                     	if	0	;tblptru may be non-zero
 10617  00C452                     	endif
 10618  00C452                     	if	0	;tblptru may be non-zero
 10619  00C452                     	endif
 10620  00C452  C005  FFD9         	movff	strcpy@cp,fsr2l
 10621  00C456  C006  FFDA         	movff	strcpy@cp+1,fsr2h
 10622  00C45A  0008               	tblrd		*
 10623  00C45C  CFF5 FFDF          	movff	tablat,indf2
 10624  00C460  50DF               	movf	indf2,w,c
 10625  00C462  A4D8               	btfss	status,2,c
 10626  00C464  D7ED               	goto	l4572
 10627                           
 10628                           ;	Return value of _strcpy is never used
 10629  00C466  0012               	return		;funcret
 10630  00C468                     __end_of_strcpy:
 10631                           	opt stack 0
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon2	equ	0xFF1
 10639                           postinc0	equ	0xFEE
 10640                           wreg	equ	0xFE8
 10641                           postdec1	equ	0xFE5
 10642                           fsr1l	equ	0xFE1
 10643                           indf2	equ	0xFDF
 10644                           postinc2	equ	0xFDE
 10645                           postdec2	equ	0xFDD
 10646                           fsr2h	equ	0xFDA
 10647                           fsr2l	equ	0xFD9
 10648                           status	equ	0xFD8
 10649                           
 10650 ;; *************** function _Set_NSLT *****************
 10651 ;; Defined at:
 10652 ;;		line 550 in file "Lab8p1.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  color           1    wreg     unsigned char 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  color           1   53[COMRAM] unsigned char 
 10657 ;; Return value:  Size  Location     Type
 10658 ;;		None               void
 10659 ;; Registers used:
 10660 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;Total ram usage:        1 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    7
 10673 ;; This function calls:
 10674 ;;		_update_LCD_color
 10675 ;; This function is called by:
 10676 ;;		_Day_Mode
 10677 ;;		_Night_Mode
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           	psect	text44
 10682  00C5EC                     __ptext44:
 10683                           	opt stack 0
 10684  00C5EC                     _Set_NSLT:
 10685                           	opt stack 22
 10686                           
 10687                           ;incstack = 0
 10688                           ;Set_NSLT@color stored from wreg
 10689  00C5EC  6E36               	movwf	Set_NSLT@color,c
 10690                           
 10691                           ;Lab8p1.c: 552: direction = 3;
 10692  00C5EE  0E03               	movlw	3
 10693  00C5F0  6E79               	movwf	_direction,c
 10694                           
 10695                           ;Lab8p1.c: 553: update_LCD_color(direction, color);
 10696  00C5F2  C036  F033         	movff	Set_NSLT@color,update_LCD_color@color
 10697  00C5F6  5079               	movf	_direction,w,c
 10698  00C5F8  ECCD  F072         	call	_update_LCD_color
 10699                           
 10700                           ;Lab8p1.c: 554: switch (color)
 10701  00C5FC  D00A               	goto	l4952
 10702  00C5FE                     l459:
 10703  00C5FE  9881               	bcf	3969,4,c	;volatile
 10704  00C600  D001               	goto	L14
 10705  00C602                     l461:
 10706  00C602  8881               	bsf	3969,4,c	;volatile
 10707  00C604                     L14:
 10708  00C604  9A81               	bcf	3969,5,c	;volatile
 10709  00C606  D013               	goto	l464
 10710  00C608                     l462:
 10711  00C608  9881               	bcf	3969,4,c	;volatile
 10712  00C60A  D001               	goto	L15
 10713  00C60C                     l463:
 10714  00C60C  8881               	bsf	3969,4,c	;volatile
 10715  00C60E                     L15:
 10716  00C60E  8A81               	bsf	3969,5,c	;volatile
 10717                           
 10718                           ;Lab8p1.c: 560: }
 10719  00C610  D00E               	goto	l464
 10720  00C612                     l4952:
 10721  00C612  5036               	movf	Set_NSLT@color,w,c
 10722                           
 10723                           ; Switch size 1, requested type "space"
 10724                           ; Number of cases is 4, Range of values is 0 to 3
 10725                           ; switch strategies available:
 10726                           ; Name         Instructions Cycles
 10727                           ; simple_byte           13     7 (average)
 10728                           ;	Chosen strategy is simple_byte
 10729  00C614  0A00               	xorlw	0	; case 0
 10730  00C616  B4D8               	btfsc	status,2,c
 10731  00C618  D7F2               	goto	l459
 10732  00C61A  0A01               	xorlw	1	; case 1
 10733  00C61C  B4D8               	btfsc	status,2,c
 10734  00C61E  D7F1               	goto	l461
 10735  00C620  0A03               	xorlw	3	; case 2
 10736  00C622  B4D8               	btfsc	status,2,c
 10737  00C624  D7F1               	goto	l462
 10738  00C626  0A01               	xorlw	1	; case 3
 10739  00C628  B4D8               	btfsc	status,2,c
 10740  00C62A  D7F0               	goto	l463
 10741  00C62C  D000               	goto	l464
 10742  00C62E                     l464:
 10743  00C62E  0012               	return		;funcret
 10744  00C630                     __end_of_Set_NSLT:
 10745                           	opt stack 0
 10746                           tblptru	equ	0xFF8
 10747                           tblptrh	equ	0xFF7
 10748                           tblptrl	equ	0xFF6
 10749                           tablat	equ	0xFF5
 10750                           prodh	equ	0xFF4
 10751                           prodl	equ	0xFF3
 10752                           intcon2	equ	0xFF1
 10753                           postinc0	equ	0xFEE
 10754                           wreg	equ	0xFE8
 10755                           postdec1	equ	0xFE5
 10756                           fsr1l	equ	0xFE1
 10757                           indf2	equ	0xFDF
 10758                           postinc2	equ	0xFDE
 10759                           postdec2	equ	0xFDD
 10760                           fsr2h	equ	0xFDA
 10761                           fsr2l	equ	0xFD9
 10762                           status	equ	0xFD8
 10763                           
 10764 ;; *************** function _Set_NS *****************
 10765 ;; Defined at:
 10766 ;;		line 537 in file "Lab8p1.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  color           1    wreg     unsigned char 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  color           1   53[COMRAM] unsigned char 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;		None               void
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;Total ram usage:        1 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    7
 10787 ;; This function calls:
 10788 ;;		_update_LCD_color
 10789 ;; This function is called by:
 10790 ;;		_Day_Mode
 10791 ;;		_Night_Mode
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text45
 10796  00C5A8                     __ptext45:
 10797                           	opt stack 0
 10798  00C5A8                     _Set_NS:
 10799                           	opt stack 22
 10800                           
 10801                           ;incstack = 0
 10802                           ;Set_NS@color stored from wreg
 10803  00C5A8  6E36               	movwf	Set_NS@color,c
 10804                           
 10805                           ;Lab8p1.c: 539: direction = 2;
 10806  00C5AA  0E02               	movlw	2
 10807  00C5AC  6E79               	movwf	_direction,c
 10808                           
 10809                           ;Lab8p1.c: 540: update_LCD_color(direction, color);
 10810  00C5AE  C036  F033         	movff	Set_NS@color,update_LCD_color@color
 10811  00C5B2  5079               	movf	_direction,w,c
 10812  00C5B4  ECCD  F072         	call	_update_LCD_color
 10813                           
 10814                           ;Lab8p1.c: 541: switch (color)
 10815  00C5B8  D00A               	goto	l4976
 10816  00C5BA                     l450:
 10817  00C5BA  9280               	bcf	3968,1,c	;volatile
 10818  00C5BC  D001               	goto	L16
 10819  00C5BE                     l452:
 10820  00C5BE  8280               	bsf	3968,1,c	;volatile
 10821  00C5C0                     L16:
 10822  00C5C0  9480               	bcf	3968,2,c	;volatile
 10823  00C5C2  D013               	goto	l455
 10824  00C5C4                     l453:
 10825  00C5C4  9280               	bcf	3968,1,c	;volatile
 10826  00C5C6  D001               	goto	L17
 10827  00C5C8                     l454:
 10828  00C5C8  8280               	bsf	3968,1,c	;volatile
 10829  00C5CA                     L17:
 10830  00C5CA  8480               	bsf	3968,2,c	;volatile
 10831                           
 10832                           ;Lab8p1.c: 547: }
 10833  00C5CC  D00E               	goto	l455
 10834  00C5CE                     l4976:
 10835  00C5CE  5036               	movf	Set_NS@color,w,c
 10836                           
 10837                           ; Switch size 1, requested type "space"
 10838                           ; Number of cases is 4, Range of values is 0 to 3
 10839                           ; switch strategies available:
 10840                           ; Name         Instructions Cycles
 10841                           ; simple_byte           13     7 (average)
 10842                           ;	Chosen strategy is simple_byte
 10843  00C5D0  0A00               	xorlw	0	; case 0
 10844  00C5D2  B4D8               	btfsc	status,2,c
 10845  00C5D4  D7F2               	goto	l450
 10846  00C5D6  0A01               	xorlw	1	; case 1
 10847  00C5D8  B4D8               	btfsc	status,2,c
 10848  00C5DA  D7F1               	goto	l452
 10849  00C5DC  0A03               	xorlw	3	; case 2
 10850  00C5DE  B4D8               	btfsc	status,2,c
 10851  00C5E0  D7F1               	goto	l453
 10852  00C5E2  0A01               	xorlw	1	; case 3
 10853  00C5E4  B4D8               	btfsc	status,2,c
 10854  00C5E6  D7F0               	goto	l454
 10855  00C5E8  D000               	goto	l455
 10856  00C5EA                     l455:
 10857  00C5EA  0012               	return		;funcret
 10858  00C5EC                     __end_of_Set_NS:
 10859                           	opt stack 0
 10860                           tblptru	equ	0xFF8
 10861                           tblptrh	equ	0xFF7
 10862                           tblptrl	equ	0xFF6
 10863                           tablat	equ	0xFF5
 10864                           prodh	equ	0xFF4
 10865                           prodl	equ	0xFF3
 10866                           intcon2	equ	0xFF1
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           postdec1	equ	0xFE5
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _Set_EWLT *****************
 10879 ;; Defined at:
 10880 ;;		line 576 in file "Lab8p1.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  color           1    wreg     unsigned char 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  color           1   53[COMRAM] unsigned char 
 10885 ;; Return value:  Size  Location     Type
 10886 ;;		None               void
 10887 ;; Registers used:
 10888 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;Total ram usage:        1 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    7
 10901 ;; This function calls:
 10902 ;;		_update_LCD_color
 10903 ;; This function is called by:
 10904 ;;		_Day_Mode
 10905 ;;		_Night_Mode
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	text46
 10910  00C564                     __ptext46:
 10911                           	opt stack 0
 10912  00C564                     _Set_EWLT:
 10913                           	opt stack 22
 10914                           
 10915                           ;incstack = 0
 10916                           ;Set_EWLT@color stored from wreg
 10917  00C564  6E36               	movwf	Set_EWLT@color,c
 10918                           
 10919                           ;Lab8p1.c: 578: direction = 1;
 10920  00C566  0E01               	movlw	1
 10921  00C568  6E79               	movwf	_direction,c
 10922                           
 10923                           ;Lab8p1.c: 579: update_LCD_color(direction, color);
 10924  00C56A  C036  F033         	movff	Set_EWLT@color,update_LCD_color@color
 10925  00C56E  5079               	movf	_direction,w,c
 10926  00C570  ECCD  F072         	call	_update_LCD_color
 10927                           
 10928                           ;Lab8p1.c: 580: switch (color)
 10929  00C574  D00A               	goto	l4968
 10930  00C576                     l477:
 10931  00C576  9284               	bcf	3972,1,c	;volatile
 10932  00C578  D001               	goto	L18
 10933  00C57A                     l479:
 10934  00C57A  8284               	bsf	3972,1,c	;volatile
 10935  00C57C                     L18:
 10936  00C57C  9484               	bcf	3972,2,c	;volatile
 10937  00C57E  D013               	goto	l482
 10938  00C580                     l480:
 10939  00C580  9284               	bcf	3972,1,c	;volatile
 10940  00C582  D001               	goto	L19
 10941  00C584                     l481:
 10942  00C584  8284               	bsf	3972,1,c	;volatile
 10943  00C586                     L19:
 10944  00C586  8484               	bsf	3972,2,c	;volatile
 10945                           
 10946                           ;Lab8p1.c: 586: }
 10947  00C588  D00E               	goto	l482
 10948  00C58A                     l4968:
 10949  00C58A  5036               	movf	Set_EWLT@color,w,c
 10950                           
 10951                           ; Switch size 1, requested type "space"
 10952                           ; Number of cases is 4, Range of values is 0 to 3
 10953                           ; switch strategies available:
 10954                           ; Name         Instructions Cycles
 10955                           ; simple_byte           13     7 (average)
 10956                           ;	Chosen strategy is simple_byte
 10957  00C58C  0A00               	xorlw	0	; case 0
 10958  00C58E  B4D8               	btfsc	status,2,c
 10959  00C590  D7F2               	goto	l477
 10960  00C592  0A01               	xorlw	1	; case 1
 10961  00C594  B4D8               	btfsc	status,2,c
 10962  00C596  D7F1               	goto	l479
 10963  00C598  0A03               	xorlw	3	; case 2
 10964  00C59A  B4D8               	btfsc	status,2,c
 10965  00C59C  D7F1               	goto	l480
 10966  00C59E  0A01               	xorlw	1	; case 3
 10967  00C5A0  B4D8               	btfsc	status,2,c
 10968  00C5A2  D7F0               	goto	l481
 10969  00C5A4  D000               	goto	l482
 10970  00C5A6                     l482:
 10971  00C5A6  0012               	return		;funcret
 10972  00C5A8                     __end_of_Set_EWLT:
 10973                           	opt stack 0
 10974                           tblptru	equ	0xFF8
 10975                           tblptrh	equ	0xFF7
 10976                           tblptrl	equ	0xFF6
 10977                           tablat	equ	0xFF5
 10978                           prodh	equ	0xFF4
 10979                           prodl	equ	0xFF3
 10980                           intcon2	equ	0xFF1
 10981                           postinc0	equ	0xFEE
 10982                           wreg	equ	0xFE8
 10983                           postdec1	equ	0xFE5
 10984                           fsr1l	equ	0xFE1
 10985                           indf2	equ	0xFDF
 10986                           postinc2	equ	0xFDE
 10987                           postdec2	equ	0xFDD
 10988                           fsr2h	equ	0xFDA
 10989                           fsr2l	equ	0xFD9
 10990                           status	equ	0xFD8
 10991                           
 10992 ;; *************** function _Set_EW *****************
 10993 ;; Defined at:
 10994 ;;		line 563 in file "Lab8p1.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;  color           1    wreg     unsigned char 
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  color           1   53[COMRAM] unsigned char 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;		None               void
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;Total ram usage:        1 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    7
 11015 ;; This function calls:
 11016 ;;		_update_LCD_color
 11017 ;; This function is called by:
 11018 ;;		_Day_Mode
 11019 ;;		_Night_Mode
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           	psect	text47
 11024  00C520                     __ptext47:
 11025                           	opt stack 0
 11026  00C520                     _Set_EW:
 11027                           	opt stack 22
 11028                           
 11029                           ;incstack = 0
 11030                           ;Set_EW@color stored from wreg
 11031  00C520  6E36               	movwf	Set_EW@color,c
 11032                           
 11033                           ;Lab8p1.c: 565: direction = 0;
 11034  00C522  0E00               	movlw	0
 11035  00C524  6E79               	movwf	_direction,c
 11036                           
 11037                           ;Lab8p1.c: 566: update_LCD_color(direction, color);
 11038  00C526  C036  F033         	movff	Set_EW@color,update_LCD_color@color
 11039  00C52A  5079               	movf	_direction,w,c
 11040  00C52C  ECCD  F072         	call	_update_LCD_color
 11041                           
 11042                           ;Lab8p1.c: 567: switch (color)
 11043  00C530  D00A               	goto	l4960
 11044  00C532                     l468:
 11045  00C532  9A80               	bcf	3968,5,c	;volatile
 11046  00C534  D001               	goto	L20
 11047  00C536                     l470:
 11048  00C536  8A80               	bsf	3968,5,c	;volatile
 11049  00C538                     L20:
 11050  00C538  9C81               	bcf	3969,6,c	;volatile
 11051  00C53A  D013               	goto	l473
 11052  00C53C                     l471:
 11053  00C53C  9A80               	bcf	3968,5,c	;volatile
 11054  00C53E  D001               	goto	L21
 11055  00C540                     l472:
 11056  00C540  8A80               	bsf	3968,5,c	;volatile
 11057  00C542                     L21:
 11058  00C542  8C81               	bsf	3969,6,c	;volatile
 11059                           
 11060                           ;Lab8p1.c: 573: }
 11061  00C544  D00E               	goto	l473
 11062  00C546                     l4960:
 11063  00C546  5036               	movf	Set_EW@color,w,c
 11064                           
 11065                           ; Switch size 1, requested type "space"
 11066                           ; Number of cases is 4, Range of values is 0 to 3
 11067                           ; switch strategies available:
 11068                           ; Name         Instructions Cycles
 11069                           ; simple_byte           13     7 (average)
 11070                           ;	Chosen strategy is simple_byte
 11071  00C548  0A00               	xorlw	0	; case 0
 11072  00C54A  B4D8               	btfsc	status,2,c
 11073  00C54C  D7F2               	goto	l468
 11074  00C54E  0A01               	xorlw	1	; case 1
 11075  00C550  B4D8               	btfsc	status,2,c
 11076  00C552  D7F1               	goto	l470
 11077  00C554  0A03               	xorlw	3	; case 2
 11078  00C556  B4D8               	btfsc	status,2,c
 11079  00C558  D7F1               	goto	l471
 11080  00C55A  0A01               	xorlw	1	; case 3
 11081  00C55C  B4D8               	btfsc	status,2,c
 11082  00C55E  D7F0               	goto	l472
 11083  00C560  D000               	goto	l473
 11084  00C562                     l473:
 11085  00C562  0012               	return		;funcret
 11086  00C564                     __end_of_Set_EW:
 11087                           	opt stack 0
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon2	equ	0xFF1
 11095                           postinc0	equ	0xFEE
 11096                           wreg	equ	0xFE8
 11097                           postdec1	equ	0xFE5
 11098                           fsr1l	equ	0xFE1
 11099                           indf2	equ	0xFDF
 11100                           postinc2	equ	0xFDE
 11101                           postdec2	equ	0xFDD
 11102                           fsr2h	equ	0xFDA
 11103                           fsr2l	equ	0xFD9
 11104                           status	equ	0xFD8
 11105                           
 11106 ;; *************** function _update_LCD_color *****************
 11107 ;; Defined at:
 11108 ;;		line 589 in file "Lab8p1.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  direction       1    wreg     unsigned char 
 11111 ;;  color           1   50[COMRAM] unsigned char 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  direction       1   51[COMRAM] unsigned char 
 11114 ;;  Circle_Y        1   52[COMRAM] unsigned char 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;		None               void
 11117 ;; Registers used:
 11118 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11124 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;Total ram usage:        3 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    6
 11131 ;; This function calls:
 11132 ;;		_drawCircle
 11133 ;;		_fillCircle
 11134 ;; This function is called by:
 11135 ;;		_Set_NS
 11136 ;;		_Set_NSLT
 11137 ;;		_Set_EW
 11138 ;;		_Set_EWLT
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           	psect	text48
 11143  00E59A                     __ptext48:
 11144                           	opt stack 0
 11145  00E59A                     _update_LCD_color:
 11146                           	opt stack 22
 11147                           
 11148                           ;incstack = 0
 11149                           ;update_LCD_color@direction stored from wreg
 11150  00E59A  6E34               	movwf	update_LCD_color@direction,c
 11151                           
 11152                           ;Lab8p1.c: 591: char Circle_Y;
 11153                           ;Lab8p1.c: 592: Circle_Y = 20 + 15 + direction * 30;
 11154  00E59C  5034               	movf	update_LCD_color@direction,w,c
 11155  00E59E  0D1E               	mullw	30
 11156  00E5A0  50F3               	movf	prodl,w,c
 11157  00E5A2  0F23               	addlw	35
 11158  00E5A4  6E35               	movwf	update_LCD_color@Circle_Y,c
 11159                           
 11160                           ;Lab8p1.c: 594: if (color == 0)
 11161  00E5A6  5033               	movf	update_LCD_color@color,w,c
 11162  00E5A8  A4D8               	btfss	status,2,c
 11163  00E5AA  D067               	goto	l4858
 11164                           
 11165                           ;Lab8p1.c: 595: {
 11166                           ;Lab8p1.c: 596: fillCircle(40, Circle_Y, 7, 0x0000);
 11167  00E5AC  0E00               	movlw	0
 11168  00E5AE  6E2C               	movwf	fillCircle@x0+1,c
 11169  00E5B0  0E28               	movlw	40
 11170  00E5B2  6E2B               	movwf	fillCircle@x0,c
 11171  00E5B4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11172  00E5B8  6A2E               	clrf	fillCircle@y0+1,c
 11173  00E5BA  0E00               	movlw	0
 11174  00E5BC  6E30               	movwf	fillCircle@r+1,c
 11175  00E5BE  0E07               	movlw	7
 11176  00E5C0  6E2F               	movwf	fillCircle@r,c
 11177  00E5C2  0E00               	movlw	0
 11178  00E5C4  6E32               	movwf	fillCircle@color+1,c
 11179  00E5C6  0E00               	movlw	0
 11180  00E5C8  6E31               	movwf	fillCircle@color,c
 11181  00E5CA  EC86  F063         	call	_fillCircle	;wreg free
 11182                           
 11183                           ;Lab8p1.c: 597: fillCircle(60, Circle_Y, 7, 0x0000);
 11184  00E5CE  0E00               	movlw	0
 11185  00E5D0  6E2C               	movwf	fillCircle@x0+1,c
 11186  00E5D2  0E3C               	movlw	60
 11187  00E5D4  6E2B               	movwf	fillCircle@x0,c
 11188  00E5D6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11189  00E5DA  6A2E               	clrf	fillCircle@y0+1,c
 11190  00E5DC  0E00               	movlw	0
 11191  00E5DE  6E30               	movwf	fillCircle@r+1,c
 11192  00E5E0  0E07               	movlw	7
 11193  00E5E2  6E2F               	movwf	fillCircle@r,c
 11194  00E5E4  0E00               	movlw	0
 11195  00E5E6  6E32               	movwf	fillCircle@color+1,c
 11196  00E5E8  0E00               	movlw	0
 11197  00E5EA  6E31               	movwf	fillCircle@color,c
 11198  00E5EC  EC86  F063         	call	_fillCircle	;wreg free
 11199                           
 11200                           ;Lab8p1.c: 598: fillCircle(80, Circle_Y, 7, 0x0000);
 11201  00E5F0  0E00               	movlw	0
 11202  00E5F2  6E2C               	movwf	fillCircle@x0+1,c
 11203  00E5F4  0E50               	movlw	80
 11204  00E5F6  6E2B               	movwf	fillCircle@x0,c
 11205  00E5F8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11206  00E5FC  6A2E               	clrf	fillCircle@y0+1,c
 11207  00E5FE  0E00               	movlw	0
 11208  00E600  6E30               	movwf	fillCircle@r+1,c
 11209  00E602  0E07               	movlw	7
 11210  00E604  6E2F               	movwf	fillCircle@r,c
 11211  00E606  0E00               	movlw	0
 11212  00E608  6E32               	movwf	fillCircle@color+1,c
 11213  00E60A  0E00               	movlw	0
 11214  00E60C  6E31               	movwf	fillCircle@color,c
 11215  00E60E  EC86  F063         	call	_fillCircle	;wreg free
 11216                           
 11217                           ;Lab8p1.c: 599: drawCircle(40, Circle_Y, 7, 0xF800);
 11218  00E612  0E00               	movlw	0
 11219  00E614  6E0D               	movwf	drawCircle@x0+1,c
 11220  00E616  0E28               	movlw	40
 11221  00E618  6E0C               	movwf	drawCircle@x0,c
 11222  00E61A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11223  00E61E  6A0F               	clrf	drawCircle@y0+1,c
 11224  00E620  0E00               	movlw	0
 11225  00E622  6E11               	movwf	drawCircle@r+1,c
 11226  00E624  0E07               	movlw	7
 11227  00E626  6E10               	movwf	drawCircle@r,c
 11228  00E628  0EF8               	movlw	248
 11229  00E62A  6E13               	movwf	drawCircle@color+1,c
 11230  00E62C  0E00               	movlw	0
 11231  00E62E  6E12               	movwf	drawCircle@color,c
 11232  00E630  EC03  F06F         	call	_drawCircle	;wreg free
 11233                           
 11234                           ;Lab8p1.c: 600: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11235  00E634  0E00               	movlw	0
 11236  00E636  6E0D               	movwf	drawCircle@x0+1,c
 11237  00E638  0E3C               	movlw	60
 11238  00E63A  6E0C               	movwf	drawCircle@x0,c
 11239  00E63C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11240  00E640  6A0F               	clrf	drawCircle@y0+1,c
 11241  00E642  0E00               	movlw	0
 11242  00E644  6E11               	movwf	drawCircle@r+1,c
 11243  00E646  0E07               	movlw	7
 11244  00E648  6E10               	movwf	drawCircle@r,c
 11245  00E64A  0EFF               	movlw	255
 11246  00E64C  6E13               	movwf	drawCircle@color+1,c
 11247  00E64E  0EE0               	movlw	224
 11248  00E650  6E12               	movwf	drawCircle@color,c
 11249  00E652  EC03  F06F         	call	_drawCircle	;wreg free
 11250                           
 11251                           ;Lab8p1.c: 601: drawCircle(80, Circle_Y, 7, 0x07E0);
 11252  00E656  0E00               	movlw	0
 11253  00E658  6E0D               	movwf	drawCircle@x0+1,c
 11254  00E65A  0E50               	movlw	80
 11255  00E65C  6E0C               	movwf	drawCircle@x0,c
 11256  00E65E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11257  00E662  6A0F               	clrf	drawCircle@y0+1,c
 11258  00E664  0E00               	movlw	0
 11259  00E666  6E11               	movwf	drawCircle@r+1,c
 11260  00E668  0E07               	movlw	7
 11261  00E66A  6E10               	movwf	drawCircle@r,c
 11262  00E66C  0E07               	movlw	7
 11263  00E66E  6E13               	movwf	drawCircle@color+1,c
 11264  00E670  0EE0               	movlw	224
 11265  00E672  6E12               	movwf	drawCircle@color,c
 11266  00E674  EC03  F06F         	call	_drawCircle	;wreg free
 11267  00E678  D000               	goto	l4858
 11268  00E67A                     l4858:
 11269                           
 11270                           ;Lab8p1.c: 602: }
 11271                           ;Lab8p1.c: 604: if (color == 1)
 11272  00E67A  0433               	decf	update_LCD_color@color,w,c
 11273  00E67C  A4D8               	btfss	status,2,c
 11274  00E67E  D067               	goto	l4862
 11275                           
 11276                           ;Lab8p1.c: 605: {
 11277                           ;Lab8p1.c: 606: fillCircle(40, Circle_Y, 7, 0xF800);
 11278  00E680  0E00               	movlw	0
 11279  00E682  6E2C               	movwf	fillCircle@x0+1,c
 11280  00E684  0E28               	movlw	40
 11281  00E686  6E2B               	movwf	fillCircle@x0,c
 11282  00E688  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11283  00E68C  6A2E               	clrf	fillCircle@y0+1,c
 11284  00E68E  0E00               	movlw	0
 11285  00E690  6E30               	movwf	fillCircle@r+1,c
 11286  00E692  0E07               	movlw	7
 11287  00E694  6E2F               	movwf	fillCircle@r,c
 11288  00E696  0EF8               	movlw	248
 11289  00E698  6E32               	movwf	fillCircle@color+1,c
 11290  00E69A  0E00               	movlw	0
 11291  00E69C  6E31               	movwf	fillCircle@color,c
 11292  00E69E  EC86  F063         	call	_fillCircle	;wreg free
 11293                           
 11294                           ;Lab8p1.c: 607: fillCircle(60, Circle_Y, 7, 0x0000);
 11295  00E6A2  0E00               	movlw	0
 11296  00E6A4  6E2C               	movwf	fillCircle@x0+1,c
 11297  00E6A6  0E3C               	movlw	60
 11298  00E6A8  6E2B               	movwf	fillCircle@x0,c
 11299  00E6AA  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11300  00E6AE  6A2E               	clrf	fillCircle@y0+1,c
 11301  00E6B0  0E00               	movlw	0
 11302  00E6B2  6E30               	movwf	fillCircle@r+1,c
 11303  00E6B4  0E07               	movlw	7
 11304  00E6B6  6E2F               	movwf	fillCircle@r,c
 11305  00E6B8  0E00               	movlw	0
 11306  00E6BA  6E32               	movwf	fillCircle@color+1,c
 11307  00E6BC  0E00               	movlw	0
 11308  00E6BE  6E31               	movwf	fillCircle@color,c
 11309  00E6C0  EC86  F063         	call	_fillCircle	;wreg free
 11310                           
 11311                           ;Lab8p1.c: 608: fillCircle(80, Circle_Y, 7, 0x0000);
 11312  00E6C4  0E00               	movlw	0
 11313  00E6C6  6E2C               	movwf	fillCircle@x0+1,c
 11314  00E6C8  0E50               	movlw	80
 11315  00E6CA  6E2B               	movwf	fillCircle@x0,c
 11316  00E6CC  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11317  00E6D0  6A2E               	clrf	fillCircle@y0+1,c
 11318  00E6D2  0E00               	movlw	0
 11319  00E6D4  6E30               	movwf	fillCircle@r+1,c
 11320  00E6D6  0E07               	movlw	7
 11321  00E6D8  6E2F               	movwf	fillCircle@r,c
 11322  00E6DA  0E00               	movlw	0
 11323  00E6DC  6E32               	movwf	fillCircle@color+1,c
 11324  00E6DE  0E00               	movlw	0
 11325  00E6E0  6E31               	movwf	fillCircle@color,c
 11326  00E6E2  EC86  F063         	call	_fillCircle	;wreg free
 11327                           
 11328                           ;Lab8p1.c: 609: drawCircle(40, Circle_Y, 7, 0xF800);
 11329  00E6E6  0E00               	movlw	0
 11330  00E6E8  6E0D               	movwf	drawCircle@x0+1,c
 11331  00E6EA  0E28               	movlw	40
 11332  00E6EC  6E0C               	movwf	drawCircle@x0,c
 11333  00E6EE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11334  00E6F2  6A0F               	clrf	drawCircle@y0+1,c
 11335  00E6F4  0E00               	movlw	0
 11336  00E6F6  6E11               	movwf	drawCircle@r+1,c
 11337  00E6F8  0E07               	movlw	7
 11338  00E6FA  6E10               	movwf	drawCircle@r,c
 11339  00E6FC  0EF8               	movlw	248
 11340  00E6FE  6E13               	movwf	drawCircle@color+1,c
 11341  00E700  0E00               	movlw	0
 11342  00E702  6E12               	movwf	drawCircle@color,c
 11343  00E704  EC03  F06F         	call	_drawCircle	;wreg free
 11344                           
 11345                           ;Lab8p1.c: 610: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11346  00E708  0E00               	movlw	0
 11347  00E70A  6E0D               	movwf	drawCircle@x0+1,c
 11348  00E70C  0E3C               	movlw	60
 11349  00E70E  6E0C               	movwf	drawCircle@x0,c
 11350  00E710  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11351  00E714  6A0F               	clrf	drawCircle@y0+1,c
 11352  00E716  0E00               	movlw	0
 11353  00E718  6E11               	movwf	drawCircle@r+1,c
 11354  00E71A  0E07               	movlw	7
 11355  00E71C  6E10               	movwf	drawCircle@r,c
 11356  00E71E  0EFF               	movlw	255
 11357  00E720  6E13               	movwf	drawCircle@color+1,c
 11358  00E722  0EE0               	movlw	224
 11359  00E724  6E12               	movwf	drawCircle@color,c
 11360  00E726  EC03  F06F         	call	_drawCircle	;wreg free
 11361                           
 11362                           ;Lab8p1.c: 611: drawCircle(80, Circle_Y, 7, 0x07E0);
 11363  00E72A  0E00               	movlw	0
 11364  00E72C  6E0D               	movwf	drawCircle@x0+1,c
 11365  00E72E  0E50               	movlw	80
 11366  00E730  6E0C               	movwf	drawCircle@x0,c
 11367  00E732  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11368  00E736  6A0F               	clrf	drawCircle@y0+1,c
 11369  00E738  0E00               	movlw	0
 11370  00E73A  6E11               	movwf	drawCircle@r+1,c
 11371  00E73C  0E07               	movlw	7
 11372  00E73E  6E10               	movwf	drawCircle@r,c
 11373  00E740  0E07               	movlw	7
 11374  00E742  6E13               	movwf	drawCircle@color+1,c
 11375  00E744  0EE0               	movlw	224
 11376  00E746  6E12               	movwf	drawCircle@color,c
 11377  00E748  EC03  F06F         	call	_drawCircle	;wreg free
 11378  00E74C  D000               	goto	l4862
 11379  00E74E                     l4862:
 11380                           
 11381                           ;Lab8p1.c: 612: }
 11382                           ;Lab8p1.c: 614: if (color == 2)
 11383  00E74E  0E02               	movlw	2
 11384  00E750  1833               	xorwf	update_LCD_color@color,w,c
 11385  00E752  A4D8               	btfss	status,2,c
 11386  00E754  D067               	goto	l4866
 11387                           
 11388                           ;Lab8p1.c: 615: {
 11389                           ;Lab8p1.c: 616: fillCircle(40, Circle_Y, 7, 0x0000);
 11390  00E756  0E00               	movlw	0
 11391  00E758  6E2C               	movwf	fillCircle@x0+1,c
 11392  00E75A  0E28               	movlw	40
 11393  00E75C  6E2B               	movwf	fillCircle@x0,c
 11394  00E75E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11395  00E762  6A2E               	clrf	fillCircle@y0+1,c
 11396  00E764  0E00               	movlw	0
 11397  00E766  6E30               	movwf	fillCircle@r+1,c
 11398  00E768  0E07               	movlw	7
 11399  00E76A  6E2F               	movwf	fillCircle@r,c
 11400  00E76C  0E00               	movlw	0
 11401  00E76E  6E32               	movwf	fillCircle@color+1,c
 11402  00E770  0E00               	movlw	0
 11403  00E772  6E31               	movwf	fillCircle@color,c
 11404  00E774  EC86  F063         	call	_fillCircle	;wreg free
 11405                           
 11406                           ;Lab8p1.c: 617: fillCircle(60, Circle_Y, 7, 0x0000);
 11407  00E778  0E00               	movlw	0
 11408  00E77A  6E2C               	movwf	fillCircle@x0+1,c
 11409  00E77C  0E3C               	movlw	60
 11410  00E77E  6E2B               	movwf	fillCircle@x0,c
 11411  00E780  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11412  00E784  6A2E               	clrf	fillCircle@y0+1,c
 11413  00E786  0E00               	movlw	0
 11414  00E788  6E30               	movwf	fillCircle@r+1,c
 11415  00E78A  0E07               	movlw	7
 11416  00E78C  6E2F               	movwf	fillCircle@r,c
 11417  00E78E  0E00               	movlw	0
 11418  00E790  6E32               	movwf	fillCircle@color+1,c
 11419  00E792  0E00               	movlw	0
 11420  00E794  6E31               	movwf	fillCircle@color,c
 11421  00E796  EC86  F063         	call	_fillCircle	;wreg free
 11422                           
 11423                           ;Lab8p1.c: 618: fillCircle(80, Circle_Y, 7, 0x07E0);
 11424  00E79A  0E00               	movlw	0
 11425  00E79C  6E2C               	movwf	fillCircle@x0+1,c
 11426  00E79E  0E50               	movlw	80
 11427  00E7A0  6E2B               	movwf	fillCircle@x0,c
 11428  00E7A2  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11429  00E7A6  6A2E               	clrf	fillCircle@y0+1,c
 11430  00E7A8  0E00               	movlw	0
 11431  00E7AA  6E30               	movwf	fillCircle@r+1,c
 11432  00E7AC  0E07               	movlw	7
 11433  00E7AE  6E2F               	movwf	fillCircle@r,c
 11434  00E7B0  0E07               	movlw	7
 11435  00E7B2  6E32               	movwf	fillCircle@color+1,c
 11436  00E7B4  0EE0               	movlw	224
 11437  00E7B6  6E31               	movwf	fillCircle@color,c
 11438  00E7B8  EC86  F063         	call	_fillCircle	;wreg free
 11439                           
 11440                           ;Lab8p1.c: 619: drawCircle(40, Circle_Y, 7, 0xF800);
 11441  00E7BC  0E00               	movlw	0
 11442  00E7BE  6E0D               	movwf	drawCircle@x0+1,c
 11443  00E7C0  0E28               	movlw	40
 11444  00E7C2  6E0C               	movwf	drawCircle@x0,c
 11445  00E7C4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11446  00E7C8  6A0F               	clrf	drawCircle@y0+1,c
 11447  00E7CA  0E00               	movlw	0
 11448  00E7CC  6E11               	movwf	drawCircle@r+1,c
 11449  00E7CE  0E07               	movlw	7
 11450  00E7D0  6E10               	movwf	drawCircle@r,c
 11451  00E7D2  0EF8               	movlw	248
 11452  00E7D4  6E13               	movwf	drawCircle@color+1,c
 11453  00E7D6  0E00               	movlw	0
 11454  00E7D8  6E12               	movwf	drawCircle@color,c
 11455  00E7DA  EC03  F06F         	call	_drawCircle	;wreg free
 11456                           
 11457                           ;Lab8p1.c: 620: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11458  00E7DE  0E00               	movlw	0
 11459  00E7E0  6E0D               	movwf	drawCircle@x0+1,c
 11460  00E7E2  0E3C               	movlw	60
 11461  00E7E4  6E0C               	movwf	drawCircle@x0,c
 11462  00E7E6  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11463  00E7EA  6A0F               	clrf	drawCircle@y0+1,c
 11464  00E7EC  0E00               	movlw	0
 11465  00E7EE  6E11               	movwf	drawCircle@r+1,c
 11466  00E7F0  0E07               	movlw	7
 11467  00E7F2  6E10               	movwf	drawCircle@r,c
 11468  00E7F4  0EFF               	movlw	255
 11469  00E7F6  6E13               	movwf	drawCircle@color+1,c
 11470  00E7F8  0EE0               	movlw	224
 11471  00E7FA  6E12               	movwf	drawCircle@color,c
 11472  00E7FC  EC03  F06F         	call	_drawCircle	;wreg free
 11473                           
 11474                           ;Lab8p1.c: 621: drawCircle(80, Circle_Y, 7, 0x07E0);
 11475  00E800  0E00               	movlw	0
 11476  00E802  6E0D               	movwf	drawCircle@x0+1,c
 11477  00E804  0E50               	movlw	80
 11478  00E806  6E0C               	movwf	drawCircle@x0,c
 11479  00E808  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11480  00E80C  6A0F               	clrf	drawCircle@y0+1,c
 11481  00E80E  0E00               	movlw	0
 11482  00E810  6E11               	movwf	drawCircle@r+1,c
 11483  00E812  0E07               	movlw	7
 11484  00E814  6E10               	movwf	drawCircle@r,c
 11485  00E816  0E07               	movlw	7
 11486  00E818  6E13               	movwf	drawCircle@color+1,c
 11487  00E81A  0EE0               	movlw	224
 11488  00E81C  6E12               	movwf	drawCircle@color,c
 11489  00E81E  EC03  F06F         	call	_drawCircle	;wreg free
 11490  00E822  D000               	goto	l4866
 11491  00E824                     l4866:
 11492                           
 11493                           ;Lab8p1.c: 622: }
 11494                           ;Lab8p1.c: 624: if (color == 3)
 11495  00E824  0E03               	movlw	3
 11496  00E826  1833               	xorwf	update_LCD_color@color,w,c
 11497  00E828  A4D8               	btfss	status,2,c
 11498  00E82A  D067               	goto	l489
 11499                           
 11500                           ;Lab8p1.c: 625: {
 11501                           ;Lab8p1.c: 626: fillCircle(40, Circle_Y, 7, 0x0000);
 11502  00E82C  0E00               	movlw	0
 11503  00E82E  6E2C               	movwf	fillCircle@x0+1,c
 11504  00E830  0E28               	movlw	40
 11505  00E832  6E2B               	movwf	fillCircle@x0,c
 11506  00E834  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11507  00E838  6A2E               	clrf	fillCircle@y0+1,c
 11508  00E83A  0E00               	movlw	0
 11509  00E83C  6E30               	movwf	fillCircle@r+1,c
 11510  00E83E  0E07               	movlw	7
 11511  00E840  6E2F               	movwf	fillCircle@r,c
 11512  00E842  0E00               	movlw	0
 11513  00E844  6E32               	movwf	fillCircle@color+1,c
 11514  00E846  0E00               	movlw	0
 11515  00E848  6E31               	movwf	fillCircle@color,c
 11516  00E84A  EC86  F063         	call	_fillCircle	;wreg free
 11517                           
 11518                           ;Lab8p1.c: 627: fillCircle(60, Circle_Y, 7, 0xFFE0);
 11519  00E84E  0E00               	movlw	0
 11520  00E850  6E2C               	movwf	fillCircle@x0+1,c
 11521  00E852  0E3C               	movlw	60
 11522  00E854  6E2B               	movwf	fillCircle@x0,c
 11523  00E856  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11524  00E85A  6A2E               	clrf	fillCircle@y0+1,c
 11525  00E85C  0E00               	movlw	0
 11526  00E85E  6E30               	movwf	fillCircle@r+1,c
 11527  00E860  0E07               	movlw	7
 11528  00E862  6E2F               	movwf	fillCircle@r,c
 11529  00E864  0EFF               	movlw	255
 11530  00E866  6E32               	movwf	fillCircle@color+1,c
 11531  00E868  0EE0               	movlw	224
 11532  00E86A  6E31               	movwf	fillCircle@color,c
 11533  00E86C  EC86  F063         	call	_fillCircle	;wreg free
 11534                           
 11535                           ;Lab8p1.c: 628: fillCircle(80, Circle_Y, 7, 0x0000);
 11536  00E870  0E00               	movlw	0
 11537  00E872  6E2C               	movwf	fillCircle@x0+1,c
 11538  00E874  0E50               	movlw	80
 11539  00E876  6E2B               	movwf	fillCircle@x0,c
 11540  00E878  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11541  00E87C  6A2E               	clrf	fillCircle@y0+1,c
 11542  00E87E  0E00               	movlw	0
 11543  00E880  6E30               	movwf	fillCircle@r+1,c
 11544  00E882  0E07               	movlw	7
 11545  00E884  6E2F               	movwf	fillCircle@r,c
 11546  00E886  0E00               	movlw	0
 11547  00E888  6E32               	movwf	fillCircle@color+1,c
 11548  00E88A  0E00               	movlw	0
 11549  00E88C  6E31               	movwf	fillCircle@color,c
 11550  00E88E  EC86  F063         	call	_fillCircle	;wreg free
 11551                           
 11552                           ;Lab8p1.c: 629: drawCircle(40, Circle_Y, 7, 0xF800);
 11553  00E892  0E00               	movlw	0
 11554  00E894  6E0D               	movwf	drawCircle@x0+1,c
 11555  00E896  0E28               	movlw	40
 11556  00E898  6E0C               	movwf	drawCircle@x0,c
 11557  00E89A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11558  00E89E  6A0F               	clrf	drawCircle@y0+1,c
 11559  00E8A0  0E00               	movlw	0
 11560  00E8A2  6E11               	movwf	drawCircle@r+1,c
 11561  00E8A4  0E07               	movlw	7
 11562  00E8A6  6E10               	movwf	drawCircle@r,c
 11563  00E8A8  0EF8               	movlw	248
 11564  00E8AA  6E13               	movwf	drawCircle@color+1,c
 11565  00E8AC  0E00               	movlw	0
 11566  00E8AE  6E12               	movwf	drawCircle@color,c
 11567  00E8B0  EC03  F06F         	call	_drawCircle	;wreg free
 11568                           
 11569                           ;Lab8p1.c: 630: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11570  00E8B4  0E00               	movlw	0
 11571  00E8B6  6E0D               	movwf	drawCircle@x0+1,c
 11572  00E8B8  0E3C               	movlw	60
 11573  00E8BA  6E0C               	movwf	drawCircle@x0,c
 11574  00E8BC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11575  00E8C0  6A0F               	clrf	drawCircle@y0+1,c
 11576  00E8C2  0E00               	movlw	0
 11577  00E8C4  6E11               	movwf	drawCircle@r+1,c
 11578  00E8C6  0E07               	movlw	7
 11579  00E8C8  6E10               	movwf	drawCircle@r,c
 11580  00E8CA  0EFF               	movlw	255
 11581  00E8CC  6E13               	movwf	drawCircle@color+1,c
 11582  00E8CE  0EE0               	movlw	224
 11583  00E8D0  6E12               	movwf	drawCircle@color,c
 11584  00E8D2  EC03  F06F         	call	_drawCircle	;wreg free
 11585                           
 11586                           ;Lab8p1.c: 631: drawCircle(80, Circle_Y, 7, 0x07E0);
 11587  00E8D6  0E00               	movlw	0
 11588  00E8D8  6E0D               	movwf	drawCircle@x0+1,c
 11589  00E8DA  0E50               	movlw	80
 11590  00E8DC  6E0C               	movwf	drawCircle@x0,c
 11591  00E8DE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11592  00E8E2  6A0F               	clrf	drawCircle@y0+1,c
 11593  00E8E4  0E00               	movlw	0
 11594  00E8E6  6E11               	movwf	drawCircle@r+1,c
 11595  00E8E8  0E07               	movlw	7
 11596  00E8EA  6E10               	movwf	drawCircle@r,c
 11597  00E8EC  0E07               	movlw	7
 11598  00E8EE  6E13               	movwf	drawCircle@color+1,c
 11599  00E8F0  0EE0               	movlw	224
 11600  00E8F2  6E12               	movwf	drawCircle@color,c
 11601  00E8F4  EC03  F06F         	call	_drawCircle	;wreg free
 11602  00E8F8  D000               	goto	l489
 11603  00E8FA                     l489:
 11604  00E8FA  0012               	return		;funcret
 11605  00E8FC                     __end_of_update_LCD_color:
 11606                           	opt stack 0
 11607                           tblptru	equ	0xFF8
 11608                           tblptrh	equ	0xFF7
 11609                           tblptrl	equ	0xFF6
 11610                           tablat	equ	0xFF5
 11611                           prodh	equ	0xFF4
 11612                           prodl	equ	0xFF3
 11613                           intcon2	equ	0xFF1
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           postdec1	equ	0xFE5
 11617                           fsr1l	equ	0xFE1
 11618                           indf2	equ	0xFDF
 11619                           postinc2	equ	0xFDE
 11620                           postdec2	equ	0xFDD
 11621                           fsr2h	equ	0xFDA
 11622                           fsr2l	equ	0xFD9
 11623                           status	equ	0xFD8
 11624                           
 11625 ;; *************** function _fillCircle *****************
 11626 ;; Defined at:
 11627 ;;		line 647 in file "ST7735_TFT.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  x0              2   42[COMRAM] int 
 11630 ;;  y0              2   44[COMRAM] int 
 11631 ;;  r               2   46[COMRAM] int 
 11632 ;;  color           2   48[COMRAM] unsigned int 
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;		None
 11635 ;; Return value:  Size  Location     Type
 11636 ;;		None               void
 11637 ;; Registers used:
 11638 ;;		wreg, status,2, status,0, cstack
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11644 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;Total ram usage:        8 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:    5
 11651 ;; This function calls:
 11652 ;;		_drawFastVLine
 11653 ;;		_fillCircleHelper
 11654 ;; This function is called by:
 11655 ;;		_Initialize_Screen
 11656 ;;		_update_LCD_color
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text49
 11661  00C70C                     __ptext49:
 11662                           	opt stack 0
 11663  00C70C                     _fillCircle:
 11664                           	opt stack 22
 11665                           
 11666                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 11667                           
 11668                           ;incstack = 0
 11669  00C70C  502F               	movf	fillCircle@r,w,c
 11670  00C70E  0800               	sublw	0
 11671  00C710  242D               	addwf	fillCircle@y0,w,c
 11672  00C712  6E08               	movwf	drawFastVLine@y,c
 11673  00C714  80D8               	bsf	status,0,c
 11674  00C716  342F               	rlcf	fillCircle@r,w,c
 11675  00C718  6E09               	movwf	drawFastVLine@h,c
 11676  00C71A  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
 11677  00C71E  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
 11678  00C722  502B               	movf	fillCircle@x0,w,c
 11679  00C724  EC5E  F065         	call	_drawFastVLine
 11680                           
 11681                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 11682  00C728  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
 11683  00C72C  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 11684  00C730  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
 11685  00C734  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 11686  00C738  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
 11687  00C73C  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
 11688  00C740  0E00               	movlw	0
 11689  00C742  6E1A               	movwf	fillCircleHelper@cornername+1,c
 11690  00C744  0E03               	movlw	3
 11691  00C746  6E19               	movwf	fillCircleHelper@cornername,c
 11692  00C748  0E00               	movlw	0
 11693  00C74A  6E1C               	movwf	fillCircleHelper@delta+1,c
 11694  00C74C  0E00               	movlw	0
 11695  00C74E  6E1B               	movwf	fillCircleHelper@delta,c
 11696  00C750  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
 11697  00C754  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
 11698  00C758  ECE7  F06C         	call	_fillCircleHelper	;wreg free
 11699  00C75C  0012               	return		;funcret
 11700  00C75E                     __end_of_fillCircle:
 11701                           	opt stack 0
 11702                           tblptru	equ	0xFF8
 11703                           tblptrh	equ	0xFF7
 11704                           tblptrl	equ	0xFF6
 11705                           tablat	equ	0xFF5
 11706                           prodh	equ	0xFF4
 11707                           prodl	equ	0xFF3
 11708                           intcon2	equ	0xFF1
 11709                           postinc0	equ	0xFEE
 11710                           wreg	equ	0xFE8
 11711                           postdec1	equ	0xFE5
 11712                           fsr1l	equ	0xFE1
 11713                           indf2	equ	0xFDF
 11714                           postinc2	equ	0xFDE
 11715                           postdec2	equ	0xFDD
 11716                           fsr2h	equ	0xFDA
 11717                           fsr2l	equ	0xFD9
 11718                           status	equ	0xFD8
 11719                           
 11720 ;; *************** function _fillCircleHelper *****************
 11721 ;; Defined at:
 11722 ;;		line 622 in file "ST7735_TFT.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;  x0              2   18[COMRAM] int 
 11725 ;;  y0              2   20[COMRAM] int 
 11726 ;;  r               2   22[COMRAM] int 
 11727 ;;  cornername      2   24[COMRAM] unsigned int 
 11728 ;;  delta           2   26[COMRAM] int 
 11729 ;;  color           2   28[COMRAM] unsigned int 
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;  y               2   40[COMRAM] int 
 11732 ;;  x               2   38[COMRAM] int 
 11733 ;;  f               2   36[COMRAM] int 
 11734 ;;  ddF_y           2   34[COMRAM] int 
 11735 ;;  ddF_x           2   32[COMRAM] int 
 11736 ;; Return value:  Size  Location     Type
 11737 ;;		None               void
 11738 ;; Registers used:
 11739 ;;		wreg, status,2, status,0, cstack
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:       24 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    4
 11752 ;; This function calls:
 11753 ;;		_drawFastVLine
 11754 ;; This function is called by:
 11755 ;;		_fillCircle
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           	psect	text50
 11760  00D9CE                     __ptext50:
 11761                           	opt stack 0
 11762  00D9CE                     _fillCircleHelper:
 11763                           	opt stack 22
 11764                           
 11765                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 11766                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11767                           
 11768                           ;incstack = 0
 11769  00D9CE  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
 11770  00D9D2  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11771  00D9D6  1E1F               	comf	??_fillCircleHelper,f,c
 11772  00D9D8  1E20               	comf	??_fillCircleHelper+1,f,c
 11773  00D9DA  4A1F               	infsnz	??_fillCircleHelper,f,c
 11774  00D9DC  2A20               	incf	??_fillCircleHelper+1,f,c
 11775  00D9DE  0E01               	movlw	1
 11776  00D9E0  241F               	addwf	??_fillCircleHelper,w,c
 11777  00D9E2  6E25               	movwf	fillCircleHelper@f,c
 11778  00D9E4  0E00               	movlw	0
 11779  00D9E6  2020               	addwfc	??_fillCircleHelper+1,w,c
 11780  00D9E8  6E26               	movwf	fillCircleHelper@f+1,c
 11781  00D9EA  0E00               	movlw	0
 11782  00D9EC  6E22               	movwf	fillCircleHelper@ddF_x+1,c
 11783  00D9EE  0E01               	movlw	1
 11784  00D9F0  6E21               	movwf	fillCircleHelper@ddF_x,c
 11785  00D9F2  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
 11786  00D9F6  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11787  00D9FA  90D8               	bcf	status,0,c
 11788  00D9FC  361F               	rlcf	??_fillCircleHelper,f,c
 11789  00D9FE  3620               	rlcf	??_fillCircleHelper+1,f,c
 11790  00DA00  1E1F               	comf	??_fillCircleHelper,f,c
 11791  00DA02  1E20               	comf	??_fillCircleHelper+1,f,c
 11792  00DA04  4A1F               	infsnz	??_fillCircleHelper,f,c
 11793  00DA06  2A20               	incf	??_fillCircleHelper+1,f,c
 11794  00DA08  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 11795  00DA0C  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 11796  00DA10  0E00               	movlw	0
 11797  00DA12  6E28               	movwf	fillCircleHelper@x+1,c
 11798  00DA14  0E00               	movlw	0
 11799  00DA16  6E27               	movwf	fillCircleHelper@x,c
 11800  00DA18  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
 11801  00DA1C  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 11802                           
 11803                           ;ST7735_TFT.c: 626: while (x<y) {
 11804  00DA20  D067               	goto	l4172
 11805  00DA22                     l4152:
 11806                           
 11807                           ;ST7735_TFT.c: 627: if (f >= 0) {
 11808  00DA22  BE26               	btfsc	fillCircleHelper@f+1,7,c
 11809  00DA24  D00B               	goto	l275
 11810                           
 11811                           ;ST7735_TFT.c: 628: y--;
 11812  00DA26  0629               	decf	fillCircleHelper@y,f,c
 11813  00DA28  A0D8               	btfss	status,0,c
 11814  00DA2A  062A               	decf	fillCircleHelper@y+1,f,c
 11815                           
 11816                           ;ST7735_TFT.c: 629: ddF_y += 2;
 11817  00DA2C  0E02               	movlw	2
 11818  00DA2E  2623               	addwf	fillCircleHelper@ddF_y,f,c
 11819  00DA30  0E00               	movlw	0
 11820  00DA32  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
 11821                           
 11822                           ;ST7735_TFT.c: 630: f += ddF_y;
 11823  00DA34  5023               	movf	fillCircleHelper@ddF_y,w,c
 11824  00DA36  2625               	addwf	fillCircleHelper@f,f,c
 11825  00DA38  5024               	movf	fillCircleHelper@ddF_y+1,w,c
 11826  00DA3A  2226               	addwfc	fillCircleHelper@f+1,f,c
 11827  00DA3C                     l275:
 11828                           
 11829                           ;ST7735_TFT.c: 631: }
 11830                           ;ST7735_TFT.c: 632: x++;
 11831  00DA3C  4A27               	infsnz	fillCircleHelper@x,f,c
 11832  00DA3E  2A28               	incf	fillCircleHelper@x+1,f,c
 11833                           
 11834                           ;ST7735_TFT.c: 633: ddF_x += 2;
 11835  00DA40  0E02               	movlw	2
 11836  00DA42  2621               	addwf	fillCircleHelper@ddF_x,f,c
 11837  00DA44  0E00               	movlw	0
 11838  00DA46  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
 11839                           
 11840                           ;ST7735_TFT.c: 634: f += ddF_x;
 11841  00DA48  5021               	movf	fillCircleHelper@ddF_x,w,c
 11842  00DA4A  2625               	addwf	fillCircleHelper@f,f,c
 11843  00DA4C  5022               	movf	fillCircleHelper@ddF_x+1,w,c
 11844  00DA4E  2226               	addwfc	fillCircleHelper@f+1,f,c
 11845                           
 11846                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 11847  00DA50  A019               	btfss	fillCircleHelper@cornername,0,c
 11848  00DA52  D025               	goto	l4168
 11849                           
 11850                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 11851  00DA54  5029               	movf	fillCircleHelper@y,w,c
 11852  00DA56  0800               	sublw	0
 11853  00DA58  2415               	addwf	fillCircleHelper@y0,w,c
 11854  00DA5A  6E08               	movwf	drawFastVLine@y,c
 11855  00DA5C  5029               	movf	fillCircleHelper@y,w,c
 11856  00DA5E  2429               	addwf	fillCircleHelper@y,w,c
 11857  00DA60  241B               	addwf	fillCircleHelper@delta,w,c
 11858  00DA62  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11859  00DA64  281F               	incf	??_fillCircleHelper,w,c
 11860  00DA66  6E09               	movwf	drawFastVLine@h,c
 11861  00DA68  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11862  00DA6C  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11863  00DA70  5013               	movf	fillCircleHelper@x0,w,c
 11864  00DA72  2427               	addwf	fillCircleHelper@x,w,c
 11865  00DA74  EC5E  F065         	call	_drawFastVLine
 11866                           
 11867                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 11868  00DA78  5027               	movf	fillCircleHelper@x,w,c
 11869  00DA7A  0800               	sublw	0
 11870  00DA7C  2415               	addwf	fillCircleHelper@y0,w,c
 11871  00DA7E  6E08               	movwf	drawFastVLine@y,c
 11872  00DA80  5027               	movf	fillCircleHelper@x,w,c
 11873  00DA82  2427               	addwf	fillCircleHelper@x,w,c
 11874  00DA84  241B               	addwf	fillCircleHelper@delta,w,c
 11875  00DA86  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11876  00DA88  281F               	incf	??_fillCircleHelper,w,c
 11877  00DA8A  6E09               	movwf	drawFastVLine@h,c
 11878  00DA8C  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11879  00DA90  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11880  00DA94  5013               	movf	fillCircleHelper@x0,w,c
 11881  00DA96  2429               	addwf	fillCircleHelper@y,w,c
 11882  00DA98  EC5E  F065         	call	_drawFastVLine
 11883  00DA9C  D000               	goto	l4168
 11884  00DA9E                     l4168:
 11885                           
 11886                           ;ST7735_TFT.c: 639: }
 11887                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 11888  00DA9E  A219               	btfss	fillCircleHelper@cornername,1,c
 11889  00DAA0  D027               	goto	l4172
 11890                           
 11891                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 11892  00DAA2  5029               	movf	fillCircleHelper@y,w,c
 11893  00DAA4  0800               	sublw	0
 11894  00DAA6  2415               	addwf	fillCircleHelper@y0,w,c
 11895  00DAA8  6E08               	movwf	drawFastVLine@y,c
 11896  00DAAA  5029               	movf	fillCircleHelper@y,w,c
 11897  00DAAC  2429               	addwf	fillCircleHelper@y,w,c
 11898  00DAAE  241B               	addwf	fillCircleHelper@delta,w,c
 11899  00DAB0  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11900  00DAB2  281F               	incf	??_fillCircleHelper,w,c
 11901  00DAB4  6E09               	movwf	drawFastVLine@h,c
 11902  00DAB6  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11903  00DABA  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11904  00DABE  5027               	movf	fillCircleHelper@x,w,c
 11905  00DAC0  0800               	sublw	0
 11906  00DAC2  2413               	addwf	fillCircleHelper@x0,w,c
 11907  00DAC4  EC5E  F065         	call	_drawFastVLine
 11908                           
 11909                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 11910  00DAC8  5027               	movf	fillCircleHelper@x,w,c
 11911  00DACA  0800               	sublw	0
 11912  00DACC  2415               	addwf	fillCircleHelper@y0,w,c
 11913  00DACE  6E08               	movwf	drawFastVLine@y,c
 11914  00DAD0  5027               	movf	fillCircleHelper@x,w,c
 11915  00DAD2  2427               	addwf	fillCircleHelper@x,w,c
 11916  00DAD4  241B               	addwf	fillCircleHelper@delta,w,c
 11917  00DAD6  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11918  00DAD8  281F               	incf	??_fillCircleHelper,w,c
 11919  00DADA  6E09               	movwf	drawFastVLine@h,c
 11920  00DADC  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
 11921  00DAE0  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 11922  00DAE4  5029               	movf	fillCircleHelper@y,w,c
 11923  00DAE6  0800               	sublw	0
 11924  00DAE8  2413               	addwf	fillCircleHelper@x0,w,c
 11925  00DAEA  EC5E  F065         	call	_drawFastVLine
 11926  00DAEE  D000               	goto	l4172
 11927  00DAF0                     l4172:
 11928  00DAF0  5029               	movf	fillCircleHelper@y,w,c
 11929  00DAF2  5C27               	subwf	fillCircleHelper@x,w,c
 11930  00DAF4  5028               	movf	fillCircleHelper@x+1,w,c
 11931  00DAF6  0A80               	xorlw	128
 11932  00DAF8  6E1F               	movwf	??_fillCircleHelper& (0+255),c
 11933  00DAFA  502A               	movf	fillCircleHelper@y+1,w,c
 11934  00DAFC  0A80               	xorlw	128
 11935  00DAFE  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
 11936  00DB00  A0D8               	btfss	status,0,c
 11937  00DB02  D78F               	goto	l4152
 11938  00DB04  0012               	return		;funcret
 11939  00DB06                     __end_of_fillCircleHelper:
 11940                           	opt stack 0
 11941                           tblptru	equ	0xFF8
 11942                           tblptrh	equ	0xFF7
 11943                           tblptrl	equ	0xFF6
 11944                           tablat	equ	0xFF5
 11945                           prodh	equ	0xFF4
 11946                           prodl	equ	0xFF3
 11947                           intcon2	equ	0xFF1
 11948                           postinc0	equ	0xFEE
 11949                           wreg	equ	0xFE8
 11950                           postdec1	equ	0xFE5
 11951                           fsr1l	equ	0xFE1
 11952                           indf2	equ	0xFDF
 11953                           postinc2	equ	0xFDE
 11954                           postdec2	equ	0xFDD
 11955                           fsr2h	equ	0xFDA
 11956                           fsr2l	equ	0xFD9
 11957                           status	equ	0xFD8
 11958                           
 11959 ;; *************** function _drawCircle *****************
 11960 ;; Defined at:
 11961 ;;		line 561 in file "ST7735_TFT.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;  x0              2   11[COMRAM] int 
 11964 ;;  y0              2   13[COMRAM] int 
 11965 ;;  r               2   15[COMRAM] int 
 11966 ;;  color           2   17[COMRAM] unsigned int 
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;  y               2   29[COMRAM] int 
 11969 ;;  x               2   27[COMRAM] int 
 11970 ;;  f               2   25[COMRAM] int 
 11971 ;;  ddF_y           2   23[COMRAM] int 
 11972 ;;  ddF_x           2   21[COMRAM] int 
 11973 ;; Return value:  Size  Location     Type
 11974 ;;		None               void
 11975 ;; Registers used:
 11976 ;;		wreg, status,2, status,0, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;Total ram usage:       20 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:    4
 11989 ;; This function calls:
 11990 ;;		_drawPixel
 11991 ;; This function is called by:
 11992 ;;		_Initialize_Screen
 11993 ;;		_update_LCD_color
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text51
 11998  00DE06                     __ptext51:
 11999                           	opt stack 0
 12000  00DE06                     _drawCircle:
 12001                           	opt stack 23
 12002                           
 12003                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12004                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12005                           
 12006                           ;incstack = 0
 12007  00DE06  C010  F014         	movff	drawCircle@r,??_drawCircle
 12008  00DE0A  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
 12009  00DE0E  1E14               	comf	??_drawCircle,f,c
 12010  00DE10  1E15               	comf	??_drawCircle+1,f,c
 12011  00DE12  4A14               	infsnz	??_drawCircle,f,c
 12012  00DE14  2A15               	incf	??_drawCircle+1,f,c
 12013  00DE16  0E01               	movlw	1
 12014  00DE18  2414               	addwf	??_drawCircle,w,c
 12015  00DE1A  6E1A               	movwf	drawCircle@f,c
 12016  00DE1C  0E00               	movlw	0
 12017  00DE1E  2015               	addwfc	??_drawCircle+1,w,c
 12018  00DE20  6E1B               	movwf	drawCircle@f+1,c
 12019  00DE22  0E00               	movlw	0
 12020  00DE24  6E17               	movwf	drawCircle@ddF_x+1,c
 12021  00DE26  0E01               	movlw	1
 12022  00DE28  6E16               	movwf	drawCircle@ddF_x,c
 12023  00DE2A  C010  F014         	movff	drawCircle@r,??_drawCircle
 12024  00DE2E  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
 12025  00DE32  90D8               	bcf	status,0,c
 12026  00DE34  3614               	rlcf	??_drawCircle,f,c
 12027  00DE36  3615               	rlcf	??_drawCircle+1,f,c
 12028  00DE38  1E14               	comf	??_drawCircle,f,c
 12029  00DE3A  1E15               	comf	??_drawCircle+1,f,c
 12030  00DE3C  4A14               	infsnz	??_drawCircle,f,c
 12031  00DE3E  2A15               	incf	??_drawCircle+1,f,c
 12032  00DE40  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
 12033  00DE44  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12034  00DE48  0E00               	movlw	0
 12035  00DE4A  6E1D               	movwf	drawCircle@x+1,c
 12036  00DE4C  0E00               	movlw	0
 12037  00DE4E  6E1C               	movwf	drawCircle@x,c
 12038  00DE50  C010  F01E         	movff	drawCircle@r,drawCircle@y
 12039  00DE54  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
 12040                           
 12041                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12042  00DE58  500E               	movf	drawCircle@y0,w,c
 12043  00DE5A  2410               	addwf	drawCircle@r,w,c
 12044  00DE5C  6E08               	movwf	drawPixel@y,c
 12045  00DE5E  C012  F009         	movff	drawCircle@color,drawPixel@color
 12046  00DE62  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12047  00DE66  500C               	movf	drawCircle@x0,w,c
 12048  00DE68  ECEB  F061         	call	_drawPixel
 12049                           
 12050                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12051  00DE6C  5010               	movf	drawCircle@r,w,c
 12052  00DE6E  0800               	sublw	0
 12053  00DE70  240E               	addwf	drawCircle@y0,w,c
 12054  00DE72  6E08               	movwf	drawPixel@y,c
 12055  00DE74  C012  F009         	movff	drawCircle@color,drawPixel@color
 12056  00DE78  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12057  00DE7C  500C               	movf	drawCircle@x0,w,c
 12058  00DE7E  ECEB  F061         	call	_drawPixel
 12059                           
 12060                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12061  00DE82  C00E  F008         	movff	drawCircle@y0,drawPixel@y
 12062  00DE86  C012  F009         	movff	drawCircle@color,drawPixel@color
 12063  00DE8A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12064  00DE8E  500C               	movf	drawCircle@x0,w,c
 12065  00DE90  2410               	addwf	drawCircle@r,w,c
 12066  00DE92  ECEB  F061         	call	_drawPixel
 12067                           
 12068                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 12069  00DE96  C00E  F008         	movff	drawCircle@y0,drawPixel@y
 12070  00DE9A  C012  F009         	movff	drawCircle@color,drawPixel@color
 12071  00DE9E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12072  00DEA2  5010               	movf	drawCircle@r,w,c
 12073  00DEA4  0800               	sublw	0
 12074  00DEA6  240C               	addwf	drawCircle@x0,w,c
 12075  00DEA8  ECEB  F061         	call	_drawPixel
 12076                           
 12077                           ;ST7735_TFT.c: 569: while (x < y) {
 12078  00DEAC  D078               	goto	l4566
 12079  00DEAE                     l4538:
 12080                           
 12081                           ;ST7735_TFT.c: 570: if (f >= 0) {
 12082  00DEAE  BE1B               	btfsc	drawCircle@f+1,7,c
 12083  00DEB0  D00B               	goto	l257
 12084                           
 12085                           ;ST7735_TFT.c: 571: y--;
 12086  00DEB2  061E               	decf	drawCircle@y,f,c
 12087  00DEB4  A0D8               	btfss	status,0,c
 12088  00DEB6  061F               	decf	drawCircle@y+1,f,c
 12089                           
 12090                           ;ST7735_TFT.c: 572: ddF_y += 2;
 12091  00DEB8  0E02               	movlw	2
 12092  00DEBA  2618               	addwf	drawCircle@ddF_y,f,c
 12093  00DEBC  0E00               	movlw	0
 12094  00DEBE  2219               	addwfc	drawCircle@ddF_y+1,f,c
 12095                           
 12096                           ;ST7735_TFT.c: 573: f += ddF_y;
 12097  00DEC0  5018               	movf	drawCircle@ddF_y,w,c
 12098  00DEC2  261A               	addwf	drawCircle@f,f,c
 12099  00DEC4  5019               	movf	drawCircle@ddF_y+1,w,c
 12100  00DEC6  221B               	addwfc	drawCircle@f+1,f,c
 12101  00DEC8                     l257:
 12102                           
 12103                           ;ST7735_TFT.c: 574: }
 12104                           ;ST7735_TFT.c: 575: x++;
 12105  00DEC8  4A1C               	infsnz	drawCircle@x,f,c
 12106  00DECA  2A1D               	incf	drawCircle@x+1,f,c
 12107                           
 12108                           ;ST7735_TFT.c: 576: ddF_x += 2;
 12109  00DECC  0E02               	movlw	2
 12110  00DECE  2616               	addwf	drawCircle@ddF_x,f,c
 12111  00DED0  0E00               	movlw	0
 12112  00DED2  2217               	addwfc	drawCircle@ddF_x+1,f,c
 12113                           
 12114                           ;ST7735_TFT.c: 577: f += ddF_x;
 12115  00DED4  5016               	movf	drawCircle@ddF_x,w,c
 12116  00DED6  261A               	addwf	drawCircle@f,f,c
 12117  00DED8  5017               	movf	drawCircle@ddF_x+1,w,c
 12118  00DEDA  221B               	addwfc	drawCircle@f+1,f,c
 12119                           
 12120                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 12121  00DEDC  500E               	movf	drawCircle@y0,w,c
 12122  00DEDE  241E               	addwf	drawCircle@y,w,c
 12123  00DEE0  6E08               	movwf	drawPixel@y,c
 12124  00DEE2  C012  F009         	movff	drawCircle@color,drawPixel@color
 12125  00DEE6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12126  00DEEA  500C               	movf	drawCircle@x0,w,c
 12127  00DEEC  241C               	addwf	drawCircle@x,w,c
 12128  00DEEE  ECEB  F061         	call	_drawPixel
 12129                           
 12130                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 12131  00DEF2  500E               	movf	drawCircle@y0,w,c
 12132  00DEF4  241E               	addwf	drawCircle@y,w,c
 12133  00DEF6  6E08               	movwf	drawPixel@y,c
 12134  00DEF8  C012  F009         	movff	drawCircle@color,drawPixel@color
 12135  00DEFC  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12136  00DF00  501C               	movf	drawCircle@x,w,c
 12137  00DF02  0800               	sublw	0
 12138  00DF04  240C               	addwf	drawCircle@x0,w,c
 12139  00DF06  ECEB  F061         	call	_drawPixel
 12140                           
 12141                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 12142  00DF0A  501E               	movf	drawCircle@y,w,c
 12143  00DF0C  0800               	sublw	0
 12144  00DF0E  240E               	addwf	drawCircle@y0,w,c
 12145  00DF10  6E08               	movwf	drawPixel@y,c
 12146  00DF12  C012  F009         	movff	drawCircle@color,drawPixel@color
 12147  00DF16  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12148  00DF1A  500C               	movf	drawCircle@x0,w,c
 12149  00DF1C  241C               	addwf	drawCircle@x,w,c
 12150  00DF1E  ECEB  F061         	call	_drawPixel
 12151                           
 12152                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 12153  00DF22  501E               	movf	drawCircle@y,w,c
 12154  00DF24  0800               	sublw	0
 12155  00DF26  240E               	addwf	drawCircle@y0,w,c
 12156  00DF28  6E08               	movwf	drawPixel@y,c
 12157  00DF2A  C012  F009         	movff	drawCircle@color,drawPixel@color
 12158  00DF2E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12159  00DF32  501C               	movf	drawCircle@x,w,c
 12160  00DF34  0800               	sublw	0
 12161  00DF36  240C               	addwf	drawCircle@x0,w,c
 12162  00DF38  ECEB  F061         	call	_drawPixel
 12163                           
 12164                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 12165  00DF3C  500E               	movf	drawCircle@y0,w,c
 12166  00DF3E  241C               	addwf	drawCircle@x,w,c
 12167  00DF40  6E08               	movwf	drawPixel@y,c
 12168  00DF42  C012  F009         	movff	drawCircle@color,drawPixel@color
 12169  00DF46  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12170  00DF4A  500C               	movf	drawCircle@x0,w,c
 12171  00DF4C  241E               	addwf	drawCircle@y,w,c
 12172  00DF4E  ECEB  F061         	call	_drawPixel
 12173                           
 12174                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 12175  00DF52  500E               	movf	drawCircle@y0,w,c
 12176  00DF54  241C               	addwf	drawCircle@x,w,c
 12177  00DF56  6E08               	movwf	drawPixel@y,c
 12178  00DF58  C012  F009         	movff	drawCircle@color,drawPixel@color
 12179  00DF5C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12180  00DF60  501E               	movf	drawCircle@y,w,c
 12181  00DF62  0800               	sublw	0
 12182  00DF64  240C               	addwf	drawCircle@x0,w,c
 12183  00DF66  ECEB  F061         	call	_drawPixel
 12184                           
 12185                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 12186  00DF6A  501C               	movf	drawCircle@x,w,c
 12187  00DF6C  0800               	sublw	0
 12188  00DF6E  240E               	addwf	drawCircle@y0,w,c
 12189  00DF70  6E08               	movwf	drawPixel@y,c
 12190  00DF72  C012  F009         	movff	drawCircle@color,drawPixel@color
 12191  00DF76  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12192  00DF7A  500C               	movf	drawCircle@x0,w,c
 12193  00DF7C  241E               	addwf	drawCircle@y,w,c
 12194  00DF7E  ECEB  F061         	call	_drawPixel
 12195                           
 12196                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 12197  00DF82  501C               	movf	drawCircle@x,w,c
 12198  00DF84  0800               	sublw	0
 12199  00DF86  240E               	addwf	drawCircle@y0,w,c
 12200  00DF88  6E08               	movwf	drawPixel@y,c
 12201  00DF8A  C012  F009         	movff	drawCircle@color,drawPixel@color
 12202  00DF8E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
 12203  00DF92  501E               	movf	drawCircle@y,w,c
 12204  00DF94  0800               	sublw	0
 12205  00DF96  240C               	addwf	drawCircle@x0,w,c
 12206  00DF98  ECEB  F061         	call	_drawPixel
 12207  00DF9C  D000               	goto	l4566
 12208  00DF9E                     l4566:
 12209  00DF9E  501E               	movf	drawCircle@y,w,c
 12210  00DFA0  5C1C               	subwf	drawCircle@x,w,c
 12211  00DFA2  501D               	movf	drawCircle@x+1,w,c
 12212  00DFA4  0A80               	xorlw	128
 12213  00DFA6  6E14               	movwf	??_drawCircle& (0+255),c
 12214  00DFA8  501F               	movf	drawCircle@y+1,w,c
 12215  00DFAA  0A80               	xorlw	128
 12216  00DFAC  5814               	subwfb	??_drawCircle& (0+255),w,c
 12217  00DFAE  A0D8               	btfss	status,0,c
 12218  00DFB0  D77E               	goto	l4538
 12219  00DFB2  0012               	return		;funcret
 12220  00DFB4                     __end_of_drawCircle:
 12221                           	opt stack 0
 12222                           tblptru	equ	0xFF8
 12223                           tblptrh	equ	0xFF7
 12224                           tblptrl	equ	0xFF6
 12225                           tablat	equ	0xFF5
 12226                           prodh	equ	0xFF4
 12227                           prodl	equ	0xFF3
 12228                           intcon2	equ	0xFF1
 12229                           postinc0	equ	0xFEE
 12230                           wreg	equ	0xFE8
 12231                           postdec1	equ	0xFE5
 12232                           fsr1l	equ	0xFE1
 12233                           indf2	equ	0xFDF
 12234                           postinc2	equ	0xFDE
 12235                           postdec2	equ	0xFDD
 12236                           fsr2h	equ	0xFDA
 12237                           fsr2l	equ	0xFD9
 12238                           status	equ	0xFD8
 12239                           
 12240 ;; *************** function _PED_Control *****************
 12241 ;; Defined at:
 12242 ;;		line 525 in file "Lab8p1.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;  Direction       1    wreg     unsigned char 
 12245 ;;  Num_Sec         1   60[COMRAM] unsigned char 
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;  Direction       1    0[COMRAM] unsigned char 
 12248 ;;  i               1   61[COMRAM] unsigned char 
 12249 ;; Return value:  Size  Location     Type
 12250 ;;		None               void
 12251 ;; Registers used:
 12252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12258 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12262 ;;Total ram usage:        2 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; Hardware stack levels required when called:    8
 12265 ;; This function calls:
 12266 ;;		_WAIT_1_SEC_W_BEEP
 12267 ;;		_update_LCD_PED_Count
 12268 ;; This function is called by:
 12269 ;;		_Day_Mode
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           	psect	text52
 12274  00C406                     __ptext52:
 12275                           	opt stack 0
 12276  00C406                     _PED_Control:
 12277                           	opt stack 21
 12278                           
 12279                           ;Lab8p1.c: 527: for(char i = Num_Sec-1;i>0; i--)
 12280                           
 12281                           ;incstack = 0
 12282  00C406  043D               	decf	PED_Control@Num_Sec,w,c
 12283  00C408  6E3E               	movwf	PED_Control@i,c
 12284  00C40A                     l4980:
 12285  00C40A  503E               	movf	PED_Control@i,w,c
 12286  00C40C  B4D8               	btfsc	status,2,c
 12287  00C40E  D00B               	goto	l4992
 12288  00C410  D001               	goto	l4984
 12289  00C412  D009               	goto	l4992
 12290  00C414                     l4984:
 12291                           
 12292                           ;Lab8p1.c: 528: {
 12293                           ;Lab8p1.c: 529: update_LCD_PED_Count(direction, i);
 12294  00C414  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
 12295  00C418  5079               	movf	_direction,w,c
 12296  00C41A  ECE9  F069         	call	_update_LCD_PED_Count
 12297                           
 12298                           ;Lab8p1.c: 530: WAIT_1_SEC_W_BEEP();
 12299  00C41E  EC2F  F061         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12300  00C422  063E               	decf	PED_Control@i,f,c
 12301  00C424  D7F2               	goto	l4980
 12302  00C426                     l4992:
 12303                           
 12304                           ;Lab8p1.c: 531: }
 12305                           ;Lab8p1.c: 532: update_LCD_PED_Count(direction, 0);
 12306  00C426  0E00               	movlw	0
 12307  00C428  6E3A               	movwf	update_LCD_PED_Count@count,c
 12308  00C42A  5079               	movf	_direction,w,c
 12309  00C42C  ECE9  F069         	call	_update_LCD_PED_Count
 12310                           
 12311                           ;Lab8p1.c: 533: WAIT_1_SEC_W_BEEP();
 12312  00C430  EC2F  F061         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12313  00C434  0012               	return		;funcret
 12314  00C436                     __end_of_PED_Control:
 12315                           	opt stack 0
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon2	equ	0xFF1
 12323                           postinc0	equ	0xFEE
 12324                           wreg	equ	0xFE8
 12325                           postdec1	equ	0xFE5
 12326                           fsr1l	equ	0xFE1
 12327                           indf2	equ	0xFDF
 12328                           postinc2	equ	0xFDE
 12329                           postdec2	equ	0xFDD
 12330                           fsr2h	equ	0xFDA
 12331                           fsr2l	equ	0xFD9
 12332                           status	equ	0xFD8
 12333                           
 12334 ;; *************** function _update_LCD_PED_Count *****************
 12335 ;; Defined at:
 12336 ;;		line 675 in file "Lab8p1.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  direction       1    wreg     unsigned char 
 12339 ;;  count           1   57[COMRAM] unsigned char 
 12340 ;; Auto vars:     Size  Location     Type
 12341 ;;  direction       1   59[COMRAM] unsigned char 
 12342 ;; Return value:  Size  Location     Type
 12343 ;;		None               void
 12344 ;; Registers used:
 12345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12346 ;; Tracked objects:
 12347 ;;		On entry : 0/0
 12348 ;;		On exit  : 0/0
 12349 ;;		Unchanged: 0/0
 12350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12351 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;Total ram usage:        3 bytes
 12356 ;; Hardware stack levels used:    1
 12357 ;; Hardware stack levels required when called:    7
 12358 ;; This function calls:
 12359 ;;		___awdiv
 12360 ;;		___awmod
 12361 ;;		_drawtext
 12362 ;; This function is called by:
 12363 ;;		_PED_Control
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           	psect	text53
 12368  00D3D2                     __ptext53:
 12369                           	opt stack 0
 12370  00D3D2                     _update_LCD_PED_Count:
 12371                           	opt stack 21
 12372                           
 12373                           ;incstack = 0
 12374                           ;update_LCD_PED_Count@direction stored from wreg
 12375  00D3D2  6E3C               	movwf	update_LCD_PED_Count@direction,c
 12376                           
 12377                           ;Lab8p1.c: 677: PORTD = (PORTD & 0x80) | array[count];
 12378  00D3D4  503A               	movf	update_LCD_PED_Count@count,w,c
 12379  00D3D6  0D01               	mullw	1
 12380  00D3D8  0E80               	movlw	low _array
 12381  00D3DA  24F3               	addwf	prodl,w,c
 12382  00D3DC  6ED9               	movwf	fsr2l,c
 12383  00D3DE  0E00               	movlw	high _array
 12384  00D3E0  20F4               	addwfc	prodh,w,c
 12385  00D3E2  6EDA               	movwf	fsr2h,c
 12386  00D3E4  50DF               	movf	indf2,w,c
 12387  00D3E6  6E3B               	movwf	??_update_LCD_PED_Count& (0+255),c
 12388  00D3E8  5083               	movf	3971,w,c	;volatile
 12389  00D3EA  0B80               	andlw	128
 12390  00D3EC  103B               	iorwf	??_update_LCD_PED_Count,w,c
 12391  00D3EE  6E83               	movwf	3971,c	;volatile
 12392                           
 12393                           ;Lab8p1.c: 678: switch (direction)
 12394  00D3F0  D05B               	goto	l4850
 12395  00D3F2                     l4840:
 12396                           
 12397                           ;Lab8p1.c: 681: PED_EW_Count[0] = count/10 + '0';
 12398  00D3F2  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12399  00D3F6  6A08               	clrf	___awdiv@dividend+1,c
 12400  00D3F8  0E00               	movlw	0
 12401  00D3FA  6E0A               	movwf	___awdiv@divisor+1,c
 12402  00D3FC  0E0A               	movlw	10
 12403  00D3FE  6E09               	movwf	___awdiv@divisor,c
 12404  00D400  EC2C  F066         	call	___awdiv	;wreg free
 12405  00D404  5007               	movf	?___awdiv,w,c
 12406  00D406  0F30               	addlw	48
 12407  00D408  0100               	movlb	0	; () banked
 12408  00D40A  6F97               	movwf	_PED_EW_Count& (0+255),b
 12409                           
 12410                           ;Lab8p1.c: 682: PED_EW_Count[1] = count%10 + '0';
 12411  00D40C  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12412  00D410  6A02               	clrf	___awmod@dividend+1,c
 12413  00D412  0E00               	movlw	0
 12414  00D414  6E04               	movwf	___awmod@divisor+1,c
 12415  00D416  0E0A               	movlw	10
 12416  00D418  6E03               	movwf	___awmod@divisor,c
 12417  00D41A  ECDC  F064         	call	___awmod	;wreg free
 12418  00D41E  5001               	movf	?___awmod,w,c
 12419  00D420  0F30               	addlw	48
 12420  00D422  0100               	movlb	0	; () banked
 12421  00D424  6F98               	movwf	(_PED_EW_Count+1)& (0+255),b
 12422                           
 12423                           ; BSR set to: 0
 12424                           ;Lab8p1.c: 683: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 12425  00D426  0E1E               	movlw	30
 12426  00D428  6E29               	movwf	drawtext@y,c
 12427  00D42A  0E97               	movlw	low _PED_EW_Count
 12428  00D42C  6E2A               	movwf	drawtext@_text,c
 12429  00D42E  0E00               	movlw	high _PED_EW_Count
 12430  00D430  6E2B               	movwf	drawtext@_text+1,c
 12431  00D432  0E07               	movlw	7
 12432  00D434  6E2D               	movwf	drawtext@color+1,c
 12433  00D436  682C               	setf	drawtext@color,c
 12434  00D438  0E00               	movlw	0
 12435  00D43A  6E2F               	movwf	drawtext@bg+1,c
 12436  00D43C  0E00               	movlw	0
 12437  00D43E  6E2E               	movwf	drawtext@bg,c
 12438  00D440  0E02               	movlw	2
 12439  00D442  6E30               	movwf	drawtext@size,c
 12440  00D444  0E02               	movlw	2
 12441  00D446  EC96  F068         	call	_drawtext
 12442                           
 12443                           ;Lab8p1.c: 684: break;
 12444  00D44A  D036               	goto	l505
 12445  00D44C                     l4844:
 12446                           
 12447                           ;Lab8p1.c: 687: PED_NS_Count[0] = count/10 + '0';
 12448  00D44C  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12449  00D450  6A08               	clrf	___awdiv@dividend+1,c
 12450  00D452  0E00               	movlw	0
 12451  00D454  6E0A               	movwf	___awdiv@divisor+1,c
 12452  00D456  0E0A               	movlw	10
 12453  00D458  6E09               	movwf	___awdiv@divisor,c
 12454  00D45A  EC2C  F066         	call	___awdiv	;wreg free
 12455  00D45E  5007               	movf	?___awdiv,w,c
 12456  00D460  0F30               	addlw	48
 12457  00D462  0100               	movlb	0	; () banked
 12458  00D464  6F9A               	movwf	_PED_NS_Count& (0+255),b
 12459                           
 12460                           ;Lab8p1.c: 688: PED_NS_Count[1] = count%10 + '0';
 12461  00D466  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12462  00D46A  6A02               	clrf	___awmod@dividend+1,c
 12463  00D46C  0E00               	movlw	0
 12464  00D46E  6E04               	movwf	___awmod@divisor+1,c
 12465  00D470  0E0A               	movlw	10
 12466  00D472  6E03               	movwf	___awmod@divisor,c
 12467  00D474  ECDC  F064         	call	___awmod	;wreg free
 12468  00D478  5001               	movf	?___awmod,w,c
 12469  00D47A  0F30               	addlw	48
 12470  00D47C  0100               	movlb	0	; () banked
 12471  00D47E  6F9B               	movwf	(_PED_NS_Count+1)& (0+255),b
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;Lab8p1.c: 689: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
 12475  00D480  0E5A               	movlw	90
 12476  00D482  6E29               	movwf	drawtext@y,c
 12477  00D484  0E9A               	movlw	low _PED_NS_Count
 12478  00D486  6E2A               	movwf	drawtext@_text,c
 12479  00D488  0E00               	movlw	high _PED_NS_Count
 12480  00D48A  6E2B               	movwf	drawtext@_text+1,c
 12481  00D48C  0E00               	movlw	0
 12482  00D48E  6E2D               	movwf	drawtext@color+1,c
 12483  00D490  0E1F               	movlw	31
 12484  00D492  6E2C               	movwf	drawtext@color,c
 12485  00D494  0E00               	movlw	0
 12486  00D496  6E2F               	movwf	drawtext@bg+1,c
 12487  00D498  0E00               	movlw	0
 12488  00D49A  6E2E               	movwf	drawtext@bg,c
 12489  00D49C  0E02               	movlw	2
 12490  00D49E  6E30               	movwf	drawtext@size,c
 12491  00D4A0  0E02               	movlw	2
 12492  00D4A2  EC96  F068         	call	_drawtext
 12493                           
 12494                           ;Lab8p1.c: 691: }
 12495                           
 12496                           ;Lab8p1.c: 690: break;
 12497  00D4A6  D008               	goto	l505
 12498  00D4A8                     l4850:
 12499  00D4A8  503C               	movf	update_LCD_PED_Count@direction,w,c
 12500                           
 12501                           ; Switch size 1, requested type "space"
 12502                           ; Number of cases is 2, Range of values is 0 to 2
 12503                           ; switch strategies available:
 12504                           ; Name         Instructions Cycles
 12505                           ; simple_byte            7     4 (average)
 12506                           ;	Chosen strategy is simple_byte
 12507  00D4AA  0A00               	xorlw	0	; case 0
 12508  00D4AC  B4D8               	btfsc	status,2,c
 12509  00D4AE  D7A1               	goto	l4840
 12510  00D4B0  0A02               	xorlw	2	; case 2
 12511  00D4B2  B4D8               	btfsc	status,2,c
 12512  00D4B4  D7CB               	goto	l4844
 12513  00D4B6  D000               	goto	l505
 12514  00D4B8                     l505:
 12515  00D4B8  0012               	return		;funcret
 12516  00D4BA                     __end_of_update_LCD_PED_Count:
 12517                           	opt stack 0
 12518                           tblptru	equ	0xFF8
 12519                           tblptrh	equ	0xFF7
 12520                           tblptrl	equ	0xFF6
 12521                           tablat	equ	0xFF5
 12522                           prodh	equ	0xFF4
 12523                           prodl	equ	0xFF3
 12524                           intcon2	equ	0xFF1
 12525                           postinc0	equ	0xFEE
 12526                           wreg	equ	0xFE8
 12527                           postdec1	equ	0xFE5
 12528                           fsr1l	equ	0xFE1
 12529                           indf2	equ	0xFDF
 12530                           postinc2	equ	0xFDE
 12531                           postdec2	equ	0xFDD
 12532                           fsr2h	equ	0xFDA
 12533                           fsr2l	equ	0xFD9
 12534                           status	equ	0xFD8
 12535                           
 12536 ;; *************** function _drawtext *****************
 12537 ;; Defined at:
 12538 ;;		line 507 in file "ST7735_TFT.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  x               1    wreg     unsigned char 
 12541 ;;  y               1   40[COMRAM] unsigned char 
 12542 ;;  _text           2   41[COMRAM] PTR unsigned char 
 12543 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12544 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12545 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12546 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12547 ;;  color           2   43[COMRAM] unsigned int 
 12548 ;;  bg              2   45[COMRAM] unsigned int 
 12549 ;;  size            1   47[COMRAM] unsigned char 
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;  x               1   52[COMRAM] unsigned char 
 12552 ;;  i               2   53[COMRAM] unsigned int 
 12553 ;;  textsize        2   50[COMRAM] unsigned int 
 12554 ;;  cursor_x        1   56[COMRAM] unsigned char 
 12555 ;;  cursor_y        1   55[COMRAM] unsigned char 
 12556 ;; Return value:  Size  Location     Type
 12557 ;;		None               void
 12558 ;; Registers used:
 12559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12568 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12569 ;;Total ram usage:       17 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; Hardware stack levels required when called:    6
 12572 ;; This function calls:
 12573 ;;		_drawChar
 12574 ;;		_strlen
 12575 ;; This function is called by:
 12576 ;;		_Initialize_Screen
 12577 ;;		_WAIT_1_SEC
 12578 ;;		_update_LCD_count
 12579 ;;		_update_LCD_PED_Count
 12580 ;;		_update_LCD_misc
 12581 ;; This function uses a non-reentrant model
 12582 ;;
 12583                           
 12584                           	psect	text54
 12585  00D12C                     __ptext54:
 12586                           	opt stack 0
 12587  00D12C                     _drawtext:
 12588                           	opt stack 21
 12589                           
 12590                           ;incstack = 0
 12591                           ;drawtext@x stored from wreg
 12592  00D12C  6E35               	movwf	drawtext@x,c
 12593                           
 12594                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 12595                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 12596                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 12597  00D12E  C035  F039         	movff	drawtext@x,drawtext@cursor_x
 12598  00D132  C029  F038         	movff	drawtext@y,drawtext@cursor_y
 12599                           
 12600                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 12601  00D136  C02A  F001         	movff	drawtext@_text,strlen@s
 12602  00D13A  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
 12603  00D13E  EC52  F062         	call	_strlen	;wreg free
 12604  00D142  C001  F033         	movff	?_strlen,drawtext@textsize
 12605  00D146  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
 12606                           
 12607                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 12608  00D14A  0E00               	movlw	0
 12609  00D14C  6E37               	movwf	drawtext@i+1,c
 12610  00D14E  0E00               	movlw	0
 12611  00D150  6E36               	movwf	drawtext@i,c
 12612  00D152  D054               	goto	l4140
 12613  00D154                     l4114:
 12614                           
 12615                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 12616  00D154  507B               	movf	_wrap,w,c
 12617  00D156  B4D8               	btfsc	status,2,c
 12618  00D158  D02C               	goto	l4130
 12619  00D15A  5030               	movf	drawtext@size,w,c
 12620  00D15C  0D05               	mullw	5
 12621  00D15E  5039               	movf	drawtext@cursor_x,w,c
 12622  00D160  6E31               	movwf	??_drawtext& (0+255),c
 12623  00D162  6A32               	clrf	(??_drawtext+1)& (0+255),c
 12624  00D164  50F3               	movf	prodl,w,c
 12625  00D166  2631               	addwf	??_drawtext,f,c
 12626  00D168  50F4               	movf	prodh,w,c
 12627  00D16A  2232               	addwfc	??_drawtext+1,f,c
 12628  00D16C  BE32               	btfsc	??_drawtext+1,7,c
 12629  00D16E  D021               	goto	l4130
 12630  00D170  5032               	movf	??_drawtext+1,w,c
 12631  00D172  E104               	bnz	u3640
 12632  00D174  0E81               	movlw	129
 12633  00D176  5C31               	subwf	??_drawtext,w,c
 12634  00D178  A0D8               	btfss	status,0,c
 12635  00D17A  D01B               	goto	l4130
 12636  00D17C                     u3640:
 12637                           
 12638                           ;ST7735_TFT.c: 515: cursor_x = 0;
 12639  00D17C  0E00               	movlw	0
 12640  00D17E  6E39               	movwf	drawtext@cursor_x,c
 12641                           
 12642                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 12643  00D180  5030               	movf	drawtext@size,w,c
 12644  00D182  0D07               	mullw	7
 12645  00D184  50F3               	movf	prodl,w,c
 12646  00D186  2438               	addwf	drawtext@cursor_y,w,c
 12647  00D188  0F03               	addlw	3
 12648  00D18A  6E38               	movwf	drawtext@cursor_y,c
 12649                           
 12650                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 12651  00D18C  0EA0               	movlw	160
 12652  00D18E  6438               	cpfsgt	drawtext@cursor_y,c
 12653  00D190  D003               	goto	l4126
 12654  00D192  0EA0               	movlw	160
 12655  00D194  6E38               	movwf	drawtext@cursor_y,c
 12656  00D196  D000               	goto	l4126
 12657  00D198                     l4126:
 12658                           
 12659                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 12660  00D198  5036               	movf	drawtext@i,w,c
 12661  00D19A  242A               	addwf	drawtext@_text,w,c
 12662  00D19C  6ED9               	movwf	fsr2l,c
 12663  00D19E  5037               	movf	drawtext@i+1,w,c
 12664  00D1A0  202B               	addwfc	drawtext@_text+1,w,c
 12665  00D1A2  6EDA               	movwf	fsr2h,c
 12666  00D1A4  0E20               	movlw	32
 12667  00D1A6  18DE               	xorwf	postinc2,w,c
 12668  00D1A8  B4D8               	btfsc	status,2,c
 12669  00D1AA  D025               	goto	l4138
 12670  00D1AC  D002               	goto	l4130
 12671  00D1AE  D023               	goto	l4138
 12672  00D1B0  D000               	goto	l4130
 12673  00D1B2                     l4130:
 12674                           
 12675                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 12676  00D1B2  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
 12677  00D1B6  5036               	movf	drawtext@i,w,c
 12678  00D1B8  242A               	addwf	drawtext@_text,w,c
 12679  00D1BA  6ED9               	movwf	fsr2l,c
 12680  00D1BC  5037               	movf	drawtext@i+1,w,c
 12681  00D1BE  202B               	addwfc	drawtext@_text+1,w,c
 12682  00D1C0  6EDA               	movwf	fsr2h,c
 12683  00D1C2  50DF               	movf	indf2,w,c
 12684  00D1C4  6E1F               	movwf	drawChar@c,c
 12685  00D1C6  C02C  F020         	movff	drawtext@color,drawChar@color
 12686  00D1CA  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
 12687  00D1CE  C02E  F022         	movff	drawtext@bg,drawChar@bg
 12688  00D1D2  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
 12689  00D1D6  C030  F024         	movff	drawtext@size,drawChar@size
 12690  00D1DA  5039               	movf	drawtext@cursor_x,w,c
 12691  00D1DC  EC83  F06D         	call	_drawChar
 12692                           
 12693                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 12694  00D1E0  5030               	movf	drawtext@size,w,c
 12695  00D1E2  0D06               	mullw	6
 12696  00D1E4  50F3               	movf	prodl,w,c
 12697  00D1E6  2439               	addwf	drawtext@cursor_x,w,c
 12698  00D1E8  6E39               	movwf	drawtext@cursor_x,c
 12699                           
 12700                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 12701  00D1EA  0E80               	movlw	128
 12702  00D1EC  6439               	cpfsgt	drawtext@cursor_x,c
 12703  00D1EE  D003               	goto	l4138
 12704  00D1F0  0E80               	movlw	128
 12705  00D1F2  6E39               	movwf	drawtext@cursor_x,c
 12706  00D1F4  D000               	goto	l4138
 12707  00D1F6                     l4138:
 12708  00D1F6  4A36               	infsnz	drawtext@i,f,c
 12709  00D1F8  2A37               	incf	drawtext@i+1,f,c
 12710  00D1FA  D000               	goto	l4140
 12711  00D1FC                     l4140:
 12712  00D1FC  5033               	movf	drawtext@textsize,w,c
 12713  00D1FE  5C36               	subwf	drawtext@i,w,c
 12714  00D200  5034               	movf	drawtext@textsize+1,w,c
 12715  00D202  5837               	subwfb	drawtext@i+1,w,c
 12716  00D204  A0D8               	btfss	status,0,c
 12717  00D206  D7A6               	goto	l4114
 12718  00D208  0012               	return		;funcret
 12719  00D20A                     __end_of_drawtext:
 12720                           	opt stack 0
 12721                           tblptru	equ	0xFF8
 12722                           tblptrh	equ	0xFF7
 12723                           tblptrl	equ	0xFF6
 12724                           tablat	equ	0xFF5
 12725                           prodh	equ	0xFF4
 12726                           prodl	equ	0xFF3
 12727                           intcon2	equ	0xFF1
 12728                           postinc0	equ	0xFEE
 12729                           wreg	equ	0xFE8
 12730                           postdec1	equ	0xFE5
 12731                           fsr1l	equ	0xFE1
 12732                           indf2	equ	0xFDF
 12733                           postinc2	equ	0xFDE
 12734                           postdec2	equ	0xFDD
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function _strlen *****************
 12740 ;; Defined at:
 12741 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  s               2    0[COMRAM] PTR const unsigned char 
 12744 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12745 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12746 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12747 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12748 ;; Auto vars:     Size  Location     Type
 12749 ;;  cp              2    4[COMRAM] PTR const unsigned char 
 12750 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12751 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12752 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12753 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  2    0[COMRAM] unsigned int 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12763 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;Total ram usage:        6 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; This function calls:
 12770 ;;		Nothing
 12771 ;; This function is called by:
 12772 ;;		_drawtext
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           	psect	text55
 12777  00C4A4                     __ptext55:
 12778                           	opt stack 0
 12779  00C4A4                     _strlen:
 12780                           	opt stack 26
 12781                           
 12782                           ;incstack = 0
 12783  00C4A4  C001  F005         	movff	strlen@s,strlen@cp
 12784  00C4A8  C002  F006         	movff	strlen@s+1,strlen@cp+1
 12785  00C4AC  D003               	goto	l3784
 12786  00C4AE                     l3782:
 12787  00C4AE  4A05               	infsnz	strlen@cp,f,c
 12788  00C4B0  2A06               	incf	strlen@cp+1,f,c
 12789  00C4B2  D000               	goto	l3784
 12790  00C4B4                     l3784:
 12791  00C4B4  C005  FFD9         	movff	strlen@cp,fsr2l
 12792  00C4B8  C006  FFDA         	movff	strlen@cp+1,fsr2h
 12793  00C4BC  50DF               	movf	indf2,w,c
 12794  00C4BE  A4D8               	btfss	status,2,c
 12795  00C4C0  D7F6               	goto	l3782
 12796  00C4C2  C001  F003         	movff	strlen@s,??_strlen
 12797  00C4C6  C002  F004         	movff	strlen@s+1,??_strlen+1
 12798  00C4CA  1E03               	comf	??_strlen,f,c
 12799  00C4CC  1E04               	comf	??_strlen+1,f,c
 12800  00C4CE  4A03               	infsnz	??_strlen,f,c
 12801  00C4D0  2A04               	incf	??_strlen+1,f,c
 12802  00C4D2  5005               	movf	strlen@cp,w,c
 12803  00C4D4  2403               	addwf	??_strlen,w,c
 12804  00C4D6  6E01               	movwf	?_strlen,c
 12805  00C4D8  5006               	movf	strlen@cp+1,w,c
 12806  00C4DA  2004               	addwfc	??_strlen+1,w,c
 12807  00C4DC  6E02               	movwf	?_strlen+1,c
 12808  00C4DE  D000               	goto	l1286
 12809  00C4E0                     l1286:
 12810  00C4E0  0012               	return		;funcret
 12811  00C4E2                     __end_of_strlen:
 12812                           	opt stack 0
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon2	equ	0xFF1
 12820                           postinc0	equ	0xFEE
 12821                           wreg	equ	0xFE8
 12822                           postdec1	equ	0xFE5
 12823                           fsr1l	equ	0xFE1
 12824                           indf2	equ	0xFDF
 12825                           postinc2	equ	0xFDE
 12826                           postdec2	equ	0xFDD
 12827                           fsr2h	equ	0xFDA
 12828                           fsr2l	equ	0xFD9
 12829                           status	equ	0xFD8
 12830                           
 12831 ;; *************** function _drawChar *****************
 12832 ;; Defined at:
 12833 ;;		line 480 in file "ST7735_TFT.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;  x               1    wreg     unsigned char 
 12836 ;;  y               1   29[COMRAM] unsigned char 
 12837 ;;  c               1   30[COMRAM] unsigned char 
 12838 ;;  color           2   31[COMRAM] unsigned int 
 12839 ;;  bg              2   33[COMRAM] unsigned int 
 12840 ;;  size            1   35[COMRAM] unsigned char 
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;  x               1   37[COMRAM] unsigned char 
 12843 ;;  line            1   36[COMRAM] unsigned char 
 12844 ;;  i               1   39[COMRAM] unsigned char 
 12845 ;;  j               1   38[COMRAM] unsigned char 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;		None               void
 12848 ;; Registers used:
 12849 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12855 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12856 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12858 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12859 ;;Total ram usage:       11 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    5
 12862 ;; This function calls:
 12863 ;;		___wmul
 12864 ;;		_drawPixel
 12865 ;;		_fillRect
 12866 ;; This function is called by:
 12867 ;;		_drawtext
 12868 ;; This function uses a non-reentrant model
 12869 ;;
 12870                           
 12871                           	psect	text56
 12872  00DB06                     __ptext56:
 12873                           	opt stack 0
 12874  00DB06                     _drawChar:
 12875                           	opt stack 21
 12876                           
 12877                           ;incstack = 0
 12878                           ;drawChar@x stored from wreg
 12879  00DB06  6E26               	movwf	drawChar@x,c
 12880                           
 12881                           ;ST7735_TFT.c: 482: char i, j;
 12882                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 12883  00DB08  0E80               	movlw	128
 12884  00DB0A  6026               	cpfslt	drawChar@x,c
 12885  00DB0C  D0A6               	goto	l209
 12886  00DB0E  0E9F               	movlw	159
 12887  00DB10  641E               	cpfsgt	drawChar@y,c
 12888  00DB12  D001               	goto	l3730
 12889                           
 12890                           ;ST7735_TFT.c: 484: return;
 12891  00DB14  D0A2               	goto	l209
 12892  00DB16                     l3730:
 12893                           
 12894                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 12895  00DB16  5024               	movf	drawChar@size,w,c
 12896  00DB18  A4D8               	btfss	status,2,c
 12897  00DB1A  D003               	goto	l3734
 12898  00DB1C  0E01               	movlw	1
 12899  00DB1E  6E24               	movwf	drawChar@size,c
 12900  00DB20  D000               	goto	l3734
 12901  00DB22                     l3734:
 12902                           
 12903                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 12904  00DB22  0E1F               	movlw	31
 12905  00DB24  641F               	cpfsgt	drawChar@c,c
 12906  00DB26  D004               	goto	l3738
 12907  00DB28  0E7E               	movlw	126
 12908  00DB2A  641F               	cpfsgt	drawChar@c,c
 12909  00DB2C  D003               	goto	l211
 12910  00DB2E  D000               	goto	l3738
 12911  00DB30                     l3738:
 12912                           
 12913                           ;ST7735_TFT.c: 487: c = '?';
 12914  00DB30  0E3F               	movlw	63
 12915  00DB32  6E1F               	movwf	drawChar@c,c
 12916  00DB34                     l211:
 12917                           
 12918                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 12919  00DB34  0E00               	movlw	0
 12920  00DB36  6E28               	movwf	drawChar@i,c
 12921  00DB38                     l3740:
 12922  00DB38  0E04               	movlw	4
 12923  00DB3A  6428               	cpfsgt	drawChar@i,c
 12924  00DB3C  D001               	goto	l3744
 12925  00DB3E  D08D               	goto	l209
 12926  00DB40                     l3744:
 12927                           
 12928                           ;ST7735_TFT.c: 489: unsigned char line;
 12929                           ;ST7735_TFT.c: 490: if(c < 'S')
 12930  00DB40  0E53               	movlw	83
 12931  00DB42  601F               	cpfslt	drawChar@c,c
 12932  00DB44  D015               	goto	l3748
 12933                           
 12934                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 12935  00DB46  0EE0               	movlw	224
 12936  00DB48  241F               	addwf	drawChar@c,w,c
 12937  00DB4A  6E0F               	movwf	___wmul@multiplier,c
 12938  00DB4C  6A10               	clrf	___wmul@multiplier+1,c
 12939  00DB4E  0EFF               	movlw	255
 12940  00DB50  2210               	addwfc	___wmul@multiplier+1,f,c
 12941  00DB52  0E00               	movlw	0
 12942  00DB54  6E12               	movwf	___wmul@multiplicand+1,c
 12943  00DB56  0E05               	movlw	5
 12944  00DB58  6E11               	movwf	___wmul@multiplicand,c
 12945  00DB5A  EC96  F061         	call	___wmul	;wreg free
 12946  00DB5E  5028               	movf	drawChar@i,w,c
 12947  00DB60  260F               	addwf	?___wmul,f,c
 12948  00DB62  0E00               	movlw	0
 12949  00DB64  2210               	addwfc	?___wmul+1,f,c
 12950  00DB66  0E33               	movlw	low _font
 12951  00DB68  240F               	addwf	?___wmul,w,c
 12952  00DB6A  6EF6               	movwf	tblptrl,c
 12953  00DB6C  0EFD               	movlw	high _font
 12954  00DB6E  D014               	goto	L22
 12955  00DB70                     l3748:
 12956                           
 12957                           ;ST7735_TFT.c: 492: else
 12958                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 12959  00DB70  0EAD               	movlw	173
 12960  00DB72  241F               	addwf	drawChar@c,w,c
 12961  00DB74  6E0F               	movwf	___wmul@multiplier,c
 12962  00DB76  6A10               	clrf	___wmul@multiplier+1,c
 12963  00DB78  0EFF               	movlw	255
 12964  00DB7A  2210               	addwfc	___wmul@multiplier+1,f,c
 12965  00DB7C  0E00               	movlw	0
 12966  00DB7E  6E12               	movwf	___wmul@multiplicand+1,c
 12967  00DB80  0E05               	movlw	5
 12968  00DB82  6E11               	movwf	___wmul@multiplicand,c
 12969  00DB84  EC96  F061         	call	___wmul	;wreg free
 12970  00DB88  5028               	movf	drawChar@i,w,c
 12971  00DB8A  260F               	addwf	?___wmul,f,c
 12972  00DB8C  0E00               	movlw	0
 12973  00DB8E  2210               	addwfc	?___wmul+1,f,c
 12974  00DB90  0E32               	movlw	low _font2
 12975  00DB92  240F               	addwf	?___wmul,w,c
 12976  00DB94  6EF6               	movwf	tblptrl,c
 12977  00DB96  0EFE               	movlw	high _font2
 12978  00DB98                     L22:
 12979  00DB98  2010               	addwfc	?___wmul+1,w,c
 12980  00DB9A  6EF7               	movwf	tblptrh,c
 12981  00DB9C                     	if	0	;There are less than 3 active tblptr bytes
 12982  00DB9C                     	endif
 12983  00DB9C  0008               	tblrd		*
 12984  00DB9E  CFF5 F025          	movff	tablat,drawChar@line
 12985  00DBA2  D000               	goto	l3750
 12986  00DBA4                     l3750:
 12987                           
 12988                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 12989  00DBA4  0E00               	movlw	0
 12990  00DBA6  6E27               	movwf	drawChar@j,c
 12991  00DBA8                     l3752:
 12992  00DBA8  0E06               	movlw	6
 12993  00DBAA  6427               	cpfsgt	drawChar@j,c
 12994  00DBAC  D001               	goto	l218
 12995  00DBAE  D053               	goto	l3776
 12996  00DBB0                     l218:
 12997                           
 12998                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 12999  00DBB0  A025               	btfss	drawChar@line,0,c
 13000  00DBB2  D023               	goto	l3762
 13001                           
 13002                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 13003  00DBB4  0424               	decf	drawChar@size,w,c
 13004  00DBB6  A4D8               	btfss	status,2,c
 13005  00DBB8  D00C               	goto	l3760
 13006  00DBBA  501E               	movf	drawChar@y,w,c
 13007  00DBBC  2427               	addwf	drawChar@j,w,c
 13008  00DBBE  6E08               	movwf	drawPixel@y,c
 13009  00DBC0  C020  F009         	movff	drawChar@color,drawPixel@color
 13010  00DBC4  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
 13011  00DBC8  5026               	movf	drawChar@x,w,c
 13012  00DBCA  2428               	addwf	drawChar@i,w,c
 13013  00DBCC  ECEB  F061         	call	_drawPixel
 13014  00DBD0  D03E               	goto	l3770
 13015  00DBD2                     l3760:
 13016                           
 13017                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13018  00DBD2  5027               	movf	drawChar@j,w,c
 13019  00DBD4  0224               	mulwf	drawChar@size,c
 13020  00DBD6  50F3               	movf	prodl,w,c
 13021  00DBD8  241E               	addwf	drawChar@y,w,c
 13022  00DBDA  6E13               	movwf	fillRect@y,c
 13023  00DBDC  C024  F014         	movff	drawChar@size,fillRect@w
 13024  00DBE0  C024  F015         	movff	drawChar@size,fillRect@h
 13025  00DBE4  C020  F016         	movff	drawChar@color,fillRect@color
 13026  00DBE8  C021  F017         	movff	drawChar@color+1,fillRect@color+1
 13027  00DBEC  5028               	movf	drawChar@i,w,c
 13028  00DBEE  0224               	mulwf	drawChar@size,c
 13029  00DBF0  50F3               	movf	prodl,w,c
 13030  00DBF2  2426               	addwf	drawChar@x,w,c
 13031  00DBF4  EC3A  F063         	call	_fillRect
 13032                           
 13033                           ;ST7735_TFT.c: 498: }
 13034  00DBF8  D02A               	goto	l3770
 13035  00DBFA                     l3762:
 13036                           
 13037                           ;ST7735_TFT.c: 499: else if(bg != color) {
 13038  00DBFA  5020               	movf	drawChar@color,w,c
 13039  00DBFC  1822               	xorwf	drawChar@bg,w,c
 13040  00DBFE  E104               	bnz	u3120
 13041  00DC00  5021               	movf	drawChar@color+1,w,c
 13042  00DC02  1823               	xorwf	drawChar@bg+1,w,c
 13043  00DC04  B4D8               	btfsc	status,2,c
 13044  00DC06  D023               	goto	l3770
 13045  00DC08                     u3120:
 13046                           
 13047                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 13048  00DC08  0424               	decf	drawChar@size,w,c
 13049  00DC0A  A4D8               	btfss	status,2,c
 13050  00DC0C  D00C               	goto	l3768
 13051  00DC0E  501E               	movf	drawChar@y,w,c
 13052  00DC10  2427               	addwf	drawChar@j,w,c
 13053  00DC12  6E08               	movwf	drawPixel@y,c
 13054  00DC14  C022  F009         	movff	drawChar@bg,drawPixel@color
 13055  00DC18  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
 13056  00DC1C  5026               	movf	drawChar@x,w,c
 13057  00DC1E  2428               	addwf	drawChar@i,w,c
 13058  00DC20  ECEB  F061         	call	_drawPixel
 13059  00DC24  D014               	goto	l3770
 13060  00DC26                     l3768:
 13061                           
 13062                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 13063  00DC26  5027               	movf	drawChar@j,w,c
 13064  00DC28  0224               	mulwf	drawChar@size,c
 13065  00DC2A  50F3               	movf	prodl,w,c
 13066  00DC2C  241E               	addwf	drawChar@y,w,c
 13067  00DC2E  6E13               	movwf	fillRect@y,c
 13068  00DC30  C024  F014         	movff	drawChar@size,fillRect@w
 13069  00DC34  C024  F015         	movff	drawChar@size,fillRect@h
 13070  00DC38  C022  F016         	movff	drawChar@bg,fillRect@color
 13071  00DC3C  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
 13072  00DC40  5028               	movf	drawChar@i,w,c
 13073  00DC42  0224               	mulwf	drawChar@size,c
 13074  00DC44  50F3               	movf	prodl,w,c
 13075  00DC46  2426               	addwf	drawChar@x,w,c
 13076  00DC48  EC3A  F063         	call	_fillRect
 13077  00DC4C  D000               	goto	l3770
 13078  00DC4E                     l3770:
 13079  00DC4E  2A27               	incf	drawChar@j,f,c
 13080  00DC50  90D8               	bcf	status,0,c
 13081  00DC52  3225               	rrcf	drawChar@line,f,c
 13082  00DC54  D7A9               	goto	l3752
 13083  00DC56                     l3776:
 13084  00DC56  2A28               	incf	drawChar@i,f,c
 13085  00DC58  D76F               	goto	l3740
 13086  00DC5A                     l209:
 13087  00DC5A  0012               	return		;funcret
 13088  00DC5C                     __end_of_drawChar:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon2	equ	0xFF1
 13097                           postinc0	equ	0xFEE
 13098                           wreg	equ	0xFE8
 13099                           postdec1	equ	0xFE5
 13100                           fsr1l	equ	0xFE1
 13101                           indf2	equ	0xFDF
 13102                           postinc2	equ	0xFDE
 13103                           postdec2	equ	0xFDD
 13104                           fsr2h	equ	0xFDA
 13105                           fsr2l	equ	0xFD9
 13106                           status	equ	0xFD8
 13107                           
 13108 ;; *************** function _fillRect *****************
 13109 ;; Defined at:
 13110 ;;		line 470 in file "ST7735_TFT.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;  x               1    wreg     unsigned char 
 13113 ;;  y               1   18[COMRAM] unsigned char 
 13114 ;;  w               1   19[COMRAM] unsigned char 
 13115 ;;  h               1   20[COMRAM] unsigned char 
 13116 ;;  color           2   21[COMRAM] unsigned int 
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  x               1   26[COMRAM] unsigned char 
 13119 ;;  i               2   27[COMRAM] int 
 13120 ;; Return value:  Size  Location     Type
 13121 ;;		None               void
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0, cstack
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13129 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;Total ram usage:       11 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; Hardware stack levels required when called:    4
 13136 ;; This function calls:
 13137 ;;		_drawFastVLine
 13138 ;; This function is called by:
 13139 ;;		_drawChar
 13140 ;; This function uses a non-reentrant model
 13141 ;;
 13142                           
 13143                           	psect	text57
 13144  00C674                     __ptext57:
 13145                           	opt stack 0
 13146  00C674                     _fillRect:
 13147                           	opt stack 21
 13148                           
 13149                           ;incstack = 0
 13150                           ;fillRect@x stored from wreg
 13151  00C674  6E1B               	movwf	fillRect@x,c
 13152                           
 13153                           ;ST7735_TFT.c: 472: signed int i;
 13154                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 13155  00C676  C01B  F01C         	movff	fillRect@x,fillRect@i
 13156  00C67A  6A1D               	clrf	fillRect@i+1,c
 13157  00C67C  D00E               	goto	l3520
 13158  00C67E                     l3516:
 13159                           
 13160                           ;ST7735_TFT.c: 475: {
 13161                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 13162  00C67E  C013  F008         	movff	fillRect@y,drawFastVLine@y
 13163  00C682  C015  F009         	movff	fillRect@h,drawFastVLine@h
 13164  00C686  C016  F00A         	movff	fillRect@color,drawFastVLine@color
 13165  00C68A  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
 13166  00C68E  501C               	movf	fillRect@i,w,c
 13167  00C690  EC5E  F065         	call	_drawFastVLine
 13168  00C694  4A1C               	infsnz	fillRect@i,f,c
 13169  00C696  2A1D               	incf	fillRect@i+1,f,c
 13170  00C698  D000               	goto	l3520
 13171  00C69A                     l3520:
 13172  00C69A  5014               	movf	fillRect@w,w,c
 13173  00C69C  C01B  F018         	movff	fillRect@x,??_fillRect
 13174  00C6A0  6A19               	clrf	(??_fillRect+1)& (0+255),c
 13175  00C6A2  2618               	addwf	??_fillRect,f,c
 13176  00C6A4  0E00               	movlw	0
 13177  00C6A6  2219               	addwfc	??_fillRect+1,f,c
 13178  00C6A8  5018               	movf	??_fillRect,w,c
 13179  00C6AA  5C1C               	subwf	fillRect@i,w,c
 13180  00C6AC  501D               	movf	fillRect@i+1,w,c
 13181  00C6AE  0A80               	xorlw	128
 13182  00C6B0  6E1A               	movwf	(??_fillRect+2)& (0+255),c
 13183  00C6B2  5019               	movf	??_fillRect+1,w,c
 13184  00C6B4  0A80               	xorlw	128
 13185  00C6B6  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
 13186  00C6B8  A0D8               	btfss	status,0,c
 13187  00C6BA  D7E1               	goto	l3516
 13188  00C6BC  0012               	return		;funcret
 13189  00C6BE                     __end_of_fillRect:
 13190                           	opt stack 0
 13191                           tblptru	equ	0xFF8
 13192                           tblptrh	equ	0xFF7
 13193                           tblptrl	equ	0xFF6
 13194                           tablat	equ	0xFF5
 13195                           prodh	equ	0xFF4
 13196                           prodl	equ	0xFF3
 13197                           intcon2	equ	0xFF1
 13198                           postinc0	equ	0xFEE
 13199                           wreg	equ	0xFE8
 13200                           postdec1	equ	0xFE5
 13201                           fsr1l	equ	0xFE1
 13202                           indf2	equ	0xFDF
 13203                           postinc2	equ	0xFDE
 13204                           postdec2	equ	0xFDD
 13205                           fsr2h	equ	0xFDA
 13206                           fsr2l	equ	0xFD9
 13207                           status	equ	0xFD8
 13208                           
 13209 ;; *************** function _drawFastVLine *****************
 13210 ;; Defined at:
 13211 ;;		line 449 in file "ST7735_TFT.c"
 13212 ;; Parameters:    Size  Location     Type
 13213 ;;  x               1    wreg     unsigned char 
 13214 ;;  y               1    7[COMRAM] unsigned char 
 13215 ;;  h               1    8[COMRAM] unsigned char 
 13216 ;;  color           2    9[COMRAM] unsigned int 
 13217 ;; Auto vars:     Size  Location     Type
 13218 ;;  x               1   17[COMRAM] unsigned char 
 13219 ;;  lo              1   16[COMRAM] unsigned char 
 13220 ;;  hi              1   15[COMRAM] unsigned char 
 13221 ;; Return value:  Size  Location     Type
 13222 ;;		None               void
 13223 ;; Registers used:
 13224 ;;		wreg, status,2, status,0, cstack
 13225 ;; Tracked objects:
 13226 ;;		On entry : 0/0
 13227 ;;		On exit  : 0/0
 13228 ;;		Unchanged: 0/0
 13229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13231 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13232 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13233 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13234 ;;Total ram usage:       11 bytes
 13235 ;; Hardware stack levels used:    1
 13236 ;; Hardware stack levels required when called:    3
 13237 ;; This function calls:
 13238 ;;		_setAddrWindow
 13239 ;;		_spiwrite
 13240 ;; This function is called by:
 13241 ;;		_fillRect
 13242 ;;		_fillCircleHelper
 13243 ;;		_fillCircle
 13244 ;;		_drawRect
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           	psect	text58
 13249  00CABC                     __ptext58:
 13250                           	opt stack 0
 13251  00CABC                     _drawFastVLine:
 13252                           	opt stack 21
 13253                           
 13254                           ;incstack = 0
 13255                           ;drawFastVLine@x stored from wreg
 13256  00CABC  6E12               	movwf	drawFastVLine@x,c
 13257                           
 13258                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 13259                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 13260  00CABE  0E80               	movlw	128
 13261  00CAC0  6012               	cpfslt	drawFastVLine@x,c
 13262  00CAC2  D03F               	goto	l193
 13263  00CAC4  0E9F               	movlw	159
 13264  00CAC6  6408               	cpfsgt	drawFastVLine@y,c
 13265  00CAC8  D001               	goto	l3450
 13266                           
 13267                           ;ST7735_TFT.c: 453: return;
 13268  00CACA  D03B               	goto	l193
 13269  00CACC                     l3450:
 13270                           
 13271                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 13272  00CACC  0EFF               	movlw	255
 13273  00CACE  6E0C               	movwf	??_drawFastVLine& (0+255),c
 13274  00CAD0  0EFF               	movlw	255
 13275  00CAD2  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
 13276  00CAD4  5009               	movf	drawFastVLine@h,w,c
 13277  00CAD6  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
 13278  00CADA  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
 13279  00CADC  260E               	addwf	??_drawFastVLine+2,f,c
 13280  00CADE  0E00               	movlw	0
 13281  00CAE0  220F               	addwfc	??_drawFastVLine+3,f,c
 13282  00CAE2  500C               	movf	??_drawFastVLine,w,c
 13283  00CAE4  260E               	addwf	??_drawFastVLine+2,f,c
 13284  00CAE6  500D               	movf	??_drawFastVLine+1,w,c
 13285  00CAE8  220F               	addwfc	??_drawFastVLine+3,f,c
 13286  00CAEA  BE0F               	btfsc	??_drawFastVLine+3,7,c
 13287  00CAEC  D00B               	goto	l3454
 13288  00CAEE  500F               	movf	??_drawFastVLine+3,w,c
 13289  00CAF0  E104               	bnz	u2500
 13290  00CAF2  0EA0               	movlw	160
 13291  00CAF4  5C0E               	subwf	??_drawFastVLine+2,w,c
 13292  00CAF6  A0D8               	btfss	status,0,c
 13293  00CAF8  D005               	goto	l3454
 13294  00CAFA                     u2500:
 13295                           
 13296                           ;ST7735_TFT.c: 455: h = 160 - y;
 13297  00CAFA  5008               	movf	drawFastVLine@y,w,c
 13298  00CAFC  0800               	sublw	0
 13299  00CAFE  0FA0               	addlw	160
 13300  00CB00  6E09               	movwf	drawFastVLine@h,c
 13301  00CB02  D000               	goto	l3454
 13302  00CB04                     l3454:
 13303                           
 13304                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 13305  00CB04  500B               	movf	drawFastVLine@color+1,w,c
 13306  00CB06  6E10               	movwf	drawFastVLine@hi,c
 13307  00CB08  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
 13308                           
 13309                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 13310  00CB0C  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
 13311  00CB10  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
 13312  00CB14  5008               	movf	drawFastVLine@y,w,c
 13313  00CB16  2409               	addwf	drawFastVLine@h,w,c
 13314  00CB18  6E0C               	movwf	??_drawFastVLine& (0+255),c
 13315  00CB1A  040C               	decf	??_drawFastVLine,w,c
 13316  00CB1C  6E06               	movwf	setAddrWindow@y1,c
 13317  00CB1E  5012               	movf	drawFastVLine@x,w,c
 13318  00CB20  EC5F  F063         	call	_setAddrWindow
 13319                           
 13320                           ;ST7735_TFT.c: 458: PORTCbits.RC2 = 1;
 13321  00CB24  8482               	bsf	3970,2,c	;volatile
 13322                           
 13323                           ;ST7735_TFT.c: 459: PORTCbits.RC4 = 0;
 13324  00CB26  9882               	bcf	3970,4,c	;volatile
 13325                           
 13326                           ;ST7735_TFT.c: 461: while (h--) {
 13327  00CB28  D007               	goto	l3466
 13328  00CB2A                     l3464:
 13329                           
 13330                           ;ST7735_TFT.c: 462: spiwrite(hi);
 13331  00CB2A  5010               	movf	drawFastVLine@hi,w,c
 13332  00CB2C  EC1B  F061         	call	_spiwrite
 13333                           
 13334                           ;ST7735_TFT.c: 463: spiwrite(lo);
 13335  00CB30  5011               	movf	drawFastVLine@lo,w,c
 13336  00CB32  EC1B  F061         	call	_spiwrite
 13337  00CB36  D000               	goto	l3466
 13338  00CB38                     l3466:
 13339  00CB38  0609               	decf	drawFastVLine@h,f,c
 13340  00CB3A  2809               	incf	drawFastVLine@h,w,c
 13341  00CB3C  A4D8               	btfss	status,2,c
 13342  00CB3E  D7F5               	goto	l3464
 13343                           
 13344                           ;ST7735_TFT.c: 464: }
 13345                           ;ST7735_TFT.c: 465: PORTCbits.RC4 = 1;
 13346  00CB40  8882               	bsf	3970,4,c	;volatile
 13347  00CB42                     l193:
 13348  00CB42  0012               	return		;funcret
 13349  00CB44                     __end_of_drawFastVLine:
 13350                           	opt stack 0
 13351                           tblptru	equ	0xFF8
 13352                           tblptrh	equ	0xFF7
 13353                           tblptrl	equ	0xFF6
 13354                           tablat	equ	0xFF5
 13355                           prodh	equ	0xFF4
 13356                           prodl	equ	0xFF3
 13357                           intcon2	equ	0xFF1
 13358                           postinc0	equ	0xFEE
 13359                           wreg	equ	0xFE8
 13360                           postdec1	equ	0xFE5
 13361                           fsr1l	equ	0xFE1
 13362                           indf2	equ	0xFDF
 13363                           postinc2	equ	0xFDE
 13364                           postdec2	equ	0xFDD
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function _drawPixel *****************
 13370 ;; Defined at:
 13371 ;;		line 440 in file "ST7735_TFT.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  x               1    wreg     unsigned char 
 13374 ;;  y               1    7[COMRAM] unsigned char 
 13375 ;;  color           2    8[COMRAM] unsigned int 
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;  x               1   10[COMRAM] unsigned char 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;		None               void
 13380 ;; Registers used:
 13381 ;;		wreg, status,2, status,0, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13387 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13390 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13391 ;;Total ram usage:        4 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    3
 13394 ;; This function calls:
 13395 ;;		_setAddrWindow
 13396 ;;		_write_data
 13397 ;; This function is called by:
 13398 ;;		_drawChar
 13399 ;;		_drawCircle
 13400 ;;		_drawCircleHelper
 13401 ;; This function uses a non-reentrant model
 13402 ;;
 13403                           
 13404                           	psect	text59
 13405  00C3D6                     __ptext59:
 13406                           	opt stack 0
 13407  00C3D6                     _drawPixel:
 13408                           	opt stack 22
 13409                           
 13410                           ;incstack = 0
 13411                           ;drawPixel@x stored from wreg
 13412  00C3D6  6E0B               	movwf	drawPixel@x,c
 13413                           
 13414                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 13415  00C3D8  0E80               	movlw	128
 13416  00C3DA  600B               	cpfslt	drawPixel@x,c
 13417  00C3DC  D013               	goto	l187
 13418  00C3DE  0E9F               	movlw	159
 13419  00C3E0  6408               	cpfsgt	drawPixel@y,c
 13420  00C3E2  D001               	goto	l3508
 13421                           
 13422                           ;ST7735_TFT.c: 443: return;
 13423  00C3E4  D00F               	goto	l187
 13424  00C3E6                     l3508:
 13425                           
 13426                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 13427  00C3E6  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
 13428  00C3EA  280B               	incf	drawPixel@x,w,c
 13429  00C3EC  6E05               	movwf	setAddrWindow@x1,c
 13430  00C3EE  2808               	incf	drawPixel@y,w,c
 13431  00C3F0  6E06               	movwf	setAddrWindow@y1,c
 13432  00C3F2  500B               	movf	drawPixel@x,w,c
 13433  00C3F4  EC5F  F063         	call	_setAddrWindow
 13434                           
 13435                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 13436  00C3F8  500A               	movf	drawPixel@color+1,w,c
 13437  00C3FA  EC01  F061         	call	_write_data
 13438                           
 13439                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 13440  00C3FE  5009               	movf	drawPixel@color,w,c
 13441  00C400  EC01  F061         	call	_write_data
 13442  00C404                     l187:
 13443  00C404  0012               	return		;funcret
 13444  00C406                     __end_of_drawPixel:
 13445                           	opt stack 0
 13446                           tblptru	equ	0xFF8
 13447                           tblptrh	equ	0xFF7
 13448                           tblptrl	equ	0xFF6
 13449                           tablat	equ	0xFF5
 13450                           prodh	equ	0xFF4
 13451                           prodl	equ	0xFF3
 13452                           intcon2	equ	0xFF1
 13453                           postinc0	equ	0xFEE
 13454                           wreg	equ	0xFE8
 13455                           postdec1	equ	0xFE5
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function _setAddrWindow *****************
 13465 ;; Defined at:
 13466 ;;		line 425 in file "ST7735_TFT.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  x0              1    wreg     unsigned char 
 13469 ;;  y0              1    3[COMRAM] unsigned char 
 13470 ;;  x1              1    4[COMRAM] unsigned char 
 13471 ;;  y1              1    5[COMRAM] unsigned char 
 13472 ;; Auto vars:     Size  Location     Type
 13473 ;;  x0              1    6[COMRAM] unsigned char 
 13474 ;; Return value:  Size  Location     Type
 13475 ;;		None               void
 13476 ;; Registers used:
 13477 ;;		wreg, status,2, status,0, cstack
 13478 ;; Tracked objects:
 13479 ;;		On entry : 0/0
 13480 ;;		On exit  : 0/0
 13481 ;;		Unchanged: 0/0
 13482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13483 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13486 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13487 ;;Total ram usage:        4 bytes
 13488 ;; Hardware stack levels used:    1
 13489 ;; Hardware stack levels required when called:    2
 13490 ;; This function calls:
 13491 ;;		_write_command
 13492 ;;		_write_data
 13493 ;; This function is called by:
 13494 ;;		_drawPixel
 13495 ;;		_drawFastVLine
 13496 ;;		_fillRectangle
 13497 ;;		_drawFastHLine
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           	psect	text60
 13502  00C6BE                     __ptext60:
 13503                           	opt stack 0
 13504  00C6BE                     _setAddrWindow:
 13505                           	opt stack 21
 13506                           
 13507                           ;incstack = 0
 13508                           ;setAddrWindow@x0 stored from wreg
 13509  00C6BE  6E07               	movwf	setAddrWindow@x0,c
 13510                           
 13511                           ;ST7735_TFT.c: 427: write_command(0x2A);
 13512  00C6C0  0E2A               	movlw	42
 13513  00C6C2  ECF9  F060         	call	_write_command
 13514                           
 13515                           ;ST7735_TFT.c: 428: write_data(0);
 13516  00C6C6  0E00               	movlw	0
 13517  00C6C8  EC01  F061         	call	_write_data
 13518                           
 13519                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 13520  00C6CC  5007               	movf	setAddrWindow@x0,w,c
 13521  00C6CE  2477               	addwf	_colstart,w,c
 13522  00C6D0  EC01  F061         	call	_write_data
 13523                           
 13524                           ;ST7735_TFT.c: 430: write_data(0);
 13525  00C6D4  0E00               	movlw	0
 13526  00C6D6  EC01  F061         	call	_write_data
 13527                           
 13528                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 13529  00C6DA  5005               	movf	setAddrWindow@x1,w,c
 13530  00C6DC  2477               	addwf	_colstart,w,c
 13531  00C6DE  EC01  F061         	call	_write_data
 13532                           
 13533                           ;ST7735_TFT.c: 432: write_command(0x2B);
 13534  00C6E2  0E2B               	movlw	43
 13535  00C6E4  ECF9  F060         	call	_write_command
 13536                           
 13537                           ;ST7735_TFT.c: 433: write_data(0);
 13538  00C6E8  0E00               	movlw	0
 13539  00C6EA  EC01  F061         	call	_write_data
 13540                           
 13541                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 13542  00C6EE  5004               	movf	setAddrWindow@y0,w,c
 13543  00C6F0  247A               	addwf	_rowstart,w,c
 13544  00C6F2  EC01  F061         	call	_write_data
 13545                           
 13546                           ;ST7735_TFT.c: 435: write_data(0);
 13547  00C6F6  0E00               	movlw	0
 13548  00C6F8  EC01  F061         	call	_write_data
 13549                           
 13550                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 13551  00C6FC  5006               	movf	setAddrWindow@y1,w,c
 13552  00C6FE  247A               	addwf	_rowstart,w,c
 13553  00C700  EC01  F061         	call	_write_data
 13554                           
 13555                           ;ST7735_TFT.c: 437: write_command(0x2C);
 13556  00C704  0E2C               	movlw	44
 13557  00C706  ECF9  F060         	call	_write_command
 13558  00C70A  0012               	return		;funcret
 13559  00C70C                     __end_of_setAddrWindow:
 13560                           	opt stack 0
 13561                           tblptru	equ	0xFF8
 13562                           tblptrh	equ	0xFF7
 13563                           tblptrl	equ	0xFF6
 13564                           tablat	equ	0xFF5
 13565                           prodh	equ	0xFF4
 13566                           prodl	equ	0xFF3
 13567                           intcon2	equ	0xFF1
 13568                           postinc0	equ	0xFEE
 13569                           wreg	equ	0xFE8
 13570                           postdec1	equ	0xFE5
 13571                           fsr1l	equ	0xFE1
 13572                           indf2	equ	0xFDF
 13573                           postinc2	equ	0xFDE
 13574                           postdec2	equ	0xFDD
 13575                           fsr2h	equ	0xFDA
 13576                           fsr2l	equ	0xFD9
 13577                           status	equ	0xFD8
 13578                           
 13579 ;; *************** function _write_data *****************
 13580 ;; Defined at:
 13581 ;;		line 242 in file "ST7735_TFT.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;  data_           1    wreg     unsigned char 
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  data_           1    2[COMRAM] unsigned char 
 13586 ;; Return value:  Size  Location     Type
 13587 ;;		None               void
 13588 ;; Registers used:
 13589 ;;		wreg, status,2, cstack
 13590 ;; Tracked objects:
 13591 ;;		On entry : 0/0
 13592 ;;		On exit  : 0/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13599 ;;Total ram usage:        1 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:    1
 13602 ;; This function calls:
 13603 ;;		_spiwrite
 13604 ;; This function is called by:
 13605 ;;		_Rcmd1
 13606 ;;		_Rcmd2red
 13607 ;;		_Rcmd3
 13608 ;;		_setAddrWindow
 13609 ;;		_drawPixel
 13610 ;;		_TFT_GreenTab_Initialize
 13611 ;;		_Bcmd
 13612 ;;		_setScrollDefinition
 13613 ;;		_Rcmd2green
 13614 ;;		_VerticalScroll
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           	psect	text61
 13619  00C202                     __ptext61:
 13620                           	opt stack 0
 13621  00C202                     _write_data:
 13622                           	opt stack 21
 13623                           
 13624                           ;incstack = 0
 13625                           ;write_data@data_ stored from wreg
 13626  00C202  6E03               	movwf	write_data@data_,c
 13627                           
 13628                           ;ST7735_TFT.c: 244: PORTCbits.RC4 = 0;
 13629  00C204  9882               	bcf	3970,4,c	;volatile
 13630                           
 13631                           ;ST7735_TFT.c: 245: PORTCbits.RC2 = 1;
 13632  00C206  8482               	bsf	3970,2,c	;volatile
 13633                           
 13634                           ;ST7735_TFT.c: 246: spiwrite(data_);
 13635  00C208  5003               	movf	write_data@data_,w,c
 13636  00C20A  EC1B  F061         	call	_spiwrite
 13637                           
 13638                           ;ST7735_TFT.c: 247: PORTCbits.RC4 = 1;
 13639  00C20E  8882               	bsf	3970,4,c	;volatile
 13640  00C210  0012               	return		;funcret
 13641  00C212                     __end_of_write_data:
 13642                           	opt stack 0
 13643                           tblptru	equ	0xFF8
 13644                           tblptrh	equ	0xFF7
 13645                           tblptrl	equ	0xFF6
 13646                           tablat	equ	0xFF5
 13647                           prodh	equ	0xFF4
 13648                           prodl	equ	0xFF3
 13649                           intcon2	equ	0xFF1
 13650                           postinc0	equ	0xFEE
 13651                           wreg	equ	0xFE8
 13652                           postdec1	equ	0xFE5
 13653                           fsr1l	equ	0xFE1
 13654                           indf2	equ	0xFDF
 13655                           postinc2	equ	0xFDE
 13656                           postdec2	equ	0xFDD
 13657                           fsr2h	equ	0xFDA
 13658                           fsr2l	equ	0xFD9
 13659                           status	equ	0xFD8
 13660                           
 13661 ;; *************** function _write_command *****************
 13662 ;; Defined at:
 13663 ;;		line 231 in file "ST7735_TFT.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  cmd_            1    wreg     unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  cmd_            1    2[COMRAM] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;		None               void
 13670 ;; Registers used:
 13671 ;;		wreg, status,2, cstack
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13681 ;;Total ram usage:        1 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; Hardware stack levels required when called:    1
 13684 ;; This function calls:
 13685 ;;		_spiwrite
 13686 ;; This function is called by:
 13687 ;;		_Rcmd1
 13688 ;;		_Rcmd2red
 13689 ;;		_Rcmd3
 13690 ;;		_setAddrWindow
 13691 ;;		_TFT_GreenTab_Initialize
 13692 ;;		_Bcmd
 13693 ;;		_setScrollDefinition
 13694 ;;		_Rcmd2green
 13695 ;;		_VerticalScroll
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           	psect	text62
 13700  00C1F2                     __ptext62:
 13701                           	opt stack 0
 13702  00C1F2                     _write_command:
 13703                           	opt stack 21
 13704                           
 13705                           ;incstack = 0
 13706                           ;write_command@cmd_ stored from wreg
 13707  00C1F2  6E03               	movwf	write_command@cmd_,c
 13708                           
 13709                           ;ST7735_TFT.c: 233: PORTCbits.RC4 = 0;
 13710  00C1F4  9882               	bcf	3970,4,c	;volatile
 13711                           
 13712                           ;ST7735_TFT.c: 235: PORTCbits.RC2 = 0;
 13713  00C1F6  9482               	bcf	3970,2,c	;volatile
 13714                           
 13715                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 13716  00C1F8  5003               	movf	write_command@cmd_,w,c
 13717  00C1FA  EC1B  F061         	call	_spiwrite
 13718                           
 13719                           ;ST7735_TFT.c: 238: PORTCbits.RC4 = 1;
 13720  00C1FE  8882               	bsf	3970,4,c	;volatile
 13721  00C200  0012               	return		;funcret
 13722  00C202                     __end_of_write_command:
 13723                           	opt stack 0
 13724                           tblptru	equ	0xFF8
 13725                           tblptrh	equ	0xFF7
 13726                           tblptrl	equ	0xFF6
 13727                           tablat	equ	0xFF5
 13728                           prodh	equ	0xFF4
 13729                           prodl	equ	0xFF3
 13730                           intcon2	equ	0xFF1
 13731                           postinc0	equ	0xFEE
 13732                           wreg	equ	0xFE8
 13733                           postdec1	equ	0xFE5
 13734                           fsr1l	equ	0xFE1
 13735                           indf2	equ	0xFDF
 13736                           postinc2	equ	0xFDE
 13737                           postdec2	equ	0xFDD
 13738                           fsr2h	equ	0xFDA
 13739                           fsr2l	equ	0xFD9
 13740                           status	equ	0xFD8
 13741                           
 13742 ;; *************** function _spiwrite *****************
 13743 ;; Defined at:
 13744 ;;		line 222 in file "ST7735_TFT.c"
 13745 ;; Parameters:    Size  Location     Type
 13746 ;;  spidata         1    wreg     unsigned char 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  spidata         1    1[COMRAM] unsigned char 
 13749 ;;  x               1    0[COMRAM] unsigned char 
 13750 ;; Return value:  Size  Location     Type
 13751 ;;		None               void
 13752 ;; Registers used:
 13753 ;;		wreg
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;Total ram usage:        2 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; This function calls:
 13766 ;;		Nothing
 13767 ;; This function is called by:
 13768 ;;		_write_command
 13769 ;;		_write_data
 13770 ;;		_drawFastVLine
 13771 ;;		_fillRectangle
 13772 ;;		_drawFastHLine
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           	psect	text63
 13777  00C236                     __ptext63:
 13778                           	opt stack 0
 13779  00C236                     _spiwrite:
 13780                           	opt stack 23
 13781                           
 13782                           ;incstack = 0
 13783                           ;spiwrite@spidata stored from wreg
 13784  00C236  6E02               	movwf	spiwrite@spidata,c
 13785                           
 13786                           ;ST7735_TFT.c: 224: char x;
 13787                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 13788  00C238  969E               	bcf	3998,3,c	;volatile
 13789                           
 13790                           ;ST7735_TFT.c: 226: x = SSPBUF;
 13791  00C23A  CFC9 F001          	movff	4041,spiwrite@x	;volatile
 13792                           
 13793                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 13794  00C23E  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
 13795                           
 13796                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 13797  00C242  D000               	goto	l143
 13798  00C244                     l143:
 13799  00C244  A0C7               	btfss	4039,0,c	;volatile
 13800  00C246  D7FE               	goto	l143
 13801  00C248  0012               	return		;funcret
 13802  00C24A                     __end_of_spiwrite:
 13803                           	opt stack 0
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon2	equ	0xFF1
 13811                           postinc0	equ	0xFEE
 13812                           wreg	equ	0xFE8
 13813                           postdec1	equ	0xFE5
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           fsr2h	equ	0xFDA
 13819                           fsr2l	equ	0xFD9
 13820                           status	equ	0xFD8
 13821                           
 13822 ;; *************** function ___wmul *****************
 13823 ;; Defined at:
 13824 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13825 ;; Parameters:    Size  Location     Type
 13826 ;;  multiplier      2   14[COMRAM] unsigned int 
 13827 ;;  multiplicand    2   16[COMRAM] unsigned int 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;  product         2   18[COMRAM] unsigned int 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  2   14[COMRAM] unsigned int 
 13832 ;; Registers used:
 13833 ;;		wreg, status,2, status,0, prodl, prodh
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;Total ram usage:        6 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; This function calls:
 13846 ;;		Nothing
 13847 ;; This function is called by:
 13848 ;;		_delay_ms
 13849 ;;		_drawChar
 13850 ;;		_main
 13851 ;;		_update_LCD_misc
 13852 ;;		_fround
 13853 ;;		_scale
 13854 ;;		_printf
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           	psect	text64
 13859  00C32C                     __ptext64:
 13860                           	opt stack 0
 13861  00C32C                     ___wmul:
 13862                           	opt stack 30
 13863                           
 13864                           ;incstack = 0
 13865  00C32C  500F               	movf	___wmul@multiplier,w,c
 13866  00C32E  0211               	mulwf	___wmul@multiplicand,c
 13867  00C330  CFF3 F013          	movff	prodl,___wmul@product
 13868  00C334  CFF4 F014          	movff	prodh,___wmul@product+1
 13869  00C338  500F               	movf	___wmul@multiplier,w,c
 13870  00C33A  0212               	mulwf	___wmul@multiplicand+1,c
 13871  00C33C  50F3               	movf	prodl,w,c
 13872  00C33E  2614               	addwf	___wmul@product+1,f,c
 13873  00C340  5010               	movf	___wmul@multiplier+1,w,c
 13874  00C342  0211               	mulwf	___wmul@multiplicand,c
 13875  00C344  50F3               	movf	prodl,w,c
 13876  00C346  2614               	addwf	___wmul@product+1,f,c
 13877  00C348  C013  F00F         	movff	___wmul@product,?___wmul
 13878  00C34C  C014  F010         	movff	___wmul@product+1,?___wmul+1
 13879  00C350  D000               	goto	l686
 13880  00C352                     l686:
 13881  00C352  0012               	return		;funcret
 13882  00C354                     __end_of___wmul:
 13883                           	opt stack 0
 13884                           tblptru	equ	0xFF8
 13885                           tblptrh	equ	0xFF7
 13886                           tblptrl	equ	0xFF6
 13887                           tablat	equ	0xFF5
 13888                           prodh	equ	0xFF4
 13889                           prodl	equ	0xFF3
 13890                           intcon2	equ	0xFF1
 13891                           postinc0	equ	0xFEE
 13892                           wreg	equ	0xFE8
 13893                           postdec1	equ	0xFE5
 13894                           fsr1l	equ	0xFE1
 13895                           indf2	equ	0xFDF
 13896                           postinc2	equ	0xFDE
 13897                           postdec2	equ	0xFDD
 13898                           fsr2h	equ	0xFDA
 13899                           fsr2l	equ	0xFD9
 13900                           status	equ	0xFD8
 13901                           
 13902 ;; *************** function ___awmod *****************
 13903 ;; Defined at:
 13904 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  dividend        2    0[COMRAM] int 
 13907 ;;  divisor         2    2[COMRAM] int 
 13908 ;; Auto vars:     Size  Location     Type
 13909 ;;  sign            1    5[COMRAM] unsigned char 
 13910 ;;  counter         1    4[COMRAM] unsigned char 
 13911 ;; Return value:  Size  Location     Type
 13912 ;;                  2    0[COMRAM] int 
 13913 ;; Registers used:
 13914 ;;		wreg, status,2, status,0
 13915 ;; Tracked objects:
 13916 ;;		On entry : 0/0
 13917 ;;		On exit  : 0/0
 13918 ;;		Unchanged: 0/0
 13919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13921 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13924 ;;Total ram usage:        6 bytes
 13925 ;; Hardware stack levels used:    1
 13926 ;; This function calls:
 13927 ;;		Nothing
 13928 ;; This function is called by:
 13929 ;;		_update_LCD_count
 13930 ;;		_update_LCD_PED_Count
 13931 ;;		_fround
 13932 ;;		_scale
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           	psect	text65
 13937  00C9B8                     __ptext65:
 13938                           	opt stack 0
 13939  00C9B8                     ___awmod:
 13940                           	opt stack 27
 13941                           
 13942                           ;incstack = 0
 13943  00C9B8  0E00               	movlw	0
 13944  00C9BA  6E06               	movwf	___awmod@sign,c
 13945  00C9BC  AE02               	btfss	___awmod@dividend+1,7,c
 13946  00C9BE  D007               	goto	l3698
 13947  00C9C0  6C01               	negf	___awmod@dividend,c
 13948  00C9C2  1E02               	comf	___awmod@dividend+1,f,c
 13949  00C9C4  B0D8               	btfsc	status,0,c
 13950  00C9C6  2A02               	incf	___awmod@dividend+1,f,c
 13951  00C9C8  0E01               	movlw	1
 13952  00C9CA  6E06               	movwf	___awmod@sign,c
 13953  00C9CC  D000               	goto	l3698
 13954  00C9CE                     l3698:
 13955  00C9CE  AE04               	btfss	___awmod@divisor+1,7,c
 13956  00C9D0  D005               	goto	l3702
 13957  00C9D2  6C03               	negf	___awmod@divisor,c
 13958  00C9D4  1E04               	comf	___awmod@divisor+1,f,c
 13959  00C9D6  B0D8               	btfsc	status,0,c
 13960  00C9D8  2A04               	incf	___awmod@divisor+1,f,c
 13961  00C9DA  D000               	goto	l3702
 13962  00C9DC                     l3702:
 13963  00C9DC  5003               	movf	___awmod@divisor,w,c
 13964  00C9DE  1004               	iorwf	___awmod@divisor+1,w,c
 13965  00C9E0  B4D8               	btfsc	status,2,c
 13966  00C9E2  D01D               	goto	l3718
 13967  00C9E4  0E01               	movlw	1
 13968  00C9E6  6E05               	movwf	___awmod@counter,c
 13969  00C9E8  D005               	goto	l3708
 13970  00C9EA                     l3706:
 13971  00C9EA  90D8               	bcf	status,0,c
 13972  00C9EC  3603               	rlcf	___awmod@divisor,f,c
 13973  00C9EE  3604               	rlcf	___awmod@divisor+1,f,c
 13974  00C9F0  2A05               	incf	___awmod@counter,f,c
 13975  00C9F2  D000               	goto	l3708
 13976  00C9F4                     l3708:
 13977  00C9F4  BE04               	btfsc	___awmod@divisor+1,7,c
 13978  00C9F6  D002               	goto	l3710
 13979  00C9F8  D7F8               	goto	l3706
 13980  00C9FA  D000               	goto	l3710
 13981  00C9FC                     l3710:
 13982  00C9FC  5003               	movf	___awmod@divisor,w,c
 13983  00C9FE  5C01               	subwf	___awmod@dividend,w,c
 13984  00CA00  5004               	movf	___awmod@divisor+1,w,c
 13985  00CA02  5802               	subwfb	___awmod@dividend+1,w,c
 13986  00CA04  A0D8               	btfss	status,0,c
 13987  00CA06  D005               	goto	l3714
 13988  00CA08  5003               	movf	___awmod@divisor,w,c
 13989  00CA0A  5E01               	subwf	___awmod@dividend,f,c
 13990  00CA0C  5004               	movf	___awmod@divisor+1,w,c
 13991  00CA0E  5A02               	subwfb	___awmod@dividend+1,f,c
 13992  00CA10  D000               	goto	l3714
 13993  00CA12                     l3714:
 13994  00CA12  90D8               	bcf	status,0,c
 13995  00CA14  3204               	rrcf	___awmod@divisor+1,f,c
 13996  00CA16  3203               	rrcf	___awmod@divisor,f,c
 13997  00CA18  2E05               	decfsz	___awmod@counter,f,c
 13998  00CA1A  D7F0               	goto	l3710
 13999  00CA1C  D000               	goto	l3718
 14000  00CA1E                     l3718:
 14001  00CA1E  5006               	movf	___awmod@sign,w,c
 14002  00CA20  B4D8               	btfsc	status,2,c
 14003  00CA22  D005               	goto	l3722
 14004  00CA24  6C01               	negf	___awmod@dividend,c
 14005  00CA26  1E02               	comf	___awmod@dividend+1,f,c
 14006  00CA28  B0D8               	btfsc	status,0,c
 14007  00CA2A  2A02               	incf	___awmod@dividend+1,f,c
 14008  00CA2C  D000               	goto	l3722
 14009  00CA2E                     l3722:
 14010  00CA2E  C001  F001         	movff	___awmod@dividend,?___awmod
 14011  00CA32  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14012  00CA36  D000               	goto	l892
 14013  00CA38                     l892:
 14014  00CA38  0012               	return		;funcret
 14015  00CA3A                     __end_of___awmod:
 14016                           	opt stack 0
 14017                           tblptru	equ	0xFF8
 14018                           tblptrh	equ	0xFF7
 14019                           tblptrl	equ	0xFF6
 14020                           tablat	equ	0xFF5
 14021                           prodh	equ	0xFF4
 14022                           prodl	equ	0xFF3
 14023                           intcon2	equ	0xFF1
 14024                           postinc0	equ	0xFEE
 14025                           wreg	equ	0xFE8
 14026                           postdec1	equ	0xFE5
 14027                           fsr1l	equ	0xFE1
 14028                           indf2	equ	0xFDF
 14029                           postinc2	equ	0xFDE
 14030                           postdec2	equ	0xFDD
 14031                           fsr2h	equ	0xFDA
 14032                           fsr2l	equ	0xFD9
 14033                           status	equ	0xFD8
 14034                           
 14035 ;; *************** function ___awdiv *****************
 14036 ;; Defined at:
 14037 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  dividend        2    6[COMRAM] int 
 14040 ;;  divisor         2    8[COMRAM] int 
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;  quotient        2   12[COMRAM] int 
 14043 ;;  sign            1   11[COMRAM] unsigned char 
 14044 ;;  counter         1   10[COMRAM] unsigned char 
 14045 ;; Return value:  Size  Location     Type
 14046 ;;                  2    6[COMRAM] int 
 14047 ;; Registers used:
 14048 ;;		wreg, status,2, status,0
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14058 ;;Total ram usage:        8 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; This function calls:
 14061 ;;		Nothing
 14062 ;; This function is called by:
 14063 ;;		_update_LCD_count
 14064 ;;		_update_LCD_PED_Count
 14065 ;;		_fround
 14066 ;;		_scale
 14067 ;;		_printf
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           	psect	text66
 14072  00CC58                     __ptext66:
 14073                           	opt stack 0
 14074  00CC58                     ___awdiv:
 14075                           	opt stack 27
 14076                           
 14077                           ;incstack = 0
 14078  00CC58  0E00               	movlw	0
 14079  00CC5A  6E0C               	movwf	___awdiv@sign,c
 14080  00CC5C  AE0A               	btfss	___awdiv@divisor+1,7,c
 14081  00CC5E  D007               	goto	l3654
 14082  00CC60  6C09               	negf	___awdiv@divisor,c
 14083  00CC62  1E0A               	comf	___awdiv@divisor+1,f,c
 14084  00CC64  B0D8               	btfsc	status,0,c
 14085  00CC66  2A0A               	incf	___awdiv@divisor+1,f,c
 14086  00CC68  0E01               	movlw	1
 14087  00CC6A  6E0C               	movwf	___awdiv@sign,c
 14088  00CC6C  D000               	goto	l3654
 14089  00CC6E                     l3654:
 14090  00CC6E  AE08               	btfss	___awdiv@dividend+1,7,c
 14091  00CC70  D007               	goto	l3660
 14092  00CC72  6C07               	negf	___awdiv@dividend,c
 14093  00CC74  1E08               	comf	___awdiv@dividend+1,f,c
 14094  00CC76  B0D8               	btfsc	status,0,c
 14095  00CC78  2A08               	incf	___awdiv@dividend+1,f,c
 14096  00CC7A  0E01               	movlw	1
 14097  00CC7C  1A0C               	xorwf	___awdiv@sign,f,c
 14098  00CC7E  D000               	goto	l3660
 14099  00CC80                     l3660:
 14100  00CC80  0E00               	movlw	0
 14101  00CC82  6E0E               	movwf	___awdiv@quotient+1,c
 14102  00CC84  0E00               	movlw	0
 14103  00CC86  6E0D               	movwf	___awdiv@quotient,c
 14104  00CC88  5009               	movf	___awdiv@divisor,w,c
 14105  00CC8A  100A               	iorwf	___awdiv@divisor+1,w,c
 14106  00CC8C  B4D8               	btfsc	status,2,c
 14107  00CC8E  D021               	goto	l3682
 14108  00CC90  0E01               	movlw	1
 14109  00CC92  6E0B               	movwf	___awdiv@counter,c
 14110  00CC94  D005               	goto	l3668
 14111  00CC96                     l3666:
 14112  00CC96  90D8               	bcf	status,0,c
 14113  00CC98  3609               	rlcf	___awdiv@divisor,f,c
 14114  00CC9A  360A               	rlcf	___awdiv@divisor+1,f,c
 14115  00CC9C  2A0B               	incf	___awdiv@counter,f,c
 14116  00CC9E  D000               	goto	l3668
 14117  00CCA0                     l3668:
 14118  00CCA0  BE0A               	btfsc	___awdiv@divisor+1,7,c
 14119  00CCA2  D002               	goto	l3670
 14120  00CCA4  D7F8               	goto	l3666
 14121  00CCA6  D000               	goto	l3670
 14122  00CCA8                     l3670:
 14123  00CCA8  90D8               	bcf	status,0,c
 14124  00CCAA  360D               	rlcf	___awdiv@quotient,f,c
 14125  00CCAC  360E               	rlcf	___awdiv@quotient+1,f,c
 14126  00CCAE  5009               	movf	___awdiv@divisor,w,c
 14127  00CCB0  5C07               	subwf	___awdiv@dividend,w,c
 14128  00CCB2  500A               	movf	___awdiv@divisor+1,w,c
 14129  00CCB4  5808               	subwfb	___awdiv@dividend+1,w,c
 14130  00CCB6  A0D8               	btfss	status,0,c
 14131  00CCB8  D006               	goto	l3678
 14132  00CCBA  5009               	movf	___awdiv@divisor,w,c
 14133  00CCBC  5E07               	subwf	___awdiv@dividend,f,c
 14134  00CCBE  500A               	movf	___awdiv@divisor+1,w,c
 14135  00CCC0  5A08               	subwfb	___awdiv@dividend+1,f,c
 14136  00CCC2  800D               	bsf	___awdiv@quotient,0,c
 14137  00CCC4  D000               	goto	l3678
 14138  00CCC6                     l3678:
 14139  00CCC6  90D8               	bcf	status,0,c
 14140  00CCC8  320A               	rrcf	___awdiv@divisor+1,f,c
 14141  00CCCA  3209               	rrcf	___awdiv@divisor,f,c
 14142  00CCCC  2E0B               	decfsz	___awdiv@counter,f,c
 14143  00CCCE  D7EC               	goto	l3670
 14144  00CCD0  D000               	goto	l3682
 14145  00CCD2                     l3682:
 14146  00CCD2  500C               	movf	___awdiv@sign,w,c
 14147  00CCD4  B4D8               	btfsc	status,2,c
 14148  00CCD6  D005               	goto	l3686
 14149  00CCD8  6C0D               	negf	___awdiv@quotient,c
 14150  00CCDA  1E0E               	comf	___awdiv@quotient+1,f,c
 14151  00CCDC  B0D8               	btfsc	status,0,c
 14152  00CCDE  2A0E               	incf	___awdiv@quotient+1,f,c
 14153  00CCE0  D000               	goto	l3686
 14154  00CCE2                     l3686:
 14155  00CCE2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 14156  00CCE6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 14157  00CCEA  D000               	goto	l879
 14158  00CCEC                     l879:
 14159  00CCEC  0012               	return		;funcret
 14160  00CCEE                     __end_of___awdiv:
 14161                           	opt stack 0
 14162                           tblptru	equ	0xFF8
 14163                           tblptrh	equ	0xFF7
 14164                           tblptrl	equ	0xFF6
 14165                           tablat	equ	0xFF5
 14166                           prodh	equ	0xFF4
 14167                           prodl	equ	0xFF3
 14168                           intcon2	equ	0xFF1
 14169                           postinc0	equ	0xFEE
 14170                           wreg	equ	0xFE8
 14171                           postdec1	equ	0xFE5
 14172                           fsr1l	equ	0xFE1
 14173                           indf2	equ	0xFDF
 14174                           postinc2	equ	0xFDE
 14175                           postdec2	equ	0xFDD
 14176                           fsr2h	equ	0xFDA
 14177                           fsr2l	equ	0xFD9
 14178                           status	equ	0xFD8
 14179                           
 14180 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
 14181 ;; Defined at:
 14182 ;;		line 500 in file "Lab8p1.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;		None
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;		None
 14187 ;; Return value:  Size  Location     Type
 14188 ;;		None               void
 14189 ;; Registers used:
 14190 ;;		wreg, status,2, cstack
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14200 ;;Total ram usage:        0 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    1
 14203 ;; This function calls:
 14204 ;;		_Activate_Buzzer
 14205 ;;		_Deactivate_Buzzer
 14206 ;;		_WAIT_HALF_SEC
 14207 ;; This function is called by:
 14208 ;;		_PED_Control
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text67
 14213  00C25E                     __ptext67:
 14214                           	opt stack 0
 14215  00C25E                     _WAIT_1_SEC_W_BEEP:
 14216                           	opt stack 27
 14217                           
 14218                           ;Lab8p1.c: 502: PORTDbits.RD7 = 1;
 14219                           
 14220                           ;incstack = 0
 14221  00C25E  8E83               	bsf	3971,7,c	;volatile
 14222                           
 14223                           ;Lab8p1.c: 503: Activate_Buzzer();
 14224  00C260  EC09  F061         	call	_Activate_Buzzer	;wreg free
 14225                           
 14226                           ;Lab8p1.c: 504: WAIT_HALF_SEC();
 14227  00C264  EC45  F061         	call	_WAIT_HALF_SEC	;wreg free
 14228                           
 14229                           ;Lab8p1.c: 505: PORTDbits.RD7 = 0;
 14230  00C268  9E83               	bcf	3971,7,c	;volatile
 14231                           
 14232                           ;Lab8p1.c: 506: Deactivate_Buzzer ();
 14233  00C26A  ECE1  F060         	call	_Deactivate_Buzzer	;wreg free
 14234                           
 14235                           ;Lab8p1.c: 507: WAIT_HALF_SEC();
 14236  00C26E  EC45  F061         	call	_WAIT_HALF_SEC	;wreg free
 14237  00C272  0012               	return		;funcret
 14238  00C274                     __end_of_WAIT_1_SEC_W_BEEP:
 14239                           	opt stack 0
 14240                           tblptru	equ	0xFF8
 14241                           tblptrh	equ	0xFF7
 14242                           tblptrl	equ	0xFF6
 14243                           tablat	equ	0xFF5
 14244                           prodh	equ	0xFF4
 14245                           prodl	equ	0xFF3
 14246                           intcon2	equ	0xFF1
 14247                           postinc0	equ	0xFEE
 14248                           wreg	equ	0xFE8
 14249                           postdec1	equ	0xFE5
 14250                           fsr1l	equ	0xFE1
 14251                           indf2	equ	0xFDF
 14252                           postinc2	equ	0xFDE
 14253                           postdec2	equ	0xFDD
 14254                           fsr2h	equ	0xFDA
 14255                           fsr2l	equ	0xFD9
 14256                           status	equ	0xFD8
 14257                           
 14258 ;; *************** function _WAIT_HALF_SEC *****************
 14259 ;; Defined at:
 14260 ;;		line 477 in file "Lab8p1.c"
 14261 ;; Parameters:    Size  Location     Type
 14262 ;;		None
 14263 ;; Auto vars:     Size  Location     Type
 14264 ;;		None
 14265 ;; Return value:  Size  Location     Type
 14266 ;;		None               void
 14267 ;; Registers used:
 14268 ;;		wreg, status,2
 14269 ;; Tracked objects:
 14270 ;;		On entry : 0/0
 14271 ;;		On exit  : 0/0
 14272 ;;		Unchanged: 0/0
 14273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14278 ;;Total ram usage:        0 bytes
 14279 ;; Hardware stack levels used:    1
 14280 ;; This function calls:
 14281 ;;		Nothing
 14282 ;; This function is called by:
 14283 ;;		_WAIT_1_SEC
 14284 ;;		_WAIT_1_SEC_W_BEEP
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           	psect	text68
 14289  00C28A                     __ptext68:
 14290                           	opt stack 0
 14291  00C28A                     _WAIT_HALF_SEC:
 14292                           	opt stack 27
 14293                           
 14294                           ;Lab8p1.c: 479: T0CON = 0x03;
 14295                           
 14296                           ;incstack = 0
 14297  00C28A  0E03               	movlw	3
 14298  00C28C  6ED5               	movwf	4053,c	;volatile
 14299                           
 14300                           ;Lab8p1.c: 480: TMR0L = 0xDB;
 14301  00C28E  0EDB               	movlw	219
 14302  00C290  6ED6               	movwf	4054,c	;volatile
 14303                           
 14304                           ;Lab8p1.c: 481: TMR0H = 0xB;
 14305  00C292  0E0B               	movlw	11
 14306  00C294  6ED7               	movwf	4055,c	;volatile
 14307                           
 14308                           ;Lab8p1.c: 482: INTCONbits.TMR0IF = 0;
 14309  00C296  94F2               	bcf	intcon,2,c	;volatile
 14310                           
 14311                           ;Lab8p1.c: 483: T0CONbits.TMR0ON = 1;
 14312  00C298  8ED5               	bsf	4053,7,c	;volatile
 14313                           
 14314                           ;Lab8p1.c: 484: while (INTCONbits.TMR0IF == 0);
 14315  00C29A  D000               	goto	l424
 14316  00C29C                     l424:
 14317  00C29C  A4F2               	btfss	intcon,2,c	;volatile
 14318  00C29E  D7FE               	goto	l424
 14319                           
 14320                           ;Lab8p1.c: 485: T0CONbits.TMR0ON = 0;
 14321  00C2A0  9ED5               	bcf	4053,7,c	;volatile
 14322  00C2A2  0012               	return		;funcret
 14323  00C2A4                     __end_of_WAIT_HALF_SEC:
 14324                           	opt stack 0
 14325                           tblptru	equ	0xFF8
 14326                           tblptrh	equ	0xFF7
 14327                           tblptrl	equ	0xFF6
 14328                           tablat	equ	0xFF5
 14329                           prodh	equ	0xFF4
 14330                           prodl	equ	0xFF3
 14331                           intcon	equ	0xFF2
 14332                           intcon2	equ	0xFF1
 14333                           postinc0	equ	0xFEE
 14334                           wreg	equ	0xFE8
 14335                           postdec1	equ	0xFE5
 14336                           fsr1l	equ	0xFE1
 14337                           indf2	equ	0xFDF
 14338                           postinc2	equ	0xFDE
 14339                           postdec2	equ	0xFDD
 14340                           fsr2h	equ	0xFDA
 14341                           fsr2l	equ	0xFD9
 14342                           status	equ	0xFD8
 14343                           
 14344 ;; *************** function _Deactivate_Buzzer *****************
 14345 ;; Defined at:
 14346 ;;		line 518 in file "Lab8p1.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;		None
 14349 ;; Auto vars:     Size  Location     Type
 14350 ;;		None
 14351 ;; Return value:  Size  Location     Type
 14352 ;;		None               void
 14353 ;; Registers used:
 14354 ;;		wreg, status,2
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14364 ;;Total ram usage:        0 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		_WAIT_1_SEC_W_BEEP
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text69
 14374  00C1C2                     __ptext69:
 14375                           	opt stack 0
 14376  00C1C2                     _Deactivate_Buzzer:
 14377                           	opt stack 27
 14378                           
 14379                           ;Lab8p1.c: 520: CCP2CON = 0x0;
 14380                           
 14381                           ;incstack = 0
 14382  00C1C2  0E00               	movlw	0
 14383  00C1C4  6EBA               	movwf	4026,c	;volatile
 14384                           
 14385                           ;Lab8p1.c: 521: PORTBbits.RB3 = 0;
 14386  00C1C6  9681               	bcf	3969,3,c	;volatile
 14387  00C1C8  0012               	return		;funcret
 14388  00C1CA                     __end_of_Deactivate_Buzzer:
 14389                           	opt stack 0
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           intcon2	equ	0xFF1
 14398                           postinc0	equ	0xFEE
 14399                           wreg	equ	0xFE8
 14400                           postdec1	equ	0xFE5
 14401                           fsr1l	equ	0xFE1
 14402                           indf2	equ	0xFDF
 14403                           postinc2	equ	0xFDE
 14404                           postdec2	equ	0xFDD
 14405                           fsr2h	equ	0xFDA
 14406                           fsr2l	equ	0xFD9
 14407                           status	equ	0xFD8
 14408                           
 14409 ;; *************** function _Activate_Buzzer *****************
 14410 ;; Defined at:
 14411 ;;		line 510 in file "Lab8p1.c"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;		None
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;		None
 14416 ;; Return value:  Size  Location     Type
 14417 ;;		None               void
 14418 ;; Registers used:
 14419 ;;		wreg, status,2
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14429 ;;Total ram usage:        0 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; This function calls:
 14432 ;;		Nothing
 14433 ;; This function is called by:
 14434 ;;		_WAIT_1_SEC_W_BEEP
 14435 ;; This function uses a non-reentrant model
 14436 ;;
 14437                           
 14438                           	psect	text70
 14439  00C212                     __ptext70:
 14440                           	opt stack 0
 14441  00C212                     _Activate_Buzzer:
 14442                           	opt stack 27
 14443                           
 14444                           ;Lab8p1.c: 512: PR2 = 0b11111001 ;
 14445                           
 14446                           ;incstack = 0
 14447  00C212  0EF9               	movlw	249
 14448  00C214  6ECB               	movwf	4043,c	;volatile
 14449                           
 14450                           ;Lab8p1.c: 513: T2CON = 0b00000101 ;
 14451  00C216  0E05               	movlw	5
 14452  00C218  6ECA               	movwf	4042,c	;volatile
 14453                           
 14454                           ;Lab8p1.c: 514: CCPR2L = 0b01001010 ;
 14455  00C21A  0E4A               	movlw	74
 14456  00C21C  6EBB               	movwf	4027,c	;volatile
 14457                           
 14458                           ;Lab8p1.c: 515: CCP2CON = 0b00111100 ;
 14459  00C21E  0E3C               	movlw	60
 14460  00C220  6EBA               	movwf	4026,c	;volatile
 14461  00C222  0012               	return		;funcret
 14462  00C224                     __end_of_Activate_Buzzer:
 14463                           	opt stack 0
 14464                           tblptru	equ	0xFF8
 14465                           tblptrh	equ	0xFF7
 14466                           tblptrl	equ	0xFF6
 14467                           tablat	equ	0xFF5
 14468                           prodh	equ	0xFF4
 14469                           prodl	equ	0xFF3
 14470                           intcon	equ	0xFF2
 14471                           intcon2	equ	0xFF1
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           postdec1	equ	0xFE5
 14475                           fsr1l	equ	0xFE1
 14476                           indf2	equ	0xFDF
 14477                           postinc2	equ	0xFDE
 14478                           postdec2	equ	0xFDD
 14479                           fsr2h	equ	0xFDA
 14480                           fsr2l	equ	0xFD9
 14481                           status	equ	0xFD8
 14482                           tblptru	equ	0xFF8
 14483                           tblptrh	equ	0xFF7
 14484                           tblptrl	equ	0xFF6
 14485                           tablat	equ	0xFF5
 14486                           prodh	equ	0xFF4
 14487                           prodl	equ	0xFF3
 14488                           intcon	equ	0xFF2
 14489                           intcon2	equ	0xFF1
 14490                           postinc0	equ	0xFEE
 14491                           wreg	equ	0xFE8
 14492                           postdec1	equ	0xFE5
 14493                           fsr1l	equ	0xFE1
 14494                           indf2	equ	0xFDF
 14495                           postinc2	equ	0xFDE
 14496                           postdec2	equ	0xFDD
 14497                           fsr2h	equ	0xFDA
 14498                           fsr2l	equ	0xFD9
 14499                           status	equ	0xFD8
 14500                           
 14501                           	psect	rparam
 14502  0000                     tblptru	equ	0xFF8
 14503                           tblptrh	equ	0xFF7
 14504                           tblptrl	equ	0xFF6
 14505                           tablat	equ	0xFF5
 14506                           prodh	equ	0xFF4
 14507                           prodl	equ	0xFF3
 14508                           intcon	equ	0xFF2
 14509                           intcon2	equ	0xFF1
 14510                           postinc0	equ	0xFEE
 14511                           wreg	equ	0xFE8
 14512                           postdec1	equ	0xFE5
 14513                           fsr1l	equ	0xFE1
 14514                           indf2	equ	0xFDF
 14515                           postinc2	equ	0xFDE
 14516                           postdec2	equ	0xFDD
 14517                           fsr2h	equ	0xFDA
 14518                           fsr2l	equ	0xFD9
 14519                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    593
    Data        46
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    108     127
    BANK0           128      0      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_15(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_WAIT_N_SEC
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_WAIT_N_SEC
    _update_LCD_count->_drawtext
    _WAIT_1_SEC->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  491114
                                            106 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  198955
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   59470
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    7218
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    3519
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    3519
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    3429
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    3429
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  224824
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0  120715
                                            104 COMRAM     2     2      0
                         _WAIT_1_SEC
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     3     2      1   25761
                                             57 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0   94864
                      _WAIT_HALF_SEC
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   71752
                                             99 COMRAM     5     5      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   42584
                                             63 COMRAM    36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   10604
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   10406
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3636
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    3131
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    2878
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     666
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2318
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1943
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   25869
                                             60 COMRAM     2     1      1
                  _WAIT_1_SEC_W_BEEP
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 3     2      1   25673
                                             57 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   21553
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10316
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2597
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1886
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1996
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      4F       5       61.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6C      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE      34        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 03 11:09:54 2022

                     drawCircle@f 001A                       drawCircle@r 0010  
                     drawCircle@x 001C                       drawCircle@y 001E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 000C  
                    drawCircle@y0 000E                      ___awdiv@sign 000C  
             ___wmul@multiplicand 0011          update_LCD_color@Circle_Y 0035  
                    ___ftadd@exp1 0039                      ___ftadd@exp2 0038  
                    ___ftadd@sign 0037                               l211 DB34  
                             l133 C7A8                               l143 C244  
                             l209 DC5A                               l218 DBB0  
                             l250 D128                               l403 CEC8  
                             l246 D12A                               l415 C30A  
                             l247 D096                               l424 C29C  
                             l193 CB42                               l505 D4B8  
                             l257 DEC8                               l249 D106  
                             l450 C5BA                               l418 C32A  
                             l187 C404                               l275 DA3C  
                             l291 CBCA                               l452 C5BE  
                             l620 FA54                               l453 C5C4  
                             l461 C602                               l470 C536  
                             l454 C5C8                               l462 C608  
                             l542 E598                               l374 C1DA  
                             l471 C53C                               l455 C5EA  
                             l463 C60C                               l391 CF4A  
                             l472 C540                               l480 C580  
                             l464 C62E                               l473 C562  
                             l481 C584                               l482 C5A6  
                             l650 FD30                               l459 C5FE  
                             l395 CF88                               l468 C532  
                             l477 C576                               l549 ECDA  
                             l389 CEFA                               l479 C57A  
                             l904 C4A2                               l680 C99A  
                             l489 E8FA                               l681 C99C  
                             l498 DE04                               l674 C974  
                             l683 C9B6                               l686 C352  
                             l678 C98E                               l679 C990  
                             l970 D7AC                               l892 CA38  
                             l879 CCEC                               l979 D79C  
   update_LCD_PED_Count@direction 003C                               _PR2 000FCB  
               _Deactivate_Buzzer C1C2                               _dir 0078  
                             _nbr 00AE                               _txt 006D  
                  drawFastHLine@w 0009                    drawFastHLine@x 0012  
                  drawFastHLine@y 0008                      ___awmod@sign 0006  
         __end_of_update_LCD_misc E356                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 000D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize C37E              PED_Control@Direction 0001  
                    ___ftdiv@cntr 0022                      ___ftdiv@sign 0027  
                    __CFG_WDT$OFF 000000                              l1011 D04E  
                            l1100 D8AC                              l1022 D026  
                            l1210 C80E                              l1051 DFF8  
                            l1115 D6A2                              l1052 E176  
                            l1132 C672                    drawFastVLine@h 0009  
                            l1109 CD82                              l1125 C2F8  
                            l1055 E022                              l1151 C2E0  
                            l1136 D3D0                              l1066 E0E4  
                            l1083 D2EA                              l1075 E100  
                            l1091 D8BC                              l1180 CC46  
                            l1093 D824                              l1086 D2B6  
                            l1190 C936                              l1094 D84C  
                            l4004 CD7E                              l4100 C7C4  
                  drawFastVLine@x 0012                    drawFastVLine@y 0008  
                            l1286 C4E0                              l4040 D374  
                            l4200 F468                              l4130 D1B2  
                            l4114 D154                              l4042 D37A  
                            l4050 D3A6                              l4018 D30A  
                            l5002 C3B8                              l4140 D1FC  
                            l3500 D040                              l4036 D364  
                            l4300 F81A                              l4220 F53A  
                            l4126 D198                              l4054 D3BE  
                            l4046 D38E                              l4310 F890  
                            l4230 F572                              l4214 F4EA  
                            l3520 C69A                              l4152 DA22  
                            l4048 D39C                              l4064 CBEE  
                            l4400 FBF6                              l4304 F880  
                            l4224 F548                              l4208 F4C8  
                            l5008 C3CA                              l3450 CACC  
                            l4138 D1F6                              l4066 CBFC  
                            l3610 D5F2                              l4410 FC3C  
                            l4322 F8F6                              l4314 F8C0  
                            l4306 F884                              l4218 F522  
                            l3508 C3E6                              l3516 C67E  
                            l4172 DAF0                              l4076 CC36  
                            l4068 CC04                              l4092 C926  
                            l4084 C8EA                              l3604 D5CA  
                            l4404 FC18                              l4332 F932  
                            l4236 F588                              l4228 F550  
                            l5140 CED4                              l3710 C9FC  
                            l3702 C9DC                              l3454 CB04  
                            l4502 C47E                              l3542 E030  
                            l4086 C8F8                              l3606 D5E4  
                            l4430 FCB6                              l4422 FC8C  
                            l4342 F962                              l4326 F912  
                            l4318 F8C4                              l4270 F6C0  
                            l4262 F65C                              l4246 F5CA  
                            l4190 F42A                              l3464 CB2A  
                            l4168 DA9E                              l3480 CFD6  
                            l3472 CF9A                              l3536 E006  
                            l4088 C900                              l3632 D64E  
                            l3624 D626                              l4432 FCBE  
                            l4424 FC96                              l4416 FC5E  
                            l4360 FA30                              l4344 F970  
                            l4336 F940                              l4280 F736  
                            l4184 F406                              l5216 CE84  
                            l3722 CA2E                              l3714 CA12  
                            l3706 C9EA                              l3466 CB38  
                            l3730 DB16                              l3570 E0A8  
                            l4098 C7B6                              l3642 D67C  
                            l3634 D654                              l4442 FCF6  
                            l4418 FC68                              l4362 FA3E  
                            l4338 F954                              l4354 FA16  
                            l4290 F792                              l4274 F6E6  
                            l4194 F434                              l3660 CC80  
                            l3708 C9F4                              l3740 DB38  
                            l3484 CFEE                              l3476 CFAA  
                            l4460 D250                              l3564 E088  
                            l3548 E03C                              l3900 D85A  
                            l3628 D638                              l3812 E558  
                            l3804 E494                              l4436 FCD6  
                            l4372 FA74                              l4356 FA22  
                            l4348 F98C                              l4292 F79C  
                            l4276 F6F6                              l4196 F44A  
                            l4188 F418                              l4620 E276  
                            l4612 E258                              l4604 E238  
                            l3670 CCA8                              l3654 CC6E  
                            l3718 CA1E                              l3750 DBA4  
                            l3734 DB22                              l3494 D02E  
                            l3486 D00E                              l3478 CFB6  
                            l4454 D228                              l3566 E094  
                            l3558 E064                              l3638 D666  
                            l4438 FCDE                              l4382 FB9A  
                            l4366 FA5A                              l4286 F76E  
                            l4278 F726                              l4390 FBC0  
                            l4446 FD12                              l4622 E27C  
                            l5166 CF36                              l5190 CE30  
                            l3760 DBD2                              l3752 DBA8  
                            l3744 DB40                              l3488 D01A  
                            l4480 D290                              l4456 D242  
                            l3584 E11E                              l3576 E0CC  
                            l3568 E0A0                              l3920 D8A6  
                            l3912 D87E                              l3832 EAD0  
                            l4384 FBA6                              l4376 FAC4  
                            l4296 F7DE                              l4616 E268  
                            l4608 E248                              l3666 CC96  
                            l3682 CCD2                              l3770 DC4E  
                            l3762 DBFA                              l3738 DB30  
                            l4538 DEAE                              l4490 D2C4  
                            l3594 E150                              l3578 E0D8  
                            l3914 D884                              l3850 ECB6  
                            l3826 EA28                              l4298 F80C  
                            l3668 CCA0                              l3748 DB70  
                            l4572 C440                              l3908 D86E  
                            l3844 EC04                              l3836 EAE0  
                            l4396 FBDA                              l4388 FBB4  
                            l4820 DD32                              l4812 DC7C  
                            l3686 CCE2                              l3678 CCC6  
                            l3782 C4AE                              l4566 DF9E  
                            l4574 C44A                              l3934 D6C4  
                            l3918 D898                              l3862 C2D8  
                            l4830 DDE8                              l4742 D0CE  
                            l4910 C96C                              l4902 C95A  
                            l3768 DC26                              l3776 DC56  
                            l3784 C4B4                              l4840 D3F2  
                            l3960 D74A                              l3928 D6B4  
                            l3872 D7CC                              l4592 E208  
                            l4824 DD8C                              l4816 DCD6  
                            l4736 D060                              l3698 C9CE  
                            l4850 D4A8                              l4594 E20E  
                            l4762 D114                              l4754 D0FC  
                            l4922 C986                              l4914 C978  
                            l4906 C964                              l4844 D44C  
                            l3980 D796                              l3972 D76E  
                            l3956 D73A                              l3948 D708  
                            l4780 CB8C                              l4862 E74E  
                            l3974 D774                              l3878 D7EA  
                            l4790 CBB2                              l4758 D10A  
                            l5486 CE1C                              l5478 CDA2  
                            l4960 C546                              l4952 C612  
                            l3968 D75E                              l4792 CBC0  
                            l4776 CB54                              l4768 D124  
                            l4866 E824                              l4858 E67A  
                            l3994 CD20                              l3986 C648  
                            l3978 D788                              l4980 C40A  
                            l3998 CD52                              l4992 C426  
                            l4984 C414                              l4968 C58A  
                            l4976 C5CE                              l4998 C3AE  
                            STR_1 FF99                              STR_2 FFE4  
                            STR_3 FFEA                              STR_4 FFEE  
                            STR_5 FFFC                              STR_6 FFCC  
                            STR_7 FFDD                              STR_8 FFC0  
                            STR_9 FFD6                              u3120 DC08  
                            u2500 CAFA                              u4050 FA4E  
                            u3500 D328                              u2631 DFC4  
                            u3271 D7BE                              u2641 DFD8  
                            u3505 D320                              u3291 D7DC  
                    printf@tmpval 0054                              u4261 D21A  
                            u3640 D17C                              u4281 D238  
                            u3481 D2FC                              u2841 D5BC  
                            u4530 CB82                              u4450 D08E  
                            u4460 D0C4                              u2861 D5DA  
                            u3830 F602                              _MODE 00AC  
                            u3835 F5F8                              _RBPU 007F8F  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0001  
                            _main CD84                              _font FD33  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                  ??_get_full_ADC 0003                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 007B  
                 drawFastHLine@hi 0010                   drawFastHLine@lo 0011  
        __end_of_update_LCD_color E8FC          __end_of_update_LCD_count DE06  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                 ??_drawFastHLine 000C                   ??_drawFastVLine 000C  
                    ___ftmul@cntr 0022                      ___param_bank 000010  
                    ___ftmul@sign 0023                      ___fttol@exp1 0039  
                    ___fttol@lval 0035                      _Act_Mode_Txt 009D  
                     ?_WAIT_1_SEC 0001         __end_of_Deactivate_Buzzer C1CA  
                 drawFastVLine@hi 0010                   drawFastVLine@lo 0011  
                     _SW_EWLT_Txt 007C                       _SW_MODE_Txt 00A3  
                           ?_main 0001                   __end_of___awdiv CCEE  
                 __end_of___ftadd E178                   drawCircle@ddF_x 0016  
                           STR_10 FFF6                   drawCircle@ddF_y 0018  
                           STR_11 FFF2                             STR_12 FF84  
                           STR_13 FFFC                             STR_14 FFFA  
                           STR_15 FFAD                   __end_of___awmod CA3A  
                 __end_of___ftdiv D2EC                   __end_of___ftneg C306  
                 __end_of___lldiv CC58                   __end_of___ftmul D6A4  
                           _T0CON 000FD5                   ___awdiv@divisor 0009  
                 __end_of___llmod C948                   __end_of___ftsub C674  
                 __end_of___fttol D3D2                             _T2CON 000FCA  
                           _T3CON 000FB1                       ?_WAIT_N_SEC 0001  
                 ___awdiv@counter 000B                   drawCircle@color 0012  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Count 006F                      ?_PED_Control 003D  
                           _Rcmd1 D8BE                             _Rcmd3 D4BA  
                    ___lltoft@exp 0011                       _SW_NSLT_Txt 00A5  
                   drawRect@color 001B                     ___awtoft@sign 0018  
                 __end_of_dpowers FF36                             _array 0080  
                           _font2 FE32             fillCircleHelper@ddF_x 0021  
           fillCircleHelper@ddF_y 0023                             _scale E8FC  
                 __end_of_isdigit C2E2                     ___ftpack@sign 0005  
           fillCircleHelper@delta 001B                             _putch C1D6  
           fillCircleHelper@color 001D                             _volts 00A9  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8            ??_update_LCD_PED_Count 003B  
                __end_of_Day_Mode CF8A                   write_data@data_ 0003  
                 __initialization C810             __end_of_WAIT_HALF_SEC C2A4  
                    __end_of_main CE26                      __end_of_font FE32  
                __end_of_Init_ADC C1F2                  __end_of_Rcmd2red C520  
                      _Night_Mode CE26                  __end_of_Set_EWLT C5A8  
                __end_of_Set_NSLT C630                            ??_main 006B  
                   ___fttol@sign1 0034                     __activetblptr 000002  
               __end_of_LCD_Reset C236                      _SW_EWPED_Txt 007E  
            __size_of__tdiv_to_l_ 0110         ??_TFT_GreenTab_Initialize 001B  
                ?_update_LCD_misc 0001                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 0001                            ?_scale 0024  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0007  
                __end_of___awtoft C4A4                            ?_putch 0001  
                __end_of___ftpack D050                  __end_of___lltoft C810  
                          _OSCCON 000FD3                __size_of_Init_TRIS 0016  
                          _SPBRGH 000FB0               __size_of_WAIT_1_SEC 0082  
                          _SSPBUF 000FC9                      _SW_NSPED_Txt 00A7  
                __end_of_delay_ms C7B0               __size_of_WAIT_N_SEC 002E  
                          _Set_EW C520                            _Set_NS C5A8  
                __end_of_fillRect C6BE                  __end_of_drawChar DC5C  
                __end_of__powers_ FF84                  __end_of_drawRect C8D8  
              __size_of_OpenUSART 0070                            ___ftge CCEE  
        __size_of_Activate_Buzzer 0012                            ___wmul C32C  
                       ??___awdiv 000B         __size_of_fillCircleHelper 0138  
                __end_of_drawtext D20A                         ??___ftadd 0034  
                       ??___awmod 0005                         ??___ftdiv 001F  
                       ??___ftneg 0004                         ??___lldiv 0009  
                       ??___ftmul 001B                         ??___llmod 0009  
                       ??___ftsub 0040                         ??___fttol 002F  
                          _buffer 00B0                            _fround E356  
                          clear_0 C816                            clear_1 C822  
                ___awdiv@quotient 000D                   ___awmod@divisor 0003  
      __size_of_Deactivate_Buzzer 0008                   ___awmod@counter 0005  
                          _printf F3FA                 WAIT_N_SEC@seconds 0069  
                    drawtext@size 0030                            _strcpy C436  
                          _strlen C4A4             ___ftmul@f3_as_product 001F  
            __end_of_get_full_ADC C32C                      __pdataCOMRAM 007B  
                       ??_isdigit 0001                       Set_EW@color 0036  
                    __mediumconst FD32                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0001                  __end_of_spiwrite C24A  
                     Set_NS@color 0036                        __accesstop 0080  
         __end_of__initialization C868                        ___ftadd@f1 002E  
                      ___ftadd@f2 0031                        ___ftge@ff1 0001  
                      ___ftge@ff2 0004                     ___rparam_used 000001  
                      ___ftdiv@f1 0019                        ___ftdiv@f2 001C  
                      ___ftdiv@f3 0023                        ___ftneg@f1 0001  
                      ___awtoft@c 0015                        ___ftmul@f1 0015  
                      ___ftmul@f2 0018                        ___ftsub@f1 003A  
                      ___ftsub@f2 003D                        ___fttol@f1 002B  
                   __end_of_Rcmd1 D9CE                     __end_of_Rcmd3 D5AC  
                  __pcstackCOMRAM 0001                      __pidataBANK0 C355  
                      ___lltoft@c 0009                     __end_of_font2 FF0E  
                   __end_of_scale ECDC                     __end_of_putch C1E4  
                     ?_Night_Mode 0001                 __end_of_Init_TRIS C28A  
                  drawPixel@color 0009            __size_of_write_command 0010  
                      __div_to_l_ D6A4                         ?_Day_Mode 0001  
      fillCircleHelper@cornername 0019                           ??_Rcmd1 001B  
                         ??_Rcmd3 001B                __size_of_drawPixel 0030  
               __end_of_OpenUSART C9B8                   __div_to_l_@exp1 000C  
                 __div_to_l_@cntr 000B                           ??_scale 0027  
            __size_of_PED_Control 0030                   __div_to_l_@quot 0007  
                         ??_putch 0001                        __pbssBANK0 00A9  
                       ?_Init_ADC 0001                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014        __end_of_Select_ADC_Channel C1D6  
                 spiwrite@spidata 0002                         ?_Set_EWLT 0001  
                   __div_to_l_@f1 0001                     __div_to_l_@f2 0004  
                       ?_Set_NSLT 0001                 ?_update_LCD_color 0033  
               ?_update_LCD_count 003A                           ?_Set_EW 0001  
                         ?_Set_NS 0001                __CFG_CCP2MX$PORTBE 000000  
              ??_update_LCD_color 0034                ??_update_LCD_count 003B  
                         ?___ftge 0001                           ?___wmul 000F  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
       update_LCD_PED_Count@count 003A                           ?_fround 0024  
                    ??_WAIT_1_SEC 0069                         ?___awtoft 0015  
                       ?___ftpack 0001                        _fillCircle C70C  
                         ?_printf 0040         Select_ADC_Channel@channel 0001  
                       ?___lltoft 0009                           ?_strcpy 0001  
                         ?_strlen 0001                      ??_WAIT_N_SEC 0069  
               ??_Activate_Buzzer 0001                        _fillScreen C2A4  
                      _drawCircle DE06                        ??_Day_Mode 006B  
                       ?_delay_ms 0015                         ?_fillRect 0013  
       update_LCD_count@direction 003C                         ?_drawChar 001E  
                         _SSPCON1 000FC6                         ?_drawRect 0013  
                         _SSPSTAT 000FC7             __end_of_fillRectangle D12C  
                       ?_drawtext 0029                           _SW_EWLT 0071  
                         _SW_MODE 0073                        ??_Init_ADC 0001  
                         _SW_NSLT 0074                        ??_Rcmd2red 0004  
             __size_of_Night_Mode 00A4                     _write_command C1F2  
              __end_of_WAIT_1_SEC CABC                        ??_Set_EWLT 0036  
                      ??_Set_NSLT 0036                       WAIT_N_SEC@i 006A  
               __end_of__npowers_ FF5D                           __Hparam 0000  
                      _scale$2385 0027                __end_of_WAIT_N_SEC C3D6  
                         __Lparam 0000                   __size_of_Set_EW 0044  
                 __size_of_Set_NS 0044             __end_of_drawFastHLine CBCC  
               __end_of_drawPixel C406             __end_of_drawFastVLine CB44  
                _fillCircleHelper D9CE                   __size_of___ftge 0096  
                         ___awdiv CC58                           ___ftadd DFB4  
                         ___awmod C9B8                           ___ftdiv D20A  
                         ___ftneg C2E2                           ___lldiv CBCC  
                 __size_of___wmul 0028                           ___ftmul D5AC  
                         ___llmod C8D8                           ___ftsub C630  
                         ___fttol D2EC             __size_of_get_full_ADC 0026  
                       ?_spiwrite 0001                           __pcinit C810  
                      ??___awtoft 0018                        ??___ftpack 0006  
                 __size_of_fround 0244                           __ramtop 1000  
                      ??___lltoft 000D                           __ptext0 CD84  
                         __ptext1 C24A                           __ptext2 C948  
                         __ptext3 C1CA                           __ptext4 CE26  
                         __ptext5 ECDC                           __ptext6 C2A4  
                         __ptext7 D050                           __ptext8 C872  
                         __ptext9 CB44                   __size_of_printf 0938  
               __end_of_init_UART C25E                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
                     ?__div_to_l_ 0001                           _dpowers FF0E  
                         _isdigit C2C0                         _T3CONbits 000FB1  
                ___awmod@dividend 0001                        ??_delay_ms 0017  
                   drawtext@_text 002A                     drawtext@color 002C  
                      ??_fillRect 0018                        ??_drawChar 0025  
                       _LCD_Reset C224                        ??_drawRect 001D  
                   _setAddrWindow C6BE                drawFastHLine@color 000A  
                      delay_ms@ms 0015              end_of_initialization C868  
                      ??_drawtext 0031                    ?_write_command 0001  
                   __Lmediumconst FD32                         _PED_Count 0070  
                    _get_full_ADC C306                   ___lldiv@divisor 0005  
                    PED_Control@i 003E     __size_of_update_LCD_PED_Count 00E8  
                 ___lldiv@counter 000D                         _RCSTAbits 000FAB  
                         printf@c 0063                           printf@f 0040  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
               _WAIT_1_SEC_W_BEEP C25E                    __tdiv_to_l_@f1 0001  
                  __tdiv_to_l_@f2 0004                        ??_spiwrite 0001  
                         strlen@s 0001                   fillCircle@color 0031  
              ?_WAIT_1_SEC_W_BEEP 0001                     ??__tdiv_to_l_ 0007  
                     ?_fillCircle 002B                         _PORTAbits 000F80  
                drawtext@cursor_x 0039                  drawtext@cursor_y 0038  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                     ?_fillScreen 0014                       ?_drawCircle 000C  
                      drawChar@bg 0022               ??_WAIT_1_SEC_W_BEEP 0001  
                       _TRISCbits 000F94                    ?_setAddrWindow 0004  
                      ?_LCD_Reset 0001                  drawtext@textsize 0033  
          __size_of_WAIT_HALF_SEC 001A          __size_of_update_LCD_misc 01DE  
                      drawPixel@x 000B                        drawPixel@y 0008  
                     ___ftdiv@exp 0026                       printf@width 005C  
                       _TXSTAbits 000FAC                PED_Control@Num_Sec 003D  
              get_full_ADC@result 0005               __size_of__div_to_l_ 010A  
       __end_of_WAIT_1_SEC_W_BEEP C274                       ___ftmul@exp 001E  
                  __end_of_Set_EW C564                    __end_of_Set_NS C5EC  
                  __end_of___ftge CD84                    __end_of___wmul C354  
                   delay_ms@count 0019                        _write_data C202  
                   __pidataCOMRAM C1BD                      ??_Night_Mode 006B  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 002E  
                  __end_of_fround E59A                    __end_of_printf FD32  
                  __end_of_strcpy C468                    __end_of_strlen C4E2  
             start_initialization C810                         _Init_TRIS C274  
             __end_of__tdiv_to_l_ D8BE                 __size_of_Day_Mode 00C0  
                 ??_write_command 0003                         _OpenUSART C948  
             __size_of_fillCircle 0052                   ___llmod@divisor 0005  
                __CFG_OSC$INTIO67 000000                 __size_of_Init_ADC 000E  
                 ___llmod@counter 0009                __end_of_Night_Mode CECA  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??_Set_EW 0036  
                        ??_Set_NS 0036                 __size_of_Set_EWLT 0044  
                 _Activate_Buzzer C212                 __size_of_Set_NSLT 0044  
                        ??___ftge 0007                          ??___wmul 0013  
                   _WAIT_HALF_SEC C28A                       __pdataBANK0 0080  
              _Select_ADC_Channel C1CA                          ??_fround 0027  
                 setAddrWindow@x0 0007                   setAddrWindow@x1 0005  
                 setAddrWindow@y0 0004                   setAddrWindow@y1 0006  
                        ??_printf 0045                          ??_strcpy 0005  
                        ??_strlen 0003                      _PED_EW_Count 0097  
       __size_of_update_LCD_color 0362         __size_of_update_LCD_count 01AA  
                      fround@prec 002D                 __size_of___awtoft 003C  
               __size_of___ftpack 00C6               ?_Select_ADC_Channel 0001  
               __size_of___lltoft 0060                       __pbssCOMRAM 006D  
                   ??_PED_Control 003E                   ??_setAddrWindow 0007  
                      ?_Init_TRIS 0001                      _PED_NS_Count 009A  
                     ??_LCD_Reset 001B                      _isdigit$2080 0002  
        __end_of_fillCircleHelper DB06                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0001                 __size_of_drawRect 0066  
               __size_of_drawtext 00DE              ??_Select_ADC_Channel 0001  
      __size_of_WAIT_1_SEC_W_BEEP 0016                 ??_update_LCD_misc 0064  
 __end_of_TFT_GreenTab_Initialize C3A8                    ?_WAIT_HALF_SEC 0001  
                   __pmediumconst FD32                          ?___awdiv 0007  
                        ?___ftadd 002E                          ?___awmod 0001  
                        ?___ftdiv 0019                          ?___ftneg 0001  
                        ?___lldiv 0001                          ?___ftmul 0015  
                        ?___llmod 0001                          ?___ftsub 003A  
                       __npowers_ FF36                          ?___fttol 002B  
                       __tft_type 0076                         _direction 0079  
              drawFastVLine@color 000A                       ?_write_data 0001  
                       _drawPixel C3D6                       __tdiv_to_l_ D7AE  
               __size_of_spiwrite 0014                      ??__div_to_l_ 0007  
                        ?_isdigit 0001                 _Initialize_Screen ECDC  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART C24A                ?_Initialize_Screen 0001  
                  __size_of_scale 03E0                    __size_of_putch 000E  
             __end_of_PED_Control C436           __end_of_Activate_Buzzer C224  
                  ___wmul@product 0013               ??_Initialize_Screen 003A  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
              __end_of__div_to_l_ D7AE                          _PIR2bits 000FA1  
                        _EW_Count 008E                         fillRect@h 0015  
                       fillRect@i 001C                         fillRect@w 0014  
                       fillRect@x 001B                         fillRect@y 0013  
                       drawChar@c 001F                         drawChar@i 0028  
                       drawChar@j 0027                      ??_fillCircle 0033  
                       drawChar@x 0026                         drawChar@y 001E  
                      ?_drawPixel 0008            __size_of_fillRectangle 00DC  
                        _NS_Count 0094                        _ADCON0bits 000FC2  
               ___wmul@multiplier 000F         __end_of_Initialize_Screen F3FA  
                    ??_fillScreen 0016                         drawRect@h 0019  
                       drawRect@w 0017                         drawRect@x 0013  
                       drawRect@y 0015                     _FlashingR_Txt 009F  
                   _FlashingS_Txt 00A1                      ??_drawCircle 0014  
                      printf@flag 005A      __end_of_update_LCD_PED_Count D4BA  
                      printf@fval 005E                         main@nStep 006B  
                        _SW_EWPED 0072                        printf@prec 0061  
           update_LCD_color@color 0033                          _Day_Mode CECA  
                        _SW_NSPED 0075         update_LCD_color@direction 0034  
                     ??_Init_TRIS 0001                        ?_init_UART 0001  
          __size_of_drawFastHLine 0088                         copy_data0 C83C  
                       copy_data1 C85C                         drawtext@i 0036  
          __size_of_drawFastVLine 0088                         drawtext@x 0035  
                       drawtext@y 0029                          _Init_ADC C1E4  
               write_command@cmd_ 0003                       ??_OpenUSART 0003  
                        _Rcmd2red C4E2               __size_of_write_data 0010  
                 OpenUSART@config 0003                          _Set_EWLT C564  
              __end_of_fillCircle C75E                          _Set_NSLT C5EC  
                        __Hrparam 0000                   ??_WAIT_HALF_SEC 0001  
              __end_of_fillScreen C2C0             update_LCD_count@count 003A  
                        __Lrparam 0000                __end_of_drawCircle DFB4  
                __size_of___awdiv 0096                  __size_of___ftadd 01C4  
                __size_of___awmod 0082                  __size_of___ftdiv 00E2  
                __size_of___ftneg 0024                  __size_of___lldiv 008C  
                __size_of___ftmul 00F8                  __size_of___llmod 0070  
                __size_of___ftsub 0044                  __size_of___fttol 00E6  
                        ___awtoft C468                          ___ftpack CF8A  
                     _fround$2383 002A                       _fround$2384 0027  
                        ___lltoft C7B0                  _update_LCD_color E59A  
                _update_LCD_count DC5C                  __size_of_isdigit 0022  
                     _PED_Control C406                          _delay_ms C75E  
                        __ptext10 C37E                          __ptext11 D4BA  
                        __ptext20 DC5C                          __ptext12 C4E2  
                        __ptext21 CA3A                          __ptext13 D8BE  
                        __ptext30 D6A4                          __ptext22 E178  
                        __ptext14 C224                          __ptext31 C7B0  
                        __ptext23 F3FA                          __ptext15 C75E  
                        __ptext40 D20A                          __ptext32 C8D8  
                        __ptext24 E8FC                          __ptext16 C274  
                        __ptext41 C468                          __ptext33 CBCC  
                        __ptext25 C1D6                          __ptext17 C1E4  
                        __ptext50 D9CE                          __ptext42 CF8A  
                        __ptext34 D2EC                          __ptext26 C2C0  
                        __ptext18 CECA                          __ptext51 DE06  
                        __ptext43 C436                          __ptext35 C630  
                        __ptext27 E356                          __ptext19 C3A8  
                        __ptext60 C6BE                          __ptext52 C406  
                        __ptext44 C5EC                          __ptext36 DFB4  
                        __ptext28 D5AC                          __ptext61 C202  
                        __ptext53 D3D2                          __ptext45 C5A8  
                        __ptext37 C2E2                          __ptext29 D7AE  
                        __ptext70 C212                          __ptext62 C1F2  
                        __ptext54 D12C                          __ptext46 C564  
                        __ptext38 CCEE                          __ptext63 C236  
                        __ptext55 C4A4                          __ptext47 C520  
                        __ptext39 C306                          __ptext64 C32C  
                        __ptext56 DB06                          __ptext48 E59A  
                        __ptext65 C9B8                          __ptext57 C674  
                        __ptext49 C70C                          __ptext66 CC58  
                        __ptext58 CABC                          __ptext67 C25E  
                        __ptext59 C3D6                          __ptext68 C28A  
                        __ptext69 C1C2                          _fillRect C674  
                        _drawChar DB06                          __powers_ FF5D  
                        _drawRect C872  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 0077                          _drawtext D12C  
                      strcpy@from 0003                     _fillRectangle D050  
                ?_Activate_Buzzer 0001                     __size_of_main 00A2  
                 fillRectangle@hi 0011                   fillRectangle@lo 0012  
                   _drawFastHLine CB44                     _drawFastVLine CABC  
                       printf@exp 0058                          _spiwrite C236  
                       printf@val 0050                       ??_drawPixel 000B  
                        _rowstart 007A                fillCircleHelper@x0 0013  
              fillCircleHelper@y0 0015        __size_of_Initialize_Screen 071E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0001  
                     ??_init_UART 0004                          isdigit@c 0003  
                   Set_EWLT@color 0036                          scale@scl 002A  
                      _EWLT_Count 008B                 ?_fillCircleHelper 0013  
                       spiwrite@x 0001                   _update_LCD_misc E178  
                  ?_fillRectangle 0008                  __tdiv_to_l_@exp1 000F  
                __tdiv_to_l_@cntr 000E                  __tdiv_to_l_@quot 000A  
              ??_fillCircleHelper 001F             __end_of_write_command C202  
                ___lldiv@dividend 0001                   fillScreen@color 0014  
            update_LCD_misc@nStep 0064              _update_LCD_PED_Count D3D2  
            update_LCD_misc@volts 0066                      fillCircle@x0 002B  
                    fillCircle@y0 002D                    ?_drawFastHLine 0008  
                  fillRectangle@h 000A                    fillRectangle@w 0009  
                  fillRectangle@x 0013                    fillRectangle@y 0008  
                  ?_drawFastVLine 0008                          printf@ap 004E  
               fillCircleHelper@f 0025                 fillCircleHelper@r 0017  
               fillCircleHelper@x 0027                 fillCircleHelper@y 0029  
                    ??_write_data 0003                        _WAIT_1_SEC CA3A  
                   fillRect@color 0016                      ?__tdiv_to_l_ 0001  
                     _printf$2386 004B                        _WAIT_N_SEC C3A8  
                ___lldiv@quotient 0009                          strcpy@cp 0005  
                        strlen@cp 0005                          strcpy@to 0001  
                   Set_NSLT@color 0036                        _NSLT_Count 0091  
                     fillCircle@r 002F             __end_of_setAddrWindow C70C  
              fillRectangle@color 000B                     drawChar@color 0020  
              __end_of_write_data C212                      drawChar@line 0025  
                   ?_get_full_ADC 0001                      drawChar@size 0024  
           ?_update_LCD_PED_Count 003A       __size_of_Select_ADC_Channel 000C  
