

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 01 14:19:40 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  00E99E                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _array
    52  00E99E  40                 	db	64
    53  00E99F  79                 	db	121
    54  00E9A0  24                 	db	36
    55  00E9A1  30                 	db	48
    56  00E9A2  19                 	db	25
    57  00E9A3  12                 	db	18
    58  00E9A4  02                 	db	2
    59  00E9A5  78                 	db	120
    60  00E9A6  00                 	db	0
    61  00E9A7  10                 	db	16
    62  00E9A8  FF                 	db	255
    63                           
    64                           ;initializer for _wrap
    65  00E9A9  01                 	db	1
    66                           
    67                           ;initializer for _EWLT_Count
    68  00E9AA  30                 	db	48
    69  00E9AB  30                 	db	48
    70  00E9AC  00                 	db	0
    71                           
    72                           ;initializer for _EW_Count
    73  00E9AD  30                 	db	48
    74  00E9AE  30                 	db	48
    75  00E9AF  00                 	db	0
    76                           
    77                           ;initializer for _NSLT_Count
    78  00E9B0  30                 	db	48
    79  00E9B1  30                 	db	48
    80  00E9B2  00                 	db	0
    81                           
    82                           ;initializer for _NS_Count
    83  00E9B3  30                 	db	48
    84  00E9B4  30                 	db	48
    85  00E9B5  00                 	db	0
    86                           
    87                           ;initializer for _PED_EW_Count
    88  00E9B6  30                 	db	48
    89  00E9B7  30                 	db	48
    90  00E9B8  00                 	db	0
    91                           
    92                           ;initializer for _PED_NS_Count
    93  00E9B9  30                 	db	48
    94  00E9BA  30                 	db	48
    95  00E9BB  00                 	db	0
    96                           
    97                           ;initializer for _Act_Mode_Txt
    98  00E9BC  44                 	db	68
    99  00E9BD  00                 	db	0
   100                           
   101                           ;initializer for _FlashingR_Txt
   102  00E9BE  30                 	db	48
   103  00E9BF  00                 	db	0
   104                           
   105                           ;initializer for _FlashingS_Txt
   106  00E9C0  30                 	db	48
   107  00E9C1  00                 	db	0
   108                           
   109                           ;initializer for _SW_EWLT_Txt
   110  00E9C2  30                 	db	48
   111  00E9C3  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWPED_Txt
   114  00E9C4  30                 	db	48
   115  00E9C5  00                 	db	0
   116                           
   117                           ;initializer for _SW_MODE_Txt
   118  00E9C6  44                 	db	68
   119  00E9C7  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  00E9C8  30                 	db	48
   123  00E9C9  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  00E9CA  30                 	db	48
   127  00E9CB  00                 	db	0
   128                           
   129                           	psect	mediumconst
   130  00FD24                     __pmediumconst:
   131                           	opt stack 0
   132  00FD24  00                 	db	0
   133  00FD25                     _font:
   134                           	opt stack 0
   135  00FD25  00                 	db	0
   136  00FD26  00                 	db	0
   137  00FD27  00                 	db	0
   138  00FD28  00                 	db	0
   139  00FD29  00                 	db	0
   140  00FD2A  00                 	db	0
   141  00FD2B  00                 	db	0
   142  00FD2C  5F                 	db	95
   143  00FD2D  00                 	db	0
   144  00FD2E  00                 	db	0
   145  00FD2F  00                 	db	0
   146  00FD30  07                 	db	7
   147  00FD31  00                 	db	0
   148  00FD32  07                 	db	7
   149  00FD33  00                 	db	0
   150  00FD34  14                 	db	20
   151  00FD35  7F                 	db	127
   152  00FD36  14                 	db	20
   153  00FD37  7F                 	db	127
   154  00FD38  14                 	db	20
   155  00FD39  24                 	db	36
   156  00FD3A  2A                 	db	42
   157  00FD3B  7F                 	db	127
   158  00FD3C  2A                 	db	42
   159  00FD3D  12                 	db	18
   160  00FD3E  23                 	db	35
   161  00FD3F  13                 	db	19
   162  00FD40  08                 	db	8
   163  00FD41  64                 	db	100
   164  00FD42  62                 	db	98
   165  00FD43  36                 	db	54
   166  00FD44  49                 	db	73
   167  00FD45  56                 	db	86
   168  00FD46  20                 	db	32
   169  00FD47  50                 	db	80
   170  00FD48  00                 	db	0
   171  00FD49  08                 	db	8
   172  00FD4A  07                 	db	7
   173  00FD4B  03                 	db	3
   174  00FD4C  00                 	db	0
   175  00FD4D  00                 	db	0
   176  00FD4E  1C                 	db	28
   177  00FD4F  22                 	db	34
   178  00FD50  41                 	db	65
   179  00FD51  00                 	db	0
   180  00FD52  00                 	db	0
   181  00FD53  41                 	db	65
   182  00FD54  22                 	db	34
   183  00FD55  1C                 	db	28
   184  00FD56  00                 	db	0
   185  00FD57  2A                 	db	42
   186  00FD58  1C                 	db	28
   187  00FD59  7F                 	db	127
   188  00FD5A  1C                 	db	28
   189  00FD5B  2A                 	db	42
   190  00FD5C  08                 	db	8
   191  00FD5D  08                 	db	8
   192  00FD5E  3E                 	db	62
   193  00FD5F  08                 	db	8
   194  00FD60  08                 	db	8
   195  00FD61  00                 	db	0
   196  00FD62  80                 	db	128
   197  00FD63  70                 	db	112
   198  00FD64  30                 	db	48
   199  00FD65  00                 	db	0
   200  00FD66  08                 	db	8
   201  00FD67  08                 	db	8
   202  00FD68  08                 	db	8
   203  00FD69  08                 	db	8
   204  00FD6A  08                 	db	8
   205  00FD6B  00                 	db	0
   206  00FD6C  00                 	db	0
   207  00FD6D  60                 	db	96
   208  00FD6E  60                 	db	96
   209  00FD6F  00                 	db	0
   210  00FD70  20                 	db	32
   211  00FD71  10                 	db	16
   212  00FD72  08                 	db	8
   213  00FD73  04                 	db	4
   214  00FD74  02                 	db	2
   215  00FD75  3E                 	db	62
   216  00FD76  51                 	db	81
   217  00FD77  49                 	db	73
   218  00FD78  45                 	db	69
   219  00FD79  3E                 	db	62
   220  00FD7A  00                 	db	0
   221  00FD7B  42                 	db	66
   222  00FD7C  7F                 	db	127
   223  00FD7D  40                 	db	64
   224  00FD7E  00                 	db	0
   225  00FD7F  72                 	db	114
   226  00FD80  49                 	db	73
   227  00FD81  49                 	db	73
   228  00FD82  49                 	db	73
   229  00FD83  46                 	db	70
   230  00FD84  21                 	db	33
   231  00FD85  41                 	db	65
   232  00FD86  49                 	db	73
   233  00FD87  4D                 	db	77
   234  00FD88  33                 	db	51
   235  00FD89  18                 	db	24
   236  00FD8A  14                 	db	20
   237  00FD8B  12                 	db	18
   238  00FD8C  7F                 	db	127
   239  00FD8D  10                 	db	16
   240  00FD8E  27                 	db	39
   241  00FD8F  45                 	db	69
   242  00FD90  45                 	db	69
   243  00FD91  45                 	db	69
   244  00FD92  39                 	db	57
   245  00FD93  3C                 	db	60
   246  00FD94  4A                 	db	74
   247  00FD95  49                 	db	73
   248  00FD96  49                 	db	73
   249  00FD97  31                 	db	49
   250  00FD98  41                 	db	65
   251  00FD99  21                 	db	33
   252  00FD9A  11                 	db	17
   253  00FD9B  09                 	db	9
   254  00FD9C  07                 	db	7
   255  00FD9D  36                 	db	54
   256  00FD9E  49                 	db	73
   257  00FD9F  49                 	db	73
   258  00FDA0  49                 	db	73
   259  00FDA1  36                 	db	54
   260  00FDA2  46                 	db	70
   261  00FDA3  49                 	db	73
   262  00FDA4  49                 	db	73
   263  00FDA5  29                 	db	41
   264  00FDA6  1E                 	db	30
   265  00FDA7  00                 	db	0
   266  00FDA8  00                 	db	0
   267  00FDA9  14                 	db	20
   268  00FDAA  00                 	db	0
   269  00FDAB  00                 	db	0
   270  00FDAC  00                 	db	0
   271  00FDAD  40                 	db	64
   272  00FDAE  34                 	db	52
   273  00FDAF  00                 	db	0
   274  00FDB0  00                 	db	0
   275  00FDB1  00                 	db	0
   276  00FDB2  08                 	db	8
   277  00FDB3  14                 	db	20
   278  00FDB4  22                 	db	34
   279  00FDB5  41                 	db	65
   280  00FDB6  14                 	db	20
   281  00FDB7  14                 	db	20
   282  00FDB8  14                 	db	20
   283  00FDB9  14                 	db	20
   284  00FDBA  14                 	db	20
   285  00FDBB  00                 	db	0
   286  00FDBC  41                 	db	65
   287  00FDBD  22                 	db	34
   288  00FDBE  14                 	db	20
   289  00FDBF  08                 	db	8
   290  00FDC0  02                 	db	2
   291  00FDC1  01                 	db	1
   292  00FDC2  59                 	db	89
   293  00FDC3  09                 	db	9
   294  00FDC4  06                 	db	6
   295  00FDC5  3E                 	db	62
   296  00FDC6  41                 	db	65
   297  00FDC7  5D                 	db	93
   298  00FDC8  59                 	db	89
   299  00FDC9  4E                 	db	78
   300  00FDCA  7C                 	db	124
   301  00FDCB  12                 	db	18
   302  00FDCC  11                 	db	17
   303  00FDCD  12                 	db	18
   304  00FDCE  7C                 	db	124
   305  00FDCF  7F                 	db	127
   306  00FDD0  49                 	db	73
   307  00FDD1  49                 	db	73
   308  00FDD2  49                 	db	73
   309  00FDD3  36                 	db	54
   310  00FDD4  3E                 	db	62
   311  00FDD5  41                 	db	65
   312  00FDD6  41                 	db	65
   313  00FDD7  41                 	db	65
   314  00FDD8  22                 	db	34
   315  00FDD9  7F                 	db	127
   316  00FDDA  41                 	db	65
   317  00FDDB  41                 	db	65
   318  00FDDC  41                 	db	65
   319  00FDDD  3E                 	db	62
   320  00FDDE  7F                 	db	127
   321  00FDDF  49                 	db	73
   322  00FDE0  49                 	db	73
   323  00FDE1  49                 	db	73
   324  00FDE2  41                 	db	65
   325  00FDE3  7F                 	db	127
   326  00FDE4  09                 	db	9
   327  00FDE5  09                 	db	9
   328  00FDE6  09                 	db	9
   329  00FDE7  01                 	db	1
   330  00FDE8  3E                 	db	62
   331  00FDE9  41                 	db	65
   332  00FDEA  41                 	db	65
   333  00FDEB  51                 	db	81
   334  00FDEC  73                 	db	115
   335  00FDED  7F                 	db	127
   336  00FDEE  08                 	db	8
   337  00FDEF  08                 	db	8
   338  00FDF0  08                 	db	8
   339  00FDF1  7F                 	db	127
   340  00FDF2  00                 	db	0
   341  00FDF3  41                 	db	65
   342  00FDF4  7F                 	db	127
   343  00FDF5  41                 	db	65
   344  00FDF6  00                 	db	0
   345  00FDF7  20                 	db	32
   346  00FDF8  40                 	db	64
   347  00FDF9  41                 	db	65
   348  00FDFA  3F                 	db	63
   349  00FDFB  01                 	db	1
   350  00FDFC  7F                 	db	127
   351  00FDFD  08                 	db	8
   352  00FDFE  14                 	db	20
   353  00FDFF  22                 	db	34
   354  00FE00  41                 	db	65
   355  00FE01  7F                 	db	127
   356  00FE02  40                 	db	64
   357  00FE03  40                 	db	64
   358  00FE04  40                 	db	64
   359  00FE05  40                 	db	64
   360  00FE06  7F                 	db	127
   361  00FE07  02                 	db	2
   362  00FE08  1C                 	db	28
   363  00FE09  02                 	db	2
   364  00FE0A  7F                 	db	127
   365  00FE0B  7F                 	db	127
   366  00FE0C  04                 	db	4
   367  00FE0D  08                 	db	8
   368  00FE0E  10                 	db	16
   369  00FE0F  7F                 	db	127
   370  00FE10  3E                 	db	62
   371  00FE11  41                 	db	65
   372  00FE12  41                 	db	65
   373  00FE13  41                 	db	65
   374  00FE14  3E                 	db	62
   375  00FE15  7F                 	db	127
   376  00FE16  09                 	db	9
   377  00FE17  09                 	db	9
   378  00FE18  09                 	db	9
   379  00FE19  06                 	db	6
   380  00FE1A  3E                 	db	62
   381  00FE1B  41                 	db	65
   382  00FE1C  51                 	db	81
   383  00FE1D  21                 	db	33
   384  00FE1E  5E                 	db	94
   385  00FE1F  7F                 	db	127
   386  00FE20  09                 	db	9
   387  00FE21  19                 	db	25
   388  00FE22  29                 	db	41
   389  00FE23  46                 	db	70
   390  00FE24                     __end_of_font:
   391                           	opt stack 0
   392  00FE24                     _font2:
   393                           	opt stack 0
   394  00FE24  26                 	db	38
   395  00FE25  49                 	db	73
   396  00FE26  49                 	db	73
   397  00FE27  49                 	db	73
   398  00FE28  32                 	db	50
   399  00FE29  03                 	db	3
   400  00FE2A  01                 	db	1
   401  00FE2B  7F                 	db	127
   402  00FE2C  01                 	db	1
   403  00FE2D  03                 	db	3
   404  00FE2E  3F                 	db	63
   405  00FE2F  40                 	db	64
   406  00FE30  40                 	db	64
   407  00FE31  40                 	db	64
   408  00FE32  3F                 	db	63
   409  00FE33  1F                 	db	31
   410  00FE34  20                 	db	32
   411  00FE35  40                 	db	64
   412  00FE36  20                 	db	32
   413  00FE37  1F                 	db	31
   414  00FE38  3F                 	db	63
   415  00FE39  40                 	db	64
   416  00FE3A  38                 	db	56
   417  00FE3B  40                 	db	64
   418  00FE3C  3F                 	db	63
   419  00FE3D  63                 	db	99
   420  00FE3E  14                 	db	20
   421  00FE3F  08                 	db	8
   422  00FE40  14                 	db	20
   423  00FE41  63                 	db	99
   424  00FE42  03                 	db	3
   425  00FE43  04                 	db	4
   426  00FE44  78                 	db	120
   427  00FE45  04                 	db	4
   428  00FE46  03                 	db	3
   429  00FE47  61                 	db	97
   430  00FE48  59                 	db	89
   431  00FE49  49                 	db	73
   432  00FE4A  4D                 	db	77
   433  00FE4B  43                 	db	67
   434  00FE4C  00                 	db	0
   435  00FE4D  7F                 	db	127
   436  00FE4E  41                 	db	65
   437  00FE4F  41                 	db	65
   438  00FE50  41                 	db	65
   439  00FE51  02                 	db	2
   440  00FE52  04                 	db	4
   441  00FE53  08                 	db	8
   442  00FE54  10                 	db	16
   443  00FE55  20                 	db	32
   444  00FE56  00                 	db	0
   445  00FE57  41                 	db	65
   446  00FE58  41                 	db	65
   447  00FE59  41                 	db	65
   448  00FE5A  7F                 	db	127
   449  00FE5B  04                 	db	4
   450  00FE5C  02                 	db	2
   451  00FE5D  01                 	db	1
   452  00FE5E  02                 	db	2
   453  00FE5F  04                 	db	4
   454  00FE60  40                 	db	64
   455  00FE61  40                 	db	64
   456  00FE62  40                 	db	64
   457  00FE63  40                 	db	64
   458  00FE64  40                 	db	64
   459  00FE65  00                 	db	0
   460  00FE66  03                 	db	3
   461  00FE67  07                 	db	7
   462  00FE68  08                 	db	8
   463  00FE69  00                 	db	0
   464  00FE6A  20                 	db	32
   465  00FE6B  54                 	db	84
   466  00FE6C  54                 	db	84
   467  00FE6D  78                 	db	120
   468  00FE6E  40                 	db	64
   469  00FE6F  7F                 	db	127
   470  00FE70  28                 	db	40
   471  00FE71  44                 	db	68
   472  00FE72  44                 	db	68
   473  00FE73  38                 	db	56
   474  00FE74  38                 	db	56
   475  00FE75  44                 	db	68
   476  00FE76  44                 	db	68
   477  00FE77  44                 	db	68
   478  00FE78  28                 	db	40
   479  00FE79  38                 	db	56
   480  00FE7A  44                 	db	68
   481  00FE7B  44                 	db	68
   482  00FE7C  28                 	db	40
   483  00FE7D  7F                 	db	127
   484  00FE7E  38                 	db	56
   485  00FE7F  54                 	db	84
   486  00FE80  54                 	db	84
   487  00FE81  54                 	db	84
   488  00FE82  18                 	db	24
   489  00FE83  00                 	db	0
   490  00FE84  08                 	db	8
   491  00FE85  7E                 	db	126
   492  00FE86  09                 	db	9
   493  00FE87  02                 	db	2
   494  00FE88  18                 	db	24
   495  00FE89  A4                 	db	164
   496  00FE8A  A4                 	db	164
   497  00FE8B  9C                 	db	156
   498  00FE8C  78                 	db	120
   499  00FE8D  7F                 	db	127
   500  00FE8E  08                 	db	8
   501  00FE8F  04                 	db	4
   502  00FE90  04                 	db	4
   503  00FE91  78                 	db	120
   504  00FE92  00                 	db	0
   505  00FE93  44                 	db	68
   506  00FE94  7D                 	db	125
   507  00FE95  40                 	db	64
   508  00FE96  00                 	db	0
   509  00FE97  20                 	db	32
   510  00FE98  40                 	db	64
   511  00FE99  40                 	db	64
   512  00FE9A  3D                 	db	61
   513  00FE9B  00                 	db	0
   514  00FE9C  7F                 	db	127
   515  00FE9D  10                 	db	16
   516  00FE9E  28                 	db	40
   517  00FE9F  44                 	db	68
   518  00FEA0  00                 	db	0
   519  00FEA1  00                 	db	0
   520  00FEA2  41                 	db	65
   521  00FEA3  7F                 	db	127
   522  00FEA4  40                 	db	64
   523  00FEA5  00                 	db	0
   524  00FEA6  7C                 	db	124
   525  00FEA7  04                 	db	4
   526  00FEA8  78                 	db	120
   527  00FEA9  04                 	db	4
   528  00FEAA  78                 	db	120
   529  00FEAB  7C                 	db	124
   530  00FEAC  08                 	db	8
   531  00FEAD  04                 	db	4
   532  00FEAE  04                 	db	4
   533  00FEAF  78                 	db	120
   534  00FEB0  38                 	db	56
   535  00FEB1  44                 	db	68
   536  00FEB2  44                 	db	68
   537  00FEB3  44                 	db	68
   538  00FEB4  38                 	db	56
   539  00FEB5  FC                 	db	252
   540  00FEB6  18                 	db	24
   541  00FEB7  24                 	db	36
   542  00FEB8  24                 	db	36
   543  00FEB9  18                 	db	24
   544  00FEBA  18                 	db	24
   545  00FEBB  24                 	db	36
   546  00FEBC  24                 	db	36
   547  00FEBD  18                 	db	24
   548  00FEBE  FC                 	db	252
   549  00FEBF  7C                 	db	124
   550  00FEC0  08                 	db	8
   551  00FEC1  04                 	db	4
   552  00FEC2  04                 	db	4
   553  00FEC3  08                 	db	8
   554  00FEC4  48                 	db	72
   555  00FEC5  54                 	db	84
   556  00FEC6  54                 	db	84
   557  00FEC7  54                 	db	84
   558  00FEC8  24                 	db	36
   559  00FEC9  04                 	db	4
   560  00FECA  04                 	db	4
   561  00FECB  3F                 	db	63
   562  00FECC  44                 	db	68
   563  00FECD  24                 	db	36
   564  00FECE  3C                 	db	60
   565  00FECF  40                 	db	64
   566  00FED0  40                 	db	64
   567  00FED1  20                 	db	32
   568  00FED2  7C                 	db	124
   569  00FED3  1C                 	db	28
   570  00FED4  20                 	db	32
   571  00FED5  40                 	db	64
   572  00FED6  20                 	db	32
   573  00FED7  1C                 	db	28
   574  00FED8  3C                 	db	60
   575  00FED9  40                 	db	64
   576  00FEDA  30                 	db	48
   577  00FEDB  40                 	db	64
   578  00FEDC  3C                 	db	60
   579  00FEDD  44                 	db	68
   580  00FEDE  28                 	db	40
   581  00FEDF  10                 	db	16
   582  00FEE0  28                 	db	40
   583  00FEE1  44                 	db	68
   584  00FEE2  4C                 	db	76
   585  00FEE3  90                 	db	144
   586  00FEE4  90                 	db	144
   587  00FEE5  90                 	db	144
   588  00FEE6  7C                 	db	124
   589  00FEE7  44                 	db	68
   590  00FEE8  64                 	db	100
   591  00FEE9  54                 	db	84
   592  00FEEA  4C                 	db	76
   593  00FEEB  44                 	db	68
   594  00FEEC  00                 	db	0
   595  00FEED  08                 	db	8
   596  00FEEE  36                 	db	54
   597  00FEEF  41                 	db	65
   598  00FEF0  00                 	db	0
   599  00FEF1  00                 	db	0
   600  00FEF2  00                 	db	0
   601  00FEF3  77                 	db	119
   602  00FEF4  00                 	db	0
   603  00FEF5  00                 	db	0
   604  00FEF6  00                 	db	0
   605  00FEF7  41                 	db	65
   606  00FEF8  36                 	db	54
   607  00FEF9  08                 	db	8
   608  00FEFA  00                 	db	0
   609  00FEFB  02                 	db	2
   610  00FEFC  01                 	db	1
   611  00FEFD  02                 	db	2
   612  00FEFE  04                 	db	4
   613  00FEFF  02                 	db	2
   614  00FF00                     __end_of_font2:
   615                           	opt stack 0
   616  00FF00  0001               	dw	1
   617  00FF02  0000               	dw	0
   618  00FF04  000A               	dw	10
   619  00FF06  0000               	dw	0
   620  00FF08  0064               	dw	100
   621  00FF0A  0000               	dw	0
   622  00FF0C  03E8               	dw	1000
   623  00FF0E  0000               	dw	0
   624  00FF10  2710               	dw	10000
   625  00FF12  0000               	dw	0
   626  00FF14  86A0               	dw	34464
   627  00FF16  0001               	dw	1
   628  00FF18  4240               	dw	16960
   629  00FF1A  000F               	dw	15
   630  00FF1C  9680               	dw	38528
   631  00FF1E  0098               	dw	152
   632  00FF20  E100               	dw	57600
   633  00FF22  05F5               	dw	1525
   634  00FF24  CA00               	dw	51712
   635  00FF26  3B9A               	dw	15258
   636  00FF28                     __end_of_dpowers:
   637                           	opt stack 0
   638  00FF28  00                 	db	0
   639  00FF29  80                 	db	128
   640  00FF2A  3F                 	db	63
   641  00FF2B  CD                 	db	205
   642  00FF2C  CC                 	db	204
   643  00FF2D  3D                 	db	61
   644  00FF2E  D7                 	db	215
   645  00FF2F  23                 	db	35
   646  00FF30  3C                 	db	60
   647  00FF31  12                 	db	18
   648  00FF32  83                 	db	131
   649  00FF33  3A                 	db	58
   650  00FF34  B7                 	db	183
   651  00FF35  D1                 	db	209
   652  00FF36  38                 	db	56
   653  00FF37  C6                 	db	198
   654  00FF38  27                 	db	39
   655  00FF39  37                 	db	55
   656  00FF3A  38                 	db	56
   657  00FF3B  86                 	db	134
   658  00FF3C  35                 	db	53
   659  00FF3D  C0                 	db	192
   660  00FF3E  D6                 	db	214
   661  00FF3F  33                 	db	51
   662  00FF40  CC                 	db	204
   663  00FF41  2B                 	db	43
   664  00FF42  32                 	db	50
   665  00FF43  70                 	db	112
   666  00FF44  89                 	db	137
   667  00FF45  30                 	db	48
   668  00FF46  E7                 	db	231
   669  00FF47  DB                 	db	219
   670  00FF48  2E                 	db	46
   671  00FF49  E5                 	db	229
   672  00FF4A  3C                 	db	60
   673  00FF4B  1E                 	db	30
   674  00FF4C  42                 	db	66
   675  00FF4D  A2                 	db	162
   676  00FF4E  0D                 	db	13
   677  00FF4F                     __end_of__npowers_:
   678                           	opt stack 0
   679  00FF4F  00                 	db	0
   680  00FF50  80                 	db	128
   681  00FF51  3F                 	db	63
   682  00FF52  00                 	db	0
   683  00FF53  20                 	db	32
   684  00FF54  41                 	db	65
   685  00FF55  00                 	db	0
   686  00FF56  C8                 	db	200
   687  00FF57  42                 	db	66
   688  00FF58  00                 	db	0
   689  00FF59  7A                 	db	122
   690  00FF5A  44                 	db	68
   691  00FF5B  40                 	db	64
   692  00FF5C  1C                 	db	28
   693  00FF5D  46                 	db	70
   694  00FF5E  50                 	db	80
   695  00FF5F  C3                 	db	195
   696  00FF60  47                 	db	71
   697  00FF61  24                 	db	36
   698  00FF62  74                 	db	116
   699  00FF63  49                 	db	73
   700  00FF64  97                 	db	151
   701  00FF65  18                 	db	24
   702  00FF66  4B                 	db	75
   703  00FF67  BC                 	db	188
   704  00FF68  BE                 	db	190
   705  00FF69  4C                 	db	76
   706  00FF6A  6B                 	db	107
   707  00FF6B  6E                 	db	110
   708  00FF6C  4E                 	db	78
   709  00FF6D  03                 	db	3
   710  00FF6E  15                 	db	21
   711  00FF6F  50                 	db	80
   712  00FF70  79                 	db	121
   713  00FF71  AD                 	db	173
   714  00FF72  60                 	db	96
   715  00FF73  F3                 	db	243
   716  00FF74  49                 	db	73
   717  00FF75  71                 	db	113
   718  00FF76                     __end_of__powers_:
   719                           	opt stack 0
   720  0000                     _ADCON0	set	4034
   721  0000                     _ADCON0bits	set	4034
   722  0000                     _ADCON1	set	4033
   723  0000                     _ADCON2	set	4032
   724  0000                     _ADRESH	set	4036
   725  0000                     _ADRESL	set	4035
   726  0000                     _CCP2CON	set	4026
   727  0000                     _CCPR2L	set	4027
   728  0000                     _INTCONbits	set	4082
   729  0000                     _OSCCON	set	4051
   730  0000                     _PIE1bits	set	3997
   731  0000                     _PIR1bits	set	3998
   732  0000                     _PIR2bits	set	4001
   733  0000                     _PORTAbits	set	3968
   734  0000                     _PORTBbits	set	3969
   735  0000                     _PORTCbits	set	3970
   736  0000                     _PORTD	set	3971
   737  0000                     _PORTDbits	set	3971
   738  0000                     _PORTEbits	set	3972
   739  0000                     _PR2	set	4043
   740  0000                     _RCSTA	set	4011
   741  0000                     _RCSTAbits	set	4011
   742  0000                     _SPBRG	set	4015
   743  0000                     _SPBRGH	set	4016
   744  0000                     _SSPBUF	set	4041
   745  0000                     _SSPCON1	set	4038
   746  0000                     _SSPSTAT	set	4039
   747  0000                     _SSPSTATbits	set	4039
   748  0000                     _T0CON	set	4053
   749  0000                     _T0CONbits	set	4053
   750  0000                     _T2CON	set	4042
   751  0000                     _T3CON	set	4017
   752  0000                     _T3CONbits	set	4017
   753  0000                     _TMR0H	set	4055
   754  0000                     _TMR0L	set	4054
   755  0000                     _TRISA	set	3986
   756  0000                     _TRISB	set	3987
   757  0000                     _TRISC	set	3988
   758  0000                     _TRISCbits	set	3988
   759  0000                     _TRISD	set	3989
   760  0000                     _TRISE	set	3990
   761  0000                     _TXREG	set	4013
   762  0000                     _TXSTA	set	4012
   763  0000                     _TXSTAbits	set	4012
   764  0000                     _RBPU	set	32655
   765  0000                     _TRMT	set	32097
   766  00FF76                     STR_12:
   767  00FF76  45                 	db	69	;'E'
   768  00FF77  57                 	db	87	;'W'
   769  00FF78  50                 	db	80	;'P'
   770  00FF79  20                 	db	32
   771  00FF7A  45                 	db	69	;'E'
   772  00FF7B  57                 	db	87	;'W'
   773  00FF7C  4C                 	db	76	;'L'
   774  00FF7D  54                 	db	84	;'T'
   775  00FF7E  20                 	db	32
   776  00FF7F  4E                 	db	78	;'N'
   777  00FF80  53                 	db	83	;'S'
   778  00FF81  50                 	db	80	;'P'
   779  00FF82  20                 	db	32
   780  00FF83  4E                 	db	78	;'N'
   781  00FF84  53                 	db	83	;'S'
   782  00FF85  4C                 	db	76	;'L'
   783  00FF86  54                 	db	84	;'T'
   784  00FF87  20                 	db	32
   785  00FF88  4D                 	db	77	;'M'
   786  00FF89  44                 	db	68	;'D'
   787  00FF8A  00                 	db	0
   788  00FF8B                     STR_1:
   789  00FF8B  45                 	db	69	;'E'
   790  00FF8C  43                 	db	67	;'C'
   791  00FF8D  45                 	db	69	;'E'
   792  00FF8E  33                 	db	51	;'3'
   793  00FF8F  33                 	db	51	;'3'
   794  00FF90  30                 	db	48	;'0'
   795  00FF91  31                 	db	49	;'1'
   796  00FF92  4C                 	db	76	;'L'
   797  00FF93  20                 	db	32
   798  00FF94  46                 	db	70	;'F'
   799  00FF95  61                 	db	97	;'a'
   800  00FF96  6C                 	db	108	;'l'
   801  00FF97  6C                 	db	108	;'l'
   802  00FF98  20                 	db	32
   803  00FF99  32                 	db	50	;'2'
   804  00FF9A  32                 	db	50	;'2'
   805  00FF9B  2D                 	db	45
   806  00FF9C  53                 	db	83	;'S'
   807  00FF9D  34                 	db	52	;'4'
   808  00FF9E  00                 	db	0
   809  00FF9F  76                 	db	118	;'v'
   810  00FFA0  6F                 	db	111	;'o'
   811  00FFA1  6C                 	db	108	;'l'
   812  00FFA2  74                 	db	116	;'t'
   813  00FFA3  73                 	db	115	;'s'
   814  00FFA4  20                 	db	32
   815  00FFA5  61                 	db	97	;'a'
   816  00FFA6  72                 	db	114	;'r'
   817  00FFA7  65                 	db	101	;'e'
   818  00FFA8  20                 	db	32
   819  00FFA9  25                 	db	37
   820  00FFAA  30                 	db	48	;'0'
   821  00FFAB  2E                 	db	46
   822  00FFAC  33                 	db	51	;'3'
   823  00FFAD  66                 	db	102	;'f'
   824  00FFAE  0D                 	db	13
   825  00FFAF  0A                 	db	10
   826  00FFB0  0A                 	db	10
   827  00FFB1  00                 	db	0
   828  00FFB2  73                 	db	115	;'s'
   829  00FFB3  74                 	db	116	;'t'
   830  00FFB4  65                 	db	101	;'e'
   831  00FFB5  70                 	db	112	;'p'
   832  00FFB6  73                 	db	115	;'s'
   833  00FFB7  20                 	db	32
   834  00FFB8  61                 	db	97	;'a'
   835  00FFB9  72                 	db	114	;'r'
   836  00FFBA  65                 	db	101	;'e'
   837  00FFBB  20                 	db	32
   838  00FFBC  25                 	db	37
   839  00FFBD  64                 	db	100	;'d'
   840  00FFBE  0D                 	db	13
   841  00FFBF  0A                 	db	10
   842  00FFC0  0A                 	db	10
   843  00FFC1  00                 	db	0
   844  00FFC2                     STR_8:
   845  00FFC2  4E                 	db	78	;'N'
   846  00FFC3  4F                 	db	79	;'O'
   847  00FFC4  52                 	db	82	;'R'
   848  00FFC5  54                 	db	84	;'T'
   849  00FFC6  48                 	db	72	;'H'
   850  00FFC7  2F                 	db	47
   851  00FFC8  53                 	db	83	;'S'
   852  00FFC9  4F                 	db	79	;'O'
   853  00FFCA  55                 	db	85	;'U'
   854  00FFCB  54                 	db	84	;'T'
   855  00FFCC  48                 	db	72	;'H'
   856  00FFCD  00                 	db	0
   857  00FFCE                     STR_6:
   858  00FFCE  45                 	db	69	;'E'
   859  00FFCF  41                 	db	65	;'A'
   860  00FFD0  53                 	db	83	;'S'
   861  00FFD1  54                 	db	84	;'T'
   862  00FFD2  2F                 	db	47
   863  00FFD3  57                 	db	87	;'W'
   864  00FFD4  45                 	db	69	;'E'
   865  00FFD5  53                 	db	83	;'S'
   866  00FFD6  54                 	db	84	;'T'
   867  00FFD7  00                 	db	0
   868  00FFD8                     STR_9:
   869  00FFD8  4E                 	db	78	;'N'
   870  00FFD9  2F                 	db	47
   871  00FFDA  53                 	db	83	;'S'
   872  00FFDB  20                 	db	32
   873  00FFDC  4C                 	db	76	;'L'
   874  00FFDD  54                 	db	84	;'T'
   875  00FFDE  00                 	db	0
   876  00FFDF                     STR_7:
   877  00FFDF  45                 	db	69	;'E'
   878  00FFE0  2F                 	db	47
   879  00FFE1  57                 	db	87	;'W'
   880  00FFE2  20                 	db	32
   881  00FFE3  4C                 	db	76	;'L'
   882  00FFE4  54                 	db	84	;'T'
   883  00FFE5  00                 	db	0
   884  00FFE6                     STR_2:
   885  00FFE6  4D                 	db	77	;'M'
   886  00FFE7  6F                 	db	111	;'o'
   887  00FFE8  64                 	db	100	;'d'
   888  00FFE9  65                 	db	101	;'e'
   889  00FFEA  3A                 	db	58	;':'
   890  00FFEB  00                 	db	0
   891  00FFEC                     STR_3:
   892  00FFEC  46                 	db	70	;'F'
   893  00FFED  52                 	db	82	;'R'
   894  00FFEE  3A                 	db	58	;':'
   895  00FFEF  00                 	db	0
   896  00FFF0                     STR_4:
   897  00FFF0  46                 	db	70	;'F'
   898  00FFF1  53                 	db	83	;'S'
   899  00FFF2  3A                 	db	58	;':'
   900  00FFF3  00                 	db	0
   901  00FFF4                     STR_11:
   902  00FFF4  50                 	db	80	;'P'
   903  00FFF5  4E                 	db	78	;'N'
   904  00FFF6  53                 	db	83	;'S'
   905  00FFF7  00                 	db	0
   906  00FFF8                     STR_10:
   907  00FFF8  50                 	db	80	;'P'
   908  00FFF9  45                 	db	69	;'E'
   909  00FFFA  57                 	db	87	;'W'
   910  00FFFB  00                 	db	0
   911  00FFFC                     STR_5:
   912  00FFFC  2A                 	db	42
   913  00FFFD  00                 	db	0
   914                           
   915                           ; #config settings
   916  00FFFE  00                 	db	0	; dummy byte at the end
   917  0000                     
   918                           	psect	cinit
   919  00EAAA                     __pcinit:
   920                           	opt stack 0
   921  00EAAA                     start_initialization:
   922                           	opt stack 0
   923  00EAAA                     __initialization:
   924                           	opt stack 0
   925                           
   926                           ; Clear objects allocated to BANK0 (31 bytes)
   927  00EAAA  EE00  F080         	lfsr	0,__pbssBANK0
   928  00EAAE  0E1F               	movlw	31
   929  00EAB0                     clear_0:
   930  00EAB0  6AEE               	clrf	postinc0,c
   931  00EAB2  06E8               	decf	wreg,f,c
   932  00EAB4  E1FD               	bnz	clear_0
   933                           
   934                           ; Clear objects allocated to COMRAM (18 bytes)
   935  00EAB6  EE00  F068         	lfsr	0,__pbssCOMRAM
   936  00EABA  0E12               	movlw	18
   937  00EABC                     clear_1:
   938  00EABC  6AEE               	clrf	postinc0,c
   939  00EABE  06E8               	decf	wreg,f,c
   940  00EAC0  E1FD               	bnz	clear_1
   941                           
   942                           ; Initialize objects allocated to COMRAM (46 bytes)
   943                           ; load TBLPTR registers with __pidataCOMRAM
   944  00EAC2  0E9E               	movlw	low __pidataCOMRAM
   945  00EAC4  6EF6               	movwf	tblptrl,c
   946  00EAC6  0EE9               	movlw	high __pidataCOMRAM
   947  00EAC8  6EF7               	movwf	tblptrh,c
   948  00EACA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   949  00EACC  6EF8               	movwf	tblptru,c
   950  00EACE  EE00  F03A         	lfsr	0,__pdataCOMRAM
   951  00EAD2  EE10 F02E          	lfsr	1,46
   952  00EAD6                     copy_data0:
   953  00EAD6  0009               	tblrd		*+
   954  00EAD8  CFF5 FFEE          	movff	tablat,postinc0
   955  00EADC  50E5               	movf	postdec1,w,c
   956  00EADE  50E1               	movf	fsr1l,w,c
   957  00EAE0  E1FA               	bnz	copy_data0
   958  00EAE2                     end_of_initialization:
   959                           	opt stack 0
   960  00EAE2                     __end_of__initialization:
   961                           	opt stack 0
   962  00EAE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   963  00EAE4  6EF8               	movwf	tblptru,c
   964  00EAE6  0100               	movlb	0
   965  00EAE8  EF96  F074         	goto	_main	;jump to C main() function
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           postdec1	equ	0xFE5
   973                           fsr1l	equ	0xFE1
   974                           
   975                           	psect	bssCOMRAM
   976  000068                     __pbssCOMRAM:
   977                           	opt stack 0
   978  000068                     _MODE:
   979                           	opt stack 0
   980  000068                     	ds	2
   981  00006A                     _nbr:
   982                           	opt stack 0
   983  00006A                     	ds	2
   984  00006C                     _txt:
   985                           	opt stack 0
   986  00006C                     	ds	2
   987  00006E                     _Count:
   988                           	opt stack 0
   989  00006E                     	ds	1
   990  00006F                     _PED_Count:
   991                           	opt stack 0
   992  00006F                     	ds	1
   993  000070                     _SW_EWLT:
   994                           	opt stack 0
   995  000070                     	ds	1
   996  000071                     _SW_EWPED:
   997                           	opt stack 0
   998  000071                     	ds	1
   999  000072                     _SW_MODE:
  1000                           	opt stack 0
  1001  000072                     	ds	1
  1002  000073                     _SW_NSLT:
  1003                           	opt stack 0
  1004  000073                     	ds	1
  1005  000074                     _SW_NSPED:
  1006                           	opt stack 0
  1007  000074                     	ds	1
  1008  000075                     __tft_type:
  1009                           	opt stack 0
  1010  000075                     	ds	1
  1011  000076                     _colstart:
  1012                           	opt stack 0
  1013  000076                     	ds	1
  1014  000077                     _dir:
  1015                           	opt stack 0
  1016  000077                     	ds	1
  1017  000078                     _direction:
  1018                           	opt stack 0
  1019  000078                     	ds	1
  1020  000079                     _rowstart:
  1021                           	opt stack 0
  1022  000079                     	ds	1
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	dataCOMRAM
  1033  00003A                     __pdataCOMRAM:
  1034                           	opt stack 0
  1035  00003A                     _array:
  1036                           	opt stack 0
  1037  00003A                     	ds	11
  1038  000045                     _wrap:
  1039                           	opt stack 0
  1040  000045                     	ds	1
  1041  000046                     _EWLT_Count:
  1042                           	opt stack 0
  1043  000046                     	ds	3
  1044  000049                     _EW_Count:
  1045                           	opt stack 0
  1046  000049                     	ds	3
  1047  00004C                     _NSLT_Count:
  1048                           	opt stack 0
  1049  00004C                     	ds	3
  1050  00004F                     _NS_Count:
  1051                           	opt stack 0
  1052  00004F                     	ds	3
  1053  000052                     _PED_EW_Count:
  1054                           	opt stack 0
  1055  000052                     	ds	3
  1056  000055                     _PED_NS_Count:
  1057                           	opt stack 0
  1058  000055                     	ds	3
  1059  000058                     _Act_Mode_Txt:
  1060                           	opt stack 0
  1061  000058                     	ds	2
  1062  00005A                     _FlashingR_Txt:
  1063                           	opt stack 0
  1064  00005A                     	ds	2
  1065  00005C                     _FlashingS_Txt:
  1066                           	opt stack 0
  1067  00005C                     	ds	2
  1068  00005E                     _SW_EWLT_Txt:
  1069                           	opt stack 0
  1070  00005E                     	ds	2
  1071  000060                     _SW_EWPED_Txt:
  1072                           	opt stack 0
  1073  000060                     	ds	2
  1074  000062                     _SW_MODE_Txt:
  1075                           	opt stack 0
  1076  000062                     	ds	2
  1077  000064                     _SW_NSLT_Txt:
  1078                           	opt stack 0
  1079  000064                     	ds	2
  1080  000066                     _SW_NSPED_Txt:
  1081                           	opt stack 0
  1082  000066                     	ds	2
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092                           	psect	bssBANK0
  1093  000080                     __pbssBANK0:
  1094                           	opt stack 0
  1095  000080                     _buffer:
  1096                           	opt stack 0
  1097  000080                     	ds	31
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107                           	psect	cstackCOMRAM
  1108  000001                     __pcstackCOMRAM:
  1109                           	opt stack 0
  1110  000001                     ?_strlen:
  1111                           	opt stack 0
  1112  000001                     ?___wmul:
  1113                           	opt stack 0
  1114  000001                     spiwrite@x:
  1115                           	opt stack 0
  1116  000001                     Select_ADC_Channel@channel:
  1117                           	opt stack 0
  1118  000001                     OpenUSART@spbrg:
  1119                           	opt stack 0
  1120  000001                     ___wmul@multiplier:
  1121                           	opt stack 0
  1122  000001                     strcpy@to:
  1123                           	opt stack 0
  1124  000001                     strlen@s:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x0
  1128  000001                     	ds	1
  1129  000002                     spiwrite@spidata:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x1
  1133  000002                     	ds	1
  1134  000003                     ??_strlen:
  1135  000003                     write_command@cmd_:
  1136                           	opt stack 0
  1137  000003                     write_data@data_:
  1138                           	opt stack 0
  1139  000003                     OpenUSART@config:
  1140                           	opt stack 0
  1141  000003                     ___wmul@multiplicand:
  1142                           	opt stack 0
  1143  000003                     strcpy@from:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x2
  1147  000003                     	ds	1
  1148  000004                     setAddrWindow@y0:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x3
  1152  000004                     	ds	1
  1153  000005                     setAddrWindow@x1:
  1154                           	opt stack 0
  1155  000005                     ___wmul@product:
  1156                           	opt stack 0
  1157  000005                     strcpy@cp:
  1158                           	opt stack 0
  1159  000005                     strlen@cp:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x4
  1163  000005                     	ds	1
  1164  000006                     setAddrWindow@y1:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x5
  1168  000006                     	ds	1
  1169  000007                     setAddrWindow@x0:
  1170                           	opt stack 0
  1171  000007                     delay_ms@ms:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x6
  1175  000007                     	ds	1
  1176  000008                     drawPixel@y:
  1177                           	opt stack 0
  1178  000008                     drawFastVLine@y:
  1179                           	opt stack 0
  1180  000008                     fillRectangle@y:
  1181                           	opt stack 0
  1182  000008                     drawFastHLine@y:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x7
  1186  000008                     	ds	1
  1187  000009                     ??_delay_ms:
  1188  000009                     drawFastVLine@h:
  1189                           	opt stack 0
  1190  000009                     fillRectangle@w:
  1191                           	opt stack 0
  1192  000009                     drawFastHLine@w:
  1193                           	opt stack 0
  1194  000009                     drawPixel@color:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x8
  1198  000009                     	ds	1
  1199  00000A                     fillRectangle@h:
  1200                           	opt stack 0
  1201  00000A                     drawFastVLine@color:
  1202                           	opt stack 0
  1203  00000A                     drawFastHLine@color:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x9
  1207  00000A                     	ds	1
  1208  00000B                     drawPixel@x:
  1209                           	opt stack 0
  1210  00000B                     delay_ms@count:
  1211                           	opt stack 0
  1212  00000B                     fillRectangle@color:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0xA
  1216  00000B                     	ds	1
  1217  00000C                     ??_drawFastVLine:
  1218  00000C                     ??_drawFastHLine:
  1219  00000C                     drawCircle@x0:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0xB
  1223  00000C                     	ds	1
  1224  00000D                     ??_fillRectangle:
  1225  00000D                     
  1226                           ; 0 bytes @ 0xC
  1227  00000D                     	ds	1
  1228  00000E                     drawCircle@y0:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0xD
  1232  00000E                     	ds	2
  1233  000010                     drawFastVLine@hi:
  1234                           	opt stack 0
  1235  000010                     drawFastHLine@hi:
  1236                           	opt stack 0
  1237  000010                     drawCircle@r:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0xF
  1241  000010                     	ds	1
  1242  000011                     drawFastVLine@lo:
  1243                           	opt stack 0
  1244  000011                     fillRectangle@hi:
  1245                           	opt stack 0
  1246  000011                     drawFastHLine@lo:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x10
  1250  000011                     	ds	1
  1251  000012                     drawFastVLine@x:
  1252                           	opt stack 0
  1253  000012                     fillRectangle@lo:
  1254                           	opt stack 0
  1255  000012                     drawFastHLine@x:
  1256                           	opt stack 0
  1257  000012                     drawCircle@color:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x11
  1261  000012                     	ds	1
  1262  000013                     fillRect@y:
  1263                           	opt stack 0
  1264  000013                     fillRectangle@x:
  1265                           	opt stack 0
  1266  000013                     fillCircleHelper@x0:
  1267                           	opt stack 0
  1268  000013                     drawRect@x:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x12
  1272  000013                     	ds	1
  1273  000014                     ??_drawCircle:
  1274  000014                     fillRect@w:
  1275                           	opt stack 0
  1276  000014                     fillScreen@color:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x13
  1280  000014                     	ds	1
  1281  000015                     fillRect@h:
  1282                           	opt stack 0
  1283  000015                     fillCircleHelper@y0:
  1284                           	opt stack 0
  1285  000015                     drawRect@y:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x14
  1289  000015                     	ds	1
  1290  000016                     fillRect@color:
  1291                           	opt stack 0
  1292  000016                     drawCircle@ddF_x:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x15
  1296  000016                     	ds	1
  1297  000017                     fillCircleHelper@r:
  1298                           	opt stack 0
  1299  000017                     drawRect@w:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x16
  1303  000017                     	ds	1
  1304  000018                     ??_fillRect:
  1305  000018                     drawCircle@ddF_y:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x17
  1309  000018                     	ds	1
  1310  000019                     fillCircleHelper@cornername:
  1311                           	opt stack 0
  1312  000019                     drawRect@h:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x18
  1316  000019                     	ds	1
  1317  00001A                     drawCircle@f:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x19
  1321  00001A                     	ds	1
  1322  00001B                     fillRect@x:
  1323                           	opt stack 0
  1324  00001B                     fillCircleHelper@delta:
  1325                           	opt stack 0
  1326  00001B                     drawRect@color:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x1A
  1330  00001B                     	ds	1
  1331  00001C                     fillRect@i:
  1332                           	opt stack 0
  1333  00001C                     drawCircle@x:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x1B
  1337  00001C                     	ds	1
  1338  00001D                     ??_drawRect:
  1339  00001D                     fillCircleHelper@color:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1C
  1343  00001D                     	ds	1
  1344  00001E                     drawChar@y:
  1345                           	opt stack 0
  1346  00001E                     drawCircle@y:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x1D
  1350  00001E                     	ds	1
  1351  00001F                     ??_fillCircleHelper:
  1352  00001F                     drawChar@c:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x1E
  1356  00001F                     	ds	1
  1357  000020                     drawChar@color:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x1F
  1361  000020                     	ds	1
  1362  000021                     fillCircleHelper@ddF_x:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x20
  1366  000021                     	ds	1
  1367  000022                     drawChar@bg:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x21
  1371  000022                     	ds	1
  1372  000023                     fillCircleHelper@ddF_y:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x22
  1376  000023                     	ds	1
  1377  000024                     drawChar@size:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x23
  1381  000024                     	ds	1
  1382  000025                     drawChar@line:
  1383                           	opt stack 0
  1384  000025                     fillCircleHelper@f:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x24
  1388  000025                     	ds	1
  1389  000026                     drawChar@x:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x25
  1393  000026                     	ds	1
  1394  000027                     drawChar@j:
  1395                           	opt stack 0
  1396  000027                     fillCircleHelper@x:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x26
  1400  000027                     	ds	1
  1401  000028                     drawChar@i:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x27
  1405  000028                     	ds	1
  1406  000029                     drawtext@y:
  1407                           	opt stack 0
  1408  000029                     fillCircleHelper@y:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x28
  1412  000029                     	ds	1
  1413  00002A                     drawtext@_text:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x29
  1417  00002A                     	ds	1
  1418  00002B                     fillCircle@x0:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x2A
  1422  00002B                     	ds	1
  1423  00002C                     drawtext@color:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x2B
  1427  00002C                     	ds	1
  1428  00002D                     fillCircle@y0:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2C
  1432  00002D                     	ds	1
  1433  00002E                     drawtext@bg:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2D
  1437  00002E                     	ds	1
  1438  00002F                     fillCircle@r:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x2E
  1442  00002F                     	ds	1
  1443  000030                     drawtext@size:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x2F
  1447  000030                     	ds	1
  1448  000031                     ??_drawtext:
  1449  000031                     fillCircle@color:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x30
  1453  000031                     	ds	2
  1454  000033                     drawtext@textsize:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x32
  1458  000033                     	ds	2
  1459  000035                     drawtext@x:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x34
  1463  000035                     	ds	1
  1464  000036                     drawtext@i:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x35
  1468  000036                     	ds	2
  1469  000038                     drawtext@cursor_y:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x37
  1473  000038                     	ds	1
  1474  000039                     drawtext@cursor_x:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x38
  1478  000039                     	ds	1
  1479  00003A                     tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           postdec1	equ	0xFE5
  1486                           fsr1l	equ	0xFE1
  1487                           
  1488                           ; 0 bytes @ 0x39
  1489 ;;
  1490 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1491 ;;
  1492 ;; *************** function _main *****************
  1493 ;; Defined at:
  1494 ;;		line 294 in file "Lab8test.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;		None               void
  1501 ;; Registers used:
  1502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels required when called:    8
  1514 ;; This function calls:
  1515 ;;		_Init_ADC
  1516 ;;		_Init_TRIS
  1517 ;;		_Initialize_Screen
  1518 ;;		_Select_ADC_Channel
  1519 ;;		_init_UART
  1520 ;; This function is called by:
  1521 ;;		Startup code after reset
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text0
  1526  00E92C                     __ptext0:
  1527                           	opt stack 0
  1528  00E92C                     _main:
  1529                           	opt stack 23
  1530                           
  1531                           ;Lab8test.c: 296: Init_ADC();
  1532                           
  1533                           ;incstack = 0
  1534  00E92C  EC49  F074         	call	_Init_ADC	;wreg free
  1535                           
  1536                           ;Lab8test.c: 297: Init_TRIS();
  1537  00E930  EC7D  F074         	call	_Init_TRIS	;wreg free
  1538                           
  1539                           ;Lab8test.c: 298: init_UART ();
  1540  00E934  EC73  F074         	call	_init_UART	;wreg free
  1541                           
  1542                           ;Lab8test.c: 299: Select_ADC_Channel(0);
  1543  00E938  0E00               	movlw	0
  1544  00E93A  EC43  F074         	call	_Select_ADC_Channel
  1545                           
  1546                           ;Lab8test.c: 301: OSCCON = 0x70;
  1547  00E93E  0E70               	movlw	112
  1548  00E940  6ED3               	movwf	4051,c	;volatile
  1549                           
  1550                           ;Lab8test.c: 302: RBPU = 0;
  1551  00E942  9EF1               	bcf	intcon2,7,c	;volatile
  1552                           
  1553                           ;Lab8test.c: 303: Initialize_Screen();
  1554  00E944  EC03  F07B         	call	_Initialize_Screen	;wreg free
  1555  00E948  EF00  F000         	goto	start
  1556  00E94C                     __end_of_main:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           intcon2	equ	0xFF1
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1l	equ	0xFE1
  1567                           
  1568 ;; *************** function _init_UART *****************
  1569 ;; Defined at:
  1570 ;;		line 279 in file "Lab8test.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;		None
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;		None
  1575 ;; Return value:  Size  Location     Type
  1576 ;;		None               void
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, cstack
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;Total ram usage:        0 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; Hardware stack levels required when called:    1
  1591 ;; This function calls:
  1592 ;;		_OpenUSART
  1593 ;; This function is called by:
  1594 ;;		_main
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text1
  1599  00E8E6                     __ptext1:
  1600                           	opt stack 0
  1601  00E8E6                     _init_UART:
  1602                           	opt stack 29
  1603                           
  1604                           ;Lab8test.c: 281: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  1605                           ;Lab8test.c: 282: & 0b11111111 & 0b11111111, 25);
  1606                           
  1607                           ;incstack = 0
  1608  00E8E6  0E00               	movlw	0
  1609  00E8E8  6E02               	movwf	OpenUSART@spbrg+1,c
  1610  00E8EA  0E19               	movlw	25
  1611  00E8EC  6E01               	movwf	OpenUSART@spbrg,c
  1612  00E8EE  0E3C               	movlw	60
  1613  00E8F0  EC47  F076         	call	_OpenUSART
  1614                           
  1615                           ;Lab8test.c: 283: OSCCON = 0x60;
  1616  00E8F4  0E60               	movlw	96
  1617  00E8F6  6ED3               	movwf	4051,c	;volatile
  1618  00E8F8  0012               	return		;funcret
  1619  00E8FA                     __end_of_init_UART:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           intcon2	equ	0xFF1
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           
  1631 ;; *************** function _OpenUSART *****************
  1632 ;; Defined at:
  1633 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  config          1    wreg     unsigned char 
  1636 ;;  spbrg           2    0[COMRAM] unsigned int 
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  config          1    2[COMRAM] unsigned char 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;		None               void
  1641 ;; Registers used:
  1642 ;;		wreg, status,2
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:        3 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_init_UART
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           	psect	text2
  1662  00EC8E                     __ptext2:
  1663                           	opt stack 0
  1664  00EC8E                     _OpenUSART:
  1665                           	opt stack 29
  1666                           
  1667                           ;incstack = 0
  1668                           ;OpenUSART@config stored from wreg
  1669  00EC8E  6E03               	movwf	OpenUSART@config,c
  1670  00EC90  0E00               	movlw	0
  1671  00EC92  6EAC               	movwf	4012,c	;volatile
  1672  00EC94  0E00               	movlw	0
  1673  00EC96  6EAB               	movwf	4011,c	;volatile
  1674  00EC98  A003               	btfss	OpenUSART@config,0,c
  1675  00EC9A  D002               	goto	l2961
  1676  00EC9C  88AC               	bsf	4012,4,c	;volatile
  1677  00EC9E  D000               	goto	l2961
  1678  00ECA0                     l2961:
  1679  00ECA0  A203               	btfss	OpenUSART@config,1,c
  1680  00ECA2  D003               	goto	l2965
  1681  00ECA4  8CAC               	bsf	4012,6,c	;volatile
  1682  00ECA6  8CAB               	bsf	4011,6,c	;volatile
  1683  00ECA8  D000               	goto	l2965
  1684  00ECAA                     l2965:
  1685  00ECAA  A403               	btfss	OpenUSART@config,2,c
  1686  00ECAC  D002               	goto	l2969
  1687  00ECAE  8EAC               	bsf	4012,7,c	;volatile
  1688  00ECB0  D000               	goto	l2969
  1689  00ECB2                     l2969:
  1690  00ECB2  A603               	btfss	OpenUSART@config,3,c
  1691  00ECB4  D002               	goto	l665
  1692  00ECB6  88AB               	bsf	4011,4,c	;volatile
  1693  00ECB8  D002               	goto	l2973
  1694  00ECBA                     l665:
  1695  00ECBA  8AAB               	bsf	4011,5,c	;volatile
  1696  00ECBC  D000               	goto	l2973
  1697  00ECBE                     l2973:
  1698  00ECBE  B803               	btfsc	OpenUSART@config,4,c
  1699  00ECC0  84AC               	bsf	4012,2,c	;volatile
  1700  00ECC2  989E               	bcf	3998,4,c	;volatile
  1701  00ECC4  AA03               	btfss	OpenUSART@config,5,c
  1702  00ECC6  D002               	goto	l2981
  1703  00ECC8  86AB               	bsf	4011,3,c	;volatile
  1704  00ECCA  D000               	goto	l2981
  1705  00ECCC                     l2981:
  1706  00ECCC  AC03               	btfss	OpenUSART@config,6,c
  1707  00ECCE  D002               	goto	l669
  1708  00ECD0  8A9D               	bsf	3997,5,c	;volatile
  1709  00ECD2  D001               	goto	l670
  1710  00ECD4                     l669:
  1711  00ECD4  9A9D               	bcf	3997,5,c	;volatile
  1712  00ECD6                     l670:
  1713  00ECD6  9A9E               	bcf	3998,5,c	;volatile
  1714  00ECD8  AE03               	btfss	OpenUSART@config,7,c
  1715  00ECDA  D002               	goto	l671
  1716  00ECDC  889D               	bsf	3997,4,c	;volatile
  1717  00ECDE  D001               	goto	l672
  1718  00ECE0                     l671:
  1719  00ECE0  989D               	bcf	3997,4,c	;volatile
  1720  00ECE2                     l672:
  1721  00ECE2  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1722  00ECE6  5002               	movf	OpenUSART@spbrg+1,w,c
  1723  00ECE8  6EB0               	movwf	4016,c	;volatile
  1724  00ECEA  8AAC               	bsf	4012,5,c	;volatile
  1725  00ECEC  8EAB               	bsf	4011,7,c	;volatile
  1726  00ECEE  9C94               	bcf	3988,6,c	;volatile
  1727  00ECF0  8E94               	bsf	3988,7,c	;volatile
  1728  00ECF2  B8AC               	btfsc	4012,4,c	;volatile
  1729  00ECF4  BEAC               	btfsc	4012,7,c	;volatile
  1730  00ECF6  D002               	goto	l674
  1731  00ECF8  8C94               	bsf	3988,6,c	;volatile
  1732  00ECFA  D000               	goto	l674
  1733  00ECFC                     l674:
  1734  00ECFC  0012               	return		;funcret
  1735  00ECFE                     __end_of_OpenUSART:
  1736                           	opt stack 0
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           intcon2	equ	0xFF1
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           postdec1	equ	0xFE5
  1745                           fsr1l	equ	0xFE1
  1746                           
  1747 ;; *************** function _Select_ADC_Channel *****************
  1748 ;; Defined at:
  1749 ;;		line 419 in file "Lab8test.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  channel         1    wreg     unsigned char 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  channel         1    0[COMRAM] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;		None               void
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0, prodl, prodh
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;Total ram usage:        1 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_main
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text3
  1777  00E886                     __ptext3:
  1778                           	opt stack 0
  1779  00E886                     _Select_ADC_Channel:
  1780                           	opt stack 30
  1781                           
  1782                           ;incstack = 0
  1783                           ;Select_ADC_Channel@channel stored from wreg
  1784  00E886  6E01               	movwf	Select_ADC_Channel@channel,c
  1785                           
  1786                           ;Lab8test.c: 421: ADCON0 = channel * 4 + 1;
  1787  00E888  5001               	movf	Select_ADC_Channel@channel,w,c
  1788  00E88A  0D04               	mullw	4
  1789  00E88C  28F3               	incf	prodl,w,c
  1790  00E88E  6EC2               	movwf	4034,c	;volatile
  1791  00E890  0012               	return		;funcret
  1792  00E892                     __end_of_Select_ADC_Channel:
  1793                           	opt stack 0
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           prodl	equ	0xFF3
  1799                           intcon2	equ	0xFF1
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1l	equ	0xFE1
  1804                           
  1805 ;; *************** function _Initialize_Screen *****************
  1806 ;; Defined at:
  1807 ;;		line 191 in file "Lab8test.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;		None
  1812 ;; Return value:  Size  Location     Type
  1813 ;;		None               void
  1814 ;; Registers used:
  1815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;Total ram usage:        0 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    7
  1828 ;; This function calls:
  1829 ;;		_LCD_Reset
  1830 ;;		_TFT_GreenTab_Initialize
  1831 ;;		_drawCircle
  1832 ;;		_drawRect
  1833 ;;		_drawtext
  1834 ;;		_fillCircle
  1835 ;;		_fillScreen
  1836 ;;		_strcpy
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text4
  1843  00F606                     __ptext4:
  1844                           	opt stack 0
  1845  00F606                     _Initialize_Screen:
  1846                           	opt stack 23
  1847                           
  1848                           ;Lab8test.c: 193: LCD_Reset();
  1849                           
  1850                           ;incstack = 0
  1851  00F606  EC60  F074         	call	_LCD_Reset	;wreg free
  1852                           
  1853                           ;Lab8test.c: 194: TFT_GreenTab_Initialize();
  1854  00F60A  ECBA  F074         	call	_TFT_GreenTab_Initialize	;wreg free
  1855                           
  1856                           ;Lab8test.c: 195: fillScreen(0x0000);
  1857  00F60E  0E00               	movlw	0
  1858  00F610  6E15               	movwf	fillScreen@color+1,c
  1859  00F612  0E00               	movlw	0
  1860  00F614  6E14               	movwf	fillScreen@color,c
  1861  00F616  EC88  F074         	call	_fillScreen	;wreg free
  1862                           
  1863                           ;Lab8test.c: 198: txt = buffer;
  1864  00F61A  0E80               	movlw	low _buffer
  1865  00F61C  6E6C               	movwf	_txt,c
  1866  00F61E  0E00               	movlw	high _buffer
  1867  00F620  6E6D               	movwf	_txt+1,c
  1868                           
  1869                           ;Lab8test.c: 199: strcpy(txt, "ECE3301L Fall 22-S4");
  1870  00F622  C06C  F001         	movff	_txt,strcpy@to
  1871  00F626  C06D  F002         	movff	_txt+1,strcpy@to+1
  1872  00F62A  0E8B               	movlw	low STR_1
  1873  00F62C  6E03               	movwf	strcpy@from,c
  1874  00F62E  0EFF               	movlw	high STR_1
  1875  00F630  6E04               	movwf	strcpy@from+1,c
  1876  00F632  ECFE  F074         	call	_strcpy	;wreg free
  1877                           
  1878                           ;Lab8test.c: 200: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  1879  00F636  0E02               	movlw	2
  1880  00F638  6E29               	movwf	drawtext@y,c
  1881  00F63A  C06C  F02A         	movff	_txt,drawtext@_text
  1882  00F63E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  1883  00F642  0EFF               	movlw	255
  1884  00F644  6E2D               	movwf	drawtext@color+1,c
  1885  00F646  682C               	setf	drawtext@color,c
  1886  00F648  0E00               	movlw	0
  1887  00F64A  6E2F               	movwf	drawtext@bg+1,c
  1888  00F64C  0E00               	movlw	0
  1889  00F64E  6E2E               	movwf	drawtext@bg,c
  1890  00F650  0E01               	movlw	1
  1891  00F652  6E30               	movwf	drawtext@size,c
  1892  00F654  0E02               	movlw	2
  1893  00F656  EC75  F077         	call	_drawtext
  1894                           
  1895                           ;Lab8test.c: 203: strcpy(txt, "Mode:");
  1896  00F65A  C06C  F001         	movff	_txt,strcpy@to
  1897  00F65E  C06D  F002         	movff	_txt+1,strcpy@to+1
  1898  00F662  0EE6               	movlw	low STR_2
  1899  00F664  6E03               	movwf	strcpy@from,c
  1900  00F666  0EFF               	movlw	high STR_2
  1901  00F668  6E04               	movwf	strcpy@from+1,c
  1902  00F66A  ECFE  F074         	call	_strcpy	;wreg free
  1903                           
  1904                           ;Lab8test.c: 204: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  1905  00F66E  0E0A               	movlw	10
  1906  00F670  6E29               	movwf	drawtext@y,c
  1907  00F672  C06C  F02A         	movff	_txt,drawtext@_text
  1908  00F676  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  1909  00F67A  0EFF               	movlw	255
  1910  00F67C  6E2D               	movwf	drawtext@color+1,c
  1911  00F67E  682C               	setf	drawtext@color,c
  1912  00F680  0E00               	movlw	0
  1913  00F682  6E2F               	movwf	drawtext@bg+1,c
  1914  00F684  0E00               	movlw	0
  1915  00F686  6E2E               	movwf	drawtext@bg,c
  1916  00F688  0E01               	movlw	1
  1917  00F68A  6E30               	movwf	drawtext@size,c
  1918  00F68C  0E02               	movlw	2
  1919  00F68E  EC75  F077         	call	_drawtext
  1920                           
  1921                           ;Lab8test.c: 205: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  1922  00F692  0E0A               	movlw	10
  1923  00F694  6E29               	movwf	drawtext@y,c
  1924  00F696  0E58               	movlw	low _Act_Mode_Txt
  1925  00F698  6E2A               	movwf	drawtext@_text,c
  1926  00F69A  0E00               	movlw	high _Act_Mode_Txt
  1927  00F69C  6E2B               	movwf	drawtext@_text+1,c
  1928  00F69E  0EFF               	movlw	255
  1929  00F6A0  6E2D               	movwf	drawtext@color+1,c
  1930  00F6A2  682C               	setf	drawtext@color,c
  1931  00F6A4  0E00               	movlw	0
  1932  00F6A6  6E2F               	movwf	drawtext@bg+1,c
  1933  00F6A8  0E00               	movlw	0
  1934  00F6AA  6E2E               	movwf	drawtext@bg,c
  1935  00F6AC  0E01               	movlw	1
  1936  00F6AE  6E30               	movwf	drawtext@size,c
  1937  00F6B0  0E23               	movlw	35
  1938  00F6B2  EC75  F077         	call	_drawtext
  1939                           
  1940                           ;Lab8test.c: 208: strcpy(txt, "FR:");
  1941  00F6B6  C06C  F001         	movff	_txt,strcpy@to
  1942  00F6BA  C06D  F002         	movff	_txt+1,strcpy@to+1
  1943  00F6BE  0EEC               	movlw	low STR_3
  1944  00F6C0  6E03               	movwf	strcpy@from,c
  1945  00F6C2  0EFF               	movlw	high STR_3
  1946  00F6C4  6E04               	movwf	strcpy@from+1,c
  1947  00F6C6  ECFE  F074         	call	_strcpy	;wreg free
  1948                           
  1949                           ;Lab8test.c: 209: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  1950  00F6CA  0E0A               	movlw	10
  1951  00F6CC  6E29               	movwf	drawtext@y,c
  1952  00F6CE  C06C  F02A         	movff	_txt,drawtext@_text
  1953  00F6D2  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  1954  00F6D6  0EFF               	movlw	255
  1955  00F6D8  6E2D               	movwf	drawtext@color+1,c
  1956  00F6DA  682C               	setf	drawtext@color,c
  1957  00F6DC  0E00               	movlw	0
  1958  00F6DE  6E2F               	movwf	drawtext@bg+1,c
  1959  00F6E0  0E00               	movlw	0
  1960  00F6E2  6E2E               	movwf	drawtext@bg,c
  1961  00F6E4  0E01               	movlw	1
  1962  00F6E6  6E30               	movwf	drawtext@size,c
  1963  00F6E8  0E32               	movlw	50
  1964  00F6EA  EC75  F077         	call	_drawtext
  1965                           
  1966                           ;Lab8test.c: 210: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  1967  00F6EE  0E0A               	movlw	10
  1968  00F6F0  6E29               	movwf	drawtext@y,c
  1969  00F6F2  0E5A               	movlw	low _FlashingR_Txt
  1970  00F6F4  6E2A               	movwf	drawtext@_text,c
  1971  00F6F6  0E00               	movlw	high _FlashingR_Txt
  1972  00F6F8  6E2B               	movwf	drawtext@_text+1,c
  1973  00F6FA  0EFF               	movlw	255
  1974  00F6FC  6E2D               	movwf	drawtext@color+1,c
  1975  00F6FE  682C               	setf	drawtext@color,c
  1976  00F700  0E00               	movlw	0
  1977  00F702  6E2F               	movwf	drawtext@bg+1,c
  1978  00F704  0E00               	movlw	0
  1979  00F706  6E2E               	movwf	drawtext@bg,c
  1980  00F708  0E01               	movlw	1
  1981  00F70A  6E30               	movwf	drawtext@size,c
  1982  00F70C  0E46               	movlw	70
  1983  00F70E  EC75  F077         	call	_drawtext
  1984                           
  1985                           ;Lab8test.c: 213: strcpy(txt, "FS:");
  1986  00F712  C06C  F001         	movff	_txt,strcpy@to
  1987  00F716  C06D  F002         	movff	_txt+1,strcpy@to+1
  1988  00F71A  0EF0               	movlw	low STR_4
  1989  00F71C  6E03               	movwf	strcpy@from,c
  1990  00F71E  0EFF               	movlw	high STR_4
  1991  00F720  6E04               	movwf	strcpy@from+1,c
  1992  00F722  ECFE  F074         	call	_strcpy	;wreg free
  1993                           
  1994                           ;Lab8test.c: 214: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  1995  00F726  0E0A               	movlw	10
  1996  00F728  6E29               	movwf	drawtext@y,c
  1997  00F72A  C06C  F02A         	movff	_txt,drawtext@_text
  1998  00F72E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  1999  00F732  0EFF               	movlw	255
  2000  00F734  6E2D               	movwf	drawtext@color+1,c
  2001  00F736  682C               	setf	drawtext@color,c
  2002  00F738  0E00               	movlw	0
  2003  00F73A  6E2F               	movwf	drawtext@bg+1,c
  2004  00F73C  0E00               	movlw	0
  2005  00F73E  6E2E               	movwf	drawtext@bg,c
  2006  00F740  0E01               	movlw	1
  2007  00F742  6E30               	movwf	drawtext@size,c
  2008  00F744  0E50               	movlw	80
  2009  00F746  EC75  F077         	call	_drawtext
  2010                           
  2011                           ;Lab8test.c: 215: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2012  00F74A  0E0A               	movlw	10
  2013  00F74C  6E29               	movwf	drawtext@y,c
  2014  00F74E  0E5C               	movlw	low _FlashingS_Txt
  2015  00F750  6E2A               	movwf	drawtext@_text,c
  2016  00F752  0E00               	movlw	high _FlashingS_Txt
  2017  00F754  6E2B               	movwf	drawtext@_text+1,c
  2018  00F756  0EFF               	movlw	255
  2019  00F758  6E2D               	movwf	drawtext@color+1,c
  2020  00F75A  682C               	setf	drawtext@color,c
  2021  00F75C  0E00               	movlw	0
  2022  00F75E  6E2F               	movwf	drawtext@bg+1,c
  2023  00F760  0E00               	movlw	0
  2024  00F762  6E2E               	movwf	drawtext@bg,c
  2025  00F764  0E01               	movlw	1
  2026  00F766  6E30               	movwf	drawtext@size,c
  2027  00F768  0E64               	movlw	100
  2028  00F76A  EC75  F077         	call	_drawtext
  2029                           
  2030                           ;Lab8test.c: 218: strcpy(txt, "*");
  2031  00F76E  C06C  F001         	movff	_txt,strcpy@to
  2032  00F772  C06D  F002         	movff	_txt+1,strcpy@to+1
  2033  00F776  0EFC               	movlw	low STR_5
  2034  00F778  6E03               	movwf	strcpy@from,c
  2035  00F77A  0EFF               	movlw	high STR_5
  2036  00F77C  6E04               	movwf	strcpy@from+1,c
  2037  00F77E  ECFE  F074         	call	_strcpy	;wreg free
  2038                           
  2039                           ;Lab8test.c: 219: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2040  00F782  0E0A               	movlw	10
  2041  00F784  6E29               	movwf	drawtext@y,c
  2042  00F786  C06C  F02A         	movff	_txt,drawtext@_text
  2043  00F78A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2044  00F78E  0EFF               	movlw	255
  2045  00F790  6E2D               	movwf	drawtext@color+1,c
  2046  00F792  682C               	setf	drawtext@color,c
  2047  00F794  0E00               	movlw	0
  2048  00F796  6E2F               	movwf	drawtext@bg+1,c
  2049  00F798  0E00               	movlw	0
  2050  00F79A  6E2E               	movwf	drawtext@bg,c
  2051  00F79C  0E01               	movlw	1
  2052  00F79E  6E30               	movwf	drawtext@size,c
  2053  00F7A0  0E78               	movlw	120
  2054  00F7A2  EC75  F077         	call	_drawtext
  2055                           
  2056                           ;Lab8test.c: 222: strcpy(txt, "EAST/WEST");
  2057  00F7A6  C06C  F001         	movff	_txt,strcpy@to
  2058  00F7AA  C06D  F002         	movff	_txt+1,strcpy@to+1
  2059  00F7AE  0ECE               	movlw	low STR_6
  2060  00F7B0  6E03               	movwf	strcpy@from,c
  2061  00F7B2  0EFF               	movlw	high STR_6
  2062  00F7B4  6E04               	movwf	strcpy@from+1,c
  2063  00F7B6  ECFE  F074         	call	_strcpy	;wreg free
  2064                           
  2065                           ;Lab8test.c: 223: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2066  00F7BA  0E14               	movlw	20
  2067  00F7BC  6E29               	movwf	drawtext@y,c
  2068  00F7BE  C06C  F02A         	movff	_txt,drawtext@_text
  2069  00F7C2  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2070  00F7C6  0E07               	movlw	7
  2071  00F7C8  6E2D               	movwf	drawtext@color+1,c
  2072  00F7CA  682C               	setf	drawtext@color,c
  2073  00F7CC  0E00               	movlw	0
  2074  00F7CE  6E2F               	movwf	drawtext@bg+1,c
  2075  00F7D0  0E00               	movlw	0
  2076  00F7D2  6E2E               	movwf	drawtext@bg,c
  2077  00F7D4  0E01               	movlw	1
  2078  00F7D6  6E30               	movwf	drawtext@size,c
  2079  00F7D8  0E1E               	movlw	30
  2080  00F7DA  EC75  F077         	call	_drawtext
  2081                           
  2082                           ;Lab8test.c: 224: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2083  00F7DE  0E00               	movlw	0
  2084  00F7E0  6E14               	movwf	drawRect@x+1,c
  2085  00F7E2  0E1E               	movlw	30
  2086  00F7E4  6E13               	movwf	drawRect@x,c
  2087  00F7E6  0E00               	movlw	0
  2088  00F7E8  6E16               	movwf	drawRect@y+1,c
  2089  00F7EA  0E1B               	movlw	27
  2090  00F7EC  6E15               	movwf	drawRect@y,c
  2091  00F7EE  0E00               	movlw	0
  2092  00F7F0  6E18               	movwf	drawRect@w+1,c
  2093  00F7F2  0E3C               	movlw	60
  2094  00F7F4  6E17               	movwf	drawRect@w,c
  2095  00F7F6  0E00               	movlw	0
  2096  00F7F8  6E1A               	movwf	drawRect@h+1,c
  2097  00F7FA  0E12               	movlw	18
  2098  00F7FC  6E19               	movwf	drawRect@h,c
  2099  00F7FE  0E07               	movlw	7
  2100  00F800  6E1C               	movwf	drawRect@color+1,c
  2101  00F802  681B               	setf	drawRect@color,c
  2102  00F804  EC14  F076         	call	_drawRect	;wreg free
  2103                           
  2104                           ;Lab8test.c: 225: fillCircle(40, 20 + 15, 7, 0xF800);
  2105  00F808  0E00               	movlw	0
  2106  00F80A  6E2C               	movwf	fillCircle@x0+1,c
  2107  00F80C  0E28               	movlw	40
  2108  00F80E  6E2B               	movwf	fillCircle@x0,c
  2109  00F810  0E00               	movlw	0
  2110  00F812  6E2E               	movwf	fillCircle@y0+1,c
  2111  00F814  0E23               	movlw	35
  2112  00F816  6E2D               	movwf	fillCircle@y0,c
  2113  00F818  0E00               	movlw	0
  2114  00F81A  6E30               	movwf	fillCircle@r+1,c
  2115  00F81C  0E07               	movlw	7
  2116  00F81E  6E2F               	movwf	fillCircle@r,c
  2117  00F820  0EF8               	movlw	248
  2118  00F822  6E32               	movwf	fillCircle@color+1,c
  2119  00F824  0E00               	movlw	0
  2120  00F826  6E31               	movwf	fillCircle@color,c
  2121  00F828  ECEB  F075         	call	_fillCircle	;wreg free
  2122                           
  2123                           ;Lab8test.c: 226: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2124  00F82C  0E00               	movlw	0
  2125  00F82E  6E0D               	movwf	drawCircle@x0+1,c
  2126  00F830  0E3C               	movlw	60
  2127  00F832  6E0C               	movwf	drawCircle@x0,c
  2128  00F834  0E00               	movlw	0
  2129  00F836  6E0F               	movwf	drawCircle@y0+1,c
  2130  00F838  0E23               	movlw	35
  2131  00F83A  6E0E               	movwf	drawCircle@y0,c
  2132  00F83C  0E00               	movlw	0
  2133  00F83E  6E11               	movwf	drawCircle@r+1,c
  2134  00F840  0E07               	movlw	7
  2135  00F842  6E10               	movwf	drawCircle@r,c
  2136  00F844  0EFF               	movlw	255
  2137  00F846  6E13               	movwf	drawCircle@color+1,c
  2138  00F848  0EE0               	movlw	224
  2139  00F84A  6E12               	movwf	drawCircle@color,c
  2140  00F84C  EC2C  F07A         	call	_drawCircle	;wreg free
  2141                           
  2142                           ;Lab8test.c: 227: drawCircle(80, 20 + 15, 7, 0x07E0);
  2143  00F850  0E00               	movlw	0
  2144  00F852  6E0D               	movwf	drawCircle@x0+1,c
  2145  00F854  0E50               	movlw	80
  2146  00F856  6E0C               	movwf	drawCircle@x0,c
  2147  00F858  0E00               	movlw	0
  2148  00F85A  6E0F               	movwf	drawCircle@y0+1,c
  2149  00F85C  0E23               	movlw	35
  2150  00F85E  6E0E               	movwf	drawCircle@y0,c
  2151  00F860  0E00               	movlw	0
  2152  00F862  6E11               	movwf	drawCircle@r+1,c
  2153  00F864  0E07               	movlw	7
  2154  00F866  6E10               	movwf	drawCircle@r,c
  2155  00F868  0E07               	movlw	7
  2156  00F86A  6E13               	movwf	drawCircle@color+1,c
  2157  00F86C  0EE0               	movlw	224
  2158  00F86E  6E12               	movwf	drawCircle@color,c
  2159  00F870  EC2C  F07A         	call	_drawCircle	;wreg free
  2160                           
  2161                           ;Lab8test.c: 228: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2162  00F874  0E1E               	movlw	30
  2163  00F876  6E29               	movwf	drawtext@y,c
  2164  00F878  0E49               	movlw	low _EW_Count
  2165  00F87A  6E2A               	movwf	drawtext@_text,c
  2166  00F87C  0E00               	movlw	high _EW_Count
  2167  00F87E  6E2B               	movwf	drawtext@_text+1,c
  2168  00F880  0E07               	movlw	7
  2169  00F882  6E2D               	movwf	drawtext@color+1,c
  2170  00F884  682C               	setf	drawtext@color,c
  2171  00F886  0E00               	movlw	0
  2172  00F888  6E2F               	movwf	drawtext@bg+1,c
  2173  00F88A  0E00               	movlw	0
  2174  00F88C  6E2E               	movwf	drawtext@bg,c
  2175  00F88E  0E02               	movlw	2
  2176  00F890  6E30               	movwf	drawtext@size,c
  2177  00F892  0E64               	movlw	100
  2178  00F894  EC75  F077         	call	_drawtext
  2179                           
  2180                           ;Lab8test.c: 231: strcpy(txt, "E/W LT");
  2181  00F898  C06C  F001         	movff	_txt,strcpy@to
  2182  00F89C  C06D  F002         	movff	_txt+1,strcpy@to+1
  2183  00F8A0  0EDF               	movlw	low STR_7
  2184  00F8A2  6E03               	movwf	strcpy@from,c
  2185  00F8A4  0EFF               	movlw	high STR_7
  2186  00F8A6  6E04               	movwf	strcpy@from+1,c
  2187  00F8A8  ECFE  F074         	call	_strcpy	;wreg free
  2188                           
  2189                           ;Lab8test.c: 232: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2190  00F8AC  0E32               	movlw	50
  2191  00F8AE  6E29               	movwf	drawtext@y,c
  2192  00F8B0  C06C  F02A         	movff	_txt,drawtext@_text
  2193  00F8B4  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2194  00F8B8  0EFF               	movlw	255
  2195  00F8BA  6E2D               	movwf	drawtext@color+1,c
  2196  00F8BC  682C               	setf	drawtext@color,c
  2197  00F8BE  0E00               	movlw	0
  2198  00F8C0  6E2F               	movwf	drawtext@bg+1,c
  2199  00F8C2  0E00               	movlw	0
  2200  00F8C4  6E2E               	movwf	drawtext@bg,c
  2201  00F8C6  0E01               	movlw	1
  2202  00F8C8  6E30               	movwf	drawtext@size,c
  2203  00F8CA  0E1E               	movlw	30
  2204  00F8CC  EC75  F077         	call	_drawtext
  2205                           
  2206                           ;Lab8test.c: 233: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2207  00F8D0  0E00               	movlw	0
  2208  00F8D2  6E14               	movwf	drawRect@x+1,c
  2209  00F8D4  0E1E               	movlw	30
  2210  00F8D6  6E13               	movwf	drawRect@x,c
  2211  00F8D8  0E00               	movlw	0
  2212  00F8DA  6E16               	movwf	drawRect@y+1,c
  2213  00F8DC  0E39               	movlw	57
  2214  00F8DE  6E15               	movwf	drawRect@y,c
  2215  00F8E0  0E00               	movlw	0
  2216  00F8E2  6E18               	movwf	drawRect@w+1,c
  2217  00F8E4  0E3C               	movlw	60
  2218  00F8E6  6E17               	movwf	drawRect@w,c
  2219  00F8E8  0E00               	movlw	0
  2220  00F8EA  6E1A               	movwf	drawRect@h+1,c
  2221  00F8EC  0E12               	movlw	18
  2222  00F8EE  6E19               	movwf	drawRect@h,c
  2223  00F8F0  0EFF               	movlw	255
  2224  00F8F2  6E1C               	movwf	drawRect@color+1,c
  2225  00F8F4  681B               	setf	drawRect@color,c
  2226  00F8F6  EC14  F076         	call	_drawRect	;wreg free
  2227                           
  2228                           ;Lab8test.c: 234: fillCircle(40, 50 + 15, 7, 0xF800);
  2229  00F8FA  0E00               	movlw	0
  2230  00F8FC  6E2C               	movwf	fillCircle@x0+1,c
  2231  00F8FE  0E28               	movlw	40
  2232  00F900  6E2B               	movwf	fillCircle@x0,c
  2233  00F902  0E00               	movlw	0
  2234  00F904  6E2E               	movwf	fillCircle@y0+1,c
  2235  00F906  0E41               	movlw	65
  2236  00F908  6E2D               	movwf	fillCircle@y0,c
  2237  00F90A  0E00               	movlw	0
  2238  00F90C  6E30               	movwf	fillCircle@r+1,c
  2239  00F90E  0E07               	movlw	7
  2240  00F910  6E2F               	movwf	fillCircle@r,c
  2241  00F912  0EF8               	movlw	248
  2242  00F914  6E32               	movwf	fillCircle@color+1,c
  2243  00F916  0E00               	movlw	0
  2244  00F918  6E31               	movwf	fillCircle@color,c
  2245  00F91A  ECEB  F075         	call	_fillCircle	;wreg free
  2246                           
  2247                           ;Lab8test.c: 235: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2248  00F91E  0E00               	movlw	0
  2249  00F920  6E0D               	movwf	drawCircle@x0+1,c
  2250  00F922  0E3C               	movlw	60
  2251  00F924  6E0C               	movwf	drawCircle@x0,c
  2252  00F926  0E00               	movlw	0
  2253  00F928  6E0F               	movwf	drawCircle@y0+1,c
  2254  00F92A  0E41               	movlw	65
  2255  00F92C  6E0E               	movwf	drawCircle@y0,c
  2256  00F92E  0E00               	movlw	0
  2257  00F930  6E11               	movwf	drawCircle@r+1,c
  2258  00F932  0E07               	movlw	7
  2259  00F934  6E10               	movwf	drawCircle@r,c
  2260  00F936  0EFF               	movlw	255
  2261  00F938  6E13               	movwf	drawCircle@color+1,c
  2262  00F93A  0EE0               	movlw	224
  2263  00F93C  6E12               	movwf	drawCircle@color,c
  2264  00F93E  EC2C  F07A         	call	_drawCircle	;wreg free
  2265                           
  2266                           ;Lab8test.c: 236: drawCircle(80, 50 + 15, 7, 0x07E0);
  2267  00F942  0E00               	movlw	0
  2268  00F944  6E0D               	movwf	drawCircle@x0+1,c
  2269  00F946  0E50               	movlw	80
  2270  00F948  6E0C               	movwf	drawCircle@x0,c
  2271  00F94A  0E00               	movlw	0
  2272  00F94C  6E0F               	movwf	drawCircle@y0+1,c
  2273  00F94E  0E41               	movlw	65
  2274  00F950  6E0E               	movwf	drawCircle@y0,c
  2275  00F952  0E00               	movlw	0
  2276  00F954  6E11               	movwf	drawCircle@r+1,c
  2277  00F956  0E07               	movlw	7
  2278  00F958  6E10               	movwf	drawCircle@r,c
  2279  00F95A  0E07               	movlw	7
  2280  00F95C  6E13               	movwf	drawCircle@color+1,c
  2281  00F95E  0EE0               	movlw	224
  2282  00F960  6E12               	movwf	drawCircle@color,c
  2283  00F962  EC2C  F07A         	call	_drawCircle	;wreg free
  2284                           
  2285                           ;Lab8test.c: 237: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2286  00F966  0E3C               	movlw	60
  2287  00F968  6E29               	movwf	drawtext@y,c
  2288  00F96A  0E46               	movlw	low _EWLT_Count
  2289  00F96C  6E2A               	movwf	drawtext@_text,c
  2290  00F96E  0E00               	movlw	high _EWLT_Count
  2291  00F970  6E2B               	movwf	drawtext@_text+1,c
  2292  00F972  0EFF               	movlw	255
  2293  00F974  6E2D               	movwf	drawtext@color+1,c
  2294  00F976  682C               	setf	drawtext@color,c
  2295  00F978  0E00               	movlw	0
  2296  00F97A  6E2F               	movwf	drawtext@bg+1,c
  2297  00F97C  0E00               	movlw	0
  2298  00F97E  6E2E               	movwf	drawtext@bg,c
  2299  00F980  0E02               	movlw	2
  2300  00F982  6E30               	movwf	drawtext@size,c
  2301  00F984  0E64               	movlw	100
  2302  00F986  EC75  F077         	call	_drawtext
  2303                           
  2304                           ;Lab8test.c: 240: strcpy(txt, "NORTH/SOUTH");
  2305  00F98A  C06C  F001         	movff	_txt,strcpy@to
  2306  00F98E  C06D  F002         	movff	_txt+1,strcpy@to+1
  2307  00F992  0EC2               	movlw	low STR_8
  2308  00F994  6E03               	movwf	strcpy@from,c
  2309  00F996  0EFF               	movlw	high STR_8
  2310  00F998  6E04               	movwf	strcpy@from+1,c
  2311  00F99A  ECFE  F074         	call	_strcpy	;wreg free
  2312                           
  2313                           ;Lab8test.c: 241: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2314  00F99E  0E50               	movlw	80
  2315  00F9A0  6E29               	movwf	drawtext@y,c
  2316  00F9A2  C06C  F02A         	movff	_txt,drawtext@_text
  2317  00F9A6  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2318  00F9AA  0E00               	movlw	0
  2319  00F9AC  6E2D               	movwf	drawtext@color+1,c
  2320  00F9AE  0E1F               	movlw	31
  2321  00F9B0  6E2C               	movwf	drawtext@color,c
  2322  00F9B2  0E00               	movlw	0
  2323  00F9B4  6E2F               	movwf	drawtext@bg+1,c
  2324  00F9B6  0E00               	movlw	0
  2325  00F9B8  6E2E               	movwf	drawtext@bg,c
  2326  00F9BA  0E01               	movlw	1
  2327  00F9BC  6E30               	movwf	drawtext@size,c
  2328  00F9BE  0E1E               	movlw	30
  2329  00F9C0  EC75  F077         	call	_drawtext
  2330                           
  2331                           ;Lab8test.c: 242: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2332  00F9C4  0E00               	movlw	0
  2333  00F9C6  6E14               	movwf	drawRect@x+1,c
  2334  00F9C8  0E1E               	movlw	30
  2335  00F9CA  6E13               	movwf	drawRect@x,c
  2336  00F9CC  0E00               	movlw	0
  2337  00F9CE  6E16               	movwf	drawRect@y+1,c
  2338  00F9D0  0E57               	movlw	87
  2339  00F9D2  6E15               	movwf	drawRect@y,c
  2340  00F9D4  0E00               	movlw	0
  2341  00F9D6  6E18               	movwf	drawRect@w+1,c
  2342  00F9D8  0E3C               	movlw	60
  2343  00F9DA  6E17               	movwf	drawRect@w,c
  2344  00F9DC  0E00               	movlw	0
  2345  00F9DE  6E1A               	movwf	drawRect@h+1,c
  2346  00F9E0  0E12               	movlw	18
  2347  00F9E2  6E19               	movwf	drawRect@h,c
  2348  00F9E4  0E00               	movlw	0
  2349  00F9E6  6E1C               	movwf	drawRect@color+1,c
  2350  00F9E8  0E1F               	movlw	31
  2351  00F9EA  6E1B               	movwf	drawRect@color,c
  2352  00F9EC  EC14  F076         	call	_drawRect	;wreg free
  2353                           
  2354                           ;Lab8test.c: 243: drawCircle(40, 80 + 15 , 7, 0xF800);
  2355  00F9F0  0E00               	movlw	0
  2356  00F9F2  6E0D               	movwf	drawCircle@x0+1,c
  2357  00F9F4  0E28               	movlw	40
  2358  00F9F6  6E0C               	movwf	drawCircle@x0,c
  2359  00F9F8  0E00               	movlw	0
  2360  00F9FA  6E0F               	movwf	drawCircle@y0+1,c
  2361  00F9FC  0E5F               	movlw	95
  2362  00F9FE  6E0E               	movwf	drawCircle@y0,c
  2363  00FA00  0E00               	movlw	0
  2364  00FA02  6E11               	movwf	drawCircle@r+1,c
  2365  00FA04  0E07               	movlw	7
  2366  00FA06  6E10               	movwf	drawCircle@r,c
  2367  00FA08  0EF8               	movlw	248
  2368  00FA0A  6E13               	movwf	drawCircle@color+1,c
  2369  00FA0C  0E00               	movlw	0
  2370  00FA0E  6E12               	movwf	drawCircle@color,c
  2371  00FA10  EC2C  F07A         	call	_drawCircle	;wreg free
  2372                           
  2373                           ;Lab8test.c: 244: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2374  00FA14  0E00               	movlw	0
  2375  00FA16  6E0D               	movwf	drawCircle@x0+1,c
  2376  00FA18  0E3C               	movlw	60
  2377  00FA1A  6E0C               	movwf	drawCircle@x0,c
  2378  00FA1C  0E00               	movlw	0
  2379  00FA1E  6E0F               	movwf	drawCircle@y0+1,c
  2380  00FA20  0E5F               	movlw	95
  2381  00FA22  6E0E               	movwf	drawCircle@y0,c
  2382  00FA24  0E00               	movlw	0
  2383  00FA26  6E11               	movwf	drawCircle@r+1,c
  2384  00FA28  0E07               	movlw	7
  2385  00FA2A  6E10               	movwf	drawCircle@r,c
  2386  00FA2C  0EFF               	movlw	255
  2387  00FA2E  6E13               	movwf	drawCircle@color+1,c
  2388  00FA30  0EE0               	movlw	224
  2389  00FA32  6E12               	movwf	drawCircle@color,c
  2390  00FA34  EC2C  F07A         	call	_drawCircle	;wreg free
  2391                           
  2392                           ;Lab8test.c: 245: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2393  00FA38  0E00               	movlw	0
  2394  00FA3A  6E2C               	movwf	fillCircle@x0+1,c
  2395  00FA3C  0E50               	movlw	80
  2396  00FA3E  6E2B               	movwf	fillCircle@x0,c
  2397  00FA40  0E00               	movlw	0
  2398  00FA42  6E2E               	movwf	fillCircle@y0+1,c
  2399  00FA44  0E5F               	movlw	95
  2400  00FA46  6E2D               	movwf	fillCircle@y0,c
  2401  00FA48  0E00               	movlw	0
  2402  00FA4A  6E30               	movwf	fillCircle@r+1,c
  2403  00FA4C  0E07               	movlw	7
  2404  00FA4E  6E2F               	movwf	fillCircle@r,c
  2405  00FA50  0E07               	movlw	7
  2406  00FA52  6E32               	movwf	fillCircle@color+1,c
  2407  00FA54  0EE0               	movlw	224
  2408  00FA56  6E31               	movwf	fillCircle@color,c
  2409  00FA58  ECEB  F075         	call	_fillCircle	;wreg free
  2410                           
  2411                           ;Lab8test.c: 246: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2412  00FA5C  0E5A               	movlw	90
  2413  00FA5E  6E29               	movwf	drawtext@y,c
  2414  00FA60  0E4F               	movlw	low _NS_Count
  2415  00FA62  6E2A               	movwf	drawtext@_text,c
  2416  00FA64  0E00               	movlw	high _NS_Count
  2417  00FA66  6E2B               	movwf	drawtext@_text+1,c
  2418  00FA68  0E00               	movlw	0
  2419  00FA6A  6E2D               	movwf	drawtext@color+1,c
  2420  00FA6C  0E1F               	movlw	31
  2421  00FA6E  6E2C               	movwf	drawtext@color,c
  2422  00FA70  0E00               	movlw	0
  2423  00FA72  6E2F               	movwf	drawtext@bg+1,c
  2424  00FA74  0E00               	movlw	0
  2425  00FA76  6E2E               	movwf	drawtext@bg,c
  2426  00FA78  0E02               	movlw	2
  2427  00FA7A  6E30               	movwf	drawtext@size,c
  2428  00FA7C  0E64               	movlw	100
  2429  00FA7E  EC75  F077         	call	_drawtext
  2430                           
  2431                           ;Lab8test.c: 249: strcpy(txt, "N/S LT");
  2432  00FA82  C06C  F001         	movff	_txt,strcpy@to
  2433  00FA86  C06D  F002         	movff	_txt+1,strcpy@to+1
  2434  00FA8A  0ED8               	movlw	low STR_9
  2435  00FA8C  6E03               	movwf	strcpy@from,c
  2436  00FA8E  0EFF               	movlw	high STR_9
  2437  00FA90  6E04               	movwf	strcpy@from+1,c
  2438  00FA92  ECFE  F074         	call	_strcpy	;wreg free
  2439                           
  2440                           ;Lab8test.c: 250: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2441  00FA96  0E6E               	movlw	110
  2442  00FA98  6E29               	movwf	drawtext@y,c
  2443  00FA9A  C06C  F02A         	movff	_txt,drawtext@_text
  2444  00FA9E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2445  00FAA2  0EF8               	movlw	248
  2446  00FAA4  6E2D               	movwf	drawtext@color+1,c
  2447  00FAA6  0E1F               	movlw	31
  2448  00FAA8  6E2C               	movwf	drawtext@color,c
  2449  00FAAA  0E00               	movlw	0
  2450  00FAAC  6E2F               	movwf	drawtext@bg+1,c
  2451  00FAAE  0E00               	movlw	0
  2452  00FAB0  6E2E               	movwf	drawtext@bg,c
  2453  00FAB2  0E01               	movlw	1
  2454  00FAB4  6E30               	movwf	drawtext@size,c
  2455  00FAB6  0E1E               	movlw	30
  2456  00FAB8  EC75  F077         	call	_drawtext
  2457                           
  2458                           ;Lab8test.c: 251: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2459  00FABC  0E00               	movlw	0
  2460  00FABE  6E14               	movwf	drawRect@x+1,c
  2461  00FAC0  0E1E               	movlw	30
  2462  00FAC2  6E13               	movwf	drawRect@x,c
  2463  00FAC4  0E00               	movlw	0
  2464  00FAC6  6E16               	movwf	drawRect@y+1,c
  2465  00FAC8  0E75               	movlw	117
  2466  00FACA  6E15               	movwf	drawRect@y,c
  2467  00FACC  0E00               	movlw	0
  2468  00FACE  6E18               	movwf	drawRect@w+1,c
  2469  00FAD0  0E3C               	movlw	60
  2470  00FAD2  6E17               	movwf	drawRect@w,c
  2471  00FAD4  0E00               	movlw	0
  2472  00FAD6  6E1A               	movwf	drawRect@h+1,c
  2473  00FAD8  0E12               	movlw	18
  2474  00FADA  6E19               	movwf	drawRect@h,c
  2475  00FADC  0EF8               	movlw	248
  2476  00FADE  6E1C               	movwf	drawRect@color+1,c
  2477  00FAE0  0E1F               	movlw	31
  2478  00FAE2  6E1B               	movwf	drawRect@color,c
  2479  00FAE4  EC14  F076         	call	_drawRect	;wreg free
  2480                           
  2481                           ;Lab8test.c: 252: fillCircle(40, 110 + 15, 7, 0xF800);
  2482  00FAE8  0E00               	movlw	0
  2483  00FAEA  6E2C               	movwf	fillCircle@x0+1,c
  2484  00FAEC  0E28               	movlw	40
  2485  00FAEE  6E2B               	movwf	fillCircle@x0,c
  2486  00FAF0  0E00               	movlw	0
  2487  00FAF2  6E2E               	movwf	fillCircle@y0+1,c
  2488  00FAF4  0E7D               	movlw	125
  2489  00FAF6  6E2D               	movwf	fillCircle@y0,c
  2490  00FAF8  0E00               	movlw	0
  2491  00FAFA  6E30               	movwf	fillCircle@r+1,c
  2492  00FAFC  0E07               	movlw	7
  2493  00FAFE  6E2F               	movwf	fillCircle@r,c
  2494  00FB00  0EF8               	movlw	248
  2495  00FB02  6E32               	movwf	fillCircle@color+1,c
  2496  00FB04  0E00               	movlw	0
  2497  00FB06  6E31               	movwf	fillCircle@color,c
  2498  00FB08  ECEB  F075         	call	_fillCircle	;wreg free
  2499                           
  2500                           ;Lab8test.c: 253: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2501  00FB0C  0E00               	movlw	0
  2502  00FB0E  6E0D               	movwf	drawCircle@x0+1,c
  2503  00FB10  0E3C               	movlw	60
  2504  00FB12  6E0C               	movwf	drawCircle@x0,c
  2505  00FB14  0E00               	movlw	0
  2506  00FB16  6E0F               	movwf	drawCircle@y0+1,c
  2507  00FB18  0E7D               	movlw	125
  2508  00FB1A  6E0E               	movwf	drawCircle@y0,c
  2509  00FB1C  0E00               	movlw	0
  2510  00FB1E  6E11               	movwf	drawCircle@r+1,c
  2511  00FB20  0E07               	movlw	7
  2512  00FB22  6E10               	movwf	drawCircle@r,c
  2513  00FB24  0EFF               	movlw	255
  2514  00FB26  6E13               	movwf	drawCircle@color+1,c
  2515  00FB28  0EE0               	movlw	224
  2516  00FB2A  6E12               	movwf	drawCircle@color,c
  2517  00FB2C  EC2C  F07A         	call	_drawCircle	;wreg free
  2518                           
  2519                           ;Lab8test.c: 254: drawCircle(80, 110 + 15, 7, 0x07E0);
  2520  00FB30  0E00               	movlw	0
  2521  00FB32  6E0D               	movwf	drawCircle@x0+1,c
  2522  00FB34  0E50               	movlw	80
  2523  00FB36  6E0C               	movwf	drawCircle@x0,c
  2524  00FB38  0E00               	movlw	0
  2525  00FB3A  6E0F               	movwf	drawCircle@y0+1,c
  2526  00FB3C  0E7D               	movlw	125
  2527  00FB3E  6E0E               	movwf	drawCircle@y0,c
  2528  00FB40  0E00               	movlw	0
  2529  00FB42  6E11               	movwf	drawCircle@r+1,c
  2530  00FB44  0E07               	movlw	7
  2531  00FB46  6E10               	movwf	drawCircle@r,c
  2532  00FB48  0E07               	movlw	7
  2533  00FB4A  6E13               	movwf	drawCircle@color+1,c
  2534  00FB4C  0EE0               	movlw	224
  2535  00FB4E  6E12               	movwf	drawCircle@color,c
  2536  00FB50  EC2C  F07A         	call	_drawCircle	;wreg free
  2537                           
  2538                           ;Lab8test.c: 255: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2539  00FB54  0E78               	movlw	120
  2540  00FB56  6E29               	movwf	drawtext@y,c
  2541  00FB58  0E4C               	movlw	low _NSLT_Count
  2542  00FB5A  6E2A               	movwf	drawtext@_text,c
  2543  00FB5C  0E00               	movlw	high _NSLT_Count
  2544  00FB5E  6E2B               	movwf	drawtext@_text+1,c
  2545  00FB60  0EF8               	movlw	248
  2546  00FB62  6E2D               	movwf	drawtext@color+1,c
  2547  00FB64  0E1F               	movlw	31
  2548  00FB66  6E2C               	movwf	drawtext@color,c
  2549  00FB68  0E00               	movlw	0
  2550  00FB6A  6E2F               	movwf	drawtext@bg+1,c
  2551  00FB6C  0E00               	movlw	0
  2552  00FB6E  6E2E               	movwf	drawtext@bg,c
  2553  00FB70  0E02               	movlw	2
  2554  00FB72  6E30               	movwf	drawtext@size,c
  2555  00FB74  0E64               	movlw	100
  2556  00FB76  EC75  F077         	call	_drawtext
  2557                           
  2558                           ;Lab8test.c: 259: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2559  00FB7A  0E1E               	movlw	30
  2560  00FB7C  6E29               	movwf	drawtext@y,c
  2561  00FB7E  0E52               	movlw	low _PED_EW_Count
  2562  00FB80  6E2A               	movwf	drawtext@_text,c
  2563  00FB82  0E00               	movlw	high _PED_EW_Count
  2564  00FB84  6E2B               	movwf	drawtext@_text+1,c
  2565  00FB86  0E07               	movlw	7
  2566  00FB88  6E2D               	movwf	drawtext@color+1,c
  2567  00FB8A  682C               	setf	drawtext@color,c
  2568  00FB8C  0E00               	movlw	0
  2569  00FB8E  6E2F               	movwf	drawtext@bg+1,c
  2570  00FB90  0E00               	movlw	0
  2571  00FB92  6E2E               	movwf	drawtext@bg,c
  2572  00FB94  0E02               	movlw	2
  2573  00FB96  6E30               	movwf	drawtext@size,c
  2574  00FB98  0E02               	movlw	2
  2575  00FB9A  EC75  F077         	call	_drawtext
  2576                           
  2577                           ;Lab8test.c: 260: strcpy(txt, "PEW");
  2578  00FB9E  C06C  F001         	movff	_txt,strcpy@to
  2579  00FBA2  C06D  F002         	movff	_txt+1,strcpy@to+1
  2580  00FBA6  0EF8               	movlw	low STR_10
  2581  00FBA8  6E03               	movwf	strcpy@from,c
  2582  00FBAA  0EFF               	movlw	high STR_10
  2583  00FBAC  6E04               	movwf	strcpy@from+1,c
  2584  00FBAE  ECFE  F074         	call	_strcpy	;wreg free
  2585                           
  2586                           ;Lab8test.c: 261: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2587  00FBB2  0E14               	movlw	20
  2588  00FBB4  6E29               	movwf	drawtext@y,c
  2589  00FBB6  C06C  F02A         	movff	_txt,drawtext@_text
  2590  00FBBA  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2591  00FBBE  0E07               	movlw	7
  2592  00FBC0  6E2D               	movwf	drawtext@color+1,c
  2593  00FBC2  682C               	setf	drawtext@color,c
  2594  00FBC4  0E00               	movlw	0
  2595  00FBC6  6E2F               	movwf	drawtext@bg+1,c
  2596  00FBC8  0E00               	movlw	0
  2597  00FBCA  6E2E               	movwf	drawtext@bg,c
  2598  00FBCC  0E01               	movlw	1
  2599  00FBCE  6E30               	movwf	drawtext@size,c
  2600  00FBD0  0E03               	movlw	3
  2601  00FBD2  EC75  F077         	call	_drawtext
  2602                           
  2603                           ;Lab8test.c: 264: strcpy(txt, "PNS");
  2604  00FBD6  C06C  F001         	movff	_txt,strcpy@to
  2605  00FBDA  C06D  F002         	movff	_txt+1,strcpy@to+1
  2606  00FBDE  0EF4               	movlw	low STR_11
  2607  00FBE0  6E03               	movwf	strcpy@from,c
  2608  00FBE2  0EFF               	movlw	high STR_11
  2609  00FBE4  6E04               	movwf	strcpy@from+1,c
  2610  00FBE6  ECFE  F074         	call	_strcpy	;wreg free
  2611                           
  2612                           ;Lab8test.c: 265: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2613  00FBEA  0E50               	movlw	80
  2614  00FBEC  6E29               	movwf	drawtext@y,c
  2615  00FBEE  C06C  F02A         	movff	_txt,drawtext@_text
  2616  00FBF2  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2617  00FBF6  0E00               	movlw	0
  2618  00FBF8  6E2D               	movwf	drawtext@color+1,c
  2619  00FBFA  0E1F               	movlw	31
  2620  00FBFC  6E2C               	movwf	drawtext@color,c
  2621  00FBFE  0E00               	movlw	0
  2622  00FC00  6E2F               	movwf	drawtext@bg+1,c
  2623  00FC02  0E00               	movlw	0
  2624  00FC04  6E2E               	movwf	drawtext@bg,c
  2625  00FC06  0E01               	movlw	1
  2626  00FC08  6E30               	movwf	drawtext@size,c
  2627  00FC0A  0E03               	movlw	3
  2628  00FC0C  EC75  F077         	call	_drawtext
  2629                           
  2630                           ;Lab8test.c: 266: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2631  00FC10  0E5A               	movlw	90
  2632  00FC12  6E29               	movwf	drawtext@y,c
  2633  00FC14  0E55               	movlw	low _PED_NS_Count
  2634  00FC16  6E2A               	movwf	drawtext@_text,c
  2635  00FC18  0E00               	movlw	high _PED_NS_Count
  2636  00FC1A  6E2B               	movwf	drawtext@_text+1,c
  2637  00FC1C  0E00               	movlw	0
  2638  00FC1E  6E2D               	movwf	drawtext@color+1,c
  2639  00FC20  0E1F               	movlw	31
  2640  00FC22  6E2C               	movwf	drawtext@color,c
  2641  00FC24  0E00               	movlw	0
  2642  00FC26  6E2F               	movwf	drawtext@bg+1,c
  2643  00FC28  0E00               	movlw	0
  2644  00FC2A  6E2E               	movwf	drawtext@bg,c
  2645  00FC2C  0E02               	movlw	2
  2646  00FC2E  6E30               	movwf	drawtext@size,c
  2647  00FC30  0E02               	movlw	2
  2648  00FC32  EC75  F077         	call	_drawtext
  2649                           
  2650                           ;Lab8test.c: 269: strcpy(txt, "EWP EWLT NSP NSLT MD");
  2651  00FC36  C06C  F001         	movff	_txt,strcpy@to
  2652  00FC3A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2653  00FC3E  0E76               	movlw	low STR_12
  2654  00FC40  6E03               	movwf	strcpy@from,c
  2655  00FC42  0EFF               	movlw	high STR_12
  2656  00FC44  6E04               	movwf	strcpy@from+1,c
  2657  00FC46  ECFE  F074         	call	_strcpy	;wreg free
  2658                           
  2659                           ;Lab8test.c: 270: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2660  00FC4A  0E8C               	movlw	140
  2661  00FC4C  6E29               	movwf	drawtext@y,c
  2662  00FC4E  C06C  F02A         	movff	_txt,drawtext@_text
  2663  00FC52  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2664  00FC56  0EFF               	movlw	255
  2665  00FC58  6E2D               	movwf	drawtext@color+1,c
  2666  00FC5A  682C               	setf	drawtext@color,c
  2667  00FC5C  0E00               	movlw	0
  2668  00FC5E  6E2F               	movwf	drawtext@bg+1,c
  2669  00FC60  0E00               	movlw	0
  2670  00FC62  6E2E               	movwf	drawtext@bg,c
  2671  00FC64  0E01               	movlw	1
  2672  00FC66  6E30               	movwf	drawtext@size,c
  2673  00FC68  0E01               	movlw	1
  2674  00FC6A  EC75  F077         	call	_drawtext
  2675                           
  2676                           ;Lab8test.c: 271: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2677  00FC6E  0E95               	movlw	149
  2678  00FC70  6E29               	movwf	drawtext@y,c
  2679  00FC72  0E60               	movlw	low _SW_EWPED_Txt
  2680  00FC74  6E2A               	movwf	drawtext@_text,c
  2681  00FC76  0E00               	movlw	high _SW_EWPED_Txt
  2682  00FC78  6E2B               	movwf	drawtext@_text+1,c
  2683  00FC7A  0EFF               	movlw	255
  2684  00FC7C  6E2D               	movwf	drawtext@color+1,c
  2685  00FC7E  682C               	setf	drawtext@color,c
  2686  00FC80  0E00               	movlw	0
  2687  00FC82  6E2F               	movwf	drawtext@bg+1,c
  2688  00FC84  0E00               	movlw	0
  2689  00FC86  6E2E               	movwf	drawtext@bg,c
  2690  00FC88  0E01               	movlw	1
  2691  00FC8A  6E30               	movwf	drawtext@size,c
  2692  00FC8C  0E06               	movlw	6
  2693  00FC8E  EC75  F077         	call	_drawtext
  2694                           
  2695                           ;Lab8test.c: 272: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2696  00FC92  0E95               	movlw	149
  2697  00FC94  6E29               	movwf	drawtext@y,c
  2698  00FC96  0E5E               	movlw	low _SW_EWLT_Txt
  2699  00FC98  6E2A               	movwf	drawtext@_text,c
  2700  00FC9A  0E00               	movlw	high _SW_EWLT_Txt
  2701  00FC9C  6E2B               	movwf	drawtext@_text+1,c
  2702  00FC9E  0EFF               	movlw	255
  2703  00FCA0  6E2D               	movwf	drawtext@color+1,c
  2704  00FCA2  682C               	setf	drawtext@color,c
  2705  00FCA4  0E00               	movlw	0
  2706  00FCA6  6E2F               	movwf	drawtext@bg+1,c
  2707  00FCA8  0E00               	movlw	0
  2708  00FCAA  6E2E               	movwf	drawtext@bg,c
  2709  00FCAC  0E01               	movlw	1
  2710  00FCAE  6E30               	movwf	drawtext@size,c
  2711  00FCB0  0E20               	movlw	32
  2712  00FCB2  EC75  F077         	call	_drawtext
  2713                           
  2714                           ;Lab8test.c: 273: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2715  00FCB6  0E95               	movlw	149
  2716  00FCB8  6E29               	movwf	drawtext@y,c
  2717  00FCBA  0E66               	movlw	low _SW_NSPED_Txt
  2718  00FCBC  6E2A               	movwf	drawtext@_text,c
  2719  00FCBE  0E00               	movlw	high _SW_NSPED_Txt
  2720  00FCC0  6E2B               	movwf	drawtext@_text+1,c
  2721  00FCC2  0EFF               	movlw	255
  2722  00FCC4  6E2D               	movwf	drawtext@color+1,c
  2723  00FCC6  682C               	setf	drawtext@color,c
  2724  00FCC8  0E00               	movlw	0
  2725  00FCCA  6E2F               	movwf	drawtext@bg+1,c
  2726  00FCCC  0E00               	movlw	0
  2727  00FCCE  6E2E               	movwf	drawtext@bg,c
  2728  00FCD0  0E01               	movlw	1
  2729  00FCD2  6E30               	movwf	drawtext@size,c
  2730  00FCD4  0E3A               	movlw	58
  2731  00FCD6  EC75  F077         	call	_drawtext
  2732                           
  2733                           ;Lab8test.c: 274: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2734  00FCDA  0E95               	movlw	149
  2735  00FCDC  6E29               	movwf	drawtext@y,c
  2736  00FCDE  0E64               	movlw	low _SW_NSLT_Txt
  2737  00FCE0  6E2A               	movwf	drawtext@_text,c
  2738  00FCE2  0E00               	movlw	high _SW_NSLT_Txt
  2739  00FCE4  6E2B               	movwf	drawtext@_text+1,c
  2740  00FCE6  0EFF               	movlw	255
  2741  00FCE8  6E2D               	movwf	drawtext@color+1,c
  2742  00FCEA  682C               	setf	drawtext@color,c
  2743  00FCEC  0E00               	movlw	0
  2744  00FCEE  6E2F               	movwf	drawtext@bg+1,c
  2745  00FCF0  0E00               	movlw	0
  2746  00FCF2  6E2E               	movwf	drawtext@bg,c
  2747  00FCF4  0E01               	movlw	1
  2748  00FCF6  6E30               	movwf	drawtext@size,c
  2749  00FCF8  0E57               	movlw	87
  2750  00FCFA  EC75  F077         	call	_drawtext
  2751                           
  2752                           ;Lab8test.c: 276: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2753  00FCFE  0E95               	movlw	149
  2754  00FD00  6E29               	movwf	drawtext@y,c
  2755  00FD02  0E62               	movlw	low _SW_MODE_Txt
  2756  00FD04  6E2A               	movwf	drawtext@_text,c
  2757  00FD06  0E00               	movlw	high _SW_MODE_Txt
  2758  00FD08  6E2B               	movwf	drawtext@_text+1,c
  2759  00FD0A  0EFF               	movlw	255
  2760  00FD0C  6E2D               	movwf	drawtext@color+1,c
  2761  00FD0E  682C               	setf	drawtext@color,c
  2762  00FD10  0E00               	movlw	0
  2763  00FD12  6E2F               	movwf	drawtext@bg+1,c
  2764  00FD14  0E00               	movlw	0
  2765  00FD16  6E2E               	movwf	drawtext@bg,c
  2766  00FD18  0E01               	movlw	1
  2767  00FD1A  6E30               	movwf	drawtext@size,c
  2768  00FD1C  0E70               	movlw	112
  2769  00FD1E  EC75  F077         	call	_drawtext
  2770  00FD22  0012               	return		;funcret
  2771  00FD24                     __end_of_Initialize_Screen:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodl	equ	0xFF3
  2778                           intcon2	equ	0xFF1
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           postdec1	equ	0xFE5
  2782                           fsr1l	equ	0xFE1
  2783                           
  2784 ;; *************** function _strcpy *****************
  2785 ;; Defined at:
  2786 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  to              2    0[COMRAM] PTR unsigned char 
  2789 ;;		 -> NULL(0), buffer(31), 
  2790 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2791 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
  2792 ;;		 -> STR_8(12), STR_7(7), STR_6(10), STR_5(2), 
  2793 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(20), 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2796 ;;		 -> NULL(0), buffer(31), 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  2    0[COMRAM] PTR unsigned char 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        6 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_Initialize_Screen
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text5
  2820  00E9FC                     __ptext5:
  2821                           	opt stack 0
  2822  00E9FC                     _strcpy:
  2823                           	opt stack 29
  2824                           
  2825                           ;incstack = 0
  2826  00E9FC  C001  F005         	movff	strcpy@to,strcpy@cp
  2827  00EA00  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  2828  00EA04  D005               	goto	l2953
  2829  00EA06                     l2951:
  2830  00EA06  4A05               	infsnz	strcpy@cp,f,c
  2831  00EA08  2A06               	incf	strcpy@cp+1,f,c
  2832  00EA0A  4A03               	infsnz	strcpy@from,f,c
  2833  00EA0C  2A04               	incf	strcpy@from+1,f,c
  2834  00EA0E  D000               	goto	l2953
  2835  00EA10                     l2953:
  2836  00EA10  C003  FFF6         	movff	strcpy@from,tblptrl
  2837  00EA14  C004  FFF7         	movff	strcpy@from+1,tblptrh
  2838  00EA18                     	if	0	;tblptru may be non-zero
  2839  00EA18                     	endif
  2840  00EA18                     	if	0	;tblptru may be non-zero
  2841  00EA18                     	endif
  2842  00EA18  C005  FFD9         	movff	strcpy@cp,fsr2l
  2843  00EA1C  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  2844  00EA20  0008               	tblrd		*
  2845  00EA22  CFF5 FFDF          	movff	tablat,indf2
  2846  00EA26  50DF               	movf	indf2,w,c
  2847  00EA28  A4D8               	btfss	status,2,c
  2848  00EA2A  D7ED               	goto	l2951
  2849                           
  2850                           ;	Return value of _strcpy is never used
  2851  00EA2C  0012               	return		;funcret
  2852  00EA2E                     __end_of_strcpy:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodl	equ	0xFF3
  2859                           intcon2	equ	0xFF1
  2860                           postinc0	equ	0xFEE
  2861                           wreg	equ	0xFE8
  2862                           postdec1	equ	0xFE5
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _fillScreen *****************
  2870 ;; Defined at:
  2871 ;;		line 656 in file "ST7735_TFT.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  color           2   19[COMRAM] unsigned int 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;		None
  2876 ;; Return value:  Size  Location     Type
  2877 ;;		None               void
  2878 ;; Registers used:
  2879 ;;		wreg, status,2, status,0, cstack
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;Total ram usage:        2 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    4
  2892 ;; This function calls:
  2893 ;;		_fillRectangle
  2894 ;; This function is called by:
  2895 ;;		_Initialize_Screen
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text6
  2900  00E910                     __ptext6:
  2901                           	opt stack 0
  2902  00E910                     _fillScreen:
  2903                           	opt stack 25
  2904                           
  2905                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  2906                           
  2907                           ;incstack = 0
  2908  00E910  0E00               	movlw	0
  2909  00E912  6E08               	movwf	fillRectangle@y,c
  2910  00E914  0E80               	movlw	128
  2911  00E916  6E09               	movwf	fillRectangle@w,c
  2912  00E918  0EA0               	movlw	160
  2913  00E91A  6E0A               	movwf	fillRectangle@h,c
  2914  00E91C  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  2915  00E920  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  2916  00E924  0E00               	movlw	0
  2917  00E926  EC07  F077         	call	_fillRectangle
  2918  00E92A  0012               	return		;funcret
  2919  00E92C                     __end_of_fillScreen:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodl	equ	0xFF3
  2926                           intcon2	equ	0xFF1
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           indf2	equ	0xFDF
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _fillRectangle *****************
  2937 ;; Defined at:
  2938 ;;		line 540 in file "ST7735_TFT.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  x               1    wreg     unsigned char 
  2941 ;;  y               1    7[COMRAM] unsigned char 
  2942 ;;  w               1    8[COMRAM] unsigned char 
  2943 ;;  h               1    9[COMRAM] unsigned char 
  2944 ;;  color           2   10[COMRAM] unsigned int 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  x               1   18[COMRAM] unsigned char 
  2947 ;;  lo              1   17[COMRAM] unsigned char 
  2948 ;;  hi              1   16[COMRAM] unsigned char 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;		None               void
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2958 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;Total ram usage:       12 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    3
  2965 ;; This function calls:
  2966 ;;		_setAddrWindow
  2967 ;;		_spiwrite
  2968 ;; This function is called by:
  2969 ;;		_fillScreen
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text7
  2974  00EE0E                     __ptext7:
  2975                           	opt stack 0
  2976  00EE0E                     _fillRectangle:
  2977                           	opt stack 25
  2978                           
  2979                           ;incstack = 0
  2980                           ;fillRectangle@x stored from wreg
  2981  00EE0E  6E13               	movwf	fillRectangle@x,c
  2982                           
  2983                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  2984                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  2985  00EE10  0E80               	movlw	128
  2986  00EE12  6013               	cpfslt	fillRectangle@x,c
  2987  00EE14  D069               	goto	l234
  2988  00EE16  0E9F               	movlw	159
  2989  00EE18  6408               	cpfsgt	fillRectangle@y,c
  2990  00EE1A  D001               	goto	l2729
  2991                           
  2992                           ;ST7735_TFT.c: 544: return;
  2993  00EE1C  D065               	goto	l234
  2994  00EE1E                     l2729:
  2995                           
  2996                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  2997  00EE1E  0EFF               	movlw	255
  2998  00EE20  6E0D               	movwf	??_fillRectangle& (0+255),c
  2999  00EE22  0EFF               	movlw	255
  3000  00EE24  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3001  00EE26  5009               	movf	fillRectangle@w,w,c
  3002  00EE28  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3003  00EE2C  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3004  00EE2E  260F               	addwf	??_fillRectangle+2,f,c
  3005  00EE30  0E00               	movlw	0
  3006  00EE32  2210               	addwfc	??_fillRectangle+3,f,c
  3007  00EE34  500D               	movf	??_fillRectangle,w,c
  3008  00EE36  260F               	addwf	??_fillRectangle+2,f,c
  3009  00EE38  500E               	movf	??_fillRectangle+1,w,c
  3010  00EE3A  2210               	addwfc	??_fillRectangle+3,f,c
  3011  00EE3C  BE10               	btfsc	??_fillRectangle+3,7,c
  3012  00EE3E  D00A               	goto	l235
  3013  00EE40  5010               	movf	??_fillRectangle+3,w,c
  3014  00EE42  E104               	bnz	u1220
  3015  00EE44  0E80               	movlw	128
  3016  00EE46  5C0F               	subwf	??_fillRectangle+2,w,c
  3017  00EE48  A0D8               	btfss	status,0,c
  3018  00EE4A  D004               	goto	l235
  3019  00EE4C                     u1220:
  3020                           
  3021                           ;ST7735_TFT.c: 546: w = 128 - x;
  3022  00EE4C  5013               	movf	fillRectangle@x,w,c
  3023  00EE4E  0800               	sublw	0
  3024  00EE50  0F80               	addlw	128
  3025  00EE52  6E09               	movwf	fillRectangle@w,c
  3026  00EE54                     l235:
  3027                           
  3028                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  3029  00EE54  0EFF               	movlw	255
  3030  00EE56  6E0D               	movwf	??_fillRectangle& (0+255),c
  3031  00EE58  0EFF               	movlw	255
  3032  00EE5A  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3033  00EE5C  500A               	movf	fillRectangle@h,w,c
  3034  00EE5E  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3035  00EE62  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3036  00EE64  260F               	addwf	??_fillRectangle+2,f,c
  3037  00EE66  0E00               	movlw	0
  3038  00EE68  2210               	addwfc	??_fillRectangle+3,f,c
  3039  00EE6A  500D               	movf	??_fillRectangle,w,c
  3040  00EE6C  260F               	addwf	??_fillRectangle+2,f,c
  3041  00EE6E  500E               	movf	??_fillRectangle+1,w,c
  3042  00EE70  2210               	addwfc	??_fillRectangle+3,f,c
  3043  00EE72  BE10               	btfsc	??_fillRectangle+3,7,c
  3044  00EE74  D00B               	goto	l2735
  3045  00EE76  5010               	movf	??_fillRectangle+3,w,c
  3046  00EE78  E104               	bnz	u1230
  3047  00EE7A  0EA0               	movlw	160
  3048  00EE7C  5C0F               	subwf	??_fillRectangle+2,w,c
  3049  00EE7E  A0D8               	btfss	status,0,c
  3050  00EE80  D005               	goto	l2735
  3051  00EE82                     u1230:
  3052                           
  3053                           ;ST7735_TFT.c: 548: h = 160 - y;
  3054  00EE82  5008               	movf	fillRectangle@y,w,c
  3055  00EE84  0800               	sublw	0
  3056  00EE86  0FA0               	addlw	160
  3057  00EE88  6E0A               	movwf	fillRectangle@h,c
  3058  00EE8A  D000               	goto	l2735
  3059  00EE8C                     l2735:
  3060                           
  3061                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  3062  00EE8C  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3063  00EE90  5013               	movf	fillRectangle@x,w,c
  3064  00EE92  2409               	addwf	fillRectangle@w,w,c
  3065  00EE94  6E0D               	movwf	??_fillRectangle& (0+255),c
  3066  00EE96  040D               	decf	??_fillRectangle,w,c
  3067  00EE98  6E05               	movwf	setAddrWindow@x1,c
  3068  00EE9A  5008               	movf	fillRectangle@y,w,c
  3069  00EE9C  240A               	addwf	fillRectangle@h,w,c
  3070  00EE9E  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3071  00EEA0  040E               	decf	??_fillRectangle+1,w,c
  3072  00EEA2  6E06               	movwf	setAddrWindow@y1,c
  3073  00EEA4  5013               	movf	fillRectangle@x,w,c
  3074  00EEA6  EC9B  F075         	call	_setAddrWindow
  3075                           
  3076                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  3077  00EEAA  500C               	movf	fillRectangle@color+1,w,c
  3078  00EEAC  6E11               	movwf	fillRectangle@hi,c
  3079  00EEAE  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3080                           
  3081                           ;ST7735_TFT.c: 551: PORTCbits.RC2 = 1;
  3082  00EEB2  8482               	bsf	3970,2,c	;volatile
  3083                           
  3084                           ;ST7735_TFT.c: 552: PORTCbits.RC4 = 0;
  3085  00EEB4  9882               	bcf	3970,4,c	;volatile
  3086                           
  3087                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  3088  00EEB6  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3089  00EEBA                     l2747:
  3090  00EEBA  5008               	movf	fillRectangle@y,w,c
  3091  00EEBC  B4D8               	btfsc	status,2,c
  3092  00EEBE  D013               	goto	l238
  3093  00EEC0  D001               	goto	l237
  3094  00EEC2  D011               	goto	l238
  3095  00EEC4                     l237:
  3096                           
  3097                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  3098  00EEC4  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3099  00EEC8                     l2751:
  3100  00EEC8  5013               	movf	fillRectangle@x,w,c
  3101  00EECA  B4D8               	btfsc	status,2,c
  3102  00EECC  D00A               	goto	l2761
  3103  00EECE  D001               	goto	l2755
  3104  00EED0  D008               	goto	l2761
  3105  00EED2                     l2755:
  3106                           
  3107                           ;ST7735_TFT.c: 556: spiwrite(hi);
  3108  00EED2  5011               	movf	fillRectangle@hi,w,c
  3109  00EED4  EC69  F074         	call	_spiwrite
  3110                           
  3111                           ;ST7735_TFT.c: 557: spiwrite(lo);
  3112  00EED8  5012               	movf	fillRectangle@lo,w,c
  3113  00EEDA  EC69  F074         	call	_spiwrite
  3114  00EEDE  0613               	decf	fillRectangle@x,f,c
  3115  00EEE0  D7F3               	goto	l2751
  3116  00EEE2                     l2761:
  3117  00EEE2  0608               	decf	fillRectangle@y,f,c
  3118  00EEE4  D7EA               	goto	l2747
  3119  00EEE6                     l238:
  3120                           
  3121                           ;ST7735_TFT.c: 558: }
  3122                           ;ST7735_TFT.c: 559: }
  3123                           ;ST7735_TFT.c: 560: PORTCbits.RC4 = 1;
  3124  00EEE6  8882               	bsf	3970,4,c	;volatile
  3125  00EEE8                     l234:
  3126  00EEE8  0012               	return		;funcret
  3127  00EEEA                     __end_of_fillRectangle:
  3128                           	opt stack 0
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           prodl	equ	0xFF3
  3134                           intcon2	equ	0xFF1
  3135                           postinc0	equ	0xFEE
  3136                           wreg	equ	0xFE8
  3137                           postdec1	equ	0xFE5
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _fillCircle *****************
  3145 ;; Defined at:
  3146 ;;		line 651 in file "ST7735_TFT.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  x0              2   42[COMRAM] int 
  3149 ;;  y0              2   44[COMRAM] int 
  3150 ;;  r               2   46[COMRAM] int 
  3151 ;;  color           2   48[COMRAM] unsigned int 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3163 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;Total ram usage:        8 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    5
  3170 ;; This function calls:
  3171 ;;		_drawFastVLine
  3172 ;;		_fillCircleHelper
  3173 ;; This function is called by:
  3174 ;;		_Initialize_Screen
  3175 ;;		_update_LCD_color
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text8
  3180  00EBD6                     __ptext8:
  3181                           	opt stack 0
  3182  00EBD6                     _fillCircle:
  3183                           	opt stack 24
  3184                           
  3185                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3186                           
  3187                           ;incstack = 0
  3188  00EBD6  502F               	movf	fillCircle@r,w,c
  3189  00EBD8  0800               	sublw	0
  3190  00EBDA  242D               	addwf	fillCircle@y0,w,c
  3191  00EBDC  6E08               	movwf	drawFastVLine@y,c
  3192  00EBDE  80D8               	bsf	status,0,c
  3193  00EBE0  342F               	rlcf	fillCircle@r,w,c
  3194  00EBE2  6E09               	movwf	drawFastVLine@h,c
  3195  00EBE4  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  3196  00EBE8  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3197  00EBEC  502B               	movf	fillCircle@x0,w,c
  3198  00EBEE  ECC3  F076         	call	_drawFastVLine
  3199                           
  3200                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  3201  00EBF2  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  3202  00EBF6  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3203  00EBFA  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  3204  00EBFE  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3205  00EC02  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  3206  00EC06  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3207  00EC0A  0E00               	movlw	0
  3208  00EC0C  6E1A               	movwf	fillCircleHelper@cornername+1,c
  3209  00EC0E  0E03               	movlw	3
  3210  00EC10  6E19               	movwf	fillCircleHelper@cornername,c
  3211  00EC12  0E00               	movlw	0
  3212  00EC14  6E1C               	movwf	fillCircleHelper@delta+1,c
  3213  00EC16  0E00               	movlw	0
  3214  00EC18  6E1B               	movwf	fillCircleHelper@delta,c
  3215  00EC1A  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  3216  00EC1E  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3217  00EC22  ECE5  F078         	call	_fillCircleHelper	;wreg free
  3218  00EC26  0012               	return		;funcret
  3219  00EC28                     __end_of_fillCircle:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodl	equ	0xFF3
  3226                           intcon2	equ	0xFF1
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           fsr2h	equ	0xFDA
  3233                           fsr2l	equ	0xFD9
  3234                           status	equ	0xFD8
  3235                           
  3236 ;; *************** function _fillCircleHelper *****************
  3237 ;; Defined at:
  3238 ;;		line 626 in file "ST7735_TFT.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  x0              2   18[COMRAM] int 
  3241 ;;  y0              2   20[COMRAM] int 
  3242 ;;  r               2   22[COMRAM] int 
  3243 ;;  cornername      2   24[COMRAM] unsigned int 
  3244 ;;  delta           2   26[COMRAM] int 
  3245 ;;  color           2   28[COMRAM] unsigned int 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  y               2   40[COMRAM] int 
  3248 ;;  x               2   38[COMRAM] int 
  3249 ;;  f               2   36[COMRAM] int 
  3250 ;;  ddF_y           2   34[COMRAM] int 
  3251 ;;  ddF_x           2   32[COMRAM] int 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;		None               void
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3261 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;Total ram usage:       24 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    4
  3268 ;; This function calls:
  3269 ;;		_drawFastVLine
  3270 ;; This function is called by:
  3271 ;;		_fillCircle
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text9
  3276  00F1CA                     __ptext9:
  3277                           	opt stack 0
  3278  00F1CA                     _fillCircleHelper:
  3279                           	opt stack 24
  3280                           
  3281                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  3282                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3283                           
  3284                           ;incstack = 0
  3285  00F1CA  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3286  00F1CE  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3287  00F1D2  1E1F               	comf	??_fillCircleHelper,f,c
  3288  00F1D4  1E20               	comf	??_fillCircleHelper+1,f,c
  3289  00F1D6  4A1F               	infsnz	??_fillCircleHelper,f,c
  3290  00F1D8  2A20               	incf	??_fillCircleHelper+1,f,c
  3291  00F1DA  0E01               	movlw	1
  3292  00F1DC  241F               	addwf	??_fillCircleHelper,w,c
  3293  00F1DE  6E25               	movwf	fillCircleHelper@f,c
  3294  00F1E0  0E00               	movlw	0
  3295  00F1E2  2020               	addwfc	??_fillCircleHelper+1,w,c
  3296  00F1E4  6E26               	movwf	fillCircleHelper@f+1,c
  3297  00F1E6  0E00               	movlw	0
  3298  00F1E8  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  3299  00F1EA  0E01               	movlw	1
  3300  00F1EC  6E21               	movwf	fillCircleHelper@ddF_x,c
  3301  00F1EE  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3302  00F1F2  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3303  00F1F6  90D8               	bcf	status,0,c
  3304  00F1F8  361F               	rlcf	??_fillCircleHelper,f,c
  3305  00F1FA  3620               	rlcf	??_fillCircleHelper+1,f,c
  3306  00F1FC  1E1F               	comf	??_fillCircleHelper,f,c
  3307  00F1FE  1E20               	comf	??_fillCircleHelper+1,f,c
  3308  00F200  4A1F               	infsnz	??_fillCircleHelper,f,c
  3309  00F202  2A20               	incf	??_fillCircleHelper+1,f,c
  3310  00F204  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3311  00F208  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3312  00F20C  0E00               	movlw	0
  3313  00F20E  6E28               	movwf	fillCircleHelper@x+1,c
  3314  00F210  0E00               	movlw	0
  3315  00F212  6E27               	movwf	fillCircleHelper@x,c
  3316  00F214  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  3317  00F218  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3318                           
  3319                           ;ST7735_TFT.c: 630: while (x<y) {
  3320  00F21C  D067               	goto	l2795
  3321  00F21E                     l2775:
  3322                           
  3323                           ;ST7735_TFT.c: 631: if (f >= 0) {
  3324  00F21E  BE26               	btfsc	fillCircleHelper@f+1,7,c
  3325  00F220  D00B               	goto	l263
  3326                           
  3327                           ;ST7735_TFT.c: 632: y--;
  3328  00F222  0629               	decf	fillCircleHelper@y,f,c
  3329  00F224  A0D8               	btfss	status,0,c
  3330  00F226  062A               	decf	fillCircleHelper@y+1,f,c
  3331                           
  3332                           ;ST7735_TFT.c: 633: ddF_y += 2;
  3333  00F228  0E02               	movlw	2
  3334  00F22A  2623               	addwf	fillCircleHelper@ddF_y,f,c
  3335  00F22C  0E00               	movlw	0
  3336  00F22E  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3337                           
  3338                           ;ST7735_TFT.c: 634: f += ddF_y;
  3339  00F230  5023               	movf	fillCircleHelper@ddF_y,w,c
  3340  00F232  2625               	addwf	fillCircleHelper@f,f,c
  3341  00F234  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  3342  00F236  2226               	addwfc	fillCircleHelper@f+1,f,c
  3343  00F238                     l263:
  3344                           
  3345                           ;ST7735_TFT.c: 635: }
  3346                           ;ST7735_TFT.c: 636: x++;
  3347  00F238  4A27               	infsnz	fillCircleHelper@x,f,c
  3348  00F23A  2A28               	incf	fillCircleHelper@x+1,f,c
  3349                           
  3350                           ;ST7735_TFT.c: 637: ddF_x += 2;
  3351  00F23C  0E02               	movlw	2
  3352  00F23E  2621               	addwf	fillCircleHelper@ddF_x,f,c
  3353  00F240  0E00               	movlw	0
  3354  00F242  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3355                           
  3356                           ;ST7735_TFT.c: 638: f += ddF_x;
  3357  00F244  5021               	movf	fillCircleHelper@ddF_x,w,c
  3358  00F246  2625               	addwf	fillCircleHelper@f,f,c
  3359  00F248  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  3360  00F24A  2226               	addwfc	fillCircleHelper@f+1,f,c
  3361                           
  3362                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  3363  00F24C  A019               	btfss	fillCircleHelper@cornername,0,c
  3364  00F24E  D025               	goto	l2791
  3365                           
  3366                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3367  00F250  5029               	movf	fillCircleHelper@y,w,c
  3368  00F252  0800               	sublw	0
  3369  00F254  2415               	addwf	fillCircleHelper@y0,w,c
  3370  00F256  6E08               	movwf	drawFastVLine@y,c
  3371  00F258  5029               	movf	fillCircleHelper@y,w,c
  3372  00F25A  2429               	addwf	fillCircleHelper@y,w,c
  3373  00F25C  241B               	addwf	fillCircleHelper@delta,w,c
  3374  00F25E  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  3375  00F260  281F               	incf	??_fillCircleHelper,w,c
  3376  00F262  6E09               	movwf	drawFastVLine@h,c
  3377  00F264  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  3378  00F268  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3379  00F26C  5013               	movf	fillCircleHelper@x0,w,c
  3380  00F26E  2427               	addwf	fillCircleHelper@x,w,c
  3381  00F270  ECC3  F076         	call	_drawFastVLine
  3382                           
  3383                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3384  00F274  5027               	movf	fillCircleHelper@x,w,c
  3385  00F276  0800               	sublw	0
  3386  00F278  2415               	addwf	fillCircleHelper@y0,w,c
  3387  00F27A  6E08               	movwf	drawFastVLine@y,c
  3388  00F27C  5027               	movf	fillCircleHelper@x,w,c
  3389  00F27E  2427               	addwf	fillCircleHelper@x,w,c
  3390  00F280  241B               	addwf	fillCircleHelper@delta,w,c
  3391  00F282  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  3392  00F284  281F               	incf	??_fillCircleHelper,w,c
  3393  00F286  6E09               	movwf	drawFastVLine@h,c
  3394  00F288  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  3395  00F28C  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3396  00F290  5013               	movf	fillCircleHelper@x0,w,c
  3397  00F292  2429               	addwf	fillCircleHelper@y,w,c
  3398  00F294  ECC3  F076         	call	_drawFastVLine
  3399  00F298  D000               	goto	l2791
  3400  00F29A                     l2791:
  3401                           
  3402                           ;ST7735_TFT.c: 643: }
  3403                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  3404  00F29A  A219               	btfss	fillCircleHelper@cornername,1,c
  3405  00F29C  D027               	goto	l2795
  3406                           
  3407                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3408  00F29E  5029               	movf	fillCircleHelper@y,w,c
  3409  00F2A0  0800               	sublw	0
  3410  00F2A2  2415               	addwf	fillCircleHelper@y0,w,c
  3411  00F2A4  6E08               	movwf	drawFastVLine@y,c
  3412  00F2A6  5029               	movf	fillCircleHelper@y,w,c
  3413  00F2A8  2429               	addwf	fillCircleHelper@y,w,c
  3414  00F2AA  241B               	addwf	fillCircleHelper@delta,w,c
  3415  00F2AC  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  3416  00F2AE  281F               	incf	??_fillCircleHelper,w,c
  3417  00F2B0  6E09               	movwf	drawFastVLine@h,c
  3418  00F2B2  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  3419  00F2B6  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3420  00F2BA  5027               	movf	fillCircleHelper@x,w,c
  3421  00F2BC  0800               	sublw	0
  3422  00F2BE  2413               	addwf	fillCircleHelper@x0,w,c
  3423  00F2C0  ECC3  F076         	call	_drawFastVLine
  3424                           
  3425                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3426  00F2C4  5027               	movf	fillCircleHelper@x,w,c
  3427  00F2C6  0800               	sublw	0
  3428  00F2C8  2415               	addwf	fillCircleHelper@y0,w,c
  3429  00F2CA  6E08               	movwf	drawFastVLine@y,c
  3430  00F2CC  5027               	movf	fillCircleHelper@x,w,c
  3431  00F2CE  2427               	addwf	fillCircleHelper@x,w,c
  3432  00F2D0  241B               	addwf	fillCircleHelper@delta,w,c
  3433  00F2D2  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  3434  00F2D4  281F               	incf	??_fillCircleHelper,w,c
  3435  00F2D6  6E09               	movwf	drawFastVLine@h,c
  3436  00F2D8  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  3437  00F2DC  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3438  00F2E0  5029               	movf	fillCircleHelper@y,w,c
  3439  00F2E2  0800               	sublw	0
  3440  00F2E4  2413               	addwf	fillCircleHelper@x0,w,c
  3441  00F2E6  ECC3  F076         	call	_drawFastVLine
  3442  00F2EA  D000               	goto	l2795
  3443  00F2EC                     l2795:
  3444  00F2EC  5029               	movf	fillCircleHelper@y,w,c
  3445  00F2EE  5C27               	subwf	fillCircleHelper@x,w,c
  3446  00F2F0  5028               	movf	fillCircleHelper@x+1,w,c
  3447  00F2F2  0A80               	xorlw	128
  3448  00F2F4  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  3449  00F2F6  502A               	movf	fillCircleHelper@y+1,w,c
  3450  00F2F8  0A80               	xorlw	128
  3451  00F2FA  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3452  00F2FC  A0D8               	btfss	status,0,c
  3453  00F2FE  D78F               	goto	l2775
  3454  00F300  0012               	return		;funcret
  3455  00F302                     __end_of_fillCircleHelper:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodl	equ	0xFF3
  3462                           intcon2	equ	0xFF1
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           indf2	equ	0xFDF
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _drawtext *****************
  3473 ;; Defined at:
  3474 ;;		line 511 in file "ST7735_TFT.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  x               1    wreg     unsigned char 
  3477 ;;  y               1   40[COMRAM] unsigned char 
  3478 ;;  _text           2   41[COMRAM] PTR unsigned char 
  3479 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  3480 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  3481 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  3482 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  3483 ;;  color           2   43[COMRAM] unsigned int 
  3484 ;;  bg              2   45[COMRAM] unsigned int 
  3485 ;;  size            1   47[COMRAM] unsigned char 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  x               1   52[COMRAM] unsigned char 
  3488 ;;  i               2   53[COMRAM] unsigned int 
  3489 ;;  textsize        2   50[COMRAM] unsigned int 
  3490 ;;  cursor_x        1   56[COMRAM] unsigned char 
  3491 ;;  cursor_y        1   55[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:       17 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    6
  3508 ;; This function calls:
  3509 ;;		_drawChar
  3510 ;;		_strlen
  3511 ;; This function is called by:
  3512 ;;		_Initialize_Screen
  3513 ;;		_update_LCD_count
  3514 ;;		_update_LCD_PED_Count
  3515 ;;		_update_LCD_misc
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text10
  3520  00EEEA                     __ptext10:
  3521                           	opt stack 0
  3522  00EEEA                     _drawtext:
  3523                           	opt stack 23
  3524                           
  3525                           ;incstack = 0
  3526                           ;drawtext@x stored from wreg
  3527  00EEEA  6E35               	movwf	drawtext@x,c
  3528                           
  3529                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  3530                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  3531                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  3532  00EEEC  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  3533  00EEF0  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  3534                           
  3535                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  3536  00EEF4  C02A  F001         	movff	drawtext@_text,strlen@s
  3537  00EEF8  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  3538  00EEFC  EC36  F075         	call	_strlen	;wreg free
  3539  00EF00  C001  F033         	movff	?_strlen,drawtext@textsize
  3540  00EF04  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  3541                           
  3542                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  3543  00EF08  0E00               	movlw	0
  3544  00EF0A  6E37               	movwf	drawtext@i+1,c
  3545  00EF0C  0E00               	movlw	0
  3546  00EF0E  6E36               	movwf	drawtext@i,c
  3547  00EF10  D054               	goto	l2877
  3548  00EF12                     l2851:
  3549                           
  3550                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  3551  00EF12  5045               	movf	_wrap,w,c
  3552  00EF14  B4D8               	btfsc	status,2,c
  3553  00EF16  D02C               	goto	l2867
  3554  00EF18  5030               	movf	drawtext@size,w,c
  3555  00EF1A  0D05               	mullw	5
  3556  00EF1C  5039               	movf	drawtext@cursor_x,w,c
  3557  00EF1E  6E31               	movwf	??_drawtext& (0+255),c
  3558  00EF20  6A32               	clrf	(??_drawtext+1)& (0+255),c
  3559  00EF22  50F3               	movf	prodl,w,c
  3560  00EF24  2631               	addwf	??_drawtext,f,c
  3561  00EF26  50F4               	movf	prodh,w,c
  3562  00EF28  2232               	addwfc	??_drawtext+1,f,c
  3563  00EF2A  BE32               	btfsc	??_drawtext+1,7,c
  3564  00EF2C  D021               	goto	l2867
  3565  00EF2E  5032               	movf	??_drawtext+1,w,c
  3566  00EF30  E104               	bnz	u1410
  3567  00EF32  0E81               	movlw	129
  3568  00EF34  5C31               	subwf	??_drawtext,w,c
  3569  00EF36  A0D8               	btfss	status,0,c
  3570  00EF38  D01B               	goto	l2867
  3571  00EF3A                     u1410:
  3572                           
  3573                           ;ST7735_TFT.c: 519: cursor_x = 0;
  3574  00EF3A  0E00               	movlw	0
  3575  00EF3C  6E39               	movwf	drawtext@cursor_x,c
  3576                           
  3577                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  3578  00EF3E  5030               	movf	drawtext@size,w,c
  3579  00EF40  0D07               	mullw	7
  3580  00EF42  50F3               	movf	prodl,w,c
  3581  00EF44  2438               	addwf	drawtext@cursor_y,w,c
  3582  00EF46  0F03               	addlw	3
  3583  00EF48  6E38               	movwf	drawtext@cursor_y,c
  3584                           
  3585                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  3586  00EF4A  0EA0               	movlw	160
  3587  00EF4C  6438               	cpfsgt	drawtext@cursor_y,c
  3588  00EF4E  D003               	goto	l2863
  3589  00EF50  0EA0               	movlw	160
  3590  00EF52  6E38               	movwf	drawtext@cursor_y,c
  3591  00EF54  D000               	goto	l2863
  3592  00EF56                     l2863:
  3593                           
  3594                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  3595  00EF56  5036               	movf	drawtext@i,w,c
  3596  00EF58  242A               	addwf	drawtext@_text,w,c
  3597  00EF5A  6ED9               	movwf	fsr2l,c
  3598  00EF5C  5037               	movf	drawtext@i+1,w,c
  3599  00EF5E  202B               	addwfc	drawtext@_text+1,w,c
  3600  00EF60  6EDA               	movwf	fsr2h,c
  3601  00EF62  0E20               	movlw	32
  3602  00EF64  18DE               	xorwf	postinc2,w,c
  3603  00EF66  B4D8               	btfsc	status,2,c
  3604  00EF68  D025               	goto	l2875
  3605  00EF6A  D002               	goto	l2867
  3606  00EF6C  D023               	goto	l2875
  3607  00EF6E  D000               	goto	l2867
  3608  00EF70                     l2867:
  3609                           
  3610                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3611  00EF70  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  3612  00EF74  5036               	movf	drawtext@i,w,c
  3613  00EF76  242A               	addwf	drawtext@_text,w,c
  3614  00EF78  6ED9               	movwf	fsr2l,c
  3615  00EF7A  5037               	movf	drawtext@i+1,w,c
  3616  00EF7C  202B               	addwfc	drawtext@_text+1,w,c
  3617  00EF7E  6EDA               	movwf	fsr2h,c
  3618  00EF80  50DF               	movf	indf2,w,c
  3619  00EF82  6E1F               	movwf	drawChar@c,c
  3620  00EF84  C02C  F020         	movff	drawtext@color,drawChar@color
  3621  00EF88  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  3622  00EF8C  C02E  F022         	movff	drawtext@bg,drawChar@bg
  3623  00EF90  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  3624  00EF94  C030  F024         	movff	drawtext@size,drawChar@size
  3625  00EF98  5039               	movf	drawtext@cursor_x,w,c
  3626  00EF9A  EC81  F079         	call	_drawChar
  3627                           
  3628                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  3629  00EF9E  5030               	movf	drawtext@size,w,c
  3630  00EFA0  0D06               	mullw	6
  3631  00EFA2  50F3               	movf	prodl,w,c
  3632  00EFA4  2439               	addwf	drawtext@cursor_x,w,c
  3633  00EFA6  6E39               	movwf	drawtext@cursor_x,c
  3634                           
  3635                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  3636  00EFA8  0E80               	movlw	128
  3637  00EFAA  6439               	cpfsgt	drawtext@cursor_x,c
  3638  00EFAC  D003               	goto	l2875
  3639  00EFAE  0E80               	movlw	128
  3640  00EFB0  6E39               	movwf	drawtext@cursor_x,c
  3641  00EFB2  D000               	goto	l2875
  3642  00EFB4                     l2875:
  3643  00EFB4  4A36               	infsnz	drawtext@i,f,c
  3644  00EFB6  2A37               	incf	drawtext@i+1,f,c
  3645  00EFB8  D000               	goto	l2877
  3646  00EFBA                     l2877:
  3647  00EFBA  5033               	movf	drawtext@textsize,w,c
  3648  00EFBC  5C36               	subwf	drawtext@i,w,c
  3649  00EFBE  5034               	movf	drawtext@textsize+1,w,c
  3650  00EFC0  5837               	subwfb	drawtext@i+1,w,c
  3651  00EFC2  A0D8               	btfss	status,0,c
  3652  00EFC4  D7A6               	goto	l2851
  3653  00EFC6  0012               	return		;funcret
  3654  00EFC8                     __end_of_drawtext:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon2	equ	0xFF1
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           postdec1	equ	0xFE5
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _strlen *****************
  3674 ;; Defined at:
  3675 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3678 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  3679 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  3680 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  3681 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  3684 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  3685 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  3686 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  3687 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  2    0[COMRAM] unsigned int 
  3690 ;; Registers used:
  3691 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;Total ram usage:        6 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_drawtext
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text11
  3711  00EA6C                     __ptext11:
  3712                           	opt stack 0
  3713  00EA6C                     _strlen:
  3714                           	opt stack 28
  3715                           
  3716                           ;incstack = 0
  3717  00EA6C  C001  F005         	movff	strlen@s,strlen@cp
  3718  00EA70  C002  F006         	movff	strlen@s+1,strlen@cp+1
  3719  00EA74  D003               	goto	l2719
  3720  00EA76                     l2717:
  3721  00EA76  4A05               	infsnz	strlen@cp,f,c
  3722  00EA78  2A06               	incf	strlen@cp+1,f,c
  3723  00EA7A  D000               	goto	l2719
  3724  00EA7C                     l2719:
  3725  00EA7C  C005  FFD9         	movff	strlen@cp,fsr2l
  3726  00EA80  C006  FFDA         	movff	strlen@cp+1,fsr2h
  3727  00EA84  50DF               	movf	indf2,w,c
  3728  00EA86  A4D8               	btfss	status,2,c
  3729  00EA88  D7F6               	goto	l2717
  3730  00EA8A  C001  F003         	movff	strlen@s,??_strlen
  3731  00EA8E  C002  F004         	movff	strlen@s+1,??_strlen+1
  3732  00EA92  1E03               	comf	??_strlen,f,c
  3733  00EA94  1E04               	comf	??_strlen+1,f,c
  3734  00EA96  4A03               	infsnz	??_strlen,f,c
  3735  00EA98  2A04               	incf	??_strlen+1,f,c
  3736  00EA9A  5005               	movf	strlen@cp,w,c
  3737  00EA9C  2403               	addwf	??_strlen,w,c
  3738  00EA9E  6E01               	movwf	?_strlen,c
  3739  00EAA0  5006               	movf	strlen@cp+1,w,c
  3740  00EAA2  2004               	addwfc	??_strlen+1,w,c
  3741  00EAA4  6E02               	movwf	?_strlen+1,c
  3742  00EAA6  D000               	goto	l1277
  3743  00EAA8                     l1277:
  3744  00EAA8  0012               	return		;funcret
  3745  00EAAA                     __end_of_strlen:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           prodh	equ	0xFF4
  3752                           prodl	equ	0xFF3
  3753                           intcon2	equ	0xFF1
  3754                           postinc0	equ	0xFEE
  3755                           wreg	equ	0xFE8
  3756                           postdec1	equ	0xFE5
  3757                           fsr1l	equ	0xFE1
  3758                           indf2	equ	0xFDF
  3759                           postinc2	equ	0xFDE
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function _drawChar *****************
  3765 ;; Defined at:
  3766 ;;		line 484 in file "ST7735_TFT.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  x               1    wreg     unsigned char 
  3769 ;;  y               1   29[COMRAM] unsigned char 
  3770 ;;  c               1   30[COMRAM] unsigned char 
  3771 ;;  color           2   31[COMRAM] unsigned int 
  3772 ;;  bg              2   33[COMRAM] unsigned int 
  3773 ;;  size            1   35[COMRAM] unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  x               1   37[COMRAM] unsigned char 
  3776 ;;  line            1   36[COMRAM] unsigned char 
  3777 ;;  i               1   39[COMRAM] unsigned char 
  3778 ;;  j               1   38[COMRAM] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;		None               void
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3788 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;Total ram usage:       11 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    5
  3795 ;; This function calls:
  3796 ;;		___wmul
  3797 ;;		_drawPixel
  3798 ;;		_fillRect
  3799 ;; This function is called by:
  3800 ;;		_drawtext
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text12
  3805  00F302                     __ptext12:
  3806                           	opt stack 0
  3807  00F302                     _drawChar:
  3808                           	opt stack 23
  3809                           
  3810                           ;incstack = 0
  3811                           ;drawChar@x stored from wreg
  3812  00F302  6E26               	movwf	drawChar@x,c
  3813                           
  3814                           ;ST7735_TFT.c: 486: char i, j;
  3815                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  3816  00F304  0E80               	movlw	128
  3817  00F306  6026               	cpfslt	drawChar@x,c
  3818  00F308  D0A6               	goto	l197
  3819  00F30A  0E9F               	movlw	159
  3820  00F30C  641E               	cpfsgt	drawChar@y,c
  3821  00F30E  D001               	goto	l2665
  3822                           
  3823                           ;ST7735_TFT.c: 488: return;
  3824  00F310  D0A2               	goto	l197
  3825  00F312                     l2665:
  3826                           
  3827                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  3828  00F312  5024               	movf	drawChar@size,w,c
  3829  00F314  A4D8               	btfss	status,2,c
  3830  00F316  D003               	goto	l2669
  3831  00F318  0E01               	movlw	1
  3832  00F31A  6E24               	movwf	drawChar@size,c
  3833  00F31C  D000               	goto	l2669
  3834  00F31E                     l2669:
  3835                           
  3836                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  3837  00F31E  0E1F               	movlw	31
  3838  00F320  641F               	cpfsgt	drawChar@c,c
  3839  00F322  D004               	goto	l2673
  3840  00F324  0E7E               	movlw	126
  3841  00F326  641F               	cpfsgt	drawChar@c,c
  3842  00F328  D003               	goto	l199
  3843  00F32A  D000               	goto	l2673
  3844  00F32C                     l2673:
  3845                           
  3846                           ;ST7735_TFT.c: 491: c = '?';
  3847  00F32C  0E3F               	movlw	63
  3848  00F32E  6E1F               	movwf	drawChar@c,c
  3849  00F330                     l199:
  3850                           
  3851                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  3852  00F330  0E00               	movlw	0
  3853  00F332  6E28               	movwf	drawChar@i,c
  3854  00F334                     l2675:
  3855  00F334  0E04               	movlw	4
  3856  00F336  6428               	cpfsgt	drawChar@i,c
  3857  00F338  D001               	goto	l2679
  3858  00F33A  D08D               	goto	l197
  3859  00F33C                     l2679:
  3860                           
  3861                           ;ST7735_TFT.c: 493: unsigned char line;
  3862                           ;ST7735_TFT.c: 494: if(c < 'S')
  3863  00F33C  0E53               	movlw	83
  3864  00F33E  601F               	cpfslt	drawChar@c,c
  3865  00F340  D015               	goto	l2683
  3866                           
  3867                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  3868  00F342  0EE0               	movlw	224
  3869  00F344  241F               	addwf	drawChar@c,w,c
  3870  00F346  6E01               	movwf	___wmul@multiplier,c
  3871  00F348  6A02               	clrf	___wmul@multiplier+1,c
  3872  00F34A  0EFF               	movlw	255
  3873  00F34C  2202               	addwfc	___wmul@multiplier+1,f,c
  3874  00F34E  0E00               	movlw	0
  3875  00F350  6E04               	movwf	___wmul@multiplicand+1,c
  3876  00F352  0E05               	movlw	5
  3877  00F354  6E03               	movwf	___wmul@multiplicand,c
  3878  00F356  ECA6  F074         	call	___wmul	;wreg free
  3879  00F35A  5028               	movf	drawChar@i,w,c
  3880  00F35C  2601               	addwf	?___wmul,f,c
  3881  00F35E  0E00               	movlw	0
  3882  00F360  2202               	addwfc	?___wmul+1,f,c
  3883  00F362  0E25               	movlw	low _font
  3884  00F364  2401               	addwf	?___wmul,w,c
  3885  00F366  6EF6               	movwf	tblptrl,c
  3886  00F368  0EFD               	movlw	high _font
  3887  00F36A  D014               	goto	L1
  3888  00F36C                     l2683:
  3889                           
  3890                           ;ST7735_TFT.c: 496: else
  3891                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  3892  00F36C  0EAD               	movlw	173
  3893  00F36E  241F               	addwf	drawChar@c,w,c
  3894  00F370  6E01               	movwf	___wmul@multiplier,c
  3895  00F372  6A02               	clrf	___wmul@multiplier+1,c
  3896  00F374  0EFF               	movlw	255
  3897  00F376  2202               	addwfc	___wmul@multiplier+1,f,c
  3898  00F378  0E00               	movlw	0
  3899  00F37A  6E04               	movwf	___wmul@multiplicand+1,c
  3900  00F37C  0E05               	movlw	5
  3901  00F37E  6E03               	movwf	___wmul@multiplicand,c
  3902  00F380  ECA6  F074         	call	___wmul	;wreg free
  3903  00F384  5028               	movf	drawChar@i,w,c
  3904  00F386  2601               	addwf	?___wmul,f,c
  3905  00F388  0E00               	movlw	0
  3906  00F38A  2202               	addwfc	?___wmul+1,f,c
  3907  00F38C  0E24               	movlw	low _font2
  3908  00F38E  2401               	addwf	?___wmul,w,c
  3909  00F390  6EF6               	movwf	tblptrl,c
  3910  00F392  0EFE               	movlw	high _font2
  3911  00F394                     L1:
  3912  00F394  2002               	addwfc	?___wmul+1,w,c
  3913  00F396  6EF7               	movwf	tblptrh,c
  3914  00F398                     	if	0	;There are less than 3 active tblptr bytes
  3915  00F398                     	endif
  3916  00F398  0008               	tblrd		*
  3917  00F39A  CFF5 F025          	movff	tablat,drawChar@line
  3918  00F39E  D000               	goto	l2685
  3919  00F3A0                     l2685:
  3920                           
  3921                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  3922  00F3A0  0E00               	movlw	0
  3923  00F3A2  6E27               	movwf	drawChar@j,c
  3924  00F3A4                     l2687:
  3925  00F3A4  0E06               	movlw	6
  3926  00F3A6  6427               	cpfsgt	drawChar@j,c
  3927  00F3A8  D001               	goto	l206
  3928  00F3AA  D053               	goto	l2711
  3929  00F3AC                     l206:
  3930                           
  3931                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  3932  00F3AC  A025               	btfss	drawChar@line,0,c
  3933  00F3AE  D023               	goto	l2697
  3934                           
  3935                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  3936  00F3B0  0424               	decf	drawChar@size,w,c
  3937  00F3B2  A4D8               	btfss	status,2,c
  3938  00F3B4  D00C               	goto	l2695
  3939  00F3B6  501E               	movf	drawChar@y,w,c
  3940  00F3B8  2427               	addwf	drawChar@j,w,c
  3941  00F3BA  6E08               	movwf	drawPixel@y,c
  3942  00F3BC  C020  F009         	movff	drawChar@color,drawPixel@color
  3943  00F3C0  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  3944  00F3C4  5026               	movf	drawChar@x,w,c
  3945  00F3C6  2428               	addwf	drawChar@i,w,c
  3946  00F3C8  ECE6  F074         	call	_drawPixel
  3947  00F3CC  D03E               	goto	l2705
  3948  00F3CE                     l2695:
  3949                           
  3950                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  3951  00F3CE  5027               	movf	drawChar@j,w,c
  3952  00F3D0  0224               	mulwf	drawChar@size,c
  3953  00F3D2  50F3               	movf	prodl,w,c
  3954  00F3D4  241E               	addwf	drawChar@y,w,c
  3955  00F3D6  6E13               	movwf	fillRect@y,c
  3956  00F3D8  C024  F014         	movff	drawChar@size,fillRect@w
  3957  00F3DC  C024  F015         	movff	drawChar@size,fillRect@h
  3958  00F3E0  C020  F016         	movff	drawChar@color,fillRect@color
  3959  00F3E4  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  3960  00F3E8  5028               	movf	drawChar@i,w,c
  3961  00F3EA  0224               	mulwf	drawChar@size,c
  3962  00F3EC  50F3               	movf	prodl,w,c
  3963  00F3EE  2426               	addwf	drawChar@x,w,c
  3964  00F3F0  EC76  F075         	call	_fillRect
  3965                           
  3966                           ;ST7735_TFT.c: 502: }
  3967  00F3F4  D02A               	goto	l2705
  3968  00F3F6                     l2697:
  3969                           
  3970                           ;ST7735_TFT.c: 503: else if(bg != color) {
  3971  00F3F6  5020               	movf	drawChar@color,w,c
  3972  00F3F8  1822               	xorwf	drawChar@bg,w,c
  3973  00F3FA  E104               	bnz	u1150
  3974  00F3FC  5021               	movf	drawChar@color+1,w,c
  3975  00F3FE  1823               	xorwf	drawChar@bg+1,w,c
  3976  00F400  B4D8               	btfsc	status,2,c
  3977  00F402  D023               	goto	l2705
  3978  00F404                     u1150:
  3979                           
  3980                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  3981  00F404  0424               	decf	drawChar@size,w,c
  3982  00F406  A4D8               	btfss	status,2,c
  3983  00F408  D00C               	goto	l2703
  3984  00F40A  501E               	movf	drawChar@y,w,c
  3985  00F40C  2427               	addwf	drawChar@j,w,c
  3986  00F40E  6E08               	movwf	drawPixel@y,c
  3987  00F410  C022  F009         	movff	drawChar@bg,drawPixel@color
  3988  00F414  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  3989  00F418  5026               	movf	drawChar@x,w,c
  3990  00F41A  2428               	addwf	drawChar@i,w,c
  3991  00F41C  ECE6  F074         	call	_drawPixel
  3992  00F420  D014               	goto	l2705
  3993  00F422                     l2703:
  3994                           
  3995                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  3996  00F422  5027               	movf	drawChar@j,w,c
  3997  00F424  0224               	mulwf	drawChar@size,c
  3998  00F426  50F3               	movf	prodl,w,c
  3999  00F428  241E               	addwf	drawChar@y,w,c
  4000  00F42A  6E13               	movwf	fillRect@y,c
  4001  00F42C  C024  F014         	movff	drawChar@size,fillRect@w
  4002  00F430  C024  F015         	movff	drawChar@size,fillRect@h
  4003  00F434  C022  F016         	movff	drawChar@bg,fillRect@color
  4004  00F438  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  4005  00F43C  5028               	movf	drawChar@i,w,c
  4006  00F43E  0224               	mulwf	drawChar@size,c
  4007  00F440  50F3               	movf	prodl,w,c
  4008  00F442  2426               	addwf	drawChar@x,w,c
  4009  00F444  EC76  F075         	call	_fillRect
  4010  00F448  D000               	goto	l2705
  4011  00F44A                     l2705:
  4012  00F44A  2A27               	incf	drawChar@j,f,c
  4013  00F44C  90D8               	bcf	status,0,c
  4014  00F44E  3225               	rrcf	drawChar@line,f,c
  4015  00F450  D7A9               	goto	l2687
  4016  00F452                     l2711:
  4017  00F452  2A28               	incf	drawChar@i,f,c
  4018  00F454  D76F               	goto	l2675
  4019  00F456                     l197:
  4020  00F456  0012               	return		;funcret
  4021  00F458                     __end_of_drawChar:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           prodh	equ	0xFF4
  4028                           prodl	equ	0xFF3
  4029                           intcon2	equ	0xFF1
  4030                           postinc0	equ	0xFEE
  4031                           wreg	equ	0xFE8
  4032                           postdec1	equ	0xFE5
  4033                           fsr1l	equ	0xFE1
  4034                           indf2	equ	0xFDF
  4035                           postinc2	equ	0xFDE
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _fillRect *****************
  4041 ;; Defined at:
  4042 ;;		line 474 in file "ST7735_TFT.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  x               1    wreg     unsigned char 
  4045 ;;  y               1   18[COMRAM] unsigned char 
  4046 ;;  w               1   19[COMRAM] unsigned char 
  4047 ;;  h               1   20[COMRAM] unsigned char 
  4048 ;;  color           2   21[COMRAM] unsigned int 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  x               1   26[COMRAM] unsigned char 
  4051 ;;  i               2   27[COMRAM] int 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:       11 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    4
  4068 ;; This function calls:
  4069 ;;		_drawFastVLine
  4070 ;; This function is called by:
  4071 ;;		_drawChar
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text13
  4076  00EAEC                     __ptext13:
  4077                           	opt stack 0
  4078  00EAEC                     _fillRect:
  4079                           	opt stack 23
  4080                           
  4081                           ;incstack = 0
  4082                           ;fillRect@x stored from wreg
  4083  00EAEC  6E1B               	movwf	fillRect@x,c
  4084                           
  4085                           ;ST7735_TFT.c: 476: signed int i;
  4086                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  4087  00EAEE  C01B  F01C         	movff	fillRect@x,fillRect@i
  4088  00EAF2  6A1D               	clrf	fillRect@i+1,c
  4089  00EAF4  D00E               	goto	l2567
  4090  00EAF6                     l2563:
  4091                           
  4092                           ;ST7735_TFT.c: 479: {
  4093                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  4094  00EAF6  C013  F008         	movff	fillRect@y,drawFastVLine@y
  4095  00EAFA  C015  F009         	movff	fillRect@h,drawFastVLine@h
  4096  00EAFE  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  4097  00EB02  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  4098  00EB06  501C               	movf	fillRect@i,w,c
  4099  00EB08  ECC3  F076         	call	_drawFastVLine
  4100  00EB0C  4A1C               	infsnz	fillRect@i,f,c
  4101  00EB0E  2A1D               	incf	fillRect@i+1,f,c
  4102  00EB10  D000               	goto	l2567
  4103  00EB12                     l2567:
  4104  00EB12  5014               	movf	fillRect@w,w,c
  4105  00EB14  C01B  F018         	movff	fillRect@x,??_fillRect
  4106  00EB18  6A19               	clrf	(??_fillRect+1)& (0+255),c
  4107  00EB1A  2618               	addwf	??_fillRect,f,c
  4108  00EB1C  0E00               	movlw	0
  4109  00EB1E  2219               	addwfc	??_fillRect+1,f,c
  4110  00EB20  5018               	movf	??_fillRect,w,c
  4111  00EB22  5C1C               	subwf	fillRect@i,w,c
  4112  00EB24  501D               	movf	fillRect@i+1,w,c
  4113  00EB26  0A80               	xorlw	128
  4114  00EB28  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  4115  00EB2A  5019               	movf	??_fillRect+1,w,c
  4116  00EB2C  0A80               	xorlw	128
  4117  00EB2E  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4118  00EB30  A0D8               	btfss	status,0,c
  4119  00EB32  D7E1               	goto	l2563
  4120  00EB34  0012               	return		;funcret
  4121  00EB36                     __end_of_fillRect:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           intcon2	equ	0xFF1
  4130                           postinc0	equ	0xFEE
  4131                           wreg	equ	0xFE8
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _drawRect *****************
  4141 ;; Defined at:
  4142 ;;		line 722 in file "ST7735_TFT.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  x               2   18[COMRAM] unsigned int 
  4145 ;;  y               2   20[COMRAM] unsigned int 
  4146 ;;  w               2   22[COMRAM] unsigned int 
  4147 ;;  h               2   24[COMRAM] unsigned int 
  4148 ;;  color           2   26[COMRAM] unsigned int 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;		None               void
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4160 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;Total ram usage:       11 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    4
  4167 ;; This function calls:
  4168 ;;		_drawFastHLine
  4169 ;;		_drawFastVLine
  4170 ;; This function is called by:
  4171 ;;		_Initialize_Screen
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text14
  4176  00EC28                     __ptext14:
  4177                           	opt stack 0
  4178  00EC28                     _drawRect:
  4179                           	opt stack 25
  4180                           
  4181                           ;ST7735_TFT.c: 724: drawFastHLine(x, y, w, color);
  4182                           
  4183                           ;incstack = 0
  4184  00EC28  C015  F008         	movff	drawRect@y,drawFastHLine@y
  4185  00EC2C  C017  F009         	movff	drawRect@w,drawFastHLine@w
  4186  00EC30  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  4187  00EC34  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  4188  00EC38  5013               	movf	drawRect@x,w,c
  4189  00EC3A  EC7F  F076         	call	_drawFastHLine
  4190                           
  4191                           ;ST7735_TFT.c: 725: drawFastHLine(x, y + h - 1, w, color);
  4192  00EC3E  5015               	movf	drawRect@y,w,c
  4193  00EC40  2419               	addwf	drawRect@h,w,c
  4194  00EC42  6E1D               	movwf	??_drawRect& (0+255),c
  4195  00EC44  041D               	decf	??_drawRect,w,c
  4196  00EC46  6E08               	movwf	drawFastHLine@y,c
  4197  00EC48  C017  F009         	movff	drawRect@w,drawFastHLine@w
  4198  00EC4C  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  4199  00EC50  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  4200  00EC54  5013               	movf	drawRect@x,w,c
  4201  00EC56  EC7F  F076         	call	_drawFastHLine
  4202                           
  4203                           ;ST7735_TFT.c: 726: drawFastVLine(x, y, h, color);
  4204  00EC5A  C015  F008         	movff	drawRect@y,drawFastVLine@y
  4205  00EC5E  C019  F009         	movff	drawRect@h,drawFastVLine@h
  4206  00EC62  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  4207  00EC66  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  4208  00EC6A  5013               	movf	drawRect@x,w,c
  4209  00EC6C  ECC3  F076         	call	_drawFastVLine
  4210                           
  4211                           ;ST7735_TFT.c: 727: drawFastVLine(x + w - 1, y, h, color);
  4212  00EC70  C015  F008         	movff	drawRect@y,drawFastVLine@y
  4213  00EC74  C019  F009         	movff	drawRect@h,drawFastVLine@h
  4214  00EC78  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  4215  00EC7C  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  4216  00EC80  5013               	movf	drawRect@x,w,c
  4217  00EC82  2417               	addwf	drawRect@w,w,c
  4218  00EC84  6E1D               	movwf	??_drawRect& (0+255),c
  4219  00EC86  041D               	decf	??_drawRect,w,c
  4220  00EC88  ECC3  F076         	call	_drawFastVLine
  4221  00EC8C  0012               	return		;funcret
  4222  00EC8E                     __end_of_drawRect:
  4223                           	opt stack 0
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon2	equ	0xFF1
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           fsr1l	equ	0xFE1
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function _drawFastVLine *****************
  4242 ;; Defined at:
  4243 ;;		line 453 in file "ST7735_TFT.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  x               1    wreg     unsigned char 
  4246 ;;  y               1    7[COMRAM] unsigned char 
  4247 ;;  h               1    8[COMRAM] unsigned char 
  4248 ;;  color           2    9[COMRAM] unsigned int 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  x               1   17[COMRAM] unsigned char 
  4251 ;;  lo              1   16[COMRAM] unsigned char 
  4252 ;;  hi              1   15[COMRAM] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;		None               void
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4262 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;Total ram usage:       11 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    3
  4269 ;; This function calls:
  4270 ;;		_setAddrWindow
  4271 ;;		_spiwrite
  4272 ;; This function is called by:
  4273 ;;		_fillRect
  4274 ;;		_fillCircleHelper
  4275 ;;		_fillCircle
  4276 ;;		_drawRect
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text15
  4281  00ED86                     __ptext15:
  4282                           	opt stack 0
  4283  00ED86                     _drawFastVLine:
  4284                           	opt stack 24
  4285                           
  4286                           ;incstack = 0
  4287                           ;drawFastVLine@x stored from wreg
  4288  00ED86  6E12               	movwf	drawFastVLine@x,c
  4289                           
  4290                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  4291                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  4292  00ED88  0E80               	movlw	128
  4293  00ED8A  6012               	cpfslt	drawFastVLine@x,c
  4294  00ED8C  D03F               	goto	l181
  4295  00ED8E  0E9F               	movlw	159
  4296  00ED90  6408               	cpfsgt	drawFastVLine@y,c
  4297  00ED92  D001               	goto	l2513
  4298                           
  4299                           ;ST7735_TFT.c: 457: return;
  4300  00ED94  D03B               	goto	l181
  4301  00ED96                     l2513:
  4302                           
  4303                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  4304  00ED96  0EFF               	movlw	255
  4305  00ED98  6E0C               	movwf	??_drawFastVLine& (0+255),c
  4306  00ED9A  0EFF               	movlw	255
  4307  00ED9C  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4308  00ED9E  5009               	movf	drawFastVLine@h,w,c
  4309  00EDA0  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4310  00EDA4  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4311  00EDA6  260E               	addwf	??_drawFastVLine+2,f,c
  4312  00EDA8  0E00               	movlw	0
  4313  00EDAA  220F               	addwfc	??_drawFastVLine+3,f,c
  4314  00EDAC  500C               	movf	??_drawFastVLine,w,c
  4315  00EDAE  260E               	addwf	??_drawFastVLine+2,f,c
  4316  00EDB0  500D               	movf	??_drawFastVLine+1,w,c
  4317  00EDB2  220F               	addwfc	??_drawFastVLine+3,f,c
  4318  00EDB4  BE0F               	btfsc	??_drawFastVLine+3,7,c
  4319  00EDB6  D00B               	goto	l2517
  4320  00EDB8  500F               	movf	??_drawFastVLine+3,w,c
  4321  00EDBA  E104               	bnz	u990
  4322  00EDBC  0EA0               	movlw	160
  4323  00EDBE  5C0E               	subwf	??_drawFastVLine+2,w,c
  4324  00EDC0  A0D8               	btfss	status,0,c
  4325  00EDC2  D005               	goto	l2517
  4326  00EDC4                     u990:
  4327                           
  4328                           ;ST7735_TFT.c: 459: h = 160 - y;
  4329  00EDC4  5008               	movf	drawFastVLine@y,w,c
  4330  00EDC6  0800               	sublw	0
  4331  00EDC8  0FA0               	addlw	160
  4332  00EDCA  6E09               	movwf	drawFastVLine@h,c
  4333  00EDCC  D000               	goto	l2517
  4334  00EDCE                     l2517:
  4335                           
  4336                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  4337  00EDCE  500B               	movf	drawFastVLine@color+1,w,c
  4338  00EDD0  6E10               	movwf	drawFastVLine@hi,c
  4339  00EDD2  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  4340                           
  4341                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  4342  00EDD6  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  4343  00EDDA  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  4344  00EDDE  5008               	movf	drawFastVLine@y,w,c
  4345  00EDE0  2409               	addwf	drawFastVLine@h,w,c
  4346  00EDE2  6E0C               	movwf	??_drawFastVLine& (0+255),c
  4347  00EDE4  040C               	decf	??_drawFastVLine,w,c
  4348  00EDE6  6E06               	movwf	setAddrWindow@y1,c
  4349  00EDE8  5012               	movf	drawFastVLine@x,w,c
  4350  00EDEA  EC9B  F075         	call	_setAddrWindow
  4351                           
  4352                           ;ST7735_TFT.c: 462: PORTCbits.RC2 = 1;
  4353  00EDEE  8482               	bsf	3970,2,c	;volatile
  4354                           
  4355                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  4356  00EDF0  9882               	bcf	3970,4,c	;volatile
  4357                           
  4358                           ;ST7735_TFT.c: 465: while (h--) {
  4359  00EDF2  D007               	goto	l2529
  4360  00EDF4                     l2527:
  4361                           
  4362                           ;ST7735_TFT.c: 466: spiwrite(hi);
  4363  00EDF4  5010               	movf	drawFastVLine@hi,w,c
  4364  00EDF6  EC69  F074         	call	_spiwrite
  4365                           
  4366                           ;ST7735_TFT.c: 467: spiwrite(lo);
  4367  00EDFA  5011               	movf	drawFastVLine@lo,w,c
  4368  00EDFC  EC69  F074         	call	_spiwrite
  4369  00EE00  D000               	goto	l2529
  4370  00EE02                     l2529:
  4371  00EE02  0609               	decf	drawFastVLine@h,f,c
  4372  00EE04  2809               	incf	drawFastVLine@h,w,c
  4373  00EE06  A4D8               	btfss	status,2,c
  4374  00EE08  D7F5               	goto	l2527
  4375                           
  4376                           ;ST7735_TFT.c: 468: }
  4377                           ;ST7735_TFT.c: 469: PORTCbits.RC4 = 1;
  4378  00EE0A  8882               	bsf	3970,4,c	;volatile
  4379  00EE0C                     l181:
  4380  00EE0C  0012               	return		;funcret
  4381  00EE0E                     __end_of_drawFastVLine:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon2	equ	0xFF1
  4390                           postinc0	equ	0xFEE
  4391                           wreg	equ	0xFE8
  4392                           postdec1	equ	0xFE5
  4393                           fsr1l	equ	0xFE1
  4394                           indf2	equ	0xFDF
  4395                           postinc2	equ	0xFDE
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _drawFastHLine *****************
  4401 ;; Defined at:
  4402 ;;		line 661 in file "ST7735_TFT.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  x               1    wreg     unsigned char 
  4405 ;;  y               1    7[COMRAM] unsigned char 
  4406 ;;  w               1    8[COMRAM] unsigned char 
  4407 ;;  color           2    9[COMRAM] unsigned int 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  x               1   17[COMRAM] unsigned char 
  4410 ;;  lo              1   16[COMRAM] unsigned char 
  4411 ;;  hi              1   15[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:       11 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    3
  4428 ;; This function calls:
  4429 ;;		_setAddrWindow
  4430 ;;		_spiwrite
  4431 ;; This function is called by:
  4432 ;;		_drawRect
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text16
  4437  00ECFE                     __ptext16:
  4438                           	opt stack 0
  4439  00ECFE                     _drawFastHLine:
  4440                           	opt stack 25
  4441                           
  4442                           ;incstack = 0
  4443                           ;drawFastHLine@x stored from wreg
  4444  00ECFE  6E12               	movwf	drawFastHLine@x,c
  4445                           
  4446                           ;ST7735_TFT.c: 663: unsigned char hi, lo;
  4447                           ;ST7735_TFT.c: 664: if((x >= 128) || (y >= 160))
  4448  00ED00  0E80               	movlw	128
  4449  00ED02  6012               	cpfslt	drawFastHLine@x,c
  4450  00ED04  D03F               	goto	l279
  4451  00ED06  0E9F               	movlw	159
  4452  00ED08  6408               	cpfsgt	drawFastHLine@y,c
  4453  00ED0A  D001               	goto	l2801
  4454                           
  4455                           ;ST7735_TFT.c: 665: return;
  4456  00ED0C  D03B               	goto	l279
  4457  00ED0E                     l2801:
  4458                           
  4459                           ;ST7735_TFT.c: 666: if((x + w - 1) >= 128)
  4460  00ED0E  0EFF               	movlw	255
  4461  00ED10  6E0C               	movwf	??_drawFastHLine& (0+255),c
  4462  00ED12  0EFF               	movlw	255
  4463  00ED14  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  4464  00ED16  5009               	movf	drawFastHLine@w,w,c
  4465  00ED18  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  4466  00ED1C  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  4467  00ED1E  260E               	addwf	??_drawFastHLine+2,f,c
  4468  00ED20  0E00               	movlw	0
  4469  00ED22  220F               	addwfc	??_drawFastHLine+3,f,c
  4470  00ED24  500C               	movf	??_drawFastHLine,w,c
  4471  00ED26  260E               	addwf	??_drawFastHLine+2,f,c
  4472  00ED28  500D               	movf	??_drawFastHLine+1,w,c
  4473  00ED2A  220F               	addwfc	??_drawFastHLine+3,f,c
  4474  00ED2C  BE0F               	btfsc	??_drawFastHLine+3,7,c
  4475  00ED2E  D00B               	goto	l2805
  4476  00ED30  500F               	movf	??_drawFastHLine+3,w,c
  4477  00ED32  E104               	bnz	u1340
  4478  00ED34  0E80               	movlw	128
  4479  00ED36  5C0E               	subwf	??_drawFastHLine+2,w,c
  4480  00ED38  A0D8               	btfss	status,0,c
  4481  00ED3A  D005               	goto	l2805
  4482  00ED3C                     u1340:
  4483                           
  4484                           ;ST7735_TFT.c: 667: w = 128 - x;
  4485  00ED3C  5012               	movf	drawFastHLine@x,w,c
  4486  00ED3E  0800               	sublw	0
  4487  00ED40  0F80               	addlw	128
  4488  00ED42  6E09               	movwf	drawFastHLine@w,c
  4489  00ED44  D000               	goto	l2805
  4490  00ED46                     l2805:
  4491                           
  4492                           ;ST7735_TFT.c: 668: hi = color >> 8; lo = color;
  4493  00ED46  500B               	movf	drawFastHLine@color+1,w,c
  4494  00ED48  6E10               	movwf	drawFastHLine@hi,c
  4495  00ED4A  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  4496                           
  4497                           ;ST7735_TFT.c: 669: setAddrWindow(x, y, x + w - 1, y);
  4498  00ED4E  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  4499  00ED52  5012               	movf	drawFastHLine@x,w,c
  4500  00ED54  2409               	addwf	drawFastHLine@w,w,c
  4501  00ED56  6E0C               	movwf	??_drawFastHLine& (0+255),c
  4502  00ED58  040C               	decf	??_drawFastHLine,w,c
  4503  00ED5A  6E05               	movwf	setAddrWindow@x1,c
  4504  00ED5C  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  4505  00ED60  5012               	movf	drawFastHLine@x,w,c
  4506  00ED62  EC9B  F075         	call	_setAddrWindow
  4507                           
  4508                           ;ST7735_TFT.c: 670: PORTCbits.RC2 = 1;
  4509  00ED66  8482               	bsf	3970,2,c	;volatile
  4510                           
  4511                           ;ST7735_TFT.c: 671: PORTCbits.RC4 = 0;
  4512  00ED68  9882               	bcf	3970,4,c	;volatile
  4513                           
  4514                           ;ST7735_TFT.c: 673: while (w--) {
  4515  00ED6A  D007               	goto	l2817
  4516  00ED6C                     l2815:
  4517                           
  4518                           ;ST7735_TFT.c: 674: spiwrite(hi);
  4519  00ED6C  5010               	movf	drawFastHLine@hi,w,c
  4520  00ED6E  EC69  F074         	call	_spiwrite
  4521                           
  4522                           ;ST7735_TFT.c: 675: spiwrite(lo);
  4523  00ED72  5011               	movf	drawFastHLine@lo,w,c
  4524  00ED74  EC69  F074         	call	_spiwrite
  4525  00ED78  D000               	goto	l2817
  4526  00ED7A                     l2817:
  4527  00ED7A  0609               	decf	drawFastHLine@w,f,c
  4528  00ED7C  2809               	incf	drawFastHLine@w,w,c
  4529  00ED7E  A4D8               	btfss	status,2,c
  4530  00ED80  D7F5               	goto	l2815
  4531                           
  4532                           ;ST7735_TFT.c: 676: }
  4533                           ;ST7735_TFT.c: 677: PORTCbits.RC4 = 1;
  4534  00ED82  8882               	bsf	3970,4,c	;volatile
  4535  00ED84                     l279:
  4536  00ED84  0012               	return		;funcret
  4537  00ED86                     __end_of_drawFastHLine:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon2	equ	0xFF1
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _drawCircle *****************
  4557 ;; Defined at:
  4558 ;;		line 565 in file "ST7735_TFT.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  x0              2   11[COMRAM] int 
  4561 ;;  y0              2   13[COMRAM] int 
  4562 ;;  r               2   15[COMRAM] int 
  4563 ;;  color           2   17[COMRAM] unsigned int 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  y               2   29[COMRAM] int 
  4566 ;;  x               2   27[COMRAM] int 
  4567 ;;  f               2   25[COMRAM] int 
  4568 ;;  ddF_y           2   23[COMRAM] int 
  4569 ;;  ddF_x           2   21[COMRAM] int 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;		None               void
  4572 ;; Registers used:
  4573 ;;		wreg, status,2, status,0, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4579 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;Total ram usage:       20 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    4
  4586 ;; This function calls:
  4587 ;;		_drawPixel
  4588 ;; This function is called by:
  4589 ;;		_Initialize_Screen
  4590 ;;		_update_LCD_color
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text17
  4595  00F458                     __ptext17:
  4596                           	opt stack 0
  4597  00F458                     _drawCircle:
  4598                           	opt stack 25
  4599                           
  4600                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  4601                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  4602                           
  4603                           ;incstack = 0
  4604  00F458  C010  F014         	movff	drawCircle@r,??_drawCircle
  4605  00F45C  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  4606  00F460  1E14               	comf	??_drawCircle,f,c
  4607  00F462  1E15               	comf	??_drawCircle+1,f,c
  4608  00F464  4A14               	infsnz	??_drawCircle,f,c
  4609  00F466  2A15               	incf	??_drawCircle+1,f,c
  4610  00F468  0E01               	movlw	1
  4611  00F46A  2414               	addwf	??_drawCircle,w,c
  4612  00F46C  6E1A               	movwf	drawCircle@f,c
  4613  00F46E  0E00               	movlw	0
  4614  00F470  2015               	addwfc	??_drawCircle+1,w,c
  4615  00F472  6E1B               	movwf	drawCircle@f+1,c
  4616  00F474  0E00               	movlw	0
  4617  00F476  6E17               	movwf	drawCircle@ddF_x+1,c
  4618  00F478  0E01               	movlw	1
  4619  00F47A  6E16               	movwf	drawCircle@ddF_x,c
  4620  00F47C  C010  F014         	movff	drawCircle@r,??_drawCircle
  4621  00F480  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  4622  00F484  90D8               	bcf	status,0,c
  4623  00F486  3614               	rlcf	??_drawCircle,f,c
  4624  00F488  3615               	rlcf	??_drawCircle+1,f,c
  4625  00F48A  1E14               	comf	??_drawCircle,f,c
  4626  00F48C  1E15               	comf	??_drawCircle+1,f,c
  4627  00F48E  4A14               	infsnz	??_drawCircle,f,c
  4628  00F490  2A15               	incf	??_drawCircle+1,f,c
  4629  00F492  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  4630  00F496  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  4631  00F49A  0E00               	movlw	0
  4632  00F49C  6E1D               	movwf	drawCircle@x+1,c
  4633  00F49E  0E00               	movlw	0
  4634  00F4A0  6E1C               	movwf	drawCircle@x,c
  4635  00F4A2  C010  F01E         	movff	drawCircle@r,drawCircle@y
  4636  00F4A6  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  4637                           
  4638                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  4639  00F4AA  500E               	movf	drawCircle@y0,w,c
  4640  00F4AC  2410               	addwf	drawCircle@r,w,c
  4641  00F4AE  6E08               	movwf	drawPixel@y,c
  4642  00F4B0  C012  F009         	movff	drawCircle@color,drawPixel@color
  4643  00F4B4  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4644  00F4B8  500C               	movf	drawCircle@x0,w,c
  4645  00F4BA  ECE6  F074         	call	_drawPixel
  4646                           
  4647                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  4648  00F4BE  5010               	movf	drawCircle@r,w,c
  4649  00F4C0  0800               	sublw	0
  4650  00F4C2  240E               	addwf	drawCircle@y0,w,c
  4651  00F4C4  6E08               	movwf	drawPixel@y,c
  4652  00F4C6  C012  F009         	movff	drawCircle@color,drawPixel@color
  4653  00F4CA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4654  00F4CE  500C               	movf	drawCircle@x0,w,c
  4655  00F4D0  ECE6  F074         	call	_drawPixel
  4656                           
  4657                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  4658  00F4D4  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  4659  00F4D8  C012  F009         	movff	drawCircle@color,drawPixel@color
  4660  00F4DC  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4661  00F4E0  500C               	movf	drawCircle@x0,w,c
  4662  00F4E2  2410               	addwf	drawCircle@r,w,c
  4663  00F4E4  ECE6  F074         	call	_drawPixel
  4664                           
  4665                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  4666  00F4E8  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  4667  00F4EC  C012  F009         	movff	drawCircle@color,drawPixel@color
  4668  00F4F0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4669  00F4F4  5010               	movf	drawCircle@r,w,c
  4670  00F4F6  0800               	sublw	0
  4671  00F4F8  240C               	addwf	drawCircle@x0,w,c
  4672  00F4FA  ECE6  F074         	call	_drawPixel
  4673                           
  4674                           ;ST7735_TFT.c: 573: while (x < y) {
  4675  00F4FE  D078               	goto	l2925
  4676  00F500                     l2897:
  4677                           
  4678                           ;ST7735_TFT.c: 574: if (f >= 0) {
  4679  00F500  BE1B               	btfsc	drawCircle@f+1,7,c
  4680  00F502  D00B               	goto	l245
  4681                           
  4682                           ;ST7735_TFT.c: 575: y--;
  4683  00F504  061E               	decf	drawCircle@y,f,c
  4684  00F506  A0D8               	btfss	status,0,c
  4685  00F508  061F               	decf	drawCircle@y+1,f,c
  4686                           
  4687                           ;ST7735_TFT.c: 576: ddF_y += 2;
  4688  00F50A  0E02               	movlw	2
  4689  00F50C  2618               	addwf	drawCircle@ddF_y,f,c
  4690  00F50E  0E00               	movlw	0
  4691  00F510  2219               	addwfc	drawCircle@ddF_y+1,f,c
  4692                           
  4693                           ;ST7735_TFT.c: 577: f += ddF_y;
  4694  00F512  5018               	movf	drawCircle@ddF_y,w,c
  4695  00F514  261A               	addwf	drawCircle@f,f,c
  4696  00F516  5019               	movf	drawCircle@ddF_y+1,w,c
  4697  00F518  221B               	addwfc	drawCircle@f+1,f,c
  4698  00F51A                     l245:
  4699                           
  4700                           ;ST7735_TFT.c: 578: }
  4701                           ;ST7735_TFT.c: 579: x++;
  4702  00F51A  4A1C               	infsnz	drawCircle@x,f,c
  4703  00F51C  2A1D               	incf	drawCircle@x+1,f,c
  4704                           
  4705                           ;ST7735_TFT.c: 580: ddF_x += 2;
  4706  00F51E  0E02               	movlw	2
  4707  00F520  2616               	addwf	drawCircle@ddF_x,f,c
  4708  00F522  0E00               	movlw	0
  4709  00F524  2217               	addwfc	drawCircle@ddF_x+1,f,c
  4710                           
  4711                           ;ST7735_TFT.c: 581: f += ddF_x;
  4712  00F526  5016               	movf	drawCircle@ddF_x,w,c
  4713  00F528  261A               	addwf	drawCircle@f,f,c
  4714  00F52A  5017               	movf	drawCircle@ddF_x+1,w,c
  4715  00F52C  221B               	addwfc	drawCircle@f+1,f,c
  4716                           
  4717                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  4718  00F52E  500E               	movf	drawCircle@y0,w,c
  4719  00F530  241E               	addwf	drawCircle@y,w,c
  4720  00F532  6E08               	movwf	drawPixel@y,c
  4721  00F534  C012  F009         	movff	drawCircle@color,drawPixel@color
  4722  00F538  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4723  00F53C  500C               	movf	drawCircle@x0,w,c
  4724  00F53E  241C               	addwf	drawCircle@x,w,c
  4725  00F540  ECE6  F074         	call	_drawPixel
  4726                           
  4727                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  4728  00F544  500E               	movf	drawCircle@y0,w,c
  4729  00F546  241E               	addwf	drawCircle@y,w,c
  4730  00F548  6E08               	movwf	drawPixel@y,c
  4731  00F54A  C012  F009         	movff	drawCircle@color,drawPixel@color
  4732  00F54E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4733  00F552  501C               	movf	drawCircle@x,w,c
  4734  00F554  0800               	sublw	0
  4735  00F556  240C               	addwf	drawCircle@x0,w,c
  4736  00F558  ECE6  F074         	call	_drawPixel
  4737                           
  4738                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  4739  00F55C  501E               	movf	drawCircle@y,w,c
  4740  00F55E  0800               	sublw	0
  4741  00F560  240E               	addwf	drawCircle@y0,w,c
  4742  00F562  6E08               	movwf	drawPixel@y,c
  4743  00F564  C012  F009         	movff	drawCircle@color,drawPixel@color
  4744  00F568  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4745  00F56C  500C               	movf	drawCircle@x0,w,c
  4746  00F56E  241C               	addwf	drawCircle@x,w,c
  4747  00F570  ECE6  F074         	call	_drawPixel
  4748                           
  4749                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  4750  00F574  501E               	movf	drawCircle@y,w,c
  4751  00F576  0800               	sublw	0
  4752  00F578  240E               	addwf	drawCircle@y0,w,c
  4753  00F57A  6E08               	movwf	drawPixel@y,c
  4754  00F57C  C012  F009         	movff	drawCircle@color,drawPixel@color
  4755  00F580  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4756  00F584  501C               	movf	drawCircle@x,w,c
  4757  00F586  0800               	sublw	0
  4758  00F588  240C               	addwf	drawCircle@x0,w,c
  4759  00F58A  ECE6  F074         	call	_drawPixel
  4760                           
  4761                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  4762  00F58E  500E               	movf	drawCircle@y0,w,c
  4763  00F590  241C               	addwf	drawCircle@x,w,c
  4764  00F592  6E08               	movwf	drawPixel@y,c
  4765  00F594  C012  F009         	movff	drawCircle@color,drawPixel@color
  4766  00F598  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4767  00F59C  500C               	movf	drawCircle@x0,w,c
  4768  00F59E  241E               	addwf	drawCircle@y,w,c
  4769  00F5A0  ECE6  F074         	call	_drawPixel
  4770                           
  4771                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  4772  00F5A4  500E               	movf	drawCircle@y0,w,c
  4773  00F5A6  241C               	addwf	drawCircle@x,w,c
  4774  00F5A8  6E08               	movwf	drawPixel@y,c
  4775  00F5AA  C012  F009         	movff	drawCircle@color,drawPixel@color
  4776  00F5AE  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4777  00F5B2  501E               	movf	drawCircle@y,w,c
  4778  00F5B4  0800               	sublw	0
  4779  00F5B6  240C               	addwf	drawCircle@x0,w,c
  4780  00F5B8  ECE6  F074         	call	_drawPixel
  4781                           
  4782                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  4783  00F5BC  501C               	movf	drawCircle@x,w,c
  4784  00F5BE  0800               	sublw	0
  4785  00F5C0  240E               	addwf	drawCircle@y0,w,c
  4786  00F5C2  6E08               	movwf	drawPixel@y,c
  4787  00F5C4  C012  F009         	movff	drawCircle@color,drawPixel@color
  4788  00F5C8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4789  00F5CC  500C               	movf	drawCircle@x0,w,c
  4790  00F5CE  241E               	addwf	drawCircle@y,w,c
  4791  00F5D0  ECE6  F074         	call	_drawPixel
  4792                           
  4793                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  4794  00F5D4  501C               	movf	drawCircle@x,w,c
  4795  00F5D6  0800               	sublw	0
  4796  00F5D8  240E               	addwf	drawCircle@y0,w,c
  4797  00F5DA  6E08               	movwf	drawPixel@y,c
  4798  00F5DC  C012  F009         	movff	drawCircle@color,drawPixel@color
  4799  00F5E0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  4800  00F5E4  501E               	movf	drawCircle@y,w,c
  4801  00F5E6  0800               	sublw	0
  4802  00F5E8  240C               	addwf	drawCircle@x0,w,c
  4803  00F5EA  ECE6  F074         	call	_drawPixel
  4804  00F5EE  D000               	goto	l2925
  4805  00F5F0                     l2925:
  4806  00F5F0  501E               	movf	drawCircle@y,w,c
  4807  00F5F2  5C1C               	subwf	drawCircle@x,w,c
  4808  00F5F4  501D               	movf	drawCircle@x+1,w,c
  4809  00F5F6  0A80               	xorlw	128
  4810  00F5F8  6E14               	movwf	??_drawCircle& (0+255),c
  4811  00F5FA  501F               	movf	drawCircle@y+1,w,c
  4812  00F5FC  0A80               	xorlw	128
  4813  00F5FE  5814               	subwfb	??_drawCircle& (0+255),w,c
  4814  00F600  A0D8               	btfss	status,0,c
  4815  00F602  D77E               	goto	l2897
  4816  00F604  0012               	return		;funcret
  4817  00F606                     __end_of_drawCircle:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon2	equ	0xFF1
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           postdec1	equ	0xFE5
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _drawPixel *****************
  4837 ;; Defined at:
  4838 ;;		line 444 in file "ST7735_TFT.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  x               1    wreg     unsigned char 
  4841 ;;  y               1    7[COMRAM] unsigned char 
  4842 ;;  color           2    8[COMRAM] unsigned int 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  x               1   10[COMRAM] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;		None               void
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        4 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    3
  4861 ;; This function calls:
  4862 ;;		_setAddrWindow
  4863 ;;		_write_data
  4864 ;; This function is called by:
  4865 ;;		_drawChar
  4866 ;;		_drawCircle
  4867 ;;		_drawCircleHelper
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text18
  4872  00E9CC                     __ptext18:
  4873                           	opt stack 0
  4874  00E9CC                     _drawPixel:
  4875                           	opt stack 24
  4876                           
  4877                           ;incstack = 0
  4878                           ;drawPixel@x stored from wreg
  4879  00E9CC  6E0B               	movwf	drawPixel@x,c
  4880                           
  4881                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  4882  00E9CE  0E80               	movlw	128
  4883  00E9D0  600B               	cpfslt	drawPixel@x,c
  4884  00E9D2  D013               	goto	l175
  4885  00E9D4  0E9F               	movlw	159
  4886  00E9D6  6408               	cpfsgt	drawPixel@y,c
  4887  00E9D8  D001               	goto	l2555
  4888                           
  4889                           ;ST7735_TFT.c: 447: return;
  4890  00E9DA  D00F               	goto	l175
  4891  00E9DC                     l2555:
  4892                           
  4893                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  4894  00E9DC  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  4895  00E9E0  280B               	incf	drawPixel@x,w,c
  4896  00E9E2  6E05               	movwf	setAddrWindow@x1,c
  4897  00E9E4  2808               	incf	drawPixel@y,w,c
  4898  00E9E6  6E06               	movwf	setAddrWindow@y1,c
  4899  00E9E8  500B               	movf	drawPixel@x,w,c
  4900  00E9EA  EC9B  F075         	call	_setAddrWindow
  4901                           
  4902                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  4903  00E9EE  500A               	movf	drawPixel@color+1,w,c
  4904  00E9F0  EC58  F074         	call	_write_data
  4905                           
  4906                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  4907  00E9F4  5009               	movf	drawPixel@color,w,c
  4908  00E9F6  EC58  F074         	call	_write_data
  4909  00E9FA                     l175:
  4910  00E9FA  0012               	return		;funcret
  4911  00E9FC                     __end_of_drawPixel:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon2	equ	0xFF1
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           postdec1	equ	0xFE5
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _setAddrWindow *****************
  4931 ;; Defined at:
  4932 ;;		line 429 in file "ST7735_TFT.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  x0              1    wreg     unsigned char 
  4935 ;;  y0              1    3[COMRAM] unsigned char 
  4936 ;;  x1              1    4[COMRAM] unsigned char 
  4937 ;;  y1              1    5[COMRAM] unsigned char 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  x0              1    6[COMRAM] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;		None               void
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4949 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;Total ram usage:        4 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    2
  4956 ;; This function calls:
  4957 ;;		_write_command
  4958 ;;		_write_data
  4959 ;; This function is called by:
  4960 ;;		_drawPixel
  4961 ;;		_drawFastVLine
  4962 ;;		_fillRectangle
  4963 ;;		_drawFastHLine
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text19
  4968  00EB36                     __ptext19:
  4969                           	opt stack 0
  4970  00EB36                     _setAddrWindow:
  4971                           	opt stack 25
  4972                           
  4973                           ;incstack = 0
  4974                           ;setAddrWindow@x0 stored from wreg
  4975  00EB36  6E07               	movwf	setAddrWindow@x0,c
  4976                           
  4977                           ;ST7735_TFT.c: 431: write_command(0x2A);
  4978  00EB38  0E2A               	movlw	42
  4979  00EB3A  EC50  F074         	call	_write_command
  4980                           
  4981                           ;ST7735_TFT.c: 432: write_data(0);
  4982  00EB3E  0E00               	movlw	0
  4983  00EB40  EC58  F074         	call	_write_data
  4984                           
  4985                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  4986  00EB44  5007               	movf	setAddrWindow@x0,w,c
  4987  00EB46  2476               	addwf	_colstart,w,c
  4988  00EB48  EC58  F074         	call	_write_data
  4989                           
  4990                           ;ST7735_TFT.c: 434: write_data(0);
  4991  00EB4C  0E00               	movlw	0
  4992  00EB4E  EC58  F074         	call	_write_data
  4993                           
  4994                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  4995  00EB52  5005               	movf	setAddrWindow@x1,w,c
  4996  00EB54  2476               	addwf	_colstart,w,c
  4997  00EB56  EC58  F074         	call	_write_data
  4998                           
  4999                           ;ST7735_TFT.c: 436: write_command(0x2B);
  5000  00EB5A  0E2B               	movlw	43
  5001  00EB5C  EC50  F074         	call	_write_command
  5002                           
  5003                           ;ST7735_TFT.c: 437: write_data(0);
  5004  00EB60  0E00               	movlw	0
  5005  00EB62  EC58  F074         	call	_write_data
  5006                           
  5007                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  5008  00EB66  5004               	movf	setAddrWindow@y0,w,c
  5009  00EB68  2479               	addwf	_rowstart,w,c
  5010  00EB6A  EC58  F074         	call	_write_data
  5011                           
  5012                           ;ST7735_TFT.c: 439: write_data(0);
  5013  00EB6E  0E00               	movlw	0
  5014  00EB70  EC58  F074         	call	_write_data
  5015                           
  5016                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  5017  00EB74  5006               	movf	setAddrWindow@y1,w,c
  5018  00EB76  2479               	addwf	_rowstart,w,c
  5019  00EB78  EC58  F074         	call	_write_data
  5020                           
  5021                           ;ST7735_TFT.c: 441: write_command(0x2C);
  5022  00EB7C  0E2C               	movlw	44
  5023  00EB7E  EC50  F074         	call	_write_command
  5024  00EB82  0012               	return		;funcret
  5025  00EB84                     __end_of_setAddrWindow:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon2	equ	0xFF1
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           postdec1	equ	0xFE5
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _TFT_GreenTab_Initialize *****************
  5045 ;; Defined at:
  5046 ;;		line 681 in file "ST7735_TFT.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        0 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    3
  5067 ;; This function calls:
  5068 ;;		_Rcmd1
  5069 ;;		_Rcmd2red
  5070 ;;		_Rcmd3
  5071 ;;		_write_command
  5072 ;;		_write_data
  5073 ;; This function is called by:
  5074 ;;		_Initialize_Screen
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text20
  5079  00E974                     __ptext20:
  5080                           	opt stack 0
  5081  00E974                     _TFT_GreenTab_Initialize:
  5082                           	opt stack 26
  5083                           
  5084                           ;ST7735_TFT.c: 683: PORTCbits.RC4 = 1;
  5085                           
  5086                           ;incstack = 0
  5087  00E974  8882               	bsf	3970,4,c	;volatile
  5088                           
  5089                           ;ST7735_TFT.c: 684: PORTCbits.RC2 = 0;
  5090  00E976  9482               	bcf	3970,2,c	;volatile
  5091                           
  5092                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  5093  00E978  0E80               	movlw	128
  5094  00E97A  6EC7               	movwf	4039,c	;volatile
  5095                           
  5096                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  5097  00E97C  0E30               	movlw	48
  5098  00E97E  6EC6               	movwf	4038,c	;volatile
  5099                           
  5100                           ;ST7735_TFT.c: 690: Rcmd1();
  5101  00E980  EC5D  F078         	call	_Rcmd1	;wreg free
  5102                           
  5103                           ;ST7735_TFT.c: 691: Rcmd2red();
  5104  00E984  EC17  F075         	call	_Rcmd2red	;wreg free
  5105                           
  5106                           ;ST7735_TFT.c: 692: Rcmd3();
  5107  00E988  ECE4  F077         	call	_Rcmd3	;wreg free
  5108                           
  5109                           ;ST7735_TFT.c: 693: write_command(0x36);
  5110  00E98C  0E36               	movlw	54
  5111  00E98E  EC50  F074         	call	_write_command
  5112                           
  5113                           ;ST7735_TFT.c: 694: write_data(0xC0);
  5114  00E992  0EC0               	movlw	192
  5115  00E994  EC58  F074         	call	_write_data
  5116                           
  5117                           ;ST7735_TFT.c: 695: _tft_type = 1;
  5118  00E998  0E01               	movlw	1
  5119  00E99A  6E75               	movwf	__tft_type,c
  5120  00E99C  0012               	return		;funcret
  5121  00E99E                     __end_of_TFT_GreenTab_Initialize:
  5122                           	opt stack 0
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon2	equ	0xFF1
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           fsr1l	equ	0xFE1
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function _Rcmd3 *****************
  5141 ;; Defined at:
  5142 ;;		line 375 in file "ST7735_TFT.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;		None               void
  5149 ;; Registers used:
  5150 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    2
  5163 ;; This function calls:
  5164 ;;		_delay_ms
  5165 ;;		_write_command
  5166 ;;		_write_data
  5167 ;; This function is called by:
  5168 ;;		_TFT_GreenTab_Initialize
  5169 ;;		_TFT_BlackTab_Initialize
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text21
  5174  00EFC8                     __ptext21:
  5175                           	opt stack 0
  5176  00EFC8                     _Rcmd3:
  5177                           	opt stack 26
  5178                           
  5179                           ;ST7735_TFT.c: 377: write_command(0xE0);
  5180                           
  5181                           ;incstack = 0
  5182  00EFC8  0EE0               	movlw	224
  5183  00EFCA  EC50  F074         	call	_write_command
  5184                           
  5185                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5186  00EFCE  0E02               	movlw	2
  5187  00EFD0  EC58  F074         	call	_write_data
  5188  00EFD4  0E1C               	movlw	28
  5189  00EFD6  EC58  F074         	call	_write_data
  5190  00EFDA  0E07               	movlw	7
  5191  00EFDC  EC58  F074         	call	_write_data
  5192  00EFE0  0E12               	movlw	18
  5193  00EFE2  EC58  F074         	call	_write_data
  5194                           
  5195                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5196  00EFE6  0E37               	movlw	55
  5197  00EFE8  EC58  F074         	call	_write_data
  5198  00EFEC  0E32               	movlw	50
  5199  00EFEE  EC58  F074         	call	_write_data
  5200  00EFF2  0E29               	movlw	41
  5201  00EFF4  EC58  F074         	call	_write_data
  5202  00EFF8  0E2D               	movlw	45
  5203  00EFFA  EC58  F074         	call	_write_data
  5204                           
  5205                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5206  00EFFE  0E29               	movlw	41
  5207  00F000  EC58  F074         	call	_write_data
  5208  00F004  0E25               	movlw	37
  5209  00F006  EC58  F074         	call	_write_data
  5210  00F00A  0E2B               	movlw	43
  5211  00F00C  EC58  F074         	call	_write_data
  5212  00F010  0E39               	movlw	57
  5213  00F012  EC58  F074         	call	_write_data
  5214                           
  5215                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5216  00F016  0E00               	movlw	0
  5217  00F018  EC58  F074         	call	_write_data
  5218  00F01C  0E01               	movlw	1
  5219  00F01E  EC58  F074         	call	_write_data
  5220  00F022  0E03               	movlw	3
  5221  00F024  EC58  F074         	call	_write_data
  5222  00F028  0E10               	movlw	16
  5223  00F02A  EC58  F074         	call	_write_data
  5224                           
  5225                           ;ST7735_TFT.c: 382: write_command(0xE1);
  5226  00F02E  0EE1               	movlw	225
  5227  00F030  EC50  F074         	call	_write_command
  5228                           
  5229                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5230  00F034  0E03               	movlw	3
  5231  00F036  EC58  F074         	call	_write_data
  5232  00F03A  0E1D               	movlw	29
  5233  00F03C  EC58  F074         	call	_write_data
  5234  00F040  0E07               	movlw	7
  5235  00F042  EC58  F074         	call	_write_data
  5236  00F046  0E06               	movlw	6
  5237  00F048  EC58  F074         	call	_write_data
  5238                           
  5239                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5240  00F04C  0E2E               	movlw	46
  5241  00F04E  EC58  F074         	call	_write_data
  5242  00F052  0E2C               	movlw	44
  5243  00F054  EC58  F074         	call	_write_data
  5244  00F058  0E29               	movlw	41
  5245  00F05A  EC58  F074         	call	_write_data
  5246  00F05E  0E2D               	movlw	45
  5247  00F060  EC58  F074         	call	_write_data
  5248                           
  5249                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5250  00F064  0E2E               	movlw	46
  5251  00F066  EC58  F074         	call	_write_data
  5252  00F06A  0E2E               	movlw	46
  5253  00F06C  EC58  F074         	call	_write_data
  5254  00F070  0E37               	movlw	55
  5255  00F072  EC58  F074         	call	_write_data
  5256  00F076  0E3F               	movlw	63
  5257  00F078  EC58  F074         	call	_write_data
  5258                           
  5259                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5260  00F07C  0E00               	movlw	0
  5261  00F07E  EC58  F074         	call	_write_data
  5262  00F082  0E00               	movlw	0
  5263  00F084  EC58  F074         	call	_write_data
  5264  00F088  0E02               	movlw	2
  5265  00F08A  EC58  F074         	call	_write_data
  5266  00F08E  0E10               	movlw	16
  5267  00F090  EC58  F074         	call	_write_data
  5268                           
  5269                           ;ST7735_TFT.c: 387: write_command(0x13);
  5270  00F094  0E13               	movlw	19
  5271  00F096  EC50  F074         	call	_write_command
  5272                           
  5273                           ;ST7735_TFT.c: 388: delay_ms(10);
  5274  00F09A  0E00               	movlw	0
  5275  00F09C  6E08               	movwf	delay_ms@ms+1,c
  5276  00F09E  0E0A               	movlw	10
  5277  00F0A0  6E07               	movwf	delay_ms@ms,c
  5278  00F0A2  ECC2  F075         	call	_delay_ms	;wreg free
  5279                           
  5280                           ;ST7735_TFT.c: 389: write_command(0x29);
  5281  00F0A6  0E29               	movlw	41
  5282  00F0A8  EC50  F074         	call	_write_command
  5283                           
  5284                           ;ST7735_TFT.c: 390: delay_ms(100);
  5285  00F0AC  0E00               	movlw	0
  5286  00F0AE  6E08               	movwf	delay_ms@ms+1,c
  5287  00F0B0  0E64               	movlw	100
  5288  00F0B2  6E07               	movwf	delay_ms@ms,c
  5289  00F0B4  ECC2  F075         	call	_delay_ms	;wreg free
  5290  00F0B8  0012               	return		;funcret
  5291  00F0BA                     __end_of_Rcmd3:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon2	equ	0xFF1
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1l	equ	0xFE1
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function _Rcmd2red *****************
  5311 ;; Defined at:
  5312 ;;		line 365 in file "ST7735_TFT.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    2
  5333 ;; This function calls:
  5334 ;;		_write_command
  5335 ;;		_write_data
  5336 ;; This function is called by:
  5337 ;;		_TFT_GreenTab_Initialize
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	text22
  5342  00EA2E                     __ptext22:
  5343                           	opt stack 0
  5344  00EA2E                     _Rcmd2red:
  5345                           	opt stack 26
  5346                           
  5347                           ;ST7735_TFT.c: 367: write_command(0x2A);
  5348                           
  5349                           ;incstack = 0
  5350  00EA2E  0E2A               	movlw	42
  5351  00EA30  EC50  F074         	call	_write_command
  5352                           
  5353                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  5354  00EA34  0E00               	movlw	0
  5355  00EA36  EC58  F074         	call	_write_data
  5356  00EA3A  0E00               	movlw	0
  5357  00EA3C  EC58  F074         	call	_write_data
  5358                           
  5359                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  5360  00EA40  0E00               	movlw	0
  5361  00EA42  EC58  F074         	call	_write_data
  5362  00EA46  0E7F               	movlw	127
  5363  00EA48  EC58  F074         	call	_write_data
  5364                           
  5365                           ;ST7735_TFT.c: 370: write_command(0x2B);
  5366  00EA4C  0E2B               	movlw	43
  5367  00EA4E  EC50  F074         	call	_write_command
  5368                           
  5369                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  5370  00EA52  0E00               	movlw	0
  5371  00EA54  EC58  F074         	call	_write_data
  5372  00EA58  0E00               	movlw	0
  5373  00EA5A  EC58  F074         	call	_write_data
  5374                           
  5375                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  5376  00EA5E  0E00               	movlw	0
  5377  00EA60  EC58  F074         	call	_write_data
  5378  00EA64  0E9F               	movlw	159
  5379  00EA66  EC58  F074         	call	_write_data
  5380  00EA6A  0012               	return		;funcret
  5381  00EA6C                     __end_of_Rcmd2red:
  5382                           	opt stack 0
  5383                           tblptru	equ	0xFF8
  5384                           tblptrh	equ	0xFF7
  5385                           tblptrl	equ	0xFF6
  5386                           tablat	equ	0xFF5
  5387                           prodh	equ	0xFF4
  5388                           prodl	equ	0xFF3
  5389                           intcon2	equ	0xFF1
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _Rcmd1 *****************
  5401 ;; Defined at:
  5402 ;;		line 318 in file "ST7735_TFT.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;		None               void
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    2
  5423 ;; This function calls:
  5424 ;;		_delay_ms
  5425 ;;		_write_command
  5426 ;;		_write_data
  5427 ;; This function is called by:
  5428 ;;		_TFT_GreenTab_Initialize
  5429 ;;		_TFT_BlackTab_Initialize
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text23
  5434  00F0BA                     __ptext23:
  5435                           	opt stack 0
  5436  00F0BA                     _Rcmd1:
  5437                           	opt stack 26
  5438                           
  5439                           ;ST7735_TFT.c: 320: write_command(0x01);
  5440                           
  5441                           ;incstack = 0
  5442  00F0BA  0E01               	movlw	1
  5443  00F0BC  EC50  F074         	call	_write_command
  5444                           
  5445                           ;ST7735_TFT.c: 321: delay_ms(150);
  5446  00F0C0  0E00               	movlw	0
  5447  00F0C2  6E08               	movwf	delay_ms@ms+1,c
  5448  00F0C4  0E96               	movlw	150
  5449  00F0C6  6E07               	movwf	delay_ms@ms,c
  5450  00F0C8  ECC2  F075         	call	_delay_ms	;wreg free
  5451                           
  5452                           ;ST7735_TFT.c: 322: write_command(0x11);
  5453  00F0CC  0E11               	movlw	17
  5454  00F0CE  EC50  F074         	call	_write_command
  5455                           
  5456                           ;ST7735_TFT.c: 323: delay_ms(500);
  5457  00F0D2  0E01               	movlw	1
  5458  00F0D4  6E08               	movwf	delay_ms@ms+1,c
  5459  00F0D6  0EF4               	movlw	244
  5460  00F0D8  6E07               	movwf	delay_ms@ms,c
  5461  00F0DA  ECC2  F075         	call	_delay_ms	;wreg free
  5462                           
  5463                           ;ST7735_TFT.c: 324: write_command(0xB1);
  5464  00F0DE  0EB1               	movlw	177
  5465  00F0E0  EC50  F074         	call	_write_command
  5466                           
  5467                           ;ST7735_TFT.c: 325: write_data(0x01);
  5468  00F0E4  0E01               	movlw	1
  5469  00F0E6  EC58  F074         	call	_write_data
  5470                           
  5471                           ;ST7735_TFT.c: 326: write_data(0x2C);
  5472  00F0EA  0E2C               	movlw	44
  5473  00F0EC  EC58  F074         	call	_write_data
  5474                           
  5475                           ;ST7735_TFT.c: 327: write_data(0x2D);
  5476  00F0F0  0E2D               	movlw	45
  5477  00F0F2  EC58  F074         	call	_write_data
  5478                           
  5479                           ;ST7735_TFT.c: 328: write_command(0xB2);
  5480  00F0F6  0EB2               	movlw	178
  5481  00F0F8  EC50  F074         	call	_write_command
  5482                           
  5483                           ;ST7735_TFT.c: 329: write_data(0x01);
  5484  00F0FC  0E01               	movlw	1
  5485  00F0FE  EC58  F074         	call	_write_data
  5486                           
  5487                           ;ST7735_TFT.c: 330: write_data(0x2C);
  5488  00F102  0E2C               	movlw	44
  5489  00F104  EC58  F074         	call	_write_data
  5490                           
  5491                           ;ST7735_TFT.c: 331: write_data(0x2D);
  5492  00F108  0E2D               	movlw	45
  5493  00F10A  EC58  F074         	call	_write_data
  5494                           
  5495                           ;ST7735_TFT.c: 332: write_command(0xB3);
  5496  00F10E  0EB3               	movlw	179
  5497  00F110  EC50  F074         	call	_write_command
  5498                           
  5499                           ;ST7735_TFT.c: 333: write_data(0x01);
  5500  00F114  0E01               	movlw	1
  5501  00F116  EC58  F074         	call	_write_data
  5502                           
  5503                           ;ST7735_TFT.c: 334: write_data(0x2C);
  5504  00F11A  0E2C               	movlw	44
  5505  00F11C  EC58  F074         	call	_write_data
  5506                           
  5507                           ;ST7735_TFT.c: 335: write_data(0x2D);
  5508  00F120  0E2D               	movlw	45
  5509  00F122  EC58  F074         	call	_write_data
  5510                           
  5511                           ;ST7735_TFT.c: 336: write_data(0x01);
  5512  00F126  0E01               	movlw	1
  5513  00F128  EC58  F074         	call	_write_data
  5514                           
  5515                           ;ST7735_TFT.c: 337: write_data(0x2C);
  5516  00F12C  0E2C               	movlw	44
  5517  00F12E  EC58  F074         	call	_write_data
  5518                           
  5519                           ;ST7735_TFT.c: 338: write_data(0x2D);
  5520  00F132  0E2D               	movlw	45
  5521  00F134  EC58  F074         	call	_write_data
  5522                           
  5523                           ;ST7735_TFT.c: 339: write_command(0xB4);
  5524  00F138  0EB4               	movlw	180
  5525  00F13A  EC50  F074         	call	_write_command
  5526                           
  5527                           ;ST7735_TFT.c: 340: write_data(0x07);
  5528  00F13E  0E07               	movlw	7
  5529  00F140  EC58  F074         	call	_write_data
  5530                           
  5531                           ;ST7735_TFT.c: 341: write_command(0xC0);
  5532  00F144  0EC0               	movlw	192
  5533  00F146  EC50  F074         	call	_write_command
  5534                           
  5535                           ;ST7735_TFT.c: 342: write_data(0xA2);
  5536  00F14A  0EA2               	movlw	162
  5537  00F14C  EC58  F074         	call	_write_data
  5538                           
  5539                           ;ST7735_TFT.c: 343: write_data(0x02);
  5540  00F150  0E02               	movlw	2
  5541  00F152  EC58  F074         	call	_write_data
  5542                           
  5543                           ;ST7735_TFT.c: 344: write_data(0x84);
  5544  00F156  0E84               	movlw	132
  5545  00F158  EC58  F074         	call	_write_data
  5546                           
  5547                           ;ST7735_TFT.c: 345: write_command(0xC1);
  5548  00F15C  0EC1               	movlw	193
  5549  00F15E  EC50  F074         	call	_write_command
  5550                           
  5551                           ;ST7735_TFT.c: 346: write_data(0xC5);
  5552  00F162  0EC5               	movlw	197
  5553  00F164  EC58  F074         	call	_write_data
  5554                           
  5555                           ;ST7735_TFT.c: 347: write_command(0xC2);
  5556  00F168  0EC2               	movlw	194
  5557  00F16A  EC50  F074         	call	_write_command
  5558                           
  5559                           ;ST7735_TFT.c: 348: write_data(0x0A);
  5560  00F16E  0E0A               	movlw	10
  5561  00F170  EC58  F074         	call	_write_data
  5562                           
  5563                           ;ST7735_TFT.c: 349: write_data(0x00);
  5564  00F174  0E00               	movlw	0
  5565  00F176  EC58  F074         	call	_write_data
  5566                           
  5567                           ;ST7735_TFT.c: 350: write_command(0xC3);
  5568  00F17A  0EC3               	movlw	195
  5569  00F17C  EC50  F074         	call	_write_command
  5570                           
  5571                           ;ST7735_TFT.c: 351: write_data(0x8A);
  5572  00F180  0E8A               	movlw	138
  5573  00F182  EC58  F074         	call	_write_data
  5574                           
  5575                           ;ST7735_TFT.c: 352: write_data(0x2A);
  5576  00F186  0E2A               	movlw	42
  5577  00F188  EC58  F074         	call	_write_data
  5578                           
  5579                           ;ST7735_TFT.c: 353: write_command(0xC4);
  5580  00F18C  0EC4               	movlw	196
  5581  00F18E  EC50  F074         	call	_write_command
  5582                           
  5583                           ;ST7735_TFT.c: 354: write_data(0x8A);
  5584  00F192  0E8A               	movlw	138
  5585  00F194  EC58  F074         	call	_write_data
  5586                           
  5587                           ;ST7735_TFT.c: 355: write_data(0xEE);
  5588  00F198  0EEE               	movlw	238
  5589  00F19A  EC58  F074         	call	_write_data
  5590                           
  5591                           ;ST7735_TFT.c: 356: write_command(0xC5);
  5592  00F19E  0EC5               	movlw	197
  5593  00F1A0  EC50  F074         	call	_write_command
  5594                           
  5595                           ;ST7735_TFT.c: 357: write_data(0x0E);
  5596  00F1A4  0E0E               	movlw	14
  5597  00F1A6  EC58  F074         	call	_write_data
  5598                           
  5599                           ;ST7735_TFT.c: 358: write_command(0x20);
  5600  00F1AA  0E20               	movlw	32
  5601  00F1AC  EC50  F074         	call	_write_command
  5602                           
  5603                           ;ST7735_TFT.c: 359: write_command(0x36);
  5604  00F1B0  0E36               	movlw	54
  5605  00F1B2  EC50  F074         	call	_write_command
  5606                           
  5607                           ;ST7735_TFT.c: 360: write_data(0xC8);
  5608  00F1B6  0EC8               	movlw	200
  5609  00F1B8  EC58  F074         	call	_write_data
  5610                           
  5611                           ;ST7735_TFT.c: 361: write_command(0x3A);
  5612  00F1BC  0E3A               	movlw	58
  5613  00F1BE  EC50  F074         	call	_write_command
  5614                           
  5615                           ;ST7735_TFT.c: 362: write_data(0x05);
  5616  00F1C2  0E05               	movlw	5
  5617  00F1C4  EC58  F074         	call	_write_data
  5618  00F1C8  0012               	return		;funcret
  5619  00F1CA                     __end_of_Rcmd1:
  5620                           	opt stack 0
  5621                           tblptru	equ	0xFF8
  5622                           tblptrh	equ	0xFF7
  5623                           tblptrl	equ	0xFF6
  5624                           tablat	equ	0xFF5
  5625                           prodh	equ	0xFF4
  5626                           prodl	equ	0xFF3
  5627                           intcon2	equ	0xFF1
  5628                           postinc0	equ	0xFEE
  5629                           wreg	equ	0xFE8
  5630                           postdec1	equ	0xFE5
  5631                           fsr1l	equ	0xFE1
  5632                           indf2	equ	0xFDF
  5633                           postinc2	equ	0xFDE
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _write_data *****************
  5639 ;; Defined at:
  5640 ;;		line 246 in file "ST7735_TFT.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  data_           1    wreg     unsigned char 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  data_           1    2[COMRAM] unsigned char 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        1 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    1
  5661 ;; This function calls:
  5662 ;;		_spiwrite
  5663 ;; This function is called by:
  5664 ;;		_Rcmd1
  5665 ;;		_Rcmd2red
  5666 ;;		_Rcmd3
  5667 ;;		_setAddrWindow
  5668 ;;		_drawPixel
  5669 ;;		_TFT_GreenTab_Initialize
  5670 ;;		_Bcmd
  5671 ;;		_setScrollDefinition
  5672 ;;		_Rcmd2green
  5673 ;;		_VerticalScroll
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text24
  5678  00E8B0                     __ptext24:
  5679                           	opt stack 0
  5680  00E8B0                     _write_data:
  5681                           	opt stack 25
  5682                           
  5683                           ;incstack = 0
  5684                           ;write_data@data_ stored from wreg
  5685  00E8B0  6E03               	movwf	write_data@data_,c
  5686                           
  5687                           ;ST7735_TFT.c: 248: PORTCbits.RC4 = 0;
  5688  00E8B2  9882               	bcf	3970,4,c	;volatile
  5689                           
  5690                           ;ST7735_TFT.c: 249: PORTCbits.RC2 = 1;
  5691  00E8B4  8482               	bsf	3970,2,c	;volatile
  5692                           
  5693                           ;ST7735_TFT.c: 250: spiwrite(data_);
  5694  00E8B6  5003               	movf	write_data@data_,w,c
  5695  00E8B8  EC69  F074         	call	_spiwrite
  5696                           
  5697                           ;ST7735_TFT.c: 251: PORTCbits.RC4 = 1;
  5698  00E8BC  8882               	bsf	3970,4,c	;volatile
  5699  00E8BE  0012               	return		;funcret
  5700  00E8C0                     __end_of_write_data:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon2	equ	0xFF1
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function _write_command *****************
  5720 ;; Defined at:
  5721 ;;		line 235 in file "ST7735_TFT.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  cmd_            1    wreg     unsigned char 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  cmd_            1    2[COMRAM] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;		None               void
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;Total ram usage:        1 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    1
  5742 ;; This function calls:
  5743 ;;		_spiwrite
  5744 ;; This function is called by:
  5745 ;;		_Rcmd1
  5746 ;;		_Rcmd2red
  5747 ;;		_Rcmd3
  5748 ;;		_setAddrWindow
  5749 ;;		_TFT_GreenTab_Initialize
  5750 ;;		_Bcmd
  5751 ;;		_setScrollDefinition
  5752 ;;		_Rcmd2green
  5753 ;;		_VerticalScroll
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text25
  5758  00E8A0                     __ptext25:
  5759                           	opt stack 0
  5760  00E8A0                     _write_command:
  5761                           	opt stack 25
  5762                           
  5763                           ;incstack = 0
  5764                           ;write_command@cmd_ stored from wreg
  5765  00E8A0  6E03               	movwf	write_command@cmd_,c
  5766                           
  5767                           ;ST7735_TFT.c: 237: PORTCbits.RC4 = 0;
  5768  00E8A2  9882               	bcf	3970,4,c	;volatile
  5769                           
  5770                           ;ST7735_TFT.c: 239: PORTCbits.RC2 = 0;
  5771  00E8A4  9482               	bcf	3970,2,c	;volatile
  5772                           
  5773                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  5774  00E8A6  5003               	movf	write_command@cmd_,w,c
  5775  00E8A8  EC69  F074         	call	_spiwrite
  5776                           
  5777                           ;ST7735_TFT.c: 242: PORTCbits.RC4 = 1;
  5778  00E8AC  8882               	bsf	3970,4,c	;volatile
  5779  00E8AE  0012               	return		;funcret
  5780  00E8B0                     __end_of_write_command:
  5781                           	opt stack 0
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodh	equ	0xFF4
  5787                           prodl	equ	0xFF3
  5788                           intcon2	equ	0xFF1
  5789                           postinc0	equ	0xFEE
  5790                           wreg	equ	0xFE8
  5791                           postdec1	equ	0xFE5
  5792                           fsr1l	equ	0xFE1
  5793                           indf2	equ	0xFDF
  5794                           postinc2	equ	0xFDE
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _spiwrite *****************
  5800 ;; Defined at:
  5801 ;;		line 226 in file "ST7735_TFT.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  spidata         1    wreg     unsigned char 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;  spidata         1    1[COMRAM] unsigned char 
  5806 ;;  x               1    0[COMRAM] unsigned char 
  5807 ;; Return value:  Size  Location     Type
  5808 ;;		None               void
  5809 ;; Registers used:
  5810 ;;		wreg
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;Total ram usage:        2 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; This function calls:
  5823 ;;		Nothing
  5824 ;; This function is called by:
  5825 ;;		_write_command
  5826 ;;		_write_data
  5827 ;;		_drawFastVLine
  5828 ;;		_fillRectangle
  5829 ;;		_drawFastHLine
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text26
  5834  00E8D2                     __ptext26:
  5835                           	opt stack 0
  5836  00E8D2                     _spiwrite:
  5837                           	opt stack 27
  5838                           
  5839                           ;incstack = 0
  5840                           ;spiwrite@spidata stored from wreg
  5841  00E8D2  6E02               	movwf	spiwrite@spidata,c
  5842                           
  5843                           ;ST7735_TFT.c: 228: char x;
  5844                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  5845  00E8D4  969E               	bcf	3998,3,c	;volatile
  5846                           
  5847                           ;ST7735_TFT.c: 230: x = SSPBUF;
  5848  00E8D6  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  5849                           
  5850                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  5851  00E8DA  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5852                           
  5853                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  5854  00E8DE  D000               	goto	l131
  5855  00E8E0                     l131:
  5856  00E8E0  A0C7               	btfss	4039,0,c	;volatile
  5857  00E8E2  D7FE               	goto	l131
  5858  00E8E4  0012               	return		;funcret
  5859  00E8E6                     __end_of_spiwrite:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon2	equ	0xFF1
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _LCD_Reset *****************
  5879 ;; Defined at:
  5880 ;;		line 254 in file "ST7735_TFT.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    2
  5901 ;; This function calls:
  5902 ;;		_delay_ms
  5903 ;; This function is called by:
  5904 ;;		_Initialize_Screen
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text27
  5909  00E8C0                     __ptext27:
  5910                           	opt stack 0
  5911  00E8C0                     _LCD_Reset:
  5912                           	opt stack 27
  5913                           
  5914                           ;ST7735_TFT.c: 256: PORTCbits.RC1 = 0;
  5915                           
  5916                           ;incstack = 0
  5917  00E8C0  9282               	bcf	3970,1,c	;volatile
  5918                           
  5919                           ;ST7735_TFT.c: 257: delay_ms(100);
  5920  00E8C2  0E00               	movlw	0
  5921  00E8C4  6E08               	movwf	delay_ms@ms+1,c
  5922  00E8C6  0E64               	movlw	100
  5923  00E8C8  6E07               	movwf	delay_ms@ms,c
  5924  00E8CA  ECC2  F075         	call	_delay_ms	;wreg free
  5925                           
  5926                           ;ST7735_TFT.c: 258: PORTCbits.RC1 = 1;
  5927  00E8CE  8282               	bsf	3970,1,c	;volatile
  5928  00E8D0  0012               	return		;funcret
  5929  00E8D2                     __end_of_LCD_Reset:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           prodh	equ	0xFF4
  5936                           prodl	equ	0xFF3
  5937                           intcon2	equ	0xFF1
  5938                           postinc0	equ	0xFEE
  5939                           wreg	equ	0xFE8
  5940                           postdec1	equ	0xFE5
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _delay_ms *****************
  5949 ;; Defined at:
  5950 ;;		line 101 in file "ST7735_TFT.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  ms              2    6[COMRAM] int 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  count           2   10[COMRAM] int 
  5955 ;; Return value:  Size  Location     Type
  5956 ;;		None               void
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;Total ram usage:        6 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    1
  5971 ;; This function calls:
  5972 ;;		___wmul
  5973 ;; This function is called by:
  5974 ;;		_LCD_Reset
  5975 ;;		_Rcmd1
  5976 ;;		_Rcmd3
  5977 ;;		_Bcmd
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text28
  5982  00EB84                     __ptext28:
  5983                           	opt stack 0
  5984  00EB84                     _delay_ms:
  5985                           	opt stack 26
  5986                           
  5987                           ;ST7735_TFT.c: 107: int count;
  5988                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  5989                           
  5990                           ;incstack = 0
  5991  00EB84  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  5992  00EB88  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5993  00EB8C  0E00               	movlw	0
  5994  00EB8E  6E04               	movwf	___wmul@multiplicand+1,c
  5995  00EB90  0EFA               	movlw	250
  5996  00EB92  6E03               	movwf	___wmul@multiplicand,c
  5997  00EB94  ECA6  F074         	call	___wmul	;wreg free
  5998  00EB98  C001  F00B         	movff	?___wmul,delay_ms@count
  5999  00EB9C  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  6000                           
  6001                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  6002  00EBA0  C00B  F009         	movff	delay_ms@count,??_delay_ms
  6003  00EBA4  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  6004  00EBA8  1E09               	comf	??_delay_ms,f,c
  6005  00EBAA  1E0A               	comf	??_delay_ms+1,f,c
  6006  00EBAC  4A09               	infsnz	??_delay_ms,f,c
  6007  00EBAE  2A0A               	incf	??_delay_ms+1,f,c
  6008  00EBB0  0EFF               	movlw	255
  6009  00EBB2  2409               	addwf	??_delay_ms,w,c
  6010  00EBB4  6E0B               	movwf	delay_ms@count,c
  6011  00EBB6  0EFF               	movlw	255
  6012  00EBB8  200A               	addwfc	??_delay_ms+1,w,c
  6013  00EBBA  6E0C               	movwf	delay_ms@count+1,c
  6014                           
  6015                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  6016  00EBBC  0EB8               	movlw	184
  6017  00EBBE  6EB1               	movwf	4017,c	;volatile
  6018                           
  6019                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  6020  00EBC0  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  6021                           
  6022                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  6023  00EBC4  500C               	movf	delay_ms@count+1,w,c
  6024  00EBC6  6ED7               	movwf	4055,c	;volatile
  6025                           
  6026                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  6027  00EBC8  92A1               	bcf	4001,1,c	;volatile
  6028                           
  6029                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  6030  00EBCA  80B1               	bsf	4017,0,c	;volatile
  6031                           
  6032                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  6033  00EBCC  D000               	goto	l121
  6034  00EBCE                     l121:
  6035  00EBCE  A2A1               	btfss	4001,1,c	;volatile
  6036  00EBD0  D7FE               	goto	l121
  6037                           
  6038                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  6039  00EBD2  90B1               	bcf	4017,0,c	;volatile
  6040  00EBD4  0012               	return		;funcret
  6041  00EBD6                     __end_of_delay_ms:
  6042                           	opt stack 0
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon2	equ	0xFF1
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1l	equ	0xFE1
  6054                           indf2	equ	0xFDF
  6055                           postinc2	equ	0xFDE
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function ___wmul *****************
  6061 ;; Defined at:
  6062 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  multiplier      2    0[COMRAM] unsigned int 
  6065 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  product         2    4[COMRAM] unsigned int 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2    0[COMRAM] unsigned int 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0, prodl, prodh
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;Total ram usage:        6 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_delay_ms
  6087 ;;		_drawChar
  6088 ;;		_update_LCD_misc
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text29
  6093  00E94C                     __ptext29:
  6094                           	opt stack 0
  6095  00E94C                     ___wmul:
  6096                           	opt stack 27
  6097                           
  6098                           ;incstack = 0
  6099  00E94C  5001               	movf	___wmul@multiplier,w,c
  6100  00E94E  0203               	mulwf	___wmul@multiplicand,c
  6101  00E950  CFF3 F005          	movff	prodl,___wmul@product
  6102  00E954  CFF4 F006          	movff	prodh,___wmul@product+1
  6103  00E958  5001               	movf	___wmul@multiplier,w,c
  6104  00E95A  0204               	mulwf	___wmul@multiplicand+1,c
  6105  00E95C  50F3               	movf	prodl,w,c
  6106  00E95E  2606               	addwf	___wmul@product+1,f,c
  6107  00E960  5002               	movf	___wmul@multiplier+1,w,c
  6108  00E962  0203               	mulwf	___wmul@multiplicand,c
  6109  00E964  50F3               	movf	prodl,w,c
  6110  00E966  2606               	addwf	___wmul@product+1,f,c
  6111  00E968  C005  F001         	movff	___wmul@product,?___wmul
  6112  00E96C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6113  00E970  D000               	goto	l677
  6114  00E972                     l677:
  6115  00E972  0012               	return		;funcret
  6116  00E974                     __end_of___wmul:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           intcon2	equ	0xFF1
  6125                           postinc0	equ	0xFEE
  6126                           wreg	equ	0xFE8
  6127                           postdec1	equ	0xFE5
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function _Init_TRIS *****************
  6136 ;; Defined at:
  6137 ;;		line 410 in file "Lab8test.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;		None               void
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;Total ram usage:        0 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text30
  6165  00E8FA                     __ptext30:
  6166                           	opt stack 0
  6167  00E8FA                     _Init_TRIS:
  6168                           	opt stack 30
  6169                           
  6170                           ;Lab8test.c: 412: TRISA = 0b00011001;
  6171                           
  6172                           ;incstack = 0
  6173  00E8FA  0E19               	movlw	25
  6174  00E8FC  6E92               	movwf	3986,c	;volatile
  6175                           
  6176                           ;Lab8test.c: 413: TRISB = 0b00000111;
  6177  00E8FE  0E07               	movlw	7
  6178  00E900  6E93               	movwf	3987,c	;volatile
  6179                           
  6180                           ;Lab8test.c: 414: TRISC = 0x00;
  6181  00E902  0E00               	movlw	0
  6182  00E904  6E94               	movwf	3988,c	;volatile
  6183                           
  6184                           ;Lab8test.c: 415: TRISD = 0x00;
  6185  00E906  0E00               	movlw	0
  6186  00E908  6E95               	movwf	3989,c	;volatile
  6187                           
  6188                           ;Lab8test.c: 416: TRISE = 0x00;
  6189  00E90A  0E00               	movlw	0
  6190  00E90C  6E96               	movwf	3990,c	;volatile
  6191  00E90E  0012               	return		;funcret
  6192  00E910                     __end_of_Init_TRIS:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodh	equ	0xFF4
  6199                           prodl	equ	0xFF3
  6200                           intcon2	equ	0xFF1
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           postdec1	equ	0xFE5
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _Init_ADC *****************
  6212 ;; Defined at:
  6213 ;;		line 403 in file "Lab8test.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, status,2
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_main
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text31
  6241  00E892                     __ptext31:
  6242                           	opt stack 0
  6243  00E892                     _Init_ADC:
  6244                           	opt stack 30
  6245                           
  6246                           ;Lab8test.c: 405: ADCON0 = 0b00000001;
  6247                           
  6248                           ;incstack = 0
  6249  00E892  0E01               	movlw	1
  6250  00E894  6EC2               	movwf	4034,c	;volatile
  6251                           
  6252                           ;Lab8test.c: 406: ADCON1 = 0b00001110;
  6253  00E896  0E0E               	movlw	14
  6254  00E898  6EC1               	movwf	4033,c	;volatile
  6255                           
  6256                           ;Lab8test.c: 407: ADCON2 = 0xA9;
  6257  00E89A  0EA9               	movlw	169
  6258  00E89C  6EC0               	movwf	4032,c	;volatile
  6259  00E89E  0012               	return		;funcret
  6260  00E8A0                     __end_of_Init_ADC:
  6261                           	opt stack 0
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon2	equ	0xFF1
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           fsr2h	equ	0xFDA
  6276                           fsr2l	equ	0xFD9
  6277                           status	equ	0xFD8
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon2	equ	0xFF1
  6285                           postinc0	equ	0xFEE
  6286                           wreg	equ	0xFE8
  6287                           postdec1	equ	0xFE5
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           fsr2h	equ	0xFDA
  6292                           fsr2l	equ	0xFD9
  6293                           status	equ	0xFD8
  6294                           
  6295                           	psect	rparam
  6296  0000                     tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon2	equ	0xFF1
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           postdec1	equ	0xFE5
  6306                           fsr1l	equ	0xFE1
  6307                           indf2	equ	0xFDF
  6308                           postinc2	equ	0xFDE
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8


Data Sizes:
    Strings     136
    Constant    593
    Data        46
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     57     121
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[12]), STR_7(CODE[7]), STR_6(CODE[10]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawFastHLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   66068
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                 _Select_ADC_Channel
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   65769
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1611
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1847
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1761
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _fillCircle                                           8     0      8   11201
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (3) _fillCircleHelper                                    24    12     12    4069
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   23549
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   11381
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3528
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6200
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawFastVLine                                       11     7      4    2838
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1686
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8   10522
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3983
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3     946
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    7346
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    3583
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    3583
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    3493
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    3493
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2507
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Select_ADC_Channel
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     39      79       1       95.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      34        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 01 14:19:40 2022

                     drawCircle@f 001A                       drawCircle@r 0010  
                     drawCircle@x 001C                       drawCircle@y 001E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 000C  
                    drawCircle@y0 000E               ___wmul@multiplicand 0003  
                             l121 EBCE                               l131 E8E0  
                             l206 F3AC                               l234 EEE8  
                             l235 EE54                               l245 F51A  
                             l181 EE0C                               l237 EEC4  
                             l238 EEE6                               l175 E9FA  
                             l263 F238                               l197 F456  
                             l279 ED84                               l199 F330  
                             l670 ECD6                               l671 ECE0  
                             l672 ECE2                               l665 ECBA  
                             l674 ECFC                               l677 E972  
                             l669 ECD4                               _PR2 000FCB  
                             u990 EDC4                               _dir 0077  
                             _nbr 006A                               _txt 006C  
                  drawFastHLine@w 0009                    drawFastHLine@x 0012  
                  drawFastHLine@y 0008                               wreg 000FE8  
                 ??_fillRectangle 000D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize E974                      __CFG_WDT$OFF 000000  
                  drawFastVLine@h 0009                    drawFastVLine@x 0012  
                            l1277 EAA8                    drawFastVLine@y 0008  
                            l2513 ED96                              l2517 EDCE  
                            l2527 EDF4                              l2703 F422  
                            l2711 F452                              l2801 ED0E  
                            l2529 EE02                              l2705 F44A  
                            l2555 E9DC                              l2563 EAF6  
                            l2805 ED46                              l2717 EA76  
                            l2815 ED6C                              l2567 EB12  
                            l2719 EA7C                              l2751 EEC8  
                            l2735 EE8C                              l2817 ED7A  
                            l2673 F32C                              l2665 F312  
                            l2761 EEE2                              l2729 EE1E  
                            l2683 F36C                              l2675 F334  
                            l2851 EF12                              l2755 EED2  
                            l2747 EEBA                              l2925 F5F0  
                            l2685 F3A0                              l2669 F31E  
                            l2695 F3CE                              l2687 F3A4  
                            l2679 F33C                              l2863 EF56  
                            l2791 F29A                              l2775 F21E  
                            l2951 EA06                              l2697 F3F6  
                            l2953 EA10                              l2961 ECA0  
                            l2875 EFB4                              l2867 EF70  
                            l2795 F2EC                              l2877 EFBA  
                            l2981 ECCC                              l2973 ECBE  
                            l2965 ECAA                              l2897 F500  
                            l2969 ECB2                              STR_1 FF8B  
                            STR_2 FFE6                              STR_3 FFEC  
                            STR_4 FFF0                              STR_5 FFFC  
                            STR_6 FFCE                              STR_7 FFDF  
                            STR_8 FFC2                              STR_9 FFD8  
                            u1220 EE4C                              u1150 F404  
                            u1230 EE82                              u1410 EF3A  
                            u1340 ED3C                              _MODE 0068  
                            _RBPU 007F8F                              _TRMT 007D61  
                            _main E92C                              _font FD25  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 0045                   drawFastHLine@hi 0010  
                 drawFastHLine@lo 0011                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0000                   ??_drawFastHLine 000C  
                 ??_drawFastVLine 000C                      ___param_bank 000010  
                    _Act_Mode_Txt 0058                   drawFastVLine@hi 0010  
                 drawFastVLine@lo 0011                       _SW_EWLT_Txt 005E  
                     _SW_MODE_Txt 0062                             ?_main 0001  
                 drawCircle@ddF_x 0016                             STR_10 FFF8  
                 drawCircle@ddF_y 0018                             STR_11 FFF4  
                           STR_12 FF76                             STR_13 FF9F  
                           STR_14 FFB2                             _T0CON 000FD5  
                           _T2CON 000FCA                             _T3CON 000FB1  
                 drawCircle@color 0012                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _PORTD 000F83  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Count 006E  
                           _Rcmd1 F0BA                             _Rcmd3 EFC8  
                     _SW_NSLT_Txt 0064                     drawRect@color 001B  
                 __end_of_dpowers FF28                             _array 003A  
                           _font2 FE24             fillCircleHelper@ddF_x 0021  
           fillCircleHelper@ddF_y 0023             fillCircleHelper@delta 001B  
           fillCircleHelper@color 001D                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0003                   __initialization EAAA  
                    __end_of_main E94C                      __end_of_font FE24  
                __end_of_Init_ADC E8A0                  __end_of_Rcmd2red EA6C  
                          ??_main 003A                     __activetblptr 000002  
               __end_of_LCD_Reset E8D2                      _SW_EWPED_Txt 0060  
       ??_TFT_GreenTab_Initialize 000D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2L 000FBB                            _OSCCON 000FD3  
              __size_of_Init_TRIS 0016                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                      _SW_NSPED_Txt 0066  
                __end_of_delay_ms EBD6                  __end_of_fillRect EB36  
                __end_of_drawChar F458                  __end_of__powers_ FF76  
                __end_of_drawRect EC8E                __size_of_OpenUSART 0070  
                          ___wmul E94C         __size_of_fillCircleHelper 0138  
                __end_of_drawtext EFC8                            _buffer 0080  
                          clear_0 EAB0                            clear_1 EABC  
                    drawtext@size 0030                            _strcpy E9FC  
                          _strlen EA6C                      __pdataCOMRAM 003A  
                    __mediumconst FD24                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                __end_of_spiwrite E8E6                        __accesstop 0080  
         __end_of__initialization EAE2                     ___rparam_used 000001  
                   __end_of_Rcmd1 F1CA                     __end_of_Rcmd3 F0BA  
                  __pcstackCOMRAM 0001                     __end_of_font2 FF00  
               __end_of_Init_TRIS E910                    drawPixel@color 0009  
          __size_of_write_command 0010        fillCircleHelper@cornername 0019  
                         ??_Rcmd1 000D                           ??_Rcmd3 000D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART ECFE  
                      __pbssBANK0 0080                         ?_Init_ADC 0001  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
      __end_of_Select_ADC_Channel E892                   spiwrite@spidata 0002  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
                      _fillCircle EBD6         Select_ADC_Channel@channel 0001  
                         ?_strcpy 0001                           ?_strlen 0001  
                      _fillScreen E910                        _drawCircle F458  
                       ?_delay_ms 0007                         ?_fillRect 0013  
                       ?_drawChar 001E                           _SSPCON1 000FC6  
                       ?_drawRect 0013                           _SSPSTAT 000FC7  
           __end_of_fillRectangle EEEA                         ?_drawtext 0029  
                         _SW_EWLT 0070                           _SW_MODE 0072  
                      ??_Init_ADC 0001                           _SW_NSLT 0073  
                      ??_Rcmd2red 0004                     _write_command E8A0  
               __end_of__npowers_ FF4F                           __Hparam 0000  
                         __Lparam 0000             __end_of_drawFastHLine ED86  
               __end_of_drawPixel E9FC             __end_of_drawFastVLine EE0E  
                _fillCircleHelper F1CA                   __size_of___wmul 0028  
                       ?_spiwrite 0001                           __pcinit EAAA  
                         __ramtop 1000                           __ptext0 E92C  
                         __ptext1 E8E6                           __ptext2 EC8E  
                         __ptext3 E886                           __ptext4 F606  
                         __ptext5 E9FC                           __ptext6 E910  
                         __ptext7 EE0E                           __ptext8 EBD6  
                         __ptext9 F1CA                 __end_of_init_UART E8FA  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                           _dpowers FF00  
                       _T3CONbits 000FB1                        ??_delay_ms 0009  
                   drawtext@_text 002A                     drawtext@color 002C  
                      ??_fillRect 0018                        ??_drawChar 0025  
                       _LCD_Reset E8C0                        ??_drawRect 001D  
                   _setAddrWindow EB36                drawFastHLine@color 000A  
                      delay_ms@ms 0007              end_of_initialization EAE2  
                      ??_drawtext 0031                    ?_write_command 0001  
                   __Lmediumconst FD24                         _PED_Count 006F  
                       _RCSTAbits 000FAB                           postdec1 000FE5  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0001                           strlen@s 0001  
                 fillCircle@color 0031                       ?_fillCircle 002B  
                       _PORTAbits 000F80                  drawtext@cursor_x 0039  
                drawtext@cursor_y 0038                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                       ?_fillScreen 0014  
                     ?_drawCircle 000C                        drawChar@bg 0022  
                       _TRISCbits 000F94                    ?_setAddrWindow 0004  
                      ?_LCD_Reset 0001                  drawtext@textsize 0033  
                      drawPixel@x 000B                        drawPixel@y 0008  
                       _TXSTAbits 000FAC                    __end_of___wmul E974  
                   delay_ms@count 000B                        _write_data E8B0  
                   __pidataCOMRAM E99E          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 002E                    __end_of_strcpy EA2E  
                  __end_of_strlen EAAA               start_initialization EAAA  
                       _Init_TRIS E8FA                   ??_write_command 0003  
                       _OpenUSART EC8E               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Init_ADC 000E  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??___wmul 0005  
              _Select_ADC_Channel E886                   setAddrWindow@x0 0007  
                 setAddrWindow@x1 0005                   setAddrWindow@y0 0004  
                 setAddrWindow@y1 0006                          ??_strcpy 0005  
                        ??_strlen 0003                      _PED_EW_Count 0052  
             ?_Select_ADC_Channel 0001                       __pbssCOMRAM 0068  
                 ??_setAddrWindow 0007                        ?_Init_TRIS 0001  
                    _PED_NS_Count 0055                       ??_LCD_Reset 000D  
        __end_of_fillCircleHelper F302                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0001                 __size_of_drawRect 0066  
               __size_of_drawtext 00DE              ??_Select_ADC_Channel 0001  
 __end_of_TFT_GreenTab_Initialize E99E                     __pmediumconst FD24  
                       __npowers_ FF28                         __tft_type 0075  
                       _direction 0078                drawFastVLine@color 000A  
                     ?_write_data 0001                         _drawPixel E9CC  
               __size_of_spiwrite 0014                 _Initialize_Screen F606  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART E8E6                ?_Initialize_Screen 0001  
                  ___wmul@product 0005               ??_Initialize_Screen 003A  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          _EW_Count 0049  
                       fillRect@h 0015                         fillRect@i 001C  
                       fillRect@w 0014                         fillRect@x 001B  
                       fillRect@y 0013                         drawChar@c 001F  
                       drawChar@i 0028                         drawChar@j 0027  
                    ??_fillCircle 0033                         drawChar@x 0026  
                       drawChar@y 001E                        ?_drawPixel 0008  
          __size_of_fillRectangle 00DC                          _NS_Count 004F  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0001  
       __end_of_Initialize_Screen FD24                      ??_fillScreen 0016  
                       drawRect@h 0019                         drawRect@w 0017  
                       drawRect@x 0013                         drawRect@y 0015  
                   _FlashingR_Txt 005A                     _FlashingS_Txt 005C  
                    ??_drawCircle 0014                          _SW_EWPED 0071  
                        _SW_NSPED 0074                       ??_Init_TRIS 0001  
                      ?_init_UART 0001            __size_of_drawFastHLine 0088  
                       copy_data0 EAD6                         drawtext@i 0036  
          __size_of_drawFastVLine 0088                         drawtext@x 0035  
                       drawtext@y 0029                          _Init_ADC E892  
               write_command@cmd_ 0003                       ??_OpenUSART 0003  
                        _Rcmd2red EA2E               __size_of_write_data 0010  
                 OpenUSART@config 0003                __end_of_fillCircle EC28  
                        __Hrparam 0000                __end_of_fillScreen E92C  
                        __Lrparam 0000                __end_of_drawCircle F606  
                        _delay_ms EB84                          __ptext10 EEEA  
                        __ptext11 EA6C                          __ptext20 E974  
                        __ptext12 F302                          __ptext21 EFC8  
                        __ptext13 EAEC                          __ptext30 E8FA  
                        __ptext22 EA2E                          __ptext14 EC28  
                        __ptext31 E892                          __ptext23 F0BA  
                        __ptext15 ED86                          __ptext24 E8B0  
                        __ptext16 ECFE                          __ptext25 E8A0  
                        __ptext17 F458                          __ptext26 E8D2  
                        __ptext18 E9CC                          __ptext27 E8C0  
                        __ptext19 EB36                          __ptext28 EB84  
                        __ptext29 E94C                          _fillRect EAEC  
                        _drawChar F302                          __powers_ FF4F  
                        _drawRect EC28  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 0076                          _drawtext EEEA  
                      strcpy@from 0003                     _fillRectangle EE0E  
                   __size_of_main 0020                   fillRectangle@hi 0011  
                 fillRectangle@lo 0012                     _drawFastHLine ECFE  
                   _drawFastVLine ED86                          _spiwrite E8D2  
                     ??_drawPixel 000B                          _rowstart 0079  
              fillCircleHelper@x0 0013                fillCircleHelper@y0 0015  
      __size_of_Initialize_Screen 071E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0001                       ??_init_UART 0004  
                      _EWLT_Count 0046                 ?_fillCircleHelper 0013  
                       spiwrite@x 0001                    ?_fillRectangle 0008  
              ??_fillCircleHelper 001F             __end_of_write_command E8B0  
                 fillScreen@color 0014                      fillCircle@x0 002B  
                    fillCircle@y0 002D                    ?_drawFastHLine 0008  
                  fillRectangle@h 000A                    fillRectangle@w 0009  
                  fillRectangle@x 0013                    fillRectangle@y 0008  
                  ?_drawFastVLine 0008                 fillCircleHelper@f 0025  
               fillCircleHelper@r 0017                 fillCircleHelper@x 0027  
               fillCircleHelper@y 0029                      ??_write_data 0003  
                   fillRect@color 0016                          strcpy@cp 0005  
                        strlen@cp 0005                          strcpy@to 0001  
                      _NSLT_Count 004C                       fillCircle@r 002F  
           __end_of_setAddrWindow EB84                fillRectangle@color 000B  
                   drawChar@color 0020                __end_of_write_data E8C0  
                    drawChar@line 0025                      drawChar@size 0024  
     __size_of_Select_ADC_Channel 000C  
