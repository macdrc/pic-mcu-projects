

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 01 17:50:05 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  00DA17                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _wrap
    78  00DA17  01                 	db	1
    79                           
    80                           ;initializer for _EWLT_Count
    81  00DA18  30                 	db	48
    82  00DA19  30                 	db	48
    83  00DA1A  00                 	db	0
    84                           
    85                           ;initializer for _EW_Count
    86  00DA1B  30                 	db	48
    87  00DA1C  30                 	db	48
    88  00DA1D  00                 	db	0
    89                           
    90                           ;initializer for _NSLT_Count
    91  00DA1E  30                 	db	48
    92  00DA1F  30                 	db	48
    93  00DA20  00                 	db	0
    94                           
    95                           ;initializer for _NS_Count
    96  00DA21  30                 	db	48
    97  00DA22  30                 	db	48
    98  00DA23  00                 	db	0
    99                           
   100                           ;initializer for _PED_EW_Count
   101  00DA24  30                 	db	48
   102  00DA25  30                 	db	48
   103  00DA26  00                 	db	0
   104                           
   105                           ;initializer for _PED_NS_Count
   106  00DA27  30                 	db	48
   107  00DA28  30                 	db	48
   108  00DA29  00                 	db	0
   109                           
   110                           ;initializer for _Act_Mode_Txt
   111  00DA2A  44                 	db	68
   112  00DA2B  00                 	db	0
   113                           
   114                           ;initializer for _FlashingR_Txt
   115  00DA2C  30                 	db	48
   116  00DA2D  00                 	db	0
   117                           
   118                           ;initializer for _FlashingS_Txt
   119  00DA2E  30                 	db	48
   120  00DA2F  00                 	db	0
   121                           
   122                           ;initializer for _SW_EWLT_Txt
   123  00DA30  30                 	db	48
   124  00DA31  00                 	db	0
   125                           
   126                           ;initializer for _SW_EWPED_Txt
   127  00DA32  30                 	db	48
   128  00DA33  00                 	db	0
   129                           
   130                           ;initializer for _SW_MODE_Txt
   131  00DA34  44                 	db	68
   132  00DA35  00                 	db	0
   133                           
   134                           ;initializer for _SW_NSLT_Txt
   135  00DA36  30                 	db	48
   136  00DA37  00                 	db	0
   137                           
   138                           ;initializer for _SW_NSPED_Txt
   139  00DA38  30                 	db	48
   140  00DA39  00                 	db	0
   141                           
   142                           	psect	idataBANK0
   143  00DA88                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for _segDisplay
   147  00DA88  0040               	dw	64
   148  00DA8A  0079               	dw	121
   149  00DA8C  0024               	dw	36
   150  00DA8E  0030               	dw	48
   151  00DA90  0019               	dw	25
   152  00DA92  0012               	dw	18
   153  00DA94  0002               	dw	2
   154  00DA96  0078               	dw	120
   155  00DA98  0000               	dw	0
   156  00DA9A  0018               	dw	24
   157                           
   158                           ;initializer for _segEDisplay
   159  00DA9C  00FF               	dw	255
   160  00DA9E  00FF               	dw	255
   161  00DAA0  0000               	dw	0
   162  00DAA2  0000               	dw	0
   163  00DAA4  0000               	dw	0
   164  00DAA6  0000               	dw	0
   165  00DAA8  0000               	dw	0
   166  00DAAA  00FF               	dw	255
   167  00DAAC  0000               	dw	0
   168  00DAAE  0000               	dw	0
   169                           
   170                           	psect	mediumconst
   171  00FDBC                     __pmediumconst:
   172                           	opt stack 0
   173  00FDBC  00                 	db	0
   174  00FDBD                     _font:
   175                           	opt stack 0
   176  00FDBD  00                 	db	0
   177  00FDBE  00                 	db	0
   178  00FDBF  00                 	db	0
   179  00FDC0  00                 	db	0
   180  00FDC1  00                 	db	0
   181  00FDC2  00                 	db	0
   182  00FDC3  00                 	db	0
   183  00FDC4  5F                 	db	95
   184  00FDC5  00                 	db	0
   185  00FDC6  00                 	db	0
   186  00FDC7  00                 	db	0
   187  00FDC8  07                 	db	7
   188  00FDC9  00                 	db	0
   189  00FDCA  07                 	db	7
   190  00FDCB  00                 	db	0
   191  00FDCC  14                 	db	20
   192  00FDCD  7F                 	db	127
   193  00FDCE  14                 	db	20
   194  00FDCF  7F                 	db	127
   195  00FDD0  14                 	db	20
   196  00FDD1  24                 	db	36
   197  00FDD2  2A                 	db	42
   198  00FDD3  7F                 	db	127
   199  00FDD4  2A                 	db	42
   200  00FDD5  12                 	db	18
   201  00FDD6  23                 	db	35
   202  00FDD7  13                 	db	19
   203  00FDD8  08                 	db	8
   204  00FDD9  64                 	db	100
   205  00FDDA  62                 	db	98
   206  00FDDB  36                 	db	54
   207  00FDDC  49                 	db	73
   208  00FDDD  56                 	db	86
   209  00FDDE  20                 	db	32
   210  00FDDF  50                 	db	80
   211  00FDE0  00                 	db	0
   212  00FDE1  08                 	db	8
   213  00FDE2  07                 	db	7
   214  00FDE3  03                 	db	3
   215  00FDE4  00                 	db	0
   216  00FDE5  00                 	db	0
   217  00FDE6  1C                 	db	28
   218  00FDE7  22                 	db	34
   219  00FDE8  41                 	db	65
   220  00FDE9  00                 	db	0
   221  00FDEA  00                 	db	0
   222  00FDEB  41                 	db	65
   223  00FDEC  22                 	db	34
   224  00FDED  1C                 	db	28
   225  00FDEE  00                 	db	0
   226  00FDEF  2A                 	db	42
   227  00FDF0  1C                 	db	28
   228  00FDF1  7F                 	db	127
   229  00FDF2  1C                 	db	28
   230  00FDF3  2A                 	db	42
   231  00FDF4  08                 	db	8
   232  00FDF5  08                 	db	8
   233  00FDF6  3E                 	db	62
   234  00FDF7  08                 	db	8
   235  00FDF8  08                 	db	8
   236  00FDF9  00                 	db	0
   237  00FDFA  80                 	db	128
   238  00FDFB  70                 	db	112
   239  00FDFC  30                 	db	48
   240  00FDFD  00                 	db	0
   241  00FDFE  08                 	db	8
   242  00FDFF  08                 	db	8
   243  00FE00  08                 	db	8
   244  00FE01  08                 	db	8
   245  00FE02  08                 	db	8
   246  00FE03  00                 	db	0
   247  00FE04  00                 	db	0
   248  00FE05  60                 	db	96
   249  00FE06  60                 	db	96
   250  00FE07  00                 	db	0
   251  00FE08  20                 	db	32
   252  00FE09  10                 	db	16
   253  00FE0A  08                 	db	8
   254  00FE0B  04                 	db	4
   255  00FE0C  02                 	db	2
   256  00FE0D  3E                 	db	62
   257  00FE0E  51                 	db	81
   258  00FE0F  49                 	db	73
   259  00FE10  45                 	db	69
   260  00FE11  3E                 	db	62
   261  00FE12  00                 	db	0
   262  00FE13  42                 	db	66
   263  00FE14  7F                 	db	127
   264  00FE15  40                 	db	64
   265  00FE16  00                 	db	0
   266  00FE17  72                 	db	114
   267  00FE18  49                 	db	73
   268  00FE19  49                 	db	73
   269  00FE1A  49                 	db	73
   270  00FE1B  46                 	db	70
   271  00FE1C  21                 	db	33
   272  00FE1D  41                 	db	65
   273  00FE1E  49                 	db	73
   274  00FE1F  4D                 	db	77
   275  00FE20  33                 	db	51
   276  00FE21  18                 	db	24
   277  00FE22  14                 	db	20
   278  00FE23  12                 	db	18
   279  00FE24  7F                 	db	127
   280  00FE25  10                 	db	16
   281  00FE26  27                 	db	39
   282  00FE27  45                 	db	69
   283  00FE28  45                 	db	69
   284  00FE29  45                 	db	69
   285  00FE2A  39                 	db	57
   286  00FE2B  3C                 	db	60
   287  00FE2C  4A                 	db	74
   288  00FE2D  49                 	db	73
   289  00FE2E  49                 	db	73
   290  00FE2F  31                 	db	49
   291  00FE30  41                 	db	65
   292  00FE31  21                 	db	33
   293  00FE32  11                 	db	17
   294  00FE33  09                 	db	9
   295  00FE34  07                 	db	7
   296  00FE35  36                 	db	54
   297  00FE36  49                 	db	73
   298  00FE37  49                 	db	73
   299  00FE38  49                 	db	73
   300  00FE39  36                 	db	54
   301  00FE3A  46                 	db	70
   302  00FE3B  49                 	db	73
   303  00FE3C  49                 	db	73
   304  00FE3D  29                 	db	41
   305  00FE3E  1E                 	db	30
   306  00FE3F  00                 	db	0
   307  00FE40  00                 	db	0
   308  00FE41  14                 	db	20
   309  00FE42  00                 	db	0
   310  00FE43  00                 	db	0
   311  00FE44  00                 	db	0
   312  00FE45  40                 	db	64
   313  00FE46  34                 	db	52
   314  00FE47  00                 	db	0
   315  00FE48  00                 	db	0
   316  00FE49  00                 	db	0
   317  00FE4A  08                 	db	8
   318  00FE4B  14                 	db	20
   319  00FE4C  22                 	db	34
   320  00FE4D  41                 	db	65
   321  00FE4E  14                 	db	20
   322  00FE4F  14                 	db	20
   323  00FE50  14                 	db	20
   324  00FE51  14                 	db	20
   325  00FE52  14                 	db	20
   326  00FE53  00                 	db	0
   327  00FE54  41                 	db	65
   328  00FE55  22                 	db	34
   329  00FE56  14                 	db	20
   330  00FE57  08                 	db	8
   331  00FE58  02                 	db	2
   332  00FE59  01                 	db	1
   333  00FE5A  59                 	db	89
   334  00FE5B  09                 	db	9
   335  00FE5C  06                 	db	6
   336  00FE5D  3E                 	db	62
   337  00FE5E  41                 	db	65
   338  00FE5F  5D                 	db	93
   339  00FE60  59                 	db	89
   340  00FE61  4E                 	db	78
   341  00FE62  7C                 	db	124
   342  00FE63  12                 	db	18
   343  00FE64  11                 	db	17
   344  00FE65  12                 	db	18
   345  00FE66  7C                 	db	124
   346  00FE67  7F                 	db	127
   347  00FE68  49                 	db	73
   348  00FE69  49                 	db	73
   349  00FE6A  49                 	db	73
   350  00FE6B  36                 	db	54
   351  00FE6C  3E                 	db	62
   352  00FE6D  41                 	db	65
   353  00FE6E  41                 	db	65
   354  00FE6F  41                 	db	65
   355  00FE70  22                 	db	34
   356  00FE71  7F                 	db	127
   357  00FE72  41                 	db	65
   358  00FE73  41                 	db	65
   359  00FE74  41                 	db	65
   360  00FE75  3E                 	db	62
   361  00FE76  7F                 	db	127
   362  00FE77  49                 	db	73
   363  00FE78  49                 	db	73
   364  00FE79  49                 	db	73
   365  00FE7A  41                 	db	65
   366  00FE7B  7F                 	db	127
   367  00FE7C  09                 	db	9
   368  00FE7D  09                 	db	9
   369  00FE7E  09                 	db	9
   370  00FE7F  01                 	db	1
   371  00FE80  3E                 	db	62
   372  00FE81  41                 	db	65
   373  00FE82  41                 	db	65
   374  00FE83  51                 	db	81
   375  00FE84  73                 	db	115
   376  00FE85  7F                 	db	127
   377  00FE86  08                 	db	8
   378  00FE87  08                 	db	8
   379  00FE88  08                 	db	8
   380  00FE89  7F                 	db	127
   381  00FE8A  00                 	db	0
   382  00FE8B  41                 	db	65
   383  00FE8C  7F                 	db	127
   384  00FE8D  41                 	db	65
   385  00FE8E  00                 	db	0
   386  00FE8F  20                 	db	32
   387  00FE90  40                 	db	64
   388  00FE91  41                 	db	65
   389  00FE92  3F                 	db	63
   390  00FE93  01                 	db	1
   391  00FE94  7F                 	db	127
   392  00FE95  08                 	db	8
   393  00FE96  14                 	db	20
   394  00FE97  22                 	db	34
   395  00FE98  41                 	db	65
   396  00FE99  7F                 	db	127
   397  00FE9A  40                 	db	64
   398  00FE9B  40                 	db	64
   399  00FE9C  40                 	db	64
   400  00FE9D  40                 	db	64
   401  00FE9E  7F                 	db	127
   402  00FE9F  02                 	db	2
   403  00FEA0  1C                 	db	28
   404  00FEA1  02                 	db	2
   405  00FEA2  7F                 	db	127
   406  00FEA3  7F                 	db	127
   407  00FEA4  04                 	db	4
   408  00FEA5  08                 	db	8
   409  00FEA6  10                 	db	16
   410  00FEA7  7F                 	db	127
   411  00FEA8  3E                 	db	62
   412  00FEA9  41                 	db	65
   413  00FEAA  41                 	db	65
   414  00FEAB  41                 	db	65
   415  00FEAC  3E                 	db	62
   416  00FEAD  7F                 	db	127
   417  00FEAE  09                 	db	9
   418  00FEAF  09                 	db	9
   419  00FEB0  09                 	db	9
   420  00FEB1  06                 	db	6
   421  00FEB2  3E                 	db	62
   422  00FEB3  41                 	db	65
   423  00FEB4  51                 	db	81
   424  00FEB5  21                 	db	33
   425  00FEB6  5E                 	db	94
   426  00FEB7  7F                 	db	127
   427  00FEB8  09                 	db	9
   428  00FEB9  19                 	db	25
   429  00FEBA  29                 	db	41
   430  00FEBB  46                 	db	70
   431  00FEBC                     __end_of_font:
   432                           	opt stack 0
   433  00FEBC                     _font2:
   434                           	opt stack 0
   435  00FEBC  26                 	db	38
   436  00FEBD  49                 	db	73
   437  00FEBE  49                 	db	73
   438  00FEBF  49                 	db	73
   439  00FEC0  32                 	db	50
   440  00FEC1  03                 	db	3
   441  00FEC2  01                 	db	1
   442  00FEC3  7F                 	db	127
   443  00FEC4  01                 	db	1
   444  00FEC5  03                 	db	3
   445  00FEC6  3F                 	db	63
   446  00FEC7  40                 	db	64
   447  00FEC8  40                 	db	64
   448  00FEC9  40                 	db	64
   449  00FECA  3F                 	db	63
   450  00FECB  1F                 	db	31
   451  00FECC  20                 	db	32
   452  00FECD  40                 	db	64
   453  00FECE  20                 	db	32
   454  00FECF  1F                 	db	31
   455  00FED0  3F                 	db	63
   456  00FED1  40                 	db	64
   457  00FED2  38                 	db	56
   458  00FED3  40                 	db	64
   459  00FED4  3F                 	db	63
   460  00FED5  63                 	db	99
   461  00FED6  14                 	db	20
   462  00FED7  08                 	db	8
   463  00FED8  14                 	db	20
   464  00FED9  63                 	db	99
   465  00FEDA  03                 	db	3
   466  00FEDB  04                 	db	4
   467  00FEDC  78                 	db	120
   468  00FEDD  04                 	db	4
   469  00FEDE  03                 	db	3
   470  00FEDF  61                 	db	97
   471  00FEE0  59                 	db	89
   472  00FEE1  49                 	db	73
   473  00FEE2  4D                 	db	77
   474  00FEE3  43                 	db	67
   475  00FEE4  00                 	db	0
   476  00FEE5  7F                 	db	127
   477  00FEE6  41                 	db	65
   478  00FEE7  41                 	db	65
   479  00FEE8  41                 	db	65
   480  00FEE9  02                 	db	2
   481  00FEEA  04                 	db	4
   482  00FEEB  08                 	db	8
   483  00FEEC  10                 	db	16
   484  00FEED  20                 	db	32
   485  00FEEE  00                 	db	0
   486  00FEEF  41                 	db	65
   487  00FEF0  41                 	db	65
   488  00FEF1  41                 	db	65
   489  00FEF2  7F                 	db	127
   490  00FEF3  04                 	db	4
   491  00FEF4  02                 	db	2
   492  00FEF5  01                 	db	1
   493  00FEF6  02                 	db	2
   494  00FEF7  04                 	db	4
   495  00FEF8  40                 	db	64
   496  00FEF9  40                 	db	64
   497  00FEFA  40                 	db	64
   498  00FEFB  40                 	db	64
   499  00FEFC  40                 	db	64
   500  00FEFD  00                 	db	0
   501  00FEFE  03                 	db	3
   502  00FEFF  07                 	db	7
   503  00FF00  08                 	db	8
   504  00FF01  00                 	db	0
   505  00FF02  20                 	db	32
   506  00FF03  54                 	db	84
   507  00FF04  54                 	db	84
   508  00FF05  78                 	db	120
   509  00FF06  40                 	db	64
   510  00FF07  7F                 	db	127
   511  00FF08  28                 	db	40
   512  00FF09  44                 	db	68
   513  00FF0A  44                 	db	68
   514  00FF0B  38                 	db	56
   515  00FF0C  38                 	db	56
   516  00FF0D  44                 	db	68
   517  00FF0E  44                 	db	68
   518  00FF0F  44                 	db	68
   519  00FF10  28                 	db	40
   520  00FF11  38                 	db	56
   521  00FF12  44                 	db	68
   522  00FF13  44                 	db	68
   523  00FF14  28                 	db	40
   524  00FF15  7F                 	db	127
   525  00FF16  38                 	db	56
   526  00FF17  54                 	db	84
   527  00FF18  54                 	db	84
   528  00FF19  54                 	db	84
   529  00FF1A  18                 	db	24
   530  00FF1B  00                 	db	0
   531  00FF1C  08                 	db	8
   532  00FF1D  7E                 	db	126
   533  00FF1E  09                 	db	9
   534  00FF1F  02                 	db	2
   535  00FF20  18                 	db	24
   536  00FF21  A4                 	db	164
   537  00FF22  A4                 	db	164
   538  00FF23  9C                 	db	156
   539  00FF24  78                 	db	120
   540  00FF25  7F                 	db	127
   541  00FF26  08                 	db	8
   542  00FF27  04                 	db	4
   543  00FF28  04                 	db	4
   544  00FF29  78                 	db	120
   545  00FF2A  00                 	db	0
   546  00FF2B  44                 	db	68
   547  00FF2C  7D                 	db	125
   548  00FF2D  40                 	db	64
   549  00FF2E  00                 	db	0
   550  00FF2F  20                 	db	32
   551  00FF30  40                 	db	64
   552  00FF31  40                 	db	64
   553  00FF32  3D                 	db	61
   554  00FF33  00                 	db	0
   555  00FF34  7F                 	db	127
   556  00FF35  10                 	db	16
   557  00FF36  28                 	db	40
   558  00FF37  44                 	db	68
   559  00FF38  00                 	db	0
   560  00FF39  00                 	db	0
   561  00FF3A  41                 	db	65
   562  00FF3B  7F                 	db	127
   563  00FF3C  40                 	db	64
   564  00FF3D  00                 	db	0
   565  00FF3E  7C                 	db	124
   566  00FF3F  04                 	db	4
   567  00FF40  78                 	db	120
   568  00FF41  04                 	db	4
   569  00FF42  78                 	db	120
   570  00FF43  7C                 	db	124
   571  00FF44  08                 	db	8
   572  00FF45  04                 	db	4
   573  00FF46  04                 	db	4
   574  00FF47  78                 	db	120
   575  00FF48  38                 	db	56
   576  00FF49  44                 	db	68
   577  00FF4A  44                 	db	68
   578  00FF4B  44                 	db	68
   579  00FF4C  38                 	db	56
   580  00FF4D  FC                 	db	252
   581  00FF4E  18                 	db	24
   582  00FF4F  24                 	db	36
   583  00FF50  24                 	db	36
   584  00FF51  18                 	db	24
   585  00FF52  18                 	db	24
   586  00FF53  24                 	db	36
   587  00FF54  24                 	db	36
   588  00FF55  18                 	db	24
   589  00FF56  FC                 	db	252
   590  00FF57  7C                 	db	124
   591  00FF58  08                 	db	8
   592  00FF59  04                 	db	4
   593  00FF5A  04                 	db	4
   594  00FF5B  08                 	db	8
   595  00FF5C  48                 	db	72
   596  00FF5D  54                 	db	84
   597  00FF5E  54                 	db	84
   598  00FF5F  54                 	db	84
   599  00FF60  24                 	db	36
   600  00FF61  04                 	db	4
   601  00FF62  04                 	db	4
   602  00FF63  3F                 	db	63
   603  00FF64  44                 	db	68
   604  00FF65  24                 	db	36
   605  00FF66  3C                 	db	60
   606  00FF67  40                 	db	64
   607  00FF68  40                 	db	64
   608  00FF69  20                 	db	32
   609  00FF6A  7C                 	db	124
   610  00FF6B  1C                 	db	28
   611  00FF6C  20                 	db	32
   612  00FF6D  40                 	db	64
   613  00FF6E  20                 	db	32
   614  00FF6F  1C                 	db	28
   615  00FF70  3C                 	db	60
   616  00FF71  40                 	db	64
   617  00FF72  30                 	db	48
   618  00FF73  40                 	db	64
   619  00FF74  3C                 	db	60
   620  00FF75  44                 	db	68
   621  00FF76  28                 	db	40
   622  00FF77  10                 	db	16
   623  00FF78  28                 	db	40
   624  00FF79  44                 	db	68
   625  00FF7A  4C                 	db	76
   626  00FF7B  90                 	db	144
   627  00FF7C  90                 	db	144
   628  00FF7D  90                 	db	144
   629  00FF7E  7C                 	db	124
   630  00FF7F  44                 	db	68
   631  00FF80  64                 	db	100
   632  00FF81  54                 	db	84
   633  00FF82  4C                 	db	76
   634  00FF83  44                 	db	68
   635  00FF84  00                 	db	0
   636  00FF85  08                 	db	8
   637  00FF86  36                 	db	54
   638  00FF87  41                 	db	65
   639  00FF88  00                 	db	0
   640  00FF89  00                 	db	0
   641  00FF8A  00                 	db	0
   642  00FF8B  77                 	db	119
   643  00FF8C  00                 	db	0
   644  00FF8D  00                 	db	0
   645  00FF8E  00                 	db	0
   646  00FF8F  41                 	db	65
   647  00FF90  36                 	db	54
   648  00FF91  08                 	db	8
   649  00FF92  00                 	db	0
   650  00FF93  02                 	db	2
   651  00FF94  01                 	db	1
   652  00FF95  02                 	db	2
   653  00FF96  04                 	db	4
   654  00FF97  02                 	db	2
   655  00FF98                     __end_of_font2:
   656                           	opt stack 0
   657  0000                     _ADCON0	set	4034
   658  0000                     _ADCON0bits	set	4034
   659  0000                     _ADCON1	set	4033
   660  0000                     _ADCON2	set	4032
   661  0000                     _ADRESH	set	4036
   662  0000                     _ADRESL	set	4035
   663  0000                     _CCP2CON	set	4026
   664  0000                     _CCPR2L	set	4027
   665  0000                     _INTCONbits	set	4082
   666  0000                     _OSCCON	set	4051
   667  0000                     _PIE1bits	set	3997
   668  0000                     _PIR1bits	set	3998
   669  0000                     _PIR2bits	set	4001
   670  0000                     _PORTAbits	set	3968
   671  0000                     _PORTBbits	set	3969
   672  0000                     _PORTCbits	set	3970
   673  0000                     _PORTD	set	3971
   674  0000                     _PORTEbits	set	3972
   675  0000                     _PR2	set	4043
   676  0000                     _RCSTA	set	4011
   677  0000                     _RCSTAbits	set	4011
   678  0000                     _SPBRG	set	4015
   679  0000                     _SPBRGH	set	4016
   680  0000                     _SSPBUF	set	4041
   681  0000                     _SSPCON1	set	4038
   682  0000                     _SSPSTAT	set	4039
   683  0000                     _SSPSTATbits	set	4039
   684  0000                     _T0CON	set	4053
   685  0000                     _T0CONbits	set	4053
   686  0000                     _T2CON	set	4042
   687  0000                     _T3CON	set	4017
   688  0000                     _T3CONbits	set	4017
   689  0000                     _TMR0H	set	4055
   690  0000                     _TMR0L	set	4054
   691  0000                     _TRISA	set	3986
   692  0000                     _TRISB	set	3987
   693  0000                     _TRISC	set	3988
   694  0000                     _TRISCbits	set	3988
   695  0000                     _TRISD	set	3989
   696  0000                     _TRISE	set	3990
   697  0000                     _TXREG	set	4013
   698  0000                     _TXSTA	set	4012
   699  0000                     _TXSTAbits	set	4012
   700  0000                     _RBPU	set	32655
   701  0000                     _TRMT	set	32097
   702  00FF98                     STR_12:
   703  00FF98  45                 	db	69	;'E'
   704  00FF99  57                 	db	87	;'W'
   705  00FF9A  50                 	db	80	;'P'
   706  00FF9B  20                 	db	32
   707  00FF9C  45                 	db	69	;'E'
   708  00FF9D  57                 	db	87	;'W'
   709  00FF9E  4C                 	db	76	;'L'
   710  00FF9F  54                 	db	84	;'T'
   711  00FFA0  20                 	db	32
   712  00FFA1  4E                 	db	78	;'N'
   713  00FFA2  53                 	db	83	;'S'
   714  00FFA3  50                 	db	80	;'P'
   715  00FFA4  20                 	db	32
   716  00FFA5  4E                 	db	78	;'N'
   717  00FFA6  53                 	db	83	;'S'
   718  00FFA7  4C                 	db	76	;'L'
   719  00FFA8  54                 	db	84	;'T'
   720  00FFA9  20                 	db	32
   721  00FFAA  4D                 	db	77	;'M'
   722  00FFAB  44                 	db	68	;'D'
   723  00FFAC  00                 	db	0
   724  00FFAD                     STR_1:
   725  00FFAD  45                 	db	69	;'E'
   726  00FFAE  43                 	db	67	;'C'
   727  00FFAF  45                 	db	69	;'E'
   728  00FFB0  33                 	db	51	;'3'
   729  00FFB1  33                 	db	51	;'3'
   730  00FFB2  30                 	db	48	;'0'
   731  00FFB3  31                 	db	49	;'1'
   732  00FFB4  4C                 	db	76	;'L'
   733  00FFB5  20                 	db	32
   734  00FFB6  46                 	db	70	;'F'
   735  00FFB7  61                 	db	97	;'a'
   736  00FFB8  6C                 	db	108	;'l'
   737  00FFB9  6C                 	db	108	;'l'
   738  00FFBA  20                 	db	32
   739  00FFBB  32                 	db	50	;'2'
   740  00FFBC  32                 	db	50	;'2'
   741  00FFBD  2D                 	db	45
   742  00FFBE  53                 	db	83	;'S'
   743  00FFBF  31                 	db	49	;'1'
   744  00FFC0  00                 	db	0
   745  00FFC1                     STR_8:
   746  00FFC1  4E                 	db	78	;'N'
   747  00FFC2  4F                 	db	79	;'O'
   748  00FFC3  52                 	db	82	;'R'
   749  00FFC4  54                 	db	84	;'T'
   750  00FFC5  48                 	db	72	;'H'
   751  00FFC6  2F                 	db	47
   752  00FFC7  53                 	db	83	;'S'
   753  00FFC8  4F                 	db	79	;'O'
   754  00FFC9  55                 	db	85	;'U'
   755  00FFCA  54                 	db	84	;'T'
   756  00FFCB  48                 	db	72	;'H'
   757  00FFCC  00                 	db	0
   758  00FFCD                     STR_6:
   759  00FFCD  45                 	db	69	;'E'
   760  00FFCE  41                 	db	65	;'A'
   761  00FFCF  53                 	db	83	;'S'
   762  00FFD0  54                 	db	84	;'T'
   763  00FFD1  2F                 	db	47
   764  00FFD2  57                 	db	87	;'W'
   765  00FFD3  45                 	db	69	;'E'
   766  00FFD4  53                 	db	83	;'S'
   767  00FFD5  54                 	db	84	;'T'
   768  00FFD6  00                 	db	0
   769  00FFD7                     STR_9:
   770  00FFD7  4E                 	db	78	;'N'
   771  00FFD8  2F                 	db	47
   772  00FFD9  53                 	db	83	;'S'
   773  00FFDA  20                 	db	32
   774  00FFDB  4C                 	db	76	;'L'
   775  00FFDC  54                 	db	84	;'T'
   776  00FFDD  00                 	db	0
   777  00FFDE                     STR_7:
   778  00FFDE  45                 	db	69	;'E'
   779  00FFDF  2F                 	db	47
   780  00FFE0  57                 	db	87	;'W'
   781  00FFE1  20                 	db	32
   782  00FFE2  4C                 	db	76	;'L'
   783  00FFE3  54                 	db	84	;'T'
   784  00FFE4  00                 	db	0
   785  00FFE5                     STR_2:
   786  00FFE5  4D                 	db	77	;'M'
   787  00FFE6  6F                 	db	111	;'o'
   788  00FFE7  64                 	db	100	;'d'
   789  00FFE8  65                 	db	101	;'e'
   790  00FFE9  3A                 	db	58	;':'
   791  00FFEA  00                 	db	0
   792  00FFEB                     STR_3:
   793  00FFEB  46                 	db	70	;'F'
   794  00FFEC  52                 	db	82	;'R'
   795  00FFED  3A                 	db	58	;':'
   796  00FFEE  00                 	db	0
   797  00FFEF                     STR_4:
   798  00FFEF  46                 	db	70	;'F'
   799  00FFF0  53                 	db	83	;'S'
   800  00FFF1  3A                 	db	58	;':'
   801  00FFF2  00                 	db	0
   802  00FFF3                     STR_11:
   803  00FFF3  50                 	db	80	;'P'
   804  00FFF4  4E                 	db	78	;'N'
   805  00FFF5  53                 	db	83	;'S'
   806  00FFF6  00                 	db	0
   807  00FFF7                     STR_10:
   808  00FFF7  50                 	db	80	;'P'
   809  00FFF8  45                 	db	69	;'E'
   810  00FFF9  57                 	db	87	;'W'
   811  00FFFA  00                 	db	0
   812  00FFFB                     STR_14:
   813  00FFFB  20                 	db	32
   814  00FFFC  00                 	db	0
   815  00FFFD                     STR_5:
   816  00FFFD  2A                 	db	42
   817  00FFFE  00                 	db	0
   818  0000                     
   819                           ; #config settings
   820  00FFFF  00                 	db	0	; dummy byte at the end
   821  0000                     
   822                           	psect	cinit
   823  00DE82                     __pcinit:
   824                           	opt stack 0
   825  00DE82                     start_initialization:
   826                           	opt stack 0
   827  00DE82                     __initialization:
   828                           	opt stack 0
   829                           
   830                           ; Clear objects allocated to BANK0 (31 bytes)
   831  00DE82  EE00  F0A8         	lfsr	0,__pbssBANK0
   832  00DE86  0E1F               	movlw	31
   833  00DE88                     clear_0:
   834  00DE88  6AEE               	clrf	postinc0,c
   835  00DE8A  06E8               	decf	wreg,f,c
   836  00DE8C  E1FD               	bnz	clear_0
   837                           
   838                           ; Clear objects allocated to COMRAM (21 bytes)
   839  00DE8E  EE00  F065         	lfsr	0,__pbssCOMRAM
   840  00DE92  0E15               	movlw	21
   841  00DE94                     clear_1:
   842  00DE94  6AEE               	clrf	postinc0,c
   843  00DE96  06E8               	decf	wreg,f,c
   844  00DE98  E1FD               	bnz	clear_1
   845                           
   846                           ; Initialize objects allocated to BANK0 (40 bytes)
   847                           ; load TBLPTR registers with __pidataBANK0
   848  00DE9A  0E88               	movlw	low __pidataBANK0
   849  00DE9C  6EF6               	movwf	tblptrl,c
   850  00DE9E  0EDA               	movlw	high __pidataBANK0
   851  00DEA0  6EF7               	movwf	tblptrh,c
   852  00DEA2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   853  00DEA4  6EF8               	movwf	tblptru,c
   854  00DEA6  EE00  F080         	lfsr	0,__pdataBANK0
   855  00DEAA  EE10 F028          	lfsr	1,40
   856  00DEAE                     copy_data0:
   857  00DEAE  0009               	tblrd		*+
   858  00DEB0  CFF5 FFEE          	movff	tablat,postinc0
   859  00DEB4  50E5               	movf	postdec1,w,c
   860  00DEB6  50E1               	movf	fsr1l,w,c
   861  00DEB8  E1FA               	bnz	copy_data0
   862                           
   863                           ; Initialize objects allocated to COMRAM (35 bytes)
   864                           ; load TBLPTR registers with __pidataCOMRAM
   865  00DEBA  0E17               	movlw	low __pidataCOMRAM
   866  00DEBC  6EF6               	movwf	tblptrl,c
   867  00DEBE  0EDA               	movlw	high __pidataCOMRAM
   868  00DEC0  6EF7               	movwf	tblptrh,c
   869  00DEC2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   870  00DEC4  6EF8               	movwf	tblptru,c
   871  00DEC6  EE00  F042         	lfsr	0,__pdataCOMRAM
   872  00DECA  EE10 F023          	lfsr	1,35
   873  00DECE                     copy_data1:
   874  00DECE  0009               	tblrd		*+
   875  00DED0  CFF5 FFEE          	movff	tablat,postinc0
   876  00DED4  50E5               	movf	postdec1,w,c
   877  00DED6  50E1               	movf	fsr1l,w,c
   878  00DED8  E1FA               	bnz	copy_data1
   879  00DEDA                     end_of_initialization:
   880                           	opt stack 0
   881  00DEDA                     __end_of__initialization:
   882                           	opt stack 0
   883  00DEDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   884  00DEDC  6EF8               	movwf	tblptru,c
   885  00DEDE  0100               	movlb	0
   886  00DEE0  EFC2  F071         	goto	_main	;jump to C main() function
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1l	equ	0xFE1
   895                           
   896                           	psect	bssCOMRAM
   897  000065                     __pbssCOMRAM:
   898                           	opt stack 0
   899  000065                     _volt:
   900                           	opt stack 0
   901  000065                     	ds	3
   902  000068                     _MODE:
   903                           	opt stack 0
   904  000068                     	ds	2
   905  00006A                     _nbr:
   906                           	opt stack 0
   907  00006A                     	ds	2
   908  00006C                     _txt:
   909                           	opt stack 0
   910  00006C                     	ds	2
   911  00006E                     _Count:
   912                           	opt stack 0
   913  00006E                     	ds	1
   914  00006F                     _PED_Count:
   915                           	opt stack 0
   916  00006F                     	ds	1
   917  000070                     _SW_EWLT:
   918                           	opt stack 0
   919  000070                     	ds	1
   920  000071                     _SW_EWPED:
   921                           	opt stack 0
   922  000071                     	ds	1
   923  000072                     _SW_MODE:
   924                           	opt stack 0
   925  000072                     	ds	1
   926  000073                     _SW_NSLT:
   927                           	opt stack 0
   928  000073                     	ds	1
   929  000074                     _SW_NSPED:
   930                           	opt stack 0
   931  000074                     	ds	1
   932  000075                     __tft_type:
   933                           	opt stack 0
   934  000075                     	ds	1
   935  000076                     _colstart:
   936                           	opt stack 0
   937  000076                     	ds	1
   938  000077                     _dir:
   939                           	opt stack 0
   940  000077                     	ds	1
   941  000078                     _direction:
   942                           	opt stack 0
   943  000078                     	ds	1
   944  000079                     _rowstart:
   945                           	opt stack 0
   946  000079                     	ds	1
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           
   956                           	psect	dataCOMRAM
   957  000042                     __pdataCOMRAM:
   958                           	opt stack 0
   959  000042                     _wrap:
   960                           	opt stack 0
   961  000042                     	ds	1
   962  000043                     _EWLT_Count:
   963                           	opt stack 0
   964  000043                     	ds	3
   965  000046                     _EW_Count:
   966                           	opt stack 0
   967  000046                     	ds	3
   968  000049                     _NSLT_Count:
   969                           	opt stack 0
   970  000049                     	ds	3
   971  00004C                     _NS_Count:
   972                           	opt stack 0
   973  00004C                     	ds	3
   974  00004F                     _PED_EW_Count:
   975                           	opt stack 0
   976  00004F                     	ds	3
   977  000052                     _PED_NS_Count:
   978                           	opt stack 0
   979  000052                     	ds	3
   980  000055                     _Act_Mode_Txt:
   981                           	opt stack 0
   982  000055                     	ds	2
   983  000057                     _FlashingR_Txt:
   984                           	opt stack 0
   985  000057                     	ds	2
   986  000059                     _FlashingS_Txt:
   987                           	opt stack 0
   988  000059                     	ds	2
   989  00005B                     _SW_EWLT_Txt:
   990                           	opt stack 0
   991  00005B                     	ds	2
   992  00005D                     _SW_EWPED_Txt:
   993                           	opt stack 0
   994  00005D                     	ds	2
   995  00005F                     _SW_MODE_Txt:
   996                           	opt stack 0
   997  00005F                     	ds	2
   998  000061                     _SW_NSLT_Txt:
   999                           	opt stack 0
  1000  000061                     	ds	2
  1001  000063                     _SW_NSPED_Txt:
  1002                           	opt stack 0
  1003  000063                     	ds	2
  1004                           tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postdec1	equ	0xFE5
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           	psect	bssBANK0
  1014  0000A8                     __pbssBANK0:
  1015                           	opt stack 0
  1016  0000A8                     _buffer:
  1017                           	opt stack 0
  1018  0000A8                     	ds	31
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	dataBANK0
  1029  000080                     __pdataBANK0:
  1030                           	opt stack 0
  1031  000080                     _segDisplay:
  1032                           	opt stack 0
  1033  000080                     	ds	20
  1034  000094                     _segEDisplay:
  1035                           	opt stack 0
  1036  000094                     	ds	20
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046                           	psect	cstackCOMRAM
  1047  000001                     __pcstackCOMRAM:
  1048                           	opt stack 0
  1049  000001                     ??_DISPLAY_LOWER_7SEG:
  1050  000001                     ?_strlen:
  1051                           	opt stack 0
  1052  000001                     ?_get_full_ADC:
  1053                           	opt stack 0
  1054  000001                     ?___wmul:
  1055                           	opt stack 0
  1056  000001                     ?___awdiv:
  1057                           	opt stack 0
  1058  000001                     ?___awmod:
  1059                           	opt stack 0
  1060  000001                     ?___ftpack:
  1061                           	opt stack 0
  1062  000001                     spiwrite@x:
  1063                           	opt stack 0
  1064  000001                     Set_NSLT@color:
  1065                           	opt stack 0
  1066  000001                     Set_EW@color:
  1067                           	opt stack 0
  1068  000001                     Set_EWLT@color:
  1069                           	opt stack 0
  1070  000001                     OpenUSART@spbrg:
  1071                           	opt stack 0
  1072  000001                     ___wmul@multiplier:
  1073                           	opt stack 0
  1074  000001                     ___awdiv@dividend:
  1075                           	opt stack 0
  1076  000001                     ___awmod@dividend:
  1077                           	opt stack 0
  1078  000001                     strcpy@to:
  1079                           	opt stack 0
  1080  000001                     strlen@s:
  1081                           	opt stack 0
  1082  000001                     ___ftpack@arg:
  1083                           	opt stack 0
  1084  000001                     ___ftge@ff1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x0
  1088  000001                     	ds	1
  1089  000002                     spiwrite@spidata:
  1090                           	opt stack 0
  1091  000002                     DISPLAY_LOWER_7SEG@LED2:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x1
  1095  000002                     	ds	1
  1096  000003                     ??_strlen:
  1097  000003                     ??_get_full_ADC:
  1098  000003                     write_command@cmd_:
  1099                           	opt stack 0
  1100  000003                     write_data@data_:
  1101                           	opt stack 0
  1102  000003                     OpenUSART@config:
  1103                           	opt stack 0
  1104  000003                     ___wmul@multiplicand:
  1105                           	opt stack 0
  1106  000003                     ___awdiv@divisor:
  1107                           	opt stack 0
  1108  000003                     ___awmod@divisor:
  1109                           	opt stack 0
  1110  000003                     strcpy@from:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x2
  1114  000003                     	ds	1
  1115  000004                     setAddrWindow@y0:
  1116                           	opt stack 0
  1117  000004                     DISPLAY_LOWER_7SEG@Lower:
  1118                           	opt stack 0
  1119  000004                     ___ftpack@exp:
  1120                           	opt stack 0
  1121  000004                     ___ftge@ff2:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x3
  1125  000004                     	ds	1
  1126  000005                     setAddrWindow@x1:
  1127                           	opt stack 0
  1128  000005                     ___awdiv@counter:
  1129                           	opt stack 0
  1130  000005                     ___awmod@counter:
  1131                           	opt stack 0
  1132  000005                     ___ftpack@sign:
  1133                           	opt stack 0
  1134  000005                     get_full_ADC@result:
  1135                           	opt stack 0
  1136  000005                     ___wmul@product:
  1137                           	opt stack 0
  1138  000005                     strcpy@cp:
  1139                           	opt stack 0
  1140  000005                     strlen@cp:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x4
  1144  000005                     	ds	1
  1145  000006                     ??___ftpack:
  1146  000006                     setAddrWindow@y1:
  1147                           	opt stack 0
  1148  000006                     ___awdiv@sign:
  1149                           	opt stack 0
  1150  000006                     ___awmod@sign:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x5
  1154  000006                     	ds	1
  1155  000007                     ??___ftge:
  1156  000007                     setAddrWindow@x0:
  1157                           	opt stack 0
  1158  000007                     delay_ms@ms:
  1159                           	opt stack 0
  1160  000007                     ___awdiv@quotient:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x6
  1164  000007                     	ds	1
  1165  000008                     drawPixel@y:
  1166                           	opt stack 0
  1167  000008                     drawFastVLine@y:
  1168                           	opt stack 0
  1169  000008                     fillRectangle@y:
  1170                           	opt stack 0
  1171  000008                     drawFastHLine@y:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x7
  1175  000008                     	ds	1
  1176  000009                     ??_delay_ms:
  1177  000009                     ?___awtoft:
  1178                           	opt stack 0
  1179  000009                     drawFastVLine@h:
  1180                           	opt stack 0
  1181  000009                     fillRectangle@w:
  1182                           	opt stack 0
  1183  000009                     drawFastHLine@w:
  1184                           	opt stack 0
  1185  000009                     drawPixel@color:
  1186                           	opt stack 0
  1187  000009                     ___awtoft@c:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x8
  1191  000009                     	ds	1
  1192  00000A                     fillRectangle@h:
  1193                           	opt stack 0
  1194  00000A                     drawFastVLine@color:
  1195                           	opt stack 0
  1196  00000A                     drawFastHLine@color:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x9
  1200  00000A                     	ds	1
  1201  00000B                     drawPixel@x:
  1202                           	opt stack 0
  1203  00000B                     delay_ms@count:
  1204                           	opt stack 0
  1205  00000B                     fillRectangle@color:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0xA
  1209  00000B                     	ds	1
  1210  00000C                     ??_drawFastVLine:
  1211  00000C                     ??_drawFastHLine:
  1212  00000C                     ___awtoft@sign:
  1213                           	opt stack 0
  1214  00000C                     drawCircle@x0:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0xB
  1218  00000C                     	ds	1
  1219  00000D                     ??_fillRectangle:
  1220  00000D                     ?___ftdiv:
  1221                           	opt stack 0
  1222  00000D                     ___ftdiv@f1:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0xC
  1226  00000D                     	ds	1
  1227  00000E                     drawCircle@y0:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0xD
  1231  00000E                     	ds	2
  1232  000010                     drawFastVLine@hi:
  1233                           	opt stack 0
  1234  000010                     drawFastHLine@hi:
  1235                           	opt stack 0
  1236  000010                     drawCircle@r:
  1237                           	opt stack 0
  1238  000010                     ___ftdiv@f2:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0xF
  1242  000010                     	ds	1
  1243  000011                     drawFastVLine@lo:
  1244                           	opt stack 0
  1245  000011                     fillRectangle@hi:
  1246                           	opt stack 0
  1247  000011                     drawFastHLine@lo:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x10
  1251  000011                     	ds	1
  1252  000012                     drawFastVLine@x:
  1253                           	opt stack 0
  1254  000012                     fillRectangle@lo:
  1255                           	opt stack 0
  1256  000012                     drawFastHLine@x:
  1257                           	opt stack 0
  1258  000012                     drawCircle@color:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x11
  1262  000012                     	ds	1
  1263  000013                     ??___ftdiv:
  1264  000013                     fillRect@y:
  1265                           	opt stack 0
  1266  000013                     fillRectangle@x:
  1267                           	opt stack 0
  1268  000013                     fillCircleHelper@x0:
  1269                           	opt stack 0
  1270  000013                     drawRect@x:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x12
  1274  000013                     	ds	1
  1275  000014                     ??_drawCircle:
  1276  000014                     fillRect@w:
  1277                           	opt stack 0
  1278  000014                     fillScreen@color:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x13
  1282  000014                     	ds	1
  1283  000015                     fillRect@h:
  1284                           	opt stack 0
  1285  000015                     fillCircleHelper@y0:
  1286                           	opt stack 0
  1287  000015                     drawRect@y:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x14
  1291  000015                     	ds	1
  1292  000016                     ___ftdiv@cntr:
  1293                           	opt stack 0
  1294  000016                     fillRect@color:
  1295                           	opt stack 0
  1296  000016                     drawCircle@ddF_x:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x15
  1300  000016                     	ds	1
  1301  000017                     fillCircleHelper@r:
  1302                           	opt stack 0
  1303  000017                     drawRect@w:
  1304                           	opt stack 0
  1305  000017                     ___ftdiv@f3:
  1306                           	opt stack 0
  1307                           
  1308                           ; 3 bytes @ 0x16
  1309  000017                     	ds	1
  1310  000018                     ??_fillRect:
  1311  000018                     drawCircle@ddF_y:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x17
  1315  000018                     	ds	1
  1316  000019                     fillCircleHelper@cornername:
  1317                           	opt stack 0
  1318  000019                     drawRect@h:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x18
  1322  000019                     	ds	1
  1323  00001A                     ___ftdiv@exp:
  1324                           	opt stack 0
  1325  00001A                     drawCircle@f:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x19
  1329  00001A                     	ds	1
  1330  00001B                     fillRect@x:
  1331                           	opt stack 0
  1332  00001B                     ___ftdiv@sign:
  1333                           	opt stack 0
  1334  00001B                     fillCircleHelper@delta:
  1335                           	opt stack 0
  1336  00001B                     drawRect@color:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x1A
  1340  00001B                     	ds	1
  1341  00001C                     fillRect@i:
  1342                           	opt stack 0
  1343  00001C                     drawCircle@x:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x1B
  1347  00001C                     	ds	1
  1348  00001D                     ??_drawRect:
  1349  00001D                     fillCircleHelper@color:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x1C
  1353  00001D                     	ds	1
  1354  00001E                     drawChar@y:
  1355                           	opt stack 0
  1356  00001E                     drawCircle@y:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x1D
  1360  00001E                     	ds	1
  1361  00001F                     ??_fillCircleHelper:
  1362  00001F                     drawChar@c:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x1E
  1366  00001F                     	ds	1
  1367  000020                     drawChar@color:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x1F
  1371  000020                     	ds	1
  1372  000021                     fillCircleHelper@ddF_x:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x20
  1376  000021                     	ds	1
  1377  000022                     drawChar@bg:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x21
  1381  000022                     	ds	1
  1382  000023                     fillCircleHelper@ddF_y:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x22
  1386  000023                     	ds	1
  1387  000024                     drawChar@size:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x23
  1391  000024                     	ds	1
  1392  000025                     drawChar@line:
  1393                           	opt stack 0
  1394  000025                     fillCircleHelper@f:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x24
  1398  000025                     	ds	1
  1399  000026                     drawChar@x:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x25
  1403  000026                     	ds	1
  1404  000027                     drawChar@j:
  1405                           	opt stack 0
  1406  000027                     fillCircleHelper@x:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x26
  1410  000027                     	ds	1
  1411  000028                     drawChar@i:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x27
  1415  000028                     	ds	1
  1416  000029                     drawtext@y:
  1417                           	opt stack 0
  1418  000029                     fillCircleHelper@y:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x28
  1422  000029                     	ds	1
  1423  00002A                     drawtext@_text:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x29
  1427  00002A                     	ds	1
  1428  00002B                     fillCircle@x0:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2A
  1432  00002B                     	ds	1
  1433  00002C                     drawtext@color:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2B
  1437  00002C                     	ds	1
  1438  00002D                     fillCircle@y0:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x2C
  1442  00002D                     	ds	1
  1443  00002E                     drawtext@bg:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x2D
  1447  00002E                     	ds	1
  1448  00002F                     fillCircle@r:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x2E
  1452  00002F                     	ds	1
  1453  000030                     drawtext@size:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x2F
  1457  000030                     	ds	1
  1458  000031                     ??_drawtext:
  1459  000031                     fillCircle@color:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x30
  1463  000031                     	ds	2
  1464  000033                     update_LCD_color@color:
  1465                           	opt stack 0
  1466  000033                     drawtext@textsize:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x32
  1470  000033                     	ds	1
  1471  000034                     update_LCD_color@direction:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x33
  1475  000034                     	ds	1
  1476  000035                     drawtext@x:
  1477                           	opt stack 0
  1478  000035                     update_LCD_color@Circle_Y:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x34
  1482  000035                     	ds	1
  1483  000036                     Set_NS@color:
  1484                           	opt stack 0
  1485  000036                     drawtext@i:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x35
  1489  000036                     	ds	2
  1490  000038                     drawtext@cursor_y:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x37
  1494  000038                     	ds	1
  1495  000039                     drawtext@cursor_x:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x38
  1499  000039                     	ds	1
  1500  00003A                     update_LCD_count@count:
  1501                           	opt stack 0
  1502  00003A                     update_LCD_PED_Count@count:
  1503                           	opt stack 0
  1504  00003A                     update_LCD_misc@nStep:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x39
  1508  00003A                     	ds	1
  1509  00003B                     update_LCD_count@direction:
  1510                           	opt stack 0
  1511  00003B                     update_LCD_PED_Count@direction:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x3A
  1515  00003B                     	ds	1
  1516  00003C                     PED_Control@Num_Sec:
  1517                           	opt stack 0
  1518  00003C                     Wait_N_Seconds@seconds:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x3B
  1522  00003C                     	ds	1
  1523  00003D                     PED_Control@direction:
  1524                           	opt stack 0
  1525  00003D                     Wait_N_Seconds@I:
  1526                           	opt stack 0
  1527                           
  1528                           ; 1 bytes @ 0x3C
  1529  00003D                     	ds	1
  1530  00003E                     PED_Control@i:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x3D
  1534  00003E                     	ds	1
  1535  00003F                     PED_Control@i_1325:
  1536                           	opt stack 0
  1537                           
  1538                           ; 1 bytes @ 0x3E
  1539  00003F                     	ds	1
  1540  000040                     main@nStep:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x3F
  1544  000040                     	ds	2
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           postdec1	equ	0xFE5
  1552                           fsr1l	equ	0xFE1
  1553                           
  1554 ;;
  1555 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1556 ;;
  1557 ;; *************** function _main *****************
  1558 ;; Defined at:
  1559 ;;		line 259 in file "Lab8test2.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;		None
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  nStep           2   63[COMRAM] int 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;		None               void
  1566 ;; Registers used:
  1567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;Total ram usage:        2 bytes
  1578 ;; Hardware stack levels required when called:   11
  1579 ;; This function calls:
  1580 ;;		_Day_Mode
  1581 ;;		_Init_ADC
  1582 ;;		_Initialize_Screen
  1583 ;;		_Night_Mode
  1584 ;;		___awtoft
  1585 ;;		___ftdiv
  1586 ;;		___ftge
  1587 ;;		___wmul
  1588 ;;		_get_full_ADC
  1589 ;;		_init_IO
  1590 ;;		_init_UART
  1591 ;; This function is called by:
  1592 ;;		Startup code after reset
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text0
  1597  00E384                     __ptext0:
  1598                           	opt stack 0
  1599  00E384                     _main:
  1600                           	opt stack 20
  1601                           
  1602                           ;Lab8test2.c: 261: init_IO();
  1603                           
  1604                           ;incstack = 0
  1605  00E384  ECE5  F06C         	call	_init_IO	;wreg free
  1606                           
  1607                           ;Lab8test2.c: 262: Init_ADC();
  1608  00E388  EC9D  F06C         	call	_Init_ADC	;wreg free
  1609                           
  1610                           ;Lab8test2.c: 263: init_UART();
  1611  00E38C  ECD0  F06C         	call	_init_UART	;wreg free
  1612                           
  1613                           ;Lab8test2.c: 264: OSCCON = 0x70;
  1614  00E390  0E70               	movlw	112
  1615  00E392  6ED3               	movwf	4051,c	;volatile
  1616                           
  1617                           ;Lab8test2.c: 265: RBPU = 0;
  1618  00E394  9EF1               	bcf	intcon2,7,c	;volatile
  1619                           
  1620                           ;Lab8test2.c: 266: Initialize_Screen();
  1621  00E396  EC4F  F07B         	call	_Initialize_Screen	;wreg free
  1622                           
  1623                           ;Lab8test2.c: 272: int nStep = get_full_ADC();
  1624  00E39A  EC1D  F06D         	call	_get_full_ADC	;wreg free
  1625  00E39E  C001  F040         	movff	?_get_full_ADC,main@nStep
  1626  00E3A2  C002  F041         	movff	?_get_full_ADC+1,main@nStep+1
  1627                           
  1628                           ;Lab8test2.c: 273: volt = nStep * 5 /1024.0;
  1629  00E3A6  C040  F001         	movff	main@nStep,___wmul@multiplier
  1630  00E3AA  C041  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1631  00E3AE  0E00               	movlw	0
  1632  00E3B0  6E04               	movwf	___wmul@multiplicand+1,c
  1633  00E3B2  0E05               	movlw	5
  1634  00E3B4  6E03               	movwf	___wmul@multiplicand,c
  1635  00E3B6  EC30  F06D         	call	___wmul	;wreg free
  1636  00E3BA  C001  F009         	movff	?___wmul,___awtoft@c
  1637  00E3BE  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1638  00E3C2  EC06  F06E         	call	___awtoft	;wreg free
  1639  00E3C6  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1640  00E3CA  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1641  00E3CE  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1642  00E3D2  0E00               	movlw	0
  1643  00E3D4  6E10               	movwf	___ftdiv@f2,c
  1644  00E3D6  0E80               	movlw	128
  1645  00E3D8  6E11               	movwf	___ftdiv@f2+1,c
  1646  00E3DA  0E44               	movlw	68
  1647  00E3DC  6E12               	movwf	___ftdiv@f2+2,c
  1648  00E3DE  EC70  F074         	call	___ftdiv	;wreg free
  1649  00E3E2  C00D  F065         	movff	?___ftdiv,_volt
  1650  00E3E6  C00E  F066         	movff	?___ftdiv+1,_volt+1
  1651  00E3EA  C00F  F067         	movff	?___ftdiv+2,_volt+2
  1652                           
  1653                           ;Lab8test2.c: 274: SW_MODE = volt < 3.5 ? 1:0;
  1654  00E3EE  C065  F001         	movff	_volt,___ftge@ff1
  1655  00E3F2  C066  F002         	movff	_volt+1,___ftge@ff1+1
  1656  00E3F6  C067  F003         	movff	_volt+2,___ftge@ff1+2
  1657  00E3FA  0E00               	movlw	0
  1658  00E3FC  6E04               	movwf	___ftge@ff2,c
  1659  00E3FE  0E60               	movlw	96
  1660  00E400  6E05               	movwf	___ftge@ff2+1,c
  1661  00E402  0E40               	movlw	64
  1662  00E404  6E06               	movwf	___ftge@ff2+2,c
  1663  00E406  EC77  F071         	call	___ftge	;wreg free
  1664  00E40A  B0D8               	btfsc	status,0,c
  1665  00E40C  D002               	goto	u2600
  1666  00E40E  0E01               	movlw	1
  1667  00E410  D001               	goto	u2610
  1668  00E412                     u2600:
  1669  00E412  0E00               	movlw	0
  1670  00E414                     u2610:
  1671  00E414  6E72               	movwf	_SW_MODE,c
  1672  00E416  D000               	goto	l3972
  1673  00E418                     l3972:
  1674                           
  1675                           ;Lab8test2.c: 277: {
  1676                           ;Lab8test2.c: 278: if (SW_MODE)
  1677  00E418  5072               	movf	_SW_MODE,w,c
  1678  00E41A  B4D8               	btfsc	status,2,c
  1679  00E41C  D003               	goto	l3976
  1680                           
  1681                           ;Lab8test2.c: 279: {
  1682                           ;Lab8test2.c: 280: Day_Mode();
  1683  00E41E  EC6D  F072         	call	_Day_Mode	;wreg free
  1684                           
  1685                           ;Lab8test2.c: 281: }
  1686  00E422  D7FA               	goto	l3972
  1687  00E424                     l3976:
  1688                           
  1689                           ;Lab8test2.c: 282: else
  1690                           ;Lab8test2.c: 283: {
  1691                           ;Lab8test2.c: 284: Night_Mode();
  1692  00E424  EC17  F072         	call	_Night_Mode	;wreg free
  1693  00E428  D7F7               	goto	l3972
  1694  00E42A  EF00  F000         	goto	start
  1695  00E42E                     __end_of_main:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           intcon2	equ	0xFF1
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           postdec1	equ	0xFE5
  1705                           fsr1l	equ	0xFE1
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _init_UART *****************
  1709 ;; Defined at:
  1710 ;;		line 245 in file "Lab8test2.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;		None               void
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        0 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    1
  1731 ;; This function calls:
  1732 ;;		_OpenUSART
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text1
  1739  00D9A0                     __ptext1:
  1740                           	opt stack 0
  1741  00D9A0                     _init_UART:
  1742                           	opt stack 29
  1743                           
  1744                           ;Lab8test2.c: 247: OpenUSART (0b01111111 & 0b10111111 &
  1745                           ;Lab8test2.c: 248: 0b11111110 & 0b11111101 & 0b11111111 &
  1746                           ;Lab8test2.c: 249: 0b11111111, 25);
  1747                           
  1748                           ;incstack = 0
  1749  00D9A0  0E00               	movlw	0
  1750  00D9A2  6E02               	movwf	OpenUSART@spbrg+1,c
  1751  00D9A4  0E19               	movlw	25
  1752  00D9A6  6E01               	movwf	OpenUSART@spbrg,c
  1753  00D9A8  0E3C               	movlw	60
  1754  00D9AA  ECA5  F06F         	call	_OpenUSART
  1755                           
  1756                           ;Lab8test2.c: 250: OSCCON = 0x60;
  1757  00D9AE  0E60               	movlw	96
  1758  00D9B0  6ED3               	movwf	4051,c	;volatile
  1759  00D9B2  0012               	return		;funcret
  1760  00D9B4                     __end_of_init_UART:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           intcon2	equ	0xFF1
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _OpenUSART *****************
  1774 ;; Defined at:
  1775 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  config          1    wreg     unsigned char 
  1778 ;;  spbrg           2    0[COMRAM] unsigned int 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  config          1    2[COMRAM] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		wreg, status,2
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        3 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_init_UART
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text2
  1804  00DF4A                     __ptext2:
  1805                           	opt stack 0
  1806  00DF4A                     _OpenUSART:
  1807                           	opt stack 29
  1808                           
  1809                           ;incstack = 0
  1810                           ;OpenUSART@config stored from wreg
  1811  00DF4A  6E03               	movwf	OpenUSART@config,c
  1812  00DF4C  0E00               	movlw	0
  1813  00DF4E  6EAC               	movwf	4012,c	;volatile
  1814  00DF50  0E00               	movlw	0
  1815  00DF52  6EAB               	movwf	4011,c	;volatile
  1816  00DF54  A003               	btfss	OpenUSART@config,0,c
  1817  00DF56  D002               	goto	l3382
  1818  00DF58  88AC               	bsf	4012,4,c	;volatile
  1819  00DF5A  D000               	goto	l3382
  1820  00DF5C                     l3382:
  1821  00DF5C  A203               	btfss	OpenUSART@config,1,c
  1822  00DF5E  D003               	goto	l3386
  1823  00DF60  8CAC               	bsf	4012,6,c	;volatile
  1824  00DF62  8CAB               	bsf	4011,6,c	;volatile
  1825  00DF64  D000               	goto	l3386
  1826  00DF66                     l3386:
  1827  00DF66  A403               	btfss	OpenUSART@config,2,c
  1828  00DF68  D002               	goto	l3390
  1829  00DF6A  8EAC               	bsf	4012,7,c	;volatile
  1830  00DF6C  D000               	goto	l3390
  1831  00DF6E                     l3390:
  1832  00DF6E  A603               	btfss	OpenUSART@config,3,c
  1833  00DF70  D002               	goto	l529
  1834  00DF72  88AB               	bsf	4011,4,c	;volatile
  1835  00DF74  D002               	goto	l3394
  1836  00DF76                     l529:
  1837  00DF76  8AAB               	bsf	4011,5,c	;volatile
  1838  00DF78  D000               	goto	l3394
  1839  00DF7A                     l3394:
  1840  00DF7A  B803               	btfsc	OpenUSART@config,4,c
  1841  00DF7C  84AC               	bsf	4012,2,c	;volatile
  1842  00DF7E  989E               	bcf	3998,4,c	;volatile
  1843  00DF80  AA03               	btfss	OpenUSART@config,5,c
  1844  00DF82  D002               	goto	l3402
  1845  00DF84  86AB               	bsf	4011,3,c	;volatile
  1846  00DF86  D000               	goto	l3402
  1847  00DF88                     l3402:
  1848  00DF88  AC03               	btfss	OpenUSART@config,6,c
  1849  00DF8A  D002               	goto	l533
  1850  00DF8C  8A9D               	bsf	3997,5,c	;volatile
  1851  00DF8E  D001               	goto	l534
  1852  00DF90                     l533:
  1853  00DF90  9A9D               	bcf	3997,5,c	;volatile
  1854  00DF92                     l534:
  1855  00DF92  9A9E               	bcf	3998,5,c	;volatile
  1856  00DF94  AE03               	btfss	OpenUSART@config,7,c
  1857  00DF96  D002               	goto	l535
  1858  00DF98  889D               	bsf	3997,4,c	;volatile
  1859  00DF9A  D001               	goto	l536
  1860  00DF9C                     l535:
  1861  00DF9C  989D               	bcf	3997,4,c	;volatile
  1862  00DF9E                     l536:
  1863  00DF9E  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1864  00DFA2  5002               	movf	OpenUSART@spbrg+1,w,c
  1865  00DFA4  6EB0               	movwf	4016,c	;volatile
  1866  00DFA6  8AAC               	bsf	4012,5,c	;volatile
  1867  00DFA8  8EAB               	bsf	4011,7,c	;volatile
  1868  00DFAA  9C94               	bcf	3988,6,c	;volatile
  1869  00DFAC  8E94               	bsf	3988,7,c	;volatile
  1870  00DFAE  B8AC               	btfsc	4012,4,c	;volatile
  1871  00DFB0  BEAC               	btfsc	4012,7,c	;volatile
  1872  00DFB2  D002               	goto	l538
  1873  00DFB4  8C94               	bsf	3988,6,c	;volatile
  1874  00DFB6  D000               	goto	l538
  1875  00DFB8                     l538:
  1876  00DFB8  0012               	return		;funcret
  1877  00DFBA                     __end_of_OpenUSART:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           intcon2	equ	0xFF1
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1l	equ	0xFE1
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _init_IO *****************
  1891 ;; Defined at:
  1892 ;;		line 290 in file "Lab8test2.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;		None
  1897 ;; Return value:  Size  Location     Type
  1898 ;;		None               void
  1899 ;; Registers used:
  1900 ;;		wreg, status,2
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;Total ram usage:        0 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text3
  1920  00D9CA                     __ptext3:
  1921                           	opt stack 0
  1922  00D9CA                     _init_IO:
  1923                           	opt stack 30
  1924                           
  1925                           ;Lab8test2.c: 292: TRISA = 0x19;
  1926                           
  1927                           ;incstack = 0
  1928  00D9CA  0E19               	movlw	25
  1929  00D9CC  6E92               	movwf	3986,c	;volatile
  1930                           
  1931                           ;Lab8test2.c: 293: TRISB = 0x03;
  1932  00D9CE  0E03               	movlw	3
  1933  00D9D0  6E93               	movwf	3987,c	;volatile
  1934                           
  1935                           ;Lab8test2.c: 294: TRISC = 0x00;
  1936  00D9D2  0E00               	movlw	0
  1937  00D9D4  6E94               	movwf	3988,c	;volatile
  1938                           
  1939                           ;Lab8test2.c: 295: TRISD = 0x00;
  1940  00D9D6  0E00               	movlw	0
  1941  00D9D8  6E95               	movwf	3989,c	;volatile
  1942                           
  1943                           ;Lab8test2.c: 296: TRISE = 0x00;
  1944  00D9DA  0E00               	movlw	0
  1945  00D9DC  6E96               	movwf	3990,c	;volatile
  1946  00D9DE  0012               	return		;funcret
  1947  00D9E0                     __end_of_init_IO:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           intcon2	equ	0xFF1
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _Night_Mode *****************
  1961 ;; Defined at:
  1962 ;;		line 480 in file "Lab8test2.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;		None               void
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:   10
  1983 ;; This function calls:
  1984 ;;		_Set_EW
  1985 ;;		_Set_EWLT
  1986 ;;		_Set_NS
  1987 ;;		_Set_NSLT
  1988 ;;		_Wait_N_Seconds
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text4
  1995  00E42E                     __ptext4:
  1996                           	opt stack 0
  1997  00E42E                     _Night_Mode:
  1998                           	opt stack 20
  1999                           
  2000                           ;Lab8test2.c: 482: MODE = 0;
  2001                           
  2002                           ;incstack = 0
  2003  00E42E  0E00               	movlw	0
  2004  00E430  6E69               	movwf	_MODE+1,c
  2005  00E432  0E00               	movlw	0
  2006  00E434  6E68               	movwf	_MODE,c
  2007                           
  2008                           ;Lab8test2.c: 483: PORTBbits.RB7 = 0;
  2009  00E436  9E81               	bcf	3969,7,c	;volatile
  2010                           
  2011                           ;Lab8test2.c: 484: Act_Mode_Txt[0] = 'N';
  2012  00E438  0E4E               	movlw	78
  2013  00E43A  6E55               	movwf	_Act_Mode_Txt,c
  2014                           
  2015                           ;Lab8test2.c: 487: Set_NS(2);
  2016  00E43C  0E02               	movlw	2
  2017  00E43E  EC81  F06E         	call	_Set_NS
  2018                           
  2019                           ;Lab8test2.c: 488: Set_EW(1);
  2020  00E442  0E01               	movlw	1
  2021  00E444  ECB5  F06D         	call	_Set_EW
  2022                           
  2023                           ;Lab8test2.c: 489: Set_NSLT(1);
  2024  00E448  0E01               	movlw	1
  2025  00E44A  ECEB  F06D         	call	_Set_NSLT
  2026                           
  2027                           ;Lab8test2.c: 490: Set_EWLT(1);
  2028  00E44E  0E01               	movlw	1
  2029  00E450  ECD0  F06D         	call	_Set_EWLT
  2030                           
  2031                           ;Lab8test2.c: 494: Set_NS(2);
  2032  00E454  0E02               	movlw	2
  2033  00E456  EC81  F06E         	call	_Set_NS
  2034                           
  2035                           ;Lab8test2.c: 495: Wait_N_Seconds(8);
  2036  00E45A  0E08               	movlw	8
  2037  00E45C  EC6D  F06D         	call	_Wait_N_Seconds
  2038                           
  2039                           ;Lab8test2.c: 497: Set_NS(3);
  2040  00E460  0E03               	movlw	3
  2041  00E462  EC81  F06E         	call	_Set_NS
  2042                           
  2043                           ;Lab8test2.c: 498: Wait_N_Seconds(2);
  2044  00E466  0E02               	movlw	2
  2045  00E468  EC6D  F06D         	call	_Wait_N_Seconds
  2046                           
  2047                           ;Lab8test2.c: 500: Set_NS(1);
  2048  00E46C  0E01               	movlw	1
  2049  00E46E  EC81  F06E         	call	_Set_NS
  2050                           
  2051                           ;Lab8test2.c: 504: if(PORTCbits.RC7 == 1)
  2052  00E472  AE82               	btfss	3970,7,c	;volatile
  2053  00E474  D010               	goto	l3706
  2054                           
  2055                           ;Lab8test2.c: 505: {
  2056                           ;Lab8test2.c: 506: Set_EWLT(2);
  2057  00E476  0E02               	movlw	2
  2058  00E478  ECD0  F06D         	call	_Set_EWLT
  2059                           
  2060                           ;Lab8test2.c: 507: Wait_N_Seconds(6);
  2061  00E47C  0E06               	movlw	6
  2062  00E47E  EC6D  F06D         	call	_Wait_N_Seconds
  2063                           
  2064                           ;Lab8test2.c: 508: Set_EWLT(3);
  2065  00E482  0E03               	movlw	3
  2066  00E484  ECD0  F06D         	call	_Set_EWLT
  2067                           
  2068                           ;Lab8test2.c: 509: Wait_N_Seconds(2);
  2069  00E488  0E02               	movlw	2
  2070  00E48A  EC6D  F06D         	call	_Wait_N_Seconds
  2071                           
  2072                           ;Lab8test2.c: 510: Set_EWLT(1);
  2073  00E48E  0E01               	movlw	1
  2074  00E490  ECD0  F06D         	call	_Set_EWLT
  2075  00E494  D000               	goto	l3706
  2076  00E496                     l3706:
  2077                           
  2078                           ;Lab8test2.c: 513: }
  2079                           ;Lab8test2.c: 515: Set_EW(2);
  2080  00E496  0E02               	movlw	2
  2081  00E498  ECB5  F06D         	call	_Set_EW
  2082                           
  2083                           ;Lab8test2.c: 516: Wait_N_Seconds(9);
  2084  00E49C  0E09               	movlw	9
  2085  00E49E  EC6D  F06D         	call	_Wait_N_Seconds
  2086                           
  2087                           ;Lab8test2.c: 517: Set_EW(3);
  2088  00E4A2  0E03               	movlw	3
  2089  00E4A4  ECB5  F06D         	call	_Set_EW
  2090                           
  2091                           ;Lab8test2.c: 518: Wait_N_Seconds(2);
  2092  00E4A8  0E02               	movlw	2
  2093  00E4AA  EC6D  F06D         	call	_Wait_N_Seconds
  2094                           
  2095                           ;Lab8test2.c: 519: Set_EW(1);
  2096  00E4AE  0E01               	movlw	1
  2097  00E4B0  ECB5  F06D         	call	_Set_EW
  2098                           
  2099                           ;Lab8test2.c: 524: if(PORTAbits.RA3 == 1)
  2100  00E4B4  A680               	btfss	3968,3,c	;volatile
  2101  00E4B6  D010               	goto	l446
  2102                           
  2103                           ;Lab8test2.c: 526: {
  2104                           ;Lab8test2.c: 527: Set_NSLT(2);
  2105  00E4B8  0E02               	movlw	2
  2106  00E4BA  ECEB  F06D         	call	_Set_NSLT
  2107                           
  2108                           ;Lab8test2.c: 528: Wait_N_Seconds(7);
  2109  00E4BE  0E07               	movlw	7
  2110  00E4C0  EC6D  F06D         	call	_Wait_N_Seconds
  2111                           
  2112                           ;Lab8test2.c: 529: Set_NSLT(3);
  2113  00E4C4  0E03               	movlw	3
  2114  00E4C6  ECEB  F06D         	call	_Set_NSLT
  2115                           
  2116                           ;Lab8test2.c: 530: Wait_N_Seconds(2);
  2117  00E4CA  0E02               	movlw	2
  2118  00E4CC  EC6D  F06D         	call	_Wait_N_Seconds
  2119                           
  2120                           ;Lab8test2.c: 531: Set_NSLT(1);
  2121  00E4D0  0E01               	movlw	1
  2122  00E4D2  ECEB  F06D         	call	_Set_NSLT
  2123  00E4D6  D000               	goto	l446
  2124  00E4D8                     l446:
  2125  00E4D8  0012               	return		;funcret
  2126  00E4DA                     __end_of_Night_Mode:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           intcon2	equ	0xFF1
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _Initialize_Screen *****************
  2140 ;; Defined at:
  2141 ;;		line 157 in file "Lab8test2.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        0 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    7
  2162 ;; This function calls:
  2163 ;;		_LCD_Reset
  2164 ;;		_TFT_GreenTab_Initialize
  2165 ;;		_drawCircle
  2166 ;;		_drawRect
  2167 ;;		_drawtext
  2168 ;;		_fillCircle
  2169 ;;		_fillScreen
  2170 ;;		_strcpy
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text5
  2177  00F69E                     __ptext5:
  2178                           	opt stack 0
  2179  00F69E                     _Initialize_Screen:
  2180                           	opt stack 23
  2181                           
  2182                           ;Lab8test2.c: 159: LCD_Reset();
  2183                           
  2184                           ;incstack = 0
  2185  00F69E  ECBD  F06C         	call	_LCD_Reset	;wreg free
  2186                           
  2187                           ;Lab8test2.c: 160: TFT_GreenTab_Initialize();
  2188  00F6A2  EC58  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2189                           
  2190                           ;Lab8test2.c: 161: fillScreen(0x0000);
  2191  00F6A6  0E00               	movlw	0
  2192  00F6A8  6E15               	movwf	fillScreen@color+1,c
  2193  00F6AA  0E00               	movlw	0
  2194  00F6AC  6E14               	movwf	fillScreen@color,c
  2195  00F6AE  ECFD  F06C         	call	_fillScreen	;wreg free
  2196                           
  2197                           ;Lab8test2.c: 164: txt = buffer;
  2198  00F6B2  0EA8               	movlw	low _buffer
  2199  00F6B4  6E6C               	movwf	_txt,c
  2200  00F6B6  0E00               	movlw	high _buffer
  2201  00F6B8  6E6D               	movwf	_txt+1,c
  2202                           
  2203                           ;Lab8test2.c: 165: strcpy(txt, "ECE3301L Fall 22-S1");
  2204  00F6BA  C06C  F001         	movff	_txt,strcpy@to
  2205  00F6BE  C06D  F002         	movff	_txt+1,strcpy@to+1
  2206  00F6C2  0EAD               	movlw	low STR_1
  2207  00F6C4  6E03               	movwf	strcpy@from,c
  2208  00F6C6  0EFF               	movlw	high STR_1
  2209  00F6C8  6E04               	movwf	strcpy@from+1,c
  2210  00F6CA  EC9C  F06D         	call	_strcpy	;wreg free
  2211                           
  2212                           ;Lab8test2.c: 166: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2213  00F6CE  0E02               	movlw	2
  2214  00F6D0  6E29               	movwf	drawtext@y,c
  2215  00F6D2  C06C  F02A         	movff	_txt,drawtext@_text
  2216  00F6D6  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2217  00F6DA  0EFF               	movlw	255
  2218  00F6DC  6E2D               	movwf	drawtext@color+1,c
  2219  00F6DE  682C               	setf	drawtext@color,c
  2220  00F6E0  0E00               	movlw	0
  2221  00F6E2  6E2F               	movwf	drawtext@bg+1,c
  2222  00F6E4  0E00               	movlw	0
  2223  00F6E6  6E2E               	movwf	drawtext@bg,c
  2224  00F6E8  0E01               	movlw	1
  2225  00F6EA  6E30               	movwf	drawtext@size,c
  2226  00F6EC  0E02               	movlw	2
  2227  00F6EE  EC01  F074         	call	_drawtext
  2228                           
  2229                           ;Lab8test2.c: 169: strcpy(txt, "Mode:");
  2230  00F6F2  C06C  F001         	movff	_txt,strcpy@to
  2231  00F6F6  C06D  F002         	movff	_txt+1,strcpy@to+1
  2232  00F6FA  0EE5               	movlw	low STR_2
  2233  00F6FC  6E03               	movwf	strcpy@from,c
  2234  00F6FE  0EFF               	movlw	high STR_2
  2235  00F700  6E04               	movwf	strcpy@from+1,c
  2236  00F702  EC9C  F06D         	call	_strcpy	;wreg free
  2237                           
  2238                           ;Lab8test2.c: 170: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2239  00F706  0E0A               	movlw	10
  2240  00F708  6E29               	movwf	drawtext@y,c
  2241  00F70A  C06C  F02A         	movff	_txt,drawtext@_text
  2242  00F70E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2243  00F712  0EFF               	movlw	255
  2244  00F714  6E2D               	movwf	drawtext@color+1,c
  2245  00F716  682C               	setf	drawtext@color,c
  2246  00F718  0E00               	movlw	0
  2247  00F71A  6E2F               	movwf	drawtext@bg+1,c
  2248  00F71C  0E00               	movlw	0
  2249  00F71E  6E2E               	movwf	drawtext@bg,c
  2250  00F720  0E01               	movlw	1
  2251  00F722  6E30               	movwf	drawtext@size,c
  2252  00F724  0E02               	movlw	2
  2253  00F726  EC01  F074         	call	_drawtext
  2254                           
  2255                           ;Lab8test2.c: 171: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2256  00F72A  0E0A               	movlw	10
  2257  00F72C  6E29               	movwf	drawtext@y,c
  2258  00F72E  0E55               	movlw	low _Act_Mode_Txt
  2259  00F730  6E2A               	movwf	drawtext@_text,c
  2260  00F732  0E00               	movlw	high _Act_Mode_Txt
  2261  00F734  6E2B               	movwf	drawtext@_text+1,c
  2262  00F736  0EFF               	movlw	255
  2263  00F738  6E2D               	movwf	drawtext@color+1,c
  2264  00F73A  682C               	setf	drawtext@color,c
  2265  00F73C  0E00               	movlw	0
  2266  00F73E  6E2F               	movwf	drawtext@bg+1,c
  2267  00F740  0E00               	movlw	0
  2268  00F742  6E2E               	movwf	drawtext@bg,c
  2269  00F744  0E01               	movlw	1
  2270  00F746  6E30               	movwf	drawtext@size,c
  2271  00F748  0E23               	movlw	35
  2272  00F74A  EC01  F074         	call	_drawtext
  2273                           
  2274                           ;Lab8test2.c: 174: strcpy(txt, "FR:");
  2275  00F74E  C06C  F001         	movff	_txt,strcpy@to
  2276  00F752  C06D  F002         	movff	_txt+1,strcpy@to+1
  2277  00F756  0EEB               	movlw	low STR_3
  2278  00F758  6E03               	movwf	strcpy@from,c
  2279  00F75A  0EFF               	movlw	high STR_3
  2280  00F75C  6E04               	movwf	strcpy@from+1,c
  2281  00F75E  EC9C  F06D         	call	_strcpy	;wreg free
  2282                           
  2283                           ;Lab8test2.c: 175: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2284  00F762  0E0A               	movlw	10
  2285  00F764  6E29               	movwf	drawtext@y,c
  2286  00F766  C06C  F02A         	movff	_txt,drawtext@_text
  2287  00F76A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2288  00F76E  0EFF               	movlw	255
  2289  00F770  6E2D               	movwf	drawtext@color+1,c
  2290  00F772  682C               	setf	drawtext@color,c
  2291  00F774  0E00               	movlw	0
  2292  00F776  6E2F               	movwf	drawtext@bg+1,c
  2293  00F778  0E00               	movlw	0
  2294  00F77A  6E2E               	movwf	drawtext@bg,c
  2295  00F77C  0E01               	movlw	1
  2296  00F77E  6E30               	movwf	drawtext@size,c
  2297  00F780  0E32               	movlw	50
  2298  00F782  EC01  F074         	call	_drawtext
  2299                           
  2300                           ;Lab8test2.c: 176: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2301  00F786  0E0A               	movlw	10
  2302  00F788  6E29               	movwf	drawtext@y,c
  2303  00F78A  0E57               	movlw	low _FlashingR_Txt
  2304  00F78C  6E2A               	movwf	drawtext@_text,c
  2305  00F78E  0E00               	movlw	high _FlashingR_Txt
  2306  00F790  6E2B               	movwf	drawtext@_text+1,c
  2307  00F792  0EFF               	movlw	255
  2308  00F794  6E2D               	movwf	drawtext@color+1,c
  2309  00F796  682C               	setf	drawtext@color,c
  2310  00F798  0E00               	movlw	0
  2311  00F79A  6E2F               	movwf	drawtext@bg+1,c
  2312  00F79C  0E00               	movlw	0
  2313  00F79E  6E2E               	movwf	drawtext@bg,c
  2314  00F7A0  0E01               	movlw	1
  2315  00F7A2  6E30               	movwf	drawtext@size,c
  2316  00F7A4  0E46               	movlw	70
  2317  00F7A6  EC01  F074         	call	_drawtext
  2318                           
  2319                           ;Lab8test2.c: 179: strcpy(txt, "FS:");
  2320  00F7AA  C06C  F001         	movff	_txt,strcpy@to
  2321  00F7AE  C06D  F002         	movff	_txt+1,strcpy@to+1
  2322  00F7B2  0EEF               	movlw	low STR_4
  2323  00F7B4  6E03               	movwf	strcpy@from,c
  2324  00F7B6  0EFF               	movlw	high STR_4
  2325  00F7B8  6E04               	movwf	strcpy@from+1,c
  2326  00F7BA  EC9C  F06D         	call	_strcpy	;wreg free
  2327                           
  2328                           ;Lab8test2.c: 180: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2329  00F7BE  0E0A               	movlw	10
  2330  00F7C0  6E29               	movwf	drawtext@y,c
  2331  00F7C2  C06C  F02A         	movff	_txt,drawtext@_text
  2332  00F7C6  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2333  00F7CA  0EFF               	movlw	255
  2334  00F7CC  6E2D               	movwf	drawtext@color+1,c
  2335  00F7CE  682C               	setf	drawtext@color,c
  2336  00F7D0  0E00               	movlw	0
  2337  00F7D2  6E2F               	movwf	drawtext@bg+1,c
  2338  00F7D4  0E00               	movlw	0
  2339  00F7D6  6E2E               	movwf	drawtext@bg,c
  2340  00F7D8  0E01               	movlw	1
  2341  00F7DA  6E30               	movwf	drawtext@size,c
  2342  00F7DC  0E50               	movlw	80
  2343  00F7DE  EC01  F074         	call	_drawtext
  2344                           
  2345                           ;Lab8test2.c: 181: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2346  00F7E2  0E0A               	movlw	10
  2347  00F7E4  6E29               	movwf	drawtext@y,c
  2348  00F7E6  0E59               	movlw	low _FlashingS_Txt
  2349  00F7E8  6E2A               	movwf	drawtext@_text,c
  2350  00F7EA  0E00               	movlw	high _FlashingS_Txt
  2351  00F7EC  6E2B               	movwf	drawtext@_text+1,c
  2352  00F7EE  0EFF               	movlw	255
  2353  00F7F0  6E2D               	movwf	drawtext@color+1,c
  2354  00F7F2  682C               	setf	drawtext@color,c
  2355  00F7F4  0E00               	movlw	0
  2356  00F7F6  6E2F               	movwf	drawtext@bg+1,c
  2357  00F7F8  0E00               	movlw	0
  2358  00F7FA  6E2E               	movwf	drawtext@bg,c
  2359  00F7FC  0E01               	movlw	1
  2360  00F7FE  6E30               	movwf	drawtext@size,c
  2361  00F800  0E64               	movlw	100
  2362  00F802  EC01  F074         	call	_drawtext
  2363                           
  2364                           ;Lab8test2.c: 184: strcpy(txt, "*");
  2365  00F806  C06C  F001         	movff	_txt,strcpy@to
  2366  00F80A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2367  00F80E  0EFD               	movlw	low STR_5
  2368  00F810  6E03               	movwf	strcpy@from,c
  2369  00F812  0EFF               	movlw	high STR_5
  2370  00F814  6E04               	movwf	strcpy@from+1,c
  2371  00F816  EC9C  F06D         	call	_strcpy	;wreg free
  2372                           
  2373                           ;Lab8test2.c: 185: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2374  00F81A  0E0A               	movlw	10
  2375  00F81C  6E29               	movwf	drawtext@y,c
  2376  00F81E  C06C  F02A         	movff	_txt,drawtext@_text
  2377  00F822  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2378  00F826  0EFF               	movlw	255
  2379  00F828  6E2D               	movwf	drawtext@color+1,c
  2380  00F82A  682C               	setf	drawtext@color,c
  2381  00F82C  0E00               	movlw	0
  2382  00F82E  6E2F               	movwf	drawtext@bg+1,c
  2383  00F830  0E00               	movlw	0
  2384  00F832  6E2E               	movwf	drawtext@bg,c
  2385  00F834  0E01               	movlw	1
  2386  00F836  6E30               	movwf	drawtext@size,c
  2387  00F838  0E78               	movlw	120
  2388  00F83A  EC01  F074         	call	_drawtext
  2389                           
  2390                           ;Lab8test2.c: 188: strcpy(txt, "EAST/WEST");
  2391  00F83E  C06C  F001         	movff	_txt,strcpy@to
  2392  00F842  C06D  F002         	movff	_txt+1,strcpy@to+1
  2393  00F846  0ECD               	movlw	low STR_6
  2394  00F848  6E03               	movwf	strcpy@from,c
  2395  00F84A  0EFF               	movlw	high STR_6
  2396  00F84C  6E04               	movwf	strcpy@from+1,c
  2397  00F84E  EC9C  F06D         	call	_strcpy	;wreg free
  2398                           
  2399                           ;Lab8test2.c: 189: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2400  00F852  0E14               	movlw	20
  2401  00F854  6E29               	movwf	drawtext@y,c
  2402  00F856  C06C  F02A         	movff	_txt,drawtext@_text
  2403  00F85A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2404  00F85E  0E07               	movlw	7
  2405  00F860  6E2D               	movwf	drawtext@color+1,c
  2406  00F862  682C               	setf	drawtext@color,c
  2407  00F864  0E00               	movlw	0
  2408  00F866  6E2F               	movwf	drawtext@bg+1,c
  2409  00F868  0E00               	movlw	0
  2410  00F86A  6E2E               	movwf	drawtext@bg,c
  2411  00F86C  0E01               	movlw	1
  2412  00F86E  6E30               	movwf	drawtext@size,c
  2413  00F870  0E1E               	movlw	30
  2414  00F872  EC01  F074         	call	_drawtext
  2415                           
  2416                           ;Lab8test2.c: 190: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2417  00F876  0E00               	movlw	0
  2418  00F878  6E14               	movwf	drawRect@x+1,c
  2419  00F87A  0E1E               	movlw	30
  2420  00F87C  6E13               	movwf	drawRect@x,c
  2421  00F87E  0E00               	movlw	0
  2422  00F880  6E16               	movwf	drawRect@y+1,c
  2423  00F882  0E1B               	movlw	27
  2424  00F884  6E15               	movwf	drawRect@y,c
  2425  00F886  0E00               	movlw	0
  2426  00F888  6E18               	movwf	drawRect@w+1,c
  2427  00F88A  0E3C               	movlw	60
  2428  00F88C  6E17               	movwf	drawRect@w,c
  2429  00F88E  0E00               	movlw	0
  2430  00F890  6E1A               	movwf	drawRect@h+1,c
  2431  00F892  0E12               	movlw	18
  2432  00F894  6E19               	movwf	drawRect@h,c
  2433  00F896  0E07               	movlw	7
  2434  00F898  6E1C               	movwf	drawRect@color+1,c
  2435  00F89A  681B               	setf	drawRect@color,c
  2436  00F89C  EC72  F06F         	call	_drawRect	;wreg free
  2437                           
  2438                           ;Lab8test2.c: 191: fillCircle(40, 20 + 15, 7, 0xF800);
  2439  00F8A0  0E00               	movlw	0
  2440  00F8A2  6E2C               	movwf	fillCircle@x0+1,c
  2441  00F8A4  0E28               	movlw	40
  2442  00F8A6  6E2B               	movwf	fillCircle@x0,c
  2443  00F8A8  0E00               	movlw	0
  2444  00F8AA  6E2E               	movwf	fillCircle@y0+1,c
  2445  00F8AC  0E23               	movlw	35
  2446  00F8AE  6E2D               	movwf	fillCircle@y0,c
  2447  00F8B0  0E00               	movlw	0
  2448  00F8B2  6E30               	movwf	fillCircle@r+1,c
  2449  00F8B4  0E07               	movlw	7
  2450  00F8B6  6E2F               	movwf	fillCircle@r,c
  2451  00F8B8  0EF8               	movlw	248
  2452  00F8BA  6E32               	movwf	fillCircle@color+1,c
  2453  00F8BC  0E00               	movlw	0
  2454  00F8BE  6E31               	movwf	fillCircle@color,c
  2455  00F8C0  ECEF  F06E         	call	_fillCircle	;wreg free
  2456                           
  2457                           ;Lab8test2.c: 192: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2458  00F8C4  0E00               	movlw	0
  2459  00F8C6  6E0D               	movwf	drawCircle@x0+1,c
  2460  00F8C8  0E3C               	movlw	60
  2461  00F8CA  6E0C               	movwf	drawCircle@x0,c
  2462  00F8CC  0E00               	movlw	0
  2463  00F8CE  6E0F               	movwf	drawCircle@y0+1,c
  2464  00F8D0  0E23               	movlw	35
  2465  00F8D2  6E0E               	movwf	drawCircle@y0,c
  2466  00F8D4  0E00               	movlw	0
  2467  00F8D6  6E11               	movwf	drawCircle@r+1,c
  2468  00F8D8  0E07               	movlw	7
  2469  00F8DA  6E10               	movwf	drawCircle@r,c
  2470  00F8DC  0EFF               	movlw	255
  2471  00F8DE  6E13               	movwf	drawCircle@color+1,c
  2472  00F8E0  0EE0               	movlw	224
  2473  00F8E2  6E12               	movwf	drawCircle@color,c
  2474  00F8E4  ECE8  F077         	call	_drawCircle	;wreg free
  2475                           
  2476                           ;Lab8test2.c: 193: drawCircle(80, 20 + 15, 7, 0x07E0);
  2477  00F8E8  0E00               	movlw	0
  2478  00F8EA  6E0D               	movwf	drawCircle@x0+1,c
  2479  00F8EC  0E50               	movlw	80
  2480  00F8EE  6E0C               	movwf	drawCircle@x0,c
  2481  00F8F0  0E00               	movlw	0
  2482  00F8F2  6E0F               	movwf	drawCircle@y0+1,c
  2483  00F8F4  0E23               	movlw	35
  2484  00F8F6  6E0E               	movwf	drawCircle@y0,c
  2485  00F8F8  0E00               	movlw	0
  2486  00F8FA  6E11               	movwf	drawCircle@r+1,c
  2487  00F8FC  0E07               	movlw	7
  2488  00F8FE  6E10               	movwf	drawCircle@r,c
  2489  00F900  0E07               	movlw	7
  2490  00F902  6E13               	movwf	drawCircle@color+1,c
  2491  00F904  0EE0               	movlw	224
  2492  00F906  6E12               	movwf	drawCircle@color,c
  2493  00F908  ECE8  F077         	call	_drawCircle	;wreg free
  2494                           
  2495                           ;Lab8test2.c: 194: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2496  00F90C  0E1E               	movlw	30
  2497  00F90E  6E29               	movwf	drawtext@y,c
  2498  00F910  0E46               	movlw	low _EW_Count
  2499  00F912  6E2A               	movwf	drawtext@_text,c
  2500  00F914  0E00               	movlw	high _EW_Count
  2501  00F916  6E2B               	movwf	drawtext@_text+1,c
  2502  00F918  0E07               	movlw	7
  2503  00F91A  6E2D               	movwf	drawtext@color+1,c
  2504  00F91C  682C               	setf	drawtext@color,c
  2505  00F91E  0E00               	movlw	0
  2506  00F920  6E2F               	movwf	drawtext@bg+1,c
  2507  00F922  0E00               	movlw	0
  2508  00F924  6E2E               	movwf	drawtext@bg,c
  2509  00F926  0E02               	movlw	2
  2510  00F928  6E30               	movwf	drawtext@size,c
  2511  00F92A  0E64               	movlw	100
  2512  00F92C  EC01  F074         	call	_drawtext
  2513                           
  2514                           ;Lab8test2.c: 197: strcpy(txt, "E/W LT");
  2515  00F930  C06C  F001         	movff	_txt,strcpy@to
  2516  00F934  C06D  F002         	movff	_txt+1,strcpy@to+1
  2517  00F938  0EDE               	movlw	low STR_7
  2518  00F93A  6E03               	movwf	strcpy@from,c
  2519  00F93C  0EFF               	movlw	high STR_7
  2520  00F93E  6E04               	movwf	strcpy@from+1,c
  2521  00F940  EC9C  F06D         	call	_strcpy	;wreg free
  2522                           
  2523                           ;Lab8test2.c: 198: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2524  00F944  0E32               	movlw	50
  2525  00F946  6E29               	movwf	drawtext@y,c
  2526  00F948  C06C  F02A         	movff	_txt,drawtext@_text
  2527  00F94C  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2528  00F950  0EFF               	movlw	255
  2529  00F952  6E2D               	movwf	drawtext@color+1,c
  2530  00F954  682C               	setf	drawtext@color,c
  2531  00F956  0E00               	movlw	0
  2532  00F958  6E2F               	movwf	drawtext@bg+1,c
  2533  00F95A  0E00               	movlw	0
  2534  00F95C  6E2E               	movwf	drawtext@bg,c
  2535  00F95E  0E01               	movlw	1
  2536  00F960  6E30               	movwf	drawtext@size,c
  2537  00F962  0E1E               	movlw	30
  2538  00F964  EC01  F074         	call	_drawtext
  2539                           
  2540                           ;Lab8test2.c: 199: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2541  00F968  0E00               	movlw	0
  2542  00F96A  6E14               	movwf	drawRect@x+1,c
  2543  00F96C  0E1E               	movlw	30
  2544  00F96E  6E13               	movwf	drawRect@x,c
  2545  00F970  0E00               	movlw	0
  2546  00F972  6E16               	movwf	drawRect@y+1,c
  2547  00F974  0E39               	movlw	57
  2548  00F976  6E15               	movwf	drawRect@y,c
  2549  00F978  0E00               	movlw	0
  2550  00F97A  6E18               	movwf	drawRect@w+1,c
  2551  00F97C  0E3C               	movlw	60
  2552  00F97E  6E17               	movwf	drawRect@w,c
  2553  00F980  0E00               	movlw	0
  2554  00F982  6E1A               	movwf	drawRect@h+1,c
  2555  00F984  0E12               	movlw	18
  2556  00F986  6E19               	movwf	drawRect@h,c
  2557  00F988  0EFF               	movlw	255
  2558  00F98A  6E1C               	movwf	drawRect@color+1,c
  2559  00F98C  681B               	setf	drawRect@color,c
  2560  00F98E  EC72  F06F         	call	_drawRect	;wreg free
  2561                           
  2562                           ;Lab8test2.c: 200: fillCircle(40, 50 + 15, 7, 0xF800);
  2563  00F992  0E00               	movlw	0
  2564  00F994  6E2C               	movwf	fillCircle@x0+1,c
  2565  00F996  0E28               	movlw	40
  2566  00F998  6E2B               	movwf	fillCircle@x0,c
  2567  00F99A  0E00               	movlw	0
  2568  00F99C  6E2E               	movwf	fillCircle@y0+1,c
  2569  00F99E  0E41               	movlw	65
  2570  00F9A0  6E2D               	movwf	fillCircle@y0,c
  2571  00F9A2  0E00               	movlw	0
  2572  00F9A4  6E30               	movwf	fillCircle@r+1,c
  2573  00F9A6  0E07               	movlw	7
  2574  00F9A8  6E2F               	movwf	fillCircle@r,c
  2575  00F9AA  0EF8               	movlw	248
  2576  00F9AC  6E32               	movwf	fillCircle@color+1,c
  2577  00F9AE  0E00               	movlw	0
  2578  00F9B0  6E31               	movwf	fillCircle@color,c
  2579  00F9B2  ECEF  F06E         	call	_fillCircle	;wreg free
  2580                           
  2581                           ;Lab8test2.c: 201: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2582  00F9B6  0E00               	movlw	0
  2583  00F9B8  6E0D               	movwf	drawCircle@x0+1,c
  2584  00F9BA  0E3C               	movlw	60
  2585  00F9BC  6E0C               	movwf	drawCircle@x0,c
  2586  00F9BE  0E00               	movlw	0
  2587  00F9C0  6E0F               	movwf	drawCircle@y0+1,c
  2588  00F9C2  0E41               	movlw	65
  2589  00F9C4  6E0E               	movwf	drawCircle@y0,c
  2590  00F9C6  0E00               	movlw	0
  2591  00F9C8  6E11               	movwf	drawCircle@r+1,c
  2592  00F9CA  0E07               	movlw	7
  2593  00F9CC  6E10               	movwf	drawCircle@r,c
  2594  00F9CE  0EFF               	movlw	255
  2595  00F9D0  6E13               	movwf	drawCircle@color+1,c
  2596  00F9D2  0EE0               	movlw	224
  2597  00F9D4  6E12               	movwf	drawCircle@color,c
  2598  00F9D6  ECE8  F077         	call	_drawCircle	;wreg free
  2599                           
  2600                           ;Lab8test2.c: 202: drawCircle(80, 50 + 15, 7, 0x07E0);
  2601  00F9DA  0E00               	movlw	0
  2602  00F9DC  6E0D               	movwf	drawCircle@x0+1,c
  2603  00F9DE  0E50               	movlw	80
  2604  00F9E0  6E0C               	movwf	drawCircle@x0,c
  2605  00F9E2  0E00               	movlw	0
  2606  00F9E4  6E0F               	movwf	drawCircle@y0+1,c
  2607  00F9E6  0E41               	movlw	65
  2608  00F9E8  6E0E               	movwf	drawCircle@y0,c
  2609  00F9EA  0E00               	movlw	0
  2610  00F9EC  6E11               	movwf	drawCircle@r+1,c
  2611  00F9EE  0E07               	movlw	7
  2612  00F9F0  6E10               	movwf	drawCircle@r,c
  2613  00F9F2  0E07               	movlw	7
  2614  00F9F4  6E13               	movwf	drawCircle@color+1,c
  2615  00F9F6  0EE0               	movlw	224
  2616  00F9F8  6E12               	movwf	drawCircle@color,c
  2617  00F9FA  ECE8  F077         	call	_drawCircle	;wreg free
  2618                           
  2619                           ;Lab8test2.c: 203: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2620  00F9FE  0E3C               	movlw	60
  2621  00FA00  6E29               	movwf	drawtext@y,c
  2622  00FA02  0E43               	movlw	low _EWLT_Count
  2623  00FA04  6E2A               	movwf	drawtext@_text,c
  2624  00FA06  0E00               	movlw	high _EWLT_Count
  2625  00FA08  6E2B               	movwf	drawtext@_text+1,c
  2626  00FA0A  0EFF               	movlw	255
  2627  00FA0C  6E2D               	movwf	drawtext@color+1,c
  2628  00FA0E  682C               	setf	drawtext@color,c
  2629  00FA10  0E00               	movlw	0
  2630  00FA12  6E2F               	movwf	drawtext@bg+1,c
  2631  00FA14  0E00               	movlw	0
  2632  00FA16  6E2E               	movwf	drawtext@bg,c
  2633  00FA18  0E02               	movlw	2
  2634  00FA1A  6E30               	movwf	drawtext@size,c
  2635  00FA1C  0E64               	movlw	100
  2636  00FA1E  EC01  F074         	call	_drawtext
  2637                           
  2638                           ;Lab8test2.c: 206: strcpy(txt, "NORTH/SOUTH");
  2639  00FA22  C06C  F001         	movff	_txt,strcpy@to
  2640  00FA26  C06D  F002         	movff	_txt+1,strcpy@to+1
  2641  00FA2A  0EC1               	movlw	low STR_8
  2642  00FA2C  6E03               	movwf	strcpy@from,c
  2643  00FA2E  0EFF               	movlw	high STR_8
  2644  00FA30  6E04               	movwf	strcpy@from+1,c
  2645  00FA32  EC9C  F06D         	call	_strcpy	;wreg free
  2646                           
  2647                           ;Lab8test2.c: 207: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2648  00FA36  0E50               	movlw	80
  2649  00FA38  6E29               	movwf	drawtext@y,c
  2650  00FA3A  C06C  F02A         	movff	_txt,drawtext@_text
  2651  00FA3E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2652  00FA42  0E00               	movlw	0
  2653  00FA44  6E2D               	movwf	drawtext@color+1,c
  2654  00FA46  0E1F               	movlw	31
  2655  00FA48  6E2C               	movwf	drawtext@color,c
  2656  00FA4A  0E00               	movlw	0
  2657  00FA4C  6E2F               	movwf	drawtext@bg+1,c
  2658  00FA4E  0E00               	movlw	0
  2659  00FA50  6E2E               	movwf	drawtext@bg,c
  2660  00FA52  0E01               	movlw	1
  2661  00FA54  6E30               	movwf	drawtext@size,c
  2662  00FA56  0E1E               	movlw	30
  2663  00FA58  EC01  F074         	call	_drawtext
  2664                           
  2665                           ;Lab8test2.c: 208: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2666  00FA5C  0E00               	movlw	0
  2667  00FA5E  6E14               	movwf	drawRect@x+1,c
  2668  00FA60  0E1E               	movlw	30
  2669  00FA62  6E13               	movwf	drawRect@x,c
  2670  00FA64  0E00               	movlw	0
  2671  00FA66  6E16               	movwf	drawRect@y+1,c
  2672  00FA68  0E57               	movlw	87
  2673  00FA6A  6E15               	movwf	drawRect@y,c
  2674  00FA6C  0E00               	movlw	0
  2675  00FA6E  6E18               	movwf	drawRect@w+1,c
  2676  00FA70  0E3C               	movlw	60
  2677  00FA72  6E17               	movwf	drawRect@w,c
  2678  00FA74  0E00               	movlw	0
  2679  00FA76  6E1A               	movwf	drawRect@h+1,c
  2680  00FA78  0E12               	movlw	18
  2681  00FA7A  6E19               	movwf	drawRect@h,c
  2682  00FA7C  0E00               	movlw	0
  2683  00FA7E  6E1C               	movwf	drawRect@color+1,c
  2684  00FA80  0E1F               	movlw	31
  2685  00FA82  6E1B               	movwf	drawRect@color,c
  2686  00FA84  EC72  F06F         	call	_drawRect	;wreg free
  2687                           
  2688                           ;Lab8test2.c: 209: drawCircle(40, 80 + 15 , 7, 0xF800);
  2689  00FA88  0E00               	movlw	0
  2690  00FA8A  6E0D               	movwf	drawCircle@x0+1,c
  2691  00FA8C  0E28               	movlw	40
  2692  00FA8E  6E0C               	movwf	drawCircle@x0,c
  2693  00FA90  0E00               	movlw	0
  2694  00FA92  6E0F               	movwf	drawCircle@y0+1,c
  2695  00FA94  0E5F               	movlw	95
  2696  00FA96  6E0E               	movwf	drawCircle@y0,c
  2697  00FA98  0E00               	movlw	0
  2698  00FA9A  6E11               	movwf	drawCircle@r+1,c
  2699  00FA9C  0E07               	movlw	7
  2700  00FA9E  6E10               	movwf	drawCircle@r,c
  2701  00FAA0  0EF8               	movlw	248
  2702  00FAA2  6E13               	movwf	drawCircle@color+1,c
  2703  00FAA4  0E00               	movlw	0
  2704  00FAA6  6E12               	movwf	drawCircle@color,c
  2705  00FAA8  ECE8  F077         	call	_drawCircle	;wreg free
  2706                           
  2707                           ;Lab8test2.c: 210: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2708  00FAAC  0E00               	movlw	0
  2709  00FAAE  6E0D               	movwf	drawCircle@x0+1,c
  2710  00FAB0  0E3C               	movlw	60
  2711  00FAB2  6E0C               	movwf	drawCircle@x0,c
  2712  00FAB4  0E00               	movlw	0
  2713  00FAB6  6E0F               	movwf	drawCircle@y0+1,c
  2714  00FAB8  0E5F               	movlw	95
  2715  00FABA  6E0E               	movwf	drawCircle@y0,c
  2716  00FABC  0E00               	movlw	0
  2717  00FABE  6E11               	movwf	drawCircle@r+1,c
  2718  00FAC0  0E07               	movlw	7
  2719  00FAC2  6E10               	movwf	drawCircle@r,c
  2720  00FAC4  0EFF               	movlw	255
  2721  00FAC6  6E13               	movwf	drawCircle@color+1,c
  2722  00FAC8  0EE0               	movlw	224
  2723  00FACA  6E12               	movwf	drawCircle@color,c
  2724  00FACC  ECE8  F077         	call	_drawCircle	;wreg free
  2725                           
  2726                           ;Lab8test2.c: 211: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2727  00FAD0  0E00               	movlw	0
  2728  00FAD2  6E2C               	movwf	fillCircle@x0+1,c
  2729  00FAD4  0E50               	movlw	80
  2730  00FAD6  6E2B               	movwf	fillCircle@x0,c
  2731  00FAD8  0E00               	movlw	0
  2732  00FADA  6E2E               	movwf	fillCircle@y0+1,c
  2733  00FADC  0E5F               	movlw	95
  2734  00FADE  6E2D               	movwf	fillCircle@y0,c
  2735  00FAE0  0E00               	movlw	0
  2736  00FAE2  6E30               	movwf	fillCircle@r+1,c
  2737  00FAE4  0E07               	movlw	7
  2738  00FAE6  6E2F               	movwf	fillCircle@r,c
  2739  00FAE8  0E07               	movlw	7
  2740  00FAEA  6E32               	movwf	fillCircle@color+1,c
  2741  00FAEC  0EE0               	movlw	224
  2742  00FAEE  6E31               	movwf	fillCircle@color,c
  2743  00FAF0  ECEF  F06E         	call	_fillCircle	;wreg free
  2744                           
  2745                           ;Lab8test2.c: 212: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2746  00FAF4  0E5A               	movlw	90
  2747  00FAF6  6E29               	movwf	drawtext@y,c
  2748  00FAF8  0E4C               	movlw	low _NS_Count
  2749  00FAFA  6E2A               	movwf	drawtext@_text,c
  2750  00FAFC  0E00               	movlw	high _NS_Count
  2751  00FAFE  6E2B               	movwf	drawtext@_text+1,c
  2752  00FB00  0E00               	movlw	0
  2753  00FB02  6E2D               	movwf	drawtext@color+1,c
  2754  00FB04  0E1F               	movlw	31
  2755  00FB06  6E2C               	movwf	drawtext@color,c
  2756  00FB08  0E00               	movlw	0
  2757  00FB0A  6E2F               	movwf	drawtext@bg+1,c
  2758  00FB0C  0E00               	movlw	0
  2759  00FB0E  6E2E               	movwf	drawtext@bg,c
  2760  00FB10  0E02               	movlw	2
  2761  00FB12  6E30               	movwf	drawtext@size,c
  2762  00FB14  0E64               	movlw	100
  2763  00FB16  EC01  F074         	call	_drawtext
  2764                           
  2765                           ;Lab8test2.c: 215: strcpy(txt, "N/S LT");
  2766  00FB1A  C06C  F001         	movff	_txt,strcpy@to
  2767  00FB1E  C06D  F002         	movff	_txt+1,strcpy@to+1
  2768  00FB22  0ED7               	movlw	low STR_9
  2769  00FB24  6E03               	movwf	strcpy@from,c
  2770  00FB26  0EFF               	movlw	high STR_9
  2771  00FB28  6E04               	movwf	strcpy@from+1,c
  2772  00FB2A  EC9C  F06D         	call	_strcpy	;wreg free
  2773                           
  2774                           ;Lab8test2.c: 216: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2775  00FB2E  0E6E               	movlw	110
  2776  00FB30  6E29               	movwf	drawtext@y,c
  2777  00FB32  C06C  F02A         	movff	_txt,drawtext@_text
  2778  00FB36  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2779  00FB3A  0EF8               	movlw	248
  2780  00FB3C  6E2D               	movwf	drawtext@color+1,c
  2781  00FB3E  0E1F               	movlw	31
  2782  00FB40  6E2C               	movwf	drawtext@color,c
  2783  00FB42  0E00               	movlw	0
  2784  00FB44  6E2F               	movwf	drawtext@bg+1,c
  2785  00FB46  0E00               	movlw	0
  2786  00FB48  6E2E               	movwf	drawtext@bg,c
  2787  00FB4A  0E01               	movlw	1
  2788  00FB4C  6E30               	movwf	drawtext@size,c
  2789  00FB4E  0E1E               	movlw	30
  2790  00FB50  EC01  F074         	call	_drawtext
  2791                           
  2792                           ;Lab8test2.c: 217: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2793  00FB54  0E00               	movlw	0
  2794  00FB56  6E14               	movwf	drawRect@x+1,c
  2795  00FB58  0E1E               	movlw	30
  2796  00FB5A  6E13               	movwf	drawRect@x,c
  2797  00FB5C  0E00               	movlw	0
  2798  00FB5E  6E16               	movwf	drawRect@y+1,c
  2799  00FB60  0E75               	movlw	117
  2800  00FB62  6E15               	movwf	drawRect@y,c
  2801  00FB64  0E00               	movlw	0
  2802  00FB66  6E18               	movwf	drawRect@w+1,c
  2803  00FB68  0E3C               	movlw	60
  2804  00FB6A  6E17               	movwf	drawRect@w,c
  2805  00FB6C  0E00               	movlw	0
  2806  00FB6E  6E1A               	movwf	drawRect@h+1,c
  2807  00FB70  0E12               	movlw	18
  2808  00FB72  6E19               	movwf	drawRect@h,c
  2809  00FB74  0EF8               	movlw	248
  2810  00FB76  6E1C               	movwf	drawRect@color+1,c
  2811  00FB78  0E1F               	movlw	31
  2812  00FB7A  6E1B               	movwf	drawRect@color,c
  2813  00FB7C  EC72  F06F         	call	_drawRect	;wreg free
  2814                           
  2815                           ;Lab8test2.c: 218: fillCircle(40, 110 + 15, 7, 0xF800);
  2816  00FB80  0E00               	movlw	0
  2817  00FB82  6E2C               	movwf	fillCircle@x0+1,c
  2818  00FB84  0E28               	movlw	40
  2819  00FB86  6E2B               	movwf	fillCircle@x0,c
  2820  00FB88  0E00               	movlw	0
  2821  00FB8A  6E2E               	movwf	fillCircle@y0+1,c
  2822  00FB8C  0E7D               	movlw	125
  2823  00FB8E  6E2D               	movwf	fillCircle@y0,c
  2824  00FB90  0E00               	movlw	0
  2825  00FB92  6E30               	movwf	fillCircle@r+1,c
  2826  00FB94  0E07               	movlw	7
  2827  00FB96  6E2F               	movwf	fillCircle@r,c
  2828  00FB98  0EF8               	movlw	248
  2829  00FB9A  6E32               	movwf	fillCircle@color+1,c
  2830  00FB9C  0E00               	movlw	0
  2831  00FB9E  6E31               	movwf	fillCircle@color,c
  2832  00FBA0  ECEF  F06E         	call	_fillCircle	;wreg free
  2833                           
  2834                           ;Lab8test2.c: 219: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2835  00FBA4  0E00               	movlw	0
  2836  00FBA6  6E0D               	movwf	drawCircle@x0+1,c
  2837  00FBA8  0E3C               	movlw	60
  2838  00FBAA  6E0C               	movwf	drawCircle@x0,c
  2839  00FBAC  0E00               	movlw	0
  2840  00FBAE  6E0F               	movwf	drawCircle@y0+1,c
  2841  00FBB0  0E7D               	movlw	125
  2842  00FBB2  6E0E               	movwf	drawCircle@y0,c
  2843  00FBB4  0E00               	movlw	0
  2844  00FBB6  6E11               	movwf	drawCircle@r+1,c
  2845  00FBB8  0E07               	movlw	7
  2846  00FBBA  6E10               	movwf	drawCircle@r,c
  2847  00FBBC  0EFF               	movlw	255
  2848  00FBBE  6E13               	movwf	drawCircle@color+1,c
  2849  00FBC0  0EE0               	movlw	224
  2850  00FBC2  6E12               	movwf	drawCircle@color,c
  2851  00FBC4  ECE8  F077         	call	_drawCircle	;wreg free
  2852                           
  2853                           ;Lab8test2.c: 220: drawCircle(80, 110 + 15, 7, 0x07E0);
  2854  00FBC8  0E00               	movlw	0
  2855  00FBCA  6E0D               	movwf	drawCircle@x0+1,c
  2856  00FBCC  0E50               	movlw	80
  2857  00FBCE  6E0C               	movwf	drawCircle@x0,c
  2858  00FBD0  0E00               	movlw	0
  2859  00FBD2  6E0F               	movwf	drawCircle@y0+1,c
  2860  00FBD4  0E7D               	movlw	125
  2861  00FBD6  6E0E               	movwf	drawCircle@y0,c
  2862  00FBD8  0E00               	movlw	0
  2863  00FBDA  6E11               	movwf	drawCircle@r+1,c
  2864  00FBDC  0E07               	movlw	7
  2865  00FBDE  6E10               	movwf	drawCircle@r,c
  2866  00FBE0  0E07               	movlw	7
  2867  00FBE2  6E13               	movwf	drawCircle@color+1,c
  2868  00FBE4  0EE0               	movlw	224
  2869  00FBE6  6E12               	movwf	drawCircle@color,c
  2870  00FBE8  ECE8  F077         	call	_drawCircle	;wreg free
  2871                           
  2872                           ;Lab8test2.c: 221: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2873  00FBEC  0E78               	movlw	120
  2874  00FBEE  6E29               	movwf	drawtext@y,c
  2875  00FBF0  0E49               	movlw	low _NSLT_Count
  2876  00FBF2  6E2A               	movwf	drawtext@_text,c
  2877  00FBF4  0E00               	movlw	high _NSLT_Count
  2878  00FBF6  6E2B               	movwf	drawtext@_text+1,c
  2879  00FBF8  0EF8               	movlw	248
  2880  00FBFA  6E2D               	movwf	drawtext@color+1,c
  2881  00FBFC  0E1F               	movlw	31
  2882  00FBFE  6E2C               	movwf	drawtext@color,c
  2883  00FC00  0E00               	movlw	0
  2884  00FC02  6E2F               	movwf	drawtext@bg+1,c
  2885  00FC04  0E00               	movlw	0
  2886  00FC06  6E2E               	movwf	drawtext@bg,c
  2887  00FC08  0E02               	movlw	2
  2888  00FC0A  6E30               	movwf	drawtext@size,c
  2889  00FC0C  0E64               	movlw	100
  2890  00FC0E  EC01  F074         	call	_drawtext
  2891                           
  2892                           ;Lab8test2.c: 225: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2893  00FC12  0E1E               	movlw	30
  2894  00FC14  6E29               	movwf	drawtext@y,c
  2895  00FC16  0E4F               	movlw	low _PED_EW_Count
  2896  00FC18  6E2A               	movwf	drawtext@_text,c
  2897  00FC1A  0E00               	movlw	high _PED_EW_Count
  2898  00FC1C  6E2B               	movwf	drawtext@_text+1,c
  2899  00FC1E  0E07               	movlw	7
  2900  00FC20  6E2D               	movwf	drawtext@color+1,c
  2901  00FC22  682C               	setf	drawtext@color,c
  2902  00FC24  0E00               	movlw	0
  2903  00FC26  6E2F               	movwf	drawtext@bg+1,c
  2904  00FC28  0E00               	movlw	0
  2905  00FC2A  6E2E               	movwf	drawtext@bg,c
  2906  00FC2C  0E02               	movlw	2
  2907  00FC2E  6E30               	movwf	drawtext@size,c
  2908  00FC30  0E02               	movlw	2
  2909  00FC32  EC01  F074         	call	_drawtext
  2910                           
  2911                           ;Lab8test2.c: 226: strcpy(txt, "PEW");
  2912  00FC36  C06C  F001         	movff	_txt,strcpy@to
  2913  00FC3A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2914  00FC3E  0EF7               	movlw	low STR_10
  2915  00FC40  6E03               	movwf	strcpy@from,c
  2916  00FC42  0EFF               	movlw	high STR_10
  2917  00FC44  6E04               	movwf	strcpy@from+1,c
  2918  00FC46  EC9C  F06D         	call	_strcpy	;wreg free
  2919                           
  2920                           ;Lab8test2.c: 227: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2921  00FC4A  0E14               	movlw	20
  2922  00FC4C  6E29               	movwf	drawtext@y,c
  2923  00FC4E  C06C  F02A         	movff	_txt,drawtext@_text
  2924  00FC52  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2925  00FC56  0E07               	movlw	7
  2926  00FC58  6E2D               	movwf	drawtext@color+1,c
  2927  00FC5A  682C               	setf	drawtext@color,c
  2928  00FC5C  0E00               	movlw	0
  2929  00FC5E  6E2F               	movwf	drawtext@bg+1,c
  2930  00FC60  0E00               	movlw	0
  2931  00FC62  6E2E               	movwf	drawtext@bg,c
  2932  00FC64  0E01               	movlw	1
  2933  00FC66  6E30               	movwf	drawtext@size,c
  2934  00FC68  0E03               	movlw	3
  2935  00FC6A  EC01  F074         	call	_drawtext
  2936                           
  2937                           ;Lab8test2.c: 230: strcpy(txt, "PNS");
  2938  00FC6E  C06C  F001         	movff	_txt,strcpy@to
  2939  00FC72  C06D  F002         	movff	_txt+1,strcpy@to+1
  2940  00FC76  0EF3               	movlw	low STR_11
  2941  00FC78  6E03               	movwf	strcpy@from,c
  2942  00FC7A  0EFF               	movlw	high STR_11
  2943  00FC7C  6E04               	movwf	strcpy@from+1,c
  2944  00FC7E  EC9C  F06D         	call	_strcpy	;wreg free
  2945                           
  2946                           ;Lab8test2.c: 231: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2947  00FC82  0E50               	movlw	80
  2948  00FC84  6E29               	movwf	drawtext@y,c
  2949  00FC86  C06C  F02A         	movff	_txt,drawtext@_text
  2950  00FC8A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2951  00FC8E  0E00               	movlw	0
  2952  00FC90  6E2D               	movwf	drawtext@color+1,c
  2953  00FC92  0E1F               	movlw	31
  2954  00FC94  6E2C               	movwf	drawtext@color,c
  2955  00FC96  0E00               	movlw	0
  2956  00FC98  6E2F               	movwf	drawtext@bg+1,c
  2957  00FC9A  0E00               	movlw	0
  2958  00FC9C  6E2E               	movwf	drawtext@bg,c
  2959  00FC9E  0E01               	movlw	1
  2960  00FCA0  6E30               	movwf	drawtext@size,c
  2961  00FCA2  0E03               	movlw	3
  2962  00FCA4  EC01  F074         	call	_drawtext
  2963                           
  2964                           ;Lab8test2.c: 232: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2965  00FCA8  0E5A               	movlw	90
  2966  00FCAA  6E29               	movwf	drawtext@y,c
  2967  00FCAC  0E52               	movlw	low _PED_NS_Count
  2968  00FCAE  6E2A               	movwf	drawtext@_text,c
  2969  00FCB0  0E00               	movlw	high _PED_NS_Count
  2970  00FCB2  6E2B               	movwf	drawtext@_text+1,c
  2971  00FCB4  0E00               	movlw	0
  2972  00FCB6  6E2D               	movwf	drawtext@color+1,c
  2973  00FCB8  0E1F               	movlw	31
  2974  00FCBA  6E2C               	movwf	drawtext@color,c
  2975  00FCBC  0E00               	movlw	0
  2976  00FCBE  6E2F               	movwf	drawtext@bg+1,c
  2977  00FCC0  0E00               	movlw	0
  2978  00FCC2  6E2E               	movwf	drawtext@bg,c
  2979  00FCC4  0E02               	movlw	2
  2980  00FCC6  6E30               	movwf	drawtext@size,c
  2981  00FCC8  0E02               	movlw	2
  2982  00FCCA  EC01  F074         	call	_drawtext
  2983                           
  2984                           ;Lab8test2.c: 235: strcpy(txt, "EWP EWLT NSP NSLT MD");
  2985  00FCCE  C06C  F001         	movff	_txt,strcpy@to
  2986  00FCD2  C06D  F002         	movff	_txt+1,strcpy@to+1
  2987  00FCD6  0E98               	movlw	low STR_12
  2988  00FCD8  6E03               	movwf	strcpy@from,c
  2989  00FCDA  0EFF               	movlw	high STR_12
  2990  00FCDC  6E04               	movwf	strcpy@from+1,c
  2991  00FCDE  EC9C  F06D         	call	_strcpy	;wreg free
  2992                           
  2993                           ;Lab8test2.c: 236: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2994  00FCE2  0E8C               	movlw	140
  2995  00FCE4  6E29               	movwf	drawtext@y,c
  2996  00FCE6  C06C  F02A         	movff	_txt,drawtext@_text
  2997  00FCEA  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2998  00FCEE  0EFF               	movlw	255
  2999  00FCF0  6E2D               	movwf	drawtext@color+1,c
  3000  00FCF2  682C               	setf	drawtext@color,c
  3001  00FCF4  0E00               	movlw	0
  3002  00FCF6  6E2F               	movwf	drawtext@bg+1,c
  3003  00FCF8  0E00               	movlw	0
  3004  00FCFA  6E2E               	movwf	drawtext@bg,c
  3005  00FCFC  0E01               	movlw	1
  3006  00FCFE  6E30               	movwf	drawtext@size,c
  3007  00FD00  0E01               	movlw	1
  3008  00FD02  EC01  F074         	call	_drawtext
  3009                           
  3010                           ;Lab8test2.c: 237: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3011  00FD06  0E95               	movlw	149
  3012  00FD08  6E29               	movwf	drawtext@y,c
  3013  00FD0A  0E5D               	movlw	low _SW_EWPED_Txt
  3014  00FD0C  6E2A               	movwf	drawtext@_text,c
  3015  00FD0E  0E00               	movlw	high _SW_EWPED_Txt
  3016  00FD10  6E2B               	movwf	drawtext@_text+1,c
  3017  00FD12  0EFF               	movlw	255
  3018  00FD14  6E2D               	movwf	drawtext@color+1,c
  3019  00FD16  682C               	setf	drawtext@color,c
  3020  00FD18  0E00               	movlw	0
  3021  00FD1A  6E2F               	movwf	drawtext@bg+1,c
  3022  00FD1C  0E00               	movlw	0
  3023  00FD1E  6E2E               	movwf	drawtext@bg,c
  3024  00FD20  0E01               	movlw	1
  3025  00FD22  6E30               	movwf	drawtext@size,c
  3026  00FD24  0E06               	movlw	6
  3027  00FD26  EC01  F074         	call	_drawtext
  3028                           
  3029                           ;Lab8test2.c: 238: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3030  00FD2A  0E95               	movlw	149
  3031  00FD2C  6E29               	movwf	drawtext@y,c
  3032  00FD2E  0E5B               	movlw	low _SW_EWLT_Txt
  3033  00FD30  6E2A               	movwf	drawtext@_text,c
  3034  00FD32  0E00               	movlw	high _SW_EWLT_Txt
  3035  00FD34  6E2B               	movwf	drawtext@_text+1,c
  3036  00FD36  0EFF               	movlw	255
  3037  00FD38  6E2D               	movwf	drawtext@color+1,c
  3038  00FD3A  682C               	setf	drawtext@color,c
  3039  00FD3C  0E00               	movlw	0
  3040  00FD3E  6E2F               	movwf	drawtext@bg+1,c
  3041  00FD40  0E00               	movlw	0
  3042  00FD42  6E2E               	movwf	drawtext@bg,c
  3043  00FD44  0E01               	movlw	1
  3044  00FD46  6E30               	movwf	drawtext@size,c
  3045  00FD48  0E20               	movlw	32
  3046  00FD4A  EC01  F074         	call	_drawtext
  3047                           
  3048                           ;Lab8test2.c: 239: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3049  00FD4E  0E95               	movlw	149
  3050  00FD50  6E29               	movwf	drawtext@y,c
  3051  00FD52  0E63               	movlw	low _SW_NSPED_Txt
  3052  00FD54  6E2A               	movwf	drawtext@_text,c
  3053  00FD56  0E00               	movlw	high _SW_NSPED_Txt
  3054  00FD58  6E2B               	movwf	drawtext@_text+1,c
  3055  00FD5A  0EFF               	movlw	255
  3056  00FD5C  6E2D               	movwf	drawtext@color+1,c
  3057  00FD5E  682C               	setf	drawtext@color,c
  3058  00FD60  0E00               	movlw	0
  3059  00FD62  6E2F               	movwf	drawtext@bg+1,c
  3060  00FD64  0E00               	movlw	0
  3061  00FD66  6E2E               	movwf	drawtext@bg,c
  3062  00FD68  0E01               	movlw	1
  3063  00FD6A  6E30               	movwf	drawtext@size,c
  3064  00FD6C  0E3A               	movlw	58
  3065  00FD6E  EC01  F074         	call	_drawtext
  3066                           
  3067                           ;Lab8test2.c: 240: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3068  00FD72  0E95               	movlw	149
  3069  00FD74  6E29               	movwf	drawtext@y,c
  3070  00FD76  0E61               	movlw	low _SW_NSLT_Txt
  3071  00FD78  6E2A               	movwf	drawtext@_text,c
  3072  00FD7A  0E00               	movlw	high _SW_NSLT_Txt
  3073  00FD7C  6E2B               	movwf	drawtext@_text+1,c
  3074  00FD7E  0EFF               	movlw	255
  3075  00FD80  6E2D               	movwf	drawtext@color+1,c
  3076  00FD82  682C               	setf	drawtext@color,c
  3077  00FD84  0E00               	movlw	0
  3078  00FD86  6E2F               	movwf	drawtext@bg+1,c
  3079  00FD88  0E00               	movlw	0
  3080  00FD8A  6E2E               	movwf	drawtext@bg,c
  3081  00FD8C  0E01               	movlw	1
  3082  00FD8E  6E30               	movwf	drawtext@size,c
  3083  00FD90  0E57               	movlw	87
  3084  00FD92  EC01  F074         	call	_drawtext
  3085                           
  3086                           ;Lab8test2.c: 242: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3087  00FD96  0E95               	movlw	149
  3088  00FD98  6E29               	movwf	drawtext@y,c
  3089  00FD9A  0E5F               	movlw	low _SW_MODE_Txt
  3090  00FD9C  6E2A               	movwf	drawtext@_text,c
  3091  00FD9E  0E00               	movlw	high _SW_MODE_Txt
  3092  00FDA0  6E2B               	movwf	drawtext@_text+1,c
  3093  00FDA2  0EFF               	movlw	255
  3094  00FDA4  6E2D               	movwf	drawtext@color+1,c
  3095  00FDA6  682C               	setf	drawtext@color,c
  3096  00FDA8  0E00               	movlw	0
  3097  00FDAA  6E2F               	movwf	drawtext@bg+1,c
  3098  00FDAC  0E00               	movlw	0
  3099  00FDAE  6E2E               	movwf	drawtext@bg,c
  3100  00FDB0  0E01               	movlw	1
  3101  00FDB2  6E30               	movwf	drawtext@size,c
  3102  00FDB4  0E70               	movlw	112
  3103  00FDB6  EC01  F074         	call	_drawtext
  3104  00FDBA  0012               	return		;funcret
  3105  00FDBC                     __end_of_Initialize_Screen:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           intcon2	equ	0xFF1
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _fillScreen *****************
  3119 ;; Defined at:
  3120 ;;		line 656 in file "ST7735_TFT.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  color           2   19[COMRAM] unsigned int 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;		None               void
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;Total ram usage:        2 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    4
  3141 ;; This function calls:
  3142 ;;		_fillRectangle
  3143 ;; This function is called by:
  3144 ;;		_Initialize_Screen
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text6
  3149  00D9FA                     __ptext6:
  3150                           	opt stack 0
  3151  00D9FA                     _fillScreen:
  3152                           	opt stack 25
  3153                           
  3154                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  3155                           
  3156                           ;incstack = 0
  3157  00D9FA  0E00               	movlw	0
  3158  00D9FC  6E08               	movwf	fillRectangle@y,c
  3159  00D9FE  0E80               	movlw	128
  3160  00DA00  6E09               	movwf	fillRectangle@w,c
  3161  00DA02  0EA0               	movlw	160
  3162  00DA04  6E0A               	movwf	fillRectangle@h,c
  3163  00DA06  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3164  00DA0A  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3165  00DA0E  0E00               	movlw	0
  3166  00DA10  EC93  F073         	call	_fillRectangle
  3167  00DA14  0012               	return		;funcret
  3168  00DA16                     __end_of_fillScreen:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           intcon2	equ	0xFF1
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           postdec1	equ	0xFE5
  3178                           fsr1l	equ	0xFE1
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _fillRectangle *****************
  3182 ;; Defined at:
  3183 ;;		line 540 in file "ST7735_TFT.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  x               1    wreg     unsigned char 
  3186 ;;  y               1    7[COMRAM] unsigned char 
  3187 ;;  w               1    8[COMRAM] unsigned char 
  3188 ;;  h               1    9[COMRAM] unsigned char 
  3189 ;;  color           2   10[COMRAM] unsigned int 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  x               1   18[COMRAM] unsigned char 
  3192 ;;  lo              1   17[COMRAM] unsigned char 
  3193 ;;  hi              1   16[COMRAM] unsigned char 
  3194 ;; Return value:  Size  Location     Type
  3195 ;;		None               void
  3196 ;; Registers used:
  3197 ;;		wreg, status,2, status,0, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3203 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;Total ram usage:       12 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    3
  3210 ;; This function calls:
  3211 ;;		_setAddrWindow
  3212 ;;		_spiwrite
  3213 ;; This function is called by:
  3214 ;;		_fillScreen
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text7
  3219  00E726                     __ptext7:
  3220                           	opt stack 0
  3221  00E726                     _fillRectangle:
  3222                           	opt stack 25
  3223                           
  3224                           ;incstack = 0
  3225                           ;fillRectangle@x stored from wreg
  3226  00E726  6E13               	movwf	fillRectangle@x,c
  3227                           
  3228                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  3229                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  3230  00E728  0E80               	movlw	128
  3231  00E72A  6013               	cpfslt	fillRectangle@x,c
  3232  00E72C  D069               	goto	l230
  3233  00E72E  0E9F               	movlw	159
  3234  00E730  6408               	cpfsgt	fillRectangle@y,c
  3235  00E732  D001               	goto	l3218
  3236                           
  3237                           ;ST7735_TFT.c: 544: return;
  3238  00E734  D065               	goto	l230
  3239  00E736                     l3218:
  3240                           
  3241                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  3242  00E736  0EFF               	movlw	255
  3243  00E738  6E0D               	movwf	??_fillRectangle& (0+255),c
  3244  00E73A  0EFF               	movlw	255
  3245  00E73C  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3246  00E73E  5009               	movf	fillRectangle@w,w,c
  3247  00E740  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3248  00E744  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3249  00E746  260F               	addwf	??_fillRectangle+2,f,c
  3250  00E748  0E00               	movlw	0
  3251  00E74A  2210               	addwfc	??_fillRectangle+3,f,c
  3252  00E74C  500D               	movf	??_fillRectangle,w,c
  3253  00E74E  260F               	addwf	??_fillRectangle+2,f,c
  3254  00E750  500E               	movf	??_fillRectangle+1,w,c
  3255  00E752  2210               	addwfc	??_fillRectangle+3,f,c
  3256  00E754  BE10               	btfsc	??_fillRectangle+3,7,c
  3257  00E756  D00A               	goto	l231
  3258  00E758  5010               	movf	??_fillRectangle+3,w,c
  3259  00E75A  E104               	bnz	u2090
  3260  00E75C  0E80               	movlw	128
  3261  00E75E  5C0F               	subwf	??_fillRectangle+2,w,c
  3262  00E760  A0D8               	btfss	status,0,c
  3263  00E762  D004               	goto	l231
  3264  00E764                     u2090:
  3265                           
  3266                           ;ST7735_TFT.c: 546: w = 128 - x;
  3267  00E764  5013               	movf	fillRectangle@x,w,c
  3268  00E766  0800               	sublw	0
  3269  00E768  0F80               	addlw	128
  3270  00E76A  6E09               	movwf	fillRectangle@w,c
  3271  00E76C                     l231:
  3272                           
  3273                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  3274  00E76C  0EFF               	movlw	255
  3275  00E76E  6E0D               	movwf	??_fillRectangle& (0+255),c
  3276  00E770  0EFF               	movlw	255
  3277  00E772  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3278  00E774  500A               	movf	fillRectangle@h,w,c
  3279  00E776  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3280  00E77A  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3281  00E77C  260F               	addwf	??_fillRectangle+2,f,c
  3282  00E77E  0E00               	movlw	0
  3283  00E780  2210               	addwfc	??_fillRectangle+3,f,c
  3284  00E782  500D               	movf	??_fillRectangle,w,c
  3285  00E784  260F               	addwf	??_fillRectangle+2,f,c
  3286  00E786  500E               	movf	??_fillRectangle+1,w,c
  3287  00E788  2210               	addwfc	??_fillRectangle+3,f,c
  3288  00E78A  BE10               	btfsc	??_fillRectangle+3,7,c
  3289  00E78C  D00B               	goto	l3224
  3290  00E78E  5010               	movf	??_fillRectangle+3,w,c
  3291  00E790  E104               	bnz	u2100
  3292  00E792  0EA0               	movlw	160
  3293  00E794  5C0F               	subwf	??_fillRectangle+2,w,c
  3294  00E796  A0D8               	btfss	status,0,c
  3295  00E798  D005               	goto	l3224
  3296  00E79A                     u2100:
  3297                           
  3298                           ;ST7735_TFT.c: 548: h = 160 - y;
  3299  00E79A  5008               	movf	fillRectangle@y,w,c
  3300  00E79C  0800               	sublw	0
  3301  00E79E  0FA0               	addlw	160
  3302  00E7A0  6E0A               	movwf	fillRectangle@h,c
  3303  00E7A2  D000               	goto	l3224
  3304  00E7A4                     l3224:
  3305                           
  3306                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  3307  00E7A4  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3308  00E7A8  5013               	movf	fillRectangle@x,w,c
  3309  00E7AA  2409               	addwf	fillRectangle@w,w,c
  3310  00E7AC  6E0D               	movwf	??_fillRectangle& (0+255),c
  3311  00E7AE  040D               	decf	??_fillRectangle,w,c
  3312  00E7B0  6E05               	movwf	setAddrWindow@x1,c
  3313  00E7B2  5008               	movf	fillRectangle@y,w,c
  3314  00E7B4  240A               	addwf	fillRectangle@h,w,c
  3315  00E7B6  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3316  00E7B8  040E               	decf	??_fillRectangle+1,w,c
  3317  00E7BA  6E06               	movwf	setAddrWindow@y1,c
  3318  00E7BC  5013               	movf	fillRectangle@x,w,c
  3319  00E7BE  ECC8  F06E         	call	_setAddrWindow
  3320                           
  3321                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  3322  00E7C2  500C               	movf	fillRectangle@color+1,w,c
  3323  00E7C4  6E11               	movwf	fillRectangle@hi,c
  3324  00E7C6  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3325                           
  3326                           ;ST7735_TFT.c: 551: PORTCbits.RC2 = 1;
  3327  00E7CA  8482               	bsf	3970,2,c	;volatile
  3328                           
  3329                           ;ST7735_TFT.c: 552: PORTCbits.RC4 = 0;
  3330  00E7CC  9882               	bcf	3970,4,c	;volatile
  3331                           
  3332                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  3333  00E7CE  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3334  00E7D2                     l3236:
  3335  00E7D2  5008               	movf	fillRectangle@y,w,c
  3336  00E7D4  B4D8               	btfsc	status,2,c
  3337  00E7D6  D013               	goto	l234
  3338  00E7D8  D001               	goto	l233
  3339  00E7DA  D011               	goto	l234
  3340  00E7DC                     l233:
  3341                           
  3342                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  3343  00E7DC  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3344  00E7E0                     l3240:
  3345  00E7E0  5013               	movf	fillRectangle@x,w,c
  3346  00E7E2  B4D8               	btfsc	status,2,c
  3347  00E7E4  D00A               	goto	l3250
  3348  00E7E6  D001               	goto	l3244
  3349  00E7E8  D008               	goto	l3250
  3350  00E7EA                     l3244:
  3351                           
  3352                           ;ST7735_TFT.c: 556: spiwrite(hi);
  3353  00E7EA  5011               	movf	fillRectangle@hi,w,c
  3354  00E7EC  ECC6  F06C         	call	_spiwrite
  3355                           
  3356                           ;ST7735_TFT.c: 557: spiwrite(lo);
  3357  00E7F0  5012               	movf	fillRectangle@lo,w,c
  3358  00E7F2  ECC6  F06C         	call	_spiwrite
  3359  00E7F6  0613               	decf	fillRectangle@x,f,c
  3360  00E7F8  D7F3               	goto	l3240
  3361  00E7FA                     l3250:
  3362  00E7FA  0608               	decf	fillRectangle@y,f,c
  3363  00E7FC  D7EA               	goto	l3236
  3364  00E7FE                     l234:
  3365                           
  3366                           ;ST7735_TFT.c: 558: }
  3367                           ;ST7735_TFT.c: 559: }
  3368                           ;ST7735_TFT.c: 560: PORTCbits.RC4 = 1;
  3369  00E7FE  8882               	bsf	3970,4,c	;volatile
  3370  00E800                     l230:
  3371  00E800  0012               	return		;funcret
  3372  00E802                     __end_of_fillRectangle:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           intcon2	equ	0xFF1
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           postdec1	equ	0xFE5
  3382                           fsr1l	equ	0xFE1
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _drawRect *****************
  3386 ;; Defined at:
  3387 ;;		line 722 in file "ST7735_TFT.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  x               2   18[COMRAM] unsigned int 
  3390 ;;  y               2   20[COMRAM] unsigned int 
  3391 ;;  w               2   22[COMRAM] unsigned int 
  3392 ;;  h               2   24[COMRAM] unsigned int 
  3393 ;;  color           2   26[COMRAM] unsigned int 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:       11 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    4
  3412 ;; This function calls:
  3413 ;;		_drawFastHLine
  3414 ;;		_drawFastVLine
  3415 ;; This function is called by:
  3416 ;;		_Initialize_Screen
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text8
  3421  00DEE4                     __ptext8:
  3422                           	opt stack 0
  3423  00DEE4                     _drawRect:
  3424                           	opt stack 25
  3425                           
  3426                           ;ST7735_TFT.c: 724: drawFastHLine(x, y, w, color);
  3427                           
  3428                           ;incstack = 0
  3429  00DEE4  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3430  00DEE8  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3431  00DEEC  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3432  00DEF0  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3433  00DEF4  5013               	movf	drawRect@x,w,c
  3434  00DEF6  ECA3  F070         	call	_drawFastHLine
  3435                           
  3436                           ;ST7735_TFT.c: 725: drawFastHLine(x, y + h - 1, w, color);
  3437  00DEFA  5015               	movf	drawRect@y,w,c
  3438  00DEFC  2419               	addwf	drawRect@h,w,c
  3439  00DEFE  6E1D               	movwf	??_drawRect& (0+255),c
  3440  00DF00  041D               	decf	??_drawRect,w,c
  3441  00DF02  6E08               	movwf	drawFastHLine@y,c
  3442  00DF04  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3443  00DF08  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3444  00DF0C  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3445  00DF10  5013               	movf	drawRect@x,w,c
  3446  00DF12  ECA3  F070         	call	_drawFastHLine
  3447                           
  3448                           ;ST7735_TFT.c: 726: drawFastVLine(x, y, h, color);
  3449  00DF16  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3450  00DF1A  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3451  00DF1E  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3452  00DF22  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3453  00DF26  5013               	movf	drawRect@x,w,c
  3454  00DF28  EC5F  F070         	call	_drawFastVLine
  3455                           
  3456                           ;ST7735_TFT.c: 727: drawFastVLine(x + w - 1, y, h, color);
  3457  00DF2C  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3458  00DF30  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3459  00DF34  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3460  00DF38  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3461  00DF3C  5013               	movf	drawRect@x,w,c
  3462  00DF3E  2417               	addwf	drawRect@w,w,c
  3463  00DF40  6E1D               	movwf	??_drawRect& (0+255),c
  3464  00DF42  041D               	decf	??_drawRect,w,c
  3465  00DF44  EC5F  F070         	call	_drawFastVLine
  3466  00DF48  0012               	return		;funcret
  3467  00DF4A                     __end_of_drawRect:
  3468                           	opt stack 0
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           intcon2	equ	0xFF1
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           fsr1l	equ	0xFE1
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _drawFastHLine *****************
  3481 ;; Defined at:
  3482 ;;		line 661 in file "ST7735_TFT.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  x               1    wreg     unsigned char 
  3485 ;;  y               1    7[COMRAM] unsigned char 
  3486 ;;  w               1    8[COMRAM] unsigned char 
  3487 ;;  color           2    9[COMRAM] unsigned int 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  x               1   17[COMRAM] unsigned char 
  3490 ;;  lo              1   16[COMRAM] unsigned char 
  3491 ;;  hi              1   15[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:       11 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    3
  3508 ;; This function calls:
  3509 ;;		_setAddrWindow
  3510 ;;		_spiwrite
  3511 ;; This function is called by:
  3512 ;;		_drawRect
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text9
  3517  00E146                     __ptext9:
  3518                           	opt stack 0
  3519  00E146                     _drawFastHLine:
  3520                           	opt stack 25
  3521                           
  3522                           ;incstack = 0
  3523                           ;drawFastHLine@x stored from wreg
  3524  00E146  6E12               	movwf	drawFastHLine@x,c
  3525                           
  3526                           ;ST7735_TFT.c: 663: unsigned char hi, lo;
  3527                           ;ST7735_TFT.c: 664: if((x >= 128) || (y >= 160))
  3528  00E148  0E80               	movlw	128
  3529  00E14A  6012               	cpfslt	drawFastHLine@x,c
  3530  00E14C  D03F               	goto	l275
  3531  00E14E  0E9F               	movlw	159
  3532  00E150  6408               	cpfsgt	drawFastHLine@y,c
  3533  00E152  D001               	goto	l3258
  3534                           
  3535                           ;ST7735_TFT.c: 665: return;
  3536  00E154  D03B               	goto	l275
  3537  00E156                     l3258:
  3538                           
  3539                           ;ST7735_TFT.c: 666: if((x + w - 1) >= 128)
  3540  00E156  0EFF               	movlw	255
  3541  00E158  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3542  00E15A  0EFF               	movlw	255
  3543  00E15C  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3544  00E15E  5009               	movf	drawFastHLine@w,w,c
  3545  00E160  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3546  00E164  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3547  00E166  260E               	addwf	??_drawFastHLine+2,f,c
  3548  00E168  0E00               	movlw	0
  3549  00E16A  220F               	addwfc	??_drawFastHLine+3,f,c
  3550  00E16C  500C               	movf	??_drawFastHLine,w,c
  3551  00E16E  260E               	addwf	??_drawFastHLine+2,f,c
  3552  00E170  500D               	movf	??_drawFastHLine+1,w,c
  3553  00E172  220F               	addwfc	??_drawFastHLine+3,f,c
  3554  00E174  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3555  00E176  D00B               	goto	l3262
  3556  00E178  500F               	movf	??_drawFastHLine+3,w,c
  3557  00E17A  E104               	bnz	u2170
  3558  00E17C  0E80               	movlw	128
  3559  00E17E  5C0E               	subwf	??_drawFastHLine+2,w,c
  3560  00E180  A0D8               	btfss	status,0,c
  3561  00E182  D005               	goto	l3262
  3562  00E184                     u2170:
  3563                           
  3564                           ;ST7735_TFT.c: 667: w = 128 - x;
  3565  00E184  5012               	movf	drawFastHLine@x,w,c
  3566  00E186  0800               	sublw	0
  3567  00E188  0F80               	addlw	128
  3568  00E18A  6E09               	movwf	drawFastHLine@w,c
  3569  00E18C  D000               	goto	l3262
  3570  00E18E                     l3262:
  3571                           
  3572                           ;ST7735_TFT.c: 668: hi = color >> 8; lo = color;
  3573  00E18E  500B               	movf	drawFastHLine@color+1,w,c
  3574  00E190  6E10               	movwf	drawFastHLine@hi,c
  3575  00E192  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3576                           
  3577                           ;ST7735_TFT.c: 669: setAddrWindow(x, y, x + w - 1, y);
  3578  00E196  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3579  00E19A  5012               	movf	drawFastHLine@x,w,c
  3580  00E19C  2409               	addwf	drawFastHLine@w,w,c
  3581  00E19E  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3582  00E1A0  040C               	decf	??_drawFastHLine,w,c
  3583  00E1A2  6E05               	movwf	setAddrWindow@x1,c
  3584  00E1A4  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3585  00E1A8  5012               	movf	drawFastHLine@x,w,c
  3586  00E1AA  ECC8  F06E         	call	_setAddrWindow
  3587                           
  3588                           ;ST7735_TFT.c: 670: PORTCbits.RC2 = 1;
  3589  00E1AE  8482               	bsf	3970,2,c	;volatile
  3590                           
  3591                           ;ST7735_TFT.c: 671: PORTCbits.RC4 = 0;
  3592  00E1B0  9882               	bcf	3970,4,c	;volatile
  3593                           
  3594                           ;ST7735_TFT.c: 673: while (w--) {
  3595  00E1B2  D007               	goto	l3274
  3596  00E1B4                     l3272:
  3597                           
  3598                           ;ST7735_TFT.c: 674: spiwrite(hi);
  3599  00E1B4  5010               	movf	drawFastHLine@hi,w,c
  3600  00E1B6  ECC6  F06C         	call	_spiwrite
  3601                           
  3602                           ;ST7735_TFT.c: 675: spiwrite(lo);
  3603  00E1BA  5011               	movf	drawFastHLine@lo,w,c
  3604  00E1BC  ECC6  F06C         	call	_spiwrite
  3605  00E1C0  D000               	goto	l3274
  3606  00E1C2                     l3274:
  3607  00E1C2  0609               	decf	drawFastHLine@w,f,c
  3608  00E1C4  2809               	incf	drawFastHLine@w,w,c
  3609  00E1C6  A4D8               	btfss	status,2,c
  3610  00E1C8  D7F5               	goto	l3272
  3611                           
  3612                           ;ST7735_TFT.c: 676: }
  3613                           ;ST7735_TFT.c: 677: PORTCbits.RC4 = 1;
  3614  00E1CA  8882               	bsf	3970,4,c	;volatile
  3615  00E1CC                     l275:
  3616  00E1CC  0012               	return		;funcret
  3617  00E1CE                     __end_of_drawFastHLine:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           intcon2	equ	0xFF1
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           postdec1	equ	0xFE5
  3627                           fsr1l	equ	0xFE1
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _TFT_GreenTab_Initialize *****************
  3631 ;; Defined at:
  3632 ;;		line 681 in file "ST7735_TFT.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		_Rcmd1
  3655 ;;		_Rcmd2red
  3656 ;;		_Rcmd3
  3657 ;;		_write_command
  3658 ;;		_write_data
  3659 ;; This function is called by:
  3660 ;;		_Initialize_Screen
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text10
  3665  00DAB0                     __ptext10:
  3666                           	opt stack 0
  3667  00DAB0                     _TFT_GreenTab_Initialize:
  3668                           	opt stack 26
  3669                           
  3670                           ;ST7735_TFT.c: 683: PORTCbits.RC4 = 1;
  3671                           
  3672                           ;incstack = 0
  3673  00DAB0  8882               	bsf	3970,4,c	;volatile
  3674                           
  3675                           ;ST7735_TFT.c: 684: PORTCbits.RC2 = 0;
  3676  00DAB2  9482               	bcf	3970,2,c	;volatile
  3677                           
  3678                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  3679  00DAB4  0E80               	movlw	128
  3680  00DAB6  6EC7               	movwf	4039,c	;volatile
  3681                           
  3682                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  3683  00DAB8  0E30               	movlw	48
  3684  00DABA  6EC6               	movwf	4038,c	;volatile
  3685                           
  3686                           ;ST7735_TFT.c: 690: Rcmd1();
  3687  00DABC  EC5A  F075         	call	_Rcmd1	;wreg free
  3688                           
  3689                           ;ST7735_TFT.c: 691: Rcmd2red();
  3690  00DAC0  EC62  F06E         	call	_Rcmd2red	;wreg free
  3691                           
  3692                           ;ST7735_TFT.c: 692: Rcmd3();
  3693  00DAC4  ECE1  F074         	call	_Rcmd3	;wreg free
  3694                           
  3695                           ;ST7735_TFT.c: 693: write_command(0x36);
  3696  00DAC8  0E36               	movlw	54
  3697  00DACA  ECA4  F06C         	call	_write_command
  3698                           
  3699                           ;ST7735_TFT.c: 694: write_data(0xC0);
  3700  00DACE  0EC0               	movlw	192
  3701  00DAD0  ECAC  F06C         	call	_write_data
  3702                           
  3703                           ;ST7735_TFT.c: 695: _tft_type = 1;
  3704  00DAD4  0E01               	movlw	1
  3705  00DAD6  6E75               	movwf	__tft_type,c
  3706  00DAD8  0012               	return		;funcret
  3707  00DADA                     __end_of_TFT_GreenTab_Initialize:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           intcon2	equ	0xFF1
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _Rcmd3 *****************
  3721 ;; Defined at:
  3722 ;;		line 375 in file "ST7735_TFT.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;		None               void
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    2
  3743 ;; This function calls:
  3744 ;;		_delay_ms
  3745 ;;		_write_command
  3746 ;;		_write_data
  3747 ;; This function is called by:
  3748 ;;		_TFT_GreenTab_Initialize
  3749 ;;		_TFT_BlackTab_Initialize
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text11
  3754  00E9C2                     __ptext11:
  3755                           	opt stack 0
  3756  00E9C2                     _Rcmd3:
  3757                           	opt stack 26
  3758                           
  3759                           ;ST7735_TFT.c: 377: write_command(0xE0);
  3760                           
  3761                           ;incstack = 0
  3762  00E9C2  0EE0               	movlw	224
  3763  00E9C4  ECA4  F06C         	call	_write_command
  3764                           
  3765                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3766  00E9C8  0E02               	movlw	2
  3767  00E9CA  ECAC  F06C         	call	_write_data
  3768  00E9CE  0E1C               	movlw	28
  3769  00E9D0  ECAC  F06C         	call	_write_data
  3770  00E9D4  0E07               	movlw	7
  3771  00E9D6  ECAC  F06C         	call	_write_data
  3772  00E9DA  0E12               	movlw	18
  3773  00E9DC  ECAC  F06C         	call	_write_data
  3774                           
  3775                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3776  00E9E0  0E37               	movlw	55
  3777  00E9E2  ECAC  F06C         	call	_write_data
  3778  00E9E6  0E32               	movlw	50
  3779  00E9E8  ECAC  F06C         	call	_write_data
  3780  00E9EC  0E29               	movlw	41
  3781  00E9EE  ECAC  F06C         	call	_write_data
  3782  00E9F2  0E2D               	movlw	45
  3783  00E9F4  ECAC  F06C         	call	_write_data
  3784                           
  3785                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3786  00E9F8  0E29               	movlw	41
  3787  00E9FA  ECAC  F06C         	call	_write_data
  3788  00E9FE  0E25               	movlw	37
  3789  00EA00  ECAC  F06C         	call	_write_data
  3790  00EA04  0E2B               	movlw	43
  3791  00EA06  ECAC  F06C         	call	_write_data
  3792  00EA0A  0E39               	movlw	57
  3793  00EA0C  ECAC  F06C         	call	_write_data
  3794                           
  3795                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3796  00EA10  0E00               	movlw	0
  3797  00EA12  ECAC  F06C         	call	_write_data
  3798  00EA16  0E01               	movlw	1
  3799  00EA18  ECAC  F06C         	call	_write_data
  3800  00EA1C  0E03               	movlw	3
  3801  00EA1E  ECAC  F06C         	call	_write_data
  3802  00EA22  0E10               	movlw	16
  3803  00EA24  ECAC  F06C         	call	_write_data
  3804                           
  3805                           ;ST7735_TFT.c: 382: write_command(0xE1);
  3806  00EA28  0EE1               	movlw	225
  3807  00EA2A  ECA4  F06C         	call	_write_command
  3808                           
  3809                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3810  00EA2E  0E03               	movlw	3
  3811  00EA30  ECAC  F06C         	call	_write_data
  3812  00EA34  0E1D               	movlw	29
  3813  00EA36  ECAC  F06C         	call	_write_data
  3814  00EA3A  0E07               	movlw	7
  3815  00EA3C  ECAC  F06C         	call	_write_data
  3816  00EA40  0E06               	movlw	6
  3817  00EA42  ECAC  F06C         	call	_write_data
  3818                           
  3819                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3820  00EA46  0E2E               	movlw	46
  3821  00EA48  ECAC  F06C         	call	_write_data
  3822  00EA4C  0E2C               	movlw	44
  3823  00EA4E  ECAC  F06C         	call	_write_data
  3824  00EA52  0E29               	movlw	41
  3825  00EA54  ECAC  F06C         	call	_write_data
  3826  00EA58  0E2D               	movlw	45
  3827  00EA5A  ECAC  F06C         	call	_write_data
  3828                           
  3829                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3830  00EA5E  0E2E               	movlw	46
  3831  00EA60  ECAC  F06C         	call	_write_data
  3832  00EA64  0E2E               	movlw	46
  3833  00EA66  ECAC  F06C         	call	_write_data
  3834  00EA6A  0E37               	movlw	55
  3835  00EA6C  ECAC  F06C         	call	_write_data
  3836  00EA70  0E3F               	movlw	63
  3837  00EA72  ECAC  F06C         	call	_write_data
  3838                           
  3839                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3840  00EA76  0E00               	movlw	0
  3841  00EA78  ECAC  F06C         	call	_write_data
  3842  00EA7C  0E00               	movlw	0
  3843  00EA7E  ECAC  F06C         	call	_write_data
  3844  00EA82  0E02               	movlw	2
  3845  00EA84  ECAC  F06C         	call	_write_data
  3846  00EA88  0E10               	movlw	16
  3847  00EA8A  ECAC  F06C         	call	_write_data
  3848                           
  3849                           ;ST7735_TFT.c: 387: write_command(0x13);
  3850  00EA8E  0E13               	movlw	19
  3851  00EA90  ECA4  F06C         	call	_write_command
  3852                           
  3853                           ;ST7735_TFT.c: 388: delay_ms(10);
  3854  00EA94  0E00               	movlw	0
  3855  00EA96  6E08               	movwf	delay_ms@ms+1,c
  3856  00EA98  0E0A               	movlw	10
  3857  00EA9A  6E07               	movwf	delay_ms@ms,c
  3858  00EA9C  EC18  F06F         	call	_delay_ms	;wreg free
  3859                           
  3860                           ;ST7735_TFT.c: 389: write_command(0x29);
  3861  00EAA0  0E29               	movlw	41
  3862  00EAA2  ECA4  F06C         	call	_write_command
  3863                           
  3864                           ;ST7735_TFT.c: 390: delay_ms(100);
  3865  00EAA6  0E00               	movlw	0
  3866  00EAA8  6E08               	movwf	delay_ms@ms+1,c
  3867  00EAAA  0E64               	movlw	100
  3868  00EAAC  6E07               	movwf	delay_ms@ms,c
  3869  00EAAE  EC18  F06F         	call	_delay_ms	;wreg free
  3870  00EAB2  0012               	return		;funcret
  3871  00EAB4                     __end_of_Rcmd3:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           intcon2	equ	0xFF1
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1l	equ	0xFE1
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _Rcmd2red *****************
  3885 ;; Defined at:
  3886 ;;		line 365 in file "ST7735_TFT.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    2
  3907 ;; This function calls:
  3908 ;;		_write_command
  3909 ;;		_write_data
  3910 ;; This function is called by:
  3911 ;;		_TFT_GreenTab_Initialize
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text12
  3916  00DCC4                     __ptext12:
  3917                           	opt stack 0
  3918  00DCC4                     _Rcmd2red:
  3919                           	opt stack 26
  3920                           
  3921                           ;ST7735_TFT.c: 367: write_command(0x2A);
  3922                           
  3923                           ;incstack = 0
  3924  00DCC4  0E2A               	movlw	42
  3925  00DCC6  ECA4  F06C         	call	_write_command
  3926                           
  3927                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  3928  00DCCA  0E00               	movlw	0
  3929  00DCCC  ECAC  F06C         	call	_write_data
  3930  00DCD0  0E00               	movlw	0
  3931  00DCD2  ECAC  F06C         	call	_write_data
  3932                           
  3933                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  3934  00DCD6  0E00               	movlw	0
  3935  00DCD8  ECAC  F06C         	call	_write_data
  3936  00DCDC  0E7F               	movlw	127
  3937  00DCDE  ECAC  F06C         	call	_write_data
  3938                           
  3939                           ;ST7735_TFT.c: 370: write_command(0x2B);
  3940  00DCE2  0E2B               	movlw	43
  3941  00DCE4  ECA4  F06C         	call	_write_command
  3942                           
  3943                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  3944  00DCE8  0E00               	movlw	0
  3945  00DCEA  ECAC  F06C         	call	_write_data
  3946  00DCEE  0E00               	movlw	0
  3947  00DCF0  ECAC  F06C         	call	_write_data
  3948                           
  3949                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  3950  00DCF4  0E00               	movlw	0
  3951  00DCF6  ECAC  F06C         	call	_write_data
  3952  00DCFA  0E9F               	movlw	159
  3953  00DCFC  ECAC  F06C         	call	_write_data
  3954  00DD00  0012               	return		;funcret
  3955  00DD02                     __end_of_Rcmd2red:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           intcon2	equ	0xFF1
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1l	equ	0xFE1
  3966                           status	equ	0xFD8
  3967                           
  3968 ;; *************** function _Rcmd1 *****************
  3969 ;; Defined at:
  3970 ;;		line 318 in file "ST7735_TFT.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;		None
  3975 ;; Return value:  Size  Location     Type
  3976 ;;		None               void
  3977 ;; Registers used:
  3978 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;Total ram usage:        0 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    2
  3991 ;; This function calls:
  3992 ;;		_delay_ms
  3993 ;;		_write_command
  3994 ;;		_write_data
  3995 ;; This function is called by:
  3996 ;;		_TFT_GreenTab_Initialize
  3997 ;;		_TFT_BlackTab_Initialize
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text13
  4002  00EAB4                     __ptext13:
  4003                           	opt stack 0
  4004  00EAB4                     _Rcmd1:
  4005                           	opt stack 26
  4006                           
  4007                           ;ST7735_TFT.c: 320: write_command(0x01);
  4008                           
  4009                           ;incstack = 0
  4010  00EAB4  0E01               	movlw	1
  4011  00EAB6  ECA4  F06C         	call	_write_command
  4012                           
  4013                           ;ST7735_TFT.c: 321: delay_ms(150);
  4014  00EABA  0E00               	movlw	0
  4015  00EABC  6E08               	movwf	delay_ms@ms+1,c
  4016  00EABE  0E96               	movlw	150
  4017  00EAC0  6E07               	movwf	delay_ms@ms,c
  4018  00EAC2  EC18  F06F         	call	_delay_ms	;wreg free
  4019                           
  4020                           ;ST7735_TFT.c: 322: write_command(0x11);
  4021  00EAC6  0E11               	movlw	17
  4022  00EAC8  ECA4  F06C         	call	_write_command
  4023                           
  4024                           ;ST7735_TFT.c: 323: delay_ms(500);
  4025  00EACC  0E01               	movlw	1
  4026  00EACE  6E08               	movwf	delay_ms@ms+1,c
  4027  00EAD0  0EF4               	movlw	244
  4028  00EAD2  6E07               	movwf	delay_ms@ms,c
  4029  00EAD4  EC18  F06F         	call	_delay_ms	;wreg free
  4030                           
  4031                           ;ST7735_TFT.c: 324: write_command(0xB1);
  4032  00EAD8  0EB1               	movlw	177
  4033  00EADA  ECA4  F06C         	call	_write_command
  4034                           
  4035                           ;ST7735_TFT.c: 325: write_data(0x01);
  4036  00EADE  0E01               	movlw	1
  4037  00EAE0  ECAC  F06C         	call	_write_data
  4038                           
  4039                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4040  00EAE4  0E2C               	movlw	44
  4041  00EAE6  ECAC  F06C         	call	_write_data
  4042                           
  4043                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4044  00EAEA  0E2D               	movlw	45
  4045  00EAEC  ECAC  F06C         	call	_write_data
  4046                           
  4047                           ;ST7735_TFT.c: 328: write_command(0xB2);
  4048  00EAF0  0EB2               	movlw	178
  4049  00EAF2  ECA4  F06C         	call	_write_command
  4050                           
  4051                           ;ST7735_TFT.c: 329: write_data(0x01);
  4052  00EAF6  0E01               	movlw	1
  4053  00EAF8  ECAC  F06C         	call	_write_data
  4054                           
  4055                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4056  00EAFC  0E2C               	movlw	44
  4057  00EAFE  ECAC  F06C         	call	_write_data
  4058                           
  4059                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4060  00EB02  0E2D               	movlw	45
  4061  00EB04  ECAC  F06C         	call	_write_data
  4062                           
  4063                           ;ST7735_TFT.c: 332: write_command(0xB3);
  4064  00EB08  0EB3               	movlw	179
  4065  00EB0A  ECA4  F06C         	call	_write_command
  4066                           
  4067                           ;ST7735_TFT.c: 333: write_data(0x01);
  4068  00EB0E  0E01               	movlw	1
  4069  00EB10  ECAC  F06C         	call	_write_data
  4070                           
  4071                           ;ST7735_TFT.c: 334: write_data(0x2C);
  4072  00EB14  0E2C               	movlw	44
  4073  00EB16  ECAC  F06C         	call	_write_data
  4074                           
  4075                           ;ST7735_TFT.c: 335: write_data(0x2D);
  4076  00EB1A  0E2D               	movlw	45
  4077  00EB1C  ECAC  F06C         	call	_write_data
  4078                           
  4079                           ;ST7735_TFT.c: 336: write_data(0x01);
  4080  00EB20  0E01               	movlw	1
  4081  00EB22  ECAC  F06C         	call	_write_data
  4082                           
  4083                           ;ST7735_TFT.c: 337: write_data(0x2C);
  4084  00EB26  0E2C               	movlw	44
  4085  00EB28  ECAC  F06C         	call	_write_data
  4086                           
  4087                           ;ST7735_TFT.c: 338: write_data(0x2D);
  4088  00EB2C  0E2D               	movlw	45
  4089  00EB2E  ECAC  F06C         	call	_write_data
  4090                           
  4091                           ;ST7735_TFT.c: 339: write_command(0xB4);
  4092  00EB32  0EB4               	movlw	180
  4093  00EB34  ECA4  F06C         	call	_write_command
  4094                           
  4095                           ;ST7735_TFT.c: 340: write_data(0x07);
  4096  00EB38  0E07               	movlw	7
  4097  00EB3A  ECAC  F06C         	call	_write_data
  4098                           
  4099                           ;ST7735_TFT.c: 341: write_command(0xC0);
  4100  00EB3E  0EC0               	movlw	192
  4101  00EB40  ECA4  F06C         	call	_write_command
  4102                           
  4103                           ;ST7735_TFT.c: 342: write_data(0xA2);
  4104  00EB44  0EA2               	movlw	162
  4105  00EB46  ECAC  F06C         	call	_write_data
  4106                           
  4107                           ;ST7735_TFT.c: 343: write_data(0x02);
  4108  00EB4A  0E02               	movlw	2
  4109  00EB4C  ECAC  F06C         	call	_write_data
  4110                           
  4111                           ;ST7735_TFT.c: 344: write_data(0x84);
  4112  00EB50  0E84               	movlw	132
  4113  00EB52  ECAC  F06C         	call	_write_data
  4114                           
  4115                           ;ST7735_TFT.c: 345: write_command(0xC1);
  4116  00EB56  0EC1               	movlw	193
  4117  00EB58  ECA4  F06C         	call	_write_command
  4118                           
  4119                           ;ST7735_TFT.c: 346: write_data(0xC5);
  4120  00EB5C  0EC5               	movlw	197
  4121  00EB5E  ECAC  F06C         	call	_write_data
  4122                           
  4123                           ;ST7735_TFT.c: 347: write_command(0xC2);
  4124  00EB62  0EC2               	movlw	194
  4125  00EB64  ECA4  F06C         	call	_write_command
  4126                           
  4127                           ;ST7735_TFT.c: 348: write_data(0x0A);
  4128  00EB68  0E0A               	movlw	10
  4129  00EB6A  ECAC  F06C         	call	_write_data
  4130                           
  4131                           ;ST7735_TFT.c: 349: write_data(0x00);
  4132  00EB6E  0E00               	movlw	0
  4133  00EB70  ECAC  F06C         	call	_write_data
  4134                           
  4135                           ;ST7735_TFT.c: 350: write_command(0xC3);
  4136  00EB74  0EC3               	movlw	195
  4137  00EB76  ECA4  F06C         	call	_write_command
  4138                           
  4139                           ;ST7735_TFT.c: 351: write_data(0x8A);
  4140  00EB7A  0E8A               	movlw	138
  4141  00EB7C  ECAC  F06C         	call	_write_data
  4142                           
  4143                           ;ST7735_TFT.c: 352: write_data(0x2A);
  4144  00EB80  0E2A               	movlw	42
  4145  00EB82  ECAC  F06C         	call	_write_data
  4146                           
  4147                           ;ST7735_TFT.c: 353: write_command(0xC4);
  4148  00EB86  0EC4               	movlw	196
  4149  00EB88  ECA4  F06C         	call	_write_command
  4150                           
  4151                           ;ST7735_TFT.c: 354: write_data(0x8A);
  4152  00EB8C  0E8A               	movlw	138
  4153  00EB8E  ECAC  F06C         	call	_write_data
  4154                           
  4155                           ;ST7735_TFT.c: 355: write_data(0xEE);
  4156  00EB92  0EEE               	movlw	238
  4157  00EB94  ECAC  F06C         	call	_write_data
  4158                           
  4159                           ;ST7735_TFT.c: 356: write_command(0xC5);
  4160  00EB98  0EC5               	movlw	197
  4161  00EB9A  ECA4  F06C         	call	_write_command
  4162                           
  4163                           ;ST7735_TFT.c: 357: write_data(0x0E);
  4164  00EB9E  0E0E               	movlw	14
  4165  00EBA0  ECAC  F06C         	call	_write_data
  4166                           
  4167                           ;ST7735_TFT.c: 358: write_command(0x20);
  4168  00EBA4  0E20               	movlw	32
  4169  00EBA6  ECA4  F06C         	call	_write_command
  4170                           
  4171                           ;ST7735_TFT.c: 359: write_command(0x36);
  4172  00EBAA  0E36               	movlw	54
  4173  00EBAC  ECA4  F06C         	call	_write_command
  4174                           
  4175                           ;ST7735_TFT.c: 360: write_data(0xC8);
  4176  00EBB0  0EC8               	movlw	200
  4177  00EBB2  ECAC  F06C         	call	_write_data
  4178                           
  4179                           ;ST7735_TFT.c: 361: write_command(0x3A);
  4180  00EBB6  0E3A               	movlw	58
  4181  00EBB8  ECA4  F06C         	call	_write_command
  4182                           
  4183                           ;ST7735_TFT.c: 362: write_data(0x05);
  4184  00EBBC  0E05               	movlw	5
  4185  00EBBE  ECAC  F06C         	call	_write_data
  4186  00EBC2  0012               	return		;funcret
  4187  00EBC4                     __end_of_Rcmd1:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           intcon2	equ	0xFF1
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           postdec1	equ	0xFE5
  4197                           fsr1l	equ	0xFE1
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _LCD_Reset *****************
  4201 ;; Defined at:
  4202 ;;		line 254 in file "ST7735_TFT.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    2
  4223 ;; This function calls:
  4224 ;;		_delay_ms
  4225 ;; This function is called by:
  4226 ;;		_Initialize_Screen
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text14
  4231  00D97A                     __ptext14:
  4232                           	opt stack 0
  4233  00D97A                     _LCD_Reset:
  4234                           	opt stack 27
  4235                           
  4236                           ;ST7735_TFT.c: 256: PORTCbits.RC1 = 0;
  4237                           
  4238                           ;incstack = 0
  4239  00D97A  9282               	bcf	3970,1,c	;volatile
  4240                           
  4241                           ;ST7735_TFT.c: 257: delay_ms(100);
  4242  00D97C  0E00               	movlw	0
  4243  00D97E  6E08               	movwf	delay_ms@ms+1,c
  4244  00D980  0E64               	movlw	100
  4245  00D982  6E07               	movwf	delay_ms@ms,c
  4246  00D984  EC18  F06F         	call	_delay_ms	;wreg free
  4247                           
  4248                           ;ST7735_TFT.c: 258: PORTCbits.RC1 = 1;
  4249  00D988  8282               	bsf	3970,1,c	;volatile
  4250  00D98A  0012               	return		;funcret
  4251  00D98C                     __end_of_LCD_Reset:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           intcon2	equ	0xFF1
  4258                           postinc0	equ	0xFEE
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1l	equ	0xFE1
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _delay_ms *****************
  4265 ;; Defined at:
  4266 ;;		line 101 in file "ST7735_TFT.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  ms              2    6[COMRAM] int 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  count           2   10[COMRAM] int 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;		None               void
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;Total ram usage:        6 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    1
  4287 ;; This function calls:
  4288 ;;		___wmul
  4289 ;; This function is called by:
  4290 ;;		_LCD_Reset
  4291 ;;		_Rcmd1
  4292 ;;		_Rcmd3
  4293 ;;		_Bcmd
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text15
  4298  00DE30                     __ptext15:
  4299                           	opt stack 0
  4300  00DE30                     _delay_ms:
  4301                           	opt stack 26
  4302                           
  4303                           ;ST7735_TFT.c: 107: int count;
  4304                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  4305                           
  4306                           ;incstack = 0
  4307  00DE30  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4308  00DE34  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4309  00DE38  0E00               	movlw	0
  4310  00DE3A  6E04               	movwf	___wmul@multiplicand+1,c
  4311  00DE3C  0EFA               	movlw	250
  4312  00DE3E  6E03               	movwf	___wmul@multiplicand,c
  4313  00DE40  EC30  F06D         	call	___wmul	;wreg free
  4314  00DE44  C001  F00B         	movff	?___wmul,delay_ms@count
  4315  00DE48  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4316                           
  4317                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  4318  00DE4C  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4319  00DE50  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4320  00DE54  1E09               	comf	??_delay_ms,f,c
  4321  00DE56  1E0A               	comf	??_delay_ms+1,f,c
  4322  00DE58  4A09               	infsnz	??_delay_ms,f,c
  4323  00DE5A  2A0A               	incf	??_delay_ms+1,f,c
  4324  00DE5C  0EFF               	movlw	255
  4325  00DE5E  2409               	addwf	??_delay_ms,w,c
  4326  00DE60  6E0B               	movwf	delay_ms@count,c
  4327  00DE62  0EFF               	movlw	255
  4328  00DE64  200A               	addwfc	??_delay_ms+1,w,c
  4329  00DE66  6E0C               	movwf	delay_ms@count+1,c
  4330                           
  4331                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  4332  00DE68  0EB8               	movlw	184
  4333  00DE6A  6EB1               	movwf	4017,c	;volatile
  4334                           
  4335                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  4336  00DE6C  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4337                           
  4338                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  4339  00DE70  500C               	movf	delay_ms@count+1,w,c
  4340  00DE72  6ED7               	movwf	4055,c	;volatile
  4341                           
  4342                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  4343  00DE74  92A1               	bcf	4001,1,c	;volatile
  4344                           
  4345                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  4346  00DE76  80B1               	bsf	4017,0,c	;volatile
  4347                           
  4348                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  4349  00DE78  D000               	goto	l117
  4350  00DE7A                     l117:
  4351  00DE7A  A2A1               	btfss	4001,1,c	;volatile
  4352  00DE7C  D7FE               	goto	l117
  4353                           
  4354                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  4355  00DE7E  90B1               	bcf	4017,0,c	;volatile
  4356  00DE80  0012               	return		;funcret
  4357  00DE82                     __end_of_delay_ms:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           intcon2	equ	0xFF1
  4364                           postinc0	equ	0xFEE
  4365                           wreg	equ	0xFE8
  4366                           postdec1	equ	0xFE5
  4367                           fsr1l	equ	0xFE1
  4368                           status	equ	0xFD8
  4369                           
  4370 ;; *************** function _Init_ADC *****************
  4371 ;; Defined at:
  4372 ;;		line 299 in file "Lab8test2.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		wreg, status,2
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;Total ram usage:        0 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text16
  4400  00D93A                     __ptext16:
  4401                           	opt stack 0
  4402  00D93A                     _Init_ADC:
  4403                           	opt stack 30
  4404                           
  4405                           ;Lab8test2.c: 301: ADCON0 = 0x01;
  4406                           
  4407                           ;incstack = 0
  4408  00D93A  0E01               	movlw	1
  4409  00D93C  6EC2               	movwf	4034,c	;volatile
  4410                           
  4411                           ;Lab8test2.c: 302: ADCON1=0x0E;
  4412  00D93E  0E0E               	movlw	14
  4413  00D940  6EC1               	movwf	4033,c	;volatile
  4414                           
  4415                           ;Lab8test2.c: 303: ADCON2=0xA9;
  4416  00D942  0EA9               	movlw	169
  4417  00D944  6EC0               	movwf	4032,c	;volatile
  4418  00D946  0012               	return		;funcret
  4419  00D948                     __end_of_Init_ADC:
  4420                           	opt stack 0
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           intcon2	equ	0xFF1
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _Day_Mode *****************
  4433 ;; Defined at:
  4434 ;;		line 411 in file "Lab8test2.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;		None               void
  4441 ;; Registers used:
  4442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:   10
  4455 ;; This function calls:
  4456 ;;		_PED_Control
  4457 ;;		_Set_EW
  4458 ;;		_Set_EWLT
  4459 ;;		_Set_NS
  4460 ;;		_Set_NSLT
  4461 ;;		_Wait_N_Seconds
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text17
  4468  00E4DA                     __ptext17:
  4469                           	opt stack 0
  4470  00E4DA                     _Day_Mode:
  4471                           	opt stack 20
  4472                           
  4473                           ;Lab8test2.c: 413: MODE = 1;
  4474                           
  4475                           ;incstack = 0
  4476  00E4DA  0E00               	movlw	0
  4477  00E4DC  6E69               	movwf	_MODE+1,c
  4478  00E4DE  0E01               	movlw	1
  4479  00E4E0  6E68               	movwf	_MODE,c
  4480                           
  4481                           ;Lab8test2.c: 414: PORTBbits.RB7 = 1;
  4482  00E4E2  8E81               	bsf	3969,7,c	;volatile
  4483                           
  4484                           ;Lab8test2.c: 415: Act_Mode_Txt[0] = 'D';
  4485  00E4E4  0E44               	movlw	68
  4486  00E4E6  6E55               	movwf	_Act_Mode_Txt,c
  4487                           
  4488                           ;Lab8test2.c: 418: Set_NS(2);
  4489  00E4E8  0E02               	movlw	2
  4490  00E4EA  EC81  F06E         	call	_Set_NS
  4491                           
  4492                           ;Lab8test2.c: 419: Set_EW(1);
  4493  00E4EE  0E01               	movlw	1
  4494  00E4F0  ECB5  F06D         	call	_Set_EW
  4495                           
  4496                           ;Lab8test2.c: 420: Set_NSLT(1);
  4497  00E4F4  0E01               	movlw	1
  4498  00E4F6  ECEB  F06D         	call	_Set_NSLT
  4499                           
  4500                           ;Lab8test2.c: 421: Set_EWLT(1);
  4501  00E4FA  0E01               	movlw	1
  4502  00E4FC  ECD0  F06D         	call	_Set_EWLT
  4503                           
  4504                           ;Lab8test2.c: 423: if(PORTBbits.RB0 == 1)
  4505  00E500  A081               	btfss	3969,0,c	;volatile
  4506  00E502  D005               	goto	l437
  4507                           
  4508                           ;Lab8test2.c: 424: {
  4509                           ;Lab8test2.c: 425: PED_Control(2,9);
  4510  00E504  0E09               	movlw	9
  4511  00E506  6E3C               	movwf	PED_Control@Num_Sec,c
  4512  00E508  0E02               	movlw	2
  4513  00E50A  ECE7  F070         	call	_PED_Control
  4514  00E50E                     l437:
  4515                           
  4516                           ;Lab8test2.c: 427: }
  4517                           ;Lab8test2.c: 431: Wait_N_Seconds(8);
  4518  00E50E  0E08               	movlw	8
  4519  00E510  EC6D  F06D         	call	_Wait_N_Seconds
  4520                           
  4521                           ;Lab8test2.c: 433: Set_NS(3);
  4522  00E514  0E03               	movlw	3
  4523  00E516  EC81  F06E         	call	_Set_NS
  4524                           
  4525                           ;Lab8test2.c: 434: Wait_N_Seconds(3);
  4526  00E51A  0E03               	movlw	3
  4527  00E51C  EC6D  F06D         	call	_Wait_N_Seconds
  4528                           
  4529                           ;Lab8test2.c: 436: Set_NS(1);
  4530  00E520  0E01               	movlw	1
  4531  00E522  EC81  F06E         	call	_Set_NS
  4532                           
  4533                           ;Lab8test2.c: 440: if(PORTCbits.RC7 == 1)
  4534  00E526  AE82               	btfss	3970,7,c	;volatile
  4535  00E528  D010               	goto	l3654
  4536                           
  4537                           ;Lab8test2.c: 441: {
  4538                           ;Lab8test2.c: 442: Set_EWLT(2);
  4539  00E52A  0E02               	movlw	2
  4540  00E52C  ECD0  F06D         	call	_Set_EWLT
  4541                           
  4542                           ;Lab8test2.c: 443: Wait_N_Seconds(6);
  4543  00E530  0E06               	movlw	6
  4544  00E532  EC6D  F06D         	call	_Wait_N_Seconds
  4545                           
  4546                           ;Lab8test2.c: 444: Set_EWLT(3);
  4547  00E536  0E03               	movlw	3
  4548  00E538  ECD0  F06D         	call	_Set_EWLT
  4549                           
  4550                           ;Lab8test2.c: 445: Wait_N_Seconds(3);
  4551  00E53C  0E03               	movlw	3
  4552  00E53E  EC6D  F06D         	call	_Wait_N_Seconds
  4553                           
  4554                           ;Lab8test2.c: 446: Set_EWLT(1);
  4555  00E542  0E01               	movlw	1
  4556  00E544  ECD0  F06D         	call	_Set_EWLT
  4557  00E548  D000               	goto	l3654
  4558  00E54A                     l3654:
  4559                           
  4560                           ;Lab8test2.c: 448: }
  4561                           ;Lab8test2.c: 450: Set_EW(2);
  4562  00E54A  0E02               	movlw	2
  4563  00E54C  ECB5  F06D         	call	_Set_EW
  4564                           
  4565                           ;Lab8test2.c: 452: if( PORTBbits.RB1 == 1 )
  4566  00E550  A281               	btfss	3969,1,c	;volatile
  4567  00E552  D005               	goto	l439
  4568                           
  4569                           ;Lab8test2.c: 453: {
  4570                           ;Lab8test2.c: 454: PED_Control(0,8);
  4571  00E554  0E08               	movlw	8
  4572  00E556  6E3C               	movwf	PED_Control@Num_Sec,c
  4573  00E558  0E00               	movlw	0
  4574  00E55A  ECE7  F070         	call	_PED_Control
  4575  00E55E                     l439:
  4576                           
  4577                           ;Lab8test2.c: 455: }
  4578                           ;Lab8test2.c: 457: Wait_N_Seconds(6);
  4579  00E55E  0E06               	movlw	6
  4580  00E560  EC6D  F06D         	call	_Wait_N_Seconds
  4581                           
  4582                           ;Lab8test2.c: 458: Set_EW(3);
  4583  00E564  0E03               	movlw	3
  4584  00E566  ECB5  F06D         	call	_Set_EW
  4585                           
  4586                           ;Lab8test2.c: 459: Wait_N_Seconds(3);
  4587  00E56A  0E03               	movlw	3
  4588  00E56C  EC6D  F06D         	call	_Wait_N_Seconds
  4589                           
  4590                           ;Lab8test2.c: 460: Set_EW(1);
  4591  00E570  0E01               	movlw	1
  4592  00E572  ECB5  F06D         	call	_Set_EW
  4593                           
  4594                           ;Lab8test2.c: 465: if(PORTAbits.RA3 == 1)
  4595  00E576  A680               	btfss	3968,3,c	;volatile
  4596  00E578  D010               	goto	l441
  4597                           
  4598                           ;Lab8test2.c: 467: {
  4599                           ;Lab8test2.c: 468: Set_NSLT(2);
  4600  00E57A  0E02               	movlw	2
  4601  00E57C  ECEB  F06D         	call	_Set_NSLT
  4602                           
  4603                           ;Lab8test2.c: 469: Wait_N_Seconds(6);
  4604  00E580  0E06               	movlw	6
  4605  00E582  EC6D  F06D         	call	_Wait_N_Seconds
  4606                           
  4607                           ;Lab8test2.c: 471: Set_NSLT(3);
  4608  00E586  0E03               	movlw	3
  4609  00E588  ECEB  F06D         	call	_Set_NSLT
  4610                           
  4611                           ;Lab8test2.c: 472: Wait_N_Seconds(3);
  4612  00E58C  0E03               	movlw	3
  4613  00E58E  EC6D  F06D         	call	_Wait_N_Seconds
  4614                           
  4615                           ;Lab8test2.c: 473: Set_NSLT(1);
  4616  00E592  0E01               	movlw	1
  4617  00E594  ECEB  F06D         	call	_Set_NSLT
  4618  00E598  D000               	goto	l441
  4619  00E59A                     l441:
  4620  00E59A  0012               	return		;funcret
  4621  00E59C                     __end_of_Day_Mode:
  4622                           	opt stack 0
  4623                           tblptru	equ	0xFF8
  4624                           tblptrh	equ	0xFF7
  4625                           tblptrl	equ	0xFF6
  4626                           tablat	equ	0xFF5
  4627                           intcon2	equ	0xFF1
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _Wait_N_Seconds *****************
  4635 ;; Defined at:
  4636 ;;		line 581 in file "Lab8test2.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  seconds         1    wreg     unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  seconds         1   59[COMRAM] unsigned char 
  4641 ;;  I               1   60[COMRAM] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;Total ram usage:        2 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    9
  4658 ;; This function calls:
  4659 ;;		_Wait_One_Second
  4660 ;;		_update_LCD_count
  4661 ;; This function is called by:
  4662 ;;		_Day_Mode
  4663 ;;		_Night_Mode
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text18
  4668  00DADA                     __ptext18:
  4669                           	opt stack 0
  4670  00DADA                     _Wait_N_Seconds:
  4671                           	opt stack 20
  4672                           
  4673                           ;incstack = 0
  4674                           ;Wait_N_Seconds@seconds stored from wreg
  4675  00DADA  6E3C               	movwf	Wait_N_Seconds@seconds,c
  4676                           
  4677                           ;Lab8test2.c: 583: char I;
  4678                           ;Lab8test2.c: 584: for (I = seconds; I> 0; I--)
  4679  00DADC  C03C  F03D         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4680  00DAE0                     l3492:
  4681  00DAE0  503D               	movf	Wait_N_Seconds@I,w,c
  4682  00DAE2  B4D8               	btfsc	status,2,c
  4683  00DAE4  D00B               	goto	l3502
  4684  00DAE6  D001               	goto	l3496
  4685  00DAE8  D009               	goto	l3502
  4686  00DAEA                     l3496:
  4687                           
  4688                           ;Lab8test2.c: 585: {
  4689                           ;Lab8test2.c: 586: Wait_One_Second();
  4690  00DAEA  EC1E  F070         	call	_Wait_One_Second	;wreg free
  4691                           
  4692                           ;Lab8test2.c: 587: update_LCD_count(direction, I);
  4693  00DAEE  C03D  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4694  00DAF2  5078               	movf	_direction,w,c
  4695  00DAF4  EC29  F077         	call	_update_LCD_count
  4696  00DAF8  063D               	decf	Wait_N_Seconds@I,f,c
  4697  00DAFA  D7F2               	goto	l3492
  4698  00DAFC                     l3502:
  4699                           
  4700                           ;Lab8test2.c: 588: }
  4701                           ;Lab8test2.c: 589: update_LCD_count(direction, 0);
  4702  00DAFC  0E00               	movlw	0
  4703  00DAFE  6E3A               	movwf	update_LCD_count@count,c
  4704  00DB00  5078               	movf	_direction,w,c
  4705  00DB02  EC29  F077         	call	_update_LCD_count
  4706  00DB06  0012               	return		;funcret
  4707  00DB08                     __end_of_Wait_N_Seconds:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           intcon2	equ	0xFF1
  4714                           postinc0	equ	0xFEE
  4715                           wreg	equ	0xFE8
  4716                           postdec1	equ	0xFE5
  4717                           fsr1l	equ	0xFE1
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _update_LCD_count *****************
  4721 ;; Defined at:
  4722 ;;		line 639 in file "Lab8test2.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  direction       1    wreg     unsigned char 
  4725 ;;  count           1   57[COMRAM] unsigned char 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  direction       1   58[COMRAM] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        2 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    7
  4744 ;; This function calls:
  4745 ;;		___awdiv
  4746 ;;		___awmod
  4747 ;;		_drawtext
  4748 ;; This function is called by:
  4749 ;;		_Wait_N_Seconds
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text19
  4754  00EE52                     __ptext19:
  4755                           	opt stack 0
  4756  00EE52                     _update_LCD_count:
  4757                           	opt stack 21
  4758                           
  4759                           ;incstack = 0
  4760                           ;update_LCD_count@direction stored from wreg
  4761  00EE52  6E3B               	movwf	update_LCD_count@direction,c
  4762                           
  4763                           ;Lab8test2.c: 641: switch (direction)
  4764  00EE54  D0AE               	goto	l3348
  4765  00EE56                     l3330:
  4766                           
  4767                           ;Lab8test2.c: 644: EW_Count[0] = count/10 + '0';
  4768  00EE56  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4769  00EE5A  6A02               	clrf	___awdiv@dividend+1,c
  4770  00EE5C  0E00               	movlw	0
  4771  00EE5E  6E04               	movwf	___awdiv@divisor+1,c
  4772  00EE60  0E0A               	movlw	10
  4773  00EE62  6E03               	movwf	___awdiv@divisor,c
  4774  00EE64  EC2C  F071         	call	___awdiv	;wreg free
  4775  00EE68  5001               	movf	?___awdiv,w,c
  4776  00EE6A  0F30               	addlw	48
  4777  00EE6C  6E46               	movwf	_EW_Count,c
  4778                           
  4779                           ;Lab8test2.c: 645: EW_Count[1] = count%10 + '0';
  4780  00EE6E  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4781  00EE72  6A02               	clrf	___awmod@dividend+1,c
  4782  00EE74  0E00               	movlw	0
  4783  00EE76  6E04               	movwf	___awmod@divisor+1,c
  4784  00EE78  0E0A               	movlw	10
  4785  00EE7A  6E03               	movwf	___awmod@divisor,c
  4786  00EE7C  ECDD  F06F         	call	___awmod	;wreg free
  4787  00EE80  5001               	movf	?___awmod,w,c
  4788  00EE82  0F30               	addlw	48
  4789  00EE84  6E47               	movwf	_EW_Count+1,c
  4790                           
  4791                           ;Lab8test2.c: 646: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4792  00EE86  0E1E               	movlw	30
  4793  00EE88  6E29               	movwf	drawtext@y,c
  4794  00EE8A  0E46               	movlw	low _EW_Count
  4795  00EE8C  6E2A               	movwf	drawtext@_text,c
  4796  00EE8E  0E00               	movlw	high _EW_Count
  4797  00EE90  6E2B               	movwf	drawtext@_text+1,c
  4798  00EE92  0E07               	movlw	7
  4799  00EE94  6E2D               	movwf	drawtext@color+1,c
  4800  00EE96  682C               	setf	drawtext@color,c
  4801  00EE98  0E00               	movlw	0
  4802  00EE9A  6E2F               	movwf	drawtext@bg+1,c
  4803  00EE9C  0E00               	movlw	0
  4804  00EE9E  6E2E               	movwf	drawtext@bg,c
  4805  00EEA0  0E02               	movlw	2
  4806  00EEA2  6E30               	movwf	drawtext@size,c
  4807  00EEA4  0E64               	movlw	100
  4808  00EEA6  EC01  F074         	call	_drawtext
  4809                           
  4810                           ;Lab8test2.c: 647: break;
  4811  00EEAA  D091               	goto	l482
  4812  00EEAC                     l3334:
  4813                           
  4814                           ;Lab8test2.c: 650: NS_Count[0] = count/10 + '0';
  4815  00EEAC  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4816  00EEB0  6A02               	clrf	___awdiv@dividend+1,c
  4817  00EEB2  0E00               	movlw	0
  4818  00EEB4  6E04               	movwf	___awdiv@divisor+1,c
  4819  00EEB6  0E0A               	movlw	10
  4820  00EEB8  6E03               	movwf	___awdiv@divisor,c
  4821  00EEBA  EC2C  F071         	call	___awdiv	;wreg free
  4822  00EEBE  5001               	movf	?___awdiv,w,c
  4823  00EEC0  0F30               	addlw	48
  4824  00EEC2  6E4C               	movwf	_NS_Count,c
  4825                           
  4826                           ;Lab8test2.c: 651: NS_Count[1] = count%10 + '0';
  4827  00EEC4  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4828  00EEC8  6A02               	clrf	___awmod@dividend+1,c
  4829  00EECA  0E00               	movlw	0
  4830  00EECC  6E04               	movwf	___awmod@divisor+1,c
  4831  00EECE  0E0A               	movlw	10
  4832  00EED0  6E03               	movwf	___awmod@divisor,c
  4833  00EED2  ECDD  F06F         	call	___awmod	;wreg free
  4834  00EED6  5001               	movf	?___awmod,w,c
  4835  00EED8  0F30               	addlw	48
  4836  00EEDA  6E4D               	movwf	_NS_Count+1,c
  4837                           
  4838                           ;Lab8test2.c: 652: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  4839  00EEDC  0E5A               	movlw	90
  4840  00EEDE  6E29               	movwf	drawtext@y,c
  4841  00EEE0  0E4C               	movlw	low _NS_Count
  4842  00EEE2  6E2A               	movwf	drawtext@_text,c
  4843  00EEE4  0E00               	movlw	high _NS_Count
  4844  00EEE6  6E2B               	movwf	drawtext@_text+1,c
  4845  00EEE8  0E00               	movlw	0
  4846  00EEEA  6E2D               	movwf	drawtext@color+1,c
  4847  00EEEC  0E1F               	movlw	31
  4848  00EEEE  6E2C               	movwf	drawtext@color,c
  4849  00EEF0  0E00               	movlw	0
  4850  00EEF2  6E2F               	movwf	drawtext@bg+1,c
  4851  00EEF4  0E00               	movlw	0
  4852  00EEF6  6E2E               	movwf	drawtext@bg,c
  4853  00EEF8  0E02               	movlw	2
  4854  00EEFA  6E30               	movwf	drawtext@size,c
  4855  00EEFC  0E64               	movlw	100
  4856  00EEFE  EC01  F074         	call	_drawtext
  4857                           
  4858                           ;Lab8test2.c: 653: break;
  4859  00EF02  D065               	goto	l482
  4860  00EF04                     l3338:
  4861                           
  4862                           ;Lab8test2.c: 656: NSLT_Count[0] = count/10 + '0';
  4863  00EF04  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4864  00EF08  6A02               	clrf	___awdiv@dividend+1,c
  4865  00EF0A  0E00               	movlw	0
  4866  00EF0C  6E04               	movwf	___awdiv@divisor+1,c
  4867  00EF0E  0E0A               	movlw	10
  4868  00EF10  6E03               	movwf	___awdiv@divisor,c
  4869  00EF12  EC2C  F071         	call	___awdiv	;wreg free
  4870  00EF16  5001               	movf	?___awdiv,w,c
  4871  00EF18  0F30               	addlw	48
  4872  00EF1A  6E49               	movwf	_NSLT_Count,c
  4873                           
  4874                           ;Lab8test2.c: 657: NSLT_Count[1] = count%10 + '0';
  4875  00EF1C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4876  00EF20  6A02               	clrf	___awmod@dividend+1,c
  4877  00EF22  0E00               	movlw	0
  4878  00EF24  6E04               	movwf	___awmod@divisor+1,c
  4879  00EF26  0E0A               	movlw	10
  4880  00EF28  6E03               	movwf	___awmod@divisor,c
  4881  00EF2A  ECDD  F06F         	call	___awmod	;wreg free
  4882  00EF2E  5001               	movf	?___awmod,w,c
  4883  00EF30  0F30               	addlw	48
  4884  00EF32  6E4A               	movwf	_NSLT_Count+1,c
  4885                           
  4886                           ;Lab8test2.c: 658: drawtext(100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  4887  00EF34  0E78               	movlw	120
  4888  00EF36  6E29               	movwf	drawtext@y,c
  4889  00EF38  0E49               	movlw	low _NSLT_Count
  4890  00EF3A  6E2A               	movwf	drawtext@_text,c
  4891  00EF3C  0E00               	movlw	high _NSLT_Count
  4892  00EF3E  6E2B               	movwf	drawtext@_text+1,c
  4893  00EF40  0EF8               	movlw	248
  4894  00EF42  6E2D               	movwf	drawtext@color+1,c
  4895  00EF44  0E1F               	movlw	31
  4896  00EF46  6E2C               	movwf	drawtext@color,c
  4897  00EF48  0E00               	movlw	0
  4898  00EF4A  6E2F               	movwf	drawtext@bg+1,c
  4899  00EF4C  0E00               	movlw	0
  4900  00EF4E  6E2E               	movwf	drawtext@bg,c
  4901  00EF50  0E02               	movlw	2
  4902  00EF52  6E30               	movwf	drawtext@size,c
  4903  00EF54  0E64               	movlw	100
  4904  00EF56  EC01  F074         	call	_drawtext
  4905                           
  4906                           ;Lab8test2.c: 659: break;
  4907  00EF5A  D039               	goto	l482
  4908  00EF5C                     l3342:
  4909                           
  4910                           ;Lab8test2.c: 662: EWLT_Count[0] = count/10 + '0';
  4911  00EF5C  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4912  00EF60  6A02               	clrf	___awdiv@dividend+1,c
  4913  00EF62  0E00               	movlw	0
  4914  00EF64  6E04               	movwf	___awdiv@divisor+1,c
  4915  00EF66  0E0A               	movlw	10
  4916  00EF68  6E03               	movwf	___awdiv@divisor,c
  4917  00EF6A  EC2C  F071         	call	___awdiv	;wreg free
  4918  00EF6E  5001               	movf	?___awdiv,w,c
  4919  00EF70  0F30               	addlw	48
  4920  00EF72  6E43               	movwf	_EWLT_Count,c
  4921                           
  4922                           ;Lab8test2.c: 663: EWLT_Count[1] = count%10 + '0';
  4923  00EF74  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4924  00EF78  6A02               	clrf	___awmod@dividend+1,c
  4925  00EF7A  0E00               	movlw	0
  4926  00EF7C  6E04               	movwf	___awmod@divisor+1,c
  4927  00EF7E  0E0A               	movlw	10
  4928  00EF80  6E03               	movwf	___awmod@divisor,c
  4929  00EF82  ECDD  F06F         	call	___awmod	;wreg free
  4930  00EF86  5001               	movf	?___awmod,w,c
  4931  00EF88  0F30               	addlw	48
  4932  00EF8A  6E44               	movwf	_EWLT_Count+1,c
  4933                           
  4934                           ;Lab8test2.c: 664: drawtext(100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  4935  00EF8C  0E3C               	movlw	60
  4936  00EF8E  6E29               	movwf	drawtext@y,c
  4937  00EF90  0E43               	movlw	low _EWLT_Count
  4938  00EF92  6E2A               	movwf	drawtext@_text,c
  4939  00EF94  0E00               	movlw	high _EWLT_Count
  4940  00EF96  6E2B               	movwf	drawtext@_text+1,c
  4941  00EF98  0EFF               	movlw	255
  4942  00EF9A  6E2D               	movwf	drawtext@color+1,c
  4943  00EF9C  682C               	setf	drawtext@color,c
  4944  00EF9E  0E00               	movlw	0
  4945  00EFA0  6E2F               	movwf	drawtext@bg+1,c
  4946  00EFA2  0E00               	movlw	0
  4947  00EFA4  6E2E               	movwf	drawtext@bg,c
  4948  00EFA6  0E02               	movlw	2
  4949  00EFA8  6E30               	movwf	drawtext@size,c
  4950  00EFAA  0E64               	movlw	100
  4951  00EFAC  EC01  F074         	call	_drawtext
  4952                           
  4953                           ;Lab8test2.c: 666: }
  4954                           
  4955                           ;Lab8test2.c: 665: break;
  4956  00EFB0  D00E               	goto	l482
  4957  00EFB2                     l3348:
  4958  00EFB2  503B               	movf	update_LCD_count@direction,w,c
  4959                           
  4960                           ; Switch size 1, requested type "space"
  4961                           ; Number of cases is 4, Range of values is 0 to 3
  4962                           ; switch strategies available:
  4963                           ; Name         Instructions Cycles
  4964                           ; simple_byte           13     7 (average)
  4965                           ;	Chosen strategy is simple_byte
  4966  00EFB4  0A00               	xorlw	0	; case 0
  4967  00EFB6  B4D8               	btfsc	status,2,c
  4968  00EFB8  D74E               	goto	l3330
  4969  00EFBA  0A01               	xorlw	1	; case 1
  4970  00EFBC  B4D8               	btfsc	status,2,c
  4971  00EFBE  D7CE               	goto	l3342
  4972  00EFC0  0A03               	xorlw	3	; case 2
  4973  00EFC2  B4D8               	btfsc	status,2,c
  4974  00EFC4  D773               	goto	l3334
  4975  00EFC6  0A01               	xorlw	1	; case 3
  4976  00EFC8  B4D8               	btfsc	status,2,c
  4977  00EFCA  D79C               	goto	l3338
  4978  00EFCC  D000               	goto	l482
  4979  00EFCE                     l482:
  4980  00EFCE  0012               	return		;funcret
  4981  00EFD0                     __end_of_update_LCD_count:
  4982                           	opt stack 0
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           intcon2	equ	0xFF1
  4988                           postinc0	equ	0xFEE
  4989                           wreg	equ	0xFE8
  4990                           postdec1	equ	0xFE5
  4991                           fsr1l	equ	0xFE1
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _Wait_One_Second *****************
  4995 ;; Defined at:
  4996 ;;		line 546 in file "Lab8test2.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;		None               void
  5003 ;; Registers used:
  5004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    8
  5017 ;; This function calls:
  5018 ;;		_Wait_Half_Second
  5019 ;;		_drawtext
  5020 ;;		_strcpy
  5021 ;;		_update_LCD_misc
  5022 ;; This function is called by:
  5023 ;;		_Wait_N_Seconds
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text20
  5028  00E03C                     __ptext20:
  5029                           	opt stack 0
  5030  00E03C                     _Wait_One_Second:
  5031                           	opt stack 20
  5032                           
  5033                           ;Lab8test2.c: 548: PORTCbits.RC0 = 1;
  5034                           
  5035                           ;incstack = 0
  5036  00E03C  8082               	bsf	3970,0,c	;volatile
  5037                           
  5038                           ;Lab8test2.c: 549: strcpy(txt,"*");
  5039  00E03E  C06C  F001         	movff	_txt,strcpy@to
  5040  00E042  C06D  F002         	movff	_txt+1,strcpy@to+1
  5041  00E046  0EFD               	movlw	low STR_5
  5042  00E048  6E03               	movwf	strcpy@from,c
  5043  00E04A  0EFF               	movlw	high STR_5
  5044  00E04C  6E04               	movwf	strcpy@from+1,c
  5045  00E04E  EC9C  F06D         	call	_strcpy	;wreg free
  5046                           
  5047                           ;Lab8test2.c: 550: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5048  00E052  0E0A               	movlw	10
  5049  00E054  6E29               	movwf	drawtext@y,c
  5050  00E056  C06C  F02A         	movff	_txt,drawtext@_text
  5051  00E05A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  5052  00E05E  0EFF               	movlw	255
  5053  00E060  6E2D               	movwf	drawtext@color+1,c
  5054  00E062  682C               	setf	drawtext@color,c
  5055  00E064  0E00               	movlw	0
  5056  00E066  6E2F               	movwf	drawtext@bg+1,c
  5057  00E068  0E00               	movlw	0
  5058  00E06A  6E2E               	movwf	drawtext@bg,c
  5059  00E06C  0E01               	movlw	1
  5060  00E06E  6E30               	movwf	drawtext@size,c
  5061  00E070  0E78               	movlw	120
  5062  00E072  EC01  F074         	call	_drawtext
  5063                           
  5064                           ;Lab8test2.c: 551: Wait_Half_Second();
  5065  00E076  ECF0  F06C         	call	_Wait_Half_Second	;wreg free
  5066                           
  5067                           ;Lab8test2.c: 553: PORTCbits.RC0 = 0;
  5068  00E07A  9082               	bcf	3970,0,c	;volatile
  5069                           
  5070                           ;Lab8test2.c: 554: strcpy(txt," ");
  5071  00E07C  C06C  F001         	movff	_txt,strcpy@to
  5072  00E080  C06D  F002         	movff	_txt+1,strcpy@to+1
  5073  00E084  0EFB               	movlw	low STR_14
  5074  00E086  6E03               	movwf	strcpy@from,c
  5075  00E088  0EFF               	movlw	high STR_14
  5076  00E08A  6E04               	movwf	strcpy@from+1,c
  5077  00E08C  EC9C  F06D         	call	_strcpy	;wreg free
  5078                           
  5079                           ;Lab8test2.c: 555: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5080  00E090  0E0A               	movlw	10
  5081  00E092  6E29               	movwf	drawtext@y,c
  5082  00E094  C06C  F02A         	movff	_txt,drawtext@_text
  5083  00E098  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  5084  00E09C  0EFF               	movlw	255
  5085  00E09E  6E2D               	movwf	drawtext@color+1,c
  5086  00E0A0  682C               	setf	drawtext@color,c
  5087  00E0A2  0E00               	movlw	0
  5088  00E0A4  6E2F               	movwf	drawtext@bg+1,c
  5089  00E0A6  0E00               	movlw	0
  5090  00E0A8  6E2E               	movwf	drawtext@bg,c
  5091  00E0AA  0E01               	movlw	1
  5092  00E0AC  6E30               	movwf	drawtext@size,c
  5093  00E0AE  0E78               	movlw	120
  5094  00E0B0  EC01  F074         	call	_drawtext
  5095                           
  5096                           ;Lab8test2.c: 556: Wait_Half_Second();
  5097  00E0B4  ECF0  F06C         	call	_Wait_Half_Second	;wreg free
  5098                           
  5099                           ;Lab8test2.c: 557: update_LCD_misc();
  5100  00E0B8  ECBF  F078         	call	_update_LCD_misc	;wreg free
  5101  00E0BC  0012               	return		;funcret
  5102  00E0BE                     __end_of_Wait_One_Second:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           intcon2	equ	0xFF1
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           fsr1l	equ	0xFE1
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _update_LCD_misc *****************
  5116 ;; Defined at:
  5117 ;;		line 688 in file "Lab8test2.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  nStep           2   57[COMRAM] int 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;		None               void
  5124 ;; Registers used:
  5125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        2 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    7
  5138 ;; This function calls:
  5139 ;;		___awtoft
  5140 ;;		___ftdiv
  5141 ;;		___ftge
  5142 ;;		___wmul
  5143 ;;		_drawtext
  5144 ;;		_get_full_ADC
  5145 ;; This function is called by:
  5146 ;;		_Wait_One_Second
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text21
  5151  00F17E                     __ptext21:
  5152                           	opt stack 0
  5153  00F17E                     _update_LCD_misc:
  5154                           	opt stack 20
  5155                           
  5156                           ;Lab8test2.c: 690: int nStep = get_full_ADC();
  5157                           
  5158                           ;incstack = 0
  5159  00F17E  EC1D  F06D         	call	_get_full_ADC	;wreg free
  5160  00F182  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5161  00F186  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5162                           
  5163                           ;Lab8test2.c: 691: volt = nStep * 5 /1024.0;
  5164  00F18A  C03A  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5165  00F18E  C03B  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5166  00F192  0E00               	movlw	0
  5167  00F194  6E04               	movwf	___wmul@multiplicand+1,c
  5168  00F196  0E05               	movlw	5
  5169  00F198  6E03               	movwf	___wmul@multiplicand,c
  5170  00F19A  EC30  F06D         	call	___wmul	;wreg free
  5171  00F19E  C001  F009         	movff	?___wmul,___awtoft@c
  5172  00F1A2  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  5173  00F1A6  EC06  F06E         	call	___awtoft	;wreg free
  5174  00F1AA  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5175  00F1AE  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5176  00F1B2  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5177  00F1B6  0E00               	movlw	0
  5178  00F1B8  6E10               	movwf	___ftdiv@f2,c
  5179  00F1BA  0E80               	movlw	128
  5180  00F1BC  6E11               	movwf	___ftdiv@f2+1,c
  5181  00F1BE  0E44               	movlw	68
  5182  00F1C0  6E12               	movwf	___ftdiv@f2+2,c
  5183  00F1C2  EC70  F074         	call	___ftdiv	;wreg free
  5184  00F1C6  C00D  F065         	movff	?___ftdiv,_volt
  5185  00F1CA  C00E  F066         	movff	?___ftdiv+1,_volt+1
  5186  00F1CE  C00F  F067         	movff	?___ftdiv+2,_volt+2
  5187                           
  5188                           ;Lab8test2.c: 692: SW_MODE = volt < 3.5 ? 1:0;
  5189  00F1D2  C065  F001         	movff	_volt,___ftge@ff1
  5190  00F1D6  C066  F002         	movff	_volt+1,___ftge@ff1+1
  5191  00F1DA  C067  F003         	movff	_volt+2,___ftge@ff1+2
  5192  00F1DE  0E00               	movlw	0
  5193  00F1E0  6E04               	movwf	___ftge@ff2,c
  5194  00F1E2  0E60               	movlw	96
  5195  00F1E4  6E05               	movwf	___ftge@ff2+1,c
  5196  00F1E6  0E40               	movlw	64
  5197  00F1E8  6E06               	movwf	___ftge@ff2+2,c
  5198  00F1EA  EC77  F071         	call	___ftge	;wreg free
  5199  00F1EE  B0D8               	btfsc	status,0,c
  5200  00F1F0  D002               	goto	u1880
  5201  00F1F2  0E01               	movlw	1
  5202  00F1F4  D001               	goto	u1890
  5203  00F1F6                     u1880:
  5204  00F1F6  0E00               	movlw	0
  5205  00F1F8                     u1890:
  5206  00F1F8  6E72               	movwf	_SW_MODE,c
  5207                           
  5208                           ;Lab8test2.c: 694: SW_EWPED = PORTBbits.RB1;
  5209  00F1FA  0E00               	movlw	0
  5210  00F1FC  B281               	btfsc	3969,1,c	;volatile
  5211  00F1FE  0E01               	movlw	1
  5212  00F200  6E71               	movwf	_SW_EWPED,c
  5213                           
  5214                           ;Lab8test2.c: 695: SW_EWLT = PORTCbits.RC7;
  5215  00F202  0E00               	movlw	0
  5216  00F204  BE82               	btfsc	3970,7,c	;volatile
  5217  00F206  0E01               	movlw	1
  5218  00F208  6E70               	movwf	_SW_EWLT,c
  5219                           
  5220                           ;Lab8test2.c: 696: SW_NSPED = PORTBbits.RB0;
  5221  00F20A  0E00               	movlw	0
  5222  00F20C  B081               	btfsc	3969,0,c	;volatile
  5223  00F20E  0E01               	movlw	1
  5224  00F210  6E74               	movwf	_SW_NSPED,c
  5225                           
  5226                           ;Lab8test2.c: 697: SW_NSLT = PORTAbits.RA3;
  5227  00F212  0E00               	movlw	0
  5228  00F214  B680               	btfsc	3968,3,c	;volatile
  5229  00F216  0E01               	movlw	1
  5230  00F218  6E73               	movwf	_SW_NSLT,c
  5231                           
  5232                           ;Lab8test2.c: 699: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5233  00F21A  5071               	movf	_SW_EWPED,w,c
  5234  00F21C  A4D8               	btfss	status,2,c
  5235  00F21E  D002               	goto	l3012
  5236  00F220  0E30               	movlw	48
  5237  00F222  D001               	goto	L1
  5238  00F224                     l3012:
  5239  00F224  0E31               	movlw	49
  5240  00F226                     L1:
  5241  00F226  6E5D               	movwf	_SW_EWPED_Txt,c
  5242                           
  5243                           ;Lab8test2.c: 700: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5244  00F228  5072               	movf	_SW_MODE,w,c
  5245  00F22A  A4D8               	btfss	status,2,c
  5246  00F22C  D002               	goto	l3016
  5247  00F22E  0E4E               	movlw	78
  5248  00F230  D001               	goto	L2
  5249  00F232                     l3016:
  5250  00F232  0E44               	movlw	68
  5251  00F234                     L2:
  5252  00F234  6E5F               	movwf	_SW_MODE_Txt,c
  5253                           
  5254                           ;Lab8test2.c: 701: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5255  00F236  5074               	movf	_SW_NSPED,w,c
  5256  00F238  A4D8               	btfss	status,2,c
  5257  00F23A  D002               	goto	l3020
  5258  00F23C  0E30               	movlw	48
  5259  00F23E  D001               	goto	L3
  5260  00F240                     l3020:
  5261  00F240  0E31               	movlw	49
  5262  00F242                     L3:
  5263  00F242  6E63               	movwf	_SW_NSPED_Txt,c
  5264                           
  5265                           ;Lab8test2.c: 702: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5266  00F244  5073               	movf	_SW_NSLT,w,c
  5267  00F246  A4D8               	btfss	status,2,c
  5268  00F248  D002               	goto	l3024
  5269  00F24A  0E30               	movlw	48
  5270  00F24C  D001               	goto	L4
  5271  00F24E                     l3024:
  5272  00F24E  0E31               	movlw	49
  5273  00F250                     L4:
  5274  00F250  6E61               	movwf	_SW_NSLT_Txt,c
  5275                           
  5276                           ;Lab8test2.c: 703: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5277  00F252  5070               	movf	_SW_EWLT,w,c
  5278  00F254  A4D8               	btfss	status,2,c
  5279  00F256  D002               	goto	l3028
  5280  00F258  0E30               	movlw	48
  5281  00F25A  D001               	goto	L5
  5282  00F25C                     l3028:
  5283  00F25C  0E31               	movlw	49
  5284  00F25E                     L5:
  5285  00F25E  6E5B               	movwf	_SW_EWLT_Txt,c
  5286  00F260  D000               	goto	l3030
  5287  00F262                     l3030:
  5288                           
  5289                           ;Lab8test2.c: 706: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5290  00F262  0E0A               	movlw	10
  5291  00F264  6E29               	movwf	drawtext@y,c
  5292  00F266  0E55               	movlw	low _Act_Mode_Txt
  5293  00F268  6E2A               	movwf	drawtext@_text,c
  5294  00F26A  0E00               	movlw	high _Act_Mode_Txt
  5295  00F26C  6E2B               	movwf	drawtext@_text+1,c
  5296  00F26E  0EFF               	movlw	255
  5297  00F270  6E2D               	movwf	drawtext@color+1,c
  5298  00F272  682C               	setf	drawtext@color,c
  5299  00F274  0E00               	movlw	0
  5300  00F276  6E2F               	movwf	drawtext@bg+1,c
  5301  00F278  0E00               	movlw	0
  5302  00F27A  6E2E               	movwf	drawtext@bg,c
  5303  00F27C  0E01               	movlw	1
  5304  00F27E  6E30               	movwf	drawtext@size,c
  5305  00F280  0E23               	movlw	35
  5306  00F282  EC01  F074         	call	_drawtext
  5307                           
  5308                           ;Lab8test2.c: 707: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5309  00F286  0E95               	movlw	149
  5310  00F288  6E29               	movwf	drawtext@y,c
  5311  00F28A  0E5D               	movlw	low _SW_EWPED_Txt
  5312  00F28C  6E2A               	movwf	drawtext@_text,c
  5313  00F28E  0E00               	movlw	high _SW_EWPED_Txt
  5314  00F290  6E2B               	movwf	drawtext@_text+1,c
  5315  00F292  0EFF               	movlw	255
  5316  00F294  6E2D               	movwf	drawtext@color+1,c
  5317  00F296  682C               	setf	drawtext@color,c
  5318  00F298  0E00               	movlw	0
  5319  00F29A  6E2F               	movwf	drawtext@bg+1,c
  5320  00F29C  0E00               	movlw	0
  5321  00F29E  6E2E               	movwf	drawtext@bg,c
  5322  00F2A0  0E01               	movlw	1
  5323  00F2A2  6E30               	movwf	drawtext@size,c
  5324  00F2A4  0E06               	movlw	6
  5325  00F2A6  EC01  F074         	call	_drawtext
  5326                           
  5327                           ;Lab8test2.c: 708: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5328  00F2AA  0E95               	movlw	149
  5329  00F2AC  6E29               	movwf	drawtext@y,c
  5330  00F2AE  0E5B               	movlw	low _SW_EWLT_Txt
  5331  00F2B0  6E2A               	movwf	drawtext@_text,c
  5332  00F2B2  0E00               	movlw	high _SW_EWLT_Txt
  5333  00F2B4  6E2B               	movwf	drawtext@_text+1,c
  5334  00F2B6  0EFF               	movlw	255
  5335  00F2B8  6E2D               	movwf	drawtext@color+1,c
  5336  00F2BA  682C               	setf	drawtext@color,c
  5337  00F2BC  0E00               	movlw	0
  5338  00F2BE  6E2F               	movwf	drawtext@bg+1,c
  5339  00F2C0  0E00               	movlw	0
  5340  00F2C2  6E2E               	movwf	drawtext@bg,c
  5341  00F2C4  0E01               	movlw	1
  5342  00F2C6  6E30               	movwf	drawtext@size,c
  5343  00F2C8  0E20               	movlw	32
  5344  00F2CA  EC01  F074         	call	_drawtext
  5345                           
  5346                           ;Lab8test2.c: 709: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5347  00F2CE  0E95               	movlw	149
  5348  00F2D0  6E29               	movwf	drawtext@y,c
  5349  00F2D2  0E63               	movlw	low _SW_NSPED_Txt
  5350  00F2D4  6E2A               	movwf	drawtext@_text,c
  5351  00F2D6  0E00               	movlw	high _SW_NSPED_Txt
  5352  00F2D8  6E2B               	movwf	drawtext@_text+1,c
  5353  00F2DA  0EFF               	movlw	255
  5354  00F2DC  6E2D               	movwf	drawtext@color+1,c
  5355  00F2DE  682C               	setf	drawtext@color,c
  5356  00F2E0  0E00               	movlw	0
  5357  00F2E2  6E2F               	movwf	drawtext@bg+1,c
  5358  00F2E4  0E00               	movlw	0
  5359  00F2E6  6E2E               	movwf	drawtext@bg,c
  5360  00F2E8  0E01               	movlw	1
  5361  00F2EA  6E30               	movwf	drawtext@size,c
  5362  00F2EC  0E3A               	movlw	58
  5363  00F2EE  EC01  F074         	call	_drawtext
  5364                           
  5365                           ;Lab8test2.c: 710: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5366  00F2F2  0E95               	movlw	149
  5367  00F2F4  6E29               	movwf	drawtext@y,c
  5368  00F2F6  0E61               	movlw	low _SW_NSLT_Txt
  5369  00F2F8  6E2A               	movwf	drawtext@_text,c
  5370  00F2FA  0E00               	movlw	high _SW_NSLT_Txt
  5371  00F2FC  6E2B               	movwf	drawtext@_text+1,c
  5372  00F2FE  0EFF               	movlw	255
  5373  00F300  6E2D               	movwf	drawtext@color+1,c
  5374  00F302  682C               	setf	drawtext@color,c
  5375  00F304  0E00               	movlw	0
  5376  00F306  6E2F               	movwf	drawtext@bg+1,c
  5377  00F308  0E00               	movlw	0
  5378  00F30A  6E2E               	movwf	drawtext@bg,c
  5379  00F30C  0E01               	movlw	1
  5380  00F30E  6E30               	movwf	drawtext@size,c
  5381  00F310  0E57               	movlw	87
  5382  00F312  EC01  F074         	call	_drawtext
  5383                           
  5384                           ;Lab8test2.c: 711: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5385  00F316  0E95               	movlw	149
  5386  00F318  6E29               	movwf	drawtext@y,c
  5387  00F31A  0E5F               	movlw	low _SW_MODE_Txt
  5388  00F31C  6E2A               	movwf	drawtext@_text,c
  5389  00F31E  0E00               	movlw	high _SW_MODE_Txt
  5390  00F320  6E2B               	movwf	drawtext@_text+1,c
  5391  00F322  0EFF               	movlw	255
  5392  00F324  6E2D               	movwf	drawtext@color+1,c
  5393  00F326  682C               	setf	drawtext@color,c
  5394  00F328  0E00               	movlw	0
  5395  00F32A  6E2F               	movwf	drawtext@bg+1,c
  5396  00F32C  0E00               	movlw	0
  5397  00F32E  6E2E               	movwf	drawtext@bg,c
  5398  00F330  0E01               	movlw	1
  5399  00F332  6E30               	movwf	drawtext@size,c
  5400  00F334  0E70               	movlw	112
  5401  00F336  EC01  F074         	call	_drawtext
  5402  00F33A  0012               	return		;funcret
  5403  00F33C                     __end_of_update_LCD_misc:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           intcon2	equ	0xFF1
  5410                           postinc0	equ	0xFEE
  5411                           wreg	equ	0xFE8
  5412                           postdec1	equ	0xFE5
  5413                           fsr1l	equ	0xFE1
  5414                           status	equ	0xFD8
  5415                           
  5416 ;; *************** function _get_full_ADC *****************
  5417 ;; Defined at:
  5418 ;;		line 307 in file "Lab8test2.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  result          2    4[COMRAM] unsigned int 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  2    0[COMRAM] unsigned int 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;Total ram usage:        6 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;;		_update_LCD_misc
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text22
  5447  00DA3A                     __ptext22:
  5448                           	opt stack 0
  5449  00DA3A                     _get_full_ADC:
  5450                           	opt stack 30
  5451                           
  5452                           ;Lab8test2.c: 309: unsigned int result;
  5453                           ;Lab8test2.c: 310: ADCON0bits.GO=1;
  5454                           
  5455                           ;incstack = 0
  5456  00DA3A  82C2               	bsf	4034,1,c	;volatile
  5457                           
  5458                           ;Lab8test2.c: 311: while(ADCON0bits.DONE==1);
  5459  00DA3C  D000               	goto	l380
  5460  00DA3E                     l380:
  5461  00DA3E  B2C2               	btfsc	4034,1,c	;volatile
  5462  00DA40  D7FE               	goto	l380
  5463                           
  5464                           ;Lab8test2.c: 312: result = (ADRESH * 0x100) + ADRESL;
  5465  00DA42  50C4               	movf	4036,w,c	;volatile
  5466  00DA44  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5467  00DA46  6A03               	clrf	??_get_full_ADC& (0+255),c
  5468  00DA48  50C3               	movf	4035,w,c	;volatile
  5469  00DA4A  2403               	addwf	??_get_full_ADC,w,c
  5470  00DA4C  6E05               	movwf	get_full_ADC@result,c
  5471  00DA4E  0E00               	movlw	0
  5472  00DA50  2004               	addwfc	??_get_full_ADC+1,w,c
  5473  00DA52  6E06               	movwf	get_full_ADC@result+1,c
  5474                           
  5475                           ;Lab8test2.c: 314: return result;
  5476  00DA54  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5477  00DA58  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5478  00DA5C  D000               	goto	l383
  5479  00DA5E                     l383:
  5480  00DA5E  0012               	return		;funcret
  5481  00DA60                     __end_of_get_full_ADC:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           intcon2	equ	0xFF1
  5488                           postinc0	equ	0xFEE
  5489                           wreg	equ	0xFE8
  5490                           postdec1	equ	0xFE5
  5491                           fsr1l	equ	0xFE1
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function ___ftge *****************
  5495 ;; Defined at:
  5496 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  ff1             3    0[COMRAM] float 
  5499 ;;  ff2             3    3[COMRAM] float 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5511 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;Total ram usage:        9 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_main
  5521 ;;		_update_LCD_misc
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text23
  5526  00E2EE                     __ptext23:
  5527                           	opt stack 0
  5528  00E2EE                     ___ftge:
  5529                           	opt stack 30
  5530                           
  5531                           ;incstack = 0
  5532  00E2EE  AE03               	btfss	___ftge@ff1+2,7,c
  5533  00E2F0  D017               	goto	l2910
  5534  00E2F2  C001  F007         	movff	___ftge@ff1,??___ftge
  5535  00E2F6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5536  00E2FA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5537  00E2FE  1E07               	comf	??___ftge,f,c
  5538  00E300  1E08               	comf	??___ftge+1,f,c
  5539  00E302  1E09               	comf	??___ftge+2,f,c
  5540  00E304  2A07               	incf	??___ftge,f,c
  5541  00E306  0E00               	movlw	0
  5542  00E308  2208               	addwfc	??___ftge+1,f,c
  5543  00E30A  2209               	addwfc	??___ftge+2,f,c
  5544  00E30C  0E00               	movlw	0
  5545  00E30E  2407               	addwf	??___ftge,w,c
  5546  00E310  6E01               	movwf	___ftge@ff1,c
  5547  00E312  0E00               	movlw	0
  5548  00E314  2008               	addwfc	??___ftge+1,w,c
  5549  00E316  6E02               	movwf	___ftge@ff1+1,c
  5550  00E318  0E80               	movlw	128
  5551  00E31A  2009               	addwfc	??___ftge+2,w,c
  5552  00E31C  6E03               	movwf	___ftge@ff1+2,c
  5553  00E31E  D000               	goto	l2910
  5554  00E320                     l2910:
  5555  00E320  AE06               	btfss	___ftge@ff2+2,7,c
  5556  00E322  D017               	goto	l2914
  5557  00E324  C004  F007         	movff	___ftge@ff2,??___ftge
  5558  00E328  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5559  00E32C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5560  00E330  1E07               	comf	??___ftge,f,c
  5561  00E332  1E08               	comf	??___ftge+1,f,c
  5562  00E334  1E09               	comf	??___ftge+2,f,c
  5563  00E336  2A07               	incf	??___ftge,f,c
  5564  00E338  0E00               	movlw	0
  5565  00E33A  2208               	addwfc	??___ftge+1,f,c
  5566  00E33C  2209               	addwfc	??___ftge+2,f,c
  5567  00E33E  0E00               	movlw	0
  5568  00E340  2407               	addwf	??___ftge,w,c
  5569  00E342  6E04               	movwf	___ftge@ff2,c
  5570  00E344  0E00               	movlw	0
  5571  00E346  2008               	addwfc	??___ftge+1,w,c
  5572  00E348  6E05               	movwf	___ftge@ff2+1,c
  5573  00E34A  0E80               	movlw	128
  5574  00E34C  2009               	addwfc	??___ftge+2,w,c
  5575  00E34E  6E06               	movwf	___ftge@ff2+2,c
  5576  00E350  D000               	goto	l2914
  5577  00E352                     l2914:
  5578  00E352  0E00               	movlw	0
  5579  00E354  1A01               	xorwf	___ftge@ff1,f,c
  5580  00E356  0E00               	movlw	0
  5581  00E358  1A02               	xorwf	___ftge@ff1+1,f,c
  5582  00E35A  0E80               	movlw	128
  5583  00E35C  1A03               	xorwf	___ftge@ff1+2,f,c
  5584  00E35E  0E00               	movlw	0
  5585  00E360  1A04               	xorwf	___ftge@ff2,f,c
  5586  00E362  0E00               	movlw	0
  5587  00E364  1A05               	xorwf	___ftge@ff2+1,f,c
  5588  00E366  0E80               	movlw	128
  5589  00E368  1A06               	xorwf	___ftge@ff2+2,f,c
  5590  00E36A  5004               	movf	___ftge@ff2,w,c
  5591  00E36C  5C01               	subwf	___ftge@ff1,w,c
  5592  00E36E  5005               	movf	___ftge@ff2+1,w,c
  5593  00E370  5802               	subwfb	___ftge@ff1+1,w,c
  5594  00E372  5006               	movf	___ftge@ff2+2,w,c
  5595  00E374  5803               	subwfb	___ftge@ff1+2,w,c
  5596  00E376  B0D8               	btfsc	status,0,c
  5597  00E378  D002               	goto	l2920
  5598  00E37A  90D8               	bcf	status,0,c
  5599  00E37C  D002               	goto	l930
  5600  00E37E                     l2920:
  5601  00E37E  80D8               	bsf	status,0,c
  5602  00E380  D000               	goto	l930
  5603  00E382                     l930:
  5604  00E382  0012               	return		;funcret
  5605  00E384                     __end_of___ftge:
  5606                           	opt stack 0
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           intcon2	equ	0xFF1
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           postdec1	equ	0xFE5
  5615                           fsr1l	equ	0xFE1
  5616                           status	equ	0xFD8
  5617                           
  5618 ;; *************** function ___ftdiv *****************
  5619 ;; Defined at:
  5620 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  f1              3   12[COMRAM] float 
  5623 ;;  f2              3   15[COMRAM] float 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  f3              3   22[COMRAM] float 
  5626 ;;  sign            1   26[COMRAM] unsigned char 
  5627 ;;  exp             1   25[COMRAM] unsigned char 
  5628 ;;  cntr            1   21[COMRAM] unsigned char 
  5629 ;; Return value:  Size  Location     Type
  5630 ;;                  3   12[COMRAM] float 
  5631 ;; Registers used:
  5632 ;;		wreg, status,2, status,0, cstack
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5638 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;Total ram usage:       15 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:    1
  5645 ;; This function calls:
  5646 ;;		___ftpack
  5647 ;; This function is called by:
  5648 ;;		_main
  5649 ;;		_update_LCD_misc
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text24
  5654  00E8E0                     __ptext24:
  5655                           	opt stack 0
  5656  00E8E0                     ___ftdiv:
  5657                           	opt stack 29
  5658                           
  5659                           ;incstack = 0
  5660  00E8E0  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5661  00E8E4  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5662  00E8E6  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5663  00E8E8  340E               	rlcf	___ftdiv@f1+1,w,c
  5664  00E8EA  3613               	rlcf	??___ftdiv& (0+255),f,c
  5665  00E8EC  E301               	bnc	u1751
  5666  00E8EE  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5667  00E8F0                     u1751:
  5668  00E8F0  5013               	movf	??___ftdiv,w,c
  5669  00E8F2  6E1A               	movwf	___ftdiv@exp,c
  5670  00E8F4  501A               	movf	___ftdiv@exp,w,c
  5671  00E8F6  A4D8               	btfss	status,2,c
  5672  00E8F8  D002               	goto	l2854
  5673  00E8FA  D00E               	goto	l2856
  5674  00E8FC  D061               	goto	l921
  5675  00E8FE                     l2854:
  5676  00E8FE  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5677  00E902  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5678  00E904  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5679  00E906  3411               	rlcf	___ftdiv@f2+1,w,c
  5680  00E908  3613               	rlcf	??___ftdiv& (0+255),f,c
  5681  00E90A  E301               	bnc	u1771
  5682  00E90C  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5683  00E90E                     u1771:
  5684  00E90E  5013               	movf	??___ftdiv,w,c
  5685  00E910  6E1B               	movwf	___ftdiv@sign,c
  5686  00E912  501B               	movf	___ftdiv@sign,w,c
  5687  00E914  A4D8               	btfss	status,2,c
  5688  00E916  D007               	goto	l2860
  5689  00E918                     l2856:
  5690  00E918  0E00               	movlw	0
  5691  00E91A  6E0D               	movwf	?___ftdiv,c
  5692  00E91C  0E00               	movlw	0
  5693  00E91E  6E0E               	movwf	?___ftdiv+1,c
  5694  00E920  0E00               	movlw	0
  5695  00E922  6E0F               	movwf	?___ftdiv+2,c
  5696  00E924  D04D               	goto	l921
  5697  00E926                     l2860:
  5698  00E926  0E00               	movlw	0
  5699  00E928  6E17               	movwf	___ftdiv@f3,c
  5700  00E92A  0E00               	movlw	0
  5701  00E92C  6E18               	movwf	___ftdiv@f3+1,c
  5702  00E92E  0E00               	movlw	0
  5703  00E930  6E19               	movwf	___ftdiv@f3+2,c
  5704  00E932  501B               	movf	___ftdiv@sign,w,c
  5705  00E934  0F89               	addlw	137
  5706  00E936  5E1A               	subwf	___ftdiv@exp,f,c
  5707  00E938  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5708  00E93C  5012               	movf	___ftdiv@f2+2,w,c
  5709  00E93E  1A1B               	xorwf	___ftdiv@sign,f,c
  5710  00E940  0E80               	movlw	128
  5711  00E942  161B               	andwf	___ftdiv@sign,f,c
  5712  00E944  8E0E               	bsf	___ftdiv@f1+1,7,c
  5713  00E946  0EFF               	movlw	255
  5714  00E948  160D               	andwf	___ftdiv@f1,f,c
  5715  00E94A  0EFF               	movlw	255
  5716  00E94C  160E               	andwf	___ftdiv@f1+1,f,c
  5717  00E94E  0E00               	movlw	0
  5718  00E950  160F               	andwf	___ftdiv@f1+2,f,c
  5719  00E952  8E11               	bsf	___ftdiv@f2+1,7,c
  5720  00E954  0EFF               	movlw	255
  5721  00E956  1610               	andwf	___ftdiv@f2,f,c
  5722  00E958  0EFF               	movlw	255
  5723  00E95A  1611               	andwf	___ftdiv@f2+1,f,c
  5724  00E95C  0E00               	movlw	0
  5725  00E95E  1612               	andwf	___ftdiv@f2+2,f,c
  5726  00E960  0E18               	movlw	24
  5727  00E962  6E16               	movwf	___ftdiv@cntr,c
  5728  00E964  D000               	goto	l2880
  5729  00E966                     l2880:
  5730  00E966  90D8               	bcf	status,0,c
  5731  00E968  3617               	rlcf	___ftdiv@f3,f,c
  5732  00E96A  3618               	rlcf	___ftdiv@f3+1,f,c
  5733  00E96C  3619               	rlcf	___ftdiv@f3+2,f,c
  5734  00E96E  5010               	movf	___ftdiv@f2,w,c
  5735  00E970  5C0D               	subwf	___ftdiv@f1,w,c
  5736  00E972  5011               	movf	___ftdiv@f2+1,w,c
  5737  00E974  580E               	subwfb	___ftdiv@f1+1,w,c
  5738  00E976  5012               	movf	___ftdiv@f2+2,w,c
  5739  00E978  580F               	subwfb	___ftdiv@f1+2,w,c
  5740  00E97A  A0D8               	btfss	status,0,c
  5741  00E97C  D007               	goto	l924
  5742  00E97E  5010               	movf	___ftdiv@f2,w,c
  5743  00E980  5E0D               	subwf	___ftdiv@f1,f,c
  5744  00E982  5011               	movf	___ftdiv@f2+1,w,c
  5745  00E984  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5746  00E986  5012               	movf	___ftdiv@f2+2,w,c
  5747  00E988  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5748  00E98A  8017               	bsf	___ftdiv@f3,0,c
  5749  00E98C                     l924:
  5750  00E98C  90D8               	bcf	status,0,c
  5751  00E98E  360D               	rlcf	___ftdiv@f1,f,c
  5752  00E990  360E               	rlcf	___ftdiv@f1+1,f,c
  5753  00E992  360F               	rlcf	___ftdiv@f1+2,f,c
  5754  00E994  2E16               	decfsz	___ftdiv@cntr,f,c
  5755  00E996  D7E7               	goto	l2880
  5756  00E998  D000               	goto	l2890
  5757  00E99A                     l2890:
  5758  00E99A  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5759  00E99E  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5760  00E9A2  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5761  00E9A6  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5762  00E9AA  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5763  00E9AE  EC30  F073         	call	___ftpack	;wreg free
  5764  00E9B2  C001  F00D         	movff	?___ftpack,?___ftdiv
  5765  00E9B6  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5766  00E9BA  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5767  00E9BE  D000               	goto	l921
  5768  00E9C0                     l921:
  5769  00E9C0  0012               	return		;funcret
  5770  00E9C2                     __end_of___ftdiv:
  5771                           	opt stack 0
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           intcon2	equ	0xFF1
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1l	equ	0xFE1
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function ___awtoft *****************
  5784 ;; Defined at:
  5785 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  c               2    8[COMRAM] int 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  sign            1   11[COMRAM] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  3    8[COMRAM] float 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5799 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;Total ram usage:        4 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    1
  5806 ;; This function calls:
  5807 ;;		___ftpack
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;;		_update_LCD_misc
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text25
  5815  00DC0C                     __ptext25:
  5816                           	opt stack 0
  5817  00DC0C                     ___awtoft:
  5818                           	opt stack 29
  5819                           
  5820                           ;incstack = 0
  5821  00DC0C  0E00               	movlw	0
  5822  00DC0E  6E0C               	movwf	___awtoft@sign,c
  5823  00DC10  AE0A               	btfss	___awtoft@c+1,7,c
  5824  00DC12  D007               	goto	l2902
  5825  00DC14  6C09               	negf	___awtoft@c,c
  5826  00DC16  1E0A               	comf	___awtoft@c+1,f,c
  5827  00DC18  B0D8               	btfsc	status,0,c
  5828  00DC1A  2A0A               	incf	___awtoft@c+1,f,c
  5829  00DC1C  0E01               	movlw	1
  5830  00DC1E  6E0C               	movwf	___awtoft@sign,c
  5831  00DC20  D000               	goto	l2902
  5832  00DC22                     l2902:
  5833  00DC22  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5834  00DC26  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5835  00DC2A  6A03               	clrf	___ftpack@arg+2,c
  5836  00DC2C  0E8E               	movlw	142
  5837  00DC2E  6E04               	movwf	___ftpack@exp,c
  5838  00DC30  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5839  00DC34  EC30  F073         	call	___ftpack	;wreg free
  5840  00DC38  C001  F009         	movff	?___ftpack,?___awtoft
  5841  00DC3C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5842  00DC40  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5843  00DC44  D000               	goto	l759
  5844  00DC46                     l759:
  5845  00DC46  0012               	return		;funcret
  5846  00DC48                     __end_of___awtoft:
  5847                           	opt stack 0
  5848                           tblptru	equ	0xFF8
  5849                           tblptrh	equ	0xFF7
  5850                           tblptrl	equ	0xFF6
  5851                           tablat	equ	0xFF5
  5852                           intcon2	equ	0xFF1
  5853                           postinc0	equ	0xFEE
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           fsr1l	equ	0xFE1
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function ___ftpack *****************
  5860 ;; Defined at:
  5861 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  arg             3    0[COMRAM] unsigned um
  5864 ;;  exp             1    3[COMRAM] unsigned char 
  5865 ;;  sign            1    4[COMRAM] unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;		None
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  3    0[COMRAM] float 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5877 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;Total ram usage:        8 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		___awtoft
  5887 ;;		___ftdiv
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text26
  5892  00E660                     __ptext26:
  5893                           	opt stack 0
  5894  00E660                     ___ftpack:
  5895                           	opt stack 29
  5896                           
  5897                           ;incstack = 0
  5898  00E660  5004               	movf	___ftpack@exp,w,c
  5899  00E662  B4D8               	btfsc	status,2,c
  5900  00E664  D005               	goto	l2740
  5901  00E666  5001               	movf	___ftpack@arg,w,c
  5902  00E668  1002               	iorwf	___ftpack@arg+1,w,c
  5903  00E66A  1003               	iorwf	___ftpack@arg+2,w,c
  5904  00E66C  A4D8               	btfss	status,2,c
  5905  00E66E  D00E               	goto	l2746
  5906  00E670                     l2740:
  5907  00E670  0E00               	movlw	0
  5908  00E672  6E01               	movwf	?___ftpack,c
  5909  00E674  0E00               	movlw	0
  5910  00E676  6E02               	movwf	?___ftpack+1,c
  5911  00E678  0E00               	movlw	0
  5912  00E67A  6E03               	movwf	?___ftpack+2,c
  5913  00E67C  D053               	goto	l849
  5914  00E67E  D006               	goto	l2746
  5915  00E680                     l2744:
  5916  00E680  2A04               	incf	___ftpack@exp,f,c
  5917  00E682  90D8               	bcf	status,0,c
  5918  00E684  3203               	rrcf	___ftpack@arg+2,f,c
  5919  00E686  3202               	rrcf	___ftpack@arg+1,f,c
  5920  00E688  3201               	rrcf	___ftpack@arg,f,c
  5921  00E68A  D000               	goto	l2746
  5922  00E68C                     l2746:
  5923  00E68C  0E00               	movlw	0
  5924  00E68E  1401               	andwf	___ftpack@arg,w,c
  5925  00E690  6E06               	movwf	??___ftpack& (0+255),c
  5926  00E692  0E00               	movlw	0
  5927  00E694  1402               	andwf	___ftpack@arg+1,w,c
  5928  00E696  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5929  00E698  0EFE               	movlw	254
  5930  00E69A  1403               	andwf	___ftpack@arg+2,w,c
  5931  00E69C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5932  00E69E  5006               	movf	??___ftpack,w,c
  5933  00E6A0  1007               	iorwf	??___ftpack+1,w,c
  5934  00E6A2  1008               	iorwf	??___ftpack+2,w,c
  5935  00E6A4  B4D8               	btfsc	status,2,c
  5936  00E6A6  D00E               	goto	l2752
  5937  00E6A8  D7EB               	goto	l2744
  5938  00E6AA  D00C               	goto	l2752
  5939  00E6AC                     l2748:
  5940  00E6AC  2A04               	incf	___ftpack@exp,f,c
  5941  00E6AE  0E01               	movlw	1
  5942  00E6B0  2601               	addwf	___ftpack@arg,f,c
  5943  00E6B2  0E00               	movlw	0
  5944  00E6B4  2202               	addwfc	___ftpack@arg+1,f,c
  5945  00E6B6  0E00               	movlw	0
  5946  00E6B8  2203               	addwfc	___ftpack@arg+2,f,c
  5947  00E6BA  90D8               	bcf	status,0,c
  5948  00E6BC  3203               	rrcf	___ftpack@arg+2,f,c
  5949  00E6BE  3202               	rrcf	___ftpack@arg+1,f,c
  5950  00E6C0  3201               	rrcf	___ftpack@arg,f,c
  5951  00E6C2  D000               	goto	l2752
  5952  00E6C4                     l2752:
  5953  00E6C4  0E00               	movlw	0
  5954  00E6C6  1401               	andwf	___ftpack@arg,w,c
  5955  00E6C8  6E06               	movwf	??___ftpack& (0+255),c
  5956  00E6CA  0E00               	movlw	0
  5957  00E6CC  1402               	andwf	___ftpack@arg+1,w,c
  5958  00E6CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5959  00E6D0  0EFF               	movlw	255
  5960  00E6D2  1403               	andwf	___ftpack@arg+2,w,c
  5961  00E6D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5962  00E6D6  5006               	movf	??___ftpack,w,c
  5963  00E6D8  1007               	iorwf	??___ftpack+1,w,c
  5964  00E6DA  1008               	iorwf	??___ftpack+2,w,c
  5965  00E6DC  B4D8               	btfsc	status,2,c
  5966  00E6DE  D008               	goto	l2756
  5967  00E6E0  D7E5               	goto	l2748
  5968  00E6E2  D006               	goto	l2756
  5969  00E6E4                     l2754:
  5970  00E6E4  0604               	decf	___ftpack@exp,f,c
  5971  00E6E6  90D8               	bcf	status,0,c
  5972  00E6E8  3601               	rlcf	___ftpack@arg,f,c
  5973  00E6EA  3602               	rlcf	___ftpack@arg+1,f,c
  5974  00E6EC  3603               	rlcf	___ftpack@arg+2,f,c
  5975  00E6EE  D000               	goto	l2756
  5976  00E6F0                     l2756:
  5977  00E6F0  BE02               	btfsc	___ftpack@arg+1,7,c
  5978  00E6F2  D004               	goto	l860
  5979  00E6F4  0E02               	movlw	2
  5980  00E6F6  6004               	cpfslt	___ftpack@exp,c
  5981  00E6F8  D7F5               	goto	l2754
  5982  00E6FA  D000               	goto	l860
  5983  00E6FC                     l860:
  5984  00E6FC  B004               	btfsc	___ftpack@exp,0,c
  5985  00E6FE  D002               	goto	l2762
  5986  00E700  9E02               	bcf	___ftpack@arg+1,7,c
  5987  00E702  D000               	goto	l2762
  5988  00E704                     l2762:
  5989  00E704  90D8               	bcf	status,0,c
  5990  00E706  3204               	rrcf	___ftpack@exp,f,c
  5991  00E708  5004               	movf	___ftpack@exp,w,c
  5992  00E70A  1203               	iorwf	___ftpack@arg+2,f,c
  5993  00E70C  5005               	movf	___ftpack@sign,w,c
  5994  00E70E  B4D8               	btfsc	status,2,c
  5995  00E710  D002               	goto	l2768
  5996  00E712  8E03               	bsf	___ftpack@arg+2,7,c
  5997  00E714  D000               	goto	l2768
  5998  00E716                     l2768:
  5999  00E716  C001  F001         	movff	___ftpack@arg,?___ftpack
  6000  00E71A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6001  00E71E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6002  00E722  D000               	goto	l849
  6003  00E724                     l849:
  6004  00E724  0012               	return		;funcret
  6005  00E726                     __end_of___ftpack:
  6006                           	opt stack 0
  6007                           tblptru	equ	0xFF8
  6008                           tblptrh	equ	0xFF7
  6009                           tblptrl	equ	0xFF6
  6010                           tablat	equ	0xFF5
  6011                           intcon2	equ	0xFF1
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           postdec1	equ	0xFE5
  6015                           fsr1l	equ	0xFE1
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function _strcpy *****************
  6019 ;; Defined at:
  6020 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  to              2    0[COMRAM] PTR unsigned char 
  6023 ;;		 -> NULL(0), buffer(31), 
  6024 ;;  from            2    2[COMRAM] PTR const unsigned char 
  6025 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6026 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6027 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6028 ;;		 -> STR_2(6), STR_1(20), 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  cp              2    4[COMRAM] PTR unsigned char 
  6031 ;;		 -> NULL(0), buffer(31), 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  2    0[COMRAM] PTR unsigned char 
  6034 ;; Registers used:
  6035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;Total ram usage:        6 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_Initialize_Screen
  6051 ;;		_Wait_One_Second
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text27
  6056  00DB38                     __ptext27:
  6057                           	opt stack 0
  6058  00DB38                     _strcpy:
  6059                           	opt stack 27
  6060                           
  6061                           ;incstack = 0
  6062  00DB38  C001  F005         	movff	strcpy@to,strcpy@cp
  6063  00DB3C  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  6064  00DB40  D005               	goto	l2992
  6065  00DB42                     l2990:
  6066  00DB42  4A05               	infsnz	strcpy@cp,f,c
  6067  00DB44  2A06               	incf	strcpy@cp+1,f,c
  6068  00DB46  4A03               	infsnz	strcpy@from,f,c
  6069  00DB48  2A04               	incf	strcpy@from+1,f,c
  6070  00DB4A  D000               	goto	l2992
  6071  00DB4C                     l2992:
  6072  00DB4C  C003  FFF6         	movff	strcpy@from,tblptrl
  6073  00DB50  C004  FFF7         	movff	strcpy@from+1,tblptrh
  6074  00DB54                     	if	0	;tblptru may be non-zero
  6075  00DB54                     	endif
  6076  00DB54                     	if	0	;tblptru may be non-zero
  6077  00DB54                     	endif
  6078  00DB54  C005  FFD9         	movff	strcpy@cp,fsr2l
  6079  00DB58  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  6080  00DB5C  0008               	tblrd		*
  6081  00DB5E  CFF5 FFDF          	movff	tablat,indf2
  6082  00DB62  50DF               	movf	indf2,w,c
  6083  00DB64  A4D8               	btfss	status,2,c
  6084  00DB66  D7ED               	goto	l2990
  6085                           
  6086                           ;	Return value of _strcpy is never used
  6087  00DB68  0012               	return		;funcret
  6088  00DB6A                     __end_of_strcpy:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           intcon2	equ	0xFF1
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _Set_NSLT *****************
  6105 ;; Defined at:
  6106 ;;		line 331 in file "Lab8test2.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  color           1    wreg     unsigned char 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  color           1    0[COMRAM] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_Day_Mode
  6130 ;;		_Night_Mode
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text28
  6135  00DBD6                     __ptext28:
  6136                           	opt stack 0
  6137  00DBD6                     _Set_NSLT:
  6138                           	opt stack 29
  6139                           
  6140                           ;incstack = 0
  6141                           ;Set_NSLT@color stored from wreg
  6142  00DBD6  6E01               	movwf	Set_NSLT@color,c
  6143                           
  6144                           ;Lab8test2.c: 333: switch (color)
  6145  00DBD8  D00A               	goto	l2020
  6146  00DBDA                     l396:
  6147  00DBDA  9881               	bcf	3969,4,c	;volatile
  6148  00DBDC  D001               	goto	L6
  6149  00DBDE                     l398:
  6150  00DBDE  8881               	bsf	3969,4,c	;volatile
  6151  00DBE0                     L6:
  6152  00DBE0  9A81               	bcf	3969,5,c	;volatile
  6153  00DBE2  D013               	goto	l401
  6154  00DBE4                     l399:
  6155  00DBE4  9881               	bcf	3969,4,c	;volatile
  6156  00DBE6  D001               	goto	L7
  6157  00DBE8                     l400:
  6158  00DBE8  8881               	bsf	3969,4,c	;volatile
  6159  00DBEA                     L7:
  6160  00DBEA  8A81               	bsf	3969,5,c	;volatile
  6161                           
  6162                           ;Lab8test2.c: 339: }
  6163  00DBEC  D00E               	goto	l401
  6164  00DBEE                     l2020:
  6165  00DBEE  5001               	movf	Set_NSLT@color,w,c
  6166                           
  6167                           ; Switch size 1, requested type "space"
  6168                           ; Number of cases is 4, Range of values is 0 to 3
  6169                           ; switch strategies available:
  6170                           ; Name         Instructions Cycles
  6171                           ; simple_byte           13     7 (average)
  6172                           ;	Chosen strategy is simple_byte
  6173  00DBF0  0A00               	xorlw	0	; case 0
  6174  00DBF2  B4D8               	btfsc	status,2,c
  6175  00DBF4  D7F2               	goto	l396
  6176  00DBF6  0A01               	xorlw	1	; case 1
  6177  00DBF8  B4D8               	btfsc	status,2,c
  6178  00DBFA  D7F1               	goto	l398
  6179  00DBFC  0A03               	xorlw	3	; case 2
  6180  00DBFE  B4D8               	btfsc	status,2,c
  6181  00DC00  D7F1               	goto	l399
  6182  00DC02  0A01               	xorlw	1	; case 3
  6183  00DC04  B4D8               	btfsc	status,2,c
  6184  00DC06  D7F0               	goto	l400
  6185  00DC08  D000               	goto	l401
  6186  00DC0A                     l401:
  6187  00DC0A  0012               	return		;funcret
  6188  00DC0C                     __end_of_Set_NSLT:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           intcon2	equ	0xFF1
  6195                           postinc0	equ	0xFEE
  6196                           wreg	equ	0xFE8
  6197                           postdec1	equ	0xFE5
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           fsr2h	equ	0xFDA
  6201                           fsr2l	equ	0xFD9
  6202                           status	equ	0xFD8
  6203                           
  6204 ;; *************** function _Set_NS *****************
  6205 ;; Defined at:
  6206 ;;		line 317 in file "Lab8test2.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  color           1    wreg     unsigned char 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  color           1   53[COMRAM] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;		None               void
  6213 ;; Registers used:
  6214 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;Total ram usage:        1 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    7
  6227 ;; This function calls:
  6228 ;;		_update_LCD_color
  6229 ;; This function is called by:
  6230 ;;		_Day_Mode
  6231 ;;		_Night_Mode
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text29
  6236  00DD02                     __ptext29:
  6237                           	opt stack 0
  6238  00DD02                     _Set_NS:
  6239                           	opt stack 22
  6240                           
  6241                           ;incstack = 0
  6242                           ;Set_NS@color stored from wreg
  6243  00DD02  6E36               	movwf	Set_NS@color,c
  6244                           
  6245                           ;Lab8test2.c: 319: direction = 2;
  6246  00DD04  0E02               	movlw	2
  6247  00DD06  6E78               	movwf	_direction,c
  6248                           
  6249                           ;Lab8test2.c: 320: update_LCD_color(direction, color);
  6250  00DD08  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  6251  00DD0C  5078               	movf	_direction,w,c
  6252  00DD0E  EC9E  F079         	call	_update_LCD_color
  6253                           
  6254                           ;Lab8test2.c: 322: switch (color)
  6255  00DD12  D00A               	goto	l3432
  6256  00DD14                     l387:
  6257  00DD14  9280               	bcf	3968,1,c	;volatile
  6258  00DD16  D001               	goto	L8
  6259  00DD18                     l389:
  6260  00DD18  8280               	bsf	3968,1,c	;volatile
  6261  00DD1A                     L8:
  6262  00DD1A  9480               	bcf	3968,2,c	;volatile
  6263  00DD1C  D013               	goto	l392
  6264  00DD1E                     l390:
  6265  00DD1E  9280               	bcf	3968,1,c	;volatile
  6266  00DD20  D001               	goto	L9
  6267  00DD22                     l391:
  6268  00DD22  8280               	bsf	3968,1,c	;volatile
  6269  00DD24                     L9:
  6270  00DD24  8480               	bsf	3968,2,c	;volatile
  6271                           
  6272                           ;Lab8test2.c: 328: }
  6273  00DD26  D00E               	goto	l392
  6274  00DD28                     l3432:
  6275  00DD28  5036               	movf	Set_NS@color,w,c
  6276                           
  6277                           ; Switch size 1, requested type "space"
  6278                           ; Number of cases is 4, Range of values is 0 to 3
  6279                           ; switch strategies available:
  6280                           ; Name         Instructions Cycles
  6281                           ; simple_byte           13     7 (average)
  6282                           ;	Chosen strategy is simple_byte
  6283  00DD2A  0A00               	xorlw	0	; case 0
  6284  00DD2C  B4D8               	btfsc	status,2,c
  6285  00DD2E  D7F2               	goto	l387
  6286  00DD30  0A01               	xorlw	1	; case 1
  6287  00DD32  B4D8               	btfsc	status,2,c
  6288  00DD34  D7F1               	goto	l389
  6289  00DD36  0A03               	xorlw	3	; case 2
  6290  00DD38  B4D8               	btfsc	status,2,c
  6291  00DD3A  D7F1               	goto	l390
  6292  00DD3C  0A01               	xorlw	1	; case 3
  6293  00DD3E  B4D8               	btfsc	status,2,c
  6294  00DD40  D7F0               	goto	l391
  6295  00DD42  D000               	goto	l392
  6296  00DD44                     l392:
  6297  00DD44  0012               	return		;funcret
  6298  00DD46                     __end_of_Set_NS:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           intcon2	equ	0xFF1
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postdec1	equ	0xFE5
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _update_LCD_color *****************
  6315 ;; Defined at:
  6316 ;;		line 592 in file "Lab8test2.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  direction       1    wreg     unsigned char 
  6319 ;;  color           1   50[COMRAM] unsigned char 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  direction       1   51[COMRAM] unsigned char 
  6322 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:        3 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    6
  6339 ;; This function calls:
  6340 ;;		_drawCircle
  6341 ;;		_fillCircle
  6342 ;; This function is called by:
  6343 ;;		_Set_NS
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text30
  6348  00F33C                     __ptext30:
  6349                           	opt stack 0
  6350  00F33C                     _update_LCD_color:
  6351                           	opt stack 22
  6352                           
  6353                           ;incstack = 0
  6354                           ;update_LCD_color@direction stored from wreg
  6355  00F33C  6E34               	movwf	update_LCD_color@direction,c
  6356                           
  6357                           ;Lab8test2.c: 594: char Circle_Y;
  6358                           ;Lab8test2.c: 595: Circle_Y = 20 + 15 + direction * 30;
  6359  00F33E  5034               	movf	update_LCD_color@direction,w,c
  6360  00F340  0D1E               	mullw	30
  6361  00F342  50F3               	movf	prodl,w,c
  6362  00F344  0F23               	addlw	35
  6363  00F346  6E35               	movwf	update_LCD_color@Circle_Y,c
  6364                           
  6365                           ;Lab8test2.c: 597: if (color == 0)
  6366  00F348  5033               	movf	update_LCD_color@color,w,c
  6367  00F34A  A4D8               	btfss	status,2,c
  6368  00F34C  D067               	goto	l3282
  6369                           
  6370                           ;Lab8test2.c: 598: {
  6371                           ;Lab8test2.c: 599: fillCircle(40, Circle_Y, 7, 0x0000);
  6372  00F34E  0E00               	movlw	0
  6373  00F350  6E2C               	movwf	fillCircle@x0+1,c
  6374  00F352  0E28               	movlw	40
  6375  00F354  6E2B               	movwf	fillCircle@x0,c
  6376  00F356  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6377  00F35A  6A2E               	clrf	fillCircle@y0+1,c
  6378  00F35C  0E00               	movlw	0
  6379  00F35E  6E30               	movwf	fillCircle@r+1,c
  6380  00F360  0E07               	movlw	7
  6381  00F362  6E2F               	movwf	fillCircle@r,c
  6382  00F364  0E00               	movlw	0
  6383  00F366  6E32               	movwf	fillCircle@color+1,c
  6384  00F368  0E00               	movlw	0
  6385  00F36A  6E31               	movwf	fillCircle@color,c
  6386  00F36C  ECEF  F06E         	call	_fillCircle	;wreg free
  6387                           
  6388                           ;Lab8test2.c: 600: fillCircle(60, Circle_Y, 7, 0x0000);
  6389  00F370  0E00               	movlw	0
  6390  00F372  6E2C               	movwf	fillCircle@x0+1,c
  6391  00F374  0E3C               	movlw	60
  6392  00F376  6E2B               	movwf	fillCircle@x0,c
  6393  00F378  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6394  00F37C  6A2E               	clrf	fillCircle@y0+1,c
  6395  00F37E  0E00               	movlw	0
  6396  00F380  6E30               	movwf	fillCircle@r+1,c
  6397  00F382  0E07               	movlw	7
  6398  00F384  6E2F               	movwf	fillCircle@r,c
  6399  00F386  0E00               	movlw	0
  6400  00F388  6E32               	movwf	fillCircle@color+1,c
  6401  00F38A  0E00               	movlw	0
  6402  00F38C  6E31               	movwf	fillCircle@color,c
  6403  00F38E  ECEF  F06E         	call	_fillCircle	;wreg free
  6404                           
  6405                           ;Lab8test2.c: 601: fillCircle(80, Circle_Y, 7, 0x0000);
  6406  00F392  0E00               	movlw	0
  6407  00F394  6E2C               	movwf	fillCircle@x0+1,c
  6408  00F396  0E50               	movlw	80
  6409  00F398  6E2B               	movwf	fillCircle@x0,c
  6410  00F39A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6411  00F39E  6A2E               	clrf	fillCircle@y0+1,c
  6412  00F3A0  0E00               	movlw	0
  6413  00F3A2  6E30               	movwf	fillCircle@r+1,c
  6414  00F3A4  0E07               	movlw	7
  6415  00F3A6  6E2F               	movwf	fillCircle@r,c
  6416  00F3A8  0E00               	movlw	0
  6417  00F3AA  6E32               	movwf	fillCircle@color+1,c
  6418  00F3AC  0E00               	movlw	0
  6419  00F3AE  6E31               	movwf	fillCircle@color,c
  6420  00F3B0  ECEF  F06E         	call	_fillCircle	;wreg free
  6421                           
  6422                           ;Lab8test2.c: 602: drawCircle(40, Circle_Y, 7, 0xF800);
  6423  00F3B4  0E00               	movlw	0
  6424  00F3B6  6E0D               	movwf	drawCircle@x0+1,c
  6425  00F3B8  0E28               	movlw	40
  6426  00F3BA  6E0C               	movwf	drawCircle@x0,c
  6427  00F3BC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6428  00F3C0  6A0F               	clrf	drawCircle@y0+1,c
  6429  00F3C2  0E00               	movlw	0
  6430  00F3C4  6E11               	movwf	drawCircle@r+1,c
  6431  00F3C6  0E07               	movlw	7
  6432  00F3C8  6E10               	movwf	drawCircle@r,c
  6433  00F3CA  0EF8               	movlw	248
  6434  00F3CC  6E13               	movwf	drawCircle@color+1,c
  6435  00F3CE  0E00               	movlw	0
  6436  00F3D0  6E12               	movwf	drawCircle@color,c
  6437  00F3D2  ECE8  F077         	call	_drawCircle	;wreg free
  6438                           
  6439                           ;Lab8test2.c: 603: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6440  00F3D6  0E00               	movlw	0
  6441  00F3D8  6E0D               	movwf	drawCircle@x0+1,c
  6442  00F3DA  0E3C               	movlw	60
  6443  00F3DC  6E0C               	movwf	drawCircle@x0,c
  6444  00F3DE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6445  00F3E2  6A0F               	clrf	drawCircle@y0+1,c
  6446  00F3E4  0E00               	movlw	0
  6447  00F3E6  6E11               	movwf	drawCircle@r+1,c
  6448  00F3E8  0E07               	movlw	7
  6449  00F3EA  6E10               	movwf	drawCircle@r,c
  6450  00F3EC  0EFF               	movlw	255
  6451  00F3EE  6E13               	movwf	drawCircle@color+1,c
  6452  00F3F0  0EE0               	movlw	224
  6453  00F3F2  6E12               	movwf	drawCircle@color,c
  6454  00F3F4  ECE8  F077         	call	_drawCircle	;wreg free
  6455                           
  6456                           ;Lab8test2.c: 604: drawCircle(80, Circle_Y, 7, 0x07E0);
  6457  00F3F8  0E00               	movlw	0
  6458  00F3FA  6E0D               	movwf	drawCircle@x0+1,c
  6459  00F3FC  0E50               	movlw	80
  6460  00F3FE  6E0C               	movwf	drawCircle@x0,c
  6461  00F400  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6462  00F404  6A0F               	clrf	drawCircle@y0+1,c
  6463  00F406  0E00               	movlw	0
  6464  00F408  6E11               	movwf	drawCircle@r+1,c
  6465  00F40A  0E07               	movlw	7
  6466  00F40C  6E10               	movwf	drawCircle@r,c
  6467  00F40E  0E07               	movlw	7
  6468  00F410  6E13               	movwf	drawCircle@color+1,c
  6469  00F412  0EE0               	movlw	224
  6470  00F414  6E12               	movwf	drawCircle@color,c
  6471  00F416  ECE8  F077         	call	_drawCircle	;wreg free
  6472  00F41A  D000               	goto	l3282
  6473  00F41C                     l3282:
  6474                           
  6475                           ;Lab8test2.c: 605: }
  6476                           ;Lab8test2.c: 607: if (color == 1)
  6477  00F41C  0433               	decf	update_LCD_color@color,w,c
  6478  00F41E  A4D8               	btfss	status,2,c
  6479  00F420  D067               	goto	l3286
  6480                           
  6481                           ;Lab8test2.c: 608: {
  6482                           ;Lab8test2.c: 609: fillCircle(40, Circle_Y, 7, 0xF800);
  6483  00F422  0E00               	movlw	0
  6484  00F424  6E2C               	movwf	fillCircle@x0+1,c
  6485  00F426  0E28               	movlw	40
  6486  00F428  6E2B               	movwf	fillCircle@x0,c
  6487  00F42A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6488  00F42E  6A2E               	clrf	fillCircle@y0+1,c
  6489  00F430  0E00               	movlw	0
  6490  00F432  6E30               	movwf	fillCircle@r+1,c
  6491  00F434  0E07               	movlw	7
  6492  00F436  6E2F               	movwf	fillCircle@r,c
  6493  00F438  0EF8               	movlw	248
  6494  00F43A  6E32               	movwf	fillCircle@color+1,c
  6495  00F43C  0E00               	movlw	0
  6496  00F43E  6E31               	movwf	fillCircle@color,c
  6497  00F440  ECEF  F06E         	call	_fillCircle	;wreg free
  6498                           
  6499                           ;Lab8test2.c: 610: fillCircle(60, Circle_Y, 7, 0x0000);
  6500  00F444  0E00               	movlw	0
  6501  00F446  6E2C               	movwf	fillCircle@x0+1,c
  6502  00F448  0E3C               	movlw	60
  6503  00F44A  6E2B               	movwf	fillCircle@x0,c
  6504  00F44C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6505  00F450  6A2E               	clrf	fillCircle@y0+1,c
  6506  00F452  0E00               	movlw	0
  6507  00F454  6E30               	movwf	fillCircle@r+1,c
  6508  00F456  0E07               	movlw	7
  6509  00F458  6E2F               	movwf	fillCircle@r,c
  6510  00F45A  0E00               	movlw	0
  6511  00F45C  6E32               	movwf	fillCircle@color+1,c
  6512  00F45E  0E00               	movlw	0
  6513  00F460  6E31               	movwf	fillCircle@color,c
  6514  00F462  ECEF  F06E         	call	_fillCircle	;wreg free
  6515                           
  6516                           ;Lab8test2.c: 611: fillCircle(80, Circle_Y, 7, 0x0000);
  6517  00F466  0E00               	movlw	0
  6518  00F468  6E2C               	movwf	fillCircle@x0+1,c
  6519  00F46A  0E50               	movlw	80
  6520  00F46C  6E2B               	movwf	fillCircle@x0,c
  6521  00F46E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6522  00F472  6A2E               	clrf	fillCircle@y0+1,c
  6523  00F474  0E00               	movlw	0
  6524  00F476  6E30               	movwf	fillCircle@r+1,c
  6525  00F478  0E07               	movlw	7
  6526  00F47A  6E2F               	movwf	fillCircle@r,c
  6527  00F47C  0E00               	movlw	0
  6528  00F47E  6E32               	movwf	fillCircle@color+1,c
  6529  00F480  0E00               	movlw	0
  6530  00F482  6E31               	movwf	fillCircle@color,c
  6531  00F484  ECEF  F06E         	call	_fillCircle	;wreg free
  6532                           
  6533                           ;Lab8test2.c: 612: drawCircle(40, Circle_Y, 7, 0xF800);
  6534  00F488  0E00               	movlw	0
  6535  00F48A  6E0D               	movwf	drawCircle@x0+1,c
  6536  00F48C  0E28               	movlw	40
  6537  00F48E  6E0C               	movwf	drawCircle@x0,c
  6538  00F490  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6539  00F494  6A0F               	clrf	drawCircle@y0+1,c
  6540  00F496  0E00               	movlw	0
  6541  00F498  6E11               	movwf	drawCircle@r+1,c
  6542  00F49A  0E07               	movlw	7
  6543  00F49C  6E10               	movwf	drawCircle@r,c
  6544  00F49E  0EF8               	movlw	248
  6545  00F4A0  6E13               	movwf	drawCircle@color+1,c
  6546  00F4A2  0E00               	movlw	0
  6547  00F4A4  6E12               	movwf	drawCircle@color,c
  6548  00F4A6  ECE8  F077         	call	_drawCircle	;wreg free
  6549                           
  6550                           ;Lab8test2.c: 613: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6551  00F4AA  0E00               	movlw	0
  6552  00F4AC  6E0D               	movwf	drawCircle@x0+1,c
  6553  00F4AE  0E3C               	movlw	60
  6554  00F4B0  6E0C               	movwf	drawCircle@x0,c
  6555  00F4B2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6556  00F4B6  6A0F               	clrf	drawCircle@y0+1,c
  6557  00F4B8  0E00               	movlw	0
  6558  00F4BA  6E11               	movwf	drawCircle@r+1,c
  6559  00F4BC  0E07               	movlw	7
  6560  00F4BE  6E10               	movwf	drawCircle@r,c
  6561  00F4C0  0EFF               	movlw	255
  6562  00F4C2  6E13               	movwf	drawCircle@color+1,c
  6563  00F4C4  0EE0               	movlw	224
  6564  00F4C6  6E12               	movwf	drawCircle@color,c
  6565  00F4C8  ECE8  F077         	call	_drawCircle	;wreg free
  6566                           
  6567                           ;Lab8test2.c: 614: drawCircle(80, Circle_Y, 7, 0x07E0);
  6568  00F4CC  0E00               	movlw	0
  6569  00F4CE  6E0D               	movwf	drawCircle@x0+1,c
  6570  00F4D0  0E50               	movlw	80
  6571  00F4D2  6E0C               	movwf	drawCircle@x0,c
  6572  00F4D4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6573  00F4D8  6A0F               	clrf	drawCircle@y0+1,c
  6574  00F4DA  0E00               	movlw	0
  6575  00F4DC  6E11               	movwf	drawCircle@r+1,c
  6576  00F4DE  0E07               	movlw	7
  6577  00F4E0  6E10               	movwf	drawCircle@r,c
  6578  00F4E2  0E07               	movlw	7
  6579  00F4E4  6E13               	movwf	drawCircle@color+1,c
  6580  00F4E6  0EE0               	movlw	224
  6581  00F4E8  6E12               	movwf	drawCircle@color,c
  6582  00F4EA  ECE8  F077         	call	_drawCircle	;wreg free
  6583  00F4EE  D000               	goto	l3286
  6584  00F4F0                     l3286:
  6585                           
  6586                           ;Lab8test2.c: 615: }
  6587                           ;Lab8test2.c: 617: if (color == 3)
  6588  00F4F0  0E03               	movlw	3
  6589  00F4F2  1833               	xorwf	update_LCD_color@color,w,c
  6590  00F4F4  A4D8               	btfss	status,2,c
  6591  00F4F6  D067               	goto	l3290
  6592                           
  6593                           ;Lab8test2.c: 618: {
  6594                           ;Lab8test2.c: 619: fillCircle(40, Circle_Y, 7, 0x0000);
  6595  00F4F8  0E00               	movlw	0
  6596  00F4FA  6E2C               	movwf	fillCircle@x0+1,c
  6597  00F4FC  0E28               	movlw	40
  6598  00F4FE  6E2B               	movwf	fillCircle@x0,c
  6599  00F500  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6600  00F504  6A2E               	clrf	fillCircle@y0+1,c
  6601  00F506  0E00               	movlw	0
  6602  00F508  6E30               	movwf	fillCircle@r+1,c
  6603  00F50A  0E07               	movlw	7
  6604  00F50C  6E2F               	movwf	fillCircle@r,c
  6605  00F50E  0E00               	movlw	0
  6606  00F510  6E32               	movwf	fillCircle@color+1,c
  6607  00F512  0E00               	movlw	0
  6608  00F514  6E31               	movwf	fillCircle@color,c
  6609  00F516  ECEF  F06E         	call	_fillCircle	;wreg free
  6610                           
  6611                           ;Lab8test2.c: 620: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6612  00F51A  0E00               	movlw	0
  6613  00F51C  6E2C               	movwf	fillCircle@x0+1,c
  6614  00F51E  0E3C               	movlw	60
  6615  00F520  6E2B               	movwf	fillCircle@x0,c
  6616  00F522  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6617  00F526  6A2E               	clrf	fillCircle@y0+1,c
  6618  00F528  0E00               	movlw	0
  6619  00F52A  6E30               	movwf	fillCircle@r+1,c
  6620  00F52C  0E07               	movlw	7
  6621  00F52E  6E2F               	movwf	fillCircle@r,c
  6622  00F530  0EFF               	movlw	255
  6623  00F532  6E32               	movwf	fillCircle@color+1,c
  6624  00F534  0EE0               	movlw	224
  6625  00F536  6E31               	movwf	fillCircle@color,c
  6626  00F538  ECEF  F06E         	call	_fillCircle	;wreg free
  6627                           
  6628                           ;Lab8test2.c: 621: fillCircle(80, Circle_Y, 7, 0x0000);
  6629  00F53C  0E00               	movlw	0
  6630  00F53E  6E2C               	movwf	fillCircle@x0+1,c
  6631  00F540  0E50               	movlw	80
  6632  00F542  6E2B               	movwf	fillCircle@x0,c
  6633  00F544  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6634  00F548  6A2E               	clrf	fillCircle@y0+1,c
  6635  00F54A  0E00               	movlw	0
  6636  00F54C  6E30               	movwf	fillCircle@r+1,c
  6637  00F54E  0E07               	movlw	7
  6638  00F550  6E2F               	movwf	fillCircle@r,c
  6639  00F552  0E00               	movlw	0
  6640  00F554  6E32               	movwf	fillCircle@color+1,c
  6641  00F556  0E00               	movlw	0
  6642  00F558  6E31               	movwf	fillCircle@color,c
  6643  00F55A  ECEF  F06E         	call	_fillCircle	;wreg free
  6644                           
  6645                           ;Lab8test2.c: 622: drawCircle(40, Circle_Y, 7, 0xF800);
  6646  00F55E  0E00               	movlw	0
  6647  00F560  6E0D               	movwf	drawCircle@x0+1,c
  6648  00F562  0E28               	movlw	40
  6649  00F564  6E0C               	movwf	drawCircle@x0,c
  6650  00F566  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6651  00F56A  6A0F               	clrf	drawCircle@y0+1,c
  6652  00F56C  0E00               	movlw	0
  6653  00F56E  6E11               	movwf	drawCircle@r+1,c
  6654  00F570  0E07               	movlw	7
  6655  00F572  6E10               	movwf	drawCircle@r,c
  6656  00F574  0EF8               	movlw	248
  6657  00F576  6E13               	movwf	drawCircle@color+1,c
  6658  00F578  0E00               	movlw	0
  6659  00F57A  6E12               	movwf	drawCircle@color,c
  6660  00F57C  ECE8  F077         	call	_drawCircle	;wreg free
  6661                           
  6662                           ;Lab8test2.c: 623: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6663  00F580  0E00               	movlw	0
  6664  00F582  6E0D               	movwf	drawCircle@x0+1,c
  6665  00F584  0E3C               	movlw	60
  6666  00F586  6E0C               	movwf	drawCircle@x0,c
  6667  00F588  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6668  00F58C  6A0F               	clrf	drawCircle@y0+1,c
  6669  00F58E  0E00               	movlw	0
  6670  00F590  6E11               	movwf	drawCircle@r+1,c
  6671  00F592  0E07               	movlw	7
  6672  00F594  6E10               	movwf	drawCircle@r,c
  6673  00F596  0EFF               	movlw	255
  6674  00F598  6E13               	movwf	drawCircle@color+1,c
  6675  00F59A  0EE0               	movlw	224
  6676  00F59C  6E12               	movwf	drawCircle@color,c
  6677  00F59E  ECE8  F077         	call	_drawCircle	;wreg free
  6678                           
  6679                           ;Lab8test2.c: 624: drawCircle(80, Circle_Y, 7, 0x07E0);
  6680  00F5A2  0E00               	movlw	0
  6681  00F5A4  6E0D               	movwf	drawCircle@x0+1,c
  6682  00F5A6  0E50               	movlw	80
  6683  00F5A8  6E0C               	movwf	drawCircle@x0,c
  6684  00F5AA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6685  00F5AE  6A0F               	clrf	drawCircle@y0+1,c
  6686  00F5B0  0E00               	movlw	0
  6687  00F5B2  6E11               	movwf	drawCircle@r+1,c
  6688  00F5B4  0E07               	movlw	7
  6689  00F5B6  6E10               	movwf	drawCircle@r,c
  6690  00F5B8  0E07               	movlw	7
  6691  00F5BA  6E13               	movwf	drawCircle@color+1,c
  6692  00F5BC  0EE0               	movlw	224
  6693  00F5BE  6E12               	movwf	drawCircle@color,c
  6694  00F5C0  ECE8  F077         	call	_drawCircle	;wreg free
  6695  00F5C4  D000               	goto	l3290
  6696  00F5C6                     l3290:
  6697                           
  6698                           ;Lab8test2.c: 625: }
  6699                           ;Lab8test2.c: 628: if (color == 2)
  6700  00F5C6  0E02               	movlw	2
  6701  00F5C8  1833               	xorwf	update_LCD_color@color,w,c
  6702  00F5CA  A4D8               	btfss	status,2,c
  6703  00F5CC  D067               	goto	l473
  6704                           
  6705                           ;Lab8test2.c: 629: {
  6706                           ;Lab8test2.c: 630: fillCircle(40, Circle_Y, 7, 0x0000);
  6707  00F5CE  0E00               	movlw	0
  6708  00F5D0  6E2C               	movwf	fillCircle@x0+1,c
  6709  00F5D2  0E28               	movlw	40
  6710  00F5D4  6E2B               	movwf	fillCircle@x0,c
  6711  00F5D6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6712  00F5DA  6A2E               	clrf	fillCircle@y0+1,c
  6713  00F5DC  0E00               	movlw	0
  6714  00F5DE  6E30               	movwf	fillCircle@r+1,c
  6715  00F5E0  0E07               	movlw	7
  6716  00F5E2  6E2F               	movwf	fillCircle@r,c
  6717  00F5E4  0E00               	movlw	0
  6718  00F5E6  6E32               	movwf	fillCircle@color+1,c
  6719  00F5E8  0E00               	movlw	0
  6720  00F5EA  6E31               	movwf	fillCircle@color,c
  6721  00F5EC  ECEF  F06E         	call	_fillCircle	;wreg free
  6722                           
  6723                           ;Lab8test2.c: 631: fillCircle(60, Circle_Y, 7, 0x0000);
  6724  00F5F0  0E00               	movlw	0
  6725  00F5F2  6E2C               	movwf	fillCircle@x0+1,c
  6726  00F5F4  0E3C               	movlw	60
  6727  00F5F6  6E2B               	movwf	fillCircle@x0,c
  6728  00F5F8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6729  00F5FC  6A2E               	clrf	fillCircle@y0+1,c
  6730  00F5FE  0E00               	movlw	0
  6731  00F600  6E30               	movwf	fillCircle@r+1,c
  6732  00F602  0E07               	movlw	7
  6733  00F604  6E2F               	movwf	fillCircle@r,c
  6734  00F606  0E00               	movlw	0
  6735  00F608  6E32               	movwf	fillCircle@color+1,c
  6736  00F60A  0E00               	movlw	0
  6737  00F60C  6E31               	movwf	fillCircle@color,c
  6738  00F60E  ECEF  F06E         	call	_fillCircle	;wreg free
  6739                           
  6740                           ;Lab8test2.c: 632: fillCircle(80, Circle_Y, 7, 0x07E0);
  6741  00F612  0E00               	movlw	0
  6742  00F614  6E2C               	movwf	fillCircle@x0+1,c
  6743  00F616  0E50               	movlw	80
  6744  00F618  6E2B               	movwf	fillCircle@x0,c
  6745  00F61A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6746  00F61E  6A2E               	clrf	fillCircle@y0+1,c
  6747  00F620  0E00               	movlw	0
  6748  00F622  6E30               	movwf	fillCircle@r+1,c
  6749  00F624  0E07               	movlw	7
  6750  00F626  6E2F               	movwf	fillCircle@r,c
  6751  00F628  0E07               	movlw	7
  6752  00F62A  6E32               	movwf	fillCircle@color+1,c
  6753  00F62C  0EE0               	movlw	224
  6754  00F62E  6E31               	movwf	fillCircle@color,c
  6755  00F630  ECEF  F06E         	call	_fillCircle	;wreg free
  6756                           
  6757                           ;Lab8test2.c: 633: drawCircle(40, Circle_Y, 7, 0xF800);
  6758  00F634  0E00               	movlw	0
  6759  00F636  6E0D               	movwf	drawCircle@x0+1,c
  6760  00F638  0E28               	movlw	40
  6761  00F63A  6E0C               	movwf	drawCircle@x0,c
  6762  00F63C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6763  00F640  6A0F               	clrf	drawCircle@y0+1,c
  6764  00F642  0E00               	movlw	0
  6765  00F644  6E11               	movwf	drawCircle@r+1,c
  6766  00F646  0E07               	movlw	7
  6767  00F648  6E10               	movwf	drawCircle@r,c
  6768  00F64A  0EF8               	movlw	248
  6769  00F64C  6E13               	movwf	drawCircle@color+1,c
  6770  00F64E  0E00               	movlw	0
  6771  00F650  6E12               	movwf	drawCircle@color,c
  6772  00F652  ECE8  F077         	call	_drawCircle	;wreg free
  6773                           
  6774                           ;Lab8test2.c: 634: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6775  00F656  0E00               	movlw	0
  6776  00F658  6E0D               	movwf	drawCircle@x0+1,c
  6777  00F65A  0E3C               	movlw	60
  6778  00F65C  6E0C               	movwf	drawCircle@x0,c
  6779  00F65E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6780  00F662  6A0F               	clrf	drawCircle@y0+1,c
  6781  00F664  0E00               	movlw	0
  6782  00F666  6E11               	movwf	drawCircle@r+1,c
  6783  00F668  0E07               	movlw	7
  6784  00F66A  6E10               	movwf	drawCircle@r,c
  6785  00F66C  0EFF               	movlw	255
  6786  00F66E  6E13               	movwf	drawCircle@color+1,c
  6787  00F670  0EE0               	movlw	224
  6788  00F672  6E12               	movwf	drawCircle@color,c
  6789  00F674  ECE8  F077         	call	_drawCircle	;wreg free
  6790                           
  6791                           ;Lab8test2.c: 635: drawCircle(80, Circle_Y, 7, 0x07E0);
  6792  00F678  0E00               	movlw	0
  6793  00F67A  6E0D               	movwf	drawCircle@x0+1,c
  6794  00F67C  0E50               	movlw	80
  6795  00F67E  6E0C               	movwf	drawCircle@x0,c
  6796  00F680  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6797  00F684  6A0F               	clrf	drawCircle@y0+1,c
  6798  00F686  0E00               	movlw	0
  6799  00F688  6E11               	movwf	drawCircle@r+1,c
  6800  00F68A  0E07               	movlw	7
  6801  00F68C  6E10               	movwf	drawCircle@r,c
  6802  00F68E  0E07               	movlw	7
  6803  00F690  6E13               	movwf	drawCircle@color+1,c
  6804  00F692  0EE0               	movlw	224
  6805  00F694  6E12               	movwf	drawCircle@color,c
  6806  00F696  ECE8  F077         	call	_drawCircle	;wreg free
  6807  00F69A  D000               	goto	l473
  6808  00F69C                     l473:
  6809  00F69C  0012               	return		;funcret
  6810  00F69E                     __end_of_update_LCD_color:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodl	equ	0xFF3
  6817                           intcon2	equ	0xFF1
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           postdec1	equ	0xFE5
  6821                           fsr1l	equ	0xFE1
  6822                           indf2	equ	0xFDF
  6823                           fsr2h	equ	0xFDA
  6824                           fsr2l	equ	0xFD9
  6825                           status	equ	0xFD8
  6826                           
  6827 ;; *************** function _fillCircle *****************
  6828 ;; Defined at:
  6829 ;;		line 651 in file "ST7735_TFT.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  x0              2   42[COMRAM] int 
  6832 ;;  y0              2   44[COMRAM] int 
  6833 ;;  r               2   46[COMRAM] int 
  6834 ;;  color           2   48[COMRAM] unsigned int 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;		None               void
  6839 ;; Registers used:
  6840 ;;		wreg, status,2, status,0, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6846 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;Total ram usage:        8 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    5
  6853 ;; This function calls:
  6854 ;;		_drawFastVLine
  6855 ;;		_fillCircleHelper
  6856 ;; This function is called by:
  6857 ;;		_Initialize_Screen
  6858 ;;		_update_LCD_color
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text31
  6863  00DDDE                     __ptext31:
  6864                           	opt stack 0
  6865  00DDDE                     _fillCircle:
  6866                           	opt stack 22
  6867                           
  6868                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6869                           
  6870                           ;incstack = 0
  6871  00DDDE  502F               	movf	fillCircle@r,w,c
  6872  00DDE0  0800               	sublw	0
  6873  00DDE2  242D               	addwf	fillCircle@y0,w,c
  6874  00DDE4  6E08               	movwf	drawFastVLine@y,c
  6875  00DDE6  80D8               	bsf	status,0,c
  6876  00DDE8  342F               	rlcf	fillCircle@r,w,c
  6877  00DDEA  6E09               	movwf	drawFastVLine@h,c
  6878  00DDEC  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  6879  00DDF0  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  6880  00DDF4  502B               	movf	fillCircle@x0,w,c
  6881  00DDF6  EC5F  F070         	call	_drawFastVLine
  6882                           
  6883                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  6884  00DDFA  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  6885  00DDFE  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6886  00DE02  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  6887  00DE06  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6888  00DE0A  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  6889  00DE0E  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6890  00DE12  0E00               	movlw	0
  6891  00DE14  6E1A               	movwf	fillCircleHelper@cornername+1,c
  6892  00DE16  0E03               	movlw	3
  6893  00DE18  6E19               	movwf	fillCircleHelper@cornername,c
  6894  00DE1A  0E00               	movlw	0
  6895  00DE1C  6E1C               	movwf	fillCircleHelper@delta+1,c
  6896  00DE1E  0E00               	movlw	0
  6897  00DE20  6E1B               	movwf	fillCircleHelper@delta,c
  6898  00DE22  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  6899  00DE26  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6900  00DE2A  ECE2  F075         	call	_fillCircleHelper	;wreg free
  6901  00DE2E  0012               	return		;funcret
  6902  00DE30                     __end_of_fillCircle:
  6903                           	opt stack 0
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodl	equ	0xFF3
  6909                           intcon2	equ	0xFF1
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           postdec1	equ	0xFE5
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _fillCircleHelper *****************
  6920 ;; Defined at:
  6921 ;;		line 626 in file "ST7735_TFT.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  x0              2   18[COMRAM] int 
  6924 ;;  y0              2   20[COMRAM] int 
  6925 ;;  r               2   22[COMRAM] int 
  6926 ;;  cornername      2   24[COMRAM] unsigned int 
  6927 ;;  delta           2   26[COMRAM] int 
  6928 ;;  color           2   28[COMRAM] unsigned int 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  y               2   40[COMRAM] int 
  6931 ;;  x               2   38[COMRAM] int 
  6932 ;;  f               2   36[COMRAM] int 
  6933 ;;  ddF_y           2   34[COMRAM] int 
  6934 ;;  ddF_x           2   32[COMRAM] int 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;		None               void
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:       24 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    4
  6951 ;; This function calls:
  6952 ;;		_drawFastVLine
  6953 ;; This function is called by:
  6954 ;;		_fillCircle
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text32
  6959  00EBC4                     __ptext32:
  6960                           	opt stack 0
  6961  00EBC4                     _fillCircleHelper:
  6962                           	opt stack 22
  6963                           
  6964                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  6965                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6966                           
  6967                           ;incstack = 0
  6968  00EBC4  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6969  00EBC8  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6970  00EBCC  1E1F               	comf	??_fillCircleHelper,f,c
  6971  00EBCE  1E20               	comf	??_fillCircleHelper+1,f,c
  6972  00EBD0  4A1F               	infsnz	??_fillCircleHelper,f,c
  6973  00EBD2  2A20               	incf	??_fillCircleHelper+1,f,c
  6974  00EBD4  0E01               	movlw	1
  6975  00EBD6  241F               	addwf	??_fillCircleHelper,w,c
  6976  00EBD8  6E25               	movwf	fillCircleHelper@f,c
  6977  00EBDA  0E00               	movlw	0
  6978  00EBDC  2020               	addwfc	??_fillCircleHelper+1,w,c
  6979  00EBDE  6E26               	movwf	fillCircleHelper@f+1,c
  6980  00EBE0  0E00               	movlw	0
  6981  00EBE2  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  6982  00EBE4  0E01               	movlw	1
  6983  00EBE6  6E21               	movwf	fillCircleHelper@ddF_x,c
  6984  00EBE8  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6985  00EBEC  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6986  00EBF0  90D8               	bcf	status,0,c
  6987  00EBF2  361F               	rlcf	??_fillCircleHelper,f,c
  6988  00EBF4  3620               	rlcf	??_fillCircleHelper+1,f,c
  6989  00EBF6  1E1F               	comf	??_fillCircleHelper,f,c
  6990  00EBF8  1E20               	comf	??_fillCircleHelper+1,f,c
  6991  00EBFA  4A1F               	infsnz	??_fillCircleHelper,f,c
  6992  00EBFC  2A20               	incf	??_fillCircleHelper+1,f,c
  6993  00EBFE  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6994  00EC02  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6995  00EC06  0E00               	movlw	0
  6996  00EC08  6E28               	movwf	fillCircleHelper@x+1,c
  6997  00EC0A  0E00               	movlw	0
  6998  00EC0C  6E27               	movwf	fillCircleHelper@x,c
  6999  00EC0E  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  7000  00EC12  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7001                           
  7002                           ;ST7735_TFT.c: 630: while (x<y) {
  7003  00EC16  D067               	goto	l2838
  7004  00EC18                     l2818:
  7005                           
  7006                           ;ST7735_TFT.c: 631: if (f >= 0) {
  7007  00EC18  BE26               	btfsc	fillCircleHelper@f+1,7,c
  7008  00EC1A  D00B               	goto	l259
  7009                           
  7010                           ;ST7735_TFT.c: 632: y--;
  7011  00EC1C  0629               	decf	fillCircleHelper@y,f,c
  7012  00EC1E  A0D8               	btfss	status,0,c
  7013  00EC20  062A               	decf	fillCircleHelper@y+1,f,c
  7014                           
  7015                           ;ST7735_TFT.c: 633: ddF_y += 2;
  7016  00EC22  0E02               	movlw	2
  7017  00EC24  2623               	addwf	fillCircleHelper@ddF_y,f,c
  7018  00EC26  0E00               	movlw	0
  7019  00EC28  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7020                           
  7021                           ;ST7735_TFT.c: 634: f += ddF_y;
  7022  00EC2A  5023               	movf	fillCircleHelper@ddF_y,w,c
  7023  00EC2C  2625               	addwf	fillCircleHelper@f,f,c
  7024  00EC2E  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  7025  00EC30  2226               	addwfc	fillCircleHelper@f+1,f,c
  7026  00EC32                     l259:
  7027                           
  7028                           ;ST7735_TFT.c: 635: }
  7029                           ;ST7735_TFT.c: 636: x++;
  7030  00EC32  4A27               	infsnz	fillCircleHelper@x,f,c
  7031  00EC34  2A28               	incf	fillCircleHelper@x+1,f,c
  7032                           
  7033                           ;ST7735_TFT.c: 637: ddF_x += 2;
  7034  00EC36  0E02               	movlw	2
  7035  00EC38  2621               	addwf	fillCircleHelper@ddF_x,f,c
  7036  00EC3A  0E00               	movlw	0
  7037  00EC3C  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7038                           
  7039                           ;ST7735_TFT.c: 638: f += ddF_x;
  7040  00EC3E  5021               	movf	fillCircleHelper@ddF_x,w,c
  7041  00EC40  2625               	addwf	fillCircleHelper@f,f,c
  7042  00EC42  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  7043  00EC44  2226               	addwfc	fillCircleHelper@f+1,f,c
  7044                           
  7045                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  7046  00EC46  A019               	btfss	fillCircleHelper@cornername,0,c
  7047  00EC48  D025               	goto	l2834
  7048                           
  7049                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7050  00EC4A  5029               	movf	fillCircleHelper@y,w,c
  7051  00EC4C  0800               	sublw	0
  7052  00EC4E  2415               	addwf	fillCircleHelper@y0,w,c
  7053  00EC50  6E08               	movwf	drawFastVLine@y,c
  7054  00EC52  5029               	movf	fillCircleHelper@y,w,c
  7055  00EC54  2429               	addwf	fillCircleHelper@y,w,c
  7056  00EC56  241B               	addwf	fillCircleHelper@delta,w,c
  7057  00EC58  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7058  00EC5A  281F               	incf	??_fillCircleHelper,w,c
  7059  00EC5C  6E09               	movwf	drawFastVLine@h,c
  7060  00EC5E  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7061  00EC62  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7062  00EC66  5013               	movf	fillCircleHelper@x0,w,c
  7063  00EC68  2427               	addwf	fillCircleHelper@x,w,c
  7064  00EC6A  EC5F  F070         	call	_drawFastVLine
  7065                           
  7066                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7067  00EC6E  5027               	movf	fillCircleHelper@x,w,c
  7068  00EC70  0800               	sublw	0
  7069  00EC72  2415               	addwf	fillCircleHelper@y0,w,c
  7070  00EC74  6E08               	movwf	drawFastVLine@y,c
  7071  00EC76  5027               	movf	fillCircleHelper@x,w,c
  7072  00EC78  2427               	addwf	fillCircleHelper@x,w,c
  7073  00EC7A  241B               	addwf	fillCircleHelper@delta,w,c
  7074  00EC7C  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7075  00EC7E  281F               	incf	??_fillCircleHelper,w,c
  7076  00EC80  6E09               	movwf	drawFastVLine@h,c
  7077  00EC82  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7078  00EC86  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7079  00EC8A  5013               	movf	fillCircleHelper@x0,w,c
  7080  00EC8C  2429               	addwf	fillCircleHelper@y,w,c
  7081  00EC8E  EC5F  F070         	call	_drawFastVLine
  7082  00EC92  D000               	goto	l2834
  7083  00EC94                     l2834:
  7084                           
  7085                           ;ST7735_TFT.c: 643: }
  7086                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  7087  00EC94  A219               	btfss	fillCircleHelper@cornername,1,c
  7088  00EC96  D027               	goto	l2838
  7089                           
  7090                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7091  00EC98  5029               	movf	fillCircleHelper@y,w,c
  7092  00EC9A  0800               	sublw	0
  7093  00EC9C  2415               	addwf	fillCircleHelper@y0,w,c
  7094  00EC9E  6E08               	movwf	drawFastVLine@y,c
  7095  00ECA0  5029               	movf	fillCircleHelper@y,w,c
  7096  00ECA2  2429               	addwf	fillCircleHelper@y,w,c
  7097  00ECA4  241B               	addwf	fillCircleHelper@delta,w,c
  7098  00ECA6  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7099  00ECA8  281F               	incf	??_fillCircleHelper,w,c
  7100  00ECAA  6E09               	movwf	drawFastVLine@h,c
  7101  00ECAC  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7102  00ECB0  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7103  00ECB4  5027               	movf	fillCircleHelper@x,w,c
  7104  00ECB6  0800               	sublw	0
  7105  00ECB8  2413               	addwf	fillCircleHelper@x0,w,c
  7106  00ECBA  EC5F  F070         	call	_drawFastVLine
  7107                           
  7108                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7109  00ECBE  5027               	movf	fillCircleHelper@x,w,c
  7110  00ECC0  0800               	sublw	0
  7111  00ECC2  2415               	addwf	fillCircleHelper@y0,w,c
  7112  00ECC4  6E08               	movwf	drawFastVLine@y,c
  7113  00ECC6  5027               	movf	fillCircleHelper@x,w,c
  7114  00ECC8  2427               	addwf	fillCircleHelper@x,w,c
  7115  00ECCA  241B               	addwf	fillCircleHelper@delta,w,c
  7116  00ECCC  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7117  00ECCE  281F               	incf	??_fillCircleHelper,w,c
  7118  00ECD0  6E09               	movwf	drawFastVLine@h,c
  7119  00ECD2  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7120  00ECD6  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7121  00ECDA  5029               	movf	fillCircleHelper@y,w,c
  7122  00ECDC  0800               	sublw	0
  7123  00ECDE  2413               	addwf	fillCircleHelper@x0,w,c
  7124  00ECE0  EC5F  F070         	call	_drawFastVLine
  7125  00ECE4  D000               	goto	l2838
  7126  00ECE6                     l2838:
  7127  00ECE6  5029               	movf	fillCircleHelper@y,w,c
  7128  00ECE8  5C27               	subwf	fillCircleHelper@x,w,c
  7129  00ECEA  5028               	movf	fillCircleHelper@x+1,w,c
  7130  00ECEC  0A80               	xorlw	128
  7131  00ECEE  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7132  00ECF0  502A               	movf	fillCircleHelper@y+1,w,c
  7133  00ECF2  0A80               	xorlw	128
  7134  00ECF4  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  7135  00ECF6  A0D8               	btfss	status,0,c
  7136  00ECF8  D78F               	goto	l2818
  7137  00ECFA  0012               	return		;funcret
  7138  00ECFC                     __end_of_fillCircleHelper:
  7139                           	opt stack 0
  7140                           tblptru	equ	0xFF8
  7141                           tblptrh	equ	0xFF7
  7142                           tblptrl	equ	0xFF6
  7143                           tablat	equ	0xFF5
  7144                           prodl	equ	0xFF3
  7145                           intcon2	equ	0xFF1
  7146                           postinc0	equ	0xFEE
  7147                           wreg	equ	0xFE8
  7148                           postdec1	equ	0xFE5
  7149                           fsr1l	equ	0xFE1
  7150                           indf2	equ	0xFDF
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function _drawCircle *****************
  7156 ;; Defined at:
  7157 ;;		line 565 in file "ST7735_TFT.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  x0              2   11[COMRAM] int 
  7160 ;;  y0              2   13[COMRAM] int 
  7161 ;;  r               2   15[COMRAM] int 
  7162 ;;  color           2   17[COMRAM] unsigned int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  y               2   29[COMRAM] int 
  7165 ;;  x               2   27[COMRAM] int 
  7166 ;;  f               2   25[COMRAM] int 
  7167 ;;  ddF_y           2   23[COMRAM] int 
  7168 ;;  ddF_x           2   21[COMRAM] int 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;		None               void
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:       20 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    4
  7185 ;; This function calls:
  7186 ;;		_drawPixel
  7187 ;; This function is called by:
  7188 ;;		_Initialize_Screen
  7189 ;;		_update_LCD_color
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text33
  7194  00EFD0                     __ptext33:
  7195                           	opt stack 0
  7196  00EFD0                     _drawCircle:
  7197                           	opt stack 23
  7198                           
  7199                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  7200                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7201                           
  7202                           ;incstack = 0
  7203  00EFD0  C010  F014         	movff	drawCircle@r,??_drawCircle
  7204  00EFD4  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7205  00EFD8  1E14               	comf	??_drawCircle,f,c
  7206  00EFDA  1E15               	comf	??_drawCircle+1,f,c
  7207  00EFDC  4A14               	infsnz	??_drawCircle,f,c
  7208  00EFDE  2A15               	incf	??_drawCircle+1,f,c
  7209  00EFE0  0E01               	movlw	1
  7210  00EFE2  2414               	addwf	??_drawCircle,w,c
  7211  00EFE4  6E1A               	movwf	drawCircle@f,c
  7212  00EFE6  0E00               	movlw	0
  7213  00EFE8  2015               	addwfc	??_drawCircle+1,w,c
  7214  00EFEA  6E1B               	movwf	drawCircle@f+1,c
  7215  00EFEC  0E00               	movlw	0
  7216  00EFEE  6E17               	movwf	drawCircle@ddF_x+1,c
  7217  00EFF0  0E01               	movlw	1
  7218  00EFF2  6E16               	movwf	drawCircle@ddF_x,c
  7219  00EFF4  C010  F014         	movff	drawCircle@r,??_drawCircle
  7220  00EFF8  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7221  00EFFC  90D8               	bcf	status,0,c
  7222  00EFFE  3614               	rlcf	??_drawCircle,f,c
  7223  00F000  3615               	rlcf	??_drawCircle+1,f,c
  7224  00F002  1E14               	comf	??_drawCircle,f,c
  7225  00F004  1E15               	comf	??_drawCircle+1,f,c
  7226  00F006  4A14               	infsnz	??_drawCircle,f,c
  7227  00F008  2A15               	incf	??_drawCircle+1,f,c
  7228  00F00A  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  7229  00F00E  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7230  00F012  0E00               	movlw	0
  7231  00F014  6E1D               	movwf	drawCircle@x+1,c
  7232  00F016  0E00               	movlw	0
  7233  00F018  6E1C               	movwf	drawCircle@x,c
  7234  00F01A  C010  F01E         	movff	drawCircle@r,drawCircle@y
  7235  00F01E  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  7236                           
  7237                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  7238  00F022  500E               	movf	drawCircle@y0,w,c
  7239  00F024  2410               	addwf	drawCircle@r,w,c
  7240  00F026  6E08               	movwf	drawPixel@y,c
  7241  00F028  C012  F009         	movff	drawCircle@color,drawPixel@color
  7242  00F02C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7243  00F030  500C               	movf	drawCircle@x0,w,c
  7244  00F032  EC84  F06D         	call	_drawPixel
  7245                           
  7246                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  7247  00F036  5010               	movf	drawCircle@r,w,c
  7248  00F038  0800               	sublw	0
  7249  00F03A  240E               	addwf	drawCircle@y0,w,c
  7250  00F03C  6E08               	movwf	drawPixel@y,c
  7251  00F03E  C012  F009         	movff	drawCircle@color,drawPixel@color
  7252  00F042  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7253  00F046  500C               	movf	drawCircle@x0,w,c
  7254  00F048  EC84  F06D         	call	_drawPixel
  7255                           
  7256                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  7257  00F04C  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7258  00F050  C012  F009         	movff	drawCircle@color,drawPixel@color
  7259  00F054  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7260  00F058  500C               	movf	drawCircle@x0,w,c
  7261  00F05A  2410               	addwf	drawCircle@r,w,c
  7262  00F05C  EC84  F06D         	call	_drawPixel
  7263                           
  7264                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  7265  00F060  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7266  00F064  C012  F009         	movff	drawCircle@color,drawPixel@color
  7267  00F068  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7268  00F06C  5010               	movf	drawCircle@r,w,c
  7269  00F06E  0800               	sublw	0
  7270  00F070  240C               	addwf	drawCircle@x0,w,c
  7271  00F072  EC84  F06D         	call	_drawPixel
  7272                           
  7273                           ;ST7735_TFT.c: 573: while (x < y) {
  7274  00F076  D078               	goto	l2984
  7275  00F078                     l2956:
  7276                           
  7277                           ;ST7735_TFT.c: 574: if (f >= 0) {
  7278  00F078  BE1B               	btfsc	drawCircle@f+1,7,c
  7279  00F07A  D00B               	goto	l241
  7280                           
  7281                           ;ST7735_TFT.c: 575: y--;
  7282  00F07C  061E               	decf	drawCircle@y,f,c
  7283  00F07E  A0D8               	btfss	status,0,c
  7284  00F080  061F               	decf	drawCircle@y+1,f,c
  7285                           
  7286                           ;ST7735_TFT.c: 576: ddF_y += 2;
  7287  00F082  0E02               	movlw	2
  7288  00F084  2618               	addwf	drawCircle@ddF_y,f,c
  7289  00F086  0E00               	movlw	0
  7290  00F088  2219               	addwfc	drawCircle@ddF_y+1,f,c
  7291                           
  7292                           ;ST7735_TFT.c: 577: f += ddF_y;
  7293  00F08A  5018               	movf	drawCircle@ddF_y,w,c
  7294  00F08C  261A               	addwf	drawCircle@f,f,c
  7295  00F08E  5019               	movf	drawCircle@ddF_y+1,w,c
  7296  00F090  221B               	addwfc	drawCircle@f+1,f,c
  7297  00F092                     l241:
  7298                           
  7299                           ;ST7735_TFT.c: 578: }
  7300                           ;ST7735_TFT.c: 579: x++;
  7301  00F092  4A1C               	infsnz	drawCircle@x,f,c
  7302  00F094  2A1D               	incf	drawCircle@x+1,f,c
  7303                           
  7304                           ;ST7735_TFT.c: 580: ddF_x += 2;
  7305  00F096  0E02               	movlw	2
  7306  00F098  2616               	addwf	drawCircle@ddF_x,f,c
  7307  00F09A  0E00               	movlw	0
  7308  00F09C  2217               	addwfc	drawCircle@ddF_x+1,f,c
  7309                           
  7310                           ;ST7735_TFT.c: 581: f += ddF_x;
  7311  00F09E  5016               	movf	drawCircle@ddF_x,w,c
  7312  00F0A0  261A               	addwf	drawCircle@f,f,c
  7313  00F0A2  5017               	movf	drawCircle@ddF_x+1,w,c
  7314  00F0A4  221B               	addwfc	drawCircle@f+1,f,c
  7315                           
  7316                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  7317  00F0A6  500E               	movf	drawCircle@y0,w,c
  7318  00F0A8  241E               	addwf	drawCircle@y,w,c
  7319  00F0AA  6E08               	movwf	drawPixel@y,c
  7320  00F0AC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7321  00F0B0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7322  00F0B4  500C               	movf	drawCircle@x0,w,c
  7323  00F0B6  241C               	addwf	drawCircle@x,w,c
  7324  00F0B8  EC84  F06D         	call	_drawPixel
  7325                           
  7326                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  7327  00F0BC  500E               	movf	drawCircle@y0,w,c
  7328  00F0BE  241E               	addwf	drawCircle@y,w,c
  7329  00F0C0  6E08               	movwf	drawPixel@y,c
  7330  00F0C2  C012  F009         	movff	drawCircle@color,drawPixel@color
  7331  00F0C6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7332  00F0CA  501C               	movf	drawCircle@x,w,c
  7333  00F0CC  0800               	sublw	0
  7334  00F0CE  240C               	addwf	drawCircle@x0,w,c
  7335  00F0D0  EC84  F06D         	call	_drawPixel
  7336                           
  7337                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  7338  00F0D4  501E               	movf	drawCircle@y,w,c
  7339  00F0D6  0800               	sublw	0
  7340  00F0D8  240E               	addwf	drawCircle@y0,w,c
  7341  00F0DA  6E08               	movwf	drawPixel@y,c
  7342  00F0DC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7343  00F0E0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7344  00F0E4  500C               	movf	drawCircle@x0,w,c
  7345  00F0E6  241C               	addwf	drawCircle@x,w,c
  7346  00F0E8  EC84  F06D         	call	_drawPixel
  7347                           
  7348                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  7349  00F0EC  501E               	movf	drawCircle@y,w,c
  7350  00F0EE  0800               	sublw	0
  7351  00F0F0  240E               	addwf	drawCircle@y0,w,c
  7352  00F0F2  6E08               	movwf	drawPixel@y,c
  7353  00F0F4  C012  F009         	movff	drawCircle@color,drawPixel@color
  7354  00F0F8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7355  00F0FC  501C               	movf	drawCircle@x,w,c
  7356  00F0FE  0800               	sublw	0
  7357  00F100  240C               	addwf	drawCircle@x0,w,c
  7358  00F102  EC84  F06D         	call	_drawPixel
  7359                           
  7360                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  7361  00F106  500E               	movf	drawCircle@y0,w,c
  7362  00F108  241C               	addwf	drawCircle@x,w,c
  7363  00F10A  6E08               	movwf	drawPixel@y,c
  7364  00F10C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7365  00F110  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7366  00F114  500C               	movf	drawCircle@x0,w,c
  7367  00F116  241E               	addwf	drawCircle@y,w,c
  7368  00F118  EC84  F06D         	call	_drawPixel
  7369                           
  7370                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  7371  00F11C  500E               	movf	drawCircle@y0,w,c
  7372  00F11E  241C               	addwf	drawCircle@x,w,c
  7373  00F120  6E08               	movwf	drawPixel@y,c
  7374  00F122  C012  F009         	movff	drawCircle@color,drawPixel@color
  7375  00F126  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7376  00F12A  501E               	movf	drawCircle@y,w,c
  7377  00F12C  0800               	sublw	0
  7378  00F12E  240C               	addwf	drawCircle@x0,w,c
  7379  00F130  EC84  F06D         	call	_drawPixel
  7380                           
  7381                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  7382  00F134  501C               	movf	drawCircle@x,w,c
  7383  00F136  0800               	sublw	0
  7384  00F138  240E               	addwf	drawCircle@y0,w,c
  7385  00F13A  6E08               	movwf	drawPixel@y,c
  7386  00F13C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7387  00F140  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7388  00F144  500C               	movf	drawCircle@x0,w,c
  7389  00F146  241E               	addwf	drawCircle@y,w,c
  7390  00F148  EC84  F06D         	call	_drawPixel
  7391                           
  7392                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  7393  00F14C  501C               	movf	drawCircle@x,w,c
  7394  00F14E  0800               	sublw	0
  7395  00F150  240E               	addwf	drawCircle@y0,w,c
  7396  00F152  6E08               	movwf	drawPixel@y,c
  7397  00F154  C012  F009         	movff	drawCircle@color,drawPixel@color
  7398  00F158  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7399  00F15C  501E               	movf	drawCircle@y,w,c
  7400  00F15E  0800               	sublw	0
  7401  00F160  240C               	addwf	drawCircle@x0,w,c
  7402  00F162  EC84  F06D         	call	_drawPixel
  7403  00F166  D000               	goto	l2984
  7404  00F168                     l2984:
  7405  00F168  501E               	movf	drawCircle@y,w,c
  7406  00F16A  5C1C               	subwf	drawCircle@x,w,c
  7407  00F16C  501D               	movf	drawCircle@x+1,w,c
  7408  00F16E  0A80               	xorlw	128
  7409  00F170  6E14               	movwf	??_drawCircle& (0+255),c
  7410  00F172  501F               	movf	drawCircle@y+1,w,c
  7411  00F174  0A80               	xorlw	128
  7412  00F176  5814               	subwfb	??_drawCircle& (0+255),w,c
  7413  00F178  A0D8               	btfss	status,0,c
  7414  00F17A  D77E               	goto	l2956
  7415  00F17C  0012               	return		;funcret
  7416  00F17E                     __end_of_drawCircle:
  7417                           	opt stack 0
  7418                           tblptru	equ	0xFF8
  7419                           tblptrh	equ	0xFF7
  7420                           tblptrl	equ	0xFF6
  7421                           tablat	equ	0xFF5
  7422                           prodl	equ	0xFF3
  7423                           intcon2	equ	0xFF1
  7424                           postinc0	equ	0xFEE
  7425                           wreg	equ	0xFE8
  7426                           postdec1	equ	0xFE5
  7427                           fsr1l	equ	0xFE1
  7428                           indf2	equ	0xFDF
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _Set_EWLT *****************
  7434 ;; Defined at:
  7435 ;;		line 353 in file "Lab8test2.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  color           1    wreg     unsigned char 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  color           1    0[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;		None               void
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:        1 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_Day_Mode
  7459 ;;		_Night_Mode
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text34
  7464  00DBA0                     __ptext34:
  7465                           	opt stack 0
  7466  00DBA0                     _Set_EWLT:
  7467                           	opt stack 29
  7468                           
  7469                           ;incstack = 0
  7470                           ;Set_EWLT@color stored from wreg
  7471  00DBA0  6E01               	movwf	Set_EWLT@color,c
  7472                           
  7473                           ;Lab8test2.c: 355: switch (color)
  7474  00DBA2  D00A               	goto	l2032
  7475  00DBA4                     l414:
  7476  00DBA4  9284               	bcf	3972,1,c	;volatile
  7477  00DBA6  D001               	goto	L10
  7478  00DBA8                     l416:
  7479  00DBA8  8284               	bsf	3972,1,c	;volatile
  7480  00DBAA                     L10:
  7481  00DBAA  9484               	bcf	3972,2,c	;volatile
  7482  00DBAC  D013               	goto	l419
  7483  00DBAE                     l417:
  7484  00DBAE  9284               	bcf	3972,1,c	;volatile
  7485  00DBB0  D001               	goto	L11
  7486  00DBB2                     l418:
  7487  00DBB2  8284               	bsf	3972,1,c	;volatile
  7488  00DBB4                     L11:
  7489  00DBB4  8484               	bsf	3972,2,c	;volatile
  7490                           
  7491                           ;Lab8test2.c: 361: }
  7492  00DBB6  D00E               	goto	l419
  7493  00DBB8                     l2032:
  7494  00DBB8  5001               	movf	Set_EWLT@color,w,c
  7495                           
  7496                           ; Switch size 1, requested type "space"
  7497                           ; Number of cases is 4, Range of values is 0 to 3
  7498                           ; switch strategies available:
  7499                           ; Name         Instructions Cycles
  7500                           ; simple_byte           13     7 (average)
  7501                           ;	Chosen strategy is simple_byte
  7502  00DBBA  0A00               	xorlw	0	; case 0
  7503  00DBBC  B4D8               	btfsc	status,2,c
  7504  00DBBE  D7F2               	goto	l414
  7505  00DBC0  0A01               	xorlw	1	; case 1
  7506  00DBC2  B4D8               	btfsc	status,2,c
  7507  00DBC4  D7F1               	goto	l416
  7508  00DBC6  0A03               	xorlw	3	; case 2
  7509  00DBC8  B4D8               	btfsc	status,2,c
  7510  00DBCA  D7F1               	goto	l417
  7511  00DBCC  0A01               	xorlw	1	; case 3
  7512  00DBCE  B4D8               	btfsc	status,2,c
  7513  00DBD0  D7F0               	goto	l418
  7514  00DBD2  D000               	goto	l419
  7515  00DBD4                     l419:
  7516  00DBD4  0012               	return		;funcret
  7517  00DBD6                     __end_of_Set_EWLT:
  7518                           	opt stack 0
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodl	equ	0xFF3
  7524                           intcon2	equ	0xFF1
  7525                           postinc0	equ	0xFEE
  7526                           wreg	equ	0xFE8
  7527                           postdec1	equ	0xFE5
  7528                           fsr1l	equ	0xFE1
  7529                           indf2	equ	0xFDF
  7530                           fsr2h	equ	0xFDA
  7531                           fsr2l	equ	0xFD9
  7532                           status	equ	0xFD8
  7533                           
  7534 ;; *************** function _Set_EW *****************
  7535 ;; Defined at:
  7536 ;;		line 342 in file "Lab8test2.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;  color           1    wreg     unsigned char 
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;  color           1    0[COMRAM] unsigned char 
  7541 ;; Return value:  Size  Location     Type
  7542 ;;		None               void
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;Total ram usage:        1 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_Day_Mode
  7560 ;;		_Night_Mode
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text35
  7565  00DB6A                     __ptext35:
  7566                           	opt stack 0
  7567  00DB6A                     _Set_EW:
  7568                           	opt stack 29
  7569                           
  7570                           ;incstack = 0
  7571                           ;Set_EW@color stored from wreg
  7572  00DB6A  6E01               	movwf	Set_EW@color,c
  7573                           
  7574                           ;Lab8test2.c: 344: switch (color)
  7575  00DB6C  D00A               	goto	l2026
  7576  00DB6E                     l405:
  7577  00DB6E  9A80               	bcf	3968,5,c	;volatile
  7578  00DB70  D001               	goto	L12
  7579  00DB72                     l407:
  7580  00DB72  8A80               	bsf	3968,5,c	;volatile
  7581  00DB74                     L12:
  7582  00DB74  9C81               	bcf	3969,6,c	;volatile
  7583  00DB76  D013               	goto	l410
  7584  00DB78                     l408:
  7585  00DB78  9A80               	bcf	3968,5,c	;volatile
  7586  00DB7A  D001               	goto	L13
  7587  00DB7C                     l409:
  7588  00DB7C  8A80               	bsf	3968,5,c	;volatile
  7589  00DB7E                     L13:
  7590  00DB7E  8C81               	bsf	3969,6,c	;volatile
  7591                           
  7592                           ;Lab8test2.c: 350: }
  7593  00DB80  D00E               	goto	l410
  7594  00DB82                     l2026:
  7595  00DB82  5001               	movf	Set_EW@color,w,c
  7596                           
  7597                           ; Switch size 1, requested type "space"
  7598                           ; Number of cases is 4, Range of values is 0 to 3
  7599                           ; switch strategies available:
  7600                           ; Name         Instructions Cycles
  7601                           ; simple_byte           13     7 (average)
  7602                           ;	Chosen strategy is simple_byte
  7603  00DB84  0A00               	xorlw	0	; case 0
  7604  00DB86  B4D8               	btfsc	status,2,c
  7605  00DB88  D7F2               	goto	l405
  7606  00DB8A  0A01               	xorlw	1	; case 1
  7607  00DB8C  B4D8               	btfsc	status,2,c
  7608  00DB8E  D7F1               	goto	l407
  7609  00DB90  0A03               	xorlw	3	; case 2
  7610  00DB92  B4D8               	btfsc	status,2,c
  7611  00DB94  D7F1               	goto	l408
  7612  00DB96  0A01               	xorlw	1	; case 3
  7613  00DB98  B4D8               	btfsc	status,2,c
  7614  00DB9A  D7F0               	goto	l409
  7615  00DB9C  D000               	goto	l410
  7616  00DB9E                     l410:
  7617  00DB9E  0012               	return		;funcret
  7618  00DBA0                     __end_of_Set_EW:
  7619                           	opt stack 0
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodl	equ	0xFF3
  7625                           intcon2	equ	0xFF1
  7626                           postinc0	equ	0xFEE
  7627                           wreg	equ	0xFE8
  7628                           postdec1	equ	0xFE5
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function _PED_Control *****************
  7636 ;; Defined at:
  7637 ;;		line 377 in file "Lab8test2.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  direction       1    wreg     unsigned char 
  7640 ;;  Num_Sec         1   59[COMRAM] unsigned char 
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;  direction       1   60[COMRAM] unsigned char 
  7643 ;;  i               1   62[COMRAM] unsigned char 
  7644 ;;  i               1   61[COMRAM] unsigned char 
  7645 ;; Return value:  Size  Location     Type
  7646 ;;		None               void
  7647 ;; Registers used:
  7648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7654 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;Total ram usage:        4 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    8
  7661 ;; This function calls:
  7662 ;;		_DISPLAY_LOWER_7SEG
  7663 ;;		_Wait_One_Second_With_Beep
  7664 ;;		_update_LCD_PED_Count
  7665 ;; This function is called by:
  7666 ;;		_Day_Mode
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text36
  7671  00E1CE                     __ptext36:
  7672                           	opt stack 0
  7673  00E1CE                     _PED_Control:
  7674                           	opt stack 21
  7675                           
  7676                           ;incstack = 0
  7677                           ;PED_Control@direction stored from wreg
  7678  00E1CE  6E3D               	movwf	PED_Control@direction,c
  7679                           
  7680                           ;Lab8test2.c: 378: if (direction == 2) {
  7681  00E1D0  0E02               	movlw	2
  7682  00E1D2  183D               	xorwf	PED_Control@direction,w,c
  7683  00E1D4  A4D8               	btfss	status,2,c
  7684  00E1D6  D01E               	goto	l3462
  7685                           
  7686                           ;Lab8test2.c: 379: for (char i = Num_Sec - 1; i > 0; i--) {
  7687  00E1D8  043C               	decf	PED_Control@Num_Sec,w,c
  7688  00E1DA  6E3E               	movwf	PED_Control@i,c
  7689  00E1DC                     l3438:
  7690  00E1DC  503E               	movf	PED_Control@i,w,c
  7691  00E1DE  B4D8               	btfsc	status,2,c
  7692  00E1E0  D00E               	goto	l3452
  7693  00E1E2  D001               	goto	l3442
  7694  00E1E4  D00C               	goto	l3452
  7695  00E1E6                     l3442:
  7696                           
  7697                           ;Lab8test2.c: 380: update_LCD_PED_Count(2, i);
  7698  00E1E6  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7699  00E1EA  0E02               	movlw	2
  7700  00E1EC  ECCE  F072         	call	_update_LCD_PED_Count
  7701                           
  7702                           ;Lab8test2.c: 381: DISPLAY_LOWER_7SEG(i);
  7703  00E1F0  503E               	movf	PED_Control@i,w,c
  7704  00E1F2  EC24  F06E         	call	_DISPLAY_LOWER_7SEG
  7705                           
  7706                           ;Lab8test2.c: 382: Wait_One_Second_With_Beep();
  7707  00E1F6  ECDA  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7708  00E1FA  063E               	decf	PED_Control@i,f,c
  7709  00E1FC  D7EF               	goto	l3438
  7710  00E1FE                     l3452:
  7711                           
  7712                           ;Lab8test2.c: 384: }
  7713                           ;Lab8test2.c: 386: update_LCD_PED_Count(2, 0);
  7714  00E1FE  0E00               	movlw	0
  7715  00E200  6E3A               	movwf	update_LCD_PED_Count@count,c
  7716  00E202  0E02               	movlw	2
  7717  00E204  ECCE  F072         	call	_update_LCD_PED_Count
  7718                           
  7719                           ;Lab8test2.c: 387: PORTD = 0xFF;
  7720  00E208  6883               	setf	3971,c	;volatile
  7721                           
  7722                           ;Lab8test2.c: 388: PORTEbits.RE0 = 0xFF;
  7723  00E20A  8084               	bsf	3972,0,c	;volatile
  7724                           
  7725                           ;Lab8test2.c: 390: Wait_One_Second_With_Beep();
  7726  00E20C  ECDA  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7727                           
  7728                           ;Lab8test2.c: 391: PORTBbits.RB0 = 0;
  7729  00E210  9081               	bcf	3969,0,c	;volatile
  7730  00E212  D000               	goto	l3462
  7731  00E214                     l3462:
  7732                           
  7733                           ;Lab8test2.c: 392: }
  7734                           ;Lab8test2.c: 394: if (direction == 0) {
  7735  00E214  503D               	movf	PED_Control@direction,w,c
  7736  00E216  A4D8               	btfss	status,2,c
  7737  00E218  D01E               	goto	l434
  7738                           
  7739                           ;Lab8test2.c: 395: for (char i = Num_Sec - 1; i > 0; i--) {
  7740  00E21A  043C               	decf	PED_Control@Num_Sec,w,c
  7741  00E21C  6E3F               	movwf	PED_Control@i_1325,c
  7742  00E21E                     l3466:
  7743  00E21E  503F               	movf	PED_Control@i_1325,w,c
  7744  00E220  B4D8               	btfsc	status,2,c
  7745  00E222  D00E               	goto	l3480
  7746  00E224  D001               	goto	l3470
  7747  00E226  D00C               	goto	l3480
  7748  00E228                     l3470:
  7749                           
  7750                           ;Lab8test2.c: 396: update_LCD_PED_Count(0, i);
  7751  00E228  C03F  F03A         	movff	PED_Control@i_1325,update_LCD_PED_Count@count
  7752  00E22C  0E00               	movlw	0
  7753  00E22E  ECCE  F072         	call	_update_LCD_PED_Count
  7754                           
  7755                           ;Lab8test2.c: 397: DISPLAY_LOWER_7SEG(i);
  7756  00E232  503F               	movf	PED_Control@i_1325,w,c
  7757  00E234  EC24  F06E         	call	_DISPLAY_LOWER_7SEG
  7758                           
  7759                           ;Lab8test2.c: 398: Wait_One_Second_With_Beep();
  7760  00E238  ECDA  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7761  00E23C  063F               	decf	PED_Control@i_1325,f,c
  7762  00E23E  D7EF               	goto	l3466
  7763  00E240                     l3480:
  7764                           
  7765                           ;Lab8test2.c: 399: }
  7766                           ;Lab8test2.c: 400: update_LCD_PED_Count(0, 0);
  7767  00E240  0E00               	movlw	0
  7768  00E242  6E3A               	movwf	update_LCD_PED_Count@count,c
  7769  00E244  0E00               	movlw	0
  7770  00E246  ECCE  F072         	call	_update_LCD_PED_Count
  7771                           
  7772                           ;Lab8test2.c: 401: PORTD = 0xFF;
  7773  00E24A  6883               	setf	3971,c	;volatile
  7774                           
  7775                           ;Lab8test2.c: 402: PORTEbits.RE0 = 0xFF;
  7776  00E24C  8084               	bsf	3972,0,c	;volatile
  7777                           
  7778                           ;Lab8test2.c: 403: Wait_One_Second_With_Beep();
  7779  00E24E  ECDA  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7780                           
  7781                           ;Lab8test2.c: 404: PORTBbits.RB1 = 0;
  7782  00E252  9281               	bcf	3969,1,c	;volatile
  7783  00E254  D000               	goto	l434
  7784  00E256                     l434:
  7785  00E256  0012               	return		;funcret
  7786  00E258                     __end_of_PED_Control:
  7787                           	opt stack 0
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodl	equ	0xFF3
  7793                           intcon2	equ	0xFF1
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           postdec1	equ	0xFE5
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function _update_LCD_PED_Count *****************
  7804 ;; Defined at:
  7805 ;;		line 669 in file "Lab8test2.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  direction       1    wreg     unsigned char 
  7808 ;;  count           1   57[COMRAM] unsigned char 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  direction       1   58[COMRAM] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;		None               void
  7813 ;; Registers used:
  7814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7820 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    7
  7827 ;; This function calls:
  7828 ;;		___awdiv
  7829 ;;		___awmod
  7830 ;;		_drawtext
  7831 ;; This function is called by:
  7832 ;;		_PED_Control
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text37
  7837  00E59C                     __ptext37:
  7838                           	opt stack 0
  7839  00E59C                     _update_LCD_PED_Count:
  7840                           	opt stack 21
  7841                           
  7842                           ;incstack = 0
  7843                           ;update_LCD_PED_Count@direction stored from wreg
  7844  00E59C  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7845                           
  7846                           ;Lab8test2.c: 671: switch (direction)
  7847  00E59E  D057               	goto	l3306
  7848  00E5A0                     l3296:
  7849                           
  7850                           ;Lab8test2.c: 674: PED_EW_Count[0] = count/10 + '0';
  7851  00E5A0  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7852  00E5A4  6A02               	clrf	___awdiv@dividend+1,c
  7853  00E5A6  0E00               	movlw	0
  7854  00E5A8  6E04               	movwf	___awdiv@divisor+1,c
  7855  00E5AA  0E0A               	movlw	10
  7856  00E5AC  6E03               	movwf	___awdiv@divisor,c
  7857  00E5AE  EC2C  F071         	call	___awdiv	;wreg free
  7858  00E5B2  5001               	movf	?___awdiv,w,c
  7859  00E5B4  0F30               	addlw	48
  7860  00E5B6  6E4F               	movwf	_PED_EW_Count,c
  7861                           
  7862                           ;Lab8test2.c: 675: PED_EW_Count[1] = count%10 + '0';
  7863  00E5B8  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7864  00E5BC  6A02               	clrf	___awmod@dividend+1,c
  7865  00E5BE  0E00               	movlw	0
  7866  00E5C0  6E04               	movwf	___awmod@divisor+1,c
  7867  00E5C2  0E0A               	movlw	10
  7868  00E5C4  6E03               	movwf	___awmod@divisor,c
  7869  00E5C6  ECDD  F06F         	call	___awmod	;wreg free
  7870  00E5CA  5001               	movf	?___awmod,w,c
  7871  00E5CC  0F30               	addlw	48
  7872  00E5CE  6E50               	movwf	_PED_EW_Count+1,c
  7873                           
  7874                           ;Lab8test2.c: 676: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  7875  00E5D0  0E1E               	movlw	30
  7876  00E5D2  6E29               	movwf	drawtext@y,c
  7877  00E5D4  0E4F               	movlw	low _PED_EW_Count
  7878  00E5D6  6E2A               	movwf	drawtext@_text,c
  7879  00E5D8  0E00               	movlw	high _PED_EW_Count
  7880  00E5DA  6E2B               	movwf	drawtext@_text+1,c
  7881  00E5DC  0E07               	movlw	7
  7882  00E5DE  6E2D               	movwf	drawtext@color+1,c
  7883  00E5E0  682C               	setf	drawtext@color,c
  7884  00E5E2  0E00               	movlw	0
  7885  00E5E4  6E2F               	movwf	drawtext@bg+1,c
  7886  00E5E6  0E00               	movlw	0
  7887  00E5E8  6E2E               	movwf	drawtext@bg,c
  7888  00E5EA  0E02               	movlw	2
  7889  00E5EC  6E30               	movwf	drawtext@size,c
  7890  00E5EE  0E02               	movlw	2
  7891  00E5F0  EC01  F074         	call	_drawtext
  7892                           
  7893                           ;Lab8test2.c: 677: break;
  7894  00E5F4  D034               	goto	l489
  7895  00E5F6                     l3300:
  7896                           
  7897                           ;Lab8test2.c: 679: PED_NS_Count[0] = count/10 + '0';
  7898  00E5F6  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7899  00E5FA  6A02               	clrf	___awdiv@dividend+1,c
  7900  00E5FC  0E00               	movlw	0
  7901  00E5FE  6E04               	movwf	___awdiv@divisor+1,c
  7902  00E600  0E0A               	movlw	10
  7903  00E602  6E03               	movwf	___awdiv@divisor,c
  7904  00E604  EC2C  F071         	call	___awdiv	;wreg free
  7905  00E608  5001               	movf	?___awdiv,w,c
  7906  00E60A  0F30               	addlw	48
  7907  00E60C  6E52               	movwf	_PED_NS_Count,c
  7908                           
  7909                           ;Lab8test2.c: 680: PED_NS_Count[1] = count%10 + '0';
  7910  00E60E  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7911  00E612  6A02               	clrf	___awmod@dividend+1,c
  7912  00E614  0E00               	movlw	0
  7913  00E616  6E04               	movwf	___awmod@divisor+1,c
  7914  00E618  0E0A               	movlw	10
  7915  00E61A  6E03               	movwf	___awmod@divisor,c
  7916  00E61C  ECDD  F06F         	call	___awmod	;wreg free
  7917  00E620  5001               	movf	?___awmod,w,c
  7918  00E622  0F30               	addlw	48
  7919  00E624  6E53               	movwf	_PED_NS_Count+1,c
  7920                           
  7921                           ;Lab8test2.c: 681: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  7922  00E626  0E5A               	movlw	90
  7923  00E628  6E29               	movwf	drawtext@y,c
  7924  00E62A  0E52               	movlw	low _PED_NS_Count
  7925  00E62C  6E2A               	movwf	drawtext@_text,c
  7926  00E62E  0E00               	movlw	high _PED_NS_Count
  7927  00E630  6E2B               	movwf	drawtext@_text+1,c
  7928  00E632  0E00               	movlw	0
  7929  00E634  6E2D               	movwf	drawtext@color+1,c
  7930  00E636  0E1F               	movlw	31
  7931  00E638  6E2C               	movwf	drawtext@color,c
  7932  00E63A  0E00               	movlw	0
  7933  00E63C  6E2F               	movwf	drawtext@bg+1,c
  7934  00E63E  0E00               	movlw	0
  7935  00E640  6E2E               	movwf	drawtext@bg,c
  7936  00E642  0E02               	movlw	2
  7937  00E644  6E30               	movwf	drawtext@size,c
  7938  00E646  0E02               	movlw	2
  7939  00E648  EC01  F074         	call	_drawtext
  7940                           
  7941                           ;Lab8test2.c: 684: }
  7942                           
  7943                           ;Lab8test2.c: 682: break;
  7944  00E64C  D008               	goto	l489
  7945  00E64E                     l3306:
  7946  00E64E  503B               	movf	update_LCD_PED_Count@direction,w,c
  7947                           
  7948                           ; Switch size 1, requested type "space"
  7949                           ; Number of cases is 2, Range of values is 0 to 2
  7950                           ; switch strategies available:
  7951                           ; Name         Instructions Cycles
  7952                           ; simple_byte            7     4 (average)
  7953                           ;	Chosen strategy is simple_byte
  7954  00E650  0A00               	xorlw	0	; case 0
  7955  00E652  B4D8               	btfsc	status,2,c
  7956  00E654  D7A5               	goto	l3296
  7957  00E656  0A02               	xorlw	2	; case 2
  7958  00E658  B4D8               	btfsc	status,2,c
  7959  00E65A  D7CD               	goto	l3300
  7960  00E65C  D000               	goto	l489
  7961  00E65E                     l489:
  7962  00E65E  0012               	return		;funcret
  7963  00E660                     __end_of_update_LCD_PED_Count:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodl	equ	0xFF3
  7970                           intcon2	equ	0xFF1
  7971                           postinc0	equ	0xFEE
  7972                           wreg	equ	0xFE8
  7973                           postdec1	equ	0xFE5
  7974                           fsr1l	equ	0xFE1
  7975                           indf2	equ	0xFDF
  7976                           fsr2h	equ	0xFDA
  7977                           fsr2l	equ	0xFD9
  7978                           status	equ	0xFD8
  7979                           
  7980 ;; *************** function _drawtext *****************
  7981 ;; Defined at:
  7982 ;;		line 511 in file "ST7735_TFT.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  x               1    wreg     unsigned char 
  7985 ;;  y               1   40[COMRAM] unsigned char 
  7986 ;;  _text           2   41[COMRAM] PTR unsigned char 
  7987 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  7988 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  7989 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  7990 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7991 ;;  color           2   43[COMRAM] unsigned int 
  7992 ;;  bg              2   45[COMRAM] unsigned int 
  7993 ;;  size            1   47[COMRAM] unsigned char 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  x               1   52[COMRAM] unsigned char 
  7996 ;;  i               2   53[COMRAM] unsigned int 
  7997 ;;  textsize        2   50[COMRAM] unsigned int 
  7998 ;;  cursor_x        1   56[COMRAM] unsigned char 
  7999 ;;  cursor_y        1   55[COMRAM] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;		None               void
  8002 ;; Registers used:
  8003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8009 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;Total ram usage:       17 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    6
  8016 ;; This function calls:
  8017 ;;		_drawChar
  8018 ;;		_strlen
  8019 ;; This function is called by:
  8020 ;;		_Initialize_Screen
  8021 ;;		_Wait_One_Second
  8022 ;;		_update_LCD_count
  8023 ;;		_update_LCD_PED_Count
  8024 ;;		_update_LCD_misc
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text38
  8029  00E802                     __ptext38:
  8030                           	opt stack 0
  8031  00E802                     _drawtext:
  8032                           	opt stack 21
  8033                           
  8034                           ;incstack = 0
  8035                           ;drawtext@x stored from wreg
  8036  00E802  6E35               	movwf	drawtext@x,c
  8037                           
  8038                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  8039                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  8040                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  8041  00E804  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  8042  00E808  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  8043                           
  8044                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  8045  00E80C  C02A  F001         	movff	drawtext@_text,strlen@s
  8046  00E810  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  8047  00E814  EC43  F06E         	call	_strlen	;wreg free
  8048  00E818  C001  F033         	movff	?_strlen,drawtext@textsize
  8049  00E81C  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  8050                           
  8051                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  8052  00E820  0E00               	movlw	0
  8053  00E822  6E37               	movwf	drawtext@i+1,c
  8054  00E824  0E00               	movlw	0
  8055  00E826  6E36               	movwf	drawtext@i,c
  8056  00E828  D054               	goto	l2806
  8057  00E82A                     l2780:
  8058                           
  8059                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  8060  00E82A  5042               	movf	_wrap,w,c
  8061  00E82C  B4D8               	btfsc	status,2,c
  8062  00E82E  D02C               	goto	l2796
  8063  00E830  5030               	movf	drawtext@size,w,c
  8064  00E832  0D05               	mullw	5
  8065  00E834  5039               	movf	drawtext@cursor_x,w,c
  8066  00E836  6E31               	movwf	??_drawtext& (0+255),c
  8067  00E838  6A32               	clrf	(??_drawtext+1)& (0+255),c
  8068  00E83A  50F3               	movf	prodl,w,c
  8069  00E83C  2631               	addwf	??_drawtext,f,c
  8070  00E83E  50F4               	movf	prodh,w,c
  8071  00E840  2232               	addwfc	??_drawtext+1,f,c
  8072  00E842  BE32               	btfsc	??_drawtext+1,7,c
  8073  00E844  D021               	goto	l2796
  8074  00E846  5032               	movf	??_drawtext+1,w,c
  8075  00E848  E104               	bnz	u1650
  8076  00E84A  0E81               	movlw	129
  8077  00E84C  5C31               	subwf	??_drawtext,w,c
  8078  00E84E  A0D8               	btfss	status,0,c
  8079  00E850  D01B               	goto	l2796
  8080  00E852                     u1650:
  8081                           
  8082                           ;ST7735_TFT.c: 519: cursor_x = 0;
  8083  00E852  0E00               	movlw	0
  8084  00E854  6E39               	movwf	drawtext@cursor_x,c
  8085                           
  8086                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  8087  00E856  5030               	movf	drawtext@size,w,c
  8088  00E858  0D07               	mullw	7
  8089  00E85A  50F3               	movf	prodl,w,c
  8090  00E85C  2438               	addwf	drawtext@cursor_y,w,c
  8091  00E85E  0F03               	addlw	3
  8092  00E860  6E38               	movwf	drawtext@cursor_y,c
  8093                           
  8094                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  8095  00E862  0EA0               	movlw	160
  8096  00E864  6438               	cpfsgt	drawtext@cursor_y,c
  8097  00E866  D003               	goto	l2792
  8098  00E868  0EA0               	movlw	160
  8099  00E86A  6E38               	movwf	drawtext@cursor_y,c
  8100  00E86C  D000               	goto	l2792
  8101  00E86E                     l2792:
  8102                           
  8103                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  8104  00E86E  5036               	movf	drawtext@i,w,c
  8105  00E870  242A               	addwf	drawtext@_text,w,c
  8106  00E872  6ED9               	movwf	fsr2l,c
  8107  00E874  5037               	movf	drawtext@i+1,w,c
  8108  00E876  202B               	addwfc	drawtext@_text+1,w,c
  8109  00E878  6EDA               	movwf	fsr2h,c
  8110  00E87A  0E20               	movlw	32
  8111  00E87C  18DE               	xorwf	postinc2,w,c
  8112  00E87E  B4D8               	btfsc	status,2,c
  8113  00E880  D025               	goto	l2804
  8114  00E882  D002               	goto	l2796
  8115  00E884  D023               	goto	l2804
  8116  00E886  D000               	goto	l2796
  8117  00E888                     l2796:
  8118                           
  8119                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8120  00E888  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  8121  00E88C  5036               	movf	drawtext@i,w,c
  8122  00E88E  242A               	addwf	drawtext@_text,w,c
  8123  00E890  6ED9               	movwf	fsr2l,c
  8124  00E892  5037               	movf	drawtext@i+1,w,c
  8125  00E894  202B               	addwfc	drawtext@_text+1,w,c
  8126  00E896  6EDA               	movwf	fsr2h,c
  8127  00E898  50DF               	movf	indf2,w,c
  8128  00E89A  6E1F               	movwf	drawChar@c,c
  8129  00E89C  C02C  F020         	movff	drawtext@color,drawChar@color
  8130  00E8A0  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  8131  00E8A4  C02E  F022         	movff	drawtext@bg,drawChar@bg
  8132  00E8A8  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  8133  00E8AC  C030  F024         	movff	drawtext@size,drawChar@size
  8134  00E8B0  5039               	movf	drawtext@cursor_x,w,c
  8135  00E8B2  EC7E  F076         	call	_drawChar
  8136                           
  8137                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  8138  00E8B6  5030               	movf	drawtext@size,w,c
  8139  00E8B8  0D06               	mullw	6
  8140  00E8BA  50F3               	movf	prodl,w,c
  8141  00E8BC  2439               	addwf	drawtext@cursor_x,w,c
  8142  00E8BE  6E39               	movwf	drawtext@cursor_x,c
  8143                           
  8144                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  8145  00E8C0  0E80               	movlw	128
  8146  00E8C2  6439               	cpfsgt	drawtext@cursor_x,c
  8147  00E8C4  D003               	goto	l2804
  8148  00E8C6  0E80               	movlw	128
  8149  00E8C8  6E39               	movwf	drawtext@cursor_x,c
  8150  00E8CA  D000               	goto	l2804
  8151  00E8CC                     l2804:
  8152  00E8CC  4A36               	infsnz	drawtext@i,f,c
  8153  00E8CE  2A37               	incf	drawtext@i+1,f,c
  8154  00E8D0  D000               	goto	l2806
  8155  00E8D2                     l2806:
  8156  00E8D2  5033               	movf	drawtext@textsize,w,c
  8157  00E8D4  5C36               	subwf	drawtext@i,w,c
  8158  00E8D6  5034               	movf	drawtext@textsize+1,w,c
  8159  00E8D8  5837               	subwfb	drawtext@i+1,w,c
  8160  00E8DA  A0D8               	btfss	status,0,c
  8161  00E8DC  D7A6               	goto	l2780
  8162  00E8DE  0012               	return		;funcret
  8163  00E8E0                     __end_of_drawtext:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodh	equ	0xFF4
  8170                           prodl	equ	0xFF3
  8171                           intcon2	equ	0xFF1
  8172                           postinc0	equ	0xFEE
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _strlen *****************
  8183 ;; Defined at:
  8184 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  s               2    0[COMRAM] PTR const unsigned char 
  8187 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8188 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8189 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8190 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  8193 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8194 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8195 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8196 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  2    0[COMRAM] unsigned int 
  8199 ;; Registers used:
  8200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        6 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_drawtext
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text39
  8220  00DC86                     __ptext39:
  8221                           	opt stack 0
  8222  00DC86                     _strlen:
  8223                           	opt stack 26
  8224                           
  8225                           ;incstack = 0
  8226  00DC86  C001  F005         	movff	strlen@s,strlen@cp
  8227  00DC8A  C002  F006         	movff	strlen@s+1,strlen@cp+1
  8228  00DC8E  D003               	goto	l2730
  8229  00DC90                     l2728:
  8230  00DC90  4A05               	infsnz	strlen@cp,f,c
  8231  00DC92  2A06               	incf	strlen@cp+1,f,c
  8232  00DC94  D000               	goto	l2730
  8233  00DC96                     l2730:
  8234  00DC96  C005  FFD9         	movff	strlen@cp,fsr2l
  8235  00DC9A  C006  FFDA         	movff	strlen@cp+1,fsr2h
  8236  00DC9E  50DF               	movf	indf2,w,c
  8237  00DCA0  A4D8               	btfss	status,2,c
  8238  00DCA2  D7F6               	goto	l2728
  8239  00DCA4  C001  F003         	movff	strlen@s,??_strlen
  8240  00DCA8  C002  F004         	movff	strlen@s+1,??_strlen+1
  8241  00DCAC  1E03               	comf	??_strlen,f,c
  8242  00DCAE  1E04               	comf	??_strlen+1,f,c
  8243  00DCB0  4A03               	infsnz	??_strlen,f,c
  8244  00DCB2  2A04               	incf	??_strlen+1,f,c
  8245  00DCB4  5005               	movf	strlen@cp,w,c
  8246  00DCB6  2403               	addwf	??_strlen,w,c
  8247  00DCB8  6E01               	movwf	?_strlen,c
  8248  00DCBA  5006               	movf	strlen@cp+1,w,c
  8249  00DCBC  2004               	addwfc	??_strlen+1,w,c
  8250  00DCBE  6E02               	movwf	?_strlen+1,c
  8251  00DCC0  D000               	goto	l1098
  8252  00DCC2                     l1098:
  8253  00DCC2  0012               	return		;funcret
  8254  00DCC4                     __end_of_strlen:
  8255                           	opt stack 0
  8256                           tblptru	equ	0xFF8
  8257                           tblptrh	equ	0xFF7
  8258                           tblptrl	equ	0xFF6
  8259                           tablat	equ	0xFF5
  8260                           prodh	equ	0xFF4
  8261                           prodl	equ	0xFF3
  8262                           intcon2	equ	0xFF1
  8263                           postinc0	equ	0xFEE
  8264                           wreg	equ	0xFE8
  8265                           postdec1	equ	0xFE5
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _drawChar *****************
  8274 ;; Defined at:
  8275 ;;		line 484 in file "ST7735_TFT.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  x               1    wreg     unsigned char 
  8278 ;;  y               1   29[COMRAM] unsigned char 
  8279 ;;  c               1   30[COMRAM] unsigned char 
  8280 ;;  color           2   31[COMRAM] unsigned int 
  8281 ;;  bg              2   33[COMRAM] unsigned int 
  8282 ;;  size            1   35[COMRAM] unsigned char 
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;  x               1   37[COMRAM] unsigned char 
  8285 ;;  line            1   36[COMRAM] unsigned char 
  8286 ;;  i               1   39[COMRAM] unsigned char 
  8287 ;;  j               1   38[COMRAM] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8297 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;Total ram usage:       11 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    5
  8304 ;; This function calls:
  8305 ;;		___wmul
  8306 ;;		_drawPixel
  8307 ;;		_fillRect
  8308 ;; This function is called by:
  8309 ;;		_drawtext
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text40
  8314  00ECFC                     __ptext40:
  8315                           	opt stack 0
  8316  00ECFC                     _drawChar:
  8317                           	opt stack 21
  8318                           
  8319                           ;incstack = 0
  8320                           ;drawChar@x stored from wreg
  8321  00ECFC  6E26               	movwf	drawChar@x,c
  8322                           
  8323                           ;ST7735_TFT.c: 486: char i, j;
  8324                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  8325  00ECFE  0E80               	movlw	128
  8326  00ED00  6026               	cpfslt	drawChar@x,c
  8327  00ED02  D0A6               	goto	l193
  8328  00ED04  0E9F               	movlw	159
  8329  00ED06  641E               	cpfsgt	drawChar@y,c
  8330  00ED08  D001               	goto	l2676
  8331                           
  8332                           ;ST7735_TFT.c: 488: return;
  8333  00ED0A  D0A2               	goto	l193
  8334  00ED0C                     l2676:
  8335                           
  8336                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  8337  00ED0C  5024               	movf	drawChar@size,w,c
  8338  00ED0E  A4D8               	btfss	status,2,c
  8339  00ED10  D003               	goto	l2680
  8340  00ED12  0E01               	movlw	1
  8341  00ED14  6E24               	movwf	drawChar@size,c
  8342  00ED16  D000               	goto	l2680
  8343  00ED18                     l2680:
  8344                           
  8345                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  8346  00ED18  0E1F               	movlw	31
  8347  00ED1A  641F               	cpfsgt	drawChar@c,c
  8348  00ED1C  D004               	goto	l2684
  8349  00ED1E  0E7E               	movlw	126
  8350  00ED20  641F               	cpfsgt	drawChar@c,c
  8351  00ED22  D003               	goto	l195
  8352  00ED24  D000               	goto	l2684
  8353  00ED26                     l2684:
  8354                           
  8355                           ;ST7735_TFT.c: 491: c = '?';
  8356  00ED26  0E3F               	movlw	63
  8357  00ED28  6E1F               	movwf	drawChar@c,c
  8358  00ED2A                     l195:
  8359                           
  8360                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  8361  00ED2A  0E00               	movlw	0
  8362  00ED2C  6E28               	movwf	drawChar@i,c
  8363  00ED2E                     l2686:
  8364  00ED2E  0E04               	movlw	4
  8365  00ED30  6428               	cpfsgt	drawChar@i,c
  8366  00ED32  D001               	goto	l2690
  8367  00ED34  D08D               	goto	l193
  8368  00ED36                     l2690:
  8369                           
  8370                           ;ST7735_TFT.c: 493: unsigned char line;
  8371                           ;ST7735_TFT.c: 494: if(c < 'S')
  8372  00ED36  0E53               	movlw	83
  8373  00ED38  601F               	cpfslt	drawChar@c,c
  8374  00ED3A  D015               	goto	l2694
  8375                           
  8376                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  8377  00ED3C  0EE0               	movlw	224
  8378  00ED3E  241F               	addwf	drawChar@c,w,c
  8379  00ED40  6E01               	movwf	___wmul@multiplier,c
  8380  00ED42  6A02               	clrf	___wmul@multiplier+1,c
  8381  00ED44  0EFF               	movlw	255
  8382  00ED46  2202               	addwfc	___wmul@multiplier+1,f,c
  8383  00ED48  0E00               	movlw	0
  8384  00ED4A  6E04               	movwf	___wmul@multiplicand+1,c
  8385  00ED4C  0E05               	movlw	5
  8386  00ED4E  6E03               	movwf	___wmul@multiplicand,c
  8387  00ED50  EC30  F06D         	call	___wmul	;wreg free
  8388  00ED54  5028               	movf	drawChar@i,w,c
  8389  00ED56  2601               	addwf	?___wmul,f,c
  8390  00ED58  0E00               	movlw	0
  8391  00ED5A  2202               	addwfc	?___wmul+1,f,c
  8392  00ED5C  0EBD               	movlw	low _font
  8393  00ED5E  2401               	addwf	?___wmul,w,c
  8394  00ED60  6EF6               	movwf	tblptrl,c
  8395  00ED62  0EFD               	movlw	high _font
  8396  00ED64  D014               	goto	L14
  8397  00ED66                     l2694:
  8398                           
  8399                           ;ST7735_TFT.c: 496: else
  8400                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  8401  00ED66  0EAD               	movlw	173
  8402  00ED68  241F               	addwf	drawChar@c,w,c
  8403  00ED6A  6E01               	movwf	___wmul@multiplier,c
  8404  00ED6C  6A02               	clrf	___wmul@multiplier+1,c
  8405  00ED6E  0EFF               	movlw	255
  8406  00ED70  2202               	addwfc	___wmul@multiplier+1,f,c
  8407  00ED72  0E00               	movlw	0
  8408  00ED74  6E04               	movwf	___wmul@multiplicand+1,c
  8409  00ED76  0E05               	movlw	5
  8410  00ED78  6E03               	movwf	___wmul@multiplicand,c
  8411  00ED7A  EC30  F06D         	call	___wmul	;wreg free
  8412  00ED7E  5028               	movf	drawChar@i,w,c
  8413  00ED80  2601               	addwf	?___wmul,f,c
  8414  00ED82  0E00               	movlw	0
  8415  00ED84  2202               	addwfc	?___wmul+1,f,c
  8416  00ED86  0EBC               	movlw	low _font2
  8417  00ED88  2401               	addwf	?___wmul,w,c
  8418  00ED8A  6EF6               	movwf	tblptrl,c
  8419  00ED8C  0EFE               	movlw	high _font2
  8420  00ED8E                     L14:
  8421  00ED8E  2002               	addwfc	?___wmul+1,w,c
  8422  00ED90  6EF7               	movwf	tblptrh,c
  8423  00ED92                     	if	0	;There are less than 3 active tblptr bytes
  8424  00ED92                     	endif
  8425  00ED92  0008               	tblrd		*
  8426  00ED94  CFF5 F025          	movff	tablat,drawChar@line
  8427  00ED98  D000               	goto	l2696
  8428  00ED9A                     l2696:
  8429                           
  8430                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  8431  00ED9A  0E00               	movlw	0
  8432  00ED9C  6E27               	movwf	drawChar@j,c
  8433  00ED9E                     l2698:
  8434  00ED9E  0E06               	movlw	6
  8435  00EDA0  6427               	cpfsgt	drawChar@j,c
  8436  00EDA2  D001               	goto	l202
  8437  00EDA4  D053               	goto	l2722
  8438  00EDA6                     l202:
  8439                           
  8440                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  8441  00EDA6  A025               	btfss	drawChar@line,0,c
  8442  00EDA8  D023               	goto	l2708
  8443                           
  8444                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  8445  00EDAA  0424               	decf	drawChar@size,w,c
  8446  00EDAC  A4D8               	btfss	status,2,c
  8447  00EDAE  D00C               	goto	l2706
  8448  00EDB0  501E               	movf	drawChar@y,w,c
  8449  00EDB2  2427               	addwf	drawChar@j,w,c
  8450  00EDB4  6E08               	movwf	drawPixel@y,c
  8451  00EDB6  C020  F009         	movff	drawChar@color,drawPixel@color
  8452  00EDBA  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8453  00EDBE  5026               	movf	drawChar@x,w,c
  8454  00EDC0  2428               	addwf	drawChar@i,w,c
  8455  00EDC2  EC84  F06D         	call	_drawPixel
  8456  00EDC6  D03E               	goto	l2716
  8457  00EDC8                     l2706:
  8458                           
  8459                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8460  00EDC8  5027               	movf	drawChar@j,w,c
  8461  00EDCA  0224               	mulwf	drawChar@size,c
  8462  00EDCC  50F3               	movf	prodl,w,c
  8463  00EDCE  241E               	addwf	drawChar@y,w,c
  8464  00EDD0  6E13               	movwf	fillRect@y,c
  8465  00EDD2  C024  F014         	movff	drawChar@size,fillRect@w
  8466  00EDD6  C024  F015         	movff	drawChar@size,fillRect@h
  8467  00EDDA  C020  F016         	movff	drawChar@color,fillRect@color
  8468  00EDDE  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8469  00EDE2  5028               	movf	drawChar@i,w,c
  8470  00EDE4  0224               	mulwf	drawChar@size,c
  8471  00EDE6  50F3               	movf	prodl,w,c
  8472  00EDE8  2426               	addwf	drawChar@x,w,c
  8473  00EDEA  ECA3  F06E         	call	_fillRect
  8474                           
  8475                           ;ST7735_TFT.c: 502: }
  8476  00EDEE  D02A               	goto	l2716
  8477  00EDF0                     l2708:
  8478                           
  8479                           ;ST7735_TFT.c: 503: else if(bg != color) {
  8480  00EDF0  5020               	movf	drawChar@color,w,c
  8481  00EDF2  1822               	xorwf	drawChar@bg,w,c
  8482  00EDF4  E104               	bnz	u1510
  8483  00EDF6  5021               	movf	drawChar@color+1,w,c
  8484  00EDF8  1823               	xorwf	drawChar@bg+1,w,c
  8485  00EDFA  B4D8               	btfsc	status,2,c
  8486  00EDFC  D023               	goto	l2716
  8487  00EDFE                     u1510:
  8488                           
  8489                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  8490  00EDFE  0424               	decf	drawChar@size,w,c
  8491  00EE00  A4D8               	btfss	status,2,c
  8492  00EE02  D00C               	goto	l2714
  8493  00EE04  501E               	movf	drawChar@y,w,c
  8494  00EE06  2427               	addwf	drawChar@j,w,c
  8495  00EE08  6E08               	movwf	drawPixel@y,c
  8496  00EE0A  C022  F009         	movff	drawChar@bg,drawPixel@color
  8497  00EE0E  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8498  00EE12  5026               	movf	drawChar@x,w,c
  8499  00EE14  2428               	addwf	drawChar@i,w,c
  8500  00EE16  EC84  F06D         	call	_drawPixel
  8501  00EE1A  D014               	goto	l2716
  8502  00EE1C                     l2714:
  8503                           
  8504                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  8505  00EE1C  5027               	movf	drawChar@j,w,c
  8506  00EE1E  0224               	mulwf	drawChar@size,c
  8507  00EE20  50F3               	movf	prodl,w,c
  8508  00EE22  241E               	addwf	drawChar@y,w,c
  8509  00EE24  6E13               	movwf	fillRect@y,c
  8510  00EE26  C024  F014         	movff	drawChar@size,fillRect@w
  8511  00EE2A  C024  F015         	movff	drawChar@size,fillRect@h
  8512  00EE2E  C022  F016         	movff	drawChar@bg,fillRect@color
  8513  00EE32  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8514  00EE36  5028               	movf	drawChar@i,w,c
  8515  00EE38  0224               	mulwf	drawChar@size,c
  8516  00EE3A  50F3               	movf	prodl,w,c
  8517  00EE3C  2426               	addwf	drawChar@x,w,c
  8518  00EE3E  ECA3  F06E         	call	_fillRect
  8519  00EE42  D000               	goto	l2716
  8520  00EE44                     l2716:
  8521  00EE44  2A27               	incf	drawChar@j,f,c
  8522  00EE46  90D8               	bcf	status,0,c
  8523  00EE48  3225               	rrcf	drawChar@line,f,c
  8524  00EE4A  D7A9               	goto	l2698
  8525  00EE4C                     l2722:
  8526  00EE4C  2A28               	incf	drawChar@i,f,c
  8527  00EE4E  D76F               	goto	l2686
  8528  00EE50                     l193:
  8529  00EE50  0012               	return		;funcret
  8530  00EE52                     __end_of_drawChar:
  8531                           	opt stack 0
  8532                           tblptru	equ	0xFF8
  8533                           tblptrh	equ	0xFF7
  8534                           tblptrl	equ	0xFF6
  8535                           tablat	equ	0xFF5
  8536                           prodh	equ	0xFF4
  8537                           prodl	equ	0xFF3
  8538                           intcon2	equ	0xFF1
  8539                           postinc0	equ	0xFEE
  8540                           wreg	equ	0xFE8
  8541                           postdec1	equ	0xFE5
  8542                           fsr1l	equ	0xFE1
  8543                           indf2	equ	0xFDF
  8544                           postinc2	equ	0xFDE
  8545                           fsr2h	equ	0xFDA
  8546                           fsr2l	equ	0xFD9
  8547                           status	equ	0xFD8
  8548                           
  8549 ;; *************** function _fillRect *****************
  8550 ;; Defined at:
  8551 ;;		line 474 in file "ST7735_TFT.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  x               1    wreg     unsigned char 
  8554 ;;  y               1   18[COMRAM] unsigned char 
  8555 ;;  w               1   19[COMRAM] unsigned char 
  8556 ;;  h               1   20[COMRAM] unsigned char 
  8557 ;;  color           2   21[COMRAM] unsigned int 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  x               1   26[COMRAM] unsigned char 
  8560 ;;  i               2   27[COMRAM] int 
  8561 ;; Return value:  Size  Location     Type
  8562 ;;		None               void
  8563 ;; Registers used:
  8564 ;;		wreg, status,2, status,0, cstack
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8570 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;Total ram usage:       11 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; Hardware stack levels required when called:    4
  8577 ;; This function calls:
  8578 ;;		_drawFastVLine
  8579 ;; This function is called by:
  8580 ;;		_drawChar
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text41
  8585  00DD46                     __ptext41:
  8586                           	opt stack 0
  8587  00DD46                     _fillRect:
  8588                           	opt stack 21
  8589                           
  8590                           ;incstack = 0
  8591                           ;fillRect@x stored from wreg
  8592  00DD46  6E1B               	movwf	fillRect@x,c
  8593                           
  8594                           ;ST7735_TFT.c: 476: signed int i;
  8595                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  8596  00DD48  C01B  F01C         	movff	fillRect@x,fillRect@i
  8597  00DD4C  6A1D               	clrf	fillRect@i+1,c
  8598  00DD4E  D00E               	goto	l2664
  8599  00DD50                     l2660:
  8600                           
  8601                           ;ST7735_TFT.c: 479: {
  8602                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  8603  00DD50  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8604  00DD54  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8605  00DD58  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8606  00DD5C  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8607  00DD60  501C               	movf	fillRect@i,w,c
  8608  00DD62  EC5F  F070         	call	_drawFastVLine
  8609  00DD66  4A1C               	infsnz	fillRect@i,f,c
  8610  00DD68  2A1D               	incf	fillRect@i+1,f,c
  8611  00DD6A  D000               	goto	l2664
  8612  00DD6C                     l2664:
  8613  00DD6C  5014               	movf	fillRect@w,w,c
  8614  00DD6E  C01B  F018         	movff	fillRect@x,??_fillRect
  8615  00DD72  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8616  00DD74  2618               	addwf	??_fillRect,f,c
  8617  00DD76  0E00               	movlw	0
  8618  00DD78  2219               	addwfc	??_fillRect+1,f,c
  8619  00DD7A  5018               	movf	??_fillRect,w,c
  8620  00DD7C  5C1C               	subwf	fillRect@i,w,c
  8621  00DD7E  501D               	movf	fillRect@i+1,w,c
  8622  00DD80  0A80               	xorlw	128
  8623  00DD82  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8624  00DD84  5019               	movf	??_fillRect+1,w,c
  8625  00DD86  0A80               	xorlw	128
  8626  00DD88  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8627  00DD8A  A0D8               	btfss	status,0,c
  8628  00DD8C  D7E1               	goto	l2660
  8629  00DD8E  0012               	return		;funcret
  8630  00DD90                     __end_of_fillRect:
  8631                           	opt stack 0
  8632                           tblptru	equ	0xFF8
  8633                           tblptrh	equ	0xFF7
  8634                           tblptrl	equ	0xFF6
  8635                           tablat	equ	0xFF5
  8636                           prodh	equ	0xFF4
  8637                           prodl	equ	0xFF3
  8638                           intcon2	equ	0xFF1
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1l	equ	0xFE1
  8643                           indf2	equ	0xFDF
  8644                           postinc2	equ	0xFDE
  8645                           fsr2h	equ	0xFDA
  8646                           fsr2l	equ	0xFD9
  8647                           status	equ	0xFD8
  8648                           
  8649 ;; *************** function _drawFastVLine *****************
  8650 ;; Defined at:
  8651 ;;		line 453 in file "ST7735_TFT.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  x               1    wreg     unsigned char 
  8654 ;;  y               1    7[COMRAM] unsigned char 
  8655 ;;  h               1    8[COMRAM] unsigned char 
  8656 ;;  color           2    9[COMRAM] unsigned int 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  x               1   17[COMRAM] unsigned char 
  8659 ;;  lo              1   16[COMRAM] unsigned char 
  8660 ;;  hi              1   15[COMRAM] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;		None               void
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;Total ram usage:       11 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    3
  8677 ;; This function calls:
  8678 ;;		_setAddrWindow
  8679 ;;		_spiwrite
  8680 ;; This function is called by:
  8681 ;;		_fillRect
  8682 ;;		_fillCircleHelper
  8683 ;;		_fillCircle
  8684 ;;		_drawRect
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           	psect	text42
  8689  00E0BE                     __ptext42:
  8690                           	opt stack 0
  8691  00E0BE                     _drawFastVLine:
  8692                           	opt stack 21
  8693                           
  8694                           ;incstack = 0
  8695                           ;drawFastVLine@x stored from wreg
  8696  00E0BE  6E12               	movwf	drawFastVLine@x,c
  8697                           
  8698                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  8699                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  8700  00E0C0  0E80               	movlw	128
  8701  00E0C2  6012               	cpfslt	drawFastVLine@x,c
  8702  00E0C4  D03F               	goto	l177
  8703  00E0C6  0E9F               	movlw	159
  8704  00E0C8  6408               	cpfsgt	drawFastVLine@y,c
  8705  00E0CA  D001               	goto	l2630
  8706                           
  8707                           ;ST7735_TFT.c: 457: return;
  8708  00E0CC  D03B               	goto	l177
  8709  00E0CE                     l2630:
  8710                           
  8711                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  8712  00E0CE  0EFF               	movlw	255
  8713  00E0D0  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8714  00E0D2  0EFF               	movlw	255
  8715  00E0D4  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8716  00E0D6  5009               	movf	drawFastVLine@h,w,c
  8717  00E0D8  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8718  00E0DC  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8719  00E0DE  260E               	addwf	??_drawFastVLine+2,f,c
  8720  00E0E0  0E00               	movlw	0
  8721  00E0E2  220F               	addwfc	??_drawFastVLine+3,f,c
  8722  00E0E4  500C               	movf	??_drawFastVLine,w,c
  8723  00E0E6  260E               	addwf	??_drawFastVLine+2,f,c
  8724  00E0E8  500D               	movf	??_drawFastVLine+1,w,c
  8725  00E0EA  220F               	addwfc	??_drawFastVLine+3,f,c
  8726  00E0EC  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8727  00E0EE  D00B               	goto	l2634
  8728  00E0F0  500F               	movf	??_drawFastVLine+3,w,c
  8729  00E0F2  E104               	bnz	u1360
  8730  00E0F4  0EA0               	movlw	160
  8731  00E0F6  5C0E               	subwf	??_drawFastVLine+2,w,c
  8732  00E0F8  A0D8               	btfss	status,0,c
  8733  00E0FA  D005               	goto	l2634
  8734  00E0FC                     u1360:
  8735                           
  8736                           ;ST7735_TFT.c: 459: h = 160 - y;
  8737  00E0FC  5008               	movf	drawFastVLine@y,w,c
  8738  00E0FE  0800               	sublw	0
  8739  00E100  0FA0               	addlw	160
  8740  00E102  6E09               	movwf	drawFastVLine@h,c
  8741  00E104  D000               	goto	l2634
  8742  00E106                     l2634:
  8743                           
  8744                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  8745  00E106  500B               	movf	drawFastVLine@color+1,w,c
  8746  00E108  6E10               	movwf	drawFastVLine@hi,c
  8747  00E10A  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8748                           
  8749                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  8750  00E10E  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8751  00E112  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8752  00E116  5008               	movf	drawFastVLine@y,w,c
  8753  00E118  2409               	addwf	drawFastVLine@h,w,c
  8754  00E11A  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8755  00E11C  040C               	decf	??_drawFastVLine,w,c
  8756  00E11E  6E06               	movwf	setAddrWindow@y1,c
  8757  00E120  5012               	movf	drawFastVLine@x,w,c
  8758  00E122  ECC8  F06E         	call	_setAddrWindow
  8759                           
  8760                           ;ST7735_TFT.c: 462: PORTCbits.RC2 = 1;
  8761  00E126  8482               	bsf	3970,2,c	;volatile
  8762                           
  8763                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  8764  00E128  9882               	bcf	3970,4,c	;volatile
  8765                           
  8766                           ;ST7735_TFT.c: 465: while (h--) {
  8767  00E12A  D007               	goto	l2646
  8768  00E12C                     l2644:
  8769                           
  8770                           ;ST7735_TFT.c: 466: spiwrite(hi);
  8771  00E12C  5010               	movf	drawFastVLine@hi,w,c
  8772  00E12E  ECC6  F06C         	call	_spiwrite
  8773                           
  8774                           ;ST7735_TFT.c: 467: spiwrite(lo);
  8775  00E132  5011               	movf	drawFastVLine@lo,w,c
  8776  00E134  ECC6  F06C         	call	_spiwrite
  8777  00E138  D000               	goto	l2646
  8778  00E13A                     l2646:
  8779  00E13A  0609               	decf	drawFastVLine@h,f,c
  8780  00E13C  2809               	incf	drawFastVLine@h,w,c
  8781  00E13E  A4D8               	btfss	status,2,c
  8782  00E140  D7F5               	goto	l2644
  8783                           
  8784                           ;ST7735_TFT.c: 468: }
  8785                           ;ST7735_TFT.c: 469: PORTCbits.RC4 = 1;
  8786  00E142  8882               	bsf	3970,4,c	;volatile
  8787  00E144                     l177:
  8788  00E144  0012               	return		;funcret
  8789  00E146                     __end_of_drawFastVLine:
  8790                           	opt stack 0
  8791                           tblptru	equ	0xFF8
  8792                           tblptrh	equ	0xFF7
  8793                           tblptrl	equ	0xFF6
  8794                           tablat	equ	0xFF5
  8795                           prodh	equ	0xFF4
  8796                           prodl	equ	0xFF3
  8797                           intcon2	equ	0xFF1
  8798                           postinc0	equ	0xFEE
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           fsr2h	equ	0xFDA
  8805                           fsr2l	equ	0xFD9
  8806                           status	equ	0xFD8
  8807                           
  8808 ;; *************** function _drawPixel *****************
  8809 ;; Defined at:
  8810 ;;		line 444 in file "ST7735_TFT.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  x               1    wreg     unsigned char 
  8813 ;;  y               1    7[COMRAM] unsigned char 
  8814 ;;  color           2    8[COMRAM] unsigned int 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  x               1   10[COMRAM] unsigned char 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;		None               void
  8819 ;; Registers used:
  8820 ;;		wreg, status,2, status,0, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8826 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;Total ram usage:        4 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    3
  8833 ;; This function calls:
  8834 ;;		_setAddrWindow
  8835 ;;		_write_data
  8836 ;; This function is called by:
  8837 ;;		_drawChar
  8838 ;;		_drawCircle
  8839 ;;		_drawCircleHelper
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           	psect	text43
  8844  00DB08                     __ptext43:
  8845                           	opt stack 0
  8846  00DB08                     _drawPixel:
  8847                           	opt stack 22
  8848                           
  8849                           ;incstack = 0
  8850                           ;drawPixel@x stored from wreg
  8851  00DB08  6E0B               	movwf	drawPixel@x,c
  8852                           
  8853                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  8854  00DB0A  0E80               	movlw	128
  8855  00DB0C  600B               	cpfslt	drawPixel@x,c
  8856  00DB0E  D013               	goto	l171
  8857  00DB10  0E9F               	movlw	159
  8858  00DB12  6408               	cpfsgt	drawPixel@y,c
  8859  00DB14  D001               	goto	l2652
  8860                           
  8861                           ;ST7735_TFT.c: 447: return;
  8862  00DB16  D00F               	goto	l171
  8863  00DB18                     l2652:
  8864                           
  8865                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  8866  00DB18  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8867  00DB1C  280B               	incf	drawPixel@x,w,c
  8868  00DB1E  6E05               	movwf	setAddrWindow@x1,c
  8869  00DB20  2808               	incf	drawPixel@y,w,c
  8870  00DB22  6E06               	movwf	setAddrWindow@y1,c
  8871  00DB24  500B               	movf	drawPixel@x,w,c
  8872  00DB26  ECC8  F06E         	call	_setAddrWindow
  8873                           
  8874                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  8875  00DB2A  500A               	movf	drawPixel@color+1,w,c
  8876  00DB2C  ECAC  F06C         	call	_write_data
  8877                           
  8878                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  8879  00DB30  5009               	movf	drawPixel@color,w,c
  8880  00DB32  ECAC  F06C         	call	_write_data
  8881  00DB36                     l171:
  8882  00DB36  0012               	return		;funcret
  8883  00DB38                     __end_of_drawPixel:
  8884                           	opt stack 0
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           prodh	equ	0xFF4
  8890                           prodl	equ	0xFF3
  8891                           intcon2	equ	0xFF1
  8892                           postinc0	equ	0xFEE
  8893                           wreg	equ	0xFE8
  8894                           postdec1	equ	0xFE5
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _setAddrWindow *****************
  8903 ;; Defined at:
  8904 ;;		line 429 in file "ST7735_TFT.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  x0              1    wreg     unsigned char 
  8907 ;;  y0              1    3[COMRAM] unsigned char 
  8908 ;;  x1              1    4[COMRAM] unsigned char 
  8909 ;;  y1              1    5[COMRAM] unsigned char 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  x0              1    6[COMRAM] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;		None               void
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8921 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;Total ram usage:        4 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    2
  8928 ;; This function calls:
  8929 ;;		_write_command
  8930 ;;		_write_data
  8931 ;; This function is called by:
  8932 ;;		_drawPixel
  8933 ;;		_drawFastVLine
  8934 ;;		_fillRectangle
  8935 ;;		_drawFastHLine
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text44
  8940  00DD90                     __ptext44:
  8941                           	opt stack 0
  8942  00DD90                     _setAddrWindow:
  8943                           	opt stack 21
  8944                           
  8945                           ;incstack = 0
  8946                           ;setAddrWindow@x0 stored from wreg
  8947  00DD90  6E07               	movwf	setAddrWindow@x0,c
  8948                           
  8949                           ;ST7735_TFT.c: 431: write_command(0x2A);
  8950  00DD92  0E2A               	movlw	42
  8951  00DD94  ECA4  F06C         	call	_write_command
  8952                           
  8953                           ;ST7735_TFT.c: 432: write_data(0);
  8954  00DD98  0E00               	movlw	0
  8955  00DD9A  ECAC  F06C         	call	_write_data
  8956                           
  8957                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  8958  00DD9E  5007               	movf	setAddrWindow@x0,w,c
  8959  00DDA0  2476               	addwf	_colstart,w,c
  8960  00DDA2  ECAC  F06C         	call	_write_data
  8961                           
  8962                           ;ST7735_TFT.c: 434: write_data(0);
  8963  00DDA6  0E00               	movlw	0
  8964  00DDA8  ECAC  F06C         	call	_write_data
  8965                           
  8966                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  8967  00DDAC  5005               	movf	setAddrWindow@x1,w,c
  8968  00DDAE  2476               	addwf	_colstart,w,c
  8969  00DDB0  ECAC  F06C         	call	_write_data
  8970                           
  8971                           ;ST7735_TFT.c: 436: write_command(0x2B);
  8972  00DDB4  0E2B               	movlw	43
  8973  00DDB6  ECA4  F06C         	call	_write_command
  8974                           
  8975                           ;ST7735_TFT.c: 437: write_data(0);
  8976  00DDBA  0E00               	movlw	0
  8977  00DDBC  ECAC  F06C         	call	_write_data
  8978                           
  8979                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  8980  00DDC0  5004               	movf	setAddrWindow@y0,w,c
  8981  00DDC2  2479               	addwf	_rowstart,w,c
  8982  00DDC4  ECAC  F06C         	call	_write_data
  8983                           
  8984                           ;ST7735_TFT.c: 439: write_data(0);
  8985  00DDC8  0E00               	movlw	0
  8986  00DDCA  ECAC  F06C         	call	_write_data
  8987                           
  8988                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  8989  00DDCE  5006               	movf	setAddrWindow@y1,w,c
  8990  00DDD0  2479               	addwf	_rowstart,w,c
  8991  00DDD2  ECAC  F06C         	call	_write_data
  8992                           
  8993                           ;ST7735_TFT.c: 441: write_command(0x2C);
  8994  00DDD6  0E2C               	movlw	44
  8995  00DDD8  ECA4  F06C         	call	_write_command
  8996  00DDDC  0012               	return		;funcret
  8997  00DDDE                     __end_of_setAddrWindow:
  8998                           	opt stack 0
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon2	equ	0xFF1
  9006                           postinc0	equ	0xFEE
  9007                           wreg	equ	0xFE8
  9008                           postdec1	equ	0xFE5
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           fsr2h	equ	0xFDA
  9013                           fsr2l	equ	0xFD9
  9014                           status	equ	0xFD8
  9015                           
  9016 ;; *************** function _write_data *****************
  9017 ;; Defined at:
  9018 ;;		line 246 in file "ST7735_TFT.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;  data_           1    wreg     unsigned char 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  data_           1    2[COMRAM] unsigned char 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;		None               void
  9025 ;; Registers used:
  9026 ;;		wreg, status,2, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;Total ram usage:        1 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    1
  9039 ;; This function calls:
  9040 ;;		_spiwrite
  9041 ;; This function is called by:
  9042 ;;		_Rcmd1
  9043 ;;		_Rcmd2red
  9044 ;;		_Rcmd3
  9045 ;;		_setAddrWindow
  9046 ;;		_drawPixel
  9047 ;;		_TFT_GreenTab_Initialize
  9048 ;;		_Bcmd
  9049 ;;		_setScrollDefinition
  9050 ;;		_Rcmd2green
  9051 ;;		_VerticalScroll
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text45
  9056  00D958                     __ptext45:
  9057                           	opt stack 0
  9058  00D958                     _write_data:
  9059                           	opt stack 21
  9060                           
  9061                           ;incstack = 0
  9062                           ;write_data@data_ stored from wreg
  9063  00D958  6E03               	movwf	write_data@data_,c
  9064                           
  9065                           ;ST7735_TFT.c: 248: PORTCbits.RC4 = 0;
  9066  00D95A  9882               	bcf	3970,4,c	;volatile
  9067                           
  9068                           ;ST7735_TFT.c: 249: PORTCbits.RC2 = 1;
  9069  00D95C  8482               	bsf	3970,2,c	;volatile
  9070                           
  9071                           ;ST7735_TFT.c: 250: spiwrite(data_);
  9072  00D95E  5003               	movf	write_data@data_,w,c
  9073  00D960  ECC6  F06C         	call	_spiwrite
  9074                           
  9075                           ;ST7735_TFT.c: 251: PORTCbits.RC4 = 1;
  9076  00D964  8882               	bsf	3970,4,c	;volatile
  9077  00D966  0012               	return		;funcret
  9078  00D968                     __end_of_write_data:
  9079                           	opt stack 0
  9080                           tblptru	equ	0xFF8
  9081                           tblptrh	equ	0xFF7
  9082                           tblptrl	equ	0xFF6
  9083                           tablat	equ	0xFF5
  9084                           prodh	equ	0xFF4
  9085                           prodl	equ	0xFF3
  9086                           intcon2	equ	0xFF1
  9087                           postinc0	equ	0xFEE
  9088                           wreg	equ	0xFE8
  9089                           postdec1	equ	0xFE5
  9090                           fsr1l	equ	0xFE1
  9091                           indf2	equ	0xFDF
  9092                           postinc2	equ	0xFDE
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _write_command *****************
  9098 ;; Defined at:
  9099 ;;		line 235 in file "ST7735_TFT.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  cmd_            1    wreg     unsigned char 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  cmd_            1    2[COMRAM] unsigned char 
  9104 ;; Return value:  Size  Location     Type
  9105 ;;		None               void
  9106 ;; Registers used:
  9107 ;;		wreg, status,2, cstack
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;Total ram usage:        1 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    1
  9120 ;; This function calls:
  9121 ;;		_spiwrite
  9122 ;; This function is called by:
  9123 ;;		_Rcmd1
  9124 ;;		_Rcmd2red
  9125 ;;		_Rcmd3
  9126 ;;		_setAddrWindow
  9127 ;;		_TFT_GreenTab_Initialize
  9128 ;;		_Bcmd
  9129 ;;		_setScrollDefinition
  9130 ;;		_Rcmd2green
  9131 ;;		_VerticalScroll
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text46
  9136  00D948                     __ptext46:
  9137                           	opt stack 0
  9138  00D948                     _write_command:
  9139                           	opt stack 21
  9140                           
  9141                           ;incstack = 0
  9142                           ;write_command@cmd_ stored from wreg
  9143  00D948  6E03               	movwf	write_command@cmd_,c
  9144                           
  9145                           ;ST7735_TFT.c: 237: PORTCbits.RC4 = 0;
  9146  00D94A  9882               	bcf	3970,4,c	;volatile
  9147                           
  9148                           ;ST7735_TFT.c: 239: PORTCbits.RC2 = 0;
  9149  00D94C  9482               	bcf	3970,2,c	;volatile
  9150                           
  9151                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  9152  00D94E  5003               	movf	write_command@cmd_,w,c
  9153  00D950  ECC6  F06C         	call	_spiwrite
  9154                           
  9155                           ;ST7735_TFT.c: 242: PORTCbits.RC4 = 1;
  9156  00D954  8882               	bsf	3970,4,c	;volatile
  9157  00D956  0012               	return		;funcret
  9158  00D958                     __end_of_write_command:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon2	equ	0xFF1
  9167                           postinc0	equ	0xFEE
  9168                           wreg	equ	0xFE8
  9169                           postdec1	equ	0xFE5
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function _spiwrite *****************
  9178 ;; Defined at:
  9179 ;;		line 226 in file "ST7735_TFT.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  spidata         1    wreg     unsigned char 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  spidata         1    1[COMRAM] unsigned char 
  9184 ;;  x               1    0[COMRAM] unsigned char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;		None               void
  9187 ;; Registers used:
  9188 ;;		wreg
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;Total ram usage:        2 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_write_command
  9204 ;;		_write_data
  9205 ;;		_drawFastVLine
  9206 ;;		_fillRectangle
  9207 ;;		_drawFastHLine
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text47
  9212  00D98C                     __ptext47:
  9213                           	opt stack 0
  9214  00D98C                     _spiwrite:
  9215                           	opt stack 23
  9216                           
  9217                           ;incstack = 0
  9218                           ;spiwrite@spidata stored from wreg
  9219  00D98C  6E02               	movwf	spiwrite@spidata,c
  9220                           
  9221                           ;ST7735_TFT.c: 228: char x;
  9222                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  9223  00D98E  969E               	bcf	3998,3,c	;volatile
  9224                           
  9225                           ;ST7735_TFT.c: 230: x = SSPBUF;
  9226  00D990  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  9227                           
  9228                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  9229  00D994  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9230                           
  9231                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  9232  00D998  D000               	goto	l127
  9233  00D99A                     l127:
  9234  00D99A  A0C7               	btfss	4039,0,c	;volatile
  9235  00D99C  D7FE               	goto	l127
  9236  00D99E  0012               	return		;funcret
  9237  00D9A0                     __end_of_spiwrite:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           intcon2	equ	0xFF1
  9246                           postinc0	equ	0xFEE
  9247                           wreg	equ	0xFE8
  9248                           postdec1	equ	0xFE5
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function ___wmul *****************
  9257 ;; Defined at:
  9258 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  multiplier      2    0[COMRAM] unsigned int 
  9261 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  product         2    4[COMRAM] unsigned int 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  2    0[COMRAM] unsigned int 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0, prodl, prodh
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;Total ram usage:        6 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_delay_ms
  9283 ;;		_drawChar
  9284 ;;		_main
  9285 ;;		_update_LCD_misc
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text48
  9290  00DA60                     __ptext48:
  9291                           	opt stack 0
  9292  00DA60                     ___wmul:
  9293                           	opt stack 30
  9294                           
  9295                           ;incstack = 0
  9296  00DA60  5001               	movf	___wmul@multiplier,w,c
  9297  00DA62  0203               	mulwf	___wmul@multiplicand,c
  9298  00DA64  CFF3 F005          	movff	prodl,___wmul@product
  9299  00DA68  CFF4 F006          	movff	prodh,___wmul@product+1
  9300  00DA6C  5001               	movf	___wmul@multiplier,w,c
  9301  00DA6E  0204               	mulwf	___wmul@multiplicand+1,c
  9302  00DA70  50F3               	movf	prodl,w,c
  9303  00DA72  2606               	addwf	___wmul@product+1,f,c
  9304  00DA74  5002               	movf	___wmul@multiplier+1,w,c
  9305  00DA76  0203               	mulwf	___wmul@multiplicand,c
  9306  00DA78  50F3               	movf	prodl,w,c
  9307  00DA7A  2606               	addwf	___wmul@product+1,f,c
  9308  00DA7C  C005  F001         	movff	___wmul@product,?___wmul
  9309  00DA80  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9310  00DA84  D000               	goto	l541
  9311  00DA86                     l541:
  9312  00DA86  0012               	return		;funcret
  9313  00DA88                     __end_of___wmul:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon2	equ	0xFF1
  9322                           postinc0	equ	0xFEE
  9323                           wreg	equ	0xFE8
  9324                           postdec1	equ	0xFE5
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           fsr2h	equ	0xFDA
  9329                           fsr2l	equ	0xFD9
  9330                           status	equ	0xFD8
  9331                           
  9332 ;; *************** function ___awmod *****************
  9333 ;; Defined at:
  9334 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  dividend        2    0[COMRAM] int 
  9337 ;;  divisor         2    2[COMRAM] int 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  sign            1    5[COMRAM] unsigned char 
  9340 ;;  counter         1    4[COMRAM] unsigned char 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  2    0[COMRAM] int 
  9343 ;; Registers used:
  9344 ;;		wreg, status,2, status,0
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9350 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;Total ram usage:        6 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_update_LCD_count
  9360 ;;		_update_LCD_PED_Count
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text49
  9365  00DFBA                     __ptext49:
  9366                           	opt stack 0
  9367  00DFBA                     ___awmod:
  9368                           	opt stack 27
  9369                           
  9370                           ;incstack = 0
  9371  00DFBA  0E00               	movlw	0
  9372  00DFBC  6E06               	movwf	___awmod@sign,c
  9373  00DFBE  AE02               	btfss	___awmod@dividend+1,7,c
  9374  00DFC0  D007               	goto	l3094
  9375  00DFC2  6C01               	negf	___awmod@dividend,c
  9376  00DFC4  1E02               	comf	___awmod@dividend+1,f,c
  9377  00DFC6  B0D8               	btfsc	status,0,c
  9378  00DFC8  2A02               	incf	___awmod@dividend+1,f,c
  9379  00DFCA  0E01               	movlw	1
  9380  00DFCC  6E06               	movwf	___awmod@sign,c
  9381  00DFCE  D000               	goto	l3094
  9382  00DFD0                     l3094:
  9383  00DFD0  AE04               	btfss	___awmod@divisor+1,7,c
  9384  00DFD2  D005               	goto	l3098
  9385  00DFD4  6C03               	negf	___awmod@divisor,c
  9386  00DFD6  1E04               	comf	___awmod@divisor+1,f,c
  9387  00DFD8  B0D8               	btfsc	status,0,c
  9388  00DFDA  2A04               	incf	___awmod@divisor+1,f,c
  9389  00DFDC  D000               	goto	l3098
  9390  00DFDE                     l3098:
  9391  00DFDE  5003               	movf	___awmod@divisor,w,c
  9392  00DFE0  1004               	iorwf	___awmod@divisor+1,w,c
  9393  00DFE2  B4D8               	btfsc	status,2,c
  9394  00DFE4  D01D               	goto	l3114
  9395  00DFE6  0E01               	movlw	1
  9396  00DFE8  6E05               	movwf	___awmod@counter,c
  9397  00DFEA  D005               	goto	l3104
  9398  00DFEC                     l3102:
  9399  00DFEC  90D8               	bcf	status,0,c
  9400  00DFEE  3603               	rlcf	___awmod@divisor,f,c
  9401  00DFF0  3604               	rlcf	___awmod@divisor+1,f,c
  9402  00DFF2  2A05               	incf	___awmod@counter,f,c
  9403  00DFF4  D000               	goto	l3104
  9404  00DFF6                     l3104:
  9405  00DFF6  BE04               	btfsc	___awmod@divisor+1,7,c
  9406  00DFF8  D002               	goto	l3106
  9407  00DFFA  D7F8               	goto	l3102
  9408  00DFFC  D000               	goto	l3106
  9409  00DFFE                     l3106:
  9410  00DFFE  5003               	movf	___awmod@divisor,w,c
  9411  00E000  5C01               	subwf	___awmod@dividend,w,c
  9412  00E002  5004               	movf	___awmod@divisor+1,w,c
  9413  00E004  5802               	subwfb	___awmod@dividend+1,w,c
  9414  00E006  A0D8               	btfss	status,0,c
  9415  00E008  D005               	goto	l3110
  9416  00E00A  5003               	movf	___awmod@divisor,w,c
  9417  00E00C  5E01               	subwf	___awmod@dividend,f,c
  9418  00E00E  5004               	movf	___awmod@divisor+1,w,c
  9419  00E010  5A02               	subwfb	___awmod@dividend+1,f,c
  9420  00E012  D000               	goto	l3110
  9421  00E014                     l3110:
  9422  00E014  90D8               	bcf	status,0,c
  9423  00E016  3204               	rrcf	___awmod@divisor+1,f,c
  9424  00E018  3203               	rrcf	___awmod@divisor,f,c
  9425  00E01A  2E05               	decfsz	___awmod@counter,f,c
  9426  00E01C  D7F0               	goto	l3106
  9427  00E01E  D000               	goto	l3114
  9428  00E020                     l3114:
  9429  00E020  5006               	movf	___awmod@sign,w,c
  9430  00E022  B4D8               	btfsc	status,2,c
  9431  00E024  D005               	goto	l3118
  9432  00E026  6C01               	negf	___awmod@dividend,c
  9433  00E028  1E02               	comf	___awmod@dividend+1,f,c
  9434  00E02A  B0D8               	btfsc	status,0,c
  9435  00E02C  2A02               	incf	___awmod@dividend+1,f,c
  9436  00E02E  D000               	goto	l3118
  9437  00E030                     l3118:
  9438  00E030  C001  F001         	movff	___awmod@dividend,?___awmod
  9439  00E034  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9440  00E038  D000               	goto	l747
  9441  00E03A                     l747:
  9442  00E03A  0012               	return		;funcret
  9443  00E03C                     __end_of___awmod:
  9444                           	opt stack 0
  9445                           tblptru	equ	0xFF8
  9446                           tblptrh	equ	0xFF7
  9447                           tblptrl	equ	0xFF6
  9448                           tablat	equ	0xFF5
  9449                           prodh	equ	0xFF4
  9450                           prodl	equ	0xFF3
  9451                           intcon2	equ	0xFF1
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postdec1	equ	0xFE5
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function ___awdiv *****************
  9463 ;; Defined at:
  9464 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  dividend        2    0[COMRAM] int 
  9467 ;;  divisor         2    2[COMRAM] int 
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  quotient        2    6[COMRAM] int 
  9470 ;;  sign            1    5[COMRAM] unsigned char 
  9471 ;;  counter         1    4[COMRAM] unsigned char 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  2    0[COMRAM] int 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;Total ram usage:        8 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;;		_update_LCD_count
  9491 ;;		_update_LCD_PED_Count
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text50
  9496  00E258                     __ptext50:
  9497                           	opt stack 0
  9498  00E258                     ___awdiv:
  9499                           	opt stack 27
  9500                           
  9501                           ;incstack = 0
  9502  00E258  0E00               	movlw	0
  9503  00E25A  6E06               	movwf	___awdiv@sign,c
  9504  00E25C  AE04               	btfss	___awdiv@divisor+1,7,c
  9505  00E25E  D007               	goto	l3050
  9506  00E260  6C03               	negf	___awdiv@divisor,c
  9507  00E262  1E04               	comf	___awdiv@divisor+1,f,c
  9508  00E264  B0D8               	btfsc	status,0,c
  9509  00E266  2A04               	incf	___awdiv@divisor+1,f,c
  9510  00E268  0E01               	movlw	1
  9511  00E26A  6E06               	movwf	___awdiv@sign,c
  9512  00E26C  D000               	goto	l3050
  9513  00E26E                     l3050:
  9514  00E26E  AE02               	btfss	___awdiv@dividend+1,7,c
  9515  00E270  D007               	goto	l3056
  9516  00E272  6C01               	negf	___awdiv@dividend,c
  9517  00E274  1E02               	comf	___awdiv@dividend+1,f,c
  9518  00E276  B0D8               	btfsc	status,0,c
  9519  00E278  2A02               	incf	___awdiv@dividend+1,f,c
  9520  00E27A  0E01               	movlw	1
  9521  00E27C  1A06               	xorwf	___awdiv@sign,f,c
  9522  00E27E  D000               	goto	l3056
  9523  00E280                     l3056:
  9524  00E280  0E00               	movlw	0
  9525  00E282  6E08               	movwf	___awdiv@quotient+1,c
  9526  00E284  0E00               	movlw	0
  9527  00E286  6E07               	movwf	___awdiv@quotient,c
  9528  00E288  5003               	movf	___awdiv@divisor,w,c
  9529  00E28A  1004               	iorwf	___awdiv@divisor+1,w,c
  9530  00E28C  B4D8               	btfsc	status,2,c
  9531  00E28E  D021               	goto	l3078
  9532  00E290  0E01               	movlw	1
  9533  00E292  6E05               	movwf	___awdiv@counter,c
  9534  00E294  D005               	goto	l3064
  9535  00E296                     l3062:
  9536  00E296  90D8               	bcf	status,0,c
  9537  00E298  3603               	rlcf	___awdiv@divisor,f,c
  9538  00E29A  3604               	rlcf	___awdiv@divisor+1,f,c
  9539  00E29C  2A05               	incf	___awdiv@counter,f,c
  9540  00E29E  D000               	goto	l3064
  9541  00E2A0                     l3064:
  9542  00E2A0  BE04               	btfsc	___awdiv@divisor+1,7,c
  9543  00E2A2  D002               	goto	l3066
  9544  00E2A4  D7F8               	goto	l3062
  9545  00E2A6  D000               	goto	l3066
  9546  00E2A8                     l3066:
  9547  00E2A8  90D8               	bcf	status,0,c
  9548  00E2AA  3607               	rlcf	___awdiv@quotient,f,c
  9549  00E2AC  3608               	rlcf	___awdiv@quotient+1,f,c
  9550  00E2AE  5003               	movf	___awdiv@divisor,w,c
  9551  00E2B0  5C01               	subwf	___awdiv@dividend,w,c
  9552  00E2B2  5004               	movf	___awdiv@divisor+1,w,c
  9553  00E2B4  5802               	subwfb	___awdiv@dividend+1,w,c
  9554  00E2B6  A0D8               	btfss	status,0,c
  9555  00E2B8  D006               	goto	l3074
  9556  00E2BA  5003               	movf	___awdiv@divisor,w,c
  9557  00E2BC  5E01               	subwf	___awdiv@dividend,f,c
  9558  00E2BE  5004               	movf	___awdiv@divisor+1,w,c
  9559  00E2C0  5A02               	subwfb	___awdiv@dividend+1,f,c
  9560  00E2C2  8007               	bsf	___awdiv@quotient,0,c
  9561  00E2C4  D000               	goto	l3074
  9562  00E2C6                     l3074:
  9563  00E2C6  90D8               	bcf	status,0,c
  9564  00E2C8  3204               	rrcf	___awdiv@divisor+1,f,c
  9565  00E2CA  3203               	rrcf	___awdiv@divisor,f,c
  9566  00E2CC  2E05               	decfsz	___awdiv@counter,f,c
  9567  00E2CE  D7EC               	goto	l3066
  9568  00E2D0  D000               	goto	l3078
  9569  00E2D2                     l3078:
  9570  00E2D2  5006               	movf	___awdiv@sign,w,c
  9571  00E2D4  B4D8               	btfsc	status,2,c
  9572  00E2D6  D005               	goto	l3082
  9573  00E2D8  6C07               	negf	___awdiv@quotient,c
  9574  00E2DA  1E08               	comf	___awdiv@quotient+1,f,c
  9575  00E2DC  B0D8               	btfsc	status,0,c
  9576  00E2DE  2A08               	incf	___awdiv@quotient+1,f,c
  9577  00E2E0  D000               	goto	l3082
  9578  00E2E2                     l3082:
  9579  00E2E2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9580  00E2E6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9581  00E2EA  D000               	goto	l734
  9582  00E2EC                     l734:
  9583  00E2EC  0012               	return		;funcret
  9584  00E2EE                     __end_of___awdiv:
  9585                           	opt stack 0
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           intcon2	equ	0xFF1
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           postdec1	equ	0xFE5
  9596                           fsr1l	equ	0xFE1
  9597                           indf2	equ	0xFDF
  9598                           postinc2	equ	0xFDE
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function _Wait_One_Second_With_Beep *****************
  9604 ;; Defined at:
  9605 ;;		line 560 in file "Lab8test2.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;		None
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;		None
  9610 ;; Return value:  Size  Location     Type
  9611 ;;		None               void
  9612 ;; Registers used:
  9613 ;;		wreg, status,2, cstack
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;Total ram usage:        0 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    1
  9626 ;; This function calls:
  9627 ;;		_Activate_Buzzer
  9628 ;;		_Deactivate_Buzzer
  9629 ;;		_Wait_Half_Second
  9630 ;; This function is called by:
  9631 ;;		_PED_Control
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           	psect	text51
  9636  00D9B4                     __ptext51:
  9637                           	opt stack 0
  9638  00D9B4                     _Wait_One_Second_With_Beep:
  9639                           	opt stack 27
  9640                           
  9641                           ;Lab8test2.c: 562: PORTCbits.RC0 = 1;
  9642                           
  9643                           ;incstack = 0
  9644  00D9B4  8082               	bsf	3970,0,c	;volatile
  9645                           
  9646                           ;Lab8test2.c: 563: Activate_Buzzer();
  9647  00D9B6  ECB4  F06C         	call	_Activate_Buzzer	;wreg free
  9648                           
  9649                           ;Lab8test2.c: 564: Wait_Half_Second();
  9650  00D9BA  ECF0  F06C         	call	_Wait_Half_Second	;wreg free
  9651                           
  9652                           ;Lab8test2.c: 565: PORTCbits.RC0 = 0;
  9653  00D9BE  9082               	bcf	3970,0,c	;volatile
  9654                           
  9655                           ;Lab8test2.c: 566: Deactivate_Buzzer();
  9656  00D9C0  EC99  F06C         	call	_Deactivate_Buzzer	;wreg free
  9657                           
  9658                           ;Lab8test2.c: 567: Wait_Half_Second();
  9659  00D9C4  ECF0  F06C         	call	_Wait_Half_Second	;wreg free
  9660  00D9C8  0012               	return		;funcret
  9661  00D9CA                     __end_of_Wait_One_Second_With_Beep:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon2	equ	0xFF1
  9670                           postinc0	equ	0xFEE
  9671                           wreg	equ	0xFE8
  9672                           postdec1	equ	0xFE5
  9673                           fsr1l	equ	0xFE1
  9674                           indf2	equ	0xFDF
  9675                           postinc2	equ	0xFDE
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _Wait_Half_Second *****************
  9681 ;; Defined at:
  9682 ;;		line 570 in file "Lab8test2.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;		None               void
  9689 ;; Registers used:
  9690 ;;		wreg, status,2
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_Wait_One_Second
  9706 ;;		_Wait_One_Second_With_Beep
  9707 ;;		_Old_Wait_One_Second
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text52
  9712  00D9E0                     __ptext52:
  9713                           	opt stack 0
  9714  00D9E0                     _Wait_Half_Second:
  9715                           	opt stack 27
  9716                           
  9717                           ;Lab8test2.c: 572: T0CON = 0x03;
  9718                           
  9719                           ;incstack = 0
  9720  00D9E0  0E03               	movlw	3
  9721  00D9E2  6ED5               	movwf	4053,c	;volatile
  9722                           
  9723                           ;Lab8test2.c: 573: TMR0L = 0xDB;
  9724  00D9E4  0EDB               	movlw	219
  9725  00D9E6  6ED6               	movwf	4054,c	;volatile
  9726                           
  9727                           ;Lab8test2.c: 574: TMR0H = 0x0B;
  9728  00D9E8  0E0B               	movlw	11
  9729  00D9EA  6ED7               	movwf	4055,c	;volatile
  9730                           
  9731                           ;Lab8test2.c: 575: INTCONbits.TMR0IF = 0;
  9732  00D9EC  94F2               	bcf	intcon,2,c	;volatile
  9733                           
  9734                           ;Lab8test2.c: 576: T0CONbits.TMR0ON = 1;
  9735  00D9EE  8ED5               	bsf	4053,7,c	;volatile
  9736                           
  9737                           ;Lab8test2.c: 577: while (INTCONbits.TMR0IF == 0);
  9738  00D9F0  D000               	goto	l458
  9739  00D9F2                     l458:
  9740  00D9F2  A4F2               	btfss	intcon,2,c	;volatile
  9741  00D9F4  D7FE               	goto	l458
  9742                           
  9743                           ;Lab8test2.c: 578: T0CONbits.TMR0ON = 0;
  9744  00D9F6  9ED5               	bcf	4053,7,c	;volatile
  9745  00D9F8  0012               	return		;funcret
  9746  00D9FA                     __end_of_Wait_Half_Second:
  9747                           	opt stack 0
  9748                           tblptru	equ	0xFF8
  9749                           tblptrh	equ	0xFF7
  9750                           tblptrl	equ	0xFF6
  9751                           tablat	equ	0xFF5
  9752                           prodh	equ	0xFF4
  9753                           prodl	equ	0xFF3
  9754                           intcon	equ	0xFF2
  9755                           intcon2	equ	0xFF1
  9756                           postinc0	equ	0xFEE
  9757                           wreg	equ	0xFE8
  9758                           postdec1	equ	0xFE5
  9759                           fsr1l	equ	0xFE1
  9760                           indf2	equ	0xFDF
  9761                           postinc2	equ	0xFDE
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _Deactivate_Buzzer *****************
  9767 ;; Defined at:
  9768 ;;		line 371 in file "Lab8test2.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;		None               void
  9775 ;; Registers used:
  9776 ;;		wreg, status,2
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; This function calls:
  9789 ;;		Nothing
  9790 ;; This function is called by:
  9791 ;;		_Wait_One_Second_With_Beep
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text53
  9796  00D932                     __ptext53:
  9797                           	opt stack 0
  9798  00D932                     _Deactivate_Buzzer:
  9799                           	opt stack 27
  9800                           
  9801                           ;Lab8test2.c: 373: CCP2CON = 0x0;
  9802                           
  9803                           ;incstack = 0
  9804  00D932  0E00               	movlw	0
  9805  00D934  6EBA               	movwf	4026,c	;volatile
  9806                           
  9807                           ;Lab8test2.c: 374: PORTBbits.RB3 = 0;
  9808  00D936  9681               	bcf	3969,3,c	;volatile
  9809  00D938  0012               	return		;funcret
  9810  00D93A                     __end_of_Deactivate_Buzzer:
  9811                           	opt stack 0
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           intcon2	equ	0xFF1
  9820                           postinc0	equ	0xFEE
  9821                           wreg	equ	0xFE8
  9822                           postdec1	equ	0xFE5
  9823                           fsr1l	equ	0xFE1
  9824                           indf2	equ	0xFDF
  9825                           postinc2	equ	0xFDE
  9826                           fsr2h	equ	0xFDA
  9827                           fsr2l	equ	0xFD9
  9828                           status	equ	0xFD8
  9829                           
  9830 ;; *************** function _Activate_Buzzer *****************
  9831 ;; Defined at:
  9832 ;;		line 363 in file "Lab8test2.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;		None               void
  9839 ;; Registers used:
  9840 ;;		wreg, status,2
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; This function calls:
  9853 ;;		Nothing
  9854 ;; This function is called by:
  9855 ;;		_Wait_One_Second_With_Beep
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           	psect	text54
  9860  00D968                     __ptext54:
  9861                           	opt stack 0
  9862  00D968                     _Activate_Buzzer:
  9863                           	opt stack 27
  9864                           
  9865                           ;Lab8test2.c: 365: PR2 = 0b11111001;
  9866                           
  9867                           ;incstack = 0
  9868  00D968  0EF9               	movlw	249
  9869  00D96A  6ECB               	movwf	4043,c	;volatile
  9870                           
  9871                           ;Lab8test2.c: 366: T2CON = 0b00000101;
  9872  00D96C  0E05               	movlw	5
  9873  00D96E  6ECA               	movwf	4042,c	;volatile
  9874                           
  9875                           ;Lab8test2.c: 367: CCPR2L = 0b01001010;
  9876  00D970  0E4A               	movlw	74
  9877  00D972  6EBB               	movwf	4027,c	;volatile
  9878                           
  9879                           ;Lab8test2.c: 368: CCP2CON = 0b00111100;
  9880  00D974  0E3C               	movlw	60
  9881  00D976  6EBA               	movwf	4026,c	;volatile
  9882  00D978  0012               	return		;funcret
  9883  00D97A                     __end_of_Activate_Buzzer:
  9884                           	opt stack 0
  9885                           tblptru	equ	0xFF8
  9886                           tblptrh	equ	0xFF7
  9887                           tblptrl	equ	0xFF6
  9888                           tablat	equ	0xFF5
  9889                           prodh	equ	0xFF4
  9890                           prodl	equ	0xFF3
  9891                           intcon	equ	0xFF2
  9892                           intcon2	equ	0xFF1
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           postdec1	equ	0xFE5
  9896                           fsr1l	equ	0xFE1
  9897                           indf2	equ	0xFDF
  9898                           postinc2	equ	0xFDE
  9899                           fsr2h	equ	0xFDA
  9900                           fsr2l	equ	0xFD9
  9901                           status	equ	0xFD8
  9902                           
  9903 ;; *************** function _DISPLAY_LOWER_7SEG *****************
  9904 ;; Defined at:
  9905 ;;		line 716 in file "Lab8test2.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  Lower           1    wreg     unsigned char 
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;  Lower           1    3[COMRAM] unsigned char 
  9910 ;;  LED2            2    1[COMRAM] int 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;		None               void
  9913 ;; Registers used:
  9914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9924 ;;Total ram usage:        4 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; This function calls:
  9927 ;;		Nothing
  9928 ;; This function is called by:
  9929 ;;		_PED_Control
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           	psect	text55
  9934  00DC48                     __ptext55:
  9935                           	opt stack 0
  9936  00DC48                     _DISPLAY_LOWER_7SEG:
  9937                           	opt stack 28
  9938                           
  9939                           ;incstack = 0
  9940                           ;DISPLAY_LOWER_7SEG@Lower stored from wreg
  9941  00DC48  6E04               	movwf	DISPLAY_LOWER_7SEG@Lower,c
  9942                           
  9943                           ;Lab8test2.c: 719: int LED2 = segDisplay[Lower];
  9944  00DC4A  5004               	movf	DISPLAY_LOWER_7SEG@Lower,w,c
  9945  00DC4C  0D02               	mullw	2
  9946  00DC4E  0E80               	movlw	low _segDisplay
  9947  00DC50  24F3               	addwf	prodl,w,c
  9948  00DC52  6ED9               	movwf	fsr2l,c
  9949  00DC54  0E00               	movlw	high _segDisplay
  9950  00DC56  20F4               	addwfc	prodh,w,c
  9951  00DC58  6EDA               	movwf	fsr2h,c
  9952  00DC5A  CFDE F002          	movff	postinc2,DISPLAY_LOWER_7SEG@LED2
  9953  00DC5E  CFDD F003          	movff	postdec2,DISPLAY_LOWER_7SEG@LED2+1
  9954                           
  9955                           ;Lab8test2.c: 720: PORTD = LED2;
  9956  00DC62  C002  FF83         	movff	DISPLAY_LOWER_7SEG@LED2,3971	;volatile
  9957                           
  9958                           ;Lab8test2.c: 721: PORTEbits.RE0 = segEDisplay[Lower];
  9959  00DC66  5004               	movf	DISPLAY_LOWER_7SEG@Lower,w,c
  9960  00DC68  0D02               	mullw	2
  9961  00DC6A  0E94               	movlw	low _segEDisplay
  9962  00DC6C  24F3               	addwf	prodl,w,c
  9963  00DC6E  6ED9               	movwf	fsr2l,c
  9964  00DC70  0E00               	movlw	high _segEDisplay
  9965  00DC72  20F4               	addwfc	prodh,w,c
  9966  00DC74  6EDA               	movwf	fsr2h,c
  9967  00DC76  50DF               	movf	indf2,w,c
  9968  00DC78  6E01               	movwf	??_DISPLAY_LOWER_7SEG& (0+255),c
  9969  00DC7A  5084               	movf	3972,w,c	;volatile
  9970  00DC7C  1801               	xorwf	??_DISPLAY_LOWER_7SEG,w,c
  9971  00DC7E  0BFE               	andlw	-2
  9972  00DC80  1801               	xorwf	??_DISPLAY_LOWER_7SEG,w,c
  9973  00DC82  6E84               	movwf	3972,c	;volatile
  9974  00DC84  0012               	return		;funcret
  9975  00DC86                     __end_of_DISPLAY_LOWER_7SEG:
  9976                           	opt stack 0
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           intcon	equ	0xFF2
  9984                           intcon2	equ	0xFF1
  9985                           postinc0	equ	0xFEE
  9986                           wreg	equ	0xFE8
  9987                           postdec1	equ	0xFE5
  9988                           fsr1l	equ	0xFE1
  9989                           indf2	equ	0xFDF
  9990                           postinc2	equ	0xFDE
  9991                           postdec2	equ	0xFDD
  9992                           fsr2h	equ	0xFDA
  9993                           fsr2l	equ	0xFD9
  9994                           status	equ	0xFD8
  9995                           tblptru	equ	0xFF8
  9996                           tblptrh	equ	0xFF7
  9997                           tblptrl	equ	0xFF6
  9998                           tablat	equ	0xFF5
  9999                           prodh	equ	0xFF4
 10000                           prodl	equ	0xFF3
 10001                           intcon	equ	0xFF2
 10002                           intcon2	equ	0xFF1
 10003                           postinc0	equ	0xFEE
 10004                           wreg	equ	0xFE8
 10005                           postdec1	equ	0xFE5
 10006                           fsr1l	equ	0xFE1
 10007                           indf2	equ	0xFDF
 10008                           postinc2	equ	0xFDE
 10009                           postdec2	equ	0xFDD
 10010                           fsr2h	equ	0xFDA
 10011                           fsr2l	equ	0xFD9
 10012                           status	equ	0xFD8
 10013                           
 10014                           	psect	rparam
 10015  0000                     tblptru	equ	0xFF8
 10016                           tblptrh	equ	0xFF7
 10017                           tblptrl	equ	0xFF6
 10018                           tablat	equ	0xFF5
 10019                           prodh	equ	0xFF4
 10020                           prodl	equ	0xFF3
 10021                           intcon	equ	0xFF2
 10022                           intcon2	equ	0xFF1
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        75
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     121
    BANK0           128      0      71
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  297659
                                             63 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  102371
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   60473
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1847
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1761
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6200
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1686
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3930
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1875
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1875
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1785
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1785
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  128453
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   79856
                                             59 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   25579
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   54187
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   29199
                                             57 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     392
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2630
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1867
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   22470
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   22426
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   11201
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4069
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   10522
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1   26082
                                             59 COMRAM     4     3      1
                 _DISPLAY_LOWER_7SEG
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   25619
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   23121
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    9673
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3528
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2838
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3983
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     946
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     799
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1064
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DISPLAY_LOWER_7SEG                                   4     4      0      67
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _DISPLAY_LOWER_7SEG
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
     _Set_EWLT
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
     _Set_EWLT
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      47       5       55.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      79       1       95.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0      34        0.0%
DATA                 0      0      C0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 01 17:50:05 2022

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep D9B4                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l202 EDA6  
                               l117 DE7A                                 l230 E800  
                               l127 D99A                                 l231 E76C  
                               l400 DBE8                                 l241 F092  
                               l401 DC0A                                 l233 E7DC  
                               l410 DB9E                                 l234 E7FE  
                               l171 DB36                                 l405 DB6E  
                               l414 DBA4                                 l407 DB72  
                               l408 DB78                                 l416 DBA8  
                               l177 E144                                 l193 EE50  
                               l409 DB7C                                 l417 DBAE  
                               l441 E59A                                 l434 E256  
                               l418 DBB2                                 l195 ED2A  
                               l419 DBD4                                 l259 EC32  
                               l275 E1CC                                 l380 DA3E  
                               l541 DA86                                 l437 E50E  
                               l533 DF90                                 l390 DD1E  
                               l446 E4D8                                 l534 DF92  
                               l391 DD22                                 l383 DA5E  
                               l439 E55E                                 l535 DF9C  
                               l392 DD44                                 l536 DF9E  
                               l473 F69C                                 l529 DF76  
                               l458 D9F2                                 l482 EFCE  
                               l538 DFB8                                 l387 DD14  
                               l396 DBDA                                 l389 DD18  
                               l734 E2EC                                 l398 DBDE  
                               l399 DBE4                                 l489 E65E  
                               l921 E9C0                                 l930 E382  
                               l747 E03A                                 l860 E6FC  
                               l924 E98C                                 l759 DC46  
                               l849 E724                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 003B                                 _PR2 000FCB  
                 _Deactivate_Buzzer D932                                 _dir 0077  
                               _nbr 006A                                 _txt 006C  
                    drawFastHLine@w 0009                      drawFastHLine@x 0012  
                    drawFastHLine@y 0008                        ___awmod@sign 0006  
           __end_of_update_LCD_misc F33C                                 prod 000FF3  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize DAB0  
                      ___ftdiv@cntr 0016                        ___ftdiv@sign 001B  
                      __CFG_WDT$OFF 000000                                l2020 DBEE  
                    drawFastVLine@h 0009                                l2032 DBB8  
                              l2026 DB82                                l3020 F240  
                              l3012 F224                                l3110 E014  
                              l3102 DFEC                                l3030 F262  
                              l3104 DFF6                                l3024 F24E  
                              l3016 F232                                l3050 E26E  
                              l3106 DFFE                                l3114 E020  
                              l1098 DCC2                                l3300 E5F6  
                              l3028 F25C                      drawFastVLine@x 0012  
                    drawFastVLine@y 0008                                l3062 E296  
                              l3118 E030                                l3064 E2A0  
                              l3056 E280                                l3240 E7E0  
                              l3224 E7A4                                l3082 E2E2  
                              l3074 E2C6                                l3066 E2A8  
                              l3306 E64E                                l3330 EE56  
                              l3250 E7FA                                l3218 E736  
                              l3402 DF88                                l3244 E7EA  
                              l3236 E7D2                                l3078 E2D2  
                              l3094 DFD0                                l2630 E0CE  
                              l3342 EF5C                                l3334 EEAC  
                              l3502 DAFC                                l3262 E18E  
                              l3432 DD28                                l3272 E1B4  
                              l3098 DFDE                                l2634 E106  
                              l2714 EE1C                                l2706 EDC8  
                              l2722 EE4C                                l2730 DC96  
                              l3442 E1E6                                l3290 F5C6  
                              l3282 F41C                                l3338 EF04  
                              l3274 E1C2                                l3258 E156  
                              l2652 DB18                                l2644 E12C  
                              l2660 DD50                                l2716 EE44  
                              l2708 EDF0                                l2804 E8CC  
                              l3452 E1FE                                l2740 E670  
                              l3348 EFB2                                l2646 E13A  
                              l2806 E8D2                                l3470 E228  
                              l3438 E1DC                                l3462 E214  
                              l3286 F4F0                                l2902 DC22  
                              l2910 E320                                l3390 DF6E  
                              l3382 DF5C                                l2664 DD6C  
                              l2680 ED18                                l2728 DC90  
                              l3296 E5A0                                l3480 E240  
                              l2752 E6C4                                l2744 E680  
                              l2920 E37E                                l2690 ED36  
                              l3466 E21E                                l2834 EC94  
                              l2818 EC18                                l2762 E704  
                              l2754 E6E4                                l2746 E68C  
                              l2914 E352                                l3706 E496  
                              l3394 DF7A                                l3386 DF66  
                              l2684 ED26                                l2676 ED0C  
                              l2780 E82A                                l2756 E6F0  
                              l2748 E6AC                                l2860 E926  
                              l3492 DAE0                                l2694 ED66  
                              l2686 ED2E                                l2838 ECE6  
                              l2854 E8FE                                l3654 E54A  
                              l2696 ED9A                                l2792 E86E  
                              l2768 E716                                l2880 E966  
                              l2856 E918                                l3496 DAEA  
                              l2698 ED9E                                l2890 E99A  
                              l2796 E888                                l2956 F078  
                              l2990 DB42                                l2984 F168  
                              l2992 DB4C                                l3972 E418  
                              l3976 E424                                STR_1 FFAD  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u2100 E79A                                u1510 EDFE  
                              u1360 E0FC                                u2170 E184  
                              u2090 E764                                u2600 E412  
                              u1650 E852                                u2610 E414  
                              u1751 E8F0                                u1771 E90E  
                              u1880 F1F6                                u1890 F1F8  
                              _MODE 0068                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 0001  
                              _main E384                                _font FDBD  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                    ??_get_full_ADC 0003                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0042  
                              _volt 0065                     drawFastHLine@hi 0010  
                   drawFastHLine@lo 0011            __end_of_update_LCD_color F69E  
          __end_of_update_LCD_count EFD0                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                     ??_drawFastHLine 000C  
                   ??_drawFastVLine 000C                        ___param_bank 000010  
        __end_of_DISPLAY_LOWER_7SEG DC86                        _Act_Mode_Txt 0055  
         __end_of_Deactivate_Buzzer D93A                     drawFastVLine@hi 0010  
                   drawFastVLine@lo 0011                         _SW_EWLT_Txt 005B  
                       _SW_MODE_Txt 005F                               ?_main 0001  
                   __end_of___awdiv E2EE                     drawCircle@ddF_x 0016  
                             STR_10 FFF7                     drawCircle@ddF_y 0018  
                             STR_11 FFF3                               STR_12 FF98  
                             STR_13 FFFD                               STR_14 FFFB  
                   __end_of___awmod E03C                     __end_of___ftdiv E9C2  
                             _T0CON 000FD5                     ___awdiv@divisor 0003  
                             _T2CON 000FCA                               _T3CON 000FB1  
                   ___awdiv@counter 0005                     drawCircle@color 0012  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _PORTD 000F83                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 006E                        ?_PED_Control 003C  
                             _Rcmd1 EAB4                               _Rcmd3 E9C2  
                       _SW_NSLT_Txt 0061                       drawRect@color 001B  
                     ___awtoft@sign 000C                     __end_of_init_IO D9E0  
                             _font2 FEBC               fillCircleHelper@ddF_x 0021  
             fillCircleHelper@ddF_y 0023                   ??_Wait_One_Second 003C  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
             fillCircleHelper@color 001D                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode E59C  
                    _Wait_N_Seconds DADA                     write_data@data_ 0003  
                   __initialization DE82                        __end_of_main E42E  
                      __end_of_font FEBC                    __end_of_Init_ADC D948  
                  __end_of_Rcmd2red DD02                          _Night_Mode E42E  
                  __end_of_Set_EWLT DBD6                    __end_of_Set_NSLT DC0C  
                            ??_main 0040                       __activetblptr 000002  
             Wait_N_Seconds@seconds 003C                   __end_of_LCD_Reset D98C  
                      _SW_EWPED_Txt 005D           ??_TFT_GreenTab_Initialize 000D  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 003D  
                  ___awdiv@dividend 0001                    __end_of___awtoft DC48  
                  __end_of___ftpack E726                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds DB08                        _SW_NSPED_Txt 0063  
                  __end_of_delay_ms DE82                              _Set_EW DB6A  
                            _Set_NS DD02                    __end_of_fillRect DD90  
                  __end_of_drawChar EE52                    __end_of_drawRect DF4A  
                __size_of_OpenUSART 0070                              ___ftge E2EE  
          __size_of_Activate_Buzzer 0012                              ___wmul DA60  
                         ??___awdiv 0005           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext E8E0                           ??___awmod 0005  
                         ??___ftdiv 0013                              _buffer 00A8  
                            clear_0 DE88                              clear_1 DE94  
                  ___awdiv@quotient 0007                     ___awmod@divisor 0003  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0005  
                      drawtext@size 0030                              _strcpy DB38  
                            _strlen DC86                __end_of_get_full_ADC DA60  
                         ??_init_IO 0001                        __pdataCOMRAM 0042  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 0001  
                      __mediumconst FDBC                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite D9A0                         Set_NS@color 0036  
                        __accesstop 0080             __end_of__initialization DEDA  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 000D                          ___ftdiv@f2 0010  
                        ___ftdiv@f3 0017                          ___awtoft@c 0009  
                     __end_of_Rcmd1 EBC4                       __end_of_Rcmd3 EAB4  
                    __pcstackCOMRAM 0001                        __pidataBANK0 DA88  
                     __end_of_font2 FF98                         ?_Night_Mode 0001  
                    drawPixel@color 0009              __size_of_write_command 0010  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0019  
                           ??_Rcmd1 000D                             ??_Rcmd3 000D  
                __size_of_drawPixel 0030                   __end_of_OpenUSART DFBA  
              __size_of_PED_Control 008A                          __pbssBANK0 00A8  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014           __size_of_Wait_Half_Second 001A  
                   spiwrite@spidata 0002                           ?_Set_EWLT 0001  
                         ?_Set_NSLT 0001                   ?_update_LCD_color 0033  
                 ?_update_LCD_count 003A                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0034                  ??_update_LCD_count 003B  
                           ?___ftge 0001                             ?___wmul 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
         update_LCD_PED_Count@count 003A                           ?___awtoft 0009  
                         ?___ftpack 0001                     _Wait_One_Second E03C  
                        _fillCircle DDDE                             ?_strcpy 0001  
                           ?_strlen 0001                   ??_Activate_Buzzer 0001  
                        _fillScreen D9FA                          _drawCircle EFD0  
                        ??_Day_Mode 0040                  _DISPLAY_LOWER_7SEG DC48  
                         ?_delay_ms 0007                           ?_fillRect 0013  
         update_LCD_count@direction 003B                           ?_drawChar 001E  
                           _SSPCON1 000FC6                           ?_drawRect 0013  
                           _SSPSTAT 000FC7               __end_of_fillRectangle E802  
                         ?_drawtext 0029                 ?_DISPLAY_LOWER_7SEG 0001  
                           _SW_EWLT 0070                             _SW_MODE 0072  
                        ??_Init_ADC 0001                             _SW_NSLT 0073  
                        ??_Rcmd2red 0004                 __size_of_Night_Mode 00AC  
                     _write_command D948                          ??_Set_EWLT 0001  
                        ??_Set_NSLT 0001                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0036  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine E1CE  
                 __end_of_drawPixel DB38               __end_of_drawFastVLine E146  
                  _fillCircleHelper EBC4                     __size_of___ftge 0096  
                           ___awdiv E258                             ___awmod DFBA  
                           ___ftdiv E8E0                     __size_of___wmul 0028  
             __size_of_get_full_ADC 0026                ??_DISPLAY_LOWER_7SEG 0001  
                         ?_spiwrite 0001                          _segDisplay 0080  
                           __pcinit DE82                          ??___awtoft 000C  
                        ??___ftpack 0006                             __ramtop 1000  
                           __ptext0 E384                             __ptext1 D9A0  
                           __ptext2 DF4A                             __ptext3 D9CA  
                           __ptext4 E42E                             __ptext5 F69E  
                           __ptext6 D9FA                             __ptext7 E726  
                           __ptext8 DEE4                             __ptext9 E146  
                 __end_of_init_UART D9B4                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO D9CA                           _T3CONbits 000FB1  
                  ___awmod@dividend 0001                          ??_delay_ms 0009  
                     drawtext@_text 002A                       drawtext@color 002C  
                        ??_fillRect 0018                          ??_drawChar 0025  
                         _LCD_Reset D97A                          ??_drawRect 001D  
                     _setAddrWindow DD90                  drawFastHLine@color 000A  
                        delay_ms@ms 0007                end_of_initialization DEDA  
                        ??_drawtext 0031                      ?_write_command 0001  
                     __Lmediumconst FDBC                           _PED_Count 006F  
                      _get_full_ADC DA3A                        PED_Control@i 003E  
     __size_of_update_LCD_PED_Count 00C4             __end_of_Wait_One_Second E0BE  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 0001  
                           strlen@s 0001                     fillCircle@color 0031  
                       ?_fillCircle 002B                           _PORTAbits 000F80  
                  drawtext@cursor_x 0039                    drawtext@cursor_y 0038  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTEbits 000F84                         ?_fillScreen 0014  
                       ?_drawCircle 000C                          drawChar@bg 0022  
                         _TRISCbits 000F94                      ?_setAddrWindow 0004  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 003C  
                  drawtext@textsize 0033            __size_of_update_LCD_misc 01BE  
                        drawPixel@x 000B                          drawPixel@y 0008  
                  _Wait_Half_Second D9E0                         ___ftdiv@exp 001A  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 003C  
                get_full_ADC@result 0005                      __end_of_Set_EW DBA0  
                    __end_of_Set_NS DD46                      __end_of___ftge E384  
                    __end_of___wmul DA88                       delay_ms@count 000B  
                        _write_data D958                       __pidataCOMRAM DA17  
                      ??_Night_Mode 003E            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                      __end_of_strcpy DB6A  
                    __end_of_strlen DCC4                 start_initialization DE82  
                 __size_of_Day_Mode 00C2                     ??_write_command 0003  
                         _OpenUSART DF4A                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode E4DA                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 003D  
               __size_of_drawCircle 01AE                            ??_Set_EW 0001  
                          ??_Set_NS 0036                   __size_of_Set_EWLT 0036  
                   _Activate_Buzzer D968                   __size_of_Set_NSLT 0036  
                  ?_Wait_One_Second 0001                            ??___ftge 0007  
                          ??___wmul 0005                         __pdataBANK0 0080  
                   setAddrWindow@x0 0007                     setAddrWindow@x1 0005  
                   setAddrWindow@y0 0004                     setAddrWindow@y1 0006  
                          ??_strcpy 0005                            ??_strlen 0003  
                      _PED_EW_Count 004F           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 017E                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 0065  
                     ??_PED_Control 003D                     ??_setAddrWindow 0007  
                      _PED_NS_Count 0052                         ??_LCD_Reset 000D  
          __end_of_fillCircleHelper ECFC                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_OpenUSART 0001  
                 __size_of_drawRect 0066                   __size_of_drawtext 00DE  
                 ??_update_LCD_misc 003A     __end_of_TFT_GreenTab_Initialize DADA  
                     __pmediumconst FDBC                            ?___awdiv 0001  
                          ?___awmod 0001                            ?___ftdiv 000D  
                         __tft_type 0075                           _direction 0078  
                drawFastVLine@color 000A                         ?_write_data 0001  
                         _drawPixel DB08                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen F69E  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART D9A0                  ?_Initialize_Screen 0001  
 __end_of_Wait_One_Second_With_Beep D9CA                 __end_of_PED_Control E258  
           __end_of_Activate_Buzzer D97A                      ___wmul@product 0005  
               ??_Initialize_Screen 003A                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 0046                           fillRect@h 0015  
                         fillRect@i 001C                           fillRect@w 0014  
                         fillRect@x 001B                           fillRect@y 0013  
       __size_of_DISPLAY_LOWER_7SEG 003E                           drawChar@c 001F  
                         drawChar@i 0028                           drawChar@j 0027  
                      ??_fillCircle 0033                           drawChar@x 0026  
                         drawChar@y 001E                          ?_drawPixel 0008  
            __size_of_fillRectangle 00DC                            _NS_Count 004C  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second D9FA  
                 ___wmul@multiplier 0001           __end_of_Initialize_Screen FDBC  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 0057  
                     _FlashingS_Txt 0059                   PED_Control@i_1325 003F  
                      ??_drawCircle 0014        __end_of_update_LCD_PED_Count E660  
                         main@nStep 0040                            _SW_EWPED 0071  
             update_LCD_color@color 0033                            _Day_Mode E4DA  
                          _SW_NSPED 0074           update_LCD_color@direction 0034  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                         copy_data0 DEAE                           copy_data1 DECE  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC D93A                   write_command@cmd_ 0003  
                       ??_OpenUSART 0003                            _Rcmd2red DCC4  
               __size_of_write_data 0010                         _segEDisplay 0094  
                   OpenUSART@config 0003                            _Set_EWLT DBA0  
                __end_of_fillCircle DE30                            _Set_NSLT DBD6  
                          __Hrparam 0000                  __end_of_fillScreen DA16  
             update_LCD_count@count 003A                            __Lrparam 0000  
                __end_of_drawCircle F17E                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft DC0C                            ___ftpack E660  
                  _update_LCD_color F33C                    _update_LCD_count EE52  
                  __size_of_init_IO 0016                         _PED_Control E1CE  
                          _delay_ms DE30                            __ptext10 DAB0  
                          __ptext11 E9C2                            __ptext20 E03C  
                          __ptext12 DCC4                            __ptext21 F17E  
                          __ptext13 EAB4                            __ptext30 F33C  
                          __ptext22 DA3A                            __ptext14 D97A  
                          __ptext31 DDDE                            __ptext23 E2EE  
                          __ptext15 DE30                            __ptext40 ECFC  
                          __ptext32 EBC4                            __ptext24 E8E0  
                          __ptext16 D93A                            __ptext41 DD46  
                          __ptext33 EFD0                            __ptext25 DC0C  
                          __ptext17 E4DA                            __ptext50 E258  
                          __ptext42 E0BE                            __ptext34 DBA0  
                          __ptext26 E660                            __ptext18 DADA  
                          __ptext51 D9B4                            __ptext43 DB08  
                          __ptext35 DB6A                            __ptext27 DB38  
                          __ptext19 EE52                            __ptext52 D9E0  
                          __ptext44 DD90                            __ptext36 E1CE  
                          __ptext28 DBD6                            __ptext53 D932  
                          __ptext45 D958                            __ptext37 E59C  
                          __ptext29 DD02                            __ptext54 D968  
                          __ptext46 D948                            __ptext38 E802  
                          __ptext55 DC48                            __ptext47 D98C  
                          __ptext39 DC86                            __ptext48 DA60  
                          __ptext49 DFBA                            _fillRect DD46  
                          _drawChar ECFC                            _drawRect DEE4  
  __size_of_TFT_GreenTab_Initialize 002A                            _colstart 0076  
                          _drawtext E802                          strcpy@from 0003  
                     _fillRectangle E726                    ?_Activate_Buzzer 0001  
                     __size_of_main 00AA             DISPLAY_LOWER_7SEG@Lower 0004  
                   fillRectangle@hi 0011                     fillRectangle@lo 0012  
                     _drawFastHLine E146                       _drawFastVLine E0BE  
                          _spiwrite D98C                         ??_drawPixel 000B  
                          _rowstart 0079                  fillCircleHelper@x0 0013  
                fillCircleHelper@y0 0015          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 0001  
                       ??_init_UART 0004                       Set_EWLT@color 0001  
                        _EWLT_Count 0043                   ?_fillCircleHelper 0013  
                         spiwrite@x 0001         ??_Wait_One_Second_With_Beep 0001  
                   _update_LCD_misc F17E                      ?_fillRectangle 0008  
                ??_fillCircleHelper 001F               __end_of_write_command D958  
            DISPLAY_LOWER_7SEG@LED2 0002                     fillScreen@color 0014  
              update_LCD_misc@nStep 003A                _update_LCD_PED_Count E59C  
           __size_of_Wait_N_Seconds 002E                        fillCircle@x0 002B  
                      fillCircle@y0 002D                      ?_drawFastHLine 0008  
                    fillRectangle@h 000A                      fillRectangle@w 0009  
                    fillRectangle@x 0013                      fillRectangle@y 0008  
                    ?_drawFastVLine 0008                   fillCircleHelper@f 0025  
                 fillCircleHelper@r 0017                   fillCircleHelper@x 0027  
                 fillCircleHelper@y 0029                        ??_write_data 0003  
                     fillRect@color 0016            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0005                            strlen@cp 0005  
                          strcpy@to 0001                       Set_NSLT@color 0001  
                        _NSLT_Count 0049                         fillCircle@r 002F  
             __end_of_setAddrWindow DDDE                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data D968  
                      drawChar@line 0025                       ?_get_full_ADC 0001  
                      drawChar@size 0024               ?_update_LCD_PED_Count 003A  
