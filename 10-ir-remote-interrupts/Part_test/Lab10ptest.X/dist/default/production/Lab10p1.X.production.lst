

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 15 13:32:21 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  0015E0                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _array1
    67  0015E0  A2                 	db	162
    68  0015E1  62                 	db	98
    69  0015E2  E2                 	db	226
    70  0015E3  22                 	db	34
    71  0015E4  02                 	db	2
    72  0015E5  C2                 	db	194
    73  0015E6  E0                 	db	224
    74  0015E7  A8                 	db	168
    75  0015E8  90                 	db	144
    76  0015E9  68                 	db	104
    77  0015EA  98                 	db	152
    78  0015EB  B0                 	db	176
    79  0015EC  30                 	db	48
    80  0015ED  18                 	db	24
    81  0015EE  7A                 	db	122
    82  0015EF  10                 	db	16
    83  0015F0  38                 	db	56
    84  0015F1  5A                 	db	90
    85  0015F2  42                 	db	66
    86  0015F3  4A                 	db	74
    87  0015F4  52                 	db	82
    88                           
    89                           ;initializer for _wrap
    90  0015F5  01                 	db	1
    91                           
    92                           	psect	idataBANK0
    93  00140E                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _d1
    97  00140E  01                 	db	1
    98  00140F  01                 	db	1
    99  001410  01                 	db	1
   100  001411  03                 	db	3
   101  001412  03                 	db	3
   102  001413  02                 	db	2
   103  001414  00                 	db	0
   104  001415  00                 	db	0
   105  001416  00                 	db	0
   106  001417  00                 	db	0
   107  001418  00                 	db	0
   108  001419  00                 	db	0
   109  00141A  00                 	db	0
   110  00141B  00                 	db	0
   111  00141C  00                 	db	0
   112  00141D  00                 	db	0
   113  00141E  00                 	db	0
   114  00141F  00                 	db	0
   115  001420  00                 	db	0
   116  001421  00                 	db	0
   117  001422  00                 	db	0
   118                           
   119                           ;initializer for _d2
   120  001423  00                 	db	0
   121  001424  00                 	db	0
   122  001425  00                 	db	0
   123  001426  00                 	db	0
   124  001427  00                 	db	0
   125  001428  00                 	db	0
   126  001429  04                 	db	4
   127  00142A  04                 	db	4
   128  00142B  04                 	db	4
   129  00142C  05                 	db	5
   130  00142D  05                 	db	5
   131  00142E  05                 	db	5
   132  00142F  05                 	db	5
   133  001430  05                 	db	5
   134  001431  05                 	db	5
   135  001432  00                 	db	0
   136  001433  00                 	db	0
   137  001434  00                 	db	0
   138  001435  00                 	db	0
   139  001436  00                 	db	0
   140  001437  00                 	db	0
   141                           
   142                           ;initializer for _d3
   143  001438  00                 	db	0
   144  001439  00                 	db	0
   145  00143A  00                 	db	0
   146  00143B  00                 	db	0
   147  00143C  00                 	db	0
   148  00143D  00                 	db	0
   149  00143E  00                 	db	0
   150  00143F  00                 	db	0
   151  001440  00                 	db	0
   152  001441  00                 	db	0
   153  001442  00                 	db	0
   154  001443  00                 	db	0
   155  001444  00                 	db	0
   156  001445  00                 	db	0
   157  001446  00                 	db	0
   158  001447  05                 	db	5
   159  001448  05                 	db	5
   160  001449  05                 	db	5
   161  00144A  05                 	db	5
   162  00144B  05                 	db	5
   163  00144C  05                 	db	5
   164                           
   165                           	psect	idataBANK1
   166  000E24                     __pidataBANK1:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _color
   170  000E24  F800               	dw	63488
   171  000E26  F800               	dw	63488
   172  000E28  F800               	dw	63488
   173  000E2A  001F               	dw	31
   174  000E2C  001F               	dw	31
   175  000E2E  07E0               	dw	2016
   176  000E30  F81F               	dw	63519
   177  000E32  F81F               	dw	63519
   178  000E34  F81F               	dw	63519
   179  000E36  FFFF               	dw	65535
   180  000E38  FFFF               	dw	65535
   181  000E3A  FFFF               	dw	65535
   182  000E3C  FFFF               	dw	65535
   183  000E3E  FFFF               	dw	65535
   184  000E40  FFFF               	dw	65535
   185  000E42  FFFF               	dw	65535
   186  000E44  FFFF               	dw	65535
   187  000E46  FFFF               	dw	65535
   188  000E48  FFFF               	dw	65535
   189  000E4A  FFFF               	dw	65535
   190  000E4C  FFFF               	dw	65535
   191                           
   192                           ;initializer for _color_font
   193  000E4E  FFFF               	dw	65535
   194  000E50  FFFF               	dw	65535
   195  000E52  FFFF               	dw	65535
   196  000E54  FFFF               	dw	65535
   197  000E56  FFFF               	dw	65535
   198  000E58  FFFF               	dw	65535
   199  000E5A  FFFF               	dw	65535
   200  000E5C  FFFF               	dw	65535
   201  000E5E  FFFF               	dw	65535
   202  000E60  0000               	dw	0
   203  000E62  0000               	dw	0
   204  000E64  0000               	dw	0
   205  000E66  0000               	dw	0
   206  000E68  0000               	dw	0
   207  000E6A  0000               	dw	0
   208  000E6C  0000               	dw	0
   209  000E6E  0000               	dw	0
   210  000E70  0000               	dw	0
   211  000E72  0000               	dw	0
   212  000E74  0000               	dw	0
   213  000E76  0000               	dw	0
   214                           
   215                           ;initializer for _txt1
   216  000E78  43                 	db	67
   217  000E79  48                 	db	72
   218  000E7A  2D                 	db	45
   219  000E7B  00                 	db	0
   220  000E7C  43                 	db	67
   221  000E7D  48                 	db	72
   222  000E7E  20                 	db	32
   223  000E7F  00                 	db	0
   224  000E80  43                 	db	67
   225  000E81  48                 	db	72
   226  000E82  2B                 	db	43
   227  000E83  00                 	db	0
   228  000E84  7C                 	db	124
   229  000E85  3C                 	db	60
   230  000E86  3C                 	db	60
   231  000E87  00                 	db	0
   232  000E88  3E                 	db	62
   233  000E89  3E                 	db	62
   234  000E8A  7C                 	db	124
   235  000E8B  00                 	db	0
   236  000E8C  3E                 	db	62
   237  000E8D  7C                 	db	124
   238  000E8E  7C                 	db	124
   239  000E8F  00                 	db	0
   240  000E90  56                 	db	86
   241  000E91  4C                 	db	76
   242  000E92  2D                 	db	45
   243  000E93  00                 	db	0
   244  000E94  56                 	db	86
   245  000E95  4C                 	db	76
   246  000E96  2B                 	db	43
   247  000E97  00                 	db	0
   248  000E98  45                 	db	69
   249  000E99  51                 	db	81
   250  000E9A  00                 	db	0
   251  000E9B  00                 	db	0
   252  000E9C  20                 	db	32
   253  000E9D  30                 	db	48
   254  000E9E  20                 	db	32
   255  000E9F  00                 	db	0
   256  000EA0  31                 	db	49
   257  000EA1  30                 	db	48
   258  000EA2  30                 	db	48
   259  000EA3  00                 	db	0
   260  000EA4  32                 	db	50
   261  000EA5  30                 	db	48
   262  000EA6  30                 	db	48
   263  000EA7  00                 	db	0
   264  000EA8  20                 	db	32
   265  000EA9  31                 	db	49
   266  000EAA  20                 	db	32
   267  000EAB  00                 	db	0
   268  000EAC  20                 	db	32
   269  000EAD  32                 	db	50
   270  000EAE  20                 	db	32
   271  000EAF  00                 	db	0
   272  000EB0  20                 	db	32
   273  000EB1  33                 	db	51
   274  000EB2  20                 	db	32
   275  000EB3  00                 	db	0
   276  000EB4  20                 	db	32
   277  000EB5  34                 	db	52
   278  000EB6  20                 	db	32
   279  000EB7  00                 	db	0
   280  000EB8  20                 	db	32
   281  000EB9  35                 	db	53
   282  000EBA  20                 	db	32
   283  000EBB  00                 	db	0
   284  000EBC  20                 	db	32
   285  000EBD  36                 	db	54
   286  000EBE  20                 	db	32
   287  000EBF  00                 	db	0
   288  000EC0  20                 	db	32
   289  000EC1  37                 	db	55
   290  000EC2  20                 	db	32
   291  000EC3  00                 	db	0
   292  000EC4  20                 	db	32
   293  000EC5  38                 	db	56
   294  000EC6  20                 	db	32
   295  000EC7  00                 	db	0
   296  000EC8  20                 	db	32
   297  000EC9  39                 	db	57
   298  000ECA  20                 	db	32
   299  000ECB  00                 	db	0
   300                           
   301                           	psect	mediumconst
   302  00FDC0                     __pmediumconst:
   303                           	opt stack 0
   304  00FDC0  00                 	db	0
   305  00FDC1                     _font:
   306                           	opt stack 0
   307  00FDC1  00                 	db	0
   308  00FDC2  00                 	db	0
   309  00FDC3  00                 	db	0
   310  00FDC4  00                 	db	0
   311  00FDC5  00                 	db	0
   312  00FDC6  00                 	db	0
   313  00FDC7  00                 	db	0
   314  00FDC8  5F                 	db	95
   315  00FDC9  00                 	db	0
   316  00FDCA  00                 	db	0
   317  00FDCB  00                 	db	0
   318  00FDCC  07                 	db	7
   319  00FDCD  00                 	db	0
   320  00FDCE  07                 	db	7
   321  00FDCF  00                 	db	0
   322  00FDD0  14                 	db	20
   323  00FDD1  7F                 	db	127
   324  00FDD2  14                 	db	20
   325  00FDD3  7F                 	db	127
   326  00FDD4  14                 	db	20
   327  00FDD5  24                 	db	36
   328  00FDD6  2A                 	db	42
   329  00FDD7  7F                 	db	127
   330  00FDD8  2A                 	db	42
   331  00FDD9  12                 	db	18
   332  00FDDA  23                 	db	35
   333  00FDDB  13                 	db	19
   334  00FDDC  08                 	db	8
   335  00FDDD  64                 	db	100
   336  00FDDE  62                 	db	98
   337  00FDDF  36                 	db	54
   338  00FDE0  49                 	db	73
   339  00FDE1  56                 	db	86
   340  00FDE2  20                 	db	32
   341  00FDE3  50                 	db	80
   342  00FDE4  00                 	db	0
   343  00FDE5  08                 	db	8
   344  00FDE6  07                 	db	7
   345  00FDE7  03                 	db	3
   346  00FDE8  00                 	db	0
   347  00FDE9  00                 	db	0
   348  00FDEA  1C                 	db	28
   349  00FDEB  22                 	db	34
   350  00FDEC  41                 	db	65
   351  00FDED  00                 	db	0
   352  00FDEE  00                 	db	0
   353  00FDEF  41                 	db	65
   354  00FDF0  22                 	db	34
   355  00FDF1  1C                 	db	28
   356  00FDF2  00                 	db	0
   357  00FDF3  2A                 	db	42
   358  00FDF4  1C                 	db	28
   359  00FDF5  7F                 	db	127
   360  00FDF6  1C                 	db	28
   361  00FDF7  2A                 	db	42
   362  00FDF8  08                 	db	8
   363  00FDF9  08                 	db	8
   364  00FDFA  3E                 	db	62
   365  00FDFB  08                 	db	8
   366  00FDFC  08                 	db	8
   367  00FDFD  00                 	db	0
   368  00FDFE  80                 	db	128
   369  00FDFF  70                 	db	112
   370  00FE00  30                 	db	48
   371  00FE01  00                 	db	0
   372  00FE02  08                 	db	8
   373  00FE03  08                 	db	8
   374  00FE04  08                 	db	8
   375  00FE05  08                 	db	8
   376  00FE06  08                 	db	8
   377  00FE07  00                 	db	0
   378  00FE08  00                 	db	0
   379  00FE09  60                 	db	96
   380  00FE0A  60                 	db	96
   381  00FE0B  00                 	db	0
   382  00FE0C  20                 	db	32
   383  00FE0D  10                 	db	16
   384  00FE0E  08                 	db	8
   385  00FE0F  04                 	db	4
   386  00FE10  02                 	db	2
   387  00FE11  3E                 	db	62
   388  00FE12  51                 	db	81
   389  00FE13  49                 	db	73
   390  00FE14  45                 	db	69
   391  00FE15  3E                 	db	62
   392  00FE16  00                 	db	0
   393  00FE17  42                 	db	66
   394  00FE18  7F                 	db	127
   395  00FE19  40                 	db	64
   396  00FE1A  00                 	db	0
   397  00FE1B  72                 	db	114
   398  00FE1C  49                 	db	73
   399  00FE1D  49                 	db	73
   400  00FE1E  49                 	db	73
   401  00FE1F  46                 	db	70
   402  00FE20  21                 	db	33
   403  00FE21  41                 	db	65
   404  00FE22  49                 	db	73
   405  00FE23  4D                 	db	77
   406  00FE24  33                 	db	51
   407  00FE25  18                 	db	24
   408  00FE26  14                 	db	20
   409  00FE27  12                 	db	18
   410  00FE28  7F                 	db	127
   411  00FE29  10                 	db	16
   412  00FE2A  27                 	db	39
   413  00FE2B  45                 	db	69
   414  00FE2C  45                 	db	69
   415  00FE2D  45                 	db	69
   416  00FE2E  39                 	db	57
   417  00FE2F  3C                 	db	60
   418  00FE30  4A                 	db	74
   419  00FE31  49                 	db	73
   420  00FE32  49                 	db	73
   421  00FE33  31                 	db	49
   422  00FE34  41                 	db	65
   423  00FE35  21                 	db	33
   424  00FE36  11                 	db	17
   425  00FE37  09                 	db	9
   426  00FE38  07                 	db	7
   427  00FE39  36                 	db	54
   428  00FE3A  49                 	db	73
   429  00FE3B  49                 	db	73
   430  00FE3C  49                 	db	73
   431  00FE3D  36                 	db	54
   432  00FE3E  46                 	db	70
   433  00FE3F  49                 	db	73
   434  00FE40  49                 	db	73
   435  00FE41  29                 	db	41
   436  00FE42  1E                 	db	30
   437  00FE43  00                 	db	0
   438  00FE44  00                 	db	0
   439  00FE45  14                 	db	20
   440  00FE46  00                 	db	0
   441  00FE47  00                 	db	0
   442  00FE48  00                 	db	0
   443  00FE49  40                 	db	64
   444  00FE4A  34                 	db	52
   445  00FE4B  00                 	db	0
   446  00FE4C  00                 	db	0
   447  00FE4D  00                 	db	0
   448  00FE4E  08                 	db	8
   449  00FE4F  14                 	db	20
   450  00FE50  22                 	db	34
   451  00FE51  41                 	db	65
   452  00FE52  14                 	db	20
   453  00FE53  14                 	db	20
   454  00FE54  14                 	db	20
   455  00FE55  14                 	db	20
   456  00FE56  14                 	db	20
   457  00FE57  00                 	db	0
   458  00FE58  41                 	db	65
   459  00FE59  22                 	db	34
   460  00FE5A  14                 	db	20
   461  00FE5B  08                 	db	8
   462  00FE5C  02                 	db	2
   463  00FE5D  01                 	db	1
   464  00FE5E  59                 	db	89
   465  00FE5F  09                 	db	9
   466  00FE60  06                 	db	6
   467  00FE61  3E                 	db	62
   468  00FE62  41                 	db	65
   469  00FE63  5D                 	db	93
   470  00FE64  59                 	db	89
   471  00FE65  4E                 	db	78
   472  00FE66  7C                 	db	124
   473  00FE67  12                 	db	18
   474  00FE68  11                 	db	17
   475  00FE69  12                 	db	18
   476  00FE6A  7C                 	db	124
   477  00FE6B  7F                 	db	127
   478  00FE6C  49                 	db	73
   479  00FE6D  49                 	db	73
   480  00FE6E  49                 	db	73
   481  00FE6F  36                 	db	54
   482  00FE70  3E                 	db	62
   483  00FE71  41                 	db	65
   484  00FE72  41                 	db	65
   485  00FE73  41                 	db	65
   486  00FE74  22                 	db	34
   487  00FE75  7F                 	db	127
   488  00FE76  41                 	db	65
   489  00FE77  41                 	db	65
   490  00FE78  41                 	db	65
   491  00FE79  3E                 	db	62
   492  00FE7A  7F                 	db	127
   493  00FE7B  49                 	db	73
   494  00FE7C  49                 	db	73
   495  00FE7D  49                 	db	73
   496  00FE7E  41                 	db	65
   497  00FE7F  7F                 	db	127
   498  00FE80  09                 	db	9
   499  00FE81  09                 	db	9
   500  00FE82  09                 	db	9
   501  00FE83  01                 	db	1
   502  00FE84  3E                 	db	62
   503  00FE85  41                 	db	65
   504  00FE86  41                 	db	65
   505  00FE87  51                 	db	81
   506  00FE88  73                 	db	115
   507  00FE89  7F                 	db	127
   508  00FE8A  08                 	db	8
   509  00FE8B  08                 	db	8
   510  00FE8C  08                 	db	8
   511  00FE8D  7F                 	db	127
   512  00FE8E  00                 	db	0
   513  00FE8F  41                 	db	65
   514  00FE90  7F                 	db	127
   515  00FE91  41                 	db	65
   516  00FE92  00                 	db	0
   517  00FE93  20                 	db	32
   518  00FE94  40                 	db	64
   519  00FE95  41                 	db	65
   520  00FE96  3F                 	db	63
   521  00FE97  01                 	db	1
   522  00FE98  7F                 	db	127
   523  00FE99  08                 	db	8
   524  00FE9A  14                 	db	20
   525  00FE9B  22                 	db	34
   526  00FE9C  41                 	db	65
   527  00FE9D  7F                 	db	127
   528  00FE9E  40                 	db	64
   529  00FE9F  40                 	db	64
   530  00FEA0  40                 	db	64
   531  00FEA1  40                 	db	64
   532  00FEA2  7F                 	db	127
   533  00FEA3  02                 	db	2
   534  00FEA4  1C                 	db	28
   535  00FEA5  02                 	db	2
   536  00FEA6  7F                 	db	127
   537  00FEA7  7F                 	db	127
   538  00FEA8  04                 	db	4
   539  00FEA9  08                 	db	8
   540  00FEAA  10                 	db	16
   541  00FEAB  7F                 	db	127
   542  00FEAC  3E                 	db	62
   543  00FEAD  41                 	db	65
   544  00FEAE  41                 	db	65
   545  00FEAF  41                 	db	65
   546  00FEB0  3E                 	db	62
   547  00FEB1  7F                 	db	127
   548  00FEB2  09                 	db	9
   549  00FEB3  09                 	db	9
   550  00FEB4  09                 	db	9
   551  00FEB5  06                 	db	6
   552  00FEB6  3E                 	db	62
   553  00FEB7  41                 	db	65
   554  00FEB8  51                 	db	81
   555  00FEB9  21                 	db	33
   556  00FEBA  5E                 	db	94
   557  00FEBB  7F                 	db	127
   558  00FEBC  09                 	db	9
   559  00FEBD  19                 	db	25
   560  00FEBE  29                 	db	41
   561  00FEBF  46                 	db	70
   562  00FEC0                     __end_of_font:
   563                           	opt stack 0
   564  00FEC0                     _font2:
   565                           	opt stack 0
   566  00FEC0  26                 	db	38
   567  00FEC1  49                 	db	73
   568  00FEC2  49                 	db	73
   569  00FEC3  49                 	db	73
   570  00FEC4  32                 	db	50
   571  00FEC5  03                 	db	3
   572  00FEC6  01                 	db	1
   573  00FEC7  7F                 	db	127
   574  00FEC8  01                 	db	1
   575  00FEC9  03                 	db	3
   576  00FECA  3F                 	db	63
   577  00FECB  40                 	db	64
   578  00FECC  40                 	db	64
   579  00FECD  40                 	db	64
   580  00FECE  3F                 	db	63
   581  00FECF  1F                 	db	31
   582  00FED0  20                 	db	32
   583  00FED1  40                 	db	64
   584  00FED2  20                 	db	32
   585  00FED3  1F                 	db	31
   586  00FED4  3F                 	db	63
   587  00FED5  40                 	db	64
   588  00FED6  38                 	db	56
   589  00FED7  40                 	db	64
   590  00FED8  3F                 	db	63
   591  00FED9  63                 	db	99
   592  00FEDA  14                 	db	20
   593  00FEDB  08                 	db	8
   594  00FEDC  14                 	db	20
   595  00FEDD  63                 	db	99
   596  00FEDE  03                 	db	3
   597  00FEDF  04                 	db	4
   598  00FEE0  78                 	db	120
   599  00FEE1  04                 	db	4
   600  00FEE2  03                 	db	3
   601  00FEE3  61                 	db	97
   602  00FEE4  59                 	db	89
   603  00FEE5  49                 	db	73
   604  00FEE6  4D                 	db	77
   605  00FEE7  43                 	db	67
   606  00FEE8  00                 	db	0
   607  00FEE9  7F                 	db	127
   608  00FEEA  41                 	db	65
   609  00FEEB  41                 	db	65
   610  00FEEC  41                 	db	65
   611  00FEED  02                 	db	2
   612  00FEEE  04                 	db	4
   613  00FEEF  08                 	db	8
   614  00FEF0  10                 	db	16
   615  00FEF1  20                 	db	32
   616  00FEF2  00                 	db	0
   617  00FEF3  41                 	db	65
   618  00FEF4  41                 	db	65
   619  00FEF5  41                 	db	65
   620  00FEF6  7F                 	db	127
   621  00FEF7  04                 	db	4
   622  00FEF8  02                 	db	2
   623  00FEF9  01                 	db	1
   624  00FEFA  02                 	db	2
   625  00FEFB  04                 	db	4
   626  00FEFC  40                 	db	64
   627  00FEFD  40                 	db	64
   628  00FEFE  40                 	db	64
   629  00FEFF  40                 	db	64
   630  00FF00  40                 	db	64
   631  00FF01  00                 	db	0
   632  00FF02  03                 	db	3
   633  00FF03  07                 	db	7
   634  00FF04  08                 	db	8
   635  00FF05  00                 	db	0
   636  00FF06  20                 	db	32
   637  00FF07  54                 	db	84
   638  00FF08  54                 	db	84
   639  00FF09  78                 	db	120
   640  00FF0A  40                 	db	64
   641  00FF0B  7F                 	db	127
   642  00FF0C  28                 	db	40
   643  00FF0D  44                 	db	68
   644  00FF0E  44                 	db	68
   645  00FF0F  38                 	db	56
   646  00FF10  38                 	db	56
   647  00FF11  44                 	db	68
   648  00FF12  44                 	db	68
   649  00FF13  44                 	db	68
   650  00FF14  28                 	db	40
   651  00FF15  38                 	db	56
   652  00FF16  44                 	db	68
   653  00FF17  44                 	db	68
   654  00FF18  28                 	db	40
   655  00FF19  7F                 	db	127
   656  00FF1A  38                 	db	56
   657  00FF1B  54                 	db	84
   658  00FF1C  54                 	db	84
   659  00FF1D  54                 	db	84
   660  00FF1E  18                 	db	24
   661  00FF1F  00                 	db	0
   662  00FF20  08                 	db	8
   663  00FF21  7E                 	db	126
   664  00FF22  09                 	db	9
   665  00FF23  02                 	db	2
   666  00FF24  18                 	db	24
   667  00FF25  A4                 	db	164
   668  00FF26  A4                 	db	164
   669  00FF27  9C                 	db	156
   670  00FF28  78                 	db	120
   671  00FF29  7F                 	db	127
   672  00FF2A  08                 	db	8
   673  00FF2B  04                 	db	4
   674  00FF2C  04                 	db	4
   675  00FF2D  78                 	db	120
   676  00FF2E  00                 	db	0
   677  00FF2F  44                 	db	68
   678  00FF30  7D                 	db	125
   679  00FF31  40                 	db	64
   680  00FF32  00                 	db	0
   681  00FF33  20                 	db	32
   682  00FF34  40                 	db	64
   683  00FF35  40                 	db	64
   684  00FF36  3D                 	db	61
   685  00FF37  00                 	db	0
   686  00FF38  7F                 	db	127
   687  00FF39  10                 	db	16
   688  00FF3A  28                 	db	40
   689  00FF3B  44                 	db	68
   690  00FF3C  00                 	db	0
   691  00FF3D  00                 	db	0
   692  00FF3E  41                 	db	65
   693  00FF3F  7F                 	db	127
   694  00FF40  40                 	db	64
   695  00FF41  00                 	db	0
   696  00FF42  7C                 	db	124
   697  00FF43  04                 	db	4
   698  00FF44  78                 	db	120
   699  00FF45  04                 	db	4
   700  00FF46  78                 	db	120
   701  00FF47  7C                 	db	124
   702  00FF48  08                 	db	8
   703  00FF49  04                 	db	4
   704  00FF4A  04                 	db	4
   705  00FF4B  78                 	db	120
   706  00FF4C  38                 	db	56
   707  00FF4D  44                 	db	68
   708  00FF4E  44                 	db	68
   709  00FF4F  44                 	db	68
   710  00FF50  38                 	db	56
   711  00FF51  FC                 	db	252
   712  00FF52  18                 	db	24
   713  00FF53  24                 	db	36
   714  00FF54  24                 	db	36
   715  00FF55  18                 	db	24
   716  00FF56  18                 	db	24
   717  00FF57  24                 	db	36
   718  00FF58  24                 	db	36
   719  00FF59  18                 	db	24
   720  00FF5A  FC                 	db	252
   721  00FF5B  7C                 	db	124
   722  00FF5C  08                 	db	8
   723  00FF5D  04                 	db	4
   724  00FF5E  04                 	db	4
   725  00FF5F  08                 	db	8
   726  00FF60  48                 	db	72
   727  00FF61  54                 	db	84
   728  00FF62  54                 	db	84
   729  00FF63  54                 	db	84
   730  00FF64  24                 	db	36
   731  00FF65  04                 	db	4
   732  00FF66  04                 	db	4
   733  00FF67  3F                 	db	63
   734  00FF68  44                 	db	68
   735  00FF69  24                 	db	36
   736  00FF6A  3C                 	db	60
   737  00FF6B  40                 	db	64
   738  00FF6C  40                 	db	64
   739  00FF6D  20                 	db	32
   740  00FF6E  7C                 	db	124
   741  00FF6F  1C                 	db	28
   742  00FF70  20                 	db	32
   743  00FF71  40                 	db	64
   744  00FF72  20                 	db	32
   745  00FF73  1C                 	db	28
   746  00FF74  3C                 	db	60
   747  00FF75  40                 	db	64
   748  00FF76  30                 	db	48
   749  00FF77  40                 	db	64
   750  00FF78  3C                 	db	60
   751  00FF79  44                 	db	68
   752  00FF7A  28                 	db	40
   753  00FF7B  10                 	db	16
   754  00FF7C  28                 	db	40
   755  00FF7D  44                 	db	68
   756  00FF7E  4C                 	db	76
   757  00FF7F  90                 	db	144
   758  00FF80  90                 	db	144
   759  00FF81  90                 	db	144
   760  00FF82  7C                 	db	124
   761  00FF83  44                 	db	68
   762  00FF84  64                 	db	100
   763  00FF85  54                 	db	84
   764  00FF86  4C                 	db	76
   765  00FF87  44                 	db	68
   766  00FF88  00                 	db	0
   767  00FF89  08                 	db	8
   768  00FF8A  36                 	db	54
   769  00FF8B  41                 	db	65
   770  00FF8C  00                 	db	0
   771  00FF8D  00                 	db	0
   772  00FF8E  00                 	db	0
   773  00FF8F  77                 	db	119
   774  00FF90  00                 	db	0
   775  00FF91  00                 	db	0
   776  00FF92  00                 	db	0
   777  00FF93  41                 	db	65
   778  00FF94  36                 	db	54
   779  00FF95  08                 	db	8
   780  00FF96  00                 	db	0
   781  00FF97  02                 	db	2
   782  00FF98  01                 	db	1
   783  00FF99  02                 	db	2
   784  00FF9A  04                 	db	4
   785  00FF9B  02                 	db	2
   786  00FF9C                     __end_of_font2:
   787                           	opt stack 0
   788  00FF9C                     _hexpowers:
   789                           	opt stack 0
   790  00FF9C  0001               	dw	1
   791  00FF9E  0000               	dw	0
   792  00FFA0  0010               	dw	16
   793  00FFA2  0000               	dw	0
   794  00FFA4  0100               	dw	256
   795  00FFA6  0000               	dw	0
   796  00FFA8  1000               	dw	4096
   797  00FFAA  0000               	dw	0
   798  00FFAC  0000               	dw	0
   799  00FFAE  0001               	dw	1
   800  00FFB0  0000               	dw	0
   801  00FFB2  0010               	dw	16
   802  00FFB4  0000               	dw	0
   803  00FFB6  0100               	dw	256
   804  00FFB8  0000               	dw	0
   805  00FFBA  1000               	dw	4096
   806  00FFBC                     __end_of_hexpowers:
   807                           	opt stack 0
   808  0000                     _ADCON1	set	4033
   809  0000                     _CCP2CON	set	4026
   810  0000                     _CCPR2L	set	4027
   811  0000                     _INTCON2bits	set	4081
   812  0000                     _INTCONbits	set	4082
   813  0000                     _OSCCON	set	4051
   814  0000                     _PIE1bits	set	3997
   815  0000                     _PIR1bits	set	3998
   816  0000                     _PIR2bits	set	4001
   817  0000                     _PORTAbits	set	3968
   818  0000                     _PORTBbits	set	3969
   819  0000                     _PORTCbits	set	3970
   820  0000                     _PORTDbits	set	3971
   821  0000                     _PR2	set	4043
   822  0000                     _RCSTA	set	4011
   823  0000                     _RCSTAbits	set	4011
   824  0000                     _SPBRG	set	4015
   825  0000                     _SPBRGH	set	4016
   826  0000                     _SSPBUF	set	4041
   827  0000                     _SSPCON1	set	4038
   828  0000                     _SSPSTAT	set	4039
   829  0000                     _SSPSTATbits	set	4039
   830  0000                     _T1CON	set	4045
   831  0000                     _T1CONbits	set	4045
   832  0000                     _T2CON	set	4042
   833  0000                     _T3CON	set	4017
   834  0000                     _T3CONbits	set	4017
   835  0000                     _TMR1H	set	4047
   836  0000                     _TMR1L	set	4046
   837  0000                     _TMR3H	set	4019
   838  0000                     _TMR3L	set	4018
   839  0000                     _TRISB	set	3987
   840  0000                     _TRISC	set	3988
   841  0000                     _TRISCbits	set	3988
   842  0000                     _TRISD	set	3989
   843  0000                     _TXREG	set	4013
   844  0000                     _TXSTA	set	4012
   845  0000                     _TXSTAbits	set	4012
   846  0000                     _TRMT	set	32097
   847  0000                     _nRBPU	set	32655
   848  00FFBC                     STR_1:
   849  00FFBC  4E                 	db	78	;'N'
   850  00FFBD  45                 	db	69	;'E'
   851  00FFBE  43                 	db	67	;'C'
   852  00FFBF  5F                 	db	95	;'_'
   853  00FFC0  43                 	db	67	;'C'
   854  00FFC1  6F                 	db	111	;'o'
   855  00FFC2  64                 	db	100	;'d'
   856  00FFC3  65                 	db	101	;'e'
   857  00FFC4  20                 	db	32
   858  00FFC5  3D                 	db	61	;'='
   859  00FFC6  20                 	db	32
   860  00FFC7  25                 	db	37
   861  00FFC8  30                 	db	48	;'0'
   862  00FFC9  38                 	db	56	;'8'
   863  00FFCA  6C                 	db	108	;'l'
   864  00FFCB  78                 	db	120	;'x'
   865  00FFCC  20                 	db	32
   866  00FFCD  25                 	db	37
   867  00FFCE  78                 	db	120	;'x'
   868  00FFCF  0D                 	db	13
   869  00FFD0  0A                 	db	10
   870  00FFD1  00                 	db	0
   871  00FFD2                     STR_2:
   872  00FFD2  45                 	db	69	;'E'
   873  00FFD3  43                 	db	67	;'C'
   874  00FFD4  45                 	db	69	;'E'
   875  00FFD5  33                 	db	51	;'3'
   876  00FFD6  33                 	db	51	;'3'
   877  00FFD7  30                 	db	48	;'0'
   878  00FFD8  31                 	db	49	;'1'
   879  00FFD9  4C                 	db	76	;'L'
   880  00FFDA  20                 	db	32
   881  00FFDB  46                 	db	70	;'F'
   882  00FFDC  61                 	db	97	;'a'
   883  00FFDD  6C                 	db	108	;'l'
   884  00FFDE  6C                 	db	108	;'l'
   885  00FFDF  20                 	db	32
   886  00FFE0  32                 	db	50	;'2'
   887  00FFE1  32                 	db	50	;'2'
   888  00FFE2  2D                 	db	45
   889  00FFE3  53                 	db	83	;'S'
   890  00FFE4  31                 	db	49	;'1'
   891  00FFE5  00                 	db	0
   892  00FFE6                     STR_4:
   893  00FFE6  30                 	db	48	;'0'
   894  00FFE7  31                 	db	49	;'1'
   895  00FFE8  32                 	db	50	;'2'
   896  00FFE9  33                 	db	51	;'3'
   897  00FFEA  34                 	db	52	;'4'
   898  00FFEB  35                 	db	53	;'5'
   899  00FFEC  36                 	db	54	;'6'
   900  00FFED  37                 	db	55	;'7'
   901  00FFEE  38                 	db	56	;'8'
   902  00FFEF  39                 	db	57	;'9'
   903  00FFF0  61                 	db	97	;'a'
   904  00FFF1  62                 	db	98	;'b'
   905  00FFF2  63                 	db	99	;'c'
   906  00FFF3  64                 	db	100	;'d'
   907  00FFF4  65                 	db	101	;'e'
   908  00FFF5  66                 	db	102	;'f'
   909  00FFF6  00                 	db	0
   910  00FFF7                     STR_3:
   911  00FFF7  4C                 	db	76	;'L'
   912  00FFF8  41                 	db	65	;'A'
   913  00FFF9  42                 	db	66	;'B'
   914  00FFFA  20                 	db	32
   915  00FFFB  31                 	db	49	;'1'
   916  00FFFC  30                 	db	48	;'0'
   917  00FFFD  20                 	db	32
   918  00FFFE  00                 	db	0
   919                           
   920                           ; #config settings
   921  00FFFF  00                 	db	0	; dummy byte at the end
   922  0000                     
   923                           	psect	cinit
   924  00106E                     __pcinit:
   925                           	opt stack 0
   926  00106E                     start_initialization:
   927                           	opt stack 0
   928  00106E                     __initialization:
   929                           	opt stack 0
   930                           
   931                           ; Clear objects allocated to BANK0 (31 bytes)
   932  00106E  EE00  F0BF         	lfsr	0,__pbssBANK0
   933  001072  0E1F               	movlw	31
   934  001074                     clear_0:
   935  001074  6AEE               	clrf	postinc0,c
   936  001076  06E8               	decf	wreg,f,c
   937  001078  E1FD               	bnz	clear_0
   938                           
   939                           ; Clear objects allocated to COMRAM (19 bytes)
   940  00107A  EE00  F05A         	lfsr	0,__pbssCOMRAM
   941  00107E  0E13               	movlw	19
   942  001080                     clear_1:
   943  001080  6AEE               	clrf	postinc0,c
   944  001082  06E8               	decf	wreg,f,c
   945  001084  E1FD               	bnz	clear_1
   946                           
   947                           ; Initialize objects allocated to BANK1 (168 bytes)
   948                           ; load TBLPTR registers with __pidataBANK1
   949  001086  0E24               	movlw	low __pidataBANK1
   950  001088  6EF6               	movwf	tblptrl,c
   951  00108A  0E0E               	movlw	high __pidataBANK1
   952  00108C  6EF7               	movwf	tblptrh,c
   953  00108E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   954  001090  6EF8               	movwf	tblptru,c
   955  001092  EE01  F000         	lfsr	0,__pdataBANK1
   956  001096  EE10 F0A8          	lfsr	1,168
   957  00109A                     copy_data0:
   958  00109A  0009               	tblrd		*+
   959  00109C  CFF5 FFEE          	movff	tablat,postinc0
   960  0010A0  50E5               	movf	postdec1,w,c
   961  0010A2  50E1               	movf	fsr1l,w,c
   962  0010A4  E1FA               	bnz	copy_data0
   963                           
   964                           ; Initialize objects allocated to BANK0 (63 bytes)
   965                           ; load TBLPTR registers with __pidataBANK0
   966  0010A6  0E0E               	movlw	low __pidataBANK0
   967  0010A8  6EF6               	movwf	tblptrl,c
   968  0010AA  0E14               	movlw	high __pidataBANK0
   969  0010AC  6EF7               	movwf	tblptrh,c
   970  0010AE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   971  0010B0  6EF8               	movwf	tblptru,c
   972  0010B2  EE00  F080         	lfsr	0,__pdataBANK0
   973  0010B6  EE10 F03F          	lfsr	1,63
   974  0010BA                     copy_data1:
   975  0010BA  0009               	tblrd		*+
   976  0010BC  CFF5 FFEE          	movff	tablat,postinc0
   977  0010C0  50E5               	movf	postdec1,w,c
   978  0010C2  50E1               	movf	fsr1l,w,c
   979  0010C4  E1FA               	bnz	copy_data1
   980                           
   981                           ; Initialize objects allocated to COMRAM (22 bytes)
   982                           ; load TBLPTR registers with __pidataCOMRAM
   983  0010C6  0EE0               	movlw	low __pidataCOMRAM
   984  0010C8  6EF6               	movwf	tblptrl,c
   985  0010CA  0E15               	movlw	high __pidataCOMRAM
   986  0010CC  6EF7               	movwf	tblptrh,c
   987  0010CE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   988  0010D0  6EF8               	movwf	tblptru,c
   989  0010D2  EE00  F044         	lfsr	0,__pdataCOMRAM
   990  0010D6  EE10 F016          	lfsr	1,22
   991  0010DA                     copy_data2:
   992  0010DA  0009               	tblrd		*+
   993  0010DC  CFF5 FFEE          	movff	tablat,postinc0
   994  0010E0  50E5               	movf	postdec1,w,c
   995  0010E2  50E1               	movf	fsr1l,w,c
   996  0010E4  E1FA               	bnz	copy_data2
   997  0010E6                     end_of_initialization:
   998                           	opt stack 0
   999  0010E6                     __end_of__initialization:
  1000                           	opt stack 0
  1001  0010E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1002  0010E8  6EF8               	movwf	tblptru,c
  1003  0010EA  0100               	movlb	0
  1004  0010EC  EF5F  F001         	goto	_main	;jump to C main() function
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           
  1014                           	psect	bssCOMRAM
  1015  00005A                     __pbssCOMRAM:
  1016                           	opt stack 0
  1017  00005A                     _Nec_code:
  1018                           	opt stack 0
  1019  00005A                     	ds	4
  1020  00005E                     _Time_Elapsed:
  1021                           	opt stack 0
  1022  00005E                     	ds	2
  1023  000060                     _nbr:
  1024                           	opt stack 0
  1025  000060                     	ds	2
  1026  000062                     _nec_ok:
  1027                           	opt stack 0
  1028  000062                     	ds	2
  1029  000064                     _txt:
  1030                           	opt stack 0
  1031  000064                     	ds	2
  1032  000066                     _Nec_code1:
  1033                           	opt stack 0
  1034  000066                     	ds	1
  1035  000067                     _Nec_state:
  1036                           	opt stack 0
  1037  000067                     	ds	1
  1038  000068                     __tft_type:
  1039                           	opt stack 0
  1040  000068                     	ds	1
  1041  000069                     _bit_count:
  1042                           	opt stack 0
  1043  000069                     	ds	1
  1044  00006A                     _colstart:
  1045                           	opt stack 0
  1046  00006A                     	ds	1
  1047  00006B                     _i:
  1048                           	opt stack 0
  1049  00006B                     	ds	1
  1050  00006C                     _rowstart:
  1051                           	opt stack 0
  1052  00006C                     	ds	1
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           tblptrl	equ	0xFF6
  1056                           tablat	equ	0xFF5
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           postdec1	equ	0xFE5
  1060                           fsr1l	equ	0xFE1
  1061                           
  1062                           	psect	dataCOMRAM
  1063  000044                     __pdataCOMRAM:
  1064                           	opt stack 0
  1065  000044                     _array1:
  1066                           	opt stack 0
  1067  000044                     	ds	21
  1068  000059                     _wrap:
  1069                           	opt stack 0
  1070  000059                     	ds	1
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           
  1080                           	psect	bssBANK0
  1081  0000BF                     __pbssBANK0:
  1082                           	opt stack 0
  1083  0000BF                     _buffer:
  1084                           	opt stack 0
  1085  0000BF                     	ds	31
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           postinc0	equ	0xFEE
  1091                           wreg	equ	0xFE8
  1092                           postdec1	equ	0xFE5
  1093                           fsr1l	equ	0xFE1
  1094                           
  1095                           	psect	dataBANK0
  1096  000080                     __pdataBANK0:
  1097                           	opt stack 0
  1098  000080                     _d1:
  1099                           	opt stack 0
  1100  000080                     	ds	21
  1101  000095                     _d2:
  1102                           	opt stack 0
  1103  000095                     	ds	21
  1104  0000AA                     _d3:
  1105                           	opt stack 0
  1106  0000AA                     	ds	21
  1107                           tblptru	equ	0xFF8
  1108                           tblptrh	equ	0xFF7
  1109                           tblptrl	equ	0xFF6
  1110                           tablat	equ	0xFF5
  1111                           postinc0	equ	0xFEE
  1112                           wreg	equ	0xFE8
  1113                           postdec1	equ	0xFE5
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116                           	psect	dataBANK1
  1117  000100                     __pdataBANK1:
  1118                           	opt stack 0
  1119  000100                     _color:
  1120                           	opt stack 0
  1121  000100                     	ds	42
  1122  00012A                     _color_font:
  1123                           	opt stack 0
  1124  00012A                     	ds	42
  1125  000154                     _txt1:
  1126                           	opt stack 0
  1127  000154                     	ds	84
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	cstackBANK0
  1138  0000DE                     __pcstackBANK0:
  1139                           	opt stack 0
  1140  0000DE                     drawtext@x:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x0
  1144  0000DE                     	ds	1
  1145  0000DF                     drawtext@textsize:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x1
  1149  0000DF                     	ds	2
  1150  0000E1                     drawtext@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x3
  1154  0000E1                     	ds	2
  1155  0000E3                     drawtext@cursor_y:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x5
  1159  0000E3                     	ds	1
  1160  0000E4                     drawtext@cursor_x:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x6
  1164  0000E4                     	ds	1
  1165  0000E5                     main@found:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x7
  1169  0000E5                     	ds	1
  1170  0000E6                     main@led_c:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x8
  1174  0000E6                     	ds	1
  1175  0000E7                     main@i:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x9
  1179  0000E7                     	ds	2
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           postdec1	equ	0xFE5
  1187                           fsr1l	equ	0xFE1
  1188                           
  1189                           	psect	cstackCOMRAM
  1190  000001                     __pcstackCOMRAM:
  1191                           	opt stack 0
  1192  000001                     ??_INT0_isr:
  1193  000001                     
  1194                           ; 0 bytes @ 0x0
  1195  000001                     	ds	2
  1196  000003                     ??_chkisr:
  1197                           
  1198                           ; 0 bytes @ 0x2
  1199  000003                     	ds	14
  1200  000011                     ??_isdigit:
  1201  000011                     ?_strlen:
  1202                           	opt stack 0
  1203  000011                     ?___wmul:
  1204                           	opt stack 0
  1205  000011                     ?___lldiv:
  1206                           	opt stack 0
  1207  000011                     putch@c:
  1208                           	opt stack 0
  1209  000011                     set_d1@color:
  1210                           	opt stack 0
  1211  000011                     set_d2@color:
  1212                           	opt stack 0
  1213  000011                     set_d3@color:
  1214                           	opt stack 0
  1215  000011                     spiwrite@x:
  1216                           	opt stack 0
  1217  000011                     wait_one_sec@k:
  1218                           	opt stack 0
  1219  000011                     OpenUSART@spbrg:
  1220                           	opt stack 0
  1221  000011                     ___wmul@multiplier:
  1222                           	opt stack 0
  1223  000011                     strcpy@to:
  1224                           	opt stack 0
  1225  000011                     strlen@s:
  1226                           	opt stack 0
  1227  000011                     ___lldiv@dividend:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x10
  1231  000011                     	ds	1
  1232  000012                     spiwrite@spidata:
  1233                           	opt stack 0
  1234  000012                     _isdigit$1782:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x11
  1238  000012                     	ds	1
  1239  000013                     ??_strlen:
  1240  000013                     write_command@cmd_:
  1241                           	opt stack 0
  1242  000013                     write_data@data_:
  1243                           	opt stack 0
  1244  000013                     OpenUSART@config:
  1245                           	opt stack 0
  1246  000013                     isdigit@c:
  1247                           	opt stack 0
  1248  000013                     ___wmul@multiplicand:
  1249                           	opt stack 0
  1250  000013                     strcpy@from:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x12
  1254  000013                     	ds	1
  1255  000014                     setAddrWindow@y0:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x13
  1259  000014                     	ds	1
  1260  000015                     setAddrWindow@x1:
  1261                           	opt stack 0
  1262  000015                     ___wmul@product:
  1263                           	opt stack 0
  1264  000015                     strcpy@cp:
  1265                           	opt stack 0
  1266  000015                     strlen@cp:
  1267                           	opt stack 0
  1268  000015                     ___lldiv@divisor:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x14
  1272  000015                     	ds	1
  1273  000016                     setAddrWindow@y1:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x15
  1277  000016                     	ds	1
  1278  000017                     setAddrWindow@x0:
  1279                           	opt stack 0
  1280  000017                     delay_ms@ms:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x16
  1284  000017                     	ds	1
  1285  000018                     drawPixel@y:
  1286                           	opt stack 0
  1287  000018                     drawFastVLine@y:
  1288                           	opt stack 0
  1289  000018                     fillRectangle@y:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x17
  1293  000018                     	ds	1
  1294  000019                     ??_delay_ms:
  1295  000019                     drawFastVLine@h:
  1296                           	opt stack 0
  1297  000019                     fillRectangle@w:
  1298                           	opt stack 0
  1299  000019                     drawPixel@color:
  1300                           	opt stack 0
  1301  000019                     ___lldiv@quotient:
  1302                           	opt stack 0
  1303                           
  1304                           ; 4 bytes @ 0x18
  1305  000019                     	ds	1
  1306  00001A                     fillRectangle@h:
  1307                           	opt stack 0
  1308  00001A                     drawFastVLine@color:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x19
  1312  00001A                     	ds	1
  1313  00001B                     drawPixel@x:
  1314                           	opt stack 0
  1315  00001B                     delay_ms@count:
  1316                           	opt stack 0
  1317  00001B                     fillRectangle@color:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x1A
  1321  00001B                     	ds	1
  1322  00001C                     ??_drawFastVLine:
  1323  00001C                     drawCircle@x0:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x1B
  1327  00001C                     	ds	1
  1328  00001D                     ??_fillRectangle:
  1329  00001D                     ___lldiv@counter:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x1C
  1333  00001D                     	ds	1
  1334  00001E                     ?_printf:
  1335                           	opt stack 0
  1336  00001E                     drawCircle@y0:
  1337                           	opt stack 0
  1338  00001E                     printf@f:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x1D
  1342  00001E                     	ds	2
  1343  000020                     drawFastVLine@hi:
  1344                           	opt stack 0
  1345  000020                     drawCircle@r:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x1F
  1349  000020                     	ds	1
  1350  000021                     drawFastVLine@lo:
  1351                           	opt stack 0
  1352  000021                     fillRectangle@hi:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x20
  1356  000021                     	ds	1
  1357  000022                     drawFastVLine@x:
  1358                           	opt stack 0
  1359  000022                     fillRectangle@lo:
  1360                           	opt stack 0
  1361  000022                     drawCircle@color:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x21
  1365  000022                     	ds	1
  1366  000023                     fillRect@y:
  1367                           	opt stack 0
  1368  000023                     fillRectangle@x:
  1369                           	opt stack 0
  1370  000023                     fillCircleHelper@x0:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x22
  1374  000023                     	ds	1
  1375  000024                     ??_drawCircle:
  1376  000024                     fillRect@w:
  1377                           	opt stack 0
  1378  000024                     fillScreen@color:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x23
  1382  000024                     	ds	1
  1383  000025                     fillRect@h:
  1384                           	opt stack 0
  1385  000025                     fillCircleHelper@y0:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x24
  1389  000025                     	ds	1
  1390  000026                     ??_printf:
  1391  000026                     fillRect@color:
  1392                           	opt stack 0
  1393  000026                     drawCircle@ddF_x:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x25
  1397  000026                     	ds	1
  1398  000027                     fillCircleHelper@r:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x26
  1402  000027                     	ds	1
  1403  000028                     ??_fillRect:
  1404  000028                     drawCircle@ddF_y:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x27
  1408  000028                     	ds	1
  1409  000029                     fillCircleHelper@cornername:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x28
  1413  000029                     	ds	1
  1414  00002A                     printf@idx:
  1415                           	opt stack 0
  1416  00002A                     drawCircle@f:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x29
  1420  00002A                     	ds	1
  1421  00002B                     fillRect@x:
  1422                           	opt stack 0
  1423  00002B                     fillCircleHelper@delta:
  1424                           	opt stack 0
  1425  00002B                     printf@prec:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x2A
  1429  00002B                     	ds	1
  1430  00002C                     fillRect@i:
  1431                           	opt stack 0
  1432  00002C                     drawCircle@x:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x2B
  1436  00002C                     	ds	1
  1437  00002D                     fillCircleHelper@color:
  1438                           	opt stack 0
  1439  00002D                     printf@val:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x2C
  1443  00002D                     	ds	1
  1444  00002E                     drawChar@y:
  1445                           	opt stack 0
  1446  00002E                     drawCircle@y:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x2D
  1450  00002E                     	ds	1
  1451  00002F                     ??_fillCircleHelper:
  1452  00002F                     drawChar@c:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x2E
  1456  00002F                     	ds	1
  1457  000030                     drawChar@color:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x2F
  1461  000030                     	ds	1
  1462  000031                     fillCircleHelper@ddF_x:
  1463                           	opt stack 0
  1464  000031                     printf@ap:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x30
  1468  000031                     	ds	1
  1469  000032                     drawChar@bg:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x31
  1473  000032                     	ds	1
  1474  000033                     printf@flag:
  1475                           	opt stack 0
  1476  000033                     fillCircleHelper@ddF_y:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x32
  1480  000033                     	ds	1
  1481  000034                     drawChar@size:
  1482                           	opt stack 0
  1483  000034                     printf@width:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x33
  1487  000034                     	ds	1
  1488  000035                     drawChar@line:
  1489                           	opt stack 0
  1490  000035                     fillCircleHelper@f:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x34
  1494  000035                     	ds	1
  1495  000036                     drawChar@x:
  1496                           	opt stack 0
  1497  000036                     printf@c:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x35
  1501  000036                     	ds	1
  1502  000037                     drawChar@j:
  1503                           	opt stack 0
  1504  000037                     fillCircleHelper@x:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x36
  1508  000037                     	ds	1
  1509  000038                     drawChar@i:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x37
  1513  000038                     	ds	1
  1514  000039                     drawtext@y:
  1515                           	opt stack 0
  1516  000039                     fillCircleHelper@y:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x38
  1520  000039                     	ds	1
  1521  00003A                     drawtext@_text:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x39
  1525  00003A                     	ds	1
  1526  00003B                     fillCircle@x0:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x3A
  1530  00003B                     	ds	1
  1531  00003C                     drawtext@color:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x3B
  1535  00003C                     	ds	1
  1536  00003D                     fillCircle@y0:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x3C
  1540  00003D                     	ds	1
  1541  00003E                     drawtext@bg:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x3D
  1545  00003E                     	ds	1
  1546  00003F                     fillCircle@r:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x3E
  1550  00003F                     	ds	1
  1551  000040                     drawtext@size:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x3F
  1555  000040                     	ds	1
  1556  000041                     ??_drawtext:
  1557  000041                     fillCircle@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x40
  1561  000041                     	ds	2
  1562  000043                     
  1563                           ; 0 bytes @ 0x42
  1564  000043                     	ds	1
  1565                           tblptru	equ	0xFF8
  1566                           tblptrh	equ	0xFF7
  1567                           tblptrl	equ	0xFF6
  1568                           tablat	equ	0xFF5
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postdec1	equ	0xFE5
  1572                           fsr1l	equ	0xFE1
  1573                           
  1574 ;;
  1575 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1576 ;;
  1577 ;; *************** function _main *****************
  1578 ;; Defined at:
  1579 ;;		line 263 in file "Lab10p1.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  i               2    9[BANK0 ] int 
  1584 ;;  led_c           1    8[BANK0 ] unsigned char 
  1585 ;;  found           1    7[BANK0 ] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;		None               void
  1588 ;; Registers used:
  1589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;Total ram usage:        5 bytes
  1600 ;; Hardware stack levels required when called:   11
  1601 ;; This function calls:
  1602 ;;		_Activate_Buzzer
  1603 ;;		_Deactivate_Buzzer
  1604 ;;		_Initialize_Screen
  1605 ;;		_drawCircle
  1606 ;;		_drawtext
  1607 ;;		_fillCircle
  1608 ;;		_init_UART
  1609 ;;		_printf
  1610 ;;		_set_d1
  1611 ;;		_set_d2
  1612 ;;		_set_d3
  1613 ;;		_wait_one_sec
  1614 ;; This function is called by:
  1615 ;;		Startup code after reset
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text0
  1620  0002BE                     __ptext0:
  1621                           	opt stack 0
  1622  0002BE                     _main:
  1623                           	opt stack 20
  1624                           
  1625                           ;Lab10p1.c: 265: init_UART();
  1626                           
  1627                           ;incstack = 0
  1628  0002BE  ECFB  F00A         	call	_init_UART	;wreg free
  1629                           
  1630                           ;Lab10p1.c: 266: OSCCON = 0x70;
  1631  0002C2  0E70               	movlw	112
  1632  0002C4  6ED3               	movwf	4051,c	;volatile
  1633                           
  1634                           ;Lab10p1.c: 267: nRBPU = 0;
  1635  0002C6  9EF1               	bcf	intcon2,7,c	;volatile
  1636                           
  1637                           ;Lab10p1.c: 268: TRISB = 0x01;
  1638  0002C8  0E01               	movlw	1
  1639  0002CA  6E93               	movwf	3987,c	;volatile
  1640                           
  1641                           ;Lab10p1.c: 269: TRISC = 0x00;
  1642  0002CC  0E00               	movlw	0
  1643  0002CE  6E94               	movwf	3988,c	;volatile
  1644                           
  1645                           ;Lab10p1.c: 270: TRISD = 0x00;
  1646  0002D0  0E00               	movlw	0
  1647  0002D2  6E95               	movwf	3989,c	;volatile
  1648                           
  1649                           ;Lab10p1.c: 271: ADCON1 = 0x0F;
  1650  0002D4  0E0F               	movlw	15
  1651  0002D6  6EC1               	movwf	4033,c	;volatile
  1652                           
  1653                           ;Lab10p1.c: 273: Initialize_Screen();
  1654  0002D8  EC66  F007         	call	_Initialize_Screen	;wreg free
  1655                           
  1656                           ;Lab10p1.c: 274: INTCONbits.INT0IF = 0;
  1657  0002DC  92F2               	bcf	intcon,1,c	;volatile
  1658                           
  1659                           ;Lab10p1.c: 275: INTCON2bits.INTEDG0 = 0;
  1660  0002DE  9CF1               	bcf	intcon2,6,c	;volatile
  1661                           
  1662                           ;Lab10p1.c: 276: INTCONbits.INT0IE = 1;
  1663  0002E0  88F2               	bsf	intcon,4,c	;volatile
  1664                           
  1665                           ;Lab10p1.c: 277: TMR1H = 0;
  1666  0002E2  0E00               	movlw	0
  1667  0002E4  6ECF               	movwf	4047,c	;volatile
  1668                           
  1669                           ;Lab10p1.c: 278: TMR1L = 0;
  1670  0002E6  0E00               	movlw	0
  1671  0002E8  6ECE               	movwf	4046,c	;volatile
  1672                           
  1673                           ;Lab10p1.c: 279: PIR1bits.TMR1IF = 0;
  1674  0002EA  909E               	bcf	3998,0,c	;volatile
  1675                           
  1676                           ;Lab10p1.c: 280: PIE1bits.TMR1IE = 1;
  1677  0002EC  809D               	bsf	3997,0,c	;volatile
  1678                           
  1679                           ;Lab10p1.c: 281: INTCONbits.PEIE = 1;
  1680  0002EE  8CF2               	bsf	intcon,6,c	;volatile
  1681                           
  1682                           ;Lab10p1.c: 282: INTCONbits.GIE = 1;
  1683  0002F0  8EF2               	bsf	intcon,7,c	;volatile
  1684                           
  1685                           ;Lab10p1.c: 283: nec_ok = 0;
  1686  0002F2  0E00               	movlw	0
  1687  0002F4  6E63               	movwf	_nec_ok+1,c
  1688  0002F6  0E00               	movlw	0
  1689  0002F8  6E62               	movwf	_nec_ok,c
  1690                           
  1691                           ;Lab10p1.c: 284: Nec_code = 0x0;
  1692  0002FA  0E00               	movlw	0
  1693  0002FC  6E5A               	movwf	_Nec_code,c
  1694  0002FE  0E00               	movlw	0
  1695  000300  6E5B               	movwf	_Nec_code+1,c
  1696  000302  0E00               	movlw	0
  1697  000304  6E5C               	movwf	_Nec_code+2,c
  1698  000306  0E00               	movlw	0
  1699  000308  6E5D               	movwf	_Nec_code+3,c
  1700  00030A  D000               	goto	l3960
  1701  00030C                     l3960:
  1702                           
  1703                           ;Lab10p1.c: 287: {
  1704                           ;Lab10p1.c: 288: if (nec_ok == 1)
  1705  00030C  0462               	decf	_nec_ok,w,c
  1706  00030E  1063               	iorwf	_nec_ok+1,w,c
  1707  000310  A4D8               	btfss	status,2,c
  1708  000312  D7FC               	goto	l3960
  1709                           
  1710                           ;Lab10p1.c: 289: {
  1711                           ;Lab10p1.c: 290: nec_ok = 0;
  1712  000314  0E00               	movlw	0
  1713  000316  6E63               	movwf	_nec_ok+1,c
  1714  000318  0E00               	movlw	0
  1715  00031A  6E62               	movwf	_nec_ok,c
  1716                           
  1717                           ;Lab10p1.c: 292: Nec_code1 = (char) ((Nec_code >> 8));
  1718  00031C  C05B  F066         	movff	_Nec_code+1,_Nec_code1
  1719                           
  1720                           ;Lab10p1.c: 293: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1721  000320  0EBC               	movlw	low STR_1
  1722  000322  6E1E               	movwf	printf@f,c
  1723  000324  0EFF               	movlw	high STR_1
  1724  000326  6E1F               	movwf	printf@f+1,c
  1725  000328  C05A  F020         	movff	_Nec_code,?_printf+2
  1726  00032C  C05B  F021         	movff	_Nec_code+1,?_printf+3
  1727  000330  C05C  F022         	movff	_Nec_code+2,?_printf+4
  1728  000334  C05D  F023         	movff	_Nec_code+3,?_printf+5
  1729  000338  C066  F024         	movff	_Nec_code1,?_printf+6
  1730  00033C  6A25               	clrf	?_printf+7,c
  1731  00033E  EC0E  F000         	call	_printf	;wreg free
  1732                           
  1733                           ;Lab10p1.c: 294: INTCONbits.INT0IE = 1;
  1734  000342  88F2               	bsf	intcon,4,c	;volatile
  1735                           
  1736                           ;Lab10p1.c: 295: INTCON2bits.INTEDG0 = 0;
  1737  000344  9CF1               	bcf	intcon2,6,c	;volatile
  1738                           
  1739                           ;Lab10p1.c: 297: char found = 0xff;
  1740  000346  0100               	movlb	0	; () banked
  1741  000348  69E5               	setf	main@found& (0+255),b
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;Lab10p1.c: 298: char led_c = 0xff;
  1745  00034A  0100               	movlb	0	; () banked
  1746  00034C  69E6               	setf	main@led_c& (0+255),b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;Lab10p1.c: 300: for(int i = 0; i < 21; i++)
  1750  00034E  0E00               	movlw	0
  1751  000350  0100               	movlb	0	; () banked
  1752  000352  6FE8               	movwf	(main@i+1)& (0+255),b
  1753  000354  0E00               	movlw	0
  1754  000356  6FE7               	movwf	main@i& (0+255),b
  1755  000358                     l3978:
  1756                           
  1757                           ; BSR set to: 0
  1758  000358  0100               	movlb	0	; () banked
  1759  00035A  BFE8               	btfsc	(main@i+1)& (0+255),7,b
  1760  00035C  D00A               	goto	l3982
  1761  00035E  0100               	movlb	0	; () banked
  1762  000360  51E8               	movf	(main@i+1)& (0+255),w,b
  1763  000362  E11D               	bnz	l3990
  1764  000364  0E15               	movlw	21
  1765  000366  0100               	movlb	0	; () banked
  1766  000368  5DE7               	subwf	main@i& (0+255),w,b
  1767  00036A  B0D8               	btfsc	status,0,c
  1768  00036C  D018               	goto	l3990
  1769  00036E  D001               	goto	l3982
  1770                           
  1771                           ; BSR set to: 0
  1772  000370  D016               	goto	l3990
  1773  000372                     l3982:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;Lab10p1.c: 301: {
  1777                           ;Lab10p1.c: 302: if(Nec_code1 == array1[i])
  1778  000372  0E44               	movlw	low _array1
  1779  000374  0100               	movlb	0	; () banked
  1780  000376  25E7               	addwf	main@i& (0+255),w,b
  1781  000378  6ED9               	movwf	fsr2l,c
  1782  00037A  0E00               	movlw	high _array1
  1783  00037C  0100               	movlb	0	; () banked
  1784  00037E  21E8               	addwfc	(main@i+1)& (0+255),w,b
  1785  000380  6EDA               	movwf	fsr2h,c
  1786  000382  5066               	movf	_Nec_code1,w,c
  1787  000384  18DE               	xorwf	postinc2,w,c
  1788  000386  A4D8               	btfss	status,2,c
  1789  000388  D005               	goto	l3986
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;Lab10p1.c: 303: {
  1793                           ;Lab10p1.c: 304: found = i;
  1794  00038A  C0E7  F0E5         	movff	main@i,main@found
  1795                           
  1796                           ;Lab10p1.c: 305: led_c = i;
  1797  00038E  C0E7  F0E6         	movff	main@i,main@led_c
  1798  000392  D000               	goto	l3986
  1799  000394                     l3986:
  1800                           
  1801                           ; BSR set to: 0
  1802  000394  0100               	movlb	0	; () banked
  1803  000396  4BE7               	infsnz	main@i& (0+255),f,b
  1804  000398  2BE8               	incf	(main@i+1)& (0+255),f,b
  1805  00039A  D7DE               	goto	l3978
  1806                           
  1807                           ; BSR set to: 0
  1808  00039C  D000               	goto	l3990
  1809  00039E                     l3990:
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;Lab10p1.c: 306: }
  1813                           ;Lab10p1.c: 307: }
  1814                           ;Lab10p1.c: 309: set_d1(0);
  1815  00039E  0E00               	movlw	0
  1816  0003A0  EC40  F009         	call	_set_d1
  1817                           
  1818                           ;Lab10p1.c: 310: set_d2(0);
  1819  0003A4  0E00               	movlw	0
  1820  0003A6  EC17  F009         	call	_set_d2
  1821                           
  1822                           ;Lab10p1.c: 311: set_d3(0);
  1823  0003AA  0E00               	movlw	0
  1824  0003AC  ECEE  F008         	call	_set_d3
  1825                           
  1826                           ;Lab10p1.c: 313: if (found != 0xff)
  1827  0003B0  0100               	movlb	0	; () banked
  1828  0003B2  29E5               	incf	main@found& (0+255),w,b
  1829  0003B4  B4D8               	btfsc	status,2,c
  1830  0003B6  D044               	goto	l4000
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;Lab10p1.c: 314: {
  1834                           ;Lab10p1.c: 315: fillCircle(60, 80, 20, color[found]);
  1835  0003B8  0E00               	movlw	0
  1836  0003BA  6E3C               	movwf	fillCircle@x0+1,c
  1837  0003BC  0E3C               	movlw	60
  1838  0003BE  6E3B               	movwf	fillCircle@x0,c
  1839  0003C0  0E00               	movlw	0
  1840  0003C2  6E3E               	movwf	fillCircle@y0+1,c
  1841  0003C4  0E50               	movlw	80
  1842  0003C6  6E3D               	movwf	fillCircle@y0,c
  1843  0003C8  0E00               	movlw	0
  1844  0003CA  6E40               	movwf	fillCircle@r+1,c
  1845  0003CC  0E14               	movlw	20
  1846  0003CE  6E3F               	movwf	fillCircle@r,c
  1847  0003D0  0100               	movlb	0	; () banked
  1848  0003D2  51E5               	movf	main@found& (0+255),w,b
  1849  0003D4  0D02               	mullw	2
  1850  0003D6  0E00               	movlw	low _color
  1851  0003D8  24F3               	addwf	prodl,w,c
  1852  0003DA  6ED9               	movwf	fsr2l,c
  1853  0003DC  0E01               	movlw	high _color
  1854  0003DE  20F4               	addwfc	prodh,w,c
  1855  0003E0  6EDA               	movwf	fsr2h,c
  1856  0003E2  CFDE F041          	movff	postinc2,fillCircle@color
  1857  0003E6  CFDD F042          	movff	postdec2,fillCircle@color+1
  1858  0003EA  EC69  F009         	call	_fillCircle	;wreg free
  1859                           
  1860                           ;Lab10p1.c: 316: drawCircle(60, 80, 20, 0xFFFF);
  1861  0003EE  0E00               	movlw	0
  1862  0003F0  6E1D               	movwf	drawCircle@x0+1,c
  1863  0003F2  0E3C               	movlw	60
  1864  0003F4  6E1C               	movwf	drawCircle@x0,c
  1865  0003F6  0E00               	movlw	0
  1866  0003F8  6E1F               	movwf	drawCircle@y0+1,c
  1867  0003FA  0E50               	movlw	80
  1868  0003FC  6E1E               	movwf	drawCircle@y0,c
  1869  0003FE  0E00               	movlw	0
  1870  000400  6E21               	movwf	drawCircle@r+1,c
  1871  000402  0E14               	movlw	20
  1872  000404  6E20               	movwf	drawCircle@r,c
  1873  000406  0EFF               	movlw	255
  1874  000408  6E23               	movwf	drawCircle@color+1,c
  1875  00040A  6822               	setf	drawCircle@color,c
  1876  00040C  EC4D  F002         	call	_drawCircle	;wreg free
  1877                           
  1878                           ;Lab10p1.c: 317: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1879  000410  0E4D               	movlw	77
  1880  000412  6E39               	movwf	drawtext@y,c
  1881  000414  0100               	movlb	0	; () banked
  1882  000416  51E5               	movf	main@found& (0+255),w,b
  1883  000418  0D04               	mullw	4
  1884  00041A  0E54               	movlw	low _txt1
  1885  00041C  24F3               	addwf	prodl,w,c
  1886  00041E  6E3A               	movwf	drawtext@_text,c
  1887  000420  0E01               	movlw	high _txt1
  1888  000422  20F4               	addwfc	prodh,w,c
  1889  000424  6E3B               	movwf	drawtext@_text+1,c
  1890  000426  0EFF               	movlw	255
  1891  000428  6E3D               	movwf	drawtext@color+1,c
  1892  00042A  683C               	setf	drawtext@color,c
  1893  00042C  0E00               	movlw	0
  1894  00042E  6E3F               	movwf	drawtext@bg+1,c
  1895  000430  0E00               	movlw	0
  1896  000432  6E3E               	movwf	drawtext@bg,c
  1897  000434  0E01               	movlw	1
  1898  000436  6E40               	movwf	drawtext@size,c
  1899  000438  0E34               	movlw	52
  1900  00043A  ECA6  F005         	call	_drawtext
  1901  00043E  D000               	goto	l4000
  1902  000440                     l4000:
  1903                           
  1904                           ;Lab10p1.c: 318: }
  1905                           ;Lab10p1.c: 319: set_d1(d1[led_c]);
  1906  000440  0100               	movlb	0	; () banked
  1907  000442  51E6               	movf	main@led_c& (0+255),w,b
  1908  000444  0D01               	mullw	1
  1909  000446  0E80               	movlw	low _d1
  1910  000448  24F3               	addwf	prodl,w,c
  1911  00044A  6ED9               	movwf	fsr2l,c
  1912  00044C  0E00               	movlw	high _d1
  1913  00044E  20F4               	addwfc	prodh,w,c
  1914  000450  6EDA               	movwf	fsr2h,c
  1915  000452  50DF               	movf	indf2,w,c
  1916  000454  EC40  F009         	call	_set_d1
  1917                           
  1918                           ;Lab10p1.c: 320: set_d2(d2[led_c]);
  1919  000458  0100               	movlb	0	; () banked
  1920  00045A  51E6               	movf	main@led_c& (0+255),w,b
  1921  00045C  0D01               	mullw	1
  1922  00045E  0E95               	movlw	low _d2
  1923  000460  24F3               	addwf	prodl,w,c
  1924  000462  6ED9               	movwf	fsr2l,c
  1925  000464  0E00               	movlw	high _d2
  1926  000466  20F4               	addwfc	prodh,w,c
  1927  000468  6EDA               	movwf	fsr2h,c
  1928  00046A  50DF               	movf	indf2,w,c
  1929  00046C  EC17  F009         	call	_set_d2
  1930                           
  1931                           ;Lab10p1.c: 321: set_d3(d3[led_c]);
  1932  000470  0100               	movlb	0	; () banked
  1933  000472  51E6               	movf	main@led_c& (0+255),w,b
  1934  000474  0D01               	mullw	1
  1935  000476  0EAA               	movlw	low _d3
  1936  000478  24F3               	addwf	prodl,w,c
  1937  00047A  6ED9               	movwf	fsr2l,c
  1938  00047C  0E00               	movlw	high _d3
  1939  00047E  20F4               	addwfc	prodh,w,c
  1940  000480  6EDA               	movwf	fsr2h,c
  1941  000482  50DF               	movf	indf2,w,c
  1942  000484  ECEE  F008         	call	_set_d3
  1943                           
  1944                           ;Lab10p1.c: 322: Activate_Buzzer();
  1945  000488  EC18  F00B         	call	_Activate_Buzzer	;wreg free
  1946                           
  1947                           ;Lab10p1.c: 323: wait_one_sec();
  1948  00048C  ECBF  F00A         	call	_wait_one_sec	;wreg free
  1949                           
  1950                           ;Lab10p1.c: 324: Deactivate_Buzzer();
  1951  000490  EC3E  F00B         	call	_Deactivate_Buzzer	;wreg free
  1952  000494  D73B               	goto	l3960
  1953  000496  EF0C  F000         	goto	start
  1954  00049A                     __end_of_main:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           prodh	equ	0xFF4
  1961                           prodl	equ	0xFF3
  1962                           intcon	equ	0xFF2
  1963                           intcon2	equ	0xFF1
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           indf2	equ	0xFDF
  1969                           postinc2	equ	0xFDE
  1970                           postdec2	equ	0xFDD
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _wait_one_sec *****************
  1976 ;; Defined at:
  1977 ;;		line 343 in file "Lab10p1.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  k               2   16[COMRAM] int 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;		None               void
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;Total ram usage:        2 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    3
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text1
  2006  00157E                     __ptext1:
  2007                           	opt stack 0
  2008  00157E                     _wait_one_sec:
  2009                           	opt stack 27
  2010                           
  2011                           ;Lab10p1.c: 345: for (int k=0;k<17000;k++);
  2012                           
  2013                           ;incstack = 0
  2014  00157E  0E00               	movlw	0
  2015  001580  6E12               	movwf	wait_one_sec@k+1,c
  2016  001582  0E00               	movlw	0
  2017  001584  6E11               	movwf	wait_one_sec@k,c
  2018  001586                     l3886:
  2019  001586  BE12               	btfsc	wait_one_sec@k+1,7,c
  2020  001588  D008               	goto	l3890
  2021  00158A  0E68               	movlw	104
  2022  00158C  5C11               	subwf	wait_one_sec@k,w,c
  2023  00158E  0E42               	movlw	66
  2024  001590  5812               	subwfb	wait_one_sec@k+1,w,c
  2025  001592  B0D8               	btfsc	status,0,c
  2026  001594  D005               	goto	l206
  2027  001596  D001               	goto	l3890
  2028  001598  D003               	goto	l206
  2029  00159A                     l3890:
  2030  00159A  4A11               	infsnz	wait_one_sec@k,f,c
  2031  00159C  2A12               	incf	wait_one_sec@k+1,f,c
  2032  00159E  D7F3               	goto	l3886
  2033  0015A0                     l206:
  2034  0015A0  0012               	return		;funcret
  2035  0015A2                     __end_of_wait_one_sec:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           intcon	equ	0xFF2
  2044                           intcon2	equ	0xFF1
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           postinc2	equ	0xFDE
  2051                           postdec2	equ	0xFDD
  2052                           fsr2h	equ	0xFDA
  2053                           fsr2l	equ	0xFD9
  2054                           status	equ	0xFD8
  2055                           
  2056 ;; *************** function _set_d3 *****************
  2057 ;; Defined at:
  2058 ;;		line 149 in file "Lab10p1.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  color           1    wreg     unsigned char 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  color           1   16[COMRAM] unsigned char 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;		None               void
  2065 ;; Registers used:
  2066 ;;		wreg, status,2, status,0
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:        1 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    3
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_main
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text2
  2087  0011DC                     __ptext2:
  2088                           	opt stack 0
  2089  0011DC                     _set_d3:
  2090                           	opt stack 27
  2091                           
  2092                           ;incstack = 0
  2093                           ;set_d3@color stored from wreg
  2094  0011DC  6E11               	movwf	set_d3@color,c
  2095                           
  2096                           ;Lab10p1.c: 151: switch(color)
  2097  0011DE  D012               	goto	l3730
  2098  0011E0                     l156:
  2099  0011E0  9680               	bcf	3968,3,c	;volatile
  2100  0011E2  D001               	goto	L1
  2101  0011E4                     l158:
  2102  0011E4  8680               	bsf	3968,3,c	;volatile
  2103  0011E6                     L1:
  2104  0011E6  9880               	bcf	3968,4,c	;volatile
  2105  0011E8  D002               	goto	L2
  2106  0011EA                     l159:
  2107  0011EA  9680               	bcf	3968,3,c	;volatile
  2108  0011EC  8880               	bsf	3968,4,c	;volatile
  2109  0011EE                     L2:
  2110  0011EE  9A80               	bcf	3968,5,c	;volatile
  2111  0011F0  D01D               	goto	l163
  2112  0011F2                     l160:
  2113  0011F2  9680               	bcf	3968,3,c	;volatile
  2114  0011F4  D001               	goto	L3
  2115  0011F6                     l161:
  2116  0011F6  8680               	bsf	3968,3,c	;volatile
  2117  0011F8                     L3:
  2118  0011F8  9880               	bcf	3968,4,c	;volatile
  2119  0011FA  D002               	goto	L4
  2120  0011FC                     l162:
  2121  0011FC  8680               	bsf	3968,3,c	;volatile
  2122  0011FE  8880               	bsf	3968,4,c	;volatile
  2123  001200                     L4:
  2124  001200  8A80               	bsf	3968,5,c	;volatile
  2125                           
  2126                           ;Lab10p1.c: 159: }
  2127  001202  D014               	goto	l163
  2128  001204                     l3730:
  2129  001204  5011               	movf	set_d3@color,w,c
  2130                           
  2131                           ; Switch size 1, requested type "space"
  2132                           ; Number of cases is 6, Range of values is 0 to 5
  2133                           ; switch strategies available:
  2134                           ; Name         Instructions Cycles
  2135                           ; simple_byte           19    10 (average)
  2136                           ;	Chosen strategy is simple_byte
  2137  001206  0A00               	xorlw	0	; case 0
  2138  001208  B4D8               	btfsc	status,2,c
  2139  00120A  D7EA               	goto	l156
  2140  00120C  0A01               	xorlw	1	; case 1
  2141  00120E  B4D8               	btfsc	status,2,c
  2142  001210  D7E9               	goto	l158
  2143  001212  0A03               	xorlw	3	; case 2
  2144  001214  B4D8               	btfsc	status,2,c
  2145  001216  D7E9               	goto	l159
  2146  001218  0A01               	xorlw	1	; case 3
  2147  00121A  B4D8               	btfsc	status,2,c
  2148  00121C  D7EA               	goto	l160
  2149  00121E  0A07               	xorlw	7	; case 4
  2150  001220  B4D8               	btfsc	status,2,c
  2151  001222  D7E9               	goto	l161
  2152  001224  0A01               	xorlw	1	; case 5
  2153  001226  B4D8               	btfsc	status,2,c
  2154  001228  D7E9               	goto	l162
  2155  00122A  D000               	goto	l163
  2156  00122C                     l163:
  2157  00122C  0012               	return		;funcret
  2158  00122E                     __end_of_set_d3:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           intcon2	equ	0xFF1
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           postdec1	equ	0xFE5
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _set_d2 *****************
  2180 ;; Defined at:
  2181 ;;		line 135 in file "Lab10p1.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  color           1    wreg     unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  color           1   16[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;		None               void
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;Total ram usage:        1 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    3
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text3
  2210  00122E                     __ptext3:
  2211                           	opt stack 0
  2212  00122E                     _set_d2:
  2213                           	opt stack 27
  2214                           
  2215                           ;incstack = 0
  2216                           ;set_d2@color stored from wreg
  2217  00122E  6E11               	movwf	set_d2@color,c
  2218                           
  2219                           ;Lab10p1.c: 137: switch(color)
  2220  001230  D012               	goto	l3724
  2221  001232                     l145:
  2222  001232  9A83               	bcf	3971,5,c	;volatile
  2223  001234  D001               	goto	L5
  2224  001236                     l147:
  2225  001236  8A83               	bsf	3971,5,c	;volatile
  2226  001238                     L5:
  2227  001238  9C83               	bcf	3971,6,c	;volatile
  2228  00123A  D002               	goto	L6
  2229  00123C                     l148:
  2230  00123C  9A83               	bcf	3971,5,c	;volatile
  2231  00123E  8C83               	bsf	3971,6,c	;volatile
  2232  001240                     L6:
  2233  001240  9E83               	bcf	3971,7,c	;volatile
  2234  001242  D01D               	goto	l152
  2235  001244                     l149:
  2236  001244  9A83               	bcf	3971,5,c	;volatile
  2237  001246  D001               	goto	L7
  2238  001248                     l150:
  2239  001248  8A83               	bsf	3971,5,c	;volatile
  2240  00124A                     L7:
  2241  00124A  9C83               	bcf	3971,6,c	;volatile
  2242  00124C  D002               	goto	L8
  2243  00124E                     l151:
  2244  00124E  8A83               	bsf	3971,5,c	;volatile
  2245  001250  8C83               	bsf	3971,6,c	;volatile
  2246  001252                     L8:
  2247  001252  8E83               	bsf	3971,7,c	;volatile
  2248                           
  2249                           ;Lab10p1.c: 145: }
  2250  001254  D014               	goto	l152
  2251  001256                     l3724:
  2252  001256  5011               	movf	set_d2@color,w,c
  2253                           
  2254                           ; Switch size 1, requested type "space"
  2255                           ; Number of cases is 6, Range of values is 0 to 5
  2256                           ; switch strategies available:
  2257                           ; Name         Instructions Cycles
  2258                           ; simple_byte           19    10 (average)
  2259                           ;	Chosen strategy is simple_byte
  2260  001258  0A00               	xorlw	0	; case 0
  2261  00125A  B4D8               	btfsc	status,2,c
  2262  00125C  D7EA               	goto	l145
  2263  00125E  0A01               	xorlw	1	; case 1
  2264  001260  B4D8               	btfsc	status,2,c
  2265  001262  D7E9               	goto	l147
  2266  001264  0A03               	xorlw	3	; case 2
  2267  001266  B4D8               	btfsc	status,2,c
  2268  001268  D7E9               	goto	l148
  2269  00126A  0A01               	xorlw	1	; case 3
  2270  00126C  B4D8               	btfsc	status,2,c
  2271  00126E  D7EA               	goto	l149
  2272  001270  0A07               	xorlw	7	; case 4
  2273  001272  B4D8               	btfsc	status,2,c
  2274  001274  D7E9               	goto	l150
  2275  001276  0A01               	xorlw	1	; case 5
  2276  001278  B4D8               	btfsc	status,2,c
  2277  00127A  D7E9               	goto	l151
  2278  00127C  D000               	goto	l152
  2279  00127E                     l152:
  2280  00127E  0012               	return		;funcret
  2281  001280                     __end_of_set_d2:
  2282                           	opt stack 0
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           prodh	equ	0xFF4
  2288                           prodl	equ	0xFF3
  2289                           intcon	equ	0xFF2
  2290                           intcon2	equ	0xFF1
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1l	equ	0xFE1
  2295                           indf2	equ	0xFDF
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _set_d1 *****************
  2303 ;; Defined at:
  2304 ;;		line 121 in file "Lab10p1.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  color           1    wreg     unsigned char 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  color           1   16[COMRAM] unsigned char 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;		None               void
  2311 ;; Registers used:
  2312 ;;		wreg, status,2, status,0
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;Total ram usage:        1 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    3
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_main
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text4
  2333  001280                     __ptext4:
  2334                           	opt stack 0
  2335  001280                     _set_d1:
  2336                           	opt stack 27
  2337                           
  2338                           ;incstack = 0
  2339                           ;set_d1@color stored from wreg
  2340  001280  6E11               	movwf	set_d1@color,c
  2341                           
  2342                           ;Lab10p1.c: 123: switch(color)
  2343  001282  D012               	goto	l3718
  2344  001284                     l134:
  2345  001284  9083               	bcf	3971,0,c	;volatile
  2346  001286  D001               	goto	L9
  2347  001288                     l136:
  2348  001288  8083               	bsf	3971,0,c	;volatile
  2349  00128A                     L9:
  2350  00128A  9283               	bcf	3971,1,c	;volatile
  2351  00128C  D002               	goto	L10
  2352  00128E                     l137:
  2353  00128E  9083               	bcf	3971,0,c	;volatile
  2354  001290  8283               	bsf	3971,1,c	;volatile
  2355  001292                     L10:
  2356  001292  9483               	bcf	3971,2,c	;volatile
  2357  001294  D01D               	goto	l141
  2358  001296                     l138:
  2359  001296  9083               	bcf	3971,0,c	;volatile
  2360  001298  D001               	goto	L11
  2361  00129A                     l139:
  2362  00129A  8083               	bsf	3971,0,c	;volatile
  2363  00129C                     L11:
  2364  00129C  9283               	bcf	3971,1,c	;volatile
  2365  00129E  D002               	goto	L12
  2366  0012A0                     l140:
  2367  0012A0  8083               	bsf	3971,0,c	;volatile
  2368  0012A2  8283               	bsf	3971,1,c	;volatile
  2369  0012A4                     L12:
  2370  0012A4  8483               	bsf	3971,2,c	;volatile
  2371                           
  2372                           ;Lab10p1.c: 131: }
  2373  0012A6  D014               	goto	l141
  2374  0012A8                     l3718:
  2375  0012A8  5011               	movf	set_d1@color,w,c
  2376                           
  2377                           ; Switch size 1, requested type "space"
  2378                           ; Number of cases is 6, Range of values is 0 to 5
  2379                           ; switch strategies available:
  2380                           ; Name         Instructions Cycles
  2381                           ; simple_byte           19    10 (average)
  2382                           ;	Chosen strategy is simple_byte
  2383  0012AA  0A00               	xorlw	0	; case 0
  2384  0012AC  B4D8               	btfsc	status,2,c
  2385  0012AE  D7EA               	goto	l134
  2386  0012B0  0A01               	xorlw	1	; case 1
  2387  0012B2  B4D8               	btfsc	status,2,c
  2388  0012B4  D7E9               	goto	l136
  2389  0012B6  0A03               	xorlw	3	; case 2
  2390  0012B8  B4D8               	btfsc	status,2,c
  2391  0012BA  D7E9               	goto	l137
  2392  0012BC  0A01               	xorlw	1	; case 3
  2393  0012BE  B4D8               	btfsc	status,2,c
  2394  0012C0  D7EA               	goto	l138
  2395  0012C2  0A07               	xorlw	7	; case 4
  2396  0012C4  B4D8               	btfsc	status,2,c
  2397  0012C6  D7E9               	goto	l139
  2398  0012C8  0A01               	xorlw	1	; case 5
  2399  0012CA  B4D8               	btfsc	status,2,c
  2400  0012CC  D7E9               	goto	l140
  2401  0012CE  D000               	goto	l141
  2402  0012D0                     l141:
  2403  0012D0  0012               	return		;funcret
  2404  0012D2                     __end_of_set_d1:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           intcon2	equ	0xFF1
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           postdec1	equ	0xFE5
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _printf *****************
  2426 ;; Defined at:
  2427 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  f               2   29[COMRAM] PTR const unsigned char 
  2430 ;;		 -> STR_1(22), 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  idx             1   41[COMRAM] unsigned char 
  2433 ;;  val             4   44[COMRAM] unsigned long 
  2434 ;;  tmpval          4    0        struct .
  2435 ;;  cp              3    0        PTR const unsigned char 
  2436 ;;  width           2   51[COMRAM] int 
  2437 ;;  ap              2   48[COMRAM] PTR void [1]
  2438 ;;		 -> ?_printf(2), 
  2439 ;;  prec            2   42[COMRAM] int 
  2440 ;;  len             2    0        unsigned int 
  2441 ;;  c               1   53[COMRAM] char 
  2442 ;;  flag            1   50[COMRAM] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  2   29[COMRAM] int 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2452 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;Total ram usage:       25 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    4
  2459 ;; This function calls:
  2460 ;;		___lldiv
  2461 ;;		___wmul
  2462 ;;		_isdigit
  2463 ;;		_putch
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text5
  2470  00001C                     __ptext5:
  2471                           	opt stack 0
  2472  00001C                     _printf:
  2473                           	opt stack 26
  2474                           
  2475                           ;doprnt.c: 466: va_list ap;
  2476                           ;doprnt.c: 499: signed char c;
  2477                           ;doprnt.c: 501: int width;
  2478                           ;doprnt.c: 504: int prec;
  2479                           ;doprnt.c: 508: unsigned char flag;
  2480                           ;doprnt.c: 523: union {
  2481                           ;doprnt.c: 524: unsigned long vd;
  2482                           ;doprnt.c: 525: double integ;
  2483                           ;doprnt.c: 526: } tmpval;
  2484                           ;doprnt.c: 528: unsigned long val;
  2485                           ;doprnt.c: 529: unsigned len;
  2486                           ;doprnt.c: 530: const char * cp;
  2487                           ;doprnt.c: 533: *ap = __va_start();
  2488                           
  2489                           ;incstack = 0
  2490  00001C  0E20               	movlw	low (?_printf+2)
  2491  00001E  6E31               	movwf	printf@ap,c
  2492  000020  0E00               	movlw	high (?_printf+2)
  2493  000022  6E32               	movwf	printf@ap+1,c
  2494                           
  2495                           ;doprnt.c: 536: while(c = *f++) {
  2496  000024  D13D               	goto	l3830
  2497  000026                     l3748:
  2498                           
  2499                           ;doprnt.c: 538: if(c != '%')
  2500  000026  0E25               	movlw	37
  2501  000028  1836               	xorwf	printf@c,w,c
  2502  00002A  B4D8               	btfsc	status,2,c
  2503  00002C  D004               	goto	l3752
  2504                           
  2505                           ;doprnt.c: 540: {
  2506                           ;doprnt.c: 541: (putch(c) );
  2507  00002E  5036               	movf	printf@c,w,c
  2508  000030  EC31  F00B         	call	_putch
  2509                           
  2510                           ;doprnt.c: 542: continue;
  2511  000034  D135               	goto	l3830
  2512  000036                     l3752:
  2513                           
  2514                           ;doprnt.c: 543: }
  2515                           ;doprnt.c: 546: width = 0;
  2516  000036  0E00               	movlw	0
  2517  000038  6E35               	movwf	printf@width+1,c
  2518  00003A  0E00               	movlw	0
  2519  00003C  6E34               	movwf	printf@width,c
  2520                           
  2521                           ;doprnt.c: 548: flag = 0;
  2522  00003E  0E00               	movlw	0
  2523  000040  6E33               	movwf	printf@flag,c
  2524                           
  2525                           ;doprnt.c: 551: switch(*f) {
  2526                           
  2527                           ;doprnt.c: 550: for(;;) {
  2528  000042  D005               	goto	l3758
  2529  000044                     l3754:
  2530                           
  2531                           ;doprnt.c: 580: flag |= 0x04;
  2532  000044  8433               	bsf	printf@flag,2,c
  2533                           
  2534                           ;doprnt.c: 581: f++;
  2535  000046  4A1E               	infsnz	printf@f,f,c
  2536  000048  2A1F               	incf	printf@f+1,f,c
  2537                           
  2538                           ;doprnt.c: 582: continue;
  2539  00004A  D001               	goto	l3758
  2540                           
  2541                           ;doprnt.c: 584: }
  2542  00004C  D00B               	goto	l3760
  2543  00004E                     l3758:
  2544  00004E  C01E  FFF6         	movff	printf@f,tblptrl
  2545  000052  C01F  FFF7         	movff	printf@f+1,tblptrh
  2546  000056                     	if	0	;tblptru may be non-zero
  2547  000056                     	endif
  2548  000056                     	if	0	;tblptru may be non-zero
  2549  000056                     	endif
  2550  000056  0008               	tblrd		*
  2551  000058  50F5               	movf	tablat,w,c
  2552                           
  2553                           ; Switch size 1, requested type "space"
  2554                           ; Number of cases is 1, Range of values is 48 to 48
  2555                           ; switch strategies available:
  2556                           ; Name         Instructions Cycles
  2557                           ; simple_byte            4     3 (average)
  2558                           ;	Chosen strategy is simple_byte
  2559  00005A  0A30               	xorlw	48	; case 48
  2560  00005C  B4D8               	btfsc	status,2,c
  2561  00005E  D7F2               	goto	l3754
  2562                           
  2563                           ;doprnt.c: 585: break;
  2564  000060  D001               	goto	l3760
  2565                           
  2566                           ;doprnt.c: 586: }
  2567  000062  D7F5               	goto	l3758
  2568  000064                     l3760:
  2569                           
  2570                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2571  000064  C01E  FFF6         	movff	printf@f,tblptrl
  2572  000068  C01F  FFF7         	movff	printf@f+1,tblptrh
  2573  00006C                     	if	0	;tblptru may be non-zero
  2574  00006C                     	endif
  2575  00006C                     	if	0	;tblptru may be non-zero
  2576  00006C                     	endif
  2577  00006C  0008               	tblrd		*
  2578  00006E  50F5               	movf	tablat,w,c
  2579  000070  ECD1  F00A         	call	_isdigit
  2580  000074  A0D8               	btfss	status,0,c
  2581  000076  D03B               	goto	l3776
  2582                           
  2583                           ;doprnt.c: 598: width = 0;
  2584  000078  0E00               	movlw	0
  2585  00007A  6E35               	movwf	printf@width+1,c
  2586  00007C  0E00               	movlw	0
  2587  00007E  6E34               	movwf	printf@width,c
  2588  000080  D000               	goto	l3764
  2589  000082                     l3764:
  2590                           
  2591                           ;doprnt.c: 600: width *= 10;
  2592  000082  C034  F011         	movff	printf@width,___wmul@multiplier
  2593  000086  C035  F012         	movff	printf@width+1,___wmul@multiplier+1
  2594  00008A  0E00               	movlw	0
  2595  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2596  00008E  0E0A               	movlw	10
  2597  000090  6E13               	movwf	___wmul@multiplicand,c
  2598  000092  ECAB  F00A         	call	___wmul	;wreg free
  2599  000096  C011  F034         	movff	?___wmul,printf@width
  2600  00009A  C012  F035         	movff	?___wmul+1,printf@width+1
  2601                           
  2602                           ;doprnt.c: 601: width += *f++ - '0';
  2603  00009E  0ED0               	movlw	208
  2604  0000A0  6E26               	movwf	??_printf& (0+255),c
  2605  0000A2  0EFF               	movlw	255
  2606  0000A4  6E27               	movwf	(??_printf+1)& (0+255),c
  2607  0000A6  C01E  FFF6         	movff	printf@f,tblptrl
  2608  0000AA  C01F  FFF7         	movff	printf@f+1,tblptrh
  2609  0000AE                     	if	0	;tblptru may be non-zero
  2610  0000AE                     	endif
  2611  0000AE                     	if	0	;tblptru may be non-zero
  2612  0000AE                     	endif
  2613  0000AE  0008               	tblrd		*
  2614  0000B0  50F5               	movf	tablat,w,c
  2615  0000B2  6E28               	movwf	(??_printf+2)& (0+255),c
  2616  0000B4  6A29               	clrf	(??_printf+3)& (0+255),c
  2617  0000B6  5026               	movf	??_printf,w,c
  2618  0000B8  2628               	addwf	??_printf+2,f,c
  2619  0000BA  5027               	movf	??_printf+1,w,c
  2620  0000BC  2229               	addwfc	??_printf+3,f,c
  2621  0000BE  5028               	movf	??_printf+2,w,c
  2622  0000C0  2634               	addwf	printf@width,f,c
  2623  0000C2  5029               	movf	??_printf+3,w,c
  2624  0000C4  2235               	addwfc	printf@width+1,f,c
  2625  0000C6  4A1E               	infsnz	printf@f,f,c
  2626  0000C8  2A1F               	incf	printf@f+1,f,c
  2627                           
  2628                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2629  0000CA  C01E  FFF6         	movff	printf@f,tblptrl
  2630  0000CE  C01F  FFF7         	movff	printf@f+1,tblptrh
  2631  0000D2                     	if	0	;tblptru may be non-zero
  2632  0000D2                     	endif
  2633  0000D2                     	if	0	;tblptru may be non-zero
  2634  0000D2                     	endif
  2635  0000D2  0008               	tblrd		*
  2636  0000D4  50F5               	movf	tablat,w,c
  2637  0000D6  ECD1  F00A         	call	_isdigit
  2638  0000DA  A0D8               	btfss	status,0,c
  2639  0000DC  D008               	goto	l3776
  2640  0000DE  D7D1               	goto	l3764
  2641                           
  2642                           ;doprnt.c: 635: switch(c = *f++) {
  2643                           
  2644                           ;doprnt.c: 608: }
  2645                           ;doprnt.c: 633: loop:
  2646  0000E0  D006               	goto	l3776
  2647                           
  2648                           ;doprnt.c: 638: goto alldone;
  2649                           
  2650                           ;doprnt.c: 637: case 0:
  2651  0000E2  D0EC               	goto	l470
  2652  0000E4                     l3772:
  2653                           
  2654                           ;doprnt.c: 643: flag |= 0x10;
  2655  0000E4  8833               	bsf	printf@flag,4,c
  2656                           
  2657                           ;doprnt.c: 644: goto loop;
  2658  0000E6  D003               	goto	l3776
  2659                           
  2660                           ;doprnt.c: 723: break;
  2661                           
  2662                           ;doprnt.c: 718: case 'x':
  2663  0000E8  D015               	goto	l449
  2664                           
  2665                           ;doprnt.c: 813: continue;
  2666                           
  2667                           ;doprnt.c: 802: default:
  2668  0000EA  D0DA               	goto	l3830
  2669                           
  2670                           ;doprnt.c: 822: }
  2671  0000EC  D013               	goto	l449
  2672  0000EE                     l3776:
  2673  0000EE  C01E  FFF6         	movff	printf@f,tblptrl
  2674  0000F2  C01F  FFF7         	movff	printf@f+1,tblptrh
  2675  0000F6  4A1E               	infsnz	printf@f,f,c
  2676  0000F8  2A1F               	incf	printf@f+1,f,c
  2677  0000FA                     	if	0	;tblptru may be non-zero
  2678  0000FA                     	endif
  2679  0000FA                     	if	0	;tblptru may be non-zero
  2680  0000FA                     	endif
  2681  0000FA  0008               	tblrd		*
  2682  0000FC  CFF5 F036          	movff	tablat,printf@c
  2683  000100  5036               	movf	printf@c,w,c
  2684                           
  2685                           ; Switch size 1, requested type "space"
  2686                           ; Number of cases is 3, Range of values is 0 to 120
  2687                           ; switch strategies available:
  2688                           ; Name         Instructions Cycles
  2689                           ; simple_byte           10     6 (average)
  2690                           ;	Chosen strategy is simple_byte
  2691  000102  0A00               	xorlw	0	; case 0
  2692  000104  B4D8               	btfsc	status,2,c
  2693  000106  D0DA               	goto	l470
  2694  000108  0A6C               	xorlw	108	; case 108
  2695  00010A  B4D8               	btfsc	status,2,c
  2696  00010C  D7EB               	goto	l3772
  2697  00010E  0A14               	xorlw	20	; case 120
  2698  000110  A4D8               	btfss	status,2,c
  2699  000112  D0C6               	goto	l3830
  2700  000114                     l449:
  2701                           
  2702                           ;doprnt.c: 1273: {
  2703                           ;doprnt.c: 1281: if(flag & 0x10)
  2704  000114  A833               	btfss	printf@flag,4,c
  2705  000116  D00E               	goto	l3782
  2706                           
  2707                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2708  000118  C031  FFD9         	movff	printf@ap,fsr2l
  2709  00011C  C032  FFDA         	movff	printf@ap+1,fsr2h
  2710  000120  CFDE F02D          	movff	postinc2,printf@val
  2711  000124  CFDE F02E          	movff	postinc2,printf@val+1
  2712  000128  CFDE F02F          	movff	postinc2,printf@val+2
  2713  00012C  CFDE F030          	movff	postinc2,printf@val+3
  2714  000130  0E04               	movlw	4
  2715  000132  D00F               	goto	L13
  2716  000134                     l3782:
  2717                           
  2718                           ;doprnt.c: 1283: else
  2719                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2720  000134  C031  FFD9         	movff	printf@ap,fsr2l
  2721  000138  C032  FFDA         	movff	printf@ap+1,fsr2h
  2722  00013C  CFDE F026          	movff	postinc2,??_printf
  2723  000140  CFDD F027          	movff	postdec2,??_printf+1
  2724  000144  C026  F02D         	movff	??_printf,printf@val
  2725  000148  C027  F02E         	movff	??_printf+1,printf@val+1
  2726  00014C  6A2F               	clrf	printf@val+2,c
  2727  00014E  6A30               	clrf	printf@val+3,c
  2728  000150  0E02               	movlw	2
  2729  000152                     L13:
  2730  000152  2631               	addwf	printf@ap,f,c
  2731  000154  0E00               	movlw	0
  2732  000156  2232               	addwfc	printf@ap+1,f,c
  2733  000158  D000               	goto	l3786
  2734  00015A                     l3786:
  2735                           
  2736                           ;doprnt.c: 1287: }
  2737                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2738  00015A  0E01               	movlw	1
  2739  00015C  6E36               	movwf	printf@c,c
  2740  00015E                     l3788:
  2741  00015E  0E08               	movlw	8
  2742  000160  1836               	xorwf	printf@c,w,c
  2743  000162  B4D8               	btfsc	status,2,c
  2744  000164  D01C               	goto	l3800
  2745  000166  D001               	goto	l3792
  2746  000168  D01A               	goto	l3800
  2747  00016A                     l3792:
  2748                           
  2749                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2750  00016A  5036               	movf	printf@c,w,c
  2751  00016C  0D04               	mullw	4
  2752  00016E  0E9C               	movlw	low _hexpowers
  2753  000170  24F3               	addwf	prodl,w,c
  2754  000172  6EF6               	movwf	tblptrl,c
  2755  000174  0EFF               	movlw	high _hexpowers
  2756  000176  20F4               	addwfc	prodh,w,c
  2757  000178  6EF7               	movwf	tblptrh,c
  2758  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2759  00017A                     	endif
  2760  00017A  0009               	tblrd		*+
  2761  00017C  50F5               	movf	tablat,w,c
  2762  00017E  5C2D               	subwf	printf@val,w,c
  2763  000180  0009               	tblrd		*+
  2764  000182  50F5               	movf	tablat,w,c
  2765  000184  582E               	subwfb	printf@val+1,w,c
  2766  000186  0009               	tblrd		*+
  2767  000188  50F5               	movf	tablat,w,c
  2768  00018A  582F               	subwfb	printf@val+2,w,c
  2769  00018C  0009               	tblrd		*+
  2770  00018E  50F5               	movf	tablat,w,c
  2771  000190  5830               	subwfb	printf@val+3,w,c
  2772  000192  A0D8               	btfss	status,0,c
  2773  000194  D004               	goto	l3800
  2774  000196  D001               	goto	l3796
  2775                           
  2776                           ;doprnt.c: 1318: break;
  2777  000198  D002               	goto	l3800
  2778  00019A                     l3796:
  2779  00019A  2A36               	incf	printf@c,f,c
  2780  00019C  D7E0               	goto	l3788
  2781  00019E                     l3800:
  2782                           
  2783                           ;doprnt.c: 1381: if(width > c)
  2784  00019E  0E80               	movlw	128
  2785  0001A0  BE36               	btfsc	printf@c,7,c
  2786  0001A2  0E7F               	movlw	127
  2787  0001A4  6E26               	movwf	??_printf& (0+255),c
  2788  0001A6  5034               	movf	printf@width,w,c
  2789  0001A8  5C36               	subwf	printf@c,w,c
  2790  0001AA  5035               	movf	printf@width+1,w,c
  2791  0001AC  0A80               	xorlw	128
  2792  0001AE  5826               	subwfb	??_printf& (0+255),w,c
  2793  0001B0  B0D8               	btfsc	status,0,c
  2794  0001B2  D007               	goto	l3804
  2795                           
  2796                           ;doprnt.c: 1382: width -= c;
  2797  0001B4  5036               	movf	printf@c,w,c
  2798  0001B6  5E34               	subwf	printf@width,f,c
  2799  0001B8  0E00               	movlw	0
  2800  0001BA  BE36               	btfsc	printf@c,7,c
  2801  0001BC  0EFF               	movlw	255
  2802  0001BE  5A35               	subwfb	printf@width+1,f,c
  2803  0001C0  D005               	goto	l3806
  2804  0001C2                     l3804:
  2805                           
  2806                           ;doprnt.c: 1383: else
  2807                           ;doprnt.c: 1384: width = 0;
  2808  0001C2  0E00               	movlw	0
  2809  0001C4  6E35               	movwf	printf@width+1,c
  2810  0001C6  0E00               	movlw	0
  2811  0001C8  6E34               	movwf	printf@width,c
  2812  0001CA  D000               	goto	l3806
  2813  0001CC                     l3806:
  2814                           
  2815                           ;doprnt.c: 1387: if(flag & 0x04) {
  2816  0001CC  A433               	btfss	printf@flag,2,c
  2817  0001CE  D010               	goto	l3814
  2818                           
  2819                           ;doprnt.c: 1415: if(width)
  2820  0001D0  5034               	movf	printf@width,w,c
  2821  0001D2  1035               	iorwf	printf@width+1,w,c
  2822  0001D4  B4D8               	btfsc	status,2,c
  2823  0001D6  D01C               	goto	l3820
  2824  0001D8                     l3810:
  2825                           
  2826                           ;doprnt.c: 1417: (putch('0') );
  2827  0001D8  0E30               	movlw	48
  2828  0001DA  EC31  F00B         	call	_putch
  2829                           
  2830                           ;doprnt.c: 1418: while(--width);
  2831  0001DE  0634               	decf	printf@width,f,c
  2832  0001E0  A0D8               	btfss	status,0,c
  2833  0001E2  0635               	decf	printf@width+1,f,c
  2834  0001E4  5034               	movf	printf@width,w,c
  2835  0001E6  1035               	iorwf	printf@width+1,w,c
  2836  0001E8  B4D8               	btfsc	status,2,c
  2837  0001EA  D012               	goto	l3820
  2838  0001EC  D7F5               	goto	l3810
  2839                           
  2840                           ;doprnt.c: 1420: } else
  2841  0001EE  D010               	goto	l3820
  2842  0001F0                     l3814:
  2843                           
  2844                           ;doprnt.c: 1422: {
  2845                           ;doprnt.c: 1424: if(width
  2846                           ;doprnt.c: 1428: )
  2847  0001F0  5034               	movf	printf@width,w,c
  2848  0001F2  1035               	iorwf	printf@width+1,w,c
  2849  0001F4  B4D8               	btfsc	status,2,c
  2850  0001F6  D00C               	goto	l3820
  2851  0001F8                     l3816:
  2852                           
  2853                           ;doprnt.c: 1430: (putch(' ') );
  2854  0001F8  0E20               	movlw	32
  2855  0001FA  EC31  F00B         	call	_putch
  2856                           
  2857                           ;doprnt.c: 1431: while(--width);
  2858  0001FE  0634               	decf	printf@width,f,c
  2859  000200  A0D8               	btfss	status,0,c
  2860  000202  0635               	decf	printf@width+1,f,c
  2861  000204  5034               	movf	printf@width,w,c
  2862  000206  1035               	iorwf	printf@width+1,w,c
  2863  000208  B4D8               	btfsc	status,2,c
  2864  00020A  D002               	goto	l3820
  2865  00020C  D7F5               	goto	l3816
  2866  00020E  D000               	goto	l3820
  2867  000210                     l3820:
  2868                           
  2869                           ;doprnt.c: 1469: }
  2870                           ;doprnt.c: 1472: prec = c;
  2871  000210  5036               	movf	printf@c,w,c
  2872  000212  6E2B               	movwf	printf@prec,c
  2873  000214  6A2C               	clrf	printf@prec+1,c
  2874  000216  BE2B               	btfsc	printf@prec,7,c
  2875  000218  062C               	decf	printf@prec+1,f,c
  2876                           
  2877                           ;doprnt.c: 1474: while(prec--) {
  2878  00021A  D038               	goto	l3828
  2879  00021C                     l3822:
  2880                           
  2881                           ;doprnt.c: 1478: {
  2882                           ;doprnt.c: 1499: {
  2883                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2884  00021C  C02D  F011         	movff	printf@val,___lldiv@dividend
  2885  000220  C02E  F012         	movff	printf@val+1,___lldiv@dividend+1
  2886  000224  C02F  F013         	movff	printf@val+2,___lldiv@dividend+2
  2887  000228  C030  F014         	movff	printf@val+3,___lldiv@dividend+3
  2888  00022C  C02B  F026         	movff	printf@prec,??_printf
  2889  000230  C02C  F027         	movff	printf@prec+1,??_printf+1
  2890  000234  90D8               	bcf	status,0,c
  2891  000236  3626               	rlcf	??_printf,f,c
  2892  000238  3627               	rlcf	??_printf+1,f,c
  2893  00023A  90D8               	bcf	status,0,c
  2894  00023C  3626               	rlcf	??_printf,f,c
  2895  00023E  3627               	rlcf	??_printf+1,f,c
  2896  000240  0E9C               	movlw	low _hexpowers
  2897  000242  2426               	addwf	??_printf,w,c
  2898  000244  6EF6               	movwf	tblptrl,c
  2899  000246  0EFF               	movlw	high _hexpowers
  2900  000248  2027               	addwfc	??_printf+1,w,c
  2901  00024A  6EF7               	movwf	tblptrh,c
  2902  00024C                     	if	0	;There are less than 3 active tblptr bytes
  2903  00024C                     	endif
  2904  00024C  0009               	tblrd		*+
  2905  00024E  CFF5 F015          	movff	tablat,___lldiv@divisor
  2906  000252  0009               	tblrd		*+
  2907  000254  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2908  000258  0009               	tblrd		*+
  2909  00025A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2910  00025E  000A               	tblrd		*-
  2911  000260  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2912  000264  ECAD  F007         	call	___lldiv	;wreg free
  2913  000268  5011               	movf	?___lldiv,w,c
  2914  00026A  0B0F               	andlw	15
  2915  00026C  6E2A               	movwf	printf@idx,c
  2916                           
  2917                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2918  00026E  502A               	movf	printf@idx,w,c
  2919  000270  0D01               	mullw	1
  2920  000272  0EE6               	movlw	low STR_4
  2921  000274  24F3               	addwf	prodl,w,c
  2922  000276  6EF6               	movwf	tblptrl,c
  2923  000278  0EFF               	movlw	high STR_4
  2924  00027A  20F4               	addwfc	prodh,w,c
  2925  00027C  6EF7               	movwf	tblptrh,c
  2926  00027E                     	if	0	;There are less than 3 active tblptr bytes
  2927  00027E                     	endif
  2928  00027E  0008               	tblrd		*
  2929  000280  CFF5 F036          	movff	tablat,printf@c
  2930                           
  2931                           ;doprnt.c: 1508: }
  2932                           ;doprnt.c: 1523: }
  2933                           ;doprnt.c: 1524: (putch(c) );
  2934  000284  5036               	movf	printf@c,w,c
  2935  000286  EC31  F00B         	call	_putch
  2936  00028A  D000               	goto	l3828
  2937  00028C                     l3828:
  2938  00028C  062B               	decf	printf@prec,f,c
  2939  00028E  A0D8               	btfss	status,0,c
  2940  000290  062C               	decf	printf@prec+1,f,c
  2941  000292  282B               	incf	printf@prec,w,c
  2942  000294  E1C3               	bnz	l3822
  2943  000296  282C               	incf	printf@prec+1,w,c
  2944  000298  B4D8               	btfsc	status,2,c
  2945  00029A  D002               	goto	l3830
  2946  00029C  D7BF               	goto	l3822
  2947  00029E  D000               	goto	l3830
  2948  0002A0                     l3830:
  2949  0002A0  C01E  FFF6         	movff	printf@f,tblptrl
  2950  0002A4  C01F  FFF7         	movff	printf@f+1,tblptrh
  2951  0002A8  4A1E               	infsnz	printf@f,f,c
  2952  0002AA  2A1F               	incf	printf@f+1,f,c
  2953  0002AC                     	if	0	;tblptru may be non-zero
  2954  0002AC                     	endif
  2955  0002AC                     	if	0	;tblptru may be non-zero
  2956  0002AC                     	endif
  2957  0002AC  0008               	tblrd		*
  2958  0002AE  CFF5 F036          	movff	tablat,printf@c
  2959  0002B2  5036               	movf	printf@c,w,c
  2960  0002B4  B4D8               	btfsc	status,2,c
  2961  0002B6  D002               	goto	l470
  2962  0002B8  D6B6               	goto	l3748
  2963  0002BA  D000               	goto	l470
  2964  0002BC                     l470:
  2965  0002BC  0012               	return		;funcret
  2966  0002BE                     __end_of_printf:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           intcon2	equ	0xFF1
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _putch *****************
  2988 ;; Defined at:
  2989 ;;		line 85 in file "Lab10p1.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  c               1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  c               1   16[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        1 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    3
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_printf
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text6
  3018  001662                     __ptext6:
  3019                           	opt stack 0
  3020  001662                     _putch:
  3021                           	opt stack 26
  3022                           
  3023                           ;incstack = 0
  3024                           ;putch@c stored from wreg
  3025  001662  6E11               	movwf	putch@c,c
  3026                           
  3027                           ;Lab10p1.c: 87: while (!TRMT);
  3028  001664  D000               	goto	l113
  3029  001666                     l113:
  3030  001666  A2AC               	btfss	4012,1,c	;volatile
  3031  001668  D7FE               	goto	l113
  3032                           
  3033                           ;Lab10p1.c: 88: TXREG = c;
  3034  00166A  C011  FFAD         	movff	putch@c,4013	;volatile
  3035  00166E  0012               	return		;funcret
  3036  001670                     __end_of_putch:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           intcon2	equ	0xFF1
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _isdigit *****************
  3058 ;; Defined at:
  3059 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  c               1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  c               1   18[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;		None               void
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        3 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_printf
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text7
  3088  0015A2                     __ptext7:
  3089                           	opt stack 0
  3090  0015A2                     _isdigit:
  3091                           	opt stack 26
  3092                           
  3093                           ;incstack = 0
  3094                           ;isdigit@c stored from wreg
  3095  0015A2  6E13               	movwf	isdigit@c,c
  3096  0015A4  0E00               	movlw	0
  3097  0015A6  6E12               	movwf	_isdigit$1782,c
  3098  0015A8  0E3A               	movlw	58
  3099  0015AA  6013               	cpfslt	isdigit@c,c
  3100  0015AC  D006               	goto	l3684
  3101  0015AE  0E2F               	movlw	47
  3102  0015B0  6413               	cpfsgt	isdigit@c,c
  3103  0015B2  D003               	goto	l3684
  3104  0015B4  0E01               	movlw	1
  3105  0015B6  6E12               	movwf	_isdigit$1782,c
  3106  0015B8  D000               	goto	l3684
  3107  0015BA                     l3684:
  3108  0015BA  C012  F011         	movff	_isdigit$1782,??_isdigit
  3109  0015BE  3011               	rrcf	??_isdigit,w,c
  3110  0015C0  D000               	goto	l937
  3111  0015C2                     l937:
  3112  0015C2  0012               	return		;funcret
  3113  0015C4                     __end_of_isdigit:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           intcon	equ	0xFF2
  3122                           intcon2	equ	0xFF1
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function ___lldiv *****************
  3135 ;; Defined at:
  3136 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  dividend        4   16[COMRAM] unsigned long 
  3139 ;;  divisor         4   20[COMRAM] unsigned long 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  quotient        4   24[COMRAM] unsigned long 
  3142 ;;  counter         1   28[COMRAM] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  4   16[COMRAM] unsigned long 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3152 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;Total ram usage:       13 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    3
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_printf
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text8
  3167  000F5A                     __ptext8:
  3168                           	opt stack 0
  3169  000F5A                     ___lldiv:
  3170                           	opt stack 26
  3171                           
  3172                           ;incstack = 0
  3173  000F5A  0E00               	movlw	0
  3174  000F5C  6E19               	movwf	___lldiv@quotient,c
  3175  000F5E  0E00               	movlw	0
  3176  000F60  6E1A               	movwf	___lldiv@quotient+1,c
  3177  000F62  0E00               	movlw	0
  3178  000F64  6E1B               	movwf	___lldiv@quotient+2,c
  3179  000F66  0E00               	movlw	0
  3180  000F68  6E1C               	movwf	___lldiv@quotient+3,c
  3181  000F6A  5015               	movf	___lldiv@divisor,w,c
  3182  000F6C  1016               	iorwf	___lldiv@divisor+1,w,c
  3183  000F6E  1017               	iorwf	___lldiv@divisor+2,w,c
  3184  000F70  1018               	iorwf	___lldiv@divisor+3,w,c
  3185  000F72  B4D8               	btfsc	status,2,c
  3186  000F74  D02F               	goto	l966
  3187  000F76  0E01               	movlw	1
  3188  000F78  6E1D               	movwf	___lldiv@counter,c
  3189  000F7A  D007               	goto	l3696
  3190  000F7C                     l3694:
  3191  000F7C  90D8               	bcf	status,0,c
  3192  000F7E  3615               	rlcf	___lldiv@divisor,f,c
  3193  000F80  3616               	rlcf	___lldiv@divisor+1,f,c
  3194  000F82  3617               	rlcf	___lldiv@divisor+2,f,c
  3195  000F84  3618               	rlcf	___lldiv@divisor+3,f,c
  3196  000F86  2A1D               	incf	___lldiv@counter,f,c
  3197  000F88  D000               	goto	l3696
  3198  000F8A                     l3696:
  3199  000F8A  BE18               	btfsc	___lldiv@divisor+3,7,c
  3200  000F8C  D002               	goto	l3698
  3201  000F8E  D7F6               	goto	l3694
  3202  000F90  D000               	goto	l3698
  3203  000F92                     l3698:
  3204  000F92  90D8               	bcf	status,0,c
  3205  000F94  3619               	rlcf	___lldiv@quotient,f,c
  3206  000F96  361A               	rlcf	___lldiv@quotient+1,f,c
  3207  000F98  361B               	rlcf	___lldiv@quotient+2,f,c
  3208  000F9A  361C               	rlcf	___lldiv@quotient+3,f,c
  3209  000F9C  5015               	movf	___lldiv@divisor,w,c
  3210  000F9E  5C11               	subwf	___lldiv@dividend,w,c
  3211  000FA0  5016               	movf	___lldiv@divisor+1,w,c
  3212  000FA2  5812               	subwfb	___lldiv@dividend+1,w,c
  3213  000FA4  5017               	movf	___lldiv@divisor+2,w,c
  3214  000FA6  5813               	subwfb	___lldiv@dividend+2,w,c
  3215  000FA8  5018               	movf	___lldiv@divisor+3,w,c
  3216  000FAA  5814               	subwfb	___lldiv@dividend+3,w,c
  3217  000FAC  A0D8               	btfss	status,0,c
  3218  000FAE  D00A               	goto	l3706
  3219  000FB0  5015               	movf	___lldiv@divisor,w,c
  3220  000FB2  5E11               	subwf	___lldiv@dividend,f,c
  3221  000FB4  5016               	movf	___lldiv@divisor+1,w,c
  3222  000FB6  5A12               	subwfb	___lldiv@dividend+1,f,c
  3223  000FB8  5017               	movf	___lldiv@divisor+2,w,c
  3224  000FBA  5A13               	subwfb	___lldiv@dividend+2,f,c
  3225  000FBC  5018               	movf	___lldiv@divisor+3,w,c
  3226  000FBE  5A14               	subwfb	___lldiv@dividend+3,f,c
  3227  000FC0  8019               	bsf	___lldiv@quotient,0,c
  3228  000FC2  D000               	goto	l3706
  3229  000FC4                     l3706:
  3230  000FC4  90D8               	bcf	status,0,c
  3231  000FC6  3218               	rrcf	___lldiv@divisor+3,f,c
  3232  000FC8  3217               	rrcf	___lldiv@divisor+2,f,c
  3233  000FCA  3216               	rrcf	___lldiv@divisor+1,f,c
  3234  000FCC  3215               	rrcf	___lldiv@divisor,f,c
  3235  000FCE  2E1D               	decfsz	___lldiv@counter,f,c
  3236  000FD0  D7E0               	goto	l3698
  3237  000FD2  D000               	goto	l966
  3238  000FD4                     l966:
  3239  000FD4  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3240  000FD8  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3241  000FDC  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3242  000FE0  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3243  000FE4  0012               	return		;funcret
  3244  000FE6                     __end_of___lldiv:
  3245                           	opt stack 0
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           intcon2	equ	0xFF1
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _init_UART *****************
  3266 ;; Defined at:
  3267 ;;		line 91 in file "Lab10p1.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;		None               void
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    4
  3288 ;; This function calls:
  3289 ;;		_OpenUSART
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text9
  3296  0015F6                     __ptext9:
  3297                           	opt stack 0
  3298  0015F6                     _init_UART:
  3299                           	opt stack 26
  3300                           
  3301                           ;Lab10p1.c: 93: OpenUSART (0b01111111 & 0b10111111 &
  3302                           ;Lab10p1.c: 94: 0b11111110 & 0b11111101 & 0b11111111 &
  3303                           ;Lab10p1.c: 95: 0b11111111, 25);
  3304                           
  3305                           ;incstack = 0
  3306  0015F6  0E00               	movlw	0
  3307  0015F8  6E12               	movwf	OpenUSART@spbrg+1,c
  3308  0015FA  0E19               	movlw	25
  3309  0015FC  6E11               	movwf	OpenUSART@spbrg,c
  3310  0015FE  0E3C               	movlw	60
  3311  001600  ECB6  F008         	call	_OpenUSART
  3312                           
  3313                           ;Lab10p1.c: 96: OSCCON = 0x60;
  3314  001604  0E60               	movlw	96
  3315  001606  6ED3               	movwf	4051,c	;volatile
  3316  001608  0012               	return		;funcret
  3317  00160A                     __end_of_init_UART:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           prodh	equ	0xFF4
  3324                           prodl	equ	0xFF3
  3325                           intcon	equ	0xFF2
  3326                           intcon2	equ	0xFF1
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           postdec1	equ	0xFE5
  3330                           fsr1l	equ	0xFE1
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function _OpenUSART *****************
  3339 ;; Defined at:
  3340 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  config          1    wreg     unsigned char 
  3343 ;;  spbrg           2   16[COMRAM] unsigned int 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  config          1   18[COMRAM] unsigned char 
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		wreg, status,2
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3355 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;Total ram usage:        3 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    3
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_init_UART
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text10
  3370  00116C                     __ptext10:
  3371                           	opt stack 0
  3372  00116C                     _OpenUSART:
  3373                           	opt stack 26
  3374                           
  3375                           ;incstack = 0
  3376                           ;OpenUSART@config stored from wreg
  3377  00116C  6E13               	movwf	OpenUSART@config,c
  3378  00116E  0E00               	movlw	0
  3379  001170  6EAC               	movwf	4012,c	;volatile
  3380  001172  0E00               	movlw	0
  3381  001174  6EAB               	movwf	4011,c	;volatile
  3382  001176  A013               	btfss	OpenUSART@config,0,c
  3383  001178  D002               	goto	l3534
  3384  00117A  88AC               	bsf	4012,4,c	;volatile
  3385  00117C  D000               	goto	l3534
  3386  00117E                     l3534:
  3387  00117E  A213               	btfss	OpenUSART@config,1,c
  3388  001180  D003               	goto	l3538
  3389  001182  8CAC               	bsf	4012,6,c	;volatile
  3390  001184  8CAB               	bsf	4011,6,c	;volatile
  3391  001186  D000               	goto	l3538
  3392  001188                     l3538:
  3393  001188  A413               	btfss	OpenUSART@config,2,c
  3394  00118A  D002               	goto	l3542
  3395  00118C  8EAC               	bsf	4012,7,c	;volatile
  3396  00118E  D000               	goto	l3542
  3397  001190                     l3542:
  3398  001190  A613               	btfss	OpenUSART@config,3,c
  3399  001192  D002               	goto	l494
  3400  001194  88AB               	bsf	4011,4,c	;volatile
  3401  001196  D002               	goto	l3546
  3402  001198                     l494:
  3403  001198  8AAB               	bsf	4011,5,c	;volatile
  3404  00119A  D000               	goto	l3546
  3405  00119C                     l3546:
  3406  00119C  B813               	btfsc	OpenUSART@config,4,c
  3407  00119E  84AC               	bsf	4012,2,c	;volatile
  3408  0011A0  989E               	bcf	3998,4,c	;volatile
  3409  0011A2  AA13               	btfss	OpenUSART@config,5,c
  3410  0011A4  D002               	goto	l3554
  3411  0011A6  86AB               	bsf	4011,3,c	;volatile
  3412  0011A8  D000               	goto	l3554
  3413  0011AA                     l3554:
  3414  0011AA  AC13               	btfss	OpenUSART@config,6,c
  3415  0011AC  D002               	goto	l498
  3416  0011AE  8A9D               	bsf	3997,5,c	;volatile
  3417  0011B0  D001               	goto	l499
  3418  0011B2                     l498:
  3419  0011B2  9A9D               	bcf	3997,5,c	;volatile
  3420  0011B4                     l499:
  3421  0011B4  9A9E               	bcf	3998,5,c	;volatile
  3422  0011B6  AE13               	btfss	OpenUSART@config,7,c
  3423  0011B8  D002               	goto	l500
  3424  0011BA  889D               	bsf	3997,4,c	;volatile
  3425  0011BC  D001               	goto	l501
  3426  0011BE                     l500:
  3427  0011BE  989D               	bcf	3997,4,c	;volatile
  3428  0011C0                     l501:
  3429  0011C0  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3430  0011C4  5012               	movf	OpenUSART@spbrg+1,w,c
  3431  0011C6  6EB0               	movwf	4016,c	;volatile
  3432  0011C8  8AAC               	bsf	4012,5,c	;volatile
  3433  0011CA  8EAB               	bsf	4011,7,c	;volatile
  3434  0011CC  9C94               	bcf	3988,6,c	;volatile
  3435  0011CE  8E94               	bsf	3988,7,c	;volatile
  3436  0011D0  B8AC               	btfsc	4012,4,c	;volatile
  3437  0011D2  BEAC               	btfsc	4012,7,c	;volatile
  3438  0011D4  D002               	goto	l503
  3439  0011D6  8C94               	bsf	3988,6,c	;volatile
  3440  0011D8  D000               	goto	l503
  3441  0011DA                     l503:
  3442  0011DA  0012               	return		;funcret
  3443  0011DC                     __end_of_OpenUSART:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           intcon	equ	0xFF2
  3452                           intcon2	equ	0xFF1
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           postdec1	equ	0xFE5
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _fillCircle *****************
  3465 ;; Defined at:
  3466 ;;		line 611 in file "ST7735_TFT.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  x0              2   58[COMRAM] int 
  3469 ;;  y0              2   60[COMRAM] int 
  3470 ;;  r               2   62[COMRAM] int 
  3471 ;;  color           2   64[COMRAM] unsigned int 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;		None               void
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        8 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    8
  3490 ;; This function calls:
  3491 ;;		_drawFastVLine
  3492 ;;		_fillCircleHelper
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text11
  3499  0012D2                     __ptext11:
  3500                           	opt stack 0
  3501  0012D2                     _fillCircle:
  3502                           	opt stack 22
  3503                           
  3504                           ;ST7735_TFT.c: 613: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3505                           
  3506                           ;incstack = 0
  3507  0012D2  503F               	movf	fillCircle@r,w,c
  3508  0012D4  0800               	sublw	0
  3509  0012D6  243D               	addwf	fillCircle@y0,w,c
  3510  0012D8  6E18               	movwf	drawFastVLine@y,c
  3511  0012DA  80D8               	bsf	status,0,c
  3512  0012DC  343F               	rlcf	fillCircle@r,w,c
  3513  0012DE  6E19               	movwf	drawFastVLine@h,c
  3514  0012E0  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3515  0012E4  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3516  0012E8  503B               	movf	fillCircle@x0,w,c
  3517  0012EA  ECF3  F007         	call	_drawFastVLine
  3518                           
  3519                           ;ST7735_TFT.c: 614: fillCircleHelper(x0, y0, r, 3, 0, color);
  3520  0012EE  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3521  0012F2  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3522  0012F6  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3523  0012FA  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3524  0012FE  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3525  001302  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3526  001306  0E00               	movlw	0
  3527  001308  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3528  00130A  0E03               	movlw	3
  3529  00130C  6E29               	movwf	fillCircleHelper@cornername,c
  3530  00130E  0E00               	movlw	0
  3531  001310  6E2C               	movwf	fillCircleHelper@delta+1,c
  3532  001312  0E00               	movlw	0
  3533  001314  6E2B               	movwf	fillCircleHelper@delta,c
  3534  001316  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3535  00131A  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3536  00131E  EC82  F004         	call	_fillCircleHelper	;wreg free
  3537  001322  0012               	return		;funcret
  3538  001324                     __end_of_fillCircle:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           intcon	equ	0xFF2
  3547                           intcon2	equ	0xFF1
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           postdec1	equ	0xFE5
  3551                           fsr1l	equ	0xFE1
  3552                           indf2	equ	0xFDF
  3553                           postinc2	equ	0xFDE
  3554                           postdec2	equ	0xFDD
  3555                           fsr2h	equ	0xFDA
  3556                           fsr2l	equ	0xFD9
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _fillCircleHelper *****************
  3560 ;; Defined at:
  3561 ;;		line 586 in file "ST7735_TFT.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  x0              2   34[COMRAM] int 
  3564 ;;  y0              2   36[COMRAM] int 
  3565 ;;  r               2   38[COMRAM] int 
  3566 ;;  cornername      2   40[COMRAM] unsigned int 
  3567 ;;  delta           2   42[COMRAM] int 
  3568 ;;  color           2   44[COMRAM] unsigned int 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  y               2   56[COMRAM] int 
  3571 ;;  x               2   54[COMRAM] int 
  3572 ;;  f               2   52[COMRAM] int 
  3573 ;;  ddF_y           2   50[COMRAM] int 
  3574 ;;  ddF_x           2   48[COMRAM] int 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;		None               void
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3584 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;Total ram usage:       24 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    7
  3591 ;; This function calls:
  3592 ;;		_drawFastVLine
  3593 ;; This function is called by:
  3594 ;;		_fillCircle
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text12
  3599  000904                     __ptext12:
  3600                           	opt stack 0
  3601  000904                     _fillCircleHelper:
  3602                           	opt stack 22
  3603                           
  3604                           ;ST7735_TFT.c: 588: signed int f, ddF_x, ddF_y, x, y;
  3605                           ;ST7735_TFT.c: 589: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3606                           
  3607                           ;incstack = 0
  3608  000904  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3609  000908  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3610  00090C  1E2F               	comf	??_fillCircleHelper,f,c
  3611  00090E  1E30               	comf	??_fillCircleHelper+1,f,c
  3612  000910  4A2F               	infsnz	??_fillCircleHelper,f,c
  3613  000912  2A30               	incf	??_fillCircleHelper+1,f,c
  3614  000914  0E01               	movlw	1
  3615  000916  242F               	addwf	??_fillCircleHelper,w,c
  3616  000918  6E35               	movwf	fillCircleHelper@f,c
  3617  00091A  0E00               	movlw	0
  3618  00091C  2030               	addwfc	??_fillCircleHelper+1,w,c
  3619  00091E  6E36               	movwf	fillCircleHelper@f+1,c
  3620  000920  0E00               	movlw	0
  3621  000922  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3622  000924  0E01               	movlw	1
  3623  000926  6E31               	movwf	fillCircleHelper@ddF_x,c
  3624  000928  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3625  00092C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3626  000930  90D8               	bcf	status,0,c
  3627  000932  362F               	rlcf	??_fillCircleHelper,f,c
  3628  000934  3630               	rlcf	??_fillCircleHelper+1,f,c
  3629  000936  1E2F               	comf	??_fillCircleHelper,f,c
  3630  000938  1E30               	comf	??_fillCircleHelper+1,f,c
  3631  00093A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3632  00093C  2A30               	incf	??_fillCircleHelper+1,f,c
  3633  00093E  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3634  000942  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3635  000946  0E00               	movlw	0
  3636  000948  6E38               	movwf	fillCircleHelper@x+1,c
  3637  00094A  0E00               	movlw	0
  3638  00094C  6E37               	movwf	fillCircleHelper@x,c
  3639  00094E  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3640  000952  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3641                           
  3642                           ;ST7735_TFT.c: 590: while (x<y) {
  3643  000956  D067               	goto	l3674
  3644  000958                     l3654:
  3645                           
  3646                           ;ST7735_TFT.c: 591: if (f >= 0) {
  3647  000958  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3648  00095A  D00B               	goto	l386
  3649                           
  3650                           ;ST7735_TFT.c: 592: y--;
  3651  00095C  0639               	decf	fillCircleHelper@y,f,c
  3652  00095E  A0D8               	btfss	status,0,c
  3653  000960  063A               	decf	fillCircleHelper@y+1,f,c
  3654                           
  3655                           ;ST7735_TFT.c: 593: ddF_y += 2;
  3656  000962  0E02               	movlw	2
  3657  000964  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3658  000966  0E00               	movlw	0
  3659  000968  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3660                           
  3661                           ;ST7735_TFT.c: 594: f += ddF_y;
  3662  00096A  5033               	movf	fillCircleHelper@ddF_y,w,c
  3663  00096C  2635               	addwf	fillCircleHelper@f,f,c
  3664  00096E  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3665  000970  2236               	addwfc	fillCircleHelper@f+1,f,c
  3666  000972                     l386:
  3667                           
  3668                           ;ST7735_TFT.c: 595: }
  3669                           ;ST7735_TFT.c: 596: x++;
  3670  000972  4A37               	infsnz	fillCircleHelper@x,f,c
  3671  000974  2A38               	incf	fillCircleHelper@x+1,f,c
  3672                           
  3673                           ;ST7735_TFT.c: 597: ddF_x += 2;
  3674  000976  0E02               	movlw	2
  3675  000978  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3676  00097A  0E00               	movlw	0
  3677  00097C  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3678                           
  3679                           ;ST7735_TFT.c: 598: f += ddF_x;
  3680  00097E  5031               	movf	fillCircleHelper@ddF_x,w,c
  3681  000980  2635               	addwf	fillCircleHelper@f,f,c
  3682  000982  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3683  000984  2236               	addwfc	fillCircleHelper@f+1,f,c
  3684                           
  3685                           ;ST7735_TFT.c: 600: if (cornername & 0x1) {
  3686  000986  A029               	btfss	fillCircleHelper@cornername,0,c
  3687  000988  D025               	goto	l3670
  3688                           
  3689                           ;ST7735_TFT.c: 601: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3690  00098A  5039               	movf	fillCircleHelper@y,w,c
  3691  00098C  0800               	sublw	0
  3692  00098E  2425               	addwf	fillCircleHelper@y0,w,c
  3693  000990  6E18               	movwf	drawFastVLine@y,c
  3694  000992  5039               	movf	fillCircleHelper@y,w,c
  3695  000994  2439               	addwf	fillCircleHelper@y,w,c
  3696  000996  242B               	addwf	fillCircleHelper@delta,w,c
  3697  000998  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3698  00099A  282F               	incf	??_fillCircleHelper,w,c
  3699  00099C  6E19               	movwf	drawFastVLine@h,c
  3700  00099E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3701  0009A2  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3702  0009A6  5023               	movf	fillCircleHelper@x0,w,c
  3703  0009A8  2437               	addwf	fillCircleHelper@x,w,c
  3704  0009AA  ECF3  F007         	call	_drawFastVLine
  3705                           
  3706                           ;ST7735_TFT.c: 602: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3707  0009AE  5037               	movf	fillCircleHelper@x,w,c
  3708  0009B0  0800               	sublw	0
  3709  0009B2  2425               	addwf	fillCircleHelper@y0,w,c
  3710  0009B4  6E18               	movwf	drawFastVLine@y,c
  3711  0009B6  5037               	movf	fillCircleHelper@x,w,c
  3712  0009B8  2437               	addwf	fillCircleHelper@x,w,c
  3713  0009BA  242B               	addwf	fillCircleHelper@delta,w,c
  3714  0009BC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3715  0009BE  282F               	incf	??_fillCircleHelper,w,c
  3716  0009C0  6E19               	movwf	drawFastVLine@h,c
  3717  0009C2  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3718  0009C6  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3719  0009CA  5023               	movf	fillCircleHelper@x0,w,c
  3720  0009CC  2439               	addwf	fillCircleHelper@y,w,c
  3721  0009CE  ECF3  F007         	call	_drawFastVLine
  3722  0009D2  D000               	goto	l3670
  3723  0009D4                     l3670:
  3724                           
  3725                           ;ST7735_TFT.c: 603: }
  3726                           ;ST7735_TFT.c: 604: if (cornername & 0x2) {
  3727  0009D4  A229               	btfss	fillCircleHelper@cornername,1,c
  3728  0009D6  D027               	goto	l3674
  3729                           
  3730                           ;ST7735_TFT.c: 605: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3731  0009D8  5039               	movf	fillCircleHelper@y,w,c
  3732  0009DA  0800               	sublw	0
  3733  0009DC  2425               	addwf	fillCircleHelper@y0,w,c
  3734  0009DE  6E18               	movwf	drawFastVLine@y,c
  3735  0009E0  5039               	movf	fillCircleHelper@y,w,c
  3736  0009E2  2439               	addwf	fillCircleHelper@y,w,c
  3737  0009E4  242B               	addwf	fillCircleHelper@delta,w,c
  3738  0009E6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3739  0009E8  282F               	incf	??_fillCircleHelper,w,c
  3740  0009EA  6E19               	movwf	drawFastVLine@h,c
  3741  0009EC  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3742  0009F0  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3743  0009F4  5037               	movf	fillCircleHelper@x,w,c
  3744  0009F6  0800               	sublw	0
  3745  0009F8  2423               	addwf	fillCircleHelper@x0,w,c
  3746  0009FA  ECF3  F007         	call	_drawFastVLine
  3747                           
  3748                           ;ST7735_TFT.c: 606: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3749  0009FE  5037               	movf	fillCircleHelper@x,w,c
  3750  000A00  0800               	sublw	0
  3751  000A02  2425               	addwf	fillCircleHelper@y0,w,c
  3752  000A04  6E18               	movwf	drawFastVLine@y,c
  3753  000A06  5037               	movf	fillCircleHelper@x,w,c
  3754  000A08  2437               	addwf	fillCircleHelper@x,w,c
  3755  000A0A  242B               	addwf	fillCircleHelper@delta,w,c
  3756  000A0C  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3757  000A0E  282F               	incf	??_fillCircleHelper,w,c
  3758  000A10  6E19               	movwf	drawFastVLine@h,c
  3759  000A12  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3760  000A16  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3761  000A1A  5039               	movf	fillCircleHelper@y,w,c
  3762  000A1C  0800               	sublw	0
  3763  000A1E  2423               	addwf	fillCircleHelper@x0,w,c
  3764  000A20  ECF3  F007         	call	_drawFastVLine
  3765  000A24  D000               	goto	l3674
  3766  000A26                     l3674:
  3767  000A26  5039               	movf	fillCircleHelper@y,w,c
  3768  000A28  5C37               	subwf	fillCircleHelper@x,w,c
  3769  000A2A  5038               	movf	fillCircleHelper@x+1,w,c
  3770  000A2C  0A80               	xorlw	128
  3771  000A2E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3772  000A30  503A               	movf	fillCircleHelper@y+1,w,c
  3773  000A32  0A80               	xorlw	128
  3774  000A34  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3775  000A36  A0D8               	btfss	status,0,c
  3776  000A38  D78F               	goto	l3654
  3777  000A3A  0012               	return		;funcret
  3778  000A3C                     __end_of_fillCircleHelper:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           intcon2	equ	0xFF1
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           postdec1	equ	0xFE5
  3791                           fsr1l	equ	0xFE1
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function _drawCircle *****************
  3800 ;; Defined at:
  3801 ;;		line 526 in file "ST7735_TFT.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  x0              2   27[COMRAM] int 
  3804 ;;  y0              2   29[COMRAM] int 
  3805 ;;  r               2   31[COMRAM] int 
  3806 ;;  color           2   33[COMRAM] unsigned int 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  y               2   45[COMRAM] int 
  3809 ;;  x               2   43[COMRAM] int 
  3810 ;;  f               2   41[COMRAM] int 
  3811 ;;  ddF_y           2   39[COMRAM] int 
  3812 ;;  ddF_x           2   37[COMRAM] int 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:       20 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    7
  3829 ;; This function calls:
  3830 ;;		_drawPixel
  3831 ;; This function is called by:
  3832 ;;		_main
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text13
  3837  00049A                     __ptext13:
  3838                           	opt stack 0
  3839  00049A                     _drawCircle:
  3840                           	opt stack 23
  3841                           
  3842                           ;ST7735_TFT.c: 528: signed int f, ddF_x, ddF_y, x, y;
  3843                           ;ST7735_TFT.c: 529: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3844                           
  3845                           ;incstack = 0
  3846  00049A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3847  00049E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3848  0004A2  1E24               	comf	??_drawCircle,f,c
  3849  0004A4  1E25               	comf	??_drawCircle+1,f,c
  3850  0004A6  4A24               	infsnz	??_drawCircle,f,c
  3851  0004A8  2A25               	incf	??_drawCircle+1,f,c
  3852  0004AA  0E01               	movlw	1
  3853  0004AC  2424               	addwf	??_drawCircle,w,c
  3854  0004AE  6E2A               	movwf	drawCircle@f,c
  3855  0004B0  0E00               	movlw	0
  3856  0004B2  2025               	addwfc	??_drawCircle+1,w,c
  3857  0004B4  6E2B               	movwf	drawCircle@f+1,c
  3858  0004B6  0E00               	movlw	0
  3859  0004B8  6E27               	movwf	drawCircle@ddF_x+1,c
  3860  0004BA  0E01               	movlw	1
  3861  0004BC  6E26               	movwf	drawCircle@ddF_x,c
  3862  0004BE  C020  F024         	movff	drawCircle@r,??_drawCircle
  3863  0004C2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3864  0004C6  90D8               	bcf	status,0,c
  3865  0004C8  3624               	rlcf	??_drawCircle,f,c
  3866  0004CA  3625               	rlcf	??_drawCircle+1,f,c
  3867  0004CC  1E24               	comf	??_drawCircle,f,c
  3868  0004CE  1E25               	comf	??_drawCircle+1,f,c
  3869  0004D0  4A24               	infsnz	??_drawCircle,f,c
  3870  0004D2  2A25               	incf	??_drawCircle+1,f,c
  3871  0004D4  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3872  0004D8  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3873  0004DC  0E00               	movlw	0
  3874  0004DE  6E2D               	movwf	drawCircle@x+1,c
  3875  0004E0  0E00               	movlw	0
  3876  0004E2  6E2C               	movwf	drawCircle@x,c
  3877  0004E4  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3878  0004E8  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3879                           
  3880                           ;ST7735_TFT.c: 530: drawPixel(x0 , y0 + r, color);
  3881  0004EC  501E               	movf	drawCircle@y0,w,c
  3882  0004EE  2420               	addwf	drawCircle@r,w,c
  3883  0004F0  6E18               	movwf	drawPixel@y,c
  3884  0004F2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3885  0004F6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3886  0004FA  501C               	movf	drawCircle@x0,w,c
  3887  0004FC  EC7E  F00A         	call	_drawPixel
  3888                           
  3889                           ;ST7735_TFT.c: 531: drawPixel(x0 , y0 - r, color);
  3890  000500  5020               	movf	drawCircle@r,w,c
  3891  000502  0800               	sublw	0
  3892  000504  241E               	addwf	drawCircle@y0,w,c
  3893  000506  6E18               	movwf	drawPixel@y,c
  3894  000508  C022  F019         	movff	drawCircle@color,drawPixel@color
  3895  00050C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3896  000510  501C               	movf	drawCircle@x0,w,c
  3897  000512  EC7E  F00A         	call	_drawPixel
  3898                           
  3899                           ;ST7735_TFT.c: 532: drawPixel(x0+r, y0 , color);
  3900  000516  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3901  00051A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3902  00051E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3903  000522  501C               	movf	drawCircle@x0,w,c
  3904  000524  2420               	addwf	drawCircle@r,w,c
  3905  000526  EC7E  F00A         	call	_drawPixel
  3906                           
  3907                           ;ST7735_TFT.c: 533: drawPixel(x0-r, y0 , color);
  3908  00052A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3909  00052E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3910  000532  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3911  000536  5020               	movf	drawCircle@r,w,c
  3912  000538  0800               	sublw	0
  3913  00053A  241C               	addwf	drawCircle@x0,w,c
  3914  00053C  EC7E  F00A         	call	_drawPixel
  3915                           
  3916                           ;ST7735_TFT.c: 534: while (x < y) {
  3917  000540  D078               	goto	l3880
  3918  000542                     l3852:
  3919                           
  3920                           ;ST7735_TFT.c: 535: if (f >= 0) {
  3921  000542  BE2B               	btfsc	drawCircle@f+1,7,c
  3922  000544  D00B               	goto	l368
  3923                           
  3924                           ;ST7735_TFT.c: 536: y--;
  3925  000546  062E               	decf	drawCircle@y,f,c
  3926  000548  A0D8               	btfss	status,0,c
  3927  00054A  062F               	decf	drawCircle@y+1,f,c
  3928                           
  3929                           ;ST7735_TFT.c: 537: ddF_y += 2;
  3930  00054C  0E02               	movlw	2
  3931  00054E  2628               	addwf	drawCircle@ddF_y,f,c
  3932  000550  0E00               	movlw	0
  3933  000552  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3934                           
  3935                           ;ST7735_TFT.c: 538: f += ddF_y;
  3936  000554  5028               	movf	drawCircle@ddF_y,w,c
  3937  000556  262A               	addwf	drawCircle@f,f,c
  3938  000558  5029               	movf	drawCircle@ddF_y+1,w,c
  3939  00055A  222B               	addwfc	drawCircle@f+1,f,c
  3940  00055C                     l368:
  3941                           
  3942                           ;ST7735_TFT.c: 539: }
  3943                           ;ST7735_TFT.c: 540: x++;
  3944  00055C  4A2C               	infsnz	drawCircle@x,f,c
  3945  00055E  2A2D               	incf	drawCircle@x+1,f,c
  3946                           
  3947                           ;ST7735_TFT.c: 541: ddF_x += 2;
  3948  000560  0E02               	movlw	2
  3949  000562  2626               	addwf	drawCircle@ddF_x,f,c
  3950  000564  0E00               	movlw	0
  3951  000566  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3952                           
  3953                           ;ST7735_TFT.c: 542: f += ddF_x;
  3954  000568  5026               	movf	drawCircle@ddF_x,w,c
  3955  00056A  262A               	addwf	drawCircle@f,f,c
  3956  00056C  5027               	movf	drawCircle@ddF_x+1,w,c
  3957  00056E  222B               	addwfc	drawCircle@f+1,f,c
  3958                           
  3959                           ;ST7735_TFT.c: 543: drawPixel(x0 + x, y0 + y, color);
  3960  000570  501E               	movf	drawCircle@y0,w,c
  3961  000572  242E               	addwf	drawCircle@y,w,c
  3962  000574  6E18               	movwf	drawPixel@y,c
  3963  000576  C022  F019         	movff	drawCircle@color,drawPixel@color
  3964  00057A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3965  00057E  501C               	movf	drawCircle@x0,w,c
  3966  000580  242C               	addwf	drawCircle@x,w,c
  3967  000582  EC7E  F00A         	call	_drawPixel
  3968                           
  3969                           ;ST7735_TFT.c: 544: drawPixel(x0 - x, y0 + y, color);
  3970  000586  501E               	movf	drawCircle@y0,w,c
  3971  000588  242E               	addwf	drawCircle@y,w,c
  3972  00058A  6E18               	movwf	drawPixel@y,c
  3973  00058C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3974  000590  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3975  000594  502C               	movf	drawCircle@x,w,c
  3976  000596  0800               	sublw	0
  3977  000598  241C               	addwf	drawCircle@x0,w,c
  3978  00059A  EC7E  F00A         	call	_drawPixel
  3979                           
  3980                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 - y, color);
  3981  00059E  502E               	movf	drawCircle@y,w,c
  3982  0005A0  0800               	sublw	0
  3983  0005A2  241E               	addwf	drawCircle@y0,w,c
  3984  0005A4  6E18               	movwf	drawPixel@y,c
  3985  0005A6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3986  0005AA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3987  0005AE  501C               	movf	drawCircle@x0,w,c
  3988  0005B0  242C               	addwf	drawCircle@x,w,c
  3989  0005B2  EC7E  F00A         	call	_drawPixel
  3990                           
  3991                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 - y, color);
  3992  0005B6  502E               	movf	drawCircle@y,w,c
  3993  0005B8  0800               	sublw	0
  3994  0005BA  241E               	addwf	drawCircle@y0,w,c
  3995  0005BC  6E18               	movwf	drawPixel@y,c
  3996  0005BE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3997  0005C2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3998  0005C6  502C               	movf	drawCircle@x,w,c
  3999  0005C8  0800               	sublw	0
  4000  0005CA  241C               	addwf	drawCircle@x0,w,c
  4001  0005CC  EC7E  F00A         	call	_drawPixel
  4002                           
  4003                           ;ST7735_TFT.c: 547: drawPixel(x0 + y, y0 + x, color);
  4004  0005D0  501E               	movf	drawCircle@y0,w,c
  4005  0005D2  242C               	addwf	drawCircle@x,w,c
  4006  0005D4  6E18               	movwf	drawPixel@y,c
  4007  0005D6  C022  F019         	movff	drawCircle@color,drawPixel@color
  4008  0005DA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4009  0005DE  501C               	movf	drawCircle@x0,w,c
  4010  0005E0  242E               	addwf	drawCircle@y,w,c
  4011  0005E2  EC7E  F00A         	call	_drawPixel
  4012                           
  4013                           ;ST7735_TFT.c: 548: drawPixel(x0 - y, y0 + x, color);
  4014  0005E6  501E               	movf	drawCircle@y0,w,c
  4015  0005E8  242C               	addwf	drawCircle@x,w,c
  4016  0005EA  6E18               	movwf	drawPixel@y,c
  4017  0005EC  C022  F019         	movff	drawCircle@color,drawPixel@color
  4018  0005F0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4019  0005F4  502E               	movf	drawCircle@y,w,c
  4020  0005F6  0800               	sublw	0
  4021  0005F8  241C               	addwf	drawCircle@x0,w,c
  4022  0005FA  EC7E  F00A         	call	_drawPixel
  4023                           
  4024                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 - x, color);
  4025  0005FE  502C               	movf	drawCircle@x,w,c
  4026  000600  0800               	sublw	0
  4027  000602  241E               	addwf	drawCircle@y0,w,c
  4028  000604  6E18               	movwf	drawPixel@y,c
  4029  000606  C022  F019         	movff	drawCircle@color,drawPixel@color
  4030  00060A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4031  00060E  501C               	movf	drawCircle@x0,w,c
  4032  000610  242E               	addwf	drawCircle@y,w,c
  4033  000612  EC7E  F00A         	call	_drawPixel
  4034                           
  4035                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 - x, color);
  4036  000616  502C               	movf	drawCircle@x,w,c
  4037  000618  0800               	sublw	0
  4038  00061A  241E               	addwf	drawCircle@y0,w,c
  4039  00061C  6E18               	movwf	drawPixel@y,c
  4040  00061E  C022  F019         	movff	drawCircle@color,drawPixel@color
  4041  000622  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4042  000626  502E               	movf	drawCircle@y,w,c
  4043  000628  0800               	sublw	0
  4044  00062A  241C               	addwf	drawCircle@x0,w,c
  4045  00062C  EC7E  F00A         	call	_drawPixel
  4046  000630  D000               	goto	l3880
  4047  000632                     l3880:
  4048  000632  502E               	movf	drawCircle@y,w,c
  4049  000634  5C2C               	subwf	drawCircle@x,w,c
  4050  000636  502D               	movf	drawCircle@x+1,w,c
  4051  000638  0A80               	xorlw	128
  4052  00063A  6E24               	movwf	??_drawCircle& (0+255),c
  4053  00063C  502F               	movf	drawCircle@y+1,w,c
  4054  00063E  0A80               	xorlw	128
  4055  000640  5824               	subwfb	??_drawCircle& (0+255),w,c
  4056  000642  A0D8               	btfss	status,0,c
  4057  000644  D77E               	goto	l3852
  4058  000646  0012               	return		;funcret
  4059  000648                     __end_of_drawCircle:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           intcon2	equ	0xFF1
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _Initialize_Screen *****************
  4081 ;; Defined at:
  4082 ;;		line 347 in file "Lab10p1.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;		None               void
  4089 ;; Registers used:
  4090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:   10
  4103 ;; This function calls:
  4104 ;;		_LCD_Reset
  4105 ;;		_TFT_GreenTab_Initialize
  4106 ;;		_drawtext
  4107 ;;		_fillScreen
  4108 ;;		_strcpy
  4109 ;; This function is called by:
  4110 ;;		_main
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text14
  4115  000ECC                     __ptext14:
  4116                           	opt stack 0
  4117  000ECC                     _Initialize_Screen:
  4118                           	opt stack 20
  4119                           
  4120                           ;Lab10p1.c: 349: LCD_Reset();
  4121                           
  4122                           ;incstack = 0
  4123  000ECC  EC0F  F00B         	call	_LCD_Reset	;wreg free
  4124                           
  4125                           ;Lab10p1.c: 350: TFT_GreenTab_Initialize();
  4126  000ED0  EC96  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4127                           
  4128                           ;Lab10p1.c: 351: fillScreen(0x0000);
  4129  000ED4  0E00               	movlw	0
  4130  000ED6  6E25               	movwf	fillScreen@color+1,c
  4131  000ED8  0E00               	movlw	0
  4132  000EDA  6E24               	movwf	fillScreen@color,c
  4133  000EDC  ECE2  F00A         	call	_fillScreen	;wreg free
  4134                           
  4135                           ;Lab10p1.c: 354: txt = buffer;
  4136  000EE0  0EBF               	movlw	low _buffer
  4137  000EE2  6E64               	movwf	_txt,c
  4138  000EE4  0E00               	movlw	high _buffer
  4139  000EE6  6E65               	movwf	_txt+1,c
  4140                           
  4141                           ;Lab10p1.c: 355: strcpy(txt, "ECE3301L Fall 22-S1");
  4142  000EE8  C064  F011         	movff	_txt,strcpy@to
  4143  000EEC  C065  F012         	movff	_txt+1,strcpy@to+1
  4144  000EF0  0ED2               	movlw	low STR_2
  4145  000EF2  6E13               	movwf	strcpy@from,c
  4146  000EF4  0EFF               	movlw	high STR_2
  4147  000EF6  6E14               	movwf	strcpy@from+1,c
  4148  000EF8  EC65  F00A         	call	_strcpy	;wreg free
  4149                           
  4150                           ;Lab10p1.c: 356: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4151  000EFC  0E02               	movlw	2
  4152  000EFE  6E39               	movwf	drawtext@y,c
  4153  000F00  C064  F03A         	movff	_txt,drawtext@_text
  4154  000F04  C065  F03B         	movff	_txt+1,drawtext@_text+1
  4155  000F08  0EFF               	movlw	255
  4156  000F0A  6E3D               	movwf	drawtext@color+1,c
  4157  000F0C  683C               	setf	drawtext@color,c
  4158  000F0E  0E00               	movlw	0
  4159  000F10  6E3F               	movwf	drawtext@bg+1,c
  4160  000F12  0E00               	movlw	0
  4161  000F14  6E3E               	movwf	drawtext@bg,c
  4162  000F16  0E01               	movlw	1
  4163  000F18  6E40               	movwf	drawtext@size,c
  4164  000F1A  0E02               	movlw	2
  4165  000F1C  ECA6  F005         	call	_drawtext
  4166                           
  4167                           ;Lab10p1.c: 358: strcpy(txt, "LAB 10 ");
  4168  000F20  C064  F011         	movff	_txt,strcpy@to
  4169  000F24  C065  F012         	movff	_txt+1,strcpy@to+1
  4170  000F28  0EF7               	movlw	low STR_3
  4171  000F2A  6E13               	movwf	strcpy@from,c
  4172  000F2C  0EFF               	movlw	high STR_3
  4173  000F2E  6E14               	movwf	strcpy@from+1,c
  4174  000F30  EC65  F00A         	call	_strcpy	;wreg free
  4175                           
  4176                           ;Lab10p1.c: 359: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4177  000F34  0E0A               	movlw	10
  4178  000F36  6E39               	movwf	drawtext@y,c
  4179  000F38  C064  F03A         	movff	_txt,drawtext@_text
  4180  000F3C  C065  F03B         	movff	_txt+1,drawtext@_text+1
  4181  000F40  0EFF               	movlw	255
  4182  000F42  6E3D               	movwf	drawtext@color+1,c
  4183  000F44  683C               	setf	drawtext@color,c
  4184  000F46  0E00               	movlw	0
  4185  000F48  6E3F               	movwf	drawtext@bg+1,c
  4186  000F4A  0E00               	movlw	0
  4187  000F4C  6E3E               	movwf	drawtext@bg,c
  4188  000F4E  0E01               	movlw	1
  4189  000F50  6E40               	movwf	drawtext@size,c
  4190  000F52  0E32               	movlw	50
  4191  000F54  ECA6  F005         	call	_drawtext
  4192  000F58  0012               	return		;funcret
  4193  000F5A                     __end_of_Initialize_Screen:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           intcon2	equ	0xFF1
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           postdec1	equ	0xFE5
  4206                           fsr1l	equ	0xFE1
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _strcpy *****************
  4215 ;; Defined at:
  4216 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  to              2   16[COMRAM] PTR unsigned char 
  4219 ;;		 -> NULL(0), buffer(31), 
  4220 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4221 ;;		 -> STR_3(8), STR_2(20), 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4224 ;;		 -> NULL(0), buffer(31), 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2   16[COMRAM] PTR unsigned char 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        6 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    3
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_Initialize_Screen
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text15
  4249  0014CA                     __ptext15:
  4250                           	opt stack 0
  4251  0014CA                     _strcpy:
  4252                           	opt stack 26
  4253                           
  4254                           ;incstack = 0
  4255  0014CA  C011  F015         	movff	strcpy@to,strcpy@cp
  4256  0014CE  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4257  0014D2  D005               	goto	l3642
  4258  0014D4                     l3640:
  4259  0014D4  4A15               	infsnz	strcpy@cp,f,c
  4260  0014D6  2A16               	incf	strcpy@cp+1,f,c
  4261  0014D8  4A13               	infsnz	strcpy@from,f,c
  4262  0014DA  2A14               	incf	strcpy@from+1,f,c
  4263  0014DC  D000               	goto	l3642
  4264  0014DE                     l3642:
  4265  0014DE  C013  FFF6         	movff	strcpy@from,tblptrl
  4266  0014E2  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4267  0014E6                     	if	0	;tblptru may be non-zero
  4268  0014E6                     	endif
  4269  0014E6                     	if	0	;tblptru may be non-zero
  4270  0014E6                     	endif
  4271  0014E6  C015  FFD9         	movff	strcpy@cp,fsr2l
  4272  0014EA  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4273  0014EE  0008               	tblrd		*
  4274  0014F0  CFF5 FFDF          	movff	tablat,indf2
  4275  0014F4  50DF               	movf	indf2,w,c
  4276  0014F6  A4D8               	btfss	status,2,c
  4277  0014F8  D7ED               	goto	l3640
  4278                           
  4279                           ;	Return value of _strcpy is never used
  4280  0014FA  0012               	return		;funcret
  4281  0014FC                     __end_of_strcpy:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           intcon2	equ	0xFF1
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           postdec1	equ	0xFE5
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _fillScreen *****************
  4303 ;; Defined at:
  4304 ;;		line 616 in file "ST7735_TFT.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  color           2   35[COMRAM] unsigned int 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, status,0, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;Total ram usage:        2 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    7
  4325 ;; This function calls:
  4326 ;;		_fillRectangle
  4327 ;; This function is called by:
  4328 ;;		_Initialize_Screen
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text16
  4333  0015C4                     __ptext16:
  4334                           	opt stack 0
  4335  0015C4                     _fillScreen:
  4336                           	opt stack 22
  4337                           
  4338                           ;ST7735_TFT.c: 618: fillRectangle(0, 0, 128, 160, color);
  4339                           
  4340                           ;incstack = 0
  4341  0015C4  0E00               	movlw	0
  4342  0015C6  6E18               	movwf	fillRectangle@y,c
  4343  0015C8  0E80               	movlw	128
  4344  0015CA  6E19               	movwf	fillRectangle@w,c
  4345  0015CC  0EA0               	movlw	160
  4346  0015CE  6E1A               	movwf	fillRectangle@h,c
  4347  0015D0  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4348  0015D4  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4349  0015D8  0E00               	movlw	0
  4350  0015DA  ECA4  F006         	call	_fillRectangle
  4351  0015DE  0012               	return		;funcret
  4352  0015E0                     __end_of_fillScreen:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           prodh	equ	0xFF4
  4359                           prodl	equ	0xFF3
  4360                           intcon	equ	0xFF2
  4361                           intcon2	equ	0xFF1
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postdec1	equ	0xFE5
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           fsr2h	equ	0xFDA
  4370                           fsr2l	equ	0xFD9
  4371                           status	equ	0xFD8
  4372                           
  4373 ;; *************** function _fillRectangle *****************
  4374 ;; Defined at:
  4375 ;;		line 501 in file "ST7735_TFT.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  x               1    wreg     unsigned char 
  4378 ;;  y               1   23[COMRAM] unsigned char 
  4379 ;;  w               1   24[COMRAM] unsigned char 
  4380 ;;  h               1   25[COMRAM] unsigned char 
  4381 ;;  color           2   26[COMRAM] unsigned int 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  x               1   34[COMRAM] unsigned char 
  4384 ;;  lo              1   33[COMRAM] unsigned char 
  4385 ;;  hi              1   32[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;		None               void
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:       12 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    6
  4402 ;; This function calls:
  4403 ;;		_setAddrWindow
  4404 ;;		_spiwrite
  4405 ;; This function is called by:
  4406 ;;		_fillScreen
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text17
  4411  000D48                     __ptext17:
  4412                           	opt stack 0
  4413  000D48                     _fillRectangle:
  4414                           	opt stack 22
  4415                           
  4416                           ;incstack = 0
  4417                           ;fillRectangle@x stored from wreg
  4418  000D48  6E23               	movwf	fillRectangle@x,c
  4419                           
  4420                           ;ST7735_TFT.c: 503: unsigned char hi, lo;
  4421                           ;ST7735_TFT.c: 504: if((x >= 128) || (y >= 160))
  4422  000D4A  0E80               	movlw	128
  4423  000D4C  6023               	cpfslt	fillRectangle@x,c
  4424  000D4E  D069               	goto	l357
  4425  000D50  0E9F               	movlw	159
  4426  000D52  6418               	cpfsgt	fillRectangle@y,c
  4427  000D54  D001               	goto	l3488
  4428                           
  4429                           ;ST7735_TFT.c: 505: return;
  4430  000D56  D065               	goto	l357
  4431  000D58                     l3488:
  4432                           
  4433                           ;ST7735_TFT.c: 506: if((x + w - 1) >= 128)
  4434  000D58  0EFF               	movlw	255
  4435  000D5A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4436  000D5C  0EFF               	movlw	255
  4437  000D5E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4438  000D60  5019               	movf	fillRectangle@w,w,c
  4439  000D62  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4440  000D66  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4441  000D68  261F               	addwf	??_fillRectangle+2,f,c
  4442  000D6A  0E00               	movlw	0
  4443  000D6C  2220               	addwfc	??_fillRectangle+3,f,c
  4444  000D6E  501D               	movf	??_fillRectangle,w,c
  4445  000D70  261F               	addwf	??_fillRectangle+2,f,c
  4446  000D72  501E               	movf	??_fillRectangle+1,w,c
  4447  000D74  2220               	addwfc	??_fillRectangle+3,f,c
  4448  000D76  BE20               	btfsc	??_fillRectangle+3,7,c
  4449  000D78  D00A               	goto	l358
  4450  000D7A  5020               	movf	??_fillRectangle+3,w,c
  4451  000D7C  E104               	bnz	u2400
  4452  000D7E  0E80               	movlw	128
  4453  000D80  5C1F               	subwf	??_fillRectangle+2,w,c
  4454  000D82  A0D8               	btfss	status,0,c
  4455  000D84  D004               	goto	l358
  4456  000D86                     u2400:
  4457                           
  4458                           ;ST7735_TFT.c: 507: w = 128 - x;
  4459  000D86  5023               	movf	fillRectangle@x,w,c
  4460  000D88  0800               	sublw	0
  4461  000D8A  0F80               	addlw	128
  4462  000D8C  6E19               	movwf	fillRectangle@w,c
  4463  000D8E                     l358:
  4464                           
  4465                           ;ST7735_TFT.c: 508: if((y + h - 1) >= 160)
  4466  000D8E  0EFF               	movlw	255
  4467  000D90  6E1D               	movwf	??_fillRectangle& (0+255),c
  4468  000D92  0EFF               	movlw	255
  4469  000D94  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4470  000D96  501A               	movf	fillRectangle@h,w,c
  4471  000D98  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4472  000D9C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4473  000D9E  261F               	addwf	??_fillRectangle+2,f,c
  4474  000DA0  0E00               	movlw	0
  4475  000DA2  2220               	addwfc	??_fillRectangle+3,f,c
  4476  000DA4  501D               	movf	??_fillRectangle,w,c
  4477  000DA6  261F               	addwf	??_fillRectangle+2,f,c
  4478  000DA8  501E               	movf	??_fillRectangle+1,w,c
  4479  000DAA  2220               	addwfc	??_fillRectangle+3,f,c
  4480  000DAC  BE20               	btfsc	??_fillRectangle+3,7,c
  4481  000DAE  D00B               	goto	l3494
  4482  000DB0  5020               	movf	??_fillRectangle+3,w,c
  4483  000DB2  E104               	bnz	u2410
  4484  000DB4  0EA0               	movlw	160
  4485  000DB6  5C1F               	subwf	??_fillRectangle+2,w,c
  4486  000DB8  A0D8               	btfss	status,0,c
  4487  000DBA  D005               	goto	l3494
  4488  000DBC                     u2410:
  4489                           
  4490                           ;ST7735_TFT.c: 509: h = 160 - y;
  4491  000DBC  5018               	movf	fillRectangle@y,w,c
  4492  000DBE  0800               	sublw	0
  4493  000DC0  0FA0               	addlw	160
  4494  000DC2  6E1A               	movwf	fillRectangle@h,c
  4495  000DC4  D000               	goto	l3494
  4496  000DC6                     l3494:
  4497                           
  4498                           ;ST7735_TFT.c: 510: setAddrWindow(x, y, x+w-1, y+h-1);
  4499  000DC6  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4500  000DCA  5023               	movf	fillRectangle@x,w,c
  4501  000DCC  2419               	addwf	fillRectangle@w,w,c
  4502  000DCE  6E1D               	movwf	??_fillRectangle& (0+255),c
  4503  000DD0  041D               	decf	??_fillRectangle,w,c
  4504  000DD2  6E15               	movwf	setAddrWindow@x1,c
  4505  000DD4  5018               	movf	fillRectangle@y,w,c
  4506  000DD6  241A               	addwf	fillRectangle@h,w,c
  4507  000DD8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4508  000DDA  041E               	decf	??_fillRectangle+1,w,c
  4509  000DDC  6E16               	movwf	setAddrWindow@y1,c
  4510  000DDE  5023               	movf	fillRectangle@x,w,c
  4511  000DE0  ECBB  F009         	call	_setAddrWindow
  4512                           
  4513                           ;ST7735_TFT.c: 511: hi = color >> 8; lo = color;
  4514  000DE4  501C               	movf	fillRectangle@color+1,w,c
  4515  000DE6  6E21               	movwf	fillRectangle@hi,c
  4516  000DE8  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4517                           
  4518                           ;ST7735_TFT.c: 512: PORTCbits.RC2 = 1;
  4519  000DEC  8482               	bsf	3970,2,c	;volatile
  4520                           
  4521                           ;ST7735_TFT.c: 513: PORTCbits.RC4 = 0;
  4522  000DEE  9882               	bcf	3970,4,c	;volatile
  4523                           
  4524                           ;ST7735_TFT.c: 515: for(y=h; y>0; y--) {
  4525  000DF0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4526  000DF4                     l3506:
  4527  000DF4  5018               	movf	fillRectangle@y,w,c
  4528  000DF6  B4D8               	btfsc	status,2,c
  4529  000DF8  D013               	goto	l361
  4530  000DFA  D001               	goto	l360
  4531  000DFC  D011               	goto	l361
  4532  000DFE                     l360:
  4533                           
  4534                           ;ST7735_TFT.c: 516: for(x = w; x > 0; x--) {
  4535  000DFE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4536  000E02                     l3510:
  4537  000E02  5023               	movf	fillRectangle@x,w,c
  4538  000E04  B4D8               	btfsc	status,2,c
  4539  000E06  D00A               	goto	l3520
  4540  000E08  D001               	goto	l3514
  4541  000E0A  D008               	goto	l3520
  4542  000E0C                     l3514:
  4543                           
  4544                           ;ST7735_TFT.c: 517: spiwrite(hi);
  4545  000E0C  5021               	movf	fillRectangle@hi,w,c
  4546  000E0E  EC05  F00B         	call	_spiwrite
  4547                           
  4548                           ;ST7735_TFT.c: 518: spiwrite(lo);
  4549  000E12  5022               	movf	fillRectangle@lo,w,c
  4550  000E14  EC05  F00B         	call	_spiwrite
  4551  000E18  0623               	decf	fillRectangle@x,f,c
  4552  000E1A  D7F3               	goto	l3510
  4553  000E1C                     l3520:
  4554  000E1C  0618               	decf	fillRectangle@y,f,c
  4555  000E1E  D7EA               	goto	l3506
  4556  000E20                     l361:
  4557                           
  4558                           ;ST7735_TFT.c: 519: }
  4559                           ;ST7735_TFT.c: 520: }
  4560                           ;ST7735_TFT.c: 521: PORTCbits.RC4 = 1;
  4561  000E20  8882               	bsf	3970,4,c	;volatile
  4562  000E22                     l357:
  4563  000E22  0012               	return		;funcret
  4564  000E24                     __end_of_fillRectangle:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon2	equ	0xFF1
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           indf2	equ	0xFDF
  4579                           postinc2	equ	0xFDE
  4580                           postdec2	equ	0xFDD
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _drawtext *****************
  4586 ;; Defined at:
  4587 ;;		line 473 in file "ST7735_TFT.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  x               1    wreg     unsigned char 
  4590 ;;  y               1   56[COMRAM] unsigned char 
  4591 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4592 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4593 ;;  color           2   59[COMRAM] unsigned int 
  4594 ;;  bg              2   61[COMRAM] unsigned int 
  4595 ;;  size            1   63[COMRAM] unsigned char 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  x               1    0[BANK0 ] unsigned char 
  4598 ;;  i               2    3[BANK0 ] unsigned int 
  4599 ;;  textsize        2    1[BANK0 ] unsigned int 
  4600 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4601 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;		None               void
  4604 ;; Registers used:
  4605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4611 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;Total ram usage:       17 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    9
  4618 ;; This function calls:
  4619 ;;		_drawChar
  4620 ;;		_strlen
  4621 ;; This function is called by:
  4622 ;;		_main
  4623 ;;		_Initialize_Screen
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text18
  4628  000B4C                     __ptext18:
  4629                           	opt stack 0
  4630  000B4C                     _drawtext:
  4631                           	opt stack 21
  4632                           
  4633                           ;incstack = 0
  4634                           ;drawtext@x stored from wreg
  4635  000B4C  0100               	movlb	0	; () banked
  4636  000B4E  6FDE               	movwf	drawtext@x& (0+255),b
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;ST7735_TFT.c: 475: unsigned char cursor_x, cursor_y;
  4640                           ;ST7735_TFT.c: 476: unsigned int textsize, i;
  4641                           ;ST7735_TFT.c: 477: cursor_x = x, cursor_y = y;
  4642  000B50  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4643                           
  4644                           ; BSR set to: 0
  4645  000B54  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;ST7735_TFT.c: 478: textsize = strlen(_text);
  4649  000B58  C03A  F011         	movff	drawtext@_text,strlen@s
  4650  000B5C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4651  000B60  EC27  F00A         	call	_strlen	;wreg free
  4652  000B64  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4653  000B68  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4654                           
  4655                           ;ST7735_TFT.c: 479: for(i = 0; i < textsize; i++){
  4656  000B6C  0E00               	movlw	0
  4657  000B6E  0100               	movlb	0	; () banked
  4658  000B70  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4659  000B72  0E00               	movlw	0
  4660  000B74  6FE1               	movwf	drawtext@i& (0+255),b
  4661  000B76  D064               	goto	l3612
  4662  000B78                     l3586:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;ST7735_TFT.c: 480: if(wrap && ((cursor_x + size * 5) > 128)){
  4666  000B78  5059               	movf	_wrap,w,c
  4667  000B7A  B4D8               	btfsc	status,2,c
  4668  000B7C  D034               	goto	l3602
  4669                           
  4670                           ; BSR set to: 0
  4671  000B7E  5040               	movf	drawtext@size,w,c
  4672  000B80  0D05               	mullw	5
  4673  000B82  0100               	movlb	0	; () banked
  4674  000B84  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4675  000B86  6E41               	movwf	??_drawtext& (0+255),c
  4676  000B88  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4677  000B8A  50F3               	movf	prodl,w,c
  4678  000B8C  2641               	addwf	??_drawtext,f,c
  4679  000B8E  50F4               	movf	prodh,w,c
  4680  000B90  2242               	addwfc	??_drawtext+1,f,c
  4681  000B92  BE42               	btfsc	??_drawtext+1,7,c
  4682  000B94  D028               	goto	l3602
  4683  000B96  5042               	movf	??_drawtext+1,w,c
  4684  000B98  E104               	bnz	u2580
  4685  000B9A  0E81               	movlw	129
  4686  000B9C  5C41               	subwf	??_drawtext,w,c
  4687  000B9E  A0D8               	btfss	status,0,c
  4688  000BA0  D022               	goto	l3602
  4689  000BA2                     u2580:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;ST7735_TFT.c: 481: cursor_x = 0;
  4693  000BA2  0E00               	movlw	0
  4694  000BA4  0100               	movlb	0	; () banked
  4695  000BA6  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;ST7735_TFT.c: 482: cursor_y = cursor_y + size * 7 + 3 ;
  4699  000BA8  5040               	movf	drawtext@size,w,c
  4700  000BAA  0D07               	mullw	7
  4701  000BAC  50F3               	movf	prodl,w,c
  4702  000BAE  0100               	movlb	0	; () banked
  4703  000BB0  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4704  000BB2  0F03               	addlw	3
  4705  000BB4  0100               	movlb	0	; () banked
  4706  000BB6  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;ST7735_TFT.c: 483: if(cursor_y > 160) cursor_y = 160;
  4710  000BB8  0EA0               	movlw	160
  4711  000BBA  0100               	movlb	0	; () banked
  4712  000BBC  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4713  000BBE  D004               	goto	l3598
  4714                           
  4715                           ; BSR set to: 0
  4716  000BC0  0EA0               	movlw	160
  4717  000BC2  0100               	movlb	0	; () banked
  4718  000BC4  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4719  000BC6  D000               	goto	l3598
  4720  000BC8                     l3598:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;ST7735_TFT.c: 484: if(_text[i] == 0x20) goto _skip; }
  4724  000BC8  0100               	movlb	0	; () banked
  4725  000BCA  51E1               	movf	drawtext@i& (0+255),w,b
  4726  000BCC  243A               	addwf	drawtext@_text,w,c
  4727  000BCE  6ED9               	movwf	fsr2l,c
  4728  000BD0  0100               	movlb	0	; () banked
  4729  000BD2  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4730  000BD4  203B               	addwfc	drawtext@_text+1,w,c
  4731  000BD6  6EDA               	movwf	fsr2h,c
  4732  000BD8  0E20               	movlw	32
  4733  000BDA  18DE               	xorwf	postinc2,w,c
  4734  000BDC  B4D8               	btfsc	status,2,c
  4735  000BDE  D02C               	goto	l3610
  4736  000BE0  D002               	goto	l3602
  4737                           
  4738                           ; BSR set to: 0
  4739  000BE2  D02A               	goto	l3610
  4740                           
  4741                           ; BSR set to: 0
  4742  000BE4  D000               	goto	l3602
  4743  000BE6                     l3602:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;ST7735_TFT.c: 485: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4747  000BE6  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4748  000BEA  0100               	movlb	0	; () banked
  4749  000BEC  51E1               	movf	drawtext@i& (0+255),w,b
  4750  000BEE  243A               	addwf	drawtext@_text,w,c
  4751  000BF0  6ED9               	movwf	fsr2l,c
  4752  000BF2  0100               	movlb	0	; () banked
  4753  000BF4  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4754  000BF6  203B               	addwfc	drawtext@_text+1,w,c
  4755  000BF8  6EDA               	movwf	fsr2h,c
  4756  000BFA  50DF               	movf	indf2,w,c
  4757  000BFC  6E2F               	movwf	drawChar@c,c
  4758  000BFE  C03C  F030         	movff	drawtext@color,drawChar@color
  4759  000C02  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4760  000C06  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4761  000C0A  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4762  000C0E  C040  F034         	movff	drawtext@size,drawChar@size
  4763  000C12  0100               	movlb	0	; () banked
  4764  000C14  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4765  000C16  ECD7  F003         	call	_drawChar
  4766                           
  4767                           ;ST7735_TFT.c: 486: cursor_x = cursor_x + size * 6;
  4768  000C1A  5040               	movf	drawtext@size,w,c
  4769  000C1C  0D06               	mullw	6
  4770  000C1E  50F3               	movf	prodl,w,c
  4771  000C20  0100               	movlb	0	; () banked
  4772  000C22  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4773  000C24  0100               	movlb	0	; () banked
  4774  000C26  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;ST7735_TFT.c: 487: if(cursor_x > 128) cursor_x = 128;
  4778  000C28  0E80               	movlw	128
  4779  000C2A  0100               	movlb	0	; () banked
  4780  000C2C  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4781  000C2E  D004               	goto	l3610
  4782                           
  4783                           ; BSR set to: 0
  4784  000C30  0E80               	movlw	128
  4785  000C32  0100               	movlb	0	; () banked
  4786  000C34  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789  000C36  D000               	goto	l3610
  4790  000C38                     l3610:
  4791                           
  4792                           ; BSR set to: 0
  4793  000C38  0100               	movlb	0	; () banked
  4794  000C3A  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4795  000C3C  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4796  000C3E  D000               	goto	l3612
  4797  000C40                     l3612:
  4798                           
  4799                           ; BSR set to: 0
  4800  000C40  0100               	movlb	0	; () banked
  4801  000C42  51DF               	movf	drawtext@textsize& (0+255),w,b
  4802  000C44  0100               	movlb	0	; () banked
  4803  000C46  5DE1               	subwf	drawtext@i& (0+255),w,b
  4804  000C48  0100               	movlb	0	; () banked
  4805  000C4A  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4806  000C4C  0100               	movlb	0	; () banked
  4807  000C4E  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4808  000C50  A0D8               	btfss	status,0,c
  4809  000C52  D792               	goto	l3586
  4810                           
  4811                           ; BSR set to: 0
  4812                           
  4813                           ; BSR set to: 0
  4814  000C54  0012               	return		;funcret
  4815  000C56                     __end_of_drawtext:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           intcon	equ	0xFF2
  4824                           intcon2	equ	0xFF1
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           postdec1	equ	0xFE5
  4828                           fsr1l	equ	0xFE1
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _strlen *****************
  4837 ;; Defined at:
  4838 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4841 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4844 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  2   16[COMRAM] unsigned int 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        6 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    3
  4861 ;; This function calls:
  4862 ;;		Nothing
  4863 ;; This function is called by:
  4864 ;;		_drawtext
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text19
  4869  00144E                     __ptext19:
  4870                           	opt stack 0
  4871  00144E                     _strlen:
  4872                           	opt stack 26
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  00144E  C011  F015         	movff	strlen@s,strlen@cp
  4877  001452  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4878  001456  D003               	goto	l3478
  4879  001458                     l3476:
  4880  001458  4A15               	infsnz	strlen@cp,f,c
  4881  00145A  2A16               	incf	strlen@cp+1,f,c
  4882  00145C  D000               	goto	l3478
  4883  00145E                     l3478:
  4884  00145E  C015  FFD9         	movff	strlen@cp,fsr2l
  4885  001462  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4886  001466  50DF               	movf	indf2,w,c
  4887  001468  A4D8               	btfss	status,2,c
  4888  00146A  D7F6               	goto	l3476
  4889  00146C  C011  F013         	movff	strlen@s,??_strlen
  4890  001470  C012  F014         	movff	strlen@s+1,??_strlen+1
  4891  001474  1E13               	comf	??_strlen,f,c
  4892  001476  1E14               	comf	??_strlen+1,f,c
  4893  001478  4A13               	infsnz	??_strlen,f,c
  4894  00147A  2A14               	incf	??_strlen+1,f,c
  4895  00147C  5015               	movf	strlen@cp,w,c
  4896  00147E  2413               	addwf	??_strlen,w,c
  4897  001480  6E11               	movwf	?_strlen,c
  4898  001482  5016               	movf	strlen@cp+1,w,c
  4899  001484  2014               	addwfc	??_strlen+1,w,c
  4900  001486  6E12               	movwf	?_strlen+1,c
  4901  001488  D000               	goto	l1068
  4902  00148A                     l1068:
  4903  00148A  0012               	return		;funcret
  4904  00148C                     __end_of_strlen:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           intcon	equ	0xFF2
  4913                           intcon2	equ	0xFF1
  4914                           postinc0	equ	0xFEE
  4915                           wreg	equ	0xFE8
  4916                           postdec1	equ	0xFE5
  4917                           fsr1l	equ	0xFE1
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _drawChar *****************
  4926 ;; Defined at:
  4927 ;;		line 446 in file "ST7735_TFT.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  x               1    wreg     unsigned char 
  4930 ;;  y               1   45[COMRAM] unsigned char 
  4931 ;;  c               1   46[COMRAM] unsigned char 
  4932 ;;  color           2   47[COMRAM] unsigned int 
  4933 ;;  bg              2   49[COMRAM] unsigned int 
  4934 ;;  size            1   51[COMRAM] unsigned char 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  x               1   53[COMRAM] unsigned char 
  4937 ;;  line            1   52[COMRAM] unsigned char 
  4938 ;;  i               1   55[COMRAM] unsigned char 
  4939 ;;  j               1   54[COMRAM] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;		None               void
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4949 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;Total ram usage:       11 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    8
  4956 ;; This function calls:
  4957 ;;		___wmul
  4958 ;;		_drawPixel
  4959 ;;		_fillRect
  4960 ;; This function is called by:
  4961 ;;		_drawtext
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text20
  4966  0007AE                     __ptext20:
  4967                           	opt stack 0
  4968  0007AE                     _drawChar:
  4969                           	opt stack 21
  4970                           
  4971                           ;incstack = 0
  4972                           ;drawChar@x stored from wreg
  4973  0007AE  6E36               	movwf	drawChar@x,c
  4974                           
  4975                           ;ST7735_TFT.c: 448: char i, j;
  4976                           ;ST7735_TFT.c: 449: if((x >= 128) || (y >= 160))
  4977  0007B0  0E80               	movlw	128
  4978  0007B2  6036               	cpfslt	drawChar@x,c
  4979  0007B4  D0A6               	goto	l320
  4980  0007B6  0E9F               	movlw	159
  4981  0007B8  642E               	cpfsgt	drawChar@y,c
  4982  0007BA  D001               	goto	l3424
  4983                           
  4984                           ;ST7735_TFT.c: 450: return;
  4985  0007BC  D0A2               	goto	l320
  4986  0007BE                     l3424:
  4987                           
  4988                           ;ST7735_TFT.c: 451: if(size < 1) size = 1;
  4989  0007BE  5034               	movf	drawChar@size,w,c
  4990  0007C0  A4D8               	btfss	status,2,c
  4991  0007C2  D003               	goto	l3428
  4992  0007C4  0E01               	movlw	1
  4993  0007C6  6E34               	movwf	drawChar@size,c
  4994  0007C8  D000               	goto	l3428
  4995  0007CA                     l3428:
  4996                           
  4997                           ;ST7735_TFT.c: 452: if((c < ' ') || (c > '~'))
  4998  0007CA  0E1F               	movlw	31
  4999  0007CC  642F               	cpfsgt	drawChar@c,c
  5000  0007CE  D004               	goto	l3432
  5001  0007D0  0E7E               	movlw	126
  5002  0007D2  642F               	cpfsgt	drawChar@c,c
  5003  0007D4  D003               	goto	l322
  5004  0007D6  D000               	goto	l3432
  5005  0007D8                     l3432:
  5006                           
  5007                           ;ST7735_TFT.c: 453: c = '?';
  5008  0007D8  0E3F               	movlw	63
  5009  0007DA  6E2F               	movwf	drawChar@c,c
  5010  0007DC                     l322:
  5011                           
  5012                           ;ST7735_TFT.c: 454: for(i=0; i<5; i++ ) {
  5013  0007DC  0E00               	movlw	0
  5014  0007DE  6E38               	movwf	drawChar@i,c
  5015  0007E0                     l3434:
  5016  0007E0  0E04               	movlw	4
  5017  0007E2  6438               	cpfsgt	drawChar@i,c
  5018  0007E4  D001               	goto	l3438
  5019  0007E6  D08D               	goto	l320
  5020  0007E8                     l3438:
  5021                           
  5022                           ;ST7735_TFT.c: 455: unsigned char line;
  5023                           ;ST7735_TFT.c: 456: if(c < 'S')
  5024  0007E8  0E53               	movlw	83
  5025  0007EA  602F               	cpfslt	drawChar@c,c
  5026  0007EC  D015               	goto	l3442
  5027                           
  5028                           ;ST7735_TFT.c: 457: line = font[(c - 32)*5 + i];
  5029  0007EE  0EE0               	movlw	224
  5030  0007F0  242F               	addwf	drawChar@c,w,c
  5031  0007F2  6E11               	movwf	___wmul@multiplier,c
  5032  0007F4  6A12               	clrf	___wmul@multiplier+1,c
  5033  0007F6  0EFF               	movlw	255
  5034  0007F8  2212               	addwfc	___wmul@multiplier+1,f,c
  5035  0007FA  0E00               	movlw	0
  5036  0007FC  6E14               	movwf	___wmul@multiplicand+1,c
  5037  0007FE  0E05               	movlw	5
  5038  000800  6E13               	movwf	___wmul@multiplicand,c
  5039  000802  ECAB  F00A         	call	___wmul	;wreg free
  5040  000806  5038               	movf	drawChar@i,w,c
  5041  000808  2611               	addwf	?___wmul,f,c
  5042  00080A  0E00               	movlw	0
  5043  00080C  2212               	addwfc	?___wmul+1,f,c
  5044  00080E  0EC1               	movlw	low _font
  5045  000810  2411               	addwf	?___wmul,w,c
  5046  000812  6EF6               	movwf	tblptrl,c
  5047  000814  0EFD               	movlw	high _font
  5048  000816  D014               	goto	L14
  5049  000818                     l3442:
  5050                           
  5051                           ;ST7735_TFT.c: 458: else
  5052                           ;ST7735_TFT.c: 459: line = font2[(c - 'S')*5 + i];
  5053  000818  0EAD               	movlw	173
  5054  00081A  242F               	addwf	drawChar@c,w,c
  5055  00081C  6E11               	movwf	___wmul@multiplier,c
  5056  00081E  6A12               	clrf	___wmul@multiplier+1,c
  5057  000820  0EFF               	movlw	255
  5058  000822  2212               	addwfc	___wmul@multiplier+1,f,c
  5059  000824  0E00               	movlw	0
  5060  000826  6E14               	movwf	___wmul@multiplicand+1,c
  5061  000828  0E05               	movlw	5
  5062  00082A  6E13               	movwf	___wmul@multiplicand,c
  5063  00082C  ECAB  F00A         	call	___wmul	;wreg free
  5064  000830  5038               	movf	drawChar@i,w,c
  5065  000832  2611               	addwf	?___wmul,f,c
  5066  000834  0E00               	movlw	0
  5067  000836  2212               	addwfc	?___wmul+1,f,c
  5068  000838  0EC0               	movlw	low _font2
  5069  00083A  2411               	addwf	?___wmul,w,c
  5070  00083C  6EF6               	movwf	tblptrl,c
  5071  00083E  0EFE               	movlw	high _font2
  5072  000840                     L14:
  5073  000840  2012               	addwfc	?___wmul+1,w,c
  5074  000842  6EF7               	movwf	tblptrh,c
  5075  000844                     	if	0	;There are less than 3 active tblptr bytes
  5076  000844                     	endif
  5077  000844  0008               	tblrd		*
  5078  000846  CFF5 F035          	movff	tablat,drawChar@line
  5079  00084A  D000               	goto	l3444
  5080  00084C                     l3444:
  5081                           
  5082                           ;ST7735_TFT.c: 460: for(j=0; j<7; j++, line >>= 1) {
  5083  00084C  0E00               	movlw	0
  5084  00084E  6E37               	movwf	drawChar@j,c
  5085  000850                     l3446:
  5086  000850  0E06               	movlw	6
  5087  000852  6437               	cpfsgt	drawChar@j,c
  5088  000854  D001               	goto	l329
  5089  000856  D053               	goto	l3470
  5090  000858                     l329:
  5091                           
  5092                           ;ST7735_TFT.c: 461: if(line & 0x01) {
  5093  000858  A035               	btfss	drawChar@line,0,c
  5094  00085A  D023               	goto	l3456
  5095                           
  5096                           ;ST7735_TFT.c: 462: if(size == 1) drawPixel(x+i, y+j, color);
  5097  00085C  0434               	decf	drawChar@size,w,c
  5098  00085E  A4D8               	btfss	status,2,c
  5099  000860  D00C               	goto	l3454
  5100  000862  502E               	movf	drawChar@y,w,c
  5101  000864  2437               	addwf	drawChar@j,w,c
  5102  000866  6E18               	movwf	drawPixel@y,c
  5103  000868  C030  F019         	movff	drawChar@color,drawPixel@color
  5104  00086C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5105  000870  5036               	movf	drawChar@x,w,c
  5106  000872  2438               	addwf	drawChar@i,w,c
  5107  000874  EC7E  F00A         	call	_drawPixel
  5108  000878  D03E               	goto	l3464
  5109  00087A                     l3454:
  5110                           
  5111                           ;ST7735_TFT.c: 463: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5112  00087A  5037               	movf	drawChar@j,w,c
  5113  00087C  0234               	mulwf	drawChar@size,c
  5114  00087E  50F3               	movf	prodl,w,c
  5115  000880  242E               	addwf	drawChar@y,w,c
  5116  000882  6E23               	movwf	fillRect@y,c
  5117  000884  C034  F024         	movff	drawChar@size,fillRect@w
  5118  000888  C034  F025         	movff	drawChar@size,fillRect@h
  5119  00088C  C030  F026         	movff	drawChar@color,fillRect@color
  5120  000890  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5121  000894  5038               	movf	drawChar@i,w,c
  5122  000896  0234               	mulwf	drawChar@size,c
  5123  000898  50F3               	movf	prodl,w,c
  5124  00089A  2436               	addwf	drawChar@x,w,c
  5125  00089C  ECE2  F009         	call	_fillRect
  5126                           
  5127                           ;ST7735_TFT.c: 464: }
  5128  0008A0  D02A               	goto	l3464
  5129  0008A2                     l3456:
  5130                           
  5131                           ;ST7735_TFT.c: 465: else if(bg != color) {
  5132  0008A2  5030               	movf	drawChar@color,w,c
  5133  0008A4  1832               	xorwf	drawChar@bg,w,c
  5134  0008A6  E104               	bnz	u2330
  5135  0008A8  5031               	movf	drawChar@color+1,w,c
  5136  0008AA  1833               	xorwf	drawChar@bg+1,w,c
  5137  0008AC  B4D8               	btfsc	status,2,c
  5138  0008AE  D023               	goto	l3464
  5139  0008B0                     u2330:
  5140                           
  5141                           ;ST7735_TFT.c: 466: if(size == 1) drawPixel(x+i, y+j, bg);
  5142  0008B0  0434               	decf	drawChar@size,w,c
  5143  0008B2  A4D8               	btfss	status,2,c
  5144  0008B4  D00C               	goto	l3462
  5145  0008B6  502E               	movf	drawChar@y,w,c
  5146  0008B8  2437               	addwf	drawChar@j,w,c
  5147  0008BA  6E18               	movwf	drawPixel@y,c
  5148  0008BC  C032  F019         	movff	drawChar@bg,drawPixel@color
  5149  0008C0  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5150  0008C4  5036               	movf	drawChar@x,w,c
  5151  0008C6  2438               	addwf	drawChar@i,w,c
  5152  0008C8  EC7E  F00A         	call	_drawPixel
  5153  0008CC  D014               	goto	l3464
  5154  0008CE                     l3462:
  5155                           
  5156                           ;ST7735_TFT.c: 467: else fillRect(x+i*size, y+j*size, size, size, bg);
  5157  0008CE  5037               	movf	drawChar@j,w,c
  5158  0008D0  0234               	mulwf	drawChar@size,c
  5159  0008D2  50F3               	movf	prodl,w,c
  5160  0008D4  242E               	addwf	drawChar@y,w,c
  5161  0008D6  6E23               	movwf	fillRect@y,c
  5162  0008D8  C034  F024         	movff	drawChar@size,fillRect@w
  5163  0008DC  C034  F025         	movff	drawChar@size,fillRect@h
  5164  0008E0  C032  F026         	movff	drawChar@bg,fillRect@color
  5165  0008E4  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5166  0008E8  5038               	movf	drawChar@i,w,c
  5167  0008EA  0234               	mulwf	drawChar@size,c
  5168  0008EC  50F3               	movf	prodl,w,c
  5169  0008EE  2436               	addwf	drawChar@x,w,c
  5170  0008F0  ECE2  F009         	call	_fillRect
  5171  0008F4  D000               	goto	l3464
  5172  0008F6                     l3464:
  5173  0008F6  2A37               	incf	drawChar@j,f,c
  5174  0008F8  90D8               	bcf	status,0,c
  5175  0008FA  3235               	rrcf	drawChar@line,f,c
  5176  0008FC  D7A9               	goto	l3446
  5177  0008FE                     l3470:
  5178  0008FE  2A38               	incf	drawChar@i,f,c
  5179  000900  D76F               	goto	l3434
  5180  000902                     l320:
  5181  000902  0012               	return		;funcret
  5182  000904                     __end_of_drawChar:
  5183                           	opt stack 0
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           intcon2	equ	0xFF1
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _fillRect *****************
  5204 ;; Defined at:
  5205 ;;		line 436 in file "ST7735_TFT.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  x               1    wreg     unsigned char 
  5208 ;;  y               1   34[COMRAM] unsigned char 
  5209 ;;  w               1   35[COMRAM] unsigned char 
  5210 ;;  h               1   36[COMRAM] unsigned char 
  5211 ;;  color           2   37[COMRAM] unsigned int 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  x               1   42[COMRAM] unsigned char 
  5214 ;;  i               2   43[COMRAM] int 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5224 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;Total ram usage:       11 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    7
  5231 ;; This function calls:
  5232 ;;		_drawFastVLine
  5233 ;; This function is called by:
  5234 ;;		_drawChar
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text21
  5239  0013C4                     __ptext21:
  5240                           	opt stack 0
  5241  0013C4                     _fillRect:
  5242                           	opt stack 21
  5243                           
  5244                           ;incstack = 0
  5245                           ;fillRect@x stored from wreg
  5246  0013C4  6E2B               	movwf	fillRect@x,c
  5247                           
  5248                           ;ST7735_TFT.c: 438: signed int i;
  5249                           ;ST7735_TFT.c: 440: for (i = x; i < x + w; i++)
  5250  0013C6  C02B  F02C         	movff	fillRect@x,fillRect@i
  5251  0013CA  6A2D               	clrf	fillRect@i+1,c
  5252  0013CC  D00E               	goto	l3326
  5253  0013CE                     l3322:
  5254                           
  5255                           ;ST7735_TFT.c: 441: {
  5256                           ;ST7735_TFT.c: 442: drawFastVLine(i, y, h, color);
  5257  0013CE  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5258  0013D2  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5259  0013D6  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5260  0013DA  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5261  0013DE  502C               	movf	fillRect@i,w,c
  5262  0013E0  ECF3  F007         	call	_drawFastVLine
  5263  0013E4  4A2C               	infsnz	fillRect@i,f,c
  5264  0013E6  2A2D               	incf	fillRect@i+1,f,c
  5265  0013E8  D000               	goto	l3326
  5266  0013EA                     l3326:
  5267  0013EA  5024               	movf	fillRect@w,w,c
  5268  0013EC  C02B  F028         	movff	fillRect@x,??_fillRect
  5269  0013F0  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5270  0013F2  2628               	addwf	??_fillRect,f,c
  5271  0013F4  0E00               	movlw	0
  5272  0013F6  2229               	addwfc	??_fillRect+1,f,c
  5273  0013F8  5028               	movf	??_fillRect,w,c
  5274  0013FA  5C2C               	subwf	fillRect@i,w,c
  5275  0013FC  502D               	movf	fillRect@i+1,w,c
  5276  0013FE  0A80               	xorlw	128
  5277  001400  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5278  001402  5029               	movf	??_fillRect+1,w,c
  5279  001404  0A80               	xorlw	128
  5280  001406  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5281  001408  A0D8               	btfss	status,0,c
  5282  00140A  D7E1               	goto	l3322
  5283  00140C  0012               	return		;funcret
  5284  00140E                     __end_of_fillRect:
  5285                           	opt stack 0
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           intcon2	equ	0xFF1
  5294                           postinc0	equ	0xFEE
  5295                           wreg	equ	0xFE8
  5296                           postdec1	equ	0xFE5
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           postdec2	equ	0xFDD
  5301                           fsr2h	equ	0xFDA
  5302                           fsr2l	equ	0xFD9
  5303                           status	equ	0xFD8
  5304                           
  5305 ;; *************** function _drawFastVLine *****************
  5306 ;; Defined at:
  5307 ;;		line 415 in file "ST7735_TFT.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  x               1    wreg     unsigned char 
  5310 ;;  y               1   23[COMRAM] unsigned char 
  5311 ;;  h               1   24[COMRAM] unsigned char 
  5312 ;;  color           2   25[COMRAM] unsigned int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  x               1   33[COMRAM] unsigned char 
  5315 ;;  lo              1   32[COMRAM] unsigned char 
  5316 ;;  hi              1   31[COMRAM] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;Total ram usage:       11 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    6
  5333 ;; This function calls:
  5334 ;;		_setAddrWindow
  5335 ;;		_spiwrite
  5336 ;; This function is called by:
  5337 ;;		_fillRect
  5338 ;;		_fillCircleHelper
  5339 ;;		_fillCircle
  5340 ;;		_drawRect
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text22
  5345  000FE6                     __ptext22:
  5346                           	opt stack 0
  5347  000FE6                     _drawFastVLine:
  5348                           	opt stack 22
  5349                           
  5350                           ;incstack = 0
  5351                           ;drawFastVLine@x stored from wreg
  5352  000FE6  6E22               	movwf	drawFastVLine@x,c
  5353                           
  5354                           ;ST7735_TFT.c: 417: unsigned char hi, lo;
  5355                           ;ST7735_TFT.c: 418: if((x >= 128) || (y >= 160))
  5356  000FE8  0E80               	movlw	128
  5357  000FEA  6022               	cpfslt	drawFastVLine@x,c
  5358  000FEC  D03F               	goto	l304
  5359  000FEE  0E9F               	movlw	159
  5360  000FF0  6418               	cpfsgt	drawFastVLine@y,c
  5361  000FF2  D001               	goto	l3272
  5362                           
  5363                           ;ST7735_TFT.c: 419: return;
  5364  000FF4  D03B               	goto	l304
  5365  000FF6                     l3272:
  5366                           
  5367                           ;ST7735_TFT.c: 420: if((y + h - 1) >= 160)
  5368  000FF6  0EFF               	movlw	255
  5369  000FF8  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5370  000FFA  0EFF               	movlw	255
  5371  000FFC  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5372  000FFE  5019               	movf	drawFastVLine@h,w,c
  5373  001000  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5374  001004  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5375  001006  261E               	addwf	??_drawFastVLine+2,f,c
  5376  001008  0E00               	movlw	0
  5377  00100A  221F               	addwfc	??_drawFastVLine+3,f,c
  5378  00100C  501C               	movf	??_drawFastVLine,w,c
  5379  00100E  261E               	addwf	??_drawFastVLine+2,f,c
  5380  001010  501D               	movf	??_drawFastVLine+1,w,c
  5381  001012  221F               	addwfc	??_drawFastVLine+3,f,c
  5382  001014  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5383  001016  D00B               	goto	l3276
  5384  001018  501F               	movf	??_drawFastVLine+3,w,c
  5385  00101A  E104               	bnz	u2170
  5386  00101C  0EA0               	movlw	160
  5387  00101E  5C1E               	subwf	??_drawFastVLine+2,w,c
  5388  001020  A0D8               	btfss	status,0,c
  5389  001022  D005               	goto	l3276
  5390  001024                     u2170:
  5391                           
  5392                           ;ST7735_TFT.c: 421: h = 160 - y;
  5393  001024  5018               	movf	drawFastVLine@y,w,c
  5394  001026  0800               	sublw	0
  5395  001028  0FA0               	addlw	160
  5396  00102A  6E19               	movwf	drawFastVLine@h,c
  5397  00102C  D000               	goto	l3276
  5398  00102E                     l3276:
  5399                           
  5400                           ;ST7735_TFT.c: 422: hi = color >> 8; lo = color;
  5401  00102E  501B               	movf	drawFastVLine@color+1,w,c
  5402  001030  6E20               	movwf	drawFastVLine@hi,c
  5403  001032  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5404                           
  5405                           ;ST7735_TFT.c: 423: setAddrWindow(x, y, x, y + h - 1);
  5406  001036  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5407  00103A  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5408  00103E  5018               	movf	drawFastVLine@y,w,c
  5409  001040  2419               	addwf	drawFastVLine@h,w,c
  5410  001042  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5411  001044  041C               	decf	??_drawFastVLine,w,c
  5412  001046  6E16               	movwf	setAddrWindow@y1,c
  5413  001048  5022               	movf	drawFastVLine@x,w,c
  5414  00104A  ECBB  F009         	call	_setAddrWindow
  5415                           
  5416                           ;ST7735_TFT.c: 424: PORTCbits.RC2 = 1;
  5417  00104E  8482               	bsf	3970,2,c	;volatile
  5418                           
  5419                           ;ST7735_TFT.c: 425: PORTCbits.RC4 = 0;
  5420  001050  9882               	bcf	3970,4,c	;volatile
  5421                           
  5422                           ;ST7735_TFT.c: 427: while (h--) {
  5423  001052  D007               	goto	l3288
  5424  001054                     l3286:
  5425                           
  5426                           ;ST7735_TFT.c: 428: spiwrite(hi);
  5427  001054  5020               	movf	drawFastVLine@hi,w,c
  5428  001056  EC05  F00B         	call	_spiwrite
  5429                           
  5430                           ;ST7735_TFT.c: 429: spiwrite(lo);
  5431  00105A  5021               	movf	drawFastVLine@lo,w,c
  5432  00105C  EC05  F00B         	call	_spiwrite
  5433  001060  D000               	goto	l3288
  5434  001062                     l3288:
  5435  001062  0619               	decf	drawFastVLine@h,f,c
  5436  001064  2819               	incf	drawFastVLine@h,w,c
  5437  001066  A4D8               	btfss	status,2,c
  5438  001068  D7F5               	goto	l3286
  5439                           
  5440                           ;ST7735_TFT.c: 430: }
  5441                           ;ST7735_TFT.c: 431: PORTCbits.RC4 = 1;
  5442  00106A  8882               	bsf	3970,4,c	;volatile
  5443  00106C                     l304:
  5444  00106C  0012               	return		;funcret
  5445  00106E                     __end_of_drawFastVLine:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           intcon2	equ	0xFF1
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           postinc2	equ	0xFDE
  5461                           postdec2	equ	0xFDD
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function _drawPixel *****************
  5467 ;; Defined at:
  5468 ;;		line 406 in file "ST7735_TFT.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  x               1    wreg     unsigned char 
  5471 ;;  y               1   23[COMRAM] unsigned char 
  5472 ;;  color           2   24[COMRAM] unsigned int 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  x               1   26[COMRAM] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;		None               void
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5484 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;Total ram usage:        4 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    6
  5491 ;; This function calls:
  5492 ;;		_setAddrWindow
  5493 ;;		_write_data
  5494 ;; This function is called by:
  5495 ;;		_drawChar
  5496 ;;		_drawCircle
  5497 ;;		_drawCircleHelper
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text23
  5502  0014FC                     __ptext23:
  5503                           	opt stack 0
  5504  0014FC                     _drawPixel:
  5505                           	opt stack 22
  5506                           
  5507                           ;incstack = 0
  5508                           ;drawPixel@x stored from wreg
  5509  0014FC  6E1B               	movwf	drawPixel@x,c
  5510                           
  5511                           ;ST7735_TFT.c: 408: if((x >= 128) || (y >= 160))
  5512  0014FE  0E80               	movlw	128
  5513  001500  601B               	cpfslt	drawPixel@x,c
  5514  001502  D013               	goto	l298
  5515  001504  0E9F               	movlw	159
  5516  001506  6418               	cpfsgt	drawPixel@y,c
  5517  001508  D001               	goto	l3314
  5518                           
  5519                           ;ST7735_TFT.c: 409: return;
  5520  00150A  D00F               	goto	l298
  5521  00150C                     l3314:
  5522                           
  5523                           ;ST7735_TFT.c: 410: setAddrWindow(x,y,x+1,y+1);
  5524  00150C  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5525  001510  281B               	incf	drawPixel@x,w,c
  5526  001512  6E15               	movwf	setAddrWindow@x1,c
  5527  001514  2818               	incf	drawPixel@y,w,c
  5528  001516  6E16               	movwf	setAddrWindow@y1,c
  5529  001518  501B               	movf	drawPixel@x,w,c
  5530  00151A  ECBB  F009         	call	_setAddrWindow
  5531                           
  5532                           ;ST7735_TFT.c: 411: write_data(color >> 8);
  5533  00151E  501A               	movf	drawPixel@color+1,w,c
  5534  001520  EC21  F00B         	call	_write_data
  5535                           
  5536                           ;ST7735_TFT.c: 412: write_data(color & 0xFF);
  5537  001524  5019               	movf	drawPixel@color,w,c
  5538  001526  EC21  F00B         	call	_write_data
  5539  00152A                     l298:
  5540  00152A  0012               	return		;funcret
  5541  00152C                     __end_of_drawPixel:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           intcon2	equ	0xFF1
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _setAddrWindow *****************
  5563 ;; Defined at:
  5564 ;;		line 391 in file "ST7735_TFT.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  x0              1    wreg     unsigned char 
  5567 ;;  y0              1   19[COMRAM] unsigned char 
  5568 ;;  x1              1   20[COMRAM] unsigned char 
  5569 ;;  y1              1   21[COMRAM] unsigned char 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  x0              1   22[COMRAM] unsigned char 
  5572 ;; Return value:  Size  Location     Type
  5573 ;;		None               void
  5574 ;; Registers used:
  5575 ;;		wreg, status,2, status,0, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5581 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;Total ram usage:        4 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    5
  5588 ;; This function calls:
  5589 ;;		_write_command
  5590 ;;		_write_data
  5591 ;; This function is called by:
  5592 ;;		_drawPixel
  5593 ;;		_drawFastVLine
  5594 ;;		_fillRectangle
  5595 ;;		_drawFastHLine
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text24
  5600  001376                     __ptext24:
  5601                           	opt stack 0
  5602  001376                     _setAddrWindow:
  5603                           	opt stack 22
  5604                           
  5605                           ;incstack = 0
  5606                           ;setAddrWindow@x0 stored from wreg
  5607  001376  6E17               	movwf	setAddrWindow@x0,c
  5608                           
  5609                           ;ST7735_TFT.c: 393: write_command(0x2A);
  5610  001378  0E2A               	movlw	42
  5611  00137A  EC29  F00B         	call	_write_command
  5612                           
  5613                           ;ST7735_TFT.c: 394: write_data(0);
  5614  00137E  0E00               	movlw	0
  5615  001380  EC21  F00B         	call	_write_data
  5616                           
  5617                           ;ST7735_TFT.c: 395: write_data(x0 + colstart);
  5618  001384  5017               	movf	setAddrWindow@x0,w,c
  5619  001386  246A               	addwf	_colstart,w,c
  5620  001388  EC21  F00B         	call	_write_data
  5621                           
  5622                           ;ST7735_TFT.c: 396: write_data(0);
  5623  00138C  0E00               	movlw	0
  5624  00138E  EC21  F00B         	call	_write_data
  5625                           
  5626                           ;ST7735_TFT.c: 397: write_data(x1 + colstart);
  5627  001392  5015               	movf	setAddrWindow@x1,w,c
  5628  001394  246A               	addwf	_colstart,w,c
  5629  001396  EC21  F00B         	call	_write_data
  5630                           
  5631                           ;ST7735_TFT.c: 398: write_command(0x2B);
  5632  00139A  0E2B               	movlw	43
  5633  00139C  EC29  F00B         	call	_write_command
  5634                           
  5635                           ;ST7735_TFT.c: 399: write_data(0);
  5636  0013A0  0E00               	movlw	0
  5637  0013A2  EC21  F00B         	call	_write_data
  5638                           
  5639                           ;ST7735_TFT.c: 400: write_data(y0 + rowstart);
  5640  0013A6  5014               	movf	setAddrWindow@y0,w,c
  5641  0013A8  246C               	addwf	_rowstart,w,c
  5642  0013AA  EC21  F00B         	call	_write_data
  5643                           
  5644                           ;ST7735_TFT.c: 401: write_data(0);
  5645  0013AE  0E00               	movlw	0
  5646  0013B0  EC21  F00B         	call	_write_data
  5647                           
  5648                           ;ST7735_TFT.c: 402: write_data(y1 + rowstart);
  5649  0013B4  5016               	movf	setAddrWindow@y1,w,c
  5650  0013B6  246C               	addwf	_rowstart,w,c
  5651  0013B8  EC21  F00B         	call	_write_data
  5652                           
  5653                           ;ST7735_TFT.c: 403: write_command(0x2C);
  5654  0013BC  0E2C               	movlw	44
  5655  0013BE  EC29  F00B         	call	_write_command
  5656  0013C2  0012               	return		;funcret
  5657  0013C4                     __end_of_setAddrWindow:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           intcon2	equ	0xFF1
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           postdec1	equ	0xFE5
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _TFT_GreenTab_Initialize *****************
  5679 ;; Defined at:
  5680 ;;		line 641 in file "ST7735_TFT.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;		None               void
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;Total ram usage:        0 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    6
  5701 ;; This function calls:
  5702 ;;		_Rcmd1
  5703 ;;		_Rcmd2red
  5704 ;;		_Rcmd3
  5705 ;;		_write_command
  5706 ;;		_write_data
  5707 ;; This function is called by:
  5708 ;;		_Initialize_Screen
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text25
  5713  00152C                     __ptext25:
  5714                           	opt stack 0
  5715  00152C                     _TFT_GreenTab_Initialize:
  5716                           	opt stack 23
  5717                           
  5718                           ;ST7735_TFT.c: 643: PORTCbits.RC4 = 1;
  5719                           
  5720                           ;incstack = 0
  5721  00152C  8882               	bsf	3970,4,c	;volatile
  5722                           
  5723                           ;ST7735_TFT.c: 644: PORTCbits.RC2 = 0;
  5724  00152E  9482               	bcf	3970,2,c	;volatile
  5725                           
  5726                           ;ST7735_TFT.c: 646: SSPSTAT=0x80;
  5727  001530  0E80               	movlw	128
  5728  001532  6EC7               	movwf	4039,c	;volatile
  5729                           
  5730                           ;ST7735_TFT.c: 647: SSPCON1=0x30;
  5731  001534  0E30               	movlw	48
  5732  001536  6EC6               	movwf	4038,c	;volatile
  5733                           
  5734                           ;ST7735_TFT.c: 650: Rcmd1();
  5735  001538  EC1E  F005         	call	_Rcmd1	;wreg free
  5736                           
  5737                           ;ST7735_TFT.c: 651: Rcmd2red();
  5738  00153C  EC46  F00A         	call	_Rcmd2red	;wreg free
  5739                           
  5740                           ;ST7735_TFT.c: 652: Rcmd3();
  5741  001540  EC2B  F006         	call	_Rcmd3	;wreg free
  5742                           
  5743                           ;ST7735_TFT.c: 653: write_command(0x36);
  5744  001544  0E36               	movlw	54
  5745  001546  EC29  F00B         	call	_write_command
  5746                           
  5747                           ;ST7735_TFT.c: 654: write_data(0xC0);
  5748  00154A  0EC0               	movlw	192
  5749  00154C  EC21  F00B         	call	_write_data
  5750                           
  5751                           ;ST7735_TFT.c: 655: _tft_type = 1;
  5752  001550  0E01               	movlw	1
  5753  001552  6E68               	movwf	__tft_type,c
  5754  001554  0012               	return		;funcret
  5755  001556                     __end_of_TFT_GreenTab_Initialize:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           intcon2	equ	0xFF1
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _Rcmd3 *****************
  5777 ;; Defined at:
  5778 ;;		line 337 in file "ST7735_TFT.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    5
  5799 ;; This function calls:
  5800 ;;		_delay_ms
  5801 ;;		_write_command
  5802 ;;		_write_data
  5803 ;; This function is called by:
  5804 ;;		_TFT_GreenTab_Initialize
  5805 ;;		_TFT_BlackTab_Initialize
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text26
  5810  000C56                     __ptext26:
  5811                           	opt stack 0
  5812  000C56                     _Rcmd3:
  5813                           	opt stack 23
  5814                           
  5815                           ;ST7735_TFT.c: 339: write_command(0xE0);
  5816                           
  5817                           ;incstack = 0
  5818  000C56  0EE0               	movlw	224
  5819  000C58  EC29  F00B         	call	_write_command
  5820                           
  5821                           ;ST7735_TFT.c: 340: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5822  000C5C  0E02               	movlw	2
  5823  000C5E  EC21  F00B         	call	_write_data
  5824  000C62  0E1C               	movlw	28
  5825  000C64  EC21  F00B         	call	_write_data
  5826  000C68  0E07               	movlw	7
  5827  000C6A  EC21  F00B         	call	_write_data
  5828  000C6E  0E12               	movlw	18
  5829  000C70  EC21  F00B         	call	_write_data
  5830                           
  5831                           ;ST7735_TFT.c: 341: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5832  000C74  0E37               	movlw	55
  5833  000C76  EC21  F00B         	call	_write_data
  5834  000C7A  0E32               	movlw	50
  5835  000C7C  EC21  F00B         	call	_write_data
  5836  000C80  0E29               	movlw	41
  5837  000C82  EC21  F00B         	call	_write_data
  5838  000C86  0E2D               	movlw	45
  5839  000C88  EC21  F00B         	call	_write_data
  5840                           
  5841                           ;ST7735_TFT.c: 342: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5842  000C8C  0E29               	movlw	41
  5843  000C8E  EC21  F00B         	call	_write_data
  5844  000C92  0E25               	movlw	37
  5845  000C94  EC21  F00B         	call	_write_data
  5846  000C98  0E2B               	movlw	43
  5847  000C9A  EC21  F00B         	call	_write_data
  5848  000C9E  0E39               	movlw	57
  5849  000CA0  EC21  F00B         	call	_write_data
  5850                           
  5851                           ;ST7735_TFT.c: 343: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5852  000CA4  0E00               	movlw	0
  5853  000CA6  EC21  F00B         	call	_write_data
  5854  000CAA  0E01               	movlw	1
  5855  000CAC  EC21  F00B         	call	_write_data
  5856  000CB0  0E03               	movlw	3
  5857  000CB2  EC21  F00B         	call	_write_data
  5858  000CB6  0E10               	movlw	16
  5859  000CB8  EC21  F00B         	call	_write_data
  5860                           
  5861                           ;ST7735_TFT.c: 344: write_command(0xE1);
  5862  000CBC  0EE1               	movlw	225
  5863  000CBE  EC29  F00B         	call	_write_command
  5864                           
  5865                           ;ST7735_TFT.c: 345: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5866  000CC2  0E03               	movlw	3
  5867  000CC4  EC21  F00B         	call	_write_data
  5868  000CC8  0E1D               	movlw	29
  5869  000CCA  EC21  F00B         	call	_write_data
  5870  000CCE  0E07               	movlw	7
  5871  000CD0  EC21  F00B         	call	_write_data
  5872  000CD4  0E06               	movlw	6
  5873  000CD6  EC21  F00B         	call	_write_data
  5874                           
  5875                           ;ST7735_TFT.c: 346: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5876  000CDA  0E2E               	movlw	46
  5877  000CDC  EC21  F00B         	call	_write_data
  5878  000CE0  0E2C               	movlw	44
  5879  000CE2  EC21  F00B         	call	_write_data
  5880  000CE6  0E29               	movlw	41
  5881  000CE8  EC21  F00B         	call	_write_data
  5882  000CEC  0E2D               	movlw	45
  5883  000CEE  EC21  F00B         	call	_write_data
  5884                           
  5885                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5886  000CF2  0E2E               	movlw	46
  5887  000CF4  EC21  F00B         	call	_write_data
  5888  000CF8  0E2E               	movlw	46
  5889  000CFA  EC21  F00B         	call	_write_data
  5890  000CFE  0E37               	movlw	55
  5891  000D00  EC21  F00B         	call	_write_data
  5892  000D04  0E3F               	movlw	63
  5893  000D06  EC21  F00B         	call	_write_data
  5894                           
  5895                           ;ST7735_TFT.c: 348: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5896  000D0A  0E00               	movlw	0
  5897  000D0C  EC21  F00B         	call	_write_data
  5898  000D10  0E00               	movlw	0
  5899  000D12  EC21  F00B         	call	_write_data
  5900  000D16  0E02               	movlw	2
  5901  000D18  EC21  F00B         	call	_write_data
  5902  000D1C  0E10               	movlw	16
  5903  000D1E  EC21  F00B         	call	_write_data
  5904                           
  5905                           ;ST7735_TFT.c: 349: write_command(0x13);
  5906  000D22  0E13               	movlw	19
  5907  000D24  EC29  F00B         	call	_write_command
  5908                           
  5909                           ;ST7735_TFT.c: 350: delay_ms(10);
  5910  000D28  0E00               	movlw	0
  5911  000D2A  6E18               	movwf	delay_ms@ms+1,c
  5912  000D2C  0E0A               	movlw	10
  5913  000D2E  6E17               	movwf	delay_ms@ms,c
  5914  000D30  EC92  F009         	call	_delay_ms	;wreg free
  5915                           
  5916                           ;ST7735_TFT.c: 351: write_command(0x29);
  5917  000D34  0E29               	movlw	41
  5918  000D36  EC29  F00B         	call	_write_command
  5919                           
  5920                           ;ST7735_TFT.c: 352: delay_ms(100);
  5921  000D3A  0E00               	movlw	0
  5922  000D3C  6E18               	movwf	delay_ms@ms+1,c
  5923  000D3E  0E64               	movlw	100
  5924  000D40  6E17               	movwf	delay_ms@ms,c
  5925  000D42  EC92  F009         	call	_delay_ms	;wreg free
  5926  000D46  0012               	return		;funcret
  5927  000D48                     __end_of_Rcmd3:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           intcon	equ	0xFF2
  5936                           intcon2	equ	0xFF1
  5937                           postinc0	equ	0xFEE
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           fsr1l	equ	0xFE1
  5941                           indf2	equ	0xFDF
  5942                           postinc2	equ	0xFDE
  5943                           postdec2	equ	0xFDD
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _Rcmd2red *****************
  5949 ;; Defined at:
  5950 ;;		line 327 in file "ST7735_TFT.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;		None               void
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;Total ram usage:        0 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    5
  5971 ;; This function calls:
  5972 ;;		_write_command
  5973 ;;		_write_data
  5974 ;; This function is called by:
  5975 ;;		_TFT_GreenTab_Initialize
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text27
  5980  00148C                     __ptext27:
  5981                           	opt stack 0
  5982  00148C                     _Rcmd2red:
  5983                           	opt stack 23
  5984                           
  5985                           ;ST7735_TFT.c: 329: write_command(0x2A);
  5986                           
  5987                           ;incstack = 0
  5988  00148C  0E2A               	movlw	42
  5989  00148E  EC29  F00B         	call	_write_command
  5990                           
  5991                           ;ST7735_TFT.c: 330: write_data(0x00); write_data(0x00);
  5992  001492  0E00               	movlw	0
  5993  001494  EC21  F00B         	call	_write_data
  5994  001498  0E00               	movlw	0
  5995  00149A  EC21  F00B         	call	_write_data
  5996                           
  5997                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x7F);
  5998  00149E  0E00               	movlw	0
  5999  0014A0  EC21  F00B         	call	_write_data
  6000  0014A4  0E7F               	movlw	127
  6001  0014A6  EC21  F00B         	call	_write_data
  6002                           
  6003                           ;ST7735_TFT.c: 332: write_command(0x2B);
  6004  0014AA  0E2B               	movlw	43
  6005  0014AC  EC29  F00B         	call	_write_command
  6006                           
  6007                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x00);
  6008  0014B0  0E00               	movlw	0
  6009  0014B2  EC21  F00B         	call	_write_data
  6010  0014B6  0E00               	movlw	0
  6011  0014B8  EC21  F00B         	call	_write_data
  6012                           
  6013                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x9F);
  6014  0014BC  0E00               	movlw	0
  6015  0014BE  EC21  F00B         	call	_write_data
  6016  0014C2  0E9F               	movlw	159
  6017  0014C4  EC21  F00B         	call	_write_data
  6018  0014C8  0012               	return		;funcret
  6019  0014CA                     __end_of_Rcmd2red:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           intcon	equ	0xFF2
  6028                           intcon2	equ	0xFF1
  6029                           postinc0	equ	0xFEE
  6030                           wreg	equ	0xFE8
  6031                           postdec1	equ	0xFE5
  6032                           fsr1l	equ	0xFE1
  6033                           indf2	equ	0xFDF
  6034                           postinc2	equ	0xFDE
  6035                           postdec2	equ	0xFDD
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040 ;; *************** function _Rcmd1 *****************
  6041 ;; Defined at:
  6042 ;;		line 280 in file "ST7735_TFT.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;		None
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;		None               void
  6049 ;; Registers used:
  6050 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;Total ram usage:        0 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    5
  6063 ;; This function calls:
  6064 ;;		_delay_ms
  6065 ;;		_write_command
  6066 ;;		_write_data
  6067 ;; This function is called by:
  6068 ;;		_TFT_GreenTab_Initialize
  6069 ;;		_TFT_BlackTab_Initialize
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text28
  6074  000A3C                     __ptext28:
  6075                           	opt stack 0
  6076  000A3C                     _Rcmd1:
  6077                           	opt stack 23
  6078                           
  6079                           ;ST7735_TFT.c: 282: write_command(0x01);
  6080                           
  6081                           ;incstack = 0
  6082  000A3C  0E01               	movlw	1
  6083  000A3E  EC29  F00B         	call	_write_command
  6084                           
  6085                           ;ST7735_TFT.c: 283: delay_ms(150);
  6086  000A42  0E00               	movlw	0
  6087  000A44  6E18               	movwf	delay_ms@ms+1,c
  6088  000A46  0E96               	movlw	150
  6089  000A48  6E17               	movwf	delay_ms@ms,c
  6090  000A4A  EC92  F009         	call	_delay_ms	;wreg free
  6091                           
  6092                           ;ST7735_TFT.c: 284: write_command(0x11);
  6093  000A4E  0E11               	movlw	17
  6094  000A50  EC29  F00B         	call	_write_command
  6095                           
  6096                           ;ST7735_TFT.c: 285: delay_ms(500);
  6097  000A54  0E01               	movlw	1
  6098  000A56  6E18               	movwf	delay_ms@ms+1,c
  6099  000A58  0EF4               	movlw	244
  6100  000A5A  6E17               	movwf	delay_ms@ms,c
  6101  000A5C  EC92  F009         	call	_delay_ms	;wreg free
  6102                           
  6103                           ;ST7735_TFT.c: 286: write_command(0xB1);
  6104  000A60  0EB1               	movlw	177
  6105  000A62  EC29  F00B         	call	_write_command
  6106                           
  6107                           ;ST7735_TFT.c: 287: write_data(0x01);
  6108  000A66  0E01               	movlw	1
  6109  000A68  EC21  F00B         	call	_write_data
  6110                           
  6111                           ;ST7735_TFT.c: 288: write_data(0x2C);
  6112  000A6C  0E2C               	movlw	44
  6113  000A6E  EC21  F00B         	call	_write_data
  6114                           
  6115                           ;ST7735_TFT.c: 289: write_data(0x2D);
  6116  000A72  0E2D               	movlw	45
  6117  000A74  EC21  F00B         	call	_write_data
  6118                           
  6119                           ;ST7735_TFT.c: 290: write_command(0xB2);
  6120  000A78  0EB2               	movlw	178
  6121  000A7A  EC29  F00B         	call	_write_command
  6122                           
  6123                           ;ST7735_TFT.c: 291: write_data(0x01);
  6124  000A7E  0E01               	movlw	1
  6125  000A80  EC21  F00B         	call	_write_data
  6126                           
  6127                           ;ST7735_TFT.c: 292: write_data(0x2C);
  6128  000A84  0E2C               	movlw	44
  6129  000A86  EC21  F00B         	call	_write_data
  6130                           
  6131                           ;ST7735_TFT.c: 293: write_data(0x2D);
  6132  000A8A  0E2D               	movlw	45
  6133  000A8C  EC21  F00B         	call	_write_data
  6134                           
  6135                           ;ST7735_TFT.c: 294: write_command(0xB3);
  6136  000A90  0EB3               	movlw	179
  6137  000A92  EC29  F00B         	call	_write_command
  6138                           
  6139                           ;ST7735_TFT.c: 295: write_data(0x01);
  6140  000A96  0E01               	movlw	1
  6141  000A98  EC21  F00B         	call	_write_data
  6142                           
  6143                           ;ST7735_TFT.c: 296: write_data(0x2C);
  6144  000A9C  0E2C               	movlw	44
  6145  000A9E  EC21  F00B         	call	_write_data
  6146                           
  6147                           ;ST7735_TFT.c: 297: write_data(0x2D);
  6148  000AA2  0E2D               	movlw	45
  6149  000AA4  EC21  F00B         	call	_write_data
  6150                           
  6151                           ;ST7735_TFT.c: 298: write_data(0x01);
  6152  000AA8  0E01               	movlw	1
  6153  000AAA  EC21  F00B         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 299: write_data(0x2C);
  6156  000AAE  0E2C               	movlw	44
  6157  000AB0  EC21  F00B         	call	_write_data
  6158                           
  6159                           ;ST7735_TFT.c: 300: write_data(0x2D);
  6160  000AB4  0E2D               	movlw	45
  6161  000AB6  EC21  F00B         	call	_write_data
  6162                           
  6163                           ;ST7735_TFT.c: 301: write_command(0xB4);
  6164  000ABA  0EB4               	movlw	180
  6165  000ABC  EC29  F00B         	call	_write_command
  6166                           
  6167                           ;ST7735_TFT.c: 302: write_data(0x07);
  6168  000AC0  0E07               	movlw	7
  6169  000AC2  EC21  F00B         	call	_write_data
  6170                           
  6171                           ;ST7735_TFT.c: 303: write_command(0xC0);
  6172  000AC6  0EC0               	movlw	192
  6173  000AC8  EC29  F00B         	call	_write_command
  6174                           
  6175                           ;ST7735_TFT.c: 304: write_data(0xA2);
  6176  000ACC  0EA2               	movlw	162
  6177  000ACE  EC21  F00B         	call	_write_data
  6178                           
  6179                           ;ST7735_TFT.c: 305: write_data(0x02);
  6180  000AD2  0E02               	movlw	2
  6181  000AD4  EC21  F00B         	call	_write_data
  6182                           
  6183                           ;ST7735_TFT.c: 306: write_data(0x84);
  6184  000AD8  0E84               	movlw	132
  6185  000ADA  EC21  F00B         	call	_write_data
  6186                           
  6187                           ;ST7735_TFT.c: 307: write_command(0xC1);
  6188  000ADE  0EC1               	movlw	193
  6189  000AE0  EC29  F00B         	call	_write_command
  6190                           
  6191                           ;ST7735_TFT.c: 308: write_data(0xC5);
  6192  000AE4  0EC5               	movlw	197
  6193  000AE6  EC21  F00B         	call	_write_data
  6194                           
  6195                           ;ST7735_TFT.c: 309: write_command(0xC2);
  6196  000AEA  0EC2               	movlw	194
  6197  000AEC  EC29  F00B         	call	_write_command
  6198                           
  6199                           ;ST7735_TFT.c: 310: write_data(0x0A);
  6200  000AF0  0E0A               	movlw	10
  6201  000AF2  EC21  F00B         	call	_write_data
  6202                           
  6203                           ;ST7735_TFT.c: 311: write_data(0x00);
  6204  000AF6  0E00               	movlw	0
  6205  000AF8  EC21  F00B         	call	_write_data
  6206                           
  6207                           ;ST7735_TFT.c: 312: write_command(0xC3);
  6208  000AFC  0EC3               	movlw	195
  6209  000AFE  EC29  F00B         	call	_write_command
  6210                           
  6211                           ;ST7735_TFT.c: 313: write_data(0x8A);
  6212  000B02  0E8A               	movlw	138
  6213  000B04  EC21  F00B         	call	_write_data
  6214                           
  6215                           ;ST7735_TFT.c: 314: write_data(0x2A);
  6216  000B08  0E2A               	movlw	42
  6217  000B0A  EC21  F00B         	call	_write_data
  6218                           
  6219                           ;ST7735_TFT.c: 315: write_command(0xC4);
  6220  000B0E  0EC4               	movlw	196
  6221  000B10  EC29  F00B         	call	_write_command
  6222                           
  6223                           ;ST7735_TFT.c: 316: write_data(0x8A);
  6224  000B14  0E8A               	movlw	138
  6225  000B16  EC21  F00B         	call	_write_data
  6226                           
  6227                           ;ST7735_TFT.c: 317: write_data(0xEE);
  6228  000B1A  0EEE               	movlw	238
  6229  000B1C  EC21  F00B         	call	_write_data
  6230                           
  6231                           ;ST7735_TFT.c: 318: write_command(0xC5);
  6232  000B20  0EC5               	movlw	197
  6233  000B22  EC29  F00B         	call	_write_command
  6234                           
  6235                           ;ST7735_TFT.c: 319: write_data(0x0E);
  6236  000B26  0E0E               	movlw	14
  6237  000B28  EC21  F00B         	call	_write_data
  6238                           
  6239                           ;ST7735_TFT.c: 320: write_command(0x20);
  6240  000B2C  0E20               	movlw	32
  6241  000B2E  EC29  F00B         	call	_write_command
  6242                           
  6243                           ;ST7735_TFT.c: 321: write_command(0x36);
  6244  000B32  0E36               	movlw	54
  6245  000B34  EC29  F00B         	call	_write_command
  6246                           
  6247                           ;ST7735_TFT.c: 322: write_data(0xC8);
  6248  000B38  0EC8               	movlw	200
  6249  000B3A  EC21  F00B         	call	_write_data
  6250                           
  6251                           ;ST7735_TFT.c: 323: write_command(0x3A);
  6252  000B3E  0E3A               	movlw	58
  6253  000B40  EC29  F00B         	call	_write_command
  6254                           
  6255                           ;ST7735_TFT.c: 324: write_data(0x05);
  6256  000B44  0E05               	movlw	5
  6257  000B46  EC21  F00B         	call	_write_data
  6258  000B4A  0012               	return		;funcret
  6259  000B4C                     __end_of_Rcmd1:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           intcon	equ	0xFF2
  6268                           intcon2	equ	0xFF1
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _write_data *****************
  6281 ;; Defined at:
  6282 ;;		line 208 in file "ST7735_TFT.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  data_           1    wreg     unsigned char 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  data_           1   18[COMRAM] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;		None               void
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;Total ram usage:        1 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    4
  6303 ;; This function calls:
  6304 ;;		_spiwrite
  6305 ;; This function is called by:
  6306 ;;		_Rcmd1
  6307 ;;		_Rcmd2red
  6308 ;;		_Rcmd3
  6309 ;;		_setAddrWindow
  6310 ;;		_drawPixel
  6311 ;;		_TFT_GreenTab_Initialize
  6312 ;;		_Bcmd
  6313 ;;		_setScrollDefinition
  6314 ;;		_Rcmd2green
  6315 ;;		_VerticalScroll
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text29
  6320  001642                     __ptext29:
  6321                           	opt stack 0
  6322  001642                     _write_data:
  6323                           	opt stack 22
  6324                           
  6325                           ;incstack = 0
  6326                           ;write_data@data_ stored from wreg
  6327  001642  6E13               	movwf	write_data@data_,c
  6328                           
  6329                           ;ST7735_TFT.c: 210: PORTCbits.RC4 = 0;
  6330  001644  9882               	bcf	3970,4,c	;volatile
  6331                           
  6332                           ;ST7735_TFT.c: 211: PORTCbits.RC2 = 1;
  6333  001646  8482               	bsf	3970,2,c	;volatile
  6334                           
  6335                           ;ST7735_TFT.c: 212: spiwrite(data_);
  6336  001648  5013               	movf	write_data@data_,w,c
  6337  00164A  EC05  F00B         	call	_spiwrite
  6338                           
  6339                           ;ST7735_TFT.c: 213: PORTCbits.RC4 = 1;
  6340  00164E  8882               	bsf	3970,4,c	;volatile
  6341  001650  0012               	return		;funcret
  6342  001652                     __end_of_write_data:
  6343                           	opt stack 0
  6344                           tblptru	equ	0xFF8
  6345                           tblptrh	equ	0xFF7
  6346                           tblptrl	equ	0xFF6
  6347                           tablat	equ	0xFF5
  6348                           prodh	equ	0xFF4
  6349                           prodl	equ	0xFF3
  6350                           intcon	equ	0xFF2
  6351                           intcon2	equ	0xFF1
  6352                           postinc0	equ	0xFEE
  6353                           wreg	equ	0xFE8
  6354                           postdec1	equ	0xFE5
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _write_command *****************
  6364 ;; Defined at:
  6365 ;;		line 197 in file "ST7735_TFT.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  cmd_            1    wreg     unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  cmd_            1   18[COMRAM] unsigned char 
  6370 ;; Return value:  Size  Location     Type
  6371 ;;		None               void
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;Total ram usage:        1 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    4
  6386 ;; This function calls:
  6387 ;;		_spiwrite
  6388 ;; This function is called by:
  6389 ;;		_Rcmd1
  6390 ;;		_Rcmd2red
  6391 ;;		_Rcmd3
  6392 ;;		_setAddrWindow
  6393 ;;		_TFT_GreenTab_Initialize
  6394 ;;		_Bcmd
  6395 ;;		_setScrollDefinition
  6396 ;;		_Rcmd2green
  6397 ;;		_VerticalScroll
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text30
  6402  001652                     __ptext30:
  6403                           	opt stack 0
  6404  001652                     _write_command:
  6405                           	opt stack 22
  6406                           
  6407                           ;incstack = 0
  6408                           ;write_command@cmd_ stored from wreg
  6409  001652  6E13               	movwf	write_command@cmd_,c
  6410                           
  6411                           ;ST7735_TFT.c: 199: PORTCbits.RC4 = 0;
  6412  001654  9882               	bcf	3970,4,c	;volatile
  6413                           
  6414                           ;ST7735_TFT.c: 201: PORTCbits.RC2 = 0;
  6415  001656  9482               	bcf	3970,2,c	;volatile
  6416                           
  6417                           ;ST7735_TFT.c: 202: spiwrite(cmd_);
  6418  001658  5013               	movf	write_command@cmd_,w,c
  6419  00165A  EC05  F00B         	call	_spiwrite
  6420                           
  6421                           ;ST7735_TFT.c: 204: PORTCbits.RC4 = 1;
  6422  00165E  8882               	bsf	3970,4,c	;volatile
  6423  001660  0012               	return		;funcret
  6424  001662                     __end_of_write_command:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           intcon2	equ	0xFF1
  6434                           postinc0	equ	0xFEE
  6435                           wreg	equ	0xFE8
  6436                           postdec1	equ	0xFE5
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _spiwrite *****************
  6446 ;; Defined at:
  6447 ;;		line 188 in file "ST7735_TFT.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  spidata         1    wreg     unsigned char 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  spidata         1   17[COMRAM] unsigned char 
  6452 ;;  x               1   16[COMRAM] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;		None               void
  6455 ;; Registers used:
  6456 ;;		wreg
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;Total ram usage:        2 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    3
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_write_command
  6473 ;;		_write_data
  6474 ;;		_drawFastVLine
  6475 ;;		_fillRectangle
  6476 ;;		_drawFastHLine
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           	psect	text31
  6481  00160A                     __ptext31:
  6482                           	opt stack 0
  6483  00160A                     _spiwrite:
  6484                           	opt stack 24
  6485                           
  6486                           ;incstack = 0
  6487                           ;spiwrite@spidata stored from wreg
  6488  00160A  6E12               	movwf	spiwrite@spidata,c
  6489                           
  6490                           ;ST7735_TFT.c: 190: char x;
  6491                           ;ST7735_TFT.c: 191: PIR1bits.SSPIF = 0;
  6492  00160C  969E               	bcf	3998,3,c	;volatile
  6493                           
  6494                           ;ST7735_TFT.c: 192: x = SSPBUF;
  6495  00160E  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6496                           
  6497                           ;ST7735_TFT.c: 193: SSPBUF = spidata;
  6498  001612  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6499                           
  6500                           ;ST7735_TFT.c: 194: while (!SSPSTATbits.BF);
  6501  001616  D000               	goto	l254
  6502  001618                     l254:
  6503  001618  A0C7               	btfss	4039,0,c	;volatile
  6504  00161A  D7FE               	goto	l254
  6505  00161C  0012               	return		;funcret
  6506  00161E                     __end_of_spiwrite:
  6507                           	opt stack 0
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           intcon2	equ	0xFF1
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function _LCD_Reset *****************
  6528 ;; Defined at:
  6529 ;;		line 216 in file "ST7735_TFT.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;		None
  6534 ;; Return value:  Size  Location     Type
  6535 ;;		None               void
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:        0 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    5
  6550 ;; This function calls:
  6551 ;;		_delay_ms
  6552 ;; This function is called by:
  6553 ;;		_Initialize_Screen
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text32
  6558  00161E                     __ptext32:
  6559                           	opt stack 0
  6560  00161E                     _LCD_Reset:
  6561                           	opt stack 24
  6562                           
  6563                           ;ST7735_TFT.c: 218: PORTCbits.RC1 = 0;
  6564                           
  6565                           ;incstack = 0
  6566  00161E  9282               	bcf	3970,1,c	;volatile
  6567                           
  6568                           ;ST7735_TFT.c: 219: delay_ms(100);
  6569  001620  0E00               	movlw	0
  6570  001622  6E18               	movwf	delay_ms@ms+1,c
  6571  001624  0E64               	movlw	100
  6572  001626  6E17               	movwf	delay_ms@ms,c
  6573  001628  EC92  F009         	call	_delay_ms	;wreg free
  6574                           
  6575                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 1;
  6576  00162C  8282               	bsf	3970,1,c	;volatile
  6577  00162E  0012               	return		;funcret
  6578  001630                     __end_of_LCD_Reset:
  6579                           	opt stack 0
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           intcon2	equ	0xFF1
  6588                           postinc0	equ	0xFEE
  6589                           wreg	equ	0xFE8
  6590                           postdec1	equ	0xFE5
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _delay_ms *****************
  6600 ;; Defined at:
  6601 ;;		line 63 in file "ST7735_TFT.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  ms              2   22[COMRAM] int 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  count           2   26[COMRAM] int 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;Total ram usage:        6 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    4
  6622 ;; This function calls:
  6623 ;;		___wmul
  6624 ;; This function is called by:
  6625 ;;		_LCD_Reset
  6626 ;;		_Rcmd1
  6627 ;;		_Rcmd3
  6628 ;;		_Bcmd
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text33
  6633  001324                     __ptext33:
  6634                           	opt stack 0
  6635  001324                     _delay_ms:
  6636                           	opt stack 23
  6637                           
  6638                           ;ST7735_TFT.c: 69: int count;
  6639                           ;ST7735_TFT.c: 70: count = 8000000/4000/8 * ms;
  6640                           
  6641                           ;incstack = 0
  6642  001324  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6643  001328  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6644  00132C  0E00               	movlw	0
  6645  00132E  6E14               	movwf	___wmul@multiplicand+1,c
  6646  001330  0EFA               	movlw	250
  6647  001332  6E13               	movwf	___wmul@multiplicand,c
  6648  001334  ECAB  F00A         	call	___wmul	;wreg free
  6649  001338  C011  F01B         	movff	?___wmul,delay_ms@count
  6650  00133C  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6651                           
  6652                           ;ST7735_TFT.c: 71: count = (0xffff - count);
  6653  001340  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6654  001344  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6655  001348  1E19               	comf	??_delay_ms,f,c
  6656  00134A  1E1A               	comf	??_delay_ms+1,f,c
  6657  00134C  4A19               	infsnz	??_delay_ms,f,c
  6658  00134E  2A1A               	incf	??_delay_ms+1,f,c
  6659  001350  0EFF               	movlw	255
  6660  001352  2419               	addwf	??_delay_ms,w,c
  6661  001354  6E1B               	movwf	delay_ms@count,c
  6662  001356  0EFF               	movlw	255
  6663  001358  201A               	addwfc	??_delay_ms+1,w,c
  6664  00135A  6E1C               	movwf	delay_ms@count+1,c
  6665                           
  6666                           ;ST7735_TFT.c: 73: T3CON = 0xb8;
  6667  00135C  0EB8               	movlw	184
  6668  00135E  6EB1               	movwf	4017,c	;volatile
  6669                           
  6670                           ;ST7735_TFT.c: 75: TMR3L = count & 0x00ff;
  6671  001360  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6672                           
  6673                           ;ST7735_TFT.c: 76: TMR3H = count >> 8;
  6674  001364  501C               	movf	delay_ms@count+1,w,c
  6675  001366  6EB3               	movwf	4019,c	;volatile
  6676                           
  6677                           ;ST7735_TFT.c: 78: PIR2bits.TMR3IF = 0;
  6678  001368  92A1               	bcf	4001,1,c	;volatile
  6679                           
  6680                           ;ST7735_TFT.c: 79: T3CONbits.TMR3ON = 1;
  6681  00136A  80B1               	bsf	4017,0,c	;volatile
  6682                           
  6683                           ;ST7735_TFT.c: 81: while (PIR2bits.TMR3IF == 0);
  6684  00136C  D000               	goto	l244
  6685  00136E                     l244:
  6686  00136E  A2A1               	btfss	4001,1,c	;volatile
  6687  001370  D7FE               	goto	l244
  6688                           
  6689                           ;ST7735_TFT.c: 82: T3CONbits.TMR3ON = 0;
  6690  001372  90B1               	bcf	4017,0,c	;volatile
  6691  001374  0012               	return		;funcret
  6692  001376                     __end_of_delay_ms:
  6693                           	opt stack 0
  6694                           tblptru	equ	0xFF8
  6695                           tblptrh	equ	0xFF7
  6696                           tblptrl	equ	0xFF6
  6697                           tablat	equ	0xFF5
  6698                           prodh	equ	0xFF4
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           intcon2	equ	0xFF1
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           fsr1l	equ	0xFE1
  6706                           indf2	equ	0xFDF
  6707                           postinc2	equ	0xFDE
  6708                           postdec2	equ	0xFDD
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function ___wmul *****************
  6714 ;; Defined at:
  6715 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  multiplier      2   16[COMRAM] unsigned int 
  6718 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  product         2   20[COMRAM] unsigned int 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  2   16[COMRAM] unsigned int 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0, prodl, prodh
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;Total ram usage:        6 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    3
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_delay_ms
  6741 ;;		_drawChar
  6742 ;;		_printf
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text34
  6747  001556                     __ptext34:
  6748                           	opt stack 0
  6749  001556                     ___wmul:
  6750                           	opt stack 26
  6751                           
  6752                           ;incstack = 0
  6753  001556  5011               	movf	___wmul@multiplier,w,c
  6754  001558  0213               	mulwf	___wmul@multiplicand,c
  6755  00155A  CFF3 F015          	movff	prodl,___wmul@product
  6756  00155E  CFF4 F016          	movff	prodh,___wmul@product+1
  6757  001562  5011               	movf	___wmul@multiplier,w,c
  6758  001564  0214               	mulwf	___wmul@multiplicand+1,c
  6759  001566  50F3               	movf	prodl,w,c
  6760  001568  2616               	addwf	___wmul@product+1,f,c
  6761  00156A  5012               	movf	___wmul@multiplier+1,w,c
  6762  00156C  0213               	mulwf	___wmul@multiplicand,c
  6763  00156E  50F3               	movf	prodl,w,c
  6764  001570  2616               	addwf	___wmul@product+1,f,c
  6765  001572  C015  F011         	movff	___wmul@product,?___wmul
  6766  001576  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6767  00157A  D000               	goto	l506
  6768  00157C                     l506:
  6769  00157C  0012               	return		;funcret
  6770  00157E                     __end_of___wmul:
  6771                           	opt stack 0
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           intcon2	equ	0xFF1
  6780                           postinc0	equ	0xFEE
  6781                           wreg	equ	0xFE8
  6782                           postdec1	equ	0xFE5
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _Deactivate_Buzzer *****************
  6792 ;; Defined at:
  6793 ;;		line 337 in file "Lab10p1.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;		None               void
  6800 ;; Registers used:
  6801 ;;		wreg, status,2
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;Total ram usage:        0 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    3
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_main
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text35
  6822  00167C                     __ptext35:
  6823                           	opt stack 0
  6824  00167C                     _Deactivate_Buzzer:
  6825                           	opt stack 27
  6826                           
  6827                           ;Lab10p1.c: 339: CCP2CON = 0x0;
  6828                           
  6829                           ;incstack = 0
  6830  00167C  0E00               	movlw	0
  6831  00167E  6EBA               	movwf	4026,c	;volatile
  6832                           
  6833                           ;Lab10p1.c: 340: PORTBbits.RB3 = 0;
  6834  001680  9681               	bcf	3969,3,c	;volatile
  6835  001682  0012               	return		;funcret
  6836  001684                     __end_of_Deactivate_Buzzer:
  6837                           	opt stack 0
  6838                           tblptru	equ	0xFF8
  6839                           tblptrh	equ	0xFF7
  6840                           tblptrl	equ	0xFF6
  6841                           tablat	equ	0xFF5
  6842                           prodh	equ	0xFF4
  6843                           prodl	equ	0xFF3
  6844                           intcon	equ	0xFF2
  6845                           intcon2	equ	0xFF1
  6846                           postinc0	equ	0xFEE
  6847                           wreg	equ	0xFE8
  6848                           postdec1	equ	0xFE5
  6849                           fsr1l	equ	0xFE1
  6850                           indf2	equ	0xFDF
  6851                           postinc2	equ	0xFDE
  6852                           postdec2	equ	0xFDD
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function _Activate_Buzzer *****************
  6858 ;; Defined at:
  6859 ;;		line 330 in file "Lab10p1.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;		None               void
  6866 ;; Registers used:
  6867 ;;		wreg, status,2
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;Total ram usage:        0 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    3
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_main
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text36
  6888  001630                     __ptext36:
  6889                           	opt stack 0
  6890  001630                     _Activate_Buzzer:
  6891                           	opt stack 27
  6892                           
  6893                           ;Lab10p1.c: 332: PR2 = 0b11111001 ;
  6894                           
  6895                           ;incstack = 0
  6896  001630  0EF9               	movlw	249
  6897  001632  6ECB               	movwf	4043,c	;volatile
  6898                           
  6899                           ;Lab10p1.c: 333: T2CON = 0b00000101 ;
  6900  001634  0E05               	movlw	5
  6901  001636  6ECA               	movwf	4042,c	;volatile
  6902                           
  6903                           ;Lab10p1.c: 334: CCPR2L = 0b01001010 ;
  6904  001638  0E4A               	movlw	74
  6905  00163A  6EBB               	movwf	4027,c	;volatile
  6906                           
  6907                           ;Lab10p1.c: 335: CCP2CON = 0b00111100 ;
  6908  00163C  0E3C               	movlw	60
  6909  00163E  6EBA               	movwf	4026,c	;volatile
  6910  001640  0012               	return		;funcret
  6911  001642                     __end_of_Activate_Buzzer:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           intcon2	equ	0xFF1
  6921                           postinc0	equ	0xFEE
  6922                           wreg	equ	0xFE8
  6923                           postdec1	equ	0xFE5
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           postdec2	equ	0xFDD
  6928                           fsr2h	equ	0xFDA
  6929                           fsr2l	equ	0xFD9
  6930                           status	equ	0xFD8
  6931                           
  6932 ;; *************** function _chkisr *****************
  6933 ;; Defined at:
  6934 ;;		line 99 in file "Lab10p1.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;		None
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;		None               void
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;Total ram usage:       14 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    2
  6955 ;; This function calls:
  6956 ;;		_INT0_isr
  6957 ;;		_TIMER1_isr
  6958 ;; This function is called by:
  6959 ;;		Interrupt level 2
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	intcode
  6964  000008                     __pintcode:
  6965                           	opt stack 0
  6966  000008                     _chkisr:
  6967                           	opt stack 20
  6968                           
  6969                           ;incstack = 0
  6970  000008  CFFA F003          	movff	pclath,??_chkisr
  6971  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6972  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6973  000014  ED78  F008         	call	int_func,f	;refresh shadow registers
  6974                           pclatu	equ	0xFFB
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           postinc0	equ	0xFEE
  6985                           fsr0l	equ	0xFE9
  6986                           wreg	equ	0xFE8
  6987                           postdec1	equ	0xFE5
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996                           	psect	intcode_body
  6997  0010F0                     __pintcode_body:
  6998                           	opt stack 20
  6999  0010F0                     int_func:
  7000                           	opt stack 20
  7001  0010F0  0006               	pop		; remove dummy address from shadow register refresh
  7002  0010F2  CFEA F006          	movff	fsr0h,??_chkisr+3
  7003  0010F6  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7004  0010FA  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7005  0010FE  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7006  001102  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7007  001106  CFF3 F00B          	movff	prodl,??_chkisr+8
  7008  00110A  CFF4 F00C          	movff	prodh,??_chkisr+9
  7009  00110E  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7010  001112  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7011  001116  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7012  00111A  CFF5 F010          	movff	tablat,??_chkisr+13
  7013                           
  7014                           ;Lab10p1.c: 101: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7015  00111E  A09E               	btfss	3998,0,c	;volatile
  7016  001120  D003               	goto	i2l1894
  7017  001122  EC38  F00B         	call	_TIMER1_isr	;wreg free
  7018  001126  D000               	goto	i2l1894
  7019  001128                     i2l1894:
  7020                           
  7021                           ;Lab10p1.c: 102: if (INTCONbits.INT0IF == 1) INT0_isr();
  7022  001128  A2F2               	btfss	intcon,1,c	;volatile
  7023  00112A  D003               	goto	i2l124
  7024  00112C  EC24  F003         	call	_INT0_isr	;wreg free
  7025  001130  D000               	goto	i2l124
  7026  001132                     i2l124:
  7027  001132  C010  FFF5         	movff	??_chkisr+13,tablat
  7028  001136  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7029  00113A  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7030  00113E  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7031  001142  C00C  FFF4         	movff	??_chkisr+9,prodh
  7032  001146  C00B  FFF3         	movff	??_chkisr+8,prodl
  7033  00114A  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7034  00114E  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7035  001152  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7036  001156  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7037  00115A  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7038  00115E  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7039  001162  C004  FFFB         	movff	??_chkisr+1,pclatu
  7040  001166  C003  FFFA         	movff	??_chkisr,pclath
  7041  00116A  0011               	retfie		f
  7042  00116C                     __end_of_chkisr:
  7043                           	opt stack 0
  7044                           pclatu	equ	0xFFB
  7045                           pclath	equ	0xFFA
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           intcon2	equ	0xFF1
  7054                           postinc0	equ	0xFEE
  7055                           fsr0h	equ	0xFEA
  7056                           fsr0l	equ	0xFE9
  7057                           wreg	equ	0xFE8
  7058                           postdec1	equ	0xFE5
  7059                           fsr1h	equ	0xFE2
  7060                           fsr1l	equ	0xFE1
  7061                           indf2	equ	0xFDF
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function _TIMER1_isr *****************
  7069 ;; Defined at:
  7070 ;;		line 105 in file "Lab10p1.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;		None               void
  7077 ;; Registers used:
  7078 ;;		wreg, status,2
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;Total ram usage:        0 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_chkisr
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text38
  7098  001670                     __ptext38:
  7099                           	opt stack 0
  7100  001670                     _TIMER1_isr:
  7101                           	opt stack 21
  7102                           
  7103                           ;Lab10p1.c: 107: Nec_state = 0;
  7104                           
  7105                           ;incstack = 0
  7106  001670  0E00               	movlw	0
  7107  001672  6E67               	movwf	_Nec_state,c
  7108                           
  7109                           ;Lab10p1.c: 108: INTCON2bits.INTEDG0 = 0;
  7110  001674  9CF1               	bcf	intcon2,6,c	;volatile
  7111                           
  7112                           ;Lab10p1.c: 109: T1CONbits.TMR1ON = 0;
  7113  001676  90CD               	bcf	4045,0,c	;volatile
  7114                           
  7115                           ;Lab10p1.c: 110: PIR1bits.TMR1IF = 0;
  7116  001678  909E               	bcf	3998,0,c	;volatile
  7117  00167A  0012               	return		;funcret
  7118  00167C                     __end_of_TIMER1_isr:
  7119                           	opt stack 0
  7120                           pclatu	equ	0xFFB
  7121                           pclath	equ	0xFFA
  7122                           tblptru	equ	0xFF8
  7123                           tblptrh	equ	0xFF7
  7124                           tblptrl	equ	0xFF6
  7125                           tablat	equ	0xFF5
  7126                           prodh	equ	0xFF4
  7127                           prodl	equ	0xFF3
  7128                           intcon	equ	0xFF2
  7129                           intcon2	equ	0xFF1
  7130                           postinc0	equ	0xFEE
  7131                           fsr0h	equ	0xFEA
  7132                           fsr0l	equ	0xFE9
  7133                           wreg	equ	0xFE8
  7134                           postdec1	equ	0xFE5
  7135                           fsr1h	equ	0xFE2
  7136                           fsr1l	equ	0xFE1
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function _INT0_isr *****************
  7145 ;; Defined at:
  7146 ;;		line 165 in file "Lab10p1.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;		None               void
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;Total ram usage:        2 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    1
  7167 ;; This function calls:
  7168 ;;		_force_nec_state0
  7169 ;; This function is called by:
  7170 ;;		_chkisr
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           	psect	text39
  7175  000648                     __ptext39:
  7176                           	opt stack 0
  7177  000648                     _INT0_isr:
  7178                           	opt stack 20
  7179                           
  7180                           ;Lab10p1.c: 167: INTCONbits.INT0IF = 0;
  7181                           
  7182                           ;incstack = 0
  7183  000648  92F2               	bcf	intcon,1,c	;volatile
  7184                           
  7185                           ;Lab10p1.c: 168: if (Nec_state != 0)
  7186  00064A  5067               	movf	_Nec_state,w,c
  7187  00064C  B4D8               	btfsc	status,2,c
  7188  00064E  D09D               	goto	i2l1680
  7189                           
  7190                           ;Lab10p1.c: 169: {
  7191                           ;Lab10p1.c: 170: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7192  000650  50CE               	movf	4046,w,c	;volatile
  7193  000652  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7194  000656  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7195  000658  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7196  00065C  6A01               	clrf	??_INT0_isr,c
  7197  00065E  1001               	iorwf	??_INT0_isr,w,c
  7198  000660  6E5E               	movwf	_Time_Elapsed,c
  7199  000662  5002               	movf	??_INT0_isr+1,w,c
  7200  000664  6E5F               	movwf	_Time_Elapsed+1,c
  7201                           
  7202                           ;Lab10p1.c: 171: TMR1H = 0;
  7203  000666  0E00               	movlw	0
  7204  000668  6ECF               	movwf	4047,c	;volatile
  7205                           
  7206                           ;Lab10p1.c: 172: TMR1L = 0;
  7207  00066A  0E00               	movlw	0
  7208  00066C  6ECE               	movwf	4046,c	;volatile
  7209                           
  7210                           ;Lab10p1.c: 173: }
  7211                           ;Lab10p1.c: 175: switch(Nec_state)
  7212  00066E  D08D               	goto	i2l1680
  7213  000670                     i2l1608:
  7214                           
  7215                           ;Lab10p1.c: 178: {
  7216                           ;Lab10p1.c: 180: TMR1H = 0;
  7217  000670  0E00               	movlw	0
  7218  000672  6ECF               	movwf	4047,c	;volatile
  7219                           
  7220                           ;Lab10p1.c: 181: TMR1L = 0;
  7221  000674  0E00               	movlw	0
  7222  000676  6ECE               	movwf	4046,c	;volatile
  7223                           
  7224                           ;Lab10p1.c: 182: PIR1bits.TMR1IF = 0;
  7225  000678  909E               	bcf	3998,0,c	;volatile
  7226                           
  7227                           ;Lab10p1.c: 183: T1CON= 0x90;
  7228  00067A  0E90               	movlw	144
  7229  00067C  6ECD               	movwf	4045,c	;volatile
  7230                           
  7231                           ;Lab10p1.c: 184: T1CONbits.TMR1ON = 1;
  7232  00067E  80CD               	bsf	4045,0,c	;volatile
  7233                           
  7234                           ;Lab10p1.c: 185: bit_count = 0;
  7235  000680  0E00               	movlw	0
  7236  000682  6E69               	movwf	_bit_count,c
  7237                           
  7238                           ;Lab10p1.c: 186: Nec_code = 0;
  7239  000684  0E00               	movlw	0
  7240  000686  6E5A               	movwf	_Nec_code,c
  7241  000688  0E00               	movlw	0
  7242  00068A  6E5B               	movwf	_Nec_code+1,c
  7243  00068C  0E00               	movlw	0
  7244  00068E  6E5C               	movwf	_Nec_code+2,c
  7245  000690  0E00               	movlw	0
  7246  000692  6E5D               	movwf	_Nec_code+3,c
  7247                           
  7248                           ;Lab10p1.c: 187: Nec_state = 1;
  7249  000694  0E01               	movlw	1
  7250  000696  6E67               	movwf	_Nec_state,c
  7251  000698  D076               	goto	i2l1674
  7252                           
  7253                           ;Lab10p1.c: 189: return;
  7254                           
  7255                           ;Lab10p1.c: 188: INTCON2bits.INTEDG0 = 1;
  7256  00069A  D088               	goto	i2l169
  7257  00069C                     i2l1618:
  7258                           
  7259                           ;Lab10p1.c: 193: {
  7260                           ;Lab10p1.c: 194: if ((Time_Elapsed >=8500) && (Time_Elapsed <=9500))
  7261  00069C  0E34               	movlw	52
  7262  00069E  5C5E               	subwf	_Time_Elapsed,w,c
  7263  0006A0  0E21               	movlw	33
  7264  0006A2  585F               	subwfb	_Time_Elapsed+1,w,c
  7265  0006A4  A0D8               	btfss	status,0,c
  7266  0006A6  D009               	goto	i2l1624
  7267  0006A8  0E1D               	movlw	29
  7268  0006AA  5C5E               	subwf	_Time_Elapsed,w,c
  7269  0006AC  0E25               	movlw	37
  7270  0006AE  585F               	subwfb	_Time_Elapsed+1,w,c
  7271  0006B0  B0D8               	btfsc	status,0,c
  7272  0006B2  D003               	goto	i2l1624
  7273                           
  7274                           ;Lab10p1.c: 195: {
  7275                           ;Lab10p1.c: 196: Nec_state = 2;
  7276  0006B4  0E02               	movlw	2
  7277  0006B6  6E67               	movwf	_Nec_state,c
  7278                           
  7279                           ;Lab10p1.c: 197: }
  7280  0006B8  D02A               	goto	i2l1648
  7281  0006BA                     i2l1624:
  7282                           
  7283                           ;Lab10p1.c: 198: else
  7284                           ;Lab10p1.c: 199: {
  7285                           ;Lab10p1.c: 200: force_nec_state0();
  7286  0006BA  EC42  F00B         	call	_force_nec_state0	;wreg free
  7287  0006BE  D027               	goto	i2l1648
  7288  0006C0  D026               	goto	i2l1648
  7289                           
  7290                           ;Lab10p1.c: 203: return;
  7291                           
  7292                           ;Lab10p1.c: 201: }
  7293                           ;Lab10p1.c: 202: INTCON2bits.INTEDG0 = 0;
  7294  0006C2  D074               	goto	i2l169
  7295  0006C4                     i2l1630:
  7296                           
  7297                           ;Lab10p1.c: 207: {
  7298                           ;Lab10p1.c: 208: if ((Time_Elapsed >=4000) && (Time_Elapsed <=5000))
  7299  0006C4  0EA0               	movlw	160
  7300  0006C6  5C5E               	subwf	_Time_Elapsed,w,c
  7301  0006C8  0E0F               	movlw	15
  7302  0006CA  585F               	subwfb	_Time_Elapsed+1,w,c
  7303  0006CC  A0D8               	btfss	status,0,c
  7304  0006CE  D009               	goto	i2l1636
  7305  0006D0  0E89               	movlw	137
  7306  0006D2  5C5E               	subwf	_Time_Elapsed,w,c
  7307  0006D4  0E13               	movlw	19
  7308  0006D6  585F               	subwfb	_Time_Elapsed+1,w,c
  7309  0006D8  B0D8               	btfsc	status,0,c
  7310  0006DA  D003               	goto	i2l1636
  7311                           
  7312                           ;Lab10p1.c: 209: {
  7313                           ;Lab10p1.c: 210: Nec_state = 3;
  7314  0006DC  0E03               	movlw	3
  7315  0006DE  6E67               	movwf	_Nec_state,c
  7316                           
  7317                           ;Lab10p1.c: 211: }
  7318  0006E0  D003               	goto	i2l1638
  7319  0006E2                     i2l1636:
  7320                           
  7321                           ;Lab10p1.c: 212: else
  7322                           ;Lab10p1.c: 213: {
  7323                           ;Lab10p1.c: 214: force_nec_state0();
  7324  0006E2  EC42  F00B         	call	_force_nec_state0	;wreg free
  7325  0006E6  D000               	goto	i2l1638
  7326  0006E8                     i2l1638:
  7327                           
  7328                           ;Lab10p1.c: 215: }
  7329                           ;Lab10p1.c: 216: INTCON2bits.INTEDG0 = 1;
  7330  0006E8  8CF1               	bsf	intcon2,6,c	;volatile
  7331  0006EA  D000               	goto	i2l1640
  7332  0006EC                     i2l1640:
  7333                           
  7334                           ;Lab10p1.c: 221: {
  7335                           ;Lab10p1.c: 222: if ((Time_Elapsed >=400) && (Time_Elapsed <=700))
  7336  0006EC  0E90               	movlw	144
  7337  0006EE  5C5E               	subwf	_Time_Elapsed,w,c
  7338  0006F0  0E01               	movlw	1
  7339  0006F2  585F               	subwfb	_Time_Elapsed+1,w,c
  7340  0006F4  A0D8               	btfss	status,0,c
  7341  0006F6  D008               	goto	i2l1646
  7342  0006F8  0EBD               	movlw	189
  7343  0006FA  5C5E               	subwf	_Time_Elapsed,w,c
  7344  0006FC  0E02               	movlw	2
  7345  0006FE  585F               	subwfb	_Time_Elapsed+1,w,c
  7346  000700  B0D8               	btfsc	status,0,c
  7347  000702  D002               	goto	i2l1646
  7348                           
  7349                           ;Lab10p1.c: 223: {
  7350                           ;Lab10p1.c: 224: Nec_state = 4;
  7351  000704  0E04               	movlw	4
  7352  000706  D7D7               	goto	L15
  7353  000708                     i2l1646:
  7354                           
  7355                           ;Lab10p1.c: 226: else
  7356                           ;Lab10p1.c: 227: {
  7357                           ;Lab10p1.c: 228: force_nec_state0();
  7358  000708  EC42  F00B         	call	_force_nec_state0	;wreg free
  7359  00070C  D000               	goto	i2l1648
  7360  00070E                     i2l1648:
  7361                           
  7362                           ;Lab10p1.c: 229: }
  7363                           ;Lab10p1.c: 230: INTCON2bits.INTEDG0 = 0;
  7364  00070E  9CF1               	bcf	intcon2,6,c	;volatile
  7365                           
  7366                           ;Lab10p1.c: 231: return;
  7367  000710  D04D               	goto	i2l169
  7368  000712                     i2l1652:
  7369                           
  7370                           ;Lab10p1.c: 235: {
  7371                           ;Lab10p1.c: 236: if ((Time_Elapsed >=400) && (Time_Elapsed <=1800))
  7372  000712  0E90               	movlw	144
  7373  000714  5C5E               	subwf	_Time_Elapsed,w,c
  7374  000716  0E01               	movlw	1
  7375  000718  585F               	subwfb	_Time_Elapsed+1,w,c
  7376  00071A  A0D8               	btfss	status,0,c
  7377  00071C  D031               	goto	i2l1672
  7378  00071E  0E09               	movlw	9
  7379  000720  5C5E               	subwf	_Time_Elapsed,w,c
  7380  000722  0E07               	movlw	7
  7381  000724  585F               	subwfb	_Time_Elapsed+1,w,c
  7382  000726  B0D8               	btfsc	status,0,c
  7383  000728  D02B               	goto	i2l1672
  7384                           
  7385                           ;Lab10p1.c: 237: {
  7386                           ;Lab10p1.c: 238: Nec_code = Nec_code << 1;
  7387  00072A  90D8               	bcf	status,0,c
  7388  00072C  345A               	rlcf	_Nec_code,w,c
  7389  00072E  6E5A               	movwf	_Nec_code,c
  7390  000730  345B               	rlcf	_Nec_code+1,w,c
  7391  000732  6E5B               	movwf	_Nec_code+1,c
  7392  000734  345C               	rlcf	_Nec_code+2,w,c
  7393  000736  6E5C               	movwf	_Nec_code+2,c
  7394  000738  345D               	rlcf	_Nec_code+3,w,c
  7395  00073A  6E5D               	movwf	_Nec_code+3,c
  7396                           
  7397                           ;Lab10p1.c: 239: if (Time_Elapsed > 1000)
  7398  00073C  0EE9               	movlw	233
  7399  00073E  5C5E               	subwf	_Time_Elapsed,w,c
  7400  000740  0E03               	movlw	3
  7401  000742  585F               	subwfb	_Time_Elapsed+1,w,c
  7402  000744  A0D8               	btfss	status,0,c
  7403  000746  D00D               	goto	i2l1660
  7404                           
  7405                           ;Lab10p1.c: 240: {
  7406                           ;Lab10p1.c: 241: Nec_code = Nec_code +1;
  7407  000748  0E01               	movlw	1
  7408  00074A  245A               	addwf	_Nec_code,w,c
  7409  00074C  6E5A               	movwf	_Nec_code,c
  7410  00074E  0E00               	movlw	0
  7411  000750  205B               	addwfc	_Nec_code+1,w,c
  7412  000752  6E5B               	movwf	_Nec_code+1,c
  7413  000754  0E00               	movlw	0
  7414  000756  205C               	addwfc	_Nec_code+2,w,c
  7415  000758  6E5C               	movwf	_Nec_code+2,c
  7416  00075A  0E00               	movlw	0
  7417  00075C  205D               	addwfc	_Nec_code+3,w,c
  7418  00075E  6E5D               	movwf	_Nec_code+3,c
  7419  000760  D000               	goto	i2l1660
  7420  000762                     i2l1660:
  7421                           
  7422                           ;Lab10p1.c: 242: }
  7423                           ;Lab10p1.c: 244: bit_count ++;
  7424  000762  2A69               	incf	_bit_count,f,c
  7425                           
  7426                           ;Lab10p1.c: 245: if (bit_count > 31)
  7427  000764  0E1F               	movlw	31
  7428  000766  6469               	cpfsgt	_bit_count,c
  7429  000768  D008               	goto	i2l1670
  7430                           
  7431                           ;Lab10p1.c: 246: {
  7432                           ;Lab10p1.c: 247: nec_ok = 1;
  7433  00076A  0E00               	movlw	0
  7434  00076C  6E63               	movwf	_nec_ok+1,c
  7435  00076E  0E01               	movlw	1
  7436  000770  6E62               	movwf	_nec_ok,c
  7437                           
  7438                           ;Lab10p1.c: 248: INTCONbits.INT0IE = 0;
  7439  000772  98F2               	bcf	intcon,4,c	;volatile
  7440                           
  7441                           ;Lab10p1.c: 249: force_nec_state0();
  7442  000774  EC42  F00B         	call	_force_nec_state0	;wreg free
  7443  000778  D000               	goto	i2l1670
  7444  00077A                     i2l1670:
  7445                           
  7446                           ;Lab10p1.c: 250: }
  7447                           ;Lab10p1.c: 251: Nec_state = 3;
  7448  00077A  0E03               	movlw	3
  7449  00077C  6E67               	movwf	_Nec_state,c
  7450                           
  7451                           ;Lab10p1.c: 252: }
  7452  00077E  D003               	goto	i2l1674
  7453  000780                     i2l1672:
  7454                           
  7455                           ;Lab10p1.c: 253: else
  7456                           ;Lab10p1.c: 254: {
  7457                           ;Lab10p1.c: 255: force_nec_state0();
  7458  000780  EC42  F00B         	call	_force_nec_state0	;wreg free
  7459  000784  D000               	goto	i2l1674
  7460  000786                     i2l1674:
  7461                           
  7462                           ;Lab10p1.c: 256: }
  7463                           ;Lab10p1.c: 257: INTCON2bits.INTEDG0 = 1;
  7464  000786  8CF1               	bsf	intcon2,6,c	;volatile
  7465                           
  7466                           ;Lab10p1.c: 259: }
  7467                           ;Lab10p1.c: 260: }
  7468                           
  7469                           ;Lab10p1.c: 258: return;
  7470  000788  D011               	goto	i2l169
  7471  00078A                     i2l1680:
  7472  00078A  5067               	movf	_Nec_state,w,c
  7473                           
  7474                           ; Switch size 1, requested type "space"
  7475                           ; Number of cases is 5, Range of values is 0 to 4
  7476                           ; switch strategies available:
  7477                           ; Name         Instructions Cycles
  7478                           ; simple_byte           16     9 (average)
  7479                           ;	Chosen strategy is simple_byte
  7480  00078C  0A00               	xorlw	0	; case 0
  7481  00078E  B4D8               	btfsc	status,2,c
  7482  000790  D76F               	goto	i2l1608
  7483  000792  0A01               	xorlw	1	; case 1
  7484  000794  B4D8               	btfsc	status,2,c
  7485  000796  D782               	goto	i2l1618
  7486  000798  0A03               	xorlw	3	; case 2
  7487  00079A  B4D8               	btfsc	status,2,c
  7488  00079C  D793               	goto	i2l1630
  7489  00079E  0A01               	xorlw	1	; case 3
  7490  0007A0  B4D8               	btfsc	status,2,c
  7491  0007A2  D7A4               	goto	i2l1640
  7492  0007A4  0A07               	xorlw	7	; case 4
  7493  0007A6  B4D8               	btfsc	status,2,c
  7494  0007A8  D7B4               	goto	i2l1652
  7495  0007AA  D000               	goto	i2l169
  7496  0007AC                     i2l169:
  7497  0007AC  0012               	return		;funcret
  7498  0007AE                     __end_of_INT0_isr:
  7499                           	opt stack 0
  7500                           pclatu	equ	0xFFB
  7501                           pclath	equ	0xFFA
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           intcon2	equ	0xFF1
  7510                           postinc0	equ	0xFEE
  7511                           fsr0h	equ	0xFEA
  7512                           fsr0l	equ	0xFE9
  7513                           wreg	equ	0xFE8
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _force_nec_state0 *****************
  7525 ;; Defined at:
  7526 ;;		line 113 in file "Lab10p1.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;		None
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;		None               void
  7533 ;; Registers used:
  7534 ;;		wreg, status,2
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;Total ram usage:        0 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		_INT0_isr
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text40
  7554  001684                     __ptext40:
  7555                           	opt stack 0
  7556  001684                     _force_nec_state0:
  7557                           	opt stack 20
  7558                           
  7559                           ;Lab10p1.c: 115: Nec_state=0;
  7560                           
  7561                           ;incstack = 0
  7562  001684  0E00               	movlw	0
  7563  001686  6E67               	movwf	_Nec_state,c
  7564                           
  7565                           ;Lab10p1.c: 116: T1CONbits.TMR1ON = 0;
  7566  001688  90CD               	bcf	4045,0,c	;volatile
  7567  00168A  0012               	return		;funcret
  7568  00168C                     __end_of_force_nec_state0:
  7569                           	opt stack 0
  7570                           pclatu	equ	0xFFB
  7571                           pclath	equ	0xFFA
  7572                           tblptru	equ	0xFF8
  7573                           tblptrh	equ	0xFF7
  7574                           tblptrl	equ	0xFF6
  7575                           tablat	equ	0xFF5
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           intcon	equ	0xFF2
  7579                           intcon2	equ	0xFF1
  7580                           postinc0	equ	0xFEE
  7581                           fsr0h	equ	0xFEA
  7582                           fsr0l	equ	0xFE9
  7583                           wreg	equ	0xFE8
  7584                           postdec1	equ	0xFE5
  7585                           fsr1h	equ	0xFE2
  7586                           fsr1l	equ	0xFE1
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           pclatu	equ	0xFFB
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           postinc0	equ	0xFEE
  7604                           fsr0h	equ	0xFEA
  7605                           fsr0l	equ	0xFE9
  7606                           wreg	equ	0xFE8
  7607                           postdec1	equ	0xFE5
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617                           	psect	rparam
  7618  0000                     pclatu	equ	0xFFB
  7619                           pclath	equ	0xFFA
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodh	equ	0xFF4
  7625                           prodl	equ	0xFF3
  7626                           intcon	equ	0xFF2
  7627                           intcon2	equ	0xFF1
  7628                           postinc0	equ	0xFEE
  7629                           fsr0h	equ	0xFEA
  7630                           fsr0l	equ	0xFE9
  7631                           wreg	equ	0xFE8
  7632                           postdec1	equ	0xFE5
  7633                           fsr1h	equ	0xFE2
  7634                           fsr1l	equ	0xFE1
  7635                           indf2	equ	0xFDF
  7636                           postinc2	equ	0xFDE
  7637                           postdec2	equ	0xFDD
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    507
    Data        253
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     108
    BANK0           128     11     105
    BANK1           256      0     168
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[8]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   51549
                                             66 COMRAM     1     1      0
                                              7 BANK0      4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
                             _set_d1
                             _set_d2
                             _set_d3
                       _wait_one_sec
 ---------------------------------------------------------------------------------
 (1) _wait_one_sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _set_d3                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_d2                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_d1                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2317
                                             29 COMRAM    25    17      8
                            ___lldiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     371
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20983
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___wmul
     _isdigit
     _putch
   _set_d1
   _set_d2
   _set_d3
   _wait_one_sec

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A8       7       65.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      69       5       82.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17D      34        0.0%
DATA                 0      0     17D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 15 13:32:21 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006B                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _d1 0080                                _d2 0095  
                              _d3 00AA               ___wmul@multiplicand 0013  
                             l113 1666                               l140 12A0  
                             l141 12D0                               l134 1284  
                             l150 1248                               l206 15A0  
                             l151 124E                               l304 106C  
                             l320 0902                               l136 1288  
                             l152 127E                               l160 11F2  
                             l137 128E                               l145 1232  
                             l161 11F6                               l322 07DC  
                             l138 1296                               l162 11FC  
                             l139 129A                               l147 1236  
                             l163 122C                               l244 136E  
                             l500 11BE                               l148 123C  
                             l156 11E0                               l501 11C0  
                             l149 1244                               l254 1618  
                             l158 11E4                               l503 11DA  
                             l159 11EA                               l360 0DFE  
                             l329 0858                               l361 0E20  
                             l506 157C                               l357 0E22  
                             l358 0D8E                               l470 02BC  
                             l368 055C                               l449 0114  
                             l298 152A                               l386 0972  
                             l494 1198                               l498 11B2  
                             l499 11B4                               l937 15C2  
                             l966 0FD4                               _PR2 000FCB  
               _Deactivate_Buzzer 167C                               _nbr 0060  
                             _txt 0064                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 152C                      __CFG_WDT$OFF 000000  
                  drawFastVLine@h 0019                              l1068 148A  
                            l4000 0440                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l3314 150C  
                            l3322 13CE                              l3326 13EA  
                            l3510 0E02                              l3272 0FF6  
                            l3432 07D8                              l3424 07BE  
                            l3520 0E1C                              l3442 0818  
                            l3434 07E0                              l3610 0C38  
                            l3602 0BE6                              l3514 0E0C  
                            l3506 0DF4                              l3276 102E  
                            l3444 084C                              l3428 07CA  
                            l3612 0C40                              l3286 1054  
                            l3462 08CE                              l3454 087A  
                            l3470 08FE                              l3446 0850  
                            l3438 07E8                              l3542 1190  
                            l3534 117E                              l3288 1062  
                            l3464 08F6                              l3456 08A2  
                            l3640 14D4                              l3800 019E  
                            l3642 14DE                              l3554 11AA  
                            l3546 119C                              l3538 1188  
                            l3706 0FC4                              l3810 01D8  
                            l3730 1204                              l3476 1458  
                            l3820 0210                              l3804 01C2  
                            l3724 1256                              l3478 145E  
                            l3494 0DC6                              l3670 09D4  
                            l3654 0958                              l3822 021C  
                            l3814 01F0                              l3806 01CC  
                            l3830 02A0                              l3718 12A8  
                            l3488 0D58                              l3816 01F8  
                            l3760 0064                              l3752 0036  
                            l3586 0B78                              l3674 0A26  
                            l3754 0044                              l3852 0542  
                            l3684 15BA                              l3828 028C  
                            l3772 00E4                              l3764 0082  
                            l3748 0026                              l3598 0BC8  
                            l3694 0F7C                              l3782 0134  
                            l3758 004E                              l3880 0632  
                            l3696 0F8A                              l3792 016A  
                            l3776 00EE                              l3960 030C  
                            l3698 0F92                              l3786 015A  
                            l3890 159A                              l3796 019A  
                            l3788 015E                              l3886 1586  
                            l3990 039E                              l3982 0372  
                            l3986 0394                              l3978 0358  
                            STR_1 FFBC                              STR_2 FFD2  
                            STR_3 FFF7                              STR_4 FFE6  
                            u2400 0D86                              u2170 1024  
                            u2330 08B0                              u2410 0DBC  
                            u2580 0BA2                              _TRMT 007D61  
             ??_Deactivate_Buzzer 0011                              _main 02BE  
                            _font FDC1                              fsr0h 000FEA  
                            _txt1 0154                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 0059  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   ??_drawFastVLine 001C  
                    ___param_bank 000010                       ?_TIMER1_isr 0001  
                __end_of_INT0_isr 07AE         __end_of_Deactivate_Buzzer 1684  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 0FE6  
                           _T1CON 000FCD                             _T2CON 000FCA  
                           _T3CON 000FB1                             i2l124 1132  
                           i2l169 07AC                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR1H 000FCF  
                           _TMR3H 000FB3                             _TMR1L 000FCE  
                           _TMR3L 000FB2                             _SPBRG 000FAF  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Rcmd1 0A3C  
                           _Rcmd3 0C56                             _nRBPU 007F8F  
                           _color 0100                             _font2 FEC0  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 15C4             fillCircleHelper@delta 002B  
                           _putch 1662             fillCircleHelper@color 002D  
                           main@i 00E7                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 106E  
                    __end_of_main 049A                      __end_of_font FEC0  
                __end_of_Rcmd2red 14CA                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 1630  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                          _CCPR2L 000FBB                            ?_putch 0001  
                          i2l1630 06C4                            i2l1640 06EC  
                          i2l1624 06BA                            i2l1608 0670  
                          i2l1618 069C                            i2l1660 0762  
                          i2l1652 0712                            i2l1636 06E2  
                          i2l1670 077A                            i2l1646 0708  
                          i2l1638 06E8                            i2l1672 0780  
                          i2l1648 070E                            i2l1680 078A  
                          i2l1674 0786                            i2l1894 1128  
                          _OSCCON 000FD3               __size_of_TIMER1_isr 000C  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                _force_nec_state0 1684                  __end_of_delay_ms 1376  
                __end_of_fillRect 140E                  __end_of_drawChar 0904  
              __size_of_OpenUSART 0070          __size_of_Activate_Buzzer 0012  
                          ___wmul 1556         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0C56                         ??___lldiv 0019  
                          _chkisr 0008                            _array1 0044  
                          _buffer 00BF                            _nec_ok 0062  
                          clear_0 1074                            clear_1 1080  
                          _set_d1 1280                            _set_d2 122E  
                          _set_d3 11DC        __size_of_Deactivate_Buzzer 0008  
                          _printf 001C                      drawtext@size 0040  
                          _strcpy 14CA                            _strlen 144E  
                    __pdataCOMRAM 0044                         ??_isdigit 0011  
                    __mediumconst FDC0                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 161E  
                      __accesstop 0080           __end_of__initialization 10E6  
                       ?_INT0_isr 0001                     ___rparam_used 000001  
                   __end_of_Rcmd1 0B4C                     __end_of_Rcmd3 0D48  
                  __pcstackCOMRAM 0001                      __pidataBANK0 140E  
                    __pidataBANK1 0E24                     __end_of_font2 FF9C  
                   __end_of_putch 1670                    drawPixel@color 0019  
          __size_of_write_command 0010        fillCircleHelper@cornername 0029  
                         ??_Rcmd1 001D                           ??_Rcmd3 001D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 11DC  
                         ??_putch 0011                        __pbssBANK0 00BF  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                       set_d1@color 0011  
                         ?___wmul 0011                       set_d2@color 0011  
                     set_d3@color 0011                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
                    ??_TIMER1_isr 0001                           ?_set_d1 0001  
                         ?_set_d2 0001                           ?_set_d3 0001  
                      _fillCircle 12D2                           ?_printf 001E  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 15C4  
                      _drawCircle 049A                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                        _color_font 012A  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0E24  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
              __end_of_TIMER1_isr 167C                     _write_command 1652  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 152C             __end_of_drawFastVLine 106E  
                _fillCircleHelper 0904                           ___lldiv 0F5A  
                 __size_of___wmul 0028                   __size_of_chkisr 1164  
                       ?_spiwrite 0001                           __pcinit 106E  
                         __ramtop 1000                   __size_of_set_d1 0052  
                 __size_of_set_d2 0052                   __size_of_set_d3 0052  
                         __ptext0 02BE                           __ptext1 157E  
                         __ptext2 11DC                           __ptext3 122E  
                         __ptext4 1280                           __ptext5 001C  
                         __ptext6 1662                           __ptext7 15A2  
                         __ptext8 0F5A                           __ptext9 15F6  
                 __size_of_printf 02A2                 __end_of_init_UART 160A  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FFBC          __end_of_force_nec_state0 168C  
                       _T1CONbits 000FCD                           _isdigit 15A2  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 161E                     _setAddrWindow 1376  
                  __pintcode_body 10F0                        delay_ms@ms 0017  
            end_of_initialization 10E6                     ?_wait_one_sec 0001  
                      ??_drawtext 0041                    ?_write_command 0001  
                   __Lmediumconst FDC0                           int_func 10F0  
                 ___lldiv@divisor 0015                   ___lldiv@counter 001D  
                       _RCSTAbits 000FAB                           printf@c 0036  
                         printf@f 001E                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                        ??_spiwrite 0011  
                         strlen@s 0011                   fillCircle@color 0041  
                     ?_fillCircle 003B                         _PORTAbits 000F80  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _PORTDbits 000F83                       ?_fillScreen 0024  
                     ?_drawCircle 001C                        drawChar@bg 0032  
                       _TRISCbits 000F94                    ?_setAddrWindow 0014  
                      ?_LCD_Reset 0001                    ??_wait_one_sec 0011  
                drawtext@textsize 00DF                        drawPixel@x 001B  
                      drawPixel@y 0018                       printf@width 0034  
                       _TXSTAbits 000FAC                 __size_of_INT0_isr 0166  
                  __end_of___wmul 157E                     delay_ms@count 001B  
                      _write_data 1642                     __pidataCOMRAM 15E0  
                  __end_of_chkisr 116C          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003E                    __end_of_set_d1 12D2  
                  __end_of_set_d2 1280                    __end_of_set_d3 122E  
                       _Nec_code1 0066                    __end_of_printf 02BE  
                  __end_of_strcpy 14FC                    __end_of_strlen 148C  
                       _Nec_state 0067               start_initialization 106E  
                 ??_write_command 0013                         _OpenUSART 116C  
             __size_of_fillCircle 0052                  __CFG_OSC$INTIO67 000000  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                   _Activate_Buzzer 1630  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                        ??_set_d1 0011                          ??_set_d2 0011  
                        ??_set_d3 0011                   setAddrWindow@x0 0017  
                 setAddrWindow@x1 0015                   setAddrWindow@y0 0014  
                 setAddrWindow@y1 0016                          ??_printf 0026  
                        ??_strcpy 0015                          ??_strlen 0013  
                     __pbssCOMRAM 005A                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00DE                       ??_LCD_Reset 001D  
                    _isdigit$1782 0012          __end_of_fillCircleHelper 0A3C  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0011  
               __size_of_drawtext 010A                         _bit_count 0069  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 1556  
                   __pmediumconst FDC0                          ?___lldiv 0011  
                       __tft_type 0068              __end_of_wait_one_sec 15A2  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 14FC                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0ECC                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 15F6  
              ??_force_nec_state0 0001                         _hexpowers FF9C  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 1642                    ___wmul@product 0015  
             ??_Initialize_Screen 0043                          _INT0_isr 0648  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 0F5A  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 0033                         main@led_c 00E6  
                      printf@prec 002B                         main@found 00E5  
                      ?_init_UART 0001                       _INTCON2bits 000FF1  
                       copy_data0 109A                         copy_data1 10BA  
                       copy_data2 10DA                         drawtext@i 00E1  
          __size_of_drawFastVLine 0088                         drawtext@x 00DE  
                       drawtext@y 0039                          _Nec_code 005A  
               write_command@cmd_ 0013                       ??_OpenUSART 0013  
                        _Rcmd2red 148C               __size_of_write_data 0010  
                 OpenUSART@config 0013                      _Time_Elapsed 005E  
              __end_of_fillCircle 1324                          __Hrparam 0000  
              __end_of_fillScreen 15E0                          __Lrparam 0000  
              __end_of_drawCircle 0648                  __size_of___lldiv 008C  
                __size_of_isdigit 0022                          _delay_ms 1324  
                        __ptext10 116C                          __ptext11 12D2  
                        __ptext20 07AE                          __ptext12 0904  
                        __ptext21 13C4                          __ptext13 049A  
                        __ptext30 1652                          __ptext22 0FE6  
                        __ptext14 0ECC                          __ptext31 160A  
                        __ptext23 14FC                          __ptext15 14CA  
                        __ptext40 1684                          __ptext32 161E  
                        __ptext24 1376                          __ptext16 15C4  
                        __ptext33 1324                          __ptext25 152C  
                        __ptext17 0D48                          __ptext34 1556  
                        __ptext26 0C56                          __ptext18 0B4C  
                        __ptext35 167C                          __ptext27 148C  
                        __ptext19 144E                          __ptext36 1630  
                        __ptext28 0A3C                          __ptext29 1642  
                        __ptext38 1670                          __ptext39 0648  
                        _fillRect 13C4                          _drawChar 07AE  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006A  
                        _drawtext 0B4C                        strcpy@from 0013  
                   _fillRectangle 0D48                  ?_Activate_Buzzer 0001  
                   __size_of_main 01DC             __size_of_wait_one_sec 0024  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 0FE6                         printf@idx 002A  
                        _spiwrite 160A                         printf@val 002D  
                     ??_drawPixel 001B                          _rowstart 006C  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
                        isdigit@c 0013                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                      _wait_one_sec 157E  
              ??_fillCircleHelper 002F             __end_of_write_command 1662  
                ___lldiv@dividend 0011                     wait_one_sec@k 0011  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0031                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 1670                     fillRect@color 0026  
                ___lldiv@quotient 0019                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                     fillCircle@r 003F             __end_of_setAddrWindow 13C4  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 1652         __size_of_force_nec_state0 0008  
                    drawChar@line 0035                      drawChar@size 0034  
