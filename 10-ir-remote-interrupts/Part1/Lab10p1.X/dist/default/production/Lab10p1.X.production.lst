

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 15 18:12:29 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  001626                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _array1
    67  001626  A2                 	db	162
    68  001627  62                 	db	98
    69  001628  E2                 	db	226
    70  001629  22                 	db	34
    71  00162A  02                 	db	2
    72  00162B  C2                 	db	194
    73  00162C  E0                 	db	224
    74  00162D  A8                 	db	168
    75  00162E  90                 	db	144
    76  00162F  68                 	db	104
    77  001630  98                 	db	152
    78  001631  B0                 	db	176
    79  001632  30                 	db	48
    80  001633  18                 	db	24
    81  001634  7A                 	db	122
    82  001635  10                 	db	16
    83  001636  38                 	db	56
    84  001637  5A                 	db	90
    85  001638  42                 	db	66
    86  001639  4A                 	db	74
    87  00163A  52                 	db	82
    88                           
    89                           ;initializer for _wrap
    90  00163B  01                 	db	1
    91                           
    92                           	psect	idataBANK0
    93  0011DA                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _color
    97  0011DA  F800               	dw	63488
    98  0011DC  F800               	dw	63488
    99  0011DE  F800               	dw	63488
   100  0011E0  001F               	dw	31
   101  0011E2  001F               	dw	31
   102  0011E4  07E0               	dw	2016
   103  0011E6  F81F               	dw	63519
   104  0011E8  F81F               	dw	63519
   105  0011EA  F81F               	dw	63519
   106  0011EC  FFFF               	dw	65535
   107  0011EE  FFFF               	dw	65535
   108  0011F0  FFFF               	dw	65535
   109  0011F2  FFFF               	dw	65535
   110  0011F4  FFFF               	dw	65535
   111  0011F6  FFFF               	dw	65535
   112  0011F8  FFFF               	dw	65535
   113  0011FA  FFFF               	dw	65535
   114  0011FC  FFFF               	dw	65535
   115  0011FE  FFFF               	dw	65535
   116  001200  FFFF               	dw	65535
   117  001202  FFFF               	dw	65535
   118                           
   119                           ;initializer for _d1
   120  001204  01                 	db	1
   121  001205  01                 	db	1
   122  001206  01                 	db	1
   123  001207  00                 	db	0
   124  001208  00                 	db	0
   125  001209  00                 	db	0
   126  00120A  00                 	db	0
   127  00120B  00                 	db	0
   128  00120C  00                 	db	0
   129  00120D  00                 	db	0
   130  00120E  00                 	db	0
   131  00120F  00                 	db	0
   132  001210  00                 	db	0
   133  001211  00                 	db	0
   134  001212  00                 	db	0
   135  001213  00                 	db	0
   136  001214  00                 	db	0
   137  001215  00                 	db	0
   138  001216  00                 	db	0
   139  001217  00                 	db	0
   140  001218  00                 	db	0
   141                           
   142                           ;initializer for _d2
   143  001219  00                 	db	0
   144  00121A  00                 	db	0
   145  00121B  00                 	db	0
   146  00121C  06                 	db	6
   147  00121D  06                 	db	6
   148  00121E  02                 	db	2
   149  00121F  03                 	db	3
   150  001220  03                 	db	3
   151  001221  04                 	db	4
   152  001222  05                 	db	5
   153  001223  05                 	db	5
   154  001224  05                 	db	5
   155  001225  00                 	db	0
   156  001226  00                 	db	0
   157  001227  00                 	db	0
   158  001228  00                 	db	0
   159  001229  00                 	db	0
   160  00122A  00                 	db	0
   161  00122B  00                 	db	0
   162  00122C  00                 	db	0
   163  00122D  00                 	db	0
   164                           
   165                           ;initializer for _d3
   166  00122E  00                 	db	0
   167  00122F  00                 	db	0
   168  001230  00                 	db	0
   169  001231  00                 	db	0
   170  001232  00                 	db	0
   171  001233  00                 	db	0
   172  001234  00                 	db	0
   173  001235  00                 	db	0
   174  001236  00                 	db	0
   175  001237  00                 	db	0
   176  001238  00                 	db	0
   177  001239  00                 	db	0
   178  00123A  05                 	db	5
   179  00123B  05                 	db	5
   180  00123C  05                 	db	5
   181  00123D  05                 	db	5
   182  00123E  05                 	db	5
   183  00123F  05                 	db	5
   184  001240  05                 	db	5
   185  001241  05                 	db	5
   186  001242  05                 	db	5
   187                           
   188                           	psect	idataBANK1
   189  001070                     __pidataBANK1:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _color_font
   193  001070  FFFF               	dw	65535
   194  001072  FFFF               	dw	65535
   195  001074  FFFF               	dw	65535
   196  001076  FFFF               	dw	65535
   197  001078  FFFF               	dw	65535
   198  00107A  FFFF               	dw	65535
   199  00107C  FFFF               	dw	65535
   200  00107E  FFFF               	dw	65535
   201  001080  FFFF               	dw	65535
   202  001082  0000               	dw	0
   203  001084  0000               	dw	0
   204  001086  0000               	dw	0
   205  001088  0000               	dw	0
   206  00108A  0000               	dw	0
   207  00108C  0000               	dw	0
   208  00108E  0000               	dw	0
   209  001090  0000               	dw	0
   210  001092  0000               	dw	0
   211  001094  0000               	dw	0
   212  001096  0000               	dw	0
   213  001098  0000               	dw	0
   214                           
   215                           ;initializer for _txt1
   216  00109A  43                 	db	67
   217  00109B  48                 	db	72
   218  00109C  2D                 	db	45
   219  00109D  00                 	db	0
   220  00109E  43                 	db	67
   221  00109F  48                 	db	72
   222  0010A0  20                 	db	32
   223  0010A1  00                 	db	0
   224  0010A2  43                 	db	67
   225  0010A3  48                 	db	72
   226  0010A4  2B                 	db	43
   227  0010A5  00                 	db	0
   228  0010A6  7C                 	db	124
   229  0010A7  3C                 	db	60
   230  0010A8  3C                 	db	60
   231  0010A9  00                 	db	0
   232  0010AA  3E                 	db	62
   233  0010AB  3E                 	db	62
   234  0010AC  7C                 	db	124
   235  0010AD  00                 	db	0
   236  0010AE  3E                 	db	62
   237  0010AF  7C                 	db	124
   238  0010B0  7C                 	db	124
   239  0010B1  00                 	db	0
   240  0010B2  56                 	db	86
   241  0010B3  4C                 	db	76
   242  0010B4  2D                 	db	45
   243  0010B5  00                 	db	0
   244  0010B6  56                 	db	86
   245  0010B7  4C                 	db	76
   246  0010B8  2B                 	db	43
   247  0010B9  00                 	db	0
   248  0010BA  45                 	db	69
   249  0010BB  51                 	db	81
   250  0010BC  00                 	db	0
   251  0010BD  00                 	db	0
   252  0010BE  20                 	db	32
   253  0010BF  30                 	db	48
   254  0010C0  20                 	db	32
   255  0010C1  00                 	db	0
   256  0010C2  31                 	db	49
   257  0010C3  30                 	db	48
   258  0010C4  30                 	db	48
   259  0010C5  00                 	db	0
   260  0010C6  32                 	db	50
   261  0010C7  30                 	db	48
   262  0010C8  30                 	db	48
   263  0010C9  00                 	db	0
   264  0010CA  20                 	db	32
   265  0010CB  31                 	db	49
   266  0010CC  20                 	db	32
   267  0010CD  00                 	db	0
   268  0010CE  20                 	db	32
   269  0010CF  32                 	db	50
   270  0010D0  20                 	db	32
   271  0010D1  00                 	db	0
   272  0010D2  20                 	db	32
   273  0010D3  33                 	db	51
   274  0010D4  20                 	db	32
   275  0010D5  00                 	db	0
   276  0010D6  20                 	db	32
   277  0010D7  34                 	db	52
   278  0010D8  20                 	db	32
   279  0010D9  00                 	db	0
   280  0010DA  20                 	db	32
   281  0010DB  35                 	db	53
   282  0010DC  20                 	db	32
   283  0010DD  00                 	db	0
   284  0010DE  20                 	db	32
   285  0010DF  36                 	db	54
   286  0010E0  20                 	db	32
   287  0010E1  00                 	db	0
   288  0010E2  20                 	db	32
   289  0010E3  37                 	db	55
   290  0010E4  20                 	db	32
   291  0010E5  00                 	db	0
   292  0010E6  20                 	db	32
   293  0010E7  38                 	db	56
   294  0010E8  20                 	db	32
   295  0010E9  00                 	db	0
   296  0010EA  20                 	db	32
   297  0010EB  39                 	db	57
   298  0010EC  20                 	db	32
   299  0010ED  00                 	db	0
   300                           
   301                           	psect	mediumconst
   302  00FDC0                     __pmediumconst:
   303                           	opt stack 0
   304  00FDC0  00                 	db	0
   305  00FDC1                     _font:
   306                           	opt stack 0
   307  00FDC1  00                 	db	0
   308  00FDC2  00                 	db	0
   309  00FDC3  00                 	db	0
   310  00FDC4  00                 	db	0
   311  00FDC5  00                 	db	0
   312  00FDC6  00                 	db	0
   313  00FDC7  00                 	db	0
   314  00FDC8  5F                 	db	95
   315  00FDC9  00                 	db	0
   316  00FDCA  00                 	db	0
   317  00FDCB  00                 	db	0
   318  00FDCC  07                 	db	7
   319  00FDCD  00                 	db	0
   320  00FDCE  07                 	db	7
   321  00FDCF  00                 	db	0
   322  00FDD0  14                 	db	20
   323  00FDD1  7F                 	db	127
   324  00FDD2  14                 	db	20
   325  00FDD3  7F                 	db	127
   326  00FDD4  14                 	db	20
   327  00FDD5  24                 	db	36
   328  00FDD6  2A                 	db	42
   329  00FDD7  7F                 	db	127
   330  00FDD8  2A                 	db	42
   331  00FDD9  12                 	db	18
   332  00FDDA  23                 	db	35
   333  00FDDB  13                 	db	19
   334  00FDDC  08                 	db	8
   335  00FDDD  64                 	db	100
   336  00FDDE  62                 	db	98
   337  00FDDF  36                 	db	54
   338  00FDE0  49                 	db	73
   339  00FDE1  56                 	db	86
   340  00FDE2  20                 	db	32
   341  00FDE3  50                 	db	80
   342  00FDE4  00                 	db	0
   343  00FDE5  08                 	db	8
   344  00FDE6  07                 	db	7
   345  00FDE7  03                 	db	3
   346  00FDE8  00                 	db	0
   347  00FDE9  00                 	db	0
   348  00FDEA  1C                 	db	28
   349  00FDEB  22                 	db	34
   350  00FDEC  41                 	db	65
   351  00FDED  00                 	db	0
   352  00FDEE  00                 	db	0
   353  00FDEF  41                 	db	65
   354  00FDF0  22                 	db	34
   355  00FDF1  1C                 	db	28
   356  00FDF2  00                 	db	0
   357  00FDF3  2A                 	db	42
   358  00FDF4  1C                 	db	28
   359  00FDF5  7F                 	db	127
   360  00FDF6  1C                 	db	28
   361  00FDF7  2A                 	db	42
   362  00FDF8  08                 	db	8
   363  00FDF9  08                 	db	8
   364  00FDFA  3E                 	db	62
   365  00FDFB  08                 	db	8
   366  00FDFC  08                 	db	8
   367  00FDFD  00                 	db	0
   368  00FDFE  80                 	db	128
   369  00FDFF  70                 	db	112
   370  00FE00  30                 	db	48
   371  00FE01  00                 	db	0
   372  00FE02  08                 	db	8
   373  00FE03  08                 	db	8
   374  00FE04  08                 	db	8
   375  00FE05  08                 	db	8
   376  00FE06  08                 	db	8
   377  00FE07  00                 	db	0
   378  00FE08  00                 	db	0
   379  00FE09  60                 	db	96
   380  00FE0A  60                 	db	96
   381  00FE0B  00                 	db	0
   382  00FE0C  20                 	db	32
   383  00FE0D  10                 	db	16
   384  00FE0E  08                 	db	8
   385  00FE0F  04                 	db	4
   386  00FE10  02                 	db	2
   387  00FE11  3E                 	db	62
   388  00FE12  51                 	db	81
   389  00FE13  49                 	db	73
   390  00FE14  45                 	db	69
   391  00FE15  3E                 	db	62
   392  00FE16  00                 	db	0
   393  00FE17  42                 	db	66
   394  00FE18  7F                 	db	127
   395  00FE19  40                 	db	64
   396  00FE1A  00                 	db	0
   397  00FE1B  72                 	db	114
   398  00FE1C  49                 	db	73
   399  00FE1D  49                 	db	73
   400  00FE1E  49                 	db	73
   401  00FE1F  46                 	db	70
   402  00FE20  21                 	db	33
   403  00FE21  41                 	db	65
   404  00FE22  49                 	db	73
   405  00FE23  4D                 	db	77
   406  00FE24  33                 	db	51
   407  00FE25  18                 	db	24
   408  00FE26  14                 	db	20
   409  00FE27  12                 	db	18
   410  00FE28  7F                 	db	127
   411  00FE29  10                 	db	16
   412  00FE2A  27                 	db	39
   413  00FE2B  45                 	db	69
   414  00FE2C  45                 	db	69
   415  00FE2D  45                 	db	69
   416  00FE2E  39                 	db	57
   417  00FE2F  3C                 	db	60
   418  00FE30  4A                 	db	74
   419  00FE31  49                 	db	73
   420  00FE32  49                 	db	73
   421  00FE33  31                 	db	49
   422  00FE34  41                 	db	65
   423  00FE35  21                 	db	33
   424  00FE36  11                 	db	17
   425  00FE37  09                 	db	9
   426  00FE38  07                 	db	7
   427  00FE39  36                 	db	54
   428  00FE3A  49                 	db	73
   429  00FE3B  49                 	db	73
   430  00FE3C  49                 	db	73
   431  00FE3D  36                 	db	54
   432  00FE3E  46                 	db	70
   433  00FE3F  49                 	db	73
   434  00FE40  49                 	db	73
   435  00FE41  29                 	db	41
   436  00FE42  1E                 	db	30
   437  00FE43  00                 	db	0
   438  00FE44  00                 	db	0
   439  00FE45  14                 	db	20
   440  00FE46  00                 	db	0
   441  00FE47  00                 	db	0
   442  00FE48  00                 	db	0
   443  00FE49  40                 	db	64
   444  00FE4A  34                 	db	52
   445  00FE4B  00                 	db	0
   446  00FE4C  00                 	db	0
   447  00FE4D  00                 	db	0
   448  00FE4E  08                 	db	8
   449  00FE4F  14                 	db	20
   450  00FE50  22                 	db	34
   451  00FE51  41                 	db	65
   452  00FE52  14                 	db	20
   453  00FE53  14                 	db	20
   454  00FE54  14                 	db	20
   455  00FE55  14                 	db	20
   456  00FE56  14                 	db	20
   457  00FE57  00                 	db	0
   458  00FE58  41                 	db	65
   459  00FE59  22                 	db	34
   460  00FE5A  14                 	db	20
   461  00FE5B  08                 	db	8
   462  00FE5C  02                 	db	2
   463  00FE5D  01                 	db	1
   464  00FE5E  59                 	db	89
   465  00FE5F  09                 	db	9
   466  00FE60  06                 	db	6
   467  00FE61  3E                 	db	62
   468  00FE62  41                 	db	65
   469  00FE63  5D                 	db	93
   470  00FE64  59                 	db	89
   471  00FE65  4E                 	db	78
   472  00FE66  7C                 	db	124
   473  00FE67  12                 	db	18
   474  00FE68  11                 	db	17
   475  00FE69  12                 	db	18
   476  00FE6A  7C                 	db	124
   477  00FE6B  7F                 	db	127
   478  00FE6C  49                 	db	73
   479  00FE6D  49                 	db	73
   480  00FE6E  49                 	db	73
   481  00FE6F  36                 	db	54
   482  00FE70  3E                 	db	62
   483  00FE71  41                 	db	65
   484  00FE72  41                 	db	65
   485  00FE73  41                 	db	65
   486  00FE74  22                 	db	34
   487  00FE75  7F                 	db	127
   488  00FE76  41                 	db	65
   489  00FE77  41                 	db	65
   490  00FE78  41                 	db	65
   491  00FE79  3E                 	db	62
   492  00FE7A  7F                 	db	127
   493  00FE7B  49                 	db	73
   494  00FE7C  49                 	db	73
   495  00FE7D  49                 	db	73
   496  00FE7E  41                 	db	65
   497  00FE7F  7F                 	db	127
   498  00FE80  09                 	db	9
   499  00FE81  09                 	db	9
   500  00FE82  09                 	db	9
   501  00FE83  01                 	db	1
   502  00FE84  3E                 	db	62
   503  00FE85  41                 	db	65
   504  00FE86  41                 	db	65
   505  00FE87  51                 	db	81
   506  00FE88  73                 	db	115
   507  00FE89  7F                 	db	127
   508  00FE8A  08                 	db	8
   509  00FE8B  08                 	db	8
   510  00FE8C  08                 	db	8
   511  00FE8D  7F                 	db	127
   512  00FE8E  00                 	db	0
   513  00FE8F  41                 	db	65
   514  00FE90  7F                 	db	127
   515  00FE91  41                 	db	65
   516  00FE92  00                 	db	0
   517  00FE93  20                 	db	32
   518  00FE94  40                 	db	64
   519  00FE95  41                 	db	65
   520  00FE96  3F                 	db	63
   521  00FE97  01                 	db	1
   522  00FE98  7F                 	db	127
   523  00FE99  08                 	db	8
   524  00FE9A  14                 	db	20
   525  00FE9B  22                 	db	34
   526  00FE9C  41                 	db	65
   527  00FE9D  7F                 	db	127
   528  00FE9E  40                 	db	64
   529  00FE9F  40                 	db	64
   530  00FEA0  40                 	db	64
   531  00FEA1  40                 	db	64
   532  00FEA2  7F                 	db	127
   533  00FEA3  02                 	db	2
   534  00FEA4  1C                 	db	28
   535  00FEA5  02                 	db	2
   536  00FEA6  7F                 	db	127
   537  00FEA7  7F                 	db	127
   538  00FEA8  04                 	db	4
   539  00FEA9  08                 	db	8
   540  00FEAA  10                 	db	16
   541  00FEAB  7F                 	db	127
   542  00FEAC  3E                 	db	62
   543  00FEAD  41                 	db	65
   544  00FEAE  41                 	db	65
   545  00FEAF  41                 	db	65
   546  00FEB0  3E                 	db	62
   547  00FEB1  7F                 	db	127
   548  00FEB2  09                 	db	9
   549  00FEB3  09                 	db	9
   550  00FEB4  09                 	db	9
   551  00FEB5  06                 	db	6
   552  00FEB6  3E                 	db	62
   553  00FEB7  41                 	db	65
   554  00FEB8  51                 	db	81
   555  00FEB9  21                 	db	33
   556  00FEBA  5E                 	db	94
   557  00FEBB  7F                 	db	127
   558  00FEBC  09                 	db	9
   559  00FEBD  19                 	db	25
   560  00FEBE  29                 	db	41
   561  00FEBF  46                 	db	70
   562  00FEC0                     __end_of_font:
   563                           	opt stack 0
   564  00FEC0                     _font2:
   565                           	opt stack 0
   566  00FEC0  26                 	db	38
   567  00FEC1  49                 	db	73
   568  00FEC2  49                 	db	73
   569  00FEC3  49                 	db	73
   570  00FEC4  32                 	db	50
   571  00FEC5  03                 	db	3
   572  00FEC6  01                 	db	1
   573  00FEC7  7F                 	db	127
   574  00FEC8  01                 	db	1
   575  00FEC9  03                 	db	3
   576  00FECA  3F                 	db	63
   577  00FECB  40                 	db	64
   578  00FECC  40                 	db	64
   579  00FECD  40                 	db	64
   580  00FECE  3F                 	db	63
   581  00FECF  1F                 	db	31
   582  00FED0  20                 	db	32
   583  00FED1  40                 	db	64
   584  00FED2  20                 	db	32
   585  00FED3  1F                 	db	31
   586  00FED4  3F                 	db	63
   587  00FED5  40                 	db	64
   588  00FED6  38                 	db	56
   589  00FED7  40                 	db	64
   590  00FED8  3F                 	db	63
   591  00FED9  63                 	db	99
   592  00FEDA  14                 	db	20
   593  00FEDB  08                 	db	8
   594  00FEDC  14                 	db	20
   595  00FEDD  63                 	db	99
   596  00FEDE  03                 	db	3
   597  00FEDF  04                 	db	4
   598  00FEE0  78                 	db	120
   599  00FEE1  04                 	db	4
   600  00FEE2  03                 	db	3
   601  00FEE3  61                 	db	97
   602  00FEE4  59                 	db	89
   603  00FEE5  49                 	db	73
   604  00FEE6  4D                 	db	77
   605  00FEE7  43                 	db	67
   606  00FEE8  00                 	db	0
   607  00FEE9  7F                 	db	127
   608  00FEEA  41                 	db	65
   609  00FEEB  41                 	db	65
   610  00FEEC  41                 	db	65
   611  00FEED  02                 	db	2
   612  00FEEE  04                 	db	4
   613  00FEEF  08                 	db	8
   614  00FEF0  10                 	db	16
   615  00FEF1  20                 	db	32
   616  00FEF2  00                 	db	0
   617  00FEF3  41                 	db	65
   618  00FEF4  41                 	db	65
   619  00FEF5  41                 	db	65
   620  00FEF6  7F                 	db	127
   621  00FEF7  04                 	db	4
   622  00FEF8  02                 	db	2
   623  00FEF9  01                 	db	1
   624  00FEFA  02                 	db	2
   625  00FEFB  04                 	db	4
   626  00FEFC  40                 	db	64
   627  00FEFD  40                 	db	64
   628  00FEFE  40                 	db	64
   629  00FEFF  40                 	db	64
   630  00FF00  40                 	db	64
   631  00FF01  00                 	db	0
   632  00FF02  03                 	db	3
   633  00FF03  07                 	db	7
   634  00FF04  08                 	db	8
   635  00FF05  00                 	db	0
   636  00FF06  20                 	db	32
   637  00FF07  54                 	db	84
   638  00FF08  54                 	db	84
   639  00FF09  78                 	db	120
   640  00FF0A  40                 	db	64
   641  00FF0B  7F                 	db	127
   642  00FF0C  28                 	db	40
   643  00FF0D  44                 	db	68
   644  00FF0E  44                 	db	68
   645  00FF0F  38                 	db	56
   646  00FF10  38                 	db	56
   647  00FF11  44                 	db	68
   648  00FF12  44                 	db	68
   649  00FF13  44                 	db	68
   650  00FF14  28                 	db	40
   651  00FF15  38                 	db	56
   652  00FF16  44                 	db	68
   653  00FF17  44                 	db	68
   654  00FF18  28                 	db	40
   655  00FF19  7F                 	db	127
   656  00FF1A  38                 	db	56
   657  00FF1B  54                 	db	84
   658  00FF1C  54                 	db	84
   659  00FF1D  54                 	db	84
   660  00FF1E  18                 	db	24
   661  00FF1F  00                 	db	0
   662  00FF20  08                 	db	8
   663  00FF21  7E                 	db	126
   664  00FF22  09                 	db	9
   665  00FF23  02                 	db	2
   666  00FF24  18                 	db	24
   667  00FF25  A4                 	db	164
   668  00FF26  A4                 	db	164
   669  00FF27  9C                 	db	156
   670  00FF28  78                 	db	120
   671  00FF29  7F                 	db	127
   672  00FF2A  08                 	db	8
   673  00FF2B  04                 	db	4
   674  00FF2C  04                 	db	4
   675  00FF2D  78                 	db	120
   676  00FF2E  00                 	db	0
   677  00FF2F  44                 	db	68
   678  00FF30  7D                 	db	125
   679  00FF31  40                 	db	64
   680  00FF32  00                 	db	0
   681  00FF33  20                 	db	32
   682  00FF34  40                 	db	64
   683  00FF35  40                 	db	64
   684  00FF36  3D                 	db	61
   685  00FF37  00                 	db	0
   686  00FF38  7F                 	db	127
   687  00FF39  10                 	db	16
   688  00FF3A  28                 	db	40
   689  00FF3B  44                 	db	68
   690  00FF3C  00                 	db	0
   691  00FF3D  00                 	db	0
   692  00FF3E  41                 	db	65
   693  00FF3F  7F                 	db	127
   694  00FF40  40                 	db	64
   695  00FF41  00                 	db	0
   696  00FF42  7C                 	db	124
   697  00FF43  04                 	db	4
   698  00FF44  78                 	db	120
   699  00FF45  04                 	db	4
   700  00FF46  78                 	db	120
   701  00FF47  7C                 	db	124
   702  00FF48  08                 	db	8
   703  00FF49  04                 	db	4
   704  00FF4A  04                 	db	4
   705  00FF4B  78                 	db	120
   706  00FF4C  38                 	db	56
   707  00FF4D  44                 	db	68
   708  00FF4E  44                 	db	68
   709  00FF4F  44                 	db	68
   710  00FF50  38                 	db	56
   711  00FF51  FC                 	db	252
   712  00FF52  18                 	db	24
   713  00FF53  24                 	db	36
   714  00FF54  24                 	db	36
   715  00FF55  18                 	db	24
   716  00FF56  18                 	db	24
   717  00FF57  24                 	db	36
   718  00FF58  24                 	db	36
   719  00FF59  18                 	db	24
   720  00FF5A  FC                 	db	252
   721  00FF5B  7C                 	db	124
   722  00FF5C  08                 	db	8
   723  00FF5D  04                 	db	4
   724  00FF5E  04                 	db	4
   725  00FF5F  08                 	db	8
   726  00FF60  48                 	db	72
   727  00FF61  54                 	db	84
   728  00FF62  54                 	db	84
   729  00FF63  54                 	db	84
   730  00FF64  24                 	db	36
   731  00FF65  04                 	db	4
   732  00FF66  04                 	db	4
   733  00FF67  3F                 	db	63
   734  00FF68  44                 	db	68
   735  00FF69  24                 	db	36
   736  00FF6A  3C                 	db	60
   737  00FF6B  40                 	db	64
   738  00FF6C  40                 	db	64
   739  00FF6D  20                 	db	32
   740  00FF6E  7C                 	db	124
   741  00FF6F  1C                 	db	28
   742  00FF70  20                 	db	32
   743  00FF71  40                 	db	64
   744  00FF72  20                 	db	32
   745  00FF73  1C                 	db	28
   746  00FF74  3C                 	db	60
   747  00FF75  40                 	db	64
   748  00FF76  30                 	db	48
   749  00FF77  40                 	db	64
   750  00FF78  3C                 	db	60
   751  00FF79  44                 	db	68
   752  00FF7A  28                 	db	40
   753  00FF7B  10                 	db	16
   754  00FF7C  28                 	db	40
   755  00FF7D  44                 	db	68
   756  00FF7E  4C                 	db	76
   757  00FF7F  90                 	db	144
   758  00FF80  90                 	db	144
   759  00FF81  90                 	db	144
   760  00FF82  7C                 	db	124
   761  00FF83  44                 	db	68
   762  00FF84  64                 	db	100
   763  00FF85  54                 	db	84
   764  00FF86  4C                 	db	76
   765  00FF87  44                 	db	68
   766  00FF88  00                 	db	0
   767  00FF89  08                 	db	8
   768  00FF8A  36                 	db	54
   769  00FF8B  41                 	db	65
   770  00FF8C  00                 	db	0
   771  00FF8D  00                 	db	0
   772  00FF8E  00                 	db	0
   773  00FF8F  77                 	db	119
   774  00FF90  00                 	db	0
   775  00FF91  00                 	db	0
   776  00FF92  00                 	db	0
   777  00FF93  41                 	db	65
   778  00FF94  36                 	db	54
   779  00FF95  08                 	db	8
   780  00FF96  00                 	db	0
   781  00FF97  02                 	db	2
   782  00FF98  01                 	db	1
   783  00FF99  02                 	db	2
   784  00FF9A  04                 	db	4
   785  00FF9B  02                 	db	2
   786  00FF9C                     __end_of_font2:
   787                           	opt stack 0
   788  00FF9C                     _hexpowers:
   789                           	opt stack 0
   790  00FF9C  0001               	dw	1
   791  00FF9E  0000               	dw	0
   792  00FFA0  0010               	dw	16
   793  00FFA2  0000               	dw	0
   794  00FFA4  0100               	dw	256
   795  00FFA6  0000               	dw	0
   796  00FFA8  1000               	dw	4096
   797  00FFAA  0000               	dw	0
   798  00FFAC  0000               	dw	0
   799  00FFAE  0001               	dw	1
   800  00FFB0  0000               	dw	0
   801  00FFB2  0010               	dw	16
   802  00FFB4  0000               	dw	0
   803  00FFB6  0100               	dw	256
   804  00FFB8  0000               	dw	0
   805  00FFBA  1000               	dw	4096
   806  00FFBC                     __end_of_hexpowers:
   807                           	opt stack 0
   808  0000                     _ADCON1	set	4033
   809  0000                     _CCP2CON	set	4026
   810  0000                     _CCPR2L	set	4027
   811  0000                     _INTCON2bits	set	4081
   812  0000                     _INTCONbits	set	4082
   813  0000                     _OSCCON	set	4051
   814  0000                     _PIE1bits	set	3997
   815  0000                     _PIR1bits	set	3998
   816  0000                     _PIR2bits	set	4001
   817  0000                     _PORTAbits	set	3968
   818  0000                     _PORTBbits	set	3969
   819  0000                     _PORTCbits	set	3970
   820  0000                     _PORTDbits	set	3971
   821  0000                     _PR2	set	4043
   822  0000                     _RCSTA	set	4011
   823  0000                     _RCSTAbits	set	4011
   824  0000                     _SPBRG	set	4015
   825  0000                     _SPBRGH	set	4016
   826  0000                     _SSPBUF	set	4041
   827  0000                     _SSPCON1	set	4038
   828  0000                     _SSPSTAT	set	4039
   829  0000                     _SSPSTATbits	set	4039
   830  0000                     _T1CON	set	4045
   831  0000                     _T1CONbits	set	4045
   832  0000                     _T2CON	set	4042
   833  0000                     _T3CON	set	4017
   834  0000                     _T3CONbits	set	4017
   835  0000                     _TMR1H	set	4047
   836  0000                     _TMR1L	set	4046
   837  0000                     _TMR3H	set	4019
   838  0000                     _TMR3L	set	4018
   839  0000                     _TRISA	set	3986
   840  0000                     _TRISB	set	3987
   841  0000                     _TRISC	set	3988
   842  0000                     _TRISCbits	set	3988
   843  0000                     _TRISD	set	3989
   844  0000                     _TRISE	set	3990
   845  0000                     _TXREG	set	4013
   846  0000                     _TXSTA	set	4012
   847  0000                     _TXSTAbits	set	4012
   848  0000                     _TRMT	set	32097
   849  0000                     _nRBPU	set	32655
   850  00FFBC                     STR_1:
   851  00FFBC  4E                 	db	78	;'N'
   852  00FFBD  45                 	db	69	;'E'
   853  00FFBE  43                 	db	67	;'C'
   854  00FFBF  5F                 	db	95	;'_'
   855  00FFC0  43                 	db	67	;'C'
   856  00FFC1  6F                 	db	111	;'o'
   857  00FFC2  64                 	db	100	;'d'
   858  00FFC3  65                 	db	101	;'e'
   859  00FFC4  20                 	db	32
   860  00FFC5  3D                 	db	61	;'='
   861  00FFC6  20                 	db	32
   862  00FFC7  25                 	db	37
   863  00FFC8  30                 	db	48	;'0'
   864  00FFC9  38                 	db	56	;'8'
   865  00FFCA  6C                 	db	108	;'l'
   866  00FFCB  78                 	db	120	;'x'
   867  00FFCC  20                 	db	32
   868  00FFCD  25                 	db	37
   869  00FFCE  78                 	db	120	;'x'
   870  00FFCF  0D                 	db	13
   871  00FFD0  0A                 	db	10
   872  00FFD1  00                 	db	0
   873  00FFD2                     STR_2:
   874  00FFD2  45                 	db	69	;'E'
   875  00FFD3  43                 	db	67	;'C'
   876  00FFD4  45                 	db	69	;'E'
   877  00FFD5  33                 	db	51	;'3'
   878  00FFD6  33                 	db	51	;'3'
   879  00FFD7  30                 	db	48	;'0'
   880  00FFD8  31                 	db	49	;'1'
   881  00FFD9  4C                 	db	76	;'L'
   882  00FFDA  20                 	db	32
   883  00FFDB  46                 	db	70	;'F'
   884  00FFDC  61                 	db	97	;'a'
   885  00FFDD  6C                 	db	108	;'l'
   886  00FFDE  6C                 	db	108	;'l'
   887  00FFDF  20                 	db	32
   888  00FFE0  32                 	db	50	;'2'
   889  00FFE1  32                 	db	50	;'2'
   890  00FFE2  2D                 	db	45
   891  00FFE3  53                 	db	83	;'S'
   892  00FFE4  31                 	db	49	;'1'
   893  00FFE5  00                 	db	0
   894  00FFE6                     STR_4:
   895  00FFE6  30                 	db	48	;'0'
   896  00FFE7  31                 	db	49	;'1'
   897  00FFE8  32                 	db	50	;'2'
   898  00FFE9  33                 	db	51	;'3'
   899  00FFEA  34                 	db	52	;'4'
   900  00FFEB  35                 	db	53	;'5'
   901  00FFEC  36                 	db	54	;'6'
   902  00FFED  37                 	db	55	;'7'
   903  00FFEE  38                 	db	56	;'8'
   904  00FFEF  39                 	db	57	;'9'
   905  00FFF0  61                 	db	97	;'a'
   906  00FFF1  62                 	db	98	;'b'
   907  00FFF2  63                 	db	99	;'c'
   908  00FFF3  64                 	db	100	;'d'
   909  00FFF4  65                 	db	101	;'e'
   910  00FFF5  66                 	db	102	;'f'
   911  00FFF6  00                 	db	0
   912  00FFF7                     STR_3:
   913  00FFF7  4C                 	db	76	;'L'
   914  00FFF8  41                 	db	65	;'A'
   915  00FFF9  42                 	db	66	;'B'
   916  00FFFA  20                 	db	32
   917  00FFFB  31                 	db	49	;'1'
   918  00FFFC  30                 	db	48	;'0'
   919  00FFFD  20                 	db	32
   920  00FFFE  00                 	db	0
   921                           
   922                           ; #config settings
   923  00FFFF  00                 	db	0	; dummy byte at the end
   924  0000                     
   925                           	psect	cinit
   926  000FEE                     __pcinit:
   927                           	opt stack 0
   928  000FEE                     start_initialization:
   929                           	opt stack 0
   930  000FEE                     __initialization:
   931                           	opt stack 0
   932                           
   933                           ; Clear objects allocated to BANK1 (31 bytes)
   934  000FEE  EE01  F07E         	lfsr	0,__pbssBANK1
   935  000FF2  0E1F               	movlw	31
   936  000FF4                     clear_0:
   937  000FF4  6AEE               	clrf	postinc0,c
   938  000FF6  06E8               	decf	wreg,f,c
   939  000FF8  E1FD               	bnz	clear_0
   940                           
   941                           ; Clear objects allocated to COMRAM (19 bytes)
   942  000FFA  EE00  F05A         	lfsr	0,__pbssCOMRAM
   943  000FFE  0E13               	movlw	19
   944  001000                     clear_1:
   945  001000  6AEE               	clrf	postinc0,c
   946  001002  06E8               	decf	wreg,f,c
   947  001004  E1FD               	bnz	clear_1
   948                           
   949                           ; Initialize objects allocated to BANK1 (126 bytes)
   950                           ; load TBLPTR registers with __pidataBANK1
   951  001006  0E70               	movlw	low __pidataBANK1
   952  001008  6EF6               	movwf	tblptrl,c
   953  00100A  0E10               	movlw	high __pidataBANK1
   954  00100C  6EF7               	movwf	tblptrh,c
   955  00100E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   956  001010  6EF8               	movwf	tblptru,c
   957  001012  EE01  F000         	lfsr	0,__pdataBANK1
   958  001016  EE10 F07E          	lfsr	1,126
   959  00101A                     copy_data0:
   960  00101A  0009               	tblrd		*+
   961  00101C  CFF5 FFEE          	movff	tablat,postinc0
   962  001020  50E5               	movf	postdec1,w,c
   963  001022  50E1               	movf	fsr1l,w,c
   964  001024  E1FA               	bnz	copy_data0
   965                           
   966                           ; Initialize objects allocated to BANK0 (105 bytes)
   967                           ; load TBLPTR registers with __pidataBANK0
   968  001026  0EDA               	movlw	low __pidataBANK0
   969  001028  6EF6               	movwf	tblptrl,c
   970  00102A  0E11               	movlw	high __pidataBANK0
   971  00102C  6EF7               	movwf	tblptrh,c
   972  00102E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   973  001030  6EF8               	movwf	tblptru,c
   974  001032  EE00  F080         	lfsr	0,__pdataBANK0
   975  001036  EE10 F069          	lfsr	1,105
   976  00103A                     copy_data1:
   977  00103A  0009               	tblrd		*+
   978  00103C  CFF5 FFEE          	movff	tablat,postinc0
   979  001040  50E5               	movf	postdec1,w,c
   980  001042  50E1               	movf	fsr1l,w,c
   981  001044  E1FA               	bnz	copy_data1
   982                           
   983                           ; Initialize objects allocated to COMRAM (22 bytes)
   984                           ; load TBLPTR registers with __pidataCOMRAM
   985  001046  0E26               	movlw	low __pidataCOMRAM
   986  001048  6EF6               	movwf	tblptrl,c
   987  00104A  0E16               	movlw	high __pidataCOMRAM
   988  00104C  6EF7               	movwf	tblptrh,c
   989  00104E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   990  001050  6EF8               	movwf	tblptru,c
   991  001052  EE00  F044         	lfsr	0,__pdataCOMRAM
   992  001056  EE10 F016          	lfsr	1,22
   993  00105A                     copy_data2:
   994  00105A  0009               	tblrd		*+
   995  00105C  CFF5 FFEE          	movff	tablat,postinc0
   996  001060  50E5               	movf	postdec1,w,c
   997  001062  50E1               	movf	fsr1l,w,c
   998  001064  E1FA               	bnz	copy_data2
   999  001066                     end_of_initialization:
  1000                           	opt stack 0
  1001  001066                     __end_of__initialization:
  1002                           	opt stack 0
  1003  001066  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1004  001068  6EF8               	movwf	tblptru,c
  1005  00106A  0100               	movlb	0
  1006  00106C  EF5F  F001         	goto	_main	;jump to C main() function
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           postdec1	equ	0xFE5
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	bssCOMRAM
  1017  00005A                     __pbssCOMRAM:
  1018                           	opt stack 0
  1019  00005A                     _Nec_code:
  1020                           	opt stack 0
  1021  00005A                     	ds	4
  1022  00005E                     _Time_Elapsed:
  1023                           	opt stack 0
  1024  00005E                     	ds	2
  1025  000060                     _nbr:
  1026                           	opt stack 0
  1027  000060                     	ds	2
  1028  000062                     _nec_ok:
  1029                           	opt stack 0
  1030  000062                     	ds	2
  1031  000064                     _txt:
  1032                           	opt stack 0
  1033  000064                     	ds	2
  1034  000066                     _Nec_code1:
  1035                           	opt stack 0
  1036  000066                     	ds	1
  1037  000067                     _Nec_state:
  1038                           	opt stack 0
  1039  000067                     	ds	1
  1040  000068                     __tft_type:
  1041                           	opt stack 0
  1042  000068                     	ds	1
  1043  000069                     _bit_count:
  1044                           	opt stack 0
  1045  000069                     	ds	1
  1046  00006A                     _colstart:
  1047                           	opt stack 0
  1048  00006A                     	ds	1
  1049  00006B                     _i:
  1050                           	opt stack 0
  1051  00006B                     	ds	1
  1052  00006C                     _rowstart:
  1053                           	opt stack 0
  1054  00006C                     	ds	1
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1l	equ	0xFE1
  1063                           
  1064                           	psect	dataCOMRAM
  1065  000044                     __pdataCOMRAM:
  1066                           	opt stack 0
  1067  000044                     _array1:
  1068                           	opt stack 0
  1069  000044                     	ds	21
  1070  000059                     _wrap:
  1071                           	opt stack 0
  1072  000059                     	ds	1
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           postdec1	equ	0xFE5
  1080                           fsr1l	equ	0xFE1
  1081                           
  1082                           	psect	dataBANK0
  1083  000080                     __pdataBANK0:
  1084                           	opt stack 0
  1085  000080                     _color:
  1086                           	opt stack 0
  1087  000080                     	ds	42
  1088  0000AA                     _d1:
  1089                           	opt stack 0
  1090  0000AA                     	ds	21
  1091  0000BF                     _d2:
  1092                           	opt stack 0
  1093  0000BF                     	ds	21
  1094  0000D4                     _d3:
  1095                           	opt stack 0
  1096  0000D4                     	ds	21
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           postinc0	equ	0xFEE
  1102                           wreg	equ	0xFE8
  1103                           postdec1	equ	0xFE5
  1104                           fsr1l	equ	0xFE1
  1105                           
  1106                           	psect	bssBANK1
  1107  00017E                     __pbssBANK1:
  1108                           	opt stack 0
  1109  00017E                     _buffer:
  1110                           	opt stack 0
  1111  00017E                     	ds	31
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec1	equ	0xFE5
  1119                           fsr1l	equ	0xFE1
  1120                           
  1121                           	psect	dataBANK1
  1122  000100                     __pdataBANK1:
  1123                           	opt stack 0
  1124  000100                     _color_font:
  1125                           	opt stack 0
  1126  000100                     	ds	42
  1127  00012A                     _txt1:
  1128                           	opt stack 0
  1129  00012A                     	ds	84
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           
  1139                           	psect	cstackBANK0
  1140  0000E9                     __pcstackBANK0:
  1141                           	opt stack 0
  1142  0000E9                     drawtext@x:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x0
  1146  0000E9                     	ds	1
  1147  0000EA                     drawtext@textsize:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x1
  1151  0000EA                     	ds	2
  1152  0000EC                     drawtext@i:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x3
  1156  0000EC                     	ds	2
  1157  0000EE                     drawtext@cursor_y:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x5
  1161  0000EE                     	ds	1
  1162  0000EF                     drawtext@cursor_x:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x6
  1166  0000EF                     	ds	1
  1167  0000F0                     main@led_c:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x7
  1171  0000F0                     	ds	1
  1172  0000F1                     main@i:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x8
  1176  0000F1                     	ds	2
  1177  0000F3                     main@found:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xA
  1181  0000F3                     	ds	1
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           
  1191                           	psect	cstackCOMRAM
  1192  000001                     __pcstackCOMRAM:
  1193                           	opt stack 0
  1194  000001                     ??_INT0_isr:
  1195  000001                     
  1196                           ; 0 bytes @ 0x0
  1197  000001                     	ds	2
  1198  000003                     ??_chkisr:
  1199                           
  1200                           ; 0 bytes @ 0x2
  1201  000003                     	ds	14
  1202  000011                     ??_isdigit:
  1203  000011                     ?_strlen:
  1204                           	opt stack 0
  1205  000011                     ?___wmul:
  1206                           	opt stack 0
  1207  000011                     ?___lldiv:
  1208                           	opt stack 0
  1209  000011                     putch@c:
  1210                           	opt stack 0
  1211  000011                     set_d1@color:
  1212                           	opt stack 0
  1213  000011                     set_d2@color:
  1214                           	opt stack 0
  1215  000011                     set_d3@color:
  1216                           	opt stack 0
  1217  000011                     spiwrite@x:
  1218                           	opt stack 0
  1219  000011                     wait_one_sec@k:
  1220                           	opt stack 0
  1221  000011                     OpenUSART@spbrg:
  1222                           	opt stack 0
  1223  000011                     ___wmul@multiplier:
  1224                           	opt stack 0
  1225  000011                     strcpy@to:
  1226                           	opt stack 0
  1227  000011                     strlen@s:
  1228                           	opt stack 0
  1229  000011                     ___lldiv@dividend:
  1230                           	opt stack 0
  1231                           
  1232                           ; 4 bytes @ 0x10
  1233  000011                     	ds	1
  1234  000012                     spiwrite@spidata:
  1235                           	opt stack 0
  1236  000012                     _isdigit$1784:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x11
  1240  000012                     	ds	1
  1241  000013                     ??_strlen:
  1242  000013                     write_command@cmd_:
  1243                           	opt stack 0
  1244  000013                     write_data@data_:
  1245                           	opt stack 0
  1246  000013                     OpenUSART@config:
  1247                           	opt stack 0
  1248  000013                     isdigit@c:
  1249                           	opt stack 0
  1250  000013                     ___wmul@multiplicand:
  1251                           	opt stack 0
  1252  000013                     strcpy@from:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x12
  1256  000013                     	ds	1
  1257  000014                     setAddrWindow@y0:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x13
  1261  000014                     	ds	1
  1262  000015                     setAddrWindow@x1:
  1263                           	opt stack 0
  1264  000015                     ___wmul@product:
  1265                           	opt stack 0
  1266  000015                     strcpy@cp:
  1267                           	opt stack 0
  1268  000015                     strlen@cp:
  1269                           	opt stack 0
  1270  000015                     ___lldiv@divisor:
  1271                           	opt stack 0
  1272                           
  1273                           ; 4 bytes @ 0x14
  1274  000015                     	ds	1
  1275  000016                     setAddrWindow@y1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x15
  1279  000016                     	ds	1
  1280  000017                     setAddrWindow@x0:
  1281                           	opt stack 0
  1282  000017                     delay_ms@ms:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x16
  1286  000017                     	ds	1
  1287  000018                     drawPixel@y:
  1288                           	opt stack 0
  1289  000018                     drawFastVLine@y:
  1290                           	opt stack 0
  1291  000018                     fillRectangle@y:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x17
  1295  000018                     	ds	1
  1296  000019                     ??_delay_ms:
  1297  000019                     drawFastVLine@h:
  1298                           	opt stack 0
  1299  000019                     fillRectangle@w:
  1300                           	opt stack 0
  1301  000019                     drawPixel@color:
  1302                           	opt stack 0
  1303  000019                     ___lldiv@quotient:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x18
  1307  000019                     	ds	1
  1308  00001A                     fillRectangle@h:
  1309                           	opt stack 0
  1310  00001A                     drawFastVLine@color:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x19
  1314  00001A                     	ds	1
  1315  00001B                     drawPixel@x:
  1316                           	opt stack 0
  1317  00001B                     delay_ms@count:
  1318                           	opt stack 0
  1319  00001B                     fillRectangle@color:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x1A
  1323  00001B                     	ds	1
  1324  00001C                     ??_drawFastVLine:
  1325  00001C                     drawCircle@x0:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x1B
  1329  00001C                     	ds	1
  1330  00001D                     ??_fillRectangle:
  1331  00001D                     ___lldiv@counter:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x1C
  1335  00001D                     	ds	1
  1336  00001E                     ?_printf:
  1337                           	opt stack 0
  1338  00001E                     drawCircle@y0:
  1339                           	opt stack 0
  1340  00001E                     printf@f:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x1D
  1344  00001E                     	ds	2
  1345  000020                     drawFastVLine@hi:
  1346                           	opt stack 0
  1347  000020                     drawCircle@r:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x1F
  1351  000020                     	ds	1
  1352  000021                     drawFastVLine@lo:
  1353                           	opt stack 0
  1354  000021                     fillRectangle@hi:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     drawFastVLine@x:
  1360                           	opt stack 0
  1361  000022                     fillRectangle@lo:
  1362                           	opt stack 0
  1363  000022                     drawCircle@color:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x21
  1367  000022                     	ds	1
  1368  000023                     fillRect@y:
  1369                           	opt stack 0
  1370  000023                     fillRectangle@x:
  1371                           	opt stack 0
  1372  000023                     fillCircleHelper@x0:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x22
  1376  000023                     	ds	1
  1377  000024                     ??_drawCircle:
  1378  000024                     fillRect@w:
  1379                           	opt stack 0
  1380  000024                     fillScreen@color:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  000024                     	ds	1
  1385  000025                     fillRect@h:
  1386                           	opt stack 0
  1387  000025                     fillCircleHelper@y0:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x24
  1391  000025                     	ds	1
  1392  000026                     ??_printf:
  1393  000026                     fillRect@color:
  1394                           	opt stack 0
  1395  000026                     drawCircle@ddF_x:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x25
  1399  000026                     	ds	1
  1400  000027                     fillCircleHelper@r:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x26
  1404  000027                     	ds	1
  1405  000028                     ??_fillRect:
  1406  000028                     drawCircle@ddF_y:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x27
  1410  000028                     	ds	1
  1411  000029                     fillCircleHelper@cornername:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x28
  1415  000029                     	ds	1
  1416  00002A                     printf@idx:
  1417                           	opt stack 0
  1418  00002A                     drawCircle@f:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x29
  1422  00002A                     	ds	1
  1423  00002B                     fillRect@x:
  1424                           	opt stack 0
  1425  00002B                     fillCircleHelper@delta:
  1426                           	opt stack 0
  1427  00002B                     printf@prec:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2A
  1431  00002B                     	ds	1
  1432  00002C                     fillRect@i:
  1433                           	opt stack 0
  1434  00002C                     drawCircle@x:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x2B
  1438  00002C                     	ds	1
  1439  00002D                     fillCircleHelper@color:
  1440                           	opt stack 0
  1441  00002D                     printf@val:
  1442                           	opt stack 0
  1443                           
  1444                           ; 4 bytes @ 0x2C
  1445  00002D                     	ds	1
  1446  00002E                     drawChar@y:
  1447                           	opt stack 0
  1448  00002E                     drawCircle@y:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x2D
  1452  00002E                     	ds	1
  1453  00002F                     ??_fillCircleHelper:
  1454  00002F                     drawChar@c:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x2E
  1458  00002F                     	ds	1
  1459  000030                     drawChar@color:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x2F
  1463  000030                     	ds	1
  1464  000031                     fillCircleHelper@ddF_x:
  1465                           	opt stack 0
  1466  000031                     printf@ap:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x30
  1470  000031                     	ds	1
  1471  000032                     drawChar@bg:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x31
  1475  000032                     	ds	1
  1476  000033                     printf@flag:
  1477                           	opt stack 0
  1478  000033                     fillCircleHelper@ddF_y:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x32
  1482  000033                     	ds	1
  1483  000034                     drawChar@size:
  1484                           	opt stack 0
  1485  000034                     printf@width:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x33
  1489  000034                     	ds	1
  1490  000035                     drawChar@line:
  1491                           	opt stack 0
  1492  000035                     fillCircleHelper@f:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x34
  1496  000035                     	ds	1
  1497  000036                     drawChar@x:
  1498                           	opt stack 0
  1499  000036                     printf@c:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x35
  1503  000036                     	ds	1
  1504  000037                     drawChar@j:
  1505                           	opt stack 0
  1506  000037                     fillCircleHelper@x:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x36
  1510  000037                     	ds	1
  1511  000038                     drawChar@i:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x37
  1515  000038                     	ds	1
  1516  000039                     drawtext@y:
  1517                           	opt stack 0
  1518  000039                     fillCircleHelper@y:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x38
  1522  000039                     	ds	1
  1523  00003A                     drawtext@_text:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x39
  1527  00003A                     	ds	1
  1528  00003B                     fillCircle@x0:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x3A
  1532  00003B                     	ds	1
  1533  00003C                     drawtext@color:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x3B
  1537  00003C                     	ds	1
  1538  00003D                     fillCircle@y0:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x3C
  1542  00003D                     	ds	1
  1543  00003E                     drawtext@bg:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x3D
  1547  00003E                     	ds	1
  1548  00003F                     fillCircle@r:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x3E
  1552  00003F                     	ds	1
  1553  000040                     drawtext@size:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x3F
  1557  000040                     	ds	1
  1558  000041                     ??_drawtext:
  1559  000041                     fillCircle@color:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x40
  1563  000041                     	ds	2
  1564  000043                     
  1565                           ; 0 bytes @ 0x42
  1566  000043                     	ds	1
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           postinc0	equ	0xFEE
  1572                           wreg	equ	0xFE8
  1573                           postdec1	equ	0xFE5
  1574                           fsr1l	equ	0xFE1
  1575                           
  1576 ;;
  1577 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1578 ;;
  1579 ;; *************** function _main *****************
  1580 ;; Defined at:
  1581 ;;		line 266 in file "Lab10p1.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;		None
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  i               2    8[BANK0 ] int 
  1586 ;;  found           1   10[BANK0 ] unsigned char 
  1587 ;;  led_c           1    7[BANK0 ] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;		None               void
  1590 ;; Registers used:
  1591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;Total ram usage:        5 bytes
  1602 ;; Hardware stack levels required when called:   11
  1603 ;; This function calls:
  1604 ;;		_Activate_Buzzer
  1605 ;;		_Deactivate_Buzzer
  1606 ;;		_Initialize_Screen
  1607 ;;		_drawCircle
  1608 ;;		_drawtext
  1609 ;;		_fillCircle
  1610 ;;		_init_UART
  1611 ;;		_printf
  1612 ;;		_set_d1
  1613 ;;		_set_d2
  1614 ;;		_set_d3
  1615 ;;		_wait_one_sec
  1616 ;; This function is called by:
  1617 ;;		Startup code after reset
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text0
  1622  0002BE                     __ptext0:
  1623                           	opt stack 0
  1624  0002BE                     _main:
  1625                           	opt stack 20
  1626                           
  1627                           ;Lab10p1.c: 268: init_UART();
  1628                           
  1629                           ;incstack = 0
  1630  0002BE  EC1E  F00B         	call	_init_UART	;wreg free
  1631                           
  1632                           ;Lab10p1.c: 269: OSCCON = 0x70;
  1633  0002C2  0E70               	movlw	112
  1634  0002C4  6ED3               	movwf	4051,c	;volatile
  1635                           
  1636                           ;Lab10p1.c: 270: nRBPU = 0;
  1637  0002C6  9EF1               	bcf	intcon2,7,c	;volatile
  1638                           
  1639                           ;Lab10p1.c: 271: TRISA = 0x00;
  1640  0002C8  0E00               	movlw	0
  1641  0002CA  6E92               	movwf	3986,c	;volatile
  1642                           
  1643                           ;Lab10p1.c: 272: TRISB = 0x01;
  1644  0002CC  0E01               	movlw	1
  1645  0002CE  6E93               	movwf	3987,c	;volatile
  1646                           
  1647                           ;Lab10p1.c: 273: TRISC = 0x00;
  1648  0002D0  0E00               	movlw	0
  1649  0002D2  6E94               	movwf	3988,c	;volatile
  1650                           
  1651                           ;Lab10p1.c: 274: TRISD = 0x00;
  1652  0002D4  0E00               	movlw	0
  1653  0002D6  6E95               	movwf	3989,c	;volatile
  1654                           
  1655                           ;Lab10p1.c: 275: TRISE = 0x00;
  1656  0002D8  0E00               	movlw	0
  1657  0002DA  6E96               	movwf	3990,c	;volatile
  1658                           
  1659                           ;Lab10p1.c: 276: ADCON1 = 0x0F;
  1660  0002DC  0E0F               	movlw	15
  1661  0002DE  6EC1               	movwf	4033,c	;volatile
  1662                           
  1663                           ;Lab10p1.c: 277: Initialize_Screen();
  1664  0002E0  EC26  F007         	call	_Initialize_Screen	;wreg free
  1665                           
  1666                           ;Lab10p1.c: 278: INTCONbits.INT0IF = 0;
  1667  0002E4  92F2               	bcf	intcon,1,c	;volatile
  1668                           
  1669                           ;Lab10p1.c: 279: INTCON2bits.INTEDG0 = 0;
  1670  0002E6  9CF1               	bcf	intcon2,6,c	;volatile
  1671                           
  1672                           ;Lab10p1.c: 280: INTCONbits.INT0IE = 1;
  1673  0002E8  88F2               	bsf	intcon,4,c	;volatile
  1674                           
  1675                           ;Lab10p1.c: 281: TMR1H = 0;
  1676  0002EA  0E00               	movlw	0
  1677  0002EC  6ECF               	movwf	4047,c	;volatile
  1678                           
  1679                           ;Lab10p1.c: 282: TMR1L = 0;
  1680  0002EE  0E00               	movlw	0
  1681  0002F0  6ECE               	movwf	4046,c	;volatile
  1682                           
  1683                           ;Lab10p1.c: 283: PIR1bits.TMR1IF = 0;
  1684  0002F2  909E               	bcf	3998,0,c	;volatile
  1685                           
  1686                           ;Lab10p1.c: 284: PIE1bits.TMR1IE = 1;
  1687  0002F4  809D               	bsf	3997,0,c	;volatile
  1688                           
  1689                           ;Lab10p1.c: 285: INTCONbits.PEIE = 1;
  1690  0002F6  8CF2               	bsf	intcon,6,c	;volatile
  1691                           
  1692                           ;Lab10p1.c: 286: INTCONbits.GIE = 1;
  1693  0002F8  8EF2               	bsf	intcon,7,c	;volatile
  1694                           
  1695                           ;Lab10p1.c: 287: nec_ok = 0;
  1696  0002FA  0E00               	movlw	0
  1697  0002FC  6E63               	movwf	_nec_ok+1,c
  1698  0002FE  0E00               	movlw	0
  1699  000300  6E62               	movwf	_nec_ok,c
  1700                           
  1701                           ;Lab10p1.c: 288: Nec_code = 0x0;
  1702  000302  0E00               	movlw	0
  1703  000304  6E5A               	movwf	_Nec_code,c
  1704  000306  0E00               	movlw	0
  1705  000308  6E5B               	movwf	_Nec_code+1,c
  1706  00030A  0E00               	movlw	0
  1707  00030C  6E5C               	movwf	_Nec_code+2,c
  1708  00030E  0E00               	movlw	0
  1709  000310  6E5D               	movwf	_Nec_code+3,c
  1710  000312  D000               	goto	l3977
  1711  000314                     l3977:
  1712                           
  1713                           ;Lab10p1.c: 291: {
  1714                           ;Lab10p1.c: 292: if (nec_ok == 1)
  1715  000314  0462               	decf	_nec_ok,w,c
  1716  000316  1063               	iorwf	_nec_ok+1,w,c
  1717  000318  A4D8               	btfss	status,2,c
  1718  00031A  D7FC               	goto	l3977
  1719                           
  1720                           ;Lab10p1.c: 293: {
  1721                           ;Lab10p1.c: 294: nec_ok = 0;
  1722  00031C  0E00               	movlw	0
  1723  00031E  6E63               	movwf	_nec_ok+1,c
  1724  000320  0E00               	movlw	0
  1725  000322  6E62               	movwf	_nec_ok,c
  1726                           
  1727                           ;Lab10p1.c: 296: Nec_code1 = (char) ((Nec_code >> 8));
  1728  000324  C05B  F066         	movff	_Nec_code+1,_Nec_code1
  1729                           
  1730                           ;Lab10p1.c: 297: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1731  000328  0EBC               	movlw	low STR_1
  1732  00032A  6E1E               	movwf	printf@f,c
  1733  00032C  0EFF               	movlw	high STR_1
  1734  00032E  6E1F               	movwf	printf@f+1,c
  1735  000330  C05A  F020         	movff	_Nec_code,?_printf+2
  1736  000334  C05B  F021         	movff	_Nec_code+1,?_printf+3
  1737  000338  C05C  F022         	movff	_Nec_code+2,?_printf+4
  1738  00033C  C05D  F023         	movff	_Nec_code+3,?_printf+5
  1739  000340  C066  F024         	movff	_Nec_code1,?_printf+6
  1740  000344  6A25               	clrf	?_printf+7,c
  1741  000346  EC0E  F000         	call	_printf	;wreg free
  1742                           
  1743                           ;Lab10p1.c: 298: INTCONbits.INT0IE = 1;
  1744  00034A  88F2               	bsf	intcon,4,c	;volatile
  1745                           
  1746                           ;Lab10p1.c: 299: INTCON2bits.INTEDG0 = 0;
  1747  00034C  9CF1               	bcf	intcon2,6,c	;volatile
  1748                           
  1749                           ;Lab10p1.c: 301: char found = 0xff;
  1750  00034E  0100               	movlb	0	; () banked
  1751  000350  69F3               	setf	main@found& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;Lab10p1.c: 302: char led_c = 0xff;
  1755  000352  0100               	movlb	0	; () banked
  1756  000354  69F0               	setf	main@led_c& (0+255),b
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;Lab10p1.c: 304: for(int i = 0; i < 21; i++)
  1760  000356  0E00               	movlw	0
  1761  000358  0100               	movlb	0	; () banked
  1762  00035A  6FF2               	movwf	(main@i+1)& (0+255),b
  1763  00035C  0E00               	movlw	0
  1764  00035E  6FF1               	movwf	main@i& (0+255),b
  1765  000360                     l3995:
  1766                           
  1767                           ; BSR set to: 0
  1768  000360  0100               	movlb	0	; () banked
  1769  000362  BFF2               	btfsc	(main@i+1)& (0+255),7,b
  1770  000364  D00A               	goto	l3999
  1771  000366  0100               	movlb	0	; () banked
  1772  000368  51F2               	movf	(main@i+1)& (0+255),w,b
  1773  00036A  E11D               	bnz	l4007
  1774  00036C  0E15               	movlw	21
  1775  00036E  0100               	movlb	0	; () banked
  1776  000370  5DF1               	subwf	main@i& (0+255),w,b
  1777  000372  B0D8               	btfsc	status,0,c
  1778  000374  D018               	goto	l4007
  1779  000376  D001               	goto	l3999
  1780                           
  1781                           ; BSR set to: 0
  1782  000378  D016               	goto	l4007
  1783  00037A                     l3999:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;Lab10p1.c: 305: {
  1787                           ;Lab10p1.c: 306: if(Nec_code1 == array1[i])
  1788  00037A  0E44               	movlw	low _array1
  1789  00037C  0100               	movlb	0	; () banked
  1790  00037E  25F1               	addwf	main@i& (0+255),w,b
  1791  000380  6ED9               	movwf	fsr2l,c
  1792  000382  0E00               	movlw	high _array1
  1793  000384  0100               	movlb	0	; () banked
  1794  000386  21F2               	addwfc	(main@i+1)& (0+255),w,b
  1795  000388  6EDA               	movwf	fsr2h,c
  1796  00038A  5066               	movf	_Nec_code1,w,c
  1797  00038C  18DE               	xorwf	postinc2,w,c
  1798  00038E  A4D8               	btfss	status,2,c
  1799  000390  D005               	goto	l4003
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;Lab10p1.c: 307: {
  1803                           ;Lab10p1.c: 308: found = i;
  1804  000392  C0F1  F0F3         	movff	main@i,main@found
  1805                           
  1806                           ;Lab10p1.c: 309: led_c = i;
  1807  000396  C0F1  F0F0         	movff	main@i,main@led_c
  1808  00039A  D000               	goto	l4003
  1809  00039C                     l4003:
  1810                           
  1811                           ; BSR set to: 0
  1812  00039C  0100               	movlb	0	; () banked
  1813  00039E  4BF1               	infsnz	main@i& (0+255),f,b
  1814  0003A0  2BF2               	incf	(main@i+1)& (0+255),f,b
  1815  0003A2  D7DE               	goto	l3995
  1816                           
  1817                           ; BSR set to: 0
  1818  0003A4  D000               	goto	l4007
  1819  0003A6                     l4007:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;Lab10p1.c: 310: }
  1823                           ;Lab10p1.c: 311: }
  1824                           ;Lab10p1.c: 313: set_d1(0);
  1825  0003A6  0E00               	movlw	0
  1826  0003A8  EC7E  F009         	call	_set_d1
  1827                           
  1828                           ;Lab10p1.c: 314: set_d2(0);
  1829  0003AC  0E00               	movlw	0
  1830  0003AE  EC50  F009         	call	_set_d2
  1831                           
  1832                           ;Lab10p1.c: 315: set_d3(0);
  1833  0003B2  0E00               	movlw	0
  1834  0003B4  EC22  F009         	call	_set_d3
  1835                           
  1836                           ;Lab10p1.c: 318: if (found != 0xff)
  1837  0003B8  0100               	movlb	0	; () banked
  1838  0003BA  29F3               	incf	main@found& (0+255),w,b
  1839  0003BC  B4D8               	btfsc	status,2,c
  1840  0003BE  D057               	goto	l4017
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;Lab10p1.c: 319: {
  1844                           ;Lab10p1.c: 320: fillCircle(60, 80, 20, color[found]);
  1845  0003C0  0E00               	movlw	0
  1846  0003C2  6E3C               	movwf	fillCircle@x0+1,c
  1847  0003C4  0E3C               	movlw	60
  1848  0003C6  6E3B               	movwf	fillCircle@x0,c
  1849  0003C8  0E00               	movlw	0
  1850  0003CA  6E3E               	movwf	fillCircle@y0+1,c
  1851  0003CC  0E50               	movlw	80
  1852  0003CE  6E3D               	movwf	fillCircle@y0,c
  1853  0003D0  0E00               	movlw	0
  1854  0003D2  6E40               	movwf	fillCircle@r+1,c
  1855  0003D4  0E14               	movlw	20
  1856  0003D6  6E3F               	movwf	fillCircle@r,c
  1857  0003D8  0100               	movlb	0	; () banked
  1858  0003DA  51F3               	movf	main@found& (0+255),w,b
  1859  0003DC  0D02               	mullw	2
  1860  0003DE  0E80               	movlw	low _color
  1861  0003E0  24F3               	addwf	prodl,w,c
  1862  0003E2  6ED9               	movwf	fsr2l,c
  1863  0003E4  0E00               	movlw	high _color
  1864  0003E6  20F4               	addwfc	prodh,w,c
  1865  0003E8  6EDA               	movwf	fsr2h,c
  1866  0003EA  CFDE F041          	movff	postinc2,fillCircle@color
  1867  0003EE  CFDD F042          	movff	postdec2,fillCircle@color+1
  1868  0003F2  ECAC  F009         	call	_fillCircle	;wreg free
  1869                           
  1870                           ;Lab10p1.c: 321: drawCircle(60, 80, 20, 0xFFFF);
  1871  0003F6  0E00               	movlw	0
  1872  0003F8  6E1D               	movwf	drawCircle@x0+1,c
  1873  0003FA  0E3C               	movlw	60
  1874  0003FC  6E1C               	movwf	drawCircle@x0,c
  1875  0003FE  0E00               	movlw	0
  1876  000400  6E1F               	movwf	drawCircle@y0+1,c
  1877  000402  0E50               	movlw	80
  1878  000404  6E1E               	movwf	drawCircle@y0,c
  1879  000406  0E00               	movlw	0
  1880  000408  6E21               	movwf	drawCircle@r+1,c
  1881  00040A  0E14               	movlw	20
  1882  00040C  6E20               	movwf	drawCircle@r,c
  1883  00040E  0EFF               	movlw	255
  1884  000410  6E23               	movwf	drawCircle@color+1,c
  1885  000412  6822               	setf	drawCircle@color,c
  1886  000414  EC64  F002         	call	_drawCircle	;wreg free
  1887                           
  1888                           ;Lab10p1.c: 322: drawtext(52, 77, txt1[found], color_font[found], color[found],1);
  1889  000418  0E4D               	movlw	77
  1890  00041A  6E39               	movwf	drawtext@y,c
  1891  00041C  0100               	movlb	0	; () banked
  1892  00041E  51F3               	movf	main@found& (0+255),w,b
  1893  000420  0D04               	mullw	4
  1894  000422  0E2A               	movlw	low _txt1
  1895  000424  24F3               	addwf	prodl,w,c
  1896  000426  6E3A               	movwf	drawtext@_text,c
  1897  000428  0E01               	movlw	high _txt1
  1898  00042A  20F4               	addwfc	prodh,w,c
  1899  00042C  6E3B               	movwf	drawtext@_text+1,c
  1900  00042E  0100               	movlb	0	; () banked
  1901  000430  51F3               	movf	main@found& (0+255),w,b
  1902  000432  0D02               	mullw	2
  1903  000434  0E00               	movlw	low _color_font
  1904  000436  24F3               	addwf	prodl,w,c
  1905  000438  6ED9               	movwf	fsr2l,c
  1906  00043A  0E01               	movlw	high _color_font
  1907  00043C  20F4               	addwfc	prodh,w,c
  1908  00043E  6EDA               	movwf	fsr2h,c
  1909  000440  CFDE F03C          	movff	postinc2,drawtext@color
  1910  000444  CFDD F03D          	movff	postdec2,drawtext@color+1
  1911  000448  0100               	movlb	0	; () banked
  1912  00044A  51F3               	movf	main@found& (0+255),w,b
  1913  00044C  0D02               	mullw	2
  1914  00044E  0E80               	movlw	low _color
  1915  000450  24F3               	addwf	prodl,w,c
  1916  000452  6ED9               	movwf	fsr2l,c
  1917  000454  0E00               	movlw	high _color
  1918  000456  20F4               	addwfc	prodh,w,c
  1919  000458  6EDA               	movwf	fsr2h,c
  1920  00045A  CFDE F03E          	movff	postinc2,drawtext@bg
  1921  00045E  CFDD F03F          	movff	postdec2,drawtext@bg+1
  1922  000462  0E01               	movlw	1
  1923  000464  6E40               	movwf	drawtext@size,c
  1924  000466  0E34               	movlw	52
  1925  000468  ECBA  F005         	call	_drawtext
  1926  00046C  D000               	goto	l4017
  1927  00046E                     l4017:
  1928                           
  1929                           ;Lab10p1.c: 323: }
  1930                           ;Lab10p1.c: 325: set_d1(d1[led_c]);
  1931  00046E  0100               	movlb	0	; () banked
  1932  000470  51F0               	movf	main@led_c& (0+255),w,b
  1933  000472  0D01               	mullw	1
  1934  000474  0EAA               	movlw	low _d1
  1935  000476  24F3               	addwf	prodl,w,c
  1936  000478  6ED9               	movwf	fsr2l,c
  1937  00047A  0E00               	movlw	high _d1
  1938  00047C  20F4               	addwfc	prodh,w,c
  1939  00047E  6EDA               	movwf	fsr2h,c
  1940  000480  50DF               	movf	indf2,w,c
  1941  000482  EC7E  F009         	call	_set_d1
  1942                           
  1943                           ;Lab10p1.c: 326: set_d2(d2[led_c]);
  1944  000486  0100               	movlb	0	; () banked
  1945  000488  51F0               	movf	main@led_c& (0+255),w,b
  1946  00048A  0D01               	mullw	1
  1947  00048C  0EBF               	movlw	low _d2
  1948  00048E  24F3               	addwf	prodl,w,c
  1949  000490  6ED9               	movwf	fsr2l,c
  1950  000492  0E00               	movlw	high _d2
  1951  000494  20F4               	addwfc	prodh,w,c
  1952  000496  6EDA               	movwf	fsr2h,c
  1953  000498  50DF               	movf	indf2,w,c
  1954  00049A  EC50  F009         	call	_set_d2
  1955                           
  1956                           ;Lab10p1.c: 327: set_d3(d3[led_c]);
  1957  00049E  0100               	movlb	0	; () banked
  1958  0004A0  51F0               	movf	main@led_c& (0+255),w,b
  1959  0004A2  0D01               	mullw	1
  1960  0004A4  0ED4               	movlw	low _d3
  1961  0004A6  24F3               	addwf	prodl,w,c
  1962  0004A8  6ED9               	movwf	fsr2l,c
  1963  0004AA  0E00               	movlw	high _d3
  1964  0004AC  20F4               	addwfc	prodh,w,c
  1965  0004AE  6EDA               	movwf	fsr2h,c
  1966  0004B0  50DF               	movf	indf2,w,c
  1967  0004B2  EC22  F009         	call	_set_d3
  1968                           
  1969                           ;Lab10p1.c: 328: Activate_Buzzer();
  1970  0004B6  EC3B  F00B         	call	_Activate_Buzzer	;wreg free
  1971                           
  1972                           ;Lab10p1.c: 329: wait_one_sec();
  1973  0004BA  ECE2  F00A         	call	_wait_one_sec	;wreg free
  1974                           
  1975                           ;Lab10p1.c: 330: Deactivate_Buzzer();
  1976  0004BE  EC61  F00B         	call	_Deactivate_Buzzer	;wreg free
  1977  0004C2  D728               	goto	l3977
  1978  0004C4  EF0C  F000         	goto	start
  1979  0004C8                     __end_of_main:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           prodh	equ	0xFF4
  1986                           prodl	equ	0xFF3
  1987                           intcon	equ	0xFF2
  1988                           intcon2	equ	0xFF1
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postdec1	equ	0xFE5
  1992                           fsr1l	equ	0xFE1
  1993                           indf2	equ	0xFDF
  1994                           postinc2	equ	0xFDE
  1995                           postdec2	equ	0xFDD
  1996                           fsr2h	equ	0xFDA
  1997                           fsr2l	equ	0xFD9
  1998                           status	equ	0xFD8
  1999                           
  2000 ;; *************** function _wait_one_sec *****************
  2001 ;; Defined at:
  2002 ;;		line 349 in file "Lab10p1.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  k               2   16[COMRAM] int 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;		None               void
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:        2 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    3
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text1
  2031  0015C4                     __ptext1:
  2032                           	opt stack 0
  2033  0015C4                     _wait_one_sec:
  2034                           	opt stack 27
  2035                           
  2036                           ;Lab10p1.c: 351: for (int k=0; k<17000; k++);
  2037                           
  2038                           ;incstack = 0
  2039  0015C4  0E00               	movlw	0
  2040  0015C6  6E12               	movwf	wait_one_sec@k+1,c
  2041  0015C8  0E00               	movlw	0
  2042  0015CA  6E11               	movwf	wait_one_sec@k,c
  2043  0015CC                     l3899:
  2044  0015CC  BE12               	btfsc	wait_one_sec@k+1,7,c
  2045  0015CE  D008               	goto	l3903
  2046  0015D0  0E68               	movlw	104
  2047  0015D2  5C11               	subwf	wait_one_sec@k,w,c
  2048  0015D4  0E42               	movlw	66
  2049  0015D6  5812               	subwfb	wait_one_sec@k+1,w,c
  2050  0015D8  B0D8               	btfsc	status,0,c
  2051  0015DA  D005               	goto	l213
  2052  0015DC  D001               	goto	l3903
  2053  0015DE  D003               	goto	l213
  2054  0015E0                     l3903:
  2055  0015E0  4A11               	infsnz	wait_one_sec@k,f,c
  2056  0015E2  2A12               	incf	wait_one_sec@k+1,f,c
  2057  0015E4  D7F3               	goto	l3899
  2058  0015E6                     l213:
  2059  0015E6  0012               	return		;funcret
  2060  0015E8                     __end_of_wait_one_sec:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           intcon	equ	0xFF2
  2069                           intcon2	equ	0xFF1
  2070                           postinc0	equ	0xFEE
  2071                           wreg	equ	0xFE8
  2072                           postdec1	equ	0xFE5
  2073                           fsr1l	equ	0xFE1
  2074                           indf2	equ	0xFDF
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _set_d3 *****************
  2082 ;; Defined at:
  2083 ;;		line 148 in file "Lab10p1.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  color           1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  color           1   16[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    3
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text2
  2112  001244                     __ptext2:
  2113                           	opt stack 0
  2114  001244                     _set_d3:
  2115                           	opt stack 27
  2116                           
  2117                           ;incstack = 0
  2118                           ;set_d3@color stored from wreg
  2119  001244  6E11               	movwf	set_d3@color,c
  2120                           
  2121                           ;Lab10p1.c: 150: switch(color)
  2122  001246  D014               	goto	l3743
  2123  001248                     l162:
  2124  001248  9680               	bcf	3968,3,c	;volatile
  2125  00124A  D001               	goto	L1
  2126  00124C                     l164:
  2127  00124C  8680               	bsf	3968,3,c	;volatile
  2128  00124E                     L1:
  2129  00124E  9880               	bcf	3968,4,c	;volatile
  2130  001250  D002               	goto	L2
  2131  001252                     l165:
  2132  001252  9680               	bcf	3968,3,c	;volatile
  2133  001254  8880               	bsf	3968,4,c	;volatile
  2134  001256                     L2:
  2135  001256  9A80               	bcf	3968,5,c	;volatile
  2136  001258  D022               	goto	l170
  2137  00125A                     l166:
  2138  00125A  9680               	bcf	3968,3,c	;volatile
  2139  00125C  9880               	bcf	3968,4,c	;volatile
  2140  00125E  D006               	goto	L5
  2141  001260                     l167:
  2142  001260  9680               	bcf	3968,3,c	;volatile
  2143  001262  D003               	goto	L6
  2144  001264                     l168:
  2145  001264  8680               	bsf	3968,3,c	;volatile
  2146  001266  D7FA               	goto	L7
  2147  001268                     l169:
  2148  001268  8680               	bsf	3968,3,c	;volatile
  2149  00126A                     L6:
  2150  00126A  8880               	bsf	3968,4,c	;volatile
  2151  00126C                     L5:
  2152  00126C  8A80               	bsf	3968,5,c	;volatile
  2153                           
  2154                           ;Lab10p1.c: 159: }
  2155  00126E  D017               	goto	l170
  2156  001270                     l3743:
  2157  001270  5011               	movf	set_d3@color,w,c
  2158                           
  2159                           ; Switch size 1, requested type "space"
  2160                           ; Number of cases is 7, Range of values is 0 to 6
  2161                           ; switch strategies available:
  2162                           ; Name         Instructions Cycles
  2163                           ; simple_byte           22    12 (average)
  2164                           ;	Chosen strategy is simple_byte
  2165  001272  0A00               	xorlw	0	; case 0
  2166  001274  B4D8               	btfsc	status,2,c
  2167  001276  D7E8               	goto	l162
  2168  001278  0A01               	xorlw	1	; case 1
  2169  00127A  B4D8               	btfsc	status,2,c
  2170  00127C  D7E7               	goto	l164
  2171  00127E  0A03               	xorlw	3	; case 2
  2172  001280  B4D8               	btfsc	status,2,c
  2173  001282  D7E7               	goto	l165
  2174  001284  0A01               	xorlw	1	; case 3
  2175  001286  B4D8               	btfsc	status,2,c
  2176  001288  D7E8               	goto	l166
  2177  00128A  0A07               	xorlw	7	; case 4
  2178  00128C  B4D8               	btfsc	status,2,c
  2179  00128E  D7EA               	goto	l168
  2180  001290  0A01               	xorlw	1	; case 5
  2181  001292  B4D8               	btfsc	status,2,c
  2182  001294  D7E9               	goto	l169
  2183  001296  0A03               	xorlw	3	; case 6
  2184  001298  B4D8               	btfsc	status,2,c
  2185  00129A  D7E2               	goto	l167
  2186  00129C  D000               	goto	l170
  2187  00129E                     l170:
  2188  00129E  0012               	return		;funcret
  2189  0012A0                     __end_of_set_d3:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           prodh	equ	0xFF4
  2196                           prodl	equ	0xFF3
  2197                           intcon	equ	0xFF2
  2198                           intcon2	equ	0xFF1
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           postdec1	equ	0xFE5
  2202                           fsr1l	equ	0xFE1
  2203                           indf2	equ	0xFDF
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _set_d2 *****************
  2211 ;; Defined at:
  2212 ;;		line 133 in file "Lab10p1.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  color           1    wreg     unsigned char 
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;  color           1   16[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;		None               void
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;Total ram usage:        1 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    3
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text3
  2241  0012A0                     __ptext3:
  2242                           	opt stack 0
  2243  0012A0                     _set_d2:
  2244                           	opt stack 27
  2245                           
  2246                           ;incstack = 0
  2247                           ;set_d2@color stored from wreg
  2248  0012A0  6E11               	movwf	set_d2@color,c
  2249                           
  2250                           ;Lab10p1.c: 135: switch(color)
  2251  0012A2  D014               	goto	l3737
  2252  0012A4                     l150:
  2253  0012A4  9A83               	bcf	3971,5,c	;volatile
  2254  0012A6  D001               	goto	L8
  2255  0012A8                     l152:
  2256  0012A8  8A83               	bsf	3971,5,c	;volatile
  2257  0012AA                     L8:
  2258  0012AA  9C83               	bcf	3971,6,c	;volatile
  2259  0012AC  D002               	goto	L9
  2260  0012AE                     l153:
  2261  0012AE  9A83               	bcf	3971,5,c	;volatile
  2262  0012B0  8C83               	bsf	3971,6,c	;volatile
  2263  0012B2                     L9:
  2264  0012B2  9E83               	bcf	3971,7,c	;volatile
  2265  0012B4  D022               	goto	l158
  2266  0012B6                     l154:
  2267  0012B6  9A83               	bcf	3971,5,c	;volatile
  2268  0012B8  9C83               	bcf	3971,6,c	;volatile
  2269  0012BA  D006               	goto	L12
  2270  0012BC                     l155:
  2271  0012BC  9A83               	bcf	3971,5,c	;volatile
  2272  0012BE  D003               	goto	L13
  2273  0012C0                     l156:
  2274  0012C0  8A83               	bsf	3971,5,c	;volatile
  2275  0012C2  D7FA               	goto	L14
  2276  0012C4                     l157:
  2277  0012C4  8A83               	bsf	3971,5,c	;volatile
  2278  0012C6                     L13:
  2279  0012C6  8C83               	bsf	3971,6,c	;volatile
  2280  0012C8                     L12:
  2281  0012C8  8E83               	bsf	3971,7,c	;volatile
  2282                           
  2283                           ;Lab10p1.c: 144: }
  2284  0012CA  D017               	goto	l158
  2285  0012CC                     l3737:
  2286  0012CC  5011               	movf	set_d2@color,w,c
  2287                           
  2288                           ; Switch size 1, requested type "space"
  2289                           ; Number of cases is 7, Range of values is 0 to 6
  2290                           ; switch strategies available:
  2291                           ; Name         Instructions Cycles
  2292                           ; simple_byte           22    12 (average)
  2293                           ;	Chosen strategy is simple_byte
  2294  0012CE  0A00               	xorlw	0	; case 0
  2295  0012D0  B4D8               	btfsc	status,2,c
  2296  0012D2  D7E8               	goto	l150
  2297  0012D4  0A01               	xorlw	1	; case 1
  2298  0012D6  B4D8               	btfsc	status,2,c
  2299  0012D8  D7E7               	goto	l152
  2300  0012DA  0A03               	xorlw	3	; case 2
  2301  0012DC  B4D8               	btfsc	status,2,c
  2302  0012DE  D7E7               	goto	l153
  2303  0012E0  0A01               	xorlw	1	; case 3
  2304  0012E2  B4D8               	btfsc	status,2,c
  2305  0012E4  D7E8               	goto	l154
  2306  0012E6  0A07               	xorlw	7	; case 4
  2307  0012E8  B4D8               	btfsc	status,2,c
  2308  0012EA  D7EA               	goto	l156
  2309  0012EC  0A01               	xorlw	1	; case 5
  2310  0012EE  B4D8               	btfsc	status,2,c
  2311  0012F0  D7E9               	goto	l157
  2312  0012F2  0A03               	xorlw	3	; case 6
  2313  0012F4  B4D8               	btfsc	status,2,c
  2314  0012F6  D7E2               	goto	l155
  2315  0012F8  D000               	goto	l158
  2316  0012FA                     l158:
  2317  0012FA  0012               	return		;funcret
  2318  0012FC                     __end_of_set_d2:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           intcon2	equ	0xFF1
  2328                           postinc0	equ	0xFEE
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _set_d1 *****************
  2340 ;; Defined at:
  2341 ;;		line 118 in file "Lab10p1.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  color           1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  color           1   16[COMRAM] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;		None               void
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;Total ram usage:        1 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    3
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text4
  2370  0012FC                     __ptext4:
  2371                           	opt stack 0
  2372  0012FC                     _set_d1:
  2373                           	opt stack 27
  2374                           
  2375                           ;incstack = 0
  2376                           ;set_d1@color stored from wreg
  2377  0012FC  6E11               	movwf	set_d1@color,c
  2378                           
  2379                           ;Lab10p1.c: 120: switch(color)
  2380  0012FE  D014               	goto	l3731
  2381  001300                     l138:
  2382  001300  9083               	bcf	3971,0,c	;volatile
  2383  001302  D001               	goto	L15
  2384  001304                     l140:
  2385  001304  8083               	bsf	3971,0,c	;volatile
  2386  001306                     L15:
  2387  001306  9283               	bcf	3971,1,c	;volatile
  2388  001308  D002               	goto	L16
  2389  00130A                     l141:
  2390  00130A  9083               	bcf	3971,0,c	;volatile
  2391  00130C  8283               	bsf	3971,1,c	;volatile
  2392  00130E                     L16:
  2393  00130E  9483               	bcf	3971,2,c	;volatile
  2394  001310  D022               	goto	l146
  2395  001312                     l142:
  2396  001312  9083               	bcf	3971,0,c	;volatile
  2397  001314  9283               	bcf	3971,1,c	;volatile
  2398  001316  D006               	goto	L19
  2399  001318                     l143:
  2400  001318  9083               	bcf	3971,0,c	;volatile
  2401  00131A  D003               	goto	L20
  2402  00131C                     l144:
  2403  00131C  8083               	bsf	3971,0,c	;volatile
  2404  00131E  D7FA               	goto	L21
  2405  001320                     l145:
  2406  001320  8083               	bsf	3971,0,c	;volatile
  2407  001322                     L20:
  2408  001322  8283               	bsf	3971,1,c	;volatile
  2409  001324                     L19:
  2410  001324  8483               	bsf	3971,2,c	;volatile
  2411                           
  2412                           ;Lab10p1.c: 129: }
  2413  001326  D017               	goto	l146
  2414  001328                     l3731:
  2415  001328  5011               	movf	set_d1@color,w,c
  2416                           
  2417                           ; Switch size 1, requested type "space"
  2418                           ; Number of cases is 7, Range of values is 0 to 6
  2419                           ; switch strategies available:
  2420                           ; Name         Instructions Cycles
  2421                           ; simple_byte           22    12 (average)
  2422                           ;	Chosen strategy is simple_byte
  2423  00132A  0A00               	xorlw	0	; case 0
  2424  00132C  B4D8               	btfsc	status,2,c
  2425  00132E  D7E8               	goto	l138
  2426  001330  0A01               	xorlw	1	; case 1
  2427  001332  B4D8               	btfsc	status,2,c
  2428  001334  D7E7               	goto	l140
  2429  001336  0A03               	xorlw	3	; case 2
  2430  001338  B4D8               	btfsc	status,2,c
  2431  00133A  D7E7               	goto	l141
  2432  00133C  0A01               	xorlw	1	; case 3
  2433  00133E  B4D8               	btfsc	status,2,c
  2434  001340  D7E8               	goto	l142
  2435  001342  0A07               	xorlw	7	; case 4
  2436  001344  B4D8               	btfsc	status,2,c
  2437  001346  D7EA               	goto	l144
  2438  001348  0A01               	xorlw	1	; case 5
  2439  00134A  B4D8               	btfsc	status,2,c
  2440  00134C  D7E9               	goto	l145
  2441  00134E  0A03               	xorlw	3	; case 6
  2442  001350  B4D8               	btfsc	status,2,c
  2443  001352  D7E2               	goto	l143
  2444  001354  D000               	goto	l146
  2445  001356                     l146:
  2446  001356  0012               	return		;funcret
  2447  001358                     __end_of_set_d1:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           tblptrh	equ	0xFF7
  2451                           tblptrl	equ	0xFF6
  2452                           tablat	equ	0xFF5
  2453                           prodh	equ	0xFF4
  2454                           prodl	equ	0xFF3
  2455                           intcon	equ	0xFF2
  2456                           intcon2	equ	0xFF1
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           postdec1	equ	0xFE5
  2460                           fsr1l	equ	0xFE1
  2461                           indf2	equ	0xFDF
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _printf *****************
  2469 ;; Defined at:
  2470 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  f               2   29[COMRAM] PTR const unsigned char 
  2473 ;;		 -> STR_1(22), 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  idx             1   41[COMRAM] unsigned char 
  2476 ;;  val             4   44[COMRAM] unsigned long 
  2477 ;;  tmpval          4    0        struct .
  2478 ;;  cp              3    0        PTR const unsigned char 
  2479 ;;  width           2   51[COMRAM] int 
  2480 ;;  ap              2   48[COMRAM] PTR void [1]
  2481 ;;		 -> ?_printf(2), 
  2482 ;;  prec            2   42[COMRAM] int 
  2483 ;;  len             2    0        unsigned int 
  2484 ;;  c               1   53[COMRAM] char 
  2485 ;;  flag            1   50[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  2   29[COMRAM] int 
  2488 ;; Registers used:
  2489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:       25 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    4
  2502 ;; This function calls:
  2503 ;;		___lldiv
  2504 ;;		___wmul
  2505 ;;		_isdigit
  2506 ;;		_putch
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text5
  2513  00001C                     __ptext5:
  2514                           	opt stack 0
  2515  00001C                     _printf:
  2516                           	opt stack 26
  2517                           
  2518                           ;doprnt.c: 466: va_list ap;
  2519                           ;doprnt.c: 499: signed char c;
  2520                           ;doprnt.c: 501: int width;
  2521                           ;doprnt.c: 504: int prec;
  2522                           ;doprnt.c: 508: unsigned char flag;
  2523                           ;doprnt.c: 523: union {
  2524                           ;doprnt.c: 524: unsigned long vd;
  2525                           ;doprnt.c: 525: double integ;
  2526                           ;doprnt.c: 526: } tmpval;
  2527                           ;doprnt.c: 528: unsigned long val;
  2528                           ;doprnt.c: 529: unsigned len;
  2529                           ;doprnt.c: 530: const char * cp;
  2530                           ;doprnt.c: 533: *ap = __va_start();
  2531                           
  2532                           ;incstack = 0
  2533  00001C  0E20               	movlw	low (?_printf+2)
  2534  00001E  6E31               	movwf	printf@ap,c
  2535  000020  0E00               	movlw	high (?_printf+2)
  2536  000022  6E32               	movwf	printf@ap+1,c
  2537                           
  2538                           ;doprnt.c: 536: while(c = *f++) {
  2539  000024  D13D               	goto	l3843
  2540  000026                     l3761:
  2541                           
  2542                           ;doprnt.c: 538: if(c != '%')
  2543  000026  0E25               	movlw	37
  2544  000028  1836               	xorwf	printf@c,w,c
  2545  00002A  B4D8               	btfsc	status,2,c
  2546  00002C  D004               	goto	l3765
  2547                           
  2548                           ;doprnt.c: 540: {
  2549                           ;doprnt.c: 541: (putch(c) );
  2550  00002E  5036               	movf	printf@c,w,c
  2551  000030  EC54  F00B         	call	_putch
  2552                           
  2553                           ;doprnt.c: 542: continue;
  2554  000034  D135               	goto	l3843
  2555  000036                     l3765:
  2556                           
  2557                           ;doprnt.c: 543: }
  2558                           ;doprnt.c: 546: width = 0;
  2559  000036  0E00               	movlw	0
  2560  000038  6E35               	movwf	printf@width+1,c
  2561  00003A  0E00               	movlw	0
  2562  00003C  6E34               	movwf	printf@width,c
  2563                           
  2564                           ;doprnt.c: 548: flag = 0;
  2565  00003E  0E00               	movlw	0
  2566  000040  6E33               	movwf	printf@flag,c
  2567                           
  2568                           ;doprnt.c: 551: switch(*f) {
  2569                           
  2570                           ;doprnt.c: 550: for(;;) {
  2571  000042  D005               	goto	l3771
  2572  000044                     l3767:
  2573                           
  2574                           ;doprnt.c: 580: flag |= 0x04;
  2575  000044  8433               	bsf	printf@flag,2,c
  2576                           
  2577                           ;doprnt.c: 581: f++;
  2578  000046  4A1E               	infsnz	printf@f,f,c
  2579  000048  2A1F               	incf	printf@f+1,f,c
  2580                           
  2581                           ;doprnt.c: 582: continue;
  2582  00004A  D001               	goto	l3771
  2583                           
  2584                           ;doprnt.c: 584: }
  2585  00004C  D00B               	goto	l3773
  2586  00004E                     l3771:
  2587  00004E  C01E  FFF6         	movff	printf@f,tblptrl
  2588  000052  C01F  FFF7         	movff	printf@f+1,tblptrh
  2589  000056                     	if	0	;tblptru may be non-zero
  2590  000056                     	endif
  2591  000056                     	if	0	;tblptru may be non-zero
  2592  000056                     	endif
  2593  000056  0008               	tblrd		*
  2594  000058  50F5               	movf	tablat,w,c
  2595                           
  2596                           ; Switch size 1, requested type "space"
  2597                           ; Number of cases is 1, Range of values is 48 to 48
  2598                           ; switch strategies available:
  2599                           ; Name         Instructions Cycles
  2600                           ; simple_byte            4     3 (average)
  2601                           ;	Chosen strategy is simple_byte
  2602  00005A  0A30               	xorlw	48	; case 48
  2603  00005C  B4D8               	btfsc	status,2,c
  2604  00005E  D7F2               	goto	l3767
  2605                           
  2606                           ;doprnt.c: 585: break;
  2607  000060  D001               	goto	l3773
  2608                           
  2609                           ;doprnt.c: 586: }
  2610  000062  D7F5               	goto	l3771
  2611  000064                     l3773:
  2612                           
  2613                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2614  000064  C01E  FFF6         	movff	printf@f,tblptrl
  2615  000068  C01F  FFF7         	movff	printf@f+1,tblptrh
  2616  00006C                     	if	0	;tblptru may be non-zero
  2617  00006C                     	endif
  2618  00006C                     	if	0	;tblptru may be non-zero
  2619  00006C                     	endif
  2620  00006C  0008               	tblrd		*
  2621  00006E  50F5               	movf	tablat,w,c
  2622  000070  ECF4  F00A         	call	_isdigit
  2623  000074  A0D8               	btfss	status,0,c
  2624  000076  D03B               	goto	l3789
  2625                           
  2626                           ;doprnt.c: 598: width = 0;
  2627  000078  0E00               	movlw	0
  2628  00007A  6E35               	movwf	printf@width+1,c
  2629  00007C  0E00               	movlw	0
  2630  00007E  6E34               	movwf	printf@width,c
  2631  000080  D000               	goto	l3777
  2632  000082                     l3777:
  2633                           
  2634                           ;doprnt.c: 600: width *= 10;
  2635  000082  C034  F011         	movff	printf@width,___wmul@multiplier
  2636  000086  C035  F012         	movff	printf@width+1,___wmul@multiplier+1
  2637  00008A  0E00               	movlw	0
  2638  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2639  00008E  0E0A               	movlw	10
  2640  000090  6E13               	movwf	___wmul@multiplicand,c
  2641  000092  ECCE  F00A         	call	___wmul	;wreg free
  2642  000096  C011  F034         	movff	?___wmul,printf@width
  2643  00009A  C012  F035         	movff	?___wmul+1,printf@width+1
  2644                           
  2645                           ;doprnt.c: 601: width += *f++ - '0';
  2646  00009E  0ED0               	movlw	208
  2647  0000A0  6E26               	movwf	??_printf& (0+255),c
  2648  0000A2  0EFF               	movlw	255
  2649  0000A4  6E27               	movwf	(??_printf+1)& (0+255),c
  2650  0000A6  C01E  FFF6         	movff	printf@f,tblptrl
  2651  0000AA  C01F  FFF7         	movff	printf@f+1,tblptrh
  2652  0000AE                     	if	0	;tblptru may be non-zero
  2653  0000AE                     	endif
  2654  0000AE                     	if	0	;tblptru may be non-zero
  2655  0000AE                     	endif
  2656  0000AE  0008               	tblrd		*
  2657  0000B0  50F5               	movf	tablat,w,c
  2658  0000B2  6E28               	movwf	(??_printf+2)& (0+255),c
  2659  0000B4  6A29               	clrf	(??_printf+3)& (0+255),c
  2660  0000B6  5026               	movf	??_printf,w,c
  2661  0000B8  2628               	addwf	??_printf+2,f,c
  2662  0000BA  5027               	movf	??_printf+1,w,c
  2663  0000BC  2229               	addwfc	??_printf+3,f,c
  2664  0000BE  5028               	movf	??_printf+2,w,c
  2665  0000C0  2634               	addwf	printf@width,f,c
  2666  0000C2  5029               	movf	??_printf+3,w,c
  2667  0000C4  2235               	addwfc	printf@width+1,f,c
  2668  0000C6  4A1E               	infsnz	printf@f,f,c
  2669  0000C8  2A1F               	incf	printf@f+1,f,c
  2670                           
  2671                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2672  0000CA  C01E  FFF6         	movff	printf@f,tblptrl
  2673  0000CE  C01F  FFF7         	movff	printf@f+1,tblptrh
  2674  0000D2                     	if	0	;tblptru may be non-zero
  2675  0000D2                     	endif
  2676  0000D2                     	if	0	;tblptru may be non-zero
  2677  0000D2                     	endif
  2678  0000D2  0008               	tblrd		*
  2679  0000D4  50F5               	movf	tablat,w,c
  2680  0000D6  ECF4  F00A         	call	_isdigit
  2681  0000DA  A0D8               	btfss	status,0,c
  2682  0000DC  D008               	goto	l3789
  2683  0000DE  D7D1               	goto	l3777
  2684                           
  2685                           ;doprnt.c: 635: switch(c = *f++) {
  2686                           
  2687                           ;doprnt.c: 608: }
  2688                           ;doprnt.c: 633: loop:
  2689  0000E0  D006               	goto	l3789
  2690                           
  2691                           ;doprnt.c: 638: goto alldone;
  2692                           
  2693                           ;doprnt.c: 637: case 0:
  2694  0000E2  D0EC               	goto	l477
  2695  0000E4                     l3785:
  2696                           
  2697                           ;doprnt.c: 643: flag |= 0x10;
  2698  0000E4  8833               	bsf	printf@flag,4,c
  2699                           
  2700                           ;doprnt.c: 644: goto loop;
  2701  0000E6  D003               	goto	l3789
  2702                           
  2703                           ;doprnt.c: 723: break;
  2704                           
  2705                           ;doprnt.c: 718: case 'x':
  2706  0000E8  D015               	goto	l456
  2707                           
  2708                           ;doprnt.c: 813: continue;
  2709                           
  2710                           ;doprnt.c: 802: default:
  2711  0000EA  D0DA               	goto	l3843
  2712                           
  2713                           ;doprnt.c: 822: }
  2714  0000EC  D013               	goto	l456
  2715  0000EE                     l3789:
  2716  0000EE  C01E  FFF6         	movff	printf@f,tblptrl
  2717  0000F2  C01F  FFF7         	movff	printf@f+1,tblptrh
  2718  0000F6  4A1E               	infsnz	printf@f,f,c
  2719  0000F8  2A1F               	incf	printf@f+1,f,c
  2720  0000FA                     	if	0	;tblptru may be non-zero
  2721  0000FA                     	endif
  2722  0000FA                     	if	0	;tblptru may be non-zero
  2723  0000FA                     	endif
  2724  0000FA  0008               	tblrd		*
  2725  0000FC  CFF5 F036          	movff	tablat,printf@c
  2726  000100  5036               	movf	printf@c,w,c
  2727                           
  2728                           ; Switch size 1, requested type "space"
  2729                           ; Number of cases is 3, Range of values is 0 to 120
  2730                           ; switch strategies available:
  2731                           ; Name         Instructions Cycles
  2732                           ; simple_byte           10     6 (average)
  2733                           ;	Chosen strategy is simple_byte
  2734  000102  0A00               	xorlw	0	; case 0
  2735  000104  B4D8               	btfsc	status,2,c
  2736  000106  D0DA               	goto	l477
  2737  000108  0A6C               	xorlw	108	; case 108
  2738  00010A  B4D8               	btfsc	status,2,c
  2739  00010C  D7EB               	goto	l3785
  2740  00010E  0A14               	xorlw	20	; case 120
  2741  000110  A4D8               	btfss	status,2,c
  2742  000112  D0C6               	goto	l3843
  2743  000114                     l456:
  2744                           
  2745                           ;doprnt.c: 1273: {
  2746                           ;doprnt.c: 1281: if(flag & 0x10)
  2747  000114  A833               	btfss	printf@flag,4,c
  2748  000116  D00E               	goto	l3795
  2749                           
  2750                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2751  000118  C031  FFD9         	movff	printf@ap,fsr2l
  2752  00011C  C032  FFDA         	movff	printf@ap+1,fsr2h
  2753  000120  CFDE F02D          	movff	postinc2,printf@val
  2754  000124  CFDE F02E          	movff	postinc2,printf@val+1
  2755  000128  CFDE F02F          	movff	postinc2,printf@val+2
  2756  00012C  CFDE F030          	movff	postinc2,printf@val+3
  2757  000130  0E04               	movlw	4
  2758  000132  D00F               	goto	L22
  2759  000134                     l3795:
  2760                           
  2761                           ;doprnt.c: 1283: else
  2762                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2763  000134  C031  FFD9         	movff	printf@ap,fsr2l
  2764  000138  C032  FFDA         	movff	printf@ap+1,fsr2h
  2765  00013C  CFDE F026          	movff	postinc2,??_printf
  2766  000140  CFDD F027          	movff	postdec2,??_printf+1
  2767  000144  C026  F02D         	movff	??_printf,printf@val
  2768  000148  C027  F02E         	movff	??_printf+1,printf@val+1
  2769  00014C  6A2F               	clrf	printf@val+2,c
  2770  00014E  6A30               	clrf	printf@val+3,c
  2771  000150  0E02               	movlw	2
  2772  000152                     L22:
  2773  000152  2631               	addwf	printf@ap,f,c
  2774  000154  0E00               	movlw	0
  2775  000156  2232               	addwfc	printf@ap+1,f,c
  2776  000158  D000               	goto	l3799
  2777  00015A                     l3799:
  2778                           
  2779                           ;doprnt.c: 1287: }
  2780                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2781  00015A  0E01               	movlw	1
  2782  00015C  6E36               	movwf	printf@c,c
  2783  00015E                     l3801:
  2784  00015E  0E08               	movlw	8
  2785  000160  1836               	xorwf	printf@c,w,c
  2786  000162  B4D8               	btfsc	status,2,c
  2787  000164  D01C               	goto	l3813
  2788  000166  D001               	goto	l3805
  2789  000168  D01A               	goto	l3813
  2790  00016A                     l3805:
  2791                           
  2792                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2793  00016A  5036               	movf	printf@c,w,c
  2794  00016C  0D04               	mullw	4
  2795  00016E  0E9C               	movlw	low _hexpowers
  2796  000170  24F3               	addwf	prodl,w,c
  2797  000172  6EF6               	movwf	tblptrl,c
  2798  000174  0EFF               	movlw	high _hexpowers
  2799  000176  20F4               	addwfc	prodh,w,c
  2800  000178  6EF7               	movwf	tblptrh,c
  2801  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2802  00017A                     	endif
  2803  00017A  0009               	tblrd		*+
  2804  00017C  50F5               	movf	tablat,w,c
  2805  00017E  5C2D               	subwf	printf@val,w,c
  2806  000180  0009               	tblrd		*+
  2807  000182  50F5               	movf	tablat,w,c
  2808  000184  582E               	subwfb	printf@val+1,w,c
  2809  000186  0009               	tblrd		*+
  2810  000188  50F5               	movf	tablat,w,c
  2811  00018A  582F               	subwfb	printf@val+2,w,c
  2812  00018C  0009               	tblrd		*+
  2813  00018E  50F5               	movf	tablat,w,c
  2814  000190  5830               	subwfb	printf@val+3,w,c
  2815  000192  A0D8               	btfss	status,0,c
  2816  000194  D004               	goto	l3813
  2817  000196  D001               	goto	l3809
  2818                           
  2819                           ;doprnt.c: 1318: break;
  2820  000198  D002               	goto	l3813
  2821  00019A                     l3809:
  2822  00019A  2A36               	incf	printf@c,f,c
  2823  00019C  D7E0               	goto	l3801
  2824  00019E                     l3813:
  2825                           
  2826                           ;doprnt.c: 1381: if(width > c)
  2827  00019E  0E80               	movlw	128
  2828  0001A0  BE36               	btfsc	printf@c,7,c
  2829  0001A2  0E7F               	movlw	127
  2830  0001A4  6E26               	movwf	??_printf& (0+255),c
  2831  0001A6  5034               	movf	printf@width,w,c
  2832  0001A8  5C36               	subwf	printf@c,w,c
  2833  0001AA  5035               	movf	printf@width+1,w,c
  2834  0001AC  0A80               	xorlw	128
  2835  0001AE  5826               	subwfb	??_printf& (0+255),w,c
  2836  0001B0  B0D8               	btfsc	status,0,c
  2837  0001B2  D007               	goto	l3817
  2838                           
  2839                           ;doprnt.c: 1382: width -= c;
  2840  0001B4  5036               	movf	printf@c,w,c
  2841  0001B6  5E34               	subwf	printf@width,f,c
  2842  0001B8  0E00               	movlw	0
  2843  0001BA  BE36               	btfsc	printf@c,7,c
  2844  0001BC  0EFF               	movlw	255
  2845  0001BE  5A35               	subwfb	printf@width+1,f,c
  2846  0001C0  D005               	goto	l3819
  2847  0001C2                     l3817:
  2848                           
  2849                           ;doprnt.c: 1383: else
  2850                           ;doprnt.c: 1384: width = 0;
  2851  0001C2  0E00               	movlw	0
  2852  0001C4  6E35               	movwf	printf@width+1,c
  2853  0001C6  0E00               	movlw	0
  2854  0001C8  6E34               	movwf	printf@width,c
  2855  0001CA  D000               	goto	l3819
  2856  0001CC                     l3819:
  2857                           
  2858                           ;doprnt.c: 1387: if(flag & 0x04) {
  2859  0001CC  A433               	btfss	printf@flag,2,c
  2860  0001CE  D010               	goto	l3827
  2861                           
  2862                           ;doprnt.c: 1415: if(width)
  2863  0001D0  5034               	movf	printf@width,w,c
  2864  0001D2  1035               	iorwf	printf@width+1,w,c
  2865  0001D4  B4D8               	btfsc	status,2,c
  2866  0001D6  D01C               	goto	l3833
  2867  0001D8                     l3823:
  2868                           
  2869                           ;doprnt.c: 1417: (putch('0') );
  2870  0001D8  0E30               	movlw	48
  2871  0001DA  EC54  F00B         	call	_putch
  2872                           
  2873                           ;doprnt.c: 1418: while(--width);
  2874  0001DE  0634               	decf	printf@width,f,c
  2875  0001E0  A0D8               	btfss	status,0,c
  2876  0001E2  0635               	decf	printf@width+1,f,c
  2877  0001E4  5034               	movf	printf@width,w,c
  2878  0001E6  1035               	iorwf	printf@width+1,w,c
  2879  0001E8  B4D8               	btfsc	status,2,c
  2880  0001EA  D012               	goto	l3833
  2881  0001EC  D7F5               	goto	l3823
  2882                           
  2883                           ;doprnt.c: 1420: } else
  2884  0001EE  D010               	goto	l3833
  2885  0001F0                     l3827:
  2886                           
  2887                           ;doprnt.c: 1422: {
  2888                           ;doprnt.c: 1424: if(width
  2889                           ;doprnt.c: 1428: )
  2890  0001F0  5034               	movf	printf@width,w,c
  2891  0001F2  1035               	iorwf	printf@width+1,w,c
  2892  0001F4  B4D8               	btfsc	status,2,c
  2893  0001F6  D00C               	goto	l3833
  2894  0001F8                     l3829:
  2895                           
  2896                           ;doprnt.c: 1430: (putch(' ') );
  2897  0001F8  0E20               	movlw	32
  2898  0001FA  EC54  F00B         	call	_putch
  2899                           
  2900                           ;doprnt.c: 1431: while(--width);
  2901  0001FE  0634               	decf	printf@width,f,c
  2902  000200  A0D8               	btfss	status,0,c
  2903  000202  0635               	decf	printf@width+1,f,c
  2904  000204  5034               	movf	printf@width,w,c
  2905  000206  1035               	iorwf	printf@width+1,w,c
  2906  000208  B4D8               	btfsc	status,2,c
  2907  00020A  D002               	goto	l3833
  2908  00020C  D7F5               	goto	l3829
  2909  00020E  D000               	goto	l3833
  2910  000210                     l3833:
  2911                           
  2912                           ;doprnt.c: 1469: }
  2913                           ;doprnt.c: 1472: prec = c;
  2914  000210  5036               	movf	printf@c,w,c
  2915  000212  6E2B               	movwf	printf@prec,c
  2916  000214  6A2C               	clrf	printf@prec+1,c
  2917  000216  BE2B               	btfsc	printf@prec,7,c
  2918  000218  062C               	decf	printf@prec+1,f,c
  2919                           
  2920                           ;doprnt.c: 1474: while(prec--) {
  2921  00021A  D038               	goto	l3841
  2922  00021C                     l3835:
  2923                           
  2924                           ;doprnt.c: 1478: {
  2925                           ;doprnt.c: 1499: {
  2926                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2927  00021C  C02D  F011         	movff	printf@val,___lldiv@dividend
  2928  000220  C02E  F012         	movff	printf@val+1,___lldiv@dividend+1
  2929  000224  C02F  F013         	movff	printf@val+2,___lldiv@dividend+2
  2930  000228  C030  F014         	movff	printf@val+3,___lldiv@dividend+3
  2931  00022C  C02B  F026         	movff	printf@prec,??_printf
  2932  000230  C02C  F027         	movff	printf@prec+1,??_printf+1
  2933  000234  90D8               	bcf	status,0,c
  2934  000236  3626               	rlcf	??_printf,f,c
  2935  000238  3627               	rlcf	??_printf+1,f,c
  2936  00023A  90D8               	bcf	status,0,c
  2937  00023C  3626               	rlcf	??_printf,f,c
  2938  00023E  3627               	rlcf	??_printf+1,f,c
  2939  000240  0E9C               	movlw	low _hexpowers
  2940  000242  2426               	addwf	??_printf,w,c
  2941  000244  6EF6               	movwf	tblptrl,c
  2942  000246  0EFF               	movlw	high _hexpowers
  2943  000248  2027               	addwfc	??_printf+1,w,c
  2944  00024A  6EF7               	movwf	tblptrh,c
  2945  00024C                     	if	0	;There are less than 3 active tblptr bytes
  2946  00024C                     	endif
  2947  00024C  0009               	tblrd		*+
  2948  00024E  CFF5 F015          	movff	tablat,___lldiv@divisor
  2949  000252  0009               	tblrd		*+
  2950  000254  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2951  000258  0009               	tblrd		*+
  2952  00025A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2953  00025E  000A               	tblrd		*-
  2954  000260  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2955  000264  EC6D  F007         	call	___lldiv	;wreg free
  2956  000268  5011               	movf	?___lldiv,w,c
  2957  00026A  0B0F               	andlw	15
  2958  00026C  6E2A               	movwf	printf@idx,c
  2959                           
  2960                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2961  00026E  502A               	movf	printf@idx,w,c
  2962  000270  0D01               	mullw	1
  2963  000272  0EE6               	movlw	low STR_4
  2964  000274  24F3               	addwf	prodl,w,c
  2965  000276  6EF6               	movwf	tblptrl,c
  2966  000278  0EFF               	movlw	high STR_4
  2967  00027A  20F4               	addwfc	prodh,w,c
  2968  00027C  6EF7               	movwf	tblptrh,c
  2969  00027E                     	if	0	;There are less than 3 active tblptr bytes
  2970  00027E                     	endif
  2971  00027E  0008               	tblrd		*
  2972  000280  CFF5 F036          	movff	tablat,printf@c
  2973                           
  2974                           ;doprnt.c: 1508: }
  2975                           ;doprnt.c: 1523: }
  2976                           ;doprnt.c: 1524: (putch(c) );
  2977  000284  5036               	movf	printf@c,w,c
  2978  000286  EC54  F00B         	call	_putch
  2979  00028A  D000               	goto	l3841
  2980  00028C                     l3841:
  2981  00028C  062B               	decf	printf@prec,f,c
  2982  00028E  A0D8               	btfss	status,0,c
  2983  000290  062C               	decf	printf@prec+1,f,c
  2984  000292  282B               	incf	printf@prec,w,c
  2985  000294  E1C3               	bnz	l3835
  2986  000296  282C               	incf	printf@prec+1,w,c
  2987  000298  B4D8               	btfsc	status,2,c
  2988  00029A  D002               	goto	l3843
  2989  00029C  D7BF               	goto	l3835
  2990  00029E  D000               	goto	l3843
  2991  0002A0                     l3843:
  2992  0002A0  C01E  FFF6         	movff	printf@f,tblptrl
  2993  0002A4  C01F  FFF7         	movff	printf@f+1,tblptrh
  2994  0002A8  4A1E               	infsnz	printf@f,f,c
  2995  0002AA  2A1F               	incf	printf@f+1,f,c
  2996  0002AC                     	if	0	;tblptru may be non-zero
  2997  0002AC                     	endif
  2998  0002AC                     	if	0	;tblptru may be non-zero
  2999  0002AC                     	endif
  3000  0002AC  0008               	tblrd		*
  3001  0002AE  CFF5 F036          	movff	tablat,printf@c
  3002  0002B2  5036               	movf	printf@c,w,c
  3003  0002B4  B4D8               	btfsc	status,2,c
  3004  0002B6  D002               	goto	l477
  3005  0002B8  D6B6               	goto	l3761
  3006  0002BA  D000               	goto	l477
  3007  0002BC                     l477:
  3008  0002BC  0012               	return		;funcret
  3009  0002BE                     __end_of_printf:
  3010                           	opt stack 0
  3011                           tblptru	equ	0xFF8
  3012                           tblptrh	equ	0xFF7
  3013                           tblptrl	equ	0xFF6
  3014                           tablat	equ	0xFF5
  3015                           prodh	equ	0xFF4
  3016                           prodl	equ	0xFF3
  3017                           intcon	equ	0xFF2
  3018                           intcon2	equ	0xFF1
  3019                           postinc0	equ	0xFEE
  3020                           wreg	equ	0xFE8
  3021                           postdec1	equ	0xFE5
  3022                           fsr1l	equ	0xFE1
  3023                           indf2	equ	0xFDF
  3024                           postinc2	equ	0xFDE
  3025                           postdec2	equ	0xFDD
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _putch *****************
  3031 ;; Defined at:
  3032 ;;		line 83 in file "Lab10p1.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  c               1    wreg     unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  c               1   16[COMRAM] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;Total ram usage:        1 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    3
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_printf
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text6
  3061  0016A8                     __ptext6:
  3062                           	opt stack 0
  3063  0016A8                     _putch:
  3064                           	opt stack 26
  3065                           
  3066                           ;incstack = 0
  3067                           ;putch@c stored from wreg
  3068  0016A8  6E11               	movwf	putch@c,c
  3069                           
  3070                           ;Lab10p1.c: 85: while (!TRMT);
  3071  0016AA  D000               	goto	l117
  3072  0016AC                     l117:
  3073  0016AC  A2AC               	btfss	4012,1,c	;volatile
  3074  0016AE  D7FE               	goto	l117
  3075                           
  3076                           ;Lab10p1.c: 86: TXREG = c;
  3077  0016B0  C011  FFAD         	movff	putch@c,4013	;volatile
  3078  0016B4  0012               	return		;funcret
  3079  0016B6                     __end_of_putch:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           intcon2	equ	0xFF1
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _isdigit *****************
  3101 ;; Defined at:
  3102 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  c               1    wreg     unsigned char 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  c               1   18[COMRAM] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;		None               void
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:        3 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    3
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_printf
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text7
  3131  0015E8                     __ptext7:
  3132                           	opt stack 0
  3133  0015E8                     _isdigit:
  3134                           	opt stack 26
  3135                           
  3136                           ;incstack = 0
  3137                           ;isdigit@c stored from wreg
  3138  0015E8  6E13               	movwf	isdigit@c,c
  3139  0015EA  0E00               	movlw	0
  3140  0015EC  6E12               	movwf	_isdigit$1784,c
  3141  0015EE  0E3A               	movlw	58
  3142  0015F0  6013               	cpfslt	isdigit@c,c
  3143  0015F2  D006               	goto	l3697
  3144  0015F4  0E2F               	movlw	47
  3145  0015F6  6413               	cpfsgt	isdigit@c,c
  3146  0015F8  D003               	goto	l3697
  3147  0015FA  0E01               	movlw	1
  3148  0015FC  6E12               	movwf	_isdigit$1784,c
  3149  0015FE  D000               	goto	l3697
  3150  001600                     l3697:
  3151  001600  C012  F011         	movff	_isdigit$1784,??_isdigit
  3152  001604  3011               	rrcf	??_isdigit,w,c
  3153  001606  D000               	goto	l944
  3154  001608                     l944:
  3155  001608  0012               	return		;funcret
  3156  00160A                     __end_of_isdigit:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function ___lldiv *****************
  3178 ;; Defined at:
  3179 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  dividend        4   16[COMRAM] unsigned long 
  3182 ;;  divisor         4   20[COMRAM] unsigned long 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  quotient        4   24[COMRAM] unsigned long 
  3185 ;;  counter         1   28[COMRAM] unsigned char 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  4   16[COMRAM] unsigned long 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:       13 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    3
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_printf
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text8
  3210  000EDA                     __ptext8:
  3211                           	opt stack 0
  3212  000EDA                     ___lldiv:
  3213                           	opt stack 26
  3214                           
  3215                           ;incstack = 0
  3216  000EDA  0E00               	movlw	0
  3217  000EDC  6E19               	movwf	___lldiv@quotient,c
  3218  000EDE  0E00               	movlw	0
  3219  000EE0  6E1A               	movwf	___lldiv@quotient+1,c
  3220  000EE2  0E00               	movlw	0
  3221  000EE4  6E1B               	movwf	___lldiv@quotient+2,c
  3222  000EE6  0E00               	movlw	0
  3223  000EE8  6E1C               	movwf	___lldiv@quotient+3,c
  3224  000EEA  5015               	movf	___lldiv@divisor,w,c
  3225  000EEC  1016               	iorwf	___lldiv@divisor+1,w,c
  3226  000EEE  1017               	iorwf	___lldiv@divisor+2,w,c
  3227  000EF0  1018               	iorwf	___lldiv@divisor+3,w,c
  3228  000EF2  B4D8               	btfsc	status,2,c
  3229  000EF4  D02F               	goto	l973
  3230  000EF6  0E01               	movlw	1
  3231  000EF8  6E1D               	movwf	___lldiv@counter,c
  3232  000EFA  D007               	goto	l3709
  3233  000EFC                     l3707:
  3234  000EFC  90D8               	bcf	status,0,c
  3235  000EFE  3615               	rlcf	___lldiv@divisor,f,c
  3236  000F00  3616               	rlcf	___lldiv@divisor+1,f,c
  3237  000F02  3617               	rlcf	___lldiv@divisor+2,f,c
  3238  000F04  3618               	rlcf	___lldiv@divisor+3,f,c
  3239  000F06  2A1D               	incf	___lldiv@counter,f,c
  3240  000F08  D000               	goto	l3709
  3241  000F0A                     l3709:
  3242  000F0A  BE18               	btfsc	___lldiv@divisor+3,7,c
  3243  000F0C  D002               	goto	l3711
  3244  000F0E  D7F6               	goto	l3707
  3245  000F10  D000               	goto	l3711
  3246  000F12                     l3711:
  3247  000F12  90D8               	bcf	status,0,c
  3248  000F14  3619               	rlcf	___lldiv@quotient,f,c
  3249  000F16  361A               	rlcf	___lldiv@quotient+1,f,c
  3250  000F18  361B               	rlcf	___lldiv@quotient+2,f,c
  3251  000F1A  361C               	rlcf	___lldiv@quotient+3,f,c
  3252  000F1C  5015               	movf	___lldiv@divisor,w,c
  3253  000F1E  5C11               	subwf	___lldiv@dividend,w,c
  3254  000F20  5016               	movf	___lldiv@divisor+1,w,c
  3255  000F22  5812               	subwfb	___lldiv@dividend+1,w,c
  3256  000F24  5017               	movf	___lldiv@divisor+2,w,c
  3257  000F26  5813               	subwfb	___lldiv@dividend+2,w,c
  3258  000F28  5018               	movf	___lldiv@divisor+3,w,c
  3259  000F2A  5814               	subwfb	___lldiv@dividend+3,w,c
  3260  000F2C  A0D8               	btfss	status,0,c
  3261  000F2E  D00A               	goto	l3719
  3262  000F30  5015               	movf	___lldiv@divisor,w,c
  3263  000F32  5E11               	subwf	___lldiv@dividend,f,c
  3264  000F34  5016               	movf	___lldiv@divisor+1,w,c
  3265  000F36  5A12               	subwfb	___lldiv@dividend+1,f,c
  3266  000F38  5017               	movf	___lldiv@divisor+2,w,c
  3267  000F3A  5A13               	subwfb	___lldiv@dividend+2,f,c
  3268  000F3C  5018               	movf	___lldiv@divisor+3,w,c
  3269  000F3E  5A14               	subwfb	___lldiv@dividend+3,f,c
  3270  000F40  8019               	bsf	___lldiv@quotient,0,c
  3271  000F42  D000               	goto	l3719
  3272  000F44                     l3719:
  3273  000F44  90D8               	bcf	status,0,c
  3274  000F46  3218               	rrcf	___lldiv@divisor+3,f,c
  3275  000F48  3217               	rrcf	___lldiv@divisor+2,f,c
  3276  000F4A  3216               	rrcf	___lldiv@divisor+1,f,c
  3277  000F4C  3215               	rrcf	___lldiv@divisor,f,c
  3278  000F4E  2E1D               	decfsz	___lldiv@counter,f,c
  3279  000F50  D7E0               	goto	l3711
  3280  000F52  D000               	goto	l973
  3281  000F54                     l973:
  3282  000F54  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3283  000F58  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3284  000F5C  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3285  000F60  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3286  000F64  0012               	return		;funcret
  3287  000F66                     __end_of___lldiv:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon2	equ	0xFF1
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _init_UART *****************
  3309 ;; Defined at:
  3310 ;;		line 88 in file "Lab10p1.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;		None               void
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        0 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    4
  3331 ;; This function calls:
  3332 ;;		_OpenUSART
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text9
  3339  00163C                     __ptext9:
  3340                           	opt stack 0
  3341  00163C                     _init_UART:
  3342                           	opt stack 26
  3343                           
  3344                           ;Lab10p1.c: 90: OpenUSART (0b01111111 & 0b10111111 &
  3345                           ;Lab10p1.c: 91: 0b11111110 & 0b11111101 & 0b11111111 &
  3346                           ;Lab10p1.c: 92: 0b11111111, 25);
  3347                           
  3348                           ;incstack = 0
  3349  00163C  0E00               	movlw	0
  3350  00163E  6E12               	movwf	OpenUSART@spbrg+1,c
  3351  001640  0E19               	movlw	25
  3352  001642  6E11               	movwf	OpenUSART@spbrg,c
  3353  001644  0E3C               	movlw	60
  3354  001646  ECB5  F008         	call	_OpenUSART
  3355                           
  3356                           ;Lab10p1.c: 93: OSCCON = 0x60;
  3357  00164A  0E60               	movlw	96
  3358  00164C  6ED3               	movwf	4051,c	;volatile
  3359  00164E  0012               	return		;funcret
  3360  001650                     __end_of_init_UART:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           intcon2	equ	0xFF1
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _OpenUSART *****************
  3382 ;; Defined at:
  3383 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  config          1    wreg     unsigned char 
  3386 ;;  spbrg           2   16[COMRAM] unsigned int 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  config          1   18[COMRAM] unsigned char 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, status,2
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;Total ram usage:        3 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    3
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_init_UART
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text10
  3413  00116A                     __ptext10:
  3414                           	opt stack 0
  3415  00116A                     _OpenUSART:
  3416                           	opt stack 26
  3417                           
  3418                           ;incstack = 0
  3419                           ;OpenUSART@config stored from wreg
  3420  00116A  6E13               	movwf	OpenUSART@config,c
  3421  00116C  0E00               	movlw	0
  3422  00116E  6EAC               	movwf	4012,c	;volatile
  3423  001170  0E00               	movlw	0
  3424  001172  6EAB               	movwf	4011,c	;volatile
  3425  001174  A013               	btfss	OpenUSART@config,0,c
  3426  001176  D002               	goto	l3547
  3427  001178  88AC               	bsf	4012,4,c	;volatile
  3428  00117A  D000               	goto	l3547
  3429  00117C                     l3547:
  3430  00117C  A213               	btfss	OpenUSART@config,1,c
  3431  00117E  D003               	goto	l3551
  3432  001180  8CAC               	bsf	4012,6,c	;volatile
  3433  001182  8CAB               	bsf	4011,6,c	;volatile
  3434  001184  D000               	goto	l3551
  3435  001186                     l3551:
  3436  001186  A413               	btfss	OpenUSART@config,2,c
  3437  001188  D002               	goto	l3555
  3438  00118A  8EAC               	bsf	4012,7,c	;volatile
  3439  00118C  D000               	goto	l3555
  3440  00118E                     l3555:
  3441  00118E  A613               	btfss	OpenUSART@config,3,c
  3442  001190  D002               	goto	l501
  3443  001192  88AB               	bsf	4011,4,c	;volatile
  3444  001194  D002               	goto	l3559
  3445  001196                     l501:
  3446  001196  8AAB               	bsf	4011,5,c	;volatile
  3447  001198  D000               	goto	l3559
  3448  00119A                     l3559:
  3449  00119A  B813               	btfsc	OpenUSART@config,4,c
  3450  00119C  84AC               	bsf	4012,2,c	;volatile
  3451  00119E  989E               	bcf	3998,4,c	;volatile
  3452  0011A0  AA13               	btfss	OpenUSART@config,5,c
  3453  0011A2  D002               	goto	l3567
  3454  0011A4  86AB               	bsf	4011,3,c	;volatile
  3455  0011A6  D000               	goto	l3567
  3456  0011A8                     l3567:
  3457  0011A8  AC13               	btfss	OpenUSART@config,6,c
  3458  0011AA  D002               	goto	l505
  3459  0011AC  8A9D               	bsf	3997,5,c	;volatile
  3460  0011AE  D001               	goto	l506
  3461  0011B0                     l505:
  3462  0011B0  9A9D               	bcf	3997,5,c	;volatile
  3463  0011B2                     l506:
  3464  0011B2  9A9E               	bcf	3998,5,c	;volatile
  3465  0011B4  AE13               	btfss	OpenUSART@config,7,c
  3466  0011B6  D002               	goto	l507
  3467  0011B8  889D               	bsf	3997,4,c	;volatile
  3468  0011BA  D001               	goto	l508
  3469  0011BC                     l507:
  3470  0011BC  989D               	bcf	3997,4,c	;volatile
  3471  0011BE                     l508:
  3472  0011BE  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3473  0011C2  5012               	movf	OpenUSART@spbrg+1,w,c
  3474  0011C4  6EB0               	movwf	4016,c	;volatile
  3475  0011C6  8AAC               	bsf	4012,5,c	;volatile
  3476  0011C8  8EAB               	bsf	4011,7,c	;volatile
  3477  0011CA  9C94               	bcf	3988,6,c	;volatile
  3478  0011CC  8E94               	bsf	3988,7,c	;volatile
  3479  0011CE  B8AC               	btfsc	4012,4,c	;volatile
  3480  0011D0  BEAC               	btfsc	4012,7,c	;volatile
  3481  0011D2  D002               	goto	l510
  3482  0011D4  8C94               	bsf	3988,6,c	;volatile
  3483  0011D6  D000               	goto	l510
  3484  0011D8                     l510:
  3485  0011D8  0012               	return		;funcret
  3486  0011DA                     __end_of_OpenUSART:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           intcon2	equ	0xFF1
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           postdec1	equ	0xFE5
  3499                           fsr1l	equ	0xFE1
  3500                           indf2	equ	0xFDF
  3501                           postinc2	equ	0xFDE
  3502                           postdec2	equ	0xFDD
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _fillCircle *****************
  3508 ;; Defined at:
  3509 ;;		line 611 in file "ST7735_TFT.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  x0              2   58[COMRAM] int 
  3512 ;;  y0              2   60[COMRAM] int 
  3513 ;;  r               2   62[COMRAM] int 
  3514 ;;  color           2   64[COMRAM] unsigned int 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3526 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;Total ram usage:        8 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    8
  3533 ;; This function calls:
  3534 ;;		_drawFastVLine
  3535 ;;		_fillCircleHelper
  3536 ;; This function is called by:
  3537 ;;		_main
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text11
  3542  001358                     __ptext11:
  3543                           	opt stack 0
  3544  001358                     _fillCircle:
  3545                           	opt stack 22
  3546                           
  3547                           ;ST7735_TFT.c: 613: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3548                           
  3549                           ;incstack = 0
  3550  001358  503F               	movf	fillCircle@r,w,c
  3551  00135A  0800               	sublw	0
  3552  00135C  243D               	addwf	fillCircle@y0,w,c
  3553  00135E  6E18               	movwf	drawFastVLine@y,c
  3554  001360  80D8               	bsf	status,0,c
  3555  001362  343F               	rlcf	fillCircle@r,w,c
  3556  001364  6E19               	movwf	drawFastVLine@h,c
  3557  001366  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3558  00136A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3559  00136E  503B               	movf	fillCircle@x0,w,c
  3560  001370  ECB3  F007         	call	_drawFastVLine
  3561                           
  3562                           ;ST7735_TFT.c: 614: fillCircleHelper(x0, y0, r, 3, 0, color);
  3563  001374  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3564  001378  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3565  00137C  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3566  001380  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3567  001384  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3568  001388  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3569  00138C  0E00               	movlw	0
  3570  00138E  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3571  001390  0E03               	movlw	3
  3572  001392  6E29               	movwf	fillCircleHelper@cornername,c
  3573  001394  0E00               	movlw	0
  3574  001396  6E2C               	movwf	fillCircleHelper@delta+1,c
  3575  001398  0E00               	movlw	0
  3576  00139A  6E2B               	movwf	fillCircleHelper@delta,c
  3577  00139C  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3578  0013A0  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3579  0013A4  EC96  F004         	call	_fillCircleHelper	;wreg free
  3580  0013A8  0012               	return		;funcret
  3581  0013AA                     __end_of_fillCircle:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           intcon2	equ	0xFF1
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           postdec1	equ	0xFE5
  3594                           fsr1l	equ	0xFE1
  3595                           indf2	equ	0xFDF
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _fillCircleHelper *****************
  3603 ;; Defined at:
  3604 ;;		line 586 in file "ST7735_TFT.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  x0              2   34[COMRAM] int 
  3607 ;;  y0              2   36[COMRAM] int 
  3608 ;;  r               2   38[COMRAM] int 
  3609 ;;  cornername      2   40[COMRAM] unsigned int 
  3610 ;;  delta           2   42[COMRAM] int 
  3611 ;;  color           2   44[COMRAM] unsigned int 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  y               2   56[COMRAM] int 
  3614 ;;  x               2   54[COMRAM] int 
  3615 ;;  f               2   52[COMRAM] int 
  3616 ;;  ddF_y           2   50[COMRAM] int 
  3617 ;;  ddF_x           2   48[COMRAM] int 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;		None               void
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:       24 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    7
  3634 ;; This function calls:
  3635 ;;		_drawFastVLine
  3636 ;; This function is called by:
  3637 ;;		_fillCircle
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text12
  3642  00092C                     __ptext12:
  3643                           	opt stack 0
  3644  00092C                     _fillCircleHelper:
  3645                           	opt stack 22
  3646                           
  3647                           ;ST7735_TFT.c: 588: signed int f, ddF_x, ddF_y, x, y;
  3648                           ;ST7735_TFT.c: 589: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3649                           
  3650                           ;incstack = 0
  3651  00092C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3652  000930  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3653  000934  1E2F               	comf	??_fillCircleHelper,f,c
  3654  000936  1E30               	comf	??_fillCircleHelper+1,f,c
  3655  000938  4A2F               	infsnz	??_fillCircleHelper,f,c
  3656  00093A  2A30               	incf	??_fillCircleHelper+1,f,c
  3657  00093C  0E01               	movlw	1
  3658  00093E  242F               	addwf	??_fillCircleHelper,w,c
  3659  000940  6E35               	movwf	fillCircleHelper@f,c
  3660  000942  0E00               	movlw	0
  3661  000944  2030               	addwfc	??_fillCircleHelper+1,w,c
  3662  000946  6E36               	movwf	fillCircleHelper@f+1,c
  3663  000948  0E00               	movlw	0
  3664  00094A  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3665  00094C  0E01               	movlw	1
  3666  00094E  6E31               	movwf	fillCircleHelper@ddF_x,c
  3667  000950  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3668  000954  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3669  000958  90D8               	bcf	status,0,c
  3670  00095A  362F               	rlcf	??_fillCircleHelper,f,c
  3671  00095C  3630               	rlcf	??_fillCircleHelper+1,f,c
  3672  00095E  1E2F               	comf	??_fillCircleHelper,f,c
  3673  000960  1E30               	comf	??_fillCircleHelper+1,f,c
  3674  000962  4A2F               	infsnz	??_fillCircleHelper,f,c
  3675  000964  2A30               	incf	??_fillCircleHelper+1,f,c
  3676  000966  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3677  00096A  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3678  00096E  0E00               	movlw	0
  3679  000970  6E38               	movwf	fillCircleHelper@x+1,c
  3680  000972  0E00               	movlw	0
  3681  000974  6E37               	movwf	fillCircleHelper@x,c
  3682  000976  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3683  00097A  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3684                           
  3685                           ;ST7735_TFT.c: 590: while (x<y) {
  3686  00097E  D067               	goto	l3687
  3687  000980                     l3667:
  3688                           
  3689                           ;ST7735_TFT.c: 591: if (f >= 0) {
  3690  000980  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3691  000982  D00B               	goto	l393
  3692                           
  3693                           ;ST7735_TFT.c: 592: y--;
  3694  000984  0639               	decf	fillCircleHelper@y,f,c
  3695  000986  A0D8               	btfss	status,0,c
  3696  000988  063A               	decf	fillCircleHelper@y+1,f,c
  3697                           
  3698                           ;ST7735_TFT.c: 593: ddF_y += 2;
  3699  00098A  0E02               	movlw	2
  3700  00098C  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3701  00098E  0E00               	movlw	0
  3702  000990  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3703                           
  3704                           ;ST7735_TFT.c: 594: f += ddF_y;
  3705  000992  5033               	movf	fillCircleHelper@ddF_y,w,c
  3706  000994  2635               	addwf	fillCircleHelper@f,f,c
  3707  000996  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3708  000998  2236               	addwfc	fillCircleHelper@f+1,f,c
  3709  00099A                     l393:
  3710                           
  3711                           ;ST7735_TFT.c: 595: }
  3712                           ;ST7735_TFT.c: 596: x++;
  3713  00099A  4A37               	infsnz	fillCircleHelper@x,f,c
  3714  00099C  2A38               	incf	fillCircleHelper@x+1,f,c
  3715                           
  3716                           ;ST7735_TFT.c: 597: ddF_x += 2;
  3717  00099E  0E02               	movlw	2
  3718  0009A0  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3719  0009A2  0E00               	movlw	0
  3720  0009A4  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3721                           
  3722                           ;ST7735_TFT.c: 598: f += ddF_x;
  3723  0009A6  5031               	movf	fillCircleHelper@ddF_x,w,c
  3724  0009A8  2635               	addwf	fillCircleHelper@f,f,c
  3725  0009AA  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3726  0009AC  2236               	addwfc	fillCircleHelper@f+1,f,c
  3727                           
  3728                           ;ST7735_TFT.c: 600: if (cornername & 0x1) {
  3729  0009AE  A029               	btfss	fillCircleHelper@cornername,0,c
  3730  0009B0  D025               	goto	l3683
  3731                           
  3732                           ;ST7735_TFT.c: 601: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3733  0009B2  5039               	movf	fillCircleHelper@y,w,c
  3734  0009B4  0800               	sublw	0
  3735  0009B6  2425               	addwf	fillCircleHelper@y0,w,c
  3736  0009B8  6E18               	movwf	drawFastVLine@y,c
  3737  0009BA  5039               	movf	fillCircleHelper@y,w,c
  3738  0009BC  2439               	addwf	fillCircleHelper@y,w,c
  3739  0009BE  242B               	addwf	fillCircleHelper@delta,w,c
  3740  0009C0  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3741  0009C2  282F               	incf	??_fillCircleHelper,w,c
  3742  0009C4  6E19               	movwf	drawFastVLine@h,c
  3743  0009C6  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3744  0009CA  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3745  0009CE  5023               	movf	fillCircleHelper@x0,w,c
  3746  0009D0  2437               	addwf	fillCircleHelper@x,w,c
  3747  0009D2  ECB3  F007         	call	_drawFastVLine
  3748                           
  3749                           ;ST7735_TFT.c: 602: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3750  0009D6  5037               	movf	fillCircleHelper@x,w,c
  3751  0009D8  0800               	sublw	0
  3752  0009DA  2425               	addwf	fillCircleHelper@y0,w,c
  3753  0009DC  6E18               	movwf	drawFastVLine@y,c
  3754  0009DE  5037               	movf	fillCircleHelper@x,w,c
  3755  0009E0  2437               	addwf	fillCircleHelper@x,w,c
  3756  0009E2  242B               	addwf	fillCircleHelper@delta,w,c
  3757  0009E4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3758  0009E6  282F               	incf	??_fillCircleHelper,w,c
  3759  0009E8  6E19               	movwf	drawFastVLine@h,c
  3760  0009EA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3761  0009EE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3762  0009F2  5023               	movf	fillCircleHelper@x0,w,c
  3763  0009F4  2439               	addwf	fillCircleHelper@y,w,c
  3764  0009F6  ECB3  F007         	call	_drawFastVLine
  3765  0009FA  D000               	goto	l3683
  3766  0009FC                     l3683:
  3767                           
  3768                           ;ST7735_TFT.c: 603: }
  3769                           ;ST7735_TFT.c: 604: if (cornername & 0x2) {
  3770  0009FC  A229               	btfss	fillCircleHelper@cornername,1,c
  3771  0009FE  D027               	goto	l3687
  3772                           
  3773                           ;ST7735_TFT.c: 605: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3774  000A00  5039               	movf	fillCircleHelper@y,w,c
  3775  000A02  0800               	sublw	0
  3776  000A04  2425               	addwf	fillCircleHelper@y0,w,c
  3777  000A06  6E18               	movwf	drawFastVLine@y,c
  3778  000A08  5039               	movf	fillCircleHelper@y,w,c
  3779  000A0A  2439               	addwf	fillCircleHelper@y,w,c
  3780  000A0C  242B               	addwf	fillCircleHelper@delta,w,c
  3781  000A0E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3782  000A10  282F               	incf	??_fillCircleHelper,w,c
  3783  000A12  6E19               	movwf	drawFastVLine@h,c
  3784  000A14  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3785  000A18  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3786  000A1C  5037               	movf	fillCircleHelper@x,w,c
  3787  000A1E  0800               	sublw	0
  3788  000A20  2423               	addwf	fillCircleHelper@x0,w,c
  3789  000A22  ECB3  F007         	call	_drawFastVLine
  3790                           
  3791                           ;ST7735_TFT.c: 606: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3792  000A26  5037               	movf	fillCircleHelper@x,w,c
  3793  000A28  0800               	sublw	0
  3794  000A2A  2425               	addwf	fillCircleHelper@y0,w,c
  3795  000A2C  6E18               	movwf	drawFastVLine@y,c
  3796  000A2E  5037               	movf	fillCircleHelper@x,w,c
  3797  000A30  2437               	addwf	fillCircleHelper@x,w,c
  3798  000A32  242B               	addwf	fillCircleHelper@delta,w,c
  3799  000A34  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3800  000A36  282F               	incf	??_fillCircleHelper,w,c
  3801  000A38  6E19               	movwf	drawFastVLine@h,c
  3802  000A3A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3803  000A3E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3804  000A42  5039               	movf	fillCircleHelper@y,w,c
  3805  000A44  0800               	sublw	0
  3806  000A46  2423               	addwf	fillCircleHelper@x0,w,c
  3807  000A48  ECB3  F007         	call	_drawFastVLine
  3808  000A4C  D000               	goto	l3687
  3809  000A4E                     l3687:
  3810  000A4E  5039               	movf	fillCircleHelper@y,w,c
  3811  000A50  5C37               	subwf	fillCircleHelper@x,w,c
  3812  000A52  5038               	movf	fillCircleHelper@x+1,w,c
  3813  000A54  0A80               	xorlw	128
  3814  000A56  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3815  000A58  503A               	movf	fillCircleHelper@y+1,w,c
  3816  000A5A  0A80               	xorlw	128
  3817  000A5C  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3818  000A5E  A0D8               	btfss	status,0,c
  3819  000A60  D78F               	goto	l3667
  3820  000A62  0012               	return		;funcret
  3821  000A64                     __end_of_fillCircleHelper:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           intcon	equ	0xFF2
  3830                           intcon2	equ	0xFF1
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           postdec1	equ	0xFE5
  3834                           fsr1l	equ	0xFE1
  3835                           indf2	equ	0xFDF
  3836                           postinc2	equ	0xFDE
  3837                           postdec2	equ	0xFDD
  3838                           fsr2h	equ	0xFDA
  3839                           fsr2l	equ	0xFD9
  3840                           status	equ	0xFD8
  3841                           
  3842 ;; *************** function _drawCircle *****************
  3843 ;; Defined at:
  3844 ;;		line 526 in file "ST7735_TFT.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  x0              2   27[COMRAM] int 
  3847 ;;  y0              2   29[COMRAM] int 
  3848 ;;  r               2   31[COMRAM] int 
  3849 ;;  color           2   33[COMRAM] unsigned int 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  y               2   45[COMRAM] int 
  3852 ;;  x               2   43[COMRAM] int 
  3853 ;;  f               2   41[COMRAM] int 
  3854 ;;  ddF_y           2   39[COMRAM] int 
  3855 ;;  ddF_x           2   37[COMRAM] int 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:       20 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    7
  3872 ;; This function calls:
  3873 ;;		_drawPixel
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text13
  3880  0004C8                     __ptext13:
  3881                           	opt stack 0
  3882  0004C8                     _drawCircle:
  3883                           	opt stack 23
  3884                           
  3885                           ;ST7735_TFT.c: 528: signed int f, ddF_x, ddF_y, x, y;
  3886                           ;ST7735_TFT.c: 529: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3887                           
  3888                           ;incstack = 0
  3889  0004C8  C020  F024         	movff	drawCircle@r,??_drawCircle
  3890  0004CC  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3891  0004D0  1E24               	comf	??_drawCircle,f,c
  3892  0004D2  1E25               	comf	??_drawCircle+1,f,c
  3893  0004D4  4A24               	infsnz	??_drawCircle,f,c
  3894  0004D6  2A25               	incf	??_drawCircle+1,f,c
  3895  0004D8  0E01               	movlw	1
  3896  0004DA  2424               	addwf	??_drawCircle,w,c
  3897  0004DC  6E2A               	movwf	drawCircle@f,c
  3898  0004DE  0E00               	movlw	0
  3899  0004E0  2025               	addwfc	??_drawCircle+1,w,c
  3900  0004E2  6E2B               	movwf	drawCircle@f+1,c
  3901  0004E4  0E00               	movlw	0
  3902  0004E6  6E27               	movwf	drawCircle@ddF_x+1,c
  3903  0004E8  0E01               	movlw	1
  3904  0004EA  6E26               	movwf	drawCircle@ddF_x,c
  3905  0004EC  C020  F024         	movff	drawCircle@r,??_drawCircle
  3906  0004F0  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3907  0004F4  90D8               	bcf	status,0,c
  3908  0004F6  3624               	rlcf	??_drawCircle,f,c
  3909  0004F8  3625               	rlcf	??_drawCircle+1,f,c
  3910  0004FA  1E24               	comf	??_drawCircle,f,c
  3911  0004FC  1E25               	comf	??_drawCircle+1,f,c
  3912  0004FE  4A24               	infsnz	??_drawCircle,f,c
  3913  000500  2A25               	incf	??_drawCircle+1,f,c
  3914  000502  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3915  000506  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3916  00050A  0E00               	movlw	0
  3917  00050C  6E2D               	movwf	drawCircle@x+1,c
  3918  00050E  0E00               	movlw	0
  3919  000510  6E2C               	movwf	drawCircle@x,c
  3920  000512  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3921  000516  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3922                           
  3923                           ;ST7735_TFT.c: 530: drawPixel(x0 , y0 + r, color);
  3924  00051A  501E               	movf	drawCircle@y0,w,c
  3925  00051C  2420               	addwf	drawCircle@r,w,c
  3926  00051E  6E18               	movwf	drawPixel@y,c
  3927  000520  C022  F019         	movff	drawCircle@color,drawPixel@color
  3928  000524  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3929  000528  501C               	movf	drawCircle@x0,w,c
  3930  00052A  ECA1  F00A         	call	_drawPixel
  3931                           
  3932                           ;ST7735_TFT.c: 531: drawPixel(x0 , y0 - r, color);
  3933  00052E  5020               	movf	drawCircle@r,w,c
  3934  000530  0800               	sublw	0
  3935  000532  241E               	addwf	drawCircle@y0,w,c
  3936  000534  6E18               	movwf	drawPixel@y,c
  3937  000536  C022  F019         	movff	drawCircle@color,drawPixel@color
  3938  00053A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3939  00053E  501C               	movf	drawCircle@x0,w,c
  3940  000540  ECA1  F00A         	call	_drawPixel
  3941                           
  3942                           ;ST7735_TFT.c: 532: drawPixel(x0+r, y0 , color);
  3943  000544  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3944  000548  C022  F019         	movff	drawCircle@color,drawPixel@color
  3945  00054C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3946  000550  501C               	movf	drawCircle@x0,w,c
  3947  000552  2420               	addwf	drawCircle@r,w,c
  3948  000554  ECA1  F00A         	call	_drawPixel
  3949                           
  3950                           ;ST7735_TFT.c: 533: drawPixel(x0-r, y0 , color);
  3951  000558  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3952  00055C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3953  000560  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3954  000564  5020               	movf	drawCircle@r,w,c
  3955  000566  0800               	sublw	0
  3956  000568  241C               	addwf	drawCircle@x0,w,c
  3957  00056A  ECA1  F00A         	call	_drawPixel
  3958                           
  3959                           ;ST7735_TFT.c: 534: while (x < y) {
  3960  00056E  D078               	goto	l3893
  3961  000570                     l3865:
  3962                           
  3963                           ;ST7735_TFT.c: 535: if (f >= 0) {
  3964  000570  BE2B               	btfsc	drawCircle@f+1,7,c
  3965  000572  D00B               	goto	l375
  3966                           
  3967                           ;ST7735_TFT.c: 536: y--;
  3968  000574  062E               	decf	drawCircle@y,f,c
  3969  000576  A0D8               	btfss	status,0,c
  3970  000578  062F               	decf	drawCircle@y+1,f,c
  3971                           
  3972                           ;ST7735_TFT.c: 537: ddF_y += 2;
  3973  00057A  0E02               	movlw	2
  3974  00057C  2628               	addwf	drawCircle@ddF_y,f,c
  3975  00057E  0E00               	movlw	0
  3976  000580  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3977                           
  3978                           ;ST7735_TFT.c: 538: f += ddF_y;
  3979  000582  5028               	movf	drawCircle@ddF_y,w,c
  3980  000584  262A               	addwf	drawCircle@f,f,c
  3981  000586  5029               	movf	drawCircle@ddF_y+1,w,c
  3982  000588  222B               	addwfc	drawCircle@f+1,f,c
  3983  00058A                     l375:
  3984                           
  3985                           ;ST7735_TFT.c: 539: }
  3986                           ;ST7735_TFT.c: 540: x++;
  3987  00058A  4A2C               	infsnz	drawCircle@x,f,c
  3988  00058C  2A2D               	incf	drawCircle@x+1,f,c
  3989                           
  3990                           ;ST7735_TFT.c: 541: ddF_x += 2;
  3991  00058E  0E02               	movlw	2
  3992  000590  2626               	addwf	drawCircle@ddF_x,f,c
  3993  000592  0E00               	movlw	0
  3994  000594  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3995                           
  3996                           ;ST7735_TFT.c: 542: f += ddF_x;
  3997  000596  5026               	movf	drawCircle@ddF_x,w,c
  3998  000598  262A               	addwf	drawCircle@f,f,c
  3999  00059A  5027               	movf	drawCircle@ddF_x+1,w,c
  4000  00059C  222B               	addwfc	drawCircle@f+1,f,c
  4001                           
  4002                           ;ST7735_TFT.c: 543: drawPixel(x0 + x, y0 + y, color);
  4003  00059E  501E               	movf	drawCircle@y0,w,c
  4004  0005A0  242E               	addwf	drawCircle@y,w,c
  4005  0005A2  6E18               	movwf	drawPixel@y,c
  4006  0005A4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4007  0005A8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4008  0005AC  501C               	movf	drawCircle@x0,w,c
  4009  0005AE  242C               	addwf	drawCircle@x,w,c
  4010  0005B0  ECA1  F00A         	call	_drawPixel
  4011                           
  4012                           ;ST7735_TFT.c: 544: drawPixel(x0 - x, y0 + y, color);
  4013  0005B4  501E               	movf	drawCircle@y0,w,c
  4014  0005B6  242E               	addwf	drawCircle@y,w,c
  4015  0005B8  6E18               	movwf	drawPixel@y,c
  4016  0005BA  C022  F019         	movff	drawCircle@color,drawPixel@color
  4017  0005BE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4018  0005C2  502C               	movf	drawCircle@x,w,c
  4019  0005C4  0800               	sublw	0
  4020  0005C6  241C               	addwf	drawCircle@x0,w,c
  4021  0005C8  ECA1  F00A         	call	_drawPixel
  4022                           
  4023                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 - y, color);
  4024  0005CC  502E               	movf	drawCircle@y,w,c
  4025  0005CE  0800               	sublw	0
  4026  0005D0  241E               	addwf	drawCircle@y0,w,c
  4027  0005D2  6E18               	movwf	drawPixel@y,c
  4028  0005D4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4029  0005D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4030  0005DC  501C               	movf	drawCircle@x0,w,c
  4031  0005DE  242C               	addwf	drawCircle@x,w,c
  4032  0005E0  ECA1  F00A         	call	_drawPixel
  4033                           
  4034                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 - y, color);
  4035  0005E4  502E               	movf	drawCircle@y,w,c
  4036  0005E6  0800               	sublw	0
  4037  0005E8  241E               	addwf	drawCircle@y0,w,c
  4038  0005EA  6E18               	movwf	drawPixel@y,c
  4039  0005EC  C022  F019         	movff	drawCircle@color,drawPixel@color
  4040  0005F0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4041  0005F4  502C               	movf	drawCircle@x,w,c
  4042  0005F6  0800               	sublw	0
  4043  0005F8  241C               	addwf	drawCircle@x0,w,c
  4044  0005FA  ECA1  F00A         	call	_drawPixel
  4045                           
  4046                           ;ST7735_TFT.c: 547: drawPixel(x0 + y, y0 + x, color);
  4047  0005FE  501E               	movf	drawCircle@y0,w,c
  4048  000600  242C               	addwf	drawCircle@x,w,c
  4049  000602  6E18               	movwf	drawPixel@y,c
  4050  000604  C022  F019         	movff	drawCircle@color,drawPixel@color
  4051  000608  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4052  00060C  501C               	movf	drawCircle@x0,w,c
  4053  00060E  242E               	addwf	drawCircle@y,w,c
  4054  000610  ECA1  F00A         	call	_drawPixel
  4055                           
  4056                           ;ST7735_TFT.c: 548: drawPixel(x0 - y, y0 + x, color);
  4057  000614  501E               	movf	drawCircle@y0,w,c
  4058  000616  242C               	addwf	drawCircle@x,w,c
  4059  000618  6E18               	movwf	drawPixel@y,c
  4060  00061A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4061  00061E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4062  000622  502E               	movf	drawCircle@y,w,c
  4063  000624  0800               	sublw	0
  4064  000626  241C               	addwf	drawCircle@x0,w,c
  4065  000628  ECA1  F00A         	call	_drawPixel
  4066                           
  4067                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 - x, color);
  4068  00062C  502C               	movf	drawCircle@x,w,c
  4069  00062E  0800               	sublw	0
  4070  000630  241E               	addwf	drawCircle@y0,w,c
  4071  000632  6E18               	movwf	drawPixel@y,c
  4072  000634  C022  F019         	movff	drawCircle@color,drawPixel@color
  4073  000638  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4074  00063C  501C               	movf	drawCircle@x0,w,c
  4075  00063E  242E               	addwf	drawCircle@y,w,c
  4076  000640  ECA1  F00A         	call	_drawPixel
  4077                           
  4078                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 - x, color);
  4079  000644  502C               	movf	drawCircle@x,w,c
  4080  000646  0800               	sublw	0
  4081  000648  241E               	addwf	drawCircle@y0,w,c
  4082  00064A  6E18               	movwf	drawPixel@y,c
  4083  00064C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4084  000650  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4085  000654  502E               	movf	drawCircle@y,w,c
  4086  000656  0800               	sublw	0
  4087  000658  241C               	addwf	drawCircle@x0,w,c
  4088  00065A  ECA1  F00A         	call	_drawPixel
  4089  00065E  D000               	goto	l3893
  4090  000660                     l3893:
  4091  000660  502E               	movf	drawCircle@y,w,c
  4092  000662  5C2C               	subwf	drawCircle@x,w,c
  4093  000664  502D               	movf	drawCircle@x+1,w,c
  4094  000666  0A80               	xorlw	128
  4095  000668  6E24               	movwf	??_drawCircle& (0+255),c
  4096  00066A  502F               	movf	drawCircle@y+1,w,c
  4097  00066C  0A80               	xorlw	128
  4098  00066E  5824               	subwfb	??_drawCircle& (0+255),w,c
  4099  000670  A0D8               	btfss	status,0,c
  4100  000672  D77E               	goto	l3865
  4101  000674  0012               	return		;funcret
  4102  000676                     __end_of_drawCircle:
  4103                           	opt stack 0
  4104                           tblptru	equ	0xFF8
  4105                           tblptrh	equ	0xFF7
  4106                           tblptrl	equ	0xFF6
  4107                           tablat	equ	0xFF5
  4108                           prodh	equ	0xFF4
  4109                           prodl	equ	0xFF3
  4110                           intcon	equ	0xFF2
  4111                           intcon2	equ	0xFF1
  4112                           postinc0	equ	0xFEE
  4113                           wreg	equ	0xFE8
  4114                           postdec1	equ	0xFE5
  4115                           fsr1l	equ	0xFE1
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function _Initialize_Screen *****************
  4124 ;; Defined at:
  4125 ;;		line 353 in file "Lab10p1.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;		None
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;		None               void
  4132 ;; Registers used:
  4133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;Total ram usage:        0 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:   10
  4146 ;; This function calls:
  4147 ;;		_LCD_Reset
  4148 ;;		_TFT_GreenTab_Initialize
  4149 ;;		_drawtext
  4150 ;;		_fillScreen
  4151 ;;		_strcpy
  4152 ;; This function is called by:
  4153 ;;		_main
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           	psect	text14
  4158  000E4C                     __ptext14:
  4159                           	opt stack 0
  4160  000E4C                     _Initialize_Screen:
  4161                           	opt stack 20
  4162                           
  4163                           ;Lab10p1.c: 355: LCD_Reset();
  4164                           
  4165                           ;incstack = 0
  4166  000E4C  EC32  F00B         	call	_LCD_Reset	;wreg free
  4167                           
  4168                           ;Lab10p1.c: 356: TFT_GreenTab_Initialize();
  4169  000E50  ECB9  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4170                           
  4171                           ;Lab10p1.c: 357: fillScreen(0x0000);
  4172  000E54  0E00               	movlw	0
  4173  000E56  6E25               	movwf	fillScreen@color+1,c
  4174  000E58  0E00               	movlw	0
  4175  000E5A  6E24               	movwf	fillScreen@color,c
  4176  000E5C  EC05  F00B         	call	_fillScreen	;wreg free
  4177                           
  4178                           ;Lab10p1.c: 360: txt = buffer;
  4179  000E60  0E7E               	movlw	low _buffer
  4180  000E62  6E64               	movwf	_txt,c
  4181  000E64  0E01               	movlw	high _buffer
  4182  000E66  6E65               	movwf	_txt+1,c
  4183                           
  4184                           ;Lab10p1.c: 361: strcpy(txt, "ECE3301L Fall 22-S1");
  4185  000E68  C064  F011         	movff	_txt,strcpy@to
  4186  000E6C  C065  F012         	movff	_txt+1,strcpy@to+1
  4187  000E70  0ED2               	movlw	low STR_2
  4188  000E72  6E13               	movwf	strcpy@from,c
  4189  000E74  0EFF               	movlw	high STR_2
  4190  000E76  6E14               	movwf	strcpy@from+1,c
  4191  000E78  EC88  F00A         	call	_strcpy	;wreg free
  4192                           
  4193                           ;Lab10p1.c: 362: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4194  000E7C  0E02               	movlw	2
  4195  000E7E  6E39               	movwf	drawtext@y,c
  4196  000E80  C064  F03A         	movff	_txt,drawtext@_text
  4197  000E84  C065  F03B         	movff	_txt+1,drawtext@_text+1
  4198  000E88  0EFF               	movlw	255
  4199  000E8A  6E3D               	movwf	drawtext@color+1,c
  4200  000E8C  683C               	setf	drawtext@color,c
  4201  000E8E  0E00               	movlw	0
  4202  000E90  6E3F               	movwf	drawtext@bg+1,c
  4203  000E92  0E00               	movlw	0
  4204  000E94  6E3E               	movwf	drawtext@bg,c
  4205  000E96  0E01               	movlw	1
  4206  000E98  6E40               	movwf	drawtext@size,c
  4207  000E9A  0E02               	movlw	2
  4208  000E9C  ECBA  F005         	call	_drawtext
  4209                           
  4210                           ;Lab10p1.c: 364: strcpy(txt, "LAB 10 ");
  4211  000EA0  C064  F011         	movff	_txt,strcpy@to
  4212  000EA4  C065  F012         	movff	_txt+1,strcpy@to+1
  4213  000EA8  0EF7               	movlw	low STR_3
  4214  000EAA  6E13               	movwf	strcpy@from,c
  4215  000EAC  0EFF               	movlw	high STR_3
  4216  000EAE  6E14               	movwf	strcpy@from+1,c
  4217  000EB0  EC88  F00A         	call	_strcpy	;wreg free
  4218                           
  4219                           ;Lab10p1.c: 365: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4220  000EB4  0E0A               	movlw	10
  4221  000EB6  6E39               	movwf	drawtext@y,c
  4222  000EB8  C064  F03A         	movff	_txt,drawtext@_text
  4223  000EBC  C065  F03B         	movff	_txt+1,drawtext@_text+1
  4224  000EC0  0EFF               	movlw	255
  4225  000EC2  6E3D               	movwf	drawtext@color+1,c
  4226  000EC4  683C               	setf	drawtext@color,c
  4227  000EC6  0E00               	movlw	0
  4228  000EC8  6E3F               	movwf	drawtext@bg+1,c
  4229  000ECA  0E00               	movlw	0
  4230  000ECC  6E3E               	movwf	drawtext@bg,c
  4231  000ECE  0E01               	movlw	1
  4232  000ED0  6E40               	movwf	drawtext@size,c
  4233  000ED2  0E32               	movlw	50
  4234  000ED4  ECBA  F005         	call	_drawtext
  4235  000ED8  0012               	return		;funcret
  4236  000EDA                     __end_of_Initialize_Screen:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           intcon2	equ	0xFF1
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           postdec1	equ	0xFE5
  4249                           fsr1l	equ	0xFE1
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _strcpy *****************
  4258 ;; Defined at:
  4259 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  to              2   16[COMRAM] PTR unsigned char 
  4262 ;;		 -> NULL(0), buffer(31), 
  4263 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4264 ;;		 -> STR_3(8), STR_2(20), 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4267 ;;		 -> NULL(0), buffer(31), 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  2   16[COMRAM] PTR unsigned char 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4277 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;Total ram usage:        6 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_Initialize_Screen
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text15
  4292  001510                     __ptext15:
  4293                           	opt stack 0
  4294  001510                     _strcpy:
  4295                           	opt stack 26
  4296                           
  4297                           ;incstack = 0
  4298  001510  C011  F015         	movff	strcpy@to,strcpy@cp
  4299  001514  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4300  001518  D005               	goto	l3655
  4301  00151A                     l3653:
  4302  00151A  4A15               	infsnz	strcpy@cp,f,c
  4303  00151C  2A16               	incf	strcpy@cp+1,f,c
  4304  00151E  4A13               	infsnz	strcpy@from,f,c
  4305  001520  2A14               	incf	strcpy@from+1,f,c
  4306  001522  D000               	goto	l3655
  4307  001524                     l3655:
  4308  001524  C013  FFF6         	movff	strcpy@from,tblptrl
  4309  001528  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4310  00152C                     	if	0	;tblptru may be non-zero
  4311  00152C                     	endif
  4312  00152C                     	if	0	;tblptru may be non-zero
  4313  00152C                     	endif
  4314  00152C  C015  FFD9         	movff	strcpy@cp,fsr2l
  4315  001530  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4316  001534  0008               	tblrd		*
  4317  001536  CFF5 FFDF          	movff	tablat,indf2
  4318  00153A  50DF               	movf	indf2,w,c
  4319  00153C  A4D8               	btfss	status,2,c
  4320  00153E  D7ED               	goto	l3653
  4321                           
  4322                           ;	Return value of _strcpy is never used
  4323  001540  0012               	return		;funcret
  4324  001542                     __end_of_strcpy:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           intcon2	equ	0xFF1
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postdec1	equ	0xFE5
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function _fillScreen *****************
  4346 ;; Defined at:
  4347 ;;		line 616 in file "ST7735_TFT.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  color           2   35[COMRAM] unsigned int 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;		None
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg, status,2, status,0, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;Total ram usage:        2 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    7
  4368 ;; This function calls:
  4369 ;;		_fillRectangle
  4370 ;; This function is called by:
  4371 ;;		_Initialize_Screen
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text16
  4376  00160A                     __ptext16:
  4377                           	opt stack 0
  4378  00160A                     _fillScreen:
  4379                           	opt stack 22
  4380                           
  4381                           ;ST7735_TFT.c: 618: fillRectangle(0, 0, 128, 160, color);
  4382                           
  4383                           ;incstack = 0
  4384  00160A  0E00               	movlw	0
  4385  00160C  6E18               	movwf	fillRectangle@y,c
  4386  00160E  0E80               	movlw	128
  4387  001610  6E19               	movwf	fillRectangle@w,c
  4388  001612  0EA0               	movlw	160
  4389  001614  6E1A               	movwf	fillRectangle@h,c
  4390  001616  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4391  00161A  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4392  00161E  0E00               	movlw	0
  4393  001620  ECB8  F006         	call	_fillRectangle
  4394  001624  0012               	return		;funcret
  4395  001626                     __end_of_fillScreen:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           postinc0	equ	0xFEE
  4406                           wreg	equ	0xFE8
  4407                           postdec1	equ	0xFE5
  4408                           fsr1l	equ	0xFE1
  4409                           indf2	equ	0xFDF
  4410                           postinc2	equ	0xFDE
  4411                           postdec2	equ	0xFDD
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _fillRectangle *****************
  4417 ;; Defined at:
  4418 ;;		line 501 in file "ST7735_TFT.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  x               1    wreg     unsigned char 
  4421 ;;  y               1   23[COMRAM] unsigned char 
  4422 ;;  w               1   24[COMRAM] unsigned char 
  4423 ;;  h               1   25[COMRAM] unsigned char 
  4424 ;;  color           2   26[COMRAM] unsigned int 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  x               1   34[COMRAM] unsigned char 
  4427 ;;  lo              1   33[COMRAM] unsigned char 
  4428 ;;  hi              1   32[COMRAM] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;		None               void
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:       12 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    6
  4445 ;; This function calls:
  4446 ;;		_setAddrWindow
  4447 ;;		_spiwrite
  4448 ;; This function is called by:
  4449 ;;		_fillScreen
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text17
  4454  000D70                     __ptext17:
  4455                           	opt stack 0
  4456  000D70                     _fillRectangle:
  4457                           	opt stack 22
  4458                           
  4459                           ;incstack = 0
  4460                           ;fillRectangle@x stored from wreg
  4461  000D70  6E23               	movwf	fillRectangle@x,c
  4462                           
  4463                           ;ST7735_TFT.c: 503: unsigned char hi, lo;
  4464                           ;ST7735_TFT.c: 504: if((x >= 128) || (y >= 160))
  4465  000D72  0E80               	movlw	128
  4466  000D74  6023               	cpfslt	fillRectangle@x,c
  4467  000D76  D069               	goto	l364
  4468  000D78  0E9F               	movlw	159
  4469  000D7A  6418               	cpfsgt	fillRectangle@y,c
  4470  000D7C  D001               	goto	l3501
  4471                           
  4472                           ;ST7735_TFT.c: 505: return;
  4473  000D7E  D065               	goto	l364
  4474  000D80                     l3501:
  4475                           
  4476                           ;ST7735_TFT.c: 506: if((x + w - 1) >= 128)
  4477  000D80  0EFF               	movlw	255
  4478  000D82  6E1D               	movwf	??_fillRectangle& (0+255),c
  4479  000D84  0EFF               	movlw	255
  4480  000D86  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4481  000D88  5019               	movf	fillRectangle@w,w,c
  4482  000D8A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4483  000D8E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4484  000D90  261F               	addwf	??_fillRectangle+2,f,c
  4485  000D92  0E00               	movlw	0
  4486  000D94  2220               	addwfc	??_fillRectangle+3,f,c
  4487  000D96  501D               	movf	??_fillRectangle,w,c
  4488  000D98  261F               	addwf	??_fillRectangle+2,f,c
  4489  000D9A  501E               	movf	??_fillRectangle+1,w,c
  4490  000D9C  2220               	addwfc	??_fillRectangle+3,f,c
  4491  000D9E  BE20               	btfsc	??_fillRectangle+3,7,c
  4492  000DA0  D00A               	goto	l365
  4493  000DA2  5020               	movf	??_fillRectangle+3,w,c
  4494  000DA4  E104               	bnz	u2400
  4495  000DA6  0E80               	movlw	128
  4496  000DA8  5C1F               	subwf	??_fillRectangle+2,w,c
  4497  000DAA  A0D8               	btfss	status,0,c
  4498  000DAC  D004               	goto	l365
  4499  000DAE                     u2400:
  4500                           
  4501                           ;ST7735_TFT.c: 507: w = 128 - x;
  4502  000DAE  5023               	movf	fillRectangle@x,w,c
  4503  000DB0  0800               	sublw	0
  4504  000DB2  0F80               	addlw	128
  4505  000DB4  6E19               	movwf	fillRectangle@w,c
  4506  000DB6                     l365:
  4507                           
  4508                           ;ST7735_TFT.c: 508: if((y + h - 1) >= 160)
  4509  000DB6  0EFF               	movlw	255
  4510  000DB8  6E1D               	movwf	??_fillRectangle& (0+255),c
  4511  000DBA  0EFF               	movlw	255
  4512  000DBC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4513  000DBE  501A               	movf	fillRectangle@h,w,c
  4514  000DC0  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4515  000DC4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4516  000DC6  261F               	addwf	??_fillRectangle+2,f,c
  4517  000DC8  0E00               	movlw	0
  4518  000DCA  2220               	addwfc	??_fillRectangle+3,f,c
  4519  000DCC  501D               	movf	??_fillRectangle,w,c
  4520  000DCE  261F               	addwf	??_fillRectangle+2,f,c
  4521  000DD0  501E               	movf	??_fillRectangle+1,w,c
  4522  000DD2  2220               	addwfc	??_fillRectangle+3,f,c
  4523  000DD4  BE20               	btfsc	??_fillRectangle+3,7,c
  4524  000DD6  D00B               	goto	l3507
  4525  000DD8  5020               	movf	??_fillRectangle+3,w,c
  4526  000DDA  E104               	bnz	u2410
  4527  000DDC  0EA0               	movlw	160
  4528  000DDE  5C1F               	subwf	??_fillRectangle+2,w,c
  4529  000DE0  A0D8               	btfss	status,0,c
  4530  000DE2  D005               	goto	l3507
  4531  000DE4                     u2410:
  4532                           
  4533                           ;ST7735_TFT.c: 509: h = 160 - y;
  4534  000DE4  5018               	movf	fillRectangle@y,w,c
  4535  000DE6  0800               	sublw	0
  4536  000DE8  0FA0               	addlw	160
  4537  000DEA  6E1A               	movwf	fillRectangle@h,c
  4538  000DEC  D000               	goto	l3507
  4539  000DEE                     l3507:
  4540                           
  4541                           ;ST7735_TFT.c: 510: setAddrWindow(x, y, x+w-1, y+h-1);
  4542  000DEE  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4543  000DF2  5023               	movf	fillRectangle@x,w,c
  4544  000DF4  2419               	addwf	fillRectangle@w,w,c
  4545  000DF6  6E1D               	movwf	??_fillRectangle& (0+255),c
  4546  000DF8  041D               	decf	??_fillRectangle,w,c
  4547  000DFA  6E15               	movwf	setAddrWindow@x1,c
  4548  000DFC  5018               	movf	fillRectangle@y,w,c
  4549  000DFE  241A               	addwf	fillRectangle@h,w,c
  4550  000E00  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4551  000E02  041E               	decf	??_fillRectangle+1,w,c
  4552  000E04  6E16               	movwf	setAddrWindow@y1,c
  4553  000E06  5023               	movf	fillRectangle@x,w,c
  4554  000E08  ECFE  F009         	call	_setAddrWindow
  4555                           
  4556                           ;ST7735_TFT.c: 511: hi = color >> 8; lo = color;
  4557  000E0C  501C               	movf	fillRectangle@color+1,w,c
  4558  000E0E  6E21               	movwf	fillRectangle@hi,c
  4559  000E10  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4560                           
  4561                           ;ST7735_TFT.c: 512: PORTCbits.RC2 = 1;
  4562  000E14  8482               	bsf	3970,2,c	;volatile
  4563                           
  4564                           ;ST7735_TFT.c: 513: PORTCbits.RC4 = 0;
  4565  000E16  9882               	bcf	3970,4,c	;volatile
  4566                           
  4567                           ;ST7735_TFT.c: 515: for(y=h; y>0; y--) {
  4568  000E18  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4569  000E1C                     l3519:
  4570  000E1C  5018               	movf	fillRectangle@y,w,c
  4571  000E1E  B4D8               	btfsc	status,2,c
  4572  000E20  D013               	goto	l368
  4573  000E22  D001               	goto	l367
  4574  000E24  D011               	goto	l368
  4575  000E26                     l367:
  4576                           
  4577                           ;ST7735_TFT.c: 516: for(x = w; x > 0; x--) {
  4578  000E26  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4579  000E2A                     l3523:
  4580  000E2A  5023               	movf	fillRectangle@x,w,c
  4581  000E2C  B4D8               	btfsc	status,2,c
  4582  000E2E  D00A               	goto	l3533
  4583  000E30  D001               	goto	l3527
  4584  000E32  D008               	goto	l3533
  4585  000E34                     l3527:
  4586                           
  4587                           ;ST7735_TFT.c: 517: spiwrite(hi);
  4588  000E34  5021               	movf	fillRectangle@hi,w,c
  4589  000E36  EC28  F00B         	call	_spiwrite
  4590                           
  4591                           ;ST7735_TFT.c: 518: spiwrite(lo);
  4592  000E3A  5022               	movf	fillRectangle@lo,w,c
  4593  000E3C  EC28  F00B         	call	_spiwrite
  4594  000E40  0623               	decf	fillRectangle@x,f,c
  4595  000E42  D7F3               	goto	l3523
  4596  000E44                     l3533:
  4597  000E44  0618               	decf	fillRectangle@y,f,c
  4598  000E46  D7EA               	goto	l3519
  4599  000E48                     l368:
  4600                           
  4601                           ;ST7735_TFT.c: 519: }
  4602                           ;ST7735_TFT.c: 520: }
  4603                           ;ST7735_TFT.c: 521: PORTCbits.RC4 = 1;
  4604  000E48  8882               	bsf	3970,4,c	;volatile
  4605  000E4A                     l364:
  4606  000E4A  0012               	return		;funcret
  4607  000E4C                     __end_of_fillRectangle:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon2	equ	0xFF1
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _drawtext *****************
  4629 ;; Defined at:
  4630 ;;		line 473 in file "ST7735_TFT.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  x               1    wreg     unsigned char 
  4633 ;;  y               1   56[COMRAM] unsigned char 
  4634 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4635 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4636 ;;  color           2   59[COMRAM] unsigned int 
  4637 ;;  bg              2   61[COMRAM] unsigned int 
  4638 ;;  size            1   63[COMRAM] unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  x               1    0[BANK0 ] unsigned char 
  4641 ;;  i               2    3[BANK0 ] unsigned int 
  4642 ;;  textsize        2    1[BANK0 ] unsigned int 
  4643 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4644 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:       17 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    9
  4661 ;; This function calls:
  4662 ;;		_drawChar
  4663 ;;		_strlen
  4664 ;; This function is called by:
  4665 ;;		_main
  4666 ;;		_Initialize_Screen
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text18
  4671  000B74                     __ptext18:
  4672                           	opt stack 0
  4673  000B74                     _drawtext:
  4674                           	opt stack 21
  4675                           
  4676                           ;incstack = 0
  4677                           ;drawtext@x stored from wreg
  4678  000B74  0100               	movlb	0	; () banked
  4679  000B76  6FE9               	movwf	drawtext@x& (0+255),b
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;ST7735_TFT.c: 475: unsigned char cursor_x, cursor_y;
  4683                           ;ST7735_TFT.c: 476: unsigned int textsize, i;
  4684                           ;ST7735_TFT.c: 477: cursor_x = x, cursor_y = y;
  4685  000B78  C0E9  F0EF         	movff	drawtext@x,drawtext@cursor_x
  4686                           
  4687                           ; BSR set to: 0
  4688  000B7C  C039  F0EE         	movff	drawtext@y,drawtext@cursor_y
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;ST7735_TFT.c: 478: textsize = strlen(_text);
  4692  000B80  C03A  F011         	movff	drawtext@_text,strlen@s
  4693  000B84  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4694  000B88  EC4A  F00A         	call	_strlen	;wreg free
  4695  000B8C  C011  F0EA         	movff	?_strlen,drawtext@textsize
  4696  000B90  C012  F0EB         	movff	?_strlen+1,drawtext@textsize+1
  4697                           
  4698                           ;ST7735_TFT.c: 479: for(i = 0; i < textsize; i++){
  4699  000B94  0E00               	movlw	0
  4700  000B96  0100               	movlb	0	; () banked
  4701  000B98  6FED               	movwf	(drawtext@i+1)& (0+255),b
  4702  000B9A  0E00               	movlw	0
  4703  000B9C  6FEC               	movwf	drawtext@i& (0+255),b
  4704  000B9E  D064               	goto	l3625
  4705  000BA0                     l3599:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;ST7735_TFT.c: 480: if(wrap && ((cursor_x + size * 5) > 128)){
  4709  000BA0  5059               	movf	_wrap,w,c
  4710  000BA2  B4D8               	btfsc	status,2,c
  4711  000BA4  D034               	goto	l3615
  4712                           
  4713                           ; BSR set to: 0
  4714  000BA6  5040               	movf	drawtext@size,w,c
  4715  000BA8  0D05               	mullw	5
  4716  000BAA  0100               	movlb	0	; () banked
  4717  000BAC  51EF               	movf	drawtext@cursor_x& (0+255),w,b
  4718  000BAE  6E41               	movwf	??_drawtext& (0+255),c
  4719  000BB0  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4720  000BB2  50F3               	movf	prodl,w,c
  4721  000BB4  2641               	addwf	??_drawtext,f,c
  4722  000BB6  50F4               	movf	prodh,w,c
  4723  000BB8  2242               	addwfc	??_drawtext+1,f,c
  4724  000BBA  BE42               	btfsc	??_drawtext+1,7,c
  4725  000BBC  D028               	goto	l3615
  4726  000BBE  5042               	movf	??_drawtext+1,w,c
  4727  000BC0  E104               	bnz	u2580
  4728  000BC2  0E81               	movlw	129
  4729  000BC4  5C41               	subwf	??_drawtext,w,c
  4730  000BC6  A0D8               	btfss	status,0,c
  4731  000BC8  D022               	goto	l3615
  4732  000BCA                     u2580:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;ST7735_TFT.c: 481: cursor_x = 0;
  4736  000BCA  0E00               	movlw	0
  4737  000BCC  0100               	movlb	0	; () banked
  4738  000BCE  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;ST7735_TFT.c: 482: cursor_y = cursor_y + size * 7 + 3 ;
  4742  000BD0  5040               	movf	drawtext@size,w,c
  4743  000BD2  0D07               	mullw	7
  4744  000BD4  50F3               	movf	prodl,w,c
  4745  000BD6  0100               	movlb	0	; () banked
  4746  000BD8  25EE               	addwf	drawtext@cursor_y& (0+255),w,b
  4747  000BDA  0F03               	addlw	3
  4748  000BDC  0100               	movlb	0	; () banked
  4749  000BDE  6FEE               	movwf	drawtext@cursor_y& (0+255),b
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;ST7735_TFT.c: 483: if(cursor_y > 160) cursor_y = 160;
  4753  000BE0  0EA0               	movlw	160
  4754  000BE2  0100               	movlb	0	; () banked
  4755  000BE4  65EE               	cpfsgt	drawtext@cursor_y& (0+255),b
  4756  000BE6  D004               	goto	l3611
  4757                           
  4758                           ; BSR set to: 0
  4759  000BE8  0EA0               	movlw	160
  4760  000BEA  0100               	movlb	0	; () banked
  4761  000BEC  6FEE               	movwf	drawtext@cursor_y& (0+255),b
  4762  000BEE  D000               	goto	l3611
  4763  000BF0                     l3611:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;ST7735_TFT.c: 484: if(_text[i] == 0x20) goto _skip; }
  4767  000BF0  0100               	movlb	0	; () banked
  4768  000BF2  51EC               	movf	drawtext@i& (0+255),w,b
  4769  000BF4  243A               	addwf	drawtext@_text,w,c
  4770  000BF6  6ED9               	movwf	fsr2l,c
  4771  000BF8  0100               	movlb	0	; () banked
  4772  000BFA  51ED               	movf	(drawtext@i+1)& (0+255),w,b
  4773  000BFC  203B               	addwfc	drawtext@_text+1,w,c
  4774  000BFE  6EDA               	movwf	fsr2h,c
  4775  000C00  0E20               	movlw	32
  4776  000C02  18DE               	xorwf	postinc2,w,c
  4777  000C04  B4D8               	btfsc	status,2,c
  4778  000C06  D02C               	goto	l3623
  4779  000C08  D002               	goto	l3615
  4780                           
  4781                           ; BSR set to: 0
  4782  000C0A  D02A               	goto	l3623
  4783                           
  4784                           ; BSR set to: 0
  4785  000C0C  D000               	goto	l3615
  4786  000C0E                     l3615:
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;ST7735_TFT.c: 485: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4790  000C0E  C0EE  F02E         	movff	drawtext@cursor_y,drawChar@y
  4791  000C12  0100               	movlb	0	; () banked
  4792  000C14  51EC               	movf	drawtext@i& (0+255),w,b
  4793  000C16  243A               	addwf	drawtext@_text,w,c
  4794  000C18  6ED9               	movwf	fsr2l,c
  4795  000C1A  0100               	movlb	0	; () banked
  4796  000C1C  51ED               	movf	(drawtext@i+1)& (0+255),w,b
  4797  000C1E  203B               	addwfc	drawtext@_text+1,w,c
  4798  000C20  6EDA               	movwf	fsr2h,c
  4799  000C22  50DF               	movf	indf2,w,c
  4800  000C24  6E2F               	movwf	drawChar@c,c
  4801  000C26  C03C  F030         	movff	drawtext@color,drawChar@color
  4802  000C2A  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4803  000C2E  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4804  000C32  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4805  000C36  C040  F034         	movff	drawtext@size,drawChar@size
  4806  000C3A  0100               	movlb	0	; () banked
  4807  000C3C  51EF               	movf	drawtext@cursor_x& (0+255),w,b
  4808  000C3E  ECEB  F003         	call	_drawChar
  4809                           
  4810                           ;ST7735_TFT.c: 486: cursor_x = cursor_x + size * 6;
  4811  000C42  5040               	movf	drawtext@size,w,c
  4812  000C44  0D06               	mullw	6
  4813  000C46  50F3               	movf	prodl,w,c
  4814  000C48  0100               	movlb	0	; () banked
  4815  000C4A  25EF               	addwf	drawtext@cursor_x& (0+255),w,b
  4816  000C4C  0100               	movlb	0	; () banked
  4817  000C4E  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;ST7735_TFT.c: 487: if(cursor_x > 128) cursor_x = 128;
  4821  000C50  0E80               	movlw	128
  4822  000C52  0100               	movlb	0	; () banked
  4823  000C54  65EF               	cpfsgt	drawtext@cursor_x& (0+255),b
  4824  000C56  D004               	goto	l3623
  4825                           
  4826                           ; BSR set to: 0
  4827  000C58  0E80               	movlw	128
  4828  000C5A  0100               	movlb	0	; () banked
  4829  000C5C  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4830                           
  4831                           ; BSR set to: 0
  4832  000C5E  D000               	goto	l3623
  4833  000C60                     l3623:
  4834                           
  4835                           ; BSR set to: 0
  4836  000C60  0100               	movlb	0	; () banked
  4837  000C62  4BEC               	infsnz	drawtext@i& (0+255),f,b
  4838  000C64  2BED               	incf	(drawtext@i+1)& (0+255),f,b
  4839  000C66  D000               	goto	l3625
  4840  000C68                     l3625:
  4841                           
  4842                           ; BSR set to: 0
  4843  000C68  0100               	movlb	0	; () banked
  4844  000C6A  51EA               	movf	drawtext@textsize& (0+255),w,b
  4845  000C6C  0100               	movlb	0	; () banked
  4846  000C6E  5DEC               	subwf	drawtext@i& (0+255),w,b
  4847  000C70  0100               	movlb	0	; () banked
  4848  000C72  51EB               	movf	(drawtext@textsize+1)& (0+255),w,b
  4849  000C74  0100               	movlb	0	; () banked
  4850  000C76  59ED               	subwfb	(drawtext@i+1)& (0+255),w,b
  4851  000C78  A0D8               	btfss	status,0,c
  4852  000C7A  D792               	goto	l3599
  4853                           
  4854                           ; BSR set to: 0
  4855                           
  4856                           ; BSR set to: 0
  4857  000C7C  0012               	return		;funcret
  4858  000C7E                     __end_of_drawtext:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           intcon2	equ	0xFF1
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _strlen *****************
  4880 ;; Defined at:
  4881 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4884 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4887 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  2   16[COMRAM] unsigned int 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;Total ram usage:        6 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    3
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_drawtext
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text19
  4912  001494                     __ptext19:
  4913                           	opt stack 0
  4914  001494                     _strlen:
  4915                           	opt stack 26
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;incstack = 0
  4919  001494  C011  F015         	movff	strlen@s,strlen@cp
  4920  001498  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4921  00149C  D003               	goto	l3491
  4922  00149E                     l3489:
  4923  00149E  4A15               	infsnz	strlen@cp,f,c
  4924  0014A0  2A16               	incf	strlen@cp+1,f,c
  4925  0014A2  D000               	goto	l3491
  4926  0014A4                     l3491:
  4927  0014A4  C015  FFD9         	movff	strlen@cp,fsr2l
  4928  0014A8  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4929  0014AC  50DF               	movf	indf2,w,c
  4930  0014AE  A4D8               	btfss	status,2,c
  4931  0014B0  D7F6               	goto	l3489
  4932  0014B2  C011  F013         	movff	strlen@s,??_strlen
  4933  0014B6  C012  F014         	movff	strlen@s+1,??_strlen+1
  4934  0014BA  1E13               	comf	??_strlen,f,c
  4935  0014BC  1E14               	comf	??_strlen+1,f,c
  4936  0014BE  4A13               	infsnz	??_strlen,f,c
  4937  0014C0  2A14               	incf	??_strlen+1,f,c
  4938  0014C2  5015               	movf	strlen@cp,w,c
  4939  0014C4  2413               	addwf	??_strlen,w,c
  4940  0014C6  6E11               	movwf	?_strlen,c
  4941  0014C8  5016               	movf	strlen@cp+1,w,c
  4942  0014CA  2014               	addwfc	??_strlen+1,w,c
  4943  0014CC  6E12               	movwf	?_strlen+1,c
  4944  0014CE  D000               	goto	l1075
  4945  0014D0                     l1075:
  4946  0014D0  0012               	return		;funcret
  4947  0014D2                     __end_of_strlen:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           intcon2	equ	0xFF1
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postdec1	equ	0xFE5
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _drawChar *****************
  4969 ;; Defined at:
  4970 ;;		line 446 in file "ST7735_TFT.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  x               1    wreg     unsigned char 
  4973 ;;  y               1   45[COMRAM] unsigned char 
  4974 ;;  c               1   46[COMRAM] unsigned char 
  4975 ;;  color           2   47[COMRAM] unsigned int 
  4976 ;;  bg              2   49[COMRAM] unsigned int 
  4977 ;;  size            1   51[COMRAM] unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  x               1   53[COMRAM] unsigned char 
  4980 ;;  line            1   52[COMRAM] unsigned char 
  4981 ;;  i               1   55[COMRAM] unsigned char 
  4982 ;;  j               1   54[COMRAM] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4992 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;Total ram usage:       11 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    8
  4999 ;; This function calls:
  5000 ;;		___wmul
  5001 ;;		_drawPixel
  5002 ;;		_fillRect
  5003 ;; This function is called by:
  5004 ;;		_drawtext
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text20
  5009  0007D6                     __ptext20:
  5010                           	opt stack 0
  5011  0007D6                     _drawChar:
  5012                           	opt stack 21
  5013                           
  5014                           ;incstack = 0
  5015                           ;drawChar@x stored from wreg
  5016  0007D6  6E36               	movwf	drawChar@x,c
  5017                           
  5018                           ;ST7735_TFT.c: 448: char i, j;
  5019                           ;ST7735_TFT.c: 449: if((x >= 128) || (y >= 160))
  5020  0007D8  0E80               	movlw	128
  5021  0007DA  6036               	cpfslt	drawChar@x,c
  5022  0007DC  D0A6               	goto	l327
  5023  0007DE  0E9F               	movlw	159
  5024  0007E0  642E               	cpfsgt	drawChar@y,c
  5025  0007E2  D001               	goto	l3437
  5026                           
  5027                           ;ST7735_TFT.c: 450: return;
  5028  0007E4  D0A2               	goto	l327
  5029  0007E6                     l3437:
  5030                           
  5031                           ;ST7735_TFT.c: 451: if(size < 1) size = 1;
  5032  0007E6  5034               	movf	drawChar@size,w,c
  5033  0007E8  A4D8               	btfss	status,2,c
  5034  0007EA  D003               	goto	l3441
  5035  0007EC  0E01               	movlw	1
  5036  0007EE  6E34               	movwf	drawChar@size,c
  5037  0007F0  D000               	goto	l3441
  5038  0007F2                     l3441:
  5039                           
  5040                           ;ST7735_TFT.c: 452: if((c < ' ') || (c > '~'))
  5041  0007F2  0E1F               	movlw	31
  5042  0007F4  642F               	cpfsgt	drawChar@c,c
  5043  0007F6  D004               	goto	l3445
  5044  0007F8  0E7E               	movlw	126
  5045  0007FA  642F               	cpfsgt	drawChar@c,c
  5046  0007FC  D003               	goto	l329
  5047  0007FE  D000               	goto	l3445
  5048  000800                     l3445:
  5049                           
  5050                           ;ST7735_TFT.c: 453: c = '?';
  5051  000800  0E3F               	movlw	63
  5052  000802  6E2F               	movwf	drawChar@c,c
  5053  000804                     l329:
  5054                           
  5055                           ;ST7735_TFT.c: 454: for(i=0; i<5; i++ ) {
  5056  000804  0E00               	movlw	0
  5057  000806  6E38               	movwf	drawChar@i,c
  5058  000808                     l3447:
  5059  000808  0E04               	movlw	4
  5060  00080A  6438               	cpfsgt	drawChar@i,c
  5061  00080C  D001               	goto	l3451
  5062  00080E  D08D               	goto	l327
  5063  000810                     l3451:
  5064                           
  5065                           ;ST7735_TFT.c: 455: unsigned char line;
  5066                           ;ST7735_TFT.c: 456: if(c < 'S')
  5067  000810  0E53               	movlw	83
  5068  000812  602F               	cpfslt	drawChar@c,c
  5069  000814  D015               	goto	l3455
  5070                           
  5071                           ;ST7735_TFT.c: 457: line = font[(c - 32)*5 + i];
  5072  000816  0EE0               	movlw	224
  5073  000818  242F               	addwf	drawChar@c,w,c
  5074  00081A  6E11               	movwf	___wmul@multiplier,c
  5075  00081C  6A12               	clrf	___wmul@multiplier+1,c
  5076  00081E  0EFF               	movlw	255
  5077  000820  2212               	addwfc	___wmul@multiplier+1,f,c
  5078  000822  0E00               	movlw	0
  5079  000824  6E14               	movwf	___wmul@multiplicand+1,c
  5080  000826  0E05               	movlw	5
  5081  000828  6E13               	movwf	___wmul@multiplicand,c
  5082  00082A  ECCE  F00A         	call	___wmul	;wreg free
  5083  00082E  5038               	movf	drawChar@i,w,c
  5084  000830  2611               	addwf	?___wmul,f,c
  5085  000832  0E00               	movlw	0
  5086  000834  2212               	addwfc	?___wmul+1,f,c
  5087  000836  0EC1               	movlw	low _font
  5088  000838  2411               	addwf	?___wmul,w,c
  5089  00083A  6EF6               	movwf	tblptrl,c
  5090  00083C  0EFD               	movlw	high _font
  5091  00083E  D014               	goto	L23
  5092  000840                     l3455:
  5093                           
  5094                           ;ST7735_TFT.c: 458: else
  5095                           ;ST7735_TFT.c: 459: line = font2[(c - 'S')*5 + i];
  5096  000840  0EAD               	movlw	173
  5097  000842  242F               	addwf	drawChar@c,w,c
  5098  000844  6E11               	movwf	___wmul@multiplier,c
  5099  000846  6A12               	clrf	___wmul@multiplier+1,c
  5100  000848  0EFF               	movlw	255
  5101  00084A  2212               	addwfc	___wmul@multiplier+1,f,c
  5102  00084C  0E00               	movlw	0
  5103  00084E  6E14               	movwf	___wmul@multiplicand+1,c
  5104  000850  0E05               	movlw	5
  5105  000852  6E13               	movwf	___wmul@multiplicand,c
  5106  000854  ECCE  F00A         	call	___wmul	;wreg free
  5107  000858  5038               	movf	drawChar@i,w,c
  5108  00085A  2611               	addwf	?___wmul,f,c
  5109  00085C  0E00               	movlw	0
  5110  00085E  2212               	addwfc	?___wmul+1,f,c
  5111  000860  0EC0               	movlw	low _font2
  5112  000862  2411               	addwf	?___wmul,w,c
  5113  000864  6EF6               	movwf	tblptrl,c
  5114  000866  0EFE               	movlw	high _font2
  5115  000868                     L23:
  5116  000868  2012               	addwfc	?___wmul+1,w,c
  5117  00086A  6EF7               	movwf	tblptrh,c
  5118  00086C                     	if	0	;There are less than 3 active tblptr bytes
  5119  00086C                     	endif
  5120  00086C  0008               	tblrd		*
  5121  00086E  CFF5 F035          	movff	tablat,drawChar@line
  5122  000872  D000               	goto	l3457
  5123  000874                     l3457:
  5124                           
  5125                           ;ST7735_TFT.c: 460: for(j=0; j<7; j++, line >>= 1) {
  5126  000874  0E00               	movlw	0
  5127  000876  6E37               	movwf	drawChar@j,c
  5128  000878                     l3459:
  5129  000878  0E06               	movlw	6
  5130  00087A  6437               	cpfsgt	drawChar@j,c
  5131  00087C  D001               	goto	l336
  5132  00087E  D053               	goto	l3483
  5133  000880                     l336:
  5134                           
  5135                           ;ST7735_TFT.c: 461: if(line & 0x01) {
  5136  000880  A035               	btfss	drawChar@line,0,c
  5137  000882  D023               	goto	l3469
  5138                           
  5139                           ;ST7735_TFT.c: 462: if(size == 1) drawPixel(x+i, y+j, color);
  5140  000884  0434               	decf	drawChar@size,w,c
  5141  000886  A4D8               	btfss	status,2,c
  5142  000888  D00C               	goto	l3467
  5143  00088A  502E               	movf	drawChar@y,w,c
  5144  00088C  2437               	addwf	drawChar@j,w,c
  5145  00088E  6E18               	movwf	drawPixel@y,c
  5146  000890  C030  F019         	movff	drawChar@color,drawPixel@color
  5147  000894  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5148  000898  5036               	movf	drawChar@x,w,c
  5149  00089A  2438               	addwf	drawChar@i,w,c
  5150  00089C  ECA1  F00A         	call	_drawPixel
  5151  0008A0  D03E               	goto	l3477
  5152  0008A2                     l3467:
  5153                           
  5154                           ;ST7735_TFT.c: 463: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5155  0008A2  5037               	movf	drawChar@j,w,c
  5156  0008A4  0234               	mulwf	drawChar@size,c
  5157  0008A6  50F3               	movf	prodl,w,c
  5158  0008A8  242E               	addwf	drawChar@y,w,c
  5159  0008AA  6E23               	movwf	fillRect@y,c
  5160  0008AC  C034  F024         	movff	drawChar@size,fillRect@w
  5161  0008B0  C034  F025         	movff	drawChar@size,fillRect@h
  5162  0008B4  C030  F026         	movff	drawChar@color,fillRect@color
  5163  0008B8  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5164  0008BC  5038               	movf	drawChar@i,w,c
  5165  0008BE  0234               	mulwf	drawChar@size,c
  5166  0008C0  50F3               	movf	prodl,w,c
  5167  0008C2  2436               	addwf	drawChar@x,w,c
  5168  0008C4  EC25  F00A         	call	_fillRect
  5169                           
  5170                           ;ST7735_TFT.c: 464: }
  5171  0008C8  D02A               	goto	l3477
  5172  0008CA                     l3469:
  5173                           
  5174                           ;ST7735_TFT.c: 465: else if(bg != color) {
  5175  0008CA  5030               	movf	drawChar@color,w,c
  5176  0008CC  1832               	xorwf	drawChar@bg,w,c
  5177  0008CE  E104               	bnz	u2330
  5178  0008D0  5031               	movf	drawChar@color+1,w,c
  5179  0008D2  1833               	xorwf	drawChar@bg+1,w,c
  5180  0008D4  B4D8               	btfsc	status,2,c
  5181  0008D6  D023               	goto	l3477
  5182  0008D8                     u2330:
  5183                           
  5184                           ;ST7735_TFT.c: 466: if(size == 1) drawPixel(x+i, y+j, bg);
  5185  0008D8  0434               	decf	drawChar@size,w,c
  5186  0008DA  A4D8               	btfss	status,2,c
  5187  0008DC  D00C               	goto	l3475
  5188  0008DE  502E               	movf	drawChar@y,w,c
  5189  0008E0  2437               	addwf	drawChar@j,w,c
  5190  0008E2  6E18               	movwf	drawPixel@y,c
  5191  0008E4  C032  F019         	movff	drawChar@bg,drawPixel@color
  5192  0008E8  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5193  0008EC  5036               	movf	drawChar@x,w,c
  5194  0008EE  2438               	addwf	drawChar@i,w,c
  5195  0008F0  ECA1  F00A         	call	_drawPixel
  5196  0008F4  D014               	goto	l3477
  5197  0008F6                     l3475:
  5198                           
  5199                           ;ST7735_TFT.c: 467: else fillRect(x+i*size, y+j*size, size, size, bg);
  5200  0008F6  5037               	movf	drawChar@j,w,c
  5201  0008F8  0234               	mulwf	drawChar@size,c
  5202  0008FA  50F3               	movf	prodl,w,c
  5203  0008FC  242E               	addwf	drawChar@y,w,c
  5204  0008FE  6E23               	movwf	fillRect@y,c
  5205  000900  C034  F024         	movff	drawChar@size,fillRect@w
  5206  000904  C034  F025         	movff	drawChar@size,fillRect@h
  5207  000908  C032  F026         	movff	drawChar@bg,fillRect@color
  5208  00090C  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5209  000910  5038               	movf	drawChar@i,w,c
  5210  000912  0234               	mulwf	drawChar@size,c
  5211  000914  50F3               	movf	prodl,w,c
  5212  000916  2436               	addwf	drawChar@x,w,c
  5213  000918  EC25  F00A         	call	_fillRect
  5214  00091C  D000               	goto	l3477
  5215  00091E                     l3477:
  5216  00091E  2A37               	incf	drawChar@j,f,c
  5217  000920  90D8               	bcf	status,0,c
  5218  000922  3235               	rrcf	drawChar@line,f,c
  5219  000924  D7A9               	goto	l3459
  5220  000926                     l3483:
  5221  000926  2A38               	incf	drawChar@i,f,c
  5222  000928  D76F               	goto	l3447
  5223  00092A                     l327:
  5224  00092A  0012               	return		;funcret
  5225  00092C                     __end_of_drawChar:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           intcon2	equ	0xFF1
  5235                           postinc0	equ	0xFEE
  5236                           wreg	equ	0xFE8
  5237                           postdec1	equ	0xFE5
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _fillRect *****************
  5247 ;; Defined at:
  5248 ;;		line 436 in file "ST7735_TFT.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  x               1    wreg     unsigned char 
  5251 ;;  y               1   34[COMRAM] unsigned char 
  5252 ;;  w               1   35[COMRAM] unsigned char 
  5253 ;;  h               1   36[COMRAM] unsigned char 
  5254 ;;  color           2   37[COMRAM] unsigned int 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  x               1   42[COMRAM] unsigned char 
  5257 ;;  i               2   43[COMRAM] int 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;		None               void
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5267 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;Total ram usage:       11 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    7
  5274 ;; This function calls:
  5275 ;;		_drawFastVLine
  5276 ;; This function is called by:
  5277 ;;		_drawChar
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text21
  5282  00144A                     __ptext21:
  5283                           	opt stack 0
  5284  00144A                     _fillRect:
  5285                           	opt stack 21
  5286                           
  5287                           ;incstack = 0
  5288                           ;fillRect@x stored from wreg
  5289  00144A  6E2B               	movwf	fillRect@x,c
  5290                           
  5291                           ;ST7735_TFT.c: 438: signed int i;
  5292                           ;ST7735_TFT.c: 440: for (i = x; i < x + w; i++)
  5293  00144C  C02B  F02C         	movff	fillRect@x,fillRect@i
  5294  001450  6A2D               	clrf	fillRect@i+1,c
  5295  001452  D00E               	goto	l3339
  5296  001454                     l3335:
  5297                           
  5298                           ;ST7735_TFT.c: 441: {
  5299                           ;ST7735_TFT.c: 442: drawFastVLine(i, y, h, color);
  5300  001454  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5301  001458  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5302  00145C  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5303  001460  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5304  001464  502C               	movf	fillRect@i,w,c
  5305  001466  ECB3  F007         	call	_drawFastVLine
  5306  00146A  4A2C               	infsnz	fillRect@i,f,c
  5307  00146C  2A2D               	incf	fillRect@i+1,f,c
  5308  00146E  D000               	goto	l3339
  5309  001470                     l3339:
  5310  001470  5024               	movf	fillRect@w,w,c
  5311  001472  C02B  F028         	movff	fillRect@x,??_fillRect
  5312  001476  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5313  001478  2628               	addwf	??_fillRect,f,c
  5314  00147A  0E00               	movlw	0
  5315  00147C  2229               	addwfc	??_fillRect+1,f,c
  5316  00147E  5028               	movf	??_fillRect,w,c
  5317  001480  5C2C               	subwf	fillRect@i,w,c
  5318  001482  502D               	movf	fillRect@i+1,w,c
  5319  001484  0A80               	xorlw	128
  5320  001486  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5321  001488  5029               	movf	??_fillRect+1,w,c
  5322  00148A  0A80               	xorlw	128
  5323  00148C  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5324  00148E  A0D8               	btfss	status,0,c
  5325  001490  D7E1               	goto	l3335
  5326  001492  0012               	return		;funcret
  5327  001494                     __end_of_fillRect:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           intcon2	equ	0xFF1
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           postdec1	equ	0xFE5
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _drawFastVLine *****************
  5349 ;; Defined at:
  5350 ;;		line 415 in file "ST7735_TFT.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  x               1    wreg     unsigned char 
  5353 ;;  y               1   23[COMRAM] unsigned char 
  5354 ;;  h               1   24[COMRAM] unsigned char 
  5355 ;;  color           2   25[COMRAM] unsigned int 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  x               1   33[COMRAM] unsigned char 
  5358 ;;  lo              1   32[COMRAM] unsigned char 
  5359 ;;  hi              1   31[COMRAM] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;Total ram usage:       11 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    6
  5376 ;; This function calls:
  5377 ;;		_setAddrWindow
  5378 ;;		_spiwrite
  5379 ;; This function is called by:
  5380 ;;		_fillRect
  5381 ;;		_fillCircleHelper
  5382 ;;		_fillCircle
  5383 ;;		_drawRect
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text22
  5388  000F66                     __ptext22:
  5389                           	opt stack 0
  5390  000F66                     _drawFastVLine:
  5391                           	opt stack 22
  5392                           
  5393                           ;incstack = 0
  5394                           ;drawFastVLine@x stored from wreg
  5395  000F66  6E22               	movwf	drawFastVLine@x,c
  5396                           
  5397                           ;ST7735_TFT.c: 417: unsigned char hi, lo;
  5398                           ;ST7735_TFT.c: 418: if((x >= 128) || (y >= 160))
  5399  000F68  0E80               	movlw	128
  5400  000F6A  6022               	cpfslt	drawFastVLine@x,c
  5401  000F6C  D03F               	goto	l311
  5402  000F6E  0E9F               	movlw	159
  5403  000F70  6418               	cpfsgt	drawFastVLine@y,c
  5404  000F72  D001               	goto	l3285
  5405                           
  5406                           ;ST7735_TFT.c: 419: return;
  5407  000F74  D03B               	goto	l311
  5408  000F76                     l3285:
  5409                           
  5410                           ;ST7735_TFT.c: 420: if((y + h - 1) >= 160)
  5411  000F76  0EFF               	movlw	255
  5412  000F78  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5413  000F7A  0EFF               	movlw	255
  5414  000F7C  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5415  000F7E  5019               	movf	drawFastVLine@h,w,c
  5416  000F80  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5417  000F84  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5418  000F86  261E               	addwf	??_drawFastVLine+2,f,c
  5419  000F88  0E00               	movlw	0
  5420  000F8A  221F               	addwfc	??_drawFastVLine+3,f,c
  5421  000F8C  501C               	movf	??_drawFastVLine,w,c
  5422  000F8E  261E               	addwf	??_drawFastVLine+2,f,c
  5423  000F90  501D               	movf	??_drawFastVLine+1,w,c
  5424  000F92  221F               	addwfc	??_drawFastVLine+3,f,c
  5425  000F94  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5426  000F96  D00B               	goto	l3289
  5427  000F98  501F               	movf	??_drawFastVLine+3,w,c
  5428  000F9A  E104               	bnz	u2170
  5429  000F9C  0EA0               	movlw	160
  5430  000F9E  5C1E               	subwf	??_drawFastVLine+2,w,c
  5431  000FA0  A0D8               	btfss	status,0,c
  5432  000FA2  D005               	goto	l3289
  5433  000FA4                     u2170:
  5434                           
  5435                           ;ST7735_TFT.c: 421: h = 160 - y;
  5436  000FA4  5018               	movf	drawFastVLine@y,w,c
  5437  000FA6  0800               	sublw	0
  5438  000FA8  0FA0               	addlw	160
  5439  000FAA  6E19               	movwf	drawFastVLine@h,c
  5440  000FAC  D000               	goto	l3289
  5441  000FAE                     l3289:
  5442                           
  5443                           ;ST7735_TFT.c: 422: hi = color >> 8; lo = color;
  5444  000FAE  501B               	movf	drawFastVLine@color+1,w,c
  5445  000FB0  6E20               	movwf	drawFastVLine@hi,c
  5446  000FB2  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5447                           
  5448                           ;ST7735_TFT.c: 423: setAddrWindow(x, y, x, y + h - 1);
  5449  000FB6  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5450  000FBA  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5451  000FBE  5018               	movf	drawFastVLine@y,w,c
  5452  000FC0  2419               	addwf	drawFastVLine@h,w,c
  5453  000FC2  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5454  000FC4  041C               	decf	??_drawFastVLine,w,c
  5455  000FC6  6E16               	movwf	setAddrWindow@y1,c
  5456  000FC8  5022               	movf	drawFastVLine@x,w,c
  5457  000FCA  ECFE  F009         	call	_setAddrWindow
  5458                           
  5459                           ;ST7735_TFT.c: 424: PORTCbits.RC2 = 1;
  5460  000FCE  8482               	bsf	3970,2,c	;volatile
  5461                           
  5462                           ;ST7735_TFT.c: 425: PORTCbits.RC4 = 0;
  5463  000FD0  9882               	bcf	3970,4,c	;volatile
  5464                           
  5465                           ;ST7735_TFT.c: 427: while (h--) {
  5466  000FD2  D007               	goto	l3301
  5467  000FD4                     l3299:
  5468                           
  5469                           ;ST7735_TFT.c: 428: spiwrite(hi);
  5470  000FD4  5020               	movf	drawFastVLine@hi,w,c
  5471  000FD6  EC28  F00B         	call	_spiwrite
  5472                           
  5473                           ;ST7735_TFT.c: 429: spiwrite(lo);
  5474  000FDA  5021               	movf	drawFastVLine@lo,w,c
  5475  000FDC  EC28  F00B         	call	_spiwrite
  5476  000FE0  D000               	goto	l3301
  5477  000FE2                     l3301:
  5478  000FE2  0619               	decf	drawFastVLine@h,f,c
  5479  000FE4  2819               	incf	drawFastVLine@h,w,c
  5480  000FE6  A4D8               	btfss	status,2,c
  5481  000FE8  D7F5               	goto	l3299
  5482                           
  5483                           ;ST7735_TFT.c: 430: }
  5484                           ;ST7735_TFT.c: 431: PORTCbits.RC4 = 1;
  5485  000FEA  8882               	bsf	3970,4,c	;volatile
  5486  000FEC                     l311:
  5487  000FEC  0012               	return		;funcret
  5488  000FEE                     __end_of_drawFastVLine:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           intcon2	equ	0xFF1
  5498                           postinc0	equ	0xFEE
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           fsr1l	equ	0xFE1
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8
  5508                           
  5509 ;; *************** function _drawPixel *****************
  5510 ;; Defined at:
  5511 ;;		line 406 in file "ST7735_TFT.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;  x               1    wreg     unsigned char 
  5514 ;;  y               1   23[COMRAM] unsigned char 
  5515 ;;  color           2   24[COMRAM] unsigned int 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  x               1   26[COMRAM] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5527 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;Total ram usage:        4 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    6
  5534 ;; This function calls:
  5535 ;;		_setAddrWindow
  5536 ;;		_write_data
  5537 ;; This function is called by:
  5538 ;;		_drawChar
  5539 ;;		_drawCircle
  5540 ;;		_drawCircleHelper
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           	psect	text23
  5545  001542                     __ptext23:
  5546                           	opt stack 0
  5547  001542                     _drawPixel:
  5548                           	opt stack 22
  5549                           
  5550                           ;incstack = 0
  5551                           ;drawPixel@x stored from wreg
  5552  001542  6E1B               	movwf	drawPixel@x,c
  5553                           
  5554                           ;ST7735_TFT.c: 408: if((x >= 128) || (y >= 160))
  5555  001544  0E80               	movlw	128
  5556  001546  601B               	cpfslt	drawPixel@x,c
  5557  001548  D013               	goto	l305
  5558  00154A  0E9F               	movlw	159
  5559  00154C  6418               	cpfsgt	drawPixel@y,c
  5560  00154E  D001               	goto	l3327
  5561                           
  5562                           ;ST7735_TFT.c: 409: return;
  5563  001550  D00F               	goto	l305
  5564  001552                     l3327:
  5565                           
  5566                           ;ST7735_TFT.c: 410: setAddrWindow(x,y,x+1,y+1);
  5567  001552  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5568  001556  281B               	incf	drawPixel@x,w,c
  5569  001558  6E15               	movwf	setAddrWindow@x1,c
  5570  00155A  2818               	incf	drawPixel@y,w,c
  5571  00155C  6E16               	movwf	setAddrWindow@y1,c
  5572  00155E  501B               	movf	drawPixel@x,w,c
  5573  001560  ECFE  F009         	call	_setAddrWindow
  5574                           
  5575                           ;ST7735_TFT.c: 411: write_data(color >> 8);
  5576  001564  501A               	movf	drawPixel@color+1,w,c
  5577  001566  EC44  F00B         	call	_write_data
  5578                           
  5579                           ;ST7735_TFT.c: 412: write_data(color & 0xFF);
  5580  00156A  5019               	movf	drawPixel@color,w,c
  5581  00156C  EC44  F00B         	call	_write_data
  5582  001570                     l305:
  5583  001570  0012               	return		;funcret
  5584  001572                     __end_of_drawPixel:
  5585                           	opt stack 0
  5586                           tblptru	equ	0xFF8
  5587                           tblptrh	equ	0xFF7
  5588                           tblptrl	equ	0xFF6
  5589                           tablat	equ	0xFF5
  5590                           prodh	equ	0xFF4
  5591                           prodl	equ	0xFF3
  5592                           intcon	equ	0xFF2
  5593                           intcon2	equ	0xFF1
  5594                           postinc0	equ	0xFEE
  5595                           wreg	equ	0xFE8
  5596                           postdec1	equ	0xFE5
  5597                           fsr1l	equ	0xFE1
  5598                           indf2	equ	0xFDF
  5599                           postinc2	equ	0xFDE
  5600                           postdec2	equ	0xFDD
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _setAddrWindow *****************
  5606 ;; Defined at:
  5607 ;;		line 391 in file "ST7735_TFT.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  x0              1    wreg     unsigned char 
  5610 ;;  y0              1   19[COMRAM] unsigned char 
  5611 ;;  x1              1   20[COMRAM] unsigned char 
  5612 ;;  y1              1   21[COMRAM] unsigned char 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  x0              1   22[COMRAM] unsigned char 
  5615 ;; Return value:  Size  Location     Type
  5616 ;;		None               void
  5617 ;; Registers used:
  5618 ;;		wreg, status,2, status,0, cstack
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5624 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;Total ram usage:        4 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    5
  5631 ;; This function calls:
  5632 ;;		_write_command
  5633 ;;		_write_data
  5634 ;; This function is called by:
  5635 ;;		_drawPixel
  5636 ;;		_drawFastVLine
  5637 ;;		_fillRectangle
  5638 ;;		_drawFastHLine
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text24
  5643  0013FC                     __ptext24:
  5644                           	opt stack 0
  5645  0013FC                     _setAddrWindow:
  5646                           	opt stack 22
  5647                           
  5648                           ;incstack = 0
  5649                           ;setAddrWindow@x0 stored from wreg
  5650  0013FC  6E17               	movwf	setAddrWindow@x0,c
  5651                           
  5652                           ;ST7735_TFT.c: 393: write_command(0x2A);
  5653  0013FE  0E2A               	movlw	42
  5654  001400  EC4C  F00B         	call	_write_command
  5655                           
  5656                           ;ST7735_TFT.c: 394: write_data(0);
  5657  001404  0E00               	movlw	0
  5658  001406  EC44  F00B         	call	_write_data
  5659                           
  5660                           ;ST7735_TFT.c: 395: write_data(x0 + colstart);
  5661  00140A  5017               	movf	setAddrWindow@x0,w,c
  5662  00140C  246A               	addwf	_colstart,w,c
  5663  00140E  EC44  F00B         	call	_write_data
  5664                           
  5665                           ;ST7735_TFT.c: 396: write_data(0);
  5666  001412  0E00               	movlw	0
  5667  001414  EC44  F00B         	call	_write_data
  5668                           
  5669                           ;ST7735_TFT.c: 397: write_data(x1 + colstart);
  5670  001418  5015               	movf	setAddrWindow@x1,w,c
  5671  00141A  246A               	addwf	_colstart,w,c
  5672  00141C  EC44  F00B         	call	_write_data
  5673                           
  5674                           ;ST7735_TFT.c: 398: write_command(0x2B);
  5675  001420  0E2B               	movlw	43
  5676  001422  EC4C  F00B         	call	_write_command
  5677                           
  5678                           ;ST7735_TFT.c: 399: write_data(0);
  5679  001426  0E00               	movlw	0
  5680  001428  EC44  F00B         	call	_write_data
  5681                           
  5682                           ;ST7735_TFT.c: 400: write_data(y0 + rowstart);
  5683  00142C  5014               	movf	setAddrWindow@y0,w,c
  5684  00142E  246C               	addwf	_rowstart,w,c
  5685  001430  EC44  F00B         	call	_write_data
  5686                           
  5687                           ;ST7735_TFT.c: 401: write_data(0);
  5688  001434  0E00               	movlw	0
  5689  001436  EC44  F00B         	call	_write_data
  5690                           
  5691                           ;ST7735_TFT.c: 402: write_data(y1 + rowstart);
  5692  00143A  5016               	movf	setAddrWindow@y1,w,c
  5693  00143C  246C               	addwf	_rowstart,w,c
  5694  00143E  EC44  F00B         	call	_write_data
  5695                           
  5696                           ;ST7735_TFT.c: 403: write_command(0x2C);
  5697  001442  0E2C               	movlw	44
  5698  001444  EC4C  F00B         	call	_write_command
  5699  001448  0012               	return		;funcret
  5700  00144A                     __end_of_setAddrWindow:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon	equ	0xFF2
  5709                           intcon2	equ	0xFF1
  5710                           postinc0	equ	0xFEE
  5711                           wreg	equ	0xFE8
  5712                           postdec1	equ	0xFE5
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _TFT_GreenTab_Initialize *****************
  5722 ;; Defined at:
  5723 ;;		line 641 in file "ST7735_TFT.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        0 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    6
  5744 ;; This function calls:
  5745 ;;		_Rcmd1
  5746 ;;		_Rcmd2red
  5747 ;;		_Rcmd3
  5748 ;;		_write_command
  5749 ;;		_write_data
  5750 ;; This function is called by:
  5751 ;;		_Initialize_Screen
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text25
  5756  001572                     __ptext25:
  5757                           	opt stack 0
  5758  001572                     _TFT_GreenTab_Initialize:
  5759                           	opt stack 23
  5760                           
  5761                           ;ST7735_TFT.c: 643: PORTCbits.RC4 = 1;
  5762                           
  5763                           ;incstack = 0
  5764  001572  8882               	bsf	3970,4,c	;volatile
  5765                           
  5766                           ;ST7735_TFT.c: 644: PORTCbits.RC2 = 0;
  5767  001574  9482               	bcf	3970,2,c	;volatile
  5768                           
  5769                           ;ST7735_TFT.c: 646: SSPSTAT=0x80;
  5770  001576  0E80               	movlw	128
  5771  001578  6EC7               	movwf	4039,c	;volatile
  5772                           
  5773                           ;ST7735_TFT.c: 647: SSPCON1=0x30;
  5774  00157A  0E30               	movlw	48
  5775  00157C  6EC6               	movwf	4038,c	;volatile
  5776                           
  5777                           ;ST7735_TFT.c: 650: Rcmd1();
  5778  00157E  EC32  F005         	call	_Rcmd1	;wreg free
  5779                           
  5780                           ;ST7735_TFT.c: 651: Rcmd2red();
  5781  001582  EC69  F00A         	call	_Rcmd2red	;wreg free
  5782                           
  5783                           ;ST7735_TFT.c: 652: Rcmd3();
  5784  001586  EC3F  F006         	call	_Rcmd3	;wreg free
  5785                           
  5786                           ;ST7735_TFT.c: 653: write_command(0x36);
  5787  00158A  0E36               	movlw	54
  5788  00158C  EC4C  F00B         	call	_write_command
  5789                           
  5790                           ;ST7735_TFT.c: 654: write_data(0xC0);
  5791  001590  0EC0               	movlw	192
  5792  001592  EC44  F00B         	call	_write_data
  5793                           
  5794                           ;ST7735_TFT.c: 655: _tft_type = 1;
  5795  001596  0E01               	movlw	1
  5796  001598  6E68               	movwf	__tft_type,c
  5797  00159A  0012               	return		;funcret
  5798  00159C                     __end_of_TFT_GreenTab_Initialize:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           intcon2	equ	0xFF1
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           postdec1	equ	0xFE5
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _Rcmd3 *****************
  5820 ;; Defined at:
  5821 ;;		line 337 in file "ST7735_TFT.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;		None               void
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    5
  5842 ;; This function calls:
  5843 ;;		_delay_ms
  5844 ;;		_write_command
  5845 ;;		_write_data
  5846 ;; This function is called by:
  5847 ;;		_TFT_GreenTab_Initialize
  5848 ;;		_TFT_BlackTab_Initialize
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text26
  5853  000C7E                     __ptext26:
  5854                           	opt stack 0
  5855  000C7E                     _Rcmd3:
  5856                           	opt stack 23
  5857                           
  5858                           ;ST7735_TFT.c: 339: write_command(0xE0);
  5859                           
  5860                           ;incstack = 0
  5861  000C7E  0EE0               	movlw	224
  5862  000C80  EC4C  F00B         	call	_write_command
  5863                           
  5864                           ;ST7735_TFT.c: 340: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5865  000C84  0E02               	movlw	2
  5866  000C86  EC44  F00B         	call	_write_data
  5867  000C8A  0E1C               	movlw	28
  5868  000C8C  EC44  F00B         	call	_write_data
  5869  000C90  0E07               	movlw	7
  5870  000C92  EC44  F00B         	call	_write_data
  5871  000C96  0E12               	movlw	18
  5872  000C98  EC44  F00B         	call	_write_data
  5873                           
  5874                           ;ST7735_TFT.c: 341: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5875  000C9C  0E37               	movlw	55
  5876  000C9E  EC44  F00B         	call	_write_data
  5877  000CA2  0E32               	movlw	50
  5878  000CA4  EC44  F00B         	call	_write_data
  5879  000CA8  0E29               	movlw	41
  5880  000CAA  EC44  F00B         	call	_write_data
  5881  000CAE  0E2D               	movlw	45
  5882  000CB0  EC44  F00B         	call	_write_data
  5883                           
  5884                           ;ST7735_TFT.c: 342: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5885  000CB4  0E29               	movlw	41
  5886  000CB6  EC44  F00B         	call	_write_data
  5887  000CBA  0E25               	movlw	37
  5888  000CBC  EC44  F00B         	call	_write_data
  5889  000CC0  0E2B               	movlw	43
  5890  000CC2  EC44  F00B         	call	_write_data
  5891  000CC6  0E39               	movlw	57
  5892  000CC8  EC44  F00B         	call	_write_data
  5893                           
  5894                           ;ST7735_TFT.c: 343: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5895  000CCC  0E00               	movlw	0
  5896  000CCE  EC44  F00B         	call	_write_data
  5897  000CD2  0E01               	movlw	1
  5898  000CD4  EC44  F00B         	call	_write_data
  5899  000CD8  0E03               	movlw	3
  5900  000CDA  EC44  F00B         	call	_write_data
  5901  000CDE  0E10               	movlw	16
  5902  000CE0  EC44  F00B         	call	_write_data
  5903                           
  5904                           ;ST7735_TFT.c: 344: write_command(0xE1);
  5905  000CE4  0EE1               	movlw	225
  5906  000CE6  EC4C  F00B         	call	_write_command
  5907                           
  5908                           ;ST7735_TFT.c: 345: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5909  000CEA  0E03               	movlw	3
  5910  000CEC  EC44  F00B         	call	_write_data
  5911  000CF0  0E1D               	movlw	29
  5912  000CF2  EC44  F00B         	call	_write_data
  5913  000CF6  0E07               	movlw	7
  5914  000CF8  EC44  F00B         	call	_write_data
  5915  000CFC  0E06               	movlw	6
  5916  000CFE  EC44  F00B         	call	_write_data
  5917                           
  5918                           ;ST7735_TFT.c: 346: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5919  000D02  0E2E               	movlw	46
  5920  000D04  EC44  F00B         	call	_write_data
  5921  000D08  0E2C               	movlw	44
  5922  000D0A  EC44  F00B         	call	_write_data
  5923  000D0E  0E29               	movlw	41
  5924  000D10  EC44  F00B         	call	_write_data
  5925  000D14  0E2D               	movlw	45
  5926  000D16  EC44  F00B         	call	_write_data
  5927                           
  5928                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5929  000D1A  0E2E               	movlw	46
  5930  000D1C  EC44  F00B         	call	_write_data
  5931  000D20  0E2E               	movlw	46
  5932  000D22  EC44  F00B         	call	_write_data
  5933  000D26  0E37               	movlw	55
  5934  000D28  EC44  F00B         	call	_write_data
  5935  000D2C  0E3F               	movlw	63
  5936  000D2E  EC44  F00B         	call	_write_data
  5937                           
  5938                           ;ST7735_TFT.c: 348: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5939  000D32  0E00               	movlw	0
  5940  000D34  EC44  F00B         	call	_write_data
  5941  000D38  0E00               	movlw	0
  5942  000D3A  EC44  F00B         	call	_write_data
  5943  000D3E  0E02               	movlw	2
  5944  000D40  EC44  F00B         	call	_write_data
  5945  000D44  0E10               	movlw	16
  5946  000D46  EC44  F00B         	call	_write_data
  5947                           
  5948                           ;ST7735_TFT.c: 349: write_command(0x13);
  5949  000D4A  0E13               	movlw	19
  5950  000D4C  EC4C  F00B         	call	_write_command
  5951                           
  5952                           ;ST7735_TFT.c: 350: delay_ms(10);
  5953  000D50  0E00               	movlw	0
  5954  000D52  6E18               	movwf	delay_ms@ms+1,c
  5955  000D54  0E0A               	movlw	10
  5956  000D56  6E17               	movwf	delay_ms@ms,c
  5957  000D58  ECD5  F009         	call	_delay_ms	;wreg free
  5958                           
  5959                           ;ST7735_TFT.c: 351: write_command(0x29);
  5960  000D5C  0E29               	movlw	41
  5961  000D5E  EC4C  F00B         	call	_write_command
  5962                           
  5963                           ;ST7735_TFT.c: 352: delay_ms(100);
  5964  000D62  0E00               	movlw	0
  5965  000D64  6E18               	movwf	delay_ms@ms+1,c
  5966  000D66  0E64               	movlw	100
  5967  000D68  6E17               	movwf	delay_ms@ms,c
  5968  000D6A  ECD5  F009         	call	_delay_ms	;wreg free
  5969  000D6E  0012               	return		;funcret
  5970  000D70                     __end_of_Rcmd3:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           intcon2	equ	0xFF1
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1l	equ	0xFE1
  5984                           indf2	equ	0xFDF
  5985                           postinc2	equ	0xFDE
  5986                           postdec2	equ	0xFDD
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _Rcmd2red *****************
  5992 ;; Defined at:
  5993 ;;		line 327 in file "ST7735_TFT.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    5
  6014 ;; This function calls:
  6015 ;;		_write_command
  6016 ;;		_write_data
  6017 ;; This function is called by:
  6018 ;;		_TFT_GreenTab_Initialize
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text27
  6023  0014D2                     __ptext27:
  6024                           	opt stack 0
  6025  0014D2                     _Rcmd2red:
  6026                           	opt stack 23
  6027                           
  6028                           ;ST7735_TFT.c: 329: write_command(0x2A);
  6029                           
  6030                           ;incstack = 0
  6031  0014D2  0E2A               	movlw	42
  6032  0014D4  EC4C  F00B         	call	_write_command
  6033                           
  6034                           ;ST7735_TFT.c: 330: write_data(0x00); write_data(0x00);
  6035  0014D8  0E00               	movlw	0
  6036  0014DA  EC44  F00B         	call	_write_data
  6037  0014DE  0E00               	movlw	0
  6038  0014E0  EC44  F00B         	call	_write_data
  6039                           
  6040                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x7F);
  6041  0014E4  0E00               	movlw	0
  6042  0014E6  EC44  F00B         	call	_write_data
  6043  0014EA  0E7F               	movlw	127
  6044  0014EC  EC44  F00B         	call	_write_data
  6045                           
  6046                           ;ST7735_TFT.c: 332: write_command(0x2B);
  6047  0014F0  0E2B               	movlw	43
  6048  0014F2  EC4C  F00B         	call	_write_command
  6049                           
  6050                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x00);
  6051  0014F6  0E00               	movlw	0
  6052  0014F8  EC44  F00B         	call	_write_data
  6053  0014FC  0E00               	movlw	0
  6054  0014FE  EC44  F00B         	call	_write_data
  6055                           
  6056                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x9F);
  6057  001502  0E00               	movlw	0
  6058  001504  EC44  F00B         	call	_write_data
  6059  001508  0E9F               	movlw	159
  6060  00150A  EC44  F00B         	call	_write_data
  6061  00150E  0012               	return		;funcret
  6062  001510                     __end_of_Rcmd2red:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           postinc0	equ	0xFEE
  6073                           wreg	equ	0xFE8
  6074                           postdec1	equ	0xFE5
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           fsr2h	equ	0xFDA
  6080                           fsr2l	equ	0xFD9
  6081                           status	equ	0xFD8
  6082                           
  6083 ;; *************** function _Rcmd1 *****************
  6084 ;; Defined at:
  6085 ;;		line 280 in file "ST7735_TFT.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;		None
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;		None               void
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;Total ram usage:        0 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    5
  6106 ;; This function calls:
  6107 ;;		_delay_ms
  6108 ;;		_write_command
  6109 ;;		_write_data
  6110 ;; This function is called by:
  6111 ;;		_TFT_GreenTab_Initialize
  6112 ;;		_TFT_BlackTab_Initialize
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text28
  6117  000A64                     __ptext28:
  6118                           	opt stack 0
  6119  000A64                     _Rcmd1:
  6120                           	opt stack 23
  6121                           
  6122                           ;ST7735_TFT.c: 282: write_command(0x01);
  6123                           
  6124                           ;incstack = 0
  6125  000A64  0E01               	movlw	1
  6126  000A66  EC4C  F00B         	call	_write_command
  6127                           
  6128                           ;ST7735_TFT.c: 283: delay_ms(150);
  6129  000A6A  0E00               	movlw	0
  6130  000A6C  6E18               	movwf	delay_ms@ms+1,c
  6131  000A6E  0E96               	movlw	150
  6132  000A70  6E17               	movwf	delay_ms@ms,c
  6133  000A72  ECD5  F009         	call	_delay_ms	;wreg free
  6134                           
  6135                           ;ST7735_TFT.c: 284: write_command(0x11);
  6136  000A76  0E11               	movlw	17
  6137  000A78  EC4C  F00B         	call	_write_command
  6138                           
  6139                           ;ST7735_TFT.c: 285: delay_ms(500);
  6140  000A7C  0E01               	movlw	1
  6141  000A7E  6E18               	movwf	delay_ms@ms+1,c
  6142  000A80  0EF4               	movlw	244
  6143  000A82  6E17               	movwf	delay_ms@ms,c
  6144  000A84  ECD5  F009         	call	_delay_ms	;wreg free
  6145                           
  6146                           ;ST7735_TFT.c: 286: write_command(0xB1);
  6147  000A88  0EB1               	movlw	177
  6148  000A8A  EC4C  F00B         	call	_write_command
  6149                           
  6150                           ;ST7735_TFT.c: 287: write_data(0x01);
  6151  000A8E  0E01               	movlw	1
  6152  000A90  EC44  F00B         	call	_write_data
  6153                           
  6154                           ;ST7735_TFT.c: 288: write_data(0x2C);
  6155  000A94  0E2C               	movlw	44
  6156  000A96  EC44  F00B         	call	_write_data
  6157                           
  6158                           ;ST7735_TFT.c: 289: write_data(0x2D);
  6159  000A9A  0E2D               	movlw	45
  6160  000A9C  EC44  F00B         	call	_write_data
  6161                           
  6162                           ;ST7735_TFT.c: 290: write_command(0xB2);
  6163  000AA0  0EB2               	movlw	178
  6164  000AA2  EC4C  F00B         	call	_write_command
  6165                           
  6166                           ;ST7735_TFT.c: 291: write_data(0x01);
  6167  000AA6  0E01               	movlw	1
  6168  000AA8  EC44  F00B         	call	_write_data
  6169                           
  6170                           ;ST7735_TFT.c: 292: write_data(0x2C);
  6171  000AAC  0E2C               	movlw	44
  6172  000AAE  EC44  F00B         	call	_write_data
  6173                           
  6174                           ;ST7735_TFT.c: 293: write_data(0x2D);
  6175  000AB2  0E2D               	movlw	45
  6176  000AB4  EC44  F00B         	call	_write_data
  6177                           
  6178                           ;ST7735_TFT.c: 294: write_command(0xB3);
  6179  000AB8  0EB3               	movlw	179
  6180  000ABA  EC4C  F00B         	call	_write_command
  6181                           
  6182                           ;ST7735_TFT.c: 295: write_data(0x01);
  6183  000ABE  0E01               	movlw	1
  6184  000AC0  EC44  F00B         	call	_write_data
  6185                           
  6186                           ;ST7735_TFT.c: 296: write_data(0x2C);
  6187  000AC4  0E2C               	movlw	44
  6188  000AC6  EC44  F00B         	call	_write_data
  6189                           
  6190                           ;ST7735_TFT.c: 297: write_data(0x2D);
  6191  000ACA  0E2D               	movlw	45
  6192  000ACC  EC44  F00B         	call	_write_data
  6193                           
  6194                           ;ST7735_TFT.c: 298: write_data(0x01);
  6195  000AD0  0E01               	movlw	1
  6196  000AD2  EC44  F00B         	call	_write_data
  6197                           
  6198                           ;ST7735_TFT.c: 299: write_data(0x2C);
  6199  000AD6  0E2C               	movlw	44
  6200  000AD8  EC44  F00B         	call	_write_data
  6201                           
  6202                           ;ST7735_TFT.c: 300: write_data(0x2D);
  6203  000ADC  0E2D               	movlw	45
  6204  000ADE  EC44  F00B         	call	_write_data
  6205                           
  6206                           ;ST7735_TFT.c: 301: write_command(0xB4);
  6207  000AE2  0EB4               	movlw	180
  6208  000AE4  EC4C  F00B         	call	_write_command
  6209                           
  6210                           ;ST7735_TFT.c: 302: write_data(0x07);
  6211  000AE8  0E07               	movlw	7
  6212  000AEA  EC44  F00B         	call	_write_data
  6213                           
  6214                           ;ST7735_TFT.c: 303: write_command(0xC0);
  6215  000AEE  0EC0               	movlw	192
  6216  000AF0  EC4C  F00B         	call	_write_command
  6217                           
  6218                           ;ST7735_TFT.c: 304: write_data(0xA2);
  6219  000AF4  0EA2               	movlw	162
  6220  000AF6  EC44  F00B         	call	_write_data
  6221                           
  6222                           ;ST7735_TFT.c: 305: write_data(0x02);
  6223  000AFA  0E02               	movlw	2
  6224  000AFC  EC44  F00B         	call	_write_data
  6225                           
  6226                           ;ST7735_TFT.c: 306: write_data(0x84);
  6227  000B00  0E84               	movlw	132
  6228  000B02  EC44  F00B         	call	_write_data
  6229                           
  6230                           ;ST7735_TFT.c: 307: write_command(0xC1);
  6231  000B06  0EC1               	movlw	193
  6232  000B08  EC4C  F00B         	call	_write_command
  6233                           
  6234                           ;ST7735_TFT.c: 308: write_data(0xC5);
  6235  000B0C  0EC5               	movlw	197
  6236  000B0E  EC44  F00B         	call	_write_data
  6237                           
  6238                           ;ST7735_TFT.c: 309: write_command(0xC2);
  6239  000B12  0EC2               	movlw	194
  6240  000B14  EC4C  F00B         	call	_write_command
  6241                           
  6242                           ;ST7735_TFT.c: 310: write_data(0x0A);
  6243  000B18  0E0A               	movlw	10
  6244  000B1A  EC44  F00B         	call	_write_data
  6245                           
  6246                           ;ST7735_TFT.c: 311: write_data(0x00);
  6247  000B1E  0E00               	movlw	0
  6248  000B20  EC44  F00B         	call	_write_data
  6249                           
  6250                           ;ST7735_TFT.c: 312: write_command(0xC3);
  6251  000B24  0EC3               	movlw	195
  6252  000B26  EC4C  F00B         	call	_write_command
  6253                           
  6254                           ;ST7735_TFT.c: 313: write_data(0x8A);
  6255  000B2A  0E8A               	movlw	138
  6256  000B2C  EC44  F00B         	call	_write_data
  6257                           
  6258                           ;ST7735_TFT.c: 314: write_data(0x2A);
  6259  000B30  0E2A               	movlw	42
  6260  000B32  EC44  F00B         	call	_write_data
  6261                           
  6262                           ;ST7735_TFT.c: 315: write_command(0xC4);
  6263  000B36  0EC4               	movlw	196
  6264  000B38  EC4C  F00B         	call	_write_command
  6265                           
  6266                           ;ST7735_TFT.c: 316: write_data(0x8A);
  6267  000B3C  0E8A               	movlw	138
  6268  000B3E  EC44  F00B         	call	_write_data
  6269                           
  6270                           ;ST7735_TFT.c: 317: write_data(0xEE);
  6271  000B42  0EEE               	movlw	238
  6272  000B44  EC44  F00B         	call	_write_data
  6273                           
  6274                           ;ST7735_TFT.c: 318: write_command(0xC5);
  6275  000B48  0EC5               	movlw	197
  6276  000B4A  EC4C  F00B         	call	_write_command
  6277                           
  6278                           ;ST7735_TFT.c: 319: write_data(0x0E);
  6279  000B4E  0E0E               	movlw	14
  6280  000B50  EC44  F00B         	call	_write_data
  6281                           
  6282                           ;ST7735_TFT.c: 320: write_command(0x20);
  6283  000B54  0E20               	movlw	32
  6284  000B56  EC4C  F00B         	call	_write_command
  6285                           
  6286                           ;ST7735_TFT.c: 321: write_command(0x36);
  6287  000B5A  0E36               	movlw	54
  6288  000B5C  EC4C  F00B         	call	_write_command
  6289                           
  6290                           ;ST7735_TFT.c: 322: write_data(0xC8);
  6291  000B60  0EC8               	movlw	200
  6292  000B62  EC44  F00B         	call	_write_data
  6293                           
  6294                           ;ST7735_TFT.c: 323: write_command(0x3A);
  6295  000B66  0E3A               	movlw	58
  6296  000B68  EC4C  F00B         	call	_write_command
  6297                           
  6298                           ;ST7735_TFT.c: 324: write_data(0x05);
  6299  000B6C  0E05               	movlw	5
  6300  000B6E  EC44  F00B         	call	_write_data
  6301  000B72  0012               	return		;funcret
  6302  000B74                     __end_of_Rcmd1:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           intcon2	equ	0xFF1
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function _write_data *****************
  6324 ;; Defined at:
  6325 ;;		line 208 in file "ST7735_TFT.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  data_           1    wreg     unsigned char 
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  data_           1   18[COMRAM] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;Total ram usage:        1 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    4
  6346 ;; This function calls:
  6347 ;;		_spiwrite
  6348 ;; This function is called by:
  6349 ;;		_Rcmd1
  6350 ;;		_Rcmd2red
  6351 ;;		_Rcmd3
  6352 ;;		_setAddrWindow
  6353 ;;		_drawPixel
  6354 ;;		_TFT_GreenTab_Initialize
  6355 ;;		_Bcmd
  6356 ;;		_setScrollDefinition
  6357 ;;		_Rcmd2green
  6358 ;;		_VerticalScroll
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text29
  6363  001688                     __ptext29:
  6364                           	opt stack 0
  6365  001688                     _write_data:
  6366                           	opt stack 22
  6367                           
  6368                           ;incstack = 0
  6369                           ;write_data@data_ stored from wreg
  6370  001688  6E13               	movwf	write_data@data_,c
  6371                           
  6372                           ;ST7735_TFT.c: 210: PORTCbits.RC4 = 0;
  6373  00168A  9882               	bcf	3970,4,c	;volatile
  6374                           
  6375                           ;ST7735_TFT.c: 211: PORTCbits.RC2 = 1;
  6376  00168C  8482               	bsf	3970,2,c	;volatile
  6377                           
  6378                           ;ST7735_TFT.c: 212: spiwrite(data_);
  6379  00168E  5013               	movf	write_data@data_,w,c
  6380  001690  EC28  F00B         	call	_spiwrite
  6381                           
  6382                           ;ST7735_TFT.c: 213: PORTCbits.RC4 = 1;
  6383  001694  8882               	bsf	3970,4,c	;volatile
  6384  001696  0012               	return		;funcret
  6385  001698                     __end_of_write_data:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           intcon2	equ	0xFF1
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           postdec1	equ	0xFE5
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _write_command *****************
  6407 ;; Defined at:
  6408 ;;		line 197 in file "ST7735_TFT.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  cmd_            1    wreg     unsigned char 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  cmd_            1   18[COMRAM] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:        1 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    4
  6429 ;; This function calls:
  6430 ;;		_spiwrite
  6431 ;; This function is called by:
  6432 ;;		_Rcmd1
  6433 ;;		_Rcmd2red
  6434 ;;		_Rcmd3
  6435 ;;		_setAddrWindow
  6436 ;;		_TFT_GreenTab_Initialize
  6437 ;;		_Bcmd
  6438 ;;		_setScrollDefinition
  6439 ;;		_Rcmd2green
  6440 ;;		_VerticalScroll
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           	psect	text30
  6445  001698                     __ptext30:
  6446                           	opt stack 0
  6447  001698                     _write_command:
  6448                           	opt stack 22
  6449                           
  6450                           ;incstack = 0
  6451                           ;write_command@cmd_ stored from wreg
  6452  001698  6E13               	movwf	write_command@cmd_,c
  6453                           
  6454                           ;ST7735_TFT.c: 199: PORTCbits.RC4 = 0;
  6455  00169A  9882               	bcf	3970,4,c	;volatile
  6456                           
  6457                           ;ST7735_TFT.c: 201: PORTCbits.RC2 = 0;
  6458  00169C  9482               	bcf	3970,2,c	;volatile
  6459                           
  6460                           ;ST7735_TFT.c: 202: spiwrite(cmd_);
  6461  00169E  5013               	movf	write_command@cmd_,w,c
  6462  0016A0  EC28  F00B         	call	_spiwrite
  6463                           
  6464                           ;ST7735_TFT.c: 204: PORTCbits.RC4 = 1;
  6465  0016A4  8882               	bsf	3970,4,c	;volatile
  6466  0016A6  0012               	return		;funcret
  6467  0016A8                     __end_of_write_command:
  6468                           	opt stack 0
  6469                           tblptru	equ	0xFF8
  6470                           tblptrh	equ	0xFF7
  6471                           tblptrl	equ	0xFF6
  6472                           tablat	equ	0xFF5
  6473                           prodh	equ	0xFF4
  6474                           prodl	equ	0xFF3
  6475                           intcon	equ	0xFF2
  6476                           intcon2	equ	0xFF1
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postdec1	equ	0xFE5
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _spiwrite *****************
  6489 ;; Defined at:
  6490 ;;		line 188 in file "ST7735_TFT.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  spidata         1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  spidata         1   17[COMRAM] unsigned char 
  6495 ;;  x               1   16[COMRAM] unsigned char 
  6496 ;; Return value:  Size  Location     Type
  6497 ;;		None               void
  6498 ;; Registers used:
  6499 ;;		wreg
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;Total ram usage:        2 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    3
  6512 ;; This function calls:
  6513 ;;		Nothing
  6514 ;; This function is called by:
  6515 ;;		_write_command
  6516 ;;		_write_data
  6517 ;;		_drawFastVLine
  6518 ;;		_fillRectangle
  6519 ;;		_drawFastHLine
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text31
  6524  001650                     __ptext31:
  6525                           	opt stack 0
  6526  001650                     _spiwrite:
  6527                           	opt stack 24
  6528                           
  6529                           ;incstack = 0
  6530                           ;spiwrite@spidata stored from wreg
  6531  001650  6E12               	movwf	spiwrite@spidata,c
  6532                           
  6533                           ;ST7735_TFT.c: 190: char x;
  6534                           ;ST7735_TFT.c: 191: PIR1bits.SSPIF = 0;
  6535  001652  969E               	bcf	3998,3,c	;volatile
  6536                           
  6537                           ;ST7735_TFT.c: 192: x = SSPBUF;
  6538  001654  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6539                           
  6540                           ;ST7735_TFT.c: 193: SSPBUF = spidata;
  6541  001658  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6542                           
  6543                           ;ST7735_TFT.c: 194: while (!SSPSTATbits.BF);
  6544  00165C  D000               	goto	l261
  6545  00165E                     l261:
  6546  00165E  A0C7               	btfss	4039,0,c	;volatile
  6547  001660  D7FE               	goto	l261
  6548  001662  0012               	return		;funcret
  6549  001664                     __end_of_spiwrite:
  6550                           	opt stack 0
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodh	equ	0xFF4
  6556                           prodl	equ	0xFF3
  6557                           intcon	equ	0xFF2
  6558                           intcon2	equ	0xFF1
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1l	equ	0xFE1
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function _LCD_Reset *****************
  6571 ;; Defined at:
  6572 ;;		line 216 in file "ST7735_TFT.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;		None
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;		None               void
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;Total ram usage:        0 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    5
  6593 ;; This function calls:
  6594 ;;		_delay_ms
  6595 ;; This function is called by:
  6596 ;;		_Initialize_Screen
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text32
  6601  001664                     __ptext32:
  6602                           	opt stack 0
  6603  001664                     _LCD_Reset:
  6604                           	opt stack 24
  6605                           
  6606                           ;ST7735_TFT.c: 218: PORTCbits.RC1 = 0;
  6607                           
  6608                           ;incstack = 0
  6609  001664  9282               	bcf	3970,1,c	;volatile
  6610                           
  6611                           ;ST7735_TFT.c: 219: delay_ms(100);
  6612  001666  0E00               	movlw	0
  6613  001668  6E18               	movwf	delay_ms@ms+1,c
  6614  00166A  0E64               	movlw	100
  6615  00166C  6E17               	movwf	delay_ms@ms,c
  6616  00166E  ECD5  F009         	call	_delay_ms	;wreg free
  6617                           
  6618                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 1;
  6619  001672  8282               	bsf	3970,1,c	;volatile
  6620  001674  0012               	return		;funcret
  6621  001676                     __end_of_LCD_Reset:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           intcon2	equ	0xFF1
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _delay_ms *****************
  6643 ;; Defined at:
  6644 ;;		line 63 in file "ST7735_TFT.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  ms              2   22[COMRAM] int 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  count           2   26[COMRAM] int 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;Total ram usage:        6 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    4
  6665 ;; This function calls:
  6666 ;;		___wmul
  6667 ;; This function is called by:
  6668 ;;		_LCD_Reset
  6669 ;;		_Rcmd1
  6670 ;;		_Rcmd3
  6671 ;;		_Bcmd
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text33
  6676  0013AA                     __ptext33:
  6677                           	opt stack 0
  6678  0013AA                     _delay_ms:
  6679                           	opt stack 23
  6680                           
  6681                           ;ST7735_TFT.c: 69: int count;
  6682                           ;ST7735_TFT.c: 70: count = 8000000/4000/8 * ms;
  6683                           
  6684                           ;incstack = 0
  6685  0013AA  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6686  0013AE  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6687  0013B2  0E00               	movlw	0
  6688  0013B4  6E14               	movwf	___wmul@multiplicand+1,c
  6689  0013B6  0EFA               	movlw	250
  6690  0013B8  6E13               	movwf	___wmul@multiplicand,c
  6691  0013BA  ECCE  F00A         	call	___wmul	;wreg free
  6692  0013BE  C011  F01B         	movff	?___wmul,delay_ms@count
  6693  0013C2  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6694                           
  6695                           ;ST7735_TFT.c: 71: count = (0xffff - count);
  6696  0013C6  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6697  0013CA  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6698  0013CE  1E19               	comf	??_delay_ms,f,c
  6699  0013D0  1E1A               	comf	??_delay_ms+1,f,c
  6700  0013D2  4A19               	infsnz	??_delay_ms,f,c
  6701  0013D4  2A1A               	incf	??_delay_ms+1,f,c
  6702  0013D6  0EFF               	movlw	255
  6703  0013D8  2419               	addwf	??_delay_ms,w,c
  6704  0013DA  6E1B               	movwf	delay_ms@count,c
  6705  0013DC  0EFF               	movlw	255
  6706  0013DE  201A               	addwfc	??_delay_ms+1,w,c
  6707  0013E0  6E1C               	movwf	delay_ms@count+1,c
  6708                           
  6709                           ;ST7735_TFT.c: 73: T3CON = 0xb8;
  6710  0013E2  0EB8               	movlw	184
  6711  0013E4  6EB1               	movwf	4017,c	;volatile
  6712                           
  6713                           ;ST7735_TFT.c: 75: TMR3L = count & 0x00ff;
  6714  0013E6  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6715                           
  6716                           ;ST7735_TFT.c: 76: TMR3H = count >> 8;
  6717  0013EA  501C               	movf	delay_ms@count+1,w,c
  6718  0013EC  6EB3               	movwf	4019,c	;volatile
  6719                           
  6720                           ;ST7735_TFT.c: 78: PIR2bits.TMR3IF = 0;
  6721  0013EE  92A1               	bcf	4001,1,c	;volatile
  6722                           
  6723                           ;ST7735_TFT.c: 79: T3CONbits.TMR3ON = 1;
  6724  0013F0  80B1               	bsf	4017,0,c	;volatile
  6725                           
  6726                           ;ST7735_TFT.c: 81: while (PIR2bits.TMR3IF == 0);
  6727  0013F2  D000               	goto	l251
  6728  0013F4                     l251:
  6729  0013F4  A2A1               	btfss	4001,1,c	;volatile
  6730  0013F6  D7FE               	goto	l251
  6731                           
  6732                           ;ST7735_TFT.c: 82: T3CONbits.TMR3ON = 0;
  6733  0013F8  90B1               	bcf	4017,0,c	;volatile
  6734  0013FA  0012               	return		;funcret
  6735  0013FC                     __end_of_delay_ms:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           intcon2	equ	0xFF1
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function ___wmul *****************
  6757 ;; Defined at:
  6758 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  multiplier      2   16[COMRAM] unsigned int 
  6761 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  product         2   20[COMRAM] unsigned int 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  2   16[COMRAM] unsigned int 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0, prodl, prodh
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;Total ram usage:        6 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    3
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_delay_ms
  6784 ;;		_drawChar
  6785 ;;		_printf
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text34
  6790  00159C                     __ptext34:
  6791                           	opt stack 0
  6792  00159C                     ___wmul:
  6793                           	opt stack 26
  6794                           
  6795                           ;incstack = 0
  6796  00159C  5011               	movf	___wmul@multiplier,w,c
  6797  00159E  0213               	mulwf	___wmul@multiplicand,c
  6798  0015A0  CFF3 F015          	movff	prodl,___wmul@product
  6799  0015A4  CFF4 F016          	movff	prodh,___wmul@product+1
  6800  0015A8  5011               	movf	___wmul@multiplier,w,c
  6801  0015AA  0214               	mulwf	___wmul@multiplicand+1,c
  6802  0015AC  50F3               	movf	prodl,w,c
  6803  0015AE  2616               	addwf	___wmul@product+1,f,c
  6804  0015B0  5012               	movf	___wmul@multiplier+1,w,c
  6805  0015B2  0213               	mulwf	___wmul@multiplicand,c
  6806  0015B4  50F3               	movf	prodl,w,c
  6807  0015B6  2616               	addwf	___wmul@product+1,f,c
  6808  0015B8  C015  F011         	movff	___wmul@product,?___wmul
  6809  0015BC  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6810  0015C0  D000               	goto	l513
  6811  0015C2                     l513:
  6812  0015C2  0012               	return		;funcret
  6813  0015C4                     __end_of___wmul:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           intcon2	equ	0xFF1
  6823                           postinc0	equ	0xFEE
  6824                           wreg	equ	0xFE8
  6825                           postdec1	equ	0xFE5
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           fsr2h	equ	0xFDA
  6831                           fsr2l	equ	0xFD9
  6832                           status	equ	0xFD8
  6833                           
  6834 ;; *************** function _Deactivate_Buzzer *****************
  6835 ;; Defined at:
  6836 ;;		line 344 in file "Lab10p1.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;		None
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;		None
  6841 ;; Return value:  Size  Location     Type
  6842 ;;		None               void
  6843 ;; Registers used:
  6844 ;;		wreg, status,2
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        0 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    3
  6857 ;; This function calls:
  6858 ;;		Nothing
  6859 ;; This function is called by:
  6860 ;;		_main
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text35
  6865  0016C2                     __ptext35:
  6866                           	opt stack 0
  6867  0016C2                     _Deactivate_Buzzer:
  6868                           	opt stack 27
  6869                           
  6870                           ;Lab10p1.c: 346: CCP2CON = 0x0;
  6871                           
  6872                           ;incstack = 0
  6873  0016C2  0E00               	movlw	0
  6874  0016C4  6EBA               	movwf	4026,c	;volatile
  6875                           
  6876                           ;Lab10p1.c: 347: PORTBbits.RB3 = 0;
  6877  0016C6  9681               	bcf	3969,3,c	;volatile
  6878  0016C8  0012               	return		;funcret
  6879  0016CA                     __end_of_Deactivate_Buzzer:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           postdec1	equ	0xFE5
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _Activate_Buzzer *****************
  6901 ;; Defined at:
  6902 ;;		line 337 in file "Lab10p1.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;		None               void
  6909 ;; Registers used:
  6910 ;;		wreg, status,2
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    3
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text36
  6931  001676                     __ptext36:
  6932                           	opt stack 0
  6933  001676                     _Activate_Buzzer:
  6934                           	opt stack 27
  6935                           
  6936                           ;Lab10p1.c: 339: PR2 = 0b11111001 ;
  6937                           
  6938                           ;incstack = 0
  6939  001676  0EF9               	movlw	249
  6940  001678  6ECB               	movwf	4043,c	;volatile
  6941                           
  6942                           ;Lab10p1.c: 340: T2CON = 0b00000101 ;
  6943  00167A  0E05               	movlw	5
  6944  00167C  6ECA               	movwf	4042,c	;volatile
  6945                           
  6946                           ;Lab10p1.c: 341: CCPR2L = 0b01001010 ;
  6947  00167E  0E4A               	movlw	74
  6948  001680  6EBB               	movwf	4027,c	;volatile
  6949                           
  6950                           ;Lab10p1.c: 342: CCP2CON = 0b00111100 ;
  6951  001682  0E3C               	movlw	60
  6952  001684  6EBA               	movwf	4026,c	;volatile
  6953  001686  0012               	return		;funcret
  6954  001688                     __end_of_Activate_Buzzer:
  6955                           	opt stack 0
  6956                           tblptru	equ	0xFF8
  6957                           tblptrh	equ	0xFF7
  6958                           tblptrl	equ	0xFF6
  6959                           tablat	equ	0xFF5
  6960                           prodh	equ	0xFF4
  6961                           prodl	equ	0xFF3
  6962                           intcon	equ	0xFF2
  6963                           intcon2	equ	0xFF1
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           postdec1	equ	0xFE5
  6967                           fsr1l	equ	0xFE1
  6968                           indf2	equ	0xFDF
  6969                           postinc2	equ	0xFDE
  6970                           postdec2	equ	0xFDD
  6971                           fsr2h	equ	0xFDA
  6972                           fsr2l	equ	0xFD9
  6973                           status	equ	0xFD8
  6974                           
  6975 ;; *************** function _chkisr *****************
  6976 ;; Defined at:
  6977 ;;		line 96 in file "Lab10p1.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;		None
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;		None
  6982 ;; Return value:  Size  Location     Type
  6983 ;;		None               void
  6984 ;; Registers used:
  6985 ;;		wreg, status,2, status,0, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;Total ram usage:       14 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    2
  6998 ;; This function calls:
  6999 ;;		_INT0_isr
  7000 ;;		_TIMER1_isr
  7001 ;; This function is called by:
  7002 ;;		Interrupt level 2
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           	psect	intcode
  7007  000008                     __pintcode:
  7008                           	opt stack 0
  7009  000008                     _chkisr:
  7010                           	opt stack 20
  7011                           
  7012                           ;incstack = 0
  7013  000008  CFFA F003          	movff	pclath,??_chkisr
  7014  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  7015  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  7016  000014  ED77  F008         	call	int_func,f	;refresh shadow registers
  7017                           pclatu	equ	0xFFB
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           postinc0	equ	0xFEE
  7028                           fsr0l	equ	0xFE9
  7029                           wreg	equ	0xFE8
  7030                           postdec1	equ	0xFE5
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039                           	psect	intcode_body
  7040  0010EE                     __pintcode_body:
  7041                           	opt stack 20
  7042  0010EE                     int_func:
  7043                           	opt stack 20
  7044  0010EE  0006               	pop		; remove dummy address from shadow register refresh
  7045  0010F0  CFEA F006          	movff	fsr0h,??_chkisr+3
  7046  0010F4  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7047  0010F8  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7048  0010FC  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7049  001100  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7050  001104  CFF3 F00B          	movff	prodl,??_chkisr+8
  7051  001108  CFF4 F00C          	movff	prodh,??_chkisr+9
  7052  00110C  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7053  001110  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7054  001114  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7055  001118  CFF5 F010          	movff	tablat,??_chkisr+13
  7056                           
  7057                           ;Lab10p1.c: 98: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7058  00111C  A09E               	btfss	3998,0,c	;volatile
  7059  00111E  D003               	goto	i2l1899
  7060  001120  EC5B  F00B         	call	_TIMER1_isr	;wreg free
  7061  001124  D000               	goto	i2l1899
  7062  001126                     i2l1899:
  7063                           
  7064                           ;Lab10p1.c: 99: if (INTCONbits.INT0IF == 1) INT0_isr();
  7065  001126  A2F2               	btfss	intcon,1,c	;volatile
  7066  001128  D003               	goto	i2l128
  7067  00112A  EC3B  F003         	call	_INT0_isr	;wreg free
  7068  00112E  D000               	goto	i2l128
  7069  001130                     i2l128:
  7070  001130  C010  FFF5         	movff	??_chkisr+13,tablat
  7071  001134  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7072  001138  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7073  00113C  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7074  001140  C00C  FFF4         	movff	??_chkisr+9,prodh
  7075  001144  C00B  FFF3         	movff	??_chkisr+8,prodl
  7076  001148  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7077  00114C  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7078  001150  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7079  001154  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7080  001158  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7081  00115C  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7082  001160  C004  FFFB         	movff	??_chkisr+1,pclatu
  7083  001164  C003  FFFA         	movff	??_chkisr,pclath
  7084  001168  0011               	retfie		f
  7085  00116A                     __end_of_chkisr:
  7086                           	opt stack 0
  7087                           pclatu	equ	0xFFB
  7088                           pclath	equ	0xFFA
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodh	equ	0xFF4
  7094                           prodl	equ	0xFF3
  7095                           intcon	equ	0xFF2
  7096                           intcon2	equ	0xFF1
  7097                           postinc0	equ	0xFEE
  7098                           fsr0h	equ	0xFEA
  7099                           fsr0l	equ	0xFE9
  7100                           wreg	equ	0xFE8
  7101                           postdec1	equ	0xFE5
  7102                           fsr1h	equ	0xFE2
  7103                           fsr1l	equ	0xFE1
  7104                           indf2	equ	0xFDF
  7105                           postinc2	equ	0xFDE
  7106                           postdec2	equ	0xFDD
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function _TIMER1_isr *****************
  7112 ;; Defined at:
  7113 ;;		line 102 in file "Lab10p1.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;		None
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;		None               void
  7120 ;; Registers used:
  7121 ;;		wreg, status,2
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;Total ram usage:        0 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; This function calls:
  7134 ;;		Nothing
  7135 ;; This function is called by:
  7136 ;;		_chkisr
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text38
  7141  0016B6                     __ptext38:
  7142                           	opt stack 0
  7143  0016B6                     _TIMER1_isr:
  7144                           	opt stack 21
  7145                           
  7146                           ;Lab10p1.c: 104: Nec_state = 0;
  7147                           
  7148                           ;incstack = 0
  7149  0016B6  0E00               	movlw	0
  7150  0016B8  6E67               	movwf	_Nec_state,c
  7151                           
  7152                           ;Lab10p1.c: 105: INTCON2bits.INTEDG0 = 0;
  7153  0016BA  9CF1               	bcf	intcon2,6,c	;volatile
  7154                           
  7155                           ;Lab10p1.c: 106: T1CONbits.TMR1ON = 0;
  7156  0016BC  90CD               	bcf	4045,0,c	;volatile
  7157                           
  7158                           ;Lab10p1.c: 107: PIR1bits.TMR1IF = 0;
  7159  0016BE  909E               	bcf	3998,0,c	;volatile
  7160  0016C0  0012               	return		;funcret
  7161  0016C2                     __end_of_TIMER1_isr:
  7162                           	opt stack 0
  7163                           pclatu	equ	0xFFB
  7164                           pclath	equ	0xFFA
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           intcon2	equ	0xFF1
  7173                           postinc0	equ	0xFEE
  7174                           fsr0h	equ	0xFEA
  7175                           fsr0l	equ	0xFE9
  7176                           wreg	equ	0xFE8
  7177                           postdec1	equ	0xFE5
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _INT0_isr *****************
  7188 ;; Defined at:
  7189 ;;		line 164 in file "Lab10p1.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;		None               void
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    1
  7210 ;; This function calls:
  7211 ;;		_force_nec_state0
  7212 ;; This function is called by:
  7213 ;;		_chkisr
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text39
  7218  000676                     __ptext39:
  7219                           	opt stack 0
  7220  000676                     _INT0_isr:
  7221                           	opt stack 20
  7222                           
  7223                           ;Lab10p1.c: 166: INTCONbits.INT0IF = 0;
  7224                           
  7225                           ;incstack = 0
  7226  000676  92F2               	bcf	intcon,1,c	;volatile
  7227                           
  7228                           ;Lab10p1.c: 167: if (Nec_state != 0)
  7229  000678  5067               	movf	_Nec_state,w,c
  7230  00067A  B4D8               	btfsc	status,2,c
  7231  00067C  D09A               	goto	i2l1685
  7232                           
  7233                           ;Lab10p1.c: 168: {
  7234                           ;Lab10p1.c: 169: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7235  00067E  50CE               	movf	4046,w,c	;volatile
  7236  000680  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7237  000684  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7238  000686  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7239  00068A  6A01               	clrf	??_INT0_isr,c
  7240  00068C  1001               	iorwf	??_INT0_isr,w,c
  7241  00068E  6E5E               	movwf	_Time_Elapsed,c
  7242  000690  5002               	movf	??_INT0_isr+1,w,c
  7243  000692  6E5F               	movwf	_Time_Elapsed+1,c
  7244                           
  7245                           ;Lab10p1.c: 170: TMR1H = 0;
  7246  000694  0E00               	movlw	0
  7247  000696  6ECF               	movwf	4047,c	;volatile
  7248                           
  7249                           ;Lab10p1.c: 171: TMR1L = 0;
  7250  000698  0E00               	movlw	0
  7251  00069A  6ECE               	movwf	4046,c	;volatile
  7252                           
  7253                           ;Lab10p1.c: 172: }
  7254                           ;Lab10p1.c: 174: switch(Nec_state)
  7255  00069C  D08A               	goto	i2l1685
  7256  00069E                     i2l1615:
  7257                           
  7258                           ;Lab10p1.c: 177: {
  7259                           ;Lab10p1.c: 179: TMR1H = 0;
  7260  00069E  0E00               	movlw	0
  7261  0006A0  6ECF               	movwf	4047,c	;volatile
  7262                           
  7263                           ;Lab10p1.c: 180: TMR1L = 0;
  7264  0006A2  0E00               	movlw	0
  7265  0006A4  6ECE               	movwf	4046,c	;volatile
  7266                           
  7267                           ;Lab10p1.c: 181: PIR1bits.TMR1IF = 0;
  7268  0006A6  909E               	bcf	3998,0,c	;volatile
  7269                           
  7270                           ;Lab10p1.c: 182: T1CON= 0x90;
  7271  0006A8  0E90               	movlw	144
  7272  0006AA  6ECD               	movwf	4045,c	;volatile
  7273                           
  7274                           ;Lab10p1.c: 183: T1CONbits.TMR1ON = 1;
  7275  0006AC  80CD               	bsf	4045,0,c	;volatile
  7276                           
  7277                           ;Lab10p1.c: 184: bit_count = 0;
  7278  0006AE  0E00               	movlw	0
  7279  0006B0  6E69               	movwf	_bit_count,c
  7280                           
  7281                           ;Lab10p1.c: 185: Nec_code = 0;
  7282  0006B2  0E00               	movlw	0
  7283  0006B4  6E5A               	movwf	_Nec_code,c
  7284  0006B6  0E00               	movlw	0
  7285  0006B8  6E5B               	movwf	_Nec_code+1,c
  7286  0006BA  0E00               	movlw	0
  7287  0006BC  6E5C               	movwf	_Nec_code+2,c
  7288  0006BE  0E00               	movlw	0
  7289  0006C0  6E5D               	movwf	_Nec_code+3,c
  7290                           
  7291                           ;Lab10p1.c: 186: Nec_state = 1;
  7292  0006C2  0E01               	movlw	1
  7293  0006C4  6E67               	movwf	_Nec_state,c
  7294  0006C6  D073               	goto	i2l1679
  7295                           
  7296                           ;Lab10p1.c: 188: return;
  7297                           
  7298                           ;Lab10p1.c: 187: INTCON2bits.INTEDG0 = 1;
  7299  0006C8  D085               	goto	i2l176
  7300  0006CA                     i2l1625:
  7301                           
  7302                           ;Lab10p1.c: 192: {
  7303                           ;Lab10p1.c: 193: if ((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  7304  0006CA  0E35               	movlw	53
  7305  0006CC  5C5E               	subwf	_Time_Elapsed,w,c
  7306  0006CE  0E21               	movlw	33
  7307  0006D0  585F               	subwfb	_Time_Elapsed+1,w,c
  7308  0006D2  A0D8               	btfss	status,0,c
  7309  0006D4  D009               	goto	i2l1631
  7310  0006D6  0E1C               	movlw	28
  7311  0006D8  5C5E               	subwf	_Time_Elapsed,w,c
  7312  0006DA  0E25               	movlw	37
  7313  0006DC  585F               	subwfb	_Time_Elapsed+1,w,c
  7314  0006DE  B0D8               	btfsc	status,0,c
  7315  0006E0  D003               	goto	i2l1631
  7316                           
  7317                           ;Lab10p1.c: 194: {
  7318                           ;Lab10p1.c: 195: Nec_state = 2;
  7319  0006E2  0E02               	movlw	2
  7320  0006E4  6E67               	movwf	_Nec_state,c
  7321                           
  7322                           ;Lab10p1.c: 196: }
  7323  0006E6  D02A               	goto	i2l1657
  7324  0006E8                     i2l1631:
  7325                           
  7326                           ;Lab10p1.c: 197: else
  7327                           ;Lab10p1.c: 198: {
  7328                           ;Lab10p1.c: 199: force_nec_state0();
  7329  0006E8  EC65  F00B         	call	_force_nec_state0	;wreg free
  7330  0006EC  D027               	goto	i2l1657
  7331  0006EE  D026               	goto	i2l1657
  7332                           
  7333                           ;Lab10p1.c: 203: return;
  7334                           
  7335                           ;Lab10p1.c: 201: }
  7336                           ;Lab10p1.c: 202: INTCON2bits.INTEDG0 = 0;
  7337  0006F0  D071               	goto	i2l176
  7338  0006F2                     i2l1637:
  7339                           
  7340                           ;Lab10p1.c: 207: {
  7341                           ;Lab10p1.c: 208: if ((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  7342  0006F2  0EA1               	movlw	161
  7343  0006F4  5C5E               	subwf	_Time_Elapsed,w,c
  7344  0006F6  0E0F               	movlw	15
  7345  0006F8  585F               	subwfb	_Time_Elapsed+1,w,c
  7346  0006FA  A0D8               	btfss	status,0,c
  7347  0006FC  D009               	goto	i2l1643
  7348  0006FE  0E88               	movlw	136
  7349  000700  5C5E               	subwf	_Time_Elapsed,w,c
  7350  000702  0E13               	movlw	19
  7351  000704  585F               	subwfb	_Time_Elapsed+1,w,c
  7352  000706  B0D8               	btfsc	status,0,c
  7353  000708  D003               	goto	i2l1643
  7354  00070A                     
  7355                           ;Lab10p1.c: 209: {
  7356                           ;Lab10p1.c: 210: Nec_state = 3;
  7357  00070A  0E03               	movlw	3
  7358  00070C  6E67               	movwf	_Nec_state,c
  7359                           
  7360                           ;Lab10p1.c: 211: }
  7361  00070E  D04F               	goto	i2l1679
  7362  000710                     i2l1643:
  7363                           
  7364                           ;Lab10p1.c: 212: else
  7365                           ;Lab10p1.c: 213: {
  7366                           ;Lab10p1.c: 214: force_nec_state0();
  7367  000710  EC65  F00B         	call	_force_nec_state0	;wreg free
  7368  000714  D04C               	goto	i2l1679
  7369  000716  D04B               	goto	i2l1679
  7370                           
  7371                           ;Lab10p1.c: 218: return;
  7372                           
  7373                           ;Lab10p1.c: 216: }
  7374                           ;Lab10p1.c: 217: INTCON2bits.INTEDG0 = 1;
  7375  000718  D05D               	goto	i2l176
  7376  00071A                     i2l1649:
  7377                           
  7378                           ;Lab10p1.c: 222: {
  7379                           ;Lab10p1.c: 223: if ((Time_Elapsed > 400) && (Time_Elapsed < 700))
  7380  00071A  0E91               	movlw	145
  7381  00071C  5C5E               	subwf	_Time_Elapsed,w,c
  7382  00071E  0E01               	movlw	1
  7383  000720  585F               	subwfb	_Time_Elapsed+1,w,c
  7384  000722  A0D8               	btfss	status,0,c
  7385  000724  D008               	goto	i2l1655
  7386  000726  0EBC               	movlw	188
  7387  000728  5C5E               	subwf	_Time_Elapsed,w,c
  7388  00072A  0E02               	movlw	2
  7389  00072C  585F               	subwfb	_Time_Elapsed+1,w,c
  7390  00072E  B0D8               	btfsc	status,0,c
  7391  000730  D002               	goto	i2l1655
  7392                           
  7393                           ;Lab10p1.c: 224: {
  7394                           ;Lab10p1.c: 225: Nec_state = 4;
  7395  000732  0E04               	movlw	4
  7396  000734  D7D7               	goto	L24
  7397  000736                     i2l1655:
  7398                           
  7399                           ;Lab10p1.c: 227: else
  7400                           ;Lab10p1.c: 228: {
  7401                           ;Lab10p1.c: 229: force_nec_state0();
  7402  000736  EC65  F00B         	call	_force_nec_state0	;wreg free
  7403  00073A  D000               	goto	i2l1657
  7404  00073C                     i2l1657:
  7405                           
  7406                           ;Lab10p1.c: 231: }
  7407                           ;Lab10p1.c: 232: INTCON2bits.INTEDG0 = 0;
  7408  00073C  9CF1               	bcf	intcon2,6,c	;volatile
  7409                           
  7410                           ;Lab10p1.c: 233: return;
  7411  00073E  D04A               	goto	i2l176
  7412  000740                     i2l1661:
  7413                           
  7414                           ;Lab10p1.c: 237: {
  7415                           ;Lab10p1.c: 238: if ((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7416  000740  0E91               	movlw	145
  7417  000742  5C5E               	subwf	_Time_Elapsed,w,c
  7418  000744  0E01               	movlw	1
  7419  000746  585F               	subwfb	_Time_Elapsed+1,w,c
  7420  000748  A0D8               	btfss	status,0,c
  7421  00074A  D02E               	goto	i2l1677
  7422  00074C  0E08               	movlw	8
  7423  00074E  5C5E               	subwf	_Time_Elapsed,w,c
  7424  000750  0E07               	movlw	7
  7425  000752  585F               	subwfb	_Time_Elapsed+1,w,c
  7426  000754  B0D8               	btfsc	status,0,c
  7427  000756  D028               	goto	i2l1677
  7428                           
  7429                           ;Lab10p1.c: 239: {
  7430                           ;Lab10p1.c: 240: Nec_code = Nec_code << 1;
  7431  000758  90D8               	bcf	status,0,c
  7432  00075A  345A               	rlcf	_Nec_code,w,c
  7433  00075C  6E5A               	movwf	_Nec_code,c
  7434  00075E  345B               	rlcf	_Nec_code+1,w,c
  7435  000760  6E5B               	movwf	_Nec_code+1,c
  7436  000762  345C               	rlcf	_Nec_code+2,w,c
  7437  000764  6E5C               	movwf	_Nec_code+2,c
  7438  000766  345D               	rlcf	_Nec_code+3,w,c
  7439  000768  6E5D               	movwf	_Nec_code+3,c
  7440                           
  7441                           ;Lab10p1.c: 241: if (Time_Elapsed > 1000)
  7442  00076A  0EE9               	movlw	233
  7443  00076C  5C5E               	subwf	_Time_Elapsed,w,c
  7444  00076E  0E03               	movlw	3
  7445  000770  585F               	subwfb	_Time_Elapsed+1,w,c
  7446  000772  A0D8               	btfss	status,0,c
  7447  000774  D00D               	goto	i2l1669
  7448                           
  7449                           ;Lab10p1.c: 242: {
  7450                           ;Lab10p1.c: 243: Nec_code = Nec_code + 1;
  7451  000776  0E01               	movlw	1
  7452  000778  245A               	addwf	_Nec_code,w,c
  7453  00077A  6E5A               	movwf	_Nec_code,c
  7454  00077C  0E00               	movlw	0
  7455  00077E  205B               	addwfc	_Nec_code+1,w,c
  7456  000780  6E5B               	movwf	_Nec_code+1,c
  7457  000782  0E00               	movlw	0
  7458  000784  205C               	addwfc	_Nec_code+2,w,c
  7459  000786  6E5C               	movwf	_Nec_code+2,c
  7460  000788  0E00               	movlw	0
  7461  00078A  205D               	addwfc	_Nec_code+3,w,c
  7462  00078C  6E5D               	movwf	_Nec_code+3,c
  7463  00078E  D000               	goto	i2l1669
  7464  000790                     i2l1669:
  7465                           
  7466                           ;Lab10p1.c: 244: }
  7467                           ;Lab10p1.c: 246: bit_count++;
  7468  000790  2A69               	incf	_bit_count,f,c
  7469                           
  7470                           ;Lab10p1.c: 247: if (bit_count > 31)
  7471  000792  0E1F               	movlw	31
  7472  000794  6469               	cpfsgt	_bit_count,c
  7473  000796  D7B9               	goto	L25
  7474                           
  7475                           ;Lab10p1.c: 248: {
  7476                           ;Lab10p1.c: 249: nec_ok = 1;
  7477  000798  0E00               	movlw	0
  7478  00079A  6E63               	movwf	_nec_ok+1,c
  7479  00079C  0E01               	movlw	1
  7480  00079E  6E62               	movwf	_nec_ok,c
  7481                           
  7482                           ;Lab10p1.c: 250: INTCONbits.INT0IE = 0;
  7483  0007A0  98F2               	bcf	intcon,4,c	;volatile
  7484                           
  7485                           ;Lab10p1.c: 251: Nec_state = 0;
  7486  0007A2  0E00               	movlw	0
  7487  0007A4  6E67               	movwf	_Nec_state,c
  7488  0007A6  D7B1               	goto	L25
  7489  0007A8                     i2l1677:
  7490                           
  7491                           ;Lab10p1.c: 255: else
  7492                           ;Lab10p1.c: 256: {
  7493                           ;Lab10p1.c: 257: force_nec_state0();
  7494  0007A8  EC65  F00B         	call	_force_nec_state0	;wreg free
  7495  0007AC  D000               	goto	i2l1679
  7496  0007AE                     i2l1679:
  7497                           
  7498                           ;Lab10p1.c: 259: }
  7499                           ;Lab10p1.c: 260: INTCON2bits.INTEDG0 = 1;
  7500  0007AE  8CF1               	bsf	intcon2,6,c	;volatile
  7501                           
  7502                           ;Lab10p1.c: 262: }
  7503                           ;Lab10p1.c: 263: }
  7504                           
  7505                           ;Lab10p1.c: 261: return;
  7506  0007B0  D011               	goto	i2l176
  7507  0007B2                     i2l1685:
  7508  0007B2  5067               	movf	_Nec_state,w,c
  7509                           
  7510                           ; Switch size 1, requested type "space"
  7511                           ; Number of cases is 5, Range of values is 0 to 4
  7512                           ; switch strategies available:
  7513                           ; Name         Instructions Cycles
  7514                           ; simple_byte           16     9 (average)
  7515                           ;	Chosen strategy is simple_byte
  7516  0007B4  0A00               	xorlw	0	; case 0
  7517  0007B6  B4D8               	btfsc	status,2,c
  7518  0007B8  D772               	goto	i2l1615
  7519  0007BA  0A01               	xorlw	1	; case 1
  7520  0007BC  B4D8               	btfsc	status,2,c
  7521  0007BE  D785               	goto	i2l1625
  7522  0007C0  0A03               	xorlw	3	; case 2
  7523  0007C2  B4D8               	btfsc	status,2,c
  7524  0007C4  D796               	goto	i2l1637
  7525  0007C6  0A01               	xorlw	1	; case 3
  7526  0007C8  B4D8               	btfsc	status,2,c
  7527  0007CA  D7A7               	goto	i2l1649
  7528  0007CC  0A07               	xorlw	7	; case 4
  7529  0007CE  B4D8               	btfsc	status,2,c
  7530  0007D0  D7B7               	goto	i2l1661
  7531  0007D2  D000               	goto	i2l176
  7532  0007D4                     i2l176:
  7533  0007D4  0012               	return		;funcret
  7534  0007D6                     __end_of_INT0_isr:
  7535                           	opt stack 0
  7536                           pclatu	equ	0xFFB
  7537                           pclath	equ	0xFFA
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           intcon2	equ	0xFF1
  7546                           postinc0	equ	0xFEE
  7547                           fsr0h	equ	0xFEA
  7548                           fsr0l	equ	0xFE9
  7549                           wreg	equ	0xFE8
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _force_nec_state0 *****************
  7561 ;; Defined at:
  7562 ;;		line 110 in file "Lab10p1.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, status,2
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:        0 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; This function calls:
  7583 ;;		Nothing
  7584 ;; This function is called by:
  7585 ;;		_INT0_isr
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text40
  7590  0016CA                     __ptext40:
  7591                           	opt stack 0
  7592  0016CA                     _force_nec_state0:
  7593                           	opt stack 20
  7594                           
  7595                           ;Lab10p1.c: 112: Nec_state=0;
  7596                           
  7597                           ;incstack = 0
  7598  0016CA  0E00               	movlw	0
  7599  0016CC  6E67               	movwf	_Nec_state,c
  7600                           
  7601                           ;Lab10p1.c: 113: T1CONbits.TMR1ON = 0;
  7602  0016CE  90CD               	bcf	4045,0,c	;volatile
  7603  0016D0  0012               	return		;funcret
  7604  0016D2                     __end_of_force_nec_state0:
  7605                           	opt stack 0
  7606                           pclatu	equ	0xFFB
  7607                           pclath	equ	0xFFA
  7608                           tblptru	equ	0xFF8
  7609                           tblptrh	equ	0xFF7
  7610                           tblptrl	equ	0xFF6
  7611                           tablat	equ	0xFF5
  7612                           prodh	equ	0xFF4
  7613                           prodl	equ	0xFF3
  7614                           intcon	equ	0xFF2
  7615                           intcon2	equ	0xFF1
  7616                           postinc0	equ	0xFEE
  7617                           fsr0h	equ	0xFEA
  7618                           fsr0l	equ	0xFE9
  7619                           wreg	equ	0xFE8
  7620                           postdec1	equ	0xFE5
  7621                           fsr1h	equ	0xFE2
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           pclatu	equ	0xFFB
  7630                           pclath	equ	0xFFA
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodh	equ	0xFF4
  7636                           prodl	equ	0xFF3
  7637                           intcon	equ	0xFF2
  7638                           intcon2	equ	0xFF1
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           postdec1	equ	0xFE5
  7644                           fsr1h	equ	0xFE2
  7645                           fsr1l	equ	0xFE1
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           fsr2h	equ	0xFDA
  7650                           fsr2l	equ	0xFD9
  7651                           status	equ	0xFD8
  7652                           
  7653                           	psect	rparam
  7654  0000                     pclatu	equ	0xFFB
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           intcon2	equ	0xFF1
  7664                           postinc0	equ	0xFEE
  7665                           fsr0h	equ	0xFEA
  7666                           fsr0l	equ	0xFE9
  7667                           wreg	equ	0xFE8
  7668                           postdec1	equ	0xFE5
  7669                           fsr1h	equ	0xFE2
  7670                           fsr1l	equ	0xFE1
  7671                           indf2	equ	0xFDF
  7672                           postinc2	equ	0xFDE
  7673                           postdec2	equ	0xFDD
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    507
    Data        253
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     108
    BANK0           128     11     116
    BANK1           256      0     157
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[8]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   51611
                                             66 COMRAM     1     1      0
                                              7 BANK0      4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
                             _set_d1
                             _set_d2
                             _set_d3
                       _wait_one_sec
 ---------------------------------------------------------------------------------
 (1) _wait_one_sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _set_d3                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_d2                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_d1                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2317
                                             29 COMRAM    25    17      8
                            ___lldiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     371
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20983
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___wmul
     _isdigit
     _putch
   _set_d1
   _set_d2
   _set_d3
   _wait_one_sec

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      9D       7       61.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      74       5       90.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17D      34        0.0%
DATA                 0      0     17D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 15 18:12:29 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006B                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _d1 00AA                                _d2 00BF  
                              _d3 00D4               ___wmul@multiplicand 0013  
                             l140 1304                               l117 16AC  
                             l141 130A                               l213 15E6  
                             l142 1312                               l150 12A4  
                             l311 0FEC                               l143 1318  
                             l144 131C                               l152 12A8  
                             l305 1570                               l145 1320  
                             l153 12AE                               l146 1356  
                             l138 1300                               l154 12B6  
                             l170 129E                               l162 1248  
                             l251 13F4                               l155 12BC  
                             l156 12C0                               l164 124C  
                             l261 165E                               l501 1196  
                             l157 12C4                               l165 1252  
                             l510 11D8                               l158 12FA  
                             l166 125A                               l327 092A  
                             l167 1260                               l336 0880  
                             l168 1264                               l513 15C2  
                             l329 0804                               l505 11B0  
                             l169 1268                               l506 11B2  
                             l507 11BC                               l364 0E4A  
                             l508 11BE                               l365 0DB6  
                             l367 0E26                               l375 058A  
                             l368 0E48                               l456 0114  
                             l393 099A                               l477 02BC  
                             l944 1608                               l973 0F54  
                             _PR2 000FCB                 _Deactivate_Buzzer 16C2  
                             _nbr 0060                               _txt 0064  
                             prod 000FF3                               wreg 000FE8  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 1572  
                    __CFG_WDT$OFF 000000                    drawFastVLine@h 0019  
                            l1075 14D0                              l4003 039C  
                  drawFastVLine@x 0022                              l3301 0FE2  
                  drawFastVLine@y 0018                              l4007 03A6  
                            l4017 046E                              l3501 0D80  
                            l3327 1552                              l3335 1454  
                            l3441 07F2                              l3339 1470  
                            l3451 0810                              l3611 0BF0  
                            l3523 0E2A                              l3507 0DEE  
                            l3285 0F76                              l3445 0800  
                            l3437 07E6                              l3533 0E44  
                            l3455 0840                              l3447 0808  
                            l3623 0C60                              l3615 0C0E  
                            l3527 0E34                              l3519 0E1C  
                            l3551 1186                              l3711 0F12  
                            l3289 0FAE                              l3457 0874  
                            l3625 0C68                              l3801 015E  
                            l3299 0FD4                              l3475 08F6  
                            l3467 08A2                              l3483 0926  
                            l3459 0878                              l3491 14A4  
                            l3555 118E                              l3547 117C  
                            l3707 0EFC                              l3731 1328  
                            l3477 091E                              l3469 08CA  
                            l3653 151A                              l3709 0F0A  
                            l3813 019E                              l3805 016A  
                            l3655 1524                              l3567 11A8  
                            l3559 119A                              l3719 0F44  
                            l3823 01D8                              l3743 1270  
                            l3903 15E0                              l3489 149E  
                            l3841 028C                              l3833 0210  
                            l3817 01C2                              l3809 019A  
                            l3761 0026                              l3737 12CC  
                            l3683 09FC                              l3667 0980  
                            l3835 021C                              l3827 01F0  
                            l3819 01CC                              l3771 004E  
                            l3843 02A0                              l3829 01F8  
                            l3773 0064                              l3765 0036  
                            l3599 0BA0                              l3687 0A4E  
                            l3767 0044                              l3865 0570  
                            l3697 1600                              l3785 00E4  
                            l3777 0082                              l3795 0134  
                            l3893 0660                              l3789 00EE  
                            l3799 015A                              l3977 0314  
                            l3899 15CC                              l3995 0360  
                            l3999 037A                              STR_1 FFBC  
                            STR_2 FFD2                              STR_3 FFF7  
                            STR_4 FFE6                              u2400 0DAE  
                            u2170 0FA4                              u2330 08D8  
                            u2410 0DE4                              u2580 0BCA  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0011  
                            _main 02BE                              _font FDC1  
                            fsr0h 000FEA                              _txt1 012A  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 0059                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 07D6  
       __end_of_Deactivate_Buzzer 16CA                   drawFastVLine@hi 0020  
                 drawFastVLine@lo 0021                             ?_main 0001  
                 drawCircle@ddF_x 0026                   drawCircle@ddF_y 0028  
                 __end_of___lldiv 0F66                             _T1CON 000FCD  
                           _T2CON 000FCA                             _T3CON 000FB1  
                           i2l128 1130                             i2l176 07D4  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR1H 000FCF                             _TMR3H 000FB3  
                           _TMR1L 000FCE                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0A64                             _Rcmd3 0C7E  
                           _nRBPU 007F8F                             _color 0080  
                           _font2 FEC0             fillCircleHelper@ddF_x 0031  
           fillCircleHelper@ddF_y 0033                   __end_of_isdigit 160A  
           fillCircleHelper@delta 002B                             _putch 16A8  
           fillCircleHelper@color 002D                             main@i 00F1  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                   write_data@data_ 0013  
                 __initialization 0FEE                      __end_of_main 04C8  
                    __end_of_font FEC0                  __end_of_Rcmd2red 1510  
                          ??_main 0043                     __activetblptr 000002  
               __end_of_LCD_Reset 1676         ??_TFT_GreenTab_Initialize 001D  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON1 000FC1                            _CCPR2L 000FBB  
                          ?_putch 0001                            i2l1631 06E8  
                          i2l1615 069E                            i2l1625 06CA  
                          i2l1643 0710                            i2l1661 0740  
                          i2l1637 06F2                            i2l1655 0736  
                          i2l1657 073C                            i2l1649 071A  
                          i2l1669 0790                            i2l1677 07A8  
                          i2l1685 07B2                            i2l1679 07AE  
                          i2l1899 1126                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 16CA  
                __end_of_delay_ms 13FC                  __end_of_fillRect 1494  
                __end_of_drawChar 092C                __size_of_OpenUSART 0070  
        __size_of_Activate_Buzzer 0012                            ___wmul 159C  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 0C7E  
                       ??___lldiv 0019                            _chkisr 0008  
                          _array1 0044                            _buffer 017E  
                          _nec_ok 0062                            clear_0 0FF4  
                          clear_1 1000                            _set_d1 12FC  
                          _set_d2 12A0                            _set_d3 1244  
      __size_of_Deactivate_Buzzer 0008                            _printf 001C  
                    drawtext@size 0040                            _strcpy 1510  
                          _strlen 1494                      __pdataCOMRAM 0044  
                       ??_isdigit 0011                      __mediumconst FDC0  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 1664                        __accesstop 0080  
         __end_of__initialization 1066                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 0B74  
                   __end_of_Rcmd3 0D70                    __pcstackCOMRAM 0001  
                    __pidataBANK0 11DA                      __pidataBANK1 1070  
                   __end_of_font2 FF9C                     __end_of_putch 16B6  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 11DA                           ??_putch 0011  
                      __pbssBANK1 017E                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014                   spiwrite@spidata 0012  
                      ??_INT0_isr 0001                __CFG_CCP2MX$PORTBE 000000  
                     set_d1@color 0011                           ?___wmul 0011  
                     set_d2@color 0011                       set_d3@color 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                         ?_set_d1 0001                           ?_set_d2 0001  
                         ?_set_d3 0001                        _fillCircle 1358  
                         ?_printf 001E                           ?_strcpy 0011  
                         ?_strlen 0011                 ??_Activate_Buzzer 0011  
                      _fillScreen 160A                        _drawCircle 04C8  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                      _color_font 0100                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0E4C                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                __end_of_TIMER1_isr 16C2  
                   _write_command 1698                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 1572  
           __end_of_drawFastVLine 0FEE                  _fillCircleHelper 092C  
                         ___lldiv 0EDA                   __size_of___wmul 0028  
                 __size_of_chkisr 1162                         ?_spiwrite 0001  
                         __pcinit 0FEE                           __ramtop 1000  
                 __size_of_set_d1 005C                   __size_of_set_d2 005C  
                 __size_of_set_d3 005C                           __ptext0 02BE  
                         __ptext1 15C4                           __ptext2 1244  
                         __ptext3 12A0                           __ptext4 12FC  
                         __ptext5 001C                           __ptext6 16A8  
                         __ptext7 15E8                           __ptext8 0EDA  
                         __ptext9 163C                   __size_of_printf 02A2  
               __end_of_init_UART 1650                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFBC  
        __end_of_force_nec_state0 16D2                         _T1CONbits 000FCD  
                         _isdigit 15E8                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 003A  
                   drawtext@color 003C                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 1664  
                   _setAddrWindow 13FC                    __pintcode_body 10EE  
                      delay_ms@ms 0017              end_of_initialization 1066  
                   ?_wait_one_sec 0001                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FDC0  
                         int_func 10EE                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 0036                           printf@f 001E  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                       _PORTAbits 000F80                  drawtext@cursor_x 00EF  
                drawtext@cursor_y 00EE                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                  ??_wait_one_sec 0011                  drawtext@textsize 00EA  
                      drawPixel@x 001B                        drawPixel@y 0018  
                     printf@width 0034                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 0160                    __end_of___wmul 15C4  
                   delay_ms@count 001B                        _write_data 1688  
                   __pidataCOMRAM 1626                    __end_of_chkisr 116A  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                  __end_of_set_d1 1358                    __end_of_set_d2 12FC  
                  __end_of_set_d3 12A0                         _Nec_code1 0066  
                  __end_of_printf 02BE                    __end_of_strcpy 1542  
                  __end_of_strlen 14D2                         _Nec_state 0067  
             start_initialization 0FEE                   ??_write_command 0013  
                       _OpenUSART 116A               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                 _Activate_Buzzer 1676                          ??___wmul 0015  
                        ??_chkisr 0003                       __pdataBANK0 0080  
                     __pdataBANK1 0100                          ??_set_d1 0011  
                        ??_set_d2 0011                          ??_set_d3 0011  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 0026                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005A  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00E9  
                     ??_LCD_Reset 001D                      _isdigit$1784 0012  
        __end_of_fillCircleHelper 0A64                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 0069                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 159C                     __pmediumconst FDC0  
                        ?___lldiv 0011                         __tft_type 0068  
            __end_of_wait_one_sec 15E8                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 1542  
               __size_of_spiwrite 0014                 ?_force_nec_state0 0001  
                        ?_isdigit 0001                 _Initialize_Screen 0E4C  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 163C                ??_force_nec_state0 0001  
                       _hexpowers FF9C                ?_Initialize_Screen 0001  
                  __size_of_putch 000E           __end_of_Activate_Buzzer 1688  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 0676                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC                 ___wmul@multiplier 0011  
       __end_of_Initialize_Screen 0EDA                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0033  
                       main@led_c 00F0                        printf@prec 002B  
                       main@found 00F3                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 101A  
                       copy_data1 103A                         copy_data2 105A  
                       drawtext@i 00EC            __size_of_drawFastVLine 0088  
                       drawtext@x 00E9                         drawtext@y 0039  
                        _Nec_code 005A                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 14D2  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 005E                __end_of_fillCircle 13AA  
                        __Hrparam 0000                __end_of_fillScreen 1626  
                        __Lrparam 0000                __end_of_drawCircle 0676  
                __size_of___lldiv 008C                  __size_of_isdigit 0022  
                        _delay_ms 13AA                          __ptext10 116A  
                        __ptext11 1358                          __ptext20 07D6  
                        __ptext12 092C                          __ptext21 144A  
                        __ptext13 04C8                          __ptext30 1698  
                        __ptext22 0F66                          __ptext14 0E4C  
                        __ptext31 1650                          __ptext23 1542  
                        __ptext15 1510                          __ptext40 16CA  
                        __ptext32 1664                          __ptext24 13FC  
                        __ptext16 160A                          __ptext33 13AA  
                        __ptext25 1572                          __ptext17 0D70  
                        __ptext34 159C                          __ptext26 0C7E  
                        __ptext18 0B74                          __ptext35 16C2  
                        __ptext27 14D2                          __ptext19 1494  
                        __ptext36 1676                          __ptext28 0A64  
                        __ptext29 1688                          __ptext38 16B6  
                        __ptext39 0676                          _fillRect 144A  
                        _drawChar 07D6  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006A                          _drawtext 0B74  
                      strcpy@from 0013                     _fillRectangle 0D70  
                ?_Activate_Buzzer 0001                     __size_of_main 020A  
           __size_of_wait_one_sec 0024                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 0F66  
                       printf@idx 002A                          _spiwrite 1650  
                       printf@val 002D                       ??_drawPixel 001B  
                        _rowstart 006C                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025        __size_of_Initialize_Screen 008E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
                     ??_init_UART 0014                          isdigit@c 0013  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
                    _wait_one_sec 15C4                ??_fillCircleHelper 002F  
           __end_of_write_command 16A8                  ___lldiv@dividend 0011  
                   wait_one_sec@k 0011                   fillScreen@color 0024  
                    fillCircle@x0 003B                      fillCircle@y0 003D  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0031  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 16B6  
                   fillRect@color 0026                  ___lldiv@quotient 0019  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 144A                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1698  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
