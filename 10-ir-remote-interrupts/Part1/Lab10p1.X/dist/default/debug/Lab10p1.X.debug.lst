

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 15 13:27:08 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataCOMRAM
    57  0013F8                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _array1
    61  0013F8  A2                 	db	162
    62  0013F9  00                 	db	0
    63  0013FA  00                 	db	0
    64  0013FB  00                 	db	0
    65  0013FC  00                 	db	0
    66  0013FD  00                 	db	0
    67  0013FE  00                 	db	0
    68  0013FF  00                 	db	0
    69  001400  00                 	db	0
    70  001401  00                 	db	0
    71  001402  00                 	db	0
    72  001403  00                 	db	0
    73  001404  00                 	db	0
    74  001405  00                 	db	0
    75  001406  00                 	db	0
    76  001407  00                 	db	0
    77  001408  00                 	db	0
    78  001409  00                 	db	0
    79  00140A  00                 	db	0
    80  00140B  00                 	db	0
    81  00140C  00                 	db	0
    82                           
    83                           ;initializer for _wrap
    84  00140D  01                 	db	1
    85                           
    86                           	psect	idataBANK0
    87  00133E                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _color
    91  00133E  F800               	dw	63488
    92  001340  00                 	db	0
    93  001341  00                 	db	0
    94  001342  00                 	db	0
    95  001343  00                 	db	0
    96  001344  00                 	db	0
    97  001345  00                 	db	0
    98  001346  00                 	db	0
    99  001347  00                 	db	0
   100  001348  00                 	db	0
   101  001349  00                 	db	0
   102  00134A  00                 	db	0
   103  00134B  00                 	db	0
   104  00134C  00                 	db	0
   105  00134D  00                 	db	0
   106  00134E  00                 	db	0
   107  00134F  00                 	db	0
   108  001350  00                 	db	0
   109  001351  00                 	db	0
   110  001352  00                 	db	0
   111  001353  00                 	db	0
   112  001354  00                 	db	0
   113  001355  00                 	db	0
   114  001356  00                 	db	0
   115  001357  00                 	db	0
   116  001358  00                 	db	0
   117  001359  00                 	db	0
   118  00135A  00                 	db	0
   119  00135B  00                 	db	0
   120  00135C  00                 	db	0
   121  00135D  00                 	db	0
   122  00135E  00                 	db	0
   123  00135F  00                 	db	0
   124  001360  00                 	db	0
   125  001361  00                 	db	0
   126  001362  00                 	db	0
   127  001363  00                 	db	0
   128  001364  00                 	db	0
   129  001365  00                 	db	0
   130  001366  00                 	db	0
   131  001367  00                 	db	0
   132                           
   133                           	psect	idataBANK1
   134  0010D0                     __pidataBANK1:
   135                           	opt stack 0
   136                           
   137                           ;initializer for _txt1
   138  0010D0  43                 	db	67
   139  0010D1  48                 	db	72
   140  0010D2  2D                 	db	45
   141  0010D3  00                 	db	0
   142  0010D4  43                 	db	67
   143  0010D5  48                 	db	72
   144  0010D6  2B                 	db	43
   145  0010D7  00                 	db	0
   146  0010D8  56                 	db	86
   147  0010D9  4C                 	db	76
   148  0010DA  2B                 	db	43
   149  0010DB  00                 	db	0
   150  0010DC  20                 	db	32
   151  0010DD  30                 	db	48
   152  0010DE  20                 	db	32
   153  0010DF  00                 	db	0
   154  0010E0  00                 	db	0
   155  0010E1  00                 	db	0
   156  0010E2  00                 	db	0
   157  0010E3  00                 	db	0
   158  0010E4  00                 	db	0
   159  0010E5  00                 	db	0
   160  0010E6  00                 	db	0
   161  0010E7  00                 	db	0
   162  0010E8  00                 	db	0
   163  0010E9  00                 	db	0
   164  0010EA  00                 	db	0
   165  0010EB  00                 	db	0
   166  0010EC  00                 	db	0
   167  0010ED  00                 	db	0
   168  0010EE  00                 	db	0
   169  0010EF  00                 	db	0
   170  0010F0  00                 	db	0
   171  0010F1  00                 	db	0
   172  0010F2  00                 	db	0
   173  0010F3  00                 	db	0
   174  0010F4  00                 	db	0
   175  0010F5  00                 	db	0
   176  0010F6  00                 	db	0
   177  0010F7  00                 	db	0
   178  0010F8  00                 	db	0
   179  0010F9  00                 	db	0
   180  0010FA  00                 	db	0
   181  0010FB  00                 	db	0
   182  0010FC  00                 	db	0
   183  0010FD  00                 	db	0
   184  0010FE  00                 	db	0
   185  0010FF  00                 	db	0
   186  001100  00                 	db	0
   187  001101  00                 	db	0
   188  001102  00                 	db	0
   189  001103  00                 	db	0
   190  001104  00                 	db	0
   191  001105  00                 	db	0
   192  001106  00                 	db	0
   193  001107  00                 	db	0
   194  001108  00                 	db	0
   195  001109  00                 	db	0
   196  00110A  00                 	db	0
   197  00110B  00                 	db	0
   198  00110C  00                 	db	0
   199  00110D  00                 	db	0
   200  00110E  00                 	db	0
   201  00110F  00                 	db	0
   202  001110  00                 	db	0
   203  001111  00                 	db	0
   204  001112  00                 	db	0
   205  001113  00                 	db	0
   206  001114  00                 	db	0
   207  001115  00                 	db	0
   208  001116  00                 	db	0
   209  001117  00                 	db	0
   210  001118  00                 	db	0
   211  001119  00                 	db	0
   212  00111A  00                 	db	0
   213  00111B  00                 	db	0
   214  00111C  00                 	db	0
   215  00111D  00                 	db	0
   216  00111E  00                 	db	0
   217  00111F  00                 	db	0
   218  001120  00                 	db	0
   219  001121  00                 	db	0
   220  001122  00                 	db	0
   221  001123  00                 	db	0
   222                           
   223                           	psect	mediumconst
   224  00FAF0                     __pmediumconst:
   225                           	opt stack 0
   226  00FAF0  00                 	db	0
   227  00FAF1                     _font:
   228                           	opt stack 0
   229  00FAF1  00                 	db	0
   230  00FAF2  00                 	db	0
   231  00FAF3  00                 	db	0
   232  00FAF4  00                 	db	0
   233  00FAF5  00                 	db	0
   234  00FAF6  00                 	db	0
   235  00FAF7  00                 	db	0
   236  00FAF8  5F                 	db	95
   237  00FAF9  00                 	db	0
   238  00FAFA  00                 	db	0
   239  00FAFB  00                 	db	0
   240  00FAFC  07                 	db	7
   241  00FAFD  00                 	db	0
   242  00FAFE  07                 	db	7
   243  00FAFF  00                 	db	0
   244  00FB00  14                 	db	20
   245  00FB01  7F                 	db	127
   246  00FB02  14                 	db	20
   247  00FB03  7F                 	db	127
   248  00FB04  14                 	db	20
   249  00FB05  24                 	db	36
   250  00FB06  2A                 	db	42
   251  00FB07  7F                 	db	127
   252  00FB08  2A                 	db	42
   253  00FB09  12                 	db	18
   254  00FB0A  23                 	db	35
   255  00FB0B  13                 	db	19
   256  00FB0C  08                 	db	8
   257  00FB0D  64                 	db	100
   258  00FB0E  62                 	db	98
   259  00FB0F  36                 	db	54
   260  00FB10  49                 	db	73
   261  00FB11  56                 	db	86
   262  00FB12  20                 	db	32
   263  00FB13  50                 	db	80
   264  00FB14  00                 	db	0
   265  00FB15  08                 	db	8
   266  00FB16  07                 	db	7
   267  00FB17  03                 	db	3
   268  00FB18  00                 	db	0
   269  00FB19  00                 	db	0
   270  00FB1A  1C                 	db	28
   271  00FB1B  22                 	db	34
   272  00FB1C  41                 	db	65
   273  00FB1D  00                 	db	0
   274  00FB1E  00                 	db	0
   275  00FB1F  41                 	db	65
   276  00FB20  22                 	db	34
   277  00FB21  1C                 	db	28
   278  00FB22  00                 	db	0
   279  00FB23  2A                 	db	42
   280  00FB24  1C                 	db	28
   281  00FB25  7F                 	db	127
   282  00FB26  1C                 	db	28
   283  00FB27  2A                 	db	42
   284  00FB28  08                 	db	8
   285  00FB29  08                 	db	8
   286  00FB2A  3E                 	db	62
   287  00FB2B  08                 	db	8
   288  00FB2C  08                 	db	8
   289  00FB2D  00                 	db	0
   290  00FB2E  80                 	db	128
   291  00FB2F  70                 	db	112
   292  00FB30  30                 	db	48
   293  00FB31  00                 	db	0
   294  00FB32  08                 	db	8
   295  00FB33  08                 	db	8
   296  00FB34  08                 	db	8
   297  00FB35  08                 	db	8
   298  00FB36  08                 	db	8
   299  00FB37  00                 	db	0
   300  00FB38  00                 	db	0
   301  00FB39  60                 	db	96
   302  00FB3A  60                 	db	96
   303  00FB3B  00                 	db	0
   304  00FB3C  20                 	db	32
   305  00FB3D  10                 	db	16
   306  00FB3E  08                 	db	8
   307  00FB3F  04                 	db	4
   308  00FB40  02                 	db	2
   309  00FB41  3E                 	db	62
   310  00FB42  51                 	db	81
   311  00FB43  49                 	db	73
   312  00FB44  45                 	db	69
   313  00FB45  3E                 	db	62
   314  00FB46  00                 	db	0
   315  00FB47  42                 	db	66
   316  00FB48  7F                 	db	127
   317  00FB49  40                 	db	64
   318  00FB4A  00                 	db	0
   319  00FB4B  72                 	db	114
   320  00FB4C  49                 	db	73
   321  00FB4D  49                 	db	73
   322  00FB4E  49                 	db	73
   323  00FB4F  46                 	db	70
   324  00FB50  21                 	db	33
   325  00FB51  41                 	db	65
   326  00FB52  49                 	db	73
   327  00FB53  4D                 	db	77
   328  00FB54  33                 	db	51
   329  00FB55  18                 	db	24
   330  00FB56  14                 	db	20
   331  00FB57  12                 	db	18
   332  00FB58  7F                 	db	127
   333  00FB59  10                 	db	16
   334  00FB5A  27                 	db	39
   335  00FB5B  45                 	db	69
   336  00FB5C  45                 	db	69
   337  00FB5D  45                 	db	69
   338  00FB5E  39                 	db	57
   339  00FB5F  3C                 	db	60
   340  00FB60  4A                 	db	74
   341  00FB61  49                 	db	73
   342  00FB62  49                 	db	73
   343  00FB63  31                 	db	49
   344  00FB64  41                 	db	65
   345  00FB65  21                 	db	33
   346  00FB66  11                 	db	17
   347  00FB67  09                 	db	9
   348  00FB68  07                 	db	7
   349  00FB69  36                 	db	54
   350  00FB6A  49                 	db	73
   351  00FB6B  49                 	db	73
   352  00FB6C  49                 	db	73
   353  00FB6D  36                 	db	54
   354  00FB6E  46                 	db	70
   355  00FB6F  49                 	db	73
   356  00FB70  49                 	db	73
   357  00FB71  29                 	db	41
   358  00FB72  1E                 	db	30
   359  00FB73  00                 	db	0
   360  00FB74  00                 	db	0
   361  00FB75  14                 	db	20
   362  00FB76  00                 	db	0
   363  00FB77  00                 	db	0
   364  00FB78  00                 	db	0
   365  00FB79  40                 	db	64
   366  00FB7A  34                 	db	52
   367  00FB7B  00                 	db	0
   368  00FB7C  00                 	db	0
   369  00FB7D  00                 	db	0
   370  00FB7E  08                 	db	8
   371  00FB7F  14                 	db	20
   372  00FB80  22                 	db	34
   373  00FB81  41                 	db	65
   374  00FB82  14                 	db	20
   375  00FB83  14                 	db	20
   376  00FB84  14                 	db	20
   377  00FB85  14                 	db	20
   378  00FB86  14                 	db	20
   379  00FB87  00                 	db	0
   380  00FB88  41                 	db	65
   381  00FB89  22                 	db	34
   382  00FB8A  14                 	db	20
   383  00FB8B  08                 	db	8
   384  00FB8C  02                 	db	2
   385  00FB8D  01                 	db	1
   386  00FB8E  59                 	db	89
   387  00FB8F  09                 	db	9
   388  00FB90  06                 	db	6
   389  00FB91  3E                 	db	62
   390  00FB92  41                 	db	65
   391  00FB93  5D                 	db	93
   392  00FB94  59                 	db	89
   393  00FB95  4E                 	db	78
   394  00FB96  7C                 	db	124
   395  00FB97  12                 	db	18
   396  00FB98  11                 	db	17
   397  00FB99  12                 	db	18
   398  00FB9A  7C                 	db	124
   399  00FB9B  7F                 	db	127
   400  00FB9C  49                 	db	73
   401  00FB9D  49                 	db	73
   402  00FB9E  49                 	db	73
   403  00FB9F  36                 	db	54
   404  00FBA0  3E                 	db	62
   405  00FBA1  41                 	db	65
   406  00FBA2  41                 	db	65
   407  00FBA3  41                 	db	65
   408  00FBA4  22                 	db	34
   409  00FBA5  7F                 	db	127
   410  00FBA6  41                 	db	65
   411  00FBA7  41                 	db	65
   412  00FBA8  41                 	db	65
   413  00FBA9  3E                 	db	62
   414  00FBAA  7F                 	db	127
   415  00FBAB  49                 	db	73
   416  00FBAC  49                 	db	73
   417  00FBAD  49                 	db	73
   418  00FBAE  41                 	db	65
   419  00FBAF  7F                 	db	127
   420  00FBB0  09                 	db	9
   421  00FBB1  09                 	db	9
   422  00FBB2  09                 	db	9
   423  00FBB3  01                 	db	1
   424  00FBB4  3E                 	db	62
   425  00FBB5  41                 	db	65
   426  00FBB6  41                 	db	65
   427  00FBB7  51                 	db	81
   428  00FBB8  73                 	db	115
   429  00FBB9  7F                 	db	127
   430  00FBBA  08                 	db	8
   431  00FBBB  08                 	db	8
   432  00FBBC  08                 	db	8
   433  00FBBD  7F                 	db	127
   434  00FBBE  00                 	db	0
   435  00FBBF  41                 	db	65
   436  00FBC0  7F                 	db	127
   437  00FBC1  41                 	db	65
   438  00FBC2  00                 	db	0
   439  00FBC3  20                 	db	32
   440  00FBC4  40                 	db	64
   441  00FBC5  41                 	db	65
   442  00FBC6  3F                 	db	63
   443  00FBC7  01                 	db	1
   444  00FBC8  7F                 	db	127
   445  00FBC9  08                 	db	8
   446  00FBCA  14                 	db	20
   447  00FBCB  22                 	db	34
   448  00FBCC  41                 	db	65
   449  00FBCD  7F                 	db	127
   450  00FBCE  40                 	db	64
   451  00FBCF  40                 	db	64
   452  00FBD0  40                 	db	64
   453  00FBD1  40                 	db	64
   454  00FBD2  7F                 	db	127
   455  00FBD3  02                 	db	2
   456  00FBD4  1C                 	db	28
   457  00FBD5  02                 	db	2
   458  00FBD6  7F                 	db	127
   459  00FBD7  7F                 	db	127
   460  00FBD8  04                 	db	4
   461  00FBD9  08                 	db	8
   462  00FBDA  10                 	db	16
   463  00FBDB  7F                 	db	127
   464  00FBDC  3E                 	db	62
   465  00FBDD  41                 	db	65
   466  00FBDE  41                 	db	65
   467  00FBDF  41                 	db	65
   468  00FBE0  3E                 	db	62
   469  00FBE1  7F                 	db	127
   470  00FBE2  09                 	db	9
   471  00FBE3  09                 	db	9
   472  00FBE4  09                 	db	9
   473  00FBE5  06                 	db	6
   474  00FBE6  3E                 	db	62
   475  00FBE7  41                 	db	65
   476  00FBE8  51                 	db	81
   477  00FBE9  21                 	db	33
   478  00FBEA  5E                 	db	94
   479  00FBEB  7F                 	db	127
   480  00FBEC  09                 	db	9
   481  00FBED  19                 	db	25
   482  00FBEE  29                 	db	41
   483  00FBEF  46                 	db	70
   484  00FBF0                     __end_of_font:
   485                           	opt stack 0
   486  00FBF0                     _font2:
   487                           	opt stack 0
   488  00FBF0  26                 	db	38
   489  00FBF1  49                 	db	73
   490  00FBF2  49                 	db	73
   491  00FBF3  49                 	db	73
   492  00FBF4  32                 	db	50
   493  00FBF5  03                 	db	3
   494  00FBF6  01                 	db	1
   495  00FBF7  7F                 	db	127
   496  00FBF8  01                 	db	1
   497  00FBF9  03                 	db	3
   498  00FBFA  3F                 	db	63
   499  00FBFB  40                 	db	64
   500  00FBFC  40                 	db	64
   501  00FBFD  40                 	db	64
   502  00FBFE  3F                 	db	63
   503  00FBFF  1F                 	db	31
   504  00FC00  20                 	db	32
   505  00FC01  40                 	db	64
   506  00FC02  20                 	db	32
   507  00FC03  1F                 	db	31
   508  00FC04  3F                 	db	63
   509  00FC05  40                 	db	64
   510  00FC06  38                 	db	56
   511  00FC07  40                 	db	64
   512  00FC08  3F                 	db	63
   513  00FC09  63                 	db	99
   514  00FC0A  14                 	db	20
   515  00FC0B  08                 	db	8
   516  00FC0C  14                 	db	20
   517  00FC0D  63                 	db	99
   518  00FC0E  03                 	db	3
   519  00FC0F  04                 	db	4
   520  00FC10  78                 	db	120
   521  00FC11  04                 	db	4
   522  00FC12  03                 	db	3
   523  00FC13  61                 	db	97
   524  00FC14  59                 	db	89
   525  00FC15  49                 	db	73
   526  00FC16  4D                 	db	77
   527  00FC17  43                 	db	67
   528  00FC18  00                 	db	0
   529  00FC19  7F                 	db	127
   530  00FC1A  41                 	db	65
   531  00FC1B  41                 	db	65
   532  00FC1C  41                 	db	65
   533  00FC1D  02                 	db	2
   534  00FC1E  04                 	db	4
   535  00FC1F  08                 	db	8
   536  00FC20  10                 	db	16
   537  00FC21  20                 	db	32
   538  00FC22  00                 	db	0
   539  00FC23  41                 	db	65
   540  00FC24  41                 	db	65
   541  00FC25  41                 	db	65
   542  00FC26  7F                 	db	127
   543  00FC27  04                 	db	4
   544  00FC28  02                 	db	2
   545  00FC29  01                 	db	1
   546  00FC2A  02                 	db	2
   547  00FC2B  04                 	db	4
   548  00FC2C  40                 	db	64
   549  00FC2D  40                 	db	64
   550  00FC2E  40                 	db	64
   551  00FC2F  40                 	db	64
   552  00FC30  40                 	db	64
   553  00FC31  00                 	db	0
   554  00FC32  03                 	db	3
   555  00FC33  07                 	db	7
   556  00FC34  08                 	db	8
   557  00FC35  00                 	db	0
   558  00FC36  20                 	db	32
   559  00FC37  54                 	db	84
   560  00FC38  54                 	db	84
   561  00FC39  78                 	db	120
   562  00FC3A  40                 	db	64
   563  00FC3B  7F                 	db	127
   564  00FC3C  28                 	db	40
   565  00FC3D  44                 	db	68
   566  00FC3E  44                 	db	68
   567  00FC3F  38                 	db	56
   568  00FC40  38                 	db	56
   569  00FC41  44                 	db	68
   570  00FC42  44                 	db	68
   571  00FC43  44                 	db	68
   572  00FC44  28                 	db	40
   573  00FC45  38                 	db	56
   574  00FC46  44                 	db	68
   575  00FC47  44                 	db	68
   576  00FC48  28                 	db	40
   577  00FC49  7F                 	db	127
   578  00FC4A  38                 	db	56
   579  00FC4B  54                 	db	84
   580  00FC4C  54                 	db	84
   581  00FC4D  54                 	db	84
   582  00FC4E  18                 	db	24
   583  00FC4F  00                 	db	0
   584  00FC50  08                 	db	8
   585  00FC51  7E                 	db	126
   586  00FC52  09                 	db	9
   587  00FC53  02                 	db	2
   588  00FC54  18                 	db	24
   589  00FC55  A4                 	db	164
   590  00FC56  A4                 	db	164
   591  00FC57  9C                 	db	156
   592  00FC58  78                 	db	120
   593  00FC59  7F                 	db	127
   594  00FC5A  08                 	db	8
   595  00FC5B  04                 	db	4
   596  00FC5C  04                 	db	4
   597  00FC5D  78                 	db	120
   598  00FC5E  00                 	db	0
   599  00FC5F  44                 	db	68
   600  00FC60  7D                 	db	125
   601  00FC61  40                 	db	64
   602  00FC62  00                 	db	0
   603  00FC63  20                 	db	32
   604  00FC64  40                 	db	64
   605  00FC65  40                 	db	64
   606  00FC66  3D                 	db	61
   607  00FC67  00                 	db	0
   608  00FC68  7F                 	db	127
   609  00FC69  10                 	db	16
   610  00FC6A  28                 	db	40
   611  00FC6B  44                 	db	68
   612  00FC6C  00                 	db	0
   613  00FC6D  00                 	db	0
   614  00FC6E  41                 	db	65
   615  00FC6F  7F                 	db	127
   616  00FC70  40                 	db	64
   617  00FC71  00                 	db	0
   618  00FC72  7C                 	db	124
   619  00FC73  04                 	db	4
   620  00FC74  78                 	db	120
   621  00FC75  04                 	db	4
   622  00FC76  78                 	db	120
   623  00FC77  7C                 	db	124
   624  00FC78  08                 	db	8
   625  00FC79  04                 	db	4
   626  00FC7A  04                 	db	4
   627  00FC7B  78                 	db	120
   628  00FC7C  38                 	db	56
   629  00FC7D  44                 	db	68
   630  00FC7E  44                 	db	68
   631  00FC7F  44                 	db	68
   632  00FC80  38                 	db	56
   633  00FC81  FC                 	db	252
   634  00FC82  18                 	db	24
   635  00FC83  24                 	db	36
   636  00FC84  24                 	db	36
   637  00FC85  18                 	db	24
   638  00FC86  18                 	db	24
   639  00FC87  24                 	db	36
   640  00FC88  24                 	db	36
   641  00FC89  18                 	db	24
   642  00FC8A  FC                 	db	252
   643  00FC8B  7C                 	db	124
   644  00FC8C  08                 	db	8
   645  00FC8D  04                 	db	4
   646  00FC8E  04                 	db	4
   647  00FC8F  08                 	db	8
   648  00FC90  48                 	db	72
   649  00FC91  54                 	db	84
   650  00FC92  54                 	db	84
   651  00FC93  54                 	db	84
   652  00FC94  24                 	db	36
   653  00FC95  04                 	db	4
   654  00FC96  04                 	db	4
   655  00FC97  3F                 	db	63
   656  00FC98  44                 	db	68
   657  00FC99  24                 	db	36
   658  00FC9A  3C                 	db	60
   659  00FC9B  40                 	db	64
   660  00FC9C  40                 	db	64
   661  00FC9D  20                 	db	32
   662  00FC9E  7C                 	db	124
   663  00FC9F  1C                 	db	28
   664  00FCA0  20                 	db	32
   665  00FCA1  40                 	db	64
   666  00FCA2  20                 	db	32
   667  00FCA3  1C                 	db	28
   668  00FCA4  3C                 	db	60
   669  00FCA5  40                 	db	64
   670  00FCA6  30                 	db	48
   671  00FCA7  40                 	db	64
   672  00FCA8  3C                 	db	60
   673  00FCA9  44                 	db	68
   674  00FCAA  28                 	db	40
   675  00FCAB  10                 	db	16
   676  00FCAC  28                 	db	40
   677  00FCAD  44                 	db	68
   678  00FCAE  4C                 	db	76
   679  00FCAF  90                 	db	144
   680  00FCB0  90                 	db	144
   681  00FCB1  90                 	db	144
   682  00FCB2  7C                 	db	124
   683  00FCB3  44                 	db	68
   684  00FCB4  64                 	db	100
   685  00FCB5  54                 	db	84
   686  00FCB6  4C                 	db	76
   687  00FCB7  44                 	db	68
   688  00FCB8  00                 	db	0
   689  00FCB9  08                 	db	8
   690  00FCBA  36                 	db	54
   691  00FCBB  41                 	db	65
   692  00FCBC  00                 	db	0
   693  00FCBD  00                 	db	0
   694  00FCBE  00                 	db	0
   695  00FCBF  77                 	db	119
   696  00FCC0  00                 	db	0
   697  00FCC1  00                 	db	0
   698  00FCC2  00                 	db	0
   699  00FCC3  41                 	db	65
   700  00FCC4  36                 	db	54
   701  00FCC5  08                 	db	8
   702  00FCC6  00                 	db	0
   703  00FCC7  02                 	db	2
   704  00FCC8  01                 	db	1
   705  00FCC9  02                 	db	2
   706  00FCCA  04                 	db	4
   707  00FCCB  02                 	db	2
   708  00FCCC                     __end_of_font2:
   709                           	opt stack 0
   710  00FCCC                     _hexpowers:
   711                           	opt stack 0
   712  00FCCC  0001               	dw	1
   713  00FCCE  0000               	dw	0
   714  00FCD0  0010               	dw	16
   715  00FCD2  0000               	dw	0
   716  00FCD4  0100               	dw	256
   717  00FCD6  0000               	dw	0
   718  00FCD8  1000               	dw	4096
   719  00FCDA  0000               	dw	0
   720  00FCDC  0000               	dw	0
   721  00FCDE  0001               	dw	1
   722  00FCE0  0000               	dw	0
   723  00FCE2  0010               	dw	16
   724  00FCE4  0000               	dw	0
   725  00FCE6  0100               	dw	256
   726  00FCE8  0000               	dw	0
   727  00FCEA  1000               	dw	4096
   728  00FCEC                     __end_of_hexpowers:
   729                           	opt stack 0
   730  0000                     _PORTCbits	set	3970
   731  0000                     _PORTDbits	set	3971
   732  0000                     _TRISB	set	3987
   733  0000                     _TRISC	set	3988
   734  0000                     _TRISCbits	set	3988
   735  0000                     _TRISD	set	3989
   736  0000                     _TRISE	set	3990
   737  0000                     _ADCON1	set	4033
   738  0000                     _OSCCON	set	4051
   739  0000                     _PIE1bits	set	3997
   740  0000                     _PIR1bits	set	3998
   741  0000                     _PIR2bits	set	4001
   742  0000                     _RCSTA	set	4011
   743  0000                     _RCSTAbits	set	4011
   744  0000                     _SPBRG	set	4015
   745  0000                     _SPBRGH	set	4016
   746  0000                     _SSPBUF	set	4041
   747  0000                     _SSPCON1	set	4038
   748  0000                     _SSPSTAT	set	4039
   749  0000                     _SSPSTATbits	set	4039
   750  0000                     _T1CON	set	4045
   751  0000                     _T1CONbits	set	4045
   752  0000                     _T3CON	set	4017
   753  0000                     _T3CONbits	set	4017
   754  0000                     _TMR1H	set	4047
   755  0000                     _TMR1L	set	4046
   756  0000                     _TMR3H	set	4019
   757  0000                     _TMR3L	set	4018
   758  0000                     _TXREG	set	4013
   759  0000                     _TXSTA	set	4012
   760  0000                     _TXSTAbits	set	4012
   761  0000                     _TRMT	set	32097
   762  0000                     _INTCON2bits	set	4081
   763  0000                     _INTCONbits	set	4082
   764  0000                     _nRBPU	set	32655
   765  00FCEC                     STR_1:
   766  00FCEC  4E                 	db	78	;'N'
   767  00FCED  45                 	db	69	;'E'
   768  00FCEE  43                 	db	67	;'C'
   769  00FCEF  5F                 	db	95	;'_'
   770  00FCF0  43                 	db	67	;'C'
   771  00FCF1  6F                 	db	111	;'o'
   772  00FCF2  64                 	db	100	;'d'
   773  00FCF3  65                 	db	101	;'e'
   774  00FCF4  20                 	db	32
   775  00FCF5  3D                 	db	61	;'='
   776  00FCF6  20                 	db	32
   777  00FCF7  25                 	db	37
   778  00FCF8  30                 	db	48	;'0'
   779  00FCF9  38                 	db	56	;'8'
   780  00FCFA  6C                 	db	108	;'l'
   781  00FCFB  78                 	db	120	;'x'
   782  00FCFC  20                 	db	32
   783  00FCFD  25                 	db	37
   784  00FCFE  78                 	db	120	;'x'
   785  00FCFF  0D                 	db	13
   786  00FD00  0A                 	db	10
   787  00FD01  00                 	db	0
   788  00FD02                     STR_2:
   789  00FD02  45                 	db	69	;'E'
   790  00FD03  43                 	db	67	;'C'
   791  00FD04  45                 	db	69	;'E'
   792  00FD05  33                 	db	51	;'3'
   793  00FD06  33                 	db	51	;'3'
   794  00FD07  30                 	db	48	;'0'
   795  00FD08  31                 	db	49	;'1'
   796  00FD09  4C                 	db	76	;'L'
   797  00FD0A  20                 	db	32
   798  00FD0B  46                 	db	70	;'F'
   799  00FD0C  61                 	db	97	;'a'
   800  00FD0D  6C                 	db	108	;'l'
   801  00FD0E  6C                 	db	108	;'l'
   802  00FD0F  20                 	db	32
   803  00FD10  32                 	db	50	;'2'
   804  00FD11  32                 	db	50	;'2'
   805  00FD12  2D                 	db	45
   806  00FD13  53                 	db	83	;'S'
   807  00FD14  31                 	db	49	;'1'
   808  00FD15  00                 	db	0
   809  00FD16                     STR_4:
   810  00FD16  30                 	db	48	;'0'
   811  00FD17  31                 	db	49	;'1'
   812  00FD18  32                 	db	50	;'2'
   813  00FD19  33                 	db	51	;'3'
   814  00FD1A  34                 	db	52	;'4'
   815  00FD1B  35                 	db	53	;'5'
   816  00FD1C  36                 	db	54	;'6'
   817  00FD1D  37                 	db	55	;'7'
   818  00FD1E  38                 	db	56	;'8'
   819  00FD1F  39                 	db	57	;'9'
   820  00FD20  61                 	db	97	;'a'
   821  00FD21  62                 	db	98	;'b'
   822  00FD22  63                 	db	99	;'c'
   823  00FD23  64                 	db	100	;'d'
   824  00FD24  65                 	db	101	;'e'
   825  00FD25  66                 	db	102	;'f'
   826  00FD26  00                 	db	0
   827  00FD27                     STR_3:
   828  00FD27  4C                 	db	76	;'L'
   829  00FD28  41                 	db	65	;'A'
   830  00FD29  42                 	db	66	;'B'
   831  00FD2A  20                 	db	32
   832  00FD2B  31                 	db	49	;'1'
   833  00FD2C  30                 	db	48	;'0'
   834  00FD2D  20                 	db	32
   835  00FD2E  00                 	db	0
   836                           
   837                           ; #config settings
   838  00FD2F  00                 	db	0	; dummy byte at the end
   839  0000                     
   840                           	psect	cinit
   841  000F62                     __pcinit:
   842                           	opt stack 0
   843  000F62                     start_initialization:
   844                           	opt stack 0
   845  000F62                     __initialization:
   846                           	opt stack 0
   847                           
   848                           ; Clear objects allocated to BANK0 (31 bytes)
   849  000F62  EE00  F0AA         	lfsr	0,__pbssBANK0
   850  000F66  0E1F               	movlw	31
   851  000F68                     clear_0:
   852  000F68  6AEE               	clrf	postinc0,c
   853  000F6A  06E8               	decf	wreg,f,c
   854  000F6C  E1FD               	bnz	clear_0
   855                           
   856                           ; Clear objects allocated to COMRAM (19 bytes)
   857  000F6E  EE00  F05A         	lfsr	0,__pbssCOMRAM
   858  000F72  0E13               	movlw	19
   859  000F74                     clear_1:
   860  000F74  6AEE               	clrf	postinc0,c
   861  000F76  06E8               	decf	wreg,f,c
   862  000F78  E1FD               	bnz	clear_1
   863                           
   864                           ; Initialize objects allocated to BANK1 (84 bytes)
   865                           ; load TBLPTR registers with __pidataBANK1
   866  000F7A  0ED0               	movlw	low __pidataBANK1
   867  000F7C  6EF6               	movwf	tblptrl,c
   868  000F7E  0E10               	movlw	high __pidataBANK1
   869  000F80  6EF7               	movwf	tblptrh,c
   870  000F82  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   871  000F84  6EF8               	movwf	tblptru,c
   872  000F86  EE01  F000         	lfsr	0,__pdataBANK1
   873  000F8A  EE10 F054          	lfsr	1,84
   874  000F8E                     copy_data0:
   875  000F8E  0009               	tblrd		*+
   876  000F90  CFF5 FFEE          	movff	tablat,postinc0
   877  000F94  50E5               	movf	postdec1,w,c
   878  000F96  50E1               	movf	fsr1l,w,c
   879  000F98  E1FA               	bnz	copy_data0
   880                           
   881                           ; Initialize objects allocated to BANK0 (42 bytes)
   882                           ; load TBLPTR registers with __pidataBANK0
   883  000F9A  0E3E               	movlw	low __pidataBANK0
   884  000F9C  6EF6               	movwf	tblptrl,c
   885  000F9E  0E13               	movlw	high __pidataBANK0
   886  000FA0  6EF7               	movwf	tblptrh,c
   887  000FA2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   888  000FA4  6EF8               	movwf	tblptru,c
   889  000FA6  EE00  F080         	lfsr	0,__pdataBANK0
   890  000FAA  EE10 F02A          	lfsr	1,42
   891  000FAE                     copy_data1:
   892  000FAE  0009               	tblrd		*+
   893  000FB0  CFF5 FFEE          	movff	tablat,postinc0
   894  000FB4  50E5               	movf	postdec1,w,c
   895  000FB6  50E1               	movf	fsr1l,w,c
   896  000FB8  E1FA               	bnz	copy_data1
   897                           
   898                           ; Initialize objects allocated to COMRAM (22 bytes)
   899                           ; load TBLPTR registers with __pidataCOMRAM
   900  000FBA  0EF8               	movlw	low __pidataCOMRAM
   901  000FBC  6EF6               	movwf	tblptrl,c
   902  000FBE  0E13               	movlw	high __pidataCOMRAM
   903  000FC0  6EF7               	movwf	tblptrh,c
   904  000FC2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   905  000FC4  6EF8               	movwf	tblptru,c
   906  000FC6  EE00  F044         	lfsr	0,__pdataCOMRAM
   907  000FCA  EE10 F016          	lfsr	1,22
   908  000FCE                     copy_data2:
   909  000FCE  0009               	tblrd		*+
   910  000FD0  CFF5 FFEE          	movff	tablat,postinc0
   911  000FD4  50E5               	movf	postdec1,w,c
   912  000FD6  50E1               	movf	fsr1l,w,c
   913  000FD8  E1FA               	bnz	copy_data2
   914  000FDA                     end_of_initialization:
   915                           	opt stack 0
   916  000FDA                     __end_of__initialization:
   917                           	opt stack 0
   918  000FDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   919  000FDC  6EF8               	movwf	tblptru,c
   920  000FDE  0100               	movlb	0
   921  000FE0  EF36  F002         	goto	_main	;jump to C main() function
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931                           	psect	bssCOMRAM
   932  00005A                     __pbssCOMRAM:
   933                           	opt stack 0
   934  00005A                     _Nec_code:
   935                           	opt stack 0
   936  00005A                     	ds	4
   937  00005E                     _Time_Elapsed:
   938                           	opt stack 0
   939  00005E                     	ds	2
   940  000060                     _nbr:
   941                           	opt stack 0
   942  000060                     	ds	2
   943  000062                     _nec_ok:
   944                           	opt stack 0
   945  000062                     	ds	2
   946  000064                     _txt:
   947                           	opt stack 0
   948  000064                     	ds	2
   949  000066                     _Nec_code1:
   950                           	opt stack 0
   951  000066                     	ds	1
   952  000067                     _Nec_state:
   953                           	opt stack 0
   954  000067                     	ds	1
   955  000068                     __tft_type:
   956                           	opt stack 0
   957  000068                     	ds	1
   958  000069                     _bit_count:
   959                           	opt stack 0
   960  000069                     	ds	1
   961  00006A                     _colstart:
   962                           	opt stack 0
   963  00006A                     	ds	1
   964  00006B                     _i:
   965                           	opt stack 0
   966  00006B                     	ds	1
   967  00006C                     _rowstart:
   968                           	opt stack 0
   969  00006C                     	ds	1
   970                           tblptru	equ	0xFF8
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           tablat	equ	0xFF5
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           postdec1	equ	0xFE5
   977                           fsr1l	equ	0xFE1
   978                           
   979                           	psect	dataCOMRAM
   980  000044                     __pdataCOMRAM:
   981                           	opt stack 0
   982  000044                     _array1:
   983                           	opt stack 0
   984  000044                     	ds	21
   985  000059                     _wrap:
   986                           	opt stack 0
   987  000059                     	ds	1
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	bssBANK0
   998  0000AA                     __pbssBANK0:
   999                           	opt stack 0
  1000  0000AA                     _buffer:
  1001                           	opt stack 0
  1002  0000AA                     	ds	31
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1l	equ	0xFE1
  1011                           
  1012                           	psect	dataBANK0
  1013  000080                     __pdataBANK0:
  1014                           	opt stack 0
  1015  000080                     _color:
  1016                           	opt stack 0
  1017  000080                     	ds	42
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           
  1027                           	psect	dataBANK1
  1028  000100                     __pdataBANK1:
  1029                           	opt stack 0
  1030  000100                     _txt1:
  1031                           	opt stack 0
  1032  000100                     	ds	84
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	cstackBANK0
  1043  0000C9                     __pcstackBANK0:
  1044                           	opt stack 0
  1045  0000C9                     drawtext@x:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x0
  1049  0000C9                     	ds	1
  1050  0000CA                     drawtext@textsize:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x1
  1054  0000CA                     	ds	2
  1055  0000CC                     drawtext@i:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x3
  1059  0000CC                     	ds	2
  1060  0000CE                     drawtext@cursor_y:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x5
  1064  0000CE                     	ds	1
  1065  0000CF                     drawtext@cursor_x:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x6
  1069  0000CF                     	ds	1
  1070  0000D0                     main@led_c:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x7
  1074  0000D0                     	ds	1
  1075  0000D1                     main@found:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x8
  1079  0000D1                     	ds	1
  1080  0000D2                     main@i:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x9
  1084  0000D2                     	ds	2
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           
  1094                           	psect	cstackCOMRAM
  1095  000001                     __pcstackCOMRAM:
  1096                           	opt stack 0
  1097  000001                     ??_INT0_isr:
  1098  000001                     
  1099                           ; 0 bytes @ 0x0
  1100  000001                     	ds	2
  1101  000003                     ??_chkisr:
  1102                           
  1103                           ; 0 bytes @ 0x2
  1104  000003                     	ds	14
  1105  000011                     ??_isdigit:
  1106  000011                     ?_strlen:
  1107                           	opt stack 0
  1108  000011                     ?___wmul:
  1109                           	opt stack 0
  1110  000011                     ?___lldiv:
  1111                           	opt stack 0
  1112  000011                     putch@c:
  1113                           	opt stack 0
  1114  000011                     spiwrite@x:
  1115                           	opt stack 0
  1116  000011                     OpenUSART@spbrg:
  1117                           	opt stack 0
  1118  000011                     ___wmul@multiplier:
  1119                           	opt stack 0
  1120  000011                     strcpy@to:
  1121                           	opt stack 0
  1122  000011                     strlen@s:
  1123                           	opt stack 0
  1124  000011                     ___lldiv@dividend:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x10
  1128  000011                     	ds	1
  1129  000012                     spiwrite@spidata:
  1130                           	opt stack 0
  1131  000012                     _isdigit$1597:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x11
  1135  000012                     	ds	1
  1136  000013                     ??_strlen:
  1137  000013                     write_command@cmd_:
  1138                           	opt stack 0
  1139  000013                     write_data@data_:
  1140                           	opt stack 0
  1141  000013                     OpenUSART@config:
  1142                           	opt stack 0
  1143  000013                     isdigit@c:
  1144                           	opt stack 0
  1145  000013                     ___wmul@multiplicand:
  1146                           	opt stack 0
  1147  000013                     strcpy@from:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x12
  1151  000013                     	ds	1
  1152  000014                     setAddrWindow@y0:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x13
  1156  000014                     	ds	1
  1157  000015                     setAddrWindow@x1:
  1158                           	opt stack 0
  1159  000015                     ___wmul@product:
  1160                           	opt stack 0
  1161  000015                     strcpy@cp:
  1162                           	opt stack 0
  1163  000015                     strlen@cp:
  1164                           	opt stack 0
  1165  000015                     ___lldiv@divisor:
  1166                           	opt stack 0
  1167                           
  1168                           ; 4 bytes @ 0x14
  1169  000015                     	ds	1
  1170  000016                     setAddrWindow@y1:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x15
  1174  000016                     	ds	1
  1175  000017                     setAddrWindow@x0:
  1176                           	opt stack 0
  1177  000017                     delay_ms@ms:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x16
  1181  000017                     	ds	1
  1182  000018                     drawPixel@y:
  1183                           	opt stack 0
  1184  000018                     drawFastVLine@y:
  1185                           	opt stack 0
  1186  000018                     fillRectangle@y:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x17
  1190  000018                     	ds	1
  1191  000019                     ??_delay_ms:
  1192  000019                     drawFastVLine@h:
  1193                           	opt stack 0
  1194  000019                     fillRectangle@w:
  1195                           	opt stack 0
  1196  000019                     drawPixel@color:
  1197                           	opt stack 0
  1198  000019                     ___lldiv@quotient:
  1199                           	opt stack 0
  1200                           
  1201                           ; 4 bytes @ 0x18
  1202  000019                     	ds	1
  1203  00001A                     fillRectangle@h:
  1204                           	opt stack 0
  1205  00001A                     drawFastVLine@color:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x19
  1209  00001A                     	ds	1
  1210  00001B                     drawPixel@x:
  1211                           	opt stack 0
  1212  00001B                     delay_ms@count:
  1213                           	opt stack 0
  1214  00001B                     fillRectangle@color:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x1A
  1218  00001B                     	ds	1
  1219  00001C                     ??_drawFastVLine:
  1220  00001C                     drawCircle@x0:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x1B
  1224  00001C                     	ds	1
  1225  00001D                     ??_fillRectangle:
  1226  00001D                     ___lldiv@counter:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x1C
  1230  00001D                     	ds	1
  1231  00001E                     ?_printf:
  1232                           	opt stack 0
  1233  00001E                     drawCircle@y0:
  1234                           	opt stack 0
  1235  00001E                     printf@f:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x1D
  1239  00001E                     	ds	2
  1240  000020                     drawFastVLine@hi:
  1241                           	opt stack 0
  1242  000020                     drawCircle@r:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x1F
  1246  000020                     	ds	1
  1247  000021                     drawFastVLine@lo:
  1248                           	opt stack 0
  1249  000021                     fillRectangle@hi:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x20
  1253  000021                     	ds	1
  1254  000022                     drawFastVLine@x:
  1255                           	opt stack 0
  1256  000022                     fillRectangle@lo:
  1257                           	opt stack 0
  1258  000022                     drawCircle@color:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x21
  1262  000022                     	ds	1
  1263  000023                     fillRect@y:
  1264                           	opt stack 0
  1265  000023                     fillRectangle@x:
  1266                           	opt stack 0
  1267  000023                     fillCircleHelper@x0:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x22
  1271  000023                     	ds	1
  1272  000024                     ??_drawCircle:
  1273  000024                     fillRect@w:
  1274                           	opt stack 0
  1275  000024                     fillScreen@color:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x23
  1279  000024                     	ds	1
  1280  000025                     fillRect@h:
  1281                           	opt stack 0
  1282  000025                     fillCircleHelper@y0:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x24
  1286  000025                     	ds	1
  1287  000026                     ??_printf:
  1288  000026                     fillRect@color:
  1289                           	opt stack 0
  1290  000026                     drawCircle@ddF_x:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x25
  1294  000026                     	ds	1
  1295  000027                     fillCircleHelper@r:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x26
  1299  000027                     	ds	1
  1300  000028                     ??_fillRect:
  1301  000028                     drawCircle@ddF_y:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x27
  1305  000028                     	ds	1
  1306  000029                     fillCircleHelper@cornername:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x28
  1310  000029                     	ds	1
  1311  00002A                     printf@idx:
  1312                           	opt stack 0
  1313  00002A                     drawCircle@f:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x29
  1317  00002A                     	ds	1
  1318  00002B                     fillRect@x:
  1319                           	opt stack 0
  1320  00002B                     fillCircleHelper@delta:
  1321                           	opt stack 0
  1322  00002B                     printf@prec:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x2A
  1326  00002B                     	ds	1
  1327  00002C                     fillRect@i:
  1328                           	opt stack 0
  1329  00002C                     drawCircle@x:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x2B
  1333  00002C                     	ds	1
  1334  00002D                     fillCircleHelper@color:
  1335                           	opt stack 0
  1336  00002D                     printf@val:
  1337                           	opt stack 0
  1338                           
  1339                           ; 4 bytes @ 0x2C
  1340  00002D                     	ds	1
  1341  00002E                     drawChar@y:
  1342                           	opt stack 0
  1343  00002E                     drawCircle@y:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x2D
  1347  00002E                     	ds	1
  1348  00002F                     ??_fillCircleHelper:
  1349  00002F                     drawChar@c:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x2E
  1353  00002F                     	ds	1
  1354  000030                     drawChar@color:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x2F
  1358  000030                     	ds	1
  1359  000031                     fillCircleHelper@ddF_x:
  1360                           	opt stack 0
  1361  000031                     printf@ap:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x30
  1365  000031                     	ds	1
  1366  000032                     drawChar@bg:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x31
  1370  000032                     	ds	1
  1371  000033                     printf@flag:
  1372                           	opt stack 0
  1373  000033                     fillCircleHelper@ddF_y:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x32
  1377  000033                     	ds	1
  1378  000034                     drawChar@size:
  1379                           	opt stack 0
  1380  000034                     printf@width:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x33
  1384  000034                     	ds	1
  1385  000035                     drawChar@line:
  1386                           	opt stack 0
  1387  000035                     fillCircleHelper@f:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x34
  1391  000035                     	ds	1
  1392  000036                     drawChar@x:
  1393                           	opt stack 0
  1394  000036                     printf@c:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x35
  1398  000036                     	ds	1
  1399  000037                     drawChar@j:
  1400                           	opt stack 0
  1401  000037                     fillCircleHelper@x:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x36
  1405  000037                     	ds	1
  1406  000038                     drawChar@i:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x37
  1410  000038                     	ds	1
  1411  000039                     drawtext@y:
  1412                           	opt stack 0
  1413  000039                     fillCircleHelper@y:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x38
  1417  000039                     	ds	1
  1418  00003A                     drawtext@_text:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x39
  1422  00003A                     	ds	1
  1423  00003B                     fillCircle@x0:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x3A
  1427  00003B                     	ds	1
  1428  00003C                     drawtext@color:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x3B
  1432  00003C                     	ds	1
  1433  00003D                     fillCircle@y0:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x3C
  1437  00003D                     	ds	1
  1438  00003E                     drawtext@bg:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x3D
  1442  00003E                     	ds	1
  1443  00003F                     fillCircle@r:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x3E
  1447  00003F                     	ds	1
  1448  000040                     drawtext@size:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x3F
  1452  000040                     	ds	1
  1453  000041                     ??_drawtext:
  1454  000041                     fillCircle@color:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x40
  1458  000041                     	ds	2
  1459  000043                     
  1460                           ; 0 bytes @ 0x42
  1461  000043                     	ds	1
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471 ;;
  1472 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1473 ;;
  1474 ;; *************** function _main *****************
  1475 ;; Defined at:
  1476 ;;		line 239 in file "Lab10p1.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  i               2    9[BANK0 ] int 
  1481 ;;  found           1    8[BANK0 ] unsigned char 
  1482 ;;  led_c           1    7[BANK0 ] unsigned char 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;		None               void
  1485 ;; Registers used:
  1486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;Total ram usage:        5 bytes
  1497 ;; Hardware stack levels required when called:   11
  1498 ;; This function calls:
  1499 ;;		_Initialize_Screen
  1500 ;;		_drawCircle
  1501 ;;		_drawtext
  1502 ;;		_fillCircle
  1503 ;;		_init_UART
  1504 ;;		_printf
  1505 ;; This function is called by:
  1506 ;;		Startup code after reset
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text0
  1511  00046C                     __ptext0:
  1512                           	opt stack 0
  1513  00046C                     _main:
  1514                           	opt stack 20
  1515                           
  1516                           ;Lab10p1.c: 241: init_UART();
  1517                           
  1518                           ;incstack = 0
  1519  00046C  EC07  F00A         	call	_init_UART	;wreg free
  1520                           
  1521                           ;Lab10p1.c: 242: OSCCON = 0x70;
  1522  000470  0E70               	movlw	112
  1523  000472  6ED3               	movwf	4051,c	;volatile
  1524                           
  1525                           ;Lab10p1.c: 243: nRBPU = 0;
  1526  000474  9EF1               	bcf	intcon2,7,c	;volatile
  1527                           
  1528                           ;Lab10p1.c: 244: TRISB = 0x01;
  1529  000476  0E01               	movlw	1
  1530  000478  6E93               	movwf	3987,c	;volatile
  1531                           
  1532                           ;Lab10p1.c: 245: TRISC = 0x00;
  1533  00047A  0E00               	movlw	0
  1534  00047C  6E94               	movwf	3988,c	;volatile
  1535                           
  1536                           ;Lab10p1.c: 246: TRISD = 0x00;
  1537  00047E  0E00               	movlw	0
  1538  000480  6E95               	movwf	3989,c	;volatile
  1539                           
  1540                           ;Lab10p1.c: 247: TRISE = 0x00;
  1541  000482  0E00               	movlw	0
  1542  000484  6E96               	movwf	3990,c	;volatile
  1543                           
  1544                           ;Lab10p1.c: 248: ADCON1 = 0x0F;
  1545  000486  0E0F               	movlw	15
  1546  000488  6EC1               	movwf	4033,c	;volatile
  1547                           
  1548                           ;Lab10p1.c: 250: Initialize_Screen();
  1549  00048A  ECE0  F006         	call	_Initialize_Screen	;wreg free
  1550                           
  1551                           ;Lab10p1.c: 251: INTCONbits.INT0IF = 0;
  1552  00048E  92F2               	bcf	intcon,1,c	;volatile
  1553                           
  1554                           ;Lab10p1.c: 252: INTCON2bits.INTEDG0 = 0;
  1555  000490  9CF1               	bcf	intcon2,6,c	;volatile
  1556                           
  1557                           ;Lab10p1.c: 253: INTCONbits.INT0IE = 1;
  1558  000492  88F2               	bsf	intcon,4,c	;volatile
  1559                           
  1560                           ;Lab10p1.c: 254: TMR1H = 0;
  1561  000494  0E00               	movlw	0
  1562  000496  6ECF               	movwf	4047,c	;volatile
  1563                           
  1564                           ;Lab10p1.c: 255: TMR1L = 0;
  1565  000498  0E00               	movlw	0
  1566  00049A  6ECE               	movwf	4046,c	;volatile
  1567                           
  1568                           ;Lab10p1.c: 256: PIR1bits.TMR1IF = 0;
  1569  00049C  909E               	bcf	3998,0,c	;volatile
  1570                           
  1571                           ;Lab10p1.c: 257: PIE1bits.TMR1IE = 1;
  1572  00049E  809D               	bsf	3997,0,c	;volatile
  1573                           
  1574                           ;Lab10p1.c: 258: INTCONbits.PEIE = 1;
  1575  0004A0  8CF2               	bsf	intcon,6,c	;volatile
  1576                           
  1577                           ;Lab10p1.c: 259: INTCONbits.GIE = 1;
  1578  0004A2  8EF2               	bsf	intcon,7,c	;volatile
  1579                           
  1580                           ;Lab10p1.c: 260: nec_ok = 0;
  1581  0004A4  0E00               	movlw	0
  1582  0004A6  6E63               	movwf	_nec_ok+1,c
  1583  0004A8  0E00               	movlw	0
  1584  0004AA  6E62               	movwf	_nec_ok,c
  1585                           
  1586                           ;Lab10p1.c: 261: Nec_code = 0x0;
  1587  0004AC  0E00               	movlw	0
  1588  0004AE  6E5A               	movwf	_Nec_code,c
  1589  0004B0  0E00               	movlw	0
  1590  0004B2  6E5B               	movwf	_Nec_code+1,c
  1591  0004B4  0E00               	movlw	0
  1592  0004B6  6E5C               	movwf	_Nec_code+2,c
  1593  0004B8  0E00               	movlw	0
  1594  0004BA  6E5D               	movwf	_Nec_code+3,c
  1595  0004BC  D000               	goto	l3817
  1596  0004BE                     l3817:
  1597                           
  1598                           ;Lab10p1.c: 264: {
  1599                           ;Lab10p1.c: 265: if (nec_ok == 1)
  1600  0004BE  0462               	decf	_nec_ok,w,c
  1601  0004C0  1063               	iorwf	_nec_ok+1,w,c
  1602  0004C2  A4D8               	btfss	status,2,c
  1603  0004C4  D7FC               	goto	l3817
  1604                           
  1605                           ;Lab10p1.c: 266: {
  1606                           ;Lab10p1.c: 267: nec_ok = 0;
  1607  0004C6  0E00               	movlw	0
  1608  0004C8  6E63               	movwf	_nec_ok+1,c
  1609  0004CA  0E00               	movlw	0
  1610  0004CC  6E62               	movwf	_nec_ok,c
  1611                           
  1612                           ;Lab10p1.c: 269: Nec_code1 = (char) ((Nec_code >> 8));
  1613  0004CE  C05B  F066         	movff	_Nec_code+1,_Nec_code1
  1614                           
  1615                           ;Lab10p1.c: 270: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1616  0004D2  0EEC               	movlw	low STR_1
  1617  0004D4  6E1E               	movwf	printf@f,c
  1618  0004D6  0EFC               	movlw	high STR_1
  1619  0004D8  6E1F               	movwf	printf@f+1,c
  1620  0004DA  C05A  F020         	movff	_Nec_code,?_printf+2
  1621  0004DE  C05B  F021         	movff	_Nec_code+1,?_printf+3
  1622  0004E2  C05C  F022         	movff	_Nec_code+2,?_printf+4
  1623  0004E6  C05D  F023         	movff	_Nec_code+3,?_printf+5
  1624  0004EA  C066  F024         	movff	_Nec_code1,?_printf+6
  1625  0004EE  6A25               	clrf	?_printf+7,c
  1626  0004F0  EC0E  F000         	call	_printf	;wreg free
  1627                           
  1628                           ;Lab10p1.c: 271: INTCONbits.INT0IE = 1;
  1629  0004F4  88F2               	bsf	intcon,4,c	;volatile
  1630                           
  1631                           ;Lab10p1.c: 272: INTCON2bits.INTEDG0 = 0;
  1632  0004F6  9CF1               	bcf	intcon2,6,c	;volatile
  1633                           
  1634                           ;Lab10p1.c: 274: char found = 0xff;
  1635  0004F8  0100               	movlb	0	; () banked
  1636  0004FA  69D1               	setf	main@found& (0+255),b
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;Lab10p1.c: 275: char led_c = 0xff;
  1640  0004FC  0100               	movlb	0	; () banked
  1641  0004FE  69D0               	setf	main@led_c& (0+255),b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;Lab10p1.c: 277: for(int i = 0; i < 21; i++)
  1645  000500  0E00               	movlw	0
  1646  000502  0100               	movlb	0	; () banked
  1647  000504  6FD3               	movwf	(main@i+1)& (0+255),b
  1648  000506  0E00               	movlw	0
  1649  000508  6FD2               	movwf	main@i& (0+255),b
  1650  00050A                     l3835:
  1651                           
  1652                           ; BSR set to: 0
  1653  00050A  0100               	movlb	0	; () banked
  1654  00050C  BFD3               	btfsc	(main@i+1)& (0+255),7,b
  1655  00050E  D00A               	goto	l3839
  1656  000510  0100               	movlb	0	; () banked
  1657  000512  51D3               	movf	(main@i+1)& (0+255),w,b
  1658  000514  E11D               	bnz	l3847
  1659  000516  0E15               	movlw	21
  1660  000518  0100               	movlb	0	; () banked
  1661  00051A  5DD2               	subwf	main@i& (0+255),w,b
  1662  00051C  B0D8               	btfsc	status,0,c
  1663  00051E  D018               	goto	l3847
  1664  000520  D001               	goto	l3839
  1665                           
  1666                           ; BSR set to: 0
  1667  000522  D016               	goto	l3847
  1668  000524                     l3839:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;Lab10p1.c: 278: {
  1672                           ;Lab10p1.c: 279: if(Nec_code1 == array1[i])
  1673  000524  0E44               	movlw	low _array1
  1674  000526  0100               	movlb	0	; () banked
  1675  000528  25D2               	addwf	main@i& (0+255),w,b
  1676  00052A  6ED9               	movwf	fsr2l,c
  1677  00052C  0E00               	movlw	high _array1
  1678  00052E  0100               	movlb	0	; () banked
  1679  000530  21D3               	addwfc	(main@i+1)& (0+255),w,b
  1680  000532  6EDA               	movwf	fsr2h,c
  1681  000534  5066               	movf	_Nec_code1,w,c
  1682  000536  18DE               	xorwf	postinc2,w,c
  1683  000538  A4D8               	btfss	status,2,c
  1684  00053A  D005               	goto	l3843
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;Lab10p1.c: 280: {
  1688                           ;Lab10p1.c: 281: found = i;
  1689  00053C  C0D2  F0D1         	movff	main@i,main@found
  1690                           
  1691                           ;Lab10p1.c: 282: led_c = i;
  1692  000540  C0D2  F0D0         	movff	main@i,main@led_c
  1693  000544  D000               	goto	l3843
  1694  000546                     l3843:
  1695                           
  1696                           ; BSR set to: 0
  1697  000546  0100               	movlb	0	; () banked
  1698  000548  4BD2               	infsnz	main@i& (0+255),f,b
  1699  00054A  2BD3               	incf	(main@i+1)& (0+255),f,b
  1700  00054C  D7DE               	goto	l3835
  1701                           
  1702                           ; BSR set to: 0
  1703  00054E  D000               	goto	l3847
  1704  000550                     l3847:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;Lab10p1.c: 283: }
  1708                           ;Lab10p1.c: 284: }
  1709                           ;Lab10p1.c: 290: if (found != 0xff)
  1710  000550  0100               	movlb	0	; () banked
  1711  000552  29D1               	incf	main@found& (0+255),w,b
  1712  000554  B4D8               	btfsc	status,2,c
  1713  000556  D7B3               	goto	l3817
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;Lab10p1.c: 291: {
  1717                           ;Lab10p1.c: 292: fillCircle(60, 80, 20, color[found]);
  1718  000558  0E00               	movlw	0
  1719  00055A  6E3C               	movwf	fillCircle@x0+1,c
  1720  00055C  0E3C               	movlw	60
  1721  00055E  6E3B               	movwf	fillCircle@x0,c
  1722  000560  0E00               	movlw	0
  1723  000562  6E3E               	movwf	fillCircle@y0+1,c
  1724  000564  0E50               	movlw	80
  1725  000566  6E3D               	movwf	fillCircle@y0,c
  1726  000568  0E00               	movlw	0
  1727  00056A  6E40               	movwf	fillCircle@r+1,c
  1728  00056C  0E14               	movlw	20
  1729  00056E  6E3F               	movwf	fillCircle@r,c
  1730  000570  0100               	movlb	0	; () banked
  1731  000572  51D1               	movf	main@found& (0+255),w,b
  1732  000574  0D02               	mullw	2
  1733  000576  0E80               	movlw	low _color
  1734  000578  24F3               	addwf	prodl,w,c
  1735  00057A  6ED9               	movwf	fsr2l,c
  1736  00057C  0E00               	movlw	high _color
  1737  00057E  20F4               	addwfc	prodh,w,c
  1738  000580  6EDA               	movwf	fsr2h,c
  1739  000582  CFDE F041          	movff	postinc2,fillCircle@color
  1740  000586  CFDD F042          	movff	postdec2,fillCircle@color+1
  1741  00058A  EC92  F008         	call	_fillCircle	;wreg free
  1742                           
  1743                           ;Lab10p1.c: 293: drawCircle(60, 80, 20, 0xFFFF);
  1744  00058E  0E00               	movlw	0
  1745  000590  6E1D               	movwf	drawCircle@x0+1,c
  1746  000592  0E3C               	movlw	60
  1747  000594  6E1C               	movwf	drawCircle@x0,c
  1748  000596  0E00               	movlw	0
  1749  000598  6E1F               	movwf	drawCircle@y0+1,c
  1750  00059A  0E50               	movlw	80
  1751  00059C  6E1E               	movwf	drawCircle@y0,c
  1752  00059E  0E00               	movlw	0
  1753  0005A0  6E21               	movwf	drawCircle@r+1,c
  1754  0005A2  0E14               	movlw	20
  1755  0005A4  6E20               	movwf	drawCircle@r,c
  1756  0005A6  0EFF               	movlw	255
  1757  0005A8  6E23               	movwf	drawCircle@color+1,c
  1758  0005AA  6822               	setf	drawCircle@color,c
  1759  0005AC  EC5F  F001         	call	_drawCircle	;wreg free
  1760                           
  1761                           ;Lab10p1.c: 294: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1762  0005B0  0E4D               	movlw	77
  1763  0005B2  6E39               	movwf	drawtext@y,c
  1764  0005B4  0100               	movlb	0	; () banked
  1765  0005B6  51D1               	movf	main@found& (0+255),w,b
  1766  0005B8  0D04               	mullw	4
  1767  0005BA  0E00               	movlw	low _txt1
  1768  0005BC  24F3               	addwf	prodl,w,c
  1769  0005BE  6E3A               	movwf	drawtext@_text,c
  1770  0005C0  0E01               	movlw	high _txt1
  1771  0005C2  20F4               	addwfc	prodh,w,c
  1772  0005C4  6E3B               	movwf	drawtext@_text+1,c
  1773  0005C6  0EFF               	movlw	255
  1774  0005C8  6E3D               	movwf	drawtext@color+1,c
  1775  0005CA  683C               	setf	drawtext@color,c
  1776  0005CC  0E00               	movlw	0
  1777  0005CE  6E3F               	movwf	drawtext@bg+1,c
  1778  0005D0  0E00               	movlw	0
  1779  0005D2  6E3E               	movwf	drawtext@bg,c
  1780  0005D4  0E01               	movlw	1
  1781  0005D6  6E40               	movwf	drawtext@size,c
  1782  0005D8  0E34               	movlw	52
  1783  0005DA  EC74  F005         	call	_drawtext
  1784  0005DE  D76F               	goto	l3817
  1785  0005E0  EF0C  F000         	goto	start
  1786  0005E4                     __end_of_main:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           intcon	equ	0xFF2
  1795                           intcon2	equ	0xFF1
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           postinc2	equ	0xFDE
  1801                           postdec2	equ	0xFDD
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _printf *****************
  1807 ;; Defined at:
  1808 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  f               2   29[COMRAM] PTR const unsigned char 
  1811 ;;		 -> STR_1(22), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  idx             1   41[COMRAM] unsigned char 
  1814 ;;  val             4   44[COMRAM] unsigned long 
  1815 ;;  tmpval          4    0        struct .
  1816 ;;  cp              3    0        PTR const unsigned char 
  1817 ;;  width           2   51[COMRAM] int 
  1818 ;;  ap              2   48[COMRAM] PTR void [1]
  1819 ;;		 -> ?_printf(2), 
  1820 ;;  prec            2   42[COMRAM] int 
  1821 ;;  len             2    0        unsigned int 
  1822 ;;  c               1   53[COMRAM] char 
  1823 ;;  flag            1   50[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  2   29[COMRAM] int 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:       25 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		___lldiv
  1842 ;;		___wmul
  1843 ;;		_isdigit
  1844 ;;		_putch
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text1
  1851  00001C                     __ptext1:
  1852                           	opt stack 0
  1853  00001C                     _printf:
  1854                           	opt stack 26
  1855                           
  1856                           ;doprnt.c: 466: va_list ap;
  1857                           ;doprnt.c: 499: signed char c;
  1858                           ;doprnt.c: 501: int width;
  1859                           ;doprnt.c: 504: int prec;
  1860                           ;doprnt.c: 508: unsigned char flag;
  1861                           ;doprnt.c: 523: union {
  1862                           ;doprnt.c: 524: unsigned long vd;
  1863                           ;doprnt.c: 525: double integ;
  1864                           ;doprnt.c: 526: } tmpval;
  1865                           ;doprnt.c: 528: unsigned long val;
  1866                           ;doprnt.c: 529: unsigned len;
  1867                           ;doprnt.c: 530: const char * cp;
  1868                           ;doprnt.c: 533: *ap = __va_start();
  1869                           
  1870                           ;incstack = 0
  1871  00001C  0E20               	movlw	low (?_printf+2)
  1872  00001E  6E31               	movwf	printf@ap,c
  1873  000020  0E00               	movlw	high (?_printf+2)
  1874  000022  6E32               	movwf	printf@ap+1,c
  1875                           
  1876                           ;doprnt.c: 536: while(c = *f++) {
  1877  000024  D13D               	goto	l3701
  1878  000026                     l3619:
  1879                           
  1880                           ;doprnt.c: 538: if(c != '%')
  1881  000026  0E25               	movlw	37
  1882  000028  1836               	xorwf	printf@c,w,c
  1883  00002A  B4D8               	btfsc	status,2,c
  1884  00002C  D004               	goto	l3623
  1885                           
  1886                           ;doprnt.c: 540: {
  1887                           ;doprnt.c: 541: (putch(c) );
  1888  00002E  5036               	movf	printf@c,w,c
  1889  000030  EC34  F00A         	call	_putch
  1890                           
  1891                           ;doprnt.c: 542: continue;
  1892  000034  D135               	goto	l3701
  1893  000036                     l3623:
  1894                           
  1895                           ;doprnt.c: 543: }
  1896                           ;doprnt.c: 546: width = 0;
  1897  000036  0E00               	movlw	0
  1898  000038  6E35               	movwf	printf@width+1,c
  1899  00003A  0E00               	movlw	0
  1900  00003C  6E34               	movwf	printf@width,c
  1901                           
  1902                           ;doprnt.c: 548: flag = 0;
  1903  00003E  0E00               	movlw	0
  1904  000040  6E33               	movwf	printf@flag,c
  1905                           
  1906                           ;doprnt.c: 551: switch(*f) {
  1907                           
  1908                           ;doprnt.c: 550: for(;;) {
  1909  000042  D005               	goto	l3629
  1910  000044                     l3625:
  1911                           
  1912                           ;doprnt.c: 580: flag |= 0x04;
  1913  000044  8433               	bsf	printf@flag,2,c
  1914                           
  1915                           ;doprnt.c: 581: f++;
  1916  000046  4A1E               	infsnz	printf@f,f,c
  1917  000048  2A1F               	incf	printf@f+1,f,c
  1918                           
  1919                           ;doprnt.c: 582: continue;
  1920  00004A  D001               	goto	l3629
  1921                           
  1922                           ;doprnt.c: 584: }
  1923  00004C  D00B               	goto	l3631
  1924  00004E                     l3629:
  1925  00004E  C01E  FFF6         	movff	printf@f,tblptrl
  1926  000052  C01F  FFF7         	movff	printf@f+1,tblptrh
  1927  000056                     	if	0	;tblptru may be non-zero
  1928  000056                     	endif
  1929  000056                     	if	0	;tblptru may be non-zero
  1930  000056                     	endif
  1931  000056  0008               	tblrd		*
  1932  000058  50F5               	movf	tablat,w,c
  1933                           
  1934                           ; Switch size 1, requested type "space"
  1935                           ; Number of cases is 1, Range of values is 48 to 48
  1936                           ; switch strategies available:
  1937                           ; Name         Instructions Cycles
  1938                           ; simple_byte            4     3 (average)
  1939                           ;	Chosen strategy is simple_byte
  1940  00005A  0A30               	xorlw	48	; case 48
  1941  00005C  B4D8               	btfsc	status,2,c
  1942  00005E  D7F2               	goto	l3625
  1943                           
  1944                           ;doprnt.c: 585: break;
  1945  000060  D001               	goto	l3631
  1946                           
  1947                           ;doprnt.c: 586: }
  1948  000062  D7F5               	goto	l3629
  1949  000064                     l3631:
  1950                           
  1951                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1952  000064  C01E  FFF6         	movff	printf@f,tblptrl
  1953  000068  C01F  FFF7         	movff	printf@f+1,tblptrh
  1954  00006C                     	if	0	;tblptru may be non-zero
  1955  00006C                     	endif
  1956  00006C                     	if	0	;tblptru may be non-zero
  1957  00006C                     	endif
  1958  00006C  0008               	tblrd		*
  1959  00006E  50F5               	movf	tablat,w,c
  1960  000070  ECDD  F009         	call	_isdigit
  1961  000074  A0D8               	btfss	status,0,c
  1962  000076  D03B               	goto	l3647
  1963                           
  1964                           ;doprnt.c: 598: width = 0;
  1965  000078  0E00               	movlw	0
  1966  00007A  6E35               	movwf	printf@width+1,c
  1967  00007C  0E00               	movlw	0
  1968  00007E  6E34               	movwf	printf@width,c
  1969  000080  D000               	goto	l3635
  1970  000082                     l3635:
  1971                           
  1972                           ;doprnt.c: 600: width *= 10;
  1973  000082  C034  F011         	movff	printf@width,___wmul@multiplier
  1974  000086  C035  F012         	movff	printf@width+1,___wmul@multiplier+1
  1975  00008A  0E00               	movlw	0
  1976  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  1977  00008E  0E0A               	movlw	10
  1978  000090  6E13               	movwf	___wmul@multiplicand,c
  1979  000092  ECC9  F009         	call	___wmul	;wreg free
  1980  000096  C011  F034         	movff	?___wmul,printf@width
  1981  00009A  C012  F035         	movff	?___wmul+1,printf@width+1
  1982                           
  1983                           ;doprnt.c: 601: width += *f++ - '0';
  1984  00009E  0ED0               	movlw	208
  1985  0000A0  6E26               	movwf	??_printf& (0+255),c
  1986  0000A2  0EFF               	movlw	255
  1987  0000A4  6E27               	movwf	(??_printf+1)& (0+255),c
  1988  0000A6  C01E  FFF6         	movff	printf@f,tblptrl
  1989  0000AA  C01F  FFF7         	movff	printf@f+1,tblptrh
  1990  0000AE                     	if	0	;tblptru may be non-zero
  1991  0000AE                     	endif
  1992  0000AE                     	if	0	;tblptru may be non-zero
  1993  0000AE                     	endif
  1994  0000AE  0008               	tblrd		*
  1995  0000B0  50F5               	movf	tablat,w,c
  1996  0000B2  6E28               	movwf	(??_printf+2)& (0+255),c
  1997  0000B4  6A29               	clrf	(??_printf+3)& (0+255),c
  1998  0000B6  5026               	movf	??_printf,w,c
  1999  0000B8  2628               	addwf	??_printf+2,f,c
  2000  0000BA  5027               	movf	??_printf+1,w,c
  2001  0000BC  2229               	addwfc	??_printf+3,f,c
  2002  0000BE  5028               	movf	??_printf+2,w,c
  2003  0000C0  2634               	addwf	printf@width,f,c
  2004  0000C2  5029               	movf	??_printf+3,w,c
  2005  0000C4  2235               	addwfc	printf@width+1,f,c
  2006  0000C6  4A1E               	infsnz	printf@f,f,c
  2007  0000C8  2A1F               	incf	printf@f+1,f,c
  2008                           
  2009                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2010  0000CA  C01E  FFF6         	movff	printf@f,tblptrl
  2011  0000CE  C01F  FFF7         	movff	printf@f+1,tblptrh
  2012  0000D2                     	if	0	;tblptru may be non-zero
  2013  0000D2                     	endif
  2014  0000D2                     	if	0	;tblptru may be non-zero
  2015  0000D2                     	endif
  2016  0000D2  0008               	tblrd		*
  2017  0000D4  50F5               	movf	tablat,w,c
  2018  0000D6  ECDD  F009         	call	_isdigit
  2019  0000DA  A0D8               	btfss	status,0,c
  2020  0000DC  D008               	goto	l3647
  2021  0000DE  D7D1               	goto	l3635
  2022                           
  2023                           ;doprnt.c: 635: switch(c = *f++) {
  2024                           
  2025                           ;doprnt.c: 608: }
  2026                           ;doprnt.c: 633: loop:
  2027  0000E0  D006               	goto	l3647
  2028                           
  2029                           ;doprnt.c: 638: goto alldone;
  2030                           
  2031                           ;doprnt.c: 637: case 0:
  2032  0000E2  D0EC               	goto	l429
  2033  0000E4                     l3643:
  2034                           
  2035                           ;doprnt.c: 643: flag |= 0x10;
  2036  0000E4  8833               	bsf	printf@flag,4,c
  2037                           
  2038                           ;doprnt.c: 644: goto loop;
  2039  0000E6  D003               	goto	l3647
  2040                           
  2041                           ;doprnt.c: 723: break;
  2042                           
  2043                           ;doprnt.c: 718: case 'x':
  2044  0000E8  D015               	goto	l408
  2045                           
  2046                           ;doprnt.c: 813: continue;
  2047                           
  2048                           ;doprnt.c: 802: default:
  2049  0000EA  D0DA               	goto	l3701
  2050                           
  2051                           ;doprnt.c: 822: }
  2052  0000EC  D013               	goto	l408
  2053  0000EE                     l3647:
  2054  0000EE  C01E  FFF6         	movff	printf@f,tblptrl
  2055  0000F2  C01F  FFF7         	movff	printf@f+1,tblptrh
  2056  0000F6  4A1E               	infsnz	printf@f,f,c
  2057  0000F8  2A1F               	incf	printf@f+1,f,c
  2058  0000FA                     	if	0	;tblptru may be non-zero
  2059  0000FA                     	endif
  2060  0000FA                     	if	0	;tblptru may be non-zero
  2061  0000FA                     	endif
  2062  0000FA  0008               	tblrd		*
  2063  0000FC  CFF5 F036          	movff	tablat,printf@c
  2064  000100  5036               	movf	printf@c,w,c
  2065                           
  2066                           ; Switch size 1, requested type "space"
  2067                           ; Number of cases is 3, Range of values is 0 to 120
  2068                           ; switch strategies available:
  2069                           ; Name         Instructions Cycles
  2070                           ; simple_byte           10     6 (average)
  2071                           ;	Chosen strategy is simple_byte
  2072  000102  0A00               	xorlw	0	; case 0
  2073  000104  B4D8               	btfsc	status,2,c
  2074  000106  D0DA               	goto	l429
  2075  000108  0A6C               	xorlw	108	; case 108
  2076  00010A  B4D8               	btfsc	status,2,c
  2077  00010C  D7EB               	goto	l3643
  2078  00010E  0A14               	xorlw	20	; case 120
  2079  000110  A4D8               	btfss	status,2,c
  2080  000112  D0C6               	goto	l3701
  2081  000114                     l408:
  2082                           
  2083                           ;doprnt.c: 1273: {
  2084                           ;doprnt.c: 1281: if(flag & 0x10)
  2085  000114  A833               	btfss	printf@flag,4,c
  2086  000116  D00E               	goto	l3653
  2087                           
  2088                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2089  000118  C031  FFD9         	movff	printf@ap,fsr2l
  2090  00011C  C032  FFDA         	movff	printf@ap+1,fsr2h
  2091  000120  CFDE F02D          	movff	postinc2,printf@val
  2092  000124  CFDE F02E          	movff	postinc2,printf@val+1
  2093  000128  CFDE F02F          	movff	postinc2,printf@val+2
  2094  00012C  CFDE F030          	movff	postinc2,printf@val+3
  2095  000130  0E04               	movlw	4
  2096  000132  D00F               	goto	L1
  2097  000134                     l3653:
  2098                           
  2099                           ;doprnt.c: 1283: else
  2100                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2101  000134  C031  FFD9         	movff	printf@ap,fsr2l
  2102  000138  C032  FFDA         	movff	printf@ap+1,fsr2h
  2103  00013C  CFDE F026          	movff	postinc2,??_printf
  2104  000140  CFDD F027          	movff	postdec2,??_printf+1
  2105  000144  C026  F02D         	movff	??_printf,printf@val
  2106  000148  C027  F02E         	movff	??_printf+1,printf@val+1
  2107  00014C  6A2F               	clrf	printf@val+2,c
  2108  00014E  6A30               	clrf	printf@val+3,c
  2109  000150  0E02               	movlw	2
  2110  000152                     L1:
  2111  000152  2631               	addwf	printf@ap,f,c
  2112  000154  0E00               	movlw	0
  2113  000156  2232               	addwfc	printf@ap+1,f,c
  2114  000158  D000               	goto	l3657
  2115  00015A                     l3657:
  2116                           
  2117                           ;doprnt.c: 1287: }
  2118                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2119  00015A  0E01               	movlw	1
  2120  00015C  6E36               	movwf	printf@c,c
  2121  00015E                     l3659:
  2122  00015E  0E08               	movlw	8
  2123  000160  1836               	xorwf	printf@c,w,c
  2124  000162  B4D8               	btfsc	status,2,c
  2125  000164  D01C               	goto	l3671
  2126  000166  D001               	goto	l3663
  2127  000168  D01A               	goto	l3671
  2128  00016A                     l3663:
  2129                           
  2130                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2131  00016A  5036               	movf	printf@c,w,c
  2132  00016C  0D04               	mullw	4
  2133  00016E  0ECC               	movlw	low _hexpowers
  2134  000170  24F3               	addwf	prodl,w,c
  2135  000172  6EF6               	movwf	tblptrl,c
  2136  000174  0EFC               	movlw	high _hexpowers
  2137  000176  20F4               	addwfc	prodh,w,c
  2138  000178  6EF7               	movwf	tblptrh,c
  2139  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2140  00017A                     	endif
  2141  00017A  0009               	tblrd		*+
  2142  00017C  50F5               	movf	tablat,w,c
  2143  00017E  5C2D               	subwf	printf@val,w,c
  2144  000180  0009               	tblrd		*+
  2145  000182  50F5               	movf	tablat,w,c
  2146  000184  582E               	subwfb	printf@val+1,w,c
  2147  000186  0009               	tblrd		*+
  2148  000188  50F5               	movf	tablat,w,c
  2149  00018A  582F               	subwfb	printf@val+2,w,c
  2150  00018C  0009               	tblrd		*+
  2151  00018E  50F5               	movf	tablat,w,c
  2152  000190  5830               	subwfb	printf@val+3,w,c
  2153  000192  A0D8               	btfss	status,0,c
  2154  000194  D004               	goto	l3671
  2155  000196  D001               	goto	l3667
  2156                           
  2157                           ;doprnt.c: 1318: break;
  2158  000198  D002               	goto	l3671
  2159  00019A                     l3667:
  2160  00019A  2A36               	incf	printf@c,f,c
  2161  00019C  D7E0               	goto	l3659
  2162  00019E                     l3671:
  2163                           
  2164                           ;doprnt.c: 1381: if(width > c)
  2165  00019E  0E80               	movlw	128
  2166  0001A0  BE36               	btfsc	printf@c,7,c
  2167  0001A2  0E7F               	movlw	127
  2168  0001A4  6E26               	movwf	??_printf& (0+255),c
  2169  0001A6  5034               	movf	printf@width,w,c
  2170  0001A8  5C36               	subwf	printf@c,w,c
  2171  0001AA  5035               	movf	printf@width+1,w,c
  2172  0001AC  0A80               	xorlw	128
  2173  0001AE  5826               	subwfb	??_printf& (0+255),w,c
  2174  0001B0  B0D8               	btfsc	status,0,c
  2175  0001B2  D007               	goto	l3675
  2176                           
  2177                           ;doprnt.c: 1382: width -= c;
  2178  0001B4  5036               	movf	printf@c,w,c
  2179  0001B6  5E34               	subwf	printf@width,f,c
  2180  0001B8  0E00               	movlw	0
  2181  0001BA  BE36               	btfsc	printf@c,7,c
  2182  0001BC  0EFF               	movlw	255
  2183  0001BE  5A35               	subwfb	printf@width+1,f,c
  2184  0001C0  D005               	goto	l3677
  2185  0001C2                     l3675:
  2186                           
  2187                           ;doprnt.c: 1383: else
  2188                           ;doprnt.c: 1384: width = 0;
  2189  0001C2  0E00               	movlw	0
  2190  0001C4  6E35               	movwf	printf@width+1,c
  2191  0001C6  0E00               	movlw	0
  2192  0001C8  6E34               	movwf	printf@width,c
  2193  0001CA  D000               	goto	l3677
  2194  0001CC                     l3677:
  2195                           
  2196                           ;doprnt.c: 1387: if(flag & 0x04) {
  2197  0001CC  A433               	btfss	printf@flag,2,c
  2198  0001CE  D010               	goto	l3685
  2199                           
  2200                           ;doprnt.c: 1415: if(width)
  2201  0001D0  5034               	movf	printf@width,w,c
  2202  0001D2  1035               	iorwf	printf@width+1,w,c
  2203  0001D4  B4D8               	btfsc	status,2,c
  2204  0001D6  D01C               	goto	l3691
  2205  0001D8                     l3681:
  2206                           
  2207                           ;doprnt.c: 1417: (putch('0') );
  2208  0001D8  0E30               	movlw	48
  2209  0001DA  EC34  F00A         	call	_putch
  2210                           
  2211                           ;doprnt.c: 1418: while(--width);
  2212  0001DE  0634               	decf	printf@width,f,c
  2213  0001E0  A0D8               	btfss	status,0,c
  2214  0001E2  0635               	decf	printf@width+1,f,c
  2215  0001E4  5034               	movf	printf@width,w,c
  2216  0001E6  1035               	iorwf	printf@width+1,w,c
  2217  0001E8  B4D8               	btfsc	status,2,c
  2218  0001EA  D012               	goto	l3691
  2219  0001EC  D7F5               	goto	l3681
  2220                           
  2221                           ;doprnt.c: 1420: } else
  2222  0001EE  D010               	goto	l3691
  2223  0001F0                     l3685:
  2224                           
  2225                           ;doprnt.c: 1422: {
  2226                           ;doprnt.c: 1424: if(width
  2227                           ;doprnt.c: 1428: )
  2228  0001F0  5034               	movf	printf@width,w,c
  2229  0001F2  1035               	iorwf	printf@width+1,w,c
  2230  0001F4  B4D8               	btfsc	status,2,c
  2231  0001F6  D00C               	goto	l3691
  2232  0001F8                     l3687:
  2233                           
  2234                           ;doprnt.c: 1430: (putch(' ') );
  2235  0001F8  0E20               	movlw	32
  2236  0001FA  EC34  F00A         	call	_putch
  2237                           
  2238                           ;doprnt.c: 1431: while(--width);
  2239  0001FE  0634               	decf	printf@width,f,c
  2240  000200  A0D8               	btfss	status,0,c
  2241  000202  0635               	decf	printf@width+1,f,c
  2242  000204  5034               	movf	printf@width,w,c
  2243  000206  1035               	iorwf	printf@width+1,w,c
  2244  000208  B4D8               	btfsc	status,2,c
  2245  00020A  D002               	goto	l3691
  2246  00020C  D7F5               	goto	l3687
  2247  00020E  D000               	goto	l3691
  2248  000210                     l3691:
  2249                           
  2250                           ;doprnt.c: 1469: }
  2251                           ;doprnt.c: 1472: prec = c;
  2252  000210  5036               	movf	printf@c,w,c
  2253  000212  6E2B               	movwf	printf@prec,c
  2254  000214  6A2C               	clrf	printf@prec+1,c
  2255  000216  BE2B               	btfsc	printf@prec,7,c
  2256  000218  062C               	decf	printf@prec+1,f,c
  2257                           
  2258                           ;doprnt.c: 1474: while(prec--) {
  2259  00021A  D038               	goto	l3699
  2260  00021C                     l3693:
  2261                           
  2262                           ;doprnt.c: 1478: {
  2263                           ;doprnt.c: 1499: {
  2264                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2265  00021C  C02D  F011         	movff	printf@val,___lldiv@dividend
  2266  000220  C02E  F012         	movff	printf@val+1,___lldiv@dividend+1
  2267  000224  C02F  F013         	movff	printf@val+2,___lldiv@dividend+2
  2268  000228  C030  F014         	movff	printf@val+3,___lldiv@dividend+3
  2269  00022C  C02B  F026         	movff	printf@prec,??_printf
  2270  000230  C02C  F027         	movff	printf@prec+1,??_printf+1
  2271  000234  90D8               	bcf	status,0,c
  2272  000236  3626               	rlcf	??_printf,f,c
  2273  000238  3627               	rlcf	??_printf+1,f,c
  2274  00023A  90D8               	bcf	status,0,c
  2275  00023C  3626               	rlcf	??_printf,f,c
  2276  00023E  3627               	rlcf	??_printf+1,f,c
  2277  000240  0ECC               	movlw	low _hexpowers
  2278  000242  2426               	addwf	??_printf,w,c
  2279  000244  6EF6               	movwf	tblptrl,c
  2280  000246  0EFC               	movlw	high _hexpowers
  2281  000248  2027               	addwfc	??_printf+1,w,c
  2282  00024A  6EF7               	movwf	tblptrh,c
  2283  00024C                     	if	0	;There are less than 3 active tblptr bytes
  2284  00024C                     	endif
  2285  00024C  0009               	tblrd		*+
  2286  00024E  CFF5 F015          	movff	tablat,___lldiv@divisor
  2287  000252  0009               	tblrd		*+
  2288  000254  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2289  000258  0009               	tblrd		*+
  2290  00025A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2291  00025E  000A               	tblrd		*-
  2292  000260  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2293  000264  EC27  F007         	call	___lldiv	;wreg free
  2294  000268  5011               	movf	?___lldiv,w,c
  2295  00026A  0B0F               	andlw	15
  2296  00026C  6E2A               	movwf	printf@idx,c
  2297                           
  2298                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2299  00026E  502A               	movf	printf@idx,w,c
  2300  000270  0D01               	mullw	1
  2301  000272  0E16               	movlw	low STR_4
  2302  000274  24F3               	addwf	prodl,w,c
  2303  000276  6EF6               	movwf	tblptrl,c
  2304  000278  0EFD               	movlw	high STR_4
  2305  00027A  20F4               	addwfc	prodh,w,c
  2306  00027C  6EF7               	movwf	tblptrh,c
  2307  00027E                     	if	0	;There are less than 3 active tblptr bytes
  2308  00027E                     	endif
  2309  00027E  0008               	tblrd		*
  2310  000280  CFF5 F036          	movff	tablat,printf@c
  2311                           
  2312                           ;doprnt.c: 1508: }
  2313                           ;doprnt.c: 1523: }
  2314                           ;doprnt.c: 1524: (putch(c) );
  2315  000284  5036               	movf	printf@c,w,c
  2316  000286  EC34  F00A         	call	_putch
  2317  00028A  D000               	goto	l3699
  2318  00028C                     l3699:
  2319  00028C  062B               	decf	printf@prec,f,c
  2320  00028E  A0D8               	btfss	status,0,c
  2321  000290  062C               	decf	printf@prec+1,f,c
  2322  000292  282B               	incf	printf@prec,w,c
  2323  000294  E1C3               	bnz	l3693
  2324  000296  282C               	incf	printf@prec+1,w,c
  2325  000298  B4D8               	btfsc	status,2,c
  2326  00029A  D002               	goto	l3701
  2327  00029C  D7BF               	goto	l3693
  2328  00029E  D000               	goto	l3701
  2329  0002A0                     l3701:
  2330  0002A0  C01E  FFF6         	movff	printf@f,tblptrl
  2331  0002A4  C01F  FFF7         	movff	printf@f+1,tblptrh
  2332  0002A8  4A1E               	infsnz	printf@f,f,c
  2333  0002AA  2A1F               	incf	printf@f+1,f,c
  2334  0002AC                     	if	0	;tblptru may be non-zero
  2335  0002AC                     	endif
  2336  0002AC                     	if	0	;tblptru may be non-zero
  2337  0002AC                     	endif
  2338  0002AC  0008               	tblrd		*
  2339  0002AE  CFF5 F036          	movff	tablat,printf@c
  2340  0002B2  5036               	movf	printf@c,w,c
  2341  0002B4  B4D8               	btfsc	status,2,c
  2342  0002B6  D002               	goto	l429
  2343  0002B8  D6B6               	goto	l3619
  2344  0002BA  D000               	goto	l429
  2345  0002BC                     l429:
  2346  0002BC  0012               	return		;funcret
  2347  0002BE                     __end_of_printf:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           intcon	equ	0xFF2
  2356                           intcon2	equ	0xFF1
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           postdec1	equ	0xFE5
  2360                           fsr1l	equ	0xFE1
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           fsr2h	equ	0xFDA
  2364                           fsr2l	equ	0xFD9
  2365                           status	equ	0xFD8
  2366                           
  2367 ;; *************** function _putch *****************
  2368 ;; Defined at:
  2369 ;;		line 77 in file "Lab10p1.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  c               1    wreg     unsigned char 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  c               1   16[COMRAM] unsigned char 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;		None               void
  2376 ;; Registers used:
  2377 ;;		wreg
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;Total ram usage:        1 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    3
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_printf
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text2
  2398  001468                     __ptext2:
  2399                           	opt stack 0
  2400  001468                     _putch:
  2401                           	opt stack 26
  2402                           
  2403                           ;incstack = 0
  2404                           ;putch@c stored from wreg
  2405  001468  6E11               	movwf	putch@c,c
  2406                           
  2407                           ;Lab10p1.c: 79: while (!TRMT);
  2408  00146A  D000               	goto	l89
  2409  00146C                     l89:
  2410  00146C  A2AC               	btfss	4012,1,c	;volatile
  2411  00146E  D7FE               	goto	l89
  2412                           
  2413                           ;Lab10p1.c: 80: TXREG = c;
  2414  001470  C011  FFAD         	movff	putch@c,4013	;volatile
  2415  001474  0012               	return		;funcret
  2416  001476                     __end_of_putch:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           intcon	equ	0xFF2
  2425                           intcon2	equ	0xFF1
  2426                           postinc0	equ	0xFEE
  2427                           wreg	equ	0xFE8
  2428                           postdec1	equ	0xFE5
  2429                           fsr1l	equ	0xFE1
  2430                           postinc2	equ	0xFDE
  2431                           postdec2	equ	0xFDD
  2432                           fsr2h	equ	0xFDA
  2433                           fsr2l	equ	0xFD9
  2434                           status	equ	0xFD8
  2435                           
  2436 ;; *************** function _isdigit *****************
  2437 ;; Defined at:
  2438 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  c               1    wreg     unsigned char 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  c               1   18[COMRAM] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;		None               void
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;Total ram usage:        3 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    3
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_printf
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text3
  2467  0013BA                     __ptext3:
  2468                           	opt stack 0
  2469  0013BA                     _isdigit:
  2470                           	opt stack 26
  2471                           
  2472                           ;incstack = 0
  2473                           ;isdigit@c stored from wreg
  2474  0013BA  6E13               	movwf	isdigit@c,c
  2475  0013BC  0E00               	movlw	0
  2476  0013BE  6E12               	movwf	_isdigit$1597,c
  2477  0013C0  0E3A               	movlw	58
  2478  0013C2  6013               	cpfslt	isdigit@c,c
  2479  0013C4  D006               	goto	l3573
  2480  0013C6  0E2F               	movlw	47
  2481  0013C8  6413               	cpfsgt	isdigit@c,c
  2482  0013CA  D003               	goto	l3573
  2483  0013CC  0E01               	movlw	1
  2484  0013CE  6E12               	movwf	_isdigit$1597,c
  2485  0013D0  D000               	goto	l3573
  2486  0013D2                     l3573:
  2487  0013D2  C012  F011         	movff	_isdigit$1597,??_isdigit
  2488  0013D6  3011               	rrcf	??_isdigit,w,c
  2489  0013D8  D000               	goto	l896
  2490  0013DA                     l896:
  2491  0013DA  0012               	return		;funcret
  2492  0013DC                     __end_of_isdigit:
  2493                           	opt stack 0
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           intcon	equ	0xFF2
  2501                           intcon2	equ	0xFF1
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1l	equ	0xFE1
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function ___lldiv *****************
  2513 ;; Defined at:
  2514 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  dividend        4   16[COMRAM] unsigned long 
  2517 ;;  divisor         4   20[COMRAM] unsigned long 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  quotient        4   24[COMRAM] unsigned long 
  2520 ;;  counter         1   28[COMRAM] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  4   16[COMRAM] unsigned long 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2530 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;Total ram usage:       13 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    3
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_printf
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text4
  2545  000E4E                     __ptext4:
  2546                           	opt stack 0
  2547  000E4E                     ___lldiv:
  2548                           	opt stack 26
  2549                           
  2550                           ;incstack = 0
  2551  000E4E  0E00               	movlw	0
  2552  000E50  6E19               	movwf	___lldiv@quotient,c
  2553  000E52  0E00               	movlw	0
  2554  000E54  6E1A               	movwf	___lldiv@quotient+1,c
  2555  000E56  0E00               	movlw	0
  2556  000E58  6E1B               	movwf	___lldiv@quotient+2,c
  2557  000E5A  0E00               	movlw	0
  2558  000E5C  6E1C               	movwf	___lldiv@quotient+3,c
  2559  000E5E  5015               	movf	___lldiv@divisor,w,c
  2560  000E60  1016               	iorwf	___lldiv@divisor+1,w,c
  2561  000E62  1017               	iorwf	___lldiv@divisor+2,w,c
  2562  000E64  1018               	iorwf	___lldiv@divisor+3,w,c
  2563  000E66  B4D8               	btfsc	status,2,c
  2564  000E68  D02F               	goto	l925
  2565  000E6A  0E01               	movlw	1
  2566  000E6C  6E1D               	movwf	___lldiv@counter,c
  2567  000E6E  D007               	goto	l3585
  2568  000E70                     l3583:
  2569  000E70  90D8               	bcf	status,0,c
  2570  000E72  3615               	rlcf	___lldiv@divisor,f,c
  2571  000E74  3616               	rlcf	___lldiv@divisor+1,f,c
  2572  000E76  3617               	rlcf	___lldiv@divisor+2,f,c
  2573  000E78  3618               	rlcf	___lldiv@divisor+3,f,c
  2574  000E7A  2A1D               	incf	___lldiv@counter,f,c
  2575  000E7C  D000               	goto	l3585
  2576  000E7E                     l3585:
  2577  000E7E  BE18               	btfsc	___lldiv@divisor+3,7,c
  2578  000E80  D002               	goto	l3587
  2579  000E82  D7F6               	goto	l3583
  2580  000E84  D000               	goto	l3587
  2581  000E86                     l3587:
  2582  000E86  90D8               	bcf	status,0,c
  2583  000E88  3619               	rlcf	___lldiv@quotient,f,c
  2584  000E8A  361A               	rlcf	___lldiv@quotient+1,f,c
  2585  000E8C  361B               	rlcf	___lldiv@quotient+2,f,c
  2586  000E8E  361C               	rlcf	___lldiv@quotient+3,f,c
  2587  000E90  5015               	movf	___lldiv@divisor,w,c
  2588  000E92  5C11               	subwf	___lldiv@dividend,w,c
  2589  000E94  5016               	movf	___lldiv@divisor+1,w,c
  2590  000E96  5812               	subwfb	___lldiv@dividend+1,w,c
  2591  000E98  5017               	movf	___lldiv@divisor+2,w,c
  2592  000E9A  5813               	subwfb	___lldiv@dividend+2,w,c
  2593  000E9C  5018               	movf	___lldiv@divisor+3,w,c
  2594  000E9E  5814               	subwfb	___lldiv@dividend+3,w,c
  2595  000EA0  A0D8               	btfss	status,0,c
  2596  000EA2  D00A               	goto	l3595
  2597  000EA4  5015               	movf	___lldiv@divisor,w,c
  2598  000EA6  5E11               	subwf	___lldiv@dividend,f,c
  2599  000EA8  5016               	movf	___lldiv@divisor+1,w,c
  2600  000EAA  5A12               	subwfb	___lldiv@dividend+1,f,c
  2601  000EAC  5017               	movf	___lldiv@divisor+2,w,c
  2602  000EAE  5A13               	subwfb	___lldiv@dividend+2,f,c
  2603  000EB0  5018               	movf	___lldiv@divisor+3,w,c
  2604  000EB2  5A14               	subwfb	___lldiv@dividend+3,f,c
  2605  000EB4  8019               	bsf	___lldiv@quotient,0,c
  2606  000EB6  D000               	goto	l3595
  2607  000EB8                     l3595:
  2608  000EB8  90D8               	bcf	status,0,c
  2609  000EBA  3218               	rrcf	___lldiv@divisor+3,f,c
  2610  000EBC  3217               	rrcf	___lldiv@divisor+2,f,c
  2611  000EBE  3216               	rrcf	___lldiv@divisor+1,f,c
  2612  000EC0  3215               	rrcf	___lldiv@divisor,f,c
  2613  000EC2  2E1D               	decfsz	___lldiv@counter,f,c
  2614  000EC4  D7E0               	goto	l3587
  2615  000EC6  D000               	goto	l925
  2616  000EC8                     l925:
  2617  000EC8  C019  F011         	movff	___lldiv@quotient,?___lldiv
  2618  000ECC  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  2619  000ED0  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  2620  000ED4  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  2621  000ED8  0012               	return		;funcret
  2622  000EDA                     __end_of___lldiv:
  2623                           	opt stack 0
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           intcon	equ	0xFF2
  2631                           intcon2	equ	0xFF1
  2632                           postinc0	equ	0xFEE
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           fsr1l	equ	0xFE1
  2636                           postinc2	equ	0xFDE
  2637                           postdec2	equ	0xFDD
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _init_UART *****************
  2643 ;; Defined at:
  2644 ;;		line 83 in file "Lab10p1.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;		None               void
  2651 ;; Registers used:
  2652 ;;		wreg, status,2, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;Total ram usage:        0 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    4
  2665 ;; This function calls:
  2666 ;;		_OpenUSART
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text5
  2673  00140E                     __ptext5:
  2674                           	opt stack 0
  2675  00140E                     _init_UART:
  2676                           	opt stack 26
  2677                           
  2678                           ;Lab10p1.c: 85: OpenUSART (0b01111111 & 0b10111111 &
  2679                           ;Lab10p1.c: 86: 0b11111110 & 0b11111101 & 0b11111111 &
  2680                           ;Lab10p1.c: 87: 0b11111111, 25);
  2681                           
  2682                           ;incstack = 0
  2683  00140E  0E00               	movlw	0
  2684  001410  6E12               	movwf	OpenUSART@spbrg+1,c
  2685  001412  0E19               	movlw	25
  2686  001414  6E11               	movwf	OpenUSART@spbrg,c
  2687  001416  0E3C               	movlw	60
  2688  001418  EC30  F008         	call	_OpenUSART
  2689                           
  2690                           ;Lab10p1.c: 88: OSCCON = 0x60;
  2691  00141C  0E60               	movlw	96
  2692  00141E  6ED3               	movwf	4051,c	;volatile
  2693  001420  0012               	return		;funcret
  2694  001422                     __end_of_init_UART:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           prodh	equ	0xFF4
  2701                           prodl	equ	0xFF3
  2702                           intcon	equ	0xFF2
  2703                           intcon2	equ	0xFF1
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1l	equ	0xFE1
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _OpenUSART *****************
  2715 ;; Defined at:
  2716 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  config          1    wreg     unsigned char 
  2719 ;;  spbrg           2   16[COMRAM] unsigned int 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  config          1   18[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;		None               void
  2724 ;; Registers used:
  2725 ;;		wreg, status,2
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        3 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    3
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_init_UART
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text6
  2746  001060                     __ptext6:
  2747                           	opt stack 0
  2748  001060                     _OpenUSART:
  2749                           	opt stack 26
  2750                           
  2751                           ;incstack = 0
  2752                           ;OpenUSART@config stored from wreg
  2753  001060  6E13               	movwf	OpenUSART@config,c
  2754  001062  0E00               	movlw	0
  2755  001064  6EAC               	movwf	4012,c	;volatile
  2756  001066  0E00               	movlw	0
  2757  001068  6EAB               	movwf	4011,c	;volatile
  2758  00106A  A013               	btfss	OpenUSART@config,0,c
  2759  00106C  D002               	goto	l3423
  2760  00106E  88AC               	bsf	4012,4,c	;volatile
  2761  001070  D000               	goto	l3423
  2762  001072                     l3423:
  2763  001072  A213               	btfss	OpenUSART@config,1,c
  2764  001074  D003               	goto	l3427
  2765  001076  8CAC               	bsf	4012,6,c	;volatile
  2766  001078  8CAB               	bsf	4011,6,c	;volatile
  2767  00107A  D000               	goto	l3427
  2768  00107C                     l3427:
  2769  00107C  A413               	btfss	OpenUSART@config,2,c
  2770  00107E  D002               	goto	l3431
  2771  001080  8EAC               	bsf	4012,7,c	;volatile
  2772  001082  D000               	goto	l3431
  2773  001084                     l3431:
  2774  001084  A613               	btfss	OpenUSART@config,3,c
  2775  001086  D002               	goto	l453
  2776  001088  88AB               	bsf	4011,4,c	;volatile
  2777  00108A  D002               	goto	l3435
  2778  00108C                     l453:
  2779  00108C  8AAB               	bsf	4011,5,c	;volatile
  2780  00108E  D000               	goto	l3435
  2781  001090                     l3435:
  2782  001090  B813               	btfsc	OpenUSART@config,4,c
  2783  001092  84AC               	bsf	4012,2,c	;volatile
  2784  001094  989E               	bcf	3998,4,c	;volatile
  2785  001096  AA13               	btfss	OpenUSART@config,5,c
  2786  001098  D002               	goto	l3443
  2787  00109A  86AB               	bsf	4011,3,c	;volatile
  2788  00109C  D000               	goto	l3443
  2789  00109E                     l3443:
  2790  00109E  AC13               	btfss	OpenUSART@config,6,c
  2791  0010A0  D002               	goto	l457
  2792  0010A2  8A9D               	bsf	3997,5,c	;volatile
  2793  0010A4  D001               	goto	l458
  2794  0010A6                     l457:
  2795  0010A6  9A9D               	bcf	3997,5,c	;volatile
  2796  0010A8                     l458:
  2797  0010A8  9A9E               	bcf	3998,5,c	;volatile
  2798  0010AA  AE13               	btfss	OpenUSART@config,7,c
  2799  0010AC  D002               	goto	l459
  2800  0010AE  889D               	bsf	3997,4,c	;volatile
  2801  0010B0  D001               	goto	l460
  2802  0010B2                     l459:
  2803  0010B2  989D               	bcf	3997,4,c	;volatile
  2804  0010B4                     l460:
  2805  0010B4  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2806  0010B8  5012               	movf	OpenUSART@spbrg+1,w,c
  2807  0010BA  6EB0               	movwf	4016,c	;volatile
  2808  0010BC  8AAC               	bsf	4012,5,c	;volatile
  2809  0010BE  8EAB               	bsf	4011,7,c	;volatile
  2810  0010C0  9C94               	bcf	3988,6,c	;volatile
  2811  0010C2  8E94               	bsf	3988,7,c	;volatile
  2812  0010C4  B8AC               	btfsc	4012,4,c	;volatile
  2813  0010C6  BEAC               	btfsc	4012,7,c	;volatile
  2814  0010C8  D002               	goto	l462
  2815  0010CA  8C94               	bsf	3988,6,c	;volatile
  2816  0010CC  D000               	goto	l462
  2817  0010CE                     l462:
  2818  0010CE  0012               	return		;funcret
  2819  0010D0                     __end_of_OpenUSART:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           prodh	equ	0xFF4
  2826                           prodl	equ	0xFF3
  2827                           intcon	equ	0xFF2
  2828                           intcon2	equ	0xFF1
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1l	equ	0xFE1
  2833                           postinc2	equ	0xFDE
  2834                           postdec2	equ	0xFDD
  2835                           fsr2h	equ	0xFDA
  2836                           fsr2l	equ	0xFD9
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _fillCircle *****************
  2840 ;; Defined at:
  2841 ;;		line 611 in file "ST7735_TFT.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  x0              2   58[COMRAM] int 
  2844 ;;  y0              2   60[COMRAM] int 
  2845 ;;  r               2   62[COMRAM] int 
  2846 ;;  color           2   64[COMRAM] unsigned int 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;		None
  2849 ;; Return value:  Size  Location     Type
  2850 ;;		None               void
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2858 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;Total ram usage:        8 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    8
  2865 ;; This function calls:
  2866 ;;		_drawFastVLine
  2867 ;;		_fillCircleHelper
  2868 ;; This function is called by:
  2869 ;;		_main
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text7
  2874  001124                     __ptext7:
  2875                           	opt stack 0
  2876  001124                     _fillCircle:
  2877                           	opt stack 22
  2878                           
  2879                           ;ST7735_TFT.c: 613: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  2880                           
  2881                           ;incstack = 0
  2882  001124  503F               	movf	fillCircle@r,w,c
  2883  001126  0800               	sublw	0
  2884  001128  243D               	addwf	fillCircle@y0,w,c
  2885  00112A  6E18               	movwf	drawFastVLine@y,c
  2886  00112C  80D8               	bsf	status,0,c
  2887  00112E  343F               	rlcf	fillCircle@r,w,c
  2888  001130  6E19               	movwf	drawFastVLine@h,c
  2889  001132  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  2890  001136  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  2891  00113A  503B               	movf	fillCircle@x0,w,c
  2892  00113C  EC6D  F007         	call	_drawFastVLine
  2893                           
  2894                           ;ST7735_TFT.c: 614: fillCircleHelper(x0, y0, r, 3, 0, color);
  2895  001140  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  2896  001144  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  2897  001148  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  2898  00114C  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  2899  001150  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  2900  001154  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  2901  001158  0E00               	movlw	0
  2902  00115A  6E2A               	movwf	fillCircleHelper@cornername+1,c
  2903  00115C  0E03               	movlw	3
  2904  00115E  6E29               	movwf	fillCircleHelper@cornername,c
  2905  001160  0E00               	movlw	0
  2906  001162  6E2C               	movwf	fillCircleHelper@delta+1,c
  2907  001164  0E00               	movlw	0
  2908  001166  6E2B               	movwf	fillCircleHelper@delta,c
  2909  001168  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  2910  00116C  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  2911  001170  EC50  F004         	call	_fillCircleHelper	;wreg free
  2912  001174  0012               	return		;funcret
  2913  001176                     __end_of_fillCircle:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           intcon2	equ	0xFF1
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           postinc2	equ	0xFDE
  2928                           postdec2	equ	0xFDD
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _fillCircleHelper *****************
  2934 ;; Defined at:
  2935 ;;		line 586 in file "ST7735_TFT.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  x0              2   34[COMRAM] int 
  2938 ;;  y0              2   36[COMRAM] int 
  2939 ;;  r               2   38[COMRAM] int 
  2940 ;;  cornername      2   40[COMRAM] unsigned int 
  2941 ;;  delta           2   42[COMRAM] int 
  2942 ;;  color           2   44[COMRAM] unsigned int 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  y               2   56[COMRAM] int 
  2945 ;;  x               2   54[COMRAM] int 
  2946 ;;  f               2   52[COMRAM] int 
  2947 ;;  ddF_y           2   50[COMRAM] int 
  2948 ;;  ddF_x           2   48[COMRAM] int 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;		None               void
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2958 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;Total ram usage:       24 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    7
  2965 ;; This function calls:
  2966 ;;		_drawFastVLine
  2967 ;; This function is called by:
  2968 ;;		_fillCircle
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           	psect	text8
  2973  0008A0                     __ptext8:
  2974                           	opt stack 0
  2975  0008A0                     _fillCircleHelper:
  2976                           	opt stack 22
  2977                           
  2978                           ;ST7735_TFT.c: 588: signed int f, ddF_x, ddF_y, x, y;
  2979                           ;ST7735_TFT.c: 589: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2980                           
  2981                           ;incstack = 0
  2982  0008A0  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2983  0008A4  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2984  0008A8  1E2F               	comf	??_fillCircleHelper,f,c
  2985  0008AA  1E30               	comf	??_fillCircleHelper+1,f,c
  2986  0008AC  4A2F               	infsnz	??_fillCircleHelper,f,c
  2987  0008AE  2A30               	incf	??_fillCircleHelper+1,f,c
  2988  0008B0  0E01               	movlw	1
  2989  0008B2  242F               	addwf	??_fillCircleHelper,w,c
  2990  0008B4  6E35               	movwf	fillCircleHelper@f,c
  2991  0008B6  0E00               	movlw	0
  2992  0008B8  2030               	addwfc	??_fillCircleHelper+1,w,c
  2993  0008BA  6E36               	movwf	fillCircleHelper@f+1,c
  2994  0008BC  0E00               	movlw	0
  2995  0008BE  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  2996  0008C0  0E01               	movlw	1
  2997  0008C2  6E31               	movwf	fillCircleHelper@ddF_x,c
  2998  0008C4  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2999  0008C8  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3000  0008CC  90D8               	bcf	status,0,c
  3001  0008CE  362F               	rlcf	??_fillCircleHelper,f,c
  3002  0008D0  3630               	rlcf	??_fillCircleHelper+1,f,c
  3003  0008D2  1E2F               	comf	??_fillCircleHelper,f,c
  3004  0008D4  1E30               	comf	??_fillCircleHelper+1,f,c
  3005  0008D6  4A2F               	infsnz	??_fillCircleHelper,f,c
  3006  0008D8  2A30               	incf	??_fillCircleHelper+1,f,c
  3007  0008DA  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3008  0008DE  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3009  0008E2  0E00               	movlw	0
  3010  0008E4  6E38               	movwf	fillCircleHelper@x+1,c
  3011  0008E6  0E00               	movlw	0
  3012  0008E8  6E37               	movwf	fillCircleHelper@x,c
  3013  0008EA  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3014  0008EE  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3015                           
  3016                           ;ST7735_TFT.c: 590: while (x<y) {
  3017  0008F2  D067               	goto	l3563
  3018  0008F4                     l3543:
  3019                           
  3020                           ;ST7735_TFT.c: 591: if (f >= 0) {
  3021  0008F4  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3022  0008F6  D00B               	goto	l345
  3023                           
  3024                           ;ST7735_TFT.c: 592: y--;
  3025  0008F8  0639               	decf	fillCircleHelper@y,f,c
  3026  0008FA  A0D8               	btfss	status,0,c
  3027  0008FC  063A               	decf	fillCircleHelper@y+1,f,c
  3028                           
  3029                           ;ST7735_TFT.c: 593: ddF_y += 2;
  3030  0008FE  0E02               	movlw	2
  3031  000900  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3032  000902  0E00               	movlw	0
  3033  000904  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3034                           
  3035                           ;ST7735_TFT.c: 594: f += ddF_y;
  3036  000906  5033               	movf	fillCircleHelper@ddF_y,w,c
  3037  000908  2635               	addwf	fillCircleHelper@f,f,c
  3038  00090A  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3039  00090C  2236               	addwfc	fillCircleHelper@f+1,f,c
  3040  00090E                     l345:
  3041                           
  3042                           ;ST7735_TFT.c: 595: }
  3043                           ;ST7735_TFT.c: 596: x++;
  3044  00090E  4A37               	infsnz	fillCircleHelper@x,f,c
  3045  000910  2A38               	incf	fillCircleHelper@x+1,f,c
  3046                           
  3047                           ;ST7735_TFT.c: 597: ddF_x += 2;
  3048  000912  0E02               	movlw	2
  3049  000914  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3050  000916  0E00               	movlw	0
  3051  000918  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3052                           
  3053                           ;ST7735_TFT.c: 598: f += ddF_x;
  3054  00091A  5031               	movf	fillCircleHelper@ddF_x,w,c
  3055  00091C  2635               	addwf	fillCircleHelper@f,f,c
  3056  00091E  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3057  000920  2236               	addwfc	fillCircleHelper@f+1,f,c
  3058                           
  3059                           ;ST7735_TFT.c: 600: if (cornername & 0x1) {
  3060  000922  A029               	btfss	fillCircleHelper@cornername,0,c
  3061  000924  D025               	goto	l3559
  3062                           
  3063                           ;ST7735_TFT.c: 601: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3064  000926  5039               	movf	fillCircleHelper@y,w,c
  3065  000928  0800               	sublw	0
  3066  00092A  2425               	addwf	fillCircleHelper@y0,w,c
  3067  00092C  6E18               	movwf	drawFastVLine@y,c
  3068  00092E  5039               	movf	fillCircleHelper@y,w,c
  3069  000930  2439               	addwf	fillCircleHelper@y,w,c
  3070  000932  242B               	addwf	fillCircleHelper@delta,w,c
  3071  000934  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3072  000936  282F               	incf	??_fillCircleHelper,w,c
  3073  000938  6E19               	movwf	drawFastVLine@h,c
  3074  00093A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3075  00093E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3076  000942  5023               	movf	fillCircleHelper@x0,w,c
  3077  000944  2437               	addwf	fillCircleHelper@x,w,c
  3078  000946  EC6D  F007         	call	_drawFastVLine
  3079                           
  3080                           ;ST7735_TFT.c: 602: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3081  00094A  5037               	movf	fillCircleHelper@x,w,c
  3082  00094C  0800               	sublw	0
  3083  00094E  2425               	addwf	fillCircleHelper@y0,w,c
  3084  000950  6E18               	movwf	drawFastVLine@y,c
  3085  000952  5037               	movf	fillCircleHelper@x,w,c
  3086  000954  2437               	addwf	fillCircleHelper@x,w,c
  3087  000956  242B               	addwf	fillCircleHelper@delta,w,c
  3088  000958  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3089  00095A  282F               	incf	??_fillCircleHelper,w,c
  3090  00095C  6E19               	movwf	drawFastVLine@h,c
  3091  00095E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3092  000962  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3093  000966  5023               	movf	fillCircleHelper@x0,w,c
  3094  000968  2439               	addwf	fillCircleHelper@y,w,c
  3095  00096A  EC6D  F007         	call	_drawFastVLine
  3096  00096E  D000               	goto	l3559
  3097  000970                     l3559:
  3098                           
  3099                           ;ST7735_TFT.c: 603: }
  3100                           ;ST7735_TFT.c: 604: if (cornername & 0x2) {
  3101  000970  A229               	btfss	fillCircleHelper@cornername,1,c
  3102  000972  D027               	goto	l3563
  3103                           
  3104                           ;ST7735_TFT.c: 605: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3105  000974  5039               	movf	fillCircleHelper@y,w,c
  3106  000976  0800               	sublw	0
  3107  000978  2425               	addwf	fillCircleHelper@y0,w,c
  3108  00097A  6E18               	movwf	drawFastVLine@y,c
  3109  00097C  5039               	movf	fillCircleHelper@y,w,c
  3110  00097E  2439               	addwf	fillCircleHelper@y,w,c
  3111  000980  242B               	addwf	fillCircleHelper@delta,w,c
  3112  000982  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3113  000984  282F               	incf	??_fillCircleHelper,w,c
  3114  000986  6E19               	movwf	drawFastVLine@h,c
  3115  000988  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3116  00098C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3117  000990  5037               	movf	fillCircleHelper@x,w,c
  3118  000992  0800               	sublw	0
  3119  000994  2423               	addwf	fillCircleHelper@x0,w,c
  3120  000996  EC6D  F007         	call	_drawFastVLine
  3121                           
  3122                           ;ST7735_TFT.c: 606: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3123  00099A  5037               	movf	fillCircleHelper@x,w,c
  3124  00099C  0800               	sublw	0
  3125  00099E  2425               	addwf	fillCircleHelper@y0,w,c
  3126  0009A0  6E18               	movwf	drawFastVLine@y,c
  3127  0009A2  5037               	movf	fillCircleHelper@x,w,c
  3128  0009A4  2437               	addwf	fillCircleHelper@x,w,c
  3129  0009A6  242B               	addwf	fillCircleHelper@delta,w,c
  3130  0009A8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3131  0009AA  282F               	incf	??_fillCircleHelper,w,c
  3132  0009AC  6E19               	movwf	drawFastVLine@h,c
  3133  0009AE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3134  0009B2  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3135  0009B6  5039               	movf	fillCircleHelper@y,w,c
  3136  0009B8  0800               	sublw	0
  3137  0009BA  2423               	addwf	fillCircleHelper@x0,w,c
  3138  0009BC  EC6D  F007         	call	_drawFastVLine
  3139  0009C0  D000               	goto	l3563
  3140  0009C2                     l3563:
  3141  0009C2  5039               	movf	fillCircleHelper@y,w,c
  3142  0009C4  5C37               	subwf	fillCircleHelper@x,w,c
  3143  0009C6  5038               	movf	fillCircleHelper@x+1,w,c
  3144  0009C8  0A80               	xorlw	128
  3145  0009CA  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3146  0009CC  503A               	movf	fillCircleHelper@y+1,w,c
  3147  0009CE  0A80               	xorlw	128
  3148  0009D0  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3149  0009D2  A0D8               	btfss	status,0,c
  3150  0009D4  D78F               	goto	l3543
  3151  0009D6  0012               	return		;funcret
  3152  0009D8                     __end_of_fillCircleHelper:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           prodh	equ	0xFF4
  3159                           prodl	equ	0xFF3
  3160                           intcon	equ	0xFF2
  3161                           intcon2	equ	0xFF1
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           postdec1	equ	0xFE5
  3165                           fsr1l	equ	0xFE1
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8
  3171                           
  3172 ;; *************** function _drawCircle *****************
  3173 ;; Defined at:
  3174 ;;		line 526 in file "ST7735_TFT.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  x0              2   27[COMRAM] int 
  3177 ;;  y0              2   29[COMRAM] int 
  3178 ;;  r               2   31[COMRAM] int 
  3179 ;;  color           2   33[COMRAM] unsigned int 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  y               2   45[COMRAM] int 
  3182 ;;  x               2   43[COMRAM] int 
  3183 ;;  f               2   41[COMRAM] int 
  3184 ;;  ddF_y           2   39[COMRAM] int 
  3185 ;;  ddF_x           2   37[COMRAM] int 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:       20 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    7
  3202 ;; This function calls:
  3203 ;;		_drawPixel
  3204 ;; This function is called by:
  3205 ;;		_main
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text9
  3210  0002BE                     __ptext9:
  3211                           	opt stack 0
  3212  0002BE                     _drawCircle:
  3213                           	opt stack 23
  3214                           
  3215                           ;ST7735_TFT.c: 528: signed int f, ddF_x, ddF_y, x, y;
  3216                           ;ST7735_TFT.c: 529: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3217                           
  3218                           ;incstack = 0
  3219  0002BE  C020  F024         	movff	drawCircle@r,??_drawCircle
  3220  0002C2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3221  0002C6  1E24               	comf	??_drawCircle,f,c
  3222  0002C8  1E25               	comf	??_drawCircle+1,f,c
  3223  0002CA  4A24               	infsnz	??_drawCircle,f,c
  3224  0002CC  2A25               	incf	??_drawCircle+1,f,c
  3225  0002CE  0E01               	movlw	1
  3226  0002D0  2424               	addwf	??_drawCircle,w,c
  3227  0002D2  6E2A               	movwf	drawCircle@f,c
  3228  0002D4  0E00               	movlw	0
  3229  0002D6  2025               	addwfc	??_drawCircle+1,w,c
  3230  0002D8  6E2B               	movwf	drawCircle@f+1,c
  3231  0002DA  0E00               	movlw	0
  3232  0002DC  6E27               	movwf	drawCircle@ddF_x+1,c
  3233  0002DE  0E01               	movlw	1
  3234  0002E0  6E26               	movwf	drawCircle@ddF_x,c
  3235  0002E2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3236  0002E6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3237  0002EA  90D8               	bcf	status,0,c
  3238  0002EC  3624               	rlcf	??_drawCircle,f,c
  3239  0002EE  3625               	rlcf	??_drawCircle+1,f,c
  3240  0002F0  1E24               	comf	??_drawCircle,f,c
  3241  0002F2  1E25               	comf	??_drawCircle+1,f,c
  3242  0002F4  4A24               	infsnz	??_drawCircle,f,c
  3243  0002F6  2A25               	incf	??_drawCircle+1,f,c
  3244  0002F8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3245  0002FC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3246  000300  0E00               	movlw	0
  3247  000302  6E2D               	movwf	drawCircle@x+1,c
  3248  000304  0E00               	movlw	0
  3249  000306  6E2C               	movwf	drawCircle@x,c
  3250  000308  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3251  00030C  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3252                           
  3253                           ;ST7735_TFT.c: 530: drawPixel(x0 , y0 + r, color);
  3254  000310  501E               	movf	drawCircle@y0,w,c
  3255  000312  2420               	addwf	drawCircle@r,w,c
  3256  000314  6E18               	movwf	drawPixel@y,c
  3257  000316  C022  F019         	movff	drawCircle@color,drawPixel@color
  3258  00031A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3259  00031E  501C               	movf	drawCircle@x0,w,c
  3260  000320  EC87  F009         	call	_drawPixel
  3261                           
  3262                           ;ST7735_TFT.c: 531: drawPixel(x0 , y0 - r, color);
  3263  000324  5020               	movf	drawCircle@r,w,c
  3264  000326  0800               	sublw	0
  3265  000328  241E               	addwf	drawCircle@y0,w,c
  3266  00032A  6E18               	movwf	drawPixel@y,c
  3267  00032C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3268  000330  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3269  000334  501C               	movf	drawCircle@x0,w,c
  3270  000336  EC87  F009         	call	_drawPixel
  3271                           
  3272                           ;ST7735_TFT.c: 532: drawPixel(x0+r, y0 , color);
  3273  00033A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3274  00033E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3275  000342  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3276  000346  501C               	movf	drawCircle@x0,w,c
  3277  000348  2420               	addwf	drawCircle@r,w,c
  3278  00034A  EC87  F009         	call	_drawPixel
  3279                           
  3280                           ;ST7735_TFT.c: 533: drawPixel(x0-r, y0 , color);
  3281  00034E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3282  000352  C022  F019         	movff	drawCircle@color,drawPixel@color
  3283  000356  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3284  00035A  5020               	movf	drawCircle@r,w,c
  3285  00035C  0800               	sublw	0
  3286  00035E  241C               	addwf	drawCircle@x0,w,c
  3287  000360  EC87  F009         	call	_drawPixel
  3288                           
  3289                           ;ST7735_TFT.c: 534: while (x < y) {
  3290  000364  D078               	goto	l3751
  3291  000366                     l3723:
  3292                           
  3293                           ;ST7735_TFT.c: 535: if (f >= 0) {
  3294  000366  BE2B               	btfsc	drawCircle@f+1,7,c
  3295  000368  D00B               	goto	l327
  3296                           
  3297                           ;ST7735_TFT.c: 536: y--;
  3298  00036A  062E               	decf	drawCircle@y,f,c
  3299  00036C  A0D8               	btfss	status,0,c
  3300  00036E  062F               	decf	drawCircle@y+1,f,c
  3301                           
  3302                           ;ST7735_TFT.c: 537: ddF_y += 2;
  3303  000370  0E02               	movlw	2
  3304  000372  2628               	addwf	drawCircle@ddF_y,f,c
  3305  000374  0E00               	movlw	0
  3306  000376  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3307                           
  3308                           ;ST7735_TFT.c: 538: f += ddF_y;
  3309  000378  5028               	movf	drawCircle@ddF_y,w,c
  3310  00037A  262A               	addwf	drawCircle@f,f,c
  3311  00037C  5029               	movf	drawCircle@ddF_y+1,w,c
  3312  00037E  222B               	addwfc	drawCircle@f+1,f,c
  3313  000380                     l327:
  3314                           
  3315                           ;ST7735_TFT.c: 539: }
  3316                           ;ST7735_TFT.c: 540: x++;
  3317  000380  4A2C               	infsnz	drawCircle@x,f,c
  3318  000382  2A2D               	incf	drawCircle@x+1,f,c
  3319                           
  3320                           ;ST7735_TFT.c: 541: ddF_x += 2;
  3321  000384  0E02               	movlw	2
  3322  000386  2626               	addwf	drawCircle@ddF_x,f,c
  3323  000388  0E00               	movlw	0
  3324  00038A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3325                           
  3326                           ;ST7735_TFT.c: 542: f += ddF_x;
  3327  00038C  5026               	movf	drawCircle@ddF_x,w,c
  3328  00038E  262A               	addwf	drawCircle@f,f,c
  3329  000390  5027               	movf	drawCircle@ddF_x+1,w,c
  3330  000392  222B               	addwfc	drawCircle@f+1,f,c
  3331                           
  3332                           ;ST7735_TFT.c: 543: drawPixel(x0 + x, y0 + y, color);
  3333  000394  501E               	movf	drawCircle@y0,w,c
  3334  000396  242E               	addwf	drawCircle@y,w,c
  3335  000398  6E18               	movwf	drawPixel@y,c
  3336  00039A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3337  00039E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3338  0003A2  501C               	movf	drawCircle@x0,w,c
  3339  0003A4  242C               	addwf	drawCircle@x,w,c
  3340  0003A6  EC87  F009         	call	_drawPixel
  3341                           
  3342                           ;ST7735_TFT.c: 544: drawPixel(x0 - x, y0 + y, color);
  3343  0003AA  501E               	movf	drawCircle@y0,w,c
  3344  0003AC  242E               	addwf	drawCircle@y,w,c
  3345  0003AE  6E18               	movwf	drawPixel@y,c
  3346  0003B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3347  0003B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3348  0003B8  502C               	movf	drawCircle@x,w,c
  3349  0003BA  0800               	sublw	0
  3350  0003BC  241C               	addwf	drawCircle@x0,w,c
  3351  0003BE  EC87  F009         	call	_drawPixel
  3352                           
  3353                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 - y, color);
  3354  0003C2  502E               	movf	drawCircle@y,w,c
  3355  0003C4  0800               	sublw	0
  3356  0003C6  241E               	addwf	drawCircle@y0,w,c
  3357  0003C8  6E18               	movwf	drawPixel@y,c
  3358  0003CA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3359  0003CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3360  0003D2  501C               	movf	drawCircle@x0,w,c
  3361  0003D4  242C               	addwf	drawCircle@x,w,c
  3362  0003D6  EC87  F009         	call	_drawPixel
  3363                           
  3364                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 - y, color);
  3365  0003DA  502E               	movf	drawCircle@y,w,c
  3366  0003DC  0800               	sublw	0
  3367  0003DE  241E               	addwf	drawCircle@y0,w,c
  3368  0003E0  6E18               	movwf	drawPixel@y,c
  3369  0003E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3370  0003E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3371  0003EA  502C               	movf	drawCircle@x,w,c
  3372  0003EC  0800               	sublw	0
  3373  0003EE  241C               	addwf	drawCircle@x0,w,c
  3374  0003F0  EC87  F009         	call	_drawPixel
  3375                           
  3376                           ;ST7735_TFT.c: 547: drawPixel(x0 + y, y0 + x, color);
  3377  0003F4  501E               	movf	drawCircle@y0,w,c
  3378  0003F6  242C               	addwf	drawCircle@x,w,c
  3379  0003F8  6E18               	movwf	drawPixel@y,c
  3380  0003FA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3381  0003FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3382  000402  501C               	movf	drawCircle@x0,w,c
  3383  000404  242E               	addwf	drawCircle@y,w,c
  3384  000406  EC87  F009         	call	_drawPixel
  3385                           
  3386                           ;ST7735_TFT.c: 548: drawPixel(x0 - y, y0 + x, color);
  3387  00040A  501E               	movf	drawCircle@y0,w,c
  3388  00040C  242C               	addwf	drawCircle@x,w,c
  3389  00040E  6E18               	movwf	drawPixel@y,c
  3390  000410  C022  F019         	movff	drawCircle@color,drawPixel@color
  3391  000414  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3392  000418  502E               	movf	drawCircle@y,w,c
  3393  00041A  0800               	sublw	0
  3394  00041C  241C               	addwf	drawCircle@x0,w,c
  3395  00041E  EC87  F009         	call	_drawPixel
  3396                           
  3397                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 - x, color);
  3398  000422  502C               	movf	drawCircle@x,w,c
  3399  000424  0800               	sublw	0
  3400  000426  241E               	addwf	drawCircle@y0,w,c
  3401  000428  6E18               	movwf	drawPixel@y,c
  3402  00042A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3403  00042E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3404  000432  501C               	movf	drawCircle@x0,w,c
  3405  000434  242E               	addwf	drawCircle@y,w,c
  3406  000436  EC87  F009         	call	_drawPixel
  3407                           
  3408                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 - x, color);
  3409  00043A  502C               	movf	drawCircle@x,w,c
  3410  00043C  0800               	sublw	0
  3411  00043E  241E               	addwf	drawCircle@y0,w,c
  3412  000440  6E18               	movwf	drawPixel@y,c
  3413  000442  C022  F019         	movff	drawCircle@color,drawPixel@color
  3414  000446  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3415  00044A  502E               	movf	drawCircle@y,w,c
  3416  00044C  0800               	sublw	0
  3417  00044E  241C               	addwf	drawCircle@x0,w,c
  3418  000450  EC87  F009         	call	_drawPixel
  3419  000454  D000               	goto	l3751
  3420  000456                     l3751:
  3421  000456  502E               	movf	drawCircle@y,w,c
  3422  000458  5C2C               	subwf	drawCircle@x,w,c
  3423  00045A  502D               	movf	drawCircle@x+1,w,c
  3424  00045C  0A80               	xorlw	128
  3425  00045E  6E24               	movwf	??_drawCircle& (0+255),c
  3426  000460  502F               	movf	drawCircle@y+1,w,c
  3427  000462  0A80               	xorlw	128
  3428  000464  5824               	subwfb	??_drawCircle& (0+255),w,c
  3429  000466  A0D8               	btfss	status,0,c
  3430  000468  D77E               	goto	l3723
  3431  00046A  0012               	return		;funcret
  3432  00046C                     __end_of_drawCircle:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1l	equ	0xFE1
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _Initialize_Screen *****************
  3453 ;; Defined at:
  3454 ;;		line 310 in file "Lab10p1.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;		None               void
  3461 ;; Registers used:
  3462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:   10
  3475 ;; This function calls:
  3476 ;;		_LCD_Reset
  3477 ;;		_TFT_GreenTab_Initialize
  3478 ;;		_drawtext
  3479 ;;		_fillScreen
  3480 ;;		_strcpy
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text10
  3487  000DC0                     __ptext10:
  3488                           	opt stack 0
  3489  000DC0                     _Initialize_Screen:
  3490                           	opt stack 20
  3491                           
  3492                           ;Lab10p1.c: 312: LCD_Reset();
  3493                           
  3494                           ;incstack = 0
  3495  000DC0  EC1B  F00A         	call	_LCD_Reset	;wreg free
  3496                           
  3497                           ;Lab10p1.c: 313: TFT_GreenTab_Initialize();
  3498  000DC4  ECB4  F009         	call	_TFT_GreenTab_Initialize	;wreg free
  3499                           
  3500                           ;Lab10p1.c: 314: fillScreen(0x0000);
  3501  000DC8  0E00               	movlw	0
  3502  000DCA  6E25               	movwf	fillScreen@color+1,c
  3503  000DCC  0E00               	movlw	0
  3504  000DCE  6E24               	movwf	fillScreen@color,c
  3505  000DD0  ECEE  F009         	call	_fillScreen	;wreg free
  3506                           
  3507                           ;Lab10p1.c: 317: txt = buffer;
  3508  000DD4  0EAA               	movlw	low _buffer
  3509  000DD6  6E64               	movwf	_txt,c
  3510  000DD8  0E00               	movlw	high _buffer
  3511  000DDA  6E65               	movwf	_txt+1,c
  3512                           
  3513                           ;Lab10p1.c: 318: strcpy(txt, "ECE3301L Fall 22-S1");
  3514  000DDC  C064  F011         	movff	_txt,strcpy@to
  3515  000DE0  C065  F012         	movff	_txt+1,strcpy@to+1
  3516  000DE4  0E02               	movlw	low STR_2
  3517  000DE6  6E13               	movwf	strcpy@from,c
  3518  000DE8  0EFD               	movlw	high STR_2
  3519  000DEA  6E14               	movwf	strcpy@from+1,c
  3520  000DEC  EC6E  F009         	call	_strcpy	;wreg free
  3521                           
  3522                           ;Lab10p1.c: 319: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3523  000DF0  0E02               	movlw	2
  3524  000DF2  6E39               	movwf	drawtext@y,c
  3525  000DF4  C064  F03A         	movff	_txt,drawtext@_text
  3526  000DF8  C065  F03B         	movff	_txt+1,drawtext@_text+1
  3527  000DFC  0EFF               	movlw	255
  3528  000DFE  6E3D               	movwf	drawtext@color+1,c
  3529  000E00  683C               	setf	drawtext@color,c
  3530  000E02  0E00               	movlw	0
  3531  000E04  6E3F               	movwf	drawtext@bg+1,c
  3532  000E06  0E00               	movlw	0
  3533  000E08  6E3E               	movwf	drawtext@bg,c
  3534  000E0A  0E01               	movlw	1
  3535  000E0C  6E40               	movwf	drawtext@size,c
  3536  000E0E  0E02               	movlw	2
  3537  000E10  EC74  F005         	call	_drawtext
  3538                           
  3539                           ;Lab10p1.c: 321: strcpy(txt, "LAB 10 ");
  3540  000E14  C064  F011         	movff	_txt,strcpy@to
  3541  000E18  C065  F012         	movff	_txt+1,strcpy@to+1
  3542  000E1C  0E27               	movlw	low STR_3
  3543  000E1E  6E13               	movwf	strcpy@from,c
  3544  000E20  0EFD               	movlw	high STR_3
  3545  000E22  6E14               	movwf	strcpy@from+1,c
  3546  000E24  EC6E  F009         	call	_strcpy	;wreg free
  3547                           
  3548                           ;Lab10p1.c: 322: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3549  000E28  0E0A               	movlw	10
  3550  000E2A  6E39               	movwf	drawtext@y,c
  3551  000E2C  C064  F03A         	movff	_txt,drawtext@_text
  3552  000E30  C065  F03B         	movff	_txt+1,drawtext@_text+1
  3553  000E34  0EFF               	movlw	255
  3554  000E36  6E3D               	movwf	drawtext@color+1,c
  3555  000E38  683C               	setf	drawtext@color,c
  3556  000E3A  0E00               	movlw	0
  3557  000E3C  6E3F               	movwf	drawtext@bg+1,c
  3558  000E3E  0E00               	movlw	0
  3559  000E40  6E3E               	movwf	drawtext@bg,c
  3560  000E42  0E01               	movlw	1
  3561  000E44  6E40               	movwf	drawtext@size,c
  3562  000E46  0E32               	movlw	50
  3563  000E48  EC74  F005         	call	_drawtext
  3564  000E4C  0012               	return		;funcret
  3565  000E4E                     __end_of_Initialize_Screen:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon	equ	0xFF2
  3574                           intcon2	equ	0xFF1
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           fsr1l	equ	0xFE1
  3579                           postinc2	equ	0xFDE
  3580                           postdec2	equ	0xFDD
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           
  3585 ;; *************** function _strcpy *****************
  3586 ;; Defined at:
  3587 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  to              2   16[COMRAM] PTR unsigned char 
  3590 ;;		 -> NULL(0), buffer(31), 
  3591 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3592 ;;		 -> STR_3(8), STR_2(20), 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3595 ;;		 -> NULL(0), buffer(31), 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  2   16[COMRAM] PTR unsigned char 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;Total ram usage:        6 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    3
  3612 ;; This function calls:
  3613 ;;		Nothing
  3614 ;; This function is called by:
  3615 ;;		_Initialize_Screen
  3616 ;; This function uses a non-reentrant model
  3617 ;;
  3618                           
  3619                           	psect	text11
  3620  0012DC                     __ptext11:
  3621                           	opt stack 0
  3622  0012DC                     _strcpy:
  3623                           	opt stack 26
  3624                           
  3625                           ;incstack = 0
  3626  0012DC  C011  F015         	movff	strcpy@to,strcpy@cp
  3627  0012E0  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3628  0012E4  D005               	goto	l3531
  3629  0012E6                     l3529:
  3630  0012E6  4A15               	infsnz	strcpy@cp,f,c
  3631  0012E8  2A16               	incf	strcpy@cp+1,f,c
  3632  0012EA  4A13               	infsnz	strcpy@from,f,c
  3633  0012EC  2A14               	incf	strcpy@from+1,f,c
  3634  0012EE  D000               	goto	l3531
  3635  0012F0                     l3531:
  3636  0012F0  C013  FFF6         	movff	strcpy@from,tblptrl
  3637  0012F4  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3638  0012F8                     	if	0	;tblptru may be non-zero
  3639  0012F8                     	endif
  3640  0012F8                     	if	0	;tblptru may be non-zero
  3641  0012F8                     	endif
  3642  0012F8  C015  FFD9         	movff	strcpy@cp,fsr2l
  3643  0012FC  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3644  001300  0008               	tblrd		*
  3645  001302  CFF5 FFDF          	movff	tablat,indf2
  3646  001306  50DF               	movf	indf2,w,c
  3647  001308  A4D8               	btfss	status,2,c
  3648  00130A  D7ED               	goto	l3529
  3649                           
  3650                           ;	Return value of _strcpy is never used
  3651  00130C  0012               	return		;funcret
  3652  00130E                     __end_of_strcpy:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           intcon	equ	0xFF2
  3661                           intcon2	equ	0xFF1
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postdec1	equ	0xFE5
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _fillScreen *****************
  3674 ;; Defined at:
  3675 ;;		line 616 in file "ST7735_TFT.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  color           2   35[COMRAM] unsigned int 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;		None               void
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        2 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    7
  3696 ;; This function calls:
  3697 ;;		_fillRectangle
  3698 ;; This function is called by:
  3699 ;;		_Initialize_Screen
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text12
  3704  0013DC                     __ptext12:
  3705                           	opt stack 0
  3706  0013DC                     _fillScreen:
  3707                           	opt stack 22
  3708                           
  3709                           ;ST7735_TFT.c: 618: fillRectangle(0, 0, 128, 160, color);
  3710                           
  3711                           ;incstack = 0
  3712  0013DC  0E00               	movlw	0
  3713  0013DE  6E18               	movwf	fillRectangle@y,c
  3714  0013E0  0E80               	movlw	128
  3715  0013E2  6E19               	movwf	fillRectangle@w,c
  3716  0013E4  0EA0               	movlw	160
  3717  0013E6  6E1A               	movwf	fillRectangle@h,c
  3718  0013E8  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3719  0013EC  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3720  0013F0  0E00               	movlw	0
  3721  0013F2  EC72  F006         	call	_fillRectangle
  3722  0013F6  0012               	return		;funcret
  3723  0013F8                     __end_of_fillScreen:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           intcon2	equ	0xFF1
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           postdec1	equ	0xFE5
  3736                           fsr1l	equ	0xFE1
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _fillRectangle *****************
  3745 ;; Defined at:
  3746 ;;		line 501 in file "ST7735_TFT.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  x               1    wreg     unsigned char 
  3749 ;;  y               1   23[COMRAM] unsigned char 
  3750 ;;  w               1   24[COMRAM] unsigned char 
  3751 ;;  h               1   25[COMRAM] unsigned char 
  3752 ;;  color           2   26[COMRAM] unsigned int 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  x               1   34[COMRAM] unsigned char 
  3755 ;;  lo              1   33[COMRAM] unsigned char 
  3756 ;;  hi              1   32[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;		None               void
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:       12 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    6
  3773 ;; This function calls:
  3774 ;;		_setAddrWindow
  3775 ;;		_spiwrite
  3776 ;; This function is called by:
  3777 ;;		_fillScreen
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text13
  3782  000CE4                     __ptext13:
  3783                           	opt stack 0
  3784  000CE4                     _fillRectangle:
  3785                           	opt stack 22
  3786                           
  3787                           ;incstack = 0
  3788                           ;fillRectangle@x stored from wreg
  3789  000CE4  6E23               	movwf	fillRectangle@x,c
  3790                           
  3791                           ;ST7735_TFT.c: 503: unsigned char hi, lo;
  3792                           ;ST7735_TFT.c: 504: if((x >= 128) || (y >= 160))
  3793  000CE6  0E80               	movlw	128
  3794  000CE8  6023               	cpfslt	fillRectangle@x,c
  3795  000CEA  D069               	goto	l316
  3796  000CEC  0E9F               	movlw	159
  3797  000CEE  6418               	cpfsgt	fillRectangle@y,c
  3798  000CF0  D001               	goto	l3377
  3799                           
  3800                           ;ST7735_TFT.c: 505: return;
  3801  000CF2  D065               	goto	l316
  3802  000CF4                     l3377:
  3803                           
  3804                           ;ST7735_TFT.c: 506: if((x + w - 1) >= 128)
  3805  000CF4  0EFF               	movlw	255
  3806  000CF6  6E1D               	movwf	??_fillRectangle& (0+255),c
  3807  000CF8  0EFF               	movlw	255
  3808  000CFA  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3809  000CFC  5019               	movf	fillRectangle@w,w,c
  3810  000CFE  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3811  000D02  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3812  000D04  261F               	addwf	??_fillRectangle+2,f,c
  3813  000D06  0E00               	movlw	0
  3814  000D08  2220               	addwfc	??_fillRectangle+3,f,c
  3815  000D0A  501D               	movf	??_fillRectangle,w,c
  3816  000D0C  261F               	addwf	??_fillRectangle+2,f,c
  3817  000D0E  501E               	movf	??_fillRectangle+1,w,c
  3818  000D10  2220               	addwfc	??_fillRectangle+3,f,c
  3819  000D12  BE20               	btfsc	??_fillRectangle+3,7,c
  3820  000D14  D00A               	goto	l317
  3821  000D16  5020               	movf	??_fillRectangle+3,w,c
  3822  000D18  E104               	bnz	u2380
  3823  000D1A  0E80               	movlw	128
  3824  000D1C  5C1F               	subwf	??_fillRectangle+2,w,c
  3825  000D1E  A0D8               	btfss	status,0,c
  3826  000D20  D004               	goto	l317
  3827  000D22                     u2380:
  3828                           
  3829                           ;ST7735_TFT.c: 507: w = 128 - x;
  3830  000D22  5023               	movf	fillRectangle@x,w,c
  3831  000D24  0800               	sublw	0
  3832  000D26  0F80               	addlw	128
  3833  000D28  6E19               	movwf	fillRectangle@w,c
  3834  000D2A                     l317:
  3835                           
  3836                           ;ST7735_TFT.c: 508: if((y + h - 1) >= 160)
  3837  000D2A  0EFF               	movlw	255
  3838  000D2C  6E1D               	movwf	??_fillRectangle& (0+255),c
  3839  000D2E  0EFF               	movlw	255
  3840  000D30  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3841  000D32  501A               	movf	fillRectangle@h,w,c
  3842  000D34  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3843  000D38  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3844  000D3A  261F               	addwf	??_fillRectangle+2,f,c
  3845  000D3C  0E00               	movlw	0
  3846  000D3E  2220               	addwfc	??_fillRectangle+3,f,c
  3847  000D40  501D               	movf	??_fillRectangle,w,c
  3848  000D42  261F               	addwf	??_fillRectangle+2,f,c
  3849  000D44  501E               	movf	??_fillRectangle+1,w,c
  3850  000D46  2220               	addwfc	??_fillRectangle+3,f,c
  3851  000D48  BE20               	btfsc	??_fillRectangle+3,7,c
  3852  000D4A  D00B               	goto	l3383
  3853  000D4C  5020               	movf	??_fillRectangle+3,w,c
  3854  000D4E  E104               	bnz	u2390
  3855  000D50  0EA0               	movlw	160
  3856  000D52  5C1F               	subwf	??_fillRectangle+2,w,c
  3857  000D54  A0D8               	btfss	status,0,c
  3858  000D56  D005               	goto	l3383
  3859  000D58                     u2390:
  3860                           
  3861                           ;ST7735_TFT.c: 509: h = 160 - y;
  3862  000D58  5018               	movf	fillRectangle@y,w,c
  3863  000D5A  0800               	sublw	0
  3864  000D5C  0FA0               	addlw	160
  3865  000D5E  6E1A               	movwf	fillRectangle@h,c
  3866  000D60  D000               	goto	l3383
  3867  000D62                     l3383:
  3868                           
  3869                           ;ST7735_TFT.c: 510: setAddrWindow(x, y, x+w-1, y+h-1);
  3870  000D62  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3871  000D66  5023               	movf	fillRectangle@x,w,c
  3872  000D68  2419               	addwf	fillRectangle@w,w,c
  3873  000D6A  6E1D               	movwf	??_fillRectangle& (0+255),c
  3874  000D6C  041D               	decf	??_fillRectangle,w,c
  3875  000D6E  6E15               	movwf	setAddrWindow@x1,c
  3876  000D70  5018               	movf	fillRectangle@y,w,c
  3877  000D72  241A               	addwf	fillRectangle@h,w,c
  3878  000D74  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3879  000D76  041E               	decf	??_fillRectangle+1,w,c
  3880  000D78  6E16               	movwf	setAddrWindow@y1,c
  3881  000D7A  5023               	movf	fillRectangle@x,w,c
  3882  000D7C  ECE4  F008         	call	_setAddrWindow
  3883                           
  3884                           ;ST7735_TFT.c: 511: hi = color >> 8; lo = color;
  3885  000D80  501C               	movf	fillRectangle@color+1,w,c
  3886  000D82  6E21               	movwf	fillRectangle@hi,c
  3887  000D84  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3888                           
  3889                           ;ST7735_TFT.c: 512: PORTCbits.RC2 = 1;
  3890  000D88  8482               	bsf	3970,2,c	;volatile
  3891                           
  3892                           ;ST7735_TFT.c: 513: PORTCbits.RC4 = 0;
  3893  000D8A  9882               	bcf	3970,4,c	;volatile
  3894                           
  3895                           ;ST7735_TFT.c: 515: for(y=h; y>0; y--) {
  3896  000D8C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3897  000D90                     l3395:
  3898  000D90  5018               	movf	fillRectangle@y,w,c
  3899  000D92  B4D8               	btfsc	status,2,c
  3900  000D94  D013               	goto	l320
  3901  000D96  D001               	goto	l319
  3902  000D98  D011               	goto	l320
  3903  000D9A                     l319:
  3904                           
  3905                           ;ST7735_TFT.c: 516: for(x = w; x > 0; x--) {
  3906  000D9A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3907  000D9E                     l3399:
  3908  000D9E  5023               	movf	fillRectangle@x,w,c
  3909  000DA0  B4D8               	btfsc	status,2,c
  3910  000DA2  D00A               	goto	l3409
  3911  000DA4  D001               	goto	l3403
  3912  000DA6  D008               	goto	l3409
  3913  000DA8                     l3403:
  3914                           
  3915                           ;ST7735_TFT.c: 517: spiwrite(hi);
  3916  000DA8  5021               	movf	fillRectangle@hi,w,c
  3917  000DAA  EC11  F00A         	call	_spiwrite
  3918                           
  3919                           ;ST7735_TFT.c: 518: spiwrite(lo);
  3920  000DAE  5022               	movf	fillRectangle@lo,w,c
  3921  000DB0  EC11  F00A         	call	_spiwrite
  3922  000DB4  0623               	decf	fillRectangle@x,f,c
  3923  000DB6  D7F3               	goto	l3399
  3924  000DB8                     l3409:
  3925  000DB8  0618               	decf	fillRectangle@y,f,c
  3926  000DBA  D7EA               	goto	l3395
  3927  000DBC                     l320:
  3928                           
  3929                           ;ST7735_TFT.c: 519: }
  3930                           ;ST7735_TFT.c: 520: }
  3931                           ;ST7735_TFT.c: 521: PORTCbits.RC4 = 1;
  3932  000DBC  8882               	bsf	3970,4,c	;volatile
  3933  000DBE                     l316:
  3934  000DBE  0012               	return		;funcret
  3935  000DC0                     __end_of_fillRectangle:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           intcon2	equ	0xFF1
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _drawtext *****************
  3957 ;; Defined at:
  3958 ;;		line 473 in file "ST7735_TFT.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  x               1    wreg     unsigned char 
  3961 ;;  y               1   56[COMRAM] unsigned char 
  3962 ;;  _text           2   57[COMRAM] PTR unsigned char 
  3963 ;;		 -> NULL(0), buffer(31), txt1(84), 
  3964 ;;  color           2   59[COMRAM] unsigned int 
  3965 ;;  bg              2   61[COMRAM] unsigned int 
  3966 ;;  size            1   63[COMRAM] unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  x               1    0[BANK0 ] unsigned char 
  3969 ;;  i               2    3[BANK0 ] unsigned int 
  3970 ;;  textsize        2    1[BANK0 ] unsigned int 
  3971 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3972 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;		None               void
  3975 ;; Registers used:
  3976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;Total ram usage:       17 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    9
  3989 ;; This function calls:
  3990 ;;		_drawChar
  3991 ;;		_strlen
  3992 ;; This function is called by:
  3993 ;;		_main
  3994 ;;		_Initialize_Screen
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text14
  3999  000AE8                     __ptext14:
  4000                           	opt stack 0
  4001  000AE8                     _drawtext:
  4002                           	opt stack 21
  4003                           
  4004                           ;incstack = 0
  4005                           ;drawtext@x stored from wreg
  4006  000AE8  0100               	movlb	0	; () banked
  4007  000AEA  6FC9               	movwf	drawtext@x& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;ST7735_TFT.c: 475: unsigned char cursor_x, cursor_y;
  4011                           ;ST7735_TFT.c: 476: unsigned int textsize, i;
  4012                           ;ST7735_TFT.c: 477: cursor_x = x, cursor_y = y;
  4013  000AEC  C0C9  F0CF         	movff	drawtext@x,drawtext@cursor_x
  4014                           
  4015                           ; BSR set to: 0
  4016  000AF0  C039  F0CE         	movff	drawtext@y,drawtext@cursor_y
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;ST7735_TFT.c: 478: textsize = strlen(_text);
  4020  000AF4  C03A  F011         	movff	drawtext@_text,strlen@s
  4021  000AF8  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4022  000AFC  EC30  F009         	call	_strlen	;wreg free
  4023  000B00  C011  F0CA         	movff	?_strlen,drawtext@textsize
  4024  000B04  C012  F0CB         	movff	?_strlen+1,drawtext@textsize+1
  4025                           
  4026                           ;ST7735_TFT.c: 479: for(i = 0; i < textsize; i++){
  4027  000B08  0E00               	movlw	0
  4028  000B0A  0100               	movlb	0	; () banked
  4029  000B0C  6FCD               	movwf	(drawtext@i+1)& (0+255),b
  4030  000B0E  0E00               	movlw	0
  4031  000B10  6FCC               	movwf	drawtext@i& (0+255),b
  4032  000B12  D064               	goto	l3501
  4033  000B14                     l3475:
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;ST7735_TFT.c: 480: if(wrap && ((cursor_x + size * 5) > 128)){
  4037  000B14  5059               	movf	_wrap,w,c
  4038  000B16  B4D8               	btfsc	status,2,c
  4039  000B18  D034               	goto	l3491
  4040                           
  4041                           ; BSR set to: 0
  4042  000B1A  5040               	movf	drawtext@size,w,c
  4043  000B1C  0D05               	mullw	5
  4044  000B1E  0100               	movlb	0	; () banked
  4045  000B20  51CF               	movf	drawtext@cursor_x& (0+255),w,b
  4046  000B22  6E41               	movwf	??_drawtext& (0+255),c
  4047  000B24  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4048  000B26  50F3               	movf	prodl,w,c
  4049  000B28  2641               	addwf	??_drawtext,f,c
  4050  000B2A  50F4               	movf	prodh,w,c
  4051  000B2C  2242               	addwfc	??_drawtext+1,f,c
  4052  000B2E  BE42               	btfsc	??_drawtext+1,7,c
  4053  000B30  D028               	goto	l3491
  4054  000B32  5042               	movf	??_drawtext+1,w,c
  4055  000B34  E104               	bnz	u2560
  4056  000B36  0E81               	movlw	129
  4057  000B38  5C41               	subwf	??_drawtext,w,c
  4058  000B3A  A0D8               	btfss	status,0,c
  4059  000B3C  D022               	goto	l3491
  4060  000B3E                     u2560:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;ST7735_TFT.c: 481: cursor_x = 0;
  4064  000B3E  0E00               	movlw	0
  4065  000B40  0100               	movlb	0	; () banked
  4066  000B42  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;ST7735_TFT.c: 482: cursor_y = cursor_y + size * 7 + 3 ;
  4070  000B44  5040               	movf	drawtext@size,w,c
  4071  000B46  0D07               	mullw	7
  4072  000B48  50F3               	movf	prodl,w,c
  4073  000B4A  0100               	movlb	0	; () banked
  4074  000B4C  25CE               	addwf	drawtext@cursor_y& (0+255),w,b
  4075  000B4E  0F03               	addlw	3
  4076  000B50  0100               	movlb	0	; () banked
  4077  000B52  6FCE               	movwf	drawtext@cursor_y& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;ST7735_TFT.c: 483: if(cursor_y > 160) cursor_y = 160;
  4081  000B54  0EA0               	movlw	160
  4082  000B56  0100               	movlb	0	; () banked
  4083  000B58  65CE               	cpfsgt	drawtext@cursor_y& (0+255),b
  4084  000B5A  D004               	goto	l3487
  4085                           
  4086                           ; BSR set to: 0
  4087  000B5C  0EA0               	movlw	160
  4088  000B5E  0100               	movlb	0	; () banked
  4089  000B60  6FCE               	movwf	drawtext@cursor_y& (0+255),b
  4090  000B62  D000               	goto	l3487
  4091  000B64                     l3487:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;ST7735_TFT.c: 484: if(_text[i] == 0x20) goto _skip; }
  4095  000B64  0100               	movlb	0	; () banked
  4096  000B66  51CC               	movf	drawtext@i& (0+255),w,b
  4097  000B68  243A               	addwf	drawtext@_text,w,c
  4098  000B6A  6ED9               	movwf	fsr2l,c
  4099  000B6C  0100               	movlb	0	; () banked
  4100  000B6E  51CD               	movf	(drawtext@i+1)& (0+255),w,b
  4101  000B70  203B               	addwfc	drawtext@_text+1,w,c
  4102  000B72  6EDA               	movwf	fsr2h,c
  4103  000B74  0E20               	movlw	32
  4104  000B76  18DE               	xorwf	postinc2,w,c
  4105  000B78  B4D8               	btfsc	status,2,c
  4106  000B7A  D02C               	goto	l3499
  4107  000B7C  D002               	goto	l3491
  4108                           
  4109                           ; BSR set to: 0
  4110  000B7E  D02A               	goto	l3499
  4111                           
  4112                           ; BSR set to: 0
  4113  000B80  D000               	goto	l3491
  4114  000B82                     l3491:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;ST7735_TFT.c: 485: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4118  000B82  C0CE  F02E         	movff	drawtext@cursor_y,drawChar@y
  4119  000B86  0100               	movlb	0	; () banked
  4120  000B88  51CC               	movf	drawtext@i& (0+255),w,b
  4121  000B8A  243A               	addwf	drawtext@_text,w,c
  4122  000B8C  6ED9               	movwf	fsr2l,c
  4123  000B8E  0100               	movlb	0	; () banked
  4124  000B90  51CD               	movf	(drawtext@i+1)& (0+255),w,b
  4125  000B92  203B               	addwfc	drawtext@_text+1,w,c
  4126  000B94  6EDA               	movwf	fsr2h,c
  4127  000B96  50DF               	movf	indf2,w,c
  4128  000B98  6E2F               	movwf	drawChar@c,c
  4129  000B9A  C03C  F030         	movff	drawtext@color,drawChar@color
  4130  000B9E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4131  000BA2  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4132  000BA6  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4133  000BAA  C040  F034         	movff	drawtext@size,drawChar@size
  4134  000BAE  0100               	movlb	0	; () banked
  4135  000BB0  51CF               	movf	drawtext@cursor_x& (0+255),w,b
  4136  000BB2  ECA5  F003         	call	_drawChar
  4137                           
  4138                           ;ST7735_TFT.c: 486: cursor_x = cursor_x + size * 6;
  4139  000BB6  5040               	movf	drawtext@size,w,c
  4140  000BB8  0D06               	mullw	6
  4141  000BBA  50F3               	movf	prodl,w,c
  4142  000BBC  0100               	movlb	0	; () banked
  4143  000BBE  25CF               	addwf	drawtext@cursor_x& (0+255),w,b
  4144  000BC0  0100               	movlb	0	; () banked
  4145  000BC2  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;ST7735_TFT.c: 487: if(cursor_x > 128) cursor_x = 128;
  4149  000BC4  0E80               	movlw	128
  4150  000BC6  0100               	movlb	0	; () banked
  4151  000BC8  65CF               	cpfsgt	drawtext@cursor_x& (0+255),b
  4152  000BCA  D004               	goto	l3499
  4153                           
  4154                           ; BSR set to: 0
  4155  000BCC  0E80               	movlw	128
  4156  000BCE  0100               	movlb	0	; () banked
  4157  000BD0  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160  000BD2  D000               	goto	l3499
  4161  000BD4                     l3499:
  4162                           
  4163                           ; BSR set to: 0
  4164  000BD4  0100               	movlb	0	; () banked
  4165  000BD6  4BCC               	infsnz	drawtext@i& (0+255),f,b
  4166  000BD8  2BCD               	incf	(drawtext@i+1)& (0+255),f,b
  4167  000BDA  D000               	goto	l3501
  4168  000BDC                     l3501:
  4169                           
  4170                           ; BSR set to: 0
  4171  000BDC  0100               	movlb	0	; () banked
  4172  000BDE  51CA               	movf	drawtext@textsize& (0+255),w,b
  4173  000BE0  0100               	movlb	0	; () banked
  4174  000BE2  5DCC               	subwf	drawtext@i& (0+255),w,b
  4175  000BE4  0100               	movlb	0	; () banked
  4176  000BE6  51CB               	movf	(drawtext@textsize+1)& (0+255),w,b
  4177  000BE8  0100               	movlb	0	; () banked
  4178  000BEA  59CD               	subwfb	(drawtext@i+1)& (0+255),w,b
  4179  000BEC  A0D8               	btfss	status,0,c
  4180  000BEE  D792               	goto	l3475
  4181                           
  4182                           ; BSR set to: 0
  4183                           
  4184                           ; BSR set to: 0
  4185  000BF0  0012               	return		;funcret
  4186  000BF2                     __end_of_drawtext:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           intcon2	equ	0xFF1
  4196                           postinc0	equ	0xFEE
  4197                           wreg	equ	0xFE8
  4198                           postdec1	equ	0xFE5
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _strlen *****************
  4208 ;; Defined at:
  4209 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4212 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4215 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  2   16[COMRAM] unsigned int 
  4218 ;; Registers used:
  4219 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;Total ram usage:        6 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    3
  4232 ;; This function calls:
  4233 ;;		Nothing
  4234 ;; This function is called by:
  4235 ;;		_drawtext
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text15
  4240  001260                     __ptext15:
  4241                           	opt stack 0
  4242  001260                     _strlen:
  4243                           	opt stack 26
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;incstack = 0
  4247  001260  C011  F015         	movff	strlen@s,strlen@cp
  4248  001264  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4249  001268  D003               	goto	l3367
  4250  00126A                     l3365:
  4251  00126A  4A15               	infsnz	strlen@cp,f,c
  4252  00126C  2A16               	incf	strlen@cp+1,f,c
  4253  00126E  D000               	goto	l3367
  4254  001270                     l3367:
  4255  001270  C015  FFD9         	movff	strlen@cp,fsr2l
  4256  001274  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4257  001278  50DF               	movf	indf2,w,c
  4258  00127A  A4D8               	btfss	status,2,c
  4259  00127C  D7F6               	goto	l3365
  4260  00127E  C011  F013         	movff	strlen@s,??_strlen
  4261  001282  C012  F014         	movff	strlen@s+1,??_strlen+1
  4262  001286  1E13               	comf	??_strlen,f,c
  4263  001288  1E14               	comf	??_strlen+1,f,c
  4264  00128A  4A13               	infsnz	??_strlen,f,c
  4265  00128C  2A14               	incf	??_strlen+1,f,c
  4266  00128E  5015               	movf	strlen@cp,w,c
  4267  001290  2413               	addwf	??_strlen,w,c
  4268  001292  6E11               	movwf	?_strlen,c
  4269  001294  5016               	movf	strlen@cp+1,w,c
  4270  001296  2014               	addwfc	??_strlen+1,w,c
  4271  001298  6E12               	movwf	?_strlen+1,c
  4272  00129A  D000               	goto	l1027
  4273  00129C                     l1027:
  4274  00129C  0012               	return		;funcret
  4275  00129E                     __end_of_strlen:
  4276                           	opt stack 0
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon2	equ	0xFF1
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1l	equ	0xFE1
  4289                           indf2	equ	0xFDF
  4290                           postinc2	equ	0xFDE
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _drawChar *****************
  4297 ;; Defined at:
  4298 ;;		line 446 in file "ST7735_TFT.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  x               1    wreg     unsigned char 
  4301 ;;  y               1   45[COMRAM] unsigned char 
  4302 ;;  c               1   46[COMRAM] unsigned char 
  4303 ;;  color           2   47[COMRAM] unsigned int 
  4304 ;;  bg              2   49[COMRAM] unsigned int 
  4305 ;;  size            1   51[COMRAM] unsigned char 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  x               1   53[COMRAM] unsigned char 
  4308 ;;  line            1   52[COMRAM] unsigned char 
  4309 ;;  i               1   55[COMRAM] unsigned char 
  4310 ;;  j               1   54[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;		None               void
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:       11 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    8
  4327 ;; This function calls:
  4328 ;;		___wmul
  4329 ;;		_drawPixel
  4330 ;;		_fillRect
  4331 ;; This function is called by:
  4332 ;;		_drawtext
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text16
  4337  00074A                     __ptext16:
  4338                           	opt stack 0
  4339  00074A                     _drawChar:
  4340                           	opt stack 21
  4341                           
  4342                           ;incstack = 0
  4343                           ;drawChar@x stored from wreg
  4344  00074A  6E36               	movwf	drawChar@x,c
  4345                           
  4346                           ;ST7735_TFT.c: 448: char i, j;
  4347                           ;ST7735_TFT.c: 449: if((x >= 128) || (y >= 160))
  4348  00074C  0E80               	movlw	128
  4349  00074E  6036               	cpfslt	drawChar@x,c
  4350  000750  D0A6               	goto	l279
  4351  000752  0E9F               	movlw	159
  4352  000754  642E               	cpfsgt	drawChar@y,c
  4353  000756  D001               	goto	l3313
  4354                           
  4355                           ;ST7735_TFT.c: 450: return;
  4356  000758  D0A2               	goto	l279
  4357  00075A                     l3313:
  4358                           
  4359                           ;ST7735_TFT.c: 451: if(size < 1) size = 1;
  4360  00075A  5034               	movf	drawChar@size,w,c
  4361  00075C  A4D8               	btfss	status,2,c
  4362  00075E  D003               	goto	l3317
  4363  000760  0E01               	movlw	1
  4364  000762  6E34               	movwf	drawChar@size,c
  4365  000764  D000               	goto	l3317
  4366  000766                     l3317:
  4367                           
  4368                           ;ST7735_TFT.c: 452: if((c < ' ') || (c > '~'))
  4369  000766  0E1F               	movlw	31
  4370  000768  642F               	cpfsgt	drawChar@c,c
  4371  00076A  D004               	goto	l3321
  4372  00076C  0E7E               	movlw	126
  4373  00076E  642F               	cpfsgt	drawChar@c,c
  4374  000770  D003               	goto	l281
  4375  000772  D000               	goto	l3321
  4376  000774                     l3321:
  4377                           
  4378                           ;ST7735_TFT.c: 453: c = '?';
  4379  000774  0E3F               	movlw	63
  4380  000776  6E2F               	movwf	drawChar@c,c
  4381  000778                     l281:
  4382                           
  4383                           ;ST7735_TFT.c: 454: for(i=0; i<5; i++ ) {
  4384  000778  0E00               	movlw	0
  4385  00077A  6E38               	movwf	drawChar@i,c
  4386  00077C                     l3323:
  4387  00077C  0E04               	movlw	4
  4388  00077E  6438               	cpfsgt	drawChar@i,c
  4389  000780  D001               	goto	l3327
  4390  000782  D08D               	goto	l279
  4391  000784                     l3327:
  4392                           
  4393                           ;ST7735_TFT.c: 455: unsigned char line;
  4394                           ;ST7735_TFT.c: 456: if(c < 'S')
  4395  000784  0E53               	movlw	83
  4396  000786  602F               	cpfslt	drawChar@c,c
  4397  000788  D015               	goto	l3331
  4398                           
  4399                           ;ST7735_TFT.c: 457: line = font[(c - 32)*5 + i];
  4400  00078A  0EE0               	movlw	224
  4401  00078C  242F               	addwf	drawChar@c,w,c
  4402  00078E  6E11               	movwf	___wmul@multiplier,c
  4403  000790  6A12               	clrf	___wmul@multiplier+1,c
  4404  000792  0EFF               	movlw	255
  4405  000794  2212               	addwfc	___wmul@multiplier+1,f,c
  4406  000796  0E00               	movlw	0
  4407  000798  6E14               	movwf	___wmul@multiplicand+1,c
  4408  00079A  0E05               	movlw	5
  4409  00079C  6E13               	movwf	___wmul@multiplicand,c
  4410  00079E  ECC9  F009         	call	___wmul	;wreg free
  4411  0007A2  5038               	movf	drawChar@i,w,c
  4412  0007A4  2611               	addwf	?___wmul,f,c
  4413  0007A6  0E00               	movlw	0
  4414  0007A8  2212               	addwfc	?___wmul+1,f,c
  4415  0007AA  0EF1               	movlw	low _font
  4416  0007AC  2411               	addwf	?___wmul,w,c
  4417  0007AE  6EF6               	movwf	tblptrl,c
  4418  0007B0  0EFA               	movlw	high _font
  4419  0007B2  D014               	goto	L2
  4420  0007B4                     l3331:
  4421                           
  4422                           ;ST7735_TFT.c: 458: else
  4423                           ;ST7735_TFT.c: 459: line = font2[(c - 'S')*5 + i];
  4424  0007B4  0EAD               	movlw	173
  4425  0007B6  242F               	addwf	drawChar@c,w,c
  4426  0007B8  6E11               	movwf	___wmul@multiplier,c
  4427  0007BA  6A12               	clrf	___wmul@multiplier+1,c
  4428  0007BC  0EFF               	movlw	255
  4429  0007BE  2212               	addwfc	___wmul@multiplier+1,f,c
  4430  0007C0  0E00               	movlw	0
  4431  0007C2  6E14               	movwf	___wmul@multiplicand+1,c
  4432  0007C4  0E05               	movlw	5
  4433  0007C6  6E13               	movwf	___wmul@multiplicand,c
  4434  0007C8  ECC9  F009         	call	___wmul	;wreg free
  4435  0007CC  5038               	movf	drawChar@i,w,c
  4436  0007CE  2611               	addwf	?___wmul,f,c
  4437  0007D0  0E00               	movlw	0
  4438  0007D2  2212               	addwfc	?___wmul+1,f,c
  4439  0007D4  0EF0               	movlw	low _font2
  4440  0007D6  2411               	addwf	?___wmul,w,c
  4441  0007D8  6EF6               	movwf	tblptrl,c
  4442  0007DA  0EFB               	movlw	high _font2
  4443  0007DC                     L2:
  4444  0007DC  2012               	addwfc	?___wmul+1,w,c
  4445  0007DE  6EF7               	movwf	tblptrh,c
  4446  0007E0                     	if	0	;There are less than 3 active tblptr bytes
  4447  0007E0                     	endif
  4448  0007E0  0008               	tblrd		*
  4449  0007E2  CFF5 F035          	movff	tablat,drawChar@line
  4450  0007E6  D000               	goto	l3333
  4451  0007E8                     l3333:
  4452                           
  4453                           ;ST7735_TFT.c: 460: for(j=0; j<7; j++, line >>= 1) {
  4454  0007E8  0E00               	movlw	0
  4455  0007EA  6E37               	movwf	drawChar@j,c
  4456  0007EC                     l3335:
  4457  0007EC  0E06               	movlw	6
  4458  0007EE  6437               	cpfsgt	drawChar@j,c
  4459  0007F0  D001               	goto	l288
  4460  0007F2  D053               	goto	l3359
  4461  0007F4                     l288:
  4462                           
  4463                           ;ST7735_TFT.c: 461: if(line & 0x01) {
  4464  0007F4  A035               	btfss	drawChar@line,0,c
  4465  0007F6  D023               	goto	l3345
  4466                           
  4467                           ;ST7735_TFT.c: 462: if(size == 1) drawPixel(x+i, y+j, color);
  4468  0007F8  0434               	decf	drawChar@size,w,c
  4469  0007FA  A4D8               	btfss	status,2,c
  4470  0007FC  D00C               	goto	l3343
  4471  0007FE  502E               	movf	drawChar@y,w,c
  4472  000800  2437               	addwf	drawChar@j,w,c
  4473  000802  6E18               	movwf	drawPixel@y,c
  4474  000804  C030  F019         	movff	drawChar@color,drawPixel@color
  4475  000808  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4476  00080C  5036               	movf	drawChar@x,w,c
  4477  00080E  2438               	addwf	drawChar@i,w,c
  4478  000810  EC87  F009         	call	_drawPixel
  4479  000814  D03E               	goto	l3353
  4480  000816                     l3343:
  4481                           
  4482                           ;ST7735_TFT.c: 463: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4483  000816  5037               	movf	drawChar@j,w,c
  4484  000818  0234               	mulwf	drawChar@size,c
  4485  00081A  50F3               	movf	prodl,w,c
  4486  00081C  242E               	addwf	drawChar@y,w,c
  4487  00081E  6E23               	movwf	fillRect@y,c
  4488  000820  C034  F024         	movff	drawChar@size,fillRect@w
  4489  000824  C034  F025         	movff	drawChar@size,fillRect@h
  4490  000828  C030  F026         	movff	drawChar@color,fillRect@color
  4491  00082C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4492  000830  5038               	movf	drawChar@i,w,c
  4493  000832  0234               	mulwf	drawChar@size,c
  4494  000834  50F3               	movf	prodl,w,c
  4495  000836  2436               	addwf	drawChar@x,w,c
  4496  000838  EC0B  F009         	call	_fillRect
  4497                           
  4498                           ;ST7735_TFT.c: 464: }
  4499  00083C  D02A               	goto	l3353
  4500  00083E                     l3345:
  4501                           
  4502                           ;ST7735_TFT.c: 465: else if(bg != color) {
  4503  00083E  5030               	movf	drawChar@color,w,c
  4504  000840  1832               	xorwf	drawChar@bg,w,c
  4505  000842  E104               	bnz	u2310
  4506  000844  5031               	movf	drawChar@color+1,w,c
  4507  000846  1833               	xorwf	drawChar@bg+1,w,c
  4508  000848  B4D8               	btfsc	status,2,c
  4509  00084A  D023               	goto	l3353
  4510  00084C                     u2310:
  4511                           
  4512                           ;ST7735_TFT.c: 466: if(size == 1) drawPixel(x+i, y+j, bg);
  4513  00084C  0434               	decf	drawChar@size,w,c
  4514  00084E  A4D8               	btfss	status,2,c
  4515  000850  D00C               	goto	l3351
  4516  000852  502E               	movf	drawChar@y,w,c
  4517  000854  2437               	addwf	drawChar@j,w,c
  4518  000856  6E18               	movwf	drawPixel@y,c
  4519  000858  C032  F019         	movff	drawChar@bg,drawPixel@color
  4520  00085C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4521  000860  5036               	movf	drawChar@x,w,c
  4522  000862  2438               	addwf	drawChar@i,w,c
  4523  000864  EC87  F009         	call	_drawPixel
  4524  000868  D014               	goto	l3353
  4525  00086A                     l3351:
  4526                           
  4527                           ;ST7735_TFT.c: 467: else fillRect(x+i*size, y+j*size, size, size, bg);
  4528  00086A  5037               	movf	drawChar@j,w,c
  4529  00086C  0234               	mulwf	drawChar@size,c
  4530  00086E  50F3               	movf	prodl,w,c
  4531  000870  242E               	addwf	drawChar@y,w,c
  4532  000872  6E23               	movwf	fillRect@y,c
  4533  000874  C034  F024         	movff	drawChar@size,fillRect@w
  4534  000878  C034  F025         	movff	drawChar@size,fillRect@h
  4535  00087C  C032  F026         	movff	drawChar@bg,fillRect@color
  4536  000880  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4537  000884  5038               	movf	drawChar@i,w,c
  4538  000886  0234               	mulwf	drawChar@size,c
  4539  000888  50F3               	movf	prodl,w,c
  4540  00088A  2436               	addwf	drawChar@x,w,c
  4541  00088C  EC0B  F009         	call	_fillRect
  4542  000890  D000               	goto	l3353
  4543  000892                     l3353:
  4544  000892  2A37               	incf	drawChar@j,f,c
  4545  000894  90D8               	bcf	status,0,c
  4546  000896  3235               	rrcf	drawChar@line,f,c
  4547  000898  D7A9               	goto	l3335
  4548  00089A                     l3359:
  4549  00089A  2A38               	incf	drawChar@i,f,c
  4550  00089C  D76F               	goto	l3323
  4551  00089E                     l279:
  4552  00089E  0012               	return		;funcret
  4553  0008A0                     __end_of_drawChar:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           intcon2	equ	0xFF1
  4563                           postinc0	equ	0xFEE
  4564                           wreg	equ	0xFE8
  4565                           postdec1	equ	0xFE5
  4566                           fsr1l	equ	0xFE1
  4567                           indf2	equ	0xFDF
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _fillRect *****************
  4575 ;; Defined at:
  4576 ;;		line 436 in file "ST7735_TFT.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  x               1    wreg     unsigned char 
  4579 ;;  y               1   34[COMRAM] unsigned char 
  4580 ;;  w               1   35[COMRAM] unsigned char 
  4581 ;;  h               1   36[COMRAM] unsigned char 
  4582 ;;  color           2   37[COMRAM] unsigned int 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  x               1   42[COMRAM] unsigned char 
  4585 ;;  i               2   43[COMRAM] int 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;		None               void
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:       11 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    7
  4602 ;; This function calls:
  4603 ;;		_drawFastVLine
  4604 ;; This function is called by:
  4605 ;;		_drawChar
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text17
  4610  001216                     __ptext17:
  4611                           	opt stack 0
  4612  001216                     _fillRect:
  4613                           	opt stack 21
  4614                           
  4615                           ;incstack = 0
  4616                           ;fillRect@x stored from wreg
  4617  001216  6E2B               	movwf	fillRect@x,c
  4618                           
  4619                           ;ST7735_TFT.c: 438: signed int i;
  4620                           ;ST7735_TFT.c: 440: for (i = x; i < x + w; i++)
  4621  001218  C02B  F02C         	movff	fillRect@x,fillRect@i
  4622  00121C  6A2D               	clrf	fillRect@i+1,c
  4623  00121E  D00E               	goto	l3215
  4624  001220                     l3211:
  4625                           
  4626                           ;ST7735_TFT.c: 441: {
  4627                           ;ST7735_TFT.c: 442: drawFastVLine(i, y, h, color);
  4628  001220  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4629  001224  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4630  001228  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4631  00122C  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4632  001230  502C               	movf	fillRect@i,w,c
  4633  001232  EC6D  F007         	call	_drawFastVLine
  4634  001236  4A2C               	infsnz	fillRect@i,f,c
  4635  001238  2A2D               	incf	fillRect@i+1,f,c
  4636  00123A  D000               	goto	l3215
  4637  00123C                     l3215:
  4638  00123C  5024               	movf	fillRect@w,w,c
  4639  00123E  C02B  F028         	movff	fillRect@x,??_fillRect
  4640  001242  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4641  001244  2628               	addwf	??_fillRect,f,c
  4642  001246  0E00               	movlw	0
  4643  001248  2229               	addwfc	??_fillRect+1,f,c
  4644  00124A  5028               	movf	??_fillRect,w,c
  4645  00124C  5C2C               	subwf	fillRect@i,w,c
  4646  00124E  502D               	movf	fillRect@i+1,w,c
  4647  001250  0A80               	xorlw	128
  4648  001252  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4649  001254  5029               	movf	??_fillRect+1,w,c
  4650  001256  0A80               	xorlw	128
  4651  001258  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4652  00125A  A0D8               	btfss	status,0,c
  4653  00125C  D7E1               	goto	l3211
  4654  00125E  0012               	return		;funcret
  4655  001260                     __end_of_fillRect:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           prodh	equ	0xFF4
  4662                           prodl	equ	0xFF3
  4663                           intcon	equ	0xFF2
  4664                           intcon2	equ	0xFF1
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           fsr1l	equ	0xFE1
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _drawFastVLine *****************
  4677 ;; Defined at:
  4678 ;;		line 415 in file "ST7735_TFT.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  x               1    wreg     unsigned char 
  4681 ;;  y               1   23[COMRAM] unsigned char 
  4682 ;;  h               1   24[COMRAM] unsigned char 
  4683 ;;  color           2   25[COMRAM] unsigned int 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  x               1   33[COMRAM] unsigned char 
  4686 ;;  lo              1   32[COMRAM] unsigned char 
  4687 ;;  hi              1   31[COMRAM] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;		None               void
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;Total ram usage:       11 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    6
  4704 ;; This function calls:
  4705 ;;		_setAddrWindow
  4706 ;;		_spiwrite
  4707 ;; This function is called by:
  4708 ;;		_fillRect
  4709 ;;		_fillCircleHelper
  4710 ;;		_fillCircle
  4711 ;;		_drawRect
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text18
  4716  000EDA                     __ptext18:
  4717                           	opt stack 0
  4718  000EDA                     _drawFastVLine:
  4719                           	opt stack 22
  4720                           
  4721                           ;incstack = 0
  4722                           ;drawFastVLine@x stored from wreg
  4723  000EDA  6E22               	movwf	drawFastVLine@x,c
  4724                           
  4725                           ;ST7735_TFT.c: 417: unsigned char hi, lo;
  4726                           ;ST7735_TFT.c: 418: if((x >= 128) || (y >= 160))
  4727  000EDC  0E80               	movlw	128
  4728  000EDE  6022               	cpfslt	drawFastVLine@x,c
  4729  000EE0  D03F               	goto	l263
  4730  000EE2  0E9F               	movlw	159
  4731  000EE4  6418               	cpfsgt	drawFastVLine@y,c
  4732  000EE6  D001               	goto	l3161
  4733                           
  4734                           ;ST7735_TFT.c: 419: return;
  4735  000EE8  D03B               	goto	l263
  4736  000EEA                     l3161:
  4737                           
  4738                           ;ST7735_TFT.c: 420: if((y + h - 1) >= 160)
  4739  000EEA  0EFF               	movlw	255
  4740  000EEC  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4741  000EEE  0EFF               	movlw	255
  4742  000EF0  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4743  000EF2  5019               	movf	drawFastVLine@h,w,c
  4744  000EF4  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4745  000EF8  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4746  000EFA  261E               	addwf	??_drawFastVLine+2,f,c
  4747  000EFC  0E00               	movlw	0
  4748  000EFE  221F               	addwfc	??_drawFastVLine+3,f,c
  4749  000F00  501C               	movf	??_drawFastVLine,w,c
  4750  000F02  261E               	addwf	??_drawFastVLine+2,f,c
  4751  000F04  501D               	movf	??_drawFastVLine+1,w,c
  4752  000F06  221F               	addwfc	??_drawFastVLine+3,f,c
  4753  000F08  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4754  000F0A  D00B               	goto	l3165
  4755  000F0C  501F               	movf	??_drawFastVLine+3,w,c
  4756  000F0E  E104               	bnz	u2150
  4757  000F10  0EA0               	movlw	160
  4758  000F12  5C1E               	subwf	??_drawFastVLine+2,w,c
  4759  000F14  A0D8               	btfss	status,0,c
  4760  000F16  D005               	goto	l3165
  4761  000F18                     u2150:
  4762                           
  4763                           ;ST7735_TFT.c: 421: h = 160 - y;
  4764  000F18  5018               	movf	drawFastVLine@y,w,c
  4765  000F1A  0800               	sublw	0
  4766  000F1C  0FA0               	addlw	160
  4767  000F1E  6E19               	movwf	drawFastVLine@h,c
  4768  000F20  D000               	goto	l3165
  4769  000F22                     l3165:
  4770                           
  4771                           ;ST7735_TFT.c: 422: hi = color >> 8; lo = color;
  4772  000F22  501B               	movf	drawFastVLine@color+1,w,c
  4773  000F24  6E20               	movwf	drawFastVLine@hi,c
  4774  000F26  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4775                           
  4776                           ;ST7735_TFT.c: 423: setAddrWindow(x, y, x, y + h - 1);
  4777  000F2A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4778  000F2E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4779  000F32  5018               	movf	drawFastVLine@y,w,c
  4780  000F34  2419               	addwf	drawFastVLine@h,w,c
  4781  000F36  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4782  000F38  041C               	decf	??_drawFastVLine,w,c
  4783  000F3A  6E16               	movwf	setAddrWindow@y1,c
  4784  000F3C  5022               	movf	drawFastVLine@x,w,c
  4785  000F3E  ECE4  F008         	call	_setAddrWindow
  4786                           
  4787                           ;ST7735_TFT.c: 424: PORTCbits.RC2 = 1;
  4788  000F42  8482               	bsf	3970,2,c	;volatile
  4789                           
  4790                           ;ST7735_TFT.c: 425: PORTCbits.RC4 = 0;
  4791  000F44  9882               	bcf	3970,4,c	;volatile
  4792                           
  4793                           ;ST7735_TFT.c: 427: while (h--) {
  4794  000F46  D007               	goto	l3177
  4795  000F48                     l3175:
  4796                           
  4797                           ;ST7735_TFT.c: 428: spiwrite(hi);
  4798  000F48  5020               	movf	drawFastVLine@hi,w,c
  4799  000F4A  EC11  F00A         	call	_spiwrite
  4800                           
  4801                           ;ST7735_TFT.c: 429: spiwrite(lo);
  4802  000F4E  5021               	movf	drawFastVLine@lo,w,c
  4803  000F50  EC11  F00A         	call	_spiwrite
  4804  000F54  D000               	goto	l3177
  4805  000F56                     l3177:
  4806  000F56  0619               	decf	drawFastVLine@h,f,c
  4807  000F58  2819               	incf	drawFastVLine@h,w,c
  4808  000F5A  A4D8               	btfss	status,2,c
  4809  000F5C  D7F5               	goto	l3175
  4810                           
  4811                           ;ST7735_TFT.c: 430: }
  4812                           ;ST7735_TFT.c: 431: PORTCbits.RC4 = 1;
  4813  000F5E  8882               	bsf	3970,4,c	;volatile
  4814  000F60                     l263:
  4815  000F60  0012               	return		;funcret
  4816  000F62                     __end_of_drawFastVLine:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           intcon2	equ	0xFF1
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           postdec1	equ	0xFE5
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           fsr2h	equ	0xFDA
  4834                           fsr2l	equ	0xFD9
  4835                           status	equ	0xFD8
  4836                           
  4837 ;; *************** function _drawPixel *****************
  4838 ;; Defined at:
  4839 ;;		line 406 in file "ST7735_TFT.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  x               1    wreg     unsigned char 
  4842 ;;  y               1   23[COMRAM] unsigned char 
  4843 ;;  color           2   24[COMRAM] unsigned int 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  x               1   26[COMRAM] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;Total ram usage:        4 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    6
  4862 ;; This function calls:
  4863 ;;		_setAddrWindow
  4864 ;;		_write_data
  4865 ;; This function is called by:
  4866 ;;		_drawChar
  4867 ;;		_drawCircle
  4868 ;;		_drawCircleHelper
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text19
  4873  00130E                     __ptext19:
  4874                           	opt stack 0
  4875  00130E                     _drawPixel:
  4876                           	opt stack 22
  4877                           
  4878                           ;incstack = 0
  4879                           ;drawPixel@x stored from wreg
  4880  00130E  6E1B               	movwf	drawPixel@x,c
  4881                           
  4882                           ;ST7735_TFT.c: 408: if((x >= 128) || (y >= 160))
  4883  001310  0E80               	movlw	128
  4884  001312  601B               	cpfslt	drawPixel@x,c
  4885  001314  D013               	goto	l257
  4886  001316  0E9F               	movlw	159
  4887  001318  6418               	cpfsgt	drawPixel@y,c
  4888  00131A  D001               	goto	l3203
  4889                           
  4890                           ;ST7735_TFT.c: 409: return;
  4891  00131C  D00F               	goto	l257
  4892  00131E                     l3203:
  4893                           
  4894                           ;ST7735_TFT.c: 410: setAddrWindow(x,y,x+1,y+1);
  4895  00131E  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4896  001322  281B               	incf	drawPixel@x,w,c
  4897  001324  6E15               	movwf	setAddrWindow@x1,c
  4898  001326  2818               	incf	drawPixel@y,w,c
  4899  001328  6E16               	movwf	setAddrWindow@y1,c
  4900  00132A  501B               	movf	drawPixel@x,w,c
  4901  00132C  ECE4  F008         	call	_setAddrWindow
  4902                           
  4903                           ;ST7735_TFT.c: 411: write_data(color >> 8);
  4904  001330  501A               	movf	drawPixel@color+1,w,c
  4905  001332  EC24  F00A         	call	_write_data
  4906                           
  4907                           ;ST7735_TFT.c: 412: write_data(color & 0xFF);
  4908  001336  5019               	movf	drawPixel@color,w,c
  4909  001338  EC24  F00A         	call	_write_data
  4910  00133C                     l257:
  4911  00133C  0012               	return		;funcret
  4912  00133E                     __end_of_drawPixel:
  4913                           	opt stack 0
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon	equ	0xFF2
  4921                           intcon2	equ	0xFF1
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           postdec1	equ	0xFE5
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _setAddrWindow *****************
  4934 ;; Defined at:
  4935 ;;		line 391 in file "ST7735_TFT.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  x0              1    wreg     unsigned char 
  4938 ;;  y0              1   19[COMRAM] unsigned char 
  4939 ;;  x1              1   20[COMRAM] unsigned char 
  4940 ;;  y1              1   21[COMRAM] unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  x0              1   22[COMRAM] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;		None               void
  4945 ;; Registers used:
  4946 ;;		wreg, status,2, status,0, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4952 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;Total ram usage:        4 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    5
  4959 ;; This function calls:
  4960 ;;		_write_command
  4961 ;;		_write_data
  4962 ;; This function is called by:
  4963 ;;		_drawPixel
  4964 ;;		_drawFastVLine
  4965 ;;		_fillRectangle
  4966 ;;		_drawFastHLine
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text20
  4971  0011C8                     __ptext20:
  4972                           	opt stack 0
  4973  0011C8                     _setAddrWindow:
  4974                           	opt stack 22
  4975                           
  4976                           ;incstack = 0
  4977                           ;setAddrWindow@x0 stored from wreg
  4978  0011C8  6E17               	movwf	setAddrWindow@x0,c
  4979                           
  4980                           ;ST7735_TFT.c: 393: write_command(0x2A);
  4981  0011CA  0E2A               	movlw	42
  4982  0011CC  EC2C  F00A         	call	_write_command
  4983                           
  4984                           ;ST7735_TFT.c: 394: write_data(0);
  4985  0011D0  0E00               	movlw	0
  4986  0011D2  EC24  F00A         	call	_write_data
  4987                           
  4988                           ;ST7735_TFT.c: 395: write_data(x0 + colstart);
  4989  0011D6  5017               	movf	setAddrWindow@x0,w,c
  4990  0011D8  246A               	addwf	_colstart,w,c
  4991  0011DA  EC24  F00A         	call	_write_data
  4992                           
  4993                           ;ST7735_TFT.c: 396: write_data(0);
  4994  0011DE  0E00               	movlw	0
  4995  0011E0  EC24  F00A         	call	_write_data
  4996                           
  4997                           ;ST7735_TFT.c: 397: write_data(x1 + colstart);
  4998  0011E4  5015               	movf	setAddrWindow@x1,w,c
  4999  0011E6  246A               	addwf	_colstart,w,c
  5000  0011E8  EC24  F00A         	call	_write_data
  5001                           
  5002                           ;ST7735_TFT.c: 398: write_command(0x2B);
  5003  0011EC  0E2B               	movlw	43
  5004  0011EE  EC2C  F00A         	call	_write_command
  5005                           
  5006                           ;ST7735_TFT.c: 399: write_data(0);
  5007  0011F2  0E00               	movlw	0
  5008  0011F4  EC24  F00A         	call	_write_data
  5009                           
  5010                           ;ST7735_TFT.c: 400: write_data(y0 + rowstart);
  5011  0011F8  5014               	movf	setAddrWindow@y0,w,c
  5012  0011FA  246C               	addwf	_rowstart,w,c
  5013  0011FC  EC24  F00A         	call	_write_data
  5014                           
  5015                           ;ST7735_TFT.c: 401: write_data(0);
  5016  001200  0E00               	movlw	0
  5017  001202  EC24  F00A         	call	_write_data
  5018                           
  5019                           ;ST7735_TFT.c: 402: write_data(y1 + rowstart);
  5020  001206  5016               	movf	setAddrWindow@y1,w,c
  5021  001208  246C               	addwf	_rowstart,w,c
  5022  00120A  EC24  F00A         	call	_write_data
  5023                           
  5024                           ;ST7735_TFT.c: 403: write_command(0x2C);
  5025  00120E  0E2C               	movlw	44
  5026  001210  EC2C  F00A         	call	_write_command
  5027  001214  0012               	return		;funcret
  5028  001216                     __end_of_setAddrWindow:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           intcon2	equ	0xFF1
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           postdec1	equ	0xFE5
  5041                           fsr1l	equ	0xFE1
  5042                           indf2	equ	0xFDF
  5043                           postinc2	equ	0xFDE
  5044                           postdec2	equ	0xFDD
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function _TFT_GreenTab_Initialize *****************
  5050 ;; Defined at:
  5051 ;;		line 641 in file "ST7735_TFT.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;		None               void
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    6
  5072 ;; This function calls:
  5073 ;;		_Rcmd1
  5074 ;;		_Rcmd2red
  5075 ;;		_Rcmd3
  5076 ;;		_write_command
  5077 ;;		_write_data
  5078 ;; This function is called by:
  5079 ;;		_Initialize_Screen
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text21
  5084  001368                     __ptext21:
  5085                           	opt stack 0
  5086  001368                     _TFT_GreenTab_Initialize:
  5087                           	opt stack 23
  5088                           
  5089                           ;ST7735_TFT.c: 643: PORTCbits.RC4 = 1;
  5090                           
  5091                           ;incstack = 0
  5092  001368  8882               	bsf	3970,4,c	;volatile
  5093                           
  5094                           ;ST7735_TFT.c: 644: PORTCbits.RC2 = 0;
  5095  00136A  9482               	bcf	3970,2,c	;volatile
  5096                           
  5097                           ;ST7735_TFT.c: 646: SSPSTAT=0x80;
  5098  00136C  0E80               	movlw	128
  5099  00136E  6EC7               	movwf	4039,c	;volatile
  5100                           
  5101                           ;ST7735_TFT.c: 647: SSPCON1=0x30;
  5102  001370  0E30               	movlw	48
  5103  001372  6EC6               	movwf	4038,c	;volatile
  5104                           
  5105                           ;ST7735_TFT.c: 650: Rcmd1();
  5106  001374  ECEC  F004         	call	_Rcmd1	;wreg free
  5107                           
  5108                           ;ST7735_TFT.c: 651: Rcmd2red();
  5109  001378  EC4F  F009         	call	_Rcmd2red	;wreg free
  5110                           
  5111                           ;ST7735_TFT.c: 652: Rcmd3();
  5112  00137C  ECF9  F005         	call	_Rcmd3	;wreg free
  5113                           
  5114                           ;ST7735_TFT.c: 653: write_command(0x36);
  5115  001380  0E36               	movlw	54
  5116  001382  EC2C  F00A         	call	_write_command
  5117                           
  5118                           ;ST7735_TFT.c: 654: write_data(0xC0);
  5119  001386  0EC0               	movlw	192
  5120  001388  EC24  F00A         	call	_write_data
  5121                           
  5122                           ;ST7735_TFT.c: 655: _tft_type = 1;
  5123  00138C  0E01               	movlw	1
  5124  00138E  6E68               	movwf	__tft_type,c
  5125  001390  0012               	return		;funcret
  5126  001392                     __end_of_TFT_GreenTab_Initialize:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           intcon2	equ	0xFF1
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _Rcmd3 *****************
  5148 ;; Defined at:
  5149 ;;		line 337 in file "ST7735_TFT.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;		None
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;		None               void
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;Total ram usage:        0 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    5
  5170 ;; This function calls:
  5171 ;;		_delay_ms
  5172 ;;		_write_command
  5173 ;;		_write_data
  5174 ;; This function is called by:
  5175 ;;		_TFT_GreenTab_Initialize
  5176 ;;		_TFT_BlackTab_Initialize
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text22
  5181  000BF2                     __ptext22:
  5182                           	opt stack 0
  5183  000BF2                     _Rcmd3:
  5184                           	opt stack 23
  5185                           
  5186                           ;ST7735_TFT.c: 339: write_command(0xE0);
  5187                           
  5188                           ;incstack = 0
  5189  000BF2  0EE0               	movlw	224
  5190  000BF4  EC2C  F00A         	call	_write_command
  5191                           
  5192                           ;ST7735_TFT.c: 340: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5193  000BF8  0E02               	movlw	2
  5194  000BFA  EC24  F00A         	call	_write_data
  5195  000BFE  0E1C               	movlw	28
  5196  000C00  EC24  F00A         	call	_write_data
  5197  000C04  0E07               	movlw	7
  5198  000C06  EC24  F00A         	call	_write_data
  5199  000C0A  0E12               	movlw	18
  5200  000C0C  EC24  F00A         	call	_write_data
  5201                           
  5202                           ;ST7735_TFT.c: 341: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5203  000C10  0E37               	movlw	55
  5204  000C12  EC24  F00A         	call	_write_data
  5205  000C16  0E32               	movlw	50
  5206  000C18  EC24  F00A         	call	_write_data
  5207  000C1C  0E29               	movlw	41
  5208  000C1E  EC24  F00A         	call	_write_data
  5209  000C22  0E2D               	movlw	45
  5210  000C24  EC24  F00A         	call	_write_data
  5211                           
  5212                           ;ST7735_TFT.c: 342: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5213  000C28  0E29               	movlw	41
  5214  000C2A  EC24  F00A         	call	_write_data
  5215  000C2E  0E25               	movlw	37
  5216  000C30  EC24  F00A         	call	_write_data
  5217  000C34  0E2B               	movlw	43
  5218  000C36  EC24  F00A         	call	_write_data
  5219  000C3A  0E39               	movlw	57
  5220  000C3C  EC24  F00A         	call	_write_data
  5221                           
  5222                           ;ST7735_TFT.c: 343: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5223  000C40  0E00               	movlw	0
  5224  000C42  EC24  F00A         	call	_write_data
  5225  000C46  0E01               	movlw	1
  5226  000C48  EC24  F00A         	call	_write_data
  5227  000C4C  0E03               	movlw	3
  5228  000C4E  EC24  F00A         	call	_write_data
  5229  000C52  0E10               	movlw	16
  5230  000C54  EC24  F00A         	call	_write_data
  5231                           
  5232                           ;ST7735_TFT.c: 344: write_command(0xE1);
  5233  000C58  0EE1               	movlw	225
  5234  000C5A  EC2C  F00A         	call	_write_command
  5235                           
  5236                           ;ST7735_TFT.c: 345: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5237  000C5E  0E03               	movlw	3
  5238  000C60  EC24  F00A         	call	_write_data
  5239  000C64  0E1D               	movlw	29
  5240  000C66  EC24  F00A         	call	_write_data
  5241  000C6A  0E07               	movlw	7
  5242  000C6C  EC24  F00A         	call	_write_data
  5243  000C70  0E06               	movlw	6
  5244  000C72  EC24  F00A         	call	_write_data
  5245                           
  5246                           ;ST7735_TFT.c: 346: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5247  000C76  0E2E               	movlw	46
  5248  000C78  EC24  F00A         	call	_write_data
  5249  000C7C  0E2C               	movlw	44
  5250  000C7E  EC24  F00A         	call	_write_data
  5251  000C82  0E29               	movlw	41
  5252  000C84  EC24  F00A         	call	_write_data
  5253  000C88  0E2D               	movlw	45
  5254  000C8A  EC24  F00A         	call	_write_data
  5255                           
  5256                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5257  000C8E  0E2E               	movlw	46
  5258  000C90  EC24  F00A         	call	_write_data
  5259  000C94  0E2E               	movlw	46
  5260  000C96  EC24  F00A         	call	_write_data
  5261  000C9A  0E37               	movlw	55
  5262  000C9C  EC24  F00A         	call	_write_data
  5263  000CA0  0E3F               	movlw	63
  5264  000CA2  EC24  F00A         	call	_write_data
  5265                           
  5266                           ;ST7735_TFT.c: 348: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5267  000CA6  0E00               	movlw	0
  5268  000CA8  EC24  F00A         	call	_write_data
  5269  000CAC  0E00               	movlw	0
  5270  000CAE  EC24  F00A         	call	_write_data
  5271  000CB2  0E02               	movlw	2
  5272  000CB4  EC24  F00A         	call	_write_data
  5273  000CB8  0E10               	movlw	16
  5274  000CBA  EC24  F00A         	call	_write_data
  5275                           
  5276                           ;ST7735_TFT.c: 349: write_command(0x13);
  5277  000CBE  0E13               	movlw	19
  5278  000CC0  EC2C  F00A         	call	_write_command
  5279                           
  5280                           ;ST7735_TFT.c: 350: delay_ms(10);
  5281  000CC4  0E00               	movlw	0
  5282  000CC6  6E18               	movwf	delay_ms@ms+1,c
  5283  000CC8  0E0A               	movlw	10
  5284  000CCA  6E17               	movwf	delay_ms@ms,c
  5285  000CCC  ECBB  F008         	call	_delay_ms	;wreg free
  5286                           
  5287                           ;ST7735_TFT.c: 351: write_command(0x29);
  5288  000CD0  0E29               	movlw	41
  5289  000CD2  EC2C  F00A         	call	_write_command
  5290                           
  5291                           ;ST7735_TFT.c: 352: delay_ms(100);
  5292  000CD6  0E00               	movlw	0
  5293  000CD8  6E18               	movwf	delay_ms@ms+1,c
  5294  000CDA  0E64               	movlw	100
  5295  000CDC  6E17               	movwf	delay_ms@ms,c
  5296  000CDE  ECBB  F008         	call	_delay_ms	;wreg free
  5297  000CE2  0012               	return		;funcret
  5298  000CE4                     __end_of_Rcmd3:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           intcon2	equ	0xFF1
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _Rcmd2red *****************
  5320 ;; Defined at:
  5321 ;;		line 327 in file "ST7735_TFT.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;		None               void
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;Total ram usage:        0 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    5
  5342 ;; This function calls:
  5343 ;;		_write_command
  5344 ;;		_write_data
  5345 ;; This function is called by:
  5346 ;;		_TFT_GreenTab_Initialize
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text23
  5351  00129E                     __ptext23:
  5352                           	opt stack 0
  5353  00129E                     _Rcmd2red:
  5354                           	opt stack 23
  5355                           
  5356                           ;ST7735_TFT.c: 329: write_command(0x2A);
  5357                           
  5358                           ;incstack = 0
  5359  00129E  0E2A               	movlw	42
  5360  0012A0  EC2C  F00A         	call	_write_command
  5361                           
  5362                           ;ST7735_TFT.c: 330: write_data(0x00); write_data(0x00);
  5363  0012A4  0E00               	movlw	0
  5364  0012A6  EC24  F00A         	call	_write_data
  5365  0012AA  0E00               	movlw	0
  5366  0012AC  EC24  F00A         	call	_write_data
  5367                           
  5368                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x7F);
  5369  0012B0  0E00               	movlw	0
  5370  0012B2  EC24  F00A         	call	_write_data
  5371  0012B6  0E7F               	movlw	127
  5372  0012B8  EC24  F00A         	call	_write_data
  5373                           
  5374                           ;ST7735_TFT.c: 332: write_command(0x2B);
  5375  0012BC  0E2B               	movlw	43
  5376  0012BE  EC2C  F00A         	call	_write_command
  5377                           
  5378                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x00);
  5379  0012C2  0E00               	movlw	0
  5380  0012C4  EC24  F00A         	call	_write_data
  5381  0012C8  0E00               	movlw	0
  5382  0012CA  EC24  F00A         	call	_write_data
  5383                           
  5384                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x9F);
  5385  0012CE  0E00               	movlw	0
  5386  0012D0  EC24  F00A         	call	_write_data
  5387  0012D4  0E9F               	movlw	159
  5388  0012D6  EC24  F00A         	call	_write_data
  5389  0012DA  0012               	return		;funcret
  5390  0012DC                     __end_of_Rcmd2red:
  5391                           	opt stack 0
  5392                           tblptru	equ	0xFF8
  5393                           tblptrh	equ	0xFF7
  5394                           tblptrl	equ	0xFF6
  5395                           tablat	equ	0xFF5
  5396                           prodh	equ	0xFF4
  5397                           prodl	equ	0xFF3
  5398                           intcon	equ	0xFF2
  5399                           intcon2	equ	0xFF1
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           postdec1	equ	0xFE5
  5403                           fsr1l	equ	0xFE1
  5404                           indf2	equ	0xFDF
  5405                           postinc2	equ	0xFDE
  5406                           postdec2	equ	0xFDD
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _Rcmd1 *****************
  5412 ;; Defined at:
  5413 ;;		line 280 in file "ST7735_TFT.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    5
  5434 ;; This function calls:
  5435 ;;		_delay_ms
  5436 ;;		_write_command
  5437 ;;		_write_data
  5438 ;; This function is called by:
  5439 ;;		_TFT_GreenTab_Initialize
  5440 ;;		_TFT_BlackTab_Initialize
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text24
  5445  0009D8                     __ptext24:
  5446                           	opt stack 0
  5447  0009D8                     _Rcmd1:
  5448                           	opt stack 23
  5449                           
  5450                           ;ST7735_TFT.c: 282: write_command(0x01);
  5451                           
  5452                           ;incstack = 0
  5453  0009D8  0E01               	movlw	1
  5454  0009DA  EC2C  F00A         	call	_write_command
  5455                           
  5456                           ;ST7735_TFT.c: 283: delay_ms(150);
  5457  0009DE  0E00               	movlw	0
  5458  0009E0  6E18               	movwf	delay_ms@ms+1,c
  5459  0009E2  0E96               	movlw	150
  5460  0009E4  6E17               	movwf	delay_ms@ms,c
  5461  0009E6  ECBB  F008         	call	_delay_ms	;wreg free
  5462                           
  5463                           ;ST7735_TFT.c: 284: write_command(0x11);
  5464  0009EA  0E11               	movlw	17
  5465  0009EC  EC2C  F00A         	call	_write_command
  5466                           
  5467                           ;ST7735_TFT.c: 285: delay_ms(500);
  5468  0009F0  0E01               	movlw	1
  5469  0009F2  6E18               	movwf	delay_ms@ms+1,c
  5470  0009F4  0EF4               	movlw	244
  5471  0009F6  6E17               	movwf	delay_ms@ms,c
  5472  0009F8  ECBB  F008         	call	_delay_ms	;wreg free
  5473                           
  5474                           ;ST7735_TFT.c: 286: write_command(0xB1);
  5475  0009FC  0EB1               	movlw	177
  5476  0009FE  EC2C  F00A         	call	_write_command
  5477                           
  5478                           ;ST7735_TFT.c: 287: write_data(0x01);
  5479  000A02  0E01               	movlw	1
  5480  000A04  EC24  F00A         	call	_write_data
  5481                           
  5482                           ;ST7735_TFT.c: 288: write_data(0x2C);
  5483  000A08  0E2C               	movlw	44
  5484  000A0A  EC24  F00A         	call	_write_data
  5485                           
  5486                           ;ST7735_TFT.c: 289: write_data(0x2D);
  5487  000A0E  0E2D               	movlw	45
  5488  000A10  EC24  F00A         	call	_write_data
  5489                           
  5490                           ;ST7735_TFT.c: 290: write_command(0xB2);
  5491  000A14  0EB2               	movlw	178
  5492  000A16  EC2C  F00A         	call	_write_command
  5493                           
  5494                           ;ST7735_TFT.c: 291: write_data(0x01);
  5495  000A1A  0E01               	movlw	1
  5496  000A1C  EC24  F00A         	call	_write_data
  5497                           
  5498                           ;ST7735_TFT.c: 292: write_data(0x2C);
  5499  000A20  0E2C               	movlw	44
  5500  000A22  EC24  F00A         	call	_write_data
  5501                           
  5502                           ;ST7735_TFT.c: 293: write_data(0x2D);
  5503  000A26  0E2D               	movlw	45
  5504  000A28  EC24  F00A         	call	_write_data
  5505                           
  5506                           ;ST7735_TFT.c: 294: write_command(0xB3);
  5507  000A2C  0EB3               	movlw	179
  5508  000A2E  EC2C  F00A         	call	_write_command
  5509                           
  5510                           ;ST7735_TFT.c: 295: write_data(0x01);
  5511  000A32  0E01               	movlw	1
  5512  000A34  EC24  F00A         	call	_write_data
  5513                           
  5514                           ;ST7735_TFT.c: 296: write_data(0x2C);
  5515  000A38  0E2C               	movlw	44
  5516  000A3A  EC24  F00A         	call	_write_data
  5517                           
  5518                           ;ST7735_TFT.c: 297: write_data(0x2D);
  5519  000A3E  0E2D               	movlw	45
  5520  000A40  EC24  F00A         	call	_write_data
  5521                           
  5522                           ;ST7735_TFT.c: 298: write_data(0x01);
  5523  000A44  0E01               	movlw	1
  5524  000A46  EC24  F00A         	call	_write_data
  5525                           
  5526                           ;ST7735_TFT.c: 299: write_data(0x2C);
  5527  000A4A  0E2C               	movlw	44
  5528  000A4C  EC24  F00A         	call	_write_data
  5529                           
  5530                           ;ST7735_TFT.c: 300: write_data(0x2D);
  5531  000A50  0E2D               	movlw	45
  5532  000A52  EC24  F00A         	call	_write_data
  5533                           
  5534                           ;ST7735_TFT.c: 301: write_command(0xB4);
  5535  000A56  0EB4               	movlw	180
  5536  000A58  EC2C  F00A         	call	_write_command
  5537                           
  5538                           ;ST7735_TFT.c: 302: write_data(0x07);
  5539  000A5C  0E07               	movlw	7
  5540  000A5E  EC24  F00A         	call	_write_data
  5541                           
  5542                           ;ST7735_TFT.c: 303: write_command(0xC0);
  5543  000A62  0EC0               	movlw	192
  5544  000A64  EC2C  F00A         	call	_write_command
  5545                           
  5546                           ;ST7735_TFT.c: 304: write_data(0xA2);
  5547  000A68  0EA2               	movlw	162
  5548  000A6A  EC24  F00A         	call	_write_data
  5549                           
  5550                           ;ST7735_TFT.c: 305: write_data(0x02);
  5551  000A6E  0E02               	movlw	2
  5552  000A70  EC24  F00A         	call	_write_data
  5553                           
  5554                           ;ST7735_TFT.c: 306: write_data(0x84);
  5555  000A74  0E84               	movlw	132
  5556  000A76  EC24  F00A         	call	_write_data
  5557                           
  5558                           ;ST7735_TFT.c: 307: write_command(0xC1);
  5559  000A7A  0EC1               	movlw	193
  5560  000A7C  EC2C  F00A         	call	_write_command
  5561                           
  5562                           ;ST7735_TFT.c: 308: write_data(0xC5);
  5563  000A80  0EC5               	movlw	197
  5564  000A82  EC24  F00A         	call	_write_data
  5565                           
  5566                           ;ST7735_TFT.c: 309: write_command(0xC2);
  5567  000A86  0EC2               	movlw	194
  5568  000A88  EC2C  F00A         	call	_write_command
  5569                           
  5570                           ;ST7735_TFT.c: 310: write_data(0x0A);
  5571  000A8C  0E0A               	movlw	10
  5572  000A8E  EC24  F00A         	call	_write_data
  5573                           
  5574                           ;ST7735_TFT.c: 311: write_data(0x00);
  5575  000A92  0E00               	movlw	0
  5576  000A94  EC24  F00A         	call	_write_data
  5577                           
  5578                           ;ST7735_TFT.c: 312: write_command(0xC3);
  5579  000A98  0EC3               	movlw	195
  5580  000A9A  EC2C  F00A         	call	_write_command
  5581                           
  5582                           ;ST7735_TFT.c: 313: write_data(0x8A);
  5583  000A9E  0E8A               	movlw	138
  5584  000AA0  EC24  F00A         	call	_write_data
  5585                           
  5586                           ;ST7735_TFT.c: 314: write_data(0x2A);
  5587  000AA4  0E2A               	movlw	42
  5588  000AA6  EC24  F00A         	call	_write_data
  5589                           
  5590                           ;ST7735_TFT.c: 315: write_command(0xC4);
  5591  000AAA  0EC4               	movlw	196
  5592  000AAC  EC2C  F00A         	call	_write_command
  5593                           
  5594                           ;ST7735_TFT.c: 316: write_data(0x8A);
  5595  000AB0  0E8A               	movlw	138
  5596  000AB2  EC24  F00A         	call	_write_data
  5597                           
  5598                           ;ST7735_TFT.c: 317: write_data(0xEE);
  5599  000AB6  0EEE               	movlw	238
  5600  000AB8  EC24  F00A         	call	_write_data
  5601                           
  5602                           ;ST7735_TFT.c: 318: write_command(0xC5);
  5603  000ABC  0EC5               	movlw	197
  5604  000ABE  EC2C  F00A         	call	_write_command
  5605                           
  5606                           ;ST7735_TFT.c: 319: write_data(0x0E);
  5607  000AC2  0E0E               	movlw	14
  5608  000AC4  EC24  F00A         	call	_write_data
  5609                           
  5610                           ;ST7735_TFT.c: 320: write_command(0x20);
  5611  000AC8  0E20               	movlw	32
  5612  000ACA  EC2C  F00A         	call	_write_command
  5613                           
  5614                           ;ST7735_TFT.c: 321: write_command(0x36);
  5615  000ACE  0E36               	movlw	54
  5616  000AD0  EC2C  F00A         	call	_write_command
  5617                           
  5618                           ;ST7735_TFT.c: 322: write_data(0xC8);
  5619  000AD4  0EC8               	movlw	200
  5620  000AD6  EC24  F00A         	call	_write_data
  5621                           
  5622                           ;ST7735_TFT.c: 323: write_command(0x3A);
  5623  000ADA  0E3A               	movlw	58
  5624  000ADC  EC2C  F00A         	call	_write_command
  5625                           
  5626                           ;ST7735_TFT.c: 324: write_data(0x05);
  5627  000AE0  0E05               	movlw	5
  5628  000AE2  EC24  F00A         	call	_write_data
  5629  000AE6  0012               	return		;funcret
  5630  000AE8                     __end_of_Rcmd1:
  5631                           	opt stack 0
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           intcon	equ	0xFF2
  5639                           intcon2	equ	0xFF1
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postdec1	equ	0xFE5
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _write_data *****************
  5652 ;; Defined at:
  5653 ;;		line 208 in file "ST7735_TFT.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  data_           1    wreg     unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  data_           1   18[COMRAM] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;		None               void
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;Total ram usage:        1 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    4
  5674 ;; This function calls:
  5675 ;;		_spiwrite
  5676 ;; This function is called by:
  5677 ;;		_Rcmd1
  5678 ;;		_Rcmd2red
  5679 ;;		_Rcmd3
  5680 ;;		_setAddrWindow
  5681 ;;		_drawPixel
  5682 ;;		_TFT_GreenTab_Initialize
  5683 ;;		_Bcmd
  5684 ;;		_setScrollDefinition
  5685 ;;		_Rcmd2green
  5686 ;;		_VerticalScroll
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text25
  5691  001448                     __ptext25:
  5692                           	opt stack 0
  5693  001448                     _write_data:
  5694                           	opt stack 22
  5695                           
  5696                           ;incstack = 0
  5697                           ;write_data@data_ stored from wreg
  5698  001448  6E13               	movwf	write_data@data_,c
  5699                           
  5700                           ;ST7735_TFT.c: 210: PORTCbits.RC4 = 0;
  5701  00144A  9882               	bcf	3970,4,c	;volatile
  5702                           
  5703                           ;ST7735_TFT.c: 211: PORTCbits.RC2 = 1;
  5704  00144C  8482               	bsf	3970,2,c	;volatile
  5705                           
  5706                           ;ST7735_TFT.c: 212: spiwrite(data_);
  5707  00144E  5013               	movf	write_data@data_,w,c
  5708  001450  EC11  F00A         	call	_spiwrite
  5709                           
  5710                           ;ST7735_TFT.c: 213: PORTCbits.RC4 = 1;
  5711  001454  8882               	bsf	3970,4,c	;volatile
  5712  001456  0012               	return		;funcret
  5713  001458                     __end_of_write_data:
  5714                           	opt stack 0
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           intcon	equ	0xFF2
  5722                           intcon2	equ	0xFF1
  5723                           postinc0	equ	0xFEE
  5724                           wreg	equ	0xFE8
  5725                           postdec1	equ	0xFE5
  5726                           fsr1l	equ	0xFE1
  5727                           indf2	equ	0xFDF
  5728                           postinc2	equ	0xFDE
  5729                           postdec2	equ	0xFDD
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _write_command *****************
  5735 ;; Defined at:
  5736 ;;		line 197 in file "ST7735_TFT.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  cmd_            1    wreg     unsigned char 
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  cmd_            1   18[COMRAM] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;		None               void
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;Total ram usage:        1 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    4
  5757 ;; This function calls:
  5758 ;;		_spiwrite
  5759 ;; This function is called by:
  5760 ;;		_Rcmd1
  5761 ;;		_Rcmd2red
  5762 ;;		_Rcmd3
  5763 ;;		_setAddrWindow
  5764 ;;		_TFT_GreenTab_Initialize
  5765 ;;		_Bcmd
  5766 ;;		_setScrollDefinition
  5767 ;;		_Rcmd2green
  5768 ;;		_VerticalScroll
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text26
  5773  001458                     __ptext26:
  5774                           	opt stack 0
  5775  001458                     _write_command:
  5776                           	opt stack 22
  5777                           
  5778                           ;incstack = 0
  5779                           ;write_command@cmd_ stored from wreg
  5780  001458  6E13               	movwf	write_command@cmd_,c
  5781                           
  5782                           ;ST7735_TFT.c: 199: PORTCbits.RC4 = 0;
  5783  00145A  9882               	bcf	3970,4,c	;volatile
  5784                           
  5785                           ;ST7735_TFT.c: 201: PORTCbits.RC2 = 0;
  5786  00145C  9482               	bcf	3970,2,c	;volatile
  5787                           
  5788                           ;ST7735_TFT.c: 202: spiwrite(cmd_);
  5789  00145E  5013               	movf	write_command@cmd_,w,c
  5790  001460  EC11  F00A         	call	_spiwrite
  5791                           
  5792                           ;ST7735_TFT.c: 204: PORTCbits.RC4 = 1;
  5793  001464  8882               	bsf	3970,4,c	;volatile
  5794  001466  0012               	return		;funcret
  5795  001468                     __end_of_write_command:
  5796                           	opt stack 0
  5797                           tblptru	equ	0xFF8
  5798                           tblptrh	equ	0xFF7
  5799                           tblptrl	equ	0xFF6
  5800                           tablat	equ	0xFF5
  5801                           prodh	equ	0xFF4
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           intcon2	equ	0xFF1
  5805                           postinc0	equ	0xFEE
  5806                           wreg	equ	0xFE8
  5807                           postdec1	equ	0xFE5
  5808                           fsr1l	equ	0xFE1
  5809                           indf2	equ	0xFDF
  5810                           postinc2	equ	0xFDE
  5811                           postdec2	equ	0xFDD
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _spiwrite *****************
  5817 ;; Defined at:
  5818 ;;		line 188 in file "ST7735_TFT.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  spidata         1    wreg     unsigned char 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  spidata         1   17[COMRAM] unsigned char 
  5823 ;;  x               1   16[COMRAM] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;		None               void
  5826 ;; Registers used:
  5827 ;;		wreg
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;Total ram usage:        2 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    3
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_write_command
  5844 ;;		_write_data
  5845 ;;		_drawFastVLine
  5846 ;;		_fillRectangle
  5847 ;;		_drawFastHLine
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text27
  5852  001422                     __ptext27:
  5853                           	opt stack 0
  5854  001422                     _spiwrite:
  5855                           	opt stack 24
  5856                           
  5857                           ;incstack = 0
  5858                           ;spiwrite@spidata stored from wreg
  5859  001422  6E12               	movwf	spiwrite@spidata,c
  5860                           
  5861                           ;ST7735_TFT.c: 190: char x;
  5862                           ;ST7735_TFT.c: 191: PIR1bits.SSPIF = 0;
  5863  001424  969E               	bcf	3998,3,c	;volatile
  5864                           
  5865                           ;ST7735_TFT.c: 192: x = SSPBUF;
  5866  001426  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5867                           
  5868                           ;ST7735_TFT.c: 193: SSPBUF = spidata;
  5869  00142A  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5870                           
  5871                           ;ST7735_TFT.c: 194: while (!SSPSTATbits.BF);
  5872  00142E  D000               	goto	l213
  5873  001430                     l213:
  5874  001430  A0C7               	btfss	4039,0,c	;volatile
  5875  001432  D7FE               	goto	l213
  5876  001434  0012               	return		;funcret
  5877  001436                     __end_of_spiwrite:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           intcon2	equ	0xFF1
  5887                           postinc0	equ	0xFEE
  5888                           wreg	equ	0xFE8
  5889                           postdec1	equ	0xFE5
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _LCD_Reset *****************
  5899 ;; Defined at:
  5900 ;;		line 216 in file "ST7735_TFT.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;		None               void
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    5
  5921 ;; This function calls:
  5922 ;;		_delay_ms
  5923 ;; This function is called by:
  5924 ;;		_Initialize_Screen
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text28
  5929  001436                     __ptext28:
  5930                           	opt stack 0
  5931  001436                     _LCD_Reset:
  5932                           	opt stack 24
  5933                           
  5934                           ;ST7735_TFT.c: 218: PORTCbits.RC1 = 0;
  5935                           
  5936                           ;incstack = 0
  5937  001436  9282               	bcf	3970,1,c	;volatile
  5938                           
  5939                           ;ST7735_TFT.c: 219: delay_ms(100);
  5940  001438  0E00               	movlw	0
  5941  00143A  6E18               	movwf	delay_ms@ms+1,c
  5942  00143C  0E64               	movlw	100
  5943  00143E  6E17               	movwf	delay_ms@ms,c
  5944  001440  ECBB  F008         	call	_delay_ms	;wreg free
  5945                           
  5946                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 1;
  5947  001444  8282               	bsf	3970,1,c	;volatile
  5948  001446  0012               	return		;funcret
  5949  001448                     __end_of_LCD_Reset:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           postdec1	equ	0xFE5
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _delay_ms *****************
  5971 ;; Defined at:
  5972 ;;		line 63 in file "ST7735_TFT.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;  ms              2   22[COMRAM] int 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  count           2   26[COMRAM] int 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;		None               void
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        6 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    4
  5993 ;; This function calls:
  5994 ;;		___wmul
  5995 ;; This function is called by:
  5996 ;;		_LCD_Reset
  5997 ;;		_Rcmd1
  5998 ;;		_Rcmd3
  5999 ;;		_Bcmd
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text29
  6004  001176                     __ptext29:
  6005                           	opt stack 0
  6006  001176                     _delay_ms:
  6007                           	opt stack 23
  6008                           
  6009                           ;ST7735_TFT.c: 69: int count;
  6010                           ;ST7735_TFT.c: 70: count = 8000000/4000/8 * ms;
  6011                           
  6012                           ;incstack = 0
  6013  001176  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6014  00117A  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6015  00117E  0E00               	movlw	0
  6016  001180  6E14               	movwf	___wmul@multiplicand+1,c
  6017  001182  0EFA               	movlw	250
  6018  001184  6E13               	movwf	___wmul@multiplicand,c
  6019  001186  ECC9  F009         	call	___wmul	;wreg free
  6020  00118A  C011  F01B         	movff	?___wmul,delay_ms@count
  6021  00118E  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6022                           
  6023                           ;ST7735_TFT.c: 71: count = (0xffff - count);
  6024  001192  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6025  001196  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6026  00119A  1E19               	comf	??_delay_ms,f,c
  6027  00119C  1E1A               	comf	??_delay_ms+1,f,c
  6028  00119E  4A19               	infsnz	??_delay_ms,f,c
  6029  0011A0  2A1A               	incf	??_delay_ms+1,f,c
  6030  0011A2  0EFF               	movlw	255
  6031  0011A4  2419               	addwf	??_delay_ms,w,c
  6032  0011A6  6E1B               	movwf	delay_ms@count,c
  6033  0011A8  0EFF               	movlw	255
  6034  0011AA  201A               	addwfc	??_delay_ms+1,w,c
  6035  0011AC  6E1C               	movwf	delay_ms@count+1,c
  6036                           
  6037                           ;ST7735_TFT.c: 73: T3CON = 0xb8;
  6038  0011AE  0EB8               	movlw	184
  6039  0011B0  6EB1               	movwf	4017,c	;volatile
  6040                           
  6041                           ;ST7735_TFT.c: 75: TMR3L = count & 0x00ff;
  6042  0011B2  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6043                           
  6044                           ;ST7735_TFT.c: 76: TMR3H = count >> 8;
  6045  0011B6  501C               	movf	delay_ms@count+1,w,c
  6046  0011B8  6EB3               	movwf	4019,c	;volatile
  6047                           
  6048                           ;ST7735_TFT.c: 78: PIR2bits.TMR3IF = 0;
  6049  0011BA  92A1               	bcf	4001,1,c	;volatile
  6050                           
  6051                           ;ST7735_TFT.c: 79: T3CONbits.TMR3ON = 1;
  6052  0011BC  80B1               	bsf	4017,0,c	;volatile
  6053                           
  6054                           ;ST7735_TFT.c: 81: while (PIR2bits.TMR3IF == 0);
  6055  0011BE  D000               	goto	l203
  6056  0011C0                     l203:
  6057  0011C0  A2A1               	btfss	4001,1,c	;volatile
  6058  0011C2  D7FE               	goto	l203
  6059                           
  6060                           ;ST7735_TFT.c: 82: T3CONbits.TMR3ON = 0;
  6061  0011C4  90B1               	bcf	4017,0,c	;volatile
  6062  0011C6  0012               	return		;funcret
  6063  0011C8                     __end_of_delay_ms:
  6064                           	opt stack 0
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           intcon	equ	0xFF2
  6072                           intcon2	equ	0xFF1
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           postdec1	equ	0xFE5
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___wmul *****************
  6085 ;; Defined at:
  6086 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  multiplier      2   16[COMRAM] unsigned int 
  6089 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  product         2   20[COMRAM] unsigned int 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  2   16[COMRAM] unsigned int 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, prodl, prodh
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;Total ram usage:        6 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    3
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_delay_ms
  6112 ;;		_drawChar
  6113 ;;		_printf
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text30
  6118  001392                     __ptext30:
  6119                           	opt stack 0
  6120  001392                     ___wmul:
  6121                           	opt stack 26
  6122                           
  6123                           ;incstack = 0
  6124  001392  5011               	movf	___wmul@multiplier,w,c
  6125  001394  0213               	mulwf	___wmul@multiplicand,c
  6126  001396  CFF3 F015          	movff	prodl,___wmul@product
  6127  00139A  CFF4 F016          	movff	prodh,___wmul@product+1
  6128  00139E  5011               	movf	___wmul@multiplier,w,c
  6129  0013A0  0214               	mulwf	___wmul@multiplicand+1,c
  6130  0013A2  50F3               	movf	prodl,w,c
  6131  0013A4  2616               	addwf	___wmul@product+1,f,c
  6132  0013A6  5012               	movf	___wmul@multiplier+1,w,c
  6133  0013A8  0213               	mulwf	___wmul@multiplicand,c
  6134  0013AA  50F3               	movf	prodl,w,c
  6135  0013AC  2616               	addwf	___wmul@product+1,f,c
  6136  0013AE  C015  F011         	movff	___wmul@product,?___wmul
  6137  0013B2  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6138  0013B6  D000               	goto	l465
  6139  0013B8                     l465:
  6140  0013B8  0012               	return		;funcret
  6141  0013BA                     __end_of___wmul:
  6142                           	opt stack 0
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           intcon2	equ	0xFF1
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           postdec1	equ	0xFE5
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           fsr2h	equ	0xFDA
  6159                           fsr2l	equ	0xFD9
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _chkisr *****************
  6163 ;; Defined at:
  6164 ;;		line 91 in file "Lab10p1.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;		None               void
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;Total ram usage:       14 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    2
  6185 ;; This function calls:
  6186 ;;		_INT0_isr
  6187 ;;		_TIMER1_isr
  6188 ;; This function is called by:
  6189 ;;		Interrupt level 2
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	intcode
  6194  000008                     __pintcode:
  6195                           	opt stack 0
  6196  000008                     _chkisr:
  6197                           	opt stack 20
  6198                           
  6199                           ;incstack = 0
  6200  000008  CFFA F003          	movff	pclath,??_chkisr
  6201  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6202  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6203  000014  EDF2  F007         	call	int_func,f	;refresh shadow registers
  6204                           pclatu	equ	0xFFB
  6205                           pclath	equ	0xFFA
  6206                           tblptru	equ	0xFF8
  6207                           tblptrh	equ	0xFF7
  6208                           tblptrl	equ	0xFF6
  6209                           tablat	equ	0xFF5
  6210                           prodh	equ	0xFF4
  6211                           prodl	equ	0xFF3
  6212                           intcon	equ	0xFF2
  6213                           intcon2	equ	0xFF1
  6214                           postinc0	equ	0xFEE
  6215                           fsr0l	equ	0xFE9
  6216                           wreg	equ	0xFE8
  6217                           postdec1	equ	0xFE5
  6218                           fsr1l	equ	0xFE1
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226                           	psect	intcode_body
  6227  000FE4                     __pintcode_body:
  6228                           	opt stack 20
  6229  000FE4                     int_func:
  6230                           	opt stack 20
  6231  000FE4  0006               	pop		; remove dummy address from shadow register refresh
  6232  000FE6  CFEA F006          	movff	fsr0h,??_chkisr+3
  6233  000FEA  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6234  000FEE  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6235  000FF2  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6236  000FF6  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6237  000FFA  CFF3 F00B          	movff	prodl,??_chkisr+8
  6238  000FFE  CFF4 F00C          	movff	prodh,??_chkisr+9
  6239  001002  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6240  001006  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6241  00100A  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6242  00100E  CFF5 F010          	movff	tablat,??_chkisr+13
  6243                           
  6244                           ;Lab10p1.c: 93: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6245  001012  A09E               	btfss	3998,0,c	;volatile
  6246  001014  D003               	goto	i2l1819
  6247  001016  EC3B  F00A         	call	_TIMER1_isr	;wreg free
  6248  00101A  D000               	goto	i2l1819
  6249  00101C                     i2l1819:
  6250                           
  6251                           ;Lab10p1.c: 94: if (INTCONbits.INT0IF == 1) INT0_isr();
  6252  00101C  A2F2               	btfss	intcon,1,c	;volatile
  6253  00101E  D003               	goto	i2l100
  6254  001020  ECF2  F002         	call	_INT0_isr	;wreg free
  6255  001024  D000               	goto	i2l100
  6256  001026                     i2l100:
  6257  001026  C010  FFF5         	movff	??_chkisr+13,tablat
  6258  00102A  C00F  FFF8         	movff	??_chkisr+12,tblptru
  6259  00102E  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  6260  001032  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  6261  001036  C00C  FFF4         	movff	??_chkisr+9,prodh
  6262  00103A  C00B  FFF3         	movff	??_chkisr+8,prodl
  6263  00103E  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  6264  001042  C009  FFD9         	movff	??_chkisr+6,fsr2l
  6265  001046  C008  FFE2         	movff	??_chkisr+5,fsr1h
  6266  00104A  C007  FFE1         	movff	??_chkisr+4,fsr1l
  6267  00104E  C006  FFEA         	movff	??_chkisr+3,fsr0h
  6268  001052  C005  FFE9         	movff	??_chkisr+2,fsr0l
  6269  001056  C004  FFFB         	movff	??_chkisr+1,pclatu
  6270  00105A  C003  FFFA         	movff	??_chkisr,pclath
  6271  00105E  0011               	retfie		f
  6272  001060                     __end_of_chkisr:
  6273                           	opt stack 0
  6274                           pclatu	equ	0xFFB
  6275                           pclath	equ	0xFFA
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           intcon2	equ	0xFF1
  6284                           postinc0	equ	0xFEE
  6285                           fsr0h	equ	0xFEA
  6286                           fsr0l	equ	0xFE9
  6287                           wreg	equ	0xFE8
  6288                           postdec1	equ	0xFE5
  6289                           fsr1h	equ	0xFE2
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _TIMER1_isr *****************
  6299 ;; Defined at:
  6300 ;;		line 97 in file "Lab10p1.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, status,2
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_chkisr
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text32
  6328  001476                     __ptext32:
  6329                           	opt stack 0
  6330  001476                     _TIMER1_isr:
  6331                           	opt stack 21
  6332                           
  6333                           ;Lab10p1.c: 99: Nec_state = 0;
  6334                           
  6335                           ;incstack = 0
  6336  001476  0E00               	movlw	0
  6337  001478  6E67               	movwf	_Nec_state,c
  6338                           
  6339                           ;Lab10p1.c: 100: INTCON2bits.INTEDG0 = 0;
  6340  00147A  9CF1               	bcf	intcon2,6,c	;volatile
  6341                           
  6342                           ;Lab10p1.c: 101: T1CONbits.TMR1ON = 0;
  6343  00147C  90CD               	bcf	4045,0,c	;volatile
  6344                           
  6345                           ;Lab10p1.c: 102: PIR1bits.TMR1IF = 0;
  6346  00147E  909E               	bcf	3998,0,c	;volatile
  6347  001480  0012               	return		;funcret
  6348  001482                     __end_of_TIMER1_isr:
  6349                           	opt stack 0
  6350                           pclatu	equ	0xFFB
  6351                           pclath	equ	0xFFA
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           intcon2	equ	0xFF1
  6360                           postinc0	equ	0xFEE
  6361                           fsr0h	equ	0xFEA
  6362                           fsr0l	equ	0xFE9
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           fsr2h	equ	0xFDA
  6371                           fsr2l	equ	0xFD9
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function _INT0_isr *****************
  6375 ;; Defined at:
  6376 ;;		line 141 in file "Lab10p1.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;		None
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;		None
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    1
  6397 ;; This function calls:
  6398 ;;		_force_nec_state0
  6399 ;; This function is called by:
  6400 ;;		_chkisr
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           	psect	text33
  6405  0005E4                     __ptext33:
  6406                           	opt stack 0
  6407  0005E4                     _INT0_isr:
  6408                           	opt stack 20
  6409                           
  6410                           ;Lab10p1.c: 143: INTCONbits.INT0IF = 0;
  6411                           
  6412                           ;incstack = 0
  6413  0005E4  92F2               	bcf	intcon,1,c	;volatile
  6414                           
  6415                           ;Lab10p1.c: 144: if (Nec_state != 0)
  6416  0005E6  5067               	movf	_Nec_state,w,c
  6417  0005E8  B4D8               	btfsc	status,2,c
  6418  0005EA  D09D               	goto	i2l1639
  6419                           
  6420                           ;Lab10p1.c: 145: {
  6421                           ;Lab10p1.c: 146: Time_Elapsed = (TMR1H << 8) | TMR1L;
  6422  0005EC  50CE               	movf	4046,w,c	;volatile
  6423  0005EE  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  6424  0005F2  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  6425  0005F4  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  6426  0005F8  6A01               	clrf	??_INT0_isr,c
  6427  0005FA  1001               	iorwf	??_INT0_isr,w,c
  6428  0005FC  6E5E               	movwf	_Time_Elapsed,c
  6429  0005FE  5002               	movf	??_INT0_isr+1,w,c
  6430  000600  6E5F               	movwf	_Time_Elapsed+1,c
  6431                           
  6432                           ;Lab10p1.c: 147: TMR1H = 0;
  6433  000602  0E00               	movlw	0
  6434  000604  6ECF               	movwf	4047,c	;volatile
  6435                           
  6436                           ;Lab10p1.c: 148: TMR1L = 0;
  6437  000606  0E00               	movlw	0
  6438  000608  6ECE               	movwf	4046,c	;volatile
  6439                           
  6440                           ;Lab10p1.c: 149: }
  6441                           ;Lab10p1.c: 151: switch(Nec_state)
  6442  00060A  D08D               	goto	i2l1639
  6443  00060C                     i2l1567:
  6444                           
  6445                           ;Lab10p1.c: 154: {
  6446                           ;Lab10p1.c: 156: TMR1H = 0;
  6447  00060C  0E00               	movlw	0
  6448  00060E  6ECF               	movwf	4047,c	;volatile
  6449                           
  6450                           ;Lab10p1.c: 157: TMR1L = 0;
  6451  000610  0E00               	movlw	0
  6452  000612  6ECE               	movwf	4046,c	;volatile
  6453                           
  6454                           ;Lab10p1.c: 158: PIR1bits.TMR1IF = 0;
  6455  000614  909E               	bcf	3998,0,c	;volatile
  6456                           
  6457                           ;Lab10p1.c: 159: T1CON= 0x90;
  6458  000616  0E90               	movlw	144
  6459  000618  6ECD               	movwf	4045,c	;volatile
  6460                           
  6461                           ;Lab10p1.c: 160: T1CONbits.TMR1ON = 1;
  6462  00061A  80CD               	bsf	4045,0,c	;volatile
  6463                           
  6464                           ;Lab10p1.c: 161: bit_count = 0;
  6465  00061C  0E00               	movlw	0
  6466  00061E  6E69               	movwf	_bit_count,c
  6467                           
  6468                           ;Lab10p1.c: 162: Nec_code = 0;
  6469  000620  0E00               	movlw	0
  6470  000622  6E5A               	movwf	_Nec_code,c
  6471  000624  0E00               	movlw	0
  6472  000626  6E5B               	movwf	_Nec_code+1,c
  6473  000628  0E00               	movlw	0
  6474  00062A  6E5C               	movwf	_Nec_code+2,c
  6475  00062C  0E00               	movlw	0
  6476  00062E  6E5D               	movwf	_Nec_code+3,c
  6477                           
  6478                           ;Lab10p1.c: 163: Nec_state = 1;
  6479  000630  0E01               	movlw	1
  6480  000632  6E67               	movwf	_Nec_state,c
  6481  000634  D076               	goto	i2l1633
  6482                           
  6483                           ;Lab10p1.c: 165: return;
  6484                           
  6485                           ;Lab10p1.c: 164: INTCON2bits.INTEDG0 = 1;
  6486  000636  D088               	goto	i2l134
  6487  000638                     i2l1577:
  6488                           
  6489                           ;Lab10p1.c: 169: {
  6490                           ;Lab10p1.c: 170: if ((Time_Elapsed >=8500) && (Time_Elapsed <=9500))
  6491  000638  0E34               	movlw	52
  6492  00063A  5C5E               	subwf	_Time_Elapsed,w,c
  6493  00063C  0E21               	movlw	33
  6494  00063E  585F               	subwfb	_Time_Elapsed+1,w,c
  6495  000640  A0D8               	btfss	status,0,c
  6496  000642  D009               	goto	i2l1583
  6497  000644  0E1D               	movlw	29
  6498  000646  5C5E               	subwf	_Time_Elapsed,w,c
  6499  000648  0E25               	movlw	37
  6500  00064A  585F               	subwfb	_Time_Elapsed+1,w,c
  6501  00064C  B0D8               	btfsc	status,0,c
  6502  00064E  D003               	goto	i2l1583
  6503                           
  6504                           ;Lab10p1.c: 171: {
  6505                           ;Lab10p1.c: 172: Nec_state = 2;
  6506  000650  0E02               	movlw	2
  6507  000652  6E67               	movwf	_Nec_state,c
  6508                           
  6509                           ;Lab10p1.c: 173: }
  6510  000654  D02A               	goto	i2l1607
  6511  000656                     i2l1583:
  6512                           
  6513                           ;Lab10p1.c: 174: else
  6514                           ;Lab10p1.c: 175: {
  6515                           ;Lab10p1.c: 176: force_nec_state0();
  6516  000656  EC41  F00A         	call	_force_nec_state0	;wreg free
  6517  00065A  D027               	goto	i2l1607
  6518  00065C  D026               	goto	i2l1607
  6519                           
  6520                           ;Lab10p1.c: 179: return;
  6521                           
  6522                           ;Lab10p1.c: 177: }
  6523                           ;Lab10p1.c: 178: INTCON2bits.INTEDG0 = 0;
  6524  00065E  D074               	goto	i2l134
  6525  000660                     i2l1589:
  6526                           
  6527                           ;Lab10p1.c: 183: {
  6528                           ;Lab10p1.c: 184: if ((Time_Elapsed >=4000) && (Time_Elapsed <=5000))
  6529  000660  0EA0               	movlw	160
  6530  000662  5C5E               	subwf	_Time_Elapsed,w,c
  6531  000664  0E0F               	movlw	15
  6532  000666  585F               	subwfb	_Time_Elapsed+1,w,c
  6533  000668  A0D8               	btfss	status,0,c
  6534  00066A  D009               	goto	i2l1595
  6535  00066C  0E89               	movlw	137
  6536  00066E  5C5E               	subwf	_Time_Elapsed,w,c
  6537  000670  0E13               	movlw	19
  6538  000672  585F               	subwfb	_Time_Elapsed+1,w,c
  6539  000674  B0D8               	btfsc	status,0,c
  6540  000676  D003               	goto	i2l1595
  6541                           
  6542                           ;Lab10p1.c: 185: {
  6543                           ;Lab10p1.c: 186: Nec_state = 3;
  6544  000678  0E03               	movlw	3
  6545  00067A  6E67               	movwf	_Nec_state,c
  6546                           
  6547                           ;Lab10p1.c: 187: }
  6548  00067C  D003               	goto	i2l1597
  6549  00067E                     i2l1595:
  6550                           
  6551                           ;Lab10p1.c: 188: else
  6552                           ;Lab10p1.c: 189: {
  6553                           ;Lab10p1.c: 190: force_nec_state0();
  6554  00067E  EC41  F00A         	call	_force_nec_state0	;wreg free
  6555  000682  D000               	goto	i2l1597
  6556  000684                     i2l1597:
  6557                           
  6558                           ;Lab10p1.c: 191: }
  6559                           ;Lab10p1.c: 192: INTCON2bits.INTEDG0 = 1;
  6560  000684  8CF1               	bsf	intcon2,6,c	;volatile
  6561  000686  D000               	goto	i2l1599
  6562  000688                     i2l1599:
  6563                           
  6564                           ;Lab10p1.c: 197: {
  6565                           ;Lab10p1.c: 198: if ((Time_Elapsed >=400) && (Time_Elapsed <=700))
  6566  000688  0E90               	movlw	144
  6567  00068A  5C5E               	subwf	_Time_Elapsed,w,c
  6568  00068C  0E01               	movlw	1
  6569  00068E  585F               	subwfb	_Time_Elapsed+1,w,c
  6570  000690  A0D8               	btfss	status,0,c
  6571  000692  D008               	goto	i2l1605
  6572  000694  0EBD               	movlw	189
  6573  000696  5C5E               	subwf	_Time_Elapsed,w,c
  6574  000698  0E02               	movlw	2
  6575  00069A  585F               	subwfb	_Time_Elapsed+1,w,c
  6576  00069C  B0D8               	btfsc	status,0,c
  6577  00069E  D002               	goto	i2l1605
  6578                           
  6579                           ;Lab10p1.c: 199: {
  6580                           ;Lab10p1.c: 200: Nec_state = 4;
  6581  0006A0  0E04               	movlw	4
  6582  0006A2  D7D7               	goto	L3
  6583  0006A4                     i2l1605:
  6584                           
  6585                           ;Lab10p1.c: 202: else
  6586                           ;Lab10p1.c: 203: {
  6587                           ;Lab10p1.c: 204: force_nec_state0();
  6588  0006A4  EC41  F00A         	call	_force_nec_state0	;wreg free
  6589  0006A8  D000               	goto	i2l1607
  6590  0006AA                     i2l1607:
  6591                           
  6592                           ;Lab10p1.c: 205: }
  6593                           ;Lab10p1.c: 206: INTCON2bits.INTEDG0 = 0;
  6594  0006AA  9CF1               	bcf	intcon2,6,c	;volatile
  6595                           
  6596                           ;Lab10p1.c: 207: return;
  6597  0006AC  D04D               	goto	i2l134
  6598  0006AE                     i2l1611:
  6599                           
  6600                           ;Lab10p1.c: 211: {
  6601                           ;Lab10p1.c: 212: if ((Time_Elapsed >=400) && (Time_Elapsed <=1800))
  6602  0006AE  0E90               	movlw	144
  6603  0006B0  5C5E               	subwf	_Time_Elapsed,w,c
  6604  0006B2  0E01               	movlw	1
  6605  0006B4  585F               	subwfb	_Time_Elapsed+1,w,c
  6606  0006B6  A0D8               	btfss	status,0,c
  6607  0006B8  D031               	goto	i2l1631
  6608  0006BA  0E09               	movlw	9
  6609  0006BC  5C5E               	subwf	_Time_Elapsed,w,c
  6610  0006BE  0E07               	movlw	7
  6611  0006C0  585F               	subwfb	_Time_Elapsed+1,w,c
  6612  0006C2  B0D8               	btfsc	status,0,c
  6613  0006C4  D02B               	goto	i2l1631
  6614                           
  6615                           ;Lab10p1.c: 213: {
  6616                           ;Lab10p1.c: 214: Nec_code = Nec_code << 1;
  6617  0006C6  90D8               	bcf	status,0,c
  6618  0006C8  345A               	rlcf	_Nec_code,w,c
  6619  0006CA  6E5A               	movwf	_Nec_code,c
  6620  0006CC  345B               	rlcf	_Nec_code+1,w,c
  6621  0006CE  6E5B               	movwf	_Nec_code+1,c
  6622  0006D0  345C               	rlcf	_Nec_code+2,w,c
  6623  0006D2  6E5C               	movwf	_Nec_code+2,c
  6624  0006D4  345D               	rlcf	_Nec_code+3,w,c
  6625  0006D6  6E5D               	movwf	_Nec_code+3,c
  6626                           
  6627                           ;Lab10p1.c: 215: if (Time_Elapsed > 1000)
  6628  0006D8  0EE9               	movlw	233
  6629  0006DA  5C5E               	subwf	_Time_Elapsed,w,c
  6630  0006DC  0E03               	movlw	3
  6631  0006DE  585F               	subwfb	_Time_Elapsed+1,w,c
  6632  0006E0  A0D8               	btfss	status,0,c
  6633  0006E2  D00D               	goto	i2l1619
  6634                           
  6635                           ;Lab10p1.c: 216: {
  6636                           ;Lab10p1.c: 217: Nec_code = Nec_code +1;
  6637  0006E4  0E01               	movlw	1
  6638  0006E6  245A               	addwf	_Nec_code,w,c
  6639  0006E8  6E5A               	movwf	_Nec_code,c
  6640  0006EA  0E00               	movlw	0
  6641  0006EC  205B               	addwfc	_Nec_code+1,w,c
  6642  0006EE  6E5B               	movwf	_Nec_code+1,c
  6643  0006F0  0E00               	movlw	0
  6644  0006F2  205C               	addwfc	_Nec_code+2,w,c
  6645  0006F4  6E5C               	movwf	_Nec_code+2,c
  6646  0006F6  0E00               	movlw	0
  6647  0006F8  205D               	addwfc	_Nec_code+3,w,c
  6648  0006FA  6E5D               	movwf	_Nec_code+3,c
  6649  0006FC  D000               	goto	i2l1619
  6650  0006FE                     i2l1619:
  6651                           
  6652                           ;Lab10p1.c: 218: }
  6653                           ;Lab10p1.c: 220: bit_count ++;
  6654  0006FE  2A69               	incf	_bit_count,f,c
  6655                           
  6656                           ;Lab10p1.c: 221: if (bit_count > 31)
  6657  000700  0E1F               	movlw	31
  6658  000702  6469               	cpfsgt	_bit_count,c
  6659  000704  D008               	goto	i2l1629
  6660                           
  6661                           ;Lab10p1.c: 222: {
  6662                           ;Lab10p1.c: 223: nec_ok = 1;
  6663  000706  0E00               	movlw	0
  6664  000708  6E63               	movwf	_nec_ok+1,c
  6665  00070A  0E01               	movlw	1
  6666  00070C  6E62               	movwf	_nec_ok,c
  6667                           
  6668                           ;Lab10p1.c: 224: INTCONbits.INT0IE = 0;
  6669  00070E  98F2               	bcf	intcon,4,c	;volatile
  6670                           
  6671                           ;Lab10p1.c: 225: force_nec_state0();
  6672  000710  EC41  F00A         	call	_force_nec_state0	;wreg free
  6673  000714  D000               	goto	i2l1629
  6674  000716                     i2l1629:
  6675                           
  6676                           ;Lab10p1.c: 226: }
  6677                           ;Lab10p1.c: 227: Nec_state = 3;
  6678  000716  0E03               	movlw	3
  6679  000718  6E67               	movwf	_Nec_state,c
  6680                           
  6681                           ;Lab10p1.c: 228: }
  6682  00071A  D003               	goto	i2l1633
  6683  00071C                     i2l1631:
  6684                           
  6685                           ;Lab10p1.c: 229: else
  6686                           ;Lab10p1.c: 230: {
  6687                           ;Lab10p1.c: 231: force_nec_state0();
  6688  00071C  EC41  F00A         	call	_force_nec_state0	;wreg free
  6689  000720  D000               	goto	i2l1633
  6690  000722                     i2l1633:
  6691                           
  6692                           ;Lab10p1.c: 232: }
  6693                           ;Lab10p1.c: 233: INTCON2bits.INTEDG0 = 1;
  6694  000722  8CF1               	bsf	intcon2,6,c	;volatile
  6695                           
  6696                           ;Lab10p1.c: 235: }
  6697                           ;Lab10p1.c: 236: }
  6698                           
  6699                           ;Lab10p1.c: 234: return;
  6700  000724  D011               	goto	i2l134
  6701  000726                     i2l1639:
  6702  000726  5067               	movf	_Nec_state,w,c
  6703                           
  6704                           ; Switch size 1, requested type "space"
  6705                           ; Number of cases is 5, Range of values is 0 to 4
  6706                           ; switch strategies available:
  6707                           ; Name         Instructions Cycles
  6708                           ; simple_byte           16     9 (average)
  6709                           ;	Chosen strategy is simple_byte
  6710  000728  0A00               	xorlw	0	; case 0
  6711  00072A  B4D8               	btfsc	status,2,c
  6712  00072C  D76F               	goto	i2l1567
  6713  00072E  0A01               	xorlw	1	; case 1
  6714  000730  B4D8               	btfsc	status,2,c
  6715  000732  D782               	goto	i2l1577
  6716  000734  0A03               	xorlw	3	; case 2
  6717  000736  B4D8               	btfsc	status,2,c
  6718  000738  D793               	goto	i2l1589
  6719  00073A  0A01               	xorlw	1	; case 3
  6720  00073C  B4D8               	btfsc	status,2,c
  6721  00073E  D7A4               	goto	i2l1599
  6722  000740  0A07               	xorlw	7	; case 4
  6723  000742  B4D8               	btfsc	status,2,c
  6724  000744  D7B4               	goto	i2l1611
  6725  000746  D000               	goto	i2l134
  6726  000748                     i2l134:
  6727  000748  0012               	return		;funcret
  6728  00074A                     __end_of_INT0_isr:
  6729                           	opt stack 0
  6730                           pclatu	equ	0xFFB
  6731                           pclath	equ	0xFFA
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           intcon2	equ	0xFF1
  6740                           postinc0	equ	0xFEE
  6741                           fsr0h	equ	0xFEA
  6742                           fsr0l	equ	0xFE9
  6743                           wreg	equ	0xFE8
  6744                           postdec1	equ	0xFE5
  6745                           fsr1h	equ	0xFE2
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _force_nec_state0 *****************
  6755 ;; Defined at:
  6756 ;;		line 105 in file "Lab10p1.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;		None               void
  6763 ;; Registers used:
  6764 ;;		wreg, status,2
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_INT0_isr
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text34
  6784  001482                     __ptext34:
  6785                           	opt stack 0
  6786  001482                     _force_nec_state0:
  6787                           	opt stack 20
  6788                           
  6789                           ;Lab10p1.c: 107: Nec_state=0;
  6790                           
  6791                           ;incstack = 0
  6792  001482  0E00               	movlw	0
  6793  001484  6E67               	movwf	_Nec_state,c
  6794                           
  6795                           ;Lab10p1.c: 108: T1CONbits.TMR1ON = 0;
  6796  001486  90CD               	bcf	4045,0,c	;volatile
  6797  001488  0012               	return		;funcret
  6798  00148A                     __end_of_force_nec_state0:
  6799                           	opt stack 0
  6800                           pclatu	equ	0xFFB
  6801                           pclath	equ	0xFFA
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon2	equ	0xFF1
  6810                           postinc0	equ	0xFEE
  6811                           fsr0h	equ	0xFEA
  6812                           fsr0l	equ	0xFE9
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           pclatu	equ	0xFFB
  6824                           pclath	equ	0xFFA
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           intcon2	equ	0xFF1
  6833                           postinc0	equ	0xFEE
  6834                           fsr0h	equ	0xFEA
  6835                           fsr0l	equ	0xFE9
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847                           	psect	rparam
  6848  0000                     pclatu	equ	0xFFB
  6849                           pclath	equ	0xFFA
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon	equ	0xFF2
  6857                           intcon2	equ	0xFF1
  6858                           postinc0	equ	0xFEE
  6859                           fsr0h	equ	0xFEA
  6860                           fsr0l	equ	0xFE9
  6861                           wreg	equ	0xFE8
  6862                           postdec1	equ	0xFE5
  6863                           fsr1h	equ	0xFE2
  6864                           fsr1l	equ	0xFE1
  6865                           indf2	equ	0xFDF
  6866                           postinc2	equ	0xFDE
  6867                           postdec2	equ	0xFDD
  6868                           fsr2h	equ	0xFDA
  6869                           fsr2l	equ	0xFD9
  6870                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    507
    Data        148
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     108
    BANK0           128     11      84
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[8]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   51295
                                             66 COMRAM     1     1      0
                                              7 BANK0      4     4      0
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2317
                                             29 COMRAM    25    17      8
                            ___lldiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     371
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20983
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      54       8       32.8%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      54       5       65.6%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6C       1       85.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114       6        0.0%
DATA                 0      0     114       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 15 13:27:08 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006B                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              l89 146C               ___wmul@multiplicand 0013  
                             l203 11C0                               l213 1430  
                             l320 0DBC                               l316 0DBE  
                             l317 0D2A                               l263 0F60  
                             l319 0D9A                               l327 0380  
                             l408 0114                               l257 133C  
                             l281 0778                               l345 090E  
                             l460 10B4                               l453 108C  
                             l429 02BC                               l462 10CE  
                             l279 089E                               l288 07F4  
                             l465 13B8                               l457 10A6  
                             l458 10A8                               l459 10B2  
                             l925 0EC8                               l896 13DA  
                             _nbr 0060                               _txt 0064  
                             prod 000FF3                               wreg 000FE8  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 1368                      __CFG_WDT$OFF 000000  
                            l1027 129C                    drawFastVLine@h 0019  
                            l3203 131E                              l3211 1220  
                  drawFastVLine@x 0022                    drawFastVLine@y 0018  
                            l3215 123C                              l3161 0EEA  
                            l3321 0774                              l3313 075A  
                            l3331 07B4                              l3323 077C  
                            l3403 0DA8                              l3165 0F22  
                            l3333 07E8                              l3317 0766  
                            l3501 0BDC                              l3175 0F48  
                            l3351 086A                              l3343 0816  
                            l3335 07EC                              l3327 0784  
                            l3431 1084                              l3423 1072  
                            l3177 0F56                              l3353 0892  
                            l3345 083E                              l3409 0DB8  
                            l3531 12F0                              l3443 109E  
                            l3435 1090                              l3427 107C  
                            l3365 126A                              l3701 02A0  
                            l3359 089A                              l3367 1270  
                            l3383 0D62                              l3543 08F4  
                            l3631 0064                              l3623 0036  
                            l3377 0CF4                              l3529 12E6  
                            l3625 0044                              l3491 0B82  
                            l3475 0B14                              l3395 0D90  
                            l3723 0366                              l3563 09C2  
                            l3643 00E4                              l3635 0082  
                            l3619 0026                              l3573 13D2  
                            l3653 0134                              l3629 004E  
                            l3487 0B64                              l3399 0D9E  
                            l3751 0456                              l3559 0970  
                            l3583 0E70                              l3671 019E  
                            l3663 016A                              l3647 00EE  
                            l3585 0E7E                              l3681 01D8  
                            l3657 015A                              l3817 04BE  
                            l3499 0BD4                              l3595 0EB8  
                            l3587 0E86                              l3691 0210  
                            l3675 01C2                              l3667 019A  
                            l3659 015E                              l3843 0546  
                            l3835 050A                              l3693 021C  
                            l3685 01F0                              l3677 01CC  
                            l3687 01F8                              l3847 0550  
                            l3839 0524                              l3699 028C  
                            STR_1 FCEC                              STR_2 FD02  
                            STR_3 FD27                              STR_4 FD16  
                            u2150 0F18                              u2310 084C  
                            u2380 0D22                              u2390 0D58  
                            u2560 0B3E                              _TRMT 007D61  
                            _main 046C                              _font FAF1  
                            fsr0h 000FEA                              _txt1 0100  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 0059                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 074A  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 0EDA  
                           _T1CON 000FCD                             _T3CON 000FB1  
                           i2l100 1026                             i2l134 0748  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR1H 000FCF                             _TMR3H 000FB3  
                           _TMR1L 000FCE                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Rcmd1 09D8  
                           _Rcmd3 0BF2                             _nRBPU 007F8F  
                           _color 0080                             _font2 FBF0  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 13DC             fillCircleHelper@delta 002B  
                           _putch 1468             fillCircleHelper@color 002D  
                           main@i 00D2                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 0F62  
                    __end_of_main 05E4                      __end_of_font FBF0  
                __end_of_Rcmd2red 12DC                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 1448  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                          ?_putch 0001                            i2l1611 06AE  
                          i2l1605 06A4                            i2l1631 071C  
                          i2l1607 06AA                            i2l1633 0722  
                          i2l1619 06FE                            i2l1629 0716  
                          i2l1583 0656                            i2l1567 060C  
                          i2l1639 0726                            i2l1577 0638  
                          i2l1595 067E                            i2l1819 101C  
                          i2l1597 0684                            i2l1589 0660  
                          i2l1599 0688                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 1482  
                __end_of_delay_ms 11C8                  __end_of_fillRect 1260  
                __end_of_drawChar 08A0                __size_of_OpenUSART 0070  
                          ___wmul 1392         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0BF2                         ??___lldiv 0019  
                          _chkisr 0008                            _array1 0044  
                          _buffer 00AA                            _nec_ok 0062  
                          clear_0 0F68                            clear_1 0F74  
                          _printf 001C                      drawtext@size 0040  
                          _strcpy 12DC                            _strlen 1260  
                    __pdataCOMRAM 0044                         ??_isdigit 0011  
                    __mediumconst FAF0                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 1436  
                      __accesstop 0080           __end_of__initialization 0FDA  
                       ?_INT0_isr 0001                     ___rparam_used 000001  
                   __end_of_Rcmd1 0AE8                     __end_of_Rcmd3 0CE4  
                  __pcstackCOMRAM 0001                      __pidataBANK0 133E  
                    __pidataBANK1 10D0                     __end_of_font2 FCCC  
                   __end_of_putch 1476                    drawPixel@color 0019  
          __size_of_write_command 0010        fillCircleHelper@cornername 0029  
                         ??_Rcmd1 001D                           ??_Rcmd3 001D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 10D0  
                         ??_putch 0011                        __pbssBANK0 00AA  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                    ??_TIMER1_isr 0001                        _fillCircle 1124  
                         ?_printf 001E                           ?_strcpy 0011  
                         ?_strlen 0011                        _fillScreen 13DC  
                      _drawCircle 02BE                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0DC0                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                __end_of_TIMER1_isr 1482  
                   _write_command 1458                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 133E  
           __end_of_drawFastVLine 0F62                  _fillCircleHelper 08A0  
                         ___lldiv 0E4E                   __size_of___wmul 0028  
                 __size_of_chkisr 1058                         ?_spiwrite 0001  
                         __pcinit 0F62                           __ramtop 1000  
                         __ptext0 046C                           __ptext1 001C  
                         __ptext2 1468                           __ptext3 13BA  
                         __ptext4 0E4E                           __ptext5 140E  
                         __ptext6 1060                           __ptext7 1124  
                         __ptext8 08A0                           __ptext9 02BE  
                 __size_of_printf 02A2                 __end_of_init_UART 1422  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FCEC          __end_of_force_nec_state0 148A  
                       _T1CONbits 000FCD                           _isdigit 13BA  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 1436                     _setAddrWindow 11C8  
                  __pintcode_body 0FE4                        delay_ms@ms 0017  
            end_of_initialization 0FDA                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FAF0  
                         int_func 0FE4                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 0036                           printf@f 001E  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00CF                  drawtext@cursor_y 00CE  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00CA                        drawPixel@x 001B  
                      drawPixel@y 0018                       printf@width 0034  
                       _TXSTAbits 000FAC                 __size_of_INT0_isr 0166  
                  __end_of___wmul 13BA                     delay_ms@count 001B  
                      _write_data 1448                     __pidataCOMRAM 13F8  
                  __end_of_chkisr 1060          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003E                         _Nec_code1 0066  
                  __end_of_printf 02BE                    __end_of_strcpy 130E  
                  __end_of_strlen 129E                         _Nec_state 0067  
             start_initialization 0F62                   ??_write_command 0013  
                       _OpenUSART 1060               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 0026                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005A  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00C9  
                     ??_LCD_Reset 001D                      _isdigit$1597 0012  
        __end_of_fillCircleHelper 09D8                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 0069                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 1392                     __pmediumconst FAF0  
                        ?___lldiv 0011                         __tft_type 0068  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 130E                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0DC0                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 140E  
              ??_force_nec_state0 0001                         _hexpowers FCCC  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 05E4                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC                 ___wmul@multiplier 0011  
       __end_of_Initialize_Screen 0E4E                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0033  
                       main@led_c 00D0                        printf@prec 002B  
                       main@found 00D1                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 0F8E  
                       copy_data1 0FAE                         copy_data2 0FCE  
                       drawtext@i 00CC            __size_of_drawFastVLine 0088  
                       drawtext@x 00C9                         drawtext@y 0039  
                        _Nec_code 005A                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 129E  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 005E                __end_of_fillCircle 1176  
                        __Hrparam 0000                __end_of_fillScreen 13F8  
                        __Lrparam 0000                __end_of_drawCircle 046C  
                __size_of___lldiv 008C                  __size_of_isdigit 0022  
                        _delay_ms 1176                          __ptext10 0DC0  
                        __ptext11 12DC                          __ptext20 11C8  
                        __ptext12 13DC                          __ptext21 1368  
                        __ptext13 0CE4                          __ptext30 1392  
                        __ptext22 0BF2                          __ptext14 0AE8  
                        __ptext23 129E                          __ptext15 1260  
                        __ptext32 1476                          __ptext24 09D8  
                        __ptext16 074A                          __ptext33 05E4  
                        __ptext25 1448                          __ptext17 1216  
                        __ptext34 1482                          __ptext26 1458  
                        __ptext18 0EDA                          __ptext27 1422  
                        __ptext19 130E                          __ptext28 1436  
                        __ptext29 1176                          _fillRect 1216  
                        _drawChar 074A  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006A                          _drawtext 0AE8  
                      strcpy@from 0013                     _fillRectangle 0CE4  
                   __size_of_main 0178                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 0EDA  
                       printf@idx 002A                          _spiwrite 1422  
                       printf@val 002D                       ??_drawPixel 001B  
                        _rowstart 006C                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025        __size_of_Initialize_Screen 008E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
                     ??_init_UART 0014                          isdigit@c 0013  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F             __end_of_write_command 1468  
                ___lldiv@dividend 0011                   fillScreen@color 0024  
                    fillCircle@x0 003B                      fillCircle@y0 003D  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0031  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 1476  
                   fillRect@color 0026                  ___lldiv@quotient 0019  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 1216                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1458  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
