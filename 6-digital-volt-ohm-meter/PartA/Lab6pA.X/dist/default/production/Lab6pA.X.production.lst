

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 18 16:16:39 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  002A94                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _array
    51  002A94  40                 	db	64
    52  002A95  79                 	db	121
    53  002A96  24                 	db	36
    54  002A97  30                 	db	48
    55  002A98  19                 	db	25
    56  002A99  12                 	db	18
    57  002A9A  02                 	db	2
    58  002A9B  78                 	db	120
    59  002A9C  00                 	db	0
    60  002A9D  10                 	db	16
    61                           
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _dpowers:
    67                           	opt stack 0
    68  001001  0001               	dw	1
    69  001003  0000               	dw	0
    70  001005  000A               	dw	10
    71  001007  0000               	dw	0
    72  001009  0064               	dw	100
    73  00100B  0000               	dw	0
    74  00100D  03E8               	dw	1000
    75  00100F  0000               	dw	0
    76  001011  2710               	dw	10000
    77  001013  0000               	dw	0
    78  001015  86A0               	dw	34464
    79  001017  0001               	dw	1
    80  001019  4240               	dw	16960
    81  00101B  000F               	dw	15
    82  00101D  9680               	dw	38528
    83  00101F  0098               	dw	152
    84  001021  E100               	dw	57600
    85  001023  05F5               	dw	1525
    86  001025  CA00               	dw	51712
    87  001027  3B9A               	dw	15258
    88  001029                     __end_of_dpowers:
    89                           	opt stack 0
    90  001029                     __npowers_:
    91                           	opt stack 0
    92  001029  00                 	db	0
    93  00102A  80                 	db	128
    94  00102B  3F                 	db	63
    95  00102C  CD                 	db	205
    96  00102D  CC                 	db	204
    97  00102E  3D                 	db	61
    98  00102F  D7                 	db	215
    99  001030  23                 	db	35
   100  001031  3C                 	db	60
   101  001032  12                 	db	18
   102  001033  83                 	db	131
   103  001034  3A                 	db	58
   104  001035  B7                 	db	183
   105  001036  D1                 	db	209
   106  001037  38                 	db	56
   107  001038  C6                 	db	198
   108  001039  27                 	db	39
   109  00103A  37                 	db	55
   110  00103B  38                 	db	56
   111  00103C  86                 	db	134
   112  00103D  35                 	db	53
   113  00103E  C0                 	db	192
   114  00103F  D6                 	db	214
   115  001040  33                 	db	51
   116  001041  CC                 	db	204
   117  001042  2B                 	db	43
   118  001043  32                 	db	50
   119  001044  70                 	db	112
   120  001045  89                 	db	137
   121  001046  30                 	db	48
   122  001047  E7                 	db	231
   123  001048  DB                 	db	219
   124  001049  2E                 	db	46
   125  00104A  E5                 	db	229
   126  00104B  3C                 	db	60
   127  00104C  1E                 	db	30
   128  00104D  42                 	db	66
   129  00104E  A2                 	db	162
   130  00104F  0D                 	db	13
   131  001050                     __end_of__npowers_:
   132                           	opt stack 0
   133  001050                     __powers_:
   134                           	opt stack 0
   135  001050  00                 	db	0
   136  001051  80                 	db	128
   137  001052  3F                 	db	63
   138  001053  00                 	db	0
   139  001054  20                 	db	32
   140  001055  41                 	db	65
   141  001056  00                 	db	0
   142  001057  C8                 	db	200
   143  001058  42                 	db	66
   144  001059  00                 	db	0
   145  00105A  7A                 	db	122
   146  00105B  44                 	db	68
   147  00105C  40                 	db	64
   148  00105D  1C                 	db	28
   149  00105E  46                 	db	70
   150  00105F  50                 	db	80
   151  001060  C3                 	db	195
   152  001061  47                 	db	71
   153  001062  24                 	db	36
   154  001063  74                 	db	116
   155  001064  49                 	db	73
   156  001065  97                 	db	151
   157  001066  18                 	db	24
   158  001067  4B                 	db	75
   159  001068  BC                 	db	188
   160  001069  BE                 	db	190
   161  00106A  4C                 	db	76
   162  00106B  6B                 	db	107
   163  00106C  6E                 	db	110
   164  00106D  4E                 	db	78
   165  00106E  03                 	db	3
   166  00106F  15                 	db	21
   167  001070  50                 	db	80
   168  001071  79                 	db	121
   169  001072  AD                 	db	173
   170  001073  60                 	db	96
   171  001074  F3                 	db	243
   172  001075  49                 	db	73
   173  001076  71                 	db	113
   174  001077                     __end_of__powers_:
   175                           	opt stack 0
   176  0000                     _ADCON0	set	4034
   177  0000                     _ADCON0bits	set	4034
   178  0000                     _ADCON1	set	4033
   179  0000                     _ADCON2	set	4032
   180  0000                     _ADRESH	set	4036
   181  0000                     _ADRESL	set	4035
   182  0000                     _INTCONbits	set	4082
   183  0000                     _OSCCON	set	4051
   184  0000                     _PIE1bits	set	3997
   185  0000                     _PIR1bits	set	3998
   186  0000                     _PORTB	set	3969
   187  0000                     _PORTC	set	3970
   188  0000                     _PORTD	set	3971
   189  0000                     _PORTDbits	set	3971
   190  0000                     _PORTE	set	3972
   191  0000                     _RCSTA	set	4011
   192  0000                     _RCSTAbits	set	4011
   193  0000                     _SPBRG	set	4015
   194  0000                     _SPBRGH	set	4016
   195  0000                     _T0CON	set	4053
   196  0000                     _T0CONbits	set	4053
   197  0000                     _TMR0H	set	4055
   198  0000                     _TMR0L	set	4054
   199  0000                     _TRISA	set	3986
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISCbits	set	3988
   203  0000                     _TRISD	set	3989
   204  0000                     _TRISE	set	3990
   205  0000                     _TXREG	set	4013
   206  0000                     _TXSTA	set	4012
   207  0000                     _TXSTAbits	set	4012
   208  0000                     _TRMT	set	32097
   209  001077                     STR_1:
   210  001077  54                 	db	84	;'T'
   211  001078  68                 	db	104	;'h'
   212  001079  65                 	db	101	;'e'
   213  00107A  20                 	db	32
   214  00107B  56                 	db	86	;'V'
   215  00107C  6F                 	db	111	;'o'
   216  00107D  6C                 	db	108	;'l'
   217  00107E  74                 	db	116	;'t'
   218  00107F  61                 	db	97	;'a'
   219  001080  67                 	db	103	;'g'
   220  001081  65                 	db	101	;'e'
   221  001082  20                 	db	32
   222  001083  69                 	db	105	;'i'
   223  001084  73                 	db	115	;'s'
   224  001085  20                 	db	32
   225  001086  25                 	db	37
   226  001087  66                 	db	102	;'f'
   227  001088  0D                 	db	13
   228  001089  0A                 	db	10
   229  00108A  0A                 	db	10
   230  00108B  0A                 	db	10
   231  00108C  00                 	db	0
   232                           
   233                           ; #config settings
   234  00108D  00                 	db	0	; dummy byte at the end
   235  0000                     
   236                           	psect	cinit
   237  00295A                     __pcinit:
   238                           	opt stack 0
   239  00295A                     start_initialization:
   240                           	opt stack 0
   241  00295A                     __initialization:
   242                           	opt stack 0
   243                           
   244                           ; Initialize objects allocated to COMRAM (10 bytes)
   245                           ; load TBLPTR registers with __pidataCOMRAM
   246  00295A  0E94               	movlw	low __pidataCOMRAM
   247  00295C  6EF6               	movwf	tblptrl,c
   248  00295E  0E2A               	movlw	high __pidataCOMRAM
   249  002960  6EF7               	movwf	tblptrh,c
   250  002962  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   251  002964  6EF8               	movwf	tblptru,c
   252  002966  EE00  F068         	lfsr	0,__pdataCOMRAM
   253  00296A  EE10 F00A          	lfsr	1,10
   254  00296E                     copy_data0:
   255  00296E  0009               	tblrd		*+
   256  002970  CFF5 FFEE          	movff	tablat,postinc0
   257  002974  50E5               	movf	postdec1,w,c
   258  002976  50E1               	movf	fsr1l,w,c
   259  002978  E1FA               	bnz	copy_data0
   260  00297A                     end_of_initialization:
   261                           	opt stack 0
   262  00297A                     __end_of__initialization:
   263                           	opt stack 0
   264  00297A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   265  00297C  6EF8               	movwf	tblptru,c
   266  00297E  0100               	movlb	0
   267  002980  EFD7  F010         	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	dataCOMRAM
   277  000068                     __pdataCOMRAM:
   278                           	opt stack 0
   279  000068                     _array:
   280                           	opt stack 0
   281  000068                     	ds	10
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	cstackCOMRAM
   291  000001                     __pcstackCOMRAM:
   292                           	opt stack 0
   293  000001                     ??_BCD_DP:
   294  000001                     ?_get_full_ADC:
   295                           	opt stack 0
   296  000001                     ?___awdiv:
   297                           	opt stack 0
   298  000001                     ?___ftpack:
   299                           	opt stack 0
   300  000001                     ?___ftneg:
   301                           	opt stack 0
   302  000001                     ?__tdiv_to_l_:
   303                           	opt stack 0
   304  000001                     ?__div_to_l_:
   305                           	opt stack 0
   306  000001                     ?___lldiv:
   307                           	opt stack 0
   308  000001                     ?___llmod:
   309                           	opt stack 0
   310  000001                     putch@c:
   311                           	opt stack 0
   312  000001                     Select_ADC_Channel@channel:
   313                           	opt stack 0
   314  000001                     BCD_Upper_Digit@Port_E:
   315                           	opt stack 0
   316  000001                     BCD_Lower_Digit@digit:
   317                           	opt stack 0
   318  000001                     OpenUSART@spbrg:
   319                           	opt stack 0
   320  000001                     ___awdiv@dividend:
   321                           	opt stack 0
   322  000001                     __div_to_l_@f1:
   323                           	opt stack 0
   324  000001                     ___ftpack@arg:
   325                           	opt stack 0
   326  000001                     __tdiv_to_l_@f1:
   327                           	opt stack 0
   328  000001                     ___ftge@ff1:
   329                           	opt stack 0
   330  000001                     ___ftneg@f1:
   331                           	opt stack 0
   332  000001                     ___lldiv@dividend:
   333                           	opt stack 0
   334  000001                     ___llmod@dividend:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x0
   338  000001                     	ds	1
   339  000002                     BCD_Upper_Digit@digit:
   340                           	opt stack 0
   341  000002                     BCD_DP@dp:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x1
   345  000002                     	ds	1
   346  000003                     ??_get_full_ADC:
   347  000003                     OpenUSART@config:
   348                           	opt stack 0
   349  000003                     ___awdiv@divisor:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2
   353  000003                     	ds	1
   354  000004                     ___ftpack@exp:
   355                           	opt stack 0
   356  000004                     __div_to_l_@f2:
   357                           	opt stack 0
   358  000004                     __tdiv_to_l_@f2:
   359                           	opt stack 0
   360  000004                     ___ftge@ff2:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x3
   364  000004                     	ds	1
   365  000005                     ___awdiv@counter:
   366                           	opt stack 0
   367  000005                     ___ftpack@sign:
   368                           	opt stack 0
   369  000005                     get_full_ADC@result:
   370                           	opt stack 0
   371  000005                     ___lldiv@divisor:
   372                           	opt stack 0
   373  000005                     ___llmod@divisor:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0x4
   377  000005                     	ds	1
   378  000006                     ??___ftpack:
   379  000006                     ___awdiv@sign:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x5
   383  000006                     	ds	1
   384  000007                     ??__tdiv_to_l_:
   385  000007                     ??___ftge:
   386  000007                     ___awdiv@quotient:
   387                           	opt stack 0
   388  000007                     __div_to_l_@quot:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x6
   392  000007                     	ds	2
   393  000009                     ?___awmod:
   394                           	opt stack 0
   395  000009                     ?___awtoft:
   396                           	opt stack 0
   397  000009                     ?___lltoft:
   398                           	opt stack 0
   399  000009                     ___llmod@counter:
   400                           	opt stack 0
   401  000009                     ___awmod@dividend:
   402                           	opt stack 0
   403  000009                     ___awtoft@c:
   404                           	opt stack 0
   405  000009                     ___lldiv@quotient:
   406                           	opt stack 0
   407  000009                     ___lltoft@c:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0x8
   411  000009                     	ds	1
   412  00000A                     __tdiv_to_l_@quot:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x9
   416  00000A                     	ds	1
   417  00000B                     __div_to_l_@cntr:
   418                           	opt stack 0
   419  00000B                     ___awmod@divisor:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0xA
   423  00000B                     	ds	1
   424  00000C                     ___awtoft@sign:
   425                           	opt stack 0
   426  00000C                     __div_to_l_@exp1:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0xB
   430  00000C                     	ds	1
   431  00000D                     ??___lltoft:
   432  00000D                     ?___ftdiv:
   433                           	opt stack 0
   434  00000D                     ___awmod@counter:
   435                           	opt stack 0
   436  00000D                     ___lldiv@counter:
   437                           	opt stack 0
   438  00000D                     ___ftdiv@f1:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0xC
   442  00000D                     	ds	1
   443  00000E                     ___awmod@sign:
   444                           	opt stack 0
   445  00000E                     __tdiv_to_l_@cntr:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0xD
   449  00000E                     	ds	1
   450  00000F                     ?___wmul:
   451                           	opt stack 0
   452  00000F                     __tdiv_to_l_@exp1:
   453                           	opt stack 0
   454  00000F                     ___wmul@multiplier:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0xE
   458  00000F                     	ds	1
   459  000010                     ___ftdiv@f2:
   460                           	opt stack 0
   461                           
   462                           ; 3 bytes @ 0xF
   463  000010                     	ds	1
   464  000011                     ___lltoft@exp:
   465                           	opt stack 0
   466  000011                     ___wmul@multiplicand:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x10
   470  000011                     	ds	2
   471  000013                     ??___ftdiv:
   472  000013                     ___wmul@product:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x12
   476  000013                     	ds	2
   477  000015                     ?___ftmul:
   478                           	opt stack 0
   479  000015                     ___ftmul@f1:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0x14
   483  000015                     	ds	1
   484  000016                     ___ftdiv@cntr:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x15
   488  000016                     	ds	1
   489  000017                     ___ftdiv@f3:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x16
   493  000017                     	ds	1
   494  000018                     ___ftmul@f2:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0x17
   498  000018                     	ds	2
   499  00001A                     ___ftdiv@exp:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x19
   503  00001A                     	ds	1
   504  00001B                     ??___ftmul:
   505  00001B                     ___ftdiv@sign:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x1A
   509  00001B                     	ds	3
   510  00001E                     ___ftmul@exp:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x1D
   514  00001E                     	ds	1
   515  00001F                     ___ftmul@f3_as_product:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x1E
   519  00001F                     	ds	3
   520  000022                     ___ftmul@cntr:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x21
   524  000022                     	ds	1
   525  000023                     ___ftmul@sign:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x22
   529  000023                     	ds	1
   530  000024                     ?_fround:
   531                           	opt stack 0
   532  000024                     ?_scale:
   533                           	opt stack 0
   534                           
   535                           ; 3 bytes @ 0x23
   536  000024                     	ds	3
   537  000027                     _fround$1254:
   538                           	opt stack 0
   539  000027                     _scale$1255:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x26
   543  000027                     	ds	3
   544  00002A                     scale@scl:
   545                           	opt stack 0
   546  00002A                     _fround$1253:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x29
   550  00002A                     	ds	1
   551  00002B                     ?___fttol:
   552                           	opt stack 0
   553  00002B                     ___fttol@f1:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x2A
   557  00002B                     	ds	2
   558  00002D                     fround@prec:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562  00002D                     	ds	1
   563  00002E                     ?___ftadd:
   564                           	opt stack 0
   565  00002E                     ___ftadd@f1:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x2D
   569  00002E                     	ds	1
   570  00002F                     ??___fttol:
   571                           
   572                           ; 0 bytes @ 0x2E
   573  00002F                     	ds	2
   574  000031                     ___ftadd@f2:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x30
   578  000031                     	ds	3
   579  000034                     ??___ftadd:
   580  000034                     ___fttol@sign1:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x33
   584  000034                     	ds	1
   585  000035                     ___fttol@lval:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x34
   589  000035                     	ds	2
   590  000037                     ___ftadd@sign:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x36
   594  000037                     	ds	1
   595  000038                     ___ftadd@exp2:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x37
   599  000038                     	ds	1
   600  000039                     ___ftadd@exp1:
   601                           	opt stack 0
   602  000039                     ___fttol@exp1:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x38
   606  000039                     	ds	1
   607  00003A                     ?___ftsub:
   608                           	opt stack 0
   609  00003A                     ___ftsub@f1:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x39
   613  00003A                     	ds	3
   614  00003D                     ___ftsub@f2:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x3C
   618  00003D                     	ds	3
   619  000040                     ?_printf:
   620                           	opt stack 0
   621  000040                     printf@f:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x3F
   625  000040                     	ds	5
   626  000045                     ??_printf:
   627                           
   628                           ; 0 bytes @ 0x44
   629  000045                     	ds	6
   630  00004B                     _printf$1256:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x4A
   634  00004B                     	ds	3
   635  00004E                     printf@ap:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x4D
   639  00004E                     	ds	2
   640  000050                     printf@flag:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x4F
   644  000050                     	ds	2
   645  000052                     printf@prec:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x51
   649  000052                     	ds	2
   650  000054                     printf@val:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x53
   654  000054                     	ds	4
   655  000058                     printf@exp:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x57
   659  000058                     	ds	2
   660  00005A                     printf@tmpval:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x59
   664  00005A                     	ds	4
   665  00005E                     printf@fval:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x5D
   669  00005E                     	ds	3
   670  000061                     printf@c:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x60
   674  000061                     	ds	1
   675  000062                     ??_main:
   676                           
   677                           ; 0 bytes @ 0x61
   678  000062                     	ds	2
   679  000064                     main@num_step:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x63
   683  000064                     	ds	2
   684  000066                     main@voltage_v:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x65
   688  000066                     	ds	2
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           postdec1	equ	0xFE5
   695                           fsr1l	equ	0xFE1
   696                           
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 28 in file "Lab6pA.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  voltage_v       2  101[COMRAM] int 
   707 ;;  num_step        2   99[COMRAM] int 
   708 ;; Return value:  Size  Location     Type
   709 ;;		None               void
   710 ;; Registers used:
   711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   718 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   719 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;Total ram usage:        6 bytes
   722 ;; Hardware stack levels required when called:    4
   723 ;; This function calls:
   724 ;;		_BCD_DP
   725 ;;		_BCD_Lower_Digit
   726 ;;		_BCD_Upper_Digit
   727 ;;		_Init_ADC
   728 ;;		_Init_TRIS
   729 ;;		_Select_ADC_Channel
   730 ;;		_WAIT_1_SEC
   731 ;;		___awdiv
   732 ;;		___awmod
   733 ;;		___awtoft
   734 ;;		___ftdiv
   735 ;;		_get_full_ADC
   736 ;;		_init_UART
   737 ;;		_printf
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text0
   744  0021AE                     __ptext0:
   745                           	opt stack 0
   746  0021AE                     _main:
   747                           	opt stack 27
   748                           
   749                           ;Lab6pA.c: 30: OSCCON = 0x60;
   750                           
   751                           ;incstack = 0
   752  0021AE  0E60               	movlw	96
   753  0021B0  6ED3               	movwf	4051,c	;volatile
   754                           
   755                           ;Lab6pA.c: 32: OSCCON = 0x60;
   756  0021B2  0E60               	movlw	96
   757  0021B4  6ED3               	movwf	4051,c	;volatile
   758                           
   759                           ;Lab6pA.c: 34: PORTB = 0x00;
   760  0021B6  0E00               	movlw	0
   761  0021B8  6E81               	movwf	3969,c	;volatile
   762                           
   763                           ;Lab6pA.c: 35: PORTC = 0xFF;
   764  0021BA  6882               	setf	3970,c	;volatile
   765                           
   766                           ;Lab6pA.c: 36: PORTD = 0xFF;
   767  0021BC  6883               	setf	3971,c	;volatile
   768                           
   769                           ;Lab6pA.c: 37: PORTE = 0xFF;
   770  0021BE  6884               	setf	3972,c	;volatile
   771                           
   772                           ;Lab6pA.c: 39: Init_ADC();
   773  0021C0  EC3D  F015         	call	_Init_ADC	;wreg free
   774                           
   775                           ;Lab6pA.c: 40: init_UART();
   776  0021C4  EC2C  F015         	call	_init_UART	;wreg free
   777                           
   778                           ;Lab6pA.c: 41: Init_TRIS();
   779  0021C8  EC21  F015         	call	_Init_TRIS	;wreg free
   780                           
   781                           ;Lab6pA.c: 43: Select_ADC_Channel(0);
   782  0021CC  0E00               	movlw	0
   783  0021CE  EC44  F015         	call	_Select_ADC_Channel
   784  0021D2  D000               	goto	l2598
   785  0021D4                     l2598:
   786                           
   787                           ;Lab6pA.c: 46: {
   788                           ;Lab6pA.c: 47: int num_step = get_full_ADC();
   789  0021D4  ECD6  F014         	call	_get_full_ADC	;wreg free
   790  0021D8  C001  F064         	movff	?_get_full_ADC,main@num_step
   791  0021DC  C002  F065         	movff	?_get_full_ADC+1,main@num_step+1
   792                           
   793                           ;Lab6pA.c: 48: int voltage_v = (num_step * 4);
   794  0021E0  C064  F062         	movff	main@num_step,??_main
   795  0021E4  C065  F063         	movff	main@num_step+1,??_main+1
   796  0021E8  90D8               	bcf	status,0,c
   797  0021EA  3662               	rlcf	??_main,f,c
   798  0021EC  3663               	rlcf	??_main+1,f,c
   799  0021EE  90D8               	bcf	status,0,c
   800  0021F0  3662               	rlcf	??_main,f,c
   801  0021F2  3663               	rlcf	??_main+1,f,c
   802  0021F4  C062  F066         	movff	??_main,main@voltage_v
   803  0021F8  C063  F067         	movff	??_main+1,main@voltage_v+1
   804                           
   805                           ;Lab6pA.c: 49: printf ("The Voltage is %f\r\n\n\n", voltage_v/1000.0);
   806  0021FC  0E77               	movlw	low STR_1
   807  0021FE  6E40               	movwf	printf@f,c
   808  002200  0E10               	movlw	high STR_1
   809  002202  6E41               	movwf	printf@f+1,c
   810  002204  C066  F009         	movff	main@voltage_v,___awtoft@c
   811  002208  C067  F00A         	movff	main@voltage_v+1,___awtoft@c+1
   812  00220C  EC8F  F014         	call	___awtoft	;wreg free
   813  002210  C009  F00D         	movff	?___awtoft,___ftdiv@f1
   814  002214  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
   815  002218  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
   816  00221C  0E00               	movlw	0
   817  00221E  6E10               	movwf	___ftdiv@f2,c
   818  002220  0E7A               	movlw	122
   819  002222  6E11               	movwf	___ftdiv@f2+1,c
   820  002224  0E44               	movlw	68
   821  002226  6E12               	movwf	___ftdiv@f2+2,c
   822  002228  ECBD  F011         	call	___ftdiv	;wreg free
   823  00222C  C00D  F042         	movff	?___ftdiv,?_printf+2
   824  002230  C00E  F043         	movff	?___ftdiv+1,?_printf+3
   825  002234  C00F  F044         	movff	?___ftdiv+2,?_printf+4
   826  002238  EC47  F008         	call	_printf	;wreg free
   827                           
   828                           ;Lab6pA.c: 51: BCD_Upper_Digit (voltage_v/10000);
   829  00223C  C066  F001         	movff	main@voltage_v,___awdiv@dividend
   830  002240  C067  F002         	movff	main@voltage_v+1,___awdiv@dividend+1
   831  002244  0E27               	movlw	39
   832  002246  6E04               	movwf	___awdiv@divisor+1,c
   833  002248  0E10               	movlw	16
   834  00224A  6E03               	movwf	___awdiv@divisor,c
   835  00224C  EC91  F012         	call	___awdiv	;wreg free
   836  002250  5001               	movf	?___awdiv,w,c
   837  002252  EC70  F014         	call	_BCD_Upper_Digit
   838                           
   839                           ;Lab6pA.c: 53: BCD_Lower_Digit ((voltage_v/1000)%10);
   840  002256  0E03               	movlw	3
   841  002258  6E04               	movwf	___awdiv@divisor+1,c
   842  00225A  0EE8               	movlw	232
   843  00225C  6E03               	movwf	___awdiv@divisor,c
   844  00225E  C066  F001         	movff	main@voltage_v,___awdiv@dividend
   845  002262  C067  F002         	movff	main@voltage_v+1,___awdiv@dividend+1
   846  002266  EC91  F012         	call	___awdiv	;wreg free
   847  00226A  C001  F009         	movff	?___awdiv,___awmod@dividend
   848  00226E  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
   849  002272  0E00               	movlw	0
   850  002274  6E0C               	movwf	___awmod@divisor+1,c
   851  002276  0E0A               	movlw	10
   852  002278  6E0B               	movwf	___awmod@divisor,c
   853  00227A  EC6D  F013         	call	___awmod	;wreg free
   854  00227E  5009               	movf	?___awmod,w,c
   855  002280  EC08  F015         	call	_BCD_Lower_Digit
   856                           
   857                           ;Lab6pA.c: 55: BCD_DP (1);
   858  002284  0E01               	movlw	1
   859  002286  EC15  F015         	call	_BCD_DP
   860                           
   861                           ;Lab6pA.c: 59: WAIT_1_SEC();
   862  00228A  EC4F  F015         	call	_WAIT_1_SEC	;wreg free
   863  00228E  D7A2               	goto	l2598
   864  002290  EF00  F000         	goto	start
   865  002294                     __end_of_main:
   866                           	opt stack 0
   867                           tblptru	equ	0xFF8
   868                           tblptrh	equ	0xFF7
   869                           tblptrl	equ	0xFF6
   870                           tablat	equ	0xFF5
   871                           postinc0	equ	0xFEE
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _printf *****************
   877 ;; Defined at:
   878 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  f               2   63[COMRAM] PTR const unsigned char 
   881 ;;		 -> STR_1(22), 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  tmpval          4   89[COMRAM] struct .
   884 ;;  val             4   83[COMRAM] unsigned long 
   885 ;;  fval            3   93[COMRAM] unsigned long 
   886 ;;  cp              3    0        PTR const unsigned char 
   887 ;;  exp             2   87[COMRAM] int 
   888 ;;  prec            2   81[COMRAM] int 
   889 ;;  flag            2   79[COMRAM] unsigned short 
   890 ;;  ap              2   77[COMRAM] PTR void [1]
   891 ;;		 -> ?_printf(2), 
   892 ;;  len             2    0        unsigned int 
   893 ;;  width           2    0        int 
   894 ;;  c               1   96[COMRAM] char 
   895 ;;  d               1    0        unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  2   63[COMRAM] int 
   898 ;; Registers used:
   899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   905 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   909 ;;Total ram usage:       34 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    3
   912 ;; This function calls:
   913 ;;		___awdiv
   914 ;;		___ftadd
   915 ;;		___ftge
   916 ;;		___ftmul
   917 ;;		___ftneg
   918 ;;		___ftsub
   919 ;;		___fttol
   920 ;;		___lldiv
   921 ;;		___llmod
   922 ;;		___lltoft
   923 ;;		___wmul
   924 ;;		__div_to_l_
   925 ;;		__tdiv_to_l_
   926 ;;		_fround
   927 ;;		_putch
   928 ;;		_scale
   929 ;; This function is called by:
   930 ;;		_main
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text1
   935  00108E                     __ptext1:
   936                           	opt stack 0
   937  00108E                     _printf:
   938                           	opt stack 27
   939                           
   940                           ;doprnt.c: 466: va_list ap;
   941                           ;doprnt.c: 499: signed char c;
   942                           ;doprnt.c: 501: int width;
   943                           ;doprnt.c: 504: int prec;
   944                           ;doprnt.c: 508: unsigned short flag;
   945                           ;doprnt.c: 515: char d;
   946                           ;doprnt.c: 516: double fval;
   947                           ;doprnt.c: 517: int exp;
   948                           ;doprnt.c: 523: union {
   949                           ;doprnt.c: 524: unsigned long vd;
   950                           ;doprnt.c: 525: double integ;
   951                           ;doprnt.c: 526: } tmpval;
   952                           ;doprnt.c: 528: unsigned long val;
   953                           ;doprnt.c: 529: unsigned len;
   954                           ;doprnt.c: 530: const char * cp;
   955                           ;doprnt.c: 533: *ap = __va_start();
   956                           
   957                           ;incstack = 0
   958  00108E  0E42               	movlw	low (?_printf+2)
   959  001090  6E4E               	movwf	printf@ap,c
   960  001092  0E00               	movlw	high (?_printf+2)
   961  001094  6E4F               	movwf	printf@ap+1,c
   962                           
   963                           ;doprnt.c: 536: while(c = *f++) {
   964  001096  D2FF               	goto	l2522
   965  001098                     l2374:
   966                           
   967                           ;doprnt.c: 538: if(c != '%')
   968  001098  0E25               	movlw	37
   969  00109A  1861               	xorwf	printf@c,w,c
   970  00109C  B4D8               	btfsc	status,2,c
   971  00109E  D004               	goto	l2378
   972                           
   973                           ;doprnt.c: 540: {
   974                           ;doprnt.c: 541: (putch(c) );
   975  0010A0  5061               	movf	printf@c,w,c
   976  0010A2  EC36  F015         	call	_putch
   977                           
   978                           ;doprnt.c: 542: continue;
   979  0010A6  D2F7               	goto	l2522
   980  0010A8                     l2378:
   981                           
   982                           ;doprnt.c: 543: }
   983                           ;doprnt.c: 548: flag = 0;
   984  0010A8  0E00               	movlw	0
   985  0010AA  6E51               	movwf	printf@flag+1,c
   986  0010AC  0E00               	movlw	0
   987  0010AE  6E50               	movwf	printf@flag,c
   988                           
   989                           ;doprnt.c: 635: switch(c = *f++) {
   990  0010B0  D005               	goto	l2384
   991                           
   992                           ;doprnt.c: 638: goto alldone;
   993                           
   994                           ;doprnt.c: 637: case 0:
   995  0010B2  D2FF               	goto	l207
   996  0010B4                     l2380:
   997                           
   998                           ;doprnt.c: 663: flag |= 0x400;
   999  0010B4  8451               	bsf	printf@flag+1,2,c
  1000                           
  1001                           ;doprnt.c: 664: break;
  1002  0010B6  D013               	goto	l2386
  1003                           
  1004                           ;doprnt.c: 813: continue;
  1005                           
  1006                           ;doprnt.c: 802: default:
  1007  0010B8  D2EE               	goto	l2522
  1008                           
  1009                           ;doprnt.c: 822: }
  1010  0010BA  D011               	goto	l2386
  1011  0010BC                     l2384:
  1012  0010BC  C040  FFF6         	movff	printf@f,tblptrl
  1013  0010C0  C041  FFF7         	movff	printf@f+1,tblptrh
  1014  0010C4  4A40               	infsnz	printf@f,f,c
  1015  0010C6  2A41               	incf	printf@f+1,f,c
  1016  0010C8                     	if	0	;tblptru may be non-zero
  1017  0010C8                     	endif
  1018  0010C8                     	if	0	;tblptru may be non-zero
  1019  0010C8                     	endif
  1020  0010C8  0008               	tblrd		*
  1021  0010CA  CFF5 F061          	movff	tablat,printf@c
  1022  0010CE  5061               	movf	printf@c,w,c
  1023                           
  1024                           ; Switch size 1, requested type "space"
  1025                           ; Number of cases is 2, Range of values is 0 to 102
  1026                           ; switch strategies available:
  1027                           ; Name         Instructions Cycles
  1028                           ; simple_byte            7     4 (average)
  1029                           ;	Chosen strategy is simple_byte
  1030  0010D0  0A00               	xorlw	0	; case 0
  1031  0010D2  B4D8               	btfsc	status,2,c
  1032  0010D4  D2EE               	goto	l207
  1033  0010D6  0A66               	xorlw	102	; case 102
  1034  0010D8  B4D8               	btfsc	status,2,c
  1035  0010DA  D7EC               	goto	l2380
  1036  0010DC  D2DC               	goto	l2522
  1037  0010DE                     l2386:
  1038                           
  1039                           ;doprnt.c: 825: if(flag & (0x700)) {
  1040  0010DE  0E07               	movlw	7
  1041  0010E0  1451               	andwf	printf@flag+1,w,c
  1042  0010E2  B4D8               	btfsc	status,2,c
  1043  0010E4  D2CA               	goto	l2518
  1044                           
  1045                           ;doprnt.c: 829: prec = 6;
  1046  0010E6  0E00               	movlw	0
  1047  0010E8  6E53               	movwf	printf@prec+1,c
  1048  0010EA  0E06               	movlw	6
  1049  0010EC  6E52               	movwf	printf@prec,c
  1050                           
  1051                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1052  0010EE  C04E  FFD9         	movff	printf@ap,fsr2l
  1053  0010F2  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1054  0010F6  CFDE F05E          	movff	postinc2,printf@fval
  1055  0010FA  CFDE F05F          	movff	postinc2,printf@fval+1
  1056  0010FE  CFDD F060          	movff	postdec2,printf@fval+2
  1057  001102  0E03               	movlw	3
  1058  001104  264E               	addwf	printf@ap,f,c
  1059  001106  0E00               	movlw	0
  1060  001108  224F               	addwfc	printf@ap+1,f,c
  1061                           
  1062                           ;doprnt.c: 831: if(fval < 0.0) {
  1063  00110A  AE60               	btfss	printf@fval+2,7,c
  1064  00110C  D011               	goto	l2400
  1065                           
  1066                           ;doprnt.c: 832: fval = -fval;
  1067  00110E  C05E  F001         	movff	printf@fval,___ftneg@f1
  1068  001112  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1069  001116  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1070  00111A  ECE9  F014         	call	___ftneg	;wreg free
  1071  00111E  C001  F05E         	movff	?___ftneg,printf@fval
  1072  001122  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1073  001126  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1074                           
  1075                           ;doprnt.c: 833: flag |= 0x03;
  1076  00112A  0E03               	movlw	3
  1077  00112C  1250               	iorwf	printf@flag,f,c
  1078  00112E  D000               	goto	l2400
  1079  001130                     l2400:
  1080                           
  1081                           ;doprnt.c: 834: }
  1082                           ;doprnt.c: 835: exp = 0;
  1083  001130  0E00               	movlw	0
  1084  001132  6E59               	movwf	printf@exp+1,c
  1085  001134  0E00               	movlw	0
  1086  001136  6E58               	movwf	printf@exp,c
  1087                           
  1088                           ;doprnt.c: 836: if( fval!=0) {
  1089  001138  505E               	movf	printf@fval,w,c
  1090  00113A  105F               	iorwf	printf@fval+1,w,c
  1091  00113C  1060               	iorwf	printf@fval+2,w,c
  1092  00113E  B4D8               	btfsc	status,2,c
  1093  001140  D085               	goto	l2428
  1094                           
  1095                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1096  001142  0E82               	movlw	130
  1097  001144  6E45               	movwf	??_printf& (0+255),c
  1098  001146  0EFF               	movlw	255
  1099  001148  6E46               	movwf	(??_printf+1)& (0+255),c
  1100  00114A  C05E  F047         	movff	printf@fval,??_printf+2
  1101  00114E  C05F  F048         	movff	printf@fval+1,??_printf+3
  1102  001152  C060  F049         	movff	printf@fval+2,??_printf+4
  1103  001156  C061  F04A         	movff	printf@fval+3,??_printf+5
  1104  00115A  0E10               	movlw	16
  1105  00115C  D005               	goto	u2430
  1106  00115E                     u2435:
  1107  00115E  90D8               	bcf	status,0,c
  1108  001160  324A               	rrcf	??_printf+5,f,c
  1109  001162  3249               	rrcf	??_printf+4,f,c
  1110  001164  3248               	rrcf	??_printf+3,f,c
  1111  001166  3247               	rrcf	??_printf+2,f,c
  1112  001168                     u2430:
  1113  001168  2EE8               	decfsz	wreg,f,c
  1114  00116A  D7F9               	goto	u2435
  1115  00116C  5047               	movf	??_printf+2,w,c
  1116  00116E  2445               	addwf	??_printf,w,c
  1117  001170  6E58               	movwf	printf@exp,c
  1118  001172  0E00               	movlw	0
  1119  001174  2046               	addwfc	??_printf+1,w,c
  1120  001176  6E59               	movwf	printf@exp+1,c
  1121                           
  1122                           ;doprnt.c: 838: exp--;
  1123  001178  0658               	decf	printf@exp,f,c
  1124  00117A  A0D8               	btfss	status,0,c
  1125  00117C  0659               	decf	printf@exp+1,f,c
  1126                           
  1127                           ;doprnt.c: 839: exp *= 3;
  1128  00117E  C058  F00F         	movff	printf@exp,___wmul@multiplier
  1129  001182  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1130  001186  0E00               	movlw	0
  1131  001188  6E12               	movwf	___wmul@multiplicand+1,c
  1132  00118A  0E03               	movlw	3
  1133  00118C  6E11               	movwf	___wmul@multiplicand,c
  1134  00118E  ECC2  F014         	call	___wmul	;wreg free
  1135  001192  C00F  F058         	movff	?___wmul,printf@exp
  1136  001196  C010  F059         	movff	?___wmul+1,printf@exp+1
  1137                           
  1138                           ;doprnt.c: 840: exp /= 10;
  1139  00119A  C058  F001         	movff	printf@exp,___awdiv@dividend
  1140  00119E  C059  F002         	movff	printf@exp+1,___awdiv@dividend+1
  1141  0011A2  0E00               	movlw	0
  1142  0011A4  6E04               	movwf	___awdiv@divisor+1,c
  1143  0011A6  0E0A               	movlw	10
  1144  0011A8  6E03               	movwf	___awdiv@divisor,c
  1145  0011AA  EC91  F012         	call	___awdiv	;wreg free
  1146  0011AE  C001  F058         	movff	?___awdiv,printf@exp
  1147  0011B2  C002  F059         	movff	?___awdiv+1,printf@exp+1
  1148                           
  1149                           ;doprnt.c: 841: if(exp < 0)
  1150  0011B6  AE59               	btfss	printf@exp+1,7,c
  1151  0011B8  D004               	goto	l2416
  1152                           
  1153                           ;doprnt.c: 842: exp--;
  1154  0011BA  0658               	decf	printf@exp,f,c
  1155  0011BC  A0D8               	btfss	status,0,c
  1156  0011BE  0659               	decf	printf@exp+1,f,c
  1157  0011C0  D000               	goto	l2416
  1158  0011C2                     l2416:
  1159                           
  1160                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1161  0011C2  5058               	movf	printf@exp,w,c
  1162  0011C4  0800               	sublw	0
  1163  0011C6  EC5A  F00B         	call	_scale
  1164  0011CA  C024  F05A         	movff	?_scale,printf@tmpval
  1165  0011CE  C025  F05B         	movff	?_scale+1,printf@tmpval+1
  1166  0011D2  C026  F05C         	movff	?_scale+2,printf@tmpval+2
  1167                           
  1168                           ;doprnt.c: 847: tmpval.integ *= fval;
  1169  0011D6  C05A  F015         	movff	printf@tmpval,___ftmul@f1
  1170  0011DA  C05B  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1171  0011DE  C05C  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1172  0011E2  C05E  F018         	movff	printf@fval,___ftmul@f2
  1173  0011E6  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1174  0011EA  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1175  0011EE  EC5B  F010         	call	___ftmul	;wreg free
  1176  0011F2  C015  F05A         	movff	?___ftmul,printf@tmpval
  1177  0011F6  C016  F05B         	movff	?___ftmul+1,printf@tmpval+1
  1178  0011FA  C017  F05C         	movff	?___ftmul+2,printf@tmpval+2
  1179                           
  1180                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1181  0011FE  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1182  001202  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1183  001206  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1184  00120A  0E00               	movlw	0
  1185  00120C  6E04               	movwf	___ftge@ff2,c
  1186  00120E  0E80               	movlw	128
  1187  001210  6E05               	movwf	___ftge@ff2+1,c
  1188  001212  0E3F               	movlw	63
  1189  001214  6E06               	movwf	___ftge@ff2+2,c
  1190  001216  ECDC  F012         	call	___ftge	;wreg free
  1191  00121A  B0D8               	btfsc	status,0,c
  1192  00121C  D004               	goto	l2424
  1193                           
  1194                           ;doprnt.c: 849: exp--;
  1195  00121E  0658               	decf	printf@exp,f,c
  1196  001220  A0D8               	btfss	status,0,c
  1197  001222  0659               	decf	printf@exp+1,f,c
  1198  001224  D013               	goto	l2428
  1199  001226                     l2424:
  1200                           
  1201                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1202  001226  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1203  00122A  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1204  00122E  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1205  001232  0E00               	movlw	0
  1206  001234  6E04               	movwf	___ftge@ff2,c
  1207  001236  0E20               	movlw	32
  1208  001238  6E05               	movwf	___ftge@ff2+1,c
  1209  00123A  0E41               	movlw	65
  1210  00123C  6E06               	movwf	___ftge@ff2+2,c
  1211  00123E  ECDC  F012         	call	___ftge	;wreg free
  1212  001242  A0D8               	btfss	status,0,c
  1213  001244  D003               	goto	l2428
  1214                           
  1215                           ;doprnt.c: 851: exp++;
  1216  001246  4A58               	infsnz	printf@exp,f,c
  1217  001248  2A59               	incf	printf@exp+1,f,c
  1218  00124A  D000               	goto	l2428
  1219  00124C                     l2428:
  1220                           
  1221                           ;doprnt.c: 852: }
  1222                           ;doprnt.c: 1112: if(prec <= 12)
  1223  00124C  BE53               	btfsc	printf@prec+1,7,c
  1224  00124E  D006               	goto	l2430
  1225  001250  5053               	movf	printf@prec+1,w,c
  1226  001252  E11C               	bnz	l2432
  1227  001254  0E0D               	movlw	13
  1228  001256  5C52               	subwf	printf@prec,w,c
  1229  001258  B0D8               	btfsc	status,0,c
  1230  00125A  D018               	goto	l2432
  1231  00125C                     l2430:
  1232                           
  1233                           ;doprnt.c: 1113: fval += fround(prec);
  1234  00125C  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1235  001260  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1236  001264  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1237  001268  5052               	movf	printf@prec,w,c
  1238  00126A  EC4A  F00D         	call	_fround
  1239  00126E  C024  F031         	movff	?_fround,___ftadd@f2
  1240  001272  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1241  001276  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1242  00127A  EC6C  F00E         	call	___ftadd	;wreg free
  1243  00127E  C02E  F05E         	movff	?___ftadd,printf@fval
  1244  001282  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1245  001286  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1246  00128A  D000               	goto	l2432
  1247  00128C                     l2432:
  1248                           
  1249                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1250  00128C  BE59               	btfsc	printf@exp+1,7,c
  1251  00128E  D006               	goto	l2434
  1252  001290  5059               	movf	printf@exp+1,w,c
  1253  001292  E120               	bnz	l2440
  1254  001294  0E0A               	movlw	10
  1255  001296  5C58               	subwf	printf@exp,w,c
  1256  001298  B0D8               	btfsc	status,0,c
  1257  00129A  D01C               	goto	l2440
  1258  00129C                     l2434:
  1259  00129C  505E               	movf	printf@fval,w,c
  1260  00129E  105F               	iorwf	printf@fval+1,w,c
  1261  0012A0  1060               	iorwf	printf@fval+2,w,c
  1262  0012A2  B4D8               	btfsc	status,2,c
  1263  0012A4  D06D               	goto	l2454
  1264  0012A6  C05E  F02B         	movff	printf@fval,___fttol@f1
  1265  0012AA  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1266  0012AE  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1267  0012B2  EC4A  F011         	call	___fttol	;wreg free
  1268  0012B6  502B               	movf	?___fttol,w,c
  1269  0012B8  102C               	iorwf	?___fttol+1,w,c
  1270  0012BA  102D               	iorwf	?___fttol+2,w,c
  1271  0012BC  102E               	iorwf	?___fttol+3,w,c
  1272  0012BE  B4D8               	btfsc	status,2,c
  1273  0012C0  BE59               	btfsc	printf@exp+1,7,c
  1274  0012C2  D05E               	goto	l2454
  1275  0012C4  5059               	movf	printf@exp+1,w,c
  1276  0012C6  E106               	bnz	l2440
  1277  0012C8  0E02               	movlw	2
  1278  0012CA  5C58               	subwf	printf@exp,w,c
  1279  0012CC  B0D8               	btfsc	status,0,c
  1280  0012CE  D002               	goto	l2440
  1281  0012D0  D057               	goto	l2454
  1282  0012D2  D000               	goto	l2440
  1283  0012D4                     l2440:
  1284                           
  1285                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1286  0012D4  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1287  0012D8  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1288  0012DC  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1289  0012E0  0E70               	movlw	112
  1290  0012E2  6E04               	movwf	___ftge@ff2,c
  1291  0012E4  0E89               	movlw	137
  1292  0012E6  6E05               	movwf	___ftge@ff2+1,c
  1293  0012E8  0E40               	movlw	64
  1294  0012EA  6E06               	movwf	___ftge@ff2+2,c
  1295  0012EC  ECDC  F012         	call	___ftge	;wreg free
  1296  0012F0  B0D8               	btfsc	status,0,c
  1297  0012F2  D002               	goto	l2444
  1298                           
  1299                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1300  0012F4  0EF7               	movlw	247
  1301  0012F6  D001               	goto	L1
  1302  0012F8                     l2444:
  1303                           
  1304                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1305  0012F8  0EF8               	movlw	248
  1306  0012FA                     L1:
  1307  0012FA  2658               	addwf	printf@exp,f,c
  1308  0012FC  0EFF               	movlw	255
  1309  0012FE  2259               	addwfc	printf@exp+1,f,c
  1310  001300  D000               	goto	l2446
  1311  001302                     l2446:
  1312                           
  1313                           ;doprnt.c: 1124: }
  1314                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1315  001302  5058               	movf	printf@exp,w,c
  1316  001304  EC5A  F00B         	call	_scale
  1317  001308  C024  F05A         	movff	?_scale,printf@tmpval
  1318  00130C  C025  F05B         	movff	?_scale+1,printf@tmpval+1
  1319  001310  C026  F05C         	movff	?_scale+2,printf@tmpval+2
  1320                           
  1321                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1322  001314  D017               	goto	l2450
  1323  001316  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1324  00131A  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1325  00131E  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1326  001322  C05A  F004         	movff	printf@tmpval,__div_to_l_@f2
  1327  001326  C05B  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1328  00132A  C05C  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1329  00132E  ECD6  F00F         	call	__div_to_l_	;wreg free
  1330  001332  C001  F054         	movff	?__div_to_l_,printf@val
  1331  001336  C002  F055         	movff	?__div_to_l_+1,printf@val+1
  1332  00133A  C003  F056         	movff	?__div_to_l_+2,printf@val+2
  1333  00133E  C004  F057         	movff	?__div_to_l_+3,printf@val+3
  1334  001342  D017               	goto	l2452
  1335  001344                     l2450:
  1336  001344  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1337  001348  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1338  00134C  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1339  001350  C05A  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1340  001354  C05B  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1341  001358  C05C  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1342  00135C  EC4E  F00F         	call	__tdiv_to_l_	;wreg free
  1343  001360  C001  F054         	movff	?__tdiv_to_l_,printf@val
  1344  001364  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  1345  001368  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  1346  00136C  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  1347  001370  D000               	goto	l2452
  1348  001372                     l2452:
  1349                           
  1350                           ;doprnt.c: 1129: fval = 0.0;
  1351  001372  0E00               	movlw	0
  1352  001374  6E5E               	movwf	printf@fval,c
  1353  001376  0E00               	movlw	0
  1354  001378  6E5F               	movwf	printf@fval+1,c
  1355  00137A  0E00               	movlw	0
  1356  00137C  6E60               	movwf	printf@fval+2,c
  1357                           
  1358                           ;doprnt.c: 1130: } else {
  1359  00137E  D033               	goto	l2458
  1360  001380                     l2454:
  1361                           
  1362                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1363  001380  C05E  F02B         	movff	printf@fval,___fttol@f1
  1364  001384  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1365  001388  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1366  00138C  EC4A  F011         	call	___fttol	;wreg free
  1367  001390  C02B  F054         	movff	?___fttol,printf@val
  1368  001394  C02C  F055         	movff	?___fttol+1,printf@val+1
  1369  001398  C02D  F056         	movff	?___fttol+2,printf@val+2
  1370  00139C  C02E  F057         	movff	?___fttol+3,printf@val+3
  1371                           
  1372                           ;doprnt.c: 1132: fval -= (double)val;
  1373  0013A0  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1374  0013A4  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1375  0013A8  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1376  0013AC  C054  F009         	movff	printf@val,___lltoft@c
  1377  0013B0  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  1378  0013B4  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  1379  0013B8  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  1380  0013BC  EC1E  F014         	call	___lltoft	;wreg free
  1381  0013C0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1382  0013C4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1383  0013C8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1384  0013CC  EC4E  F014         	call	___ftsub	;wreg free
  1385  0013D0  C03A  F05E         	movff	?___ftsub,printf@fval
  1386  0013D4  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1387  0013D8  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1388                           
  1389                           ;doprnt.c: 1133: exp = 0;
  1390  0013DC  0E00               	movlw	0
  1391  0013DE  6E59               	movwf	printf@exp+1,c
  1392  0013E0  0E00               	movlw	0
  1393  0013E2  6E58               	movwf	printf@exp,c
  1394  0013E4  D000               	goto	l2458
  1395  0013E6                     l2458:
  1396                           
  1397                           ;doprnt.c: 1134: }
  1398                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1399  0013E6  0E01               	movlw	1
  1400  0013E8  6E61               	movwf	printf@c,c
  1401  0013EA                     l2460:
  1402  0013EA  0E0A               	movlw	10
  1403  0013EC  1861               	xorwf	printf@c,w,c
  1404  0013EE  B4D8               	btfsc	status,2,c
  1405  0013F0  D01C               	goto	l2472
  1406  0013F2  D001               	goto	l2464
  1407  0013F4  D01A               	goto	l2472
  1408  0013F6                     l2464:
  1409                           
  1410                           ;doprnt.c: 1137: if(val < dpowers[c])
  1411  0013F6  5061               	movf	printf@c,w,c
  1412  0013F8  0D04               	mullw	4
  1413  0013FA  0E01               	movlw	low _dpowers
  1414  0013FC  24F3               	addwf	prodl,w,c
  1415  0013FE  6EF6               	movwf	tblptrl,c
  1416  001400  0E10               	movlw	high _dpowers
  1417  001402  20F4               	addwfc	prodh,w,c
  1418  001404  6EF7               	movwf	tblptrh,c
  1419  001406                     	if	0	;There are less than 3 active tblptr bytes
  1420  001406                     	endif
  1421  001406  0009               	tblrd		*+
  1422  001408  50F5               	movf	tablat,w,c
  1423  00140A  5C54               	subwf	printf@val,w,c
  1424  00140C  0009               	tblrd		*+
  1425  00140E  50F5               	movf	tablat,w,c
  1426  001410  5855               	subwfb	printf@val+1,w,c
  1427  001412  0009               	tblrd		*+
  1428  001414  50F5               	movf	tablat,w,c
  1429  001416  5856               	subwfb	printf@val+2,w,c
  1430  001418  0009               	tblrd		*+
  1431  00141A  50F5               	movf	tablat,w,c
  1432  00141C  5857               	subwfb	printf@val+3,w,c
  1433  00141E  A0D8               	btfss	status,0,c
  1434  001420  D004               	goto	l2472
  1435  001422  D001               	goto	l2468
  1436                           
  1437                           ;doprnt.c: 1138: break;
  1438  001424  D002               	goto	l2472
  1439  001426                     l2468:
  1440  001426  2A61               	incf	printf@c,f,c
  1441  001428  D7E0               	goto	l2460
  1442  00142A                     l2472:
  1443                           
  1444                           ;doprnt.c: 1175: {
  1445                           ;doprnt.c: 1188: if(flag & 0x03)
  1446  00142A  0E03               	movlw	3
  1447  00142C  1450               	andwf	printf@flag,w,c
  1448  00142E  6E45               	movwf	??_printf& (0+255),c
  1449  001430  0E00               	movlw	0
  1450  001432  1451               	andwf	printf@flag+1,w,c
  1451  001434  6E46               	movwf	(??_printf+1)& (0+255),c
  1452  001436  5045               	movf	??_printf,w,c
  1453  001438  1046               	iorwf	??_printf+1,w,c
  1454  00143A  B4D8               	btfsc	status,2,c
  1455  00143C  D049               	goto	l2482
  1456                           
  1457                           ;doprnt.c: 1190: (putch('-') );
  1458  00143E  0E2D               	movlw	45
  1459  001440  EC36  F015         	call	_putch
  1460                           
  1461                           ;doprnt.c: 1195: }
  1462                           ;doprnt.c: 1196: while(c--) {
  1463  001444  D045               	goto	l2482
  1464  001446                     l2476:
  1465                           
  1466                           ;doprnt.c: 1200: {
  1467                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1468  001446  C054  F001         	movff	printf@val,___lldiv@dividend
  1469  00144A  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1470  00144E  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1471  001452  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1472  001456  5061               	movf	printf@c,w,c
  1473  001458  0D04               	mullw	4
  1474  00145A  0E01               	movlw	low _dpowers
  1475  00145C  24F3               	addwf	prodl,w,c
  1476  00145E  6EF6               	movwf	tblptrl,c
  1477  001460  0E10               	movlw	high _dpowers
  1478  001462  20F4               	addwfc	prodh,w,c
  1479  001464  6EF7               	movwf	tblptrh,c
  1480  001466                     	if	0	;There are less than 3 active tblptr bytes
  1481  001466                     	endif
  1482  001466  0009               	tblrd		*+
  1483  001468  CFF5 F005          	movff	tablat,___lldiv@divisor
  1484  00146C  0009               	tblrd		*+
  1485  00146E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1486  001472  0009               	tblrd		*+
  1487  001474  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1488  001478  000A               	tblrd		*-
  1489  00147A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1490  00147E  EC27  F013         	call	___lldiv	;wreg free
  1491  001482  C001  F05A         	movff	?___lldiv,printf@tmpval
  1492  001486  C002  F05B         	movff	?___lldiv+1,printf@tmpval+1
  1493  00148A  C003  F05C         	movff	?___lldiv+2,printf@tmpval+2
  1494  00148E  C004  F05D         	movff	?___lldiv+3,printf@tmpval+3
  1495                           
  1496                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1497  001492  C05A  F001         	movff	printf@tmpval,___llmod@dividend
  1498  001496  C05B  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1499  00149A  C05C  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1500  00149E  C05D  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1501  0014A2  0E0A               	movlw	10
  1502  0014A4  6E05               	movwf	___llmod@divisor,c
  1503  0014A6  0E00               	movlw	0
  1504  0014A8  6E06               	movwf	___llmod@divisor+1,c
  1505  0014AA  0E00               	movlw	0
  1506  0014AC  6E07               	movwf	___llmod@divisor+2,c
  1507  0014AE  0E00               	movlw	0
  1508  0014B0  6E08               	movwf	___llmod@divisor+3,c
  1509  0014B2  ECAE  F013         	call	___llmod	;wreg free
  1510  0014B6  C001  F05A         	movff	?___llmod,printf@tmpval
  1511  0014BA  C002  F05B         	movff	?___llmod+1,printf@tmpval+1
  1512  0014BE  C003  F05C         	movff	?___llmod+2,printf@tmpval+2
  1513  0014C2  C004  F05D         	movff	?___llmod+3,printf@tmpval+3
  1514                           
  1515                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1516  0014C6  505A               	movf	printf@tmpval,w,c
  1517  0014C8  0F30               	addlw	48
  1518  0014CA  EC36  F015         	call	_putch
  1519  0014CE  D000               	goto	l2482
  1520  0014D0                     l2482:
  1521  0014D0  0661               	decf	printf@c,f,c
  1522  0014D2  2861               	incf	printf@c,w,c
  1523  0014D4  B4D8               	btfsc	status,2,c
  1524  0014D6  D009               	goto	l2488
  1525  0014D8  D7B6               	goto	l2476
  1526                           
  1527                           ;doprnt.c: 1204: }
  1528                           ;doprnt.c: 1206: }
  1529                           ;doprnt.c: 1207: while(exp > 0) {
  1530  0014DA  D007               	goto	l2488
  1531  0014DC                     l2484:
  1532                           
  1533                           ;doprnt.c: 1208: (putch('0') );
  1534  0014DC  0E30               	movlw	48
  1535  0014DE  EC36  F015         	call	_putch
  1536                           
  1537                           ;doprnt.c: 1209: exp--;
  1538  0014E2  0658               	decf	printf@exp,f,c
  1539  0014E4  A0D8               	btfss	status,0,c
  1540  0014E6  0659               	decf	printf@exp+1,f,c
  1541  0014E8  D000               	goto	l2488
  1542  0014EA                     l2488:
  1543  0014EA  BE59               	btfsc	printf@exp+1,7,c
  1544  0014EC  D005               	goto	l2490
  1545  0014EE  5059               	movf	printf@exp+1,w,c
  1546  0014F0  E1F5               	bnz	l2484
  1547  0014F2  0458               	decf	printf@exp,w,c
  1548  0014F4  B0D8               	btfsc	status,0,c
  1549  0014F6  D7F2               	goto	l2484
  1550  0014F8                     l2490:
  1551                           
  1552                           ;doprnt.c: 1210: }
  1553                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1554  0014F8  BE53               	btfsc	printf@prec+1,7,c
  1555  0014FA  D009               	goto	l196
  1556  0014FC  5053               	movf	printf@prec+1,w,c
  1557  0014FE  E104               	bnz	u2590
  1558  001500  0E09               	movlw	9
  1559  001502  5C52               	subwf	printf@prec,w,c
  1560  001504  A0D8               	btfss	status,0,c
  1561  001506  D003               	goto	l196
  1562  001508                     u2590:
  1563                           
  1564                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1565  001508  0E08               	movlw	8
  1566  00150A  6E61               	movwf	printf@c,c
  1567  00150C  D003               	goto	l2494
  1568  00150E                     l196:
  1569                           
  1570                           ;doprnt.c: 1213: else
  1571                           ;doprnt.c: 1214: c = prec;
  1572  00150E  C052  F061         	movff	printf@prec,printf@c
  1573  001512  D000               	goto	l2494
  1574  001514                     l2494:
  1575                           
  1576                           ;doprnt.c: 1215: prec -= c;
  1577  001514  5061               	movf	printf@c,w,c
  1578  001516  5E52               	subwf	printf@prec,f,c
  1579  001518  0E00               	movlw	0
  1580  00151A  BE61               	btfsc	printf@c,7,c
  1581  00151C  0EFF               	movlw	255
  1582  00151E  5A53               	subwfb	printf@prec+1,f,c
  1583                           
  1584                           ;doprnt.c: 1219: if(c)
  1585  001520  5061               	movf	printf@c,w,c
  1586  001522  B4D8               	btfsc	status,2,c
  1587  001524  D004               	goto	l2500
  1588                           
  1589                           ;doprnt.c: 1221: (putch('.') );
  1590  001526  0E2E               	movlw	46
  1591  001528  EC36  F015         	call	_putch
  1592  00152C  D000               	goto	l2500
  1593  00152E                     l2500:
  1594                           
  1595                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1596  00152E  5061               	movf	printf@c,w,c
  1597  001530  EC5A  F00B         	call	_scale
  1598  001534  C024  F04B         	movff	?_scale,_printf$1256
  1599  001538  C025  F04C         	movff	?_scale+1,_printf$1256+1
  1600  00153C  C026  F04D         	movff	?_scale+2,_printf$1256+2
  1601                           
  1602                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1603  001540  C05E  F018         	movff	printf@fval,___ftmul@f2
  1604  001544  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1605  001548  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1606  00154C  C04B  F015         	movff	_printf$1256,___ftmul@f1
  1607  001550  C04C  F016         	movff	_printf$1256+1,___ftmul@f1+1
  1608  001554  C04D  F017         	movff	_printf$1256+2,___ftmul@f1+2
  1609  001558  EC5B  F010         	call	___ftmul	;wreg free
  1610  00155C  C015  F02B         	movff	?___ftmul,___fttol@f1
  1611  001560  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1612  001564  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1613  001568  EC4A  F011         	call	___fttol	;wreg free
  1614  00156C  C02B  F054         	movff	?___fttol,printf@val
  1615  001570  C02C  F055         	movff	?___fttol+1,printf@val+1
  1616  001574  C02D  F056         	movff	?___fttol+2,printf@val+2
  1617  001578  C02E  F057         	movff	?___fttol+3,printf@val+3
  1618                           
  1619                           ;doprnt.c: 1228: while(c--) {
  1620  00157C  D06B               	goto	l2510
  1621  00157E                     l2504:
  1622                           
  1623                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1624  00157E  C054  F001         	movff	printf@val,___lldiv@dividend
  1625  001582  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1626  001586  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1627  00158A  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1628  00158E  5061               	movf	printf@c,w,c
  1629  001590  0D04               	mullw	4
  1630  001592  0E01               	movlw	low _dpowers
  1631  001594  24F3               	addwf	prodl,w,c
  1632  001596  6EF6               	movwf	tblptrl,c
  1633  001598  0E10               	movlw	high _dpowers
  1634  00159A  20F4               	addwfc	prodh,w,c
  1635  00159C  6EF7               	movwf	tblptrh,c
  1636  00159E                     	if	0	;There are less than 3 active tblptr bytes
  1637  00159E                     	endif
  1638  00159E  0009               	tblrd		*+
  1639  0015A0  CFF5 F005          	movff	tablat,___lldiv@divisor
  1640  0015A4  0009               	tblrd		*+
  1641  0015A6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1642  0015AA  0009               	tblrd		*+
  1643  0015AC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1644  0015B0  000A               	tblrd		*-
  1645  0015B2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1646  0015B6  EC27  F013         	call	___lldiv	;wreg free
  1647  0015BA  C001  F05A         	movff	?___lldiv,printf@tmpval
  1648  0015BE  C002  F05B         	movff	?___lldiv+1,printf@tmpval+1
  1649  0015C2  C003  F05C         	movff	?___lldiv+2,printf@tmpval+2
  1650  0015C6  C004  F05D         	movff	?___lldiv+3,printf@tmpval+3
  1651                           
  1652                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1653  0015CA  C05A  F001         	movff	printf@tmpval,___llmod@dividend
  1654  0015CE  C05B  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1655  0015D2  C05C  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1656  0015D6  C05D  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1657  0015DA  0E0A               	movlw	10
  1658  0015DC  6E05               	movwf	___llmod@divisor,c
  1659  0015DE  0E00               	movlw	0
  1660  0015E0  6E06               	movwf	___llmod@divisor+1,c
  1661  0015E2  0E00               	movlw	0
  1662  0015E4  6E07               	movwf	___llmod@divisor+2,c
  1663  0015E6  0E00               	movlw	0
  1664  0015E8  6E08               	movwf	___llmod@divisor+3,c
  1665  0015EA  ECAE  F013         	call	___llmod	;wreg free
  1666  0015EE  C001  F05A         	movff	?___llmod,printf@tmpval
  1667  0015F2  C002  F05B         	movff	?___llmod+1,printf@tmpval+1
  1668  0015F6  C003  F05C         	movff	?___llmod+2,printf@tmpval+2
  1669  0015FA  C004  F05D         	movff	?___llmod+3,printf@tmpval+3
  1670                           
  1671                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1672  0015FE  505A               	movf	printf@tmpval,w,c
  1673  001600  0F30               	addlw	48
  1674  001602  EC36  F015         	call	_putch
  1675                           
  1676                           ;doprnt.c: 1232: val %= dpowers[c];
  1677  001606  C054  F001         	movff	printf@val,___llmod@dividend
  1678  00160A  C055  F002         	movff	printf@val+1,___llmod@dividend+1
  1679  00160E  C056  F003         	movff	printf@val+2,___llmod@dividend+2
  1680  001612  C057  F004         	movff	printf@val+3,___llmod@dividend+3
  1681  001616  5061               	movf	printf@c,w,c
  1682  001618  0D04               	mullw	4
  1683  00161A  0E01               	movlw	low _dpowers
  1684  00161C  24F3               	addwf	prodl,w,c
  1685  00161E  6EF6               	movwf	tblptrl,c
  1686  001620  0E10               	movlw	high _dpowers
  1687  001622  20F4               	addwfc	prodh,w,c
  1688  001624  6EF7               	movwf	tblptrh,c
  1689  001626                     	if	0	;There are less than 3 active tblptr bytes
  1690  001626                     	endif
  1691  001626  0009               	tblrd		*+
  1692  001628  CFF5 F005          	movff	tablat,___llmod@divisor
  1693  00162C  0009               	tblrd		*+
  1694  00162E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1695  001632  0009               	tblrd		*+
  1696  001634  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1697  001638  000A               	tblrd		*-
  1698  00163A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1699  00163E  ECAE  F013         	call	___llmod	;wreg free
  1700  001642  C001  F054         	movff	?___llmod,printf@val
  1701  001646  C002  F055         	movff	?___llmod+1,printf@val+1
  1702  00164A  C003  F056         	movff	?___llmod+2,printf@val+2
  1703  00164E  C004  F057         	movff	?___llmod+3,printf@val+3
  1704  001652  D000               	goto	l2510
  1705  001654                     l2510:
  1706  001654  0661               	decf	printf@c,f,c
  1707  001656  2861               	incf	printf@c,w,c
  1708  001658  B4D8               	btfsc	status,2,c
  1709  00165A  D009               	goto	l2516
  1710  00165C  D790               	goto	l2504
  1711                           
  1712                           ;doprnt.c: 1233: }
  1713                           ;doprnt.c: 1235: while(prec) {
  1714  00165E  D007               	goto	l2516
  1715  001660                     l2512:
  1716                           
  1717                           ;doprnt.c: 1236: (putch('0') );
  1718  001660  0E30               	movlw	48
  1719  001662  EC36  F015         	call	_putch
  1720                           
  1721                           ;doprnt.c: 1237: prec--;
  1722  001666  0652               	decf	printf@prec,f,c
  1723  001668  A0D8               	btfss	status,0,c
  1724  00166A  0653               	decf	printf@prec+1,f,c
  1725  00166C  D000               	goto	l2516
  1726  00166E                     l2516:
  1727  00166E  5052               	movf	printf@prec,w,c
  1728  001670  1053               	iorwf	printf@prec+1,w,c
  1729  001672  B4D8               	btfsc	status,2,c
  1730  001674  D010               	goto	l2522
  1731  001676  D7F4               	goto	l2512
  1732                           
  1733                           ;doprnt.c: 1238: }
  1734                           ;doprnt.c: 1245: continue;
  1735  001678  D00E               	goto	l2522
  1736  00167A                     l2518:
  1737                           
  1738                           ;doprnt.c: 1246: }
  1739                           ;doprnt.c: 1422: {
  1740                           ;doprnt.c: 1438: if(flag & 0x03)
  1741  00167A  0E03               	movlw	3
  1742  00167C  1450               	andwf	printf@flag,w,c
  1743  00167E  6E45               	movwf	??_printf& (0+255),c
  1744  001680  0E00               	movlw	0
  1745  001682  1451               	andwf	printf@flag+1,w,c
  1746  001684  6E46               	movwf	(??_printf+1)& (0+255),c
  1747  001686  5045               	movf	??_printf,w,c
  1748  001688  1046               	iorwf	??_printf+1,w,c
  1749  00168A  B4D8               	btfsc	status,2,c
  1750  00168C  D004               	goto	l2522
  1751                           
  1752                           ;doprnt.c: 1439: (putch('-') );
  1753  00168E  0E2D               	movlw	45
  1754  001690  EC36  F015         	call	_putch
  1755  001694  D000               	goto	l2522
  1756  001696                     l2522:
  1757  001696  C040  FFF6         	movff	printf@f,tblptrl
  1758  00169A  C041  FFF7         	movff	printf@f+1,tblptrh
  1759  00169E  4A40               	infsnz	printf@f,f,c
  1760  0016A0  2A41               	incf	printf@f+1,f,c
  1761  0016A2                     	if	0	;tblptru may be non-zero
  1762  0016A2                     	endif
  1763  0016A2                     	if	0	;tblptru may be non-zero
  1764  0016A2                     	endif
  1765  0016A2  0008               	tblrd		*
  1766  0016A4  CFF5 F061          	movff	tablat,printf@c
  1767  0016A8  5061               	movf	printf@c,w,c
  1768  0016AA  B4D8               	btfsc	status,2,c
  1769  0016AC  D002               	goto	l207
  1770  0016AE  D4F4               	goto	l2374
  1771  0016B0  D000               	goto	l207
  1772  0016B2                     l207:
  1773  0016B2  0012               	return		;funcret
  1774  0016B4                     __end_of_printf:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           prodh	equ	0xFF4
  1781                           prodl	equ	0xFF3
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           postdec1	equ	0xFE5
  1785                           fsr1l	equ	0xFE1
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function _scale *****************
  1793 ;; Defined at:
  1794 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  scl             1    wreg     char 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  scl             1   41[COMRAM] char 
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  3   35[COMRAM] char 
  1801 ;; Registers used:
  1802 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1808 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;Total ram usage:        7 bytes
  1813 ;; Hardware stack levels used:    1
  1814 ;; Hardware stack levels required when called:    2
  1815 ;; This function calls:
  1816 ;;		___awdiv
  1817 ;;		___awmod
  1818 ;;		___ftmul
  1819 ;;		___wmul
  1820 ;; This function is called by:
  1821 ;;		_printf
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text2
  1826  0016B4                     __ptext2:
  1827                           	opt stack 0
  1828  0016B4                     _scale:
  1829                           	opt stack 27
  1830                           
  1831                           ;incstack = 0
  1832                           ;scale@scl stored from wreg
  1833  0016B4  6E2A               	movwf	scale@scl,c
  1834                           
  1835                           ;doprnt.c: 428: if(scl < 0) {
  1836  0016B6  AE2A               	btfss	scale@scl,7,c
  1837  0016B8  D0EF               	goto	l2102
  1838                           
  1839                           ;doprnt.c: 429: scl = -scl;
  1840  0016BA  6C2A               	negf	scale@scl,c
  1841                           
  1842                           ;doprnt.c: 430: if(scl>=110)
  1843  0016BC  502A               	movf	scale@scl,w,c
  1844  0016BE  0A80               	xorlw	128
  1845  0016C0  0F12               	addlw	-238
  1846  0016C2  A0D8               	btfss	status,0,c
  1847  0016C4  D08D               	goto	l2092
  1848                           
  1849                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1850  0016C6  0E00               	movlw	0
  1851  0016C8  6E12               	movwf	___wmul@multiplicand+1,c
  1852  0016CA  0E03               	movlw	3
  1853  0016CC  6E11               	movwf	___wmul@multiplicand,c
  1854  0016CE  0E00               	movlw	0
  1855  0016D0  6E04               	movwf	___awdiv@divisor+1,c
  1856  0016D2  0E0A               	movlw	10
  1857  0016D4  6E03               	movwf	___awdiv@divisor,c
  1858  0016D6  0E00               	movlw	0
  1859  0016D8  6E0C               	movwf	___awmod@divisor+1,c
  1860  0016DA  0E64               	movlw	100
  1861  0016DC  6E0B               	movwf	___awmod@divisor,c
  1862  0016DE  502A               	movf	scale@scl,w,c
  1863  0016E0  6E09               	movwf	___awmod@dividend,c
  1864  0016E2  6A0A               	clrf	___awmod@dividend+1,c
  1865  0016E4  BE09               	btfsc	___awmod@dividend,7,c
  1866  0016E6  060A               	decf	___awmod@dividend+1,f,c
  1867  0016E8  EC6D  F013         	call	___awmod	;wreg free
  1868  0016EC  C009  F001         	movff	?___awmod,___awdiv@dividend
  1869  0016F0  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  1870  0016F4  EC91  F012         	call	___awdiv	;wreg free
  1871  0016F8  0E09               	movlw	9
  1872  0016FA  2401               	addwf	?___awdiv,w,c
  1873  0016FC  6E0F               	movwf	___wmul@multiplier,c
  1874  0016FE  0E00               	movlw	0
  1875  001700  2002               	addwfc	?___awdiv+1,w,c
  1876  001702  6E10               	movwf	___wmul@multiplier+1,c
  1877  001704  ECC2  F014         	call	___wmul	;wreg free
  1878  001708  0E29               	movlw	low __npowers_
  1879  00170A  240F               	addwf	?___wmul,w,c
  1880  00170C  6EF6               	movwf	tblptrl,c
  1881  00170E  0E10               	movlw	high __npowers_
  1882  001710  2010               	addwfc	?___wmul+1,w,c
  1883  001712  6EF7               	movwf	tblptrh,c
  1884  001714                     	if	0	;There are less than 3 active tblptr bytes
  1885  001714                     	endif
  1886  001714  0009               	tblrd		*+
  1887  001716  CFF5 F018          	movff	tablat,___ftmul@f2
  1888  00171A  0009               	tblrd		*+
  1889  00171C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1890  001720  000A               	tblrd		*-
  1891  001722  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1892  001726  0E00               	movlw	0
  1893  001728  6E04               	movwf	___awdiv@divisor+1,c
  1894  00172A  0E64               	movlw	100
  1895  00172C  6E03               	movwf	___awdiv@divisor,c
  1896  00172E  502A               	movf	scale@scl,w,c
  1897  001730  6E01               	movwf	___awdiv@dividend,c
  1898  001732  6A02               	clrf	___awdiv@dividend+1,c
  1899  001734  BE01               	btfsc	___awdiv@dividend,7,c
  1900  001736  0602               	decf	___awdiv@dividend+1,f,c
  1901  001738  EC91  F012         	call	___awdiv	;wreg free
  1902  00173C  0E12               	movlw	18
  1903  00173E  2401               	addwf	?___awdiv,w,c
  1904  001740  6E0F               	movwf	___wmul@multiplier,c
  1905  001742  0E00               	movlw	0
  1906  001744  2002               	addwfc	?___awdiv+1,w,c
  1907  001746  6E10               	movwf	___wmul@multiplier+1,c
  1908  001748  0E00               	movlw	0
  1909  00174A  6E12               	movwf	___wmul@multiplicand+1,c
  1910  00174C  0E03               	movlw	3
  1911  00174E  6E11               	movwf	___wmul@multiplicand,c
  1912  001750  ECC2  F014         	call	___wmul	;wreg free
  1913  001754  0E29               	movlw	low __npowers_
  1914  001756  240F               	addwf	?___wmul,w,c
  1915  001758  6EF6               	movwf	tblptrl,c
  1916  00175A  0E10               	movlw	high __npowers_
  1917  00175C  2010               	addwfc	?___wmul+1,w,c
  1918  00175E  6EF7               	movwf	tblptrh,c
  1919  001760                     	if	0	;There are less than 3 active tblptr bytes
  1920  001760                     	endif
  1921  001760  0009               	tblrd		*+
  1922  001762  CFF5 F015          	movff	tablat,___ftmul@f1
  1923  001766  0009               	tblrd		*+
  1924  001768  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1925  00176C  000A               	tblrd		*-
  1926  00176E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1927  001772  EC5B  F010         	call	___ftmul	;wreg free
  1928  001776  C015  F027         	movff	?___ftmul,_scale$1255
  1929  00177A  C016  F028         	movff	?___ftmul+1,_scale$1255+1
  1930  00177E  C017  F029         	movff	?___ftmul+2,_scale$1255+2
  1931                           
  1932                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1933  001782  C027  F015         	movff	_scale$1255,___ftmul@f1
  1934  001786  C028  F016         	movff	_scale$1255+1,___ftmul@f1+1
  1935  00178A  C029  F017         	movff	_scale$1255+2,___ftmul@f1+2
  1936  00178E  0E00               	movlw	0
  1937  001790  6E12               	movwf	___wmul@multiplicand+1,c
  1938  001792  0E03               	movlw	3
  1939  001794  6E11               	movwf	___wmul@multiplicand,c
  1940  001796  0E00               	movlw	0
  1941  001798  6E0C               	movwf	___awmod@divisor+1,c
  1942  00179A  0E0A               	movlw	10
  1943  00179C  6E0B               	movwf	___awmod@divisor,c
  1944  00179E  502A               	movf	scale@scl,w,c
  1945  0017A0  6E09               	movwf	___awmod@dividend,c
  1946  0017A2  6A0A               	clrf	___awmod@dividend+1,c
  1947  0017A4  BE09               	btfsc	___awmod@dividend,7,c
  1948  0017A6  060A               	decf	___awmod@dividend+1,f,c
  1949  0017A8  EC6D  F013         	call	___awmod	;wreg free
  1950  0017AC  C009  F00F         	movff	?___awmod,___wmul@multiplier
  1951  0017B0  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1952  0017B4  ECC2  F014         	call	___wmul	;wreg free
  1953  0017B8  0E29               	movlw	low __npowers_
  1954  0017BA  240F               	addwf	?___wmul,w,c
  1955  0017BC  6EF6               	movwf	tblptrl,c
  1956  0017BE  0E10               	movlw	high __npowers_
  1957  0017C0  2010               	addwfc	?___wmul+1,w,c
  1958  0017C2  6EF7               	movwf	tblptrh,c
  1959  0017C4                     	if	0	;There are less than 3 active tblptr bytes
  1960  0017C4                     	endif
  1961  0017C4  0009               	tblrd		*+
  1962  0017C6  CFF5 F018          	movff	tablat,___ftmul@f2
  1963  0017CA  0009               	tblrd		*+
  1964  0017CC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1965  0017D0  000A               	tblrd		*-
  1966  0017D2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1967  0017D6  EC5B  F010         	call	___ftmul	;wreg free
  1968  0017DA  D141               	goto	L5
  1969  0017DC  D15A               	goto	l151
  1970  0017DE  D054               	goto	l2098
  1971  0017E0                     l2092:
  1972                           
  1973                           ;doprnt.c: 432: else if(scl > 10)
  1974  0017E0  502A               	movf	scale@scl,w,c
  1975  0017E2  0A80               	xorlw	128
  1976  0017E4  0F75               	addlw	-139
  1977  0017E6  A0D8               	btfss	status,0,c
  1978  0017E8  D04F               	goto	l2098
  1979                           
  1980                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1981  0017EA  0E00               	movlw	0
  1982  0017EC  6E04               	movwf	___awdiv@divisor+1,c
  1983  0017EE  0E0A               	movlw	10
  1984  0017F0  6E03               	movwf	___awdiv@divisor,c
  1985  0017F2  502A               	movf	scale@scl,w,c
  1986  0017F4  6E01               	movwf	___awdiv@dividend,c
  1987  0017F6  6A02               	clrf	___awdiv@dividend+1,c
  1988  0017F8  BE01               	btfsc	___awdiv@dividend,7,c
  1989  0017FA  0602               	decf	___awdiv@dividend+1,f,c
  1990  0017FC  EC91  F012         	call	___awdiv	;wreg free
  1991  001800  0E09               	movlw	9
  1992  001802  2401               	addwf	?___awdiv,w,c
  1993  001804  6E0F               	movwf	___wmul@multiplier,c
  1994  001806  0E00               	movlw	0
  1995  001808  2002               	addwfc	?___awdiv+1,w,c
  1996  00180A  6E10               	movwf	___wmul@multiplier+1,c
  1997  00180C  0E00               	movlw	0
  1998  00180E  6E12               	movwf	___wmul@multiplicand+1,c
  1999  001810  0E03               	movlw	3
  2000  001812  6E11               	movwf	___wmul@multiplicand,c
  2001  001814  ECC2  F014         	call	___wmul	;wreg free
  2002  001818  0E29               	movlw	low __npowers_
  2003  00181A  240F               	addwf	?___wmul,w,c
  2004  00181C  6EF6               	movwf	tblptrl,c
  2005  00181E  0E10               	movlw	high __npowers_
  2006  001820  2010               	addwfc	?___wmul+1,w,c
  2007  001822  6EF7               	movwf	tblptrh,c
  2008  001824                     	if	0	;There are less than 3 active tblptr bytes
  2009  001824                     	endif
  2010  001824  0009               	tblrd		*+
  2011  001826  CFF5 F015          	movff	tablat,___ftmul@f1
  2012  00182A  0009               	tblrd		*+
  2013  00182C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2014  001830  000A               	tblrd		*-
  2015  001832  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2016  001836  0E00               	movlw	0
  2017  001838  6E12               	movwf	___wmul@multiplicand+1,c
  2018  00183A  0E03               	movlw	3
  2019  00183C  6E11               	movwf	___wmul@multiplicand,c
  2020  00183E  0E00               	movlw	0
  2021  001840  6E0C               	movwf	___awmod@divisor+1,c
  2022  001842  0E0A               	movlw	10
  2023  001844  6E0B               	movwf	___awmod@divisor,c
  2024  001846  502A               	movf	scale@scl,w,c
  2025  001848  6E09               	movwf	___awmod@dividend,c
  2026  00184A  6A0A               	clrf	___awmod@dividend+1,c
  2027  00184C  BE09               	btfsc	___awmod@dividend,7,c
  2028  00184E  060A               	decf	___awmod@dividend+1,f,c
  2029  001850  EC6D  F013         	call	___awmod	;wreg free
  2030  001854  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2031  001858  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2032  00185C  ECC2  F014         	call	___wmul	;wreg free
  2033  001860  0E29               	movlw	low __npowers_
  2034  001862  240F               	addwf	?___wmul,w,c
  2035  001864  6EF6               	movwf	tblptrl,c
  2036  001866  0E10               	movlw	high __npowers_
  2037  001868  2010               	addwfc	?___wmul+1,w,c
  2038  00186A  6EF7               	movwf	tblptrh,c
  2039  00186C                     	if	0	;There are less than 3 active tblptr bytes
  2040  00186C                     	endif
  2041  00186C  0009               	tblrd		*+
  2042  00186E  CFF5 F018          	movff	tablat,___ftmul@f2
  2043  001872  0009               	tblrd		*+
  2044  001874  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2045  001878  000A               	tblrd		*-
  2046  00187A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2047  00187E  EC5B  F010         	call	___ftmul	;wreg free
  2048  001882  D0ED               	goto	L5
  2049  001884  D106               	goto	l151
  2050  001886  D000               	goto	l2098
  2051  001888                     l2098:
  2052                           
  2053                           ;doprnt.c: 434: return _npowers_[scl];
  2054  001888  502A               	movf	scale@scl,w,c
  2055  00188A  0D03               	mullw	3
  2056  00188C  0E29               	movlw	low __npowers_
  2057  00188E  24F3               	addwf	prodl,w,c
  2058  001890  6EF6               	movwf	tblptrl,c
  2059  001892  0E10               	movlw	high __npowers_
  2060  001894  D0F2               	goto	L4
  2061  001896  D0FD               	goto	l151
  2062  001898                     l2102:
  2063                           
  2064                           ;doprnt.c: 435: }
  2065                           ;doprnt.c: 436: if(scl>=110)
  2066  001898  502A               	movf	scale@scl,w,c
  2067  00189A  0A80               	xorlw	128
  2068  00189C  0F12               	addlw	-238
  2069  00189E  A0D8               	btfss	status,0,c
  2070  0018A0  D08D               	goto	l2110
  2071                           
  2072                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2073  0018A2  0E00               	movlw	0
  2074  0018A4  6E12               	movwf	___wmul@multiplicand+1,c
  2075  0018A6  0E03               	movlw	3
  2076  0018A8  6E11               	movwf	___wmul@multiplicand,c
  2077  0018AA  0E00               	movlw	0
  2078  0018AC  6E04               	movwf	___awdiv@divisor+1,c
  2079  0018AE  0E0A               	movlw	10
  2080  0018B0  6E03               	movwf	___awdiv@divisor,c
  2081  0018B2  0E00               	movlw	0
  2082  0018B4  6E0C               	movwf	___awmod@divisor+1,c
  2083  0018B6  0E64               	movlw	100
  2084  0018B8  6E0B               	movwf	___awmod@divisor,c
  2085  0018BA  502A               	movf	scale@scl,w,c
  2086  0018BC  6E09               	movwf	___awmod@dividend,c
  2087  0018BE  6A0A               	clrf	___awmod@dividend+1,c
  2088  0018C0  BE09               	btfsc	___awmod@dividend,7,c
  2089  0018C2  060A               	decf	___awmod@dividend+1,f,c
  2090  0018C4  EC6D  F013         	call	___awmod	;wreg free
  2091  0018C8  C009  F001         	movff	?___awmod,___awdiv@dividend
  2092  0018CC  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2093  0018D0  EC91  F012         	call	___awdiv	;wreg free
  2094  0018D4  0E09               	movlw	9
  2095  0018D6  2401               	addwf	?___awdiv,w,c
  2096  0018D8  6E0F               	movwf	___wmul@multiplier,c
  2097  0018DA  0E00               	movlw	0
  2098  0018DC  2002               	addwfc	?___awdiv+1,w,c
  2099  0018DE  6E10               	movwf	___wmul@multiplier+1,c
  2100  0018E0  ECC2  F014         	call	___wmul	;wreg free
  2101  0018E4  0E50               	movlw	low __powers_
  2102  0018E6  240F               	addwf	?___wmul,w,c
  2103  0018E8  6EF6               	movwf	tblptrl,c
  2104  0018EA  0E10               	movlw	high __powers_
  2105  0018EC  2010               	addwfc	?___wmul+1,w,c
  2106  0018EE  6EF7               	movwf	tblptrh,c
  2107  0018F0                     	if	0	;There are less than 3 active tblptr bytes
  2108  0018F0                     	endif
  2109  0018F0  0009               	tblrd		*+
  2110  0018F2  CFF5 F018          	movff	tablat,___ftmul@f2
  2111  0018F6  0009               	tblrd		*+
  2112  0018F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2113  0018FC  000A               	tblrd		*-
  2114  0018FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2115  001902  0E00               	movlw	0
  2116  001904  6E04               	movwf	___awdiv@divisor+1,c
  2117  001906  0E64               	movlw	100
  2118  001908  6E03               	movwf	___awdiv@divisor,c
  2119  00190A  502A               	movf	scale@scl,w,c
  2120  00190C  6E01               	movwf	___awdiv@dividend,c
  2121  00190E  6A02               	clrf	___awdiv@dividend+1,c
  2122  001910  BE01               	btfsc	___awdiv@dividend,7,c
  2123  001912  0602               	decf	___awdiv@dividend+1,f,c
  2124  001914  EC91  F012         	call	___awdiv	;wreg free
  2125  001918  0E12               	movlw	18
  2126  00191A  2401               	addwf	?___awdiv,w,c
  2127  00191C  6E0F               	movwf	___wmul@multiplier,c
  2128  00191E  0E00               	movlw	0
  2129  001920  2002               	addwfc	?___awdiv+1,w,c
  2130  001922  6E10               	movwf	___wmul@multiplier+1,c
  2131  001924  0E00               	movlw	0
  2132  001926  6E12               	movwf	___wmul@multiplicand+1,c
  2133  001928  0E03               	movlw	3
  2134  00192A  6E11               	movwf	___wmul@multiplicand,c
  2135  00192C  ECC2  F014         	call	___wmul	;wreg free
  2136  001930  0E50               	movlw	low __powers_
  2137  001932  240F               	addwf	?___wmul,w,c
  2138  001934  6EF6               	movwf	tblptrl,c
  2139  001936  0E10               	movlw	high __powers_
  2140  001938  2010               	addwfc	?___wmul+1,w,c
  2141  00193A  6EF7               	movwf	tblptrh,c
  2142  00193C                     	if	0	;There are less than 3 active tblptr bytes
  2143  00193C                     	endif
  2144  00193C  0009               	tblrd		*+
  2145  00193E  CFF5 F015          	movff	tablat,___ftmul@f1
  2146  001942  0009               	tblrd		*+
  2147  001944  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2148  001948  000A               	tblrd		*-
  2149  00194A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2150  00194E  EC5B  F010         	call	___ftmul	;wreg free
  2151  001952  C015  F027         	movff	?___ftmul,_scale$1255
  2152  001956  C016  F028         	movff	?___ftmul+1,_scale$1255+1
  2153  00195A  C017  F029         	movff	?___ftmul+2,_scale$1255+2
  2154                           
  2155                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2156  00195E  C027  F015         	movff	_scale$1255,___ftmul@f1
  2157  001962  C028  F016         	movff	_scale$1255+1,___ftmul@f1+1
  2158  001966  C029  F017         	movff	_scale$1255+2,___ftmul@f1+2
  2159  00196A  0E00               	movlw	0
  2160  00196C  6E12               	movwf	___wmul@multiplicand+1,c
  2161  00196E  0E03               	movlw	3
  2162  001970  6E11               	movwf	___wmul@multiplicand,c
  2163  001972  0E00               	movlw	0
  2164  001974  6E0C               	movwf	___awmod@divisor+1,c
  2165  001976  0E0A               	movlw	10
  2166  001978  6E0B               	movwf	___awmod@divisor,c
  2167  00197A  502A               	movf	scale@scl,w,c
  2168  00197C  6E09               	movwf	___awmod@dividend,c
  2169  00197E  6A0A               	clrf	___awmod@dividend+1,c
  2170  001980  BE09               	btfsc	___awmod@dividend,7,c
  2171  001982  060A               	decf	___awmod@dividend+1,f,c
  2172  001984  EC6D  F013         	call	___awmod	;wreg free
  2173  001988  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2174  00198C  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2175  001990  ECC2  F014         	call	___wmul	;wreg free
  2176  001994  0E50               	movlw	low __powers_
  2177  001996  240F               	addwf	?___wmul,w,c
  2178  001998  6EF6               	movwf	tblptrl,c
  2179  00199A  0E10               	movlw	high __powers_
  2180  00199C  2010               	addwfc	?___wmul+1,w,c
  2181  00199E  6EF7               	movwf	tblptrh,c
  2182  0019A0                     	if	0	;There are less than 3 active tblptr bytes
  2183  0019A0                     	endif
  2184  0019A0  0009               	tblrd		*+
  2185  0019A2  CFF5 F018          	movff	tablat,___ftmul@f2
  2186  0019A6  0009               	tblrd		*+
  2187  0019A8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2188  0019AC  000A               	tblrd		*-
  2189  0019AE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2190  0019B2  EC5B  F010         	call	___ftmul	;wreg free
  2191  0019B6  D053               	goto	L5
  2192  0019B8  D06C               	goto	l151
  2193  0019BA  D059               	goto	l2116
  2194  0019BC                     l2110:
  2195                           
  2196                           ;doprnt.c: 438: else if(scl > 10)
  2197  0019BC  502A               	movf	scale@scl,w,c
  2198  0019BE  0A80               	xorlw	128
  2199  0019C0  0F75               	addlw	-139
  2200  0019C2  A0D8               	btfss	status,0,c
  2201  0019C4  D054               	goto	l2116
  2202                           
  2203                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2204  0019C6  0E00               	movlw	0
  2205  0019C8  6E04               	movwf	___awdiv@divisor+1,c
  2206  0019CA  0E0A               	movlw	10
  2207  0019CC  6E03               	movwf	___awdiv@divisor,c
  2208  0019CE  502A               	movf	scale@scl,w,c
  2209  0019D0  6E01               	movwf	___awdiv@dividend,c
  2210  0019D2  6A02               	clrf	___awdiv@dividend+1,c
  2211  0019D4  BE01               	btfsc	___awdiv@dividend,7,c
  2212  0019D6  0602               	decf	___awdiv@dividend+1,f,c
  2213  0019D8  EC91  F012         	call	___awdiv	;wreg free
  2214  0019DC  0E09               	movlw	9
  2215  0019DE  2401               	addwf	?___awdiv,w,c
  2216  0019E0  6E0F               	movwf	___wmul@multiplier,c
  2217  0019E2  0E00               	movlw	0
  2218  0019E4  2002               	addwfc	?___awdiv+1,w,c
  2219  0019E6  6E10               	movwf	___wmul@multiplier+1,c
  2220  0019E8  0E00               	movlw	0
  2221  0019EA  6E12               	movwf	___wmul@multiplicand+1,c
  2222  0019EC  0E03               	movlw	3
  2223  0019EE  6E11               	movwf	___wmul@multiplicand,c
  2224  0019F0  ECC2  F014         	call	___wmul	;wreg free
  2225  0019F4  0E50               	movlw	low __powers_
  2226  0019F6  240F               	addwf	?___wmul,w,c
  2227  0019F8  6EF6               	movwf	tblptrl,c
  2228  0019FA  0E10               	movlw	high __powers_
  2229  0019FC  2010               	addwfc	?___wmul+1,w,c
  2230  0019FE  6EF7               	movwf	tblptrh,c
  2231  001A00                     	if	0	;There are less than 3 active tblptr bytes
  2232  001A00                     	endif
  2233  001A00  0009               	tblrd		*+
  2234  001A02  CFF5 F015          	movff	tablat,___ftmul@f1
  2235  001A06  0009               	tblrd		*+
  2236  001A08  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2237  001A0C  000A               	tblrd		*-
  2238  001A0E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2239  001A12  0E00               	movlw	0
  2240  001A14  6E12               	movwf	___wmul@multiplicand+1,c
  2241  001A16  0E03               	movlw	3
  2242  001A18  6E11               	movwf	___wmul@multiplicand,c
  2243  001A1A  0E00               	movlw	0
  2244  001A1C  6E0C               	movwf	___awmod@divisor+1,c
  2245  001A1E  0E0A               	movlw	10
  2246  001A20  6E0B               	movwf	___awmod@divisor,c
  2247  001A22  502A               	movf	scale@scl,w,c
  2248  001A24  6E09               	movwf	___awmod@dividend,c
  2249  001A26  6A0A               	clrf	___awmod@dividend+1,c
  2250  001A28  BE09               	btfsc	___awmod@dividend,7,c
  2251  001A2A  060A               	decf	___awmod@dividend+1,f,c
  2252  001A2C  EC6D  F013         	call	___awmod	;wreg free
  2253  001A30  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2254  001A34  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2255  001A38  ECC2  F014         	call	___wmul	;wreg free
  2256  001A3C  0E50               	movlw	low __powers_
  2257  001A3E  240F               	addwf	?___wmul,w,c
  2258  001A40  6EF6               	movwf	tblptrl,c
  2259  001A42  0E10               	movlw	high __powers_
  2260  001A44  2010               	addwfc	?___wmul+1,w,c
  2261  001A46  6EF7               	movwf	tblptrh,c
  2262  001A48                     	if	0	;There are less than 3 active tblptr bytes
  2263  001A48                     	endif
  2264  001A48  0009               	tblrd		*+
  2265  001A4A  CFF5 F018          	movff	tablat,___ftmul@f2
  2266  001A4E  0009               	tblrd		*+
  2267  001A50  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2268  001A54  000A               	tblrd		*-
  2269  001A56  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2270  001A5A  EC5B  F010         	call	___ftmul	;wreg free
  2271  001A5E                     L5:
  2272  001A5E  C015  F024         	movff	?___ftmul,?_scale
  2273  001A62  C016  F025         	movff	?___ftmul+1,?_scale+1
  2274  001A66  C017  F026         	movff	?___ftmul+2,?_scale+2
  2275  001A6A  D013               	goto	l151
  2276  001A6C  D000               	goto	l2116
  2277  001A6E                     l2116:
  2278                           
  2279                           ;doprnt.c: 440: return _powers_[scl];
  2280  001A6E  502A               	movf	scale@scl,w,c
  2281  001A70  0D03               	mullw	3
  2282  001A72  0E50               	movlw	low __powers_
  2283  001A74  24F3               	addwf	prodl,w,c
  2284  001A76  6EF6               	movwf	tblptrl,c
  2285  001A78  0E10               	movlw	high __powers_
  2286  001A7A                     L4:
  2287  001A7A  20F4               	addwfc	prodh,w,c
  2288  001A7C  6EF7               	movwf	tblptrh,c
  2289  001A7E                     	if	0	;There are less than 3 active tblptr bytes
  2290  001A7E                     	endif
  2291  001A7E  0009               	tblrd		*+
  2292  001A80  CFF5 F024          	movff	tablat,?_scale
  2293  001A84  0009               	tblrd		*+
  2294  001A86  CFF5 F025          	movff	tablat,?_scale+1
  2295  001A8A  000A               	tblrd		*-
  2296  001A8C  CFF5 F026          	movff	tablat,?_scale+2
  2297  001A90  D000               	goto	l151
  2298  001A92                     l151:
  2299  001A92  0012               	return		;funcret
  2300  001A94                     __end_of_scale:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           postinc2	equ	0xFDE
  2313                           postdec2	equ	0xFDD
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _putch *****************
  2319 ;; Defined at:
  2320 ;;		line 88 in file "Lab6pA.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  c               1    wreg     unsigned char 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  c               1    0[COMRAM] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;Total ram usage:        1 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_printf
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text3
  2348  002A6C                     __ptext3:
  2349                           	opt stack 0
  2350  002A6C                     _putch:
  2351                           	opt stack 29
  2352                           
  2353                           ;incstack = 0
  2354                           ;putch@c stored from wreg
  2355  002A6C  6E01               	movwf	putch@c,c
  2356                           
  2357                           ;Lab6pA.c: 90: while (!TRMT);
  2358  002A6E  D000               	goto	l92
  2359  002A70                     l92:
  2360  002A70  A2AC               	btfss	4012,1,c	;volatile
  2361  002A72  D7FE               	goto	l92
  2362                           
  2363                           ;Lab6pA.c: 91: TXREG = c;
  2364  002A74  C001  FFAD         	movff	putch@c,4013	;volatile
  2365  002A78  0012               	return		;funcret
  2366  002A7A                     __end_of_putch:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1l	equ	0xFE1
  2378                           postinc2	equ	0xFDE
  2379                           postdec2	equ	0xFDD
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _fround *****************
  2385 ;; Defined at:
  2386 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  prec            1    wreg     unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  prec            1   44[COMRAM] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  3   35[COMRAM] unsigned char 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2400 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;Total ram usage:       10 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    2
  2407 ;; This function calls:
  2408 ;;		___awdiv
  2409 ;;		___awmod
  2410 ;;		___ftmul
  2411 ;;		___wmul
  2412 ;; This function is called by:
  2413 ;;		_printf
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text4
  2418  001A94                     __ptext4:
  2419                           	opt stack 0
  2420  001A94                     _fround:
  2421                           	opt stack 27
  2422                           
  2423                           ;incstack = 0
  2424                           ;fround@prec stored from wreg
  2425  001A94  6E2D               	movwf	fround@prec,c
  2426                           
  2427                           ;doprnt.c: 413: if(prec>=110)
  2428  001A96  0E6D               	movlw	109
  2429  001A98  642D               	cpfsgt	fround@prec,c
  2430  001A9A  D09B               	goto	l2070
  2431                           
  2432                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2433  001A9C  0E00               	movlw	0
  2434  001A9E  6E12               	movwf	___wmul@multiplicand+1,c
  2435  001AA0  0E03               	movlw	3
  2436  001AA2  6E11               	movwf	___wmul@multiplicand,c
  2437  001AA4  0E00               	movlw	0
  2438  001AA6  6E04               	movwf	___awdiv@divisor+1,c
  2439  001AA8  0E0A               	movlw	10
  2440  001AAA  6E03               	movwf	___awdiv@divisor,c
  2441  001AAC  0E00               	movlw	0
  2442  001AAE  6E0C               	movwf	___awmod@divisor+1,c
  2443  001AB0  0E64               	movlw	100
  2444  001AB2  6E0B               	movwf	___awmod@divisor,c
  2445  001AB4  C02D  F009         	movff	fround@prec,___awmod@dividend
  2446  001AB8  6A0A               	clrf	___awmod@dividend+1,c
  2447  001ABA  EC6D  F013         	call	___awmod	;wreg free
  2448  001ABE  C009  F001         	movff	?___awmod,___awdiv@dividend
  2449  001AC2  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2450  001AC6  EC91  F012         	call	___awdiv	;wreg free
  2451  001ACA  0E09               	movlw	9
  2452  001ACC  2401               	addwf	?___awdiv,w,c
  2453  001ACE  6E0F               	movwf	___wmul@multiplier,c
  2454  001AD0  0E00               	movlw	0
  2455  001AD2  2002               	addwfc	?___awdiv+1,w,c
  2456  001AD4  6E10               	movwf	___wmul@multiplier+1,c
  2457  001AD6  ECC2  F014         	call	___wmul	;wreg free
  2458  001ADA  0E29               	movlw	low __npowers_
  2459  001ADC  240F               	addwf	?___wmul,w,c
  2460  001ADE  6EF6               	movwf	tblptrl,c
  2461  001AE0  0E10               	movlw	high __npowers_
  2462  001AE2  2010               	addwfc	?___wmul+1,w,c
  2463  001AE4  6EF7               	movwf	tblptrh,c
  2464  001AE6                     	if	0	;There are less than 3 active tblptr bytes
  2465  001AE6                     	endif
  2466  001AE6  0009               	tblrd		*+
  2467  001AE8  CFF5 F018          	movff	tablat,___ftmul@f2
  2468  001AEC  0009               	tblrd		*+
  2469  001AEE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2470  001AF2  000A               	tblrd		*-
  2471  001AF4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2472  001AF8  0E00               	movlw	0
  2473  001AFA  6E04               	movwf	___awdiv@divisor+1,c
  2474  001AFC  0E64               	movlw	100
  2475  001AFE  6E03               	movwf	___awdiv@divisor,c
  2476  001B00  C02D  F001         	movff	fround@prec,___awdiv@dividend
  2477  001B04  6A02               	clrf	___awdiv@dividend+1,c
  2478  001B06  EC91  F012         	call	___awdiv	;wreg free
  2479  001B0A  0E12               	movlw	18
  2480  001B0C  2401               	addwf	?___awdiv,w,c
  2481  001B0E  6E0F               	movwf	___wmul@multiplier,c
  2482  001B10  0E00               	movlw	0
  2483  001B12  2002               	addwfc	?___awdiv+1,w,c
  2484  001B14  6E10               	movwf	___wmul@multiplier+1,c
  2485  001B16  0E00               	movlw	0
  2486  001B18  6E12               	movwf	___wmul@multiplicand+1,c
  2487  001B1A  0E03               	movlw	3
  2488  001B1C  6E11               	movwf	___wmul@multiplicand,c
  2489  001B1E  ECC2  F014         	call	___wmul	;wreg free
  2490  001B22  0E29               	movlw	low __npowers_
  2491  001B24  240F               	addwf	?___wmul,w,c
  2492  001B26  6EF6               	movwf	tblptrl,c
  2493  001B28  0E10               	movlw	high __npowers_
  2494  001B2A  2010               	addwfc	?___wmul+1,w,c
  2495  001B2C  6EF7               	movwf	tblptrh,c
  2496  001B2E                     	if	0	;There are less than 3 active tblptr bytes
  2497  001B2E                     	endif
  2498  001B2E  0009               	tblrd		*+
  2499  001B30  CFF5 F015          	movff	tablat,___ftmul@f1
  2500  001B34  0009               	tblrd		*+
  2501  001B36  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2502  001B3A  000A               	tblrd		*-
  2503  001B3C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2504  001B40  EC5B  F010         	call	___ftmul	;wreg free
  2505  001B44  C015  F02A         	movff	?___ftmul,_fround$1253
  2506  001B48  C016  F02B         	movff	?___ftmul+1,_fround$1253+1
  2507  001B4C  C017  F02C         	movff	?___ftmul+2,_fround$1253+2
  2508                           
  2509                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2510  001B50  0E00               	movlw	0
  2511  001B52  6E12               	movwf	___wmul@multiplicand+1,c
  2512  001B54  0E03               	movlw	3
  2513  001B56  6E11               	movwf	___wmul@multiplicand,c
  2514  001B58  0E00               	movlw	0
  2515  001B5A  6E0C               	movwf	___awmod@divisor+1,c
  2516  001B5C  0E0A               	movlw	10
  2517  001B5E  6E0B               	movwf	___awmod@divisor,c
  2518  001B60  C02D  F009         	movff	fround@prec,___awmod@dividend
  2519  001B64  6A0A               	clrf	___awmod@dividend+1,c
  2520  001B66  EC6D  F013         	call	___awmod	;wreg free
  2521  001B6A  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2522  001B6E  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2523  001B72  ECC2  F014         	call	___wmul	;wreg free
  2524  001B76  0E29               	movlw	low __npowers_
  2525  001B78  240F               	addwf	?___wmul,w,c
  2526  001B7A  6EF6               	movwf	tblptrl,c
  2527  001B7C  0E10               	movlw	high __npowers_
  2528  001B7E  2010               	addwfc	?___wmul+1,w,c
  2529  001B80  6EF7               	movwf	tblptrh,c
  2530  001B82                     	if	0	;There are less than 3 active tblptr bytes
  2531  001B82                     	endif
  2532  001B82  0009               	tblrd		*+
  2533  001B84  CFF5 F018          	movff	tablat,___ftmul@f2
  2534  001B88  0009               	tblrd		*+
  2535  001B8A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2536  001B8E  000A               	tblrd		*-
  2537  001B90  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2538  001B94  C02A  F015         	movff	_fround$1253,___ftmul@f1
  2539  001B98  C02B  F016         	movff	_fround$1253+1,___ftmul@f1+1
  2540  001B9C  C02C  F017         	movff	_fround$1253+2,___ftmul@f1+2
  2541  001BA0  EC5B  F010         	call	___ftmul	;wreg free
  2542  001BA4  C015  F027         	movff	?___ftmul,_fround$1254
  2543  001BA8  C016  F028         	movff	?___ftmul+1,_fround$1254+1
  2544  001BAC  C017  F029         	movff	?___ftmul+2,_fround$1254+2
  2545                           
  2546                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2547  001BB0  C027  F015         	movff	_fround$1254,___ftmul@f1
  2548  001BB4  C028  F016         	movff	_fround$1254+1,___ftmul@f1+1
  2549  001BB8  C029  F017         	movff	_fround$1254+2,___ftmul@f1+2
  2550  001BBC  0E00               	movlw	0
  2551  001BBE  6E18               	movwf	___ftmul@f2,c
  2552  001BC0  0E00               	movlw	0
  2553  001BC2  6E19               	movwf	___ftmul@f2+1,c
  2554  001BC4  0E3F               	movlw	63
  2555  001BC6  6E1A               	movwf	___ftmul@f2+2,c
  2556  001BC8  EC5B  F010         	call	___ftmul	;wreg free
  2557  001BCC  D07D               	goto	L7
  2558  001BCE  D083               	goto	l144
  2559  001BD0  D062               	goto	l2078
  2560  001BD2                     l2070:
  2561                           
  2562                           ;doprnt.c: 415: else if(prec > 10)
  2563  001BD2  0E0A               	movlw	10
  2564  001BD4  642D               	cpfsgt	fround@prec,c
  2565  001BD6  D05F               	goto	l2078
  2566                           
  2567                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2568  001BD8  0E00               	movlw	0
  2569  001BDA  6E12               	movwf	___wmul@multiplicand+1,c
  2570  001BDC  0E03               	movlw	3
  2571  001BDE  6E11               	movwf	___wmul@multiplicand,c
  2572  001BE0  0E00               	movlw	0
  2573  001BE2  6E0C               	movwf	___awmod@divisor+1,c
  2574  001BE4  0E0A               	movlw	10
  2575  001BE6  6E0B               	movwf	___awmod@divisor,c
  2576  001BE8  C02D  F009         	movff	fround@prec,___awmod@dividend
  2577  001BEC  6A0A               	clrf	___awmod@dividend+1,c
  2578  001BEE  EC6D  F013         	call	___awmod	;wreg free
  2579  001BF2  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2580  001BF6  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2581  001BFA  ECC2  F014         	call	___wmul	;wreg free
  2582  001BFE  0E29               	movlw	low __npowers_
  2583  001C00  240F               	addwf	?___wmul,w,c
  2584  001C02  6EF6               	movwf	tblptrl,c
  2585  001C04  0E10               	movlw	high __npowers_
  2586  001C06  2010               	addwfc	?___wmul+1,w,c
  2587  001C08  6EF7               	movwf	tblptrh,c
  2588  001C0A                     	if	0	;There are less than 3 active tblptr bytes
  2589  001C0A                     	endif
  2590  001C0A  0009               	tblrd		*+
  2591  001C0C  CFF5 F018          	movff	tablat,___ftmul@f2
  2592  001C10  0009               	tblrd		*+
  2593  001C12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2594  001C16  000A               	tblrd		*-
  2595  001C18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2596  001C1C  0E00               	movlw	0
  2597  001C1E  6E04               	movwf	___awdiv@divisor+1,c
  2598  001C20  0E0A               	movlw	10
  2599  001C22  6E03               	movwf	___awdiv@divisor,c
  2600  001C24  C02D  F001         	movff	fround@prec,___awdiv@dividend
  2601  001C28  6A02               	clrf	___awdiv@dividend+1,c
  2602  001C2A  EC91  F012         	call	___awdiv	;wreg free
  2603  001C2E  0E09               	movlw	9
  2604  001C30  2401               	addwf	?___awdiv,w,c
  2605  001C32  6E0F               	movwf	___wmul@multiplier,c
  2606  001C34  0E00               	movlw	0
  2607  001C36  2002               	addwfc	?___awdiv+1,w,c
  2608  001C38  6E10               	movwf	___wmul@multiplier+1,c
  2609  001C3A  0E00               	movlw	0
  2610  001C3C  6E12               	movwf	___wmul@multiplicand+1,c
  2611  001C3E  0E03               	movlw	3
  2612  001C40  6E11               	movwf	___wmul@multiplicand,c
  2613  001C42  ECC2  F014         	call	___wmul	;wreg free
  2614  001C46  0E29               	movlw	low __npowers_
  2615  001C48  240F               	addwf	?___wmul,w,c
  2616  001C4A  6EF6               	movwf	tblptrl,c
  2617  001C4C  0E10               	movlw	high __npowers_
  2618  001C4E  2010               	addwfc	?___wmul+1,w,c
  2619  001C50  6EF7               	movwf	tblptrh,c
  2620  001C52                     	if	0	;There are less than 3 active tblptr bytes
  2621  001C52                     	endif
  2622  001C52  0009               	tblrd		*+
  2623  001C54  CFF5 F015          	movff	tablat,___ftmul@f1
  2624  001C58  0009               	tblrd		*+
  2625  001C5A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2626  001C5E  000A               	tblrd		*-
  2627  001C60  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2628  001C64  EC5B  F010         	call	___ftmul	;wreg free
  2629  001C68  C015  F02A         	movff	?___ftmul,_fround$1253
  2630  001C6C  C016  F02B         	movff	?___ftmul+1,_fround$1253+1
  2631  001C70  C017  F02C         	movff	?___ftmul+2,_fround$1253+2
  2632                           
  2633                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2634  001C74  C02A  F015         	movff	_fround$1253,___ftmul@f1
  2635  001C78  C02B  F016         	movff	_fround$1253+1,___ftmul@f1+1
  2636  001C7C  C02C  F017         	movff	_fround$1253+2,___ftmul@f1+2
  2637  001C80  0E00               	movlw	0
  2638  001C82  6E18               	movwf	___ftmul@f2,c
  2639  001C84  0E00               	movlw	0
  2640  001C86  6E19               	movwf	___ftmul@f2+1,c
  2641  001C88  0E3F               	movlw	63
  2642  001C8A  6E1A               	movwf	___ftmul@f2+2,c
  2643  001C8C  EC5B  F010         	call	___ftmul	;wreg free
  2644  001C90  D01B               	goto	L7
  2645  001C92  D021               	goto	l144
  2646  001C94  D000               	goto	l2078
  2647  001C96                     l2078:
  2648                           
  2649                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2650  001C96  502D               	movf	fround@prec,w,c
  2651  001C98  0D03               	mullw	3
  2652  001C9A  0E29               	movlw	low __npowers_
  2653  001C9C  24F3               	addwf	prodl,w,c
  2654  001C9E  6EF6               	movwf	tblptrl,c
  2655  001CA0  0E10               	movlw	high __npowers_
  2656  001CA2  20F4               	addwfc	prodh,w,c
  2657  001CA4  6EF7               	movwf	tblptrh,c
  2658  001CA6                     	if	0	;There are less than 3 active tblptr bytes
  2659  001CA6                     	endif
  2660  001CA6  0009               	tblrd		*+
  2661  001CA8  CFF5 F015          	movff	tablat,___ftmul@f1
  2662  001CAC  0009               	tblrd		*+
  2663  001CAE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2664  001CB2  000A               	tblrd		*-
  2665  001CB4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2666  001CB8  0E00               	movlw	0
  2667  001CBA  6E18               	movwf	___ftmul@f2,c
  2668  001CBC  0E00               	movlw	0
  2669  001CBE  6E19               	movwf	___ftmul@f2+1,c
  2670  001CC0  0E3F               	movlw	63
  2671  001CC2  6E1A               	movwf	___ftmul@f2+2,c
  2672  001CC4  EC5B  F010         	call	___ftmul	;wreg free
  2673  001CC8                     L7:
  2674  001CC8  C015  F024         	movff	?___ftmul,?_fround
  2675  001CCC  C016  F025         	movff	?___ftmul+1,?_fround+1
  2676  001CD0  C017  F026         	movff	?___ftmul+2,?_fround+2
  2677  001CD4  D000               	goto	l144
  2678  001CD6                     l144:
  2679  001CD6  0012               	return		;funcret
  2680  001CD8                     __end_of_fround:
  2681                           	opt stack 0
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           postdec1	equ	0xFE5
  2691                           fsr1l	equ	0xFE1
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           fsr2h	equ	0xFDA
  2695                           fsr2l	equ	0xFD9
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function ___wmul *****************
  2699 ;; Defined at:
  2700 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  multiplier      2   14[COMRAM] unsigned int 
  2703 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  product         2   18[COMRAM] unsigned int 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  2   14[COMRAM] unsigned int 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0, prodl, prodh
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;Total ram usage:        6 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_fround
  2725 ;;		_scale
  2726 ;;		_printf
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text5
  2731  002984                     __ptext5:
  2732                           	opt stack 0
  2733  002984                     ___wmul:
  2734                           	opt stack 28
  2735                           
  2736                           ;incstack = 0
  2737  002984  500F               	movf	___wmul@multiplier,w,c
  2738  002986  0211               	mulwf	___wmul@multiplicand,c
  2739  002988  CFF3 F013          	movff	prodl,___wmul@product
  2740  00298C  CFF4 F014          	movff	prodh,___wmul@product+1
  2741  002990  500F               	movf	___wmul@multiplier,w,c
  2742  002992  0212               	mulwf	___wmul@multiplicand+1,c
  2743  002994  50F3               	movf	prodl,w,c
  2744  002996  2614               	addwf	___wmul@product+1,f,c
  2745  002998  5010               	movf	___wmul@multiplier+1,w,c
  2746  00299A  0211               	mulwf	___wmul@multiplicand,c
  2747  00299C  50F3               	movf	prodl,w,c
  2748  00299E  2614               	addwf	___wmul@product+1,f,c
  2749  0029A0  C013  F00F         	movff	___wmul@product,?___wmul
  2750  0029A4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2751  0029A8  D000               	goto	l243
  2752  0029AA                     l243:
  2753  0029AA  0012               	return		;funcret
  2754  0029AC                     __end_of___wmul:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1l	equ	0xFE1
  2766                           postinc2	equ	0xFDE
  2767                           postdec2	equ	0xFDD
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           status	equ	0xFD8
  2771                           
  2772 ;; *************** function ___ftmul *****************
  2773 ;; Defined at:
  2774 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  f1              3   20[COMRAM] float 
  2777 ;;  f2              3   23[COMRAM] float 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  2780 ;;  sign            1   34[COMRAM] unsigned char 
  2781 ;;  cntr            1   33[COMRAM] unsigned char 
  2782 ;;  exp             1   29[COMRAM] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  3   20[COMRAM] float 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:       15 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    1
  2799 ;; This function calls:
  2800 ;;		___ftpack
  2801 ;; This function is called by:
  2802 ;;		_fround
  2803 ;;		_scale
  2804 ;;		_printf
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text6
  2809  0020B6                     __ptext6:
  2810                           	opt stack 0
  2811  0020B6                     ___ftmul:
  2812                           	opt stack 27
  2813                           
  2814                           ;incstack = 0
  2815  0020B6  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  2816  0020BA  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2817  0020BC  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2818  0020BE  3416               	rlcf	___ftmul@f1+1,w,c
  2819  0020C0  361B               	rlcf	??___ftmul& (0+255),f,c
  2820  0020C2  E301               	bnc	u1661
  2821  0020C4  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2822  0020C6                     u1661:
  2823  0020C6  501B               	movf	??___ftmul,w,c
  2824  0020C8  6E1E               	movwf	___ftmul@exp,c
  2825  0020CA  501E               	movf	___ftmul@exp,w,c
  2826  0020CC  A4D8               	btfss	status,2,c
  2827  0020CE  D002               	goto	l1884
  2828  0020D0  D00E               	goto	l1886
  2829  0020D2  D06C               	goto	l672
  2830  0020D4                     l1884:
  2831  0020D4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  2832  0020D8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2833  0020DA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2834  0020DC  3419               	rlcf	___ftmul@f2+1,w,c
  2835  0020DE  361B               	rlcf	??___ftmul& (0+255),f,c
  2836  0020E0  E301               	bnc	u1681
  2837  0020E2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2838  0020E4                     u1681:
  2839  0020E4  501B               	movf	??___ftmul,w,c
  2840  0020E6  6E23               	movwf	___ftmul@sign,c
  2841  0020E8  5023               	movf	___ftmul@sign,w,c
  2842  0020EA  A4D8               	btfss	status,2,c
  2843  0020EC  D007               	goto	l1890
  2844  0020EE                     l1886:
  2845  0020EE  0E00               	movlw	0
  2846  0020F0  6E15               	movwf	?___ftmul,c
  2847  0020F2  0E00               	movlw	0
  2848  0020F4  6E16               	movwf	?___ftmul+1,c
  2849  0020F6  0E00               	movlw	0
  2850  0020F8  6E17               	movwf	?___ftmul+2,c
  2851  0020FA  D058               	goto	l672
  2852  0020FC                     l1890:
  2853  0020FC  5023               	movf	___ftmul@sign,w,c
  2854  0020FE  0F7B               	addlw	123
  2855  002100  261E               	addwf	___ftmul@exp,f,c
  2856  002102  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  2857  002106  501A               	movf	___ftmul@f2+2,w,c
  2858  002108  1A23               	xorwf	___ftmul@sign,f,c
  2859  00210A  0E80               	movlw	128
  2860  00210C  1623               	andwf	___ftmul@sign,f,c
  2861  00210E  8E16               	bsf	___ftmul@f1+1,7,c
  2862  002110  8E19               	bsf	___ftmul@f2+1,7,c
  2863  002112  0EFF               	movlw	255
  2864  002114  1618               	andwf	___ftmul@f2,f,c
  2865  002116  0EFF               	movlw	255
  2866  002118  1619               	andwf	___ftmul@f2+1,f,c
  2867  00211A  0E00               	movlw	0
  2868  00211C  161A               	andwf	___ftmul@f2+2,f,c
  2869  00211E  0E00               	movlw	0
  2870  002120  6E1F               	movwf	___ftmul@f3_as_product,c
  2871  002122  0E00               	movlw	0
  2872  002124  6E20               	movwf	___ftmul@f3_as_product+1,c
  2873  002126  0E00               	movlw	0
  2874  002128  6E21               	movwf	___ftmul@f3_as_product+2,c
  2875  00212A  0E07               	movlw	7
  2876  00212C  6E22               	movwf	___ftmul@cntr,c
  2877  00212E  D000               	goto	l1904
  2878  002130                     l1904:
  2879  002130  A015               	btfss	___ftmul@f1,0,c
  2880  002132  D007               	goto	l1908
  2881  002134  5018               	movf	___ftmul@f2,w,c
  2882  002136  261F               	addwf	___ftmul@f3_as_product,f,c
  2883  002138  5019               	movf	___ftmul@f2+1,w,c
  2884  00213A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2885  00213C  501A               	movf	___ftmul@f2+2,w,c
  2886  00213E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2887  002140  D000               	goto	l1908
  2888  002142                     l1908:
  2889  002142  90D8               	bcf	status,0,c
  2890  002144  3217               	rrcf	___ftmul@f1+2,f,c
  2891  002146  3216               	rrcf	___ftmul@f1+1,f,c
  2892  002148  3215               	rrcf	___ftmul@f1,f,c
  2893  00214A  90D8               	bcf	status,0,c
  2894  00214C  3618               	rlcf	___ftmul@f2,f,c
  2895  00214E  3619               	rlcf	___ftmul@f2+1,f,c
  2896  002150  361A               	rlcf	___ftmul@f2+2,f,c
  2897  002152  2E22               	decfsz	___ftmul@cntr,f,c
  2898  002154  D7ED               	goto	l1904
  2899  002156  D000               	goto	l1912
  2900  002158                     l1912:
  2901  002158  0E09               	movlw	9
  2902  00215A  6E22               	movwf	___ftmul@cntr,c
  2903  00215C  D000               	goto	l1914
  2904  00215E                     l1914:
  2905  00215E  A015               	btfss	___ftmul@f1,0,c
  2906  002160  D007               	goto	l1918
  2907  002162  5018               	movf	___ftmul@f2,w,c
  2908  002164  261F               	addwf	___ftmul@f3_as_product,f,c
  2909  002166  5019               	movf	___ftmul@f2+1,w,c
  2910  002168  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2911  00216A  501A               	movf	___ftmul@f2+2,w,c
  2912  00216C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2913  00216E  D000               	goto	l1918
  2914  002170                     l1918:
  2915  002170  90D8               	bcf	status,0,c
  2916  002172  3217               	rrcf	___ftmul@f1+2,f,c
  2917  002174  3216               	rrcf	___ftmul@f1+1,f,c
  2918  002176  3215               	rrcf	___ftmul@f1,f,c
  2919  002178  90D8               	bcf	status,0,c
  2920  00217A  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  2921  00217C  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  2922  00217E  321F               	rrcf	___ftmul@f3_as_product,f,c
  2923  002180  2E22               	decfsz	___ftmul@cntr,f,c
  2924  002182  D7ED               	goto	l1914
  2925  002184  D000               	goto	l1922
  2926  002186                     l1922:
  2927  002186  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2928  00218A  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2929  00218E  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2930  002192  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  2931  002196  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  2932  00219A  EC2E  F012         	call	___ftpack	;wreg free
  2933  00219E  C001  F015         	movff	?___ftpack,?___ftmul
  2934  0021A2  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  2935  0021A6  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  2936  0021AA  D000               	goto	l672
  2937  0021AC                     l672:
  2938  0021AC  0012               	return		;funcret
  2939  0021AE                     __end_of___ftmul:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           prodh	equ	0xFF4
  2946                           prodl	equ	0xFF3
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           postdec1	equ	0xFE5
  2950                           fsr1l	equ	0xFE1
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function ___awmod *****************
  2958 ;; Defined at:
  2959 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  dividend        2    8[COMRAM] int 
  2962 ;;  divisor         2   10[COMRAM] int 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  sign            1   13[COMRAM] unsigned char 
  2965 ;;  counter         1   12[COMRAM] unsigned char 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  2    8[COMRAM] int 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2975 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;Total ram usage:        6 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_main
  2985 ;;		_fround
  2986 ;;		_scale
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text7
  2991  0026DA                     __ptext7:
  2992                           	opt stack 0
  2993  0026DA                     ___awmod:
  2994                           	opt stack 28
  2995                           
  2996                           ;incstack = 0
  2997  0026DA  0E00               	movlw	0
  2998  0026DC  6E0E               	movwf	___awmod@sign,c
  2999  0026DE  AE0A               	btfss	___awmod@dividend+1,7,c
  3000  0026E0  D007               	goto	l1978
  3001  0026E2  6C09               	negf	___awmod@dividend,c
  3002  0026E4  1E0A               	comf	___awmod@dividend+1,f,c
  3003  0026E6  B0D8               	btfsc	status,0,c
  3004  0026E8  2A0A               	incf	___awmod@dividend+1,f,c
  3005  0026EA  0E01               	movlw	1
  3006  0026EC  6E0E               	movwf	___awmod@sign,c
  3007  0026EE  D000               	goto	l1978
  3008  0026F0                     l1978:
  3009  0026F0  AE0C               	btfss	___awmod@divisor+1,7,c
  3010  0026F2  D005               	goto	l1982
  3011  0026F4  6C0B               	negf	___awmod@divisor,c
  3012  0026F6  1E0C               	comf	___awmod@divisor+1,f,c
  3013  0026F8  B0D8               	btfsc	status,0,c
  3014  0026FA  2A0C               	incf	___awmod@divisor+1,f,c
  3015  0026FC  D000               	goto	l1982
  3016  0026FE                     l1982:
  3017  0026FE  500B               	movf	___awmod@divisor,w,c
  3018  002700  100C               	iorwf	___awmod@divisor+1,w,c
  3019  002702  B4D8               	btfsc	status,2,c
  3020  002704  D01D               	goto	l1998
  3021  002706  0E01               	movlw	1
  3022  002708  6E0D               	movwf	___awmod@counter,c
  3023  00270A  D005               	goto	l1988
  3024  00270C                     l1986:
  3025  00270C  90D8               	bcf	status,0,c
  3026  00270E  360B               	rlcf	___awmod@divisor,f,c
  3027  002710  360C               	rlcf	___awmod@divisor+1,f,c
  3028  002712  2A0D               	incf	___awmod@counter,f,c
  3029  002714  D000               	goto	l1988
  3030  002716                     l1988:
  3031  002716  BE0C               	btfsc	___awmod@divisor+1,7,c
  3032  002718  D002               	goto	l1990
  3033  00271A  D7F8               	goto	l1986
  3034  00271C  D000               	goto	l1990
  3035  00271E                     l1990:
  3036  00271E  500B               	movf	___awmod@divisor,w,c
  3037  002720  5C09               	subwf	___awmod@dividend,w,c
  3038  002722  500C               	movf	___awmod@divisor+1,w,c
  3039  002724  580A               	subwfb	___awmod@dividend+1,w,c
  3040  002726  A0D8               	btfss	status,0,c
  3041  002728  D005               	goto	l1994
  3042  00272A  500B               	movf	___awmod@divisor,w,c
  3043  00272C  5E09               	subwf	___awmod@dividend,f,c
  3044  00272E  500C               	movf	___awmod@divisor+1,w,c
  3045  002730  5A0A               	subwfb	___awmod@dividend+1,f,c
  3046  002732  D000               	goto	l1994
  3047  002734                     l1994:
  3048  002734  90D8               	bcf	status,0,c
  3049  002736  320C               	rrcf	___awmod@divisor+1,f,c
  3050  002738  320B               	rrcf	___awmod@divisor,f,c
  3051  00273A  2E0D               	decfsz	___awmod@counter,f,c
  3052  00273C  D7F0               	goto	l1990
  3053  00273E  D000               	goto	l1998
  3054  002740                     l1998:
  3055  002740  500E               	movf	___awmod@sign,w,c
  3056  002742  B4D8               	btfsc	status,2,c
  3057  002744  D005               	goto	l2002
  3058  002746  6C09               	negf	___awmod@dividend,c
  3059  002748  1E0A               	comf	___awmod@dividend+1,f,c
  3060  00274A  B0D8               	btfsc	status,0,c
  3061  00274C  2A0A               	incf	___awmod@dividend+1,f,c
  3062  00274E  D000               	goto	l2002
  3063  002750                     l2002:
  3064  002750  C009  F009         	movff	___awmod@dividend,?___awmod
  3065  002754  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3066  002758  D000               	goto	l449
  3067  00275A                     l449:
  3068  00275A  0012               	return		;funcret
  3069  00275C                     __end_of___awmod:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           postdec1	equ	0xFE5
  3080                           fsr1l	equ	0xFE1
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function ___awdiv *****************
  3088 ;; Defined at:
  3089 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  dividend        2    0[COMRAM] int 
  3092 ;;  divisor         2    2[COMRAM] int 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  quotient        2    6[COMRAM] int 
  3095 ;;  sign            1    5[COMRAM] unsigned char 
  3096 ;;  counter         1    4[COMRAM] unsigned char 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2    0[COMRAM] int 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;Total ram usage:        8 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_main
  3116 ;;		_fround
  3117 ;;		_scale
  3118 ;;		_printf
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text8
  3123  002522                     __ptext8:
  3124                           	opt stack 0
  3125  002522                     ___awdiv:
  3126                           	opt stack 28
  3127                           
  3128                           ;incstack = 0
  3129  002522  0E00               	movlw	0
  3130  002524  6E06               	movwf	___awdiv@sign,c
  3131  002526  AE04               	btfss	___awdiv@divisor+1,7,c
  3132  002528  D007               	goto	l1934
  3133  00252A  6C03               	negf	___awdiv@divisor,c
  3134  00252C  1E04               	comf	___awdiv@divisor+1,f,c
  3135  00252E  B0D8               	btfsc	status,0,c
  3136  002530  2A04               	incf	___awdiv@divisor+1,f,c
  3137  002532  0E01               	movlw	1
  3138  002534  6E06               	movwf	___awdiv@sign,c
  3139  002536  D000               	goto	l1934
  3140  002538                     l1934:
  3141  002538  AE02               	btfss	___awdiv@dividend+1,7,c
  3142  00253A  D007               	goto	l1940
  3143  00253C  6C01               	negf	___awdiv@dividend,c
  3144  00253E  1E02               	comf	___awdiv@dividend+1,f,c
  3145  002540  B0D8               	btfsc	status,0,c
  3146  002542  2A02               	incf	___awdiv@dividend+1,f,c
  3147  002544  0E01               	movlw	1
  3148  002546  1A06               	xorwf	___awdiv@sign,f,c
  3149  002548  D000               	goto	l1940
  3150  00254A                     l1940:
  3151  00254A  0E00               	movlw	0
  3152  00254C  6E08               	movwf	___awdiv@quotient+1,c
  3153  00254E  0E00               	movlw	0
  3154  002550  6E07               	movwf	___awdiv@quotient,c
  3155  002552  5003               	movf	___awdiv@divisor,w,c
  3156  002554  1004               	iorwf	___awdiv@divisor+1,w,c
  3157  002556  B4D8               	btfsc	status,2,c
  3158  002558  D021               	goto	l1962
  3159  00255A  0E01               	movlw	1
  3160  00255C  6E05               	movwf	___awdiv@counter,c
  3161  00255E  D005               	goto	l1948
  3162  002560                     l1946:
  3163  002560  90D8               	bcf	status,0,c
  3164  002562  3603               	rlcf	___awdiv@divisor,f,c
  3165  002564  3604               	rlcf	___awdiv@divisor+1,f,c
  3166  002566  2A05               	incf	___awdiv@counter,f,c
  3167  002568  D000               	goto	l1948
  3168  00256A                     l1948:
  3169  00256A  BE04               	btfsc	___awdiv@divisor+1,7,c
  3170  00256C  D002               	goto	l1950
  3171  00256E  D7F8               	goto	l1946
  3172  002570  D000               	goto	l1950
  3173  002572                     l1950:
  3174  002572  90D8               	bcf	status,0,c
  3175  002574  3607               	rlcf	___awdiv@quotient,f,c
  3176  002576  3608               	rlcf	___awdiv@quotient+1,f,c
  3177  002578  5003               	movf	___awdiv@divisor,w,c
  3178  00257A  5C01               	subwf	___awdiv@dividend,w,c
  3179  00257C  5004               	movf	___awdiv@divisor+1,w,c
  3180  00257E  5802               	subwfb	___awdiv@dividend+1,w,c
  3181  002580  A0D8               	btfss	status,0,c
  3182  002582  D006               	goto	l1958
  3183  002584  5003               	movf	___awdiv@divisor,w,c
  3184  002586  5E01               	subwf	___awdiv@dividend,f,c
  3185  002588  5004               	movf	___awdiv@divisor+1,w,c
  3186  00258A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3187  00258C  8007               	bsf	___awdiv@quotient,0,c
  3188  00258E  D000               	goto	l1958
  3189  002590                     l1958:
  3190  002590  90D8               	bcf	status,0,c
  3191  002592  3204               	rrcf	___awdiv@divisor+1,f,c
  3192  002594  3203               	rrcf	___awdiv@divisor,f,c
  3193  002596  2E05               	decfsz	___awdiv@counter,f,c
  3194  002598  D7EC               	goto	l1950
  3195  00259A  D000               	goto	l1962
  3196  00259C                     l1962:
  3197  00259C  5006               	movf	___awdiv@sign,w,c
  3198  00259E  B4D8               	btfsc	status,2,c
  3199  0025A0  D005               	goto	l1966
  3200  0025A2  6C07               	negf	___awdiv@quotient,c
  3201  0025A4  1E08               	comf	___awdiv@quotient+1,f,c
  3202  0025A6  B0D8               	btfsc	status,0,c
  3203  0025A8  2A08               	incf	___awdiv@quotient+1,f,c
  3204  0025AA  D000               	goto	l1966
  3205  0025AC                     l1966:
  3206  0025AC  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3207  0025B0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3208  0025B4  D000               	goto	l436
  3209  0025B6                     l436:
  3210  0025B6  0012               	return		;funcret
  3211  0025B8                     __end_of___awdiv:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1l	equ	0xFE1
  3223                           postinc2	equ	0xFDE
  3224                           postdec2	equ	0xFDD
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function __tdiv_to_l_ *****************
  3230 ;; Defined at:
  3231 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  f1              3    0[COMRAM] float 
  3234 ;;  f2              3    3[COMRAM] float 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  quot            4    9[COMRAM] unsigned long 
  3237 ;;  exp1            1   14[COMRAM] unsigned char 
  3238 ;;  cntr            1   13[COMRAM] unsigned char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  4    0[COMRAM] unsigned long 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:       15 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_printf
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text9
  3262  001E9C                     __ptext9:
  3263                           	opt stack 0
  3264  001E9C                     __tdiv_to_l_:
  3265                           	opt stack 29
  3266                           
  3267                           ;incstack = 0
  3268  001E9C  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3269  001EA0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3270  001EA2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3271  001EA4  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3272  001EA6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3273  001EA8  E301               	bnc	u2021
  3274  001EAA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3275  001EAC                     u2021:
  3276  001EAC  5007               	movf	??__tdiv_to_l_,w,c
  3277  001EAE  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3278  001EB0  500F               	movf	__tdiv_to_l_@exp1,w,c
  3279  001EB2  A4D8               	btfss	status,2,c
  3280  001EB4  D002               	goto	l2126
  3281  001EB6  D05D               	goto	l2168
  3282  001EB8  D078               	goto	l648
  3283  001EBA                     l2126:
  3284  001EBA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3285  001EBE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3286  001EC0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3287  001EC2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3288  001EC4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3289  001EC6  E301               	bnc	u2041
  3290  001EC8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3291  001ECA                     u2041:
  3292  001ECA  5007               	movf	??__tdiv_to_l_,w,c
  3293  001ECC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3294  001ECE  500E               	movf	__tdiv_to_l_@cntr,w,c
  3295  001ED0  A4D8               	btfss	status,2,c
  3296  001ED2  D002               	goto	l2132
  3297  001ED4  D04E               	goto	l2168
  3298  001ED6  D069               	goto	l648
  3299  001ED8                     l2132:
  3300  001ED8  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3301  001EDA  0EFF               	movlw	255
  3302  001EDC  1601               	andwf	__tdiv_to_l_@f1,f,c
  3303  001EDE  0EFF               	movlw	255
  3304  001EE0  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3305  001EE2  0E00               	movlw	0
  3306  001EE4  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3307  001EE6  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3308  001EE8  0EFF               	movlw	255
  3309  001EEA  1604               	andwf	__tdiv_to_l_@f2,f,c
  3310  001EEC  0EFF               	movlw	255
  3311  001EEE  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3312  001EF0  0E00               	movlw	0
  3313  001EF2  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3314  001EF4  0E00               	movlw	0
  3315  001EF6  6E0A               	movwf	__tdiv_to_l_@quot,c
  3316  001EF8  0E00               	movlw	0
  3317  001EFA  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3318  001EFC  0E00               	movlw	0
  3319  001EFE  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3320  001F00  0E00               	movlw	0
  3321  001F02  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3322  001F04  0E7F               	movlw	127
  3323  001F06  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3324  001F08  500E               	movf	__tdiv_to_l_@cntr,w,c
  3325  001F0A  0F98               	addlw	152
  3326  001F0C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3327  001F0E  0E18               	movlw	24
  3328  001F10  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3329  001F12                     l650:
  3330  001F12  90D8               	bcf	status,0,c
  3331  001F14  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3332  001F16  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3333  001F18  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3334  001F1A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3335  001F1C  5004               	movf	__tdiv_to_l_@f2,w,c
  3336  001F1E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3337  001F20  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3338  001F22  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3339  001F24  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3340  001F26  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3341  001F28  A0D8               	btfss	status,0,c
  3342  001F2A  D007               	goto	l651
  3343  001F2C  5004               	movf	__tdiv_to_l_@f2,w,c
  3344  001F2E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3345  001F30  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3346  001F32  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3347  001F34  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3348  001F36  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3349  001F38  800A               	bsf	__tdiv_to_l_@quot,0,c
  3350  001F3A                     l651:
  3351  001F3A  90D8               	bcf	status,0,c
  3352  001F3C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3353  001F3E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3354  001F40  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3355  001F42  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3356  001F44  D7E6               	goto	l650
  3357  001F46  D000               	goto	l2154
  3358  001F48                     l2154:
  3359  001F48  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3360  001F4A  D010               	goto	l2166
  3361  001F4C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3362  001F4E  0A80               	xorlw	128
  3363  001F50  0F97               	addlw	151
  3364  001F52  B0D8               	btfsc	status,0,c
  3365  001F54  D003               	goto	l2162
  3366  001F56  D00D               	goto	l2168
  3367  001F58  D028               	goto	l648
  3368  001F5A  D000               	goto	l2162
  3369  001F5C                     l2162:
  3370  001F5C  90D8               	bcf	status,0,c
  3371  001F5E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3372  001F60  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3373  001F62  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3374  001F64  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3375  001F66  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3376  001F68  D7F9               	goto	l2162
  3377  001F6A  D017               	goto	l657
  3378  001F6C                     l2166:
  3379  001F6C  0E17               	movlw	23
  3380  001F6E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3381  001F70  D011               	goto	l2174
  3382  001F72                     l2168:
  3383  001F72  0E00               	movlw	0
  3384  001F74  6E01               	movwf	?__tdiv_to_l_,c
  3385  001F76  0E00               	movlw	0
  3386  001F78  6E02               	movwf	?__tdiv_to_l_+1,c
  3387  001F7A  0E00               	movlw	0
  3388  001F7C  6E03               	movwf	?__tdiv_to_l_+2,c
  3389  001F7E  0E00               	movlw	0
  3390  001F80  6E04               	movwf	?__tdiv_to_l_+3,c
  3391  001F82  D013               	goto	l648
  3392  001F84  D007               	goto	l2174
  3393  001F86                     l2172:
  3394  001F86  90D8               	bcf	status,0,c
  3395  001F88  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3396  001F8A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3397  001F8C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3398  001F8E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3399  001F90  060F               	decf	__tdiv_to_l_@exp1,f,c
  3400  001F92  D000               	goto	l2174
  3401  001F94                     l2174:
  3402  001F94  500F               	movf	__tdiv_to_l_@exp1,w,c
  3403  001F96  A4D8               	btfss	status,2,c
  3404  001F98  D7F6               	goto	l2172
  3405  001F9A                     l657:
  3406  001F9A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3407  001F9E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3408  001FA2  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3409  001FA6  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3410  001FAA                     l648:
  3411  001FAA  0012               	return		;funcret
  3412  001FAC                     __end_of__tdiv_to_l_:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           postdec1	equ	0xFE5
  3423                           fsr1l	equ	0xFE1
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function __div_to_l_ *****************
  3431 ;; Defined at:
  3432 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  f1              3    0[COMRAM] unsigned long 
  3435 ;;  f2              3    3[COMRAM] unsigned long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  quot            4    6[COMRAM] unsigned long 
  3438 ;;  exp1            1   11[COMRAM] unsigned char 
  3439 ;;  cntr            1   10[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  4    0[COMRAM] unsigned long 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3449 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;Total ram usage:       12 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_printf
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text10
  3463  001FAC                     __ptext10:
  3464                           	opt stack 0
  3465  001FAC                     __div_to_l_:
  3466                           	opt stack 29
  3467                           
  3468                           ;incstack = 0
  3469  001FAC  3403               	rlcf	__div_to_l_@f1+2,w,c
  3470  001FAE  3404               	rlcf	__div_to_l_@f1+3,w,c
  3471  001FB0  6E0C               	movwf	__div_to_l_@exp1,c
  3472  001FB2  500C               	movf	__div_to_l_@exp1,w,c
  3473  001FB4  A4D8               	btfss	status,2,c
  3474  001FB6  D002               	goto	l2182
  3475  001FB8  D061               	goto	l2228
  3476  001FBA  D07C               	goto	l527
  3477  001FBC                     l2182:
  3478  001FBC  3406               	rlcf	__div_to_l_@f2+2,w,c
  3479  001FBE  3407               	rlcf	__div_to_l_@f2+3,w,c
  3480  001FC0  6E0B               	movwf	__div_to_l_@cntr,c
  3481  001FC2  500B               	movf	__div_to_l_@cntr,w,c
  3482  001FC4  A4D8               	btfss	status,2,c
  3483  001FC6  D002               	goto	l2188
  3484  001FC8  D059               	goto	l2228
  3485  001FCA  D074               	goto	l527
  3486  001FCC                     l2188:
  3487  001FCC  8E03               	bsf	__div_to_l_@f1+2,7,c
  3488  001FCE  0EFF               	movlw	255
  3489  001FD0  1601               	andwf	__div_to_l_@f1,f,c
  3490  001FD2  0EFF               	movlw	255
  3491  001FD4  1602               	andwf	__div_to_l_@f1+1,f,c
  3492  001FD6  0EFF               	movlw	255
  3493  001FD8  1603               	andwf	__div_to_l_@f1+2,f,c
  3494  001FDA  0E00               	movlw	0
  3495  001FDC  1604               	andwf	__div_to_l_@f1+3,f,c
  3496  001FDE  8E06               	bsf	__div_to_l_@f2+2,7,c
  3497  001FE0  0EFF               	movlw	255
  3498  001FE2  1604               	andwf	__div_to_l_@f2,f,c
  3499  001FE4  0EFF               	movlw	255
  3500  001FE6  1605               	andwf	__div_to_l_@f2+1,f,c
  3501  001FE8  0EFF               	movlw	255
  3502  001FEA  1606               	andwf	__div_to_l_@f2+2,f,c
  3503  001FEC  0E00               	movlw	0
  3504  001FEE  1607               	andwf	__div_to_l_@f2+3,f,c
  3505  001FF0  0E00               	movlw	0
  3506  001FF2  6E07               	movwf	__div_to_l_@quot,c
  3507  001FF4  0E00               	movlw	0
  3508  001FF6  6E08               	movwf	__div_to_l_@quot+1,c
  3509  001FF8  0E00               	movlw	0
  3510  001FFA  6E09               	movwf	__div_to_l_@quot+2,c
  3511  001FFC  0E00               	movlw	0
  3512  001FFE  6E0A               	movwf	__div_to_l_@quot+3,c
  3513  002000  0E7F               	movlw	127
  3514  002002  5E0C               	subwf	__div_to_l_@exp1,f,c
  3515  002004  500B               	movf	__div_to_l_@cntr,w,c
  3516  002006  0FA0               	addlw	160
  3517  002008  5E0C               	subwf	__div_to_l_@exp1,f,c
  3518  00200A  0E20               	movlw	32
  3519  00200C  6E0B               	movwf	__div_to_l_@cntr,c
  3520  00200E  D000               	goto	l2202
  3521  002010                     l2202:
  3522  002010  90D8               	bcf	status,0,c
  3523  002012  3607               	rlcf	__div_to_l_@quot,f,c
  3524  002014  3608               	rlcf	__div_to_l_@quot+1,f,c
  3525  002016  3609               	rlcf	__div_to_l_@quot+2,f,c
  3526  002018  360A               	rlcf	__div_to_l_@quot+3,f,c
  3527  00201A  5004               	movf	__div_to_l_@f2,w,c
  3528  00201C  5C01               	subwf	__div_to_l_@f1,w,c
  3529  00201E  5005               	movf	__div_to_l_@f2+1,w,c
  3530  002020  5802               	subwfb	__div_to_l_@f1+1,w,c
  3531  002022  5006               	movf	__div_to_l_@f2+2,w,c
  3532  002024  5803               	subwfb	__div_to_l_@f1+2,w,c
  3533  002026  5007               	movf	__div_to_l_@f2+3,w,c
  3534  002028  5804               	subwfb	__div_to_l_@f1+3,w,c
  3535  00202A  A0D8               	btfss	status,0,c
  3536  00202C  D00A               	goto	l2210
  3537  00202E  5004               	movf	__div_to_l_@f2,w,c
  3538  002030  5E01               	subwf	__div_to_l_@f1,f,c
  3539  002032  5005               	movf	__div_to_l_@f2+1,w,c
  3540  002034  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3541  002036  5006               	movf	__div_to_l_@f2+2,w,c
  3542  002038  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3543  00203A  5007               	movf	__div_to_l_@f2+3,w,c
  3544  00203C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3545  00203E  8007               	bsf	__div_to_l_@quot,0,c
  3546  002040  D000               	goto	l2210
  3547  002042                     l2210:
  3548  002042  90D8               	bcf	status,0,c
  3549  002044  3601               	rlcf	__div_to_l_@f1,f,c
  3550  002046  3602               	rlcf	__div_to_l_@f1+1,f,c
  3551  002048  3603               	rlcf	__div_to_l_@f1+2,f,c
  3552  00204A  3604               	rlcf	__div_to_l_@f1+3,f,c
  3553  00204C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3554  00204E  D7E0               	goto	l2202
  3555  002050  D000               	goto	l2214
  3556  002052                     l2214:
  3557  002052  AE0C               	btfss	__div_to_l_@exp1,7,c
  3558  002054  D010               	goto	l2226
  3559  002056  500C               	movf	__div_to_l_@exp1,w,c
  3560  002058  0A80               	xorlw	128
  3561  00205A  0F9F               	addlw	159
  3562  00205C  B0D8               	btfsc	status,0,c
  3563  00205E  D003               	goto	l2222
  3564  002060  D00D               	goto	l2228
  3565  002062  D028               	goto	l527
  3566  002064  D000               	goto	l2222
  3567  002066                     l2222:
  3568  002066  90D8               	bcf	status,0,c
  3569  002068  320A               	rrcf	__div_to_l_@quot+3,f,c
  3570  00206A  3209               	rrcf	__div_to_l_@quot+2,f,c
  3571  00206C  3208               	rrcf	__div_to_l_@quot+1,f,c
  3572  00206E  3207               	rrcf	__div_to_l_@quot,f,c
  3573  002070  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3574  002072  D7F9               	goto	l2222
  3575  002074  D017               	goto	l536
  3576  002076                     l2226:
  3577  002076  0E1F               	movlw	31
  3578  002078  640C               	cpfsgt	__div_to_l_@exp1,c
  3579  00207A  D011               	goto	l2234
  3580  00207C                     l2228:
  3581  00207C  0E00               	movlw	0
  3582  00207E  6E01               	movwf	?__div_to_l_,c
  3583  002080  0E00               	movlw	0
  3584  002082  6E02               	movwf	?__div_to_l_+1,c
  3585  002084  0E00               	movlw	0
  3586  002086  6E03               	movwf	?__div_to_l_+2,c
  3587  002088  0E00               	movlw	0
  3588  00208A  6E04               	movwf	?__div_to_l_+3,c
  3589  00208C  D013               	goto	l527
  3590  00208E  D007               	goto	l2234
  3591  002090                     l2232:
  3592  002090  90D8               	bcf	status,0,c
  3593  002092  3607               	rlcf	__div_to_l_@quot,f,c
  3594  002094  3608               	rlcf	__div_to_l_@quot+1,f,c
  3595  002096  3609               	rlcf	__div_to_l_@quot+2,f,c
  3596  002098  360A               	rlcf	__div_to_l_@quot+3,f,c
  3597  00209A  060C               	decf	__div_to_l_@exp1,f,c
  3598  00209C  D000               	goto	l2234
  3599  00209E                     l2234:
  3600  00209E  500C               	movf	__div_to_l_@exp1,w,c
  3601  0020A0  A4D8               	btfss	status,2,c
  3602  0020A2  D7F6               	goto	l2232
  3603  0020A4                     l536:
  3604  0020A4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3605  0020A8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3606  0020AC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3607  0020B0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3608  0020B4                     l527:
  3609  0020B4  0012               	return		;funcret
  3610  0020B6                     __end_of__div_to_l_:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           fsr1l	equ	0xFE1
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           fsr2h	equ	0xFDA
  3625                           fsr2l	equ	0xFD9
  3626                           status	equ	0xFD8
  3627                           
  3628 ;; *************** function ___lltoft *****************
  3629 ;; Defined at:
  3630 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  c               4    8[COMRAM] unsigned long 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  exp             1   16[COMRAM] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  3    8[COMRAM] float 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3644 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;Total ram usage:        9 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    1
  3651 ;; This function calls:
  3652 ;;		___ftpack
  3653 ;; This function is called by:
  3654 ;;		_printf
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text11
  3659  00283C                     __ptext11:
  3660                           	opt stack 0
  3661  00283C                     ___lltoft:
  3662                           	opt stack 28
  3663                           
  3664                           ;incstack = 0
  3665  00283C  0E8E               	movlw	142
  3666  00283E  6E11               	movwf	___lltoft@exp,c
  3667  002840  D007               	goto	l2354
  3668  002842                     l2352:
  3669  002842  90D8               	bcf	status,0,c
  3670  002844  320C               	rrcf	___lltoft@c+3,f,c
  3671  002846  320B               	rrcf	___lltoft@c+2,f,c
  3672  002848  320A               	rrcf	___lltoft@c+1,f,c
  3673  00284A  3209               	rrcf	___lltoft@c,f,c
  3674  00284C  2A11               	incf	___lltoft@exp,f,c
  3675  00284E  D000               	goto	l2354
  3676  002850                     l2354:
  3677  002850  0E00               	movlw	0
  3678  002852  1409               	andwf	___lltoft@c,w,c
  3679  002854  6E0D               	movwf	??___lltoft& (0+255),c
  3680  002856  0E00               	movlw	0
  3681  002858  140A               	andwf	___lltoft@c+1,w,c
  3682  00285A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3683  00285C  0E00               	movlw	0
  3684  00285E  140B               	andwf	___lltoft@c+2,w,c
  3685  002860  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3686  002862  0EFF               	movlw	255
  3687  002864  140C               	andwf	___lltoft@c+3,w,c
  3688  002866  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3689  002868  500D               	movf	??___lltoft,w,c
  3690  00286A  100E               	iorwf	??___lltoft+1,w,c
  3691  00286C  100F               	iorwf	??___lltoft+2,w,c
  3692  00286E  1010               	iorwf	??___lltoft+3,w,c
  3693  002870  A4D8               	btfss	status,2,c
  3694  002872  D7E7               	goto	l2352
  3695  002874  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3696  002878  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3697  00287C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3698  002880  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3699  002884  0E00               	movlw	0
  3700  002886  6E05               	movwf	___ftpack@sign,c
  3701  002888  EC2E  F012         	call	___ftpack	;wreg free
  3702  00288C  C001  F009         	movff	?___ftpack,?___lltoft
  3703  002890  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3704  002894  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3705  002898  D000               	goto	l762
  3706  00289A                     l762:
  3707  00289A  0012               	return		;funcret
  3708  00289C                     __end_of___lltoft:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           postdec1	equ	0xFE5
  3719                           fsr1l	equ	0xFE1
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function ___llmod *****************
  3727 ;; Defined at:
  3728 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  dividend        4    0[COMRAM] unsigned long 
  3731 ;;  divisor         4    4[COMRAM] unsigned long 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  counter         1    8[COMRAM] unsigned char 
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  4    0[COMRAM] unsigned long 
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, status,0
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3743 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;Total ram usage:        9 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_printf
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text12
  3757  00275C                     __ptext12:
  3758                           	opt stack 0
  3759  00275C                     ___llmod:
  3760                           	opt stack 29
  3761                           
  3762                           ;incstack = 0
  3763  00275C  5005               	movf	___llmod@divisor,w,c
  3764  00275E  1006               	iorwf	___llmod@divisor+1,w,c
  3765  002760  1007               	iorwf	___llmod@divisor+2,w,c
  3766  002762  1008               	iorwf	___llmod@divisor+3,w,c
  3767  002764  B4D8               	btfsc	status,2,c
  3768  002766  D029               	goto	l742
  3769  002768  0E01               	movlw	1
  3770  00276A  6E09               	movwf	___llmod@counter,c
  3771  00276C  D007               	goto	l2340
  3772  00276E                     l2338:
  3773  00276E  90D8               	bcf	status,0,c
  3774  002770  3605               	rlcf	___llmod@divisor,f,c
  3775  002772  3606               	rlcf	___llmod@divisor+1,f,c
  3776  002774  3607               	rlcf	___llmod@divisor+2,f,c
  3777  002776  3608               	rlcf	___llmod@divisor+3,f,c
  3778  002778  2A09               	incf	___llmod@counter,f,c
  3779  00277A  D000               	goto	l2340
  3780  00277C                     l2340:
  3781  00277C  BE08               	btfsc	___llmod@divisor+3,7,c
  3782  00277E  D002               	goto	l2342
  3783  002780  D7F6               	goto	l2338
  3784  002782  D000               	goto	l2342
  3785  002784                     l2342:
  3786  002784  5005               	movf	___llmod@divisor,w,c
  3787  002786  5C01               	subwf	___llmod@dividend,w,c
  3788  002788  5006               	movf	___llmod@divisor+1,w,c
  3789  00278A  5802               	subwfb	___llmod@dividend+1,w,c
  3790  00278C  5007               	movf	___llmod@divisor+2,w,c
  3791  00278E  5803               	subwfb	___llmod@dividend+2,w,c
  3792  002790  5008               	movf	___llmod@divisor+3,w,c
  3793  002792  5804               	subwfb	___llmod@dividend+3,w,c
  3794  002794  A0D8               	btfss	status,0,c
  3795  002796  D009               	goto	l2346
  3796  002798  5005               	movf	___llmod@divisor,w,c
  3797  00279A  5E01               	subwf	___llmod@dividend,f,c
  3798  00279C  5006               	movf	___llmod@divisor+1,w,c
  3799  00279E  5A02               	subwfb	___llmod@dividend+1,f,c
  3800  0027A0  5007               	movf	___llmod@divisor+2,w,c
  3801  0027A2  5A03               	subwfb	___llmod@dividend+2,f,c
  3802  0027A4  5008               	movf	___llmod@divisor+3,w,c
  3803  0027A6  5A04               	subwfb	___llmod@dividend+3,f,c
  3804  0027A8  D000               	goto	l2346
  3805  0027AA                     l2346:
  3806  0027AA  90D8               	bcf	status,0,c
  3807  0027AC  3208               	rrcf	___llmod@divisor+3,f,c
  3808  0027AE  3207               	rrcf	___llmod@divisor+2,f,c
  3809  0027B0  3206               	rrcf	___llmod@divisor+1,f,c
  3810  0027B2  3205               	rrcf	___llmod@divisor,f,c
  3811  0027B4  2E09               	decfsz	___llmod@counter,f,c
  3812  0027B6  D7E6               	goto	l2342
  3813  0027B8  D000               	goto	l742
  3814  0027BA                     l742:
  3815  0027BA  C001  F001         	movff	___llmod@dividend,?___llmod
  3816  0027BE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3817  0027C2  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3818  0027C6  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3819  0027CA  0012               	return		;funcret
  3820  0027CC                     __end_of___llmod:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           postinc0	equ	0xFEE
  3829                           wreg	equ	0xFE8
  3830                           postdec1	equ	0xFE5
  3831                           fsr1l	equ	0xFE1
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function ___lldiv *****************
  3839 ;; Defined at:
  3840 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  dividend        4    0[COMRAM] unsigned long 
  3843 ;;  divisor         4    4[COMRAM] unsigned long 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  quotient        4    8[COMRAM] unsigned long 
  3846 ;;  counter         1   12[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  4    0[COMRAM] unsigned long 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3856 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;Total ram usage:       13 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_printf
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text13
  3870  00264E                     __ptext13:
  3871                           	opt stack 0
  3872  00264E                     ___lldiv:
  3873                           	opt stack 29
  3874                           
  3875                           ;incstack = 0
  3876  00264E  0E00               	movlw	0
  3877  002650  6E09               	movwf	___lldiv@quotient,c
  3878  002652  0E00               	movlw	0
  3879  002654  6E0A               	movwf	___lldiv@quotient+1,c
  3880  002656  0E00               	movlw	0
  3881  002658  6E0B               	movwf	___lldiv@quotient+2,c
  3882  00265A  0E00               	movlw	0
  3883  00265C  6E0C               	movwf	___lldiv@quotient+3,c
  3884  00265E  5005               	movf	___lldiv@divisor,w,c
  3885  002660  1006               	iorwf	___lldiv@divisor+1,w,c
  3886  002662  1007               	iorwf	___lldiv@divisor+2,w,c
  3887  002664  1008               	iorwf	___lldiv@divisor+3,w,c
  3888  002666  B4D8               	btfsc	status,2,c
  3889  002668  D02F               	goto	l732
  3890  00266A  0E01               	movlw	1
  3891  00266C  6E0D               	movwf	___lldiv@counter,c
  3892  00266E  D007               	goto	l2320
  3893  002670                     l2318:
  3894  002670  90D8               	bcf	status,0,c
  3895  002672  3605               	rlcf	___lldiv@divisor,f,c
  3896  002674  3606               	rlcf	___lldiv@divisor+1,f,c
  3897  002676  3607               	rlcf	___lldiv@divisor+2,f,c
  3898  002678  3608               	rlcf	___lldiv@divisor+3,f,c
  3899  00267A  2A0D               	incf	___lldiv@counter,f,c
  3900  00267C  D000               	goto	l2320
  3901  00267E                     l2320:
  3902  00267E  BE08               	btfsc	___lldiv@divisor+3,7,c
  3903  002680  D002               	goto	l2322
  3904  002682  D7F6               	goto	l2318
  3905  002684  D000               	goto	l2322
  3906  002686                     l2322:
  3907  002686  90D8               	bcf	status,0,c
  3908  002688  3609               	rlcf	___lldiv@quotient,f,c
  3909  00268A  360A               	rlcf	___lldiv@quotient+1,f,c
  3910  00268C  360B               	rlcf	___lldiv@quotient+2,f,c
  3911  00268E  360C               	rlcf	___lldiv@quotient+3,f,c
  3912  002690  5005               	movf	___lldiv@divisor,w,c
  3913  002692  5C01               	subwf	___lldiv@dividend,w,c
  3914  002694  5006               	movf	___lldiv@divisor+1,w,c
  3915  002696  5802               	subwfb	___lldiv@dividend+1,w,c
  3916  002698  5007               	movf	___lldiv@divisor+2,w,c
  3917  00269A  5803               	subwfb	___lldiv@dividend+2,w,c
  3918  00269C  5008               	movf	___lldiv@divisor+3,w,c
  3919  00269E  5804               	subwfb	___lldiv@dividend+3,w,c
  3920  0026A0  A0D8               	btfss	status,0,c
  3921  0026A2  D00A               	goto	l2330
  3922  0026A4  5005               	movf	___lldiv@divisor,w,c
  3923  0026A6  5E01               	subwf	___lldiv@dividend,f,c
  3924  0026A8  5006               	movf	___lldiv@divisor+1,w,c
  3925  0026AA  5A02               	subwfb	___lldiv@dividend+1,f,c
  3926  0026AC  5007               	movf	___lldiv@divisor+2,w,c
  3927  0026AE  5A03               	subwfb	___lldiv@dividend+2,f,c
  3928  0026B0  5008               	movf	___lldiv@divisor+3,w,c
  3929  0026B2  5A04               	subwfb	___lldiv@dividend+3,f,c
  3930  0026B4  8009               	bsf	___lldiv@quotient,0,c
  3931  0026B6  D000               	goto	l2330
  3932  0026B8                     l2330:
  3933  0026B8  90D8               	bcf	status,0,c
  3934  0026BA  3208               	rrcf	___lldiv@divisor+3,f,c
  3935  0026BC  3207               	rrcf	___lldiv@divisor+2,f,c
  3936  0026BE  3206               	rrcf	___lldiv@divisor+1,f,c
  3937  0026C0  3205               	rrcf	___lldiv@divisor,f,c
  3938  0026C2  2E0D               	decfsz	___lldiv@counter,f,c
  3939  0026C4  D7E0               	goto	l2322
  3940  0026C6  D000               	goto	l732
  3941  0026C8                     l732:
  3942  0026C8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3943  0026CC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3944  0026D0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3945  0026D4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3946  0026D8  0012               	return		;funcret
  3947  0026DA                     __end_of___lldiv:
  3948                           	opt stack 0
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           postdec1	equ	0xFE5
  3958                           fsr1l	equ	0xFE1
  3959                           postinc2	equ	0xFDE
  3960                           postdec2	equ	0xFDD
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function ___fttol *****************
  3966 ;; Defined at:
  3967 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  f1              3   42[COMRAM] float 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  lval            4   52[COMRAM] unsigned long 
  3972 ;;  exp1            1   56[COMRAM] unsigned char 
  3973 ;;  sign1           1   51[COMRAM] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  4   42[COMRAM] long 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;Total ram usage:       15 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_printf
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text14
  3997  002294                     __ptext14:
  3998                           	opt stack 0
  3999  002294                     ___fttol:
  4000                           	opt stack 29
  4001                           
  4002                           ;incstack = 0
  4003  002294  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4004  002298  6A30               	clrf	(??___fttol+1)& (0+255),c
  4005  00229A  6A31               	clrf	(??___fttol+2)& (0+255),c
  4006  00229C  342C               	rlcf	___fttol@f1+1,w,c
  4007  00229E  362F               	rlcf	??___fttol& (0+255),f,c
  4008  0022A0  E301               	bnc	u2231
  4009  0022A2  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4010  0022A4                     u2231:
  4011  0022A4  502F               	movf	??___fttol,w,c
  4012  0022A6  6E39               	movwf	___fttol@exp1,c
  4013  0022A8  5039               	movf	___fttol@exp1,w,c
  4014  0022AA  A4D8               	btfss	status,2,c
  4015  0022AC  D002               	goto	l2272
  4016  0022AE  D039               	goto	l2296
  4017  0022B0  D063               	goto	l693
  4018  0022B2                     l2272:
  4019  0022B2  0E17               	movlw	23
  4020  0022B4  6E2F               	movwf	??___fttol& (0+255),c
  4021  0022B6  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4022  0022BA  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4023  0022BE  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4024  0022C2  282F               	incf	??___fttol,w,c
  4025  0022C4  6E33               	movwf	(??___fttol+4)& (0+255),c
  4026  0022C6  D004               	goto	u2250
  4027  0022C8                     u2255:
  4028  0022C8  90D8               	bcf	status,0,c
  4029  0022CA  3232               	rrcf	??___fttol+3,f,c
  4030  0022CC  3231               	rrcf	??___fttol+2,f,c
  4031  0022CE  3230               	rrcf	??___fttol+1,f,c
  4032  0022D0                     u2250:
  4033  0022D0  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4034  0022D2  D7FA               	goto	u2255
  4035  0022D4  5030               	movf	??___fttol+1,w,c
  4036  0022D6  6E34               	movwf	___fttol@sign1,c
  4037  0022D8  8E2C               	bsf	___fttol@f1+1,7,c
  4038  0022DA  0EFF               	movlw	255
  4039  0022DC  162B               	andwf	___fttol@f1,f,c
  4040  0022DE  0EFF               	movlw	255
  4041  0022E0  162C               	andwf	___fttol@f1+1,f,c
  4042  0022E2  0E00               	movlw	0
  4043  0022E4  162D               	andwf	___fttol@f1+2,f,c
  4044  0022E6  502B               	movf	___fttol@f1,w,c
  4045  0022E8  6E35               	movwf	___fttol@lval,c
  4046  0022EA  502C               	movf	___fttol@f1+1,w,c
  4047  0022EC  6E36               	movwf	___fttol@lval+1,c
  4048  0022EE  502D               	movf	___fttol@f1+2,w,c
  4049  0022F0  6E37               	movwf	___fttol@lval+2,c
  4050  0022F2  6A38               	clrf	___fttol@lval+3,c
  4051  0022F4  0E8E               	movlw	142
  4052  0022F6  5E39               	subwf	___fttol@exp1,f,c
  4053  0022F8  AE39               	btfss	___fttol@exp1,7,c
  4054  0022FA  D010               	goto	l2294
  4055  0022FC  5039               	movf	___fttol@exp1,w,c
  4056  0022FE  0A80               	xorlw	128
  4057  002300  0F8F               	addlw	143
  4058  002302  B0D8               	btfsc	status,0,c
  4059  002304  D003               	goto	l2290
  4060  002306  D00D               	goto	l2296
  4061  002308  D037               	goto	l693
  4062  00230A  D000               	goto	l2290
  4063  00230C                     l2290:
  4064  00230C  90D8               	bcf	status,0,c
  4065  00230E  3238               	rrcf	___fttol@lval+3,f,c
  4066  002310  3237               	rrcf	___fttol@lval+2,f,c
  4067  002312  3236               	rrcf	___fttol@lval+1,f,c
  4068  002314  3235               	rrcf	___fttol@lval,f,c
  4069  002316  3E39               	incfsz	___fttol@exp1,f,c
  4070  002318  D7F9               	goto	l2290
  4071  00231A  D019               	goto	l2304
  4072  00231C                     l2294:
  4073  00231C  0E17               	movlw	23
  4074  00231E  6439               	cpfsgt	___fttol@exp1,c
  4075  002320  D011               	goto	l2302
  4076  002322                     l2296:
  4077  002322  0E00               	movlw	0
  4078  002324  6E2B               	movwf	?___fttol,c
  4079  002326  0E00               	movlw	0
  4080  002328  6E2C               	movwf	?___fttol+1,c
  4081  00232A  0E00               	movlw	0
  4082  00232C  6E2D               	movwf	?___fttol+2,c
  4083  00232E  0E00               	movlw	0
  4084  002330  6E2E               	movwf	?___fttol+3,c
  4085  002332  D022               	goto	l693
  4086  002334  D007               	goto	l2302
  4087  002336                     l2300:
  4088  002336  90D8               	bcf	status,0,c
  4089  002338  3635               	rlcf	___fttol@lval,f,c
  4090  00233A  3636               	rlcf	___fttol@lval+1,f,c
  4091  00233C  3637               	rlcf	___fttol@lval+2,f,c
  4092  00233E  3638               	rlcf	___fttol@lval+3,f,c
  4093  002340  0639               	decf	___fttol@exp1,f,c
  4094  002342  D000               	goto	l2302
  4095  002344                     l2302:
  4096  002344  5039               	movf	___fttol@exp1,w,c
  4097  002346  B4D8               	btfsc	status,2,c
  4098  002348  D002               	goto	l2304
  4099  00234A  D7F5               	goto	l2300
  4100  00234C  D000               	goto	l2304
  4101  00234E                     l2304:
  4102  00234E  5034               	movf	___fttol@sign1,w,c
  4103  002350  B4D8               	btfsc	status,2,c
  4104  002352  D009               	goto	l2308
  4105  002354  1E38               	comf	___fttol@lval+3,f,c
  4106  002356  1E37               	comf	___fttol@lval+2,f,c
  4107  002358  1E36               	comf	___fttol@lval+1,f,c
  4108  00235A  6C35               	negf	___fttol@lval,c
  4109  00235C  0E00               	movlw	0
  4110  00235E  2236               	addwfc	___fttol@lval+1,f,c
  4111  002360  2237               	addwfc	___fttol@lval+2,f,c
  4112  002362  2238               	addwfc	___fttol@lval+3,f,c
  4113  002364  D000               	goto	l2308
  4114  002366                     l2308:
  4115  002366  C035  F02B         	movff	___fttol@lval,?___fttol
  4116  00236A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4117  00236E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4118  002372  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4119  002376  D000               	goto	l693
  4120  002378                     l693:
  4121  002378  0012               	return		;funcret
  4122  00237A                     __end_of___fttol:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           postinc0	equ	0xFEE
  4131                           wreg	equ	0xFE8
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function ___ftsub *****************
  4141 ;; Defined at:
  4142 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  f1              3   57[COMRAM] float 
  4145 ;;  f2              3   60[COMRAM] float 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  3   57[COMRAM] float 
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4157 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;Total ram usage:        6 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    2
  4164 ;; This function calls:
  4165 ;;		___ftadd
  4166 ;; This function is called by:
  4167 ;;		_printf
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text15
  4172  00289C                     __ptext15:
  4173                           	opt stack 0
  4174  00289C                     ___ftsub:
  4175                           	opt stack 27
  4176                           
  4177                           ;incstack = 0
  4178  00289C  503D               	movf	___ftsub@f2,w,c
  4179  00289E  103E               	iorwf	___ftsub@f2+1,w,c
  4180  0028A0  103F               	iorwf	___ftsub@f2+2,w,c
  4181  0028A2  B4D8               	btfsc	status,2,c
  4182  0028A4  D007               	goto	l2240
  4183  0028A6  0E00               	movlw	0
  4184  0028A8  1A3D               	xorwf	___ftsub@f2,f,c
  4185  0028AA  0E00               	movlw	0
  4186  0028AC  1A3E               	xorwf	___ftsub@f2+1,f,c
  4187  0028AE  0E80               	movlw	128
  4188  0028B0  1A3F               	xorwf	___ftsub@f2+2,f,c
  4189  0028B2  D000               	goto	l2240
  4190  0028B4                     l2240:
  4191  0028B4  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4192  0028B8  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4193  0028BC  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4194  0028C0  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4195  0028C4  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4196  0028C8  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4197  0028CC  EC6C  F00E         	call	___ftadd	;wreg free
  4198  0028D0  C02E  F03A         	movff	?___ftadd,?___ftsub
  4199  0028D4  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4200  0028D8  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4201  0028DC  D000               	goto	l689
  4202  0028DE                     l689:
  4203  0028DE  0012               	return		;funcret
  4204  0028E0                     __end_of___ftsub:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           postinc2	equ	0xFDE
  4217                           postdec2	equ	0xFDD
  4218                           fsr2h	equ	0xFDA
  4219                           fsr2l	equ	0xFD9
  4220                           status	equ	0xFD8
  4221                           
  4222 ;; *************** function ___ftadd *****************
  4223 ;; Defined at:
  4224 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  f1              3   45[COMRAM] float 
  4227 ;;  f2              3   48[COMRAM] float 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  exp1            1   56[COMRAM] unsigned char 
  4230 ;;  exp2            1   55[COMRAM] unsigned char 
  4231 ;;  sign            1   54[COMRAM] unsigned char 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  3   45[COMRAM] float 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;Total ram usage:       12 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    1
  4248 ;; This function calls:
  4249 ;;		___ftpack
  4250 ;; This function is called by:
  4251 ;;		_printf
  4252 ;;		___ftsub
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text16
  4257  001CD8                     __ptext16:
  4258                           	opt stack 0
  4259  001CD8                     ___ftadd:
  4260                           	opt stack 27
  4261                           
  4262                           ;incstack = 0
  4263  001CD8  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4264  001CDC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4265  001CDE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4266  001CE0  342F               	rlcf	___ftadd@f1+1,w,c
  4267  001CE2  3634               	rlcf	??___ftadd& (0+255),f,c
  4268  001CE4  E301               	bnc	u1451
  4269  001CE6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4270  001CE8                     u1451:
  4271  001CE8  5034               	movf	??___ftadd,w,c
  4272  001CEA  6E39               	movwf	___ftadd@exp1,c
  4273  001CEC  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4274  001CF0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4275  001CF2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4276  001CF4  3432               	rlcf	___ftadd@f2+1,w,c
  4277  001CF6  3634               	rlcf	??___ftadd& (0+255),f,c
  4278  001CF8  E301               	bnc	u1461
  4279  001CFA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4280  001CFC                     u1461:
  4281  001CFC  5034               	movf	??___ftadd,w,c
  4282  001CFE  6E38               	movwf	___ftadd@exp2,c
  4283  001D00  5039               	movf	___ftadd@exp1,w,c
  4284  001D02  B4D8               	btfsc	status,2,c
  4285  001D04  D00B               	goto	l608
  4286  001D06  5038               	movf	___ftadd@exp2,w,c
  4287  001D08  5C39               	subwf	___ftadd@exp1,w,c
  4288  001D0A  B0D8               	btfsc	status,0,c
  4289  001D0C  D00E               	goto	l1816
  4290  001D0E  5039               	movf	___ftadd@exp1,w,c
  4291  001D10  0800               	sublw	0
  4292  001D12  2438               	addwf	___ftadd@exp2,w,c
  4293  001D14  6E34               	movwf	??___ftadd& (0+255),c
  4294  001D16  0E18               	movlw	24
  4295  001D18  6434               	cpfsgt	??___ftadd,c
  4296  001D1A  D007               	goto	l1816
  4297  001D1C                     l608:
  4298  001D1C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4299  001D20  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4300  001D24  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4301  001D28  D0B8               	goto	l609
  4302  001D2A                     l1816:
  4303  001D2A  5038               	movf	___ftadd@exp2,w,c
  4304  001D2C  B4D8               	btfsc	status,2,c
  4305  001D2E  D00B               	goto	l612
  4306  001D30  5039               	movf	___ftadd@exp1,w,c
  4307  001D32  5C38               	subwf	___ftadd@exp2,w,c
  4308  001D34  B0D8               	btfsc	status,0,c
  4309  001D36  D00E               	goto	l1822
  4310  001D38  5038               	movf	___ftadd@exp2,w,c
  4311  001D3A  0800               	sublw	0
  4312  001D3C  2439               	addwf	___ftadd@exp1,w,c
  4313  001D3E  6E34               	movwf	??___ftadd& (0+255),c
  4314  001D40  0E18               	movlw	24
  4315  001D42  6434               	cpfsgt	??___ftadd,c
  4316  001D44  D007               	goto	l1822
  4317  001D46                     l612:
  4318  001D46  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4319  001D4A  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4320  001D4E  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4321  001D52  D0A3               	goto	l609
  4322  001D54                     l1822:
  4323  001D54  0E06               	movlw	6
  4324  001D56  6E37               	movwf	___ftadd@sign,c
  4325  001D58  AE30               	btfss	___ftadd@f1+2,7,c
  4326  001D5A  D002               	goto	l1828
  4327  001D5C  8E37               	bsf	___ftadd@sign,7,c
  4328  001D5E  D000               	goto	l1828
  4329  001D60                     l1828:
  4330  001D60  BE33               	btfsc	___ftadd@f2+2,7,c
  4331  001D62  8C37               	bsf	___ftadd@sign,6,c
  4332  001D64  8E2F               	bsf	___ftadd@f1+1,7,c
  4333  001D66  0EFF               	movlw	255
  4334  001D68  162E               	andwf	___ftadd@f1,f,c
  4335  001D6A  0EFF               	movlw	255
  4336  001D6C  162F               	andwf	___ftadd@f1+1,f,c
  4337  001D6E  0E00               	movlw	0
  4338  001D70  1630               	andwf	___ftadd@f1+2,f,c
  4339  001D72  8E32               	bsf	___ftadd@f2+1,7,c
  4340  001D74  0EFF               	movlw	255
  4341  001D76  1631               	andwf	___ftadd@f2,f,c
  4342  001D78  0EFF               	movlw	255
  4343  001D7A  1632               	andwf	___ftadd@f2+1,f,c
  4344  001D7C  0E00               	movlw	0
  4345  001D7E  1633               	andwf	___ftadd@f2+2,f,c
  4346  001D80  5038               	movf	___ftadd@exp2,w,c
  4347  001D82  5C39               	subwf	___ftadd@exp1,w,c
  4348  001D84  B0D8               	btfsc	status,0,c
  4349  001D86  D01E               	goto	l1848
  4350  001D88                     l1838:
  4351  001D88  90D8               	bcf	status,0,c
  4352  001D8A  3631               	rlcf	___ftadd@f2,f,c
  4353  001D8C  3632               	rlcf	___ftadd@f2+1,f,c
  4354  001D8E  3633               	rlcf	___ftadd@f2+2,f,c
  4355  001D90  0638               	decf	___ftadd@exp2,f,c
  4356  001D92  5039               	movf	___ftadd@exp1,w,c
  4357  001D94  1838               	xorwf	___ftadd@exp2,w,c
  4358  001D96  B4D8               	btfsc	status,2,c
  4359  001D98  D00F               	goto	l1846
  4360  001D9A  0637               	decf	___ftadd@sign,f,c
  4361  001D9C  C037  F034         	movff	___ftadd@sign,??___ftadd
  4362  001DA0  0E07               	movlw	7
  4363  001DA2  1634               	andwf	??___ftadd,f,c
  4364  001DA4  B4D8               	btfsc	status,2,c
  4365  001DA6  D008               	goto	l1846
  4366  001DA8  D7EF               	goto	l1838
  4367  001DAA  D006               	goto	l1846
  4368  001DAC                     l1844:
  4369  001DAC  90D8               	bcf	status,0,c
  4370  001DAE  3230               	rrcf	___ftadd@f1+2,f,c
  4371  001DB0  322F               	rrcf	___ftadd@f1+1,f,c
  4372  001DB2  322E               	rrcf	___ftadd@f1,f,c
  4373  001DB4  2A39               	incf	___ftadd@exp1,f,c
  4374  001DB6  D000               	goto	l1846
  4375  001DB8                     l1846:
  4376  001DB8  5038               	movf	___ftadd@exp2,w,c
  4377  001DBA  1839               	xorwf	___ftadd@exp1,w,c
  4378  001DBC  B4D8               	btfsc	status,2,c
  4379  001DBE  D024               	goto	l623
  4380  001DC0  D7F5               	goto	l1844
  4381  001DC2  D022               	goto	l623
  4382  001DC4                     l1848:
  4383  001DC4  5039               	movf	___ftadd@exp1,w,c
  4384  001DC6  5C38               	subwf	___ftadd@exp2,w,c
  4385  001DC8  B0D8               	btfsc	status,0,c
  4386  001DCA  D01E               	goto	l623
  4387  001DCC                     l1850:
  4388  001DCC  90D8               	bcf	status,0,c
  4389  001DCE  362E               	rlcf	___ftadd@f1,f,c
  4390  001DD0  362F               	rlcf	___ftadd@f1+1,f,c
  4391  001DD2  3630               	rlcf	___ftadd@f1+2,f,c
  4392  001DD4  0639               	decf	___ftadd@exp1,f,c
  4393  001DD6  5039               	movf	___ftadd@exp1,w,c
  4394  001DD8  1838               	xorwf	___ftadd@exp2,w,c
  4395  001DDA  B4D8               	btfsc	status,2,c
  4396  001DDC  D00F               	goto	l1858
  4397  001DDE  0637               	decf	___ftadd@sign,f,c
  4398  001DE0  C037  F034         	movff	___ftadd@sign,??___ftadd
  4399  001DE4  0E07               	movlw	7
  4400  001DE6  1634               	andwf	??___ftadd,f,c
  4401  001DE8  B4D8               	btfsc	status,2,c
  4402  001DEA  D008               	goto	l1858
  4403  001DEC  D7EF               	goto	l1850
  4404  001DEE  D006               	goto	l1858
  4405  001DF0                     l1856:
  4406  001DF0  90D8               	bcf	status,0,c
  4407  001DF2  3233               	rrcf	___ftadd@f2+2,f,c
  4408  001DF4  3232               	rrcf	___ftadd@f2+1,f,c
  4409  001DF6  3231               	rrcf	___ftadd@f2,f,c
  4410  001DF8  2A38               	incf	___ftadd@exp2,f,c
  4411  001DFA  D000               	goto	l1858
  4412  001DFC                     l1858:
  4413  001DFC  5038               	movf	___ftadd@exp2,w,c
  4414  001DFE  1839               	xorwf	___ftadd@exp1,w,c
  4415  001E00  B4D8               	btfsc	status,2,c
  4416  001E02  D002               	goto	l623
  4417  001E04  D7F5               	goto	l1856
  4418  001E06  D000               	goto	l623
  4419  001E08                     l623:
  4420  001E08  AE37               	btfss	___ftadd@sign,7,c
  4421  001E0A  D00C               	goto	l632
  4422  001E0C  0EFF               	movlw	255
  4423  001E0E  1A2E               	xorwf	___ftadd@f1,f,c
  4424  001E10  0EFF               	movlw	255
  4425  001E12  1A2F               	xorwf	___ftadd@f1+1,f,c
  4426  001E14  0EFF               	movlw	255
  4427  001E16  1A30               	xorwf	___ftadd@f1+2,f,c
  4428  001E18  0E01               	movlw	1
  4429  001E1A  262E               	addwf	___ftadd@f1,f,c
  4430  001E1C  0E00               	movlw	0
  4431  001E1E  222F               	addwfc	___ftadd@f1+1,f,c
  4432  001E20  0E00               	movlw	0
  4433  001E22  2230               	addwfc	___ftadd@f1+2,f,c
  4434  001E24                     l632:
  4435  001E24  AC37               	btfss	___ftadd@sign,6,c
  4436  001E26  D00D               	goto	l1864
  4437  001E28  0EFF               	movlw	255
  4438  001E2A  1A31               	xorwf	___ftadd@f2,f,c
  4439  001E2C  0EFF               	movlw	255
  4440  001E2E  1A32               	xorwf	___ftadd@f2+1,f,c
  4441  001E30  0EFF               	movlw	255
  4442  001E32  1A33               	xorwf	___ftadd@f2+2,f,c
  4443  001E34  0E01               	movlw	1
  4444  001E36  2631               	addwf	___ftadd@f2,f,c
  4445  001E38  0E00               	movlw	0
  4446  001E3A  2232               	addwfc	___ftadd@f2+1,f,c
  4447  001E3C  0E00               	movlw	0
  4448  001E3E  2233               	addwfc	___ftadd@f2+2,f,c
  4449  001E40  D000               	goto	l1864
  4450  001E42                     l1864:
  4451  001E42  0E00               	movlw	0
  4452  001E44  6E37               	movwf	___ftadd@sign,c
  4453  001E46  502E               	movf	___ftadd@f1,w,c
  4454  001E48  2631               	addwf	___ftadd@f2,f,c
  4455  001E4A  502F               	movf	___ftadd@f1+1,w,c
  4456  001E4C  2232               	addwfc	___ftadd@f2+1,f,c
  4457  001E4E  5030               	movf	___ftadd@f1+2,w,c
  4458  001E50  2233               	addwfc	___ftadd@f2+2,f,c
  4459  001E52  AE33               	btfss	___ftadd@f2+2,7,c
  4460  001E54  D00F               	goto	l1874
  4461  001E56  0EFF               	movlw	255
  4462  001E58  1A31               	xorwf	___ftadd@f2,f,c
  4463  001E5A  0EFF               	movlw	255
  4464  001E5C  1A32               	xorwf	___ftadd@f2+1,f,c
  4465  001E5E  0EFF               	movlw	255
  4466  001E60  1A33               	xorwf	___ftadd@f2+2,f,c
  4467  001E62  0E01               	movlw	1
  4468  001E64  2631               	addwf	___ftadd@f2,f,c
  4469  001E66  0E00               	movlw	0
  4470  001E68  2232               	addwfc	___ftadd@f2+1,f,c
  4471  001E6A  0E00               	movlw	0
  4472  001E6C  2233               	addwfc	___ftadd@f2+2,f,c
  4473  001E6E  0E01               	movlw	1
  4474  001E70  6E37               	movwf	___ftadd@sign,c
  4475  001E72  D000               	goto	l1874
  4476  001E74                     l1874:
  4477  001E74  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4478  001E78  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4479  001E7C  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4480  001E80  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4481  001E84  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4482  001E88  EC2E  F012         	call	___ftpack	;wreg free
  4483  001E8C  C001  F02E         	movff	?___ftpack,?___ftadd
  4484  001E90  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4485  001E94  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4486  001E98  D000               	goto	l609
  4487  001E9A                     l609:
  4488  001E9A  0012               	return		;funcret
  4489  001E9C                     __end_of___ftadd:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           postdec1	equ	0xFE5
  4500                           fsr1l	equ	0xFE1
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function ___ftneg *****************
  4508 ;; Defined at:
  4509 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  f1              3    0[COMRAM] float 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  3    0[COMRAM] float 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        3 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_printf
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text17
  4537  0029D2                     __ptext17:
  4538                           	opt stack 0
  4539  0029D2                     ___ftneg:
  4540                           	opt stack 29
  4541                           
  4542                           ;incstack = 0
  4543  0029D2  5001               	movf	___ftneg@f1,w,c
  4544  0029D4  1002               	iorwf	___ftneg@f1+1,w,c
  4545  0029D6  1003               	iorwf	___ftneg@f1+2,w,c
  4546  0029D8  B4D8               	btfsc	status,2,c
  4547  0029DA  D006               	goto	l682
  4548  0029DC  0E00               	movlw	0
  4549  0029DE  1A01               	xorwf	___ftneg@f1,f,c
  4550  0029E0  0E00               	movlw	0
  4551  0029E2  1A02               	xorwf	___ftneg@f1+1,f,c
  4552  0029E4  0E80               	movlw	128
  4553  0029E6  1A03               	xorwf	___ftneg@f1+2,f,c
  4554  0029E8                     l682:
  4555  0029E8  C001  F001         	movff	___ftneg@f1,?___ftneg
  4556  0029EC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4557  0029F0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4558  0029F4  0012               	return		;funcret
  4559  0029F6                     __end_of___ftneg:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1l	equ	0xFE1
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           fsr2h	equ	0xFDA
  4574                           fsr2l	equ	0xFD9
  4575                           status	equ	0xFD8
  4576                           
  4577 ;; *************** function ___ftge *****************
  4578 ;; Defined at:
  4579 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;  ff1             3    0[COMRAM] float 
  4582 ;;  ff2             3    3[COMRAM] float 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;		None               void
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:        9 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_printf
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text18
  4608  0025B8                     __ptext18:
  4609                           	opt stack 0
  4610  0025B8                     ___ftge:
  4611                           	opt stack 29
  4612                           
  4613                           ;incstack = 0
  4614  0025B8  AE03               	btfss	___ftge@ff1+2,7,c
  4615  0025BA  D017               	goto	l2248
  4616  0025BC  C001  F007         	movff	___ftge@ff1,??___ftge
  4617  0025C0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4618  0025C4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4619  0025C8  1E07               	comf	??___ftge,f,c
  4620  0025CA  1E08               	comf	??___ftge+1,f,c
  4621  0025CC  1E09               	comf	??___ftge+2,f,c
  4622  0025CE  2A07               	incf	??___ftge,f,c
  4623  0025D0  0E00               	movlw	0
  4624  0025D2  2208               	addwfc	??___ftge+1,f,c
  4625  0025D4  2209               	addwfc	??___ftge+2,f,c
  4626  0025D6  0E00               	movlw	0
  4627  0025D8  2407               	addwf	??___ftge,w,c
  4628  0025DA  6E01               	movwf	___ftge@ff1,c
  4629  0025DC  0E00               	movlw	0
  4630  0025DE  2008               	addwfc	??___ftge+1,w,c
  4631  0025E0  6E02               	movwf	___ftge@ff1+1,c
  4632  0025E2  0E80               	movlw	128
  4633  0025E4  2009               	addwfc	??___ftge+2,w,c
  4634  0025E6  6E03               	movwf	___ftge@ff1+2,c
  4635  0025E8  D000               	goto	l2248
  4636  0025EA                     l2248:
  4637  0025EA  AE06               	btfss	___ftge@ff2+2,7,c
  4638  0025EC  D017               	goto	l2252
  4639  0025EE  C004  F007         	movff	___ftge@ff2,??___ftge
  4640  0025F2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4641  0025F6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4642  0025FA  1E07               	comf	??___ftge,f,c
  4643  0025FC  1E08               	comf	??___ftge+1,f,c
  4644  0025FE  1E09               	comf	??___ftge+2,f,c
  4645  002600  2A07               	incf	??___ftge,f,c
  4646  002602  0E00               	movlw	0
  4647  002604  2208               	addwfc	??___ftge+1,f,c
  4648  002606  2209               	addwfc	??___ftge+2,f,c
  4649  002608  0E00               	movlw	0
  4650  00260A  2407               	addwf	??___ftge,w,c
  4651  00260C  6E04               	movwf	___ftge@ff2,c
  4652  00260E  0E00               	movlw	0
  4653  002610  2008               	addwfc	??___ftge+1,w,c
  4654  002612  6E05               	movwf	___ftge@ff2+1,c
  4655  002614  0E80               	movlw	128
  4656  002616  2009               	addwfc	??___ftge+2,w,c
  4657  002618  6E06               	movwf	___ftge@ff2+2,c
  4658  00261A  D000               	goto	l2252
  4659  00261C                     l2252:
  4660  00261C  0E00               	movlw	0
  4661  00261E  1A01               	xorwf	___ftge@ff1,f,c
  4662  002620  0E00               	movlw	0
  4663  002622  1A02               	xorwf	___ftge@ff1+1,f,c
  4664  002624  0E80               	movlw	128
  4665  002626  1A03               	xorwf	___ftge@ff1+2,f,c
  4666  002628  0E00               	movlw	0
  4667  00262A  1A04               	xorwf	___ftge@ff2,f,c
  4668  00262C  0E00               	movlw	0
  4669  00262E  1A05               	xorwf	___ftge@ff2+1,f,c
  4670  002630  0E80               	movlw	128
  4671  002632  1A06               	xorwf	___ftge@ff2+2,f,c
  4672  002634  5004               	movf	___ftge@ff2,w,c
  4673  002636  5C01               	subwf	___ftge@ff1,w,c
  4674  002638  5005               	movf	___ftge@ff2+1,w,c
  4675  00263A  5802               	subwfb	___ftge@ff1+1,w,c
  4676  00263C  5006               	movf	___ftge@ff2+2,w,c
  4677  00263E  5803               	subwfb	___ftge@ff1+2,w,c
  4678  002640  B0D8               	btfsc	status,0,c
  4679  002642  D002               	goto	l2258
  4680  002644  90D8               	bcf	status,0,c
  4681  002646  D002               	goto	l666
  4682  002648                     l2258:
  4683  002648  80D8               	bsf	status,0,c
  4684  00264A  D000               	goto	l666
  4685  00264C                     l666:
  4686  00264C  0012               	return		;funcret
  4687  00264E                     __end_of___ftge:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _init_UART *****************
  4706 ;; Defined at:
  4707 ;;		line 81 in file "Lab6pA.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;		None               void
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;Total ram usage:        0 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    1
  4728 ;; This function calls:
  4729 ;;		_OpenUSART
  4730 ;; This function is called by:
  4731 ;;		_main
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text19
  4736  002A58                     __ptext19:
  4737                           	opt stack 0
  4738  002A58                     _init_UART:
  4739                           	opt stack 29
  4740                           
  4741                           ;Lab6pA.c: 83: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  4742                           ;Lab6pA.c: 84: & 0b11111111 & 0b11111111, 25);
  4743                           
  4744                           ;incstack = 0
  4745  002A58  0E00               	movlw	0
  4746  002A5A  6E02               	movwf	OpenUSART@spbrg+1,c
  4747  002A5C  0E19               	movlw	25
  4748  002A5E  6E01               	movwf	OpenUSART@spbrg,c
  4749  002A60  0E3C               	movlw	60
  4750  002A62  ECE6  F013         	call	_OpenUSART
  4751                           
  4752                           ;Lab6pA.c: 85: OSCCON = 0x60;
  4753  002A66  0E60               	movlw	96
  4754  002A68  6ED3               	movwf	4051,c	;volatile
  4755  002A6A  0012               	return		;funcret
  4756  002A6C                     __end_of_init_UART:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1l	equ	0xFE1
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function _OpenUSART *****************
  4775 ;; Defined at:
  4776 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  config          1    wreg     unsigned char 
  4779 ;;  spbrg           2    0[COMRAM] unsigned int 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  config          1    2[COMRAM] unsigned char 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;		None               void
  4784 ;; Registers used:
  4785 ;;		wreg, status,2
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4791 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;Total ram usage:        3 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_init_UART
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text20
  4805  0027CC                     __ptext20:
  4806                           	opt stack 0
  4807  0027CC                     _OpenUSART:
  4808                           	opt stack 29
  4809                           
  4810                           ;incstack = 0
  4811                           ;OpenUSART@config stored from wreg
  4812  0027CC  6E03               	movwf	OpenUSART@config,c
  4813  0027CE  0E00               	movlw	0
  4814  0027D0  6EAC               	movwf	4012,c	;volatile
  4815  0027D2  0E00               	movlw	0
  4816  0027D4  6EAB               	movwf	4011,c	;volatile
  4817  0027D6  A003               	btfss	OpenUSART@config,0,c
  4818  0027D8  D002               	goto	l2012
  4819  0027DA  88AC               	bsf	4012,4,c	;volatile
  4820  0027DC  D000               	goto	l2012
  4821  0027DE                     l2012:
  4822  0027DE  A203               	btfss	OpenUSART@config,1,c
  4823  0027E0  D003               	goto	l2016
  4824  0027E2  8CAC               	bsf	4012,6,c	;volatile
  4825  0027E4  8CAB               	bsf	4011,6,c	;volatile
  4826  0027E6  D000               	goto	l2016
  4827  0027E8                     l2016:
  4828  0027E8  A403               	btfss	OpenUSART@config,2,c
  4829  0027EA  D002               	goto	l2020
  4830  0027EC  8EAC               	bsf	4012,7,c	;volatile
  4831  0027EE  D000               	goto	l2020
  4832  0027F0                     l2020:
  4833  0027F0  A603               	btfss	OpenUSART@config,3,c
  4834  0027F2  D002               	goto	l231
  4835  0027F4  88AB               	bsf	4011,4,c	;volatile
  4836  0027F6  D002               	goto	l2024
  4837  0027F8                     l231:
  4838  0027F8  8AAB               	bsf	4011,5,c	;volatile
  4839  0027FA  D000               	goto	l2024
  4840  0027FC                     l2024:
  4841  0027FC  B803               	btfsc	OpenUSART@config,4,c
  4842  0027FE  84AC               	bsf	4012,2,c	;volatile
  4843  002800  989E               	bcf	3998,4,c	;volatile
  4844  002802  AA03               	btfss	OpenUSART@config,5,c
  4845  002804  D002               	goto	l2032
  4846  002806  86AB               	bsf	4011,3,c	;volatile
  4847  002808  D000               	goto	l2032
  4848  00280A                     l2032:
  4849  00280A  AC03               	btfss	OpenUSART@config,6,c
  4850  00280C  D002               	goto	l235
  4851  00280E  8A9D               	bsf	3997,5,c	;volatile
  4852  002810  D001               	goto	l236
  4853  002812                     l235:
  4854  002812  9A9D               	bcf	3997,5,c	;volatile
  4855  002814                     l236:
  4856  002814  9A9E               	bcf	3998,5,c	;volatile
  4857  002816  AE03               	btfss	OpenUSART@config,7,c
  4858  002818  D002               	goto	l237
  4859  00281A  889D               	bsf	3997,4,c	;volatile
  4860  00281C  D001               	goto	l238
  4861  00281E                     l237:
  4862  00281E  989D               	bcf	3997,4,c	;volatile
  4863  002820                     l238:
  4864  002820  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4865  002824  5002               	movf	OpenUSART@spbrg+1,w,c
  4866  002826  6EB0               	movwf	4016,c	;volatile
  4867  002828  8AAC               	bsf	4012,5,c	;volatile
  4868  00282A  8EAB               	bsf	4011,7,c	;volatile
  4869  00282C  9C94               	bcf	3988,6,c	;volatile
  4870  00282E  8E94               	bsf	3988,7,c	;volatile
  4871  002830  B8AC               	btfsc	4012,4,c	;volatile
  4872  002832  BEAC               	btfsc	4012,7,c	;volatile
  4873  002834  D002               	goto	l240
  4874  002836  8C94               	bsf	3988,6,c	;volatile
  4875  002838  D000               	goto	l240
  4876  00283A                     l240:
  4877  00283A  0012               	return		;funcret
  4878  00283C                     __end_of_OpenUSART:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           postinc0	equ	0xFEE
  4887                           wreg	equ	0xFE8
  4888                           postdec1	equ	0xFE5
  4889                           fsr1l	equ	0xFE1
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           fsr2h	equ	0xFDA
  4893                           fsr2l	equ	0xFD9
  4894                           status	equ	0xFD8
  4895                           
  4896 ;; *************** function _get_full_ADC *****************
  4897 ;; Defined at:
  4898 ;;		line 99 in file "Lab6pA.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  result          2    4[COMRAM] int 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  2    0[COMRAM] unsigned int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:        6 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text21
  4926  0029AC                     __ptext21:
  4927                           	opt stack 0
  4928  0029AC                     _get_full_ADC:
  4929                           	opt stack 30
  4930                           
  4931                           ;Lab6pA.c: 101: int result;
  4932                           ;Lab6pA.c: 102: ADCON0bits.GO=1;
  4933                           
  4934                           ;incstack = 0
  4935  0029AC  82C2               	bsf	4034,1,c	;volatile
  4936                           
  4937                           ;Lab6pA.c: 103: while(ADCON0bits.DONE==1);
  4938  0029AE  D000               	goto	l101
  4939  0029B0                     l101:
  4940  0029B0  B2C2               	btfsc	4034,1,c	;volatile
  4941  0029B2  D7FE               	goto	l101
  4942                           
  4943                           ;Lab6pA.c: 104: result = (ADRESH * 0x100) + ADRESL;
  4944  0029B4  50C4               	movf	4036,w,c	;volatile
  4945  0029B6  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  4946  0029B8  6A03               	clrf	??_get_full_ADC& (0+255),c
  4947  0029BA  50C3               	movf	4035,w,c	;volatile
  4948  0029BC  2403               	addwf	??_get_full_ADC,w,c
  4949  0029BE  6E05               	movwf	get_full_ADC@result,c
  4950  0029C0  0E00               	movlw	0
  4951  0029C2  2004               	addwfc	??_get_full_ADC+1,w,c
  4952  0029C4  6E06               	movwf	get_full_ADC@result+1,c
  4953                           
  4954                           ;Lab6pA.c: 106: return result;
  4955  0029C6  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  4956  0029CA  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4957  0029CE  D000               	goto	l104
  4958  0029D0                     l104:
  4959  0029D0  0012               	return		;funcret
  4960  0029D2                     __end_of_get_full_ADC:
  4961                           	opt stack 0
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           postdec1	equ	0xFE5
  4971                           fsr1l	equ	0xFE1
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function ___ftdiv *****************
  4979 ;; Defined at:
  4980 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  f1              3   12[COMRAM] float 
  4983 ;;  f2              3   15[COMRAM] float 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  f3              3   22[COMRAM] float 
  4986 ;;  sign            1   26[COMRAM] unsigned char 
  4987 ;;  exp             1   25[COMRAM] unsigned char 
  4988 ;;  cntr            1   21[COMRAM] unsigned char 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  3   12[COMRAM] float 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;Total ram usage:       15 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    1
  5005 ;; This function calls:
  5006 ;;		___ftpack
  5007 ;; This function is called by:
  5008 ;;		_main
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text22
  5013  00237A                     __ptext22:
  5014                           	opt stack 0
  5015  00237A                     ___ftdiv:
  5016                           	opt stack 29
  5017                           
  5018                           ;incstack = 0
  5019  00237A  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5020  00237E  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5021  002380  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5022  002382  340E               	rlcf	___ftdiv@f1+1,w,c
  5023  002384  3613               	rlcf	??___ftdiv& (0+255),f,c
  5024  002386  E301               	bnc	u2651
  5025  002388  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5026  00238A                     u2651:
  5027  00238A  5013               	movf	??___ftdiv,w,c
  5028  00238C  6E1A               	movwf	___ftdiv@exp,c
  5029  00238E  501A               	movf	___ftdiv@exp,w,c
  5030  002390  A4D8               	btfss	status,2,c
  5031  002392  D002               	goto	l2530
  5032  002394  D00E               	goto	l2532
  5033  002396  D061               	goto	l640
  5034  002398                     l2530:
  5035  002398  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5036  00239C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5037  00239E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5038  0023A0  3411               	rlcf	___ftdiv@f2+1,w,c
  5039  0023A2  3613               	rlcf	??___ftdiv& (0+255),f,c
  5040  0023A4  E301               	bnc	u2671
  5041  0023A6  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5042  0023A8                     u2671:
  5043  0023A8  5013               	movf	??___ftdiv,w,c
  5044  0023AA  6E1B               	movwf	___ftdiv@sign,c
  5045  0023AC  501B               	movf	___ftdiv@sign,w,c
  5046  0023AE  A4D8               	btfss	status,2,c
  5047  0023B0  D007               	goto	l2536
  5048  0023B2                     l2532:
  5049  0023B2  0E00               	movlw	0
  5050  0023B4  6E0D               	movwf	?___ftdiv,c
  5051  0023B6  0E00               	movlw	0
  5052  0023B8  6E0E               	movwf	?___ftdiv+1,c
  5053  0023BA  0E00               	movlw	0
  5054  0023BC  6E0F               	movwf	?___ftdiv+2,c
  5055  0023BE  D04D               	goto	l640
  5056  0023C0                     l2536:
  5057  0023C0  0E00               	movlw	0
  5058  0023C2  6E17               	movwf	___ftdiv@f3,c
  5059  0023C4  0E00               	movlw	0
  5060  0023C6  6E18               	movwf	___ftdiv@f3+1,c
  5061  0023C8  0E00               	movlw	0
  5062  0023CA  6E19               	movwf	___ftdiv@f3+2,c
  5063  0023CC  501B               	movf	___ftdiv@sign,w,c
  5064  0023CE  0F89               	addlw	137
  5065  0023D0  5E1A               	subwf	___ftdiv@exp,f,c
  5066  0023D2  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5067  0023D6  5012               	movf	___ftdiv@f2+2,w,c
  5068  0023D8  1A1B               	xorwf	___ftdiv@sign,f,c
  5069  0023DA  0E80               	movlw	128
  5070  0023DC  161B               	andwf	___ftdiv@sign,f,c
  5071  0023DE  8E0E               	bsf	___ftdiv@f1+1,7,c
  5072  0023E0  0EFF               	movlw	255
  5073  0023E2  160D               	andwf	___ftdiv@f1,f,c
  5074  0023E4  0EFF               	movlw	255
  5075  0023E6  160E               	andwf	___ftdiv@f1+1,f,c
  5076  0023E8  0E00               	movlw	0
  5077  0023EA  160F               	andwf	___ftdiv@f1+2,f,c
  5078  0023EC  8E11               	bsf	___ftdiv@f2+1,7,c
  5079  0023EE  0EFF               	movlw	255
  5080  0023F0  1610               	andwf	___ftdiv@f2,f,c
  5081  0023F2  0EFF               	movlw	255
  5082  0023F4  1611               	andwf	___ftdiv@f2+1,f,c
  5083  0023F6  0E00               	movlw	0
  5084  0023F8  1612               	andwf	___ftdiv@f2+2,f,c
  5085  0023FA  0E18               	movlw	24
  5086  0023FC  6E16               	movwf	___ftdiv@cntr,c
  5087  0023FE  D000               	goto	l2556
  5088  002400                     l2556:
  5089  002400  90D8               	bcf	status,0,c
  5090  002402  3617               	rlcf	___ftdiv@f3,f,c
  5091  002404  3618               	rlcf	___ftdiv@f3+1,f,c
  5092  002406  3619               	rlcf	___ftdiv@f3+2,f,c
  5093  002408  5010               	movf	___ftdiv@f2,w,c
  5094  00240A  5C0D               	subwf	___ftdiv@f1,w,c
  5095  00240C  5011               	movf	___ftdiv@f2+1,w,c
  5096  00240E  580E               	subwfb	___ftdiv@f1+1,w,c
  5097  002410  5012               	movf	___ftdiv@f2+2,w,c
  5098  002412  580F               	subwfb	___ftdiv@f1+2,w,c
  5099  002414  A0D8               	btfss	status,0,c
  5100  002416  D007               	goto	l643
  5101  002418  5010               	movf	___ftdiv@f2,w,c
  5102  00241A  5E0D               	subwf	___ftdiv@f1,f,c
  5103  00241C  5011               	movf	___ftdiv@f2+1,w,c
  5104  00241E  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5105  002420  5012               	movf	___ftdiv@f2+2,w,c
  5106  002422  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5107  002424  8017               	bsf	___ftdiv@f3,0,c
  5108  002426                     l643:
  5109  002426  90D8               	bcf	status,0,c
  5110  002428  360D               	rlcf	___ftdiv@f1,f,c
  5111  00242A  360E               	rlcf	___ftdiv@f1+1,f,c
  5112  00242C  360F               	rlcf	___ftdiv@f1+2,f,c
  5113  00242E  2E16               	decfsz	___ftdiv@cntr,f,c
  5114  002430  D7E7               	goto	l2556
  5115  002432  D000               	goto	l2566
  5116  002434                     l2566:
  5117  002434  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5118  002438  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5119  00243C  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5120  002440  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5121  002444  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5122  002448  EC2E  F012         	call	___ftpack	;wreg free
  5123  00244C  C001  F00D         	movff	?___ftpack,?___ftdiv
  5124  002450  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5125  002454  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5126  002458  D000               	goto	l640
  5127  00245A                     l640:
  5128  00245A  0012               	return		;funcret
  5129  00245C                     __end_of___ftdiv:
  5130                           	opt stack 0
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           postdec1	equ	0xFE5
  5140                           fsr1l	equ	0xFE1
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function ___awtoft *****************
  5148 ;; Defined at:
  5149 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  c               2    8[COMRAM] int 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  sign            1   11[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  3    8[COMRAM] float 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5163 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;Total ram usage:        4 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    1
  5170 ;; This function calls:
  5171 ;;		___ftpack
  5172 ;; This function is called by:
  5173 ;;		_main
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text23
  5178  00291E                     __ptext23:
  5179                           	opt stack 0
  5180  00291E                     ___awtoft:
  5181                           	opt stack 29
  5182                           
  5183                           ;incstack = 0
  5184  00291E  0E00               	movlw	0
  5185  002920  6E0C               	movwf	___awtoft@sign,c
  5186  002922  AE0A               	btfss	___awtoft@c+1,7,c
  5187  002924  D007               	goto	l2578
  5188  002926  6C09               	negf	___awtoft@c,c
  5189  002928  1E0A               	comf	___awtoft@c+1,f,c
  5190  00292A  B0D8               	btfsc	status,0,c
  5191  00292C  2A0A               	incf	___awtoft@c+1,f,c
  5192  00292E  0E01               	movlw	1
  5193  002930  6E0C               	movwf	___awtoft@sign,c
  5194  002932  D000               	goto	l2578
  5195  002934                     l2578:
  5196  002934  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5197  002938  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5198  00293C  6A03               	clrf	___ftpack@arg+2,c
  5199  00293E  0E8E               	movlw	142
  5200  002940  6E04               	movwf	___ftpack@exp,c
  5201  002942  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5202  002946  EC2E  F012         	call	___ftpack	;wreg free
  5203  00294A  C001  F009         	movff	?___ftpack,?___awtoft
  5204  00294E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5205  002952  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5206  002956  D000               	goto	l461
  5207  002958                     l461:
  5208  002958  0012               	return		;funcret
  5209  00295A                     __end_of___awtoft:
  5210                           	opt stack 0
  5211                           tblptru	equ	0xFF8
  5212                           tblptrh	equ	0xFF7
  5213                           tblptrl	equ	0xFF6
  5214                           tablat	equ	0xFF5
  5215                           prodh	equ	0xFF4
  5216                           prodl	equ	0xFF3
  5217                           postinc0	equ	0xFEE
  5218                           wreg	equ	0xFE8
  5219                           postdec1	equ	0xFE5
  5220                           fsr1l	equ	0xFE1
  5221                           postinc2	equ	0xFDE
  5222                           postdec2	equ	0xFDD
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function ___ftpack *****************
  5228 ;; Defined at:
  5229 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  arg             3    0[COMRAM] unsigned um
  5232 ;;  exp             1    3[COMRAM] unsigned char 
  5233 ;;  sign            1    4[COMRAM] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  3    0[COMRAM] float 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5245 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;Total ram usage:        8 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		___awtoft
  5255 ;;		___ftadd
  5256 ;;		___ftdiv
  5257 ;;		___ftmul
  5258 ;;		___lltoft
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text24
  5263  00245C                     __ptext24:
  5264                           	opt stack 0
  5265  00245C                     ___ftpack:
  5266                           	opt stack 27
  5267                           
  5268                           ;incstack = 0
  5269  00245C  5004               	movf	___ftpack@exp,w,c
  5270  00245E  B4D8               	btfsc	status,2,c
  5271  002460  D005               	goto	l1770
  5272  002462  5001               	movf	___ftpack@arg,w,c
  5273  002464  1002               	iorwf	___ftpack@arg+1,w,c
  5274  002466  1003               	iorwf	___ftpack@arg+2,w,c
  5275  002468  A4D8               	btfss	status,2,c
  5276  00246A  D00E               	goto	l1776
  5277  00246C                     l1770:
  5278  00246C  0E00               	movlw	0
  5279  00246E  6E01               	movwf	?___ftpack,c
  5280  002470  0E00               	movlw	0
  5281  002472  6E02               	movwf	?___ftpack+1,c
  5282  002474  0E00               	movlw	0
  5283  002476  6E03               	movwf	?___ftpack+2,c
  5284  002478  D053               	goto	l568
  5285  00247A  D006               	goto	l1776
  5286  00247C                     l1774:
  5287  00247C  2A04               	incf	___ftpack@exp,f,c
  5288  00247E  90D8               	bcf	status,0,c
  5289  002480  3203               	rrcf	___ftpack@arg+2,f,c
  5290  002482  3202               	rrcf	___ftpack@arg+1,f,c
  5291  002484  3201               	rrcf	___ftpack@arg,f,c
  5292  002486  D000               	goto	l1776
  5293  002488                     l1776:
  5294  002488  0E00               	movlw	0
  5295  00248A  1401               	andwf	___ftpack@arg,w,c
  5296  00248C  6E06               	movwf	??___ftpack& (0+255),c
  5297  00248E  0E00               	movlw	0
  5298  002490  1402               	andwf	___ftpack@arg+1,w,c
  5299  002492  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5300  002494  0EFE               	movlw	254
  5301  002496  1403               	andwf	___ftpack@arg+2,w,c
  5302  002498  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5303  00249A  5006               	movf	??___ftpack,w,c
  5304  00249C  1007               	iorwf	??___ftpack+1,w,c
  5305  00249E  1008               	iorwf	??___ftpack+2,w,c
  5306  0024A0  B4D8               	btfsc	status,2,c
  5307  0024A2  D00E               	goto	l1782
  5308  0024A4  D7EB               	goto	l1774
  5309  0024A6  D00C               	goto	l1782
  5310  0024A8                     l1778:
  5311  0024A8  2A04               	incf	___ftpack@exp,f,c
  5312  0024AA  0E01               	movlw	1
  5313  0024AC  2601               	addwf	___ftpack@arg,f,c
  5314  0024AE  0E00               	movlw	0
  5315  0024B0  2202               	addwfc	___ftpack@arg+1,f,c
  5316  0024B2  0E00               	movlw	0
  5317  0024B4  2203               	addwfc	___ftpack@arg+2,f,c
  5318  0024B6  90D8               	bcf	status,0,c
  5319  0024B8  3203               	rrcf	___ftpack@arg+2,f,c
  5320  0024BA  3202               	rrcf	___ftpack@arg+1,f,c
  5321  0024BC  3201               	rrcf	___ftpack@arg,f,c
  5322  0024BE  D000               	goto	l1782
  5323  0024C0                     l1782:
  5324  0024C0  0E00               	movlw	0
  5325  0024C2  1401               	andwf	___ftpack@arg,w,c
  5326  0024C4  6E06               	movwf	??___ftpack& (0+255),c
  5327  0024C6  0E00               	movlw	0
  5328  0024C8  1402               	andwf	___ftpack@arg+1,w,c
  5329  0024CA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5330  0024CC  0EFF               	movlw	255
  5331  0024CE  1403               	andwf	___ftpack@arg+2,w,c
  5332  0024D0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5333  0024D2  5006               	movf	??___ftpack,w,c
  5334  0024D4  1007               	iorwf	??___ftpack+1,w,c
  5335  0024D6  1008               	iorwf	??___ftpack+2,w,c
  5336  0024D8  B4D8               	btfsc	status,2,c
  5337  0024DA  D008               	goto	l1786
  5338  0024DC  D7E5               	goto	l1778
  5339  0024DE  D006               	goto	l1786
  5340  0024E0                     l1784:
  5341  0024E0  0604               	decf	___ftpack@exp,f,c
  5342  0024E2  90D8               	bcf	status,0,c
  5343  0024E4  3601               	rlcf	___ftpack@arg,f,c
  5344  0024E6  3602               	rlcf	___ftpack@arg+1,f,c
  5345  0024E8  3603               	rlcf	___ftpack@arg+2,f,c
  5346  0024EA  D000               	goto	l1786
  5347  0024EC                     l1786:
  5348  0024EC  BE02               	btfsc	___ftpack@arg+1,7,c
  5349  0024EE  D004               	goto	l579
  5350  0024F0  0E02               	movlw	2
  5351  0024F2  6004               	cpfslt	___ftpack@exp,c
  5352  0024F4  D7F5               	goto	l1784
  5353  0024F6  D000               	goto	l579
  5354  0024F8                     l579:
  5355  0024F8  B004               	btfsc	___ftpack@exp,0,c
  5356  0024FA  D002               	goto	l1792
  5357  0024FC  9E02               	bcf	___ftpack@arg+1,7,c
  5358  0024FE  D000               	goto	l1792
  5359  002500                     l1792:
  5360  002500  90D8               	bcf	status,0,c
  5361  002502  3204               	rrcf	___ftpack@exp,f,c
  5362  002504  5004               	movf	___ftpack@exp,w,c
  5363  002506  1203               	iorwf	___ftpack@arg+2,f,c
  5364  002508  5005               	movf	___ftpack@sign,w,c
  5365  00250A  B4D8               	btfsc	status,2,c
  5366  00250C  D002               	goto	l1798
  5367  00250E  8E03               	bsf	___ftpack@arg+2,7,c
  5368  002510  D000               	goto	l1798
  5369  002512                     l1798:
  5370  002512  C001  F001         	movff	___ftpack@arg,?___ftpack
  5371  002516  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5372  00251A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5373  00251E  D000               	goto	l568
  5374  002520                     l568:
  5375  002520  0012               	return		;funcret
  5376  002522                     __end_of___ftpack:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           postinc0	equ	0xFEE
  5385                           wreg	equ	0xFE8
  5386                           postdec1	equ	0xFE5
  5387                           fsr1l	equ	0xFE1
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _WAIT_1_SEC *****************
  5395 ;; Defined at:
  5396 ;;		line 109 in file "Lab6pA.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    1
  5417 ;; This function calls:
  5418 ;;		_WAIT_HALF_SEC
  5419 ;; This function is called by:
  5420 ;;		_main
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text25
  5425  002A9E                     __ptext25:
  5426                           	opt stack 0
  5427  002A9E                     _WAIT_1_SEC:
  5428                           	opt stack 29
  5429                           
  5430                           ;Lab6pA.c: 111: WAIT_HALF_SEC();
  5431                           
  5432                           ;incstack = 0
  5433  002A9E  ECFB  F014         	call	_WAIT_HALF_SEC	;wreg free
  5434                           
  5435                           ;Lab6pA.c: 112: WAIT_HALF_SEC();
  5436  002AA2  ECFB  F014         	call	_WAIT_HALF_SEC	;wreg free
  5437  002AA6  0012               	return		;funcret
  5438  002AA8                     __end_of_WAIT_1_SEC:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           postdec1	equ	0xFE5
  5449                           fsr1l	equ	0xFE1
  5450                           postinc2	equ	0xFDE
  5451                           postdec2	equ	0xFDD
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _WAIT_HALF_SEC *****************
  5457 ;; Defined at:
  5458 ;;		line 115 in file "Lab6pA.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;		None
  5463 ;; Return value:  Size  Location     Type
  5464 ;;		None               void
  5465 ;; Registers used:
  5466 ;;		wreg, status,2
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;Total ram usage:        0 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_WAIT_1_SEC
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text26
  5486  0029F6                     __ptext26:
  5487                           	opt stack 0
  5488  0029F6                     _WAIT_HALF_SEC:
  5489                           	opt stack 29
  5490                           
  5491                           ;Lab6pA.c: 117: T0CON = 0x02;
  5492                           
  5493                           ;incstack = 0
  5494  0029F6  0E02               	movlw	2
  5495  0029F8  6ED5               	movwf	4053,c	;volatile
  5496                           
  5497                           ;Lab6pA.c: 118: TMR0L = 0xDB;
  5498  0029FA  0EDB               	movlw	219
  5499  0029FC  6ED6               	movwf	4054,c	;volatile
  5500                           
  5501                           ;Lab6pA.c: 119: TMR0H = 0xB;
  5502  0029FE  0E0B               	movlw	11
  5503  002A00  6ED7               	movwf	4055,c	;volatile
  5504                           
  5505                           ;Lab6pA.c: 120: INTCONbits.TMR0IF = 0;
  5506  002A02  94F2               	bcf	intcon,2,c	;volatile
  5507                           
  5508                           ;Lab6pA.c: 121: T0CONbits.TMR0ON = 1;
  5509  002A04  8ED5               	bsf	4053,7,c	;volatile
  5510                           
  5511                           ;Lab6pA.c: 122: while (INTCONbits.TMR0IF == 0);
  5512  002A06  D000               	goto	l110
  5513  002A08                     l110:
  5514  002A08  A4F2               	btfss	intcon,2,c	;volatile
  5515  002A0A  D7FE               	goto	l110
  5516                           
  5517                           ;Lab6pA.c: 123: T0CONbits.TMR0ON = 0;
  5518  002A0C  9ED5               	bcf	4053,7,c	;volatile
  5519  002A0E  0012               	return		;funcret
  5520  002A10                     __end_of_WAIT_HALF_SEC:
  5521                           	opt stack 0
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           prodh	equ	0xFF4
  5527                           prodl	equ	0xFF3
  5528                           intcon	equ	0xFF2
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _Select_ADC_Channel *****************
  5540 ;; Defined at:
  5541 ;;		line 94 in file "Lab6pA.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  channel         1    wreg     unsigned char 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  channel         1    0[COMRAM] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;		None               void
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, prodl, prodh
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        1 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text27
  5569  002A88                     __ptext27:
  5570                           	opt stack 0
  5571  002A88                     _Select_ADC_Channel:
  5572                           	opt stack 30
  5573                           
  5574                           ;incstack = 0
  5575                           ;Select_ADC_Channel@channel stored from wreg
  5576  002A88  6E01               	movwf	Select_ADC_Channel@channel,c
  5577                           
  5578                           ;Lab6pA.c: 96: ADCON0 = channel * 4 + 1;
  5579  002A8A  5001               	movf	Select_ADC_Channel@channel,w,c
  5580  002A8C  0D04               	mullw	4
  5581  002A8E  28F3               	incf	prodl,w,c
  5582  002A90  6EC2               	movwf	4034,c	;volatile
  5583  002A92  0012               	return		;funcret
  5584  002A94                     __end_of_Select_ADC_Channel:
  5585                           	opt stack 0
  5586                           tblptru	equ	0xFF8
  5587                           tblptrh	equ	0xFF7
  5588                           tblptrl	equ	0xFF6
  5589                           tablat	equ	0xFF5
  5590                           prodh	equ	0xFF4
  5591                           prodl	equ	0xFF3
  5592                           intcon	equ	0xFF2
  5593                           postinc0	equ	0xFEE
  5594                           wreg	equ	0xFE8
  5595                           postdec1	equ	0xFE5
  5596                           fsr1l	equ	0xFE1
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function _Init_TRIS *****************
  5604 ;; Defined at:
  5605 ;;		line 72 in file "Lab6pA.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;		None
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;		None
  5610 ;; Return value:  Size  Location     Type
  5611 ;;		None               void
  5612 ;; Registers used:
  5613 ;;		wreg, status,2
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;Total ram usage:        0 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_main
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text28
  5633  002A42                     __ptext28:
  5634                           	opt stack 0
  5635  002A42                     _Init_TRIS:
  5636                           	opt stack 30
  5637                           
  5638                           ;Lab6pA.c: 74: TRISA = 0x0F;
  5639                           
  5640                           ;incstack = 0
  5641  002A42  0E0F               	movlw	15
  5642  002A44  6E92               	movwf	3986,c	;volatile
  5643                           
  5644                           ;Lab6pA.c: 75: TRISB = 0x00;
  5645  002A46  0E00               	movlw	0
  5646  002A48  6E93               	movwf	3987,c	;volatile
  5647                           
  5648                           ;Lab6pA.c: 76: TRISC = 0x00;
  5649  002A4A  0E00               	movlw	0
  5650  002A4C  6E94               	movwf	3988,c	;volatile
  5651                           
  5652                           ;Lab6pA.c: 77: TRISD = 0x00;
  5653  002A4E  0E00               	movlw	0
  5654  002A50  6E95               	movwf	3989,c	;volatile
  5655                           
  5656                           ;Lab6pA.c: 78: TRISE = 0x00;
  5657  002A52  0E00               	movlw	0
  5658  002A54  6E96               	movwf	3990,c	;volatile
  5659  002A56  0012               	return		;funcret
  5660  002A58                     __end_of_Init_TRIS:
  5661                           	opt stack 0
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           postinc0	equ	0xFEE
  5670                           wreg	equ	0xFE8
  5671                           postdec1	equ	0xFE5
  5672                           fsr1l	equ	0xFE1
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _Init_ADC *****************
  5680 ;; Defined at:
  5681 ;;		line 65 in file "Lab6pA.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, status,2
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:        0 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text29
  5709  002A7A                     __ptext29:
  5710                           	opt stack 0
  5711  002A7A                     _Init_ADC:
  5712                           	opt stack 30
  5713                           
  5714                           ;Lab6pA.c: 67: ADCON0 = 0b00000001;
  5715                           
  5716                           ;incstack = 0
  5717  002A7A  0E01               	movlw	1
  5718  002A7C  6EC2               	movwf	4034,c	;volatile
  5719                           
  5720                           ;Lab6pA.c: 68: ADCON1 = 0b00011011;
  5721  002A7E  0E1B               	movlw	27
  5722  002A80  6EC1               	movwf	4033,c	;volatile
  5723                           
  5724                           ;Lab6pA.c: 69: ADCON2 = 0b11001001;
  5725  002A82  0EC9               	movlw	201
  5726  002A84  6EC0               	movwf	4032,c	;volatile
  5727  002A86  0012               	return		;funcret
  5728  002A88                     __end_of_Init_ADC:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           fsr1l	equ	0xFE1
  5741                           postinc2	equ	0xFDE
  5742                           postdec2	equ	0xFDD
  5743                           fsr2h	equ	0xFDA
  5744                           fsr2l	equ	0xFD9
  5745                           status	equ	0xFD8
  5746                           
  5747 ;; *************** function _BCD_Upper_Digit *****************
  5748 ;; Defined at:
  5749 ;;		line 126 in file "Lab6pA.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  digit           1    wreg     unsigned char 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  digit           1    1[COMRAM] unsigned char 
  5754 ;;  Port_E          1    0[COMRAM] unsigned char 
  5755 ;; Return value:  Size  Location     Type
  5756 ;;		None               void
  5757 ;; Registers used:
  5758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;Total ram usage:        2 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; This function calls:
  5771 ;;		Nothing
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           	psect	text30
  5778  0028E0                     __ptext30:
  5779                           	opt stack 0
  5780  0028E0                     _BCD_Upper_Digit:
  5781                           	opt stack 30
  5782                           
  5783                           ;incstack = 0
  5784                           ;BCD_Upper_Digit@digit stored from wreg
  5785  0028E0  6E02               	movwf	BCD_Upper_Digit@digit,c
  5786                           
  5787                           ;Lab6pA.c: 128: PORTC = array[digit];
  5788  0028E2  5002               	movf	BCD_Upper_Digit@digit,w,c
  5789  0028E4  0D01               	mullw	1
  5790  0028E6  0E68               	movlw	low _array
  5791  0028E8  24F3               	addwf	prodl,w,c
  5792  0028EA  6ED9               	movwf	fsr2l,c
  5793  0028EC  0E00               	movlw	high _array
  5794  0028EE  20F4               	addwfc	prodh,w,c
  5795  0028F0  6EDA               	movwf	fsr2h,c
  5796  0028F2  50DF               	movf	indf2,w,c
  5797  0028F4  6E82               	movwf	3970,c	;volatile
  5798                           
  5799                           ;Lab6pA.c: 129: char Port_E = array[digit] & 0x40;
  5800  0028F6  5002               	movf	BCD_Upper_Digit@digit,w,c
  5801  0028F8  0D01               	mullw	1
  5802  0028FA  0E68               	movlw	low _array
  5803  0028FC  24F3               	addwf	prodl,w,c
  5804  0028FE  6ED9               	movwf	fsr2l,c
  5805  002900  0E00               	movlw	high _array
  5806  002902  20F4               	addwfc	prodh,w,c
  5807  002904  6EDA               	movwf	fsr2h,c
  5808  002906  50DF               	movf	indf2,w,c
  5809  002908  0B40               	andlw	64
  5810  00290A  6E01               	movwf	BCD_Upper_Digit@Port_E,c
  5811                           
  5812                           ;Lab6pA.c: 130: if (Port_E == 0) PORTE = 0x00;
  5813  00290C  5001               	movf	BCD_Upper_Digit@Port_E,w,c
  5814  00290E  A4D8               	btfss	status,2,c
  5815  002910  D002               	goto	l1664
  5816  002912  0E00               	movlw	0
  5817  002914  D001               	goto	L8
  5818  002916                     l1664:
  5819                           
  5820                           ;Lab6pA.c: 131: else PORTE = 0x01;
  5821  002916  0E01               	movlw	1
  5822  002918                     L8:
  5823  002918  6E84               	movwf	3972,c	;volatile
  5824  00291A  D000               	goto	l118
  5825  00291C                     l118:
  5826  00291C  0012               	return		;funcret
  5827  00291E                     __end_of_BCD_Upper_Digit:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1l	equ	0xFE1
  5840                           indf2	equ	0xFDF
  5841                           postinc2	equ	0xFDE
  5842                           postdec2	equ	0xFDD
  5843                           fsr2h	equ	0xFDA
  5844                           fsr2l	equ	0xFD9
  5845                           status	equ	0xFD8
  5846                           
  5847 ;; *************** function _BCD_Lower_Digit *****************
  5848 ;; Defined at:
  5849 ;;		line 134 in file "Lab6pA.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  digit           1    wreg     unsigned char 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  digit           1    0[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;		None               void
  5856 ;; Registers used:
  5857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;Total ram usage:        1 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_main
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text31
  5877  002A10                     __ptext31:
  5878                           	opt stack 0
  5879  002A10                     _BCD_Lower_Digit:
  5880                           	opt stack 30
  5881                           
  5882                           ;incstack = 0
  5883                           ;BCD_Lower_Digit@digit stored from wreg
  5884  002A10  6E01               	movwf	BCD_Lower_Digit@digit,c
  5885                           
  5886                           ;Lab6pA.c: 136: PORTD = array[digit];
  5887  002A12  5001               	movf	BCD_Lower_Digit@digit,w,c
  5888  002A14  0D01               	mullw	1
  5889  002A16  0E68               	movlw	low _array
  5890  002A18  24F3               	addwf	prodl,w,c
  5891  002A1A  6ED9               	movwf	fsr2l,c
  5892  002A1C  0E00               	movlw	high _array
  5893  002A1E  20F4               	addwfc	prodh,w,c
  5894  002A20  6EDA               	movwf	fsr2h,c
  5895  002A22  50DF               	movf	indf2,w,c
  5896  002A24  6E83               	movwf	3971,c	;volatile
  5897                           
  5898                           ;Lab6pA.c: 137: PORTDbits.RD7 = 1;
  5899  002A26  8E83               	bsf	3971,7,c	;volatile
  5900  002A28  0012               	return		;funcret
  5901  002A2A                     __end_of_BCD_Lower_Digit:
  5902                           	opt stack 0
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodh	equ	0xFF4
  5908                           prodl	equ	0xFF3
  5909                           intcon	equ	0xFF2
  5910                           postinc0	equ	0xFEE
  5911                           wreg	equ	0xFE8
  5912                           postdec1	equ	0xFE5
  5913                           fsr1l	equ	0xFE1
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           fsr2h	equ	0xFDA
  5918                           fsr2l	equ	0xFD9
  5919                           status	equ	0xFD8
  5920                           
  5921 ;; *************** function _BCD_DP *****************
  5922 ;; Defined at:
  5923 ;;		line 140 in file "Lab6pA.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  dp              1    wreg     unsigned char 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  dp              1    1[COMRAM] unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;		None               void
  5930 ;; Registers used:
  5931 ;;		wreg, status,2, status,0
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;Total ram usage:        2 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text32
  5951  002A2A                     __ptext32:
  5952                           	opt stack 0
  5953  002A2A                     _BCD_DP:
  5954                           	opt stack 30
  5955                           
  5956                           ;incstack = 0
  5957                           ;BCD_DP@dp stored from wreg
  5958  002A2A  6E02               	movwf	BCD_DP@dp,c
  5959                           
  5960                           ;Lab6pA.c: 142: PORTDbits.RD7 = ~dp;
  5961  002A2C  5002               	movf	BCD_DP@dp,w,c
  5962  002A2E  0AFF               	xorlw	255
  5963  002A30  6E01               	movwf	??_BCD_DP& (0+255),c
  5964  002A32  3201               	rrcf	??_BCD_DP,f,c
  5965  002A34  3201               	rrcf	??_BCD_DP,f,c
  5966  002A36  5083               	movf	3971,w,c	;volatile
  5967  002A38  1801               	xorwf	??_BCD_DP,w,c
  5968  002A3A  0B7F               	andlw	-129
  5969  002A3C  1801               	xorwf	??_BCD_DP,w,c
  5970  002A3E  6E83               	movwf	3971,c	;volatile
  5971  002A40  0012               	return		;funcret
  5972  002A42                     __end_of_BCD_DP:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009                           	psect	rparam
  6010  0000                     tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           postinc0	equ	0xFEE
  6018                           wreg	equ	0xFE8
  6019                           postdec1	equ	0xFE5
  6020                           fsr1l	equ	0xFE1
  6021                           indf2	equ	0xFDF
  6022                           postinc2	equ	0xFDE
  6023                           postdec2	equ	0xFDD
  6024                           fsr2h	equ	0xFDA
  6025                           fsr2l	equ	0xFD9
  6026                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    118
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    103     113
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awmod
    ___ftmul->___wmul
    ___awmod->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   51495
                                             97 COMRAM     6     6      0
                             _BCD_DP
                    _BCD_Lower_Digit
                    _BCD_Upper_Digit
                           _Init_ADC
                          _Init_TRIS
                 _Select_ADC_Channel
                         _WAIT_1_SEC
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                       _get_full_ADC
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   42713
                                             63 COMRAM    34    29      5
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10437
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10239
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2207
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4329
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1836
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2619
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WAIT_1_SEC                                           0     0      0       0
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BCD_Upper_Digit                                      2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _BCD_Lower_Digit                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _BCD_DP                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BCD_DP
   _BCD_Lower_Digit
   _BCD_Upper_Digit
   _Init_ADC
   _Init_TRIS
   _Select_ADC_Channel
   _WAIT_1_SEC
     _WAIT_HALF_SEC
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
                 ___awdiv (ARG)
           ___wmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     _putch (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     67      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71      34        0.0%
DATA                 0      0      71       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 18 16:16:39 2022

                         l92 2A70                 ___awdiv@sign 0006          ___wmul@multiplicand 0011  
               ___ftadd@exp1 0039                 ___ftadd@exp2 0038                 ___ftadd@sign 0037  
                        l101 29B0                          l110 2A08                          l104 29D0  
                        l118 291C                          l231 27F8                          l151 1A92  
                        l207 16B2                          l240 283A                          l144 1CD6  
                        l235 2812                          l243 29AA                          l236 2814  
                        l237 281E                          l238 2820                          l612 1D46  
                        l436 25B6                          l196 150E                          l461 2958  
                        l623 1E08                          l527 20B4                          l640 245A  
                        l632 1E24                          l608 1D1C                          l536 20A4  
                        l609 1E9A                          l449 275A                          l650 1F12  
                        l643 2426                          l651 1F3A                          l732 26C8  
                        l742 27BA                          l568 2520                          l648 1FAA  
                        l672 21AC                          l657 1F9A                          l666 264C  
                        l682 29E8                          l762 289A                          l579 24F8  
                        l693 2378                          l689 28DE                 ___awmod@sign 000E  
                        prod 000FF3                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               ___ftdiv@cntr 0016                 ___ftdiv@sign 001B                 __CFG_WDT$OFF 000000  
                       l2002 2750                         l2020 27F0                         l2012 27DE  
                       l2110 19BC                         l2102 1898                         l2032 280A  
                       l2024 27FC                         l2016 27E8                         l2210 2042  
                       l2202 2010                         l2300 2336                         l2132 1ED8  
                       l2116 1A6E                         l2302 2344                         l2222 2066  
                       l2214 2052                         l2126 1EBA                         l2070 1BD2  
                       l2240 28B4                         l2304 234E                         l2320 267E  
                       l2232 2090                         l2400 1130                         l2330 26B8  
                       l2322 2686                         l2234 209E                         l2226 2076  
                       l2162 1F5C                         l2154 1F48                         l2252 261C  
                       l2308 2366                         l2340 277C                         l2228 207C  
                       l2172 1F86                         l2092 17E0                         l2500 152E  
                       l2318 2670                         l2342 2784                         l2182 1FBC  
                       l2174 1F94                         l2166 1F6C                         l2078 1C96  
                       l2510 1654                         l2430 125C                         l2248 25EA  
                       l2272 22B2                         l2352 2842                         l2168 1F72  
                       l2512 1660                         l2504 157E                         l2440 12D4  
                       l2432 128C                         l2424 1226                         l2416 11C2  
                       l2530 2398                         l2258 2648                         l2290 230C  
                       l2346 27AA                         l2338 276E                         l2354 2850  
                       l2098 1888                         l2450 1344                         l2434 129C  
                       l2522 1696                         l2532 23B2                         l2188 1FCC  
                       l2516 166E                         l2460 13EA                         l2452 1372  
                       l2444 12F8                         l2428 124C                         l2380 10B4  
                       l1822 1D54                         l2294 231C                         l2446 1302  
                       l2454 1380                         l2518 167A                         l2374 1098  
                       l1664 2916                         l2536 23C0                         l1816 1D2A  
                       l2296 2322                         l1912 2158                         l1904 2130  
                       l2472 142A                         l2464 13F6                         l2384 10BC  
                       l1770 246C                         l1850 1DCC                         l1922 2186  
                       l1914 215E                         l2490 14F8                         l2482 14D0  
                       l2458 13E6                         l2386 10DE                         l2378 10A8  
                       l2556 2400                         l1844 1DAC                         l1828 1D60  
                       l1940 254A                         l1908 2142                         l2484 14DC  
                       l2476 1446                         l2468 1426                         l1782 24C0  
                       l1774 247C                         l2566 2434                         l1846 1DB8  
                       l1838 1D88                         l1950 2572                         l1934 2538  
                       l1918 2170                         l2494 1514                         l1792 2500  
                       l1784 24E0                         l1776 2488                         l1864 1E42  
                       l1856 1DF0                         l1848 1DC4                         l2488 14EA  
                       l1786 24EC                         l1778 24A8                         l2578 2934  
                       l1874 1E74                         l1858 1DFC                         l1946 2560  
                       l1962 259C                         l1890 20FC                         l1948 256A  
                       l1884 20D4                         l1798 2512                         l1966 25AC  
                       l1958 2590                         l1990 271E                         l1982 26FE  
                       l1886 20EE                         l2598 21D4                         l1994 2734  
                       l1986 270C                         l1978 26F0                         l1988 2716  
                       l1998 2740                         STR_1 1077                         u2021 1EAC  
                       u2041 1ECA                         u2231 22A4                         u2250 22D0  
                       u1451 1CE8                         u1461 1CFC                         u2430 1168  
                       u2255 22C8                         u2435 115E                         u1661 20C6  
                       u1681 20E4                         u2651 238A                 printf@tmpval 005A  
                       u2590 1508                         u2671 23A8                         _TRMT 007D61  
                       _main 21AE                 ___ftpack@arg 0001                 ___ftpack@exp 0004  
             ??_get_full_ADC 0003                         fsr2h 000FDA                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                 ___ftmul@cntr 0022  
               ___param_bank 000010                 ___ftmul@sign 0023                 ___fttol@exp1 0039  
               ___fttol@lval 0035                  ?_WAIT_1_SEC 0001                        ?_main 0001  
            __end_of___awdiv 25B8              __end_of___ftadd 1E9C              __end_of___awmod 275C  
            __end_of___ftdiv 245C              __end_of___ftneg 29F6              __end_of___lldiv 26DA  
            __end_of___ftmul 21AE                        _T0CON 000FD5              ___awdiv@divisor 0003  
            __end_of___llmod 27CC              __end_of___ftsub 28E0              __end_of___fttol 237A  
            ___awdiv@counter 0005                        _RCSTA 000FAB                        _TMR0H 000FD7  
                      _TMR0L 000FD6                        _SPBRG 000FAF                        _PORTB 000F81  
                      _PORTC 000F82                        _PORTD 000F83                        _PORTE 000F84  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                        _TXREG 000FAD  
                      _TXSTA 000FAC                 ___lltoft@exp 0011                ___awtoft@sign 000C  
            __end_of_dpowers 1029                        _array 0068                        _scale 16B4  
              ___ftpack@sign 0005                        _putch 2A6C                 main@num_step 0064  
             __CFG_BOREN$OFF 000000                        tablat 000FF5                        status 000FD8  
   __size_of_BCD_Upper_Digit 003E              __initialization 295A        __end_of_WAIT_HALF_SEC 2A10  
               __end_of_main 2294             __end_of_Init_ADC 2A88            ??_BCD_Lower_Digit 0001  
                     ??_main 0062                ___fttol@sign1 0034                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0                       _BCD_DP 2A2A             ___llmod@dividend 0001  
                     ?_scale 0024                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 0001             __end_of___awtoft 295A                       ?_putch 0001  
           __end_of___ftpack 2522             __end_of___lltoft 289C                       _OSCCON 000FD3  
         __size_of_Init_TRIS 0016                       _SPBRGH 000FB0          __size_of_WAIT_1_SEC 000A  
           __end_of__powers_ 1077           __size_of_OpenUSART 0070                       ___ftge 25B8  
                     ___wmul 2984                    ??___awdiv 0005                    ??___ftadd 0034  
                  ??___awmod 000D                    ??___ftdiv 0013                    ??___ftneg 0004  
                  ??___lldiv 0009                    ??___ftmul 001B                    ??___llmod 0009  
                  ??___ftsub 0040                    ??___fttol 002F                       _fround 1A94  
           ___awdiv@quotient 0007              ___awmod@divisor 000B              ___awmod@counter 000D  
                     _printf 108E        ___ftmul@f3_as_product 001F         __end_of_get_full_ADC 29D2  
               __pdataCOMRAM 0068                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                       putch@c 0001  
              main@voltage_v 0066                   __accesstop 0080      __end_of__initialization 297A  
                 ___ftadd@f1 002E                   ___ftadd@f2 0031                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 000D  
                 ___ftdiv@f2 0010                   ___ftdiv@f3 0017                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 0015                   ___ftmul@f2 0018  
                 ___ftsub@f1 003A                   ___ftsub@f2 003D                   ___fttol@f1 002B  
             __pcstackCOMRAM 0001                   ___lltoft@c 0009            ??_BCD_Upper_Digit 0001  
              __end_of_scale 1A94                __end_of_putch 2A7A            __end_of_Init_TRIS 2A58  
                 __div_to_l_ 1FAC            __end_of_OpenUSART 283C              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ?_BCD_DP 0001                      ??_scale 0027  
            __div_to_l_@quot 0007                      ??_putch 0001                    ?_Init_ADC 0001  
         __size_of_init_UART 0014   __end_of_Select_ADC_Channel 2A94                __div_to_l_@f1 0001  
              __div_to_l_@f2 0004                      ?___ftge 0001                      ?___wmul 000F  
                    ?_fround 0024                 ??_WAIT_1_SEC 0001                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 0040    Select_ADC_Channel@channel 0001  
                  ?___lltoft 0009              __size_of_BCD_DP 0018                   ??_Init_ADC 0001  
            _BCD_Lower_Digit 2A10           __end_of_WAIT_1_SEC 2AA8            __end_of__npowers_ 1050  
                    __Hparam 0000                   _scale$1255 0027                      __Lparam 0000  
            __size_of___ftge 0096                      ___awdiv 2522                      ___ftadd 1CD8  
                    ___awmod 26DA                      ___ftdiv 237A                      ___ftneg 29D2  
                    ___lldiv 264E              __size_of___wmul 0028                      ___ftmul 20B6  
                    ___llmod 275C                      ___ftsub 289C                      ___fttol 2294  
      __size_of_get_full_ADC 0026                 __psmallconst 1000                      __pcinit 295A  
                 ??___awtoft 000C                   ??___ftpack 0006              __size_of_fround 0244  
                    __ramtop 1000                   ??___lltoft 000D                      __ptext0 21AE  
                    __ptext1 108E                      __ptext2 16B4                      __ptext3 2A6C  
                    __ptext4 1A94                      __ptext5 2984                      __ptext6 20B6  
                    __ptext7 26DA                      __ptext8 2522                      __ptext9 1E9C  
            __size_of_printf 0626            __end_of_init_UART 2A6C                    _T0CONbits 000FD5  
                ?__div_to_l_ 0001                      _dpowers 1001             ___awmod@dividend 0009  
       end_of_initialization 297A         BCD_Lower_Digit@digit 0001                __Lmediumconst 0000  
               _get_full_ADC 29AC              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                  _RCSTAbits 000FAB                      printf@c 0061                      printf@f 0040  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
              ??__tdiv_to_l_ 0007                    _PORTDbits 000F83                    _TRISCbits 000F94  
    __end_of_BCD_Lower_Digit 2A2A       __size_of_WAIT_HALF_SEC 001A               __end_of_BCD_DP 2A42  
            _BCD_Upper_Digit 28E0                  ___ftdiv@exp 001A                    _TXSTAbits 000FAC  
         get_full_ADC@result 0005          __size_of__div_to_l_ 010A                  ___ftmul@exp 001E  
             __end_of___ftge 264E               __end_of___wmul 29AC                __pidataCOMRAM 2A94  
             __end_of_fround 1CD8               __end_of_printf 16B4          start_initialization 295A  
                  _Init_TRIS 2A42          __end_of__tdiv_to_l_ 1FAC                     ??_BCD_DP 0001  
                   BCD_DP@dp 0002                    _OpenUSART 27CC              ___llmod@divisor 0005  
           __CFG_OSC$INTIO67 000000            __size_of_Init_ADC 000E              ___llmod@counter 0009  
                   ??___ftge 0007                     ??___wmul 0013                _WAIT_HALF_SEC 29F6  
         _Select_ADC_Channel 2A88                     ??_fround 0027                     ??_printf 0045  
                 fround@prec 002D            __size_of___awtoft 003C            __size_of___ftpack 00C6  
        ?_Select_ADC_Channel 0001            __size_of___lltoft 0060                   ?_Init_TRIS 0001  
    __end_of_BCD_Upper_Digit 291E             ?_BCD_Lower_Digit 0001                   ?_OpenUSART 0001  
       ??_Select_ADC_Channel 0001               ?_WAIT_HALF_SEC 0001                     ?___awdiv 0001  
                   ?___ftadd 002E                     ?___awmod 0009                     ?___ftdiv 000D  
                   ?___ftneg 0001                     ?___lldiv 0001                     ?___ftmul 0015  
                   ?___llmod 0001                     ?___ftsub 003A        BCD_Upper_Digit@Port_E 0001  
                  __npowers_ 1029                     ?___fttol 002B                  __tdiv_to_l_ 1E9C  
               ??__div_to_l_ 0007                  __smallconst 1000                    _init_UART 2A58  
             __size_of_scale 03E0               __size_of_putch 000E               ___wmul@product 0013  
                   _PIE1bits 000F9D                     _PIR1bits 000F9E           __end_of__div_to_l_ 20B6  
                 _ADCON0bits 000FC2            ___wmul@multiplier 000F                   printf@flag 0050  
                 printf@fval 005E                   printf@prec 0052                  ??_Init_TRIS 0001  
                 ?_init_UART 0001             ?_BCD_Upper_Digit 0001                    copy_data0 296E  
                   _Init_ADC 2A7A                  ??_OpenUSART 0003              OpenUSART@config 0003  
                   __Hrparam 0000              ??_WAIT_HALF_SEC 0001                     __Lrparam 0000  
           __size_of___awdiv 0096             __size_of___ftadd 01C4             __size_of___awmod 0082  
           __size_of___ftdiv 00E2             __size_of___ftneg 0024             __size_of___lldiv 008C  
           __size_of___ftmul 00F8             __size_of___llmod 0070             __size_of___ftsub 0044  
           __size_of___fttol 00E6                     ___awtoft 291E                     ___ftpack 245C  
                _fround$1253 002A                  _fround$1254 0027                     ___lltoft 283C  
                   __ptext10 1FAC                     __ptext11 283C                     __ptext20 27CC  
                   __ptext12 275C                     __ptext21 29AC                     __ptext13 264E  
                   __ptext30 28E0                     __ptext22 237A                     __ptext14 2294  
                   __ptext31 2A10                     __ptext23 291E                     __ptext15 289C  
                   __ptext32 2A2A                     __ptext24 245C                     __ptext16 1CD8  
                   __ptext25 2A9E                     __ptext17 29D2                     __ptext26 29F6  
                   __ptext18 25B8                     __ptext27 2A88                     __ptext19 2A58  
                   __ptext28 2A42                     __ptext29 2A7A                     __powers_ 1050  
       BCD_Upper_Digit@digit 0002                __size_of_main 00E6                    printf@exp 0058  
                  printf@val 0054                   _INTCONbits 000FF2               OpenUSART@spbrg 0001  
                ??_init_UART 0004                     scale@scl 002A             __tdiv_to_l_@exp1 000F  
           __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001  
                   printf@ap 004E                   _WAIT_1_SEC 2A9E                 ?__tdiv_to_l_ 0001  
                _printf$1256 004B             ___lldiv@quotient 0009                ?_get_full_ADC 0001  
   __size_of_BCD_Lower_Digit 001A  __size_of_Select_ADC_Channel 000C  
