

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 01 12:44:30 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  001A00                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  001A00  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  001A01  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  0010FA                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _color
    96  0010FA  F800               	dw	63488
    97  0010FC  F800               	dw	63488
    98  0010FE  F800               	dw	63488
    99  001100  07FF               	dw	2047
   100  001102  07FF               	dw	2047
   101  001104  07E0               	dw	2016
   102  001106  001F               	dw	31
   103  001108  001F               	dw	31
   104  00110A  F81F               	dw	63519
   105  00110C  FFFF               	dw	65535
   106  00110E  FFFF               	dw	65535
   107  001110  FFFF               	dw	65535
   108  001112  FFFF               	dw	65535
   109  001114  FFFF               	dw	65535
   110  001116  FFFF               	dw	65535
   111  001118  FFFF               	dw	65535
   112  00111A  FFFF               	dw	65535
   113  00111C  FFFF               	dw	65535
   114  00111E  FFFF               	dw	65535
   115  001120  FFFF               	dw	65535
   116  001122  FFFF               	dw	65535
   117                           
   118                           ;initializer for _D1
   119  001124  20                 	db	32
   120  001125  20                 	db	32
   121  001126  20                 	db	32
   122  001127  00                 	db	0
   123  001128  00                 	db	0
   124  001129  00                 	db	0
   125  00112A  00                 	db	0
   126  00112B  00                 	db	0
   127  00112C  00                 	db	0
   128  00112D  00                 	db	0
   129  00112E  00                 	db	0
   130  00112F  00                 	db	0
   131  001130  00                 	db	0
   132  001131  00                 	db	0
   133  001132  00                 	db	0
   134  001133  00                 	db	0
   135  001134  00                 	db	0
   136  001135  00                 	db	0
   137  001136  00                 	db	0
   138  001137  00                 	db	0
   139  001138  00                 	db	0
   140                           
   141                           ;initializer for _D2
   142  001139  00                 	db	0
   143  00113A  00                 	db	0
   144  00113B  00                 	db	0
   145  00113C  06                 	db	6
   146  00113D  06                 	db	6
   147  00113E  02                 	db	2
   148  00113F  04                 	db	4
   149  001140  04                 	db	4
   150  001141  05                 	db	5
   151  001142  00                 	db	0
   152  001143  00                 	db	0
   153  001144  00                 	db	0
   154  001145  00                 	db	0
   155  001146  00                 	db	0
   156  001147  00                 	db	0
   157  001148  00                 	db	0
   158  001149  00                 	db	0
   159  00114A  00                 	db	0
   160  00114B  00                 	db	0
   161  00114C  00                 	db	0
   162  00114D  00                 	db	0
   163                           
   164                           ;initializer for _D3
   165  00114E  00                 	db	0
   166  00114F  00                 	db	0
   167  001150  00                 	db	0
   168  001151  00                 	db	0
   169  001152  00                 	db	0
   170  001153  00                 	db	0
   171  001154  00                 	db	0
   172  001155  00                 	db	0
   173  001156  00                 	db	0
   174  001157  FF                 	db	255
   175  001158  FF                 	db	255
   176  001159  FF                 	db	255
   177  00115A  FF                 	db	255
   178  00115B  FF                 	db	255
   179  00115C  FF                 	db	255
   180  00115D  FF                 	db	255
   181  00115E  FF                 	db	255
   182  00115F  FF                 	db	255
   183  001160  FF                 	db	255
   184  001161  FF                 	db	255
   185  001162  FF                 	db	255
   186                           
   187                           ;initializer for _array1
   188  001163  A2                 	db	162
   189  001164  62                 	db	98
   190  001165  E2                 	db	226
   191  001166  22                 	db	34
   192  001167  02                 	db	2
   193  001168  C2                 	db	194
   194  001169  E0                 	db	224
   195  00116A  A8                 	db	168
   196  00116B  90                 	db	144
   197  00116C  68                 	db	104
   198  00116D  98                 	db	152
   199  00116E  B0                 	db	176
   200  00116F  30                 	db	48
   201  001170  18                 	db	24
   202  001171  7A                 	db	122
   203  001172  10                 	db	16
   204  001173  38                 	db	56
   205  001174  5A                 	db	90
   206  001175  42                 	db	66
   207  001176  4A                 	db	74
   208  001177  52                 	db	82
   209                           
   210                           	psect	idataBANK1
   211  001404                     __pidataBANK1:
   212                           	opt stack 0
   213                           
   214                           ;initializer for _txt1
   215  001404  43                 	db	67
   216  001405  48                 	db	72
   217  001406  2D                 	db	45
   218  001407  00                 	db	0
   219  001408  43                 	db	67
   220  001409  48                 	db	72
   221  00140A  20                 	db	32
   222  00140B  00                 	db	0
   223  00140C  43                 	db	67
   224  00140D  48                 	db	72
   225  00140E  2B                 	db	43
   226  00140F  00                 	db	0
   227  001410  7C                 	db	124
   228  001411  3C                 	db	60
   229  001412  3C                 	db	60
   230  001413  00                 	db	0
   231  001414  3E                 	db	62
   232  001415  3E                 	db	62
   233  001416  7C                 	db	124
   234  001417  00                 	db	0
   235  001418  3E                 	db	62
   236  001419  7C                 	db	124
   237  00141A  7C                 	db	124
   238  00141B  00                 	db	0
   239  00141C  20                 	db	32
   240  00141D  2D                 	db	45
   241  00141E  20                 	db	32
   242  00141F  00                 	db	0
   243  001420  20                 	db	32
   244  001421  2B                 	db	43
   245  001422  20                 	db	32
   246  001423  00                 	db	0
   247  001424  45                 	db	69
   248  001425  51                 	db	81
   249  001426  20                 	db	32
   250  001427  00                 	db	0
   251  001428  20                 	db	32
   252  001429  30                 	db	48
   253  00142A  20                 	db	32
   254  00142B  00                 	db	0
   255  00142C  31                 	db	49
   256  00142D  30                 	db	48
   257  00142E  30                 	db	48
   258  00142F  00                 	db	0
   259  001430  32                 	db	50
   260  001431  30                 	db	48
   261  001432  30                 	db	48
   262  001433  00                 	db	0
   263  001434  20                 	db	32
   264  001435  31                 	db	49
   265  001436  20                 	db	32
   266  001437  00                 	db	0
   267  001438  20                 	db	32
   268  001439  32                 	db	50
   269  00143A  20                 	db	32
   270  00143B  00                 	db	0
   271  00143C  20                 	db	32
   272  00143D  33                 	db	51
   273  00143E  20                 	db	32
   274  00143F  00                 	db	0
   275  001440  20                 	db	32
   276  001441  34                 	db	52
   277  001442  20                 	db	32
   278  001443  00                 	db	0
   279  001444  20                 	db	32
   280  001445  35                 	db	53
   281  001446  20                 	db	32
   282  001447  00                 	db	0
   283  001448  20                 	db	32
   284  001449  36                 	db	54
   285  00144A  20                 	db	32
   286  00144B  00                 	db	0
   287  00144C  20                 	db	32
   288  00144D  37                 	db	55
   289  00144E  20                 	db	32
   290  00144F  00                 	db	0
   291  001450  20                 	db	32
   292  001451  38                 	db	56
   293  001452  20                 	db	32
   294  001453  00                 	db	0
   295  001454  20                 	db	32
   296  001455  39                 	db	57
   297  001456  20                 	db	32
   298  001457  00                 	db	0
   299                           
   300                           	psect	mediumconst
   301  00FD58                     __pmediumconst:
   302                           	opt stack 0
   303  00FD58  00                 	db	0
   304  00FD59                     _font:
   305                           	opt stack 0
   306  00FD59  00                 	db	0
   307  00FD5A  00                 	db	0
   308  00FD5B  00                 	db	0
   309  00FD5C  00                 	db	0
   310  00FD5D  00                 	db	0
   311  00FD5E  00                 	db	0
   312  00FD5F  00                 	db	0
   313  00FD60  5F                 	db	95
   314  00FD61  00                 	db	0
   315  00FD62  00                 	db	0
   316  00FD63  00                 	db	0
   317  00FD64  07                 	db	7
   318  00FD65  00                 	db	0
   319  00FD66  07                 	db	7
   320  00FD67  00                 	db	0
   321  00FD68  14                 	db	20
   322  00FD69  7F                 	db	127
   323  00FD6A  14                 	db	20
   324  00FD6B  7F                 	db	127
   325  00FD6C  14                 	db	20
   326  00FD6D  24                 	db	36
   327  00FD6E  2A                 	db	42
   328  00FD6F  7F                 	db	127
   329  00FD70  2A                 	db	42
   330  00FD71  12                 	db	18
   331  00FD72  23                 	db	35
   332  00FD73  13                 	db	19
   333  00FD74  08                 	db	8
   334  00FD75  64                 	db	100
   335  00FD76  62                 	db	98
   336  00FD77  36                 	db	54
   337  00FD78  49                 	db	73
   338  00FD79  56                 	db	86
   339  00FD7A  20                 	db	32
   340  00FD7B  50                 	db	80
   341  00FD7C  00                 	db	0
   342  00FD7D  08                 	db	8
   343  00FD7E  07                 	db	7
   344  00FD7F  03                 	db	3
   345  00FD80  00                 	db	0
   346  00FD81  00                 	db	0
   347  00FD82  1C                 	db	28
   348  00FD83  22                 	db	34
   349  00FD84  41                 	db	65
   350  00FD85  00                 	db	0
   351  00FD86  00                 	db	0
   352  00FD87  41                 	db	65
   353  00FD88  22                 	db	34
   354  00FD89  1C                 	db	28
   355  00FD8A  00                 	db	0
   356  00FD8B  2A                 	db	42
   357  00FD8C  1C                 	db	28
   358  00FD8D  7F                 	db	127
   359  00FD8E  1C                 	db	28
   360  00FD8F  2A                 	db	42
   361  00FD90  08                 	db	8
   362  00FD91  08                 	db	8
   363  00FD92  3E                 	db	62
   364  00FD93  08                 	db	8
   365  00FD94  08                 	db	8
   366  00FD95  00                 	db	0
   367  00FD96  80                 	db	128
   368  00FD97  70                 	db	112
   369  00FD98  30                 	db	48
   370  00FD99  00                 	db	0
   371  00FD9A  08                 	db	8
   372  00FD9B  08                 	db	8
   373  00FD9C  08                 	db	8
   374  00FD9D  08                 	db	8
   375  00FD9E  08                 	db	8
   376  00FD9F  00                 	db	0
   377  00FDA0  00                 	db	0
   378  00FDA1  60                 	db	96
   379  00FDA2  60                 	db	96
   380  00FDA3  00                 	db	0
   381  00FDA4  20                 	db	32
   382  00FDA5  10                 	db	16
   383  00FDA6  08                 	db	8
   384  00FDA7  04                 	db	4
   385  00FDA8  02                 	db	2
   386  00FDA9  3E                 	db	62
   387  00FDAA  51                 	db	81
   388  00FDAB  49                 	db	73
   389  00FDAC  45                 	db	69
   390  00FDAD  3E                 	db	62
   391  00FDAE  00                 	db	0
   392  00FDAF  42                 	db	66
   393  00FDB0  7F                 	db	127
   394  00FDB1  40                 	db	64
   395  00FDB2  00                 	db	0
   396  00FDB3  72                 	db	114
   397  00FDB4  49                 	db	73
   398  00FDB5  49                 	db	73
   399  00FDB6  49                 	db	73
   400  00FDB7  46                 	db	70
   401  00FDB8  21                 	db	33
   402  00FDB9  41                 	db	65
   403  00FDBA  49                 	db	73
   404  00FDBB  4D                 	db	77
   405  00FDBC  33                 	db	51
   406  00FDBD  18                 	db	24
   407  00FDBE  14                 	db	20
   408  00FDBF  12                 	db	18
   409  00FDC0  7F                 	db	127
   410  00FDC1  10                 	db	16
   411  00FDC2  27                 	db	39
   412  00FDC3  45                 	db	69
   413  00FDC4  45                 	db	69
   414  00FDC5  45                 	db	69
   415  00FDC6  39                 	db	57
   416  00FDC7  3C                 	db	60
   417  00FDC8  4A                 	db	74
   418  00FDC9  49                 	db	73
   419  00FDCA  49                 	db	73
   420  00FDCB  31                 	db	49
   421  00FDCC  41                 	db	65
   422  00FDCD  21                 	db	33
   423  00FDCE  11                 	db	17
   424  00FDCF  09                 	db	9
   425  00FDD0  07                 	db	7
   426  00FDD1  36                 	db	54
   427  00FDD2  49                 	db	73
   428  00FDD3  49                 	db	73
   429  00FDD4  49                 	db	73
   430  00FDD5  36                 	db	54
   431  00FDD6  46                 	db	70
   432  00FDD7  49                 	db	73
   433  00FDD8  49                 	db	73
   434  00FDD9  29                 	db	41
   435  00FDDA  1E                 	db	30
   436  00FDDB  00                 	db	0
   437  00FDDC  00                 	db	0
   438  00FDDD  14                 	db	20
   439  00FDDE  00                 	db	0
   440  00FDDF  00                 	db	0
   441  00FDE0  00                 	db	0
   442  00FDE1  40                 	db	64
   443  00FDE2  34                 	db	52
   444  00FDE3  00                 	db	0
   445  00FDE4  00                 	db	0
   446  00FDE5  00                 	db	0
   447  00FDE6  08                 	db	8
   448  00FDE7  14                 	db	20
   449  00FDE8  22                 	db	34
   450  00FDE9  41                 	db	65
   451  00FDEA  14                 	db	20
   452  00FDEB  14                 	db	20
   453  00FDEC  14                 	db	20
   454  00FDED  14                 	db	20
   455  00FDEE  14                 	db	20
   456  00FDEF  00                 	db	0
   457  00FDF0  41                 	db	65
   458  00FDF1  22                 	db	34
   459  00FDF2  14                 	db	20
   460  00FDF3  08                 	db	8
   461  00FDF4  02                 	db	2
   462  00FDF5  01                 	db	1
   463  00FDF6  59                 	db	89
   464  00FDF7  09                 	db	9
   465  00FDF8  06                 	db	6
   466  00FDF9  3E                 	db	62
   467  00FDFA  41                 	db	65
   468  00FDFB  5D                 	db	93
   469  00FDFC  59                 	db	89
   470  00FDFD  4E                 	db	78
   471  00FDFE  7C                 	db	124
   472  00FDFF  12                 	db	18
   473  00FE00  11                 	db	17
   474  00FE01  12                 	db	18
   475  00FE02  7C                 	db	124
   476  00FE03  7F                 	db	127
   477  00FE04  49                 	db	73
   478  00FE05  49                 	db	73
   479  00FE06  49                 	db	73
   480  00FE07  36                 	db	54
   481  00FE08  3E                 	db	62
   482  00FE09  41                 	db	65
   483  00FE0A  41                 	db	65
   484  00FE0B  41                 	db	65
   485  00FE0C  22                 	db	34
   486  00FE0D  7F                 	db	127
   487  00FE0E  41                 	db	65
   488  00FE0F  41                 	db	65
   489  00FE10  41                 	db	65
   490  00FE11  3E                 	db	62
   491  00FE12  7F                 	db	127
   492  00FE13  49                 	db	73
   493  00FE14  49                 	db	73
   494  00FE15  49                 	db	73
   495  00FE16  41                 	db	65
   496  00FE17  7F                 	db	127
   497  00FE18  09                 	db	9
   498  00FE19  09                 	db	9
   499  00FE1A  09                 	db	9
   500  00FE1B  01                 	db	1
   501  00FE1C  3E                 	db	62
   502  00FE1D  41                 	db	65
   503  00FE1E  41                 	db	65
   504  00FE1F  51                 	db	81
   505  00FE20  73                 	db	115
   506  00FE21  7F                 	db	127
   507  00FE22  08                 	db	8
   508  00FE23  08                 	db	8
   509  00FE24  08                 	db	8
   510  00FE25  7F                 	db	127
   511  00FE26  00                 	db	0
   512  00FE27  41                 	db	65
   513  00FE28  7F                 	db	127
   514  00FE29  41                 	db	65
   515  00FE2A  00                 	db	0
   516  00FE2B  20                 	db	32
   517  00FE2C  40                 	db	64
   518  00FE2D  41                 	db	65
   519  00FE2E  3F                 	db	63
   520  00FE2F  01                 	db	1
   521  00FE30  7F                 	db	127
   522  00FE31  08                 	db	8
   523  00FE32  14                 	db	20
   524  00FE33  22                 	db	34
   525  00FE34  41                 	db	65
   526  00FE35  7F                 	db	127
   527  00FE36  40                 	db	64
   528  00FE37  40                 	db	64
   529  00FE38  40                 	db	64
   530  00FE39  40                 	db	64
   531  00FE3A  7F                 	db	127
   532  00FE3B  02                 	db	2
   533  00FE3C  1C                 	db	28
   534  00FE3D  02                 	db	2
   535  00FE3E  7F                 	db	127
   536  00FE3F  7F                 	db	127
   537  00FE40  04                 	db	4
   538  00FE41  08                 	db	8
   539  00FE42  10                 	db	16
   540  00FE43  7F                 	db	127
   541  00FE44  3E                 	db	62
   542  00FE45  41                 	db	65
   543  00FE46  41                 	db	65
   544  00FE47  41                 	db	65
   545  00FE48  3E                 	db	62
   546  00FE49  7F                 	db	127
   547  00FE4A  09                 	db	9
   548  00FE4B  09                 	db	9
   549  00FE4C  09                 	db	9
   550  00FE4D  06                 	db	6
   551  00FE4E  3E                 	db	62
   552  00FE4F  41                 	db	65
   553  00FE50  51                 	db	81
   554  00FE51  21                 	db	33
   555  00FE52  5E                 	db	94
   556  00FE53  7F                 	db	127
   557  00FE54  09                 	db	9
   558  00FE55  19                 	db	25
   559  00FE56  29                 	db	41
   560  00FE57  46                 	db	70
   561  00FE58                     __end_of_font:
   562                           	opt stack 0
   563  00FE58                     _font2:
   564                           	opt stack 0
   565  00FE58  26                 	db	38
   566  00FE59  49                 	db	73
   567  00FE5A  49                 	db	73
   568  00FE5B  49                 	db	73
   569  00FE5C  32                 	db	50
   570  00FE5D  03                 	db	3
   571  00FE5E  01                 	db	1
   572  00FE5F  7F                 	db	127
   573  00FE60  01                 	db	1
   574  00FE61  03                 	db	3
   575  00FE62  3F                 	db	63
   576  00FE63  40                 	db	64
   577  00FE64  40                 	db	64
   578  00FE65  40                 	db	64
   579  00FE66  3F                 	db	63
   580  00FE67  1F                 	db	31
   581  00FE68  20                 	db	32
   582  00FE69  40                 	db	64
   583  00FE6A  20                 	db	32
   584  00FE6B  1F                 	db	31
   585  00FE6C  3F                 	db	63
   586  00FE6D  40                 	db	64
   587  00FE6E  38                 	db	56
   588  00FE6F  40                 	db	64
   589  00FE70  3F                 	db	63
   590  00FE71  63                 	db	99
   591  00FE72  14                 	db	20
   592  00FE73  08                 	db	8
   593  00FE74  14                 	db	20
   594  00FE75  63                 	db	99
   595  00FE76  03                 	db	3
   596  00FE77  04                 	db	4
   597  00FE78  78                 	db	120
   598  00FE79  04                 	db	4
   599  00FE7A  03                 	db	3
   600  00FE7B  61                 	db	97
   601  00FE7C  59                 	db	89
   602  00FE7D  49                 	db	73
   603  00FE7E  4D                 	db	77
   604  00FE7F  43                 	db	67
   605  00FE80  00                 	db	0
   606  00FE81  7F                 	db	127
   607  00FE82  41                 	db	65
   608  00FE83  41                 	db	65
   609  00FE84  41                 	db	65
   610  00FE85  02                 	db	2
   611  00FE86  04                 	db	4
   612  00FE87  08                 	db	8
   613  00FE88  10                 	db	16
   614  00FE89  20                 	db	32
   615  00FE8A  00                 	db	0
   616  00FE8B  41                 	db	65
   617  00FE8C  41                 	db	65
   618  00FE8D  41                 	db	65
   619  00FE8E  7F                 	db	127
   620  00FE8F  04                 	db	4
   621  00FE90  02                 	db	2
   622  00FE91  01                 	db	1
   623  00FE92  02                 	db	2
   624  00FE93  04                 	db	4
   625  00FE94  40                 	db	64
   626  00FE95  40                 	db	64
   627  00FE96  40                 	db	64
   628  00FE97  40                 	db	64
   629  00FE98  40                 	db	64
   630  00FE99  00                 	db	0
   631  00FE9A  03                 	db	3
   632  00FE9B  07                 	db	7
   633  00FE9C  08                 	db	8
   634  00FE9D  00                 	db	0
   635  00FE9E  20                 	db	32
   636  00FE9F  54                 	db	84
   637  00FEA0  54                 	db	84
   638  00FEA1  78                 	db	120
   639  00FEA2  40                 	db	64
   640  00FEA3  7F                 	db	127
   641  00FEA4  28                 	db	40
   642  00FEA5  44                 	db	68
   643  00FEA6  44                 	db	68
   644  00FEA7  38                 	db	56
   645  00FEA8  38                 	db	56
   646  00FEA9  44                 	db	68
   647  00FEAA  44                 	db	68
   648  00FEAB  44                 	db	68
   649  00FEAC  28                 	db	40
   650  00FEAD  38                 	db	56
   651  00FEAE  44                 	db	68
   652  00FEAF  44                 	db	68
   653  00FEB0  28                 	db	40
   654  00FEB1  7F                 	db	127
   655  00FEB2  38                 	db	56
   656  00FEB3  54                 	db	84
   657  00FEB4  54                 	db	84
   658  00FEB5  54                 	db	84
   659  00FEB6  18                 	db	24
   660  00FEB7  00                 	db	0
   661  00FEB8  08                 	db	8
   662  00FEB9  7E                 	db	126
   663  00FEBA  09                 	db	9
   664  00FEBB  02                 	db	2
   665  00FEBC  18                 	db	24
   666  00FEBD  A4                 	db	164
   667  00FEBE  A4                 	db	164
   668  00FEBF  9C                 	db	156
   669  00FEC0  78                 	db	120
   670  00FEC1  7F                 	db	127
   671  00FEC2  08                 	db	8
   672  00FEC3  04                 	db	4
   673  00FEC4  04                 	db	4
   674  00FEC5  78                 	db	120
   675  00FEC6  00                 	db	0
   676  00FEC7  44                 	db	68
   677  00FEC8  7D                 	db	125
   678  00FEC9  40                 	db	64
   679  00FECA  00                 	db	0
   680  00FECB  20                 	db	32
   681  00FECC  40                 	db	64
   682  00FECD  40                 	db	64
   683  00FECE  3D                 	db	61
   684  00FECF  00                 	db	0
   685  00FED0  7F                 	db	127
   686  00FED1  10                 	db	16
   687  00FED2  28                 	db	40
   688  00FED3  44                 	db	68
   689  00FED4  00                 	db	0
   690  00FED5  00                 	db	0
   691  00FED6  41                 	db	65
   692  00FED7  7F                 	db	127
   693  00FED8  40                 	db	64
   694  00FED9  00                 	db	0
   695  00FEDA  7C                 	db	124
   696  00FEDB  04                 	db	4
   697  00FEDC  78                 	db	120
   698  00FEDD  04                 	db	4
   699  00FEDE  78                 	db	120
   700  00FEDF  7C                 	db	124
   701  00FEE0  08                 	db	8
   702  00FEE1  04                 	db	4
   703  00FEE2  04                 	db	4
   704  00FEE3  78                 	db	120
   705  00FEE4  38                 	db	56
   706  00FEE5  44                 	db	68
   707  00FEE6  44                 	db	68
   708  00FEE7  44                 	db	68
   709  00FEE8  38                 	db	56
   710  00FEE9  FC                 	db	252
   711  00FEEA  18                 	db	24
   712  00FEEB  24                 	db	36
   713  00FEEC  24                 	db	36
   714  00FEED  18                 	db	24
   715  00FEEE  18                 	db	24
   716  00FEEF  24                 	db	36
   717  00FEF0  24                 	db	36
   718  00FEF1  18                 	db	24
   719  00FEF2  FC                 	db	252
   720  00FEF3  7C                 	db	124
   721  00FEF4  08                 	db	8
   722  00FEF5  04                 	db	4
   723  00FEF6  04                 	db	4
   724  00FEF7  08                 	db	8
   725  00FEF8  48                 	db	72
   726  00FEF9  54                 	db	84
   727  00FEFA  54                 	db	84
   728  00FEFB  54                 	db	84
   729  00FEFC  24                 	db	36
   730  00FEFD  04                 	db	4
   731  00FEFE  04                 	db	4
   732  00FEFF  3F                 	db	63
   733  00FF00  44                 	db	68
   734  00FF01  24                 	db	36
   735  00FF02  3C                 	db	60
   736  00FF03  40                 	db	64
   737  00FF04  40                 	db	64
   738  00FF05  20                 	db	32
   739  00FF06  7C                 	db	124
   740  00FF07  1C                 	db	28
   741  00FF08  20                 	db	32
   742  00FF09  40                 	db	64
   743  00FF0A  20                 	db	32
   744  00FF0B  1C                 	db	28
   745  00FF0C  3C                 	db	60
   746  00FF0D  40                 	db	64
   747  00FF0E  30                 	db	48
   748  00FF0F  40                 	db	64
   749  00FF10  3C                 	db	60
   750  00FF11  44                 	db	68
   751  00FF12  28                 	db	40
   752  00FF13  10                 	db	16
   753  00FF14  28                 	db	40
   754  00FF15  44                 	db	68
   755  00FF16  4C                 	db	76
   756  00FF17  90                 	db	144
   757  00FF18  90                 	db	144
   758  00FF19  90                 	db	144
   759  00FF1A  7C                 	db	124
   760  00FF1B  44                 	db	68
   761  00FF1C  64                 	db	100
   762  00FF1D  54                 	db	84
   763  00FF1E  4C                 	db	76
   764  00FF1F  44                 	db	68
   765  00FF20  00                 	db	0
   766  00FF21  08                 	db	8
   767  00FF22  36                 	db	54
   768  00FF23  41                 	db	65
   769  00FF24  00                 	db	0
   770  00FF25  00                 	db	0
   771  00FF26  00                 	db	0
   772  00FF27  77                 	db	119
   773  00FF28  00                 	db	0
   774  00FF29  00                 	db	0
   775  00FF2A  00                 	db	0
   776  00FF2B  41                 	db	65
   777  00FF2C  36                 	db	54
   778  00FF2D  08                 	db	8
   779  00FF2E  00                 	db	0
   780  00FF2F  02                 	db	2
   781  00FF30  01                 	db	1
   782  00FF31  02                 	db	2
   783  00FF32  04                 	db	4
   784  00FF33  02                 	db	2
   785  00FF34                     __end_of_font2:
   786                           	opt stack 0
   787  00FF34                     _dpowers:
   788                           	opt stack 0
   789  00FF34  0001               	dw	1
   790  00FF36  000A               	dw	10
   791  00FF38  0064               	dw	100
   792  00FF3A  03E8               	dw	1000
   793  00FF3C  2710               	dw	10000
   794  00FF3E                     __end_of_dpowers:
   795                           	opt stack 0
   796  00FF3E                     _hexpowers:
   797                           	opt stack 0
   798  00FF3E  0001               	dw	1
   799  00FF40  0010               	dw	16
   800  00FF42  0100               	dw	256
   801  00FF44  1000               	dw	4096
   802  00FF46                     __end_of_hexpowers:
   803                           	opt stack 0
   804  0000                     _ADCON1	set	4033
   805  0000                     _CCP2CON	set	4026
   806  0000                     _CCPR2L	set	4027
   807  0000                     _INTCON2bits	set	4081
   808  0000                     _INTCONbits	set	4082
   809  0000                     _OSCCON	set	4051
   810  0000                     _PIE1bits	set	3997
   811  0000                     _PIR1bits	set	3998
   812  0000                     _PIR2bits	set	4001
   813  0000                     _PORTA	set	3968
   814  0000                     _PORTBbits	set	3969
   815  0000                     _PORTCbits	set	3970
   816  0000                     _PORTD	set	3971
   817  0000                     _PR2	set	4043
   818  0000                     _RCSTA	set	4011
   819  0000                     _RCSTAbits	set	4011
   820  0000                     _SPBRG	set	4015
   821  0000                     _SPBRGH	set	4016
   822  0000                     _SSPBUF	set	4041
   823  0000                     _SSPCON1	set	4038
   824  0000                     _SSPSTAT	set	4039
   825  0000                     _SSPSTATbits	set	4039
   826  0000                     _T1CON	set	4045
   827  0000                     _T1CONbits	set	4045
   828  0000                     _T2CON	set	4042
   829  0000                     _T3CON	set	4017
   830  0000                     _T3CONbits	set	4017
   831  0000                     _TMR1H	set	4047
   832  0000                     _TMR1L	set	4046
   833  0000                     _TMR3H	set	4019
   834  0000                     _TMR3L	set	4018
   835  0000                     _TRISA	set	3986
   836  0000                     _TRISB	set	3987
   837  0000                     _TRISBbits	set	3987
   838  0000                     _TRISC	set	3988
   839  0000                     _TRISCbits	set	3988
   840  0000                     _TRISD	set	3989
   841  0000                     _TRISE	set	3990
   842  0000                     _TXREG	set	4013
   843  0000                     _TXSTA	set	4012
   844  0000                     _TXSTAbits	set	4012
   845  0000                     _INT0IE	set	32660
   846  0000                     _RBPU	set	32655
   847  0000                     _TRMT	set	32097
   848  00FF46                     STR_3:
   849  00FF46  2D                 	db	45
   850  00FF47  2D                 	db	45
   851  00FF48  2D                 	db	45
   852  00FF49  2D                 	db	45
   853  00FF4A  2D                 	db	45
   854  00FF4B  2D                 	db	45
   855  00FF4C  2D                 	db	45
   856  00FF4D  2D                 	db	45
   857  00FF4E  2D                 	db	45
   858  00FF4F  2D                 	db	45
   859  00FF50  2D                 	db	45
   860  00FF51  2D                 	db	45
   861  00FF52  2D                 	db	45
   862  00FF53  2D                 	db	45
   863  00FF54  2D                 	db	45
   864  00FF55  2D                 	db	45
   865  00FF56  2D                 	db	45
   866  00FF57  2D                 	db	45
   867  00FF58  2D                 	db	45
   868  00FF59  2D                 	db	45
   869  00FF5A  2D                 	db	45
   870  00FF5B  2D                 	db	45
   871  00FF5C  2D                 	db	45
   872  00FF5D  2D                 	db	45
   873  00FF5E  2D                 	db	45
   874  00FF5F  2D                 	db	45
   875  00FF60  2D                 	db	45
   876  00FF61  2D                 	db	45
   877  00FF62  2D                 	db	45
   878  00FF63  2D                 	db	45
   879  00FF64  2D                 	db	45
   880  00FF65  2D                 	db	45
   881  00FF66  2D                 	db	45
   882  00FF67  2D                 	db	45
   883  00FF68  2D                 	db	45
   884  00FF69  2D                 	db	45
   885  00FF6A  2D                 	db	45
   886  00FF6B  2D                 	db	45
   887  00FF6C  2D                 	db	45
   888  00FF6D  2D                 	db	45
   889  00FF6E  2D                 	db	45
   890  00FF6F  2D                 	db	45
   891  00FF70  2D                 	db	45
   892  00FF71  2D                 	db	45
   893  00FF72  2D                 	db	45
   894  00FF73  2D                 	db	45
   895  00FF74  2D                 	db	45
   896  00FF75  2D                 	db	45
   897  00FF76  2D                 	db	45
   898  00FF77  2D                 	db	45
   899  00FF78  2D                 	db	45
   900  00FF79  2D                 	db	45
   901  00FF7A  2D                 	db	45
   902  00FF7B  2D                 	db	45
   903  00FF7C  2D                 	db	45
   904  00FF7D  2D                 	db	45
   905  00FF7E  2D                 	db	45
   906  00FF7F  2D                 	db	45
   907  00FF80  2D                 	db	45
   908  00FF81  2D                 	db	45
   909  00FF82  0D                 	db	13
   910  00FF83  0A                 	db	10
   911  00FF84  00                 	db	0
   912  00FF85                     STR_2:
   913  00FF85  20                 	db	32
   914  00FF86  54                 	db	84	;'T'
   915  00FF87  65                 	db	101	;'e'
   916  00FF88  6D                 	db	109	;'m'
   917  00FF89  70                 	db	112	;'p'
   918  00FF8A  65                 	db	101	;'e'
   919  00FF8B  72                 	db	114	;'r'
   920  00FF8C  61                 	db	97	;'a'
   921  00FF8D  74                 	db	116	;'t'
   922  00FF8E  75                 	db	117	;'u'
   923  00FF8F  72                 	db	114	;'r'
   924  00FF90  65                 	db	101	;'e'
   925  00FF91  20                 	db	32
   926  00FF92  3D                 	db	61	;'='
   927  00FF93  20                 	db	32
   928  00FF94  25                 	db	37
   929  00FF95  64                 	db	100	;'d'
   930  00FF96  20                 	db	32
   931  00FF97  64                 	db	100	;'d'
   932  00FF98  65                 	db	101	;'e'
   933  00FF99  67                 	db	103	;'g'
   934  00FF9A  72                 	db	114	;'r'
   935  00FF9B  65                 	db	101	;'e'
   936  00FF9C  65                 	db	101	;'e'
   937  00FF9D  73                 	db	115	;'s'
   938  00FF9E  43                 	db	67	;'C'
   939  00FF9F  20                 	db	32
   940  00FFA0  3D                 	db	61	;'='
   941  00FFA1  20                 	db	32
   942  00FFA2  25                 	db	37
   943  00FFA3  64                 	db	100	;'d'
   944  00FFA4  20                 	db	32
   945  00FFA5  64                 	db	100	;'d'
   946  00FFA6  65                 	db	101	;'e'
   947  00FFA7  67                 	db	103	;'g'
   948  00FFA8  72                 	db	114	;'r'
   949  00FFA9  65                 	db	101	;'e'
   950  00FFAA  65                 	db	101	;'e'
   951  00FFAB  73                 	db	115	;'s'
   952  00FFAC  46                 	db	70	;'F'
   953  00FFAD  0D                 	db	13
   954  00FFAE  0A                 	db	10
   955  00FFAF  0A                 	db	10
   956  00FFB0  00                 	db	0
   957  00FFB1                     STR_1:
   958  00FFB1  20                 	db	32
   959  00FFB2  25                 	db	37
   960  00FFB3  30                 	db	48	;'0'
   961  00FFB4  32                 	db	50	;'2'
   962  00FFB5  78                 	db	120	;'x'
   963  00FFB6  3A                 	db	58	;':'
   964  00FFB7  25                 	db	37
   965  00FFB8  30                 	db	48	;'0'
   966  00FFB9  32                 	db	50	;'2'
   967  00FFBA  78                 	db	120	;'x'
   968  00FFBB  3A                 	db	58	;':'
   969  00FFBC  25                 	db	37
   970  00FFBD  30                 	db	48	;'0'
   971  00FFBE  32                 	db	50	;'2'
   972  00FFBF  78                 	db	120	;'x'
   973  00FFC0  20                 	db	32
   974  00FFC1  25                 	db	37
   975  00FFC2  30                 	db	48	;'0'
   976  00FFC3  32                 	db	50	;'2'
   977  00FFC4  78                 	db	120	;'x'
   978  00FFC5  2F                 	db	47
   979  00FFC6  25                 	db	37
   980  00FFC7  30                 	db	48	;'0'
   981  00FFC8  32                 	db	50	;'2'
   982  00FFC9  78                 	db	120	;'x'
   983  00FFCA  2F                 	db	47
   984  00FFCB  25                 	db	37
   985  00FFCC  30                 	db	48	;'0'
   986  00FFCD  32                 	db	50	;'2'
   987  00FFCE  78                 	db	120	;'x'
   988  00FFCF  0D                 	db	13
   989  00FFD0  0A                 	db	10
   990  00FFD1  0A                 	db	10
   991  00FFD2  00                 	db	0
   992  00FFD3                     STR_4:
   993  00FFD3  45                 	db	69	;'E'
   994  00FFD4  43                 	db	67	;'C'
   995  00FFD5  45                 	db	69	;'E'
   996  00FFD6  33                 	db	51	;'3'
   997  00FFD7  33                 	db	51	;'3'
   998  00FFD8  30                 	db	48	;'0'
   999  00FFD9  31                 	db	49	;'1'
  1000  00FFDA  4C                 	db	76	;'L'
  1001  00FFDB  20                 	db	32
  1002  00FFDC  46                 	db	70	;'F'
  1003  00FFDD  61                 	db	97	;'a'
  1004  00FFDE  6C                 	db	108	;'l'
  1005  00FFDF  6C                 	db	108	;'l'
  1006  00FFE0  20                 	db	32
  1007  00FFE1  32                 	db	50	;'2'
  1008  00FFE2  32                 	db	50	;'2'
  1009  00FFE3  2D                 	db	45
  1010  00FFE4  53                 	db	83	;'S'
  1011  00FFE5  31                 	db	49	;'1'
  1012  00FFE6  00                 	db	0
  1013  00FFE7                     STR_6:
  1014  00FFE7  30                 	db	48	;'0'
  1015  00FFE8  31                 	db	49	;'1'
  1016  00FFE9  32                 	db	50	;'2'
  1017  00FFEA  33                 	db	51	;'3'
  1018  00FFEB  34                 	db	52	;'4'
  1019  00FFEC  35                 	db	53	;'5'
  1020  00FFED  36                 	db	54	;'6'
  1021  00FFEE  37                 	db	55	;'7'
  1022  00FFEF  38                 	db	56	;'8'
  1023  00FFF0  39                 	db	57	;'9'
  1024  00FFF1  61                 	db	97	;'a'
  1025  00FFF2  62                 	db	98	;'b'
  1026  00FFF3  63                 	db	99	;'c'
  1027  00FFF4  64                 	db	100	;'d'
  1028  00FFF5  65                 	db	101	;'e'
  1029  00FFF6  66                 	db	102	;'f'
  1030  00FFF7  00                 	db	0
  1031  00FFF8                     STR_5:
  1032  00FFF8  4C                 	db	76	;'L'
  1033  00FFF9  41                 	db	65	;'A'
  1034  00FFFA  42                 	db	66	;'B'
  1035  00FFFB  20                 	db	32
  1036  00FFFC  31                 	db	49	;'1'
  1037  00FFFD  31                 	db	49	;'1'
  1038  00FFFE  00                 	db	0
  1039                           
  1040                           ; #config settings
  1041  00FFFF  00                 	db	0	; dummy byte at the end
  1042  0000                     
  1043                           	psect	cinit
  1044  0011F4                     __pcinit:
  1045                           	opt stack 0
  1046  0011F4                     start_initialization:
  1047                           	opt stack 0
  1048  0011F4                     __initialization:
  1049                           	opt stack 0
  1050                           
  1051                           ; Clear objects allocated to BANK1 (31 bytes)
  1052  0011F4  EE01  F054         	lfsr	0,__pbssBANK1
  1053  0011F8  0E1F               	movlw	31
  1054  0011FA                     clear_0:
  1055  0011FA  6AEE               	clrf	postinc0,c
  1056  0011FC  06E8               	decf	wreg,f,c
  1057  0011FE  E1FD               	bnz	clear_0
  1058                           
  1059                           ; Clear objects allocated to COMRAM (41 bytes)
  1060  001200  EE00  F044         	lfsr	0,__pbssCOMRAM
  1061  001204  0E29               	movlw	41
  1062  001206                     clear_1:
  1063  001206  6AEE               	clrf	postinc0,c
  1064  001208  06E8               	decf	wreg,f,c
  1065  00120A  E1FD               	bnz	clear_1
  1066                           
  1067                           ; Initialize objects allocated to BANK1 (84 bytes)
  1068                           ; load TBLPTR registers with __pidataBANK1
  1069  00120C  0E04               	movlw	low __pidataBANK1
  1070  00120E  6EF6               	movwf	tblptrl,c
  1071  001210  0E14               	movlw	high __pidataBANK1
  1072  001212  6EF7               	movwf	tblptrh,c
  1073  001214  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1074  001216  6EF8               	movwf	tblptru,c
  1075  001218  EE01  F000         	lfsr	0,__pdataBANK1
  1076  00121C  EE10 F054          	lfsr	1,84
  1077  001220                     copy_data0:
  1078  001220  0009               	tblrd		*+
  1079  001222  CFF5 FFEE          	movff	tablat,postinc0
  1080  001226  50E5               	movf	postdec1,w,c
  1081  001228  50E1               	movf	fsr1l,w,c
  1082  00122A  E1FA               	bnz	copy_data0
  1083                           
  1084                           ; Initialize objects allocated to BANK0 (126 bytes)
  1085                           ; load TBLPTR registers with __pidataBANK0
  1086  00122C  0EFA               	movlw	low __pidataBANK0
  1087  00122E  6EF6               	movwf	tblptrl,c
  1088  001230  0E10               	movlw	high __pidataBANK0
  1089  001232  6EF7               	movwf	tblptrh,c
  1090  001234  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1091  001236  6EF8               	movwf	tblptru,c
  1092  001238  EE00  F080         	lfsr	0,__pdataBANK0
  1093  00123C  EE10 F07E          	lfsr	1,126
  1094  001240                     copy_data1:
  1095  001240  0009               	tblrd		*+
  1096  001242  CFF5 FFEE          	movff	tablat,postinc0
  1097  001246  50E5               	movf	postdec1,w,c
  1098  001248  50E1               	movf	fsr1l,w,c
  1099  00124A  E1FA               	bnz	copy_data1
  1100                           
  1101                           ; Initialize objects allocated to COMRAM (2 bytes)
  1102                           ; load TBLPTR registers with __pidataCOMRAM
  1103  00124C  0E00               	movlw	low __pidataCOMRAM
  1104  00124E  6EF6               	movwf	tblptrl,c
  1105  001250  0E1A               	movlw	high __pidataCOMRAM
  1106  001252  6EF7               	movwf	tblptrh,c
  1107  001254  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1108  001256  6EF8               	movwf	tblptru,c
  1109  001258  0009               	tblrd		*+	;fetch initializer
  1110  00125A  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1111  00125E  0009               	tblrd		*+	;fetch initializer
  1112  001260  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1113  001264                     end_of_initialization:
  1114                           	opt stack 0
  1115  001264                     __end_of__initialization:
  1116                           	opt stack 0
  1117  001264  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1118  001266  6EF8               	movwf	tblptru,c
  1119  001268  0100               	movlb	0
  1120  00126A  EFBB  F001         	goto	_main	;jump to C main() function
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	bssCOMRAM
  1131  000044                     __pbssCOMRAM:
  1132                           	opt stack 0
  1133  000044                     _Nec_code:
  1134                           	opt stack 0
  1135  000044                     	ds	4
  1136  000048                     _Time_Elapsed:
  1137                           	opt stack 0
  1138  000048                     	ds	2
  1139  00004A                     _nbr:
  1140                           	opt stack 0
  1141  00004A                     	ds	2
  1142  00004C                     _nec_ok:
  1143                           	opt stack 0
  1144  00004C                     	ds	2
  1145  00004E                     _txt:
  1146                           	opt stack 0
  1147  00004E                     	ds	2
  1148  000050                     _Nec_code1:
  1149                           	opt stack 0
  1150  000050                     	ds	1
  1151  000051                     _Nec_state:
  1152                           	opt stack 0
  1153  000051                     	ds	1
  1154  000052                     _TempSecond:
  1155                           	opt stack 0
  1156  000052                     	ds	1
  1157  000053                     __tft_type:
  1158                           	opt stack 0
  1159  000053                     	ds	1
  1160  000054                     _alarm_date:
  1161                           	opt stack 0
  1162  000054                     	ds	1
  1163  000055                     _alarm_hour:
  1164                           	opt stack 0
  1165  000055                     	ds	1
  1166  000056                     _alarm_minute:
  1167                           	opt stack 0
  1168  000056                     	ds	1
  1169  000057                     _alarm_second:
  1170                           	opt stack 0
  1171  000057                     	ds	1
  1172  000058                     _bit_count:
  1173                           	opt stack 0
  1174  000058                     	ds	1
  1175  000059                     _colstart:
  1176                           	opt stack 0
  1177  000059                     	ds	1
  1178  00005A                     _day:
  1179                           	opt stack 0
  1180  00005A                     	ds	1
  1181  00005B                     _dow:
  1182                           	opt stack 0
  1183  00005B                     	ds	1
  1184  00005C                     _found:
  1185                           	opt stack 0
  1186  00005C                     	ds	1
  1187  00005D                     _hour:
  1188                           	opt stack 0
  1189  00005D                     	ds	1
  1190  00005E                     _i:
  1191                           	opt stack 0
  1192  00005E                     	ds	1
  1193  00005F                     _minute:
  1194                           	opt stack 0
  1195  00005F                     	ds	1
  1196  000060                     _month:
  1197                           	opt stack 0
  1198  000060                     	ds	1
  1199  000061                     _rowstart:
  1200                           	opt stack 0
  1201  000061                     	ds	1
  1202  000062                     _second:
  1203                           	opt stack 0
  1204  000062                     	ds	1
  1205  000063                     _setup_alarm_hour:
  1206                           	opt stack 0
  1207  000063                     	ds	1
  1208  000064                     _setup_alarm_minute:
  1209                           	opt stack 0
  1210  000064                     	ds	1
  1211  000065                     _setup_alarm_second:
  1212                           	opt stack 0
  1213  000065                     	ds	1
  1214  000066                     _setup_day:
  1215                           	opt stack 0
  1216  000066                     	ds	1
  1217  000067                     _setup_hour:
  1218                           	opt stack 0
  1219  000067                     	ds	1
  1220  000068                     _setup_minute:
  1221                           	opt stack 0
  1222  000068                     	ds	1
  1223  000069                     _setup_month:
  1224                           	opt stack 0
  1225  000069                     	ds	1
  1226  00006A                     _setup_second:
  1227                           	opt stack 0
  1228  00006A                     	ds	1
  1229  00006B                     _setup_year:
  1230                           	opt stack 0
  1231  00006B                     	ds	1
  1232  00006C                     _year:
  1233                           	opt stack 0
  1234  00006C                     	ds	1
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           
  1244                           	psect	dataCOMRAM
  1245  00006D                     __pdataCOMRAM:
  1246                           	opt stack 0
  1247  00006D                     _tempSecond:
  1248                           	opt stack 0
  1249  00006D                     	ds	1
  1250  00006E                     _wrap:
  1251                           	opt stack 0
  1252  00006E                     	ds	1
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           postdec1	equ	0xFE5
  1260                           fsr1l	equ	0xFE1
  1261                           
  1262                           	psect	dataBANK0
  1263  000080                     __pdataBANK0:
  1264                           	opt stack 0
  1265  000080                     _color:
  1266                           	opt stack 0
  1267  000080                     	ds	42
  1268  0000AA                     _D1:
  1269                           	opt stack 0
  1270  0000AA                     	ds	21
  1271  0000BF                     _D2:
  1272                           	opt stack 0
  1273  0000BF                     	ds	21
  1274  0000D4                     _D3:
  1275                           	opt stack 0
  1276  0000D4                     	ds	21
  1277  0000E9                     _array1:
  1278                           	opt stack 0
  1279  0000E9                     	ds	21
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	bssBANK1
  1290  000154                     __pbssBANK1:
  1291                           	opt stack 0
  1292  000154                     _buffer:
  1293                           	opt stack 0
  1294  000154                     	ds	31
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           postdec1	equ	0xFE5
  1302                           fsr1l	equ	0xFE1
  1303                           
  1304                           	psect	dataBANK1
  1305  000100                     __pdataBANK1:
  1306                           	opt stack 0
  1307  000100                     _txt1:
  1308                           	opt stack 0
  1309  000100                     	ds	84
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           
  1319                           	psect	cstackBANK1
  1320  000173                     __pcstackBANK1:
  1321                           	opt stack 0
  1322  000173                     drawtext@x:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x0
  1326  000173                     	ds	1
  1327  000174                     drawtext@textsize:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x1
  1331  000174                     	ds	2
  1332  000176                     drawtext@i:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x3
  1336  000176                     	ds	2
  1337  000178                     drawtext@cursor_y:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x5
  1341  000178                     	ds	1
  1342  000179                     drawtext@cursor_x:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x6
  1346  000179                     	ds	1
  1347  00017A                     main@tempF:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x7
  1351  00017A                     	ds	1
  1352  00017B                     main@tempC:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x8
  1356  00017B                     	ds	1
  1357  00017C                     main@tempF_899:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x9
  1361  00017C                     	ds	1
  1362  00017D                     main@tempC_898:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0xA
  1366  00017D                     	ds	1
  1367  00017E                     main@i:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0xB
  1371  00017E                     	ds	2
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	cstackCOMRAM
  1382  000001                     __pcstackCOMRAM:
  1383                           	opt stack 0
  1384  000001                     ??_INT0_isr:
  1385  000001                     
  1386                           ; 1 bytes @ 0x0
  1387  000001                     	ds	2
  1388  000003                     ??_chkisr:
  1389                           
  1390                           ; 0 bytes @ 0x2
  1391  000003                     	ds	14
  1392  000011                     ??_isdigit:
  1393  000011                     ?_strlen:
  1394                           	opt stack 0
  1395  000011                     ?___wmul:
  1396                           	opt stack 0
  1397  000011                     ?___lwdiv:
  1398                           	opt stack 0
  1399  000011                     spiwrite@x:
  1400                           	opt stack 0
  1401  000011                     putch@c:
  1402                           	opt stack 0
  1403  000011                     I2C_Read@ack:
  1404                           	opt stack 0
  1405  000011                     I2C_Write@outByte:
  1406                           	opt stack 0
  1407  000011                     Wait_One_Sec@k:
  1408                           	opt stack 0
  1409  000011                     OpenUSART@spbrg:
  1410                           	opt stack 0
  1411  000011                     ___wmul@multiplier:
  1412                           	opt stack 0
  1413  000011                     ___lwdiv@dividend:
  1414                           	opt stack 0
  1415  000011                     strcpy@to:
  1416                           	opt stack 0
  1417  000011                     strlen@s:
  1418                           	opt stack 0
  1419  000011                     I2C_Init@c:
  1420                           	opt stack 0
  1421                           
  1422                           ; 4 bytes @ 0x10
  1423  000011                     	ds	1
  1424  000012                     spiwrite@spidata:
  1425                           	opt stack 0
  1426  000012                     I2C_Read@n:
  1427                           	opt stack 0
  1428  000012                     I2C_Write@n:
  1429                           	opt stack 0
  1430  000012                     _isdigit$1907:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x11
  1434  000012                     	ds	1
  1435  000013                     ??_strlen:
  1436  000013                     write_command@cmd_:
  1437                           	opt stack 0
  1438  000013                     write_data@data_:
  1439                           	opt stack 0
  1440  000013                     I2C_Read@inByte:
  1441                           	opt stack 0
  1442  000013                     I2C_Write_Cmd_Only@Cmd:
  1443                           	opt stack 0
  1444  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1445                           	opt stack 0
  1446  000013                     DS3231_Setup_Time@Device:
  1447                           	opt stack 0
  1448  000013                     OpenUSART@config:
  1449                           	opt stack 0
  1450  000013                     isdigit@c:
  1451                           	opt stack 0
  1452  000013                     ___wmul@multiplicand:
  1453                           	opt stack 0
  1454  000013                     ___lwdiv@divisor:
  1455                           	opt stack 0
  1456  000013                     strcpy@from:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x12
  1460  000013                     	ds	1
  1461  000014                     ?_DS1621_Read_Temp:
  1462                           	opt stack 0
  1463  000014                     setAddrWindow@y0:
  1464                           	opt stack 0
  1465  000014                     I2C_Write_Cmd_Only@Device:
  1466                           	opt stack 0
  1467  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1468                           	opt stack 0
  1469  000014                     DS3231_Read_Time@Address:
  1470                           	opt stack 0
  1471  000014                     DS3231_Setup_Time@Address:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x13
  1475  000014                     	ds	1
  1476  000015                     setAddrWindow@x1:
  1477                           	opt stack 0
  1478  000015                     I2C_Write_Cmd_Write_Data@Device:
  1479                           	opt stack 0
  1480  000015                     DS3231_Read_Time@Device:
  1481                           	opt stack 0
  1482  000015                     ___lwdiv@counter:
  1483                           	opt stack 0
  1484  000015                     ___wmul@product:
  1485                           	opt stack 0
  1486  000015                     strcpy@cp:
  1487                           	opt stack 0
  1488  000015                     strlen@cp:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x14
  1492  000015                     	ds	1
  1493  000016                     setAddrWindow@y1:
  1494                           	opt stack 0
  1495  000016                     DS1621_Init@Device:
  1496                           	opt stack 0
  1497  000016                     DS1621_Read_Temp@Cmd:
  1498                           	opt stack 0
  1499  000016                     ___lwdiv@quotient:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x15
  1503  000016                     	ds	1
  1504  000017                     ?___awdiv:
  1505                           	opt stack 0
  1506  000017                     setAddrWindow@x0:
  1507                           	opt stack 0
  1508  000017                     DS1621_Read_Temp@Data_Ret:
  1509                           	opt stack 0
  1510  000017                     delay_ms@ms:
  1511                           	opt stack 0
  1512  000017                     ___awdiv@dividend:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x16
  1516  000017                     	ds	1
  1517  000018                     ?___lwmod:
  1518                           	opt stack 0
  1519  000018                     drawPixel@y:
  1520                           	opt stack 0
  1521  000018                     drawFastVLine@y:
  1522                           	opt stack 0
  1523  000018                     fillRectangle@y:
  1524                           	opt stack 0
  1525  000018                     DS1621_Read_Temp@Device:
  1526                           	opt stack 0
  1527  000018                     ___lwmod@dividend:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x17
  1531  000018                     	ds	1
  1532  000019                     ??_delay_ms:
  1533  000019                     drawFastVLine@h:
  1534                           	opt stack 0
  1535  000019                     fillRectangle@w:
  1536                           	opt stack 0
  1537  000019                     drawPixel@color:
  1538                           	opt stack 0
  1539  000019                     ___awdiv@divisor:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x18
  1543  000019                     	ds	1
  1544  00001A                     fillRectangle@h:
  1545                           	opt stack 0
  1546  00001A                     drawFastVLine@color:
  1547                           	opt stack 0
  1548  00001A                     ___lwmod@divisor:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x19
  1552  00001A                     	ds	1
  1553  00001B                     drawPixel@x:
  1554                           	opt stack 0
  1555  00001B                     ___awdiv@counter:
  1556                           	opt stack 0
  1557  00001B                     delay_ms@count:
  1558                           	opt stack 0
  1559  00001B                     fillRectangle@color:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x1A
  1563  00001B                     	ds	1
  1564  00001C                     ??_drawFastVLine:
  1565  00001C                     ___awdiv@sign:
  1566                           	opt stack 0
  1567  00001C                     ___lwmod@counter:
  1568                           	opt stack 0
  1569  00001C                     drawCircle@x0:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x1B
  1573  00001C                     	ds	1
  1574  00001D                     ??_fillRectangle:
  1575  00001D                     ?_printf:
  1576                           	opt stack 0
  1577  00001D                     printf@f:
  1578                           	opt stack 0
  1579  00001D                     ___awdiv@quotient:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x1C
  1583  00001D                     	ds	1
  1584  00001E                     drawCircle@y0:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x1D
  1588  00001E                     	ds	2
  1589  000020                     drawFastVLine@hi:
  1590                           	opt stack 0
  1591  000020                     drawCircle@r:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x1F
  1595  000020                     	ds	1
  1596  000021                     drawFastVLine@lo:
  1597                           	opt stack 0
  1598  000021                     fillRectangle@hi:
  1599                           	opt stack 0
  1600                           
  1601                           ; 1 bytes @ 0x20
  1602  000021                     	ds	1
  1603  000022                     drawFastVLine@x:
  1604                           	opt stack 0
  1605  000022                     fillRectangle@lo:
  1606                           	opt stack 0
  1607  000022                     drawCircle@color:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x21
  1611  000022                     	ds	1
  1612  000023                     fillRect@y:
  1613                           	opt stack 0
  1614  000023                     fillRectangle@x:
  1615                           	opt stack 0
  1616  000023                     fillCircleHelper@x0:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x22
  1620  000023                     	ds	1
  1621  000024                     ??_drawCircle:
  1622  000024                     fillRect@w:
  1623                           	opt stack 0
  1624  000024                     fillScreen@color:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x23
  1628  000024                     	ds	1
  1629  000025                     fillRect@h:
  1630                           	opt stack 0
  1631  000025                     fillCircleHelper@y0:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x24
  1635  000025                     	ds	1
  1636  000026                     fillRect@color:
  1637                           	opt stack 0
  1638  000026                     drawCircle@ddF_x:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x25
  1642  000026                     	ds	1
  1643  000027                     fillCircleHelper@r:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x26
  1647  000027                     	ds	1
  1648  000028                     ??_fillRect:
  1649  000028                     drawCircle@ddF_y:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x27
  1653  000028                     	ds	1
  1654  000029                     fillCircleHelper@cornername:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x28
  1658  000029                     	ds	1
  1659  00002A                     drawCircle@f:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x29
  1663  00002A                     	ds	1
  1664  00002B                     ??_printf:
  1665  00002B                     fillRect@x:
  1666                           	opt stack 0
  1667  00002B                     fillCircleHelper@delta:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x2A
  1671  00002B                     	ds	1
  1672  00002C                     fillRect@i:
  1673                           	opt stack 0
  1674  00002C                     drawCircle@x:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x2B
  1678  00002C                     	ds	1
  1679  00002D                     fillCircleHelper@color:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x2C
  1683  00002D                     	ds	1
  1684  00002E                     drawChar@y:
  1685                           	opt stack 0
  1686  00002E                     drawCircle@y:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x2D
  1690  00002E                     	ds	1
  1691  00002F                     ??_fillCircleHelper:
  1692  00002F                     drawChar@c:
  1693                           	opt stack 0
  1694  00002F                     printf@idx:
  1695                           	opt stack 0
  1696                           
  1697                           ; 1 bytes @ 0x2E
  1698  00002F                     	ds	1
  1699  000030                     drawChar@color:
  1700                           	opt stack 0
  1701  000030                     printf@ap:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x2F
  1705  000030                     	ds	1
  1706  000031                     fillCircleHelper@ddF_x:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x30
  1710  000031                     	ds	1
  1711  000032                     printf@prec:
  1712                           	opt stack 0
  1713  000032                     drawChar@bg:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x31
  1717  000032                     	ds	1
  1718  000033                     fillCircleHelper@ddF_y:
  1719                           	opt stack 0
  1720  000033                     printf@val:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x32
  1724  000033                     	ds	1
  1725  000034                     drawChar@size:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x33
  1729  000034                     	ds	1
  1730  000035                     drawChar@line:
  1731                           	opt stack 0
  1732  000035                     printf@flag:
  1733                           	opt stack 0
  1734  000035                     fillCircleHelper@f:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x34
  1738  000035                     	ds	1
  1739  000036                     drawChar@x:
  1740                           	opt stack 0
  1741  000036                     printf@width:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x35
  1745  000036                     	ds	1
  1746  000037                     drawChar@j:
  1747                           	opt stack 0
  1748  000037                     fillCircleHelper@x:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x36
  1752  000037                     	ds	1
  1753  000038                     drawChar@i:
  1754                           	opt stack 0
  1755  000038                     printf@c:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x37
  1759  000038                     	ds	1
  1760  000039                     drawtext@y:
  1761                           	opt stack 0
  1762  000039                     fillCircleHelper@y:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x38
  1766  000039                     	ds	1
  1767  00003A                     drawtext@_text:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x39
  1771  00003A                     	ds	1
  1772  00003B                     fillCircle@x0:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x3A
  1776  00003B                     	ds	1
  1777  00003C                     drawtext@color:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x3B
  1781  00003C                     	ds	1
  1782  00003D                     fillCircle@y0:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x3C
  1786  00003D                     	ds	1
  1787  00003E                     drawtext@bg:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x3D
  1791  00003E                     	ds	1
  1792  00003F                     fillCircle@r:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x3E
  1796  00003F                     	ds	1
  1797  000040                     drawtext@size:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x3F
  1801  000040                     	ds	1
  1802  000041                     ??_drawtext:
  1803  000041                     fillCircle@color:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x40
  1807  000041                     	ds	2
  1808  000043                     ??_main:
  1809                           
  1810                           ; 0 bytes @ 0x42
  1811  000043                     	ds	1
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postdec1	equ	0xFE5
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821 ;;
  1822 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1823 ;;
  1824 ;; *************** function _main *****************
  1825 ;; Defined at:
  1826 ;;		line 143 in file "Lab11p1.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  i               2   11[BANK1 ] int 
  1831 ;;  tempC           1   10[BANK1 ] char 
  1832 ;;  tempF           1    9[BANK1 ] char 
  1833 ;;  tempC           1    8[BANK1 ] char 
  1834 ;;  tempF           1    7[BANK1 ] char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;		None               void
  1837 ;; Registers used:
  1838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         1       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        7 bytes
  1849 ;; Hardware stack levels required when called:   11
  1850 ;; This function calls:
  1851 ;;		_Activate_Buzzer
  1852 ;;		_DS1621_Read_Temp
  1853 ;;		_DS3231_Read_Time
  1854 ;;		_DS3231_Setup_Time
  1855 ;;		_Deactivate_Buzzer
  1856 ;;		_Do_Init
  1857 ;;		_Initialize_Screen
  1858 ;;		_Wait_One_Sec
  1859 ;;		___awdiv
  1860 ;;		___wmul
  1861 ;;		_drawCircle
  1862 ;;		_drawtext
  1863 ;;		_fillCircle
  1864 ;;		_init_INTERRUPT
  1865 ;;		_printf
  1866 ;; This function is called by:
  1867 ;;		Startup code after reset
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text0
  1872  000376                     __ptext0:
  1873                           	opt stack 0
  1874  000376                     _main:
  1875                           	opt stack 20
  1876                           
  1877                           ;Lab11p1.c: 145: Do_Init();
  1878                           
  1879                           ;incstack = 0
  1880  000376  EC14  F00B         	call	_Do_Init	;wreg free
  1881                           
  1882                           ;Lab11p1.c: 146: DS3231_Setup_Time();
  1883  00037A  EC6F  F009         	call	_DS3231_Setup_Time	;wreg free
  1884                           
  1885                           ;Lab11p1.c: 147: init_INTERRUPT();
  1886  00037E  EC66  F00C         	call	_init_INTERRUPT	;wreg free
  1887                           
  1888                           ;Lab11p1.c: 148: Initialize_Screen();
  1889  000382  ECF2  F007         	call	_Initialize_Screen	;wreg free
  1890  000386  D000               	goto	l5339
  1891  000388                     l5339:
  1892                           
  1893                           ;Lab11p1.c: 151: {
  1894                           ;Lab11p1.c: 153: signed char tempC = DS1621_Read_Temp();
  1895  000388  EC91  F00B         	call	_DS1621_Read_Temp	;wreg free
  1896  00038C  5014               	movf	?_DS1621_Read_Temp,w,c
  1897  00038E  0101               	movlb	1	; () banked
  1898  000390  6F7B               	movwf	main@tempC& (0+255),b
  1899                           
  1900                           ; BSR set to: 1
  1901                           ;Lab11p1.c: 154: signed char tempF = (tempC * 9 / 5) + 32;
  1902  000392  0101               	movlb	1	; () banked
  1903  000394  517B               	movf	main@tempC& (0+255),w,b
  1904  000396  6E11               	movwf	___wmul@multiplier,c
  1905  000398  6A12               	clrf	___wmul@multiplier+1,c
  1906  00039A  BE11               	btfsc	___wmul@multiplier,7,c
  1907  00039C  0612               	decf	___wmul@multiplier+1,f,c
  1908  00039E  0E00               	movlw	0
  1909  0003A0  6E14               	movwf	___wmul@multiplicand+1,c
  1910  0003A2  0E09               	movlw	9
  1911  0003A4  6E13               	movwf	___wmul@multiplicand,c
  1912  0003A6  ECF5  F00B         	call	___wmul	;wreg free
  1913  0003AA  C011  F017         	movff	?___wmul,___awdiv@dividend
  1914  0003AE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1915  0003B2  0E00               	movlw	0
  1916  0003B4  6E1A               	movwf	___awdiv@divisor+1,c
  1917  0003B6  0E05               	movlw	5
  1918  0003B8  6E19               	movwf	___awdiv@divisor,c
  1919  0003BA  ECA7  F007         	call	___awdiv	;wreg free
  1920  0003BE  5017               	movf	?___awdiv,w,c
  1921  0003C0  0F20               	addlw	32
  1922  0003C2  0101               	movlb	1	; () banked
  1923  0003C4  6F7A               	movwf	main@tempF& (0+255),b
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;Lab11p1.c: 160: DS3231_Read_Time();
  1927  0003C6  ECA2  F009         	call	_DS3231_Read_Time	;wreg free
  1928                           
  1929                           ;Lab11p1.c: 161: if(tempSecond != second)
  1930  0003CA  5062               	movf	_second,w,c
  1931  0003CC  186D               	xorwf	_tempSecond,w,c
  1932  0003CE  B4D8               	btfsc	status,2,c
  1933  0003D0  D054               	goto	l5361
  1934                           
  1935                           ;Lab11p1.c: 162: {
  1936                           ;Lab11p1.c: 163: tempSecond = second;
  1937  0003D2  C062  F06D         	movff	_second,_tempSecond
  1938                           
  1939                           ;Lab11p1.c: 164: signed char tempC = DS1621_Read_Temp();
  1940  0003D6  EC91  F00B         	call	_DS1621_Read_Temp	;wreg free
  1941  0003DA  5014               	movf	?_DS1621_Read_Temp,w,c
  1942  0003DC  0101               	movlb	1	; () banked
  1943  0003DE  6F7D               	movwf	main@tempC_898& (0+255),b
  1944                           
  1945                           ; BSR set to: 1
  1946                           ;Lab11p1.c: 165: signed char tempF = (tempC * 9 / 5) + 32;
  1947  0003E0  0101               	movlb	1	; () banked
  1948  0003E2  517D               	movf	main@tempC_898& (0+255),w,b
  1949  0003E4  6E11               	movwf	___wmul@multiplier,c
  1950  0003E6  6A12               	clrf	___wmul@multiplier+1,c
  1951  0003E8  BE11               	btfsc	___wmul@multiplier,7,c
  1952  0003EA  0612               	decf	___wmul@multiplier+1,f,c
  1953  0003EC  0E00               	movlw	0
  1954  0003EE  6E14               	movwf	___wmul@multiplicand+1,c
  1955  0003F0  0E09               	movlw	9
  1956  0003F2  6E13               	movwf	___wmul@multiplicand,c
  1957  0003F4  ECF5  F00B         	call	___wmul	;wreg free
  1958  0003F8  C011  F017         	movff	?___wmul,___awdiv@dividend
  1959  0003FC  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1960  000400  0E00               	movlw	0
  1961  000402  6E1A               	movwf	___awdiv@divisor+1,c
  1962  000404  0E05               	movlw	5
  1963  000406  6E19               	movwf	___awdiv@divisor,c
  1964  000408  ECA7  F007         	call	___awdiv	;wreg free
  1965  00040C  5017               	movf	?___awdiv,w,c
  1966  00040E  0F20               	addlw	32
  1967  000410  0101               	movlb	1	; () banked
  1968  000412  6F7C               	movwf	main@tempF_899& (0+255),b
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;Lab11p1.c: 166: printf (" %02x:%02x:%02x %02x/%02x/%02x\r\n\n",hour,minute,second,month
      +                          ,day,year);
  1972  000414  0EB1               	movlw	low STR_1
  1973  000416  6E1D               	movwf	printf@f,c
  1974  000418  0EFF               	movlw	high STR_1
  1975  00041A  6E1E               	movwf	printf@f+1,c
  1976  00041C  C05D  F01F         	movff	_hour,?_printf+2
  1977  000420  6A20               	clrf	?_printf+3,c
  1978  000422  C05F  F021         	movff	_minute,?_printf+4
  1979  000426  6A22               	clrf	?_printf+5,c
  1980  000428  C062  F023         	movff	_second,?_printf+6
  1981  00042C  6A24               	clrf	?_printf+7,c
  1982  00042E  C060  F025         	movff	_month,?_printf+8
  1983  000432  6A26               	clrf	?_printf+9,c
  1984  000434  C05A  F027         	movff	_day,?_printf+10
  1985  000438  6A28               	clrf	?_printf+11,c
  1986  00043A  C06C  F029         	movff	_year,?_printf+12
  1987  00043E  6A2A               	clrf	?_printf+13,c
  1988  000440  EC0E  F000         	call	_printf	;wreg free
  1989                           
  1990                           ;Lab11p1.c: 168: printf (" Temperature = %d degreesC = %d degreesF\r\n\n", tempC, tempF)
      +                          ;
  1991  000444  0E85               	movlw	low STR_2
  1992  000446  6E1D               	movwf	printf@f,c
  1993  000448  0EFF               	movlw	high STR_2
  1994  00044A  6E1E               	movwf	printf@f+1,c
  1995  00044C  0101               	movlb	1	; () banked
  1996  00044E  517D               	movf	main@tempC_898& (0+255),w,b
  1997  000450  6E1F               	movwf	?_printf+2,c
  1998  000452  6A20               	clrf	?_printf+3,c
  1999  000454  BE1F               	btfsc	?_printf+2,7,c
  2000  000456  0620               	decf	?_printf+3,f,c
  2001  000458  0101               	movlb	1	; () banked
  2002  00045A  517C               	movf	main@tempF_899& (0+255),w,b
  2003  00045C  6E21               	movwf	?_printf+4,c
  2004  00045E  6A22               	clrf	?_printf+5,c
  2005  000460  BE21               	btfsc	?_printf+4,7,c
  2006  000462  0622               	decf	?_printf+5,f,c
  2007  000464  EC0E  F000         	call	_printf	;wreg free
  2008                           
  2009                           ;Lab11p1.c: 169: printf("------------------------------------------------------------\r\
      +                          n");
  2010  000468  0E46               	movlw	low STR_3
  2011  00046A  6E1D               	movwf	printf@f,c
  2012  00046C  0EFF               	movlw	high STR_3
  2013  00046E  6E1E               	movwf	printf@f+1,c
  2014  000470  EC0E  F000         	call	_printf	;wreg free
  2015                           
  2016                           ;Lab11p1.c: 170: Wait_One_Sec();
  2017  000474  EC09  F00C         	call	_Wait_One_Sec	;wreg free
  2018  000478  D000               	goto	l5361
  2019  00047A                     l5361:
  2020                           
  2021                           ;Lab11p1.c: 171: }
  2022                           ;Lab11p1.c: 173: if (nec_ok == 1)
  2023  00047A  044C               	decf	_nec_ok,w,c
  2024  00047C  104D               	iorwf	_nec_ok+1,w,c
  2025  00047E  A4D8               	btfss	status,2,c
  2026  000480  D783               	goto	l5339
  2027                           
  2028                           ;Lab11p1.c: 174: {
  2029                           ;Lab11p1.c: 175: nec_ok = 0;
  2030  000482  0E00               	movlw	0
  2031  000484  6E4D               	movwf	_nec_ok+1,c
  2032  000486  0E00               	movlw	0
  2033  000488  6E4C               	movwf	_nec_ok,c
  2034                           
  2035                           ;Lab11p1.c: 178: INTCONbits.INT0IE = 1;
  2036  00048A  88F2               	bsf	intcon,4,c	;volatile
  2037                           
  2038                           ;Lab11p1.c: 179: INTCON2bits.INTEDG0 = 0;
  2039  00048C  9CF1               	bcf	intcon2,6,c	;volatile
  2040                           
  2041                           ;Lab11p1.c: 181: found = 0xff;
  2042  00048E  685C               	setf	_found,c
  2043                           
  2044                           ;Lab11p1.c: 184: for(int i = 0;i < 21;i++)
  2045  000490  0E00               	movlw	0
  2046  000492  0101               	movlb	1	; () banked
  2047  000494  6F7F               	movwf	(main@i+1)& (0+255),b
  2048  000496  0E00               	movlw	0
  2049  000498  6F7E               	movwf	main@i& (0+255),b
  2050  00049A                     l5371:
  2051                           
  2052                           ; BSR set to: 1
  2053  00049A  0101               	movlb	1	; () banked
  2054  00049C  BF7F               	btfsc	(main@i+1)& (0+255),7,b
  2055  00049E  D00A               	goto	l5375
  2056  0004A0  0101               	movlb	1	; () banked
  2057  0004A2  517F               	movf	(main@i+1)& (0+255),w,b
  2058  0004A4  E121               	bnz	l5387
  2059  0004A6  0E15               	movlw	21
  2060  0004A8  0101               	movlb	1	; () banked
  2061  0004AA  5D7E               	subwf	main@i& (0+255),w,b
  2062  0004AC  B0D8               	btfsc	status,0,c
  2063  0004AE  D01C               	goto	l5387
  2064  0004B0  D001               	goto	l5375
  2065                           
  2066                           ; BSR set to: 1
  2067  0004B2  D01A               	goto	l5387
  2068  0004B4                     l5375:
  2069                           
  2070                           ; BSR set to: 1
  2071                           ;Lab11p1.c: 185: {
  2072                           ;Lab11p1.c: 186: if(array1[i] == Nec_code1)
  2073  0004B4  0EE9               	movlw	low _array1
  2074  0004B6  0101               	movlb	1	; () banked
  2075  0004B8  257E               	addwf	main@i& (0+255),w,b
  2076  0004BA  6ED9               	movwf	fsr2l,c
  2077  0004BC  0E00               	movlw	high _array1
  2078  0004BE  0101               	movlb	1	; () banked
  2079  0004C0  217F               	addwfc	(main@i+1)& (0+255),w,b
  2080  0004C2  6EDA               	movwf	fsr2h,c
  2081  0004C4  5050               	movf	_Nec_code1,w,c
  2082  0004C6  18DE               	xorwf	postinc2,w,c
  2083  0004C8  A4D8               	btfss	status,2,c
  2084  0004CA  D009               	goto	l5383
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;Lab11p1.c: 187: {
  2088                           ;Lab11p1.c: 188: found = i;
  2089  0004CC  C17E  F05C         	movff	main@i,_found
  2090                           
  2091                           ; BSR set to: 1
  2092                           ;Lab11p1.c: 189: if (found == 13){
  2093  0004D0  0E0D               	movlw	13
  2094  0004D2  185C               	xorwf	_found,w,c
  2095  0004D4  A4D8               	btfss	status,2,c
  2096  0004D6  D008               	goto	l5387
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;Lab11p1.c: 190: DS3231_Setup_Time();
  2100  0004D8  EC6F  F009         	call	_DS3231_Setup_Time	;wreg free
  2101                           
  2102                           ;Lab11p1.c: 191: }
  2103                           ;Lab11p1.c: 192: break;
  2104  0004DC  D005               	goto	l5387
  2105  0004DE                     l5383:
  2106  0004DE  0101               	movlb	1	; () banked
  2107  0004E0  4B7E               	infsnz	main@i& (0+255),f,b
  2108  0004E2  2B7F               	incf	(main@i+1)& (0+255),f,b
  2109  0004E4  D7DA               	goto	l5371
  2110                           
  2111                           ; BSR set to: 1
  2112  0004E6  D000               	goto	l5387
  2113  0004E8                     l5387:
  2114                           
  2115                           ;Lab11p1.c: 193: }
  2116                           ;Lab11p1.c: 194: }
  2117                           ;Lab11p1.c: 200: if (found != 0xff)
  2118  0004E8  285C               	incf	_found,w,c
  2119  0004EA  B4D8               	btfsc	status,2,c
  2120  0004EC  D74D               	goto	l5339
  2121                           
  2122                           ;Lab11p1.c: 201: {
  2123                           ;Lab11p1.c: 202: fillCircle(60, 80, 20, color[found]);
  2124  0004EE  0E00               	movlw	0
  2125  0004F0  6E3C               	movwf	fillCircle@x0+1,c
  2126  0004F2  0E3C               	movlw	60
  2127  0004F4  6E3B               	movwf	fillCircle@x0,c
  2128  0004F6  0E00               	movlw	0
  2129  0004F8  6E3E               	movwf	fillCircle@y0+1,c
  2130  0004FA  0E50               	movlw	80
  2131  0004FC  6E3D               	movwf	fillCircle@y0,c
  2132  0004FE  0E00               	movlw	0
  2133  000500  6E40               	movwf	fillCircle@r+1,c
  2134  000502  0E14               	movlw	20
  2135  000504  6E3F               	movwf	fillCircle@r,c
  2136  000506  505C               	movf	_found,w,c
  2137  000508  0D02               	mullw	2
  2138  00050A  0E80               	movlw	low _color
  2139  00050C  24F3               	addwf	prodl,w,c
  2140  00050E  6ED9               	movwf	fsr2l,c
  2141  000510  0E00               	movlw	high _color
  2142  000512  20F4               	addwfc	prodh,w,c
  2143  000514  6EDA               	movwf	fsr2h,c
  2144  000516  CFDE F041          	movff	postinc2,fillCircle@color
  2145  00051A  CFDD F042          	movff	postdec2,fillCircle@color+1
  2146  00051E  EC2C  F00A         	call	_fillCircle	;wreg free
  2147                           
  2148                           ;Lab11p1.c: 203: drawCircle(60, 80, 20, 0xFFFF);
  2149  000522  0E00               	movlw	0
  2150  000524  6E1D               	movwf	drawCircle@x0+1,c
  2151  000526  0E3C               	movlw	60
  2152  000528  6E1C               	movwf	drawCircle@x0,c
  2153  00052A  0E00               	movlw	0
  2154  00052C  6E1F               	movwf	drawCircle@y0+1,c
  2155  00052E  0E50               	movlw	80
  2156  000530  6E1E               	movwf	drawCircle@y0,c
  2157  000532  0E00               	movlw	0
  2158  000534  6E21               	movwf	drawCircle@r+1,c
  2159  000536  0E14               	movlw	20
  2160  000538  6E20               	movwf	drawCircle@r,c
  2161  00053A  0EFF               	movlw	255
  2162  00053C  6E23               	movwf	drawCircle@color+1,c
  2163  00053E  6822               	setf	drawCircle@color,c
  2164  000540  ECE9  F002         	call	_drawCircle	;wreg free
  2165                           
  2166                           ;Lab11p1.c: 204: drawtext(52, 77, txt1[found], 0x0000, color[found],1);
  2167  000544  0E4D               	movlw	77
  2168  000546  6E39               	movwf	drawtext@y,c
  2169  000548  505C               	movf	_found,w,c
  2170  00054A  0D04               	mullw	4
  2171  00054C  0E00               	movlw	low _txt1
  2172  00054E  24F3               	addwf	prodl,w,c
  2173  000550  6E3A               	movwf	drawtext@_text,c
  2174  000552  0E01               	movlw	high _txt1
  2175  000554  20F4               	addwfc	prodh,w,c
  2176  000556  6E3B               	movwf	drawtext@_text+1,c
  2177  000558  0E00               	movlw	0
  2178  00055A  6E3D               	movwf	drawtext@color+1,c
  2179  00055C  0E00               	movlw	0
  2180  00055E  6E3C               	movwf	drawtext@color,c
  2181  000560  505C               	movf	_found,w,c
  2182  000562  0D02               	mullw	2
  2183  000564  0E80               	movlw	low _color
  2184  000566  24F3               	addwf	prodl,w,c
  2185  000568  6ED9               	movwf	fsr2l,c
  2186  00056A  0E00               	movlw	high _color
  2187  00056C  20F4               	addwfc	prodh,w,c
  2188  00056E  6EDA               	movwf	fsr2h,c
  2189  000570  CFDE F03E          	movff	postinc2,drawtext@bg
  2190  000574  CFDD F03F          	movff	postdec2,drawtext@bg+1
  2191  000578  0E01               	movlw	1
  2192  00057A  6E40               	movwf	drawtext@size,c
  2193  00057C  0E34               	movlw	52
  2194  00057E  EC3B  F006         	call	_drawtext
  2195                           
  2196                           ;Lab11p1.c: 206: PORTA = D3[found];
  2197  000582  505C               	movf	_found,w,c
  2198  000584  0D01               	mullw	1
  2199  000586  0ED4               	movlw	low _D3
  2200  000588  24F3               	addwf	prodl,w,c
  2201  00058A  6ED9               	movwf	fsr2l,c
  2202  00058C  0E00               	movlw	high _D3
  2203  00058E  20F4               	addwfc	prodh,w,c
  2204  000590  6EDA               	movwf	fsr2h,c
  2205  000592  50DF               	movf	indf2,w,c
  2206  000594  6E80               	movwf	3968,c	;volatile
  2207                           
  2208                           ;Lab11p1.c: 207: PORTD = D1[found]|D2[found];
  2209  000596  505C               	movf	_found,w,c
  2210  000598  0D01               	mullw	1
  2211  00059A  0EBF               	movlw	low _D2
  2212  00059C  24F3               	addwf	prodl,w,c
  2213  00059E  6ED9               	movwf	fsr2l,c
  2214  0005A0  0E00               	movlw	high _D2
  2215  0005A2  20F4               	addwfc	prodh,w,c
  2216  0005A4  6EDA               	movwf	fsr2h,c
  2217  0005A6  50DF               	movf	indf2,w,c
  2218  0005A8  6E43               	movwf	??_main& (0+255),c
  2219  0005AA  505C               	movf	_found,w,c
  2220  0005AC  0D01               	mullw	1
  2221  0005AE  0EAA               	movlw	low _D1
  2222  0005B0  24F3               	addwf	prodl,w,c
  2223  0005B2  6ED9               	movwf	fsr2l,c
  2224  0005B4  0E00               	movlw	high _D1
  2225  0005B6  20F4               	addwfc	prodh,w,c
  2226  0005B8  6EDA               	movwf	fsr2h,c
  2227  0005BA  50DF               	movf	indf2,w,c
  2228  0005BC  1043               	iorwf	??_main,w,c
  2229  0005BE  6E83               	movwf	3971,c	;volatile
  2230                           
  2231                           ;Lab11p1.c: 209: Activate_Buzzer();
  2232  0005C0  ECB5  F00C         	call	_Activate_Buzzer	;wreg free
  2233                           
  2234                           ;Lab11p1.c: 210: Wait_One_Sec();
  2235  0005C4  EC09  F00C         	call	_Wait_One_Sec	;wreg free
  2236                           
  2237                           ;Lab11p1.c: 211: Deactivate_Buzzer();
  2238  0005C8  ECF0  F00C         	call	_Deactivate_Buzzer	;wreg free
  2239  0005CC  D6DD               	goto	l5339
  2240  0005CE  EF0C  F000         	goto	start
  2241  0005D2                     __end_of_main:
  2242                           	opt stack 0
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           intcon2	equ	0xFF1
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _printf *****************
  2263 ;; Defined at:
  2264 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2267 ;;		 -> STR_3(63), STR_2(44), STR_1(34), 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  idx             1   46[COMRAM] unsigned char 
  2270 ;;  tmpval          4    0        struct .
  2271 ;;  cp              3    0        PTR const unsigned char 
  2272 ;;  width           2   53[COMRAM] int 
  2273 ;;  val             2   50[COMRAM] unsigned int 
  2274 ;;  ap              2   47[COMRAM] PTR void [1]
  2275 ;;		 -> ?_printf(2), 
  2276 ;;  len             2    0        unsigned int 
  2277 ;;  c               1   55[COMRAM] char 
  2278 ;;  flag            1   52[COMRAM] unsigned char 
  2279 ;;  prec            1   49[COMRAM] char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  2   28[COMRAM] int 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2289 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;Total ram usage:       28 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    4
  2296 ;; This function calls:
  2297 ;;		___lwdiv
  2298 ;;		___lwmod
  2299 ;;		___wmul
  2300 ;;		_isdigit
  2301 ;;		_putch
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text1
  2308  00001C                     __ptext1:
  2309                           	opt stack 0
  2310  00001C                     _printf:
  2311                           	opt stack 26
  2312                           
  2313                           ;doprnt.c: 466: va_list ap;
  2314                           ;doprnt.c: 499: signed char c;
  2315                           ;doprnt.c: 501: int width;
  2316                           ;doprnt.c: 506: signed char prec;
  2317                           ;doprnt.c: 508: unsigned char flag;
  2318                           ;doprnt.c: 523: union {
  2319                           ;doprnt.c: 524: unsigned long vd;
  2320                           ;doprnt.c: 525: double integ;
  2321                           ;doprnt.c: 526: } tmpval;
  2322                           ;doprnt.c: 528: unsigned int val;
  2323                           ;doprnt.c: 529: unsigned len;
  2324                           ;doprnt.c: 530: const char * cp;
  2325                           ;doprnt.c: 533: *ap = __va_start();
  2326                           
  2327                           ;incstack = 0
  2328  00001C  0E1F               	movlw	low (?_printf+2)
  2329  00001E  6E30               	movwf	printf@ap,c
  2330  000020  0E00               	movlw	high (?_printf+2)
  2331  000022  6E31               	movwf	printf@ap+1,c
  2332                           
  2333                           ;doprnt.c: 536: while(c = *f++) {
  2334  000024  D199               	goto	l5043
  2335  000026                     l4917:
  2336                           
  2337                           ;doprnt.c: 538: if(c != '%')
  2338  000026  0E25               	movlw	37
  2339  000028  1838               	xorwf	printf@c,w,c
  2340  00002A  B4D8               	btfsc	status,2,c
  2341  00002C  D004               	goto	l4921
  2342                           
  2343                           ;doprnt.c: 540: {
  2344                           ;doprnt.c: 541: (putch(c) );
  2345  00002E  5038               	movf	printf@c,w,c
  2346  000030  ECCE  F00C         	call	_putch
  2347                           
  2348                           ;doprnt.c: 542: continue;
  2349  000034  D191               	goto	l5043
  2350  000036                     l4921:
  2351                           
  2352                           ;doprnt.c: 543: }
  2353                           ;doprnt.c: 546: width = 0;
  2354  000036  0E00               	movlw	0
  2355  000038  6E37               	movwf	printf@width+1,c
  2356  00003A  0E00               	movlw	0
  2357  00003C  6E36               	movwf	printf@width,c
  2358                           
  2359                           ;doprnt.c: 548: flag = 0;
  2360  00003E  0E00               	movlw	0
  2361  000040  6E35               	movwf	printf@flag,c
  2362                           
  2363                           ;doprnt.c: 551: switch(*f) {
  2364                           
  2365                           ;doprnt.c: 550: for(;;) {
  2366  000042  D005               	goto	l4927
  2367  000044                     l4923:
  2368                           
  2369                           ;doprnt.c: 580: flag |= 0x04;
  2370  000044  8435               	bsf	printf@flag,2,c
  2371                           
  2372                           ;doprnt.c: 581: f++;
  2373  000046  4A1D               	infsnz	printf@f,f,c
  2374  000048  2A1E               	incf	printf@f+1,f,c
  2375                           
  2376                           ;doprnt.c: 582: continue;
  2377  00004A  D001               	goto	l4927
  2378                           
  2379                           ;doprnt.c: 584: }
  2380  00004C  D00B               	goto	l4929
  2381  00004E                     l4927:
  2382  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2383  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2384  000056                     	if	0	;tblptru may be non-zero
  2385  000056                     	endif
  2386  000056                     	if	0	;tblptru may be non-zero
  2387  000056                     	endif
  2388  000056  0008               	tblrd		*
  2389  000058  50F5               	movf	tablat,w,c
  2390                           
  2391                           ; Switch size 1, requested type "space"
  2392                           ; Number of cases is 1, Range of values is 48 to 48
  2393                           ; switch strategies available:
  2394                           ; Name         Instructions Cycles
  2395                           ; simple_byte            4     3 (average)
  2396                           ;	Chosen strategy is simple_byte
  2397  00005A  0A30               	xorlw	48	; case 48
  2398  00005C  B4D8               	btfsc	status,2,c
  2399  00005E  D7F2               	goto	l4923
  2400                           
  2401                           ;doprnt.c: 585: break;
  2402  000060  D001               	goto	l4929
  2403                           
  2404                           ;doprnt.c: 586: }
  2405  000062  D7F5               	goto	l4927
  2406  000064                     l4929:
  2407                           
  2408                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2409  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2410  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2411  00006C                     	if	0	;tblptru may be non-zero
  2412  00006C                     	endif
  2413  00006C                     	if	0	;tblptru may be non-zero
  2414  00006C                     	endif
  2415  00006C  0008               	tblrd		*
  2416  00006E  50F5               	movf	tablat,w,c
  2417  000070  EC1B  F00C         	call	_isdigit
  2418  000074  A0D8               	btfss	status,0,c
  2419  000076  D03B               	goto	l4945
  2420                           
  2421                           ;doprnt.c: 598: width = 0;
  2422  000078  0E00               	movlw	0
  2423  00007A  6E37               	movwf	printf@width+1,c
  2424  00007C  0E00               	movlw	0
  2425  00007E  6E36               	movwf	printf@width,c
  2426  000080  D000               	goto	l4933
  2427  000082                     l4933:
  2428                           
  2429                           ;doprnt.c: 600: width *= 10;
  2430  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2431  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2432  00008A  0E00               	movlw	0
  2433  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2434  00008E  0E0A               	movlw	10
  2435  000090  6E13               	movwf	___wmul@multiplicand,c
  2436  000092  ECF5  F00B         	call	___wmul	;wreg free
  2437  000096  C011  F036         	movff	?___wmul,printf@width
  2438  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2439                           
  2440                           ;doprnt.c: 601: width += *f++ - '0';
  2441  00009E  0ED0               	movlw	208
  2442  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2443  0000A2  0EFF               	movlw	255
  2444  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2445  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2446  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2447  0000AE                     	if	0	;tblptru may be non-zero
  2448  0000AE                     	endif
  2449  0000AE                     	if	0	;tblptru may be non-zero
  2450  0000AE                     	endif
  2451  0000AE  0008               	tblrd		*
  2452  0000B0  50F5               	movf	tablat,w,c
  2453  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2454  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2455  0000B6  502B               	movf	??_printf,w,c
  2456  0000B8  262D               	addwf	??_printf+2,f,c
  2457  0000BA  502C               	movf	??_printf+1,w,c
  2458  0000BC  222E               	addwfc	??_printf+3,f,c
  2459  0000BE  502D               	movf	??_printf+2,w,c
  2460  0000C0  2636               	addwf	printf@width,f,c
  2461  0000C2  502E               	movf	??_printf+3,w,c
  2462  0000C4  2237               	addwfc	printf@width+1,f,c
  2463  0000C6  4A1D               	infsnz	printf@f,f,c
  2464  0000C8  2A1E               	incf	printf@f+1,f,c
  2465                           
  2466                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2467  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2468  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2469  0000D2                     	if	0	;tblptru may be non-zero
  2470  0000D2                     	endif
  2471  0000D2                     	if	0	;tblptru may be non-zero
  2472  0000D2                     	endif
  2473  0000D2  0008               	tblrd		*
  2474  0000D4  50F5               	movf	tablat,w,c
  2475  0000D6  EC1B  F00C         	call	_isdigit
  2476  0000DA  A0D8               	btfss	status,0,c
  2477  0000DC  D008               	goto	l4945
  2478  0000DE  D7D1               	goto	l4933
  2479                           
  2480                           ;doprnt.c: 608: }
  2481                           ;doprnt.c: 635: switch(c = *f++) {
  2482  0000E0  D006               	goto	l4945
  2483                           
  2484                           ;doprnt.c: 638: goto alldone;
  2485                           
  2486                           ;doprnt.c: 637: case 0:
  2487  0000E2  D148               	goto	l651
  2488                           
  2489                           ;doprnt.c: 698: case 'i':
  2490                           ;doprnt.c: 699: break;
  2491                           
  2492                           ;doprnt.c: 697: case 'd':
  2493  0000E4  D01B               	goto	l614
  2494  0000E6                     l4941:
  2495                           
  2496                           ;doprnt.c: 721: flag |= 0x80;
  2497  0000E6  8E35               	bsf	printf@flag,7,c
  2498                           
  2499                           ;doprnt.c: 723: break;
  2500  0000E8  D019               	goto	l614
  2501                           
  2502                           ;doprnt.c: 813: continue;
  2503                           
  2504                           ;doprnt.c: 802: default:
  2505  0000EA  D136               	goto	l5043
  2506                           
  2507                           ;doprnt.c: 822: }
  2508  0000EC  D017               	goto	l614
  2509  0000EE                     l4945:
  2510  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2511  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2512  0000F6  4A1D               	infsnz	printf@f,f,c
  2513  0000F8  2A1E               	incf	printf@f+1,f,c
  2514  0000FA                     	if	0	;tblptru may be non-zero
  2515  0000FA                     	endif
  2516  0000FA                     	if	0	;tblptru may be non-zero
  2517  0000FA                     	endif
  2518  0000FA  0008               	tblrd		*
  2519  0000FC  CFF5 F038          	movff	tablat,printf@c
  2520  000100  5038               	movf	printf@c,w,c
  2521                           
  2522                           ; Switch size 1, requested type "space"
  2523                           ; Number of cases is 4, Range of values is 0 to 120
  2524                           ; switch strategies available:
  2525                           ; Name         Instructions Cycles
  2526                           ; simple_byte           13     7 (average)
  2527                           ;	Chosen strategy is simple_byte
  2528  000102  0A00               	xorlw	0	; case 0
  2529  000104  B4D8               	btfsc	status,2,c
  2530  000106  D136               	goto	l651
  2531  000108  0A64               	xorlw	100	; case 100
  2532  00010A  B4D8               	btfsc	status,2,c
  2533  00010C  D007               	goto	l614
  2534  00010E  0A0D               	xorlw	13	; case 105
  2535  000110  B4D8               	btfsc	status,2,c
  2536  000112  D004               	goto	l614
  2537  000114  0A11               	xorlw	17	; case 120
  2538  000116  B4D8               	btfsc	status,2,c
  2539  000118  D7E6               	goto	l4941
  2540  00011A  D11E               	goto	l5043
  2541  00011C                     l614:
  2542                           
  2543                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2544  00011C  BE35               	btfsc	printf@flag,7,c
  2545  00011E  D015               	goto	l4957
  2546                           
  2547                           ;doprnt.c: 1253: {
  2548                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2549  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2550  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2551  000128  CFDE F033          	movff	postinc2,printf@val
  2552  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2553  000130  0E02               	movlw	2
  2554  000132  2630               	addwf	printf@ap,f,c
  2555  000134  0E00               	movlw	0
  2556  000136  2231               	addwfc	printf@ap+1,f,c
  2557                           
  2558                           ;doprnt.c: 1261: if((int)val < 0) {
  2559  000138  AE34               	btfss	printf@val+1,7,c
  2560  00013A  D04E               	goto	l4991
  2561                           
  2562                           ;doprnt.c: 1262: flag |= 0x03;
  2563  00013C  0E03               	movlw	3
  2564  00013E  1235               	iorwf	printf@flag,f,c
  2565                           
  2566                           ;doprnt.c: 1263: val = -val;
  2567  000140  6C33               	negf	printf@val,c
  2568  000142  1E34               	comf	printf@val+1,f,c
  2569  000144  B0D8               	btfsc	status,0,c
  2570  000146  2A34               	incf	printf@val+1,f,c
  2571                           
  2572                           ;doprnt.c: 1264: }
  2573                           ;doprnt.c: 1266: }
  2574  000148  D047               	goto	l4991
  2575  00014A                     l4957:
  2576                           
  2577                           ;doprnt.c: 1268: else
  2578                           ;doprnt.c: 1273: {
  2579                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2580  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2581  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2582  000152  CFDE F033          	movff	postinc2,printf@val
  2583  000156  CFDD F034          	movff	postdec2,printf@val+1
  2584  00015A  0E02               	movlw	2
  2585  00015C  2630               	addwf	printf@ap,f,c
  2586  00015E  0E00               	movlw	0
  2587  000160  2231               	addwfc	printf@ap+1,f,c
  2588                           
  2589                           ;doprnt.c: 1287: }
  2590                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2591  000162  D03A               	goto	l4991
  2592  000164                     l4961:
  2593                           
  2594                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2595  000164  0E01               	movlw	1
  2596  000166  6E38               	movwf	printf@c,c
  2597  000168                     l4963:
  2598  000168  0E05               	movlw	5
  2599  00016A  1838               	xorwf	printf@c,w,c
  2600  00016C  B4D8               	btfsc	status,2,c
  2601  00016E  D03D               	goto	l4993
  2602  000170  D001               	goto	l4967
  2603  000172  D03B               	goto	l4993
  2604  000174                     l4967:
  2605                           
  2606                           ;doprnt.c: 1306: if(val < dpowers[c])
  2607  000174  5038               	movf	printf@c,w,c
  2608  000176  0D02               	mullw	2
  2609  000178  0E34               	movlw	low _dpowers
  2610  00017A  24F3               	addwf	prodl,w,c
  2611  00017C  6EF6               	movwf	tblptrl,c
  2612  00017E  0EFF               	movlw	high _dpowers
  2613  000180  20F4               	addwfc	prodh,w,c
  2614  000182  6EF7               	movwf	tblptrh,c
  2615  000184                     	if	0	;There are less than 3 active tblptr bytes
  2616  000184                     	endif
  2617  000184  0009               	tblrd		*+
  2618  000186  50F5               	movf	tablat,w,c
  2619  000188  5C33               	subwf	printf@val,w,c
  2620  00018A  0009               	tblrd		*+
  2621  00018C  50F5               	movf	tablat,w,c
  2622  00018E  5834               	subwfb	printf@val+1,w,c
  2623  000190  A0D8               	btfss	status,0,c
  2624  000192  D02B               	goto	l4993
  2625  000194  D001               	goto	l4971
  2626                           
  2627                           ;doprnt.c: 1307: break;
  2628  000196  D029               	goto	l4993
  2629  000198                     l4971:
  2630  000198  2A38               	incf	printf@c,f,c
  2631  00019A  D7E6               	goto	l4963
  2632                           
  2633                           ;doprnt.c: 1309: break;
  2634  00019C  D026               	goto	l4993
  2635  00019E                     l4975:
  2636                           
  2637                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2638  00019E  0E01               	movlw	1
  2639  0001A0  6E38               	movwf	printf@c,c
  2640  0001A2                     l4977:
  2641  0001A2  0E04               	movlw	4
  2642  0001A4  1838               	xorwf	printf@c,w,c
  2643  0001A6  B4D8               	btfsc	status,2,c
  2644  0001A8  D020               	goto	l4993
  2645  0001AA  D001               	goto	l4981
  2646  0001AC  D01E               	goto	l4993
  2647  0001AE                     l4981:
  2648                           
  2649                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2650  0001AE  5038               	movf	printf@c,w,c
  2651  0001B0  0D02               	mullw	2
  2652  0001B2  0E3E               	movlw	low _hexpowers
  2653  0001B4  24F3               	addwf	prodl,w,c
  2654  0001B6  6EF6               	movwf	tblptrl,c
  2655  0001B8  0EFF               	movlw	high _hexpowers
  2656  0001BA  20F4               	addwfc	prodh,w,c
  2657  0001BC  6EF7               	movwf	tblptrh,c
  2658  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2659  0001BE                     	endif
  2660  0001BE  0009               	tblrd		*+
  2661  0001C0  50F5               	movf	tablat,w,c
  2662  0001C2  5C33               	subwf	printf@val,w,c
  2663  0001C4  0009               	tblrd		*+
  2664  0001C6  50F5               	movf	tablat,w,c
  2665  0001C8  5834               	subwfb	printf@val+1,w,c
  2666  0001CA  A0D8               	btfss	status,0,c
  2667  0001CC  D00E               	goto	l4993
  2668  0001CE  D001               	goto	l4985
  2669                           
  2670                           ;doprnt.c: 1318: break;
  2671  0001D0  D00C               	goto	l4993
  2672  0001D2                     l4985:
  2673  0001D2  2A38               	incf	printf@c,f,c
  2674  0001D4  D7E6               	goto	l4977
  2675                           
  2676                           ;doprnt.c: 1336: }
  2677                           
  2678                           ;doprnt.c: 1320: break;
  2679  0001D6  D009               	goto	l4993
  2680  0001D8                     l4991:
  2681  0001D8  5035               	movf	printf@flag,w,c
  2682  0001DA  0B80               	andlw	128
  2683                           
  2684                           ; Switch size 1, requested type "space"
  2685                           ; Number of cases is 2, Range of values is 0 to 128
  2686                           ; switch strategies available:
  2687                           ; Name         Instructions Cycles
  2688                           ; simple_byte            7     4 (average)
  2689                           ;	Chosen strategy is simple_byte
  2690  0001DC  0A00               	xorlw	0	; case 0
  2691  0001DE  B4D8               	btfsc	status,2,c
  2692  0001E0  D7C1               	goto	l4961
  2693  0001E2  0A80               	xorlw	128	; case 128
  2694  0001E4  B4D8               	btfsc	status,2,c
  2695  0001E6  D7DB               	goto	l4975
  2696  0001E8  D000               	goto	l4993
  2697  0001EA                     l4993:
  2698                           
  2699                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2700  0001EA  5036               	movf	printf@width,w,c
  2701  0001EC  1037               	iorwf	printf@width+1,w,c
  2702  0001EE  B4D8               	btfsc	status,2,c
  2703  0001F0  D00A               	goto	l4999
  2704  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2705  0001F6  0E03               	movlw	3
  2706  0001F8  162B               	andwf	??_printf,f,c
  2707  0001FA  B4D8               	btfsc	status,2,c
  2708  0001FC  D004               	goto	l4999
  2709                           
  2710                           ;doprnt.c: 1346: width--;
  2711  0001FE  0636               	decf	printf@width,f,c
  2712  000200  A0D8               	btfss	status,0,c
  2713  000202  0637               	decf	printf@width+1,f,c
  2714  000204  D000               	goto	l4999
  2715  000206                     l4999:
  2716                           
  2717                           ;doprnt.c: 1381: if(width > c)
  2718  000206  0E80               	movlw	128
  2719  000208  BE38               	btfsc	printf@c,7,c
  2720  00020A  0E7F               	movlw	127
  2721  00020C  6E2B               	movwf	??_printf& (0+255),c
  2722  00020E  5036               	movf	printf@width,w,c
  2723  000210  5C38               	subwf	printf@c,w,c
  2724  000212  5037               	movf	printf@width+1,w,c
  2725  000214  0A80               	xorlw	128
  2726  000216  582B               	subwfb	??_printf& (0+255),w,c
  2727  000218  B0D8               	btfsc	status,0,c
  2728  00021A  D007               	goto	l5003
  2729                           
  2730                           ;doprnt.c: 1382: width -= c;
  2731  00021C  5038               	movf	printf@c,w,c
  2732  00021E  5E36               	subwf	printf@width,f,c
  2733  000220  0E00               	movlw	0
  2734  000222  BE38               	btfsc	printf@c,7,c
  2735  000224  0EFF               	movlw	255
  2736  000226  5A37               	subwfb	printf@width+1,f,c
  2737  000228  D005               	goto	l5005
  2738  00022A                     l5003:
  2739                           
  2740                           ;doprnt.c: 1383: else
  2741                           ;doprnt.c: 1384: width = 0;
  2742  00022A  0E00               	movlw	0
  2743  00022C  6E37               	movwf	printf@width+1,c
  2744  00022E  0E00               	movlw	0
  2745  000230  6E36               	movwf	printf@width,c
  2746  000232  D000               	goto	l5005
  2747  000234                     l5005:
  2748                           
  2749                           ;doprnt.c: 1387: if(flag & 0x04) {
  2750  000234  A435               	btfss	printf@flag,2,c
  2751  000236  D01A               	goto	l5017
  2752                           
  2753                           ;doprnt.c: 1392: if(flag & 0x03)
  2754  000238  C035  F02B         	movff	printf@flag,??_printf
  2755  00023C  0E03               	movlw	3
  2756  00023E  162B               	andwf	??_printf,f,c
  2757  000240  B4D8               	btfsc	status,2,c
  2758  000242  D004               	goto	l5011
  2759                           
  2760                           ;doprnt.c: 1393: (putch('-') );
  2761  000244  0E2D               	movlw	45
  2762  000246  ECCE  F00C         	call	_putch
  2763  00024A  D000               	goto	l5011
  2764  00024C                     l5011:
  2765                           
  2766                           ;doprnt.c: 1415: if(width)
  2767  00024C  5036               	movf	printf@width,w,c
  2768  00024E  1037               	iorwf	printf@width+1,w,c
  2769  000250  B4D8               	btfsc	status,2,c
  2770  000252  D026               	goto	l5027
  2771  000254                     l5013:
  2772                           
  2773                           ;doprnt.c: 1417: (putch('0') );
  2774  000254  0E30               	movlw	48
  2775  000256  ECCE  F00C         	call	_putch
  2776                           
  2777                           ;doprnt.c: 1418: while(--width);
  2778  00025A  0636               	decf	printf@width,f,c
  2779  00025C  A0D8               	btfss	status,0,c
  2780  00025E  0637               	decf	printf@width+1,f,c
  2781  000260  5036               	movf	printf@width,w,c
  2782  000262  1037               	iorwf	printf@width+1,w,c
  2783  000264  B4D8               	btfsc	status,2,c
  2784  000266  D01C               	goto	l5027
  2785  000268  D7F5               	goto	l5013
  2786                           
  2787                           ;doprnt.c: 1420: } else
  2788  00026A  D01A               	goto	l5027
  2789  00026C                     l5017:
  2790                           
  2791                           ;doprnt.c: 1422: {
  2792                           ;doprnt.c: 1424: if(width
  2793                           ;doprnt.c: 1428: )
  2794  00026C  5036               	movf	printf@width,w,c
  2795  00026E  1037               	iorwf	printf@width+1,w,c
  2796  000270  B4D8               	btfsc	status,2,c
  2797  000272  D00C               	goto	l5023
  2798  000274                     l5019:
  2799                           
  2800                           ;doprnt.c: 1430: (putch(' ') );
  2801  000274  0E20               	movlw	32
  2802  000276  ECCE  F00C         	call	_putch
  2803                           
  2804                           ;doprnt.c: 1431: while(--width);
  2805  00027A  0636               	decf	printf@width,f,c
  2806  00027C  A0D8               	btfss	status,0,c
  2807  00027E  0637               	decf	printf@width+1,f,c
  2808  000280  5036               	movf	printf@width,w,c
  2809  000282  1037               	iorwf	printf@width+1,w,c
  2810  000284  B4D8               	btfsc	status,2,c
  2811  000286  D002               	goto	l5023
  2812  000288  D7F5               	goto	l5019
  2813  00028A  D000               	goto	l5023
  2814  00028C                     l5023:
  2815                           
  2816                           ;doprnt.c: 1438: if(flag & 0x03)
  2817  00028C  C035  F02B         	movff	printf@flag,??_printf
  2818  000290  0E03               	movlw	3
  2819  000292  162B               	andwf	??_printf,f,c
  2820  000294  B4D8               	btfsc	status,2,c
  2821  000296  D004               	goto	l5027
  2822                           
  2823                           ;doprnt.c: 1439: (putch('-') );
  2824  000298  0E2D               	movlw	45
  2825  00029A  ECCE  F00C         	call	_putch
  2826  00029E  D000               	goto	l5027
  2827  0002A0                     l5027:
  2828                           
  2829                           ;doprnt.c: 1469: }
  2830                           ;doprnt.c: 1472: prec = c;
  2831  0002A0  C038  F032         	movff	printf@c,printf@prec
  2832                           
  2833                           ;doprnt.c: 1474: while(prec--) {
  2834  0002A4  D053               	goto	l5041
  2835                           
  2836                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2837  0002A6  D045               	goto	l5037
  2838  0002A8                     l5029:
  2839                           
  2840                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2841  0002A8  5032               	movf	printf@prec,w,c
  2842  0002AA  0D02               	mullw	2
  2843  0002AC  0E34               	movlw	low _dpowers
  2844  0002AE  24F3               	addwf	prodl,w,c
  2845  0002B0  6EF6               	movwf	tblptrl,c
  2846  0002B2  0EFF               	movlw	high _dpowers
  2847  0002B4  20F4               	addwfc	prodh,w,c
  2848  0002B6  6EF7               	movwf	tblptrh,c
  2849  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2850  0002B8                     	endif
  2851  0002B8  0009               	tblrd		*+
  2852  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2853  0002BE  000A               	tblrd		*-
  2854  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2855  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2856  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2857  0002CC  ECD4  F009         	call	___lwdiv	;wreg free
  2858  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2859  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2860  0002D8  0E00               	movlw	0
  2861  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2862  0002DC  0E0A               	movlw	10
  2863  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2864  0002E0  ECA5  F00A         	call	___lwmod	;wreg free
  2865  0002E4  5018               	movf	?___lwmod,w,c
  2866  0002E6  0F30               	addlw	48
  2867  0002E8  6E38               	movwf	printf@c,c
  2868                           
  2869                           ;doprnt.c: 1491: break;
  2870  0002EA  D02C               	goto	l5039
  2871  0002EC                     l5031:
  2872                           
  2873                           ;doprnt.c: 1499: {
  2874                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2875  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2876  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2877  0002F4  5032               	movf	printf@prec,w,c
  2878  0002F6  0D02               	mullw	2
  2879  0002F8  0E3E               	movlw	low _hexpowers
  2880  0002FA  24F3               	addwf	prodl,w,c
  2881  0002FC  6EF6               	movwf	tblptrl,c
  2882  0002FE  0EFF               	movlw	high _hexpowers
  2883  000300  20F4               	addwfc	prodh,w,c
  2884  000302  6EF7               	movwf	tblptrh,c
  2885  000304                     	if	0	;There are less than 3 active tblptr bytes
  2886  000304                     	endif
  2887  000304  0009               	tblrd		*+
  2888  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2889  00030A  000A               	tblrd		*-
  2890  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2891  000310  ECD4  F009         	call	___lwdiv	;wreg free
  2892  000314  5011               	movf	?___lwdiv,w,c
  2893  000316  0B0F               	andlw	15
  2894  000318  6E2F               	movwf	printf@idx,c
  2895                           
  2896                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2897  00031A  502F               	movf	printf@idx,w,c
  2898  00031C  0D01               	mullw	1
  2899  00031E  0EE7               	movlw	low STR_6
  2900  000320  24F3               	addwf	prodl,w,c
  2901  000322  6EF6               	movwf	tblptrl,c
  2902  000324  0EFF               	movlw	high STR_6
  2903  000326  20F4               	addwfc	prodh,w,c
  2904  000328  6EF7               	movwf	tblptrh,c
  2905  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2906  00032A                     	endif
  2907  00032A  0008               	tblrd		*
  2908  00032C  CFF5 F038          	movff	tablat,printf@c
  2909                           
  2910                           ;doprnt.c: 1523: }
  2911                           
  2912                           ;doprnt.c: 1508: }
  2913                           ;doprnt.c: 1510: break;
  2914  000330  D009               	goto	l5039
  2915  000332                     l5037:
  2916  000332  5035               	movf	printf@flag,w,c
  2917  000334  0B80               	andlw	128
  2918                           
  2919                           ; Switch size 1, requested type "space"
  2920                           ; Number of cases is 2, Range of values is 0 to 128
  2921                           ; switch strategies available:
  2922                           ; Name         Instructions Cycles
  2923                           ; simple_byte            7     4 (average)
  2924                           ;	Chosen strategy is simple_byte
  2925  000336  0A00               	xorlw	0	; case 0
  2926  000338  B4D8               	btfsc	status,2,c
  2927  00033A  D7B6               	goto	l5029
  2928  00033C  0A80               	xorlw	128	; case 128
  2929  00033E  B4D8               	btfsc	status,2,c
  2930  000340  D7D5               	goto	l5031
  2931  000342  D000               	goto	l5039
  2932  000344                     l5039:
  2933                           
  2934                           ;doprnt.c: 1524: (putch(c) );
  2935  000344  5038               	movf	printf@c,w,c
  2936  000346  ECCE  F00C         	call	_putch
  2937  00034A  D000               	goto	l5041
  2938  00034C                     l5041:
  2939  00034C  0632               	decf	printf@prec,f,c
  2940  00034E  2832               	incf	printf@prec,w,c
  2941  000350  B4D8               	btfsc	status,2,c
  2942  000352  D002               	goto	l5043
  2943  000354  D7EE               	goto	l5037
  2944  000356  D000               	goto	l5043
  2945  000358                     l5043:
  2946  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2947  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2948  000360  4A1D               	infsnz	printf@f,f,c
  2949  000362  2A1E               	incf	printf@f+1,f,c
  2950  000364                     	if	0	;tblptru may be non-zero
  2951  000364                     	endif
  2952  000364                     	if	0	;tblptru may be non-zero
  2953  000364                     	endif
  2954  000364  0008               	tblrd		*
  2955  000366  CFF5 F038          	movff	tablat,printf@c
  2956  00036A  5038               	movf	printf@c,w,c
  2957  00036C  B4D8               	btfsc	status,2,c
  2958  00036E  D002               	goto	l651
  2959  000370  D65A               	goto	l4917
  2960  000372  D000               	goto	l651
  2961  000374                     l651:
  2962  000374  0012               	return		;funcret
  2963  000376                     __end_of_printf:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           intcon2	equ	0xFF1
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _putch *****************
  2985 ;; Defined at:
  2986 ;;		line 104 in file "Lab11p1.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  c               1    wreg     unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  c               1   16[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;		None               void
  2993 ;; Registers used:
  2994 ;;		wreg
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    3
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_printf
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text2
  3015  00199C                     __ptext2:
  3016                           	opt stack 0
  3017  00199C                     _putch:
  3018                           	opt stack 26
  3019                           
  3020                           ;incstack = 0
  3021                           ;putch@c stored from wreg
  3022  00199C  6E11               	movwf	putch@c,c
  3023                           
  3024                           ;Lab11p1.c: 106: while (!TRMT);
  3025  00199E  D000               	goto	l356
  3026  0019A0                     l356:
  3027  0019A0  A2AC               	btfss	4012,1,c	;volatile
  3028  0019A2  D7FE               	goto	l356
  3029                           
  3030                           ;Lab11p1.c: 107: TXREG = c;
  3031  0019A4  C011  FFAD         	movff	putch@c,4013	;volatile
  3032  0019A8  0012               	return		;funcret
  3033  0019AA                     __end_of_putch:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           intcon2	equ	0xFF1
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _isdigit *****************
  3055 ;; Defined at:
  3056 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  c               1    wreg     unsigned char 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  c               1   18[COMRAM] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;		None               void
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;Total ram usage:        3 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    3
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_printf
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text3
  3085  001836                     __ptext3:
  3086                           	opt stack 0
  3087  001836                     _isdigit:
  3088                           	opt stack 26
  3089                           
  3090                           ;incstack = 0
  3091                           ;isdigit@c stored from wreg
  3092  001836  6E13               	movwf	isdigit@c,c
  3093  001838  0E00               	movlw	0
  3094  00183A  6E12               	movwf	_isdigit$1907,c
  3095  00183C  0E3A               	movlw	58
  3096  00183E  6013               	cpfslt	isdigit@c,c
  3097  001840  D006               	goto	l4681
  3098  001842  0E2F               	movlw	47
  3099  001844  6413               	cpfsgt	isdigit@c,c
  3100  001846  D003               	goto	l4681
  3101  001848  0E01               	movlw	1
  3102  00184A  6E12               	movwf	_isdigit$1907,c
  3103  00184C  D000               	goto	l4681
  3104  00184E                     l4681:
  3105  00184E  C012  F011         	movff	_isdigit$1907,??_isdigit
  3106  001852  3011               	rrcf	??_isdigit,w,c
  3107  001854  D000               	goto	l1118
  3108  001856                     l1118:
  3109  001856  0012               	return		;funcret
  3110  001858                     __end_of_isdigit:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           intcon2	equ	0xFF1
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           fsr1l	equ	0xFE1
  3124                           indf2	equ	0xFDF
  3125                           postinc2	equ	0xFDE
  3126                           postdec2	equ	0xFDD
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function ___lwmod *****************
  3132 ;; Defined at:
  3133 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  dividend        2   23[COMRAM] unsigned int 
  3136 ;;  divisor         2   25[COMRAM] unsigned int 
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;  counter         1   27[COMRAM] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  2   23[COMRAM] unsigned int 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        5 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    3
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_printf
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text4
  3163  00154A                     __ptext4:
  3164                           	opt stack 0
  3165  00154A                     ___lwmod:
  3166                           	opt stack 26
  3167                           
  3168                           ;incstack = 0
  3169  00154A  501A               	movf	___lwmod@divisor,w,c
  3170  00154C  101B               	iorwf	___lwmod@divisor+1,w,c
  3171  00154E  B4D8               	btfsc	status,2,c
  3172  001550  D01D               	goto	l1220
  3173  001552  0E01               	movlw	1
  3174  001554  6E1C               	movwf	___lwmod@counter,c
  3175  001556  D005               	goto	l4713
  3176  001558                     l4711:
  3177  001558  90D8               	bcf	status,0,c
  3178  00155A  361A               	rlcf	___lwmod@divisor,f,c
  3179  00155C  361B               	rlcf	___lwmod@divisor+1,f,c
  3180  00155E  2A1C               	incf	___lwmod@counter,f,c
  3181  001560  D000               	goto	l4713
  3182  001562                     l4713:
  3183  001562  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3184  001564  D002               	goto	l4715
  3185  001566  D7F8               	goto	l4711
  3186  001568  D000               	goto	l4715
  3187  00156A                     l4715:
  3188  00156A  501A               	movf	___lwmod@divisor,w,c
  3189  00156C  5C18               	subwf	___lwmod@dividend,w,c
  3190  00156E  501B               	movf	___lwmod@divisor+1,w,c
  3191  001570  5819               	subwfb	___lwmod@dividend+1,w,c
  3192  001572  A0D8               	btfss	status,0,c
  3193  001574  D005               	goto	l4719
  3194  001576  501A               	movf	___lwmod@divisor,w,c
  3195  001578  5E18               	subwf	___lwmod@dividend,f,c
  3196  00157A  501B               	movf	___lwmod@divisor+1,w,c
  3197  00157C  5A19               	subwfb	___lwmod@dividend+1,f,c
  3198  00157E  D000               	goto	l4719
  3199  001580                     l4719:
  3200  001580  90D8               	bcf	status,0,c
  3201  001582  321B               	rrcf	___lwmod@divisor+1,f,c
  3202  001584  321A               	rrcf	___lwmod@divisor,f,c
  3203  001586  2E1C               	decfsz	___lwmod@counter,f,c
  3204  001588  D7F0               	goto	l4715
  3205  00158A  D000               	goto	l1220
  3206  00158C                     l1220:
  3207  00158C  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3208  001590  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3209  001594  0012               	return		;funcret
  3210  001596                     __end_of___lwmod:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           intcon	equ	0xFF2
  3219                           intcon2	equ	0xFF1
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function ___lwdiv *****************
  3232 ;; Defined at:
  3233 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  dividend        2   16[COMRAM] unsigned int 
  3236 ;;  divisor         2   18[COMRAM] unsigned int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  quotient        2   21[COMRAM] unsigned int 
  3239 ;;  counter         1   20[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  2   16[COMRAM] unsigned int 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        7 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_printf
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text5
  3264  0013A8                     __ptext5:
  3265                           	opt stack 0
  3266  0013A8                     ___lwdiv:
  3267                           	opt stack 26
  3268                           
  3269                           ;incstack = 0
  3270  0013A8  0E00               	movlw	0
  3271  0013AA  6E17               	movwf	___lwdiv@quotient+1,c
  3272  0013AC  0E00               	movlw	0
  3273  0013AE  6E16               	movwf	___lwdiv@quotient,c
  3274  0013B0  5013               	movf	___lwdiv@divisor,w,c
  3275  0013B2  1014               	iorwf	___lwdiv@divisor+1,w,c
  3276  0013B4  B4D8               	btfsc	status,2,c
  3277  0013B6  D021               	goto	l1210
  3278  0013B8  0E01               	movlw	1
  3279  0013BA  6E15               	movwf	___lwdiv@counter,c
  3280  0013BC  D005               	goto	l4693
  3281  0013BE                     l4691:
  3282  0013BE  90D8               	bcf	status,0,c
  3283  0013C0  3613               	rlcf	___lwdiv@divisor,f,c
  3284  0013C2  3614               	rlcf	___lwdiv@divisor+1,f,c
  3285  0013C4  2A15               	incf	___lwdiv@counter,f,c
  3286  0013C6  D000               	goto	l4693
  3287  0013C8                     l4693:
  3288  0013C8  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3289  0013CA  D002               	goto	l4695
  3290  0013CC  D7F8               	goto	l4691
  3291  0013CE  D000               	goto	l4695
  3292  0013D0                     l4695:
  3293  0013D0  90D8               	bcf	status,0,c
  3294  0013D2  3616               	rlcf	___lwdiv@quotient,f,c
  3295  0013D4  3617               	rlcf	___lwdiv@quotient+1,f,c
  3296  0013D6  5013               	movf	___lwdiv@divisor,w,c
  3297  0013D8  5C11               	subwf	___lwdiv@dividend,w,c
  3298  0013DA  5014               	movf	___lwdiv@divisor+1,w,c
  3299  0013DC  5812               	subwfb	___lwdiv@dividend+1,w,c
  3300  0013DE  A0D8               	btfss	status,0,c
  3301  0013E0  D006               	goto	l4703
  3302  0013E2  5013               	movf	___lwdiv@divisor,w,c
  3303  0013E4  5E11               	subwf	___lwdiv@dividend,f,c
  3304  0013E6  5014               	movf	___lwdiv@divisor+1,w,c
  3305  0013E8  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3306  0013EA  8016               	bsf	___lwdiv@quotient,0,c
  3307  0013EC  D000               	goto	l4703
  3308  0013EE                     l4703:
  3309  0013EE  90D8               	bcf	status,0,c
  3310  0013F0  3214               	rrcf	___lwdiv@divisor+1,f,c
  3311  0013F2  3213               	rrcf	___lwdiv@divisor,f,c
  3312  0013F4  2E15               	decfsz	___lwdiv@counter,f,c
  3313  0013F6  D7EC               	goto	l4695
  3314  0013F8  D000               	goto	l1210
  3315  0013FA                     l1210:
  3316  0013FA  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3317  0013FE  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3318  001402  0012               	return		;funcret
  3319  001404                     __end_of___lwdiv:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           intcon	equ	0xFF2
  3328                           intcon2	equ	0xFF1
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _fillCircle *****************
  3341 ;; Defined at:
  3342 ;;		line 614 in file "ST7735_TFT.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  x0              2   58[COMRAM] int 
  3345 ;;  y0              2   60[COMRAM] int 
  3346 ;;  r               2   62[COMRAM] int 
  3347 ;;  color           2   64[COMRAM] unsigned int 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;		None
  3350 ;; Return value:  Size  Location     Type
  3351 ;;		None               void
  3352 ;; Registers used:
  3353 ;;		wreg, status,2, status,0, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3359 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;Total ram usage:        8 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    8
  3366 ;; This function calls:
  3367 ;;		_drawFastVLine
  3368 ;;		_fillCircleHelper
  3369 ;; This function is called by:
  3370 ;;		_main
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text6
  3375  001458                     __ptext6:
  3376                           	opt stack 0
  3377  001458                     _fillCircle:
  3378                           	opt stack 22
  3379                           
  3380                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3381                           
  3382                           ;incstack = 0
  3383  001458  503F               	movf	fillCircle@r,w,c
  3384  00145A  0800               	sublw	0
  3385  00145C  243D               	addwf	fillCircle@y0,w,c
  3386  00145E  6E18               	movwf	drawFastVLine@y,c
  3387  001460  80D8               	bsf	status,0,c
  3388  001462  343F               	rlcf	fillCircle@r,w,c
  3389  001464  6E19               	movwf	drawFastVLine@h,c
  3390  001466  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3391  00146A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3392  00146E  503B               	movf	fillCircle@x0,w,c
  3393  001470  EC39  F008         	call	_drawFastVLine
  3394                           
  3395                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3396  001474  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3397  001478  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3398  00147C  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3399  001480  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3400  001484  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3401  001488  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3402  00148C  0E00               	movlw	0
  3403  00148E  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3404  001490  0E03               	movlw	3
  3405  001492  6E29               	movwf	fillCircleHelper@cornername,c
  3406  001494  0E00               	movlw	0
  3407  001496  6E2C               	movwf	fillCircleHelper@delta+1,c
  3408  001498  0E00               	movlw	0
  3409  00149A  6E2B               	movwf	fillCircleHelper@delta,c
  3410  00149C  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3411  0014A0  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3412  0014A4  EC17  F005         	call	_fillCircleHelper	;wreg free
  3413  0014A8  0012               	return		;funcret
  3414  0014AA                     __end_of_fillCircle:
  3415                           	opt stack 0
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           prodh	equ	0xFF4
  3421                           prodl	equ	0xFF3
  3422                           intcon	equ	0xFF2
  3423                           intcon2	equ	0xFF1
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           indf2	equ	0xFDF
  3429                           postinc2	equ	0xFDE
  3430                           postdec2	equ	0xFDD
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _fillCircleHelper *****************
  3436 ;; Defined at:
  3437 ;;		line 589 in file "ST7735_TFT.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  x0              2   34[COMRAM] int 
  3440 ;;  y0              2   36[COMRAM] int 
  3441 ;;  r               2   38[COMRAM] int 
  3442 ;;  cornername      2   40[COMRAM] unsigned int 
  3443 ;;  delta           2   42[COMRAM] int 
  3444 ;;  color           2   44[COMRAM] unsigned int 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  y               2   56[COMRAM] int 
  3447 ;;  x               2   54[COMRAM] int 
  3448 ;;  f               2   52[COMRAM] int 
  3449 ;;  ddF_y           2   50[COMRAM] int 
  3450 ;;  ddF_x           2   48[COMRAM] int 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;		None               void
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3460 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;Total ram usage:       24 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    7
  3467 ;; This function calls:
  3468 ;;		_drawFastVLine
  3469 ;; This function is called by:
  3470 ;;		_fillCircle
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text7
  3475  000A2E                     __ptext7:
  3476                           	opt stack 0
  3477  000A2E                     _fillCircleHelper:
  3478                           	opt stack 22
  3479                           
  3480                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3481                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3482                           
  3483                           ;incstack = 0
  3484  000A2E  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3485  000A32  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3486  000A36  1E2F               	comf	??_fillCircleHelper,f,c
  3487  000A38  1E30               	comf	??_fillCircleHelper+1,f,c
  3488  000A3A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3489  000A3C  2A30               	incf	??_fillCircleHelper+1,f,c
  3490  000A3E  0E01               	movlw	1
  3491  000A40  242F               	addwf	??_fillCircleHelper,w,c
  3492  000A42  6E35               	movwf	fillCircleHelper@f,c
  3493  000A44  0E00               	movlw	0
  3494  000A46  2030               	addwfc	??_fillCircleHelper+1,w,c
  3495  000A48  6E36               	movwf	fillCircleHelper@f+1,c
  3496  000A4A  0E00               	movlw	0
  3497  000A4C  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3498  000A4E  0E01               	movlw	1
  3499  000A50  6E31               	movwf	fillCircleHelper@ddF_x,c
  3500  000A52  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3501  000A56  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3502  000A5A  90D8               	bcf	status,0,c
  3503  000A5C  362F               	rlcf	??_fillCircleHelper,f,c
  3504  000A5E  3630               	rlcf	??_fillCircleHelper+1,f,c
  3505  000A60  1E2F               	comf	??_fillCircleHelper,f,c
  3506  000A62  1E30               	comf	??_fillCircleHelper+1,f,c
  3507  000A64  4A2F               	infsnz	??_fillCircleHelper,f,c
  3508  000A66  2A30               	incf	??_fillCircleHelper+1,f,c
  3509  000A68  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3510  000A6C  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3511  000A70  0E00               	movlw	0
  3512  000A72  6E38               	movwf	fillCircleHelper@x+1,c
  3513  000A74  0E00               	movlw	0
  3514  000A76  6E37               	movwf	fillCircleHelper@x,c
  3515  000A78  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3516  000A7C  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3517                           
  3518                           ;ST7735_TFT.c: 593: while (x<y) {
  3519  000A80  D067               	goto	l4577
  3520  000A82                     l4557:
  3521                           
  3522                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3523  000A82  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3524  000A84  D00B               	goto	l177
  3525                           
  3526                           ;ST7735_TFT.c: 595: y--;
  3527  000A86  0639               	decf	fillCircleHelper@y,f,c
  3528  000A88  A0D8               	btfss	status,0,c
  3529  000A8A  063A               	decf	fillCircleHelper@y+1,f,c
  3530                           
  3531                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3532  000A8C  0E02               	movlw	2
  3533  000A8E  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3534  000A90  0E00               	movlw	0
  3535  000A92  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3536                           
  3537                           ;ST7735_TFT.c: 597: f += ddF_y;
  3538  000A94  5033               	movf	fillCircleHelper@ddF_y,w,c
  3539  000A96  2635               	addwf	fillCircleHelper@f,f,c
  3540  000A98  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3541  000A9A  2236               	addwfc	fillCircleHelper@f+1,f,c
  3542  000A9C                     l177:
  3543                           
  3544                           ;ST7735_TFT.c: 598: }
  3545                           ;ST7735_TFT.c: 599: x++;
  3546  000A9C  4A37               	infsnz	fillCircleHelper@x,f,c
  3547  000A9E  2A38               	incf	fillCircleHelper@x+1,f,c
  3548                           
  3549                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3550  000AA0  0E02               	movlw	2
  3551  000AA2  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3552  000AA4  0E00               	movlw	0
  3553  000AA6  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3554                           
  3555                           ;ST7735_TFT.c: 601: f += ddF_x;
  3556  000AA8  5031               	movf	fillCircleHelper@ddF_x,w,c
  3557  000AAA  2635               	addwf	fillCircleHelper@f,f,c
  3558  000AAC  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3559  000AAE  2236               	addwfc	fillCircleHelper@f+1,f,c
  3560                           
  3561                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3562  000AB0  A029               	btfss	fillCircleHelper@cornername,0,c
  3563  000AB2  D025               	goto	l4573
  3564                           
  3565                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3566  000AB4  5039               	movf	fillCircleHelper@y,w,c
  3567  000AB6  0800               	sublw	0
  3568  000AB8  2425               	addwf	fillCircleHelper@y0,w,c
  3569  000ABA  6E18               	movwf	drawFastVLine@y,c
  3570  000ABC  5039               	movf	fillCircleHelper@y,w,c
  3571  000ABE  2439               	addwf	fillCircleHelper@y,w,c
  3572  000AC0  242B               	addwf	fillCircleHelper@delta,w,c
  3573  000AC2  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3574  000AC4  282F               	incf	??_fillCircleHelper,w,c
  3575  000AC6  6E19               	movwf	drawFastVLine@h,c
  3576  000AC8  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3577  000ACC  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3578  000AD0  5023               	movf	fillCircleHelper@x0,w,c
  3579  000AD2  2437               	addwf	fillCircleHelper@x,w,c
  3580  000AD4  EC39  F008         	call	_drawFastVLine
  3581                           
  3582                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3583  000AD8  5037               	movf	fillCircleHelper@x,w,c
  3584  000ADA  0800               	sublw	0
  3585  000ADC  2425               	addwf	fillCircleHelper@y0,w,c
  3586  000ADE  6E18               	movwf	drawFastVLine@y,c
  3587  000AE0  5037               	movf	fillCircleHelper@x,w,c
  3588  000AE2  2437               	addwf	fillCircleHelper@x,w,c
  3589  000AE4  242B               	addwf	fillCircleHelper@delta,w,c
  3590  000AE6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3591  000AE8  282F               	incf	??_fillCircleHelper,w,c
  3592  000AEA  6E19               	movwf	drawFastVLine@h,c
  3593  000AEC  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3594  000AF0  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3595  000AF4  5023               	movf	fillCircleHelper@x0,w,c
  3596  000AF6  2439               	addwf	fillCircleHelper@y,w,c
  3597  000AF8  EC39  F008         	call	_drawFastVLine
  3598  000AFC  D000               	goto	l4573
  3599  000AFE                     l4573:
  3600                           
  3601                           ;ST7735_TFT.c: 606: }
  3602                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3603  000AFE  A229               	btfss	fillCircleHelper@cornername,1,c
  3604  000B00  D027               	goto	l4577
  3605                           
  3606                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3607  000B02  5039               	movf	fillCircleHelper@y,w,c
  3608  000B04  0800               	sublw	0
  3609  000B06  2425               	addwf	fillCircleHelper@y0,w,c
  3610  000B08  6E18               	movwf	drawFastVLine@y,c
  3611  000B0A  5039               	movf	fillCircleHelper@y,w,c
  3612  000B0C  2439               	addwf	fillCircleHelper@y,w,c
  3613  000B0E  242B               	addwf	fillCircleHelper@delta,w,c
  3614  000B10  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3615  000B12  282F               	incf	??_fillCircleHelper,w,c
  3616  000B14  6E19               	movwf	drawFastVLine@h,c
  3617  000B16  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3618  000B1A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3619  000B1E  5037               	movf	fillCircleHelper@x,w,c
  3620  000B20  0800               	sublw	0
  3621  000B22  2423               	addwf	fillCircleHelper@x0,w,c
  3622  000B24  EC39  F008         	call	_drawFastVLine
  3623                           
  3624                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3625  000B28  5037               	movf	fillCircleHelper@x,w,c
  3626  000B2A  0800               	sublw	0
  3627  000B2C  2425               	addwf	fillCircleHelper@y0,w,c
  3628  000B2E  6E18               	movwf	drawFastVLine@y,c
  3629  000B30  5037               	movf	fillCircleHelper@x,w,c
  3630  000B32  2437               	addwf	fillCircleHelper@x,w,c
  3631  000B34  242B               	addwf	fillCircleHelper@delta,w,c
  3632  000B36  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3633  000B38  282F               	incf	??_fillCircleHelper,w,c
  3634  000B3A  6E19               	movwf	drawFastVLine@h,c
  3635  000B3C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3636  000B40  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3637  000B44  5039               	movf	fillCircleHelper@y,w,c
  3638  000B46  0800               	sublw	0
  3639  000B48  2423               	addwf	fillCircleHelper@x0,w,c
  3640  000B4A  EC39  F008         	call	_drawFastVLine
  3641  000B4E  D000               	goto	l4577
  3642  000B50                     l4577:
  3643  000B50  5039               	movf	fillCircleHelper@y,w,c
  3644  000B52  5C37               	subwf	fillCircleHelper@x,w,c
  3645  000B54  5038               	movf	fillCircleHelper@x+1,w,c
  3646  000B56  0A80               	xorlw	128
  3647  000B58  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3648  000B5A  503A               	movf	fillCircleHelper@y+1,w,c
  3649  000B5C  0A80               	xorlw	128
  3650  000B5E  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3651  000B60  A0D8               	btfss	status,0,c
  3652  000B62  D78F               	goto	l4557
  3653  000B64  0012               	return		;funcret
  3654  000B66                     __end_of_fillCircleHelper:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon2	equ	0xFF1
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _drawCircle *****************
  3676 ;; Defined at:
  3677 ;;		line 528 in file "ST7735_TFT.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  x0              2   27[COMRAM] int 
  3680 ;;  y0              2   29[COMRAM] int 
  3681 ;;  r               2   31[COMRAM] int 
  3682 ;;  color           2   33[COMRAM] unsigned int 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  y               2   45[COMRAM] int 
  3685 ;;  x               2   43[COMRAM] int 
  3686 ;;  f               2   41[COMRAM] int 
  3687 ;;  ddF_y           2   39[COMRAM] int 
  3688 ;;  ddF_x           2   37[COMRAM] int 
  3689 ;; Return value:  Size  Location     Type
  3690 ;;		None               void
  3691 ;; Registers used:
  3692 ;;		wreg, status,2, status,0, cstack
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3698 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;Total ram usage:       20 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    7
  3705 ;; This function calls:
  3706 ;;		_drawPixel
  3707 ;; This function is called by:
  3708 ;;		_main
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text8
  3713  0005D2                     __ptext8:
  3714                           	opt stack 0
  3715  0005D2                     _drawCircle:
  3716                           	opt stack 23
  3717                           
  3718                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3719                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3720                           
  3721                           ;incstack = 0
  3722  0005D2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3723  0005D6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3724  0005DA  1E24               	comf	??_drawCircle,f,c
  3725  0005DC  1E25               	comf	??_drawCircle+1,f,c
  3726  0005DE  4A24               	infsnz	??_drawCircle,f,c
  3727  0005E0  2A25               	incf	??_drawCircle+1,f,c
  3728  0005E2  0E01               	movlw	1
  3729  0005E4  2424               	addwf	??_drawCircle,w,c
  3730  0005E6  6E2A               	movwf	drawCircle@f,c
  3731  0005E8  0E00               	movlw	0
  3732  0005EA  2025               	addwfc	??_drawCircle+1,w,c
  3733  0005EC  6E2B               	movwf	drawCircle@f+1,c
  3734  0005EE  0E00               	movlw	0
  3735  0005F0  6E27               	movwf	drawCircle@ddF_x+1,c
  3736  0005F2  0E01               	movlw	1
  3737  0005F4  6E26               	movwf	drawCircle@ddF_x,c
  3738  0005F6  C020  F024         	movff	drawCircle@r,??_drawCircle
  3739  0005FA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3740  0005FE  90D8               	bcf	status,0,c
  3741  000600  3624               	rlcf	??_drawCircle,f,c
  3742  000602  3625               	rlcf	??_drawCircle+1,f,c
  3743  000604  1E24               	comf	??_drawCircle,f,c
  3744  000606  1E25               	comf	??_drawCircle+1,f,c
  3745  000608  4A24               	infsnz	??_drawCircle,f,c
  3746  00060A  2A25               	incf	??_drawCircle+1,f,c
  3747  00060C  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3748  000610  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3749  000614  0E00               	movlw	0
  3750  000616  6E2D               	movwf	drawCircle@x+1,c
  3751  000618  0E00               	movlw	0
  3752  00061A  6E2C               	movwf	drawCircle@x,c
  3753  00061C  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3754  000620  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3755                           
  3756                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3757  000624  501E               	movf	drawCircle@y0,w,c
  3758  000626  2420               	addwf	drawCircle@r,w,c
  3759  000628  6E18               	movwf	drawPixel@y,c
  3760  00062A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3761  00062E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3762  000632  501C               	movf	drawCircle@x0,w,c
  3763  000634  ECC8  F00B         	call	_drawPixel
  3764                           
  3765                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3766  000638  5020               	movf	drawCircle@r,w,c
  3767  00063A  0800               	sublw	0
  3768  00063C  241E               	addwf	drawCircle@y0,w,c
  3769  00063E  6E18               	movwf	drawPixel@y,c
  3770  000640  C022  F019         	movff	drawCircle@color,drawPixel@color
  3771  000644  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3772  000648  501C               	movf	drawCircle@x0,w,c
  3773  00064A  ECC8  F00B         	call	_drawPixel
  3774                           
  3775                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3776  00064E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3777  000652  C022  F019         	movff	drawCircle@color,drawPixel@color
  3778  000656  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3779  00065A  501C               	movf	drawCircle@x0,w,c
  3780  00065C  2420               	addwf	drawCircle@r,w,c
  3781  00065E  ECC8  F00B         	call	_drawPixel
  3782                           
  3783                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3784  000662  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3785  000666  C022  F019         	movff	drawCircle@color,drawPixel@color
  3786  00066A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3787  00066E  5020               	movf	drawCircle@r,w,c
  3788  000670  0800               	sublw	0
  3789  000672  241C               	addwf	drawCircle@x0,w,c
  3790  000674  ECC8  F00B         	call	_drawPixel
  3791                           
  3792                           ;ST7735_TFT.c: 536: while (x < y) {
  3793  000678  D078               	goto	l4771
  3794  00067A                     l4743:
  3795                           
  3796                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3797  00067A  BE2B               	btfsc	drawCircle@f+1,7,c
  3798  00067C  D00B               	goto	l159
  3799                           
  3800                           ;ST7735_TFT.c: 538: y--;
  3801  00067E  062E               	decf	drawCircle@y,f,c
  3802  000680  A0D8               	btfss	status,0,c
  3803  000682  062F               	decf	drawCircle@y+1,f,c
  3804                           
  3805                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3806  000684  0E02               	movlw	2
  3807  000686  2628               	addwf	drawCircle@ddF_y,f,c
  3808  000688  0E00               	movlw	0
  3809  00068A  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3810                           
  3811                           ;ST7735_TFT.c: 540: f += ddF_y;
  3812  00068C  5028               	movf	drawCircle@ddF_y,w,c
  3813  00068E  262A               	addwf	drawCircle@f,f,c
  3814  000690  5029               	movf	drawCircle@ddF_y+1,w,c
  3815  000692  222B               	addwfc	drawCircle@f+1,f,c
  3816  000694                     l159:
  3817                           
  3818                           ;ST7735_TFT.c: 541: }
  3819                           ;ST7735_TFT.c: 542: x++;
  3820  000694  4A2C               	infsnz	drawCircle@x,f,c
  3821  000696  2A2D               	incf	drawCircle@x+1,f,c
  3822                           
  3823                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3824  000698  0E02               	movlw	2
  3825  00069A  2626               	addwf	drawCircle@ddF_x,f,c
  3826  00069C  0E00               	movlw	0
  3827  00069E  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3828                           
  3829                           ;ST7735_TFT.c: 544: f += ddF_x;
  3830  0006A0  5026               	movf	drawCircle@ddF_x,w,c
  3831  0006A2  262A               	addwf	drawCircle@f,f,c
  3832  0006A4  5027               	movf	drawCircle@ddF_x+1,w,c
  3833  0006A6  222B               	addwfc	drawCircle@f+1,f,c
  3834                           
  3835                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3836  0006A8  501E               	movf	drawCircle@y0,w,c
  3837  0006AA  242E               	addwf	drawCircle@y,w,c
  3838  0006AC  6E18               	movwf	drawPixel@y,c
  3839  0006AE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3840  0006B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3841  0006B6  501C               	movf	drawCircle@x0,w,c
  3842  0006B8  242C               	addwf	drawCircle@x,w,c
  3843  0006BA  ECC8  F00B         	call	_drawPixel
  3844                           
  3845                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3846  0006BE  501E               	movf	drawCircle@y0,w,c
  3847  0006C0  242E               	addwf	drawCircle@y,w,c
  3848  0006C2  6E18               	movwf	drawPixel@y,c
  3849  0006C4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3850  0006C8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3851  0006CC  502C               	movf	drawCircle@x,w,c
  3852  0006CE  0800               	sublw	0
  3853  0006D0  241C               	addwf	drawCircle@x0,w,c
  3854  0006D2  ECC8  F00B         	call	_drawPixel
  3855                           
  3856                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3857  0006D6  502E               	movf	drawCircle@y,w,c
  3858  0006D8  0800               	sublw	0
  3859  0006DA  241E               	addwf	drawCircle@y0,w,c
  3860  0006DC  6E18               	movwf	drawPixel@y,c
  3861  0006DE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3862  0006E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3863  0006E6  501C               	movf	drawCircle@x0,w,c
  3864  0006E8  242C               	addwf	drawCircle@x,w,c
  3865  0006EA  ECC8  F00B         	call	_drawPixel
  3866                           
  3867                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3868  0006EE  502E               	movf	drawCircle@y,w,c
  3869  0006F0  0800               	sublw	0
  3870  0006F2  241E               	addwf	drawCircle@y0,w,c
  3871  0006F4  6E18               	movwf	drawPixel@y,c
  3872  0006F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3873  0006FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3874  0006FE  502C               	movf	drawCircle@x,w,c
  3875  000700  0800               	sublw	0
  3876  000702  241C               	addwf	drawCircle@x0,w,c
  3877  000704  ECC8  F00B         	call	_drawPixel
  3878                           
  3879                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3880  000708  501E               	movf	drawCircle@y0,w,c
  3881  00070A  242C               	addwf	drawCircle@x,w,c
  3882  00070C  6E18               	movwf	drawPixel@y,c
  3883  00070E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3884  000712  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3885  000716  501C               	movf	drawCircle@x0,w,c
  3886  000718  242E               	addwf	drawCircle@y,w,c
  3887  00071A  ECC8  F00B         	call	_drawPixel
  3888                           
  3889                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3890  00071E  501E               	movf	drawCircle@y0,w,c
  3891  000720  242C               	addwf	drawCircle@x,w,c
  3892  000722  6E18               	movwf	drawPixel@y,c
  3893  000724  C022  F019         	movff	drawCircle@color,drawPixel@color
  3894  000728  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3895  00072C  502E               	movf	drawCircle@y,w,c
  3896  00072E  0800               	sublw	0
  3897  000730  241C               	addwf	drawCircle@x0,w,c
  3898  000732  ECC8  F00B         	call	_drawPixel
  3899                           
  3900                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3901  000736  502C               	movf	drawCircle@x,w,c
  3902  000738  0800               	sublw	0
  3903  00073A  241E               	addwf	drawCircle@y0,w,c
  3904  00073C  6E18               	movwf	drawPixel@y,c
  3905  00073E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3906  000742  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3907  000746  501C               	movf	drawCircle@x0,w,c
  3908  000748  242E               	addwf	drawCircle@y,w,c
  3909  00074A  ECC8  F00B         	call	_drawPixel
  3910                           
  3911                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3912  00074E  502C               	movf	drawCircle@x,w,c
  3913  000750  0800               	sublw	0
  3914  000752  241E               	addwf	drawCircle@y0,w,c
  3915  000754  6E18               	movwf	drawPixel@y,c
  3916  000756  C022  F019         	movff	drawCircle@color,drawPixel@color
  3917  00075A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3918  00075E  502E               	movf	drawCircle@y,w,c
  3919  000760  0800               	sublw	0
  3920  000762  241C               	addwf	drawCircle@x0,w,c
  3921  000764  ECC8  F00B         	call	_drawPixel
  3922  000768  D000               	goto	l4771
  3923  00076A                     l4771:
  3924  00076A  502E               	movf	drawCircle@y,w,c
  3925  00076C  5C2C               	subwf	drawCircle@x,w,c
  3926  00076E  502D               	movf	drawCircle@x+1,w,c
  3927  000770  0A80               	xorlw	128
  3928  000772  6E24               	movwf	??_drawCircle& (0+255),c
  3929  000774  502F               	movf	drawCircle@y+1,w,c
  3930  000776  0A80               	xorlw	128
  3931  000778  5824               	subwfb	??_drawCircle& (0+255),w,c
  3932  00077A  A0D8               	btfss	status,0,c
  3933  00077C  D77E               	goto	l4743
  3934  00077E  0012               	return		;funcret
  3935  000780                     __end_of_drawCircle:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           intcon2	equ	0xFF1
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function ___awdiv *****************
  3957 ;; Defined at:
  3958 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  dividend        2   22[COMRAM] int 
  3961 ;;  divisor         2   24[COMRAM] int 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  quotient        2   28[COMRAM] int 
  3964 ;;  sign            1   27[COMRAM] unsigned char 
  3965 ;;  counter         1   26[COMRAM] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  2   22[COMRAM] int 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3975 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;Total ram usage:        8 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    3
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_main
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text9
  3990  000F4E                     __ptext9:
  3991                           	opt stack 0
  3992  000F4E                     ___awdiv:
  3993                           	opt stack 27
  3994                           
  3995                           ;incstack = 0
  3996  000F4E  0E00               	movlw	0
  3997  000F50  6E1C               	movwf	___awdiv@sign,c
  3998  000F52  AE1A               	btfss	___awdiv@divisor+1,7,c
  3999  000F54  D007               	goto	l5059
  4000  000F56  6C19               	negf	___awdiv@divisor,c
  4001  000F58  1E1A               	comf	___awdiv@divisor+1,f,c
  4002  000F5A  B0D8               	btfsc	status,0,c
  4003  000F5C  2A1A               	incf	___awdiv@divisor+1,f,c
  4004  000F5E  0E01               	movlw	1
  4005  000F60  6E1C               	movwf	___awdiv@sign,c
  4006  000F62  D000               	goto	l5059
  4007  000F64                     l5059:
  4008  000F64  AE18               	btfss	___awdiv@dividend+1,7,c
  4009  000F66  D007               	goto	l5065
  4010  000F68  6C17               	negf	___awdiv@dividend,c
  4011  000F6A  1E18               	comf	___awdiv@dividend+1,f,c
  4012  000F6C  B0D8               	btfsc	status,0,c
  4013  000F6E  2A18               	incf	___awdiv@dividend+1,f,c
  4014  000F70  0E01               	movlw	1
  4015  000F72  1A1C               	xorwf	___awdiv@sign,f,c
  4016  000F74  D000               	goto	l5065
  4017  000F76                     l5065:
  4018  000F76  0E00               	movlw	0
  4019  000F78  6E1E               	movwf	___awdiv@quotient+1,c
  4020  000F7A  0E00               	movlw	0
  4021  000F7C  6E1D               	movwf	___awdiv@quotient,c
  4022  000F7E  5019               	movf	___awdiv@divisor,w,c
  4023  000F80  101A               	iorwf	___awdiv@divisor+1,w,c
  4024  000F82  B4D8               	btfsc	status,2,c
  4025  000F84  D021               	goto	l5087
  4026  000F86  0E01               	movlw	1
  4027  000F88  6E1B               	movwf	___awdiv@counter,c
  4028  000F8A  D005               	goto	l5073
  4029  000F8C                     l5071:
  4030  000F8C  90D8               	bcf	status,0,c
  4031  000F8E  3619               	rlcf	___awdiv@divisor,f,c
  4032  000F90  361A               	rlcf	___awdiv@divisor+1,f,c
  4033  000F92  2A1B               	incf	___awdiv@counter,f,c
  4034  000F94  D000               	goto	l5073
  4035  000F96                     l5073:
  4036  000F96  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4037  000F98  D002               	goto	l5075
  4038  000F9A  D7F8               	goto	l5071
  4039  000F9C  D000               	goto	l5075
  4040  000F9E                     l5075:
  4041  000F9E  90D8               	bcf	status,0,c
  4042  000FA0  361D               	rlcf	___awdiv@quotient,f,c
  4043  000FA2  361E               	rlcf	___awdiv@quotient+1,f,c
  4044  000FA4  5019               	movf	___awdiv@divisor,w,c
  4045  000FA6  5C17               	subwf	___awdiv@dividend,w,c
  4046  000FA8  501A               	movf	___awdiv@divisor+1,w,c
  4047  000FAA  5818               	subwfb	___awdiv@dividend+1,w,c
  4048  000FAC  A0D8               	btfss	status,0,c
  4049  000FAE  D006               	goto	l5083
  4050  000FB0  5019               	movf	___awdiv@divisor,w,c
  4051  000FB2  5E17               	subwf	___awdiv@dividend,f,c
  4052  000FB4  501A               	movf	___awdiv@divisor+1,w,c
  4053  000FB6  5A18               	subwfb	___awdiv@dividend+1,f,c
  4054  000FB8  801D               	bsf	___awdiv@quotient,0,c
  4055  000FBA  D000               	goto	l5083
  4056  000FBC                     l5083:
  4057  000FBC  90D8               	bcf	status,0,c
  4058  000FBE  321A               	rrcf	___awdiv@divisor+1,f,c
  4059  000FC0  3219               	rrcf	___awdiv@divisor,f,c
  4060  000FC2  2E1B               	decfsz	___awdiv@counter,f,c
  4061  000FC4  D7EC               	goto	l5075
  4062  000FC6  D000               	goto	l5087
  4063  000FC8                     l5087:
  4064  000FC8  501C               	movf	___awdiv@sign,w,c
  4065  000FCA  B4D8               	btfsc	status,2,c
  4066  000FCC  D005               	goto	l5091
  4067  000FCE  6C1D               	negf	___awdiv@quotient,c
  4068  000FD0  1E1E               	comf	___awdiv@quotient+1,f,c
  4069  000FD2  B0D8               	btfsc	status,0,c
  4070  000FD4  2A1E               	incf	___awdiv@quotient+1,f,c
  4071  000FD6  D000               	goto	l5091
  4072  000FD8                     l5091:
  4073  000FD8  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4074  000FDC  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4075  000FE0  D000               	goto	l880
  4076  000FE2                     l880:
  4077  000FE2  0012               	return		;funcret
  4078  000FE4                     __end_of___awdiv:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           intcon2	equ	0xFF1
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _Wait_One_Sec *****************
  4100 ;; Defined at:
  4101 ;;		line 117 in file "Lab11p1.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  k               2   16[COMRAM] int 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;Total ram usage:        2 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    3
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text10
  4130  001812                     __ptext10:
  4131                           	opt stack 0
  4132  001812                     _Wait_One_Sec:
  4133                           	opt stack 27
  4134                           
  4135                           ;Lab11p1.c: 119: for (int k=0;k<17000;k++);
  4136                           
  4137                           ;incstack = 0
  4138  001812  0E00               	movlw	0
  4139  001814  6E12               	movwf	Wait_One_Sec@k+1,c
  4140  001816  0E00               	movlw	0
  4141  001818  6E11               	movwf	Wait_One_Sec@k,c
  4142  00181A                     l4799:
  4143  00181A  BE12               	btfsc	Wait_One_Sec@k+1,7,c
  4144  00181C  D008               	goto	l4803
  4145  00181E  0E68               	movlw	104
  4146  001820  5C11               	subwf	Wait_One_Sec@k,w,c
  4147  001822  0E42               	movlw	66
  4148  001824  5812               	subwfb	Wait_One_Sec@k+1,w,c
  4149  001826  B0D8               	btfsc	status,0,c
  4150  001828  D005               	goto	l367
  4151  00182A  D001               	goto	l4803
  4152  00182C  D003               	goto	l367
  4153  00182E                     l4803:
  4154  00182E  4A11               	infsnz	Wait_One_Sec@k,f,c
  4155  001830  2A12               	incf	Wait_One_Sec@k+1,f,c
  4156  001832  D7F3               	goto	l4799
  4157  001834                     l367:
  4158  001834  0012               	return		;funcret
  4159  001836                     __end_of_Wait_One_Sec:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           intcon	equ	0xFF2
  4168                           intcon2	equ	0xFF1
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           postdec1	equ	0xFE5
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _Initialize_Screen *****************
  4181 ;; Defined at:
  4182 ;;		line 234 in file "Lab11p1.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;		None               void
  4189 ;; Registers used:
  4190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:   10
  4203 ;; This function calls:
  4204 ;;		_LCD_Reset
  4205 ;;		_TFT_GreenTab_Initialize
  4206 ;;		_drawtext
  4207 ;;		_fillScreen
  4208 ;;		_strcpy
  4209 ;; This function is called by:
  4210 ;;		_main
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text11
  4215  000FE4                     __ptext11:
  4216                           	opt stack 0
  4217  000FE4                     _Initialize_Screen:
  4218                           	opt stack 20
  4219                           
  4220                           ;Lab11p1.c: 236: LCD_Reset();
  4221                           
  4222                           ;incstack = 0
  4223  000FE4  EC91  F00C         	call	_LCD_Reset	;wreg free
  4224                           
  4225                           ;Lab11p1.c: 237: TFT_GreenTab_Initialize();
  4226  000FE8  ECE0  F00B         	call	_TFT_GreenTab_Initialize	;wreg free
  4227                           
  4228                           ;Lab11p1.c: 238: fillScreen(0x0000);
  4229  000FEC  0E00               	movlw	0
  4230  000FEE  6E25               	movwf	fillScreen@color+1,c
  4231  000FF0  0E00               	movlw	0
  4232  000FF2  6E24               	movwf	fillScreen@color,c
  4233  000FF4  EC4B  F00C         	call	_fillScreen	;wreg free
  4234                           
  4235                           ;Lab11p1.c: 241: txt = buffer;
  4236  000FF8  0E54               	movlw	low _buffer
  4237  000FFA  6E4E               	movwf	_txt,c
  4238  000FFC  0E01               	movlw	high _buffer
  4239  000FFE  6E4F               	movwf	_txt+1,c
  4240                           
  4241                           ;Lab11p1.c: 242: strcpy(txt, "ECE3301L Fall 22-S1");
  4242  001000  C04E  F011         	movff	_txt,strcpy@to
  4243  001004  C04F  F012         	movff	_txt+1,strcpy@to+1
  4244  001008  0ED3               	movlw	low STR_4
  4245  00100A  6E13               	movwf	strcpy@from,c
  4246  00100C  0EFF               	movlw	high STR_4
  4247  00100E  6E14               	movwf	strcpy@from+1,c
  4248  001010  ECAF  F00B         	call	_strcpy	;wreg free
  4249                           
  4250                           ;Lab11p1.c: 243: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4251  001014  0E02               	movlw	2
  4252  001016  6E39               	movwf	drawtext@y,c
  4253  001018  C04E  F03A         	movff	_txt,drawtext@_text
  4254  00101C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4255  001020  0EFF               	movlw	255
  4256  001022  6E3D               	movwf	drawtext@color+1,c
  4257  001024  683C               	setf	drawtext@color,c
  4258  001026  0E00               	movlw	0
  4259  001028  6E3F               	movwf	drawtext@bg+1,c
  4260  00102A  0E00               	movlw	0
  4261  00102C  6E3E               	movwf	drawtext@bg,c
  4262  00102E  0E01               	movlw	1
  4263  001030  6E40               	movwf	drawtext@size,c
  4264  001032  0E02               	movlw	2
  4265  001034  EC3B  F006         	call	_drawtext
  4266                           
  4267                           ;Lab11p1.c: 245: strcpy(txt, "LAB 11");
  4268  001038  C04E  F011         	movff	_txt,strcpy@to
  4269  00103C  C04F  F012         	movff	_txt+1,strcpy@to+1
  4270  001040  0EF8               	movlw	low STR_5
  4271  001042  6E13               	movwf	strcpy@from,c
  4272  001044  0EFF               	movlw	high STR_5
  4273  001046  6E14               	movwf	strcpy@from+1,c
  4274  001048  ECAF  F00B         	call	_strcpy	;wreg free
  4275                           
  4276                           ;Lab11p1.c: 246: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4277  00104C  0E0A               	movlw	10
  4278  00104E  6E39               	movwf	drawtext@y,c
  4279  001050  C04E  F03A         	movff	_txt,drawtext@_text
  4280  001054  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4281  001058  0EFF               	movlw	255
  4282  00105A  6E3D               	movwf	drawtext@color+1,c
  4283  00105C  683C               	setf	drawtext@color,c
  4284  00105E  0E00               	movlw	0
  4285  001060  6E3F               	movwf	drawtext@bg+1,c
  4286  001062  0E00               	movlw	0
  4287  001064  6E3E               	movwf	drawtext@bg,c
  4288  001066  0E01               	movlw	1
  4289  001068  6E40               	movwf	drawtext@size,c
  4290  00106A  0E32               	movlw	50
  4291  00106C  EC3B  F006         	call	_drawtext
  4292  001070  0012               	return		;funcret
  4293  001072                     __end_of_Initialize_Screen:
  4294                           	opt stack 0
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           intcon2	equ	0xFF1
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _strcpy *****************
  4315 ;; Defined at:
  4316 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  to              2   16[COMRAM] PTR unsigned char 
  4319 ;;		 -> NULL(0), buffer(31), 
  4320 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4321 ;;		 -> STR_5(7), STR_4(20), 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4324 ;;		 -> NULL(0), buffer(31), 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  2   16[COMRAM] PTR unsigned char 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;Total ram usage:        6 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_Initialize_Screen
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text12
  4349  00175E                     __ptext12:
  4350                           	opt stack 0
  4351  00175E                     _strcpy:
  4352                           	opt stack 26
  4353                           
  4354                           ;incstack = 0
  4355  00175E  C011  F015         	movff	strcpy@to,strcpy@cp
  4356  001762  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4357  001766  D005               	goto	l4631
  4358  001768                     l4629:
  4359  001768  4A15               	infsnz	strcpy@cp,f,c
  4360  00176A  2A16               	incf	strcpy@cp+1,f,c
  4361  00176C  4A13               	infsnz	strcpy@from,f,c
  4362  00176E  2A14               	incf	strcpy@from+1,f,c
  4363  001770  D000               	goto	l4631
  4364  001772                     l4631:
  4365  001772  C013  FFF6         	movff	strcpy@from,tblptrl
  4366  001776  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4367  00177A                     	if	0	;tblptru may be non-zero
  4368  00177A                     	endif
  4369  00177A                     	if	0	;tblptru may be non-zero
  4370  00177A                     	endif
  4371  00177A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4372  00177E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4373  001782  0008               	tblrd		*
  4374  001784  CFF5 FFDF          	movff	tablat,indf2
  4375  001788  50DF               	movf	indf2,w,c
  4376  00178A  A4D8               	btfss	status,2,c
  4377  00178C  D7ED               	goto	l4629
  4378                           
  4379                           ;	Return value of _strcpy is never used
  4380  00178E  0012               	return		;funcret
  4381  001790                     __end_of_strcpy:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           intcon2	equ	0xFF1
  4391                           postinc0	equ	0xFEE
  4392                           wreg	equ	0xFE8
  4393                           postdec1	equ	0xFE5
  4394                           fsr1l	equ	0xFE1
  4395                           indf2	equ	0xFDF
  4396                           postinc2	equ	0xFDE
  4397                           postdec2	equ	0xFDD
  4398                           fsr2h	equ	0xFDA
  4399                           fsr2l	equ	0xFD9
  4400                           status	equ	0xFD8
  4401                           
  4402 ;; *************** function _fillScreen *****************
  4403 ;; Defined at:
  4404 ;;		line 619 in file "ST7735_TFT.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  color           2   35[COMRAM] unsigned int 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;		None               void
  4411 ;; Registers used:
  4412 ;;		wreg, status,2, status,0, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;Total ram usage:        2 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    7
  4425 ;; This function calls:
  4426 ;;		_fillRectangle
  4427 ;; This function is called by:
  4428 ;;		_Initialize_Screen
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text13
  4433  001896                     __ptext13:
  4434                           	opt stack 0
  4435  001896                     _fillScreen:
  4436                           	opt stack 22
  4437                           
  4438                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4439                           
  4440                           ;incstack = 0
  4441  001896  0E00               	movlw	0
  4442  001898  6E18               	movwf	fillRectangle@y,c
  4443  00189A  0E80               	movlw	128
  4444  00189C  6E19               	movwf	fillRectangle@w,c
  4445  00189E  0EA0               	movlw	160
  4446  0018A0  6E1A               	movwf	fillRectangle@h,c
  4447  0018A2  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4448  0018A6  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4449  0018AA  0E00               	movlw	0
  4450  0018AC  EC39  F007         	call	_fillRectangle
  4451  0018B0  0012               	return		;funcret
  4452  0018B2                     __end_of_fillScreen:
  4453                           	opt stack 0
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           intcon2	equ	0xFF1
  4462                           postinc0	equ	0xFEE
  4463                           wreg	equ	0xFE8
  4464                           postdec1	equ	0xFE5
  4465                           fsr1l	equ	0xFE1
  4466                           indf2	equ	0xFDF
  4467                           postinc2	equ	0xFDE
  4468                           postdec2	equ	0xFDD
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _fillRectangle *****************
  4474 ;; Defined at:
  4475 ;;		line 503 in file "ST7735_TFT.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  x               1    wreg     unsigned char 
  4478 ;;  y               1   23[COMRAM] unsigned char 
  4479 ;;  w               1   24[COMRAM] unsigned char 
  4480 ;;  h               1   25[COMRAM] unsigned char 
  4481 ;;  color           2   26[COMRAM] unsigned int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  x               1   34[COMRAM] unsigned char 
  4484 ;;  lo              1   33[COMRAM] unsigned char 
  4485 ;;  hi              1   32[COMRAM] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;		None               void
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:       12 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    6
  4502 ;; This function calls:
  4503 ;;		_setAddrWindow
  4504 ;;		_spiwrite
  4505 ;; This function is called by:
  4506 ;;		_fillScreen
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text14
  4511  000E72                     __ptext14:
  4512                           	opt stack 0
  4513  000E72                     _fillRectangle:
  4514                           	opt stack 22
  4515                           
  4516                           ;incstack = 0
  4517                           ;fillRectangle@x stored from wreg
  4518  000E72  6E23               	movwf	fillRectangle@x,c
  4519                           
  4520                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4521                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4522  000E74  0E80               	movlw	128
  4523  000E76  6023               	cpfslt	fillRectangle@x,c
  4524  000E78  D069               	goto	l148
  4525  000E7A  0E9F               	movlw	159
  4526  000E7C  6418               	cpfsgt	fillRectangle@y,c
  4527  000E7E  D001               	goto	l4391
  4528                           
  4529                           ;ST7735_TFT.c: 507: return;
  4530  000E80  D065               	goto	l148
  4531  000E82                     l4391:
  4532                           
  4533                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4534  000E82  0EFF               	movlw	255
  4535  000E84  6E1D               	movwf	??_fillRectangle& (0+255),c
  4536  000E86  0EFF               	movlw	255
  4537  000E88  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4538  000E8A  5019               	movf	fillRectangle@w,w,c
  4539  000E8C  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4540  000E90  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4541  000E92  261F               	addwf	??_fillRectangle+2,f,c
  4542  000E94  0E00               	movlw	0
  4543  000E96  2220               	addwfc	??_fillRectangle+3,f,c
  4544  000E98  501D               	movf	??_fillRectangle,w,c
  4545  000E9A  261F               	addwf	??_fillRectangle+2,f,c
  4546  000E9C  501E               	movf	??_fillRectangle+1,w,c
  4547  000E9E  2220               	addwfc	??_fillRectangle+3,f,c
  4548  000EA0  BE20               	btfsc	??_fillRectangle+3,7,c
  4549  000EA2  D00A               	goto	l149
  4550  000EA4  5020               	movf	??_fillRectangle+3,w,c
  4551  000EA6  E104               	bnz	u2950
  4552  000EA8  0E80               	movlw	128
  4553  000EAA  5C1F               	subwf	??_fillRectangle+2,w,c
  4554  000EAC  A0D8               	btfss	status,0,c
  4555  000EAE  D004               	goto	l149
  4556  000EB0                     u2950:
  4557                           
  4558                           ;ST7735_TFT.c: 509: w = 128 - x;
  4559  000EB0  5023               	movf	fillRectangle@x,w,c
  4560  000EB2  0800               	sublw	0
  4561  000EB4  0F80               	addlw	128
  4562  000EB6  6E19               	movwf	fillRectangle@w,c
  4563  000EB8                     l149:
  4564                           
  4565                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4566  000EB8  0EFF               	movlw	255
  4567  000EBA  6E1D               	movwf	??_fillRectangle& (0+255),c
  4568  000EBC  0EFF               	movlw	255
  4569  000EBE  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4570  000EC0  501A               	movf	fillRectangle@h,w,c
  4571  000EC2  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4572  000EC6  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4573  000EC8  261F               	addwf	??_fillRectangle+2,f,c
  4574  000ECA  0E00               	movlw	0
  4575  000ECC  2220               	addwfc	??_fillRectangle+3,f,c
  4576  000ECE  501D               	movf	??_fillRectangle,w,c
  4577  000ED0  261F               	addwf	??_fillRectangle+2,f,c
  4578  000ED2  501E               	movf	??_fillRectangle+1,w,c
  4579  000ED4  2220               	addwfc	??_fillRectangle+3,f,c
  4580  000ED6  BE20               	btfsc	??_fillRectangle+3,7,c
  4581  000ED8  D00B               	goto	l4397
  4582  000EDA  5020               	movf	??_fillRectangle+3,w,c
  4583  000EDC  E104               	bnz	u2960
  4584  000EDE  0EA0               	movlw	160
  4585  000EE0  5C1F               	subwf	??_fillRectangle+2,w,c
  4586  000EE2  A0D8               	btfss	status,0,c
  4587  000EE4  D005               	goto	l4397
  4588  000EE6                     u2960:
  4589                           
  4590                           ;ST7735_TFT.c: 511: h = 160 - y;
  4591  000EE6  5018               	movf	fillRectangle@y,w,c
  4592  000EE8  0800               	sublw	0
  4593  000EEA  0FA0               	addlw	160
  4594  000EEC  6E1A               	movwf	fillRectangle@h,c
  4595  000EEE  D000               	goto	l4397
  4596  000EF0                     l4397:
  4597                           
  4598                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4599  000EF0  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4600  000EF4  5023               	movf	fillRectangle@x,w,c
  4601  000EF6  2419               	addwf	fillRectangle@w,w,c
  4602  000EF8  6E1D               	movwf	??_fillRectangle& (0+255),c
  4603  000EFA  041D               	decf	??_fillRectangle,w,c
  4604  000EFC  6E15               	movwf	setAddrWindow@x1,c
  4605  000EFE  5018               	movf	fillRectangle@y,w,c
  4606  000F00  241A               	addwf	fillRectangle@h,w,c
  4607  000F02  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4608  000F04  041E               	decf	??_fillRectangle+1,w,c
  4609  000F06  6E16               	movwf	setAddrWindow@y1,c
  4610  000F08  5023               	movf	fillRectangle@x,w,c
  4611  000F0A  EC7E  F00A         	call	_setAddrWindow
  4612                           
  4613                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4614  000F0E  501C               	movf	fillRectangle@color+1,w,c
  4615  000F10  6E21               	movwf	fillRectangle@hi,c
  4616  000F12  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4617                           
  4618                           ;ST7735_TFT.c: 514: PORTCbits.RC2 = 1;
  4619  000F16  8482               	bsf	3970,2,c	;volatile
  4620                           
  4621                           ;ST7735_TFT.c: 515: PORTCbits.RC4 = 0;
  4622  000F18  9882               	bcf	3970,4,c	;volatile
  4623                           
  4624                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4625  000F1A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4626  000F1E                     l4409:
  4627  000F1E  5018               	movf	fillRectangle@y,w,c
  4628  000F20  B4D8               	btfsc	status,2,c
  4629  000F22  D013               	goto	l152
  4630  000F24  D001               	goto	l151
  4631  000F26  D011               	goto	l152
  4632  000F28                     l151:
  4633                           
  4634                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4635  000F28  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4636  000F2C                     l4413:
  4637  000F2C  5023               	movf	fillRectangle@x,w,c
  4638  000F2E  B4D8               	btfsc	status,2,c
  4639  000F30  D00A               	goto	l4423
  4640  000F32  D001               	goto	l4417
  4641  000F34  D008               	goto	l4423
  4642  000F36                     l4417:
  4643                           
  4644                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4645  000F36  5021               	movf	fillRectangle@hi,w,c
  4646  000F38  EC7D  F00C         	call	_spiwrite
  4647                           
  4648                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4649  000F3C  5022               	movf	fillRectangle@lo,w,c
  4650  000F3E  EC7D  F00C         	call	_spiwrite
  4651  000F42  0623               	decf	fillRectangle@x,f,c
  4652  000F44  D7F3               	goto	l4413
  4653  000F46                     l4423:
  4654  000F46  0618               	decf	fillRectangle@y,f,c
  4655  000F48  D7EA               	goto	l4409
  4656  000F4A                     l152:
  4657                           
  4658                           ;ST7735_TFT.c: 521: }
  4659                           ;ST7735_TFT.c: 522: }
  4660                           ;ST7735_TFT.c: 523: PORTCbits.RC4 = 1;
  4661  000F4A  8882               	bsf	3970,4,c	;volatile
  4662  000F4C                     l148:
  4663  000F4C  0012               	return		;funcret
  4664  000F4E                     __end_of_fillRectangle:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           intcon2	equ	0xFF1
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _drawtext *****************
  4686 ;; Defined at:
  4687 ;;		line 474 in file "ST7735_TFT.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  x               1    wreg     unsigned char 
  4690 ;;  y               1   56[COMRAM] unsigned char 
  4691 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4692 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4693 ;;  color           2   59[COMRAM] unsigned int 
  4694 ;;  bg              2   61[COMRAM] unsigned int 
  4695 ;;  size            1   63[COMRAM] unsigned char 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  x               1    0[BANK1 ] unsigned char 
  4698 ;;  i               2    3[BANK1 ] unsigned int 
  4699 ;;  textsize        2    1[BANK1 ] unsigned int 
  4700 ;;  cursor_x        1    6[BANK1 ] unsigned char 
  4701 ;;  cursor_y        1    5[BANK1 ] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;		None               void
  4704 ;; Registers used:
  4705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:       17 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    9
  4718 ;; This function calls:
  4719 ;;		_drawChar
  4720 ;;		_strlen
  4721 ;; This function is called by:
  4722 ;;		_main
  4723 ;;		_Initialize_Screen
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text15
  4728  000C76                     __ptext15:
  4729                           	opt stack 0
  4730  000C76                     _drawtext:
  4731                           	opt stack 21
  4732                           
  4733                           ;incstack = 0
  4734                           ;drawtext@x stored from wreg
  4735  000C76  0101               	movlb	1	; () banked
  4736  000C78  6F73               	movwf	drawtext@x& (0+255),b
  4737                           
  4738                           ; BSR set to: 1
  4739                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4740                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4741                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4742  000C7A  C173  F179         	movff	drawtext@x,drawtext@cursor_x
  4743                           
  4744                           ; BSR set to: 1
  4745  000C7E  C039  F178         	movff	drawtext@y,drawtext@cursor_y
  4746                           
  4747                           ; BSR set to: 1
  4748                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4749  000C82  C03A  F011         	movff	drawtext@_text,strlen@s
  4750  000C86  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4751  000C8A  EC34  F00B         	call	_strlen	;wreg free
  4752  000C8E  C011  F174         	movff	?_strlen,drawtext@textsize
  4753  000C92  C012  F175         	movff	?_strlen+1,drawtext@textsize+1
  4754                           
  4755                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4756  000C96  0E00               	movlw	0
  4757  000C98  0101               	movlb	1	; () banked
  4758  000C9A  6F77               	movwf	(drawtext@i+1)& (0+255),b
  4759  000C9C  0E00               	movlw	0
  4760  000C9E  6F76               	movwf	drawtext@i& (0+255),b
  4761  000CA0  D064               	goto	l4545
  4762  000CA2                     l4519:
  4763                           
  4764                           ; BSR set to: 1
  4765                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4766  000CA2  506E               	movf	_wrap,w,c
  4767  000CA4  B4D8               	btfsc	status,2,c
  4768  000CA6  D034               	goto	l4535
  4769                           
  4770                           ; BSR set to: 1
  4771  000CA8  5040               	movf	drawtext@size,w,c
  4772  000CAA  0D05               	mullw	5
  4773  000CAC  0101               	movlb	1	; () banked
  4774  000CAE  5179               	movf	drawtext@cursor_x& (0+255),w,b
  4775  000CB0  6E41               	movwf	??_drawtext& (0+255),c
  4776  000CB2  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4777  000CB4  50F3               	movf	prodl,w,c
  4778  000CB6  2641               	addwf	??_drawtext,f,c
  4779  000CB8  50F4               	movf	prodh,w,c
  4780  000CBA  2242               	addwfc	??_drawtext+1,f,c
  4781  000CBC  BE42               	btfsc	??_drawtext+1,7,c
  4782  000CBE  D028               	goto	l4535
  4783  000CC0  5042               	movf	??_drawtext+1,w,c
  4784  000CC2  E104               	bnz	u3120
  4785  000CC4  0E81               	movlw	129
  4786  000CC6  5C41               	subwf	??_drawtext,w,c
  4787  000CC8  A0D8               	btfss	status,0,c
  4788  000CCA  D022               	goto	l4535
  4789  000CCC                     u3120:
  4790                           
  4791                           ; BSR set to: 1
  4792                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4793  000CCC  0E00               	movlw	0
  4794  000CCE  0101               	movlb	1	; () banked
  4795  000CD0  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4796                           
  4797                           ; BSR set to: 1
  4798                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4799  000CD2  5040               	movf	drawtext@size,w,c
  4800  000CD4  0D07               	mullw	7
  4801  000CD6  50F3               	movf	prodl,w,c
  4802  000CD8  0101               	movlb	1	; () banked
  4803  000CDA  2578               	addwf	drawtext@cursor_y& (0+255),w,b
  4804  000CDC  0F03               	addlw	3
  4805  000CDE  0101               	movlb	1	; () banked
  4806  000CE0  6F78               	movwf	drawtext@cursor_y& (0+255),b
  4807                           
  4808                           ; BSR set to: 1
  4809                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4810  000CE2  0EA0               	movlw	160
  4811  000CE4  0101               	movlb	1	; () banked
  4812  000CE6  6578               	cpfsgt	drawtext@cursor_y& (0+255),b
  4813  000CE8  D004               	goto	l4531
  4814                           
  4815                           ; BSR set to: 1
  4816  000CEA  0EA0               	movlw	160
  4817  000CEC  0101               	movlb	1	; () banked
  4818  000CEE  6F78               	movwf	drawtext@cursor_y& (0+255),b
  4819  000CF0  D000               	goto	l4531
  4820  000CF2                     l4531:
  4821                           
  4822                           ; BSR set to: 1
  4823                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4824  000CF2  0101               	movlb	1	; () banked
  4825  000CF4  5176               	movf	drawtext@i& (0+255),w,b
  4826  000CF6  243A               	addwf	drawtext@_text,w,c
  4827  000CF8  6ED9               	movwf	fsr2l,c
  4828  000CFA  0101               	movlb	1	; () banked
  4829  000CFC  5177               	movf	(drawtext@i+1)& (0+255),w,b
  4830  000CFE  203B               	addwfc	drawtext@_text+1,w,c
  4831  000D00  6EDA               	movwf	fsr2h,c
  4832  000D02  0E20               	movlw	32
  4833  000D04  18DE               	xorwf	postinc2,w,c
  4834  000D06  B4D8               	btfsc	status,2,c
  4835  000D08  D02C               	goto	l4543
  4836  000D0A  D002               	goto	l4535
  4837                           
  4838                           ; BSR set to: 1
  4839  000D0C  D02A               	goto	l4543
  4840                           
  4841                           ; BSR set to: 1
  4842  000D0E  D000               	goto	l4535
  4843  000D10                     l4535:
  4844                           
  4845                           ; BSR set to: 1
  4846                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4847  000D10  C178  F02E         	movff	drawtext@cursor_y,drawChar@y
  4848  000D14  0101               	movlb	1	; () banked
  4849  000D16  5176               	movf	drawtext@i& (0+255),w,b
  4850  000D18  243A               	addwf	drawtext@_text,w,c
  4851  000D1A  6ED9               	movwf	fsr2l,c
  4852  000D1C  0101               	movlb	1	; () banked
  4853  000D1E  5177               	movf	(drawtext@i+1)& (0+255),w,b
  4854  000D20  203B               	addwfc	drawtext@_text+1,w,c
  4855  000D22  6EDA               	movwf	fsr2h,c
  4856  000D24  50DF               	movf	indf2,w,c
  4857  000D26  6E2F               	movwf	drawChar@c,c
  4858  000D28  C03C  F030         	movff	drawtext@color,drawChar@color
  4859  000D2C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4860  000D30  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4861  000D34  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4862  000D38  C040  F034         	movff	drawtext@size,drawChar@size
  4863  000D3C  0101               	movlb	1	; () banked
  4864  000D3E  5179               	movf	drawtext@cursor_x& (0+255),w,b
  4865  000D40  EC6C  F004         	call	_drawChar
  4866                           
  4867                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4868  000D44  5040               	movf	drawtext@size,w,c
  4869  000D46  0D06               	mullw	6
  4870  000D48  50F3               	movf	prodl,w,c
  4871  000D4A  0101               	movlb	1	; () banked
  4872  000D4C  2579               	addwf	drawtext@cursor_x& (0+255),w,b
  4873  000D4E  0101               	movlb	1	; () banked
  4874  000D50  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4875                           
  4876                           ; BSR set to: 1
  4877                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4878  000D52  0E80               	movlw	128
  4879  000D54  0101               	movlb	1	; () banked
  4880  000D56  6579               	cpfsgt	drawtext@cursor_x& (0+255),b
  4881  000D58  D004               	goto	l4543
  4882                           
  4883                           ; BSR set to: 1
  4884  000D5A  0E80               	movlw	128
  4885  000D5C  0101               	movlb	1	; () banked
  4886  000D5E  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4887                           
  4888                           ; BSR set to: 1
  4889  000D60  D000               	goto	l4543
  4890  000D62                     l4543:
  4891                           
  4892                           ; BSR set to: 1
  4893  000D62  0101               	movlb	1	; () banked
  4894  000D64  4B76               	infsnz	drawtext@i& (0+255),f,b
  4895  000D66  2B77               	incf	(drawtext@i+1)& (0+255),f,b
  4896  000D68  D000               	goto	l4545
  4897  000D6A                     l4545:
  4898                           
  4899                           ; BSR set to: 1
  4900  000D6A  0101               	movlb	1	; () banked
  4901  000D6C  5174               	movf	drawtext@textsize& (0+255),w,b
  4902  000D6E  0101               	movlb	1	; () banked
  4903  000D70  5D76               	subwf	drawtext@i& (0+255),w,b
  4904  000D72  0101               	movlb	1	; () banked
  4905  000D74  5175               	movf	(drawtext@textsize+1)& (0+255),w,b
  4906  000D76  0101               	movlb	1	; () banked
  4907  000D78  5977               	subwfb	(drawtext@i+1)& (0+255),w,b
  4908  000D7A  A0D8               	btfss	status,0,c
  4909  000D7C  D792               	goto	l4519
  4910                           
  4911                           ; BSR set to: 1
  4912                           
  4913                           ; BSR set to: 1
  4914  000D7E  0012               	return		;funcret
  4915  000D80                     __end_of_drawtext:
  4916                           	opt stack 0
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           prodh	equ	0xFF4
  4922                           prodl	equ	0xFF3
  4923                           intcon	equ	0xFF2
  4924                           intcon2	equ	0xFF1
  4925                           postinc0	equ	0xFEE
  4926                           wreg	equ	0xFE8
  4927                           postdec1	equ	0xFE5
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936 ;; *************** function _strlen *****************
  4937 ;; Defined at:
  4938 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4941 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4944 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  2   16[COMRAM] unsigned int 
  4947 ;; Registers used:
  4948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4954 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;Total ram usage:        6 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    3
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_drawtext
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text16
  4969  001668                     __ptext16:
  4970                           	opt stack 0
  4971  001668                     _strlen:
  4972                           	opt stack 26
  4973                           
  4974                           ; BSR set to: 1
  4975                           ;incstack = 0
  4976  001668  C011  F015         	movff	strlen@s,strlen@cp
  4977  00166C  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4978  001670  D003               	goto	l4381
  4979  001672                     l4379:
  4980  001672  4A15               	infsnz	strlen@cp,f,c
  4981  001674  2A16               	incf	strlen@cp+1,f,c
  4982  001676  D000               	goto	l4381
  4983  001678                     l4381:
  4984  001678  C015  FFD9         	movff	strlen@cp,fsr2l
  4985  00167C  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4986  001680  50DF               	movf	indf2,w,c
  4987  001682  A4D8               	btfss	status,2,c
  4988  001684  D7F6               	goto	l4379
  4989  001686  C011  F013         	movff	strlen@s,??_strlen
  4990  00168A  C012  F014         	movff	strlen@s+1,??_strlen+1
  4991  00168E  1E13               	comf	??_strlen,f,c
  4992  001690  1E14               	comf	??_strlen+1,f,c
  4993  001692  4A13               	infsnz	??_strlen,f,c
  4994  001694  2A14               	incf	??_strlen+1,f,c
  4995  001696  5015               	movf	strlen@cp,w,c
  4996  001698  2413               	addwf	??_strlen,w,c
  4997  00169A  6E11               	movwf	?_strlen,c
  4998  00169C  5016               	movf	strlen@cp+1,w,c
  4999  00169E  2014               	addwfc	??_strlen+1,w,c
  5000  0016A0  6E12               	movwf	?_strlen+1,c
  5001  0016A2  D000               	goto	l1249
  5002  0016A4                     l1249:
  5003  0016A4  0012               	return		;funcret
  5004  0016A6                     __end_of_strlen:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           intcon	equ	0xFF2
  5013                           intcon2	equ	0xFF1
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _drawChar *****************
  5026 ;; Defined at:
  5027 ;;		line 447 in file "ST7735_TFT.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  x               1    wreg     unsigned char 
  5030 ;;  y               1   45[COMRAM] unsigned char 
  5031 ;;  c               1   46[COMRAM] unsigned char 
  5032 ;;  color           2   47[COMRAM] unsigned int 
  5033 ;;  bg              2   49[COMRAM] unsigned int 
  5034 ;;  size            1   51[COMRAM] unsigned char 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  x               1   53[COMRAM] unsigned char 
  5037 ;;  line            1   52[COMRAM] unsigned char 
  5038 ;;  i               1   55[COMRAM] unsigned char 
  5039 ;;  j               1   54[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;		None               void
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:       11 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    8
  5056 ;; This function calls:
  5057 ;;		___wmul
  5058 ;;		_drawPixel
  5059 ;;		_fillRect
  5060 ;; This function is called by:
  5061 ;;		_drawtext
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text17
  5066  0008D8                     __ptext17:
  5067                           	opt stack 0
  5068  0008D8                     _drawChar:
  5069                           	opt stack 21
  5070                           
  5071                           ;incstack = 0
  5072                           ;drawChar@x stored from wreg
  5073  0008D8  6E36               	movwf	drawChar@x,c
  5074                           
  5075                           ;ST7735_TFT.c: 449: char i, j;
  5076                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5077  0008DA  0E80               	movlw	128
  5078  0008DC  6036               	cpfslt	drawChar@x,c
  5079  0008DE  D0A6               	goto	l111
  5080  0008E0  0E9F               	movlw	159
  5081  0008E2  642E               	cpfsgt	drawChar@y,c
  5082  0008E4  D001               	goto	l4327
  5083                           
  5084                           ;ST7735_TFT.c: 451: return;
  5085  0008E6  D0A2               	goto	l111
  5086  0008E8                     l4327:
  5087                           
  5088                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5089  0008E8  5034               	movf	drawChar@size,w,c
  5090  0008EA  A4D8               	btfss	status,2,c
  5091  0008EC  D003               	goto	l4331
  5092  0008EE  0E01               	movlw	1
  5093  0008F0  6E34               	movwf	drawChar@size,c
  5094  0008F2  D000               	goto	l4331
  5095  0008F4                     l4331:
  5096                           
  5097                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5098  0008F4  0E1F               	movlw	31
  5099  0008F6  642F               	cpfsgt	drawChar@c,c
  5100  0008F8  D004               	goto	l4335
  5101  0008FA  0E7E               	movlw	126
  5102  0008FC  642F               	cpfsgt	drawChar@c,c
  5103  0008FE  D003               	goto	l113
  5104  000900  D000               	goto	l4335
  5105  000902                     l4335:
  5106                           
  5107                           ;ST7735_TFT.c: 454: c = '?';
  5108  000902  0E3F               	movlw	63
  5109  000904  6E2F               	movwf	drawChar@c,c
  5110  000906                     l113:
  5111                           
  5112                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5113  000906  0E00               	movlw	0
  5114  000908  6E38               	movwf	drawChar@i,c
  5115  00090A                     l4337:
  5116  00090A  0E04               	movlw	4
  5117  00090C  6438               	cpfsgt	drawChar@i,c
  5118  00090E  D001               	goto	l4341
  5119  000910  D08D               	goto	l111
  5120  000912                     l4341:
  5121                           
  5122                           ;ST7735_TFT.c: 456: unsigned char line;
  5123                           ;ST7735_TFT.c: 457: if(c < 'S')
  5124  000912  0E53               	movlw	83
  5125  000914  602F               	cpfslt	drawChar@c,c
  5126  000916  D015               	goto	l4345
  5127                           
  5128                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5129  000918  0EE0               	movlw	224
  5130  00091A  242F               	addwf	drawChar@c,w,c
  5131  00091C  6E11               	movwf	___wmul@multiplier,c
  5132  00091E  6A12               	clrf	___wmul@multiplier+1,c
  5133  000920  0EFF               	movlw	255
  5134  000922  2212               	addwfc	___wmul@multiplier+1,f,c
  5135  000924  0E00               	movlw	0
  5136  000926  6E14               	movwf	___wmul@multiplicand+1,c
  5137  000928  0E05               	movlw	5
  5138  00092A  6E13               	movwf	___wmul@multiplicand,c
  5139  00092C  ECF5  F00B         	call	___wmul	;wreg free
  5140  000930  5038               	movf	drawChar@i,w,c
  5141  000932  2611               	addwf	?___wmul,f,c
  5142  000934  0E00               	movlw	0
  5143  000936  2212               	addwfc	?___wmul+1,f,c
  5144  000938  0E59               	movlw	low _font
  5145  00093A  2411               	addwf	?___wmul,w,c
  5146  00093C  6EF6               	movwf	tblptrl,c
  5147  00093E  0EFD               	movlw	high _font
  5148  000940  D014               	goto	L1
  5149  000942                     l4345:
  5150                           
  5151                           ;ST7735_TFT.c: 459: else
  5152                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5153  000942  0EAD               	movlw	173
  5154  000944  242F               	addwf	drawChar@c,w,c
  5155  000946  6E11               	movwf	___wmul@multiplier,c
  5156  000948  6A12               	clrf	___wmul@multiplier+1,c
  5157  00094A  0EFF               	movlw	255
  5158  00094C  2212               	addwfc	___wmul@multiplier+1,f,c
  5159  00094E  0E00               	movlw	0
  5160  000950  6E14               	movwf	___wmul@multiplicand+1,c
  5161  000952  0E05               	movlw	5
  5162  000954  6E13               	movwf	___wmul@multiplicand,c
  5163  000956  ECF5  F00B         	call	___wmul	;wreg free
  5164  00095A  5038               	movf	drawChar@i,w,c
  5165  00095C  2611               	addwf	?___wmul,f,c
  5166  00095E  0E00               	movlw	0
  5167  000960  2212               	addwfc	?___wmul+1,f,c
  5168  000962  0E58               	movlw	low _font2
  5169  000964  2411               	addwf	?___wmul,w,c
  5170  000966  6EF6               	movwf	tblptrl,c
  5171  000968  0EFE               	movlw	high _font2
  5172  00096A                     L1:
  5173  00096A  2012               	addwfc	?___wmul+1,w,c
  5174  00096C  6EF7               	movwf	tblptrh,c
  5175  00096E                     	if	0	;There are less than 3 active tblptr bytes
  5176  00096E                     	endif
  5177  00096E  0008               	tblrd		*
  5178  000970  CFF5 F035          	movff	tablat,drawChar@line
  5179  000974  D000               	goto	l4347
  5180  000976                     l4347:
  5181                           
  5182                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5183  000976  0E00               	movlw	0
  5184  000978  6E37               	movwf	drawChar@j,c
  5185  00097A                     l4349:
  5186  00097A  0E06               	movlw	6
  5187  00097C  6437               	cpfsgt	drawChar@j,c
  5188  00097E  D001               	goto	l120
  5189  000980  D053               	goto	l4373
  5190  000982                     l120:
  5191                           
  5192                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5193  000982  A035               	btfss	drawChar@line,0,c
  5194  000984  D023               	goto	l4359
  5195                           
  5196                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5197  000986  0434               	decf	drawChar@size,w,c
  5198  000988  A4D8               	btfss	status,2,c
  5199  00098A  D00C               	goto	l4357
  5200  00098C  502E               	movf	drawChar@y,w,c
  5201  00098E  2437               	addwf	drawChar@j,w,c
  5202  000990  6E18               	movwf	drawPixel@y,c
  5203  000992  C030  F019         	movff	drawChar@color,drawPixel@color
  5204  000996  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5205  00099A  5036               	movf	drawChar@x,w,c
  5206  00099C  2438               	addwf	drawChar@i,w,c
  5207  00099E  ECC8  F00B         	call	_drawPixel
  5208  0009A2  D03E               	goto	l4367
  5209  0009A4                     l4357:
  5210                           
  5211                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5212  0009A4  5037               	movf	drawChar@j,w,c
  5213  0009A6  0234               	mulwf	drawChar@size,c
  5214  0009A8  50F3               	movf	prodl,w,c
  5215  0009AA  242E               	addwf	drawChar@y,w,c
  5216  0009AC  6E23               	movwf	fillRect@y,c
  5217  0009AE  C034  F024         	movff	drawChar@size,fillRect@w
  5218  0009B2  C034  F025         	movff	drawChar@size,fillRect@h
  5219  0009B6  C030  F026         	movff	drawChar@color,fillRect@color
  5220  0009BA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5221  0009BE  5038               	movf	drawChar@i,w,c
  5222  0009C0  0234               	mulwf	drawChar@size,c
  5223  0009C2  50F3               	movf	prodl,w,c
  5224  0009C4  2436               	addwf	drawChar@x,w,c
  5225  0009C6  ECCB  F00A         	call	_fillRect
  5226                           
  5227                           ;ST7735_TFT.c: 465: }
  5228  0009CA  D02A               	goto	l4367
  5229  0009CC                     l4359:
  5230                           
  5231                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5232  0009CC  5030               	movf	drawChar@color,w,c
  5233  0009CE  1832               	xorwf	drawChar@bg,w,c
  5234  0009D0  E104               	bnz	u2880
  5235  0009D2  5031               	movf	drawChar@color+1,w,c
  5236  0009D4  1833               	xorwf	drawChar@bg+1,w,c
  5237  0009D6  B4D8               	btfsc	status,2,c
  5238  0009D8  D023               	goto	l4367
  5239  0009DA                     u2880:
  5240                           
  5241                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5242  0009DA  0434               	decf	drawChar@size,w,c
  5243  0009DC  A4D8               	btfss	status,2,c
  5244  0009DE  D00C               	goto	l4365
  5245  0009E0  502E               	movf	drawChar@y,w,c
  5246  0009E2  2437               	addwf	drawChar@j,w,c
  5247  0009E4  6E18               	movwf	drawPixel@y,c
  5248  0009E6  C032  F019         	movff	drawChar@bg,drawPixel@color
  5249  0009EA  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5250  0009EE  5036               	movf	drawChar@x,w,c
  5251  0009F0  2438               	addwf	drawChar@i,w,c
  5252  0009F2  ECC8  F00B         	call	_drawPixel
  5253  0009F6  D014               	goto	l4367
  5254  0009F8                     l4365:
  5255                           
  5256                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5257  0009F8  5037               	movf	drawChar@j,w,c
  5258  0009FA  0234               	mulwf	drawChar@size,c
  5259  0009FC  50F3               	movf	prodl,w,c
  5260  0009FE  242E               	addwf	drawChar@y,w,c
  5261  000A00  6E23               	movwf	fillRect@y,c
  5262  000A02  C034  F024         	movff	drawChar@size,fillRect@w
  5263  000A06  C034  F025         	movff	drawChar@size,fillRect@h
  5264  000A0A  C032  F026         	movff	drawChar@bg,fillRect@color
  5265  000A0E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5266  000A12  5038               	movf	drawChar@i,w,c
  5267  000A14  0234               	mulwf	drawChar@size,c
  5268  000A16  50F3               	movf	prodl,w,c
  5269  000A18  2436               	addwf	drawChar@x,w,c
  5270  000A1A  ECCB  F00A         	call	_fillRect
  5271  000A1E  D000               	goto	l4367
  5272  000A20                     l4367:
  5273  000A20  2A37               	incf	drawChar@j,f,c
  5274  000A22  90D8               	bcf	status,0,c
  5275  000A24  3235               	rrcf	drawChar@line,f,c
  5276  000A26  D7A9               	goto	l4349
  5277  000A28                     l4373:
  5278  000A28  2A38               	incf	drawChar@i,f,c
  5279  000A2A  D76F               	goto	l4337
  5280  000A2C                     l111:
  5281  000A2C  0012               	return		;funcret
  5282  000A2E                     __end_of_drawChar:
  5283                           	opt stack 0
  5284                           tblptru	equ	0xFF8
  5285                           tblptrh	equ	0xFF7
  5286                           tblptrl	equ	0xFF6
  5287                           tablat	equ	0xFF5
  5288                           prodh	equ	0xFF4
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           intcon2	equ	0xFF1
  5292                           postinc0	equ	0xFEE
  5293                           wreg	equ	0xFE8
  5294                           postdec1	equ	0xFE5
  5295                           fsr1l	equ	0xFE1
  5296                           indf2	equ	0xFDF
  5297                           postinc2	equ	0xFDE
  5298                           postdec2	equ	0xFDD
  5299                           fsr2h	equ	0xFDA
  5300                           fsr2l	equ	0xFD9
  5301                           status	equ	0xFD8
  5302                           
  5303 ;; *************** function _fillRect *****************
  5304 ;; Defined at:
  5305 ;;		line 437 in file "ST7735_TFT.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  x               1    wreg     unsigned char 
  5308 ;;  y               1   34[COMRAM] unsigned char 
  5309 ;;  w               1   35[COMRAM] unsigned char 
  5310 ;;  h               1   36[COMRAM] unsigned char 
  5311 ;;  color           2   37[COMRAM] unsigned int 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  x               1   42[COMRAM] unsigned char 
  5314 ;;  i               2   43[COMRAM] int 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;		None               void
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5324 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;Total ram usage:       11 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    7
  5331 ;; This function calls:
  5332 ;;		_drawFastVLine
  5333 ;; This function is called by:
  5334 ;;		_drawChar
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text18
  5339  001596                     __ptext18:
  5340                           	opt stack 0
  5341  001596                     _fillRect:
  5342                           	opt stack 21
  5343                           
  5344                           ;incstack = 0
  5345                           ;fillRect@x stored from wreg
  5346  001596  6E2B               	movwf	fillRect@x,c
  5347                           
  5348                           ;ST7735_TFT.c: 439: signed int i;
  5349                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5350  001598  C02B  F02C         	movff	fillRect@x,fillRect@i
  5351  00159C  6A2D               	clrf	fillRect@i+1,c
  5352  00159E  D00E               	goto	l4189
  5353  0015A0                     l4185:
  5354                           
  5355                           ;ST7735_TFT.c: 442: {
  5356                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5357  0015A0  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5358  0015A4  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5359  0015A8  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5360  0015AC  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5361  0015B0  502C               	movf	fillRect@i,w,c
  5362  0015B2  EC39  F008         	call	_drawFastVLine
  5363  0015B6  4A2C               	infsnz	fillRect@i,f,c
  5364  0015B8  2A2D               	incf	fillRect@i+1,f,c
  5365  0015BA  D000               	goto	l4189
  5366  0015BC                     l4189:
  5367  0015BC  5024               	movf	fillRect@w,w,c
  5368  0015BE  C02B  F028         	movff	fillRect@x,??_fillRect
  5369  0015C2  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5370  0015C4  2628               	addwf	??_fillRect,f,c
  5371  0015C6  0E00               	movlw	0
  5372  0015C8  2229               	addwfc	??_fillRect+1,f,c
  5373  0015CA  5028               	movf	??_fillRect,w,c
  5374  0015CC  5C2C               	subwf	fillRect@i,w,c
  5375  0015CE  502D               	movf	fillRect@i+1,w,c
  5376  0015D0  0A80               	xorlw	128
  5377  0015D2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5378  0015D4  5029               	movf	??_fillRect+1,w,c
  5379  0015D6  0A80               	xorlw	128
  5380  0015D8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5381  0015DA  A0D8               	btfss	status,0,c
  5382  0015DC  D7E1               	goto	l4185
  5383  0015DE  0012               	return		;funcret
  5384  0015E0                     __end_of_fillRect:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           intcon	equ	0xFF2
  5393                           intcon2	equ	0xFF1
  5394                           postinc0	equ	0xFEE
  5395                           wreg	equ	0xFE8
  5396                           postdec1	equ	0xFE5
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _drawFastVLine *****************
  5406 ;; Defined at:
  5407 ;;		line 416 in file "ST7735_TFT.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  x               1    wreg     unsigned char 
  5410 ;;  y               1   23[COMRAM] unsigned char 
  5411 ;;  h               1   24[COMRAM] unsigned char 
  5412 ;;  color           2   25[COMRAM] unsigned int 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  x               1   33[COMRAM] unsigned char 
  5415 ;;  lo              1   32[COMRAM] unsigned char 
  5416 ;;  hi              1   31[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;Total ram usage:       11 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    6
  5433 ;; This function calls:
  5434 ;;		_setAddrWindow
  5435 ;;		_spiwrite
  5436 ;; This function is called by:
  5437 ;;		_fillRect
  5438 ;;		_fillCircleHelper
  5439 ;;		_fillCircle
  5440 ;;		_drawRect
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text19
  5445  001072                     __ptext19:
  5446                           	opt stack 0
  5447  001072                     _drawFastVLine:
  5448                           	opt stack 22
  5449                           
  5450                           ;incstack = 0
  5451                           ;drawFastVLine@x stored from wreg
  5452  001072  6E22               	movwf	drawFastVLine@x,c
  5453                           
  5454                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5455                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5456  001074  0E80               	movlw	128
  5457  001076  6022               	cpfslt	drawFastVLine@x,c
  5458  001078  D03F               	goto	l95
  5459  00107A  0E9F               	movlw	159
  5460  00107C  6418               	cpfsgt	drawFastVLine@y,c
  5461  00107E  D001               	goto	l4125
  5462                           
  5463                           ;ST7735_TFT.c: 420: return;
  5464  001080  D03B               	goto	l95
  5465  001082                     l4125:
  5466                           
  5467                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5468  001082  0EFF               	movlw	255
  5469  001084  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5470  001086  0EFF               	movlw	255
  5471  001088  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5472  00108A  5019               	movf	drawFastVLine@h,w,c
  5473  00108C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5474  001090  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5475  001092  261E               	addwf	??_drawFastVLine+2,f,c
  5476  001094  0E00               	movlw	0
  5477  001096  221F               	addwfc	??_drawFastVLine+3,f,c
  5478  001098  501C               	movf	??_drawFastVLine,w,c
  5479  00109A  261E               	addwf	??_drawFastVLine+2,f,c
  5480  00109C  501D               	movf	??_drawFastVLine+1,w,c
  5481  00109E  221F               	addwfc	??_drawFastVLine+3,f,c
  5482  0010A0  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5483  0010A2  D00B               	goto	l4129
  5484  0010A4  501F               	movf	??_drawFastVLine+3,w,c
  5485  0010A6  E104               	bnz	u2690
  5486  0010A8  0EA0               	movlw	160
  5487  0010AA  5C1E               	subwf	??_drawFastVLine+2,w,c
  5488  0010AC  A0D8               	btfss	status,0,c
  5489  0010AE  D005               	goto	l4129
  5490  0010B0                     u2690:
  5491                           
  5492                           ;ST7735_TFT.c: 422: h = 160 - y;
  5493  0010B0  5018               	movf	drawFastVLine@y,w,c
  5494  0010B2  0800               	sublw	0
  5495  0010B4  0FA0               	addlw	160
  5496  0010B6  6E19               	movwf	drawFastVLine@h,c
  5497  0010B8  D000               	goto	l4129
  5498  0010BA                     l4129:
  5499                           
  5500                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5501  0010BA  501B               	movf	drawFastVLine@color+1,w,c
  5502  0010BC  6E20               	movwf	drawFastVLine@hi,c
  5503  0010BE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5504                           
  5505                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5506  0010C2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5507  0010C6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5508  0010CA  5018               	movf	drawFastVLine@y,w,c
  5509  0010CC  2419               	addwf	drawFastVLine@h,w,c
  5510  0010CE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5511  0010D0  041C               	decf	??_drawFastVLine,w,c
  5512  0010D2  6E16               	movwf	setAddrWindow@y1,c
  5513  0010D4  5022               	movf	drawFastVLine@x,w,c
  5514  0010D6  EC7E  F00A         	call	_setAddrWindow
  5515                           
  5516                           ;ST7735_TFT.c: 425: PORTCbits.RC2 = 1;
  5517  0010DA  8482               	bsf	3970,2,c	;volatile
  5518                           
  5519                           ;ST7735_TFT.c: 426: PORTCbits.RC4 = 0;
  5520  0010DC  9882               	bcf	3970,4,c	;volatile
  5521                           
  5522                           ;ST7735_TFT.c: 428: while (h--) {
  5523  0010DE  D007               	goto	l4141
  5524  0010E0                     l4139:
  5525                           
  5526                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5527  0010E0  5020               	movf	drawFastVLine@hi,w,c
  5528  0010E2  EC7D  F00C         	call	_spiwrite
  5529                           
  5530                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5531  0010E6  5021               	movf	drawFastVLine@lo,w,c
  5532  0010E8  EC7D  F00C         	call	_spiwrite
  5533  0010EC  D000               	goto	l4141
  5534  0010EE                     l4141:
  5535  0010EE  0619               	decf	drawFastVLine@h,f,c
  5536  0010F0  2819               	incf	drawFastVLine@h,w,c
  5537  0010F2  A4D8               	btfss	status,2,c
  5538  0010F4  D7F5               	goto	l4139
  5539                           
  5540                           ;ST7735_TFT.c: 431: }
  5541                           ;ST7735_TFT.c: 432: PORTCbits.RC4 = 1;
  5542  0010F6  8882               	bsf	3970,4,c	;volatile
  5543  0010F8                     l95:
  5544  0010F8  0012               	return		;funcret
  5545  0010FA                     __end_of_drawFastVLine:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _drawPixel *****************
  5567 ;; Defined at:
  5568 ;;		line 407 in file "ST7735_TFT.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  x               1    wreg     unsigned char 
  5571 ;;  y               1   23[COMRAM] unsigned char 
  5572 ;;  color           2   24[COMRAM] unsigned int 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  x               1   26[COMRAM] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;		None               void
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5584 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;Total ram usage:        4 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    6
  5591 ;; This function calls:
  5592 ;;		_setAddrWindow
  5593 ;;		_write_data
  5594 ;; This function is called by:
  5595 ;;		_drawChar
  5596 ;;		_drawCircle
  5597 ;;		_drawCircleHelper
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text20
  5602  001790                     __ptext20:
  5603                           	opt stack 0
  5604  001790                     _drawPixel:
  5605                           	opt stack 22
  5606                           
  5607                           ;incstack = 0
  5608                           ;drawPixel@x stored from wreg
  5609  001790  6E1B               	movwf	drawPixel@x,c
  5610                           
  5611                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5612  001792  0E80               	movlw	128
  5613  001794  601B               	cpfslt	drawPixel@x,c
  5614  001796  D013               	goto	l89
  5615  001798  0E9F               	movlw	159
  5616  00179A  6418               	cpfsgt	drawPixel@y,c
  5617  00179C  D001               	goto	l4177
  5618                           
  5619                           ;ST7735_TFT.c: 410: return;
  5620  00179E  D00F               	goto	l89
  5621  0017A0                     l4177:
  5622                           
  5623                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5624  0017A0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5625  0017A4  281B               	incf	drawPixel@x,w,c
  5626  0017A6  6E15               	movwf	setAddrWindow@x1,c
  5627  0017A8  2818               	incf	drawPixel@y,w,c
  5628  0017AA  6E16               	movwf	setAddrWindow@y1,c
  5629  0017AC  501B               	movf	drawPixel@x,w,c
  5630  0017AE  EC7E  F00A         	call	_setAddrWindow
  5631                           
  5632                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5633  0017B2  501A               	movf	drawPixel@color+1,w,c
  5634  0017B4  ECBE  F00C         	call	_write_data
  5635                           
  5636                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5637  0017B8  5019               	movf	drawPixel@color,w,c
  5638  0017BA  ECBE  F00C         	call	_write_data
  5639  0017BE                     l89:
  5640  0017BE  0012               	return		;funcret
  5641  0017C0                     __end_of_drawPixel:
  5642                           	opt stack 0
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           intcon2	equ	0xFF1
  5651                           postinc0	equ	0xFEE
  5652                           wreg	equ	0xFE8
  5653                           postdec1	equ	0xFE5
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _setAddrWindow *****************
  5663 ;; Defined at:
  5664 ;;		line 392 in file "ST7735_TFT.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  x0              1    wreg     unsigned char 
  5667 ;;  y0              1   19[COMRAM] unsigned char 
  5668 ;;  x1              1   20[COMRAM] unsigned char 
  5669 ;;  y1              1   21[COMRAM] unsigned char 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  x0              1   22[COMRAM] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;		None               void
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5681 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;Total ram usage:        4 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    5
  5688 ;; This function calls:
  5689 ;;		_write_command
  5690 ;;		_write_data
  5691 ;; This function is called by:
  5692 ;;		_drawPixel
  5693 ;;		_drawFastVLine
  5694 ;;		_fillRectangle
  5695 ;;		_drawFastHLine
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           	psect	text21
  5700  0014FC                     __ptext21:
  5701                           	opt stack 0
  5702  0014FC                     _setAddrWindow:
  5703                           	opt stack 22
  5704                           
  5705                           ;incstack = 0
  5706                           ;setAddrWindow@x0 stored from wreg
  5707  0014FC  6E17               	movwf	setAddrWindow@x0,c
  5708                           
  5709                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5710  0014FE  0E2A               	movlw	42
  5711  001500  ECC6  F00C         	call	_write_command
  5712                           
  5713                           ;ST7735_TFT.c: 395: write_data(0);
  5714  001504  0E00               	movlw	0
  5715  001506  ECBE  F00C         	call	_write_data
  5716                           
  5717                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5718  00150A  5017               	movf	setAddrWindow@x0,w,c
  5719  00150C  2459               	addwf	_colstart,w,c
  5720  00150E  ECBE  F00C         	call	_write_data
  5721                           
  5722                           ;ST7735_TFT.c: 397: write_data(0);
  5723  001512  0E00               	movlw	0
  5724  001514  ECBE  F00C         	call	_write_data
  5725                           
  5726                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5727  001518  5015               	movf	setAddrWindow@x1,w,c
  5728  00151A  2459               	addwf	_colstart,w,c
  5729  00151C  ECBE  F00C         	call	_write_data
  5730                           
  5731                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5732  001520  0E2B               	movlw	43
  5733  001522  ECC6  F00C         	call	_write_command
  5734                           
  5735                           ;ST7735_TFT.c: 400: write_data(0);
  5736  001526  0E00               	movlw	0
  5737  001528  ECBE  F00C         	call	_write_data
  5738                           
  5739                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5740  00152C  5014               	movf	setAddrWindow@y0,w,c
  5741  00152E  2461               	addwf	_rowstart,w,c
  5742  001530  ECBE  F00C         	call	_write_data
  5743                           
  5744                           ;ST7735_TFT.c: 402: write_data(0);
  5745  001534  0E00               	movlw	0
  5746  001536  ECBE  F00C         	call	_write_data
  5747                           
  5748                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5749  00153A  5016               	movf	setAddrWindow@y1,w,c
  5750  00153C  2461               	addwf	_rowstart,w,c
  5751  00153E  ECBE  F00C         	call	_write_data
  5752                           
  5753                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5754  001542  0E2C               	movlw	44
  5755  001544  ECC6  F00C         	call	_write_command
  5756  001548  0012               	return		;funcret
  5757  00154A                     __end_of_setAddrWindow:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           intcon	equ	0xFF2
  5766                           intcon2	equ	0xFF1
  5767                           postinc0	equ	0xFEE
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           fsr1l	equ	0xFE1
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _TFT_GreenTab_Initialize *****************
  5779 ;; Defined at:
  5780 ;;		line 644 in file "ST7735_TFT.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;		None
  5785 ;; Return value:  Size  Location     Type
  5786 ;;		None               void
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;Total ram usage:        0 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    6
  5801 ;; This function calls:
  5802 ;;		_Rcmd1
  5803 ;;		_Rcmd2red
  5804 ;;		_Rcmd3
  5805 ;;		_write_command
  5806 ;;		_write_data
  5807 ;; This function is called by:
  5808 ;;		_Initialize_Screen
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text22
  5813  0017C0                     __ptext22:
  5814                           	opt stack 0
  5815  0017C0                     _TFT_GreenTab_Initialize:
  5816                           	opt stack 23
  5817                           
  5818                           ;ST7735_TFT.c: 646: PORTCbits.RC4 = 1;
  5819                           
  5820                           ;incstack = 0
  5821  0017C0  8882               	bsf	3970,4,c	;volatile
  5822                           
  5823                           ;ST7735_TFT.c: 647: PORTCbits.RC2 = 0;
  5824  0017C2  9482               	bcf	3970,2,c	;volatile
  5825                           
  5826                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5827  0017C4  0E80               	movlw	128
  5828  0017C6  6EC7               	movwf	4039,c	;volatile
  5829                           
  5830                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5831  0017C8  0E30               	movlw	48
  5832  0017CA  6EC6               	movwf	4038,c	;volatile
  5833                           
  5834                           ;ST7735_TFT.c: 653: Rcmd1();
  5835  0017CC  ECB3  F005         	call	_Rcmd1	;wreg free
  5836                           
  5837                           ;ST7735_TFT.c: 654: Rcmd2red();
  5838  0017D0  EC53  F00B         	call	_Rcmd2red	;wreg free
  5839                           
  5840                           ;ST7735_TFT.c: 655: Rcmd3();
  5841  0017D4  ECC0  F006         	call	_Rcmd3	;wreg free
  5842                           
  5843                           ;ST7735_TFT.c: 656: write_command(0x36);
  5844  0017D8  0E36               	movlw	54
  5845  0017DA  ECC6  F00C         	call	_write_command
  5846                           
  5847                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5848  0017DE  0EC0               	movlw	192
  5849  0017E0  ECBE  F00C         	call	_write_data
  5850                           
  5851                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5852  0017E4  0E01               	movlw	1
  5853  0017E6  6E53               	movwf	__tft_type,c
  5854  0017E8  0012               	return		;funcret
  5855  0017EA                     __end_of_TFT_GreenTab_Initialize:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           intcon2	equ	0xFF1
  5865                           postinc0	equ	0xFEE
  5866                           wreg	equ	0xFE8
  5867                           postdec1	equ	0xFE5
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _Rcmd3 *****************
  5877 ;; Defined at:
  5878 ;;		line 338 in file "ST7735_TFT.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    5
  5899 ;; This function calls:
  5900 ;;		_delay_ms
  5901 ;;		_write_command
  5902 ;;		_write_data
  5903 ;; This function is called by:
  5904 ;;		_TFT_GreenTab_Initialize
  5905 ;;		_TFT_BlackTab_Initialize
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text23
  5910  000D80                     __ptext23:
  5911                           	opt stack 0
  5912  000D80                     _Rcmd3:
  5913                           	opt stack 23
  5914                           
  5915                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5916                           
  5917                           ;incstack = 0
  5918  000D80  0EE0               	movlw	224
  5919  000D82  ECC6  F00C         	call	_write_command
  5920                           
  5921                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5922  000D86  0E02               	movlw	2
  5923  000D88  ECBE  F00C         	call	_write_data
  5924  000D8C  0E1C               	movlw	28
  5925  000D8E  ECBE  F00C         	call	_write_data
  5926  000D92  0E07               	movlw	7
  5927  000D94  ECBE  F00C         	call	_write_data
  5928  000D98  0E12               	movlw	18
  5929  000D9A  ECBE  F00C         	call	_write_data
  5930                           
  5931                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5932  000D9E  0E37               	movlw	55
  5933  000DA0  ECBE  F00C         	call	_write_data
  5934  000DA4  0E32               	movlw	50
  5935  000DA6  ECBE  F00C         	call	_write_data
  5936  000DAA  0E29               	movlw	41
  5937  000DAC  ECBE  F00C         	call	_write_data
  5938  000DB0  0E2D               	movlw	45
  5939  000DB2  ECBE  F00C         	call	_write_data
  5940                           
  5941                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5942  000DB6  0E29               	movlw	41
  5943  000DB8  ECBE  F00C         	call	_write_data
  5944  000DBC  0E25               	movlw	37
  5945  000DBE  ECBE  F00C         	call	_write_data
  5946  000DC2  0E2B               	movlw	43
  5947  000DC4  ECBE  F00C         	call	_write_data
  5948  000DC8  0E39               	movlw	57
  5949  000DCA  ECBE  F00C         	call	_write_data
  5950                           
  5951                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5952  000DCE  0E00               	movlw	0
  5953  000DD0  ECBE  F00C         	call	_write_data
  5954  000DD4  0E01               	movlw	1
  5955  000DD6  ECBE  F00C         	call	_write_data
  5956  000DDA  0E03               	movlw	3
  5957  000DDC  ECBE  F00C         	call	_write_data
  5958  000DE0  0E10               	movlw	16
  5959  000DE2  ECBE  F00C         	call	_write_data
  5960                           
  5961                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5962  000DE6  0EE1               	movlw	225
  5963  000DE8  ECC6  F00C         	call	_write_command
  5964                           
  5965                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5966  000DEC  0E03               	movlw	3
  5967  000DEE  ECBE  F00C         	call	_write_data
  5968  000DF2  0E1D               	movlw	29
  5969  000DF4  ECBE  F00C         	call	_write_data
  5970  000DF8  0E07               	movlw	7
  5971  000DFA  ECBE  F00C         	call	_write_data
  5972  000DFE  0E06               	movlw	6
  5973  000E00  ECBE  F00C         	call	_write_data
  5974                           
  5975                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5976  000E04  0E2E               	movlw	46
  5977  000E06  ECBE  F00C         	call	_write_data
  5978  000E0A  0E2C               	movlw	44
  5979  000E0C  ECBE  F00C         	call	_write_data
  5980  000E10  0E29               	movlw	41
  5981  000E12  ECBE  F00C         	call	_write_data
  5982  000E16  0E2D               	movlw	45
  5983  000E18  ECBE  F00C         	call	_write_data
  5984                           
  5985                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5986  000E1C  0E2E               	movlw	46
  5987  000E1E  ECBE  F00C         	call	_write_data
  5988  000E22  0E2E               	movlw	46
  5989  000E24  ECBE  F00C         	call	_write_data
  5990  000E28  0E37               	movlw	55
  5991  000E2A  ECBE  F00C         	call	_write_data
  5992  000E2E  0E3F               	movlw	63
  5993  000E30  ECBE  F00C         	call	_write_data
  5994                           
  5995                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5996  000E34  0E00               	movlw	0
  5997  000E36  ECBE  F00C         	call	_write_data
  5998  000E3A  0E00               	movlw	0
  5999  000E3C  ECBE  F00C         	call	_write_data
  6000  000E40  0E02               	movlw	2
  6001  000E42  ECBE  F00C         	call	_write_data
  6002  000E46  0E10               	movlw	16
  6003  000E48  ECBE  F00C         	call	_write_data
  6004                           
  6005                           ;ST7735_TFT.c: 350: write_command(0x13);
  6006  000E4C  0E13               	movlw	19
  6007  000E4E  ECC6  F00C         	call	_write_command
  6008                           
  6009                           ;ST7735_TFT.c: 351: delay_ms(10);
  6010  000E52  0E00               	movlw	0
  6011  000E54  6E18               	movwf	delay_ms@ms+1,c
  6012  000E56  0E0A               	movlw	10
  6013  000E58  6E17               	movwf	delay_ms@ms,c
  6014  000E5A  EC55  F00A         	call	_delay_ms	;wreg free
  6015                           
  6016                           ;ST7735_TFT.c: 352: write_command(0x29);
  6017  000E5E  0E29               	movlw	41
  6018  000E60  ECC6  F00C         	call	_write_command
  6019                           
  6020                           ;ST7735_TFT.c: 353: delay_ms(100);
  6021  000E64  0E00               	movlw	0
  6022  000E66  6E18               	movwf	delay_ms@ms+1,c
  6023  000E68  0E64               	movlw	100
  6024  000E6A  6E17               	movwf	delay_ms@ms,c
  6025  000E6C  EC55  F00A         	call	_delay_ms	;wreg free
  6026  000E70  0012               	return		;funcret
  6027  000E72                     __end_of_Rcmd3:
  6028                           	opt stack 0
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1l	equ	0xFE1
  6041                           indf2	equ	0xFDF
  6042                           postinc2	equ	0xFDE
  6043                           postdec2	equ	0xFDD
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function _Rcmd2red *****************
  6049 ;; Defined at:
  6050 ;;		line 328 in file "ST7735_TFT.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;		None               void
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    5
  6071 ;; This function calls:
  6072 ;;		_write_command
  6073 ;;		_write_data
  6074 ;; This function is called by:
  6075 ;;		_TFT_GreenTab_Initialize
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text24
  6080  0016A6                     __ptext24:
  6081                           	opt stack 0
  6082  0016A6                     _Rcmd2red:
  6083                           	opt stack 23
  6084                           
  6085                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6086                           
  6087                           ;incstack = 0
  6088  0016A6  0E2A               	movlw	42
  6089  0016A8  ECC6  F00C         	call	_write_command
  6090                           
  6091                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6092  0016AC  0E00               	movlw	0
  6093  0016AE  ECBE  F00C         	call	_write_data
  6094  0016B2  0E00               	movlw	0
  6095  0016B4  ECBE  F00C         	call	_write_data
  6096                           
  6097                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6098  0016B8  0E00               	movlw	0
  6099  0016BA  ECBE  F00C         	call	_write_data
  6100  0016BE  0E7F               	movlw	127
  6101  0016C0  ECBE  F00C         	call	_write_data
  6102                           
  6103                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6104  0016C4  0E2B               	movlw	43
  6105  0016C6  ECC6  F00C         	call	_write_command
  6106                           
  6107                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6108  0016CA  0E00               	movlw	0
  6109  0016CC  ECBE  F00C         	call	_write_data
  6110  0016D0  0E00               	movlw	0
  6111  0016D2  ECBE  F00C         	call	_write_data
  6112                           
  6113                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6114  0016D6  0E00               	movlw	0
  6115  0016D8  ECBE  F00C         	call	_write_data
  6116  0016DC  0E9F               	movlw	159
  6117  0016DE  ECBE  F00C         	call	_write_data
  6118  0016E2  0012               	return		;funcret
  6119  0016E4                     __end_of_Rcmd2red:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           intcon2	equ	0xFF1
  6129                           postinc0	equ	0xFEE
  6130                           wreg	equ	0xFE8
  6131                           postdec1	equ	0xFE5
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _Rcmd1 *****************
  6141 ;; Defined at:
  6142 ;;		line 281 in file "ST7735_TFT.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        0 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    5
  6163 ;; This function calls:
  6164 ;;		_delay_ms
  6165 ;;		_write_command
  6166 ;;		_write_data
  6167 ;; This function is called by:
  6168 ;;		_TFT_GreenTab_Initialize
  6169 ;;		_TFT_BlackTab_Initialize
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text25
  6174  000B66                     __ptext25:
  6175                           	opt stack 0
  6176  000B66                     _Rcmd1:
  6177                           	opt stack 23
  6178                           
  6179                           ;ST7735_TFT.c: 283: write_command(0x01);
  6180                           
  6181                           ;incstack = 0
  6182  000B66  0E01               	movlw	1
  6183  000B68  ECC6  F00C         	call	_write_command
  6184                           
  6185                           ;ST7735_TFT.c: 284: delay_ms(150);
  6186  000B6C  0E00               	movlw	0
  6187  000B6E  6E18               	movwf	delay_ms@ms+1,c
  6188  000B70  0E96               	movlw	150
  6189  000B72  6E17               	movwf	delay_ms@ms,c
  6190  000B74  EC55  F00A         	call	_delay_ms	;wreg free
  6191                           
  6192                           ;ST7735_TFT.c: 285: write_command(0x11);
  6193  000B78  0E11               	movlw	17
  6194  000B7A  ECC6  F00C         	call	_write_command
  6195                           
  6196                           ;ST7735_TFT.c: 286: delay_ms(500);
  6197  000B7E  0E01               	movlw	1
  6198  000B80  6E18               	movwf	delay_ms@ms+1,c
  6199  000B82  0EF4               	movlw	244
  6200  000B84  6E17               	movwf	delay_ms@ms,c
  6201  000B86  EC55  F00A         	call	_delay_ms	;wreg free
  6202                           
  6203                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6204  000B8A  0EB1               	movlw	177
  6205  000B8C  ECC6  F00C         	call	_write_command
  6206                           
  6207                           ;ST7735_TFT.c: 288: write_data(0x01);
  6208  000B90  0E01               	movlw	1
  6209  000B92  ECBE  F00C         	call	_write_data
  6210                           
  6211                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6212  000B96  0E2C               	movlw	44
  6213  000B98  ECBE  F00C         	call	_write_data
  6214                           
  6215                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6216  000B9C  0E2D               	movlw	45
  6217  000B9E  ECBE  F00C         	call	_write_data
  6218                           
  6219                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6220  000BA2  0EB2               	movlw	178
  6221  000BA4  ECC6  F00C         	call	_write_command
  6222                           
  6223                           ;ST7735_TFT.c: 292: write_data(0x01);
  6224  000BA8  0E01               	movlw	1
  6225  000BAA  ECBE  F00C         	call	_write_data
  6226                           
  6227                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6228  000BAE  0E2C               	movlw	44
  6229  000BB0  ECBE  F00C         	call	_write_data
  6230                           
  6231                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6232  000BB4  0E2D               	movlw	45
  6233  000BB6  ECBE  F00C         	call	_write_data
  6234                           
  6235                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6236  000BBA  0EB3               	movlw	179
  6237  000BBC  ECC6  F00C         	call	_write_command
  6238                           
  6239                           ;ST7735_TFT.c: 296: write_data(0x01);
  6240  000BC0  0E01               	movlw	1
  6241  000BC2  ECBE  F00C         	call	_write_data
  6242                           
  6243                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6244  000BC6  0E2C               	movlw	44
  6245  000BC8  ECBE  F00C         	call	_write_data
  6246                           
  6247                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6248  000BCC  0E2D               	movlw	45
  6249  000BCE  ECBE  F00C         	call	_write_data
  6250                           
  6251                           ;ST7735_TFT.c: 299: write_data(0x01);
  6252  000BD2  0E01               	movlw	1
  6253  000BD4  ECBE  F00C         	call	_write_data
  6254                           
  6255                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6256  000BD8  0E2C               	movlw	44
  6257  000BDA  ECBE  F00C         	call	_write_data
  6258                           
  6259                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6260  000BDE  0E2D               	movlw	45
  6261  000BE0  ECBE  F00C         	call	_write_data
  6262                           
  6263                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6264  000BE4  0EB4               	movlw	180
  6265  000BE6  ECC6  F00C         	call	_write_command
  6266                           
  6267                           ;ST7735_TFT.c: 303: write_data(0x07);
  6268  000BEA  0E07               	movlw	7
  6269  000BEC  ECBE  F00C         	call	_write_data
  6270                           
  6271                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6272  000BF0  0EC0               	movlw	192
  6273  000BF2  ECC6  F00C         	call	_write_command
  6274                           
  6275                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6276  000BF6  0EA2               	movlw	162
  6277  000BF8  ECBE  F00C         	call	_write_data
  6278                           
  6279                           ;ST7735_TFT.c: 306: write_data(0x02);
  6280  000BFC  0E02               	movlw	2
  6281  000BFE  ECBE  F00C         	call	_write_data
  6282                           
  6283                           ;ST7735_TFT.c: 307: write_data(0x84);
  6284  000C02  0E84               	movlw	132
  6285  000C04  ECBE  F00C         	call	_write_data
  6286                           
  6287                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6288  000C08  0EC1               	movlw	193
  6289  000C0A  ECC6  F00C         	call	_write_command
  6290                           
  6291                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6292  000C0E  0EC5               	movlw	197
  6293  000C10  ECBE  F00C         	call	_write_data
  6294                           
  6295                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6296  000C14  0EC2               	movlw	194
  6297  000C16  ECC6  F00C         	call	_write_command
  6298                           
  6299                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6300  000C1A  0E0A               	movlw	10
  6301  000C1C  ECBE  F00C         	call	_write_data
  6302                           
  6303                           ;ST7735_TFT.c: 312: write_data(0x00);
  6304  000C20  0E00               	movlw	0
  6305  000C22  ECBE  F00C         	call	_write_data
  6306                           
  6307                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6308  000C26  0EC3               	movlw	195
  6309  000C28  ECC6  F00C         	call	_write_command
  6310                           
  6311                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6312  000C2C  0E8A               	movlw	138
  6313  000C2E  ECBE  F00C         	call	_write_data
  6314                           
  6315                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6316  000C32  0E2A               	movlw	42
  6317  000C34  ECBE  F00C         	call	_write_data
  6318                           
  6319                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6320  000C38  0EC4               	movlw	196
  6321  000C3A  ECC6  F00C         	call	_write_command
  6322                           
  6323                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6324  000C3E  0E8A               	movlw	138
  6325  000C40  ECBE  F00C         	call	_write_data
  6326                           
  6327                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6328  000C44  0EEE               	movlw	238
  6329  000C46  ECBE  F00C         	call	_write_data
  6330                           
  6331                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6332  000C4A  0EC5               	movlw	197
  6333  000C4C  ECC6  F00C         	call	_write_command
  6334                           
  6335                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6336  000C50  0E0E               	movlw	14
  6337  000C52  ECBE  F00C         	call	_write_data
  6338                           
  6339                           ;ST7735_TFT.c: 321: write_command(0x20);
  6340  000C56  0E20               	movlw	32
  6341  000C58  ECC6  F00C         	call	_write_command
  6342                           
  6343                           ;ST7735_TFT.c: 322: write_command(0x36);
  6344  000C5C  0E36               	movlw	54
  6345  000C5E  ECC6  F00C         	call	_write_command
  6346                           
  6347                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6348  000C62  0EC8               	movlw	200
  6349  000C64  ECBE  F00C         	call	_write_data
  6350                           
  6351                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6352  000C68  0E3A               	movlw	58
  6353  000C6A  ECC6  F00C         	call	_write_command
  6354                           
  6355                           ;ST7735_TFT.c: 325: write_data(0x05);
  6356  000C6E  0E05               	movlw	5
  6357  000C70  ECBE  F00C         	call	_write_data
  6358  000C74  0012               	return		;funcret
  6359  000C76                     __end_of_Rcmd1:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           intcon2	equ	0xFF1
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           postdec1	equ	0xFE5
  6372                           fsr1l	equ	0xFE1
  6373                           indf2	equ	0xFDF
  6374                           postinc2	equ	0xFDE
  6375                           postdec2	equ	0xFDD
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _write_data *****************
  6381 ;; Defined at:
  6382 ;;		line 209 in file "ST7735_TFT.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  data_           1    wreg     unsigned char 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  data_           1   18[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;		None               void
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;Total ram usage:        1 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    4
  6403 ;; This function calls:
  6404 ;;		_spiwrite
  6405 ;; This function is called by:
  6406 ;;		_Rcmd1
  6407 ;;		_Rcmd2red
  6408 ;;		_Rcmd3
  6409 ;;		_setAddrWindow
  6410 ;;		_drawPixel
  6411 ;;		_TFT_GreenTab_Initialize
  6412 ;;		_Bcmd
  6413 ;;		_setScrollDefinition
  6414 ;;		_Rcmd2green
  6415 ;;		_VerticalScroll
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text26
  6420  00197C                     __ptext26:
  6421                           	opt stack 0
  6422  00197C                     _write_data:
  6423                           	opt stack 22
  6424                           
  6425                           ;incstack = 0
  6426                           ;write_data@data_ stored from wreg
  6427  00197C  6E13               	movwf	write_data@data_,c
  6428                           
  6429                           ;ST7735_TFT.c: 211: PORTCbits.RC4 = 0;
  6430  00197E  9882               	bcf	3970,4,c	;volatile
  6431                           
  6432                           ;ST7735_TFT.c: 212: PORTCbits.RC2 = 1;
  6433  001980  8482               	bsf	3970,2,c	;volatile
  6434                           
  6435                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6436  001982  5013               	movf	write_data@data_,w,c
  6437  001984  EC7D  F00C         	call	_spiwrite
  6438                           
  6439                           ;ST7735_TFT.c: 214: PORTCbits.RC4 = 1;
  6440  001988  8882               	bsf	3970,4,c	;volatile
  6441  00198A  0012               	return		;funcret
  6442  00198C                     __end_of_write_data:
  6443                           	opt stack 0
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           intcon2	equ	0xFF1
  6452                           postinc0	equ	0xFEE
  6453                           wreg	equ	0xFE8
  6454                           postdec1	equ	0xFE5
  6455                           fsr1l	equ	0xFE1
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function _write_command *****************
  6464 ;; Defined at:
  6465 ;;		line 198 in file "ST7735_TFT.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  cmd_            1    wreg     unsigned char 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  cmd_            1   18[COMRAM] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;		None               void
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;Total ram usage:        1 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    4
  6486 ;; This function calls:
  6487 ;;		_spiwrite
  6488 ;; This function is called by:
  6489 ;;		_Rcmd1
  6490 ;;		_Rcmd2red
  6491 ;;		_Rcmd3
  6492 ;;		_setAddrWindow
  6493 ;;		_TFT_GreenTab_Initialize
  6494 ;;		_Bcmd
  6495 ;;		_setScrollDefinition
  6496 ;;		_Rcmd2green
  6497 ;;		_VerticalScroll
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text27
  6502  00198C                     __ptext27:
  6503                           	opt stack 0
  6504  00198C                     _write_command:
  6505                           	opt stack 22
  6506                           
  6507                           ;incstack = 0
  6508                           ;write_command@cmd_ stored from wreg
  6509  00198C  6E13               	movwf	write_command@cmd_,c
  6510                           
  6511                           ;ST7735_TFT.c: 200: PORTCbits.RC4 = 0;
  6512  00198E  9882               	bcf	3970,4,c	;volatile
  6513                           
  6514                           ;ST7735_TFT.c: 202: PORTCbits.RC2 = 0;
  6515  001990  9482               	bcf	3970,2,c	;volatile
  6516                           
  6517                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6518  001992  5013               	movf	write_command@cmd_,w,c
  6519  001994  EC7D  F00C         	call	_spiwrite
  6520                           
  6521                           ;ST7735_TFT.c: 205: PORTCbits.RC4 = 1;
  6522  001998  8882               	bsf	3970,4,c	;volatile
  6523  00199A  0012               	return		;funcret
  6524  00199C                     __end_of_write_command:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           intcon	equ	0xFF2
  6533                           intcon2	equ	0xFF1
  6534                           postinc0	equ	0xFEE
  6535                           wreg	equ	0xFE8
  6536                           postdec1	equ	0xFE5
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _spiwrite *****************
  6546 ;; Defined at:
  6547 ;;		line 189 in file "ST7735_TFT.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  spidata         1    wreg     unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  spidata         1   17[COMRAM] unsigned char 
  6552 ;;  x               1   16[COMRAM] unsigned char 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;		None               void
  6555 ;; Registers used:
  6556 ;;		wreg
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;Total ram usage:        2 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    3
  6569 ;; This function calls:
  6570 ;;		Nothing
  6571 ;; This function is called by:
  6572 ;;		_write_command
  6573 ;;		_write_data
  6574 ;;		_drawFastVLine
  6575 ;;		_fillRectangle
  6576 ;;		_drawFastHLine
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text28
  6581  0018FA                     __ptext28:
  6582                           	opt stack 0
  6583  0018FA                     _spiwrite:
  6584                           	opt stack 24
  6585                           
  6586                           ;incstack = 0
  6587                           ;spiwrite@spidata stored from wreg
  6588  0018FA  6E12               	movwf	spiwrite@spidata,c
  6589                           
  6590                           ;ST7735_TFT.c: 191: char x;
  6591                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6592  0018FC  969E               	bcf	3998,3,c	;volatile
  6593                           
  6594                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6595  0018FE  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6596                           
  6597                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6598  001902  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6599                           
  6600                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6601  001906  D000               	goto	l45
  6602  001908                     l45:
  6603  001908  A0C7               	btfss	4039,0,c	;volatile
  6604  00190A  D7FE               	goto	l45
  6605  00190C  0012               	return		;funcret
  6606  00190E                     __end_of_spiwrite:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           intcon2	equ	0xFF1
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           postdec1	equ	0xFE5
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _LCD_Reset *****************
  6628 ;; Defined at:
  6629 ;;		line 217 in file "ST7735_TFT.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    5
  6650 ;; This function calls:
  6651 ;;		_delay_ms
  6652 ;; This function is called by:
  6653 ;;		_Initialize_Screen
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text29
  6658  001922                     __ptext29:
  6659                           	opt stack 0
  6660  001922                     _LCD_Reset:
  6661                           	opt stack 24
  6662                           
  6663                           ;ST7735_TFT.c: 219: PORTCbits.RC0 = 0;
  6664                           
  6665                           ;incstack = 0
  6666  001922  9082               	bcf	3970,0,c	;volatile
  6667                           
  6668                           ;ST7735_TFT.c: 220: delay_ms(100);
  6669  001924  0E00               	movlw	0
  6670  001926  6E18               	movwf	delay_ms@ms+1,c
  6671  001928  0E64               	movlw	100
  6672  00192A  6E17               	movwf	delay_ms@ms,c
  6673  00192C  EC55  F00A         	call	_delay_ms	;wreg free
  6674                           
  6675                           ;ST7735_TFT.c: 221: PORTCbits.RC0 = 1;
  6676  001930  8082               	bsf	3970,0,c	;volatile
  6677  001932  0012               	return		;funcret
  6678  001934                     __end_of_LCD_Reset:
  6679                           	opt stack 0
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           intcon	equ	0xFF2
  6687                           intcon2	equ	0xFF1
  6688                           postinc0	equ	0xFEE
  6689                           wreg	equ	0xFE8
  6690                           postdec1	equ	0xFE5
  6691                           fsr1l	equ	0xFE1
  6692                           indf2	equ	0xFDF
  6693                           postinc2	equ	0xFDE
  6694                           postdec2	equ	0xFDD
  6695                           fsr2h	equ	0xFDA
  6696                           fsr2l	equ	0xFD9
  6697                           status	equ	0xFD8
  6698                           
  6699 ;; *************** function _delay_ms *****************
  6700 ;; Defined at:
  6701 ;;		line 64 in file "ST7735_TFT.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  ms              2   22[COMRAM] int 
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  count           2   26[COMRAM] int 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;Total ram usage:        6 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    4
  6722 ;; This function calls:
  6723 ;;		___wmul
  6724 ;; This function is called by:
  6725 ;;		_LCD_Reset
  6726 ;;		_Rcmd1
  6727 ;;		_Rcmd3
  6728 ;;		_Bcmd
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text30
  6733  0014AA                     __ptext30:
  6734                           	opt stack 0
  6735  0014AA                     _delay_ms:
  6736                           	opt stack 23
  6737                           
  6738                           ;ST7735_TFT.c: 70: int count;
  6739                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6740                           
  6741                           ;incstack = 0
  6742  0014AA  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6743  0014AE  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6744  0014B2  0E00               	movlw	0
  6745  0014B4  6E14               	movwf	___wmul@multiplicand+1,c
  6746  0014B6  0EFA               	movlw	250
  6747  0014B8  6E13               	movwf	___wmul@multiplicand,c
  6748  0014BA  ECF5  F00B         	call	___wmul	;wreg free
  6749  0014BE  C011  F01B         	movff	?___wmul,delay_ms@count
  6750  0014C2  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6751                           
  6752                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6753  0014C6  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6754  0014CA  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6755  0014CE  1E19               	comf	??_delay_ms,f,c
  6756  0014D0  1E1A               	comf	??_delay_ms+1,f,c
  6757  0014D2  4A19               	infsnz	??_delay_ms,f,c
  6758  0014D4  2A1A               	incf	??_delay_ms+1,f,c
  6759  0014D6  0EFF               	movlw	255
  6760  0014D8  2419               	addwf	??_delay_ms,w,c
  6761  0014DA  6E1B               	movwf	delay_ms@count,c
  6762  0014DC  0EFF               	movlw	255
  6763  0014DE  201A               	addwfc	??_delay_ms+1,w,c
  6764  0014E0  6E1C               	movwf	delay_ms@count+1,c
  6765                           
  6766                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6767  0014E2  0EB8               	movlw	184
  6768  0014E4  6EB1               	movwf	4017,c	;volatile
  6769                           
  6770                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6771  0014E6  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6772                           
  6773                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6774  0014EA  501C               	movf	delay_ms@count+1,w,c
  6775  0014EC  6EB3               	movwf	4019,c	;volatile
  6776                           
  6777                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6778  0014EE  92A1               	bcf	4001,1,c	;volatile
  6779                           
  6780                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6781  0014F0  80B1               	bsf	4017,0,c	;volatile
  6782                           
  6783                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6784  0014F2  D000               	goto	l35
  6785  0014F4                     l35:
  6786  0014F4  A2A1               	btfss	4001,1,c	;volatile
  6787  0014F6  D7FE               	goto	l35
  6788                           
  6789                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6790  0014F8  90B1               	bcf	4017,0,c	;volatile
  6791  0014FA  0012               	return		;funcret
  6792  0014FC                     __end_of_delay_ms:
  6793                           	opt stack 0
  6794                           tblptru	equ	0xFF8
  6795                           tblptrh	equ	0xFF7
  6796                           tblptrl	equ	0xFF6
  6797                           tablat	equ	0xFF5
  6798                           prodh	equ	0xFF4
  6799                           prodl	equ	0xFF3
  6800                           intcon	equ	0xFF2
  6801                           intcon2	equ	0xFF1
  6802                           postinc0	equ	0xFEE
  6803                           wreg	equ	0xFE8
  6804                           postdec1	equ	0xFE5
  6805                           fsr1l	equ	0xFE1
  6806                           indf2	equ	0xFDF
  6807                           postinc2	equ	0xFDE
  6808                           postdec2	equ	0xFDD
  6809                           fsr2h	equ	0xFDA
  6810                           fsr2l	equ	0xFD9
  6811                           status	equ	0xFD8
  6812                           
  6813 ;; *************** function ___wmul *****************
  6814 ;; Defined at:
  6815 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;  multiplier      2   16[COMRAM] unsigned int 
  6818 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  product         2   20[COMRAM] unsigned int 
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  2   16[COMRAM] unsigned int 
  6823 ;; Registers used:
  6824 ;;		wreg, status,2, status,0, prodl, prodh
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;Total ram usage:        6 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    3
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_delay_ms
  6841 ;;		_drawChar
  6842 ;;		_main
  6843 ;;		_printf
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text31
  6848  0017EA                     __ptext31:
  6849                           	opt stack 0
  6850  0017EA                     ___wmul:
  6851                           	opt stack 26
  6852                           
  6853                           ;incstack = 0
  6854  0017EA  5011               	movf	___wmul@multiplier,w,c
  6855  0017EC  0213               	mulwf	___wmul@multiplicand,c
  6856  0017EE  CFF3 F015          	movff	prodl,___wmul@product
  6857  0017F2  CFF4 F016          	movff	prodh,___wmul@product+1
  6858  0017F6  5011               	movf	___wmul@multiplier,w,c
  6859  0017F8  0214               	mulwf	___wmul@multiplicand+1,c
  6860  0017FA  50F3               	movf	prodl,w,c
  6861  0017FC  2616               	addwf	___wmul@product+1,f,c
  6862  0017FE  5012               	movf	___wmul@multiplier+1,w,c
  6863  001800  0213               	mulwf	___wmul@multiplicand,c
  6864  001802  50F3               	movf	prodl,w,c
  6865  001804  2616               	addwf	___wmul@product+1,f,c
  6866  001806  C015  F011         	movff	___wmul@product,?___wmul
  6867  00180A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6868  00180E  D000               	goto	l687
  6869  001810                     l687:
  6870  001810  0012               	return		;funcret
  6871  001812                     __end_of___wmul:
  6872                           	opt stack 0
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           intcon2	equ	0xFF1
  6881                           postinc0	equ	0xFEE
  6882                           wreg	equ	0xFE8
  6883                           postdec1	equ	0xFE5
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _Do_Init *****************
  6893 ;; Defined at:
  6894 ;;		line 123 in file "Lab11p1.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;		None               void
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    7
  6915 ;; This function calls:
  6916 ;;		_DS1621_Init
  6917 ;;		_I2C_Init
  6918 ;;		_init_INTERRUPT
  6919 ;;		_init_UART
  6920 ;; This function is called by:
  6921 ;;		_main
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text32
  6926  001628                     __ptext32:
  6927                           	opt stack 0
  6928  001628                     _Do_Init:
  6929                           	opt stack 23
  6930                           
  6931                           ;Lab11p1.c: 125: init_UART();
  6932                           
  6933                           ;incstack = 0
  6934  001628  EC87  F00C         	call	_init_UART	;wreg free
  6935                           
  6936                           ;Lab11p1.c: 126: init_INTERRUPT();
  6937  00162C  EC66  F00C         	call	_init_INTERRUPT	;wreg free
  6938                           
  6939                           ;Lab11p1.c: 127: OSCCON=0x70;
  6940  001630  0E70               	movlw	112
  6941  001632  6ED3               	movwf	4051,c	;volatile
  6942                           
  6943                           ;Lab11p1.c: 128: RBPU=0;
  6944  001634  9EF1               	bcf	intcon2,7,c	;volatile
  6945                           
  6946                           ;Lab11p1.c: 129: ADCON1= 0x0F;
  6947  001636  0E0F               	movlw	15
  6948  001638  6EC1               	movwf	4033,c	;volatile
  6949                           
  6950                           ;Lab11p1.c: 130: TRISA = 0x00;
  6951  00163A  0E00               	movlw	0
  6952  00163C  6E92               	movwf	3986,c	;volatile
  6953                           
  6954                           ;Lab11p1.c: 131: TRISB = 0b00110001;
  6955  00163E  0E31               	movlw	49
  6956  001640  6E93               	movwf	3987,c	;volatile
  6957                           
  6958                           ;Lab11p1.c: 132: TRISC = 0x00;
  6959  001642  0E00               	movlw	0
  6960  001644  6E94               	movwf	3988,c	;volatile
  6961                           
  6962                           ;Lab11p1.c: 133: TRISD = 0x00;
  6963  001646  0E00               	movlw	0
  6964  001648  6E95               	movwf	3989,c	;volatile
  6965                           
  6966                           ;Lab11p1.c: 134: TRISE = 0x00;
  6967  00164A  0E00               	movlw	0
  6968  00164C  6E96               	movwf	3990,c	;volatile
  6969                           
  6970                           ;Lab11p1.c: 136: I2C_Init(100000);
  6971  00164E  0EA0               	movlw	160
  6972  001650  6E11               	movwf	I2C_Init@c,c
  6973  001652  0E86               	movlw	134
  6974  001654  6E12               	movwf	I2C_Init@c+1,c
  6975  001656  0E01               	movlw	1
  6976  001658  6E13               	movwf	I2C_Init@c+2,c
  6977  00165A  0E00               	movlw	0
  6978  00165C  6E14               	movwf	I2C_Init@c+3,c
  6979  00165E  ECE1  F00C         	call	_I2C_Init	;wreg free
  6980                           
  6981                           ;Lab11p1.c: 138: DS1621_Init();
  6982  001662  EC3C  F00C         	call	_DS1621_Init	;wreg free
  6983  001666  0012               	return		;funcret
  6984  001668                     __end_of_Do_Init:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           intcon2	equ	0xFF1
  6994                           postinc0	equ	0xFEE
  6995                           wreg	equ	0xFE8
  6996                           postdec1	equ	0xFE5
  6997                           fsr1l	equ	0xFE1
  6998                           indf2	equ	0xFDF
  6999                           postinc2	equ	0xFDE
  7000                           postdec2	equ	0xFDD
  7001                           fsr2h	equ	0xFDA
  7002                           fsr2l	equ	0xFD9
  7003                           status	equ	0xFD8
  7004                           
  7005 ;; *************** function _init_UART *****************
  7006 ;; Defined at:
  7007 ;;		line 110 in file "Lab11p1.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;		None
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;		None               void
  7014 ;; Registers used:
  7015 ;;		wreg, status,2, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;Total ram usage:        0 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    4
  7028 ;; This function calls:
  7029 ;;		_OpenUSART
  7030 ;; This function is called by:
  7031 ;;		_Do_Init
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text33
  7036  00190E                     __ptext33:
  7037                           	opt stack 0
  7038  00190E                     _init_UART:
  7039                           	opt stack 25
  7040                           
  7041                           ;Lab11p1.c: 112: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  7042                           
  7043                           ;incstack = 0
  7044  00190E  0E00               	movlw	0
  7045  001910  6E12               	movwf	OpenUSART@spbrg+1,c
  7046  001912  0E19               	movlw	25
  7047  001914  6E11               	movwf	OpenUSART@spbrg,c
  7048  001916  0E3C               	movlw	60
  7049  001918  EC37  F009         	call	_OpenUSART
  7050                           
  7051                           ;Lab11p1.c: 113: OSCCON = 0x70;
  7052  00191C  0E70               	movlw	112
  7053  00191E  6ED3               	movwf	4051,c	;volatile
  7054  001920  0012               	return		;funcret
  7055  001922                     __end_of_init_UART:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           intcon	equ	0xFF2
  7064                           intcon2	equ	0xFF1
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           postdec1	equ	0xFE5
  7068                           fsr1l	equ	0xFE1
  7069                           indf2	equ	0xFDF
  7070                           postinc2	equ	0xFDE
  7071                           postdec2	equ	0xFDD
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function _OpenUSART *****************
  7077 ;; Defined at:
  7078 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  config          1    wreg     unsigned char 
  7081 ;;  spbrg           2   16[COMRAM] unsigned int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  config          1   18[COMRAM] unsigned char 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;		None               void
  7086 ;; Registers used:
  7087 ;;		wreg, status,2
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7093 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;Total ram usage:        3 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    3
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_init_UART
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text34
  7108  00126E                     __ptext34:
  7109                           	opt stack 0
  7110  00126E                     _OpenUSART:
  7111                           	opt stack 25
  7112                           
  7113                           ;incstack = 0
  7114                           ;OpenUSART@config stored from wreg
  7115  00126E  6E13               	movwf	OpenUSART@config,c
  7116  001270  0E00               	movlw	0
  7117  001272  6EAC               	movwf	4012,c	;volatile
  7118  001274  0E00               	movlw	0
  7119  001276  6EAB               	movwf	4011,c	;volatile
  7120  001278  A013               	btfss	OpenUSART@config,0,c
  7121  00127A  D002               	goto	l4433
  7122  00127C  88AC               	bsf	4012,4,c	;volatile
  7123  00127E  D000               	goto	l4433
  7124  001280                     l4433:
  7125  001280  A213               	btfss	OpenUSART@config,1,c
  7126  001282  D003               	goto	l4437
  7127  001284  8CAC               	bsf	4012,6,c	;volatile
  7128  001286  8CAB               	bsf	4011,6,c	;volatile
  7129  001288  D000               	goto	l4437
  7130  00128A                     l4437:
  7131  00128A  A413               	btfss	OpenUSART@config,2,c
  7132  00128C  D002               	goto	l4441
  7133  00128E  8EAC               	bsf	4012,7,c	;volatile
  7134  001290  D000               	goto	l4441
  7135  001292                     l4441:
  7136  001292  A613               	btfss	OpenUSART@config,3,c
  7137  001294  D002               	goto	l675
  7138  001296  88AB               	bsf	4011,4,c	;volatile
  7139  001298  D002               	goto	l4445
  7140  00129A                     l675:
  7141  00129A  8AAB               	bsf	4011,5,c	;volatile
  7142  00129C  D000               	goto	l4445
  7143  00129E                     l4445:
  7144  00129E  B813               	btfsc	OpenUSART@config,4,c
  7145  0012A0  84AC               	bsf	4012,2,c	;volatile
  7146  0012A2  989E               	bcf	3998,4,c	;volatile
  7147  0012A4  AA13               	btfss	OpenUSART@config,5,c
  7148  0012A6  D002               	goto	l4453
  7149  0012A8  86AB               	bsf	4011,3,c	;volatile
  7150  0012AA  D000               	goto	l4453
  7151  0012AC                     l4453:
  7152  0012AC  AC13               	btfss	OpenUSART@config,6,c
  7153  0012AE  D002               	goto	l679
  7154  0012B0  8A9D               	bsf	3997,5,c	;volatile
  7155  0012B2  D001               	goto	l680
  7156  0012B4                     l679:
  7157  0012B4  9A9D               	bcf	3997,5,c	;volatile
  7158  0012B6                     l680:
  7159  0012B6  9A9E               	bcf	3998,5,c	;volatile
  7160  0012B8  AE13               	btfss	OpenUSART@config,7,c
  7161  0012BA  D002               	goto	l681
  7162  0012BC  889D               	bsf	3997,4,c	;volatile
  7163  0012BE  D001               	goto	l682
  7164  0012C0                     l681:
  7165  0012C0  989D               	bcf	3997,4,c	;volatile
  7166  0012C2                     l682:
  7167  0012C2  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7168  0012C6  5012               	movf	OpenUSART@spbrg+1,w,c
  7169  0012C8  6EB0               	movwf	4016,c	;volatile
  7170  0012CA  8AAC               	bsf	4012,5,c	;volatile
  7171  0012CC  8EAB               	bsf	4011,7,c	;volatile
  7172  0012CE  9C94               	bcf	3988,6,c	;volatile
  7173  0012D0  8E94               	bsf	3988,7,c	;volatile
  7174  0012D2  B8AC               	btfsc	4012,4,c	;volatile
  7175  0012D4  BEAC               	btfsc	4012,7,c	;volatile
  7176  0012D6  D002               	goto	l684
  7177  0012D8  8C94               	bsf	3988,6,c	;volatile
  7178  0012DA  D000               	goto	l684
  7179  0012DC                     l684:
  7180  0012DC  0012               	return		;funcret
  7181  0012DE                     __end_of_OpenUSART:
  7182                           	opt stack 0
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           intcon2	equ	0xFF1
  7191                           postinc0	equ	0xFEE
  7192                           wreg	equ	0xFE8
  7193                           postdec1	equ	0xFE5
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _init_INTERRUPT *****************
  7203 ;; Defined at:
  7204 ;;		line 135 in file "Interrupt.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;		None               void
  7211 ;; Registers used:
  7212 ;;		wreg, status,2
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;Total ram usage:        0 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    3
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_Do_Init
  7229 ;;		_main
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text35
  7234  0018CC                     __ptext35:
  7235                           	opt stack 0
  7236  0018CC                     _init_INTERRUPT:
  7237                           	opt stack 27
  7238                           
  7239                           ;Interrupt.c: 137: INTCONbits.INT0IF = 0;
  7240                           
  7241                           ;incstack = 0
  7242  0018CC  92F2               	bcf	intcon,1,c	;volatile
  7243                           
  7244                           ;Interrupt.c: 138: INTCON2bits.INTEDG0 = 0;
  7245  0018CE  9CF1               	bcf	intcon2,6,c	;volatile
  7246                           
  7247                           ;Interrupt.c: 139: INTCONbits.INT0IE = 1;
  7248  0018D0  88F2               	bsf	intcon,4,c	;volatile
  7249                           
  7250                           ;Interrupt.c: 140: TMR1H = 0;
  7251  0018D2  0E00               	movlw	0
  7252  0018D4  6ECF               	movwf	4047,c	;volatile
  7253                           
  7254                           ;Interrupt.c: 141: TMR1L = 0;
  7255  0018D6  0E00               	movlw	0
  7256  0018D8  6ECE               	movwf	4046,c	;volatile
  7257                           
  7258                           ;Interrupt.c: 142: PIR1bits.TMR1IF = 0;
  7259  0018DA  909E               	bcf	3998,0,c	;volatile
  7260                           
  7261                           ;Interrupt.c: 143: PIE1bits.TMR1IE = 1;
  7262  0018DC  809D               	bsf	3997,0,c	;volatile
  7263                           
  7264                           ;Interrupt.c: 144: INTCONbits.PEIE = 1;
  7265  0018DE  8CF2               	bsf	intcon,6,c	;volatile
  7266                           
  7267                           ;Interrupt.c: 145: INTCONbits.GIE = 1;
  7268  0018E0  8EF2               	bsf	intcon,7,c	;volatile
  7269  0018E2  0012               	return		;funcret
  7270  0018E4                     __end_of_init_INTERRUPT:
  7271                           	opt stack 0
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           postinc0	equ	0xFEE
  7281                           wreg	equ	0xFE8
  7282                           postdec1	equ	0xFE5
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           fsr2h	equ	0xFDA
  7288                           fsr2l	equ	0xFD9
  7289                           status	equ	0xFD8
  7290                           
  7291 ;; *************** function _I2C_Init *****************
  7292 ;; Defined at:
  7293 ;;		line 10 in file "I2C_Soft.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  c               4   16[COMRAM] unsigned long 
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;		None
  7298 ;; Return value:  Size  Location     Type
  7299 ;;		None               void
  7300 ;; Registers used:
  7301 ;;		wreg, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;Total ram usage:        4 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:    4
  7314 ;; This function calls:
  7315 ;;		_i2cHighScl
  7316 ;;		_i2cHighSda
  7317 ;; This function is called by:
  7318 ;;		_Do_Init
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text36
  7323  0019C2                     __ptext36:
  7324                           	opt stack 0
  7325  0019C2                     _I2C_Init:
  7326                           	opt stack 25
  7327                           
  7328                           ;I2C_Soft.c: 12: i2cHighScl();
  7329                           
  7330                           ;incstack = 0
  7331  0019C2  ECD5  F00C         	call	_i2cHighScl	;wreg free
  7332                           
  7333                           ;I2C_Soft.c: 13: i2cHighSda();
  7334  0019C6  ECF8  F00C         	call	_i2cHighSda	;wreg free
  7335  0019CA  0012               	return		;funcret
  7336  0019CC                     __end_of_I2C_Init:
  7337                           	opt stack 0
  7338                           tblptru	equ	0xFF8
  7339                           tblptrh	equ	0xFF7
  7340                           tblptrl	equ	0xFF6
  7341                           tablat	equ	0xFF5
  7342                           prodh	equ	0xFF4
  7343                           prodl	equ	0xFF3
  7344                           intcon	equ	0xFF2
  7345                           intcon2	equ	0xFF1
  7346                           postinc0	equ	0xFEE
  7347                           wreg	equ	0xFE8
  7348                           postdec1	equ	0xFE5
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _DS1621_Init *****************
  7358 ;; Defined at:
  7359 ;;		line 21 in file "I2C_Support.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  Device          1   21[COMRAM] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;		None               void
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;Total ram usage:        1 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    6
  7380 ;; This function calls:
  7381 ;;		_I2C_Write_Cmd_Only
  7382 ;;		_I2C_Write_Cmd_Write_Data
  7383 ;; This function is called by:
  7384 ;;		_Do_Init
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text37
  7389  001878                     __ptext37:
  7390                           	opt stack 0
  7391  001878                     _DS1621_Init:
  7392                           	opt stack 23
  7393                           
  7394                           ;I2C_Support.c: 23: char Device = 0x48;
  7395                           
  7396                           ;incstack = 0
  7397  001878  0E48               	movlw	72
  7398  00187A  6E16               	movwf	DS1621_Init@Device,c
  7399                           
  7400                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7401  00187C  0EAC               	movlw	172
  7402  00187E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7403  001880  0E02               	movlw	2
  7404  001882  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7405  001884  5016               	movf	DS1621_Init@Device,w,c
  7406  001886  EC2C  F00C         	call	_I2C_Write_Cmd_Write_Data
  7407                           
  7408                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7409  00188A  0EEE               	movlw	238
  7410  00188C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7411  00188E  5016               	movf	DS1621_Init@Device,w,c
  7412  001890  EC59  F00C         	call	_I2C_Write_Cmd_Only
  7413  001894  0012               	return		;funcret
  7414  001896                     __end_of_DS1621_Init:
  7415                           	opt stack 0
  7416                           tblptru	equ	0xFF8
  7417                           tblptrh	equ	0xFF7
  7418                           tblptrl	equ	0xFF6
  7419                           tablat	equ	0xFF5
  7420                           prodh	equ	0xFF4
  7421                           prodl	equ	0xFF3
  7422                           intcon	equ	0xFF2
  7423                           intcon2	equ	0xFF1
  7424                           postinc0	equ	0xFEE
  7425                           wreg	equ	0xFE8
  7426                           postdec1	equ	0xFE5
  7427                           fsr1l	equ	0xFE1
  7428                           indf2	equ	0xFDF
  7429                           postinc2	equ	0xFDE
  7430                           postdec2	equ	0xFDD
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7436 ;; Defined at:
  7437 ;;		line 148 in file "I2C_Soft.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  Device          1    wreg     unsigned char 
  7440 ;;  Cmd             1   18[COMRAM] unsigned char 
  7441 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  Device          1   20[COMRAM] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;		None               void
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;Total ram usage:        3 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    5
  7460 ;; This function calls:
  7461 ;;		_I2C_Start
  7462 ;;		_I2C_Stop
  7463 ;;		_I2C_Write
  7464 ;; This function is called by:
  7465 ;;		_DS1621_Init
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text38
  7470  001858                     __ptext38:
  7471                           	opt stack 0
  7472  001858                     _I2C_Write_Cmd_Write_Data:
  7473                           	opt stack 23
  7474                           
  7475                           ;incstack = 0
  7476                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7477  001858  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7478                           
  7479                           ;I2C_Soft.c: 150: I2C_Start();
  7480  00185A  ECA3  F00C         	call	_I2C_Start	;wreg free
  7481                           
  7482                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  7483  00185E  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7484  001860  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7485  001862  EC72  F00B         	call	_I2C_Write
  7486                           
  7487                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  7488  001866  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7489  001868  EC72  F00B         	call	_I2C_Write
  7490                           
  7491                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  7492  00186C  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7493  00186E  EC72  F00B         	call	_I2C_Write
  7494                           
  7495                           ;I2C_Soft.c: 154: I2C_Stop();
  7496  001872  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7497  001876  0012               	return		;funcret
  7498  001878                     __end_of_I2C_Write_Cmd_Write_Data:
  7499                           	opt stack 0
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodh	equ	0xFF4
  7505                           prodl	equ	0xFF3
  7506                           intcon	equ	0xFF2
  7507                           intcon2	equ	0xFF1
  7508                           postinc0	equ	0xFEE
  7509                           wreg	equ	0xFE8
  7510                           postdec1	equ	0xFE5
  7511                           fsr1l	equ	0xFE1
  7512                           indf2	equ	0xFDF
  7513                           postinc2	equ	0xFDE
  7514                           postdec2	equ	0xFDD
  7515                           fsr2h	equ	0xFDA
  7516                           fsr2l	equ	0xFD9
  7517                           status	equ	0xFD8
  7518                           
  7519 ;; *************** function _I2C_Write_Cmd_Only *****************
  7520 ;; Defined at:
  7521 ;;		line 140 in file "I2C_Soft.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  Device          1    wreg     unsigned char 
  7524 ;;  Cmd             1   18[COMRAM] unsigned char 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  Device          1   19[COMRAM] unsigned char 
  7527 ;; Return value:  Size  Location     Type
  7528 ;;		None               void
  7529 ;; Registers used:
  7530 ;;		wreg, status,2, status,0, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;Total ram usage:        2 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    5
  7543 ;; This function calls:
  7544 ;;		_I2C_Start
  7545 ;;		_I2C_Stop
  7546 ;;		_I2C_Write
  7547 ;; This function is called by:
  7548 ;;		_DS1621_Init
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text39
  7553  0018B2                     __ptext39:
  7554                           	opt stack 0
  7555  0018B2                     _I2C_Write_Cmd_Only:
  7556                           	opt stack 23
  7557                           
  7558                           ;incstack = 0
  7559                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7560  0018B2  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7561                           
  7562                           ;I2C_Soft.c: 142: I2C_Start();
  7563  0018B4  ECA3  F00C         	call	_I2C_Start	;wreg free
  7564                           
  7565                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  7566  0018B8  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7567  0018BA  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7568  0018BC  EC72  F00B         	call	_I2C_Write
  7569                           
  7570                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  7571  0018C0  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7572  0018C2  EC72  F00B         	call	_I2C_Write
  7573                           
  7574                           ;I2C_Soft.c: 145: I2C_Stop();
  7575  0018C6  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7576  0018CA  0012               	return		;funcret
  7577  0018CC                     __end_of_I2C_Write_Cmd_Only:
  7578                           	opt stack 0
  7579                           tblptru	equ	0xFF8
  7580                           tblptrh	equ	0xFF7
  7581                           tblptrl	equ	0xFF6
  7582                           tablat	equ	0xFF5
  7583                           prodh	equ	0xFF4
  7584                           prodl	equ	0xFF3
  7585                           intcon	equ	0xFF2
  7586                           intcon2	equ	0xFF1
  7587                           postinc0	equ	0xFEE
  7588                           wreg	equ	0xFE8
  7589                           postdec1	equ	0xFE5
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _Deactivate_Buzzer *****************
  7599 ;; Defined at:
  7600 ;;		line 228 in file "Lab11p1.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;		None
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;		None
  7605 ;; Return value:  Size  Location     Type
  7606 ;;		None               void
  7607 ;; Registers used:
  7608 ;;		wreg, status,2
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;Total ram usage:        0 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    3
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_main
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text40
  7629  0019E0                     __ptext40:
  7630                           	opt stack 0
  7631  0019E0                     _Deactivate_Buzzer:
  7632                           	opt stack 27
  7633                           
  7634                           ;Lab11p1.c: 230: CCP2CON = 0x0;
  7635                           
  7636                           ;incstack = 0
  7637  0019E0  0E00               	movlw	0
  7638  0019E2  6EBA               	movwf	4026,c	;volatile
  7639                           
  7640                           ;Lab11p1.c: 231: PORTBbits.RB3 = 0;
  7641  0019E4  9681               	bcf	3969,3,c	;volatile
  7642  0019E6  0012               	return		;funcret
  7643  0019E8                     __end_of_Deactivate_Buzzer:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon2	equ	0xFF1
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           postdec1	equ	0xFE5
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           fsr2h	equ	0xFDA
  7661                           fsr2l	equ	0xFD9
  7662                           status	equ	0xFD8
  7663                           
  7664 ;; *************** function _DS3231_Setup_Time *****************
  7665 ;; Defined at:
  7666 ;;		line 65 in file "I2C_Support.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  Address         1   19[COMRAM] unsigned char 
  7671 ;;  Device          1   18[COMRAM] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;		None               void
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;Total ram usage:        2 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    5
  7688 ;; This function calls:
  7689 ;;		_I2C_Start
  7690 ;;		_I2C_Stop
  7691 ;;		_I2C_Write
  7692 ;; This function is called by:
  7693 ;;		_main
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text41
  7698  0012DE                     __ptext41:
  7699                           	opt stack 0
  7700  0012DE                     _DS3231_Setup_Time:
  7701                           	opt stack 25
  7702                           
  7703                           ;I2C_Support.c: 67: char Device = 0x68;
  7704                           
  7705                           ;incstack = 0
  7706  0012DE  0E68               	movlw	104
  7707  0012E0  6E13               	movwf	DS3231_Setup_Time@Device,c
  7708                           
  7709                           ;I2C_Support.c: 68: char Address = 0x00;
  7710  0012E2  0E00               	movlw	0
  7711  0012E4  6E14               	movwf	DS3231_Setup_Time@Address,c
  7712                           
  7713                           ;I2C_Support.c: 69: second = 0x00;
  7714  0012E6  0E00               	movlw	0
  7715  0012E8  6E62               	movwf	_second,c
  7716                           
  7717                           ;I2C_Support.c: 70: minute = 0x00;
  7718  0012EA  0E00               	movlw	0
  7719  0012EC  6E5F               	movwf	_minute,c
  7720                           
  7721                           ;I2C_Support.c: 71: hour = 0x00;
  7722  0012EE  0E00               	movlw	0
  7723  0012F0  6E5D               	movwf	_hour,c
  7724                           
  7725                           ;I2C_Support.c: 72: dow = 0x04;
  7726  0012F2  0E04               	movlw	4
  7727  0012F4  6E5B               	movwf	_dow,c
  7728                           
  7729                           ;I2C_Support.c: 73: day = 0x30;
  7730  0012F6  0E30               	movlw	48
  7731  0012F8  6E5A               	movwf	_day,c
  7732                           
  7733                           ;I2C_Support.c: 74: month = 0x11;
  7734  0012FA  0E11               	movlw	17
  7735  0012FC  6E60               	movwf	_month,c
  7736                           
  7737                           ;I2C_Support.c: 75: year = 0x22;
  7738  0012FE  0E22               	movlw	34
  7739  001300  6E6C               	movwf	_year,c
  7740                           
  7741                           ;I2C_Support.c: 77: I2C_Start();
  7742  001302  ECA3  F00C         	call	_I2C_Start	;wreg free
  7743                           
  7744                           ;I2C_Support.c: 78: I2C_Write((Device << 1) | 0);
  7745  001306  5013               	movf	DS3231_Setup_Time@Device,w,c
  7746  001308  2413               	addwf	DS3231_Setup_Time@Device,w,c
  7747  00130A  EC72  F00B         	call	_I2C_Write
  7748                           
  7749                           ;I2C_Support.c: 79: I2C_Write(Address);
  7750  00130E  5014               	movf	DS3231_Setup_Time@Address,w,c
  7751  001310  EC72  F00B         	call	_I2C_Write
  7752                           
  7753                           ;I2C_Support.c: 80: I2C_Write(second);
  7754  001314  5062               	movf	_second,w,c
  7755  001316  EC72  F00B         	call	_I2C_Write
  7756                           
  7757                           ;I2C_Support.c: 81: I2C_Write(minute);
  7758  00131A  505F               	movf	_minute,w,c
  7759  00131C  EC72  F00B         	call	_I2C_Write
  7760                           
  7761                           ;I2C_Support.c: 82: I2C_Write(hour);
  7762  001320  505D               	movf	_hour,w,c
  7763  001322  EC72  F00B         	call	_I2C_Write
  7764                           
  7765                           ;I2C_Support.c: 83: I2C_Write(dow);
  7766  001326  505B               	movf	_dow,w,c
  7767  001328  EC72  F00B         	call	_I2C_Write
  7768                           
  7769                           ;I2C_Support.c: 84: I2C_Write(day);
  7770  00132C  505A               	movf	_day,w,c
  7771  00132E  EC72  F00B         	call	_I2C_Write
  7772                           
  7773                           ;I2C_Support.c: 85: I2C_Write(month);
  7774  001332  5060               	movf	_month,w,c
  7775  001334  EC72  F00B         	call	_I2C_Write
  7776                           
  7777                           ;I2C_Support.c: 86: I2C_Write(year);
  7778  001338  506C               	movf	_year,w,c
  7779  00133A  EC72  F00B         	call	_I2C_Write
  7780                           
  7781                           ;I2C_Support.c: 87: I2C_Stop();
  7782  00133E  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7783  001342  0012               	return		;funcret
  7784  001344                     __end_of_DS3231_Setup_Time:
  7785                           	opt stack 0
  7786                           tblptru	equ	0xFF8
  7787                           tblptrh	equ	0xFF7
  7788                           tblptrl	equ	0xFF6
  7789                           tablat	equ	0xFF5
  7790                           prodh	equ	0xFF4
  7791                           prodl	equ	0xFF3
  7792                           intcon	equ	0xFF2
  7793                           intcon2	equ	0xFF1
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           postdec1	equ	0xFE5
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           postdec2	equ	0xFDD
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805 ;; *************** function _DS3231_Read_Time *****************
  7806 ;; Defined at:
  7807 ;;		line 44 in file "I2C_Support.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;		None
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  Device          1   20[COMRAM] unsigned char 
  7812 ;;  Address         1   19[COMRAM] unsigned char 
  7813 ;;  Data_Ret        1    0        unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;		None               void
  7816 ;; Registers used:
  7817 ;;		wreg, status,2, status,0, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;Total ram usage:        2 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    6
  7830 ;; This function calls:
  7831 ;;		_I2C_ReStart
  7832 ;;		_I2C_Read
  7833 ;;		_I2C_Start
  7834 ;;		_I2C_Stop
  7835 ;;		_I2C_Write
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text42
  7842  001344                     __ptext42:
  7843                           	opt stack 0
  7844  001344                     _DS3231_Read_Time:
  7845                           	opt stack 24
  7846                           
  7847                           ;I2C_Support.c: 46: char Device = 0x68;
  7848                           
  7849                           ;incstack = 0
  7850  001344  0E68               	movlw	104
  7851  001346  6E15               	movwf	DS3231_Read_Time@Device,c
  7852                           
  7853                           ;I2C_Support.c: 47: char Address = 0x00;
  7854  001348  0E00               	movlw	0
  7855  00134A  6E14               	movwf	DS3231_Read_Time@Address,c
  7856                           
  7857                           ;I2C_Support.c: 49: char Data_Ret;
  7858                           ;I2C_Support.c: 50: I2C_Start();
  7859  00134C  ECA3  F00C         	call	_I2C_Start	;wreg free
  7860                           
  7861                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  7862  001350  5015               	movf	DS3231_Read_Time@Device,w,c
  7863  001352  2415               	addwf	DS3231_Read_Time@Device,w,c
  7864  001354  EC72  F00B         	call	_I2C_Write
  7865                           
  7866                           ;I2C_Support.c: 52: I2C_Write(Address);
  7867  001358  5014               	movf	DS3231_Read_Time@Address,w,c
  7868  00135A  EC72  F00B         	call	_I2C_Write
  7869                           
  7870                           ;I2C_Support.c: 53: I2C_ReStart();
  7871  00135E  EC72  F00C         	call	_I2C_ReStart	;wreg free
  7872                           
  7873                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  7874  001362  80D8               	bsf	status,0,c
  7875  001364  3415               	rlcf	DS3231_Read_Time@Device,w,c
  7876  001366  EC72  F00B         	call	_I2C_Write
  7877                           
  7878                           ;I2C_Support.c: 55: second = I2C_Read(1);
  7879  00136A  0E01               	movlw	1
  7880  00136C  ECF0  F00A         	call	_I2C_Read
  7881  001370  6E62               	movwf	_second,c
  7882                           
  7883                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  7884  001372  0E01               	movlw	1
  7885  001374  ECF0  F00A         	call	_I2C_Read
  7886  001378  6E5F               	movwf	_minute,c
  7887                           
  7888                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  7889  00137A  0E01               	movlw	1
  7890  00137C  ECF0  F00A         	call	_I2C_Read
  7891  001380  6E5D               	movwf	_hour,c
  7892                           
  7893                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  7894  001382  0E01               	movlw	1
  7895  001384  ECF0  F00A         	call	_I2C_Read
  7896  001388  6E5B               	movwf	_dow,c
  7897                           
  7898                           ;I2C_Support.c: 59: day = I2C_Read(1);
  7899  00138A  0E01               	movlw	1
  7900  00138C  ECF0  F00A         	call	_I2C_Read
  7901  001390  6E5A               	movwf	_day,c
  7902                           
  7903                           ;I2C_Support.c: 60: month = I2C_Read(1);
  7904  001392  0E01               	movlw	1
  7905  001394  ECF0  F00A         	call	_I2C_Read
  7906  001398  6E60               	movwf	_month,c
  7907                           
  7908                           ;I2C_Support.c: 61: year = I2C_Read(0);
  7909  00139A  0E00               	movlw	0
  7910  00139C  ECF0  F00A         	call	_I2C_Read
  7911  0013A0  6E6C               	movwf	_year,c
  7912                           
  7913                           ;I2C_Support.c: 62: I2C_Stop();
  7914  0013A2  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7915  0013A6  0012               	return		;funcret
  7916  0013A8                     __end_of_DS3231_Read_Time:
  7917                           	opt stack 0
  7918                           tblptru	equ	0xFF8
  7919                           tblptrh	equ	0xFF7
  7920                           tblptrl	equ	0xFF6
  7921                           tablat	equ	0xFF5
  7922                           prodh	equ	0xFF4
  7923                           prodl	equ	0xFF3
  7924                           intcon	equ	0xFF2
  7925                           intcon2	equ	0xFF1
  7926                           postinc0	equ	0xFEE
  7927                           wreg	equ	0xFE8
  7928                           postdec1	equ	0xFE5
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8
  7936                           
  7937 ;; *************** function _DS1621_Read_Temp *****************
  7938 ;; Defined at:
  7939 ;;		line 29 in file "I2C_Support.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  Device          1   23[COMRAM] unsigned char 
  7944 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  7945 ;;  Cmd             1   21[COMRAM] unsigned char 
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  2   19[COMRAM] int 
  7948 ;; Registers used:
  7949 ;;		wreg, status,2, status,0, cstack
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;Total ram usage:        5 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    6
  7962 ;; This function calls:
  7963 ;;		_I2C_ReStart
  7964 ;;		_I2C_Read
  7965 ;;		_I2C_Start
  7966 ;;		_I2C_Stop
  7967 ;;		_I2C_Write
  7968 ;; This function is called by:
  7969 ;;		_main
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text43
  7974  001722                     __ptext43:
  7975                           	opt stack 0
  7976  001722                     _DS1621_Read_Temp:
  7977                           	opt stack 24
  7978                           
  7979                           ;I2C_Support.c: 31: char Device = 0x48;
  7980                           
  7981                           ;incstack = 0
  7982  001722  0E48               	movlw	72
  7983  001724  6E18               	movwf	DS1621_Read_Temp@Device,c
  7984                           
  7985                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  7986  001726  0EAA               	movlw	170
  7987  001728  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  7988                           
  7989                           ;I2C_Support.c: 33: char Data_Ret;
  7990                           ;I2C_Support.c: 34: I2C_Start();
  7991  00172A  ECA3  F00C         	call	_I2C_Start	;wreg free
  7992                           
  7993                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  7994  00172E  5018               	movf	DS1621_Read_Temp@Device,w,c
  7995  001730  2418               	addwf	DS1621_Read_Temp@Device,w,c
  7996  001732  EC72  F00B         	call	_I2C_Write
  7997                           
  7998                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  7999  001736  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8000  001738  EC72  F00B         	call	_I2C_Write
  8001                           
  8002                           ;I2C_Support.c: 37: I2C_ReStart();
  8003  00173C  EC72  F00C         	call	_I2C_ReStart	;wreg free
  8004                           
  8005                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  8006  001740  80D8               	bsf	status,0,c
  8007  001742  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8008  001744  EC72  F00B         	call	_I2C_Write
  8009                           
  8010                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  8011  001748  0E00               	movlw	0
  8012  00174A  ECF0  F00A         	call	_I2C_Read
  8013  00174E  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8014                           
  8015                           ;I2C_Support.c: 40: I2C_Stop();
  8016  001750  EC9A  F00C         	call	_I2C_Stop	;wreg free
  8017                           
  8018                           ;I2C_Support.c: 41: return Data_Ret;
  8019  001754  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8020  001758  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8021  00175A  D000               	goto	l505
  8022  00175C                     l505:
  8023  00175C  0012               	return		;funcret
  8024  00175E                     __end_of_DS1621_Read_Temp:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           intcon2	equ	0xFF1
  8034                           postinc0	equ	0xFEE
  8035                           wreg	equ	0xFE8
  8036                           postdec1	equ	0xFE5
  8037                           fsr1l	equ	0xFE1
  8038                           indf2	equ	0xFDF
  8039                           postinc2	equ	0xFDE
  8040                           postdec2	equ	0xFDD
  8041                           fsr2h	equ	0xFDA
  8042                           fsr2l	equ	0xFD9
  8043                           status	equ	0xFD8
  8044                           
  8045 ;; *************** function _I2C_Write *****************
  8046 ;; Defined at:
  8047 ;;		line 37 in file "I2C_Soft.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  outByte         1    wreg     unsigned char 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  outByte         1   16[COMRAM] unsigned char 
  8052 ;;  n               1   17[COMRAM] unsigned char 
  8053 ;; Return value:  Size  Location     Type
  8054 ;;		None               void
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0, cstack
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        2 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    4
  8069 ;; This function calls:
  8070 ;;		_i2cHighScl
  8071 ;;		_i2cHighSda
  8072 ;;		_i2cLowScl
  8073 ;;		_i2cLowSda
  8074 ;; This function is called by:
  8075 ;;		_I2C_Write_Cmd_Only
  8076 ;;		_I2C_Write_Cmd_Write_Data
  8077 ;;		_DS1621_Read_Temp
  8078 ;;		_DS3231_Read_Time
  8079 ;;		_DS3231_Setup_Time
  8080 ;;		_I2C_Write_Address_Read_One_Byte
  8081 ;;		_I2C_Write_Address_Write_One_Byte
  8082 ;;		_I2C_Write_Cmd_Read_One_Byte
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           	psect	text44
  8087  0016E4                     __ptext44:
  8088                           	opt stack 0
  8089  0016E4                     _I2C_Write:
  8090                           	opt stack 23
  8091                           
  8092                           ;incstack = 0
  8093                           ;I2C_Write@outByte stored from wreg
  8094  0016E4  6E11               	movwf	I2C_Write@outByte,c
  8095                           
  8096                           ;I2C_Soft.c: 39: unsigned char n;
  8097                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  8098  0016E6  0E00               	movlw	0
  8099  0016E8  6E12               	movwf	I2C_Write@n,c
  8100  0016EA                     l4193:
  8101  0016EA  0E07               	movlw	7
  8102  0016EC  6412               	cpfsgt	I2C_Write@n,c
  8103  0016EE  D001               	goto	l425
  8104  0016F0  D011               	goto	l4211
  8105  0016F2                     l425:
  8106                           
  8107                           ;I2C_Soft.c: 41: {
  8108                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  8109  0016F2  AE11               	btfss	I2C_Write@outByte,7,c
  8110  0016F4  D003               	goto	l4199
  8111  0016F6  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8112  0016FA  D003               	goto	l4201
  8113  0016FC                     l4199:
  8114                           
  8115                           ;I2C_Soft.c: 43: else i2cLowSda();
  8116  0016FC  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8117  001700  D000               	goto	l4201
  8118  001702                     l4201:
  8119                           
  8120                           ;I2C_Soft.c: 44: i2cHighScl();
  8121  001702  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8122                           
  8123                           ;I2C_Soft.c: 45: i2cLowScl();
  8124  001706  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8125                           
  8126                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  8127  00170A  5011               	movf	I2C_Write@outByte,w,c
  8128  00170C  2411               	addwf	I2C_Write@outByte,w,c
  8129  00170E  6E11               	movwf	I2C_Write@outByte,c
  8130  001710  2A12               	incf	I2C_Write@n,f,c
  8131  001712  D7EB               	goto	l4193
  8132  001714                     l4211:
  8133                           
  8134                           ;I2C_Soft.c: 47: }
  8135                           ;I2C_Soft.c: 48: i2cHighSda();
  8136  001714  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8137                           
  8138                           ;I2C_Soft.c: 49: i2cHighScl();
  8139  001718  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8140                           
  8141                           ;I2C_Soft.c: 50: i2cLowScl();
  8142  00171C  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8143  001720  0012               	return		;funcret
  8144  001722                     __end_of_I2C_Write:
  8145                           	opt stack 0
  8146                           tblptru	equ	0xFF8
  8147                           tblptrh	equ	0xFF7
  8148                           tblptrl	equ	0xFF6
  8149                           tablat	equ	0xFF5
  8150                           prodh	equ	0xFF4
  8151                           prodl	equ	0xFF3
  8152                           intcon	equ	0xFF2
  8153                           intcon2	equ	0xFF1
  8154                           postinc0	equ	0xFEE
  8155                           wreg	equ	0xFE8
  8156                           postdec1	equ	0xFE5
  8157                           fsr1l	equ	0xFE1
  8158                           indf2	equ	0xFDF
  8159                           postinc2	equ	0xFDE
  8160                           postdec2	equ	0xFDD
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function _I2C_Stop *****************
  8166 ;; Defined at:
  8167 ;;		line 84 in file "I2C_Soft.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;		None
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;		None
  8172 ;; Return value:  Size  Location     Type
  8173 ;;		None               void
  8174 ;; Registers used:
  8175 ;;		wreg, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:        0 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    4
  8188 ;; This function calls:
  8189 ;;		_i2cHighScl
  8190 ;;		_i2cHighSda
  8191 ;;		_i2cLowScl
  8192 ;;		_i2cLowSda
  8193 ;; This function is called by:
  8194 ;;		_I2C_Write_Cmd_Only
  8195 ;;		_I2C_Write_Cmd_Write_Data
  8196 ;;		_DS1621_Read_Temp
  8197 ;;		_DS3231_Read_Time
  8198 ;;		_DS3231_Setup_Time
  8199 ;;		_I2C_Write_Address_Read_One_Byte
  8200 ;;		_I2C_Write_Address_Write_One_Byte
  8201 ;;		_I2C_Write_Cmd_Read_One_Byte
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text45
  8206  001934                     __ptext45:
  8207                           	opt stack 0
  8208  001934                     _I2C_Stop:
  8209                           	opt stack 23
  8210                           
  8211                           ;I2C_Soft.c: 86: i2cLowScl();
  8212                           
  8213                           ;incstack = 0
  8214  001934  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8215                           
  8216                           ;I2C_Soft.c: 87: i2cLowSda();
  8217  001938  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8218                           
  8219                           ;I2C_Soft.c: 88: i2cHighScl();
  8220  00193C  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8221                           
  8222                           ;I2C_Soft.c: 89: i2cHighSda();
  8223  001940  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8224  001944  0012               	return		;funcret
  8225  001946                     __end_of_I2C_Stop:
  8226                           	opt stack 0
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon2	equ	0xFF1
  8235                           postinc0	equ	0xFEE
  8236                           wreg	equ	0xFE8
  8237                           postdec1	equ	0xFE5
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function _I2C_Start *****************
  8247 ;; Defined at:
  8248 ;;		line 67 in file "I2C_Soft.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;		None
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;		None
  8253 ;; Return value:  Size  Location     Type
  8254 ;;		None               void
  8255 ;; Registers used:
  8256 ;;		wreg, cstack
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;Total ram usage:        0 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    4
  8269 ;; This function calls:
  8270 ;;		_i2cHighScl
  8271 ;;		_i2cHighSda
  8272 ;;		_i2cLowScl
  8273 ;;		_i2cLowSda
  8274 ;; This function is called by:
  8275 ;;		_I2C_Write_Cmd_Only
  8276 ;;		_I2C_Write_Cmd_Write_Data
  8277 ;;		_DS1621_Read_Temp
  8278 ;;		_DS3231_Read_Time
  8279 ;;		_DS3231_Setup_Time
  8280 ;;		_I2C_Write_Address_Read_One_Byte
  8281 ;;		_I2C_Write_Address_Write_One_Byte
  8282 ;;		_I2C_Write_Cmd_Read_One_Byte
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text46
  8287  001946                     __ptext46:
  8288                           	opt stack 0
  8289  001946                     _I2C_Start:
  8290                           	opt stack 23
  8291                           
  8292                           ;I2C_Soft.c: 69: i2cHighSda();
  8293                           
  8294                           ;incstack = 0
  8295  001946  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8296                           
  8297                           ;I2C_Soft.c: 70: i2cHighScl();
  8298  00194A  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8299                           
  8300                           ;I2C_Soft.c: 71: i2cLowSda();
  8301  00194E  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8302                           
  8303                           ;I2C_Soft.c: 72: i2cLowScl();
  8304  001952  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8305  001956  0012               	return		;funcret
  8306  001958                     __end_of_I2C_Start:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           postdec1	equ	0xFE5
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _I2C_Read *****************
  8328 ;; Defined at:
  8329 ;;		line 16 in file "I2C_Soft.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  ack             1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  ack             1   16[COMRAM] unsigned char 
  8334 ;;  inByte          1   18[COMRAM] unsigned char 
  8335 ;;  n               1   17[COMRAM] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      unsigned char 
  8338 ;; Registers used:
  8339 ;;		wreg, status,2, status,0, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;Total ram usage:        3 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    5
  8352 ;; This function calls:
  8353 ;;		_i2cAck
  8354 ;;		_i2cHighScl
  8355 ;;		_i2cHighSda
  8356 ;;		_i2cLowScl
  8357 ;;		_i2cNack
  8358 ;; This function is called by:
  8359 ;;		_DS1621_Read_Temp
  8360 ;;		_DS3231_Read_Time
  8361 ;;		_I2C_Write_Address_Read_One_Byte
  8362 ;;		_I2C_Write_Cmd_Read_One_Byte
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text47
  8367  0015E0                     __ptext47:
  8368                           	opt stack 0
  8369  0015E0                     _I2C_Read:
  8370                           	opt stack 24
  8371                           
  8372                           ;incstack = 0
  8373                           ;I2C_Read@ack stored from wreg
  8374  0015E0  6E11               	movwf	I2C_Read@ack,c
  8375                           
  8376                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  8377                           ;I2C_Soft.c: 19: i2cHighSda();
  8378  0015E2  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8379                           
  8380                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  8381  0015E6  0E00               	movlw	0
  8382  0015E8  6E12               	movwf	I2C_Read@n,c
  8383  0015EA                     l4637:
  8384  0015EA  0E07               	movlw	7
  8385  0015EC  6412               	cpfsgt	I2C_Read@n,c
  8386  0015EE  D001               	goto	l4641
  8387  0015F0  D00F               	goto	l4655
  8388  0015F2                     l4641:
  8389                           
  8390                           ;I2C_Soft.c: 21: {
  8391                           ;I2C_Soft.c: 22: i2cHighScl();
  8392  0015F2  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8393                           
  8394                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
  8395  0015F6  AA81               	btfss	3969,5,c	;volatile
  8396  0015F8  D003               	goto	l4647
  8397                           
  8398                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  8399  0015FA  80D8               	bsf	status,0,c
  8400  0015FC  3613               	rlcf	I2C_Read@inByte,f,c
  8401  0015FE  D004               	goto	l4649
  8402  001600                     l4647:
  8403                           
  8404                           ;I2C_Soft.c: 26: else
  8405                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  8406  001600  5013               	movf	I2C_Read@inByte,w,c
  8407  001602  2413               	addwf	I2C_Read@inByte,w,c
  8408  001604  6E13               	movwf	I2C_Read@inByte,c
  8409  001606  D000               	goto	l4649
  8410  001608                     l4649:
  8411                           
  8412                           ;I2C_Soft.c: 28: i2cLowScl();
  8413  001608  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8414  00160C  2A12               	incf	I2C_Read@n,f,c
  8415  00160E  D7ED               	goto	l4637
  8416  001610                     l4655:
  8417                           
  8418                           ;I2C_Soft.c: 29: }
  8419                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  8420  001610  5011               	movf	I2C_Read@ack,w,c
  8421  001612  B4D8               	btfsc	status,2,c
  8422  001614  D003               	goto	l4659
  8423  001616  ECAC  F00C         	call	_i2cAck	;wreg free
  8424  00161A  D003               	goto	l4661
  8425  00161C                     l4659:
  8426                           
  8427                           ;I2C_Soft.c: 31: else i2cNack();
  8428  00161C  ECE6  F00C         	call	_i2cNack	;wreg free
  8429  001620  D000               	goto	l4661
  8430  001622                     l4661:
  8431                           
  8432                           ;I2C_Soft.c: 34: return(inByte);
  8433  001622  5013               	movf	I2C_Read@inByte,w,c
  8434  001624  D000               	goto	l422
  8435  001626                     l422:
  8436  001626  0012               	return		;funcret
  8437  001628                     __end_of_I2C_Read:
  8438                           	opt stack 0
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           postinc0	equ	0xFEE
  8448                           wreg	equ	0xFE8
  8449                           postdec1	equ	0xFE5
  8450                           fsr1l	equ	0xFE1
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           postdec2	equ	0xFDD
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8
  8457                           
  8458 ;; *************** function _i2cNack *****************
  8459 ;; Defined at:
  8460 ;;		line 53 in file "I2C_Soft.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;		None
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;		None
  8465 ;; Return value:  Size  Location     Type
  8466 ;;		None               void
  8467 ;; Registers used:
  8468 ;;		wreg, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;Total ram usage:        0 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    4
  8481 ;; This function calls:
  8482 ;;		_i2cHighScl
  8483 ;;		_i2cLowScl
  8484 ;; This function is called by:
  8485 ;;		_I2C_Read
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text48
  8490  0019CC                     __ptext48:
  8491                           	opt stack 0
  8492  0019CC                     _i2cNack:
  8493                           	opt stack 24
  8494                           
  8495                           ;I2C_Soft.c: 55: i2cHighScl();
  8496                           
  8497                           ;incstack = 0
  8498  0019CC  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8499                           
  8500                           ;I2C_Soft.c: 56: i2cLowScl();
  8501  0019D0  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8502  0019D4  0012               	return		;funcret
  8503  0019D6                     __end_of_i2cNack:
  8504                           	opt stack 0
  8505                           tblptru	equ	0xFF8
  8506                           tblptrh	equ	0xFF7
  8507                           tblptrl	equ	0xFF6
  8508                           tablat	equ	0xFF5
  8509                           prodh	equ	0xFF4
  8510                           prodl	equ	0xFF3
  8511                           intcon	equ	0xFF2
  8512                           intcon2	equ	0xFF1
  8513                           postinc0	equ	0xFEE
  8514                           wreg	equ	0xFE8
  8515                           postdec1	equ	0xFE5
  8516                           fsr1l	equ	0xFE1
  8517                           indf2	equ	0xFDF
  8518                           postinc2	equ	0xFDE
  8519                           postdec2	equ	0xFDD
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _i2cAck *****************
  8525 ;; Defined at:
  8526 ;;		line 59 in file "I2C_Soft.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;		None
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;		None
  8531 ;; Return value:  Size  Location     Type
  8532 ;;		None               void
  8533 ;; Registers used:
  8534 ;;		wreg, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;Total ram usage:        0 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    4
  8547 ;; This function calls:
  8548 ;;		_i2cHighScl
  8549 ;;		_i2cHighSda
  8550 ;;		_i2cLowScl
  8551 ;;		_i2cLowSda
  8552 ;; This function is called by:
  8553 ;;		_I2C_Read
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text49
  8558  001958                     __ptext49:
  8559                           	opt stack 0
  8560  001958                     _i2cAck:
  8561                           	opt stack 24
  8562                           
  8563                           ;I2C_Soft.c: 61: i2cLowSda();
  8564                           
  8565                           ;incstack = 0
  8566  001958  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8567                           
  8568                           ;I2C_Soft.c: 62: i2cHighScl();
  8569  00195C  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8570                           
  8571                           ;I2C_Soft.c: 63: i2cLowScl();
  8572  001960  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8573                           
  8574                           ;I2C_Soft.c: 64: i2cHighSda();
  8575  001964  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8576  001968  0012               	return		;funcret
  8577  00196A                     __end_of_i2cAck:
  8578                           	opt stack 0
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           intcon2	equ	0xFF1
  8587                           postinc0	equ	0xFEE
  8588                           wreg	equ	0xFE8
  8589                           postdec1	equ	0xFE5
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _I2C_ReStart *****************
  8599 ;; Defined at:
  8600 ;;		line 75 in file "I2C_Soft.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;		None               void
  8607 ;; Registers used:
  8608 ;;		wreg, cstack
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    4
  8621 ;; This function calls:
  8622 ;;		_i2cHighScl
  8623 ;;		_i2cHighSda
  8624 ;;		_i2cLowScl
  8625 ;;		_i2cLowSda
  8626 ;; This function is called by:
  8627 ;;		_DS1621_Read_Temp
  8628 ;;		_DS3231_Read_Time
  8629 ;;		_I2C_Write_Address_Read_One_Byte
  8630 ;;		_I2C_Write_Cmd_Read_One_Byte
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text50
  8635  0018E4                     __ptext50:
  8636                           	opt stack 0
  8637  0018E4                     _I2C_ReStart:
  8638                           	opt stack 25
  8639                           
  8640                           ;I2C_Soft.c: 77: i2cLowScl();
  8641                           
  8642                           ;incstack = 0
  8643  0018E4  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8644                           
  8645                           ;I2C_Soft.c: 78: i2cHighSda();
  8646  0018E8  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8647                           
  8648                           ;I2C_Soft.c: 79: i2cHighScl();
  8649  0018EC  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8650                           
  8651                           ;I2C_Soft.c: 80: i2cLowSda();
  8652  0018F0  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8653                           
  8654                           ;I2C_Soft.c: 81: i2cLowScl();
  8655  0018F4  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8656  0018F8  0012               	return		;funcret
  8657  0018FA                     __end_of_I2C_ReStart:
  8658                           	opt stack 0
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           intcon	equ	0xFF2
  8666                           intcon2	equ	0xFF1
  8667                           postinc0	equ	0xFEE
  8668                           wreg	equ	0xFE8
  8669                           postdec1	equ	0xFE5
  8670                           fsr1l	equ	0xFE1
  8671                           indf2	equ	0xFDF
  8672                           postinc2	equ	0xFDE
  8673                           postdec2	equ	0xFDD
  8674                           fsr2h	equ	0xFDA
  8675                           fsr2l	equ	0xFD9
  8676                           status	equ	0xFD8
  8677                           
  8678 ;; *************** function _i2cLowSda *****************
  8679 ;; Defined at:
  8680 ;;		line 98 in file "I2C_Soft.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;		None
  8683 ;; Auto vars:     Size  Location     Type
  8684 ;;		None
  8685 ;; Return value:  Size  Location     Type
  8686 ;;		None               void
  8687 ;; Registers used:
  8688 ;;		None
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;Total ram usage:        0 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    3
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_I2C_Write
  8705 ;;		_i2cAck
  8706 ;;		_I2C_Start
  8707 ;;		_I2C_ReStart
  8708 ;;		_I2C_Stop
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           	psect	text51
  8713  0019D6                     __ptext51:
  8714                           	opt stack 0
  8715  0019D6                     _i2cLowSda:
  8716                           	opt stack 23
  8717                           
  8718                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
  8719                           
  8720                           ;incstack = 0
  8721  0019D6  9A81               	bcf	3969,5,c	;volatile
  8722                           
  8723                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
  8724  0019D8  9A93               	bcf	3987,5,c	;volatile
  8725                           
  8726                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8727  0019DA  D000               	nop2		;2 cycle nop
  8728  0019DC  D000               	nop2		;2 cycle nop
  8729  0019DE  0012               	return		;funcret
  8730  0019E0                     __end_of_i2cLowSda:
  8731                           	opt stack 0
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           intcon	equ	0xFF2
  8739                           intcon2	equ	0xFF1
  8740                           postinc0	equ	0xFEE
  8741                           wreg	equ	0xFE8
  8742                           postdec1	equ	0xFE5
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           postdec2	equ	0xFDD
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function _i2cLowScl *****************
  8752 ;; Defined at:
  8753 ;;		line 111 in file "I2C_Soft.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;		None
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;		None
  8758 ;; Return value:  Size  Location     Type
  8759 ;;		None               void
  8760 ;; Registers used:
  8761 ;;		None
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;Total ram usage:        0 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    3
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_I2C_Read
  8778 ;;		_I2C_Write
  8779 ;;		_i2cNack
  8780 ;;		_i2cAck
  8781 ;;		_I2C_Start
  8782 ;;		_I2C_ReStart
  8783 ;;		_I2C_Stop
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text52
  8788  0019E8                     __ptext52:
  8789                           	opt stack 0
  8790  0019E8                     _i2cLowScl:
  8791                           	opt stack 23
  8792                           
  8793                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
  8794                           
  8795                           ;incstack = 0
  8796  0019E8  9881               	bcf	3969,4,c	;volatile
  8797                           
  8798                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
  8799  0019EA  9893               	bcf	3987,4,c	;volatile
  8800                           
  8801                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8802  0019EC  D000               	nop2		;2 cycle nop
  8803  0019EE  0012               	return		;funcret
  8804  0019F0                     __end_of_i2cLowScl:
  8805                           	opt stack 0
  8806                           tblptru	equ	0xFF8
  8807                           tblptrh	equ	0xFF7
  8808                           tblptrl	equ	0xFF6
  8809                           tablat	equ	0xFF5
  8810                           prodh	equ	0xFF4
  8811                           prodl	equ	0xFF3
  8812                           intcon	equ	0xFF2
  8813                           intcon2	equ	0xFF1
  8814                           postinc0	equ	0xFEE
  8815                           wreg	equ	0xFE8
  8816                           postdec1	equ	0xFE5
  8817                           fsr1l	equ	0xFE1
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           fsr2h	equ	0xFDA
  8822                           fsr2l	equ	0xFD9
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _i2cHighSda *****************
  8826 ;; Defined at:
  8827 ;;		line 92 in file "I2C_Soft.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;		None
  8832 ;; Return value:  Size  Location     Type
  8833 ;;		None               void
  8834 ;; Registers used:
  8835 ;;		None
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;Total ram usage:        0 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    3
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_I2C_Init
  8852 ;;		_I2C_Read
  8853 ;;		_I2C_Write
  8854 ;;		_i2cAck
  8855 ;;		_I2C_Start
  8856 ;;		_I2C_ReStart
  8857 ;;		_I2C_Stop
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text53
  8862  0019F0                     __ptext53:
  8863                           	opt stack 0
  8864  0019F0                     _i2cHighSda:
  8865                           	opt stack 25
  8866                           
  8867                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
  8868                           
  8869                           ;incstack = 0
  8870  0019F0  8A93               	bsf	3987,5,c	;volatile
  8871                           
  8872                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8873  0019F2  D000               	nop2		;2 cycle nop
  8874  0019F4  D000               	nop2		;2 cycle nop
  8875  0019F6  0012               	return		;funcret
  8876  0019F8                     __end_of_i2cHighSda:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon2	equ	0xFF1
  8886                           postinc0	equ	0xFEE
  8887                           wreg	equ	0xFE8
  8888                           postdec1	equ	0xFE5
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           
  8897 ;; *************** function _i2cHighScl *****************
  8898 ;; Defined at:
  8899 ;;		line 105 in file "I2C_Soft.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;		None               void
  8906 ;; Registers used:
  8907 ;;		wreg
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;Total ram usage:        0 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    3
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_I2C_Init
  8924 ;;		_I2C_Read
  8925 ;;		_I2C_Write
  8926 ;;		_i2cNack
  8927 ;;		_i2cAck
  8928 ;;		_I2C_Start
  8929 ;;		_I2C_ReStart
  8930 ;;		_I2C_Stop
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text54
  8935  0019AA                     __ptext54:
  8936                           	opt stack 0
  8937  0019AA                     _i2cHighScl:
  8938                           	opt stack 25
  8939                           
  8940                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
  8941                           
  8942                           ;incstack = 0
  8943  0019AA  8893               	bsf	3987,4,c	;volatile
  8944                           
  8945                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8946  0019AC  0E06               	movlw	6
  8947  0019AE                     u3927:
  8948  0019AE  2EE8               	decfsz	wreg,f,c
  8949  0019B0  D7FE               	goto	u3927
  8950  0019B2  D000               	nop2		;nop
  8951  0019B4  0012               	return		;funcret
  8952  0019B6                     __end_of_i2cHighScl:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           intcon2	equ	0xFF1
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function _Activate_Buzzer *****************
  8974 ;; Defined at:
  8975 ;;		line 220 in file "Lab11p1.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg, status,2
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    3
  8996 ;; This function calls:
  8997 ;;		Nothing
  8998 ;; This function is called by:
  8999 ;;		_main
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text55
  9004  00196A                     __ptext55:
  9005                           	opt stack 0
  9006  00196A                     _Activate_Buzzer:
  9007                           	opt stack 27
  9008                           
  9009                           ;Lab11p1.c: 222: PR2 = 0b11111001 ;
  9010                           
  9011                           ;incstack = 0
  9012  00196A  0EF9               	movlw	249
  9013  00196C  6ECB               	movwf	4043,c	;volatile
  9014                           
  9015                           ;Lab11p1.c: 223: T2CON = 0b00000101 ;
  9016  00196E  0E05               	movlw	5
  9017  001970  6ECA               	movwf	4042,c	;volatile
  9018                           
  9019                           ;Lab11p1.c: 224: CCPR2L = 0b01001010 ;
  9020  001972  0E4A               	movlw	74
  9021  001974  6EBB               	movwf	4027,c	;volatile
  9022                           
  9023                           ;Lab11p1.c: 225: CCP2CON = 0b00111100 ;
  9024  001976  0E3C               	movlw	60
  9025  001978  6EBA               	movwf	4026,c	;volatile
  9026  00197A  0012               	return		;funcret
  9027  00197C                     __end_of_Activate_Buzzer:
  9028                           	opt stack 0
  9029                           tblptru	equ	0xFF8
  9030                           tblptrh	equ	0xFF7
  9031                           tblptrl	equ	0xFF6
  9032                           tablat	equ	0xFF5
  9033                           prodh	equ	0xFF4
  9034                           prodl	equ	0xFF3
  9035                           intcon	equ	0xFF2
  9036                           intcon2	equ	0xFF1
  9037                           postinc0	equ	0xFEE
  9038                           wreg	equ	0xFE8
  9039                           postdec1	equ	0xFE5
  9040                           fsr1l	equ	0xFE1
  9041                           indf2	equ	0xFDF
  9042                           postinc2	equ	0xFDE
  9043                           postdec2	equ	0xFDD
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function _chkisr *****************
  9049 ;; Defined at:
  9050 ;;		line 17 in file "Interrupt.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;		None
  9053 ;; Auto vars:     Size  Location     Type
  9054 ;;		None
  9055 ;; Return value:  Size  Location     Type
  9056 ;;		None               void
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0, cstack
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;Total ram usage:       14 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    2
  9071 ;; This function calls:
  9072 ;;		_INT0_isr
  9073 ;;		_TIMER1_isr
  9074 ;; This function is called by:
  9075 ;;		Interrupt level 2
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	intcode
  9080  000008                     __pintcode:
  9081                           	opt stack 0
  9082  000008                     _chkisr:
  9083                           	opt stack 20
  9084                           
  9085                           ;incstack = 0
  9086  000008  CFFA F003          	movff	pclath,??_chkisr
  9087  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9088  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9089  000014  EDBC  F008         	call	int_func,f	;refresh shadow registers
  9090                           pclatu	equ	0xFFB
  9091                           pclath	equ	0xFFA
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           intcon2	equ	0xFF1
  9100                           postinc0	equ	0xFEE
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           postdec1	equ	0xFE5
  9104                           fsr1l	equ	0xFE1
  9105                           indf2	equ	0xFDF
  9106                           postinc2	equ	0xFDE
  9107                           postdec2	equ	0xFDD
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112                           	psect	intcode_body
  9113  001178                     __pintcode_body:
  9114                           	opt stack 20
  9115  001178                     int_func:
  9116                           	opt stack 20
  9117  001178  0006               	pop		; remove dummy address from shadow register refresh
  9118  00117A  CFEA F006          	movff	fsr0h,??_chkisr+3
  9119  00117E  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9120  001182  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9121  001186  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9122  00118A  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9123  00118E  CFF3 F00B          	movff	prodl,??_chkisr+8
  9124  001192  CFF4 F00C          	movff	prodh,??_chkisr+9
  9125  001196  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9126  00119A  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9127  00119E  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9128  0011A2  CFF5 F010          	movff	tablat,??_chkisr+13
  9129                           
  9130                           ;Interrupt.c: 19: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9131  0011A6  A09E               	btfss	3998,0,c	;volatile
  9132  0011A8  D003               	goto	i2l2739
  9133  0011AA  ECDB  F00C         	call	_TIMER1_isr	;wreg free
  9134  0011AE  D000               	goto	i2l2739
  9135  0011B0                     i2l2739:
  9136                           
  9137                           ;Interrupt.c: 20: if (INTCONbits.INT0IF == 1) INT0_isr();
  9138  0011B0  A2F2               	btfss	intcon,1,c	;volatile
  9139  0011B2  D003               	goto	i2l552
  9140  0011B4  ECC0  F003         	call	_INT0_isr	;wreg free
  9141  0011B8  D000               	goto	i2l552
  9142  0011BA                     i2l552:
  9143  0011BA  C010  FFF5         	movff	??_chkisr+13,tablat
  9144  0011BE  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9145  0011C2  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9146  0011C6  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9147  0011CA  C00C  FFF4         	movff	??_chkisr+9,prodh
  9148  0011CE  C00B  FFF3         	movff	??_chkisr+8,prodl
  9149  0011D2  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9150  0011D6  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9151  0011DA  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9152  0011DE  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9153  0011E2  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9154  0011E6  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9155  0011EA  C004  FFFB         	movff	??_chkisr+1,pclatu
  9156  0011EE  C003  FFFA         	movff	??_chkisr,pclath
  9157  0011F2  0011               	retfie		f
  9158  0011F4                     __end_of_chkisr:
  9159                           	opt stack 0
  9160                           pclatu	equ	0xFFB
  9161                           pclath	equ	0xFFA
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           postinc0	equ	0xFEE
  9171                           fsr0h	equ	0xFEA
  9172                           fsr0l	equ	0xFE9
  9173                           wreg	equ	0xFE8
  9174                           postdec1	equ	0xFE5
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function _TIMER1_isr *****************
  9185 ;; Defined at:
  9186 ;;		line 23 in file "Interrupt.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;		None               void
  9193 ;; Registers used:
  9194 ;;		wreg, status,2
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;Total ram usage:        0 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; This function calls:
  9207 ;;		Nothing
  9208 ;; This function is called by:
  9209 ;;		_chkisr
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text57
  9214  0019B6                     __ptext57:
  9215                           	opt stack 0
  9216  0019B6                     _TIMER1_isr:
  9217                           	opt stack 21
  9218                           
  9219                           ;Interrupt.c: 25: Nec_state = 0;
  9220                           
  9221                           ;incstack = 0
  9222  0019B6  0E00               	movlw	0
  9223  0019B8  6E51               	movwf	_Nec_state,c
  9224                           
  9225                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
  9226  0019BA  9CF1               	bcf	intcon2,6,c	;volatile
  9227                           
  9228                           ;Interrupt.c: 27: T1CONbits.TMR1ON = 0;
  9229  0019BC  90CD               	bcf	4045,0,c	;volatile
  9230                           
  9231                           ;Interrupt.c: 28: PIR1bits.TMR1IF = 0;
  9232  0019BE  909E               	bcf	3998,0,c	;volatile
  9233  0019C0  0012               	return		;funcret
  9234  0019C2                     __end_of_TIMER1_isr:
  9235                           	opt stack 0
  9236                           pclatu	equ	0xFFB
  9237                           pclath	equ	0xFFA
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           intcon2	equ	0xFF1
  9246                           postinc0	equ	0xFEE
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           postdec1	equ	0xFE5
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           fsr2h	equ	0xFDA
  9257                           fsr2l	equ	0xFD9
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function _INT0_isr *****************
  9261 ;; Defined at:
  9262 ;;		line 37 in file "Interrupt.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;		None
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;		None
  9267 ;; Return value:  Size  Location     Type
  9268 ;;		None               void
  9269 ;; Registers used:
  9270 ;;		wreg, status,2, status,0, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;Total ram usage:        2 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    1
  9283 ;; This function calls:
  9284 ;;		_force_nec_state0
  9285 ;; This function is called by:
  9286 ;;		_chkisr
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text58
  9291  000780                     __ptext58:
  9292                           	opt stack 0
  9293  000780                     _INT0_isr:
  9294                           	opt stack 20
  9295                           
  9296                           ;Interrupt.c: 39: INTCONbits.INT0IF = 0;
  9297                           
  9298                           ;incstack = 0
  9299  000780  92F2               	bcf	intcon,1,c	;volatile
  9300                           
  9301                           ;Interrupt.c: 40: if (Nec_state != 0)
  9302  000782  5051               	movf	_Nec_state,w,c
  9303  000784  B4D8               	btfsc	status,2,c
  9304  000786  D096               	goto	i2l2345
  9305                           
  9306                           ;Interrupt.c: 41: {
  9307                           ;Interrupt.c: 42: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9308  000788  50CE               	movf	4046,w,c	;volatile
  9309  00078A  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9310  00078E  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9311  000790  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9312  000794  6A01               	clrf	??_INT0_isr,c
  9313  000796  1001               	iorwf	??_INT0_isr,w,c
  9314  000798  6E48               	movwf	_Time_Elapsed,c
  9315  00079A  5002               	movf	??_INT0_isr+1,w,c
  9316  00079C  6E49               	movwf	_Time_Elapsed+1,c
  9317                           
  9318                           ;Interrupt.c: 43: TMR1H = 0;
  9319  00079E  0E00               	movlw	0
  9320  0007A0  6ECF               	movwf	4047,c	;volatile
  9321                           
  9322                           ;Interrupt.c: 44: TMR1L = 0;
  9323  0007A2  0E00               	movlw	0
  9324  0007A4  6ECE               	movwf	4046,c	;volatile
  9325                           
  9326                           ;Interrupt.c: 45: }
  9327                           ;Interrupt.c: 47: switch(Nec_state)
  9328  0007A6  D086               	goto	i2l2345
  9329  0007A8                     i2l2273:
  9330                           
  9331                           ;Interrupt.c: 50: {
  9332                           ;Interrupt.c: 52: TMR1H = 0;
  9333  0007A8  0E00               	movlw	0
  9334  0007AA  6ECF               	movwf	4047,c	;volatile
  9335                           
  9336                           ;Interrupt.c: 53: TMR1L = 0;
  9337  0007AC  0E00               	movlw	0
  9338  0007AE  6ECE               	movwf	4046,c	;volatile
  9339                           
  9340                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
  9341  0007B0  909E               	bcf	3998,0,c	;volatile
  9342                           
  9343                           ;Interrupt.c: 55: T1CON= 0x90;
  9344  0007B2  0E90               	movlw	144
  9345  0007B4  6ECD               	movwf	4045,c	;volatile
  9346                           
  9347                           ;Interrupt.c: 56: T1CONbits.TMR1ON = 1;
  9348  0007B6  80CD               	bsf	4045,0,c	;volatile
  9349                           
  9350                           ;Interrupt.c: 57: bit_count = 0;
  9351  0007B8  0E00               	movlw	0
  9352  0007BA  6E58               	movwf	_bit_count,c
  9353                           
  9354                           ;Interrupt.c: 58: Nec_code = 0;
  9355  0007BC  0E00               	movlw	0
  9356  0007BE  6E44               	movwf	_Nec_code,c
  9357  0007C0  0E00               	movlw	0
  9358  0007C2  6E45               	movwf	_Nec_code+1,c
  9359  0007C4  0E00               	movlw	0
  9360  0007C6  6E46               	movwf	_Nec_code+2,c
  9361  0007C8  0E00               	movlw	0
  9362  0007CA  6E47               	movwf	_Nec_code+3,c
  9363                           
  9364                           ;Interrupt.c: 59: Nec_state = 1;
  9365  0007CC  0E01               	movlw	1
  9366  0007CE  6E51               	movwf	_Nec_state,c
  9367  0007D0  D06F               	goto	i2l2339
  9368                           
  9369                           ;Interrupt.c: 61: return;
  9370                           
  9371                           ;Interrupt.c: 60: INTCON2bits.INTEDG0 = 1;
  9372  0007D2  D081               	goto	i2l564
  9373  0007D4                     i2l2283:
  9374                           
  9375                           ;Interrupt.c: 65: {
  9376                           ;Interrupt.c: 66: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9377  0007D4  0E35               	movlw	53
  9378  0007D6  5C48               	subwf	_Time_Elapsed,w,c
  9379  0007D8  0E21               	movlw	33
  9380  0007DA  5849               	subwfb	_Time_Elapsed+1,w,c
  9381  0007DC  A0D8               	btfss	status,0,c
  9382  0007DE  D009               	goto	i2l2289
  9383  0007E0  0E1C               	movlw	28
  9384  0007E2  5C48               	subwf	_Time_Elapsed,w,c
  9385  0007E4  0E25               	movlw	37
  9386  0007E6  5849               	subwfb	_Time_Elapsed+1,w,c
  9387  0007E8  B0D8               	btfsc	status,0,c
  9388  0007EA  D003               	goto	i2l2289
  9389                           
  9390                           ;Interrupt.c: 67: {
  9391                           ;Interrupt.c: 68: Nec_state = 2;
  9392  0007EC  0E02               	movlw	2
  9393  0007EE  6E51               	movwf	_Nec_state,c
  9394                           
  9395                           ;Interrupt.c: 69: }
  9396  0007F0  D02A               	goto	i2l2315
  9397  0007F2                     i2l2289:
  9398                           
  9399                           ;Interrupt.c: 70: else
  9400                           ;Interrupt.c: 71: {
  9401                           ;Interrupt.c: 72: force_nec_state0();
  9402  0007F2  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9403  0007F6  D027               	goto	i2l2315
  9404  0007F8  D026               	goto	i2l2315
  9405                           
  9406                           ;Interrupt.c: 75: return;
  9407                           
  9408                           ;Interrupt.c: 73: }
  9409                           ;Interrupt.c: 74: INTCON2bits.INTEDG0 = 0;
  9410  0007FA  D06D               	goto	i2l564
  9411  0007FC                     i2l2295:
  9412                           
  9413                           ;Interrupt.c: 79: {
  9414                           ;Interrupt.c: 80: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  9415  0007FC  0EA1               	movlw	161
  9416  0007FE  5C48               	subwf	_Time_Elapsed,w,c
  9417  000800  0E0F               	movlw	15
  9418  000802  5849               	subwfb	_Time_Elapsed+1,w,c
  9419  000804  A0D8               	btfss	status,0,c
  9420  000806  D009               	goto	i2l2301
  9421  000808  0E88               	movlw	136
  9422  00080A  5C48               	subwf	_Time_Elapsed,w,c
  9423  00080C  0E13               	movlw	19
  9424  00080E  5849               	subwfb	_Time_Elapsed+1,w,c
  9425  000810  B0D8               	btfsc	status,0,c
  9426  000812  D003               	goto	i2l2301
  9427  000814                     
  9428                           ;Interrupt.c: 81: {
  9429                           ;Interrupt.c: 82: Nec_state = 3;
  9430  000814  0E03               	movlw	3
  9431  000816  6E51               	movwf	_Nec_state,c
  9432                           
  9433                           ;Interrupt.c: 83: }
  9434  000818  D04B               	goto	i2l2339
  9435  00081A                     i2l2301:
  9436                           
  9437                           ;Interrupt.c: 84: else
  9438                           ;Interrupt.c: 85: {
  9439                           ;Interrupt.c: 86: force_nec_state0();
  9440  00081A  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9441  00081E  D048               	goto	i2l2339
  9442  000820  D047               	goto	i2l2339
  9443                           
  9444                           ;Interrupt.c: 89: return;
  9445                           
  9446                           ;Interrupt.c: 87: }
  9447                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 1;
  9448  000822  D059               	goto	i2l564
  9449  000824                     i2l2307:
  9450                           
  9451                           ;Interrupt.c: 93: {
  9452                           ;Interrupt.c: 94: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  9453  000824  0E91               	movlw	145
  9454  000826  5C48               	subwf	_Time_Elapsed,w,c
  9455  000828  0E01               	movlw	1
  9456  00082A  5849               	subwfb	_Time_Elapsed+1,w,c
  9457  00082C  A0D8               	btfss	status,0,c
  9458  00082E  D008               	goto	i2l2313
  9459  000830  0EBC               	movlw	188
  9460  000832  5C48               	subwf	_Time_Elapsed,w,c
  9461  000834  0E02               	movlw	2
  9462  000836  5849               	subwfb	_Time_Elapsed+1,w,c
  9463  000838  B0D8               	btfsc	status,0,c
  9464  00083A  D002               	goto	i2l2313
  9465                           
  9466                           ;Interrupt.c: 95: {
  9467                           ;Interrupt.c: 96: Nec_state = 4;
  9468  00083C  0E04               	movlw	4
  9469  00083E  D7D7               	goto	L2
  9470  000840                     i2l2313:
  9471                           
  9472                           ;Interrupt.c: 98: else
  9473                           ;Interrupt.c: 99: {
  9474                           ;Interrupt.c: 100: force_nec_state0();
  9475  000840  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9476  000844  D000               	goto	i2l2315
  9477  000846                     i2l2315:
  9478                           
  9479                           ;Interrupt.c: 101: }
  9480                           ;Interrupt.c: 102: INTCON2bits.INTEDG0 = 0;
  9481  000846  9CF1               	bcf	intcon2,6,c	;volatile
  9482                           
  9483                           ;Interrupt.c: 103: return;
  9484  000848  D046               	goto	i2l564
  9485  00084A                     i2l2319:
  9486                           
  9487                           ;Interrupt.c: 107: {
  9488                           ;Interrupt.c: 108: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9489  00084A  0E91               	movlw	145
  9490  00084C  5C48               	subwf	_Time_Elapsed,w,c
  9491  00084E  0E01               	movlw	1
  9492  000850  5849               	subwfb	_Time_Elapsed+1,w,c
  9493  000852  A0D8               	btfss	status,0,c
  9494  000854  D02A               	goto	i2l2337
  9495  000856  0E08               	movlw	8
  9496  000858  5C48               	subwf	_Time_Elapsed,w,c
  9497  00085A  0E07               	movlw	7
  9498  00085C  5849               	subwfb	_Time_Elapsed+1,w,c
  9499  00085E  B0D8               	btfsc	status,0,c
  9500  000860  D024               	goto	i2l2337
  9501                           
  9502                           ;Interrupt.c: 109: {
  9503                           ;Interrupt.c: 110: Nec_code = Nec_code << 1;
  9504  000862  90D8               	bcf	status,0,c
  9505  000864  3444               	rlcf	_Nec_code,w,c
  9506  000866  6E44               	movwf	_Nec_code,c
  9507  000868  3445               	rlcf	_Nec_code+1,w,c
  9508  00086A  6E45               	movwf	_Nec_code+1,c
  9509  00086C  3446               	rlcf	_Nec_code+2,w,c
  9510  00086E  6E46               	movwf	_Nec_code+2,c
  9511  000870  3447               	rlcf	_Nec_code+3,w,c
  9512  000872  6E47               	movwf	_Nec_code+3,c
  9513                           
  9514                           ;Interrupt.c: 111: if(Time_Elapsed > 1000)
  9515  000874  0EE9               	movlw	233
  9516  000876  5C48               	subwf	_Time_Elapsed,w,c
  9517  000878  0E03               	movlw	3
  9518  00087A  5849               	subwfb	_Time_Elapsed+1,w,c
  9519  00087C  A0D8               	btfss	status,0,c
  9520  00087E  D007               	goto	i2l2327
  9521                           
  9522                           ;Interrupt.c: 112: {
  9523                           ;Interrupt.c: 113: Nec_code++;
  9524  000880  0E01               	movlw	1
  9525  000882  2644               	addwf	_Nec_code,f,c
  9526  000884  0E00               	movlw	0
  9527  000886  2245               	addwfc	_Nec_code+1,f,c
  9528  000888  2246               	addwfc	_Nec_code+2,f,c
  9529  00088A  2247               	addwfc	_Nec_code+3,f,c
  9530  00088C  D000               	goto	i2l2327
  9531  00088E                     i2l2327:
  9532                           
  9533                           ;Interrupt.c: 114: }
  9534                           ;Interrupt.c: 115: bit_count++;
  9535  00088E  2A58               	incf	_bit_count,f,c
  9536                           
  9537                           ;Interrupt.c: 116: if(bit_count > 31)
  9538  000890  0E1F               	movlw	31
  9539  000892  6458               	cpfsgt	_bit_count,c
  9540  000894  D7BF               	goto	L3
  9541                           
  9542                           ;Interrupt.c: 117: {
  9543                           ;Interrupt.c: 118: nec_ok = 1;
  9544  000896  0E00               	movlw	0
  9545  000898  6E4D               	movwf	_nec_ok+1,c
  9546  00089A  0E01               	movlw	1
  9547  00089C  6E4C               	movwf	_nec_ok,c
  9548                           
  9549                           ;Interrupt.c: 119: Nec_code1 = (char) ((Nec_code >> 8));
  9550  00089E  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9551                           
  9552                           ;Interrupt.c: 120: INT0IE = 0;
  9553  0008A2  98F2               	bcf	intcon,4,c	;volatile
  9554                           
  9555                           ;Interrupt.c: 121: Nec_state = 0;
  9556  0008A4  0E00               	movlw	0
  9557  0008A6  6E51               	movwf	_Nec_state,c
  9558  0008A8  D7B5               	goto	L3
  9559  0008AA                     i2l2337:
  9560                           
  9561                           ;Interrupt.c: 125: else
  9562                           ;Interrupt.c: 126: {
  9563                           ;Interrupt.c: 127: force_nec_state0();
  9564  0008AA  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9565  0008AE  D000               	goto	i2l2339
  9566  0008B0                     i2l2339:
  9567                           
  9568                           ;Interrupt.c: 128: }
  9569                           ;Interrupt.c: 129: INTCON2bits.INTEDG0 = 1;
  9570  0008B0  8CF1               	bsf	intcon2,6,c	;volatile
  9571                           
  9572                           ;Interrupt.c: 131: }
  9573                           ;Interrupt.c: 132: }
  9574                           
  9575                           ;Interrupt.c: 130: return;
  9576  0008B2  D011               	goto	i2l564
  9577  0008B4                     i2l2345:
  9578  0008B4  5051               	movf	_Nec_state,w,c
  9579                           
  9580                           ; Switch size 1, requested type "space"
  9581                           ; Number of cases is 5, Range of values is 0 to 4
  9582                           ; switch strategies available:
  9583                           ; Name         Instructions Cycles
  9584                           ; simple_byte           16     9 (average)
  9585                           ;	Chosen strategy is simple_byte
  9586  0008B6  0A00               	xorlw	0	; case 0
  9587  0008B8  B4D8               	btfsc	status,2,c
  9588  0008BA  D776               	goto	i2l2273
  9589  0008BC  0A01               	xorlw	1	; case 1
  9590  0008BE  B4D8               	btfsc	status,2,c
  9591  0008C0  D789               	goto	i2l2283
  9592  0008C2  0A03               	xorlw	3	; case 2
  9593  0008C4  B4D8               	btfsc	status,2,c
  9594  0008C6  D79A               	goto	i2l2295
  9595  0008C8  0A01               	xorlw	1	; case 3
  9596  0008CA  B4D8               	btfsc	status,2,c
  9597  0008CC  D7AB               	goto	i2l2307
  9598  0008CE  0A07               	xorlw	7	; case 4
  9599  0008D0  B4D8               	btfsc	status,2,c
  9600  0008D2  D7BB               	goto	i2l2319
  9601  0008D4  D000               	goto	i2l564
  9602  0008D6                     i2l564:
  9603  0008D6  0012               	return		;funcret
  9604  0008D8                     __end_of_INT0_isr:
  9605                           	opt stack 0
  9606                           pclatu	equ	0xFFB
  9607                           pclath	equ	0xFFA
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           intcon2	equ	0xFF1
  9616                           postinc0	equ	0xFEE
  9617                           fsr0h	equ	0xFEA
  9618                           fsr0l	equ	0xFE9
  9619                           wreg	equ	0xFE8
  9620                           postdec1	equ	0xFE5
  9621                           fsr1h	equ	0xFE2
  9622                           fsr1l	equ	0xFE1
  9623                           indf2	equ	0xFDF
  9624                           postinc2	equ	0xFDE
  9625                           postdec2	equ	0xFDD
  9626                           fsr2h	equ	0xFDA
  9627                           fsr2l	equ	0xFD9
  9628                           status	equ	0xFD8
  9629                           
  9630 ;; *************** function _force_nec_state0 *****************
  9631 ;; Defined at:
  9632 ;;		line 31 in file "Interrupt.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;		None               void
  9639 ;; Registers used:
  9640 ;;		wreg, status,2
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; This function calls:
  9653 ;;		Nothing
  9654 ;; This function is called by:
  9655 ;;		_INT0_isr
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text59
  9660  0019F8                     __ptext59:
  9661                           	opt stack 0
  9662  0019F8                     _force_nec_state0:
  9663                           	opt stack 20
  9664                           
  9665                           ;Interrupt.c: 33: Nec_state=0;
  9666                           
  9667                           ;incstack = 0
  9668  0019F8  0E00               	movlw	0
  9669  0019FA  6E51               	movwf	_Nec_state,c
  9670                           
  9671                           ;Interrupt.c: 34: T1CONbits.TMR1ON = 0;
  9672  0019FC  90CD               	bcf	4045,0,c	;volatile
  9673  0019FE  0012               	return		;funcret
  9674  001A00                     __end_of_force_nec_state0:
  9675                           	opt stack 0
  9676                           pclatu	equ	0xFFB
  9677                           pclath	equ	0xFFA
  9678                           tblptru	equ	0xFF8
  9679                           tblptrh	equ	0xFF7
  9680                           tblptrl	equ	0xFF6
  9681                           tablat	equ	0xFF5
  9682                           prodh	equ	0xFF4
  9683                           prodl	equ	0xFF3
  9684                           intcon	equ	0xFF2
  9685                           intcon2	equ	0xFF1
  9686                           postinc0	equ	0xFEE
  9687                           fsr0h	equ	0xFEA
  9688                           fsr0l	equ	0xFE9
  9689                           wreg	equ	0xFE8
  9690                           postdec1	equ	0xFE5
  9691                           fsr1h	equ	0xFE2
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           pclatu	equ	0xFFB
  9700                           pclath	equ	0xFFA
  9701                           tblptru	equ	0xFF8
  9702                           tblptrh	equ	0xFF7
  9703                           tblptrl	equ	0xFF6
  9704                           tablat	equ	0xFF5
  9705                           prodh	equ	0xFF4
  9706                           prodl	equ	0xFF3
  9707                           intcon	equ	0xFF2
  9708                           intcon2	equ	0xFF1
  9709                           postinc0	equ	0xFEE
  9710                           fsr0h	equ	0xFEA
  9711                           fsr0l	equ	0xFE9
  9712                           wreg	equ	0xFE8
  9713                           postdec1	equ	0xFE5
  9714                           fsr1h	equ	0xFE2
  9715                           fsr1l	equ	0xFE1
  9716                           indf2	equ	0xFDF
  9717                           postinc2	equ	0xFDE
  9718                           postdec2	equ	0xFDD
  9719                           fsr2h	equ	0xFDA
  9720                           fsr2l	equ	0xFD9
  9721                           status	equ	0xFD8
  9722                           
  9723                           	psect	rparam
  9724  0000                     pclatu	equ	0xFFB
  9725                           pclath	equ	0xFFA
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon2	equ	0xFF1
  9734                           postinc0	equ	0xFEE
  9735                           fsr0h	equ	0xFEA
  9736                           fsr0l	equ	0xFE9
  9737                           wreg	equ	0xFE8
  9738                           postdec1	equ	0xFE5
  9739                           fsr1h	equ	0xFE2
  9740                           fsr1l	equ	0xFE1
  9741                           indf2	equ	0xFDF
  9742                           postinc2	equ	0xFDE
  9743                           postdec2	equ	0xFDD
  9744                           fsr2h	equ	0xFDA
  9745                           fsr2l	equ	0xFD9
  9746                           status	equ	0xFD8


Data Sizes:
    Strings     185
    Constant    493
    Data        212
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     110
    BANK0           128      0     126
    BANK1           256     13     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[7]), STR_4(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 63
		 -> STR_3(CODE[63]), STR_2(CODE[44]), STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    None.

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   57555
                                             66 COMRAM     1     1      0
                                              7 BANK1      6     6      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                  _Initialize_Screen
                       _Wait_One_Sec
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                     _init_INTERRUPT
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3651
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   22023
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12786
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_INTERRUPT
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      80       7       50.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16C      34        0.0%
DATA                 0      0     16C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 01 12:44:30 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 00AA                                 _D2 00BF  
                               _D3 00D4                                 l35 14F4  
                               l45 1908                                 l95 10F8  
                               l89 17BE                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l111 0A2C  
                              l120 0982                                l113 0906  
                              l151 0F28                                l152 0F4A  
                              l148 0F4C                                l149 0EB8  
                              l422 1626                                l159 0694  
                              l425 16F2                                l505 175C  
                              l177 0A9C                                l356 19A0  
                              l614 011C                                l367 1834  
                              l651 0374                                l680 12B6  
                              l681 12C0                                l682 12C2  
                              l675 129A                                l684 12DC  
                              l679 12B4                                l687 1810  
                              l880 0FE2                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 19E0  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 17C0  
                     __CFG_WDT$OFF 000000                               l1210 13FA  
                             l1220 158C                     drawFastVLine@h 0019  
                             l1118 1856                               l1249 16A4  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l4201 1702                               l4211 1714  
                             l5011 024C                               l5003 022A  
                             l4141 10EE                               l4125 1082  
                             l5013 0254                               l5005 0234  
                             l5031 02EC                               l5023 028C  
                             l4129 10BA                               l5041 034C  
                             l5017 026C                               l4139 10E0  
                             l4331 08F4                               l5019 0274  
                             l5027 02A0                               l5043 0358  
                             l4341 0912                               l4413 0F2C  
                             l5029 02A8                               l5037 0332  
                             l4335 0902                               l4327 08E8  
                             l4423 0F46                               l5071 0F8C  
                             l5039 0344                               l4193 16EA  
                             l4441 1292                               l4433 1280  
                             l4177 17A0                               l4185 15A0  
                             l4345 0942                               l4337 090A  
                             l4417 0F36                               l4409 0F1E  
                             l5073 0F96                               l5065 0F76  
                             l4347 0976                               l4531 0CF2  
                             l5091 0FD8                               l5083 0FBC  
                             l5075 0F9E                               l5059 0F64  
                             l4453 12AC                               l4445 129E  
                             l4437 128A                               l4189 15BC  
                             l4365 09F8                               l4357 09A4  
                             l4373 0A28                               l4349 097A  
                             l4381 1678                               l4199 16FC  
                             l4367 0A20                               l4359 09CC  
                             l4543 0D62                               l4535 0D10  
                             l4519 0CA2                               l4391 0E82  
                             l4631 1772                               l5087 0FC8  
                             l4703 13EE                               l4711 1558  
                             l4641 15F2                               l4545 0D6A  
                             l4713 1562                               l5361 047A  
                             l4379 1672                               l4803 182E  
                             l4715 156A                               l5371 049A  
                             l5339 0388                               l4661 1622  
                             l4637 15EA                               l4397 0EF0  
                             l4629 1768                               l4573 0AFE  
                             l4557 0A82     I2C_Write_Cmd_Write_Data@Device 0015  
                             l4647 1600                               l4655 1610  
                             l4743 067A                               l4719 1580  
                             l5383 04DE                               l5375 04B4  
                             l4649 1608                               l4577 0B50  
                             l4681 184E                               l4921 0036  
                             l4659 161C                               l4771 076A  
                             l4691 13BE                               l4923 0044  
                             l5387 04E8                               l4693 13C8  
                             l4941 00E6                               l4933 0082  
                             l4917 0026                               l4695 13D0  
                             l4927 004E                               l4961 0164  
                             l4945 00EE                               l4929 0064  
                             l4971 0198                               l4963 0168  
                             l4981 01AE                               l4957 014A  
                             l4799 181A                               l4975 019E  
                             l4967 0174                               l4991 01D8  
                             l4985 01D2                               l4977 01A2  
                             l4993 01EA                               l4999 0206  
                             STR_1 FFB1                               STR_2 FF85  
                             STR_3 FF46                               STR_4 FFD3  
                             STR_5 FFF8                               STR_6 FFE7  
                             u3120 0CCC                               u2690 10B0  
                             u2950 0EB0                               u2880 09DA  
                             u2960 0EE6                               u3927 19AE  
                             _RBPU 007F8F                               _TRMT 007D61  
              ??_Deactivate_Buzzer 0011                               _main 0376  
                             _font FD59                               _hour 005D  
                 __end_of_I2C_Init 19CC                   __end_of_I2C_Read 1628  
                             _year 006C                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006E  
                 __end_of_I2C_Stop 1946                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 1668  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 19D6  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 08D8          __end_of_Deactivate_Buzzer 19E8  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 0FE4  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1404                    __end_of___lwmod 1596  
                            i2l552 11BA                              i2l564 08D6  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR1H 000FCF  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTD 000F83  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0B66  
                            _Rcmd3 0D80                         _i2cHighSda 19F0  
                       _i2cHighScl 19AA                    __end_of_dpowers FF3E  
                            _color 0080                              _font2 FE58  
            fillCircleHelper@ddF_x 0031              fillCircleHelper@ddF_y 0033  
                            _found 005C                    __end_of_isdigit 1858  
                            _month 0060              fillCircleHelper@delta 002B  
                            _putch 199C              fillCircleHelper@color 002D  
                            main@i 017E                  __end_of_I2C_Start 1958  
                __end_of_I2C_Write 1722                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 11F4  
                     __end_of_main 05D2                       __end_of_font FE58  
                 __end_of_Rcmd2red 16E4                             ??_main 0043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1934          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             _INT0IE 007F94  
                           i2l2301 081A                             i2l2313 0840  
                           i2l2315 0846                             i2l2307 0824  
                           i2l2327 088E                             i2l2319 084A  
                           i2l2337 08AA                             i2l2273 07A8  
                           i2l2345 08B4                             i2l2339 08B0  
                           i2l2283 07D4                             i2l2295 07FC  
                           i2l2289 07F2                          ??_Do_Init 0017  
                           i2l2739 11B0                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 19F8                   __end_of_delay_ms 14FC  
                           _i2cAck 1958                         _TempSecond 0052  
                 __end_of_fillRect 15E0                   __end_of_drawChar 0A2E  
               __size_of_OpenUSART 0070                      main@tempC_898 017D  
                    main@tempF_899 017C           __size_of_Activate_Buzzer 0012  
                           ___wmul 17EA                          ??___awdiv 001B  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0D80  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00E9                          ??___lwmod 001C  
                           _buffer 0154                             _nec_ok 004C  
                           clear_0 11FA                             clear_1 1206  
                 ___awdiv@quotient 001D                             _minute 005F  
                           _second 0062            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 175E  
                           _strlen 1668                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD58                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1878                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 190E                         __accesstop 0080  
          __end_of__initialization 1264                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                      __end_of_Rcmd1 0C76  
                    __end_of_Rcmd3 0E72                     __pcstackCOMRAM 0001  
                     __pidataBANK0 10FA                       __pidataBANK1 1404  
                    __end_of_font2 FF34                  __end_of_i2cLowSda 19E0  
                __end_of_i2cLowScl 19F0                      __end_of_putch 19AA  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 12DE  
                          ??_putch 0011                         __pbssBANK1 0154  
                 _setup_alarm_hour 0063                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 1458  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1896  
                       _drawCircle 05D2                     _init_INTERRUPT 18CC  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0F4E  
                        ?_drawtext 0039                  _DS3231_Setup_Time 12DE  
                          _Do_Init 1628           _I2C_Write_Cmd_Write_Data 1858  
       __end_of_I2C_Write_Cmd_Only 18CC                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 19CC                 __end_of_TIMER1_isr 19C2  
               ?_DS3231_Setup_Time 0001                      _write_command 198C  
                        _I2C_Start 1946                          _I2C_Write 16E4  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1896  
                __end_of_drawPixel 17C0                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 10FA                   _fillCircleHelper 0A2E  
                          ___awdiv 0F4E                    __size_of___wmul 0028  
                          ___lwdiv 13A8                            ___lwmod 154A  
                  __size_of_chkisr 11EC                          ?_spiwrite 0001  
                          __pcinit 11F4                            __ramtop 1000  
                          __ptext0 0376                            __ptext1 001C  
                          __ptext2 199C                            __ptext3 1836  
                          __ptext4 154A                            __ptext5 13A8  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 1458  
                          __ptext7 0A2E                            __ptext8 05D2  
                          __ptext9 0F4E                    __size_of_printf 035A  
                __end_of_init_UART 1922             __end_of_init_INTERRUPT 18E4  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF46           __end_of_force_nec_state0 1A00  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF34                            _isdigit 1836  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 18FA                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1344                         ??_drawChar 0035  
                        _LCD_Reset 1922                      _setAddrWindow 14FC  
                   __pintcode_body 1178                      Wait_One_Sec@k 0011  
                       delay_ms@ms 0017               end_of_initialization 1264  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD58          __size_of_DS3231_Read_Time 0064  
                          int_func 1178            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 0179  
                 drawtext@cursor_y 0178                          _PORTBbits 000F81  
                        _PORTCbits 000F82                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                        ?_fillScreen 0024  
                       _setup_hour 0067                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 0174  
                       drawPixel@x 001B                         drawPixel@y 0018  
                      _DS1621_Init 1878                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0158  
                   __end_of_i2cAck 196A           DS1621_Read_Temp@Data_Ret 0017  
               __end_of_i2cHighSda 19F8                 __end_of_i2cHighScl 19B6  
                   __end_of___wmul 1812                      delay_ms@count 001B  
                       _write_data 197C                      __pidataCOMRAM 1A00  
                   __end_of_chkisr 11F4           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 18E4                         drawtext@bg 003E  
                        _Nec_code1 0050                          _i2cLowSda 19D6  
                        _i2cLowScl 19E8               __end_of_Wait_One_Sec 1836  
                   __end_of_printf 0376                     __end_of_strcpy 1790  
                   __end_of_strlen 16A6                          _Nec_state 0051  
              start_initialization 11F4         __size_of_DS3231_Setup_Time 0066  
                  ??_write_command 0013                          _OpenUSART 126E  
              __size_of_fillCircle 0052                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 196A                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 1722                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK1 0173                        ??_LCD_Reset 001D  
                     _isdigit$1907 0012           __end_of_fillCircleHelper 0B66  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1344  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 17EA                      __pmediumconst FD58  
                         ?___awdiv 0017                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 18B2  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 1790  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 19C2                           _I2C_Read 15E0  
                         _I2C_Stop 1934                  _Initialize_Screen 0FE4  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 190E                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF3E  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 197C  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0780               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 0024  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 1072                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                          main@tempC 017B  
                        main@tempF 017A                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 1220  
                        copy_data1 1240                          drawtext@i 0176  
           __size_of_drawFastVLine 0088                          drawtext@x 0173  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 16A6  
                 __size_of_Do_Init 0040                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 14AA                   __size_of_i2cNack 000A  
                     _Wait_One_Sec 1812                           __Hrparam 0000  
               __end_of_fillScreen 18B2                           __Lrparam 0000  
               __end_of_drawCircle 0780                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 14AA                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 1812  
                         __ptext11 0FE4                           __ptext20 1790  
                         __ptext12 175E                           __ptext21 14FC  
                         __ptext13 1896                           __ptext30 14AA  
                         __ptext22 17C0                           __ptext14 0E72  
                         __ptext31 17EA                           __ptext23 0D80  
                         __ptext15 0C76                           __ptext40 19E0  
                         __ptext32 1628                           __ptext24 16A6  
                         __ptext16 1668                           __ptext41 12DE  
                         __ptext33 190E                           __ptext25 0B66  
                         __ptext17 08D8                           __ptext50 18E4  
                         __ptext42 1344                           __ptext34 126E  
                         __ptext26 197C                           __ptext18 1596  
                         __ptext51 19D6                           __ptext43 1722  
                         __ptext35 18CC                           __ptext27 198C  
                         __ptext19 1072                           __ptext52 19E8  
                         __ptext44 16E4                           __ptext36 19C2  
                         __ptext28 18FA                           __ptext53 19F0  
                         __ptext45 1934                           __ptext37 1878  
                         __ptext29 1922                           __ptext54 19AA  
                         __ptext46 1946                           __ptext38 1858  
                         __ptext55 196A                           __ptext47 15E0  
                         __ptext39 18B2                           __ptext48 19CC  
                         __ptext57 19B6                           __ptext49 1958  
                         __ptext58 0780                           __ptext59 19F8  
                         _fillRect 1596                           _drawChar 08D8  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 0C76                         strcpy@from 0013  
                    _fillRectangle 0E72           __end_of_DS1621_Read_Temp 175E  
                 ?_Activate_Buzzer 0001                      __size_of_main 025C  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1072                          printf@idx 002F  
                         _spiwrite 18FA                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 13A8                 fillCircleHelper@x0 0023  
               fillCircleHelper@y0 0025         __size_of_Initialize_Screen 008E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F                   ___lwmod@dividend 0018  
            __end_of_write_command 199C                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 19B6  
                    fillRect@color 0026                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A                        fillCircle@r 003F  
            __end_of_setAddrWindow 154A                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0069  
               __end_of_write_data 198C          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
