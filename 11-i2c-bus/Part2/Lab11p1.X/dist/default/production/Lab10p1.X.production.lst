

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 03 19:49:39 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataCOMRAM
    61  0016AA                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _array1
    65  0016AA  A2                 	db	162
    66  0016AB  62                 	db	98
    67  0016AC  E2                 	db	226
    68  0016AD  22                 	db	34
    69  0016AE  02                 	db	2
    70  0016AF  C2                 	db	194
    71  0016B0  E0                 	db	224
    72  0016B1  A8                 	db	168
    73  0016B2  90                 	db	144
    74  0016B3  68                 	db	104
    75  0016B4  98                 	db	152
    76  0016B5  B0                 	db	176
    77  0016B6  30                 	db	48
    78  0016B7  18                 	db	24
    79  0016B8  7A                 	db	122
    80  0016B9  10                 	db	16
    81  0016BA  38                 	db	56
    82  0016BB  5A                 	db	90
    83  0016BC  42                 	db	66
    84  0016BD  4A                 	db	74
    85  0016BE  52                 	db	82
    86                           
    87                           ;initializer for _wrap
    88  0016BF  01                 	db	1
    89                           
    90                           	psect	idataBANK0
    91  00131E                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _color
    95  00131E  F800               	dw	63488
    96  001320  F800               	dw	63488
    97  001322  F800               	dw	63488
    98  001324  001F               	dw	31
    99  001326  001F               	dw	31
   100  001328  07E0               	dw	2016
   101  00132A  F81F               	dw	63519
   102  00132C  F81F               	dw	63519
   103  00132E  F81F               	dw	63519
   104  001330  FFFF               	dw	65535
   105  001332  FFFF               	dw	65535
   106  001334  FFFF               	dw	65535
   107  001336  FFFF               	dw	65535
   108  001338  FFFF               	dw	65535
   109  00133A  FFFF               	dw	65535
   110  00133C  FFFF               	dw	65535
   111  00133E  FFFF               	dw	65535
   112  001340  FFFF               	dw	65535
   113  001342  FFFF               	dw	65535
   114  001344  FFFF               	dw	65535
   115  001346  FFFF               	dw	65535
   116                           
   117                           ;initializer for _D1
   118  001348  04                 	db	4
   119  001349  04                 	db	4
   120  00134A  04                 	db	4
   121  00134B  00                 	db	0
   122  00134C  00                 	db	0
   123  00134D  00                 	db	0
   124  00134E  00                 	db	0
   125  00134F  00                 	db	0
   126  001350  00                 	db	0
   127  001351  00                 	db	0
   128  001352  00                 	db	0
   129  001353  00                 	db	0
   130  001354  00                 	db	0
   131  001355  00                 	db	0
   132  001356  00                 	db	0
   133  001357  00                 	db	0
   134  001358  00                 	db	0
   135  001359  00                 	db	0
   136  00135A  00                 	db	0
   137  00135B  00                 	db	0
   138  00135C  00                 	db	0
   139                           
   140                           ;initializer for _D2
   141  00135D  00                 	db	0
   142  00135E  00                 	db	0
   143  00135F  00                 	db	0
   144  001360  06                 	db	6
   145  001361  06                 	db	6
   146  001362  02                 	db	2
   147  001363  05                 	db	5
   148  001364  05                 	db	5
   149  001365  05                 	db	5
   150  001366  00                 	db	0
   151  001367  00                 	db	0
   152  001368  00                 	db	0
   153  001369  00                 	db	0
   154  00136A  00                 	db	0
   155  00136B  00                 	db	0
   156  00136C  00                 	db	0
   157  00136D  00                 	db	0
   158  00136E  00                 	db	0
   159  00136F  00                 	db	0
   160  001370  00                 	db	0
   161  001371  00                 	db	0
   162                           
   163                           ;initializer for _D3
   164  001372  00                 	db	0
   165  001373  00                 	db	0
   166  001374  00                 	db	0
   167  001375  00                 	db	0
   168  001376  00                 	db	0
   169  001377  00                 	db	0
   170  001378  00                 	db	0
   171  001379  00                 	db	0
   172  00137A  00                 	db	0
   173  00137B  70                 	db	112
   174  00137C  70                 	db	112
   175  00137D  70                 	db	112
   176  00137E  70                 	db	112
   177  00137F  70                 	db	112
   178  001380  70                 	db	112
   179  001381  70                 	db	112
   180  001382  70                 	db	112
   181  001383  70                 	db	112
   182  001384  70                 	db	112
   183  001385  70                 	db	112
   184  001386  70                 	db	112
   185                           
   186                           	psect	idataBANK1
   187  001387                     __pidataBANK1:
   188                           	opt stack 0
   189                           
   190                           ;initializer for _txt1
   191  001387  43                 	db	67
   192  001388  48                 	db	72
   193  001389  2D                 	db	45
   194  00138A  00                 	db	0
   195  00138B  43                 	db	67
   196  00138C  48                 	db	72
   197  00138D  20                 	db	32
   198  00138E  00                 	db	0
   199  00138F  43                 	db	67
   200  001390  48                 	db	72
   201  001391  2B                 	db	43
   202  001392  00                 	db	0
   203  001393  7C                 	db	124
   204  001394  3C                 	db	60
   205  001395  3C                 	db	60
   206  001396  00                 	db	0
   207  001397  3E                 	db	62
   208  001398  3E                 	db	62
   209  001399  7C                 	db	124
   210  00139A  00                 	db	0
   211  00139B  3E                 	db	62
   212  00139C  7C                 	db	124
   213  00139D  7C                 	db	124
   214  00139E  00                 	db	0
   215  00139F  20                 	db	32
   216  0013A0  2D                 	db	45
   217  0013A1  20                 	db	32
   218  0013A2  00                 	db	0
   219  0013A3  20                 	db	32
   220  0013A4  2B                 	db	43
   221  0013A5  20                 	db	32
   222  0013A6  00                 	db	0
   223  0013A7  45                 	db	69
   224  0013A8  51                 	db	81
   225  0013A9  20                 	db	32
   226  0013AA  00                 	db	0
   227  0013AB  20                 	db	32
   228  0013AC  30                 	db	48
   229  0013AD  20                 	db	32
   230  0013AE  00                 	db	0
   231  0013AF  31                 	db	49
   232  0013B0  30                 	db	48
   233  0013B1  30                 	db	48
   234  0013B2  00                 	db	0
   235  0013B3  32                 	db	50
   236  0013B4  30                 	db	48
   237  0013B5  30                 	db	48
   238  0013B6  00                 	db	0
   239  0013B7  20                 	db	32
   240  0013B8  31                 	db	49
   241  0013B9  20                 	db	32
   242  0013BA  00                 	db	0
   243  0013BB  20                 	db	32
   244  0013BC  32                 	db	50
   245  0013BD  20                 	db	32
   246  0013BE  00                 	db	0
   247  0013BF  20                 	db	32
   248  0013C0  33                 	db	51
   249  0013C1  20                 	db	32
   250  0013C2  00                 	db	0
   251  0013C3  20                 	db	32
   252  0013C4  34                 	db	52
   253  0013C5  20                 	db	32
   254  0013C6  00                 	db	0
   255  0013C7  20                 	db	32
   256  0013C8  35                 	db	53
   257  0013C9  20                 	db	32
   258  0013CA  00                 	db	0
   259  0013CB  20                 	db	32
   260  0013CC  36                 	db	54
   261  0013CD  20                 	db	32
   262  0013CE  00                 	db	0
   263  0013CF  20                 	db	32
   264  0013D0  37                 	db	55
   265  0013D1  20                 	db	32
   266  0013D2  00                 	db	0
   267  0013D3  20                 	db	32
   268  0013D4  38                 	db	56
   269  0013D5  20                 	db	32
   270  0013D6  00                 	db	0
   271  0013D7  20                 	db	32
   272  0013D8  39                 	db	57
   273  0013D9  20                 	db	32
   274  0013DA  00                 	db	0
   275                           
   276                           	psect	mediumconst
   277  00FD8A                     __pmediumconst:
   278                           	opt stack 0
   279  00FD8A  00                 	db	0
   280  00FD8B                     _font:
   281                           	opt stack 0
   282  00FD8B  00                 	db	0
   283  00FD8C  00                 	db	0
   284  00FD8D  00                 	db	0
   285  00FD8E  00                 	db	0
   286  00FD8F  00                 	db	0
   287  00FD90  00                 	db	0
   288  00FD91  00                 	db	0
   289  00FD92  5F                 	db	95
   290  00FD93  00                 	db	0
   291  00FD94  00                 	db	0
   292  00FD95  00                 	db	0
   293  00FD96  07                 	db	7
   294  00FD97  00                 	db	0
   295  00FD98  07                 	db	7
   296  00FD99  00                 	db	0
   297  00FD9A  14                 	db	20
   298  00FD9B  7F                 	db	127
   299  00FD9C  14                 	db	20
   300  00FD9D  7F                 	db	127
   301  00FD9E  14                 	db	20
   302  00FD9F  24                 	db	36
   303  00FDA0  2A                 	db	42
   304  00FDA1  7F                 	db	127
   305  00FDA2  2A                 	db	42
   306  00FDA3  12                 	db	18
   307  00FDA4  23                 	db	35
   308  00FDA5  13                 	db	19
   309  00FDA6  08                 	db	8
   310  00FDA7  64                 	db	100
   311  00FDA8  62                 	db	98
   312  00FDA9  36                 	db	54
   313  00FDAA  49                 	db	73
   314  00FDAB  56                 	db	86
   315  00FDAC  20                 	db	32
   316  00FDAD  50                 	db	80
   317  00FDAE  00                 	db	0
   318  00FDAF  08                 	db	8
   319  00FDB0  07                 	db	7
   320  00FDB1  03                 	db	3
   321  00FDB2  00                 	db	0
   322  00FDB3  00                 	db	0
   323  00FDB4  1C                 	db	28
   324  00FDB5  22                 	db	34
   325  00FDB6  41                 	db	65
   326  00FDB7  00                 	db	0
   327  00FDB8  00                 	db	0
   328  00FDB9  41                 	db	65
   329  00FDBA  22                 	db	34
   330  00FDBB  1C                 	db	28
   331  00FDBC  00                 	db	0
   332  00FDBD  2A                 	db	42
   333  00FDBE  1C                 	db	28
   334  00FDBF  7F                 	db	127
   335  00FDC0  1C                 	db	28
   336  00FDC1  2A                 	db	42
   337  00FDC2  08                 	db	8
   338  00FDC3  08                 	db	8
   339  00FDC4  3E                 	db	62
   340  00FDC5  08                 	db	8
   341  00FDC6  08                 	db	8
   342  00FDC7  00                 	db	0
   343  00FDC8  80                 	db	128
   344  00FDC9  70                 	db	112
   345  00FDCA  30                 	db	48
   346  00FDCB  00                 	db	0
   347  00FDCC  08                 	db	8
   348  00FDCD  08                 	db	8
   349  00FDCE  08                 	db	8
   350  00FDCF  08                 	db	8
   351  00FDD0  08                 	db	8
   352  00FDD1  00                 	db	0
   353  00FDD2  00                 	db	0
   354  00FDD3  60                 	db	96
   355  00FDD4  60                 	db	96
   356  00FDD5  00                 	db	0
   357  00FDD6  20                 	db	32
   358  00FDD7  10                 	db	16
   359  00FDD8  08                 	db	8
   360  00FDD9  04                 	db	4
   361  00FDDA  02                 	db	2
   362  00FDDB  3E                 	db	62
   363  00FDDC  51                 	db	81
   364  00FDDD  49                 	db	73
   365  00FDDE  45                 	db	69
   366  00FDDF  3E                 	db	62
   367  00FDE0  00                 	db	0
   368  00FDE1  42                 	db	66
   369  00FDE2  7F                 	db	127
   370  00FDE3  40                 	db	64
   371  00FDE4  00                 	db	0
   372  00FDE5  72                 	db	114
   373  00FDE6  49                 	db	73
   374  00FDE7  49                 	db	73
   375  00FDE8  49                 	db	73
   376  00FDE9  46                 	db	70
   377  00FDEA  21                 	db	33
   378  00FDEB  41                 	db	65
   379  00FDEC  49                 	db	73
   380  00FDED  4D                 	db	77
   381  00FDEE  33                 	db	51
   382  00FDEF  18                 	db	24
   383  00FDF0  14                 	db	20
   384  00FDF1  12                 	db	18
   385  00FDF2  7F                 	db	127
   386  00FDF3  10                 	db	16
   387  00FDF4  27                 	db	39
   388  00FDF5  45                 	db	69
   389  00FDF6  45                 	db	69
   390  00FDF7  45                 	db	69
   391  00FDF8  39                 	db	57
   392  00FDF9  3C                 	db	60
   393  00FDFA  4A                 	db	74
   394  00FDFB  49                 	db	73
   395  00FDFC  49                 	db	73
   396  00FDFD  31                 	db	49
   397  00FDFE  41                 	db	65
   398  00FDFF  21                 	db	33
   399  00FE00  11                 	db	17
   400  00FE01  09                 	db	9
   401  00FE02  07                 	db	7
   402  00FE03  36                 	db	54
   403  00FE04  49                 	db	73
   404  00FE05  49                 	db	73
   405  00FE06  49                 	db	73
   406  00FE07  36                 	db	54
   407  00FE08  46                 	db	70
   408  00FE09  49                 	db	73
   409  00FE0A  49                 	db	73
   410  00FE0B  29                 	db	41
   411  00FE0C  1E                 	db	30
   412  00FE0D  00                 	db	0
   413  00FE0E  00                 	db	0
   414  00FE0F  14                 	db	20
   415  00FE10  00                 	db	0
   416  00FE11  00                 	db	0
   417  00FE12  00                 	db	0
   418  00FE13  40                 	db	64
   419  00FE14  34                 	db	52
   420  00FE15  00                 	db	0
   421  00FE16  00                 	db	0
   422  00FE17  00                 	db	0
   423  00FE18  08                 	db	8
   424  00FE19  14                 	db	20
   425  00FE1A  22                 	db	34
   426  00FE1B  41                 	db	65
   427  00FE1C  14                 	db	20
   428  00FE1D  14                 	db	20
   429  00FE1E  14                 	db	20
   430  00FE1F  14                 	db	20
   431  00FE20  14                 	db	20
   432  00FE21  00                 	db	0
   433  00FE22  41                 	db	65
   434  00FE23  22                 	db	34
   435  00FE24  14                 	db	20
   436  00FE25  08                 	db	8
   437  00FE26  02                 	db	2
   438  00FE27  01                 	db	1
   439  00FE28  59                 	db	89
   440  00FE29  09                 	db	9
   441  00FE2A  06                 	db	6
   442  00FE2B  3E                 	db	62
   443  00FE2C  41                 	db	65
   444  00FE2D  5D                 	db	93
   445  00FE2E  59                 	db	89
   446  00FE2F  4E                 	db	78
   447  00FE30  7C                 	db	124
   448  00FE31  12                 	db	18
   449  00FE32  11                 	db	17
   450  00FE33  12                 	db	18
   451  00FE34  7C                 	db	124
   452  00FE35  7F                 	db	127
   453  00FE36  49                 	db	73
   454  00FE37  49                 	db	73
   455  00FE38  49                 	db	73
   456  00FE39  36                 	db	54
   457  00FE3A  3E                 	db	62
   458  00FE3B  41                 	db	65
   459  00FE3C  41                 	db	65
   460  00FE3D  41                 	db	65
   461  00FE3E  22                 	db	34
   462  00FE3F  7F                 	db	127
   463  00FE40  41                 	db	65
   464  00FE41  41                 	db	65
   465  00FE42  41                 	db	65
   466  00FE43  3E                 	db	62
   467  00FE44  7F                 	db	127
   468  00FE45  49                 	db	73
   469  00FE46  49                 	db	73
   470  00FE47  49                 	db	73
   471  00FE48  41                 	db	65
   472  00FE49  7F                 	db	127
   473  00FE4A  09                 	db	9
   474  00FE4B  09                 	db	9
   475  00FE4C  09                 	db	9
   476  00FE4D  01                 	db	1
   477  00FE4E  3E                 	db	62
   478  00FE4F  41                 	db	65
   479  00FE50  41                 	db	65
   480  00FE51  51                 	db	81
   481  00FE52  73                 	db	115
   482  00FE53  7F                 	db	127
   483  00FE54  08                 	db	8
   484  00FE55  08                 	db	8
   485  00FE56  08                 	db	8
   486  00FE57  7F                 	db	127
   487  00FE58  00                 	db	0
   488  00FE59  41                 	db	65
   489  00FE5A  7F                 	db	127
   490  00FE5B  41                 	db	65
   491  00FE5C  00                 	db	0
   492  00FE5D  20                 	db	32
   493  00FE5E  40                 	db	64
   494  00FE5F  41                 	db	65
   495  00FE60  3F                 	db	63
   496  00FE61  01                 	db	1
   497  00FE62  7F                 	db	127
   498  00FE63  08                 	db	8
   499  00FE64  14                 	db	20
   500  00FE65  22                 	db	34
   501  00FE66  41                 	db	65
   502  00FE67  7F                 	db	127
   503  00FE68  40                 	db	64
   504  00FE69  40                 	db	64
   505  00FE6A  40                 	db	64
   506  00FE6B  40                 	db	64
   507  00FE6C  7F                 	db	127
   508  00FE6D  02                 	db	2
   509  00FE6E  1C                 	db	28
   510  00FE6F  02                 	db	2
   511  00FE70  7F                 	db	127
   512  00FE71  7F                 	db	127
   513  00FE72  04                 	db	4
   514  00FE73  08                 	db	8
   515  00FE74  10                 	db	16
   516  00FE75  7F                 	db	127
   517  00FE76  3E                 	db	62
   518  00FE77  41                 	db	65
   519  00FE78  41                 	db	65
   520  00FE79  41                 	db	65
   521  00FE7A  3E                 	db	62
   522  00FE7B  7F                 	db	127
   523  00FE7C  09                 	db	9
   524  00FE7D  09                 	db	9
   525  00FE7E  09                 	db	9
   526  00FE7F  06                 	db	6
   527  00FE80  3E                 	db	62
   528  00FE81  41                 	db	65
   529  00FE82  51                 	db	81
   530  00FE83  21                 	db	33
   531  00FE84  5E                 	db	94
   532  00FE85  7F                 	db	127
   533  00FE86  09                 	db	9
   534  00FE87  19                 	db	25
   535  00FE88  29                 	db	41
   536  00FE89  46                 	db	70
   537  00FE8A                     __end_of_font:
   538                           	opt stack 0
   539  00FE8A                     _font2:
   540                           	opt stack 0
   541  00FE8A  26                 	db	38
   542  00FE8B  49                 	db	73
   543  00FE8C  49                 	db	73
   544  00FE8D  49                 	db	73
   545  00FE8E  32                 	db	50
   546  00FE8F  03                 	db	3
   547  00FE90  01                 	db	1
   548  00FE91  7F                 	db	127
   549  00FE92  01                 	db	1
   550  00FE93  03                 	db	3
   551  00FE94  3F                 	db	63
   552  00FE95  40                 	db	64
   553  00FE96  40                 	db	64
   554  00FE97  40                 	db	64
   555  00FE98  3F                 	db	63
   556  00FE99  1F                 	db	31
   557  00FE9A  20                 	db	32
   558  00FE9B  40                 	db	64
   559  00FE9C  20                 	db	32
   560  00FE9D  1F                 	db	31
   561  00FE9E  3F                 	db	63
   562  00FE9F  40                 	db	64
   563  00FEA0  38                 	db	56
   564  00FEA1  40                 	db	64
   565  00FEA2  3F                 	db	63
   566  00FEA3  63                 	db	99
   567  00FEA4  14                 	db	20
   568  00FEA5  08                 	db	8
   569  00FEA6  14                 	db	20
   570  00FEA7  63                 	db	99
   571  00FEA8  03                 	db	3
   572  00FEA9  04                 	db	4
   573  00FEAA  78                 	db	120
   574  00FEAB  04                 	db	4
   575  00FEAC  03                 	db	3
   576  00FEAD  61                 	db	97
   577  00FEAE  59                 	db	89
   578  00FEAF  49                 	db	73
   579  00FEB0  4D                 	db	77
   580  00FEB1  43                 	db	67
   581  00FEB2  00                 	db	0
   582  00FEB3  7F                 	db	127
   583  00FEB4  41                 	db	65
   584  00FEB5  41                 	db	65
   585  00FEB6  41                 	db	65
   586  00FEB7  02                 	db	2
   587  00FEB8  04                 	db	4
   588  00FEB9  08                 	db	8
   589  00FEBA  10                 	db	16
   590  00FEBB  20                 	db	32
   591  00FEBC  00                 	db	0
   592  00FEBD  41                 	db	65
   593  00FEBE  41                 	db	65
   594  00FEBF  41                 	db	65
   595  00FEC0  7F                 	db	127
   596  00FEC1  04                 	db	4
   597  00FEC2  02                 	db	2
   598  00FEC3  01                 	db	1
   599  00FEC4  02                 	db	2
   600  00FEC5  04                 	db	4
   601  00FEC6  40                 	db	64
   602  00FEC7  40                 	db	64
   603  00FEC8  40                 	db	64
   604  00FEC9  40                 	db	64
   605  00FECA  40                 	db	64
   606  00FECB  00                 	db	0
   607  00FECC  03                 	db	3
   608  00FECD  07                 	db	7
   609  00FECE  08                 	db	8
   610  00FECF  00                 	db	0
   611  00FED0  20                 	db	32
   612  00FED1  54                 	db	84
   613  00FED2  54                 	db	84
   614  00FED3  78                 	db	120
   615  00FED4  40                 	db	64
   616  00FED5  7F                 	db	127
   617  00FED6  28                 	db	40
   618  00FED7  44                 	db	68
   619  00FED8  44                 	db	68
   620  00FED9  38                 	db	56
   621  00FEDA  38                 	db	56
   622  00FEDB  44                 	db	68
   623  00FEDC  44                 	db	68
   624  00FEDD  44                 	db	68
   625  00FEDE  28                 	db	40
   626  00FEDF  38                 	db	56
   627  00FEE0  44                 	db	68
   628  00FEE1  44                 	db	68
   629  00FEE2  28                 	db	40
   630  00FEE3  7F                 	db	127
   631  00FEE4  38                 	db	56
   632  00FEE5  54                 	db	84
   633  00FEE6  54                 	db	84
   634  00FEE7  54                 	db	84
   635  00FEE8  18                 	db	24
   636  00FEE9  00                 	db	0
   637  00FEEA  08                 	db	8
   638  00FEEB  7E                 	db	126
   639  00FEEC  09                 	db	9
   640  00FEED  02                 	db	2
   641  00FEEE  18                 	db	24
   642  00FEEF  A4                 	db	164
   643  00FEF0  A4                 	db	164
   644  00FEF1  9C                 	db	156
   645  00FEF2  78                 	db	120
   646  00FEF3  7F                 	db	127
   647  00FEF4  08                 	db	8
   648  00FEF5  04                 	db	4
   649  00FEF6  04                 	db	4
   650  00FEF7  78                 	db	120
   651  00FEF8  00                 	db	0
   652  00FEF9  44                 	db	68
   653  00FEFA  7D                 	db	125
   654  00FEFB  40                 	db	64
   655  00FEFC  00                 	db	0
   656  00FEFD  20                 	db	32
   657  00FEFE  40                 	db	64
   658  00FEFF  40                 	db	64
   659  00FF00  3D                 	db	61
   660  00FF01  00                 	db	0
   661  00FF02  7F                 	db	127
   662  00FF03  10                 	db	16
   663  00FF04  28                 	db	40
   664  00FF05  44                 	db	68
   665  00FF06  00                 	db	0
   666  00FF07  00                 	db	0
   667  00FF08  41                 	db	65
   668  00FF09  7F                 	db	127
   669  00FF0A  40                 	db	64
   670  00FF0B  00                 	db	0
   671  00FF0C  7C                 	db	124
   672  00FF0D  04                 	db	4
   673  00FF0E  78                 	db	120
   674  00FF0F  04                 	db	4
   675  00FF10  78                 	db	120
   676  00FF11  7C                 	db	124
   677  00FF12  08                 	db	8
   678  00FF13  04                 	db	4
   679  00FF14  04                 	db	4
   680  00FF15  78                 	db	120
   681  00FF16  38                 	db	56
   682  00FF17  44                 	db	68
   683  00FF18  44                 	db	68
   684  00FF19  44                 	db	68
   685  00FF1A  38                 	db	56
   686  00FF1B  FC                 	db	252
   687  00FF1C  18                 	db	24
   688  00FF1D  24                 	db	36
   689  00FF1E  24                 	db	36
   690  00FF1F  18                 	db	24
   691  00FF20  18                 	db	24
   692  00FF21  24                 	db	36
   693  00FF22  24                 	db	36
   694  00FF23  18                 	db	24
   695  00FF24  FC                 	db	252
   696  00FF25  7C                 	db	124
   697  00FF26  08                 	db	8
   698  00FF27  04                 	db	4
   699  00FF28  04                 	db	4
   700  00FF29  08                 	db	8
   701  00FF2A  48                 	db	72
   702  00FF2B  54                 	db	84
   703  00FF2C  54                 	db	84
   704  00FF2D  54                 	db	84
   705  00FF2E  24                 	db	36
   706  00FF2F  04                 	db	4
   707  00FF30  04                 	db	4
   708  00FF31  3F                 	db	63
   709  00FF32  44                 	db	68
   710  00FF33  24                 	db	36
   711  00FF34  3C                 	db	60
   712  00FF35  40                 	db	64
   713  00FF36  40                 	db	64
   714  00FF37  20                 	db	32
   715  00FF38  7C                 	db	124
   716  00FF39  1C                 	db	28
   717  00FF3A  20                 	db	32
   718  00FF3B  40                 	db	64
   719  00FF3C  20                 	db	32
   720  00FF3D  1C                 	db	28
   721  00FF3E  3C                 	db	60
   722  00FF3F  40                 	db	64
   723  00FF40  30                 	db	48
   724  00FF41  40                 	db	64
   725  00FF42  3C                 	db	60
   726  00FF43  44                 	db	68
   727  00FF44  28                 	db	40
   728  00FF45  10                 	db	16
   729  00FF46  28                 	db	40
   730  00FF47  44                 	db	68
   731  00FF48  4C                 	db	76
   732  00FF49  90                 	db	144
   733  00FF4A  90                 	db	144
   734  00FF4B  90                 	db	144
   735  00FF4C  7C                 	db	124
   736  00FF4D  44                 	db	68
   737  00FF4E  64                 	db	100
   738  00FF4F  54                 	db	84
   739  00FF50  4C                 	db	76
   740  00FF51  44                 	db	68
   741  00FF52  00                 	db	0
   742  00FF53  08                 	db	8
   743  00FF54  36                 	db	54
   744  00FF55  41                 	db	65
   745  00FF56  00                 	db	0
   746  00FF57  00                 	db	0
   747  00FF58  00                 	db	0
   748  00FF59  77                 	db	119
   749  00FF5A  00                 	db	0
   750  00FF5B  00                 	db	0
   751  00FF5C  00                 	db	0
   752  00FF5D  41                 	db	65
   753  00FF5E  36                 	db	54
   754  00FF5F  08                 	db	8
   755  00FF60  00                 	db	0
   756  00FF61  02                 	db	2
   757  00FF62  01                 	db	1
   758  00FF63  02                 	db	2
   759  00FF64  04                 	db	4
   760  00FF65  02                 	db	2
   761  00FF66                     __end_of_font2:
   762                           	opt stack 0
   763  00FF66                     _dpowers:
   764                           	opt stack 0
   765  00FF66  0001               	dw	1
   766  00FF68  0000               	dw	0
   767  00FF6A  000A               	dw	10
   768  00FF6C  0000               	dw	0
   769  00FF6E  0064               	dw	100
   770  00FF70  0000               	dw	0
   771  00FF72  03E8               	dw	1000
   772  00FF74  0000               	dw	0
   773  00FF76  2710               	dw	10000
   774  00FF78  0000               	dw	0
   775  00FF7A  86A0               	dw	34464
   776  00FF7C  0001               	dw	1
   777  00FF7E  4240               	dw	16960
   778  00FF80  000F               	dw	15
   779  00FF82  9680               	dw	38528
   780  00FF84  0098               	dw	152
   781  00FF86  E100               	dw	57600
   782  00FF88  05F5               	dw	1525
   783  00FF8A  CA00               	dw	51712
   784  00FF8C  3B9A               	dw	15258
   785  00FF8E                     __end_of_dpowers:
   786                           	opt stack 0
   787  00FF8E                     _hexpowers:
   788                           	opt stack 0
   789  00FF8E  0001               	dw	1
   790  00FF90  0000               	dw	0
   791  00FF92  0010               	dw	16
   792  00FF94  0000               	dw	0
   793  00FF96  0100               	dw	256
   794  00FF98  0000               	dw	0
   795  00FF9A  1000               	dw	4096
   796  00FF9C  0000               	dw	0
   797  00FF9E  0000               	dw	0
   798  00FFA0  0001               	dw	1
   799  00FFA2  0000               	dw	0
   800  00FFA4  0010               	dw	16
   801  00FFA6  0000               	dw	0
   802  00FFA8  0100               	dw	256
   803  00FFAA  0000               	dw	0
   804  00FFAC  1000               	dw	4096
   805  00FFAE                     __end_of_hexpowers:
   806                           	opt stack 0
   807  0000                     _ADCON1	set	4033
   808  0000                     _CCP2CON	set	4026
   809  0000                     _CCPR2L	set	4027
   810  0000                     _INTCON2bits	set	4081
   811  0000                     _INTCONbits	set	4082
   812  0000                     _OSCCON	set	4051
   813  0000                     _PIE1bits	set	3997
   814  0000                     _PIR1bits	set	3998
   815  0000                     _PIR2bits	set	4001
   816  0000                     _PORTA	set	3968
   817  0000                     _PORTBbits	set	3969
   818  0000                     _PORTCbits	set	3970
   819  0000                     _PORTD	set	3971
   820  0000                     _PR2	set	4043
   821  0000                     _RCSTA	set	4011
   822  0000                     _RCSTAbits	set	4011
   823  0000                     _SPBRG	set	4015
   824  0000                     _SPBRGH	set	4016
   825  0000                     _SSPBUF	set	4041
   826  0000                     _SSPCON1	set	4038
   827  0000                     _SSPSTAT	set	4039
   828  0000                     _SSPSTATbits	set	4039
   829  0000                     _T1CON	set	4045
   830  0000                     _T1CONbits	set	4045
   831  0000                     _T2CON	set	4042
   832  0000                     _T3CON	set	4017
   833  0000                     _T3CONbits	set	4017
   834  0000                     _TMR1H	set	4047
   835  0000                     _TMR1L	set	4046
   836  0000                     _TMR3H	set	4019
   837  0000                     _TMR3L	set	4018
   838  0000                     _TRISA	set	3986
   839  0000                     _TRISB	set	3987
   840  0000                     _TRISC	set	3988
   841  0000                     _TRISCbits	set	3988
   842  0000                     _TRISD	set	3989
   843  0000                     _TXREG	set	4013
   844  0000                     _TXSTA	set	4012
   845  0000                     _TXSTAbits	set	4012
   846  0000                     _INT0IE	set	32660
   847  0000                     _TRMT	set	32097
   848  0000                     _nRBPU	set	32655
   849  00FFAE                     STR_3:
   850  00FFAE  45                 	db	69	;'E'
   851  00FFAF  43                 	db	67	;'C'
   852  00FFB0  45                 	db	69	;'E'
   853  00FFB1  33                 	db	51	;'3'
   854  00FFB2  33                 	db	51	;'3'
   855  00FFB3  30                 	db	48	;'0'
   856  00FFB4  31                 	db	49	;'1'
   857  00FFB5  4C                 	db	76	;'L'
   858  00FFB6  20                 	db	32
   859  00FFB7  46                 	db	70	;'F'
   860  00FFB8  61                 	db	97	;'a'
   861  00FFB9  6C                 	db	108	;'l'
   862  00FFBA  6C                 	db	108	;'l'
   863  00FFBB  2D                 	db	45
   864  00FFBC  32                 	db	50	;'2'
   865  00FFBD  30                 	db	48	;'0'
   866  00FFBE  32                 	db	50	;'2'
   867  00FFBF  32                 	db	50	;'2'
   868  00FFC0  2D                 	db	45
   869  00FFC1  53                 	db	83	;'S'
   870  00FFC2  34                 	db	52	;'4'
   871  00FFC3  00                 	db	0
   872  00FFC4                     STR_1:
   873  00FFC4  4E                 	db	78	;'N'
   874  00FFC5  45                 	db	69	;'E'
   875  00FFC6  43                 	db	67	;'C'
   876  00FFC7  5F                 	db	95	;'_'
   877  00FFC8  43                 	db	67	;'C'
   878  00FFC9  6F                 	db	111	;'o'
   879  00FFCA  64                 	db	100	;'d'
   880  00FFCB  65                 	db	101	;'e'
   881  00FFCC  20                 	db	32
   882  00FFCD  3D                 	db	61	;'='
   883  00FFCE  20                 	db	32
   884  00FFCF  25                 	db	37
   885  00FFD0  30                 	db	48	;'0'
   886  00FFD1  38                 	db	56	;'8'
   887  00FFD2  6C                 	db	108	;'l'
   888  00FFD3  78                 	db	120	;'x'
   889  00FFD4  20                 	db	32
   890  00FFD5  25                 	db	37
   891  00FFD6  78                 	db	120	;'x'
   892  00FFD7  20                 	db	32
   893  00FFD8  00                 	db	0
   894  00FFD9                     STR_5:
   895  00FFD9  30                 	db	48	;'0'
   896  00FFDA  31                 	db	49	;'1'
   897  00FFDB  32                 	db	50	;'2'
   898  00FFDC  33                 	db	51	;'3'
   899  00FFDD  34                 	db	52	;'4'
   900  00FFDE  35                 	db	53	;'5'
   901  00FFDF  36                 	db	54	;'6'
   902  00FFE0  37                 	db	55	;'7'
   903  00FFE1  38                 	db	56	;'8'
   904  00FFE2  39                 	db	57	;'9'
   905  00FFE3  61                 	db	97	;'a'
   906  00FFE4  62                 	db	98	;'b'
   907  00FFE5  63                 	db	99	;'c'
   908  00FFE6  64                 	db	100	;'d'
   909  00FFE7  65                 	db	101	;'e'
   910  00FFE8  66                 	db	102	;'f'
   911  00FFE9  00                 	db	0
   912  00FFEA                     STR_2:
   913  00FFEA  46                 	db	70	;'F'
   914  00FFEB  6F                 	db	111	;'o'
   915  00FFEC  75                 	db	117	;'u'
   916  00FFED  6E                 	db	110	;'n'
   917  00FFEE  64                 	db	100	;'d'
   918  00FFEF  20                 	db	32
   919  00FFF0  3D                 	db	61	;'='
   920  00FFF1  20                 	db	32
   921  00FFF2  25                 	db	37
   922  00FFF3  64                 	db	100	;'d'
   923  00FFF4  0D                 	db	13
   924  00FFF5  0A                 	db	10
   925  00FFF6  00                 	db	0
   926  00FFF7                     STR_4:
   927  00FFF7  4C                 	db	76	;'L'
   928  00FFF8  41                 	db	65	;'A'
   929  00FFF9  42                 	db	66	;'B'
   930  00FFFA  20                 	db	32
   931  00FFFB  31                 	db	49	;'1'
   932  00FFFC  30                 	db	48	;'0'
   933  00FFFD  20                 	db	32
   934  00FFFE  00                 	db	0
   935                           
   936                           ; #config settings
   937  00FFFF  00                 	db	0	; dummy byte at the end
   938  0000                     
   939                           	psect	cinit
   940  001140                     __pcinit:
   941                           	opt stack 0
   942  001140                     start_initialization:
   943                           	opt stack 0
   944  001140                     __initialization:
   945                           	opt stack 0
   946                           
   947                           ; Clear objects allocated to BANK1 (31 bytes)
   948  001140  EE01  F054         	lfsr	0,__pbssBANK1
   949  001144  0E1F               	movlw	31
   950  001146                     clear_0:
   951  001146  6AEE               	clrf	postinc0,c
   952  001148  06E8               	decf	wreg,f,c
   953  00114A  E1FD               	bnz	clear_0
   954                           
   955                           ; Clear objects allocated to COMRAM (19 bytes)
   956  00114C  EE00  F05D         	lfsr	0,__pbssCOMRAM
   957  001150  0E13               	movlw	19
   958  001152                     clear_1:
   959  001152  6AEE               	clrf	postinc0,c
   960  001154  06E8               	decf	wreg,f,c
   961  001156  E1FD               	bnz	clear_1
   962                           
   963                           ; Initialize objects allocated to BANK1 (84 bytes)
   964                           ; load TBLPTR registers with __pidataBANK1
   965  001158  0E87               	movlw	low __pidataBANK1
   966  00115A  6EF6               	movwf	tblptrl,c
   967  00115C  0E13               	movlw	high __pidataBANK1
   968  00115E  6EF7               	movwf	tblptrh,c
   969  001160  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   970  001162  6EF8               	movwf	tblptru,c
   971  001164  EE01  F000         	lfsr	0,__pdataBANK1
   972  001168  EE10 F054          	lfsr	1,84
   973  00116C                     copy_data0:
   974  00116C  0009               	tblrd		*+
   975  00116E  CFF5 FFEE          	movff	tablat,postinc0
   976  001172  50E5               	movf	postdec1,w,c
   977  001174  50E1               	movf	fsr1l,w,c
   978  001176  E1FA               	bnz	copy_data0
   979                           
   980                           ; Initialize objects allocated to BANK0 (105 bytes)
   981                           ; load TBLPTR registers with __pidataBANK0
   982  001178  0E1E               	movlw	low __pidataBANK0
   983  00117A  6EF6               	movwf	tblptrl,c
   984  00117C  0E13               	movlw	high __pidataBANK0
   985  00117E  6EF7               	movwf	tblptrh,c
   986  001180  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   987  001182  6EF8               	movwf	tblptru,c
   988  001184  EE00  F080         	lfsr	0,__pdataBANK0
   989  001188  EE10 F069          	lfsr	1,105
   990  00118C                     copy_data1:
   991  00118C  0009               	tblrd		*+
   992  00118E  CFF5 FFEE          	movff	tablat,postinc0
   993  001192  50E5               	movf	postdec1,w,c
   994  001194  50E1               	movf	fsr1l,w,c
   995  001196  E1FA               	bnz	copy_data1
   996                           
   997                           ; Initialize objects allocated to COMRAM (22 bytes)
   998                           ; load TBLPTR registers with __pidataCOMRAM
   999  001198  0EAA               	movlw	low __pidataCOMRAM
  1000  00119A  6EF6               	movwf	tblptrl,c
  1001  00119C  0E16               	movlw	high __pidataCOMRAM
  1002  00119E  6EF7               	movwf	tblptrh,c
  1003  0011A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1004  0011A2  6EF8               	movwf	tblptru,c
  1005  0011A4  EE00  F047         	lfsr	0,__pdataCOMRAM
  1006  0011A8  EE10 F016          	lfsr	1,22
  1007  0011AC                     copy_data2:
  1008  0011AC  0009               	tblrd		*+
  1009  0011AE  CFF5 FFEE          	movff	tablat,postinc0
  1010  0011B2  50E5               	movf	postdec1,w,c
  1011  0011B4  50E1               	movf	fsr1l,w,c
  1012  0011B6  E1FA               	bnz	copy_data2
  1013  0011B8                     end_of_initialization:
  1014                           	opt stack 0
  1015  0011B8                     __end_of__initialization:
  1016                           	opt stack 0
  1017  0011B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1018  0011BA  6EF8               	movwf	tblptru,c
  1019  0011BC  0100               	movlb	0
  1020  0011BE  EF2F  F002         	goto	_main	;jump to C main() function
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           wreg	equ	0xFE8
  1027                           postdec1	equ	0xFE5
  1028                           fsr1l	equ	0xFE1
  1029                           
  1030                           	psect	bssCOMRAM
  1031  00005D                     __pbssCOMRAM:
  1032                           	opt stack 0
  1033  00005D                     _Nec_code:
  1034                           	opt stack 0
  1035  00005D                     	ds	4
  1036  000061                     _Time_Elapsed:
  1037                           	opt stack 0
  1038  000061                     	ds	2
  1039  000063                     _nbr:
  1040                           	opt stack 0
  1041  000063                     	ds	2
  1042  000065                     _nec_ok:
  1043                           	opt stack 0
  1044  000065                     	ds	2
  1045  000067                     _txt:
  1046                           	opt stack 0
  1047  000067                     	ds	2
  1048  000069                     _Nec_code1:
  1049                           	opt stack 0
  1050  000069                     	ds	1
  1051  00006A                     _Nec_state:
  1052                           	opt stack 0
  1053  00006A                     	ds	1
  1054  00006B                     __tft_type:
  1055                           	opt stack 0
  1056  00006B                     	ds	1
  1057  00006C                     _bit_count:
  1058                           	opt stack 0
  1059  00006C                     	ds	1
  1060  00006D                     _colstart:
  1061                           	opt stack 0
  1062  00006D                     	ds	1
  1063  00006E                     _i:
  1064                           	opt stack 0
  1065  00006E                     	ds	1
  1066  00006F                     _rowstart:
  1067                           	opt stack 0
  1068  00006F                     	ds	1
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1l	equ	0xFE1
  1077                           
  1078                           	psect	dataCOMRAM
  1079  000047                     __pdataCOMRAM:
  1080                           	opt stack 0
  1081  000047                     _array1:
  1082                           	opt stack 0
  1083  000047                     	ds	21
  1084  00005C                     _wrap:
  1085                           	opt stack 0
  1086  00005C                     	ds	1
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096                           	psect	dataBANK0
  1097  000080                     __pdataBANK0:
  1098                           	opt stack 0
  1099  000080                     _color:
  1100                           	opt stack 0
  1101  000080                     	ds	42
  1102  0000AA                     _D1:
  1103                           	opt stack 0
  1104  0000AA                     	ds	21
  1105  0000BF                     _D2:
  1106                           	opt stack 0
  1107  0000BF                     	ds	21
  1108  0000D4                     _D3:
  1109                           	opt stack 0
  1110  0000D4                     	ds	21
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           postdec1	equ	0xFE5
  1118                           fsr1l	equ	0xFE1
  1119                           
  1120                           	psect	bssBANK1
  1121  000154                     __pbssBANK1:
  1122                           	opt stack 0
  1123  000154                     _buffer:
  1124                           	opt stack 0
  1125  000154                     	ds	31
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           
  1135                           	psect	dataBANK1
  1136  000100                     __pdataBANK1:
  1137                           	opt stack 0
  1138  000100                     _txt1:
  1139                           	opt stack 0
  1140  000100                     	ds	84
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec1	equ	0xFE5
  1148                           fsr1l	equ	0xFE1
  1149                           
  1150                           	psect	cstackBANK0
  1151  0000E9                     __pcstackBANK0:
  1152                           	opt stack 0
  1153  0000E9                     drawtext@x:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x0
  1157  0000E9                     	ds	1
  1158  0000EA                     drawtext@textsize:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1
  1162  0000EA                     	ds	2
  1163  0000EC                     drawtext@i:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x3
  1167  0000EC                     	ds	2
  1168  0000EE                     drawtext@cursor_y:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x5
  1172  0000EE                     	ds	1
  1173  0000EF                     drawtext@cursor_x:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x6
  1177  0000EF                     	ds	1
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           postinc0	equ	0xFEE
  1183                           wreg	equ	0xFE8
  1184                           postdec1	equ	0xFE5
  1185                           fsr1l	equ	0xFE1
  1186                           
  1187                           	psect	cstackCOMRAM
  1188  000001                     __pcstackCOMRAM:
  1189                           	opt stack 0
  1190  000001                     ??_INT0_isr:
  1191  000001                     
  1192                           ; 0 bytes @ 0x0
  1193  000001                     	ds	2
  1194  000003                     ??_chkisr:
  1195                           
  1196                           ; 0 bytes @ 0x2
  1197  000003                     	ds	14
  1198  000011                     ??_isdigit:
  1199  000011                     ?_strlen:
  1200                           	opt stack 0
  1201  000011                     ?___wmul:
  1202                           	opt stack 0
  1203  000011                     ?___lldiv:
  1204                           	opt stack 0
  1205  000011                     putch@c:
  1206                           	opt stack 0
  1207  000011                     spiwrite@x:
  1208                           	opt stack 0
  1209  000011                     wait_one_sec@k:
  1210                           	opt stack 0
  1211  000011                     OpenUSART@spbrg:
  1212                           	opt stack 0
  1213  000011                     ___wmul@multiplier:
  1214                           	opt stack 0
  1215  000011                     strcpy@to:
  1216                           	opt stack 0
  1217  000011                     strlen@s:
  1218                           	opt stack 0
  1219  000011                     ___lldiv@dividend:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x10
  1223  000011                     	ds	1
  1224  000012                     spiwrite@spidata:
  1225                           	opt stack 0
  1226  000012                     _isdigit$1620:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x11
  1230  000012                     	ds	1
  1231  000013                     ??_strlen:
  1232  000013                     write_command@cmd_:
  1233                           	opt stack 0
  1234  000013                     write_data@data_:
  1235                           	opt stack 0
  1236  000013                     OpenUSART@config:
  1237                           	opt stack 0
  1238  000013                     isdigit@c:
  1239                           	opt stack 0
  1240  000013                     ___wmul@multiplicand:
  1241                           	opt stack 0
  1242  000013                     strcpy@from:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x12
  1246  000013                     	ds	1
  1247  000014                     setAddrWindow@y0:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x13
  1251  000014                     	ds	1
  1252  000015                     setAddrWindow@x1:
  1253                           	opt stack 0
  1254  000015                     ___wmul@product:
  1255                           	opt stack 0
  1256  000015                     strcpy@cp:
  1257                           	opt stack 0
  1258  000015                     strlen@cp:
  1259                           	opt stack 0
  1260  000015                     ___lldiv@divisor:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0x14
  1264  000015                     	ds	1
  1265  000016                     setAddrWindow@y1:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x15
  1269  000016                     	ds	1
  1270  000017                     setAddrWindow@x0:
  1271                           	opt stack 0
  1272  000017                     delay_ms@ms:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x16
  1276  000017                     	ds	1
  1277  000018                     drawPixel@y:
  1278                           	opt stack 0
  1279  000018                     drawFastVLine@y:
  1280                           	opt stack 0
  1281  000018                     fillRectangle@y:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x17
  1285  000018                     	ds	1
  1286  000019                     ??_delay_ms:
  1287  000019                     drawFastVLine@h:
  1288                           	opt stack 0
  1289  000019                     fillRectangle@w:
  1290                           	opt stack 0
  1291  000019                     drawPixel@color:
  1292                           	opt stack 0
  1293  000019                     ___lldiv@quotient:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x18
  1297  000019                     	ds	1
  1298  00001A                     fillRectangle@h:
  1299                           	opt stack 0
  1300  00001A                     drawFastVLine@color:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x19
  1304  00001A                     	ds	1
  1305  00001B                     drawPixel@x:
  1306                           	opt stack 0
  1307  00001B                     delay_ms@count:
  1308                           	opt stack 0
  1309  00001B                     fillRectangle@color:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1A
  1313  00001B                     	ds	1
  1314  00001C                     ??_drawFastVLine:
  1315  00001C                     drawCircle@x0:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1B
  1319  00001C                     	ds	1
  1320  00001D                     ??_fillRectangle:
  1321  00001D                     ___lldiv@counter:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x1C
  1325  00001D                     	ds	1
  1326  00001E                     ?___llmod:
  1327                           	opt stack 0
  1328  00001E                     drawCircle@y0:
  1329                           	opt stack 0
  1330  00001E                     ___llmod@dividend:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0x1D
  1334  00001E                     	ds	2
  1335  000020                     drawFastVLine@hi:
  1336                           	opt stack 0
  1337  000020                     drawCircle@r:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x1F
  1341  000020                     	ds	1
  1342  000021                     drawFastVLine@lo:
  1343                           	opt stack 0
  1344  000021                     fillRectangle@hi:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x20
  1348  000021                     	ds	1
  1349  000022                     drawFastVLine@x:
  1350                           	opt stack 0
  1351  000022                     fillRectangle@lo:
  1352                           	opt stack 0
  1353  000022                     drawCircle@color:
  1354                           	opt stack 0
  1355  000022                     ___llmod@divisor:
  1356                           	opt stack 0
  1357                           
  1358                           ; 4 bytes @ 0x21
  1359  000022                     	ds	1
  1360  000023                     fillRect@y:
  1361                           	opt stack 0
  1362  000023                     fillRectangle@x:
  1363                           	opt stack 0
  1364  000023                     fillCircleHelper@x0:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x22
  1368  000023                     	ds	1
  1369  000024                     ??_drawCircle:
  1370  000024                     fillRect@w:
  1371                           	opt stack 0
  1372  000024                     fillScreen@color:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x23
  1376  000024                     	ds	1
  1377  000025                     fillRect@h:
  1378                           	opt stack 0
  1379  000025                     fillCircleHelper@y0:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x24
  1383  000025                     	ds	1
  1384  000026                     ___llmod@counter:
  1385                           	opt stack 0
  1386  000026                     fillRect@color:
  1387                           	opt stack 0
  1388  000026                     drawCircle@ddF_x:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x25
  1392  000026                     	ds	1
  1393  000027                     ?_printf:
  1394                           	opt stack 0
  1395  000027                     fillCircleHelper@r:
  1396                           	opt stack 0
  1397  000027                     printf@f:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x26
  1401  000027                     	ds	1
  1402  000028                     ??_fillRect:
  1403  000028                     drawCircle@ddF_y:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x27
  1407  000028                     	ds	1
  1408  000029                     fillCircleHelper@cornername:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x28
  1412  000029                     	ds	1
  1413  00002A                     drawCircle@f:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x29
  1417  00002A                     	ds	1
  1418  00002B                     fillRect@x:
  1419                           	opt stack 0
  1420  00002B                     fillCircleHelper@delta:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x2A
  1424  00002B                     	ds	1
  1425  00002C                     fillRect@i:
  1426                           	opt stack 0
  1427  00002C                     drawCircle@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2B
  1431  00002C                     	ds	1
  1432  00002D                     fillCircleHelper@color:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x2C
  1436  00002D                     	ds	1
  1437  00002E                     drawChar@y:
  1438                           	opt stack 0
  1439  00002E                     drawCircle@y:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x2D
  1443  00002E                     	ds	1
  1444  00002F                     ??_printf:
  1445  00002F                     ??_fillCircleHelper:
  1446  00002F                     drawChar@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2E
  1450  00002F                     	ds	1
  1451  000030                     drawChar@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2F
  1455  000030                     	ds	1
  1456  000031                     fillCircleHelper@ddF_x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x30
  1460  000031                     	ds	1
  1461  000032                     drawChar@bg:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x31
  1465  000032                     	ds	1
  1466  000033                     printf@idx:
  1467                           	opt stack 0
  1468  000033                     fillCircleHelper@ddF_y:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x32
  1472  000033                     	ds	1
  1473  000034                     drawChar@size:
  1474                           	opt stack 0
  1475  000034                     printf@prec:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x33
  1479  000034                     	ds	1
  1480  000035                     drawChar@line:
  1481                           	opt stack 0
  1482  000035                     fillCircleHelper@f:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x34
  1486  000035                     	ds	1
  1487  000036                     drawChar@x:
  1488                           	opt stack 0
  1489  000036                     printf@ap:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x35
  1493  000036                     	ds	1
  1494  000037                     drawChar@j:
  1495                           	opt stack 0
  1496  000037                     fillCircleHelper@x:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x36
  1500  000037                     	ds	1
  1501  000038                     drawChar@i:
  1502                           	opt stack 0
  1503  000038                     printf@val:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x37
  1507  000038                     	ds	1
  1508  000039                     drawtext@y:
  1509                           	opt stack 0
  1510  000039                     fillCircleHelper@y:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     drawtext@_text:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     fillCircle@x0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  00003B                     	ds	1
  1525  00003C                     drawtext@color:
  1526                           	opt stack 0
  1527  00003C                     printf@width:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x3B
  1531  00003C                     	ds	1
  1532  00003D                     fillCircle@y0:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3C
  1536  00003D                     	ds	1
  1537  00003E                     printf@flag:
  1538                           	opt stack 0
  1539  00003E                     drawtext@bg:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x3D
  1543  00003E                     	ds	1
  1544  00003F                     printf@c:
  1545                           	opt stack 0
  1546  00003F                     fillCircle@r:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x3E
  1550  00003F                     	ds	1
  1551  000040                     drawtext@size:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x3F
  1555  000040                     	ds	1
  1556  000041                     ??_drawtext:
  1557  000041                     fillCircle@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x40
  1561  000041                     	ds	2
  1562  000043                     ??_main:
  1563                           
  1564                           ; 0 bytes @ 0x42
  1565  000043                     	ds	1
  1566  000044                     main@i:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x43
  1570  000044                     	ds	2
  1571  000046                     main@found:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x45
  1575  000046                     	ds	1
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585 ;;
  1586 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1587 ;;
  1588 ;; *************** function _main *****************
  1589 ;; Defined at:
  1590 ;;		line 218 in file "Lab10p1.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  i               2   67[COMRAM] int 
  1595 ;;  found           1   69[COMRAM] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;Total ram usage:        4 bytes
  1610 ;; Hardware stack levels required when called:   11
  1611 ;; This function calls:
  1612 ;;		_Activate_Buzzer
  1613 ;;		_Deactivate_Buzzer
  1614 ;;		_Initialize_Screen
  1615 ;;		_drawCircle
  1616 ;;		_drawtext
  1617 ;;		_fillCircle
  1618 ;;		_init_UART
  1619 ;;		_printf
  1620 ;;		_wait_one_sec
  1621 ;; This function is called by:
  1622 ;;		Startup code after reset
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text0
  1627  00045E                     __ptext0:
  1628                           	opt stack 0
  1629  00045E                     _main:
  1630                           	opt stack 20
  1631                           
  1632                           ;Lab10p1.c: 220: init_UART();
  1633                           
  1634                           ;incstack = 0
  1635  00045E  EC60  F00B         	call	_init_UART	;wreg free
  1636                           
  1637                           ;Lab10p1.c: 221: OSCCON = 0x70;
  1638  000462  0E70               	movlw	112
  1639  000464  6ED3               	movwf	4051,c	;volatile
  1640                           
  1641                           ;Lab10p1.c: 222: nRBPU = 0;
  1642  000466  9EF1               	bcf	intcon2,7,c	;volatile
  1643                           
  1644                           ;Lab10p1.c: 223: TRISA = 0x00;
  1645  000468  0E00               	movlw	0
  1646  00046A  6E92               	movwf	3986,c	;volatile
  1647                           
  1648                           ;Lab10p1.c: 224: TRISB = 0x01;
  1649  00046C  0E01               	movlw	1
  1650  00046E  6E93               	movwf	3987,c	;volatile
  1651                           
  1652                           ;Lab10p1.c: 225: TRISC = 0x00;
  1653  000470  0E00               	movlw	0
  1654  000472  6E94               	movwf	3988,c	;volatile
  1655                           
  1656                           ;Lab10p1.c: 226: TRISD = 0x00;
  1657  000474  0E00               	movlw	0
  1658  000476  6E95               	movwf	3989,c	;volatile
  1659                           
  1660                           ;Lab10p1.c: 227: ADCON1 = 0x0F;
  1661  000478  0E0F               	movlw	15
  1662  00047A  6EC1               	movwf	4033,c	;volatile
  1663                           
  1664                           ;Lab10p1.c: 228: Initialize_Screen();
  1665  00047C  ECCF  F007         	call	_Initialize_Screen	;wreg free
  1666                           
  1667                           ;Lab10p1.c: 229: INTCONbits.INT0IF = 0;
  1668  000480  92F2               	bcf	intcon,1,c	;volatile
  1669                           
  1670                           ;Lab10p1.c: 230: INTCON2bits.INTEDG0 = 0;
  1671  000482  9CF1               	bcf	intcon2,6,c	;volatile
  1672                           
  1673                           ;Lab10p1.c: 231: INTCONbits.INT0IE = 1;
  1674  000484  88F2               	bsf	intcon,4,c	;volatile
  1675                           
  1676                           ;Lab10p1.c: 232: TMR1H = 0;
  1677  000486  0E00               	movlw	0
  1678  000488  6ECF               	movwf	4047,c	;volatile
  1679                           
  1680                           ;Lab10p1.c: 233: TMR1L = 0;
  1681  00048A  0E00               	movlw	0
  1682  00048C  6ECE               	movwf	4046,c	;volatile
  1683                           
  1684                           ;Lab10p1.c: 234: PIR1bits.TMR1IF = 0;
  1685  00048E  909E               	bcf	3998,0,c	;volatile
  1686                           
  1687                           ;Lab10p1.c: 235: PIE1bits.TMR1IE = 1;
  1688  000490  809D               	bsf	3997,0,c	;volatile
  1689                           
  1690                           ;Lab10p1.c: 236: INTCONbits.PEIE = 1;
  1691  000492  8CF2               	bsf	intcon,6,c	;volatile
  1692                           
  1693                           ;Lab10p1.c: 237: INTCONbits.GIE = 1;
  1694  000494  8EF2               	bsf	intcon,7,c	;volatile
  1695                           
  1696                           ;Lab10p1.c: 238: nec_ok = 0;
  1697  000496  0E00               	movlw	0
  1698  000498  6E66               	movwf	_nec_ok+1,c
  1699  00049A  0E00               	movlw	0
  1700  00049C  6E65               	movwf	_nec_ok,c
  1701                           
  1702                           ;Lab10p1.c: 239: Nec_code = 0x0;
  1703  00049E  0E00               	movlw	0
  1704  0004A0  6E5D               	movwf	_Nec_code,c
  1705  0004A2  0E00               	movlw	0
  1706  0004A4  6E5E               	movwf	_Nec_code+1,c
  1707  0004A6  0E00               	movlw	0
  1708  0004A8  6E5F               	movwf	_Nec_code+2,c
  1709  0004AA  0E00               	movlw	0
  1710  0004AC  6E60               	movwf	_Nec_code+3,c
  1711  0004AE  D000               	goto	l3968
  1712  0004B0                     l3968:
  1713                           
  1714                           ;Lab10p1.c: 242: {
  1715                           ;Lab10p1.c: 243: if (nec_ok == 1)
  1716  0004B0  0465               	decf	_nec_ok,w,c
  1717  0004B2  1066               	iorwf	_nec_ok+1,w,c
  1718  0004B4  A4D8               	btfss	status,2,c
  1719  0004B6  D7FC               	goto	l3968
  1720                           
  1721                           ;Lab10p1.c: 244: {
  1722                           ;Lab10p1.c: 245: nec_ok = 0;
  1723  0004B8  0E00               	movlw	0
  1724  0004BA  6E66               	movwf	_nec_ok+1,c
  1725  0004BC  0E00               	movlw	0
  1726  0004BE  6E65               	movwf	_nec_ok,c
  1727                           
  1728                           ;Lab10p1.c: 247: Nec_code1 = (char) ((Nec_code >> 8));
  1729  0004C0  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1730                           
  1731                           ;Lab10p1.c: 249: INTCONbits.INT0IE = 1;
  1732  0004C4  88F2               	bsf	intcon,4,c	;volatile
  1733                           
  1734                           ;Lab10p1.c: 250: INTCON2bits.INTEDG0 = 0;
  1735  0004C6  9CF1               	bcf	intcon2,6,c	;volatile
  1736                           
  1737                           ;Lab10p1.c: 252: char found = 0xff;
  1738  0004C8  6846               	setf	main@found,c
  1739                           
  1740                           ;Lab10p1.c: 255: for(int i = 0;i < 21;i++)
  1741  0004CA  0E00               	movlw	0
  1742  0004CC  6E45               	movwf	main@i+1,c
  1743  0004CE  0E00               	movlw	0
  1744  0004D0  6E44               	movwf	main@i,c
  1745  0004D2                     l3980:
  1746  0004D2  BE45               	btfsc	main@i+1,7,c
  1747  0004D4  D008               	goto	l3984
  1748  0004D6  5045               	movf	main@i+1,w,c
  1749  0004D8  E117               	bnz	l3992
  1750  0004DA  0E15               	movlw	21
  1751  0004DC  5C44               	subwf	main@i,w,c
  1752  0004DE  B0D8               	btfsc	status,0,c
  1753  0004E0  D013               	goto	l3992
  1754  0004E2  D001               	goto	l3984
  1755  0004E4  D011               	goto	l3992
  1756  0004E6                     l3984:
  1757                           
  1758                           ;Lab10p1.c: 256: {
  1759                           ;Lab10p1.c: 257: if(array1[i] == Nec_code1)
  1760  0004E6  0E47               	movlw	low _array1
  1761  0004E8  2444               	addwf	main@i,w,c
  1762  0004EA  6ED9               	movwf	fsr2l,c
  1763  0004EC  0E00               	movlw	high _array1
  1764  0004EE  2045               	addwfc	main@i+1,w,c
  1765  0004F0  6EDA               	movwf	fsr2h,c
  1766  0004F2  5069               	movf	_Nec_code1,w,c
  1767  0004F4  18DE               	xorwf	postinc2,w,c
  1768  0004F6  A4D8               	btfss	status,2,c
  1769  0004F8  D003               	goto	l3988
  1770                           
  1771                           ;Lab10p1.c: 258: {
  1772                           ;Lab10p1.c: 259: found = i;
  1773  0004FA  C044  F046         	movff	main@i,main@found
  1774                           
  1775                           ;Lab10p1.c: 260: break;
  1776  0004FE  D004               	goto	l3992
  1777  000500                     l3988:
  1778  000500  4A44               	infsnz	main@i,f,c
  1779  000502  2A45               	incf	main@i+1,f,c
  1780  000504  D7E6               	goto	l3980
  1781  000506  D000               	goto	l3992
  1782  000508                     l3992:
  1783                           
  1784                           ;Lab10p1.c: 261: }
  1785                           ;Lab10p1.c: 262: }
  1786                           ;Lab10p1.c: 264: printf ("NEC_Code = %08lx %x ", Nec_code, Nec_code1);
  1787  000508  0EC4               	movlw	low STR_1
  1788  00050A  6E27               	movwf	printf@f,c
  1789  00050C  0EFF               	movlw	high STR_1
  1790  00050E  6E28               	movwf	printf@f+1,c
  1791  000510  C05D  F029         	movff	_Nec_code,?_printf+2
  1792  000514  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1793  000518  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1794  00051C  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1795  000520  C069  F02D         	movff	_Nec_code1,?_printf+6
  1796  000524  6A2E               	clrf	?_printf+7,c
  1797  000526  EC0E  F000         	call	_printf	;wreg free
  1798                           
  1799                           ;Lab10p1.c: 265: printf ("Found = %d\r\n", found);
  1800  00052A  0EEA               	movlw	low STR_2
  1801  00052C  6E27               	movwf	printf@f,c
  1802  00052E  0EFF               	movlw	high STR_2
  1803  000530  6E28               	movwf	printf@f+1,c
  1804  000532  C046  F029         	movff	main@found,?_printf+2
  1805  000536  6A2A               	clrf	?_printf+3,c
  1806  000538  EC0E  F000         	call	_printf	;wreg free
  1807                           
  1808                           ;Lab10p1.c: 267: if (found != 0xff)
  1809  00053C  2846               	incf	main@found,w,c
  1810  00053E  B4D8               	btfsc	status,2,c
  1811  000540  D7B7               	goto	l3968
  1812                           
  1813                           ;Lab10p1.c: 268: {
  1814                           ;Lab10p1.c: 269: fillCircle(60, 80, 20, color[found]);
  1815  000542  0E00               	movlw	0
  1816  000544  6E3C               	movwf	fillCircle@x0+1,c
  1817  000546  0E3C               	movlw	60
  1818  000548  6E3B               	movwf	fillCircle@x0,c
  1819  00054A  0E00               	movlw	0
  1820  00054C  6E3E               	movwf	fillCircle@y0+1,c
  1821  00054E  0E50               	movlw	80
  1822  000550  6E3D               	movwf	fillCircle@y0,c
  1823  000552  0E00               	movlw	0
  1824  000554  6E40               	movwf	fillCircle@r+1,c
  1825  000556  0E14               	movlw	20
  1826  000558  6E3F               	movwf	fillCircle@r,c
  1827  00055A  5046               	movf	main@found,w,c
  1828  00055C  0D02               	mullw	2
  1829  00055E  0E80               	movlw	low _color
  1830  000560  24F3               	addwf	prodl,w,c
  1831  000562  6ED9               	movwf	fsr2l,c
  1832  000564  0E00               	movlw	high _color
  1833  000566  20F4               	addwfc	prodh,w,c
  1834  000568  6EDA               	movwf	fsr2h,c
  1835  00056A  CFDE F041          	movff	postinc2,fillCircle@color
  1836  00056E  CFDD F042          	movff	postdec2,fillCircle@color+1
  1837  000572  ECEE  F009         	call	_fillCircle	;wreg free
  1838                           
  1839                           ;Lab10p1.c: 270: drawCircle(60, 80, 20, 0xFFFF);
  1840  000576  0E00               	movlw	0
  1841  000578  6E1D               	movwf	drawCircle@x0+1,c
  1842  00057A  0E3C               	movlw	60
  1843  00057C  6E1C               	movwf	drawCircle@x0,c
  1844  00057E  0E00               	movlw	0
  1845  000580  6E1F               	movwf	drawCircle@y0+1,c
  1846  000582  0E50               	movlw	80
  1847  000584  6E1E               	movwf	drawCircle@y0,c
  1848  000586  0E00               	movlw	0
  1849  000588  6E21               	movwf	drawCircle@r+1,c
  1850  00058A  0E14               	movlw	20
  1851  00058C  6E20               	movwf	drawCircle@r,c
  1852  00058E  0EFF               	movlw	255
  1853  000590  6E23               	movwf	drawCircle@color+1,c
  1854  000592  6822               	setf	drawCircle@color,c
  1855  000594  EC13  F003         	call	_drawCircle	;wreg free
  1856                           
  1857                           ;Lab10p1.c: 271: drawtext(52, 77, txt1[found], 0x0000, color[found],1);
  1858  000598  0E4D               	movlw	77
  1859  00059A  6E39               	movwf	drawtext@y,c
  1860  00059C  5046               	movf	main@found,w,c
  1861  00059E  0D04               	mullw	4
  1862  0005A0  0E00               	movlw	low _txt1
  1863  0005A2  24F3               	addwf	prodl,w,c
  1864  0005A4  6E3A               	movwf	drawtext@_text,c
  1865  0005A6  0E01               	movlw	high _txt1
  1866  0005A8  20F4               	addwfc	prodh,w,c
  1867  0005AA  6E3B               	movwf	drawtext@_text+1,c
  1868  0005AC  0E00               	movlw	0
  1869  0005AE  6E3D               	movwf	drawtext@color+1,c
  1870  0005B0  0E00               	movlw	0
  1871  0005B2  6E3C               	movwf	drawtext@color,c
  1872  0005B4  5046               	movf	main@found,w,c
  1873  0005B6  0D02               	mullw	2
  1874  0005B8  0E80               	movlw	low _color
  1875  0005BA  24F3               	addwf	prodl,w,c
  1876  0005BC  6ED9               	movwf	fsr2l,c
  1877  0005BE  0E00               	movlw	high _color
  1878  0005C0  20F4               	addwfc	prodh,w,c
  1879  0005C2  6EDA               	movwf	fsr2h,c
  1880  0005C4  CFDE F03E          	movff	postinc2,drawtext@bg
  1881  0005C8  CFDD F03F          	movff	postdec2,drawtext@bg+1
  1882  0005CC  0E01               	movlw	1
  1883  0005CE  6E40               	movwf	drawtext@size,c
  1884  0005D0  0E34               	movlw	52
  1885  0005D2  EC63  F006         	call	_drawtext
  1886                           
  1887                           ;Lab10p1.c: 273: PORTA = D1[found];
  1888  0005D6  5046               	movf	main@found,w,c
  1889  0005D8  0D01               	mullw	1
  1890  0005DA  0EAA               	movlw	low _D1
  1891  0005DC  24F3               	addwf	prodl,w,c
  1892  0005DE  6ED9               	movwf	fsr2l,c
  1893  0005E0  0E00               	movlw	high _D1
  1894  0005E2  20F4               	addwfc	prodh,w,c
  1895  0005E4  6EDA               	movwf	fsr2h,c
  1896  0005E6  50DF               	movf	indf2,w,c
  1897  0005E8  6E80               	movwf	3968,c	;volatile
  1898                           
  1899                           ;Lab10p1.c: 274: PORTD = D2[found]|D3[found];
  1900  0005EA  5046               	movf	main@found,w,c
  1901  0005EC  0D01               	mullw	1
  1902  0005EE  0ED4               	movlw	low _D3
  1903  0005F0  24F3               	addwf	prodl,w,c
  1904  0005F2  6ED9               	movwf	fsr2l,c
  1905  0005F4  0E00               	movlw	high _D3
  1906  0005F6  20F4               	addwfc	prodh,w,c
  1907  0005F8  6EDA               	movwf	fsr2h,c
  1908  0005FA  50DF               	movf	indf2,w,c
  1909  0005FC  6E43               	movwf	??_main& (0+255),c
  1910  0005FE  5046               	movf	main@found,w,c
  1911  000600  0D01               	mullw	1
  1912  000602  0EBF               	movlw	low _D2
  1913  000604  24F3               	addwf	prodl,w,c
  1914  000606  6ED9               	movwf	fsr2l,c
  1915  000608  0E00               	movlw	high _D2
  1916  00060A  20F4               	addwfc	prodh,w,c
  1917  00060C  6EDA               	movwf	fsr2h,c
  1918  00060E  50DF               	movf	indf2,w,c
  1919  000610  1043               	iorwf	??_main,w,c
  1920  000612  6E83               	movwf	3971,c	;volatile
  1921                           
  1922                           ;Lab10p1.c: 276: Activate_Buzzer();
  1923  000614  EC7D  F00B         	call	_Activate_Buzzer	;wreg free
  1924                           
  1925                           ;Lab10p1.c: 277: wait_one_sec();
  1926  000618  EC24  F00B         	call	_wait_one_sec	;wreg free
  1927                           
  1928                           ;Lab10p1.c: 278: Deactivate_Buzzer();
  1929  00061C  ECA3  F00B         	call	_Deactivate_Buzzer	;wreg free
  1930  000620  D747               	goto	l3968
  1931  000622  EF0C  F000         	goto	start
  1932  000626                     __end_of_main:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           intcon	equ	0xFF2
  1941                           intcon2	equ	0xFF1
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1l	equ	0xFE1
  1946                           indf2	equ	0xFDF
  1947                           postinc2	equ	0xFDE
  1948                           postdec2	equ	0xFDD
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _wait_one_sec *****************
  1954 ;; Defined at:
  1955 ;;		line 286 in file "Lab10p1.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  k               2   16[COMRAM] int 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    3
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text1
  1984  001648                     __ptext1:
  1985                           	opt stack 0
  1986  001648                     _wait_one_sec:
  1987                           	opt stack 27
  1988                           
  1989                           ;Lab10p1.c: 288: for (int k=0;k<17000;k++);
  1990                           
  1991                           ;incstack = 0
  1992  001648  0E00               	movlw	0
  1993  00164A  6E12               	movwf	wait_one_sec@k+1,c
  1994  00164C  0E00               	movlw	0
  1995  00164E  6E11               	movwf	wait_one_sec@k,c
  1996  001650                     l2966:
  1997  001650  BE12               	btfsc	wait_one_sec@k+1,7,c
  1998  001652  D008               	goto	l2970
  1999  001654  0E68               	movlw	104
  2000  001656  5C11               	subwf	wait_one_sec@k,w,c
  2001  001658  0E42               	movlw	66
  2002  00165A  5812               	subwfb	wait_one_sec@k+1,w,c
  2003  00165C  B0D8               	btfsc	status,0,c
  2004  00165E  D005               	goto	l171
  2005  001660  D001               	goto	l2970
  2006  001662  D003               	goto	l171
  2007  001664                     l2970:
  2008  001664  4A11               	infsnz	wait_one_sec@k,f,c
  2009  001666  2A12               	incf	wait_one_sec@k+1,f,c
  2010  001668  D7F3               	goto	l2966
  2011  00166A                     l171:
  2012  00166A  0012               	return		;funcret
  2013  00166C                     __end_of_wait_one_sec:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           prodh	equ	0xFF4
  2020                           prodl	equ	0xFF3
  2021                           intcon	equ	0xFF2
  2022                           intcon2	equ	0xFF1
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           postdec1	equ	0xFE5
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           postinc2	equ	0xFDE
  2029                           postdec2	equ	0xFDD
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _printf *****************
  2035 ;; Defined at:
  2036 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2039 ;;		 -> STR_2(13), STR_1(21), 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  idx             1   50[COMRAM] unsigned char 
  2042 ;;  val             4   55[COMRAM] unsigned long 
  2043 ;;  tmpval          4    0        struct .
  2044 ;;  cp              3    0        PTR const unsigned char 
  2045 ;;  width           2   59[COMRAM] int 
  2046 ;;  ap              2   53[COMRAM] PTR void [1]
  2047 ;;		 -> ?_printf(2), 
  2048 ;;  prec            2   51[COMRAM] int 
  2049 ;;  len             2    0        unsigned int 
  2050 ;;  c               1   62[COMRAM] char 
  2051 ;;  flag            1   61[COMRAM] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2   38[COMRAM] int 
  2054 ;; Registers used:
  2055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2061 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;Total ram usage:       25 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    4
  2068 ;; This function calls:
  2069 ;;		___lldiv
  2070 ;;		___llmod
  2071 ;;		___wmul
  2072 ;;		_isdigit
  2073 ;;		_putch
  2074 ;; This function is called by:
  2075 ;;		_main
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text2
  2080  00001C                     __ptext2:
  2081                           	opt stack 0
  2082  00001C                     _printf:
  2083                           	opt stack 26
  2084                           
  2085                           ;doprnt.c: 466: va_list ap;
  2086                           ;doprnt.c: 499: signed char c;
  2087                           ;doprnt.c: 501: int width;
  2088                           ;doprnt.c: 504: int prec;
  2089                           ;doprnt.c: 508: unsigned char flag;
  2090                           ;doprnt.c: 523: union {
  2091                           ;doprnt.c: 524: unsigned long vd;
  2092                           ;doprnt.c: 525: double integ;
  2093                           ;doprnt.c: 526: } tmpval;
  2094                           ;doprnt.c: 528: unsigned long val;
  2095                           ;doprnt.c: 529: unsigned len;
  2096                           ;doprnt.c: 530: const char * cp;
  2097                           ;doprnt.c: 533: *ap = __va_start();
  2098                           
  2099                           ;incstack = 0
  2100  00001C  0E29               	movlw	low (?_printf+2)
  2101  00001E  6E36               	movwf	printf@ap,c
  2102  000020  0E00               	movlw	high (?_printf+2)
  2103  000022  6E37               	movwf	printf@ap+1,c
  2104                           
  2105                           ;doprnt.c: 536: while(c = *f++) {
  2106  000024  D20D               	goto	l3852
  2107  000026                     l3714:
  2108                           
  2109                           ;doprnt.c: 538: if(c != '%')
  2110  000026  0E25               	movlw	37
  2111  000028  183F               	xorwf	printf@c,w,c
  2112  00002A  B4D8               	btfsc	status,2,c
  2113  00002C  D004               	goto	l3718
  2114                           
  2115                           ;doprnt.c: 540: {
  2116                           ;doprnt.c: 541: (putch(c) );
  2117  00002E  503F               	movf	printf@c,w,c
  2118  000030  EC96  F00B         	call	_putch
  2119                           
  2120                           ;doprnt.c: 542: continue;
  2121  000034  D205               	goto	l3852
  2122  000036                     l3718:
  2123                           
  2124                           ;doprnt.c: 543: }
  2125                           ;doprnt.c: 546: width = 0;
  2126  000036  0E00               	movlw	0
  2127  000038  6E3D               	movwf	printf@width+1,c
  2128  00003A  0E00               	movlw	0
  2129  00003C  6E3C               	movwf	printf@width,c
  2130                           
  2131                           ;doprnt.c: 548: flag = 0;
  2132  00003E  0E00               	movlw	0
  2133  000040  6E3E               	movwf	printf@flag,c
  2134                           
  2135                           ;doprnt.c: 551: switch(*f) {
  2136                           
  2137                           ;doprnt.c: 550: for(;;) {
  2138  000042  D005               	goto	l3724
  2139  000044                     l3720:
  2140                           
  2141                           ;doprnt.c: 580: flag |= 0x04;
  2142  000044  843E               	bsf	printf@flag,2,c
  2143                           
  2144                           ;doprnt.c: 581: f++;
  2145  000046  4A27               	infsnz	printf@f,f,c
  2146  000048  2A28               	incf	printf@f+1,f,c
  2147                           
  2148                           ;doprnt.c: 582: continue;
  2149  00004A  D001               	goto	l3724
  2150                           
  2151                           ;doprnt.c: 584: }
  2152  00004C  D00B               	goto	l3726
  2153  00004E                     l3724:
  2154  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2155  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2156  000056                     	if	0	;tblptru may be non-zero
  2157  000056                     	endif
  2158  000056                     	if	0	;tblptru may be non-zero
  2159  000056                     	endif
  2160  000056  0008               	tblrd		*
  2161  000058  50F5               	movf	tablat,w,c
  2162                           
  2163                           ; Switch size 1, requested type "space"
  2164                           ; Number of cases is 1, Range of values is 48 to 48
  2165                           ; switch strategies available:
  2166                           ; Name         Instructions Cycles
  2167                           ; simple_byte            4     3 (average)
  2168                           ;	Chosen strategy is simple_byte
  2169  00005A  0A30               	xorlw	48	; case 48
  2170  00005C  B4D8               	btfsc	status,2,c
  2171  00005E  D7F2               	goto	l3720
  2172                           
  2173                           ;doprnt.c: 585: break;
  2174  000060  D001               	goto	l3726
  2175                           
  2176                           ;doprnt.c: 586: }
  2177  000062  D7F5               	goto	l3724
  2178  000064                     l3726:
  2179                           
  2180                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2181  000064  C027  FFF6         	movff	printf@f,tblptrl
  2182  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2183  00006C                     	if	0	;tblptru may be non-zero
  2184  00006C                     	endif
  2185  00006C                     	if	0	;tblptru may be non-zero
  2186  00006C                     	endif
  2187  00006C  0008               	tblrd		*
  2188  00006E  50F5               	movf	tablat,w,c
  2189  000070  EC36  F00B         	call	_isdigit
  2190  000074  A0D8               	btfss	status,0,c
  2191  000076  D03D               	goto	l3744
  2192                           
  2193                           ;doprnt.c: 598: width = 0;
  2194  000078  0E00               	movlw	0
  2195  00007A  6E3D               	movwf	printf@width+1,c
  2196  00007C  0E00               	movlw	0
  2197  00007E  6E3C               	movwf	printf@width,c
  2198  000080  D000               	goto	l3730
  2199  000082                     l3730:
  2200                           
  2201                           ;doprnt.c: 600: width *= 10;
  2202  000082  C03C  F011         	movff	printf@width,___wmul@multiplier
  2203  000086  C03D  F012         	movff	printf@width+1,___wmul@multiplier+1
  2204  00008A  0E00               	movlw	0
  2205  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2206  00008E  0E0A               	movlw	10
  2207  000090  6E13               	movwf	___wmul@multiplicand,c
  2208  000092  EC10  F00B         	call	___wmul	;wreg free
  2209  000096  C011  F03C         	movff	?___wmul,printf@width
  2210  00009A  C012  F03D         	movff	?___wmul+1,printf@width+1
  2211                           
  2212                           ;doprnt.c: 601: width += *f++ - '0';
  2213  00009E  0ED0               	movlw	208
  2214  0000A0  6E2F               	movwf	??_printf& (0+255),c
  2215  0000A2  0EFF               	movlw	255
  2216  0000A4  6E30               	movwf	(??_printf+1)& (0+255),c
  2217  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2218  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2219  0000AE                     	if	0	;tblptru may be non-zero
  2220  0000AE                     	endif
  2221  0000AE                     	if	0	;tblptru may be non-zero
  2222  0000AE                     	endif
  2223  0000AE  0008               	tblrd		*
  2224  0000B0  50F5               	movf	tablat,w,c
  2225  0000B2  6E31               	movwf	(??_printf+2)& (0+255),c
  2226  0000B4  6A32               	clrf	(??_printf+3)& (0+255),c
  2227  0000B6  502F               	movf	??_printf,w,c
  2228  0000B8  2631               	addwf	??_printf+2,f,c
  2229  0000BA  5030               	movf	??_printf+1,w,c
  2230  0000BC  2232               	addwfc	??_printf+3,f,c
  2231  0000BE  5031               	movf	??_printf+2,w,c
  2232  0000C0  263C               	addwf	printf@width,f,c
  2233  0000C2  5032               	movf	??_printf+3,w,c
  2234  0000C4  223D               	addwfc	printf@width+1,f,c
  2235  0000C6  4A27               	infsnz	printf@f,f,c
  2236  0000C8  2A28               	incf	printf@f+1,f,c
  2237                           
  2238                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2239  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2240  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2241  0000D2                     	if	0	;tblptru may be non-zero
  2242  0000D2                     	endif
  2243  0000D2                     	if	0	;tblptru may be non-zero
  2244  0000D2                     	endif
  2245  0000D2  0008               	tblrd		*
  2246  0000D4  50F5               	movf	tablat,w,c
  2247  0000D6  EC36  F00B         	call	_isdigit
  2248  0000DA  A0D8               	btfss	status,0,c
  2249  0000DC  D00A               	goto	l3744
  2250  0000DE  D7D1               	goto	l3730
  2251                           
  2252                           ;doprnt.c: 635: switch(c = *f++) {
  2253                           
  2254                           ;doprnt.c: 608: }
  2255                           ;doprnt.c: 633: loop:
  2256  0000E0  D008               	goto	l3744
  2257                           
  2258                           ;doprnt.c: 638: goto alldone;
  2259                           
  2260                           ;doprnt.c: 637: case 0:
  2261  0000E2  D1BC               	goto	l458
  2262  0000E4                     l3738:
  2263                           
  2264                           ;doprnt.c: 643: flag |= 0x10;
  2265  0000E4  883E               	bsf	printf@flag,4,c
  2266                           
  2267                           ;doprnt.c: 644: goto loop;
  2268  0000E6  D005               	goto	l3744
  2269                           
  2270                           ;doprnt.c: 698: case 'i':
  2271                           ;doprnt.c: 699: break;
  2272                           
  2273                           ;doprnt.c: 697: case 'd':
  2274  0000E8  D01E               	goto	l417
  2275  0000EA                     l3740:
  2276                           
  2277                           ;doprnt.c: 721: flag |= 0x80;
  2278  0000EA  8E3E               	bsf	printf@flag,7,c
  2279                           
  2280                           ;doprnt.c: 723: break;
  2281  0000EC  D01C               	goto	l417
  2282                           
  2283                           ;doprnt.c: 813: continue;
  2284                           
  2285                           ;doprnt.c: 802: default:
  2286  0000EE  D1A8               	goto	l3852
  2287                           
  2288                           ;doprnt.c: 822: }
  2289  0000F0  D01A               	goto	l417
  2290  0000F2                     l3744:
  2291  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2292  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2293  0000FA  4A27               	infsnz	printf@f,f,c
  2294  0000FC  2A28               	incf	printf@f+1,f,c
  2295  0000FE                     	if	0	;tblptru may be non-zero
  2296  0000FE                     	endif
  2297  0000FE                     	if	0	;tblptru may be non-zero
  2298  0000FE                     	endif
  2299  0000FE  0008               	tblrd		*
  2300  000100  CFF5 F03F          	movff	tablat,printf@c
  2301  000104  503F               	movf	printf@c,w,c
  2302                           
  2303                           ; Switch size 1, requested type "space"
  2304                           ; Number of cases is 5, Range of values is 0 to 120
  2305                           ; switch strategies available:
  2306                           ; Name         Instructions Cycles
  2307                           ; simple_byte           16     9 (average)
  2308                           ;	Chosen strategy is simple_byte
  2309  000106  0A00               	xorlw	0	; case 0
  2310  000108  B4D8               	btfsc	status,2,c
  2311  00010A  D1A8               	goto	l458
  2312  00010C  0A64               	xorlw	100	; case 100
  2313  00010E  B4D8               	btfsc	status,2,c
  2314  000110  D00A               	goto	l417
  2315  000112  0A0D               	xorlw	13	; case 105
  2316  000114  B4D8               	btfsc	status,2,c
  2317  000116  D007               	goto	l417
  2318  000118  0A05               	xorlw	5	; case 108
  2319  00011A  B4D8               	btfsc	status,2,c
  2320  00011C  D7E3               	goto	l3738
  2321  00011E  0A14               	xorlw	20	; case 120
  2322  000120  B4D8               	btfsc	status,2,c
  2323  000122  D7E3               	goto	l3740
  2324  000124  D18D               	goto	l3852
  2325  000126                     l417:
  2326                           
  2327                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2328  000126  BE3E               	btfsc	printf@flag,7,c
  2329  000128  D02F               	goto	l420
  2330                           
  2331                           ;doprnt.c: 1253: {
  2332                           ;doprnt.c: 1255: if(flag & 0x10)
  2333  00012A  A83E               	btfss	printf@flag,4,c
  2334  00012C  D00E               	goto	l3752
  2335                           
  2336                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2337  00012E  C036  FFD9         	movff	printf@ap,fsr2l
  2338  000132  C037  FFDA         	movff	printf@ap+1,fsr2h
  2339  000136  CFDE F038          	movff	postinc2,printf@val
  2340  00013A  CFDE F039          	movff	postinc2,printf@val+1
  2341  00013E  CFDE F03A          	movff	postinc2,printf@val+2
  2342  000142  CFDE F03B          	movff	postinc2,printf@val+3
  2343  000146  0E04               	movlw	4
  2344  000148  D00E               	goto	L1
  2345  00014A                     l3752:
  2346                           
  2347                           ;doprnt.c: 1257: else
  2348                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2349  00014A  C036  FFD9         	movff	printf@ap,fsr2l
  2350  00014E  C037  FFDA         	movff	printf@ap+1,fsr2h
  2351  000152  CFDE F038          	movff	postinc2,printf@val
  2352  000156  CFDD F039          	movff	postdec2,printf@val+1
  2353  00015A  0E00               	movlw	0
  2354  00015C  BE39               	btfsc	printf@val+1,7,c
  2355  00015E  0EFF               	movlw	-1
  2356  000160  6E3A               	movwf	printf@val+2,c
  2357  000162  6E3B               	movwf	printf@val+3,c
  2358  000164  0E02               	movlw	2
  2359  000166                     L1:
  2360  000166  2636               	addwf	printf@ap,f,c
  2361  000168  0E00               	movlw	0
  2362  00016A  2237               	addwfc	printf@ap+1,f,c
  2363  00016C  D000               	goto	l3756
  2364  00016E                     l3756:
  2365                           
  2366                           ;doprnt.c: 1261: if((long)val < 0) {
  2367  00016E  AE3B               	btfss	printf@val+3,7,c
  2368  000170  D074               	goto	l3800
  2369                           
  2370                           ;doprnt.c: 1262: flag |= 0x03;
  2371  000172  0E03               	movlw	3
  2372  000174  123E               	iorwf	printf@flag,f,c
  2373                           
  2374                           ;doprnt.c: 1263: val = -val;
  2375  000176  1E3B               	comf	printf@val+3,f,c
  2376  000178  1E3A               	comf	printf@val+2,f,c
  2377  00017A  1E39               	comf	printf@val+1,f,c
  2378  00017C  6C38               	negf	printf@val,c
  2379  00017E  0E00               	movlw	0
  2380  000180  2239               	addwfc	printf@val+1,f,c
  2381  000182  223A               	addwfc	printf@val+2,f,c
  2382  000184  223B               	addwfc	printf@val+3,f,c
  2383                           
  2384                           ;doprnt.c: 1264: }
  2385                           ;doprnt.c: 1266: }
  2386  000186  D069               	goto	l3800
  2387  000188                     l420:
  2388                           
  2389                           ;doprnt.c: 1268: else
  2390                           ;doprnt.c: 1273: {
  2391                           ;doprnt.c: 1281: if(flag & 0x10)
  2392  000188  A83E               	btfss	printf@flag,4,c
  2393  00018A  D00E               	goto	l3766
  2394                           
  2395                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2396  00018C  C036  FFD9         	movff	printf@ap,fsr2l
  2397  000190  C037  FFDA         	movff	printf@ap+1,fsr2h
  2398  000194  CFDE F038          	movff	postinc2,printf@val
  2399  000198  CFDE F039          	movff	postinc2,printf@val+1
  2400  00019C  CFDE F03A          	movff	postinc2,printf@val+2
  2401  0001A0  CFDE F03B          	movff	postinc2,printf@val+3
  2402  0001A4  0E04               	movlw	4
  2403  0001A6  D00F               	goto	L2
  2404  0001A8                     l3766:
  2405                           
  2406                           ;doprnt.c: 1283: else
  2407                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2408  0001A8  C036  FFD9         	movff	printf@ap,fsr2l
  2409  0001AC  C037  FFDA         	movff	printf@ap+1,fsr2h
  2410  0001B0  CFDE F02F          	movff	postinc2,??_printf
  2411  0001B4  CFDD F030          	movff	postdec2,??_printf+1
  2412  0001B8  C02F  F038         	movff	??_printf,printf@val
  2413  0001BC  C030  F039         	movff	??_printf+1,printf@val+1
  2414  0001C0  6A3A               	clrf	printf@val+2,c
  2415  0001C2  6A3B               	clrf	printf@val+3,c
  2416  0001C4  0E02               	movlw	2
  2417  0001C6                     L2:
  2418  0001C6  2636               	addwf	printf@ap,f,c
  2419  0001C8  0E00               	movlw	0
  2420  0001CA  2237               	addwfc	printf@ap+1,f,c
  2421                           
  2422                           ;doprnt.c: 1287: }
  2423                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2424  0001CC  D046               	goto	l3800
  2425  0001CE                     l3770:
  2426                           
  2427                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2428  0001CE  0E01               	movlw	1
  2429  0001D0  6E3F               	movwf	printf@c,c
  2430  0001D2                     l3772:
  2431  0001D2  0E0A               	movlw	10
  2432  0001D4  183F               	xorwf	printf@c,w,c
  2433  0001D6  B4D8               	btfsc	status,2,c
  2434  0001D8  D049               	goto	l3802
  2435  0001DA  D001               	goto	l3776
  2436  0001DC  D047               	goto	l3802
  2437  0001DE                     l3776:
  2438                           
  2439                           ;doprnt.c: 1306: if(val < dpowers[c])
  2440  0001DE  503F               	movf	printf@c,w,c
  2441  0001E0  0D04               	mullw	4
  2442  0001E2  0E66               	movlw	low _dpowers
  2443  0001E4  24F3               	addwf	prodl,w,c
  2444  0001E6  6EF6               	movwf	tblptrl,c
  2445  0001E8  0EFF               	movlw	high _dpowers
  2446  0001EA  20F4               	addwfc	prodh,w,c
  2447  0001EC  6EF7               	movwf	tblptrh,c
  2448  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2449  0001EE                     	endif
  2450  0001EE  0009               	tblrd		*+
  2451  0001F0  50F5               	movf	tablat,w,c
  2452  0001F2  5C38               	subwf	printf@val,w,c
  2453  0001F4  0009               	tblrd		*+
  2454  0001F6  50F5               	movf	tablat,w,c
  2455  0001F8  5839               	subwfb	printf@val+1,w,c
  2456  0001FA  0009               	tblrd		*+
  2457  0001FC  50F5               	movf	tablat,w,c
  2458  0001FE  583A               	subwfb	printf@val+2,w,c
  2459  000200  0009               	tblrd		*+
  2460  000202  50F5               	movf	tablat,w,c
  2461  000204  583B               	subwfb	printf@val+3,w,c
  2462  000206  A0D8               	btfss	status,0,c
  2463  000208  D031               	goto	l3802
  2464  00020A  D001               	goto	l3780
  2465                           
  2466                           ;doprnt.c: 1307: break;
  2467  00020C  D02F               	goto	l3802
  2468  00020E                     l3780:
  2469  00020E  2A3F               	incf	printf@c,f,c
  2470  000210  D7E0               	goto	l3772
  2471                           
  2472                           ;doprnt.c: 1309: break;
  2473  000212  D02C               	goto	l3802
  2474  000214                     l3784:
  2475                           
  2476                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2477  000214  0E01               	movlw	1
  2478  000216  6E3F               	movwf	printf@c,c
  2479  000218                     l3786:
  2480  000218  0E08               	movlw	8
  2481  00021A  183F               	xorwf	printf@c,w,c
  2482  00021C  B4D8               	btfsc	status,2,c
  2483  00021E  D026               	goto	l3802
  2484  000220  D001               	goto	l3790
  2485  000222  D024               	goto	l3802
  2486  000224                     l3790:
  2487                           
  2488                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2489  000224  503F               	movf	printf@c,w,c
  2490  000226  0D04               	mullw	4
  2491  000228  0E8E               	movlw	low _hexpowers
  2492  00022A  24F3               	addwf	prodl,w,c
  2493  00022C  6EF6               	movwf	tblptrl,c
  2494  00022E  0EFF               	movlw	high _hexpowers
  2495  000230  20F4               	addwfc	prodh,w,c
  2496  000232  6EF7               	movwf	tblptrh,c
  2497  000234                     	if	0	;There are less than 3 active tblptr bytes
  2498  000234                     	endif
  2499  000234  0009               	tblrd		*+
  2500  000236  50F5               	movf	tablat,w,c
  2501  000238  5C38               	subwf	printf@val,w,c
  2502  00023A  0009               	tblrd		*+
  2503  00023C  50F5               	movf	tablat,w,c
  2504  00023E  5839               	subwfb	printf@val+1,w,c
  2505  000240  0009               	tblrd		*+
  2506  000242  50F5               	movf	tablat,w,c
  2507  000244  583A               	subwfb	printf@val+2,w,c
  2508  000246  0009               	tblrd		*+
  2509  000248  50F5               	movf	tablat,w,c
  2510  00024A  583B               	subwfb	printf@val+3,w,c
  2511  00024C  A0D8               	btfss	status,0,c
  2512  00024E  D00E               	goto	l3802
  2513  000250  D001               	goto	l3794
  2514                           
  2515                           ;doprnt.c: 1318: break;
  2516  000252  D00C               	goto	l3802
  2517  000254                     l3794:
  2518  000254  2A3F               	incf	printf@c,f,c
  2519  000256  D7E0               	goto	l3786
  2520                           
  2521                           ;doprnt.c: 1336: }
  2522                           
  2523                           ;doprnt.c: 1320: break;
  2524  000258  D009               	goto	l3802
  2525  00025A                     l3800:
  2526  00025A  503E               	movf	printf@flag,w,c
  2527  00025C  0B80               	andlw	128
  2528                           
  2529                           ; Switch size 1, requested type "space"
  2530                           ; Number of cases is 2, Range of values is 0 to 128
  2531                           ; switch strategies available:
  2532                           ; Name         Instructions Cycles
  2533                           ; simple_byte            7     4 (average)
  2534                           ;	Chosen strategy is simple_byte
  2535  00025E  0A00               	xorlw	0	; case 0
  2536  000260  B4D8               	btfsc	status,2,c
  2537  000262  D7B5               	goto	l3770
  2538  000264  0A80               	xorlw	128	; case 128
  2539  000266  B4D8               	btfsc	status,2,c
  2540  000268  D7D5               	goto	l3784
  2541  00026A  D000               	goto	l3802
  2542  00026C                     l3802:
  2543                           
  2544                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2545  00026C  503C               	movf	printf@width,w,c
  2546  00026E  103D               	iorwf	printf@width+1,w,c
  2547  000270  B4D8               	btfsc	status,2,c
  2548  000272  D00A               	goto	l3808
  2549  000274  C03E  F02F         	movff	printf@flag,??_printf
  2550  000278  0E03               	movlw	3
  2551  00027A  162F               	andwf	??_printf,f,c
  2552  00027C  B4D8               	btfsc	status,2,c
  2553  00027E  D004               	goto	l3808
  2554                           
  2555                           ;doprnt.c: 1346: width--;
  2556  000280  063C               	decf	printf@width,f,c
  2557  000282  A0D8               	btfss	status,0,c
  2558  000284  063D               	decf	printf@width+1,f,c
  2559  000286  D000               	goto	l3808
  2560  000288                     l3808:
  2561                           
  2562                           ;doprnt.c: 1381: if(width > c)
  2563  000288  0E80               	movlw	128
  2564  00028A  BE3F               	btfsc	printf@c,7,c
  2565  00028C  0E7F               	movlw	127
  2566  00028E  6E2F               	movwf	??_printf& (0+255),c
  2567  000290  503C               	movf	printf@width,w,c
  2568  000292  5C3F               	subwf	printf@c,w,c
  2569  000294  503D               	movf	printf@width+1,w,c
  2570  000296  0A80               	xorlw	128
  2571  000298  582F               	subwfb	??_printf& (0+255),w,c
  2572  00029A  B0D8               	btfsc	status,0,c
  2573  00029C  D007               	goto	l3812
  2574                           
  2575                           ;doprnt.c: 1382: width -= c;
  2576  00029E  503F               	movf	printf@c,w,c
  2577  0002A0  5E3C               	subwf	printf@width,f,c
  2578  0002A2  0E00               	movlw	0
  2579  0002A4  BE3F               	btfsc	printf@c,7,c
  2580  0002A6  0EFF               	movlw	255
  2581  0002A8  5A3D               	subwfb	printf@width+1,f,c
  2582  0002AA  D005               	goto	l3814
  2583  0002AC                     l3812:
  2584                           
  2585                           ;doprnt.c: 1383: else
  2586                           ;doprnt.c: 1384: width = 0;
  2587  0002AC  0E00               	movlw	0
  2588  0002AE  6E3D               	movwf	printf@width+1,c
  2589  0002B0  0E00               	movlw	0
  2590  0002B2  6E3C               	movwf	printf@width,c
  2591  0002B4  D000               	goto	l3814
  2592  0002B6                     l3814:
  2593                           
  2594                           ;doprnt.c: 1387: if(flag & 0x04) {
  2595  0002B6  A43E               	btfss	printf@flag,2,c
  2596  0002B8  D01A               	goto	l3826
  2597                           
  2598                           ;doprnt.c: 1392: if(flag & 0x03)
  2599  0002BA  C03E  F02F         	movff	printf@flag,??_printf
  2600  0002BE  0E03               	movlw	3
  2601  0002C0  162F               	andwf	??_printf,f,c
  2602  0002C2  B4D8               	btfsc	status,2,c
  2603  0002C4  D004               	goto	l3820
  2604                           
  2605                           ;doprnt.c: 1393: (putch('-') );
  2606  0002C6  0E2D               	movlw	45
  2607  0002C8  EC96  F00B         	call	_putch
  2608  0002CC  D000               	goto	l3820
  2609  0002CE                     l3820:
  2610                           
  2611                           ;doprnt.c: 1415: if(width)
  2612  0002CE  503C               	movf	printf@width,w,c
  2613  0002D0  103D               	iorwf	printf@width+1,w,c
  2614  0002D2  B4D8               	btfsc	status,2,c
  2615  0002D4  D026               	goto	l3836
  2616  0002D6                     l3822:
  2617                           
  2618                           ;doprnt.c: 1417: (putch('0') );
  2619  0002D6  0E30               	movlw	48
  2620  0002D8  EC96  F00B         	call	_putch
  2621                           
  2622                           ;doprnt.c: 1418: while(--width);
  2623  0002DC  063C               	decf	printf@width,f,c
  2624  0002DE  A0D8               	btfss	status,0,c
  2625  0002E0  063D               	decf	printf@width+1,f,c
  2626  0002E2  503C               	movf	printf@width,w,c
  2627  0002E4  103D               	iorwf	printf@width+1,w,c
  2628  0002E6  B4D8               	btfsc	status,2,c
  2629  0002E8  D01C               	goto	l3836
  2630  0002EA  D7F5               	goto	l3822
  2631                           
  2632                           ;doprnt.c: 1420: } else
  2633  0002EC  D01A               	goto	l3836
  2634  0002EE                     l3826:
  2635                           
  2636                           ;doprnt.c: 1422: {
  2637                           ;doprnt.c: 1424: if(width
  2638                           ;doprnt.c: 1428: )
  2639  0002EE  503C               	movf	printf@width,w,c
  2640  0002F0  103D               	iorwf	printf@width+1,w,c
  2641  0002F2  B4D8               	btfsc	status,2,c
  2642  0002F4  D00C               	goto	l3832
  2643  0002F6                     l3828:
  2644                           
  2645                           ;doprnt.c: 1430: (putch(' ') );
  2646  0002F6  0E20               	movlw	32
  2647  0002F8  EC96  F00B         	call	_putch
  2648                           
  2649                           ;doprnt.c: 1431: while(--width);
  2650  0002FC  063C               	decf	printf@width,f,c
  2651  0002FE  A0D8               	btfss	status,0,c
  2652  000300  063D               	decf	printf@width+1,f,c
  2653  000302  503C               	movf	printf@width,w,c
  2654  000304  103D               	iorwf	printf@width+1,w,c
  2655  000306  B4D8               	btfsc	status,2,c
  2656  000308  D002               	goto	l3832
  2657  00030A  D7F5               	goto	l3828
  2658  00030C  D000               	goto	l3832
  2659  00030E                     l3832:
  2660                           
  2661                           ;doprnt.c: 1438: if(flag & 0x03)
  2662  00030E  C03E  F02F         	movff	printf@flag,??_printf
  2663  000312  0E03               	movlw	3
  2664  000314  162F               	andwf	??_printf,f,c
  2665  000316  B4D8               	btfsc	status,2,c
  2666  000318  D004               	goto	l3836
  2667                           
  2668                           ;doprnt.c: 1439: (putch('-') );
  2669  00031A  0E2D               	movlw	45
  2670  00031C  EC96  F00B         	call	_putch
  2671  000320  D000               	goto	l3836
  2672  000322                     l3836:
  2673                           
  2674                           ;doprnt.c: 1469: }
  2675                           ;doprnt.c: 1472: prec = c;
  2676  000322  503F               	movf	printf@c,w,c
  2677  000324  6E34               	movwf	printf@prec,c
  2678  000326  6A35               	clrf	printf@prec+1,c
  2679  000328  BE34               	btfsc	printf@prec,7,c
  2680  00032A  0635               	decf	printf@prec+1,f,c
  2681                           
  2682                           ;doprnt.c: 1474: while(prec--) {
  2683  00032C  D07F               	goto	l3850
  2684                           
  2685                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2686  00032E  D071               	goto	l3846
  2687  000330                     l3838:
  2688                           
  2689                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2690  000330  C034  F02F         	movff	printf@prec,??_printf
  2691  000334  C035  F030         	movff	printf@prec+1,??_printf+1
  2692  000338  90D8               	bcf	status,0,c
  2693  00033A  362F               	rlcf	??_printf,f,c
  2694  00033C  3630               	rlcf	??_printf+1,f,c
  2695  00033E  90D8               	bcf	status,0,c
  2696  000340  362F               	rlcf	??_printf,f,c
  2697  000342  3630               	rlcf	??_printf+1,f,c
  2698  000344  0E66               	movlw	low _dpowers
  2699  000346  242F               	addwf	??_printf,w,c
  2700  000348  6EF6               	movwf	tblptrl,c
  2701  00034A  0EFF               	movlw	high _dpowers
  2702  00034C  2030               	addwfc	??_printf+1,w,c
  2703  00034E  6EF7               	movwf	tblptrh,c
  2704  000350                     	if	0	;There are less than 3 active tblptr bytes
  2705  000350                     	endif
  2706  000350  0009               	tblrd		*+
  2707  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2708  000356  0009               	tblrd		*+
  2709  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2710  00035C  0009               	tblrd		*+
  2711  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2712  000362  000A               	tblrd		*-
  2713  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2714  000368  C038  F011         	movff	printf@val,___lldiv@dividend
  2715  00036C  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2716  000370  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2717  000374  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2718  000378  EC16  F008         	call	___lldiv	;wreg free
  2719  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2720  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2721  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2722  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2723  00038C  0E0A               	movlw	10
  2724  00038E  6E22               	movwf	___llmod@divisor,c
  2725  000390  0E00               	movlw	0
  2726  000392  6E23               	movwf	___llmod@divisor+1,c
  2727  000394  0E00               	movlw	0
  2728  000396  6E24               	movwf	___llmod@divisor+2,c
  2729  000398  0E00               	movlw	0
  2730  00039A  6E25               	movwf	___llmod@divisor+3,c
  2731  00039C  EC1F  F009         	call	___llmod	;wreg free
  2732  0003A0  501E               	movf	?___llmod,w,c
  2733  0003A2  0F30               	addlw	48
  2734  0003A4  6E3F               	movwf	printf@c,c
  2735                           
  2736                           ;doprnt.c: 1491: break;
  2737  0003A6  D03E               	goto	l3848
  2738  0003A8                     l3840:
  2739                           
  2740                           ;doprnt.c: 1499: {
  2741                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2742  0003A8  C038  F011         	movff	printf@val,___lldiv@dividend
  2743  0003AC  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2744  0003B0  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2745  0003B4  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2746  0003B8  C034  F02F         	movff	printf@prec,??_printf
  2747  0003BC  C035  F030         	movff	printf@prec+1,??_printf+1
  2748  0003C0  90D8               	bcf	status,0,c
  2749  0003C2  362F               	rlcf	??_printf,f,c
  2750  0003C4  3630               	rlcf	??_printf+1,f,c
  2751  0003C6  90D8               	bcf	status,0,c
  2752  0003C8  362F               	rlcf	??_printf,f,c
  2753  0003CA  3630               	rlcf	??_printf+1,f,c
  2754  0003CC  0E8E               	movlw	low _hexpowers
  2755  0003CE  242F               	addwf	??_printf,w,c
  2756  0003D0  6EF6               	movwf	tblptrl,c
  2757  0003D2  0EFF               	movlw	high _hexpowers
  2758  0003D4  2030               	addwfc	??_printf+1,w,c
  2759  0003D6  6EF7               	movwf	tblptrh,c
  2760  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2761  0003D8                     	endif
  2762  0003D8  0009               	tblrd		*+
  2763  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2764  0003DE  0009               	tblrd		*+
  2765  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2766  0003E4  0009               	tblrd		*+
  2767  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2768  0003EA  000A               	tblrd		*-
  2769  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2770  0003F0  EC16  F008         	call	___lldiv	;wreg free
  2771  0003F4  5011               	movf	?___lldiv,w,c
  2772  0003F6  0B0F               	andlw	15
  2773  0003F8  6E33               	movwf	printf@idx,c
  2774                           
  2775                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2776  0003FA  5033               	movf	printf@idx,w,c
  2777  0003FC  0D01               	mullw	1
  2778  0003FE  0ED9               	movlw	low STR_5
  2779  000400  24F3               	addwf	prodl,w,c
  2780  000402  6EF6               	movwf	tblptrl,c
  2781  000404  0EFF               	movlw	high STR_5
  2782  000406  20F4               	addwfc	prodh,w,c
  2783  000408  6EF7               	movwf	tblptrh,c
  2784  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2785  00040A                     	endif
  2786  00040A  0008               	tblrd		*
  2787  00040C  CFF5 F03F          	movff	tablat,printf@c
  2788                           
  2789                           ;doprnt.c: 1523: }
  2790                           
  2791                           ;doprnt.c: 1508: }
  2792                           ;doprnt.c: 1510: break;
  2793  000410  D009               	goto	l3848
  2794  000412                     l3846:
  2795  000412  503E               	movf	printf@flag,w,c
  2796  000414  0B80               	andlw	128
  2797                           
  2798                           ; Switch size 1, requested type "space"
  2799                           ; Number of cases is 2, Range of values is 0 to 128
  2800                           ; switch strategies available:
  2801                           ; Name         Instructions Cycles
  2802                           ; simple_byte            7     4 (average)
  2803                           ;	Chosen strategy is simple_byte
  2804  000416  0A00               	xorlw	0	; case 0
  2805  000418  B4D8               	btfsc	status,2,c
  2806  00041A  D78A               	goto	l3838
  2807  00041C  0A80               	xorlw	128	; case 128
  2808  00041E  B4D8               	btfsc	status,2,c
  2809  000420  D7C3               	goto	l3840
  2810  000422  D000               	goto	l3848
  2811  000424                     l3848:
  2812                           
  2813                           ;doprnt.c: 1524: (putch(c) );
  2814  000424  503F               	movf	printf@c,w,c
  2815  000426  EC96  F00B         	call	_putch
  2816  00042A  D000               	goto	l3850
  2817  00042C                     l3850:
  2818  00042C  0634               	decf	printf@prec,f,c
  2819  00042E  A0D8               	btfss	status,0,c
  2820  000430  0635               	decf	printf@prec+1,f,c
  2821  000432  2834               	incf	printf@prec,w,c
  2822  000434  E1EE               	bnz	l3846
  2823  000436  2835               	incf	printf@prec+1,w,c
  2824  000438  B4D8               	btfsc	status,2,c
  2825  00043A  D002               	goto	l3852
  2826  00043C  D7EA               	goto	l3846
  2827  00043E  D000               	goto	l3852
  2828  000440                     l3852:
  2829  000440  C027  FFF6         	movff	printf@f,tblptrl
  2830  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2831  000448  4A27               	infsnz	printf@f,f,c
  2832  00044A  2A28               	incf	printf@f+1,f,c
  2833  00044C                     	if	0	;tblptru may be non-zero
  2834  00044C                     	endif
  2835  00044C                     	if	0	;tblptru may be non-zero
  2836  00044C                     	endif
  2837  00044C  0008               	tblrd		*
  2838  00044E  CFF5 F03F          	movff	tablat,printf@c
  2839  000452  503F               	movf	printf@c,w,c
  2840  000454  B4D8               	btfsc	status,2,c
  2841  000456  D002               	goto	l458
  2842  000458  D5E6               	goto	l3714
  2843  00045A  D000               	goto	l458
  2844  00045C                     l458:
  2845  00045C  0012               	return		;funcret
  2846  00045E                     __end_of_printf:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           intcon	equ	0xFF2
  2855                           intcon2	equ	0xFF1
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postdec1	equ	0xFE5
  2859                           fsr1l	equ	0xFE1
  2860                           indf2	equ	0xFDF
  2861                           postinc2	equ	0xFDE
  2862                           postdec2	equ	0xFDD
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _putch *****************
  2868 ;; Defined at:
  2869 ;;		line 88 in file "Lab10p1.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  c               1    wreg     unsigned char 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  c               1   16[COMRAM] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;		None               void
  2876 ;; Registers used:
  2877 ;;		wreg
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;Total ram usage:        1 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    3
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_printf
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text3
  2898  00172C                     __ptext3:
  2899                           	opt stack 0
  2900  00172C                     _putch:
  2901                           	opt stack 26
  2902                           
  2903                           ;incstack = 0
  2904                           ;putch@c stored from wreg
  2905  00172C  6E11               	movwf	putch@c,c
  2906                           
  2907                           ;Lab10p1.c: 90: while (!TRMT);
  2908  00172E  D000               	goto	l117
  2909  001730                     l117:
  2910  001730  A2AC               	btfss	4012,1,c	;volatile
  2911  001732  D7FE               	goto	l117
  2912                           
  2913                           ;Lab10p1.c: 91: TXREG = c;
  2914  001734  C011  FFAD         	movff	putch@c,4013	;volatile
  2915  001738  0012               	return		;funcret
  2916  00173A                     __end_of_putch:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           intcon2	equ	0xFF1
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           postdec1	equ	0xFE5
  2929                           fsr1l	equ	0xFE1
  2930                           indf2	equ	0xFDF
  2931                           postinc2	equ	0xFDE
  2932                           postdec2	equ	0xFDD
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function _isdigit *****************
  2938 ;; Defined at:
  2939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  c               1    wreg     unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  c               1   18[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;		None               void
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;Total ram usage:        3 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    3
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_printf
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text4
  2968  00166C                     __ptext4:
  2969                           	opt stack 0
  2970  00166C                     _isdigit:
  2971                           	opt stack 26
  2972                           
  2973                           ;incstack = 0
  2974                           ;isdigit@c stored from wreg
  2975  00166C  6E13               	movwf	isdigit@c,c
  2976  00166E  0E00               	movlw	0
  2977  001670  6E12               	movwf	_isdigit$1620,c
  2978  001672  0E3A               	movlw	58
  2979  001674  6013               	cpfslt	isdigit@c,c
  2980  001676  D006               	goto	l2706
  2981  001678  0E2F               	movlw	47
  2982  00167A  6413               	cpfsgt	isdigit@c,c
  2983  00167C  D003               	goto	l2706
  2984  00167E  0E01               	movlw	1
  2985  001680  6E12               	movwf	_isdigit$1620,c
  2986  001682  D000               	goto	l2706
  2987  001684                     l2706:
  2988  001684  C012  F011         	movff	_isdigit$1620,??_isdigit
  2989  001688  3011               	rrcf	??_isdigit,w,c
  2990  00168A  D000               	goto	l925
  2991  00168C                     l925:
  2992  00168C  0012               	return		;funcret
  2993  00168E                     __end_of_isdigit:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           intcon	equ	0xFF2
  3002                           intcon2	equ	0xFF1
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           indf2	equ	0xFDF
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function ___llmod *****************
  3015 ;; Defined at:
  3016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  dividend        4   29[COMRAM] unsigned long 
  3019 ;;  divisor         4   33[COMRAM] unsigned long 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  counter         1   37[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  4   29[COMRAM] unsigned long 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        9 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    3
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_printf
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text5
  3046  00123E                     __ptext5:
  3047                           	opt stack 0
  3048  00123E                     ___llmod:
  3049                           	opt stack 26
  3050                           
  3051                           ;incstack = 0
  3052  00123E  5022               	movf	___llmod@divisor,w,c
  3053  001240  1023               	iorwf	___llmod@divisor+1,w,c
  3054  001242  1024               	iorwf	___llmod@divisor+2,w,c
  3055  001244  1025               	iorwf	___llmod@divisor+3,w,c
  3056  001246  B4D8               	btfsc	status,2,c
  3057  001248  D029               	goto	l964
  3058  00124A  0E01               	movlw	1
  3059  00124C  6E26               	movwf	___llmod@counter,c
  3060  00124E  D007               	goto	l2738
  3061  001250                     l2736:
  3062  001250  90D8               	bcf	status,0,c
  3063  001252  3622               	rlcf	___llmod@divisor,f,c
  3064  001254  3623               	rlcf	___llmod@divisor+1,f,c
  3065  001256  3624               	rlcf	___llmod@divisor+2,f,c
  3066  001258  3625               	rlcf	___llmod@divisor+3,f,c
  3067  00125A  2A26               	incf	___llmod@counter,f,c
  3068  00125C  D000               	goto	l2738
  3069  00125E                     l2738:
  3070  00125E  BE25               	btfsc	___llmod@divisor+3,7,c
  3071  001260  D002               	goto	l2740
  3072  001262  D7F6               	goto	l2736
  3073  001264  D000               	goto	l2740
  3074  001266                     l2740:
  3075  001266  5022               	movf	___llmod@divisor,w,c
  3076  001268  5C1E               	subwf	___llmod@dividend,w,c
  3077  00126A  5023               	movf	___llmod@divisor+1,w,c
  3078  00126C  581F               	subwfb	___llmod@dividend+1,w,c
  3079  00126E  5024               	movf	___llmod@divisor+2,w,c
  3080  001270  5820               	subwfb	___llmod@dividend+2,w,c
  3081  001272  5025               	movf	___llmod@divisor+3,w,c
  3082  001274  5821               	subwfb	___llmod@dividend+3,w,c
  3083  001276  A0D8               	btfss	status,0,c
  3084  001278  D009               	goto	l2744
  3085  00127A  5022               	movf	___llmod@divisor,w,c
  3086  00127C  5E1E               	subwf	___llmod@dividend,f,c
  3087  00127E  5023               	movf	___llmod@divisor+1,w,c
  3088  001280  5A1F               	subwfb	___llmod@dividend+1,f,c
  3089  001282  5024               	movf	___llmod@divisor+2,w,c
  3090  001284  5A20               	subwfb	___llmod@dividend+2,f,c
  3091  001286  5025               	movf	___llmod@divisor+3,w,c
  3092  001288  5A21               	subwfb	___llmod@dividend+3,f,c
  3093  00128A  D000               	goto	l2744
  3094  00128C                     l2744:
  3095  00128C  90D8               	bcf	status,0,c
  3096  00128E  3225               	rrcf	___llmod@divisor+3,f,c
  3097  001290  3224               	rrcf	___llmod@divisor+2,f,c
  3098  001292  3223               	rrcf	___llmod@divisor+1,f,c
  3099  001294  3222               	rrcf	___llmod@divisor,f,c
  3100  001296  2E26               	decfsz	___llmod@counter,f,c
  3101  001298  D7E6               	goto	l2740
  3102  00129A  D000               	goto	l964
  3103  00129C                     l964:
  3104  00129C  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3105  0012A0  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3106  0012A4  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3107  0012A8  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3108  0012AC  0012               	return		;funcret
  3109  0012AE                     __end_of___llmod:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           prodh	equ	0xFF4
  3116                           prodl	equ	0xFF3
  3117                           intcon	equ	0xFF2
  3118                           intcon2	equ	0xFF1
  3119                           postinc0	equ	0xFEE
  3120                           wreg	equ	0xFE8
  3121                           postdec1	equ	0xFE5
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function ___lldiv *****************
  3131 ;; Defined at:
  3132 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  dividend        4   16[COMRAM] unsigned long 
  3135 ;;  divisor         4   20[COMRAM] unsigned long 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  quotient        4   24[COMRAM] unsigned long 
  3138 ;;  counter         1   28[COMRAM] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  4   16[COMRAM] unsigned long 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:       13 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    3
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_printf
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text6
  3163  00102C                     __ptext6:
  3164                           	opt stack 0
  3165  00102C                     ___lldiv:
  3166                           	opt stack 26
  3167                           
  3168                           ;incstack = 0
  3169  00102C  0E00               	movlw	0
  3170  00102E  6E19               	movwf	___lldiv@quotient,c
  3171  001030  0E00               	movlw	0
  3172  001032  6E1A               	movwf	___lldiv@quotient+1,c
  3173  001034  0E00               	movlw	0
  3174  001036  6E1B               	movwf	___lldiv@quotient+2,c
  3175  001038  0E00               	movlw	0
  3176  00103A  6E1C               	movwf	___lldiv@quotient+3,c
  3177  00103C  5015               	movf	___lldiv@divisor,w,c
  3178  00103E  1016               	iorwf	___lldiv@divisor+1,w,c
  3179  001040  1017               	iorwf	___lldiv@divisor+2,w,c
  3180  001042  1018               	iorwf	___lldiv@divisor+3,w,c
  3181  001044  B4D8               	btfsc	status,2,c
  3182  001046  D02F               	goto	l954
  3183  001048  0E01               	movlw	1
  3184  00104A  6E1D               	movwf	___lldiv@counter,c
  3185  00104C  D007               	goto	l2718
  3186  00104E                     l2716:
  3187  00104E  90D8               	bcf	status,0,c
  3188  001050  3615               	rlcf	___lldiv@divisor,f,c
  3189  001052  3616               	rlcf	___lldiv@divisor+1,f,c
  3190  001054  3617               	rlcf	___lldiv@divisor+2,f,c
  3191  001056  3618               	rlcf	___lldiv@divisor+3,f,c
  3192  001058  2A1D               	incf	___lldiv@counter,f,c
  3193  00105A  D000               	goto	l2718
  3194  00105C                     l2718:
  3195  00105C  BE18               	btfsc	___lldiv@divisor+3,7,c
  3196  00105E  D002               	goto	l2720
  3197  001060  D7F6               	goto	l2716
  3198  001062  D000               	goto	l2720
  3199  001064                     l2720:
  3200  001064  90D8               	bcf	status,0,c
  3201  001066  3619               	rlcf	___lldiv@quotient,f,c
  3202  001068  361A               	rlcf	___lldiv@quotient+1,f,c
  3203  00106A  361B               	rlcf	___lldiv@quotient+2,f,c
  3204  00106C  361C               	rlcf	___lldiv@quotient+3,f,c
  3205  00106E  5015               	movf	___lldiv@divisor,w,c
  3206  001070  5C11               	subwf	___lldiv@dividend,w,c
  3207  001072  5016               	movf	___lldiv@divisor+1,w,c
  3208  001074  5812               	subwfb	___lldiv@dividend+1,w,c
  3209  001076  5017               	movf	___lldiv@divisor+2,w,c
  3210  001078  5813               	subwfb	___lldiv@dividend+2,w,c
  3211  00107A  5018               	movf	___lldiv@divisor+3,w,c
  3212  00107C  5814               	subwfb	___lldiv@dividend+3,w,c
  3213  00107E  A0D8               	btfss	status,0,c
  3214  001080  D00A               	goto	l2728
  3215  001082  5015               	movf	___lldiv@divisor,w,c
  3216  001084  5E11               	subwf	___lldiv@dividend,f,c
  3217  001086  5016               	movf	___lldiv@divisor+1,w,c
  3218  001088  5A12               	subwfb	___lldiv@dividend+1,f,c
  3219  00108A  5017               	movf	___lldiv@divisor+2,w,c
  3220  00108C  5A13               	subwfb	___lldiv@dividend+2,f,c
  3221  00108E  5018               	movf	___lldiv@divisor+3,w,c
  3222  001090  5A14               	subwfb	___lldiv@dividend+3,f,c
  3223  001092  8019               	bsf	___lldiv@quotient,0,c
  3224  001094  D000               	goto	l2728
  3225  001096                     l2728:
  3226  001096  90D8               	bcf	status,0,c
  3227  001098  3218               	rrcf	___lldiv@divisor+3,f,c
  3228  00109A  3217               	rrcf	___lldiv@divisor+2,f,c
  3229  00109C  3216               	rrcf	___lldiv@divisor+1,f,c
  3230  00109E  3215               	rrcf	___lldiv@divisor,f,c
  3231  0010A0  2E1D               	decfsz	___lldiv@counter,f,c
  3232  0010A2  D7E0               	goto	l2720
  3233  0010A4  D000               	goto	l954
  3234  0010A6                     l954:
  3235  0010A6  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3236  0010AA  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3237  0010AE  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3238  0010B2  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3239  0010B6  0012               	return		;funcret
  3240  0010B8                     __end_of___lldiv:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           postinc0	equ	0xFEE
  3251                           wreg	equ	0xFE8
  3252                           postdec1	equ	0xFE5
  3253                           fsr1l	equ	0xFE1
  3254                           indf2	equ	0xFDF
  3255                           postinc2	equ	0xFDE
  3256                           postdec2	equ	0xFDD
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _init_UART *****************
  3262 ;; Defined at:
  3263 ;;		line 93 in file "Lab10p1.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;		None               void
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        0 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    4
  3284 ;; This function calls:
  3285 ;;		_OpenUSART
  3286 ;; This function is called by:
  3287 ;;		_main
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text7
  3292  0016C0                     __ptext7:
  3293                           	opt stack 0
  3294  0016C0                     _init_UART:
  3295                           	opt stack 26
  3296                           
  3297                           ;Lab10p1.c: 95: OpenUSART (0b01111111 & 0b10111111 &
  3298                           ;Lab10p1.c: 96: 0b11111110 & 0b11111101 & 0b11111111 &
  3299                           ;Lab10p1.c: 97: 0b11111111, 25);
  3300                           
  3301                           ;incstack = 0
  3302  0016C0  0E00               	movlw	0
  3303  0016C2  6E12               	movwf	OpenUSART@spbrg+1,c
  3304  0016C4  0E19               	movlw	25
  3305  0016C6  6E11               	movwf	OpenUSART@spbrg,c
  3306  0016C8  0E3C               	movlw	60
  3307  0016CA  EC57  F009         	call	_OpenUSART
  3308                           
  3309                           ;Lab10p1.c: 98: OSCCON = 0x60;
  3310  0016CE  0E60               	movlw	96
  3311  0016D0  6ED3               	movwf	4051,c	;volatile
  3312  0016D2  0012               	return		;funcret
  3313  0016D4                     __end_of_init_UART:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           postdec1	equ	0xFE5
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           postinc2	equ	0xFDE
  3329                           postdec2	equ	0xFDD
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function _OpenUSART *****************
  3335 ;; Defined at:
  3336 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  config          1    wreg     unsigned char 
  3339 ;;  spbrg           2   16[COMRAM] unsigned int 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  config          1   18[COMRAM] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, status,2
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:        3 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    3
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_init_UART
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text8
  3366  0012AE                     __ptext8:
  3367                           	opt stack 0
  3368  0012AE                     _OpenUSART:
  3369                           	opt stack 26
  3370                           
  3371                           ;incstack = 0
  3372                           ;OpenUSART@config stored from wreg
  3373  0012AE  6E13               	movwf	OpenUSART@config,c
  3374  0012B0  0E00               	movlw	0
  3375  0012B2  6EAC               	movwf	4012,c	;volatile
  3376  0012B4  0E00               	movlw	0
  3377  0012B6  6EAB               	movwf	4011,c	;volatile
  3378  0012B8  A013               	btfss	OpenUSART@config,0,c
  3379  0012BA  D002               	goto	l2556
  3380  0012BC  88AC               	bsf	4012,4,c	;volatile
  3381  0012BE  D000               	goto	l2556
  3382  0012C0                     l2556:
  3383  0012C0  A213               	btfss	OpenUSART@config,1,c
  3384  0012C2  D003               	goto	l2560
  3385  0012C4  8CAC               	bsf	4012,6,c	;volatile
  3386  0012C6  8CAB               	bsf	4011,6,c	;volatile
  3387  0012C8  D000               	goto	l2560
  3388  0012CA                     l2560:
  3389  0012CA  A413               	btfss	OpenUSART@config,2,c
  3390  0012CC  D002               	goto	l2564
  3391  0012CE  8EAC               	bsf	4012,7,c	;volatile
  3392  0012D0  D000               	goto	l2564
  3393  0012D2                     l2564:
  3394  0012D2  A613               	btfss	OpenUSART@config,3,c
  3395  0012D4  D002               	goto	l482
  3396  0012D6  88AB               	bsf	4011,4,c	;volatile
  3397  0012D8  D002               	goto	l2568
  3398  0012DA                     l482:
  3399  0012DA  8AAB               	bsf	4011,5,c	;volatile
  3400  0012DC  D000               	goto	l2568
  3401  0012DE                     l2568:
  3402  0012DE  B813               	btfsc	OpenUSART@config,4,c
  3403  0012E0  84AC               	bsf	4012,2,c	;volatile
  3404  0012E2  989E               	bcf	3998,4,c	;volatile
  3405  0012E4  AA13               	btfss	OpenUSART@config,5,c
  3406  0012E6  D002               	goto	l2576
  3407  0012E8  86AB               	bsf	4011,3,c	;volatile
  3408  0012EA  D000               	goto	l2576
  3409  0012EC                     l2576:
  3410  0012EC  AC13               	btfss	OpenUSART@config,6,c
  3411  0012EE  D002               	goto	l486
  3412  0012F0  8A9D               	bsf	3997,5,c	;volatile
  3413  0012F2  D001               	goto	l487
  3414  0012F4                     l486:
  3415  0012F4  9A9D               	bcf	3997,5,c	;volatile
  3416  0012F6                     l487:
  3417  0012F6  9A9E               	bcf	3998,5,c	;volatile
  3418  0012F8  AE13               	btfss	OpenUSART@config,7,c
  3419  0012FA  D002               	goto	l488
  3420  0012FC  889D               	bsf	3997,4,c	;volatile
  3421  0012FE  D001               	goto	l489
  3422  001300                     l488:
  3423  001300  989D               	bcf	3997,4,c	;volatile
  3424  001302                     l489:
  3425  001302  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3426  001306  5012               	movf	OpenUSART@spbrg+1,w,c
  3427  001308  6EB0               	movwf	4016,c	;volatile
  3428  00130A  8AAC               	bsf	4012,5,c	;volatile
  3429  00130C  8EAB               	bsf	4011,7,c	;volatile
  3430  00130E  9C94               	bcf	3988,6,c	;volatile
  3431  001310  8E94               	bsf	3988,7,c	;volatile
  3432  001312  B8AC               	btfsc	4012,4,c	;volatile
  3433  001314  BEAC               	btfsc	4012,7,c	;volatile
  3434  001316  D002               	goto	l491
  3435  001318  8C94               	bsf	3988,6,c	;volatile
  3436  00131A  D000               	goto	l491
  3437  00131C                     l491:
  3438  00131C  0012               	return		;funcret
  3439  00131E                     __end_of_OpenUSART:
  3440                           	opt stack 0
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           intcon2	equ	0xFF1
  3449                           postinc0	equ	0xFEE
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _fillCircle *****************
  3461 ;; Defined at:
  3462 ;;		line 614 in file "ST7735_TFT.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  x0              2   58[COMRAM] int 
  3465 ;;  y0              2   60[COMRAM] int 
  3466 ;;  r               2   62[COMRAM] int 
  3467 ;;  color           2   64[COMRAM] unsigned int 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;		None               void
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        8 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    8
  3486 ;; This function calls:
  3487 ;;		_drawFastVLine
  3488 ;;		_fillCircleHelper
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text9
  3495  0013DC                     __ptext9:
  3496                           	opt stack 0
  3497  0013DC                     _fillCircle:
  3498                           	opt stack 22
  3499                           
  3500                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3501                           
  3502                           ;incstack = 0
  3503  0013DC  503F               	movf	fillCircle@r,w,c
  3504  0013DE  0800               	sublw	0
  3505  0013E0  243D               	addwf	fillCircle@y0,w,c
  3506  0013E2  6E18               	movwf	drawFastVLine@y,c
  3507  0013E4  80D8               	bsf	status,0,c
  3508  0013E6  343F               	rlcf	fillCircle@r,w,c
  3509  0013E8  6E19               	movwf	drawFastVLine@h,c
  3510  0013EA  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3511  0013EE  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3512  0013F2  503B               	movf	fillCircle@x0,w,c
  3513  0013F4  EC5C  F008         	call	_drawFastVLine
  3514                           
  3515                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3516  0013F8  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3517  0013FC  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3518  001400  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3519  001404  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3520  001408  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3521  00140C  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3522  001410  0E00               	movlw	0
  3523  001412  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3524  001414  0E03               	movlw	3
  3525  001416  6E29               	movwf	fillCircleHelper@cornername,c
  3526  001418  0E00               	movlw	0
  3527  00141A  6E2C               	movwf	fillCircleHelper@delta+1,c
  3528  00141C  0E00               	movlw	0
  3529  00141E  6E2B               	movwf	fillCircleHelper@delta,c
  3530  001420  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3531  001424  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3532  001428  EC3F  F005         	call	_fillCircleHelper	;wreg free
  3533  00142C  0012               	return		;funcret
  3534  00142E                     __end_of_fillCircle:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           intcon	equ	0xFF2
  3543                           intcon2	equ	0xFF1
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _fillCircleHelper *****************
  3556 ;; Defined at:
  3557 ;;		line 589 in file "ST7735_TFT.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  x0              2   34[COMRAM] int 
  3560 ;;  y0              2   36[COMRAM] int 
  3561 ;;  r               2   38[COMRAM] int 
  3562 ;;  cornername      2   40[COMRAM] unsigned int 
  3563 ;;  delta           2   42[COMRAM] int 
  3564 ;;  color           2   44[COMRAM] unsigned int 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  y               2   56[COMRAM] int 
  3567 ;;  x               2   54[COMRAM] int 
  3568 ;;  f               2   52[COMRAM] int 
  3569 ;;  ddF_y           2   50[COMRAM] int 
  3570 ;;  ddF_x           2   48[COMRAM] int 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3580 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;Total ram usage:       24 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    7
  3587 ;; This function calls:
  3588 ;;		_drawFastVLine
  3589 ;; This function is called by:
  3590 ;;		_fillCircle
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text10
  3595  000A7E                     __ptext10:
  3596                           	opt stack 0
  3597  000A7E                     _fillCircleHelper:
  3598                           	opt stack 22
  3599                           
  3600                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3601                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3602                           
  3603                           ;incstack = 0
  3604  000A7E  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3605  000A82  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3606  000A86  1E2F               	comf	??_fillCircleHelper,f,c
  3607  000A88  1E30               	comf	??_fillCircleHelper+1,f,c
  3608  000A8A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3609  000A8C  2A30               	incf	??_fillCircleHelper+1,f,c
  3610  000A8E  0E01               	movlw	1
  3611  000A90  242F               	addwf	??_fillCircleHelper,w,c
  3612  000A92  6E35               	movwf	fillCircleHelper@f,c
  3613  000A94  0E00               	movlw	0
  3614  000A96  2030               	addwfc	??_fillCircleHelper+1,w,c
  3615  000A98  6E36               	movwf	fillCircleHelper@f+1,c
  3616  000A9A  0E00               	movlw	0
  3617  000A9C  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3618  000A9E  0E01               	movlw	1
  3619  000AA0  6E31               	movwf	fillCircleHelper@ddF_x,c
  3620  000AA2  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3621  000AA6  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3622  000AAA  90D8               	bcf	status,0,c
  3623  000AAC  362F               	rlcf	??_fillCircleHelper,f,c
  3624  000AAE  3630               	rlcf	??_fillCircleHelper+1,f,c
  3625  000AB0  1E2F               	comf	??_fillCircleHelper,f,c
  3626  000AB2  1E30               	comf	??_fillCircleHelper+1,f,c
  3627  000AB4  4A2F               	infsnz	??_fillCircleHelper,f,c
  3628  000AB6  2A30               	incf	??_fillCircleHelper+1,f,c
  3629  000AB8  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3630  000ABC  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3631  000AC0  0E00               	movlw	0
  3632  000AC2  6E38               	movwf	fillCircleHelper@x+1,c
  3633  000AC4  0E00               	movlw	0
  3634  000AC6  6E37               	movwf	fillCircleHelper@x,c
  3635  000AC8  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3636  000ACC  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3637                           
  3638                           ;ST7735_TFT.c: 593: while (x<y) {
  3639  000AD0  D067               	goto	l3696
  3640  000AD2                     l3676:
  3641                           
  3642                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3643  000AD2  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3644  000AD4  D00B               	goto	l351
  3645                           
  3646                           ;ST7735_TFT.c: 595: y--;
  3647  000AD6  0639               	decf	fillCircleHelper@y,f,c
  3648  000AD8  A0D8               	btfss	status,0,c
  3649  000ADA  063A               	decf	fillCircleHelper@y+1,f,c
  3650                           
  3651                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3652  000ADC  0E02               	movlw	2
  3653  000ADE  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3654  000AE0  0E00               	movlw	0
  3655  000AE2  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3656                           
  3657                           ;ST7735_TFT.c: 597: f += ddF_y;
  3658  000AE4  5033               	movf	fillCircleHelper@ddF_y,w,c
  3659  000AE6  2635               	addwf	fillCircleHelper@f,f,c
  3660  000AE8  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3661  000AEA  2236               	addwfc	fillCircleHelper@f+1,f,c
  3662  000AEC                     l351:
  3663                           
  3664                           ;ST7735_TFT.c: 598: }
  3665                           ;ST7735_TFT.c: 599: x++;
  3666  000AEC  4A37               	infsnz	fillCircleHelper@x,f,c
  3667  000AEE  2A38               	incf	fillCircleHelper@x+1,f,c
  3668                           
  3669                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3670  000AF0  0E02               	movlw	2
  3671  000AF2  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3672  000AF4  0E00               	movlw	0
  3673  000AF6  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3674                           
  3675                           ;ST7735_TFT.c: 601: f += ddF_x;
  3676  000AF8  5031               	movf	fillCircleHelper@ddF_x,w,c
  3677  000AFA  2635               	addwf	fillCircleHelper@f,f,c
  3678  000AFC  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3679  000AFE  2236               	addwfc	fillCircleHelper@f+1,f,c
  3680                           
  3681                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3682  000B00  A029               	btfss	fillCircleHelper@cornername,0,c
  3683  000B02  D025               	goto	l3692
  3684                           
  3685                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3686  000B04  5039               	movf	fillCircleHelper@y,w,c
  3687  000B06  0800               	sublw	0
  3688  000B08  2425               	addwf	fillCircleHelper@y0,w,c
  3689  000B0A  6E18               	movwf	drawFastVLine@y,c
  3690  000B0C  5039               	movf	fillCircleHelper@y,w,c
  3691  000B0E  2439               	addwf	fillCircleHelper@y,w,c
  3692  000B10  242B               	addwf	fillCircleHelper@delta,w,c
  3693  000B12  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3694  000B14  282F               	incf	??_fillCircleHelper,w,c
  3695  000B16  6E19               	movwf	drawFastVLine@h,c
  3696  000B18  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3697  000B1C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3698  000B20  5023               	movf	fillCircleHelper@x0,w,c
  3699  000B22  2437               	addwf	fillCircleHelper@x,w,c
  3700  000B24  EC5C  F008         	call	_drawFastVLine
  3701                           
  3702                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3703  000B28  5037               	movf	fillCircleHelper@x,w,c
  3704  000B2A  0800               	sublw	0
  3705  000B2C  2425               	addwf	fillCircleHelper@y0,w,c
  3706  000B2E  6E18               	movwf	drawFastVLine@y,c
  3707  000B30  5037               	movf	fillCircleHelper@x,w,c
  3708  000B32  2437               	addwf	fillCircleHelper@x,w,c
  3709  000B34  242B               	addwf	fillCircleHelper@delta,w,c
  3710  000B36  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3711  000B38  282F               	incf	??_fillCircleHelper,w,c
  3712  000B3A  6E19               	movwf	drawFastVLine@h,c
  3713  000B3C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3714  000B40  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3715  000B44  5023               	movf	fillCircleHelper@x0,w,c
  3716  000B46  2439               	addwf	fillCircleHelper@y,w,c
  3717  000B48  EC5C  F008         	call	_drawFastVLine
  3718  000B4C  D000               	goto	l3692
  3719  000B4E                     l3692:
  3720                           
  3721                           ;ST7735_TFT.c: 606: }
  3722                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3723  000B4E  A229               	btfss	fillCircleHelper@cornername,1,c
  3724  000B50  D027               	goto	l3696
  3725                           
  3726                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3727  000B52  5039               	movf	fillCircleHelper@y,w,c
  3728  000B54  0800               	sublw	0
  3729  000B56  2425               	addwf	fillCircleHelper@y0,w,c
  3730  000B58  6E18               	movwf	drawFastVLine@y,c
  3731  000B5A  5039               	movf	fillCircleHelper@y,w,c
  3732  000B5C  2439               	addwf	fillCircleHelper@y,w,c
  3733  000B5E  242B               	addwf	fillCircleHelper@delta,w,c
  3734  000B60  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3735  000B62  282F               	incf	??_fillCircleHelper,w,c
  3736  000B64  6E19               	movwf	drawFastVLine@h,c
  3737  000B66  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3738  000B6A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3739  000B6E  5037               	movf	fillCircleHelper@x,w,c
  3740  000B70  0800               	sublw	0
  3741  000B72  2423               	addwf	fillCircleHelper@x0,w,c
  3742  000B74  EC5C  F008         	call	_drawFastVLine
  3743                           
  3744                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3745  000B78  5037               	movf	fillCircleHelper@x,w,c
  3746  000B7A  0800               	sublw	0
  3747  000B7C  2425               	addwf	fillCircleHelper@y0,w,c
  3748  000B7E  6E18               	movwf	drawFastVLine@y,c
  3749  000B80  5037               	movf	fillCircleHelper@x,w,c
  3750  000B82  2437               	addwf	fillCircleHelper@x,w,c
  3751  000B84  242B               	addwf	fillCircleHelper@delta,w,c
  3752  000B86  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3753  000B88  282F               	incf	??_fillCircleHelper,w,c
  3754  000B8A  6E19               	movwf	drawFastVLine@h,c
  3755  000B8C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3756  000B90  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3757  000B94  5039               	movf	fillCircleHelper@y,w,c
  3758  000B96  0800               	sublw	0
  3759  000B98  2423               	addwf	fillCircleHelper@x0,w,c
  3760  000B9A  EC5C  F008         	call	_drawFastVLine
  3761  000B9E  D000               	goto	l3696
  3762  000BA0                     l3696:
  3763  000BA0  5039               	movf	fillCircleHelper@y,w,c
  3764  000BA2  5C37               	subwf	fillCircleHelper@x,w,c
  3765  000BA4  5038               	movf	fillCircleHelper@x+1,w,c
  3766  000BA6  0A80               	xorlw	128
  3767  000BA8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3768  000BAA  503A               	movf	fillCircleHelper@y+1,w,c
  3769  000BAC  0A80               	xorlw	128
  3770  000BAE  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3771  000BB0  A0D8               	btfss	status,0,c
  3772  000BB2  D78F               	goto	l3676
  3773  000BB4  0012               	return		;funcret
  3774  000BB6                     __end_of_fillCircleHelper:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           intcon	equ	0xFF2
  3783                           intcon2	equ	0xFF1
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function _drawCircle *****************
  3796 ;; Defined at:
  3797 ;;		line 528 in file "ST7735_TFT.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  x0              2   27[COMRAM] int 
  3800 ;;  y0              2   29[COMRAM] int 
  3801 ;;  r               2   31[COMRAM] int 
  3802 ;;  color           2   33[COMRAM] unsigned int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  y               2   45[COMRAM] int 
  3805 ;;  x               2   43[COMRAM] int 
  3806 ;;  f               2   41[COMRAM] int 
  3807 ;;  ddF_y           2   39[COMRAM] int 
  3808 ;;  ddF_x           2   37[COMRAM] int 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;		None               void
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3818 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;Total ram usage:       20 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    7
  3825 ;; This function calls:
  3826 ;;		_drawPixel
  3827 ;; This function is called by:
  3828 ;;		_main
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text11
  3833  000626                     __ptext11:
  3834                           	opt stack 0
  3835  000626                     _drawCircle:
  3836                           	opt stack 23
  3837                           
  3838                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3839                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3840                           
  3841                           ;incstack = 0
  3842  000626  C020  F024         	movff	drawCircle@r,??_drawCircle
  3843  00062A  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3844  00062E  1E24               	comf	??_drawCircle,f,c
  3845  000630  1E25               	comf	??_drawCircle+1,f,c
  3846  000632  4A24               	infsnz	??_drawCircle,f,c
  3847  000634  2A25               	incf	??_drawCircle+1,f,c
  3848  000636  0E01               	movlw	1
  3849  000638  2424               	addwf	??_drawCircle,w,c
  3850  00063A  6E2A               	movwf	drawCircle@f,c
  3851  00063C  0E00               	movlw	0
  3852  00063E  2025               	addwfc	??_drawCircle+1,w,c
  3853  000640  6E2B               	movwf	drawCircle@f+1,c
  3854  000642  0E00               	movlw	0
  3855  000644  6E27               	movwf	drawCircle@ddF_x+1,c
  3856  000646  0E01               	movlw	1
  3857  000648  6E26               	movwf	drawCircle@ddF_x,c
  3858  00064A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3859  00064E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3860  000652  90D8               	bcf	status,0,c
  3861  000654  3624               	rlcf	??_drawCircle,f,c
  3862  000656  3625               	rlcf	??_drawCircle+1,f,c
  3863  000658  1E24               	comf	??_drawCircle,f,c
  3864  00065A  1E25               	comf	??_drawCircle+1,f,c
  3865  00065C  4A24               	infsnz	??_drawCircle,f,c
  3866  00065E  2A25               	incf	??_drawCircle+1,f,c
  3867  000660  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3868  000664  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3869  000668  0E00               	movlw	0
  3870  00066A  6E2D               	movwf	drawCircle@x+1,c
  3871  00066C  0E00               	movlw	0
  3872  00066E  6E2C               	movwf	drawCircle@x,c
  3873  000670  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3874  000674  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3875                           
  3876                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3877  000678  501E               	movf	drawCircle@y0,w,c
  3878  00067A  2420               	addwf	drawCircle@r,w,c
  3879  00067C  6E18               	movwf	drawPixel@y,c
  3880  00067E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3881  000682  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3882  000686  501C               	movf	drawCircle@x0,w,c
  3883  000688  ECE3  F00A         	call	_drawPixel
  3884                           
  3885                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3886  00068C  5020               	movf	drawCircle@r,w,c
  3887  00068E  0800               	sublw	0
  3888  000690  241E               	addwf	drawCircle@y0,w,c
  3889  000692  6E18               	movwf	drawPixel@y,c
  3890  000694  C022  F019         	movff	drawCircle@color,drawPixel@color
  3891  000698  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3892  00069C  501C               	movf	drawCircle@x0,w,c
  3893  00069E  ECE3  F00A         	call	_drawPixel
  3894                           
  3895                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3896  0006A2  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3897  0006A6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3898  0006AA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3899  0006AE  501C               	movf	drawCircle@x0,w,c
  3900  0006B0  2420               	addwf	drawCircle@r,w,c
  3901  0006B2  ECE3  F00A         	call	_drawPixel
  3902                           
  3903                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3904  0006B6  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3905  0006BA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3906  0006BE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3907  0006C2  5020               	movf	drawCircle@r,w,c
  3908  0006C4  0800               	sublw	0
  3909  0006C6  241C               	addwf	drawCircle@x0,w,c
  3910  0006C8  ECE3  F00A         	call	_drawPixel
  3911                           
  3912                           ;ST7735_TFT.c: 536: while (x < y) {
  3913  0006CC  D078               	goto	l3902
  3914  0006CE                     l3874:
  3915                           
  3916                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3917  0006CE  BE2B               	btfsc	drawCircle@f+1,7,c
  3918  0006D0  D00B               	goto	l333
  3919                           
  3920                           ;ST7735_TFT.c: 538: y--;
  3921  0006D2  062E               	decf	drawCircle@y,f,c
  3922  0006D4  A0D8               	btfss	status,0,c
  3923  0006D6  062F               	decf	drawCircle@y+1,f,c
  3924                           
  3925                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3926  0006D8  0E02               	movlw	2
  3927  0006DA  2628               	addwf	drawCircle@ddF_y,f,c
  3928  0006DC  0E00               	movlw	0
  3929  0006DE  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3930                           
  3931                           ;ST7735_TFT.c: 540: f += ddF_y;
  3932  0006E0  5028               	movf	drawCircle@ddF_y,w,c
  3933  0006E2  262A               	addwf	drawCircle@f,f,c
  3934  0006E4  5029               	movf	drawCircle@ddF_y+1,w,c
  3935  0006E6  222B               	addwfc	drawCircle@f+1,f,c
  3936  0006E8                     l333:
  3937                           
  3938                           ;ST7735_TFT.c: 541: }
  3939                           ;ST7735_TFT.c: 542: x++;
  3940  0006E8  4A2C               	infsnz	drawCircle@x,f,c
  3941  0006EA  2A2D               	incf	drawCircle@x+1,f,c
  3942                           
  3943                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3944  0006EC  0E02               	movlw	2
  3945  0006EE  2626               	addwf	drawCircle@ddF_x,f,c
  3946  0006F0  0E00               	movlw	0
  3947  0006F2  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3948                           
  3949                           ;ST7735_TFT.c: 544: f += ddF_x;
  3950  0006F4  5026               	movf	drawCircle@ddF_x,w,c
  3951  0006F6  262A               	addwf	drawCircle@f,f,c
  3952  0006F8  5027               	movf	drawCircle@ddF_x+1,w,c
  3953  0006FA  222B               	addwfc	drawCircle@f+1,f,c
  3954                           
  3955                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3956  0006FC  501E               	movf	drawCircle@y0,w,c
  3957  0006FE  242E               	addwf	drawCircle@y,w,c
  3958  000700  6E18               	movwf	drawPixel@y,c
  3959  000702  C022  F019         	movff	drawCircle@color,drawPixel@color
  3960  000706  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3961  00070A  501C               	movf	drawCircle@x0,w,c
  3962  00070C  242C               	addwf	drawCircle@x,w,c
  3963  00070E  ECE3  F00A         	call	_drawPixel
  3964                           
  3965                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3966  000712  501E               	movf	drawCircle@y0,w,c
  3967  000714  242E               	addwf	drawCircle@y,w,c
  3968  000716  6E18               	movwf	drawPixel@y,c
  3969  000718  C022  F019         	movff	drawCircle@color,drawPixel@color
  3970  00071C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3971  000720  502C               	movf	drawCircle@x,w,c
  3972  000722  0800               	sublw	0
  3973  000724  241C               	addwf	drawCircle@x0,w,c
  3974  000726  ECE3  F00A         	call	_drawPixel
  3975                           
  3976                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3977  00072A  502E               	movf	drawCircle@y,w,c
  3978  00072C  0800               	sublw	0
  3979  00072E  241E               	addwf	drawCircle@y0,w,c
  3980  000730  6E18               	movwf	drawPixel@y,c
  3981  000732  C022  F019         	movff	drawCircle@color,drawPixel@color
  3982  000736  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3983  00073A  501C               	movf	drawCircle@x0,w,c
  3984  00073C  242C               	addwf	drawCircle@x,w,c
  3985  00073E  ECE3  F00A         	call	_drawPixel
  3986                           
  3987                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3988  000742  502E               	movf	drawCircle@y,w,c
  3989  000744  0800               	sublw	0
  3990  000746  241E               	addwf	drawCircle@y0,w,c
  3991  000748  6E18               	movwf	drawPixel@y,c
  3992  00074A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3993  00074E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3994  000752  502C               	movf	drawCircle@x,w,c
  3995  000754  0800               	sublw	0
  3996  000756  241C               	addwf	drawCircle@x0,w,c
  3997  000758  ECE3  F00A         	call	_drawPixel
  3998                           
  3999                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  4000  00075C  501E               	movf	drawCircle@y0,w,c
  4001  00075E  242C               	addwf	drawCircle@x,w,c
  4002  000760  6E18               	movwf	drawPixel@y,c
  4003  000762  C022  F019         	movff	drawCircle@color,drawPixel@color
  4004  000766  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4005  00076A  501C               	movf	drawCircle@x0,w,c
  4006  00076C  242E               	addwf	drawCircle@y,w,c
  4007  00076E  ECE3  F00A         	call	_drawPixel
  4008                           
  4009                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  4010  000772  501E               	movf	drawCircle@y0,w,c
  4011  000774  242C               	addwf	drawCircle@x,w,c
  4012  000776  6E18               	movwf	drawPixel@y,c
  4013  000778  C022  F019         	movff	drawCircle@color,drawPixel@color
  4014  00077C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4015  000780  502E               	movf	drawCircle@y,w,c
  4016  000782  0800               	sublw	0
  4017  000784  241C               	addwf	drawCircle@x0,w,c
  4018  000786  ECE3  F00A         	call	_drawPixel
  4019                           
  4020                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  4021  00078A  502C               	movf	drawCircle@x,w,c
  4022  00078C  0800               	sublw	0
  4023  00078E  241E               	addwf	drawCircle@y0,w,c
  4024  000790  6E18               	movwf	drawPixel@y,c
  4025  000792  C022  F019         	movff	drawCircle@color,drawPixel@color
  4026  000796  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4027  00079A  501C               	movf	drawCircle@x0,w,c
  4028  00079C  242E               	addwf	drawCircle@y,w,c
  4029  00079E  ECE3  F00A         	call	_drawPixel
  4030                           
  4031                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  4032  0007A2  502C               	movf	drawCircle@x,w,c
  4033  0007A4  0800               	sublw	0
  4034  0007A6  241E               	addwf	drawCircle@y0,w,c
  4035  0007A8  6E18               	movwf	drawPixel@y,c
  4036  0007AA  C022  F019         	movff	drawCircle@color,drawPixel@color
  4037  0007AE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4038  0007B2  502E               	movf	drawCircle@y,w,c
  4039  0007B4  0800               	sublw	0
  4040  0007B6  241C               	addwf	drawCircle@x0,w,c
  4041  0007B8  ECE3  F00A         	call	_drawPixel
  4042  0007BC  D000               	goto	l3902
  4043  0007BE                     l3902:
  4044  0007BE  502E               	movf	drawCircle@y,w,c
  4045  0007C0  5C2C               	subwf	drawCircle@x,w,c
  4046  0007C2  502D               	movf	drawCircle@x+1,w,c
  4047  0007C4  0A80               	xorlw	128
  4048  0007C6  6E24               	movwf	??_drawCircle& (0+255),c
  4049  0007C8  502F               	movf	drawCircle@y+1,w,c
  4050  0007CA  0A80               	xorlw	128
  4051  0007CC  5824               	subwfb	??_drawCircle& (0+255),w,c
  4052  0007CE  A0D8               	btfss	status,0,c
  4053  0007D0  D77E               	goto	l3874
  4054  0007D2  0012               	return		;funcret
  4055  0007D4                     __end_of_drawCircle:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           intcon2	equ	0xFF1
  4065                           postinc0	equ	0xFEE
  4066                           wreg	equ	0xFE8
  4067                           postdec1	equ	0xFE5
  4068                           fsr1l	equ	0xFE1
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _Initialize_Screen *****************
  4077 ;; Defined at:
  4078 ;;		line 290 in file "Lab10p1.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:   10
  4099 ;; This function calls:
  4100 ;;		_LCD_Reset
  4101 ;;		_TFT_GreenTab_Initialize
  4102 ;;		_drawtext
  4103 ;;		_fillScreen
  4104 ;;		_strcpy
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text12
  4111  000F9E                     __ptext12:
  4112                           	opt stack 0
  4113  000F9E                     _Initialize_Screen:
  4114                           	opt stack 20
  4115                           
  4116                           ;Lab10p1.c: 292: LCD_Reset();
  4117                           
  4118                           ;incstack = 0
  4119  000F9E  EC74  F00B         	call	_LCD_Reset	;wreg free
  4120                           
  4121                           ;Lab10p1.c: 293: TFT_GreenTab_Initialize();
  4122  000FA2  ECFB  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4123                           
  4124                           ;Lab10p1.c: 294: fillScreen(0x0000);
  4125  000FA6  0E00               	movlw	0
  4126  000FA8  6E25               	movwf	fillScreen@color+1,c
  4127  000FAA  0E00               	movlw	0
  4128  000FAC  6E24               	movwf	fillScreen@color,c
  4129  000FAE  EC47  F00B         	call	_fillScreen	;wreg free
  4130                           
  4131                           ;Lab10p1.c: 297: txt = buffer;
  4132  000FB2  0E54               	movlw	low _buffer
  4133  000FB4  6E67               	movwf	_txt,c
  4134  000FB6  0E01               	movlw	high _buffer
  4135  000FB8  6E68               	movwf	_txt+1,c
  4136                           
  4137                           ;Lab10p1.c: 298: strcpy(txt, "ECE3301L Fall-2022-S4");
  4138  000FBA  C067  F011         	movff	_txt,strcpy@to
  4139  000FBE  C068  F012         	movff	_txt+1,strcpy@to+1
  4140  000FC2  0EAE               	movlw	low STR_3
  4141  000FC4  6E13               	movwf	strcpy@from,c
  4142  000FC6  0EFF               	movlw	high STR_3
  4143  000FC8  6E14               	movwf	strcpy@from+1,c
  4144  000FCA  ECCA  F00A         	call	_strcpy	;wreg free
  4145                           
  4146                           ;Lab10p1.c: 299: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4147  000FCE  0E02               	movlw	2
  4148  000FD0  6E39               	movwf	drawtext@y,c
  4149  000FD2  C067  F03A         	movff	_txt,drawtext@_text
  4150  000FD6  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4151  000FDA  0EFF               	movlw	255
  4152  000FDC  6E3D               	movwf	drawtext@color+1,c
  4153  000FDE  683C               	setf	drawtext@color,c
  4154  000FE0  0E00               	movlw	0
  4155  000FE2  6E3F               	movwf	drawtext@bg+1,c
  4156  000FE4  0E00               	movlw	0
  4157  000FE6  6E3E               	movwf	drawtext@bg,c
  4158  000FE8  0E01               	movlw	1
  4159  000FEA  6E40               	movwf	drawtext@size,c
  4160  000FEC  0E02               	movlw	2
  4161  000FEE  EC63  F006         	call	_drawtext
  4162                           
  4163                           ;Lab10p1.c: 301: strcpy(txt, "LAB 10 ");
  4164  000FF2  C067  F011         	movff	_txt,strcpy@to
  4165  000FF6  C068  F012         	movff	_txt+1,strcpy@to+1
  4166  000FFA  0EF7               	movlw	low STR_4
  4167  000FFC  6E13               	movwf	strcpy@from,c
  4168  000FFE  0EFF               	movlw	high STR_4
  4169  001000  6E14               	movwf	strcpy@from+1,c
  4170  001002  ECCA  F00A         	call	_strcpy	;wreg free
  4171                           
  4172                           ;Lab10p1.c: 302: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4173  001006  0E0A               	movlw	10
  4174  001008  6E39               	movwf	drawtext@y,c
  4175  00100A  C067  F03A         	movff	_txt,drawtext@_text
  4176  00100E  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4177  001012  0EFF               	movlw	255
  4178  001014  6E3D               	movwf	drawtext@color+1,c
  4179  001016  683C               	setf	drawtext@color,c
  4180  001018  0E00               	movlw	0
  4181  00101A  6E3F               	movwf	drawtext@bg+1,c
  4182  00101C  0E00               	movlw	0
  4183  00101E  6E3E               	movwf	drawtext@bg,c
  4184  001020  0E01               	movlw	1
  4185  001022  6E40               	movwf	drawtext@size,c
  4186  001024  0E32               	movlw	50
  4187  001026  EC63  F006         	call	_drawtext
  4188  00102A  0012               	return		;funcret
  4189  00102C                     __end_of_Initialize_Screen:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           intcon2	equ	0xFF1
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           postdec1	equ	0xFE5
  4202                           fsr1l	equ	0xFE1
  4203                           indf2	equ	0xFDF
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _strcpy *****************
  4211 ;; Defined at:
  4212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  to              2   16[COMRAM] PTR unsigned char 
  4215 ;;		 -> NULL(0), buffer(31), 
  4216 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4217 ;;		 -> STR_4(8), STR_3(22), 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4220 ;;		 -> NULL(0), buffer(31), 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  2   16[COMRAM] PTR unsigned char 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;Total ram usage:        6 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    3
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_Initialize_Screen
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text13
  4245  001594                     __ptext13:
  4246                           	opt stack 0
  4247  001594                     _strcpy:
  4248                           	opt stack 26
  4249                           
  4250                           ;incstack = 0
  4251  001594  C011  F015         	movff	strcpy@to,strcpy@cp
  4252  001598  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4253  00159C  D005               	goto	l2664
  4254  00159E                     l2662:
  4255  00159E  4A15               	infsnz	strcpy@cp,f,c
  4256  0015A0  2A16               	incf	strcpy@cp+1,f,c
  4257  0015A2  4A13               	infsnz	strcpy@from,f,c
  4258  0015A4  2A14               	incf	strcpy@from+1,f,c
  4259  0015A6  D000               	goto	l2664
  4260  0015A8                     l2664:
  4261  0015A8  C013  FFF6         	movff	strcpy@from,tblptrl
  4262  0015AC  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4263  0015B0                     	if	0	;tblptru may be non-zero
  4264  0015B0                     	endif
  4265  0015B0                     	if	0	;tblptru may be non-zero
  4266  0015B0                     	endif
  4267  0015B0  C015  FFD9         	movff	strcpy@cp,fsr2l
  4268  0015B4  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4269  0015B8  0008               	tblrd		*
  4270  0015BA  CFF5 FFDF          	movff	tablat,indf2
  4271  0015BE  50DF               	movf	indf2,w,c
  4272  0015C0  A4D8               	btfss	status,2,c
  4273  0015C2  D7ED               	goto	l2662
  4274                           
  4275                           ;	Return value of _strcpy is never used
  4276  0015C4  0012               	return		;funcret
  4277  0015C6                     __end_of_strcpy:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           intcon	equ	0xFF2
  4286                           intcon2	equ	0xFF1
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           postdec1	equ	0xFE5
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _fillScreen *****************
  4299 ;; Defined at:
  4300 ;;		line 619 in file "ST7735_TFT.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  color           2   35[COMRAM] unsigned int 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;		None
  4305 ;; Return value:  Size  Location     Type
  4306 ;;		None               void
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;Total ram usage:        2 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    7
  4321 ;; This function calls:
  4322 ;;		_fillRectangle
  4323 ;; This function is called by:
  4324 ;;		_Initialize_Screen
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text14
  4329  00168E                     __ptext14:
  4330                           	opt stack 0
  4331  00168E                     _fillScreen:
  4332                           	opt stack 22
  4333                           
  4334                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4335                           
  4336                           ;incstack = 0
  4337  00168E  0E00               	movlw	0
  4338  001690  6E18               	movwf	fillRectangle@y,c
  4339  001692  0E80               	movlw	128
  4340  001694  6E19               	movwf	fillRectangle@w,c
  4341  001696  0EA0               	movlw	160
  4342  001698  6E1A               	movwf	fillRectangle@h,c
  4343  00169A  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4344  00169E  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4345  0016A2  0E00               	movlw	0
  4346  0016A4  EC61  F007         	call	_fillRectangle
  4347  0016A8  0012               	return		;funcret
  4348  0016AA                     __end_of_fillScreen:
  4349                           	opt stack 0
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           prodh	equ	0xFF4
  4355                           prodl	equ	0xFF3
  4356                           intcon	equ	0xFF2
  4357                           intcon2	equ	0xFF1
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           indf2	equ	0xFDF
  4363                           postinc2	equ	0xFDE
  4364                           postdec2	equ	0xFDD
  4365                           fsr2h	equ	0xFDA
  4366                           fsr2l	equ	0xFD9
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function _fillRectangle *****************
  4370 ;; Defined at:
  4371 ;;		line 503 in file "ST7735_TFT.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  x               1    wreg     unsigned char 
  4374 ;;  y               1   23[COMRAM] unsigned char 
  4375 ;;  w               1   24[COMRAM] unsigned char 
  4376 ;;  h               1   25[COMRAM] unsigned char 
  4377 ;;  color           2   26[COMRAM] unsigned int 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;  x               1   34[COMRAM] unsigned char 
  4380 ;;  lo              1   33[COMRAM] unsigned char 
  4381 ;;  hi              1   32[COMRAM] unsigned char 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;		None               void
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4391 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;Total ram usage:       12 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    6
  4398 ;; This function calls:
  4399 ;;		_setAddrWindow
  4400 ;;		_spiwrite
  4401 ;; This function is called by:
  4402 ;;		_fillScreen
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text15
  4407  000EC2                     __ptext15:
  4408                           	opt stack 0
  4409  000EC2                     _fillRectangle:
  4410                           	opt stack 22
  4411                           
  4412                           ;incstack = 0
  4413                           ;fillRectangle@x stored from wreg
  4414  000EC2  6E23               	movwf	fillRectangle@x,c
  4415                           
  4416                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4417                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4418  000EC4  0E80               	movlw	128
  4419  000EC6  6023               	cpfslt	fillRectangle@x,c
  4420  000EC8  D069               	goto	l322
  4421  000ECA  0E9F               	movlw	159
  4422  000ECC  6418               	cpfsgt	fillRectangle@y,c
  4423  000ECE  D001               	goto	l3570
  4424                           
  4425                           ;ST7735_TFT.c: 507: return;
  4426  000ED0  D065               	goto	l322
  4427  000ED2                     l3570:
  4428                           
  4429                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4430  000ED2  0EFF               	movlw	255
  4431  000ED4  6E1D               	movwf	??_fillRectangle& (0+255),c
  4432  000ED6  0EFF               	movlw	255
  4433  000ED8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4434  000EDA  5019               	movf	fillRectangle@w,w,c
  4435  000EDC  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4436  000EE0  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4437  000EE2  261F               	addwf	??_fillRectangle+2,f,c
  4438  000EE4  0E00               	movlw	0
  4439  000EE6  2220               	addwfc	??_fillRectangle+3,f,c
  4440  000EE8  501D               	movf	??_fillRectangle,w,c
  4441  000EEA  261F               	addwf	??_fillRectangle+2,f,c
  4442  000EEC  501E               	movf	??_fillRectangle+1,w,c
  4443  000EEE  2220               	addwfc	??_fillRectangle+3,f,c
  4444  000EF0  BE20               	btfsc	??_fillRectangle+3,7,c
  4445  000EF2  D00A               	goto	l323
  4446  000EF4  5020               	movf	??_fillRectangle+3,w,c
  4447  000EF6  E104               	bnz	u2660
  4448  000EF8  0E80               	movlw	128
  4449  000EFA  5C1F               	subwf	??_fillRectangle+2,w,c
  4450  000EFC  A0D8               	btfss	status,0,c
  4451  000EFE  D004               	goto	l323
  4452  000F00                     u2660:
  4453                           
  4454                           ;ST7735_TFT.c: 509: w = 128 - x;
  4455  000F00  5023               	movf	fillRectangle@x,w,c
  4456  000F02  0800               	sublw	0
  4457  000F04  0F80               	addlw	128
  4458  000F06  6E19               	movwf	fillRectangle@w,c
  4459  000F08                     l323:
  4460                           
  4461                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4462  000F08  0EFF               	movlw	255
  4463  000F0A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4464  000F0C  0EFF               	movlw	255
  4465  000F0E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4466  000F10  501A               	movf	fillRectangle@h,w,c
  4467  000F12  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4468  000F16  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4469  000F18  261F               	addwf	??_fillRectangle+2,f,c
  4470  000F1A  0E00               	movlw	0
  4471  000F1C  2220               	addwfc	??_fillRectangle+3,f,c
  4472  000F1E  501D               	movf	??_fillRectangle,w,c
  4473  000F20  261F               	addwf	??_fillRectangle+2,f,c
  4474  000F22  501E               	movf	??_fillRectangle+1,w,c
  4475  000F24  2220               	addwfc	??_fillRectangle+3,f,c
  4476  000F26  BE20               	btfsc	??_fillRectangle+3,7,c
  4477  000F28  D00B               	goto	l3576
  4478  000F2A  5020               	movf	??_fillRectangle+3,w,c
  4479  000F2C  E104               	bnz	u2670
  4480  000F2E  0EA0               	movlw	160
  4481  000F30  5C1F               	subwf	??_fillRectangle+2,w,c
  4482  000F32  A0D8               	btfss	status,0,c
  4483  000F34  D005               	goto	l3576
  4484  000F36                     u2670:
  4485                           
  4486                           ;ST7735_TFT.c: 511: h = 160 - y;
  4487  000F36  5018               	movf	fillRectangle@y,w,c
  4488  000F38  0800               	sublw	0
  4489  000F3A  0FA0               	addlw	160
  4490  000F3C  6E1A               	movwf	fillRectangle@h,c
  4491  000F3E  D000               	goto	l3576
  4492  000F40                     l3576:
  4493                           
  4494                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4495  000F40  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4496  000F44  5023               	movf	fillRectangle@x,w,c
  4497  000F46  2419               	addwf	fillRectangle@w,w,c
  4498  000F48  6E1D               	movwf	??_fillRectangle& (0+255),c
  4499  000F4A  041D               	decf	??_fillRectangle,w,c
  4500  000F4C  6E15               	movwf	setAddrWindow@x1,c
  4501  000F4E  5018               	movf	fillRectangle@y,w,c
  4502  000F50  241A               	addwf	fillRectangle@h,w,c
  4503  000F52  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4504  000F54  041E               	decf	??_fillRectangle+1,w,c
  4505  000F56  6E16               	movwf	setAddrWindow@y1,c
  4506  000F58  5023               	movf	fillRectangle@x,w,c
  4507  000F5A  EC40  F00A         	call	_setAddrWindow
  4508                           
  4509                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4510  000F5E  501C               	movf	fillRectangle@color+1,w,c
  4511  000F60  6E21               	movwf	fillRectangle@hi,c
  4512  000F62  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4513                           
  4514                           ;ST7735_TFT.c: 514: PORTCbits.RC2 = 1;
  4515  000F66  8482               	bsf	3970,2,c	;volatile
  4516                           
  4517                           ;ST7735_TFT.c: 515: PORTCbits.RC4 = 0;
  4518  000F68  9882               	bcf	3970,4,c	;volatile
  4519                           
  4520                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4521  000F6A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4522  000F6E                     l3588:
  4523  000F6E  5018               	movf	fillRectangle@y,w,c
  4524  000F70  B4D8               	btfsc	status,2,c
  4525  000F72  D013               	goto	l326
  4526  000F74  D001               	goto	l325
  4527  000F76  D011               	goto	l326
  4528  000F78                     l325:
  4529                           
  4530                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4531  000F78  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4532  000F7C                     l3592:
  4533  000F7C  5023               	movf	fillRectangle@x,w,c
  4534  000F7E  B4D8               	btfsc	status,2,c
  4535  000F80  D00A               	goto	l3602
  4536  000F82  D001               	goto	l3596
  4537  000F84  D008               	goto	l3602
  4538  000F86                     l3596:
  4539                           
  4540                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4541  000F86  5021               	movf	fillRectangle@hi,w,c
  4542  000F88  EC6A  F00B         	call	_spiwrite
  4543                           
  4544                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4545  000F8C  5022               	movf	fillRectangle@lo,w,c
  4546  000F8E  EC6A  F00B         	call	_spiwrite
  4547  000F92  0623               	decf	fillRectangle@x,f,c
  4548  000F94  D7F3               	goto	l3592
  4549  000F96                     l3602:
  4550  000F96  0618               	decf	fillRectangle@y,f,c
  4551  000F98  D7EA               	goto	l3588
  4552  000F9A                     l326:
  4553                           
  4554                           ;ST7735_TFT.c: 521: }
  4555                           ;ST7735_TFT.c: 522: }
  4556                           ;ST7735_TFT.c: 523: PORTCbits.RC4 = 1;
  4557  000F9A  8882               	bsf	3970,4,c	;volatile
  4558  000F9C                     l322:
  4559  000F9C  0012               	return		;funcret
  4560  000F9E                     __end_of_fillRectangle:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           intcon	equ	0xFF2
  4569                           intcon2	equ	0xFF1
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postdec1	equ	0xFE5
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _drawtext *****************
  4582 ;; Defined at:
  4583 ;;		line 474 in file "ST7735_TFT.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  x               1    wreg     unsigned char 
  4586 ;;  y               1   56[COMRAM] unsigned char 
  4587 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4588 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4589 ;;  color           2   59[COMRAM] unsigned int 
  4590 ;;  bg              2   61[COMRAM] unsigned int 
  4591 ;;  size            1   63[COMRAM] unsigned char 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  x               1    0[BANK0 ] unsigned char 
  4594 ;;  i               2    3[BANK0 ] unsigned int 
  4595 ;;  textsize        2    1[BANK0 ] unsigned int 
  4596 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4597 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;		None               void
  4600 ;; Registers used:
  4601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4607 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;Total ram usage:       17 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    9
  4614 ;; This function calls:
  4615 ;;		_drawChar
  4616 ;;		_strlen
  4617 ;; This function is called by:
  4618 ;;		_main
  4619 ;;		_Initialize_Screen
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text16
  4624  000CC6                     __ptext16:
  4625                           	opt stack 0
  4626  000CC6                     _drawtext:
  4627                           	opt stack 21
  4628                           
  4629                           ;incstack = 0
  4630                           ;drawtext@x stored from wreg
  4631  000CC6  0100               	movlb	0	; () banked
  4632  000CC8  6FE9               	movwf	drawtext@x& (0+255),b
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4636                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4637                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4638  000CCA  C0E9  F0EF         	movff	drawtext@x,drawtext@cursor_x
  4639                           
  4640                           ; BSR set to: 0
  4641  000CCE  C039  F0EE         	movff	drawtext@y,drawtext@cursor_y
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4645  000CD2  C03A  F011         	movff	drawtext@_text,strlen@s
  4646  000CD6  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4647  000CDA  EC8C  F00A         	call	_strlen	;wreg free
  4648  000CDE  C011  F0EA         	movff	?_strlen,drawtext@textsize
  4649  000CE2  C012  F0EB         	movff	?_strlen+1,drawtext@textsize+1
  4650                           
  4651                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4652  000CE6  0E00               	movlw	0
  4653  000CE8  0100               	movlb	0	; () banked
  4654  000CEA  6FED               	movwf	(drawtext@i+1)& (0+255),b
  4655  000CEC  0E00               	movlw	0
  4656  000CEE  6FEC               	movwf	drawtext@i& (0+255),b
  4657  000CF0  D064               	goto	l3640
  4658  000CF2                     l3614:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4662  000CF2  505C               	movf	_wrap,w,c
  4663  000CF4  B4D8               	btfsc	status,2,c
  4664  000CF6  D034               	goto	l3630
  4665                           
  4666                           ; BSR set to: 0
  4667  000CF8  5040               	movf	drawtext@size,w,c
  4668  000CFA  0D05               	mullw	5
  4669  000CFC  0100               	movlb	0	; () banked
  4670  000CFE  51EF               	movf	drawtext@cursor_x& (0+255),w,b
  4671  000D00  6E41               	movwf	??_drawtext& (0+255),c
  4672  000D02  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4673  000D04  50F3               	movf	prodl,w,c
  4674  000D06  2641               	addwf	??_drawtext,f,c
  4675  000D08  50F4               	movf	prodh,w,c
  4676  000D0A  2242               	addwfc	??_drawtext+1,f,c
  4677  000D0C  BE42               	btfsc	??_drawtext+1,7,c
  4678  000D0E  D028               	goto	l3630
  4679  000D10  5042               	movf	??_drawtext+1,w,c
  4680  000D12  E104               	bnz	u2730
  4681  000D14  0E81               	movlw	129
  4682  000D16  5C41               	subwf	??_drawtext,w,c
  4683  000D18  A0D8               	btfss	status,0,c
  4684  000D1A  D022               	goto	l3630
  4685  000D1C                     u2730:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4689  000D1C  0E00               	movlw	0
  4690  000D1E  0100               	movlb	0	; () banked
  4691  000D20  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4695  000D22  5040               	movf	drawtext@size,w,c
  4696  000D24  0D07               	mullw	7
  4697  000D26  50F3               	movf	prodl,w,c
  4698  000D28  0100               	movlb	0	; () banked
  4699  000D2A  25EE               	addwf	drawtext@cursor_y& (0+255),w,b
  4700  000D2C  0F03               	addlw	3
  4701  000D2E  0100               	movlb	0	; () banked
  4702  000D30  6FEE               	movwf	drawtext@cursor_y& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4706  000D32  0EA0               	movlw	160
  4707  000D34  0100               	movlb	0	; () banked
  4708  000D36  65EE               	cpfsgt	drawtext@cursor_y& (0+255),b
  4709  000D38  D004               	goto	l3626
  4710                           
  4711                           ; BSR set to: 0
  4712  000D3A  0EA0               	movlw	160
  4713  000D3C  0100               	movlb	0	; () banked
  4714  000D3E  6FEE               	movwf	drawtext@cursor_y& (0+255),b
  4715  000D40  D000               	goto	l3626
  4716  000D42                     l3626:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4720  000D42  0100               	movlb	0	; () banked
  4721  000D44  51EC               	movf	drawtext@i& (0+255),w,b
  4722  000D46  243A               	addwf	drawtext@_text,w,c
  4723  000D48  6ED9               	movwf	fsr2l,c
  4724  000D4A  0100               	movlb	0	; () banked
  4725  000D4C  51ED               	movf	(drawtext@i+1)& (0+255),w,b
  4726  000D4E  203B               	addwfc	drawtext@_text+1,w,c
  4727  000D50  6EDA               	movwf	fsr2h,c
  4728  000D52  0E20               	movlw	32
  4729  000D54  18DE               	xorwf	postinc2,w,c
  4730  000D56  B4D8               	btfsc	status,2,c
  4731  000D58  D02C               	goto	l3638
  4732  000D5A  D002               	goto	l3630
  4733                           
  4734                           ; BSR set to: 0
  4735  000D5C  D02A               	goto	l3638
  4736                           
  4737                           ; BSR set to: 0
  4738  000D5E  D000               	goto	l3630
  4739  000D60                     l3630:
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4743  000D60  C0EE  F02E         	movff	drawtext@cursor_y,drawChar@y
  4744  000D64  0100               	movlb	0	; () banked
  4745  000D66  51EC               	movf	drawtext@i& (0+255),w,b
  4746  000D68  243A               	addwf	drawtext@_text,w,c
  4747  000D6A  6ED9               	movwf	fsr2l,c
  4748  000D6C  0100               	movlb	0	; () banked
  4749  000D6E  51ED               	movf	(drawtext@i+1)& (0+255),w,b
  4750  000D70  203B               	addwfc	drawtext@_text+1,w,c
  4751  000D72  6EDA               	movwf	fsr2h,c
  4752  000D74  50DF               	movf	indf2,w,c
  4753  000D76  6E2F               	movwf	drawChar@c,c
  4754  000D78  C03C  F030         	movff	drawtext@color,drawChar@color
  4755  000D7C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4756  000D80  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4757  000D84  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4758  000D88  C040  F034         	movff	drawtext@size,drawChar@size
  4759  000D8C  0100               	movlb	0	; () banked
  4760  000D8E  51EF               	movf	drawtext@cursor_x& (0+255),w,b
  4761  000D90  ECEA  F003         	call	_drawChar
  4762                           
  4763                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4764  000D94  5040               	movf	drawtext@size,w,c
  4765  000D96  0D06               	mullw	6
  4766  000D98  50F3               	movf	prodl,w,c
  4767  000D9A  0100               	movlb	0	; () banked
  4768  000D9C  25EF               	addwf	drawtext@cursor_x& (0+255),w,b
  4769  000D9E  0100               	movlb	0	; () banked
  4770  000DA0  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4774  000DA2  0E80               	movlw	128
  4775  000DA4  0100               	movlb	0	; () banked
  4776  000DA6  65EF               	cpfsgt	drawtext@cursor_x& (0+255),b
  4777  000DA8  D004               	goto	l3638
  4778                           
  4779                           ; BSR set to: 0
  4780  000DAA  0E80               	movlw	128
  4781  000DAC  0100               	movlb	0	; () banked
  4782  000DAE  6FEF               	movwf	drawtext@cursor_x& (0+255),b
  4783                           
  4784                           ; BSR set to: 0
  4785  000DB0  D000               	goto	l3638
  4786  000DB2                     l3638:
  4787                           
  4788                           ; BSR set to: 0
  4789  000DB2  0100               	movlb	0	; () banked
  4790  000DB4  4BEC               	infsnz	drawtext@i& (0+255),f,b
  4791  000DB6  2BED               	incf	(drawtext@i+1)& (0+255),f,b
  4792  000DB8  D000               	goto	l3640
  4793  000DBA                     l3640:
  4794                           
  4795                           ; BSR set to: 0
  4796  000DBA  0100               	movlb	0	; () banked
  4797  000DBC  51EA               	movf	drawtext@textsize& (0+255),w,b
  4798  000DBE  0100               	movlb	0	; () banked
  4799  000DC0  5DEC               	subwf	drawtext@i& (0+255),w,b
  4800  000DC2  0100               	movlb	0	; () banked
  4801  000DC4  51EB               	movf	(drawtext@textsize+1)& (0+255),w,b
  4802  000DC6  0100               	movlb	0	; () banked
  4803  000DC8  59ED               	subwfb	(drawtext@i+1)& (0+255),w,b
  4804  000DCA  A0D8               	btfss	status,0,c
  4805  000DCC  D792               	goto	l3614
  4806                           
  4807                           ; BSR set to: 0
  4808                           
  4809                           ; BSR set to: 0
  4810  000DCE  0012               	return		;funcret
  4811  000DD0                     __end_of_drawtext:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _strlen *****************
  4833 ;; Defined at:
  4834 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4837 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4840 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  2   16[COMRAM] unsigned int 
  4843 ;; Registers used:
  4844 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;Total ram usage:        6 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    3
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_drawtext
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text17
  4865  001518                     __ptext17:
  4866                           	opt stack 0
  4867  001518                     _strlen:
  4868                           	opt stack 26
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;incstack = 0
  4872  001518  C011  F015         	movff	strlen@s,strlen@cp
  4873  00151C  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4874  001520  D003               	goto	l3560
  4875  001522                     l3558:
  4876  001522  4A15               	infsnz	strlen@cp,f,c
  4877  001524  2A16               	incf	strlen@cp+1,f,c
  4878  001526  D000               	goto	l3560
  4879  001528                     l3560:
  4880  001528  C015  FFD9         	movff	strlen@cp,fsr2l
  4881  00152C  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4882  001530  50DF               	movf	indf2,w,c
  4883  001532  A4D8               	btfss	status,2,c
  4884  001534  D7F6               	goto	l3558
  4885  001536  C011  F013         	movff	strlen@s,??_strlen
  4886  00153A  C012  F014         	movff	strlen@s+1,??_strlen+1
  4887  00153E  1E13               	comf	??_strlen,f,c
  4888  001540  1E14               	comf	??_strlen+1,f,c
  4889  001542  4A13               	infsnz	??_strlen,f,c
  4890  001544  2A14               	incf	??_strlen+1,f,c
  4891  001546  5015               	movf	strlen@cp,w,c
  4892  001548  2413               	addwf	??_strlen,w,c
  4893  00154A  6E11               	movwf	?_strlen,c
  4894  00154C  5016               	movf	strlen@cp+1,w,c
  4895  00154E  2014               	addwfc	??_strlen+1,w,c
  4896  001550  6E12               	movwf	?_strlen+1,c
  4897  001552  D000               	goto	l1056
  4898  001554                     l1056:
  4899  001554  0012               	return		;funcret
  4900  001556                     __end_of_strlen:
  4901                           	opt stack 0
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           intcon	equ	0xFF2
  4909                           intcon2	equ	0xFF1
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           postdec1	equ	0xFE5
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           postinc2	equ	0xFDE
  4916                           postdec2	equ	0xFDD
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _drawChar *****************
  4922 ;; Defined at:
  4923 ;;		line 447 in file "ST7735_TFT.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  x               1    wreg     unsigned char 
  4926 ;;  y               1   45[COMRAM] unsigned char 
  4927 ;;  c               1   46[COMRAM] unsigned char 
  4928 ;;  color           2   47[COMRAM] unsigned int 
  4929 ;;  bg              2   49[COMRAM] unsigned int 
  4930 ;;  size            1   51[COMRAM] unsigned char 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  x               1   53[COMRAM] unsigned char 
  4933 ;;  line            1   52[COMRAM] unsigned char 
  4934 ;;  i               1   55[COMRAM] unsigned char 
  4935 ;;  j               1   54[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;		None               void
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4945 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;Total ram usage:       11 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    8
  4952 ;; This function calls:
  4953 ;;		___wmul
  4954 ;;		_drawPixel
  4955 ;;		_fillRect
  4956 ;; This function is called by:
  4957 ;;		_drawtext
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text18
  4962  0007D4                     __ptext18:
  4963                           	opt stack 0
  4964  0007D4                     _drawChar:
  4965                           	opt stack 21
  4966                           
  4967                           ;incstack = 0
  4968                           ;drawChar@x stored from wreg
  4969  0007D4  6E36               	movwf	drawChar@x,c
  4970                           
  4971                           ;ST7735_TFT.c: 449: char i, j;
  4972                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4973  0007D6  0E80               	movlw	128
  4974  0007D8  6036               	cpfslt	drawChar@x,c
  4975  0007DA  D0A6               	goto	l285
  4976  0007DC  0E9F               	movlw	159
  4977  0007DE  642E               	cpfsgt	drawChar@y,c
  4978  0007E0  D001               	goto	l3506
  4979                           
  4980                           ;ST7735_TFT.c: 451: return;
  4981  0007E2  D0A2               	goto	l285
  4982  0007E4                     l3506:
  4983                           
  4984                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4985  0007E4  5034               	movf	drawChar@size,w,c
  4986  0007E6  A4D8               	btfss	status,2,c
  4987  0007E8  D003               	goto	l3510
  4988  0007EA  0E01               	movlw	1
  4989  0007EC  6E34               	movwf	drawChar@size,c
  4990  0007EE  D000               	goto	l3510
  4991  0007F0                     l3510:
  4992                           
  4993                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4994  0007F0  0E1F               	movlw	31
  4995  0007F2  642F               	cpfsgt	drawChar@c,c
  4996  0007F4  D004               	goto	l3514
  4997  0007F6  0E7E               	movlw	126
  4998  0007F8  642F               	cpfsgt	drawChar@c,c
  4999  0007FA  D003               	goto	l287
  5000  0007FC  D000               	goto	l3514
  5001  0007FE                     l3514:
  5002                           
  5003                           ;ST7735_TFT.c: 454: c = '?';
  5004  0007FE  0E3F               	movlw	63
  5005  000800  6E2F               	movwf	drawChar@c,c
  5006  000802                     l287:
  5007                           
  5008                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5009  000802  0E00               	movlw	0
  5010  000804  6E38               	movwf	drawChar@i,c
  5011  000806                     l3516:
  5012  000806  0E04               	movlw	4
  5013  000808  6438               	cpfsgt	drawChar@i,c
  5014  00080A  D001               	goto	l3520
  5015  00080C  D08D               	goto	l285
  5016  00080E                     l3520:
  5017                           
  5018                           ;ST7735_TFT.c: 456: unsigned char line;
  5019                           ;ST7735_TFT.c: 457: if(c < 'S')
  5020  00080E  0E53               	movlw	83
  5021  000810  602F               	cpfslt	drawChar@c,c
  5022  000812  D015               	goto	l3524
  5023                           
  5024                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5025  000814  0EE0               	movlw	224
  5026  000816  242F               	addwf	drawChar@c,w,c
  5027  000818  6E11               	movwf	___wmul@multiplier,c
  5028  00081A  6A12               	clrf	___wmul@multiplier+1,c
  5029  00081C  0EFF               	movlw	255
  5030  00081E  2212               	addwfc	___wmul@multiplier+1,f,c
  5031  000820  0E00               	movlw	0
  5032  000822  6E14               	movwf	___wmul@multiplicand+1,c
  5033  000824  0E05               	movlw	5
  5034  000826  6E13               	movwf	___wmul@multiplicand,c
  5035  000828  EC10  F00B         	call	___wmul	;wreg free
  5036  00082C  5038               	movf	drawChar@i,w,c
  5037  00082E  2611               	addwf	?___wmul,f,c
  5038  000830  0E00               	movlw	0
  5039  000832  2212               	addwfc	?___wmul+1,f,c
  5040  000834  0E8B               	movlw	low _font
  5041  000836  2411               	addwf	?___wmul,w,c
  5042  000838  6EF6               	movwf	tblptrl,c
  5043  00083A  0EFD               	movlw	high _font
  5044  00083C  D014               	goto	L3
  5045  00083E                     l3524:
  5046                           
  5047                           ;ST7735_TFT.c: 459: else
  5048                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5049  00083E  0EAD               	movlw	173
  5050  000840  242F               	addwf	drawChar@c,w,c
  5051  000842  6E11               	movwf	___wmul@multiplier,c
  5052  000844  6A12               	clrf	___wmul@multiplier+1,c
  5053  000846  0EFF               	movlw	255
  5054  000848  2212               	addwfc	___wmul@multiplier+1,f,c
  5055  00084A  0E00               	movlw	0
  5056  00084C  6E14               	movwf	___wmul@multiplicand+1,c
  5057  00084E  0E05               	movlw	5
  5058  000850  6E13               	movwf	___wmul@multiplicand,c
  5059  000852  EC10  F00B         	call	___wmul	;wreg free
  5060  000856  5038               	movf	drawChar@i,w,c
  5061  000858  2611               	addwf	?___wmul,f,c
  5062  00085A  0E00               	movlw	0
  5063  00085C  2212               	addwfc	?___wmul+1,f,c
  5064  00085E  0E8A               	movlw	low _font2
  5065  000860  2411               	addwf	?___wmul,w,c
  5066  000862  6EF6               	movwf	tblptrl,c
  5067  000864  0EFE               	movlw	high _font2
  5068  000866                     L3:
  5069  000866  2012               	addwfc	?___wmul+1,w,c
  5070  000868  6EF7               	movwf	tblptrh,c
  5071  00086A                     	if	0	;There are less than 3 active tblptr bytes
  5072  00086A                     	endif
  5073  00086A  0008               	tblrd		*
  5074  00086C  CFF5 F035          	movff	tablat,drawChar@line
  5075  000870  D000               	goto	l3526
  5076  000872                     l3526:
  5077                           
  5078                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5079  000872  0E00               	movlw	0
  5080  000874  6E37               	movwf	drawChar@j,c
  5081  000876                     l3528:
  5082  000876  0E06               	movlw	6
  5083  000878  6437               	cpfsgt	drawChar@j,c
  5084  00087A  D001               	goto	l294
  5085  00087C  D053               	goto	l3552
  5086  00087E                     l294:
  5087                           
  5088                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5089  00087E  A035               	btfss	drawChar@line,0,c
  5090  000880  D023               	goto	l3538
  5091                           
  5092                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5093  000882  0434               	decf	drawChar@size,w,c
  5094  000884  A4D8               	btfss	status,2,c
  5095  000886  D00C               	goto	l3536
  5096  000888  502E               	movf	drawChar@y,w,c
  5097  00088A  2437               	addwf	drawChar@j,w,c
  5098  00088C  6E18               	movwf	drawPixel@y,c
  5099  00088E  C030  F019         	movff	drawChar@color,drawPixel@color
  5100  000892  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5101  000896  5036               	movf	drawChar@x,w,c
  5102  000898  2438               	addwf	drawChar@i,w,c
  5103  00089A  ECE3  F00A         	call	_drawPixel
  5104  00089E  D03E               	goto	l3546
  5105  0008A0                     l3536:
  5106                           
  5107                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5108  0008A0  5037               	movf	drawChar@j,w,c
  5109  0008A2  0234               	mulwf	drawChar@size,c
  5110  0008A4  50F3               	movf	prodl,w,c
  5111  0008A6  242E               	addwf	drawChar@y,w,c
  5112  0008A8  6E23               	movwf	fillRect@y,c
  5113  0008AA  C034  F024         	movff	drawChar@size,fillRect@w
  5114  0008AE  C034  F025         	movff	drawChar@size,fillRect@h
  5115  0008B2  C030  F026         	movff	drawChar@color,fillRect@color
  5116  0008B6  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5117  0008BA  5038               	movf	drawChar@i,w,c
  5118  0008BC  0234               	mulwf	drawChar@size,c
  5119  0008BE  50F3               	movf	prodl,w,c
  5120  0008C0  2436               	addwf	drawChar@x,w,c
  5121  0008C2  EC67  F00A         	call	_fillRect
  5122                           
  5123                           ;ST7735_TFT.c: 465: }
  5124  0008C6  D02A               	goto	l3546
  5125  0008C8                     l3538:
  5126                           
  5127                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5128  0008C8  5030               	movf	drawChar@color,w,c
  5129  0008CA  1832               	xorwf	drawChar@bg,w,c
  5130  0008CC  E104               	bnz	u2590
  5131  0008CE  5031               	movf	drawChar@color+1,w,c
  5132  0008D0  1833               	xorwf	drawChar@bg+1,w,c
  5133  0008D2  B4D8               	btfsc	status,2,c
  5134  0008D4  D023               	goto	l3546
  5135  0008D6                     u2590:
  5136                           
  5137                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5138  0008D6  0434               	decf	drawChar@size,w,c
  5139  0008D8  A4D8               	btfss	status,2,c
  5140  0008DA  D00C               	goto	l3544
  5141  0008DC  502E               	movf	drawChar@y,w,c
  5142  0008DE  2437               	addwf	drawChar@j,w,c
  5143  0008E0  6E18               	movwf	drawPixel@y,c
  5144  0008E2  C032  F019         	movff	drawChar@bg,drawPixel@color
  5145  0008E6  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5146  0008EA  5036               	movf	drawChar@x,w,c
  5147  0008EC  2438               	addwf	drawChar@i,w,c
  5148  0008EE  ECE3  F00A         	call	_drawPixel
  5149  0008F2  D014               	goto	l3546
  5150  0008F4                     l3544:
  5151                           
  5152                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5153  0008F4  5037               	movf	drawChar@j,w,c
  5154  0008F6  0234               	mulwf	drawChar@size,c
  5155  0008F8  50F3               	movf	prodl,w,c
  5156  0008FA  242E               	addwf	drawChar@y,w,c
  5157  0008FC  6E23               	movwf	fillRect@y,c
  5158  0008FE  C034  F024         	movff	drawChar@size,fillRect@w
  5159  000902  C034  F025         	movff	drawChar@size,fillRect@h
  5160  000906  C032  F026         	movff	drawChar@bg,fillRect@color
  5161  00090A  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5162  00090E  5038               	movf	drawChar@i,w,c
  5163  000910  0234               	mulwf	drawChar@size,c
  5164  000912  50F3               	movf	prodl,w,c
  5165  000914  2436               	addwf	drawChar@x,w,c
  5166  000916  EC67  F00A         	call	_fillRect
  5167  00091A  D000               	goto	l3546
  5168  00091C                     l3546:
  5169  00091C  2A37               	incf	drawChar@j,f,c
  5170  00091E  90D8               	bcf	status,0,c
  5171  000920  3235               	rrcf	drawChar@line,f,c
  5172  000922  D7A9               	goto	l3528
  5173  000924                     l3552:
  5174  000924  2A38               	incf	drawChar@i,f,c
  5175  000926  D76F               	goto	l3516
  5176  000928                     l285:
  5177  000928  0012               	return		;funcret
  5178  00092A                     __end_of_drawChar:
  5179                           	opt stack 0
  5180                           tblptru	equ	0xFF8
  5181                           tblptrh	equ	0xFF7
  5182                           tblptrl	equ	0xFF6
  5183                           tablat	equ	0xFF5
  5184                           prodh	equ	0xFF4
  5185                           prodl	equ	0xFF3
  5186                           intcon	equ	0xFF2
  5187                           intcon2	equ	0xFF1
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           postdec1	equ	0xFE5
  5191                           fsr1l	equ	0xFE1
  5192                           indf2	equ	0xFDF
  5193                           postinc2	equ	0xFDE
  5194                           postdec2	equ	0xFDD
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _fillRect *****************
  5200 ;; Defined at:
  5201 ;;		line 437 in file "ST7735_TFT.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  x               1    wreg     unsigned char 
  5204 ;;  y               1   34[COMRAM] unsigned char 
  5205 ;;  w               1   35[COMRAM] unsigned char 
  5206 ;;  h               1   36[COMRAM] unsigned char 
  5207 ;;  color           2   37[COMRAM] unsigned int 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  x               1   42[COMRAM] unsigned char 
  5210 ;;  i               2   43[COMRAM] int 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;		None               void
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5220 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;Total ram usage:       11 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    7
  5227 ;; This function calls:
  5228 ;;		_drawFastVLine
  5229 ;; This function is called by:
  5230 ;;		_drawChar
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text19
  5235  0014CE                     __ptext19:
  5236                           	opt stack 0
  5237  0014CE                     _fillRect:
  5238                           	opt stack 21
  5239                           
  5240                           ;incstack = 0
  5241                           ;fillRect@x stored from wreg
  5242  0014CE  6E2B               	movwf	fillRect@x,c
  5243                           
  5244                           ;ST7735_TFT.c: 439: signed int i;
  5245                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5246  0014D0  C02B  F02C         	movff	fillRect@x,fillRect@i
  5247  0014D4  6A2D               	clrf	fillRect@i+1,c
  5248  0014D6  D00E               	goto	l3408
  5249  0014D8                     l3404:
  5250                           
  5251                           ;ST7735_TFT.c: 442: {
  5252                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5253  0014D8  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5254  0014DC  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5255  0014E0  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5256  0014E4  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5257  0014E8  502C               	movf	fillRect@i,w,c
  5258  0014EA  EC5C  F008         	call	_drawFastVLine
  5259  0014EE  4A2C               	infsnz	fillRect@i,f,c
  5260  0014F0  2A2D               	incf	fillRect@i+1,f,c
  5261  0014F2  D000               	goto	l3408
  5262  0014F4                     l3408:
  5263  0014F4  5024               	movf	fillRect@w,w,c
  5264  0014F6  C02B  F028         	movff	fillRect@x,??_fillRect
  5265  0014FA  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5266  0014FC  2628               	addwf	??_fillRect,f,c
  5267  0014FE  0E00               	movlw	0
  5268  001500  2229               	addwfc	??_fillRect+1,f,c
  5269  001502  5028               	movf	??_fillRect,w,c
  5270  001504  5C2C               	subwf	fillRect@i,w,c
  5271  001506  502D               	movf	fillRect@i+1,w,c
  5272  001508  0A80               	xorlw	128
  5273  00150A  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5274  00150C  5029               	movf	??_fillRect+1,w,c
  5275  00150E  0A80               	xorlw	128
  5276  001510  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5277  001512  A0D8               	btfss	status,0,c
  5278  001514  D7E1               	goto	l3404
  5279  001516  0012               	return		;funcret
  5280  001518                     __end_of_fillRect:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           intcon	equ	0xFF2
  5289                           intcon2	equ	0xFF1
  5290                           postinc0	equ	0xFEE
  5291                           wreg	equ	0xFE8
  5292                           postdec1	equ	0xFE5
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _drawFastVLine *****************
  5302 ;; Defined at:
  5303 ;;		line 416 in file "ST7735_TFT.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  x               1    wreg     unsigned char 
  5306 ;;  y               1   23[COMRAM] unsigned char 
  5307 ;;  h               1   24[COMRAM] unsigned char 
  5308 ;;  color           2   25[COMRAM] unsigned int 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  x               1   33[COMRAM] unsigned char 
  5311 ;;  lo              1   32[COMRAM] unsigned char 
  5312 ;;  hi              1   31[COMRAM] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;		None               void
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;Total ram usage:       11 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    6
  5329 ;; This function calls:
  5330 ;;		_setAddrWindow
  5331 ;;		_spiwrite
  5332 ;; This function is called by:
  5333 ;;		_fillRect
  5334 ;;		_fillCircleHelper
  5335 ;;		_fillCircle
  5336 ;;		_drawRect
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text20
  5341  0010B8                     __ptext20:
  5342                           	opt stack 0
  5343  0010B8                     _drawFastVLine:
  5344                           	opt stack 22
  5345                           
  5346                           ;incstack = 0
  5347                           ;drawFastVLine@x stored from wreg
  5348  0010B8  6E22               	movwf	drawFastVLine@x,c
  5349                           
  5350                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5351                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5352  0010BA  0E80               	movlw	128
  5353  0010BC  6022               	cpfslt	drawFastVLine@x,c
  5354  0010BE  D03F               	goto	l269
  5355  0010C0  0E9F               	movlw	159
  5356  0010C2  6418               	cpfsgt	drawFastVLine@y,c
  5357  0010C4  D001               	goto	l3354
  5358                           
  5359                           ;ST7735_TFT.c: 420: return;
  5360  0010C6  D03B               	goto	l269
  5361  0010C8                     l3354:
  5362                           
  5363                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5364  0010C8  0EFF               	movlw	255
  5365  0010CA  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5366  0010CC  0EFF               	movlw	255
  5367  0010CE  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5368  0010D0  5019               	movf	drawFastVLine@h,w,c
  5369  0010D2  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5370  0010D6  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5371  0010D8  261E               	addwf	??_drawFastVLine+2,f,c
  5372  0010DA  0E00               	movlw	0
  5373  0010DC  221F               	addwfc	??_drawFastVLine+3,f,c
  5374  0010DE  501C               	movf	??_drawFastVLine,w,c
  5375  0010E0  261E               	addwf	??_drawFastVLine+2,f,c
  5376  0010E2  501D               	movf	??_drawFastVLine+1,w,c
  5377  0010E4  221F               	addwfc	??_drawFastVLine+3,f,c
  5378  0010E6  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5379  0010E8  D00B               	goto	l3358
  5380  0010EA  501F               	movf	??_drawFastVLine+3,w,c
  5381  0010EC  E104               	bnz	u2430
  5382  0010EE  0EA0               	movlw	160
  5383  0010F0  5C1E               	subwf	??_drawFastVLine+2,w,c
  5384  0010F2  A0D8               	btfss	status,0,c
  5385  0010F4  D005               	goto	l3358
  5386  0010F6                     u2430:
  5387                           
  5388                           ;ST7735_TFT.c: 422: h = 160 - y;
  5389  0010F6  5018               	movf	drawFastVLine@y,w,c
  5390  0010F8  0800               	sublw	0
  5391  0010FA  0FA0               	addlw	160
  5392  0010FC  6E19               	movwf	drawFastVLine@h,c
  5393  0010FE  D000               	goto	l3358
  5394  001100                     l3358:
  5395                           
  5396                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5397  001100  501B               	movf	drawFastVLine@color+1,w,c
  5398  001102  6E20               	movwf	drawFastVLine@hi,c
  5399  001104  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5400                           
  5401                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5402  001108  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5403  00110C  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5404  001110  5018               	movf	drawFastVLine@y,w,c
  5405  001112  2419               	addwf	drawFastVLine@h,w,c
  5406  001114  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5407  001116  041C               	decf	??_drawFastVLine,w,c
  5408  001118  6E16               	movwf	setAddrWindow@y1,c
  5409  00111A  5022               	movf	drawFastVLine@x,w,c
  5410  00111C  EC40  F00A         	call	_setAddrWindow
  5411                           
  5412                           ;ST7735_TFT.c: 425: PORTCbits.RC2 = 1;
  5413  001120  8482               	bsf	3970,2,c	;volatile
  5414                           
  5415                           ;ST7735_TFT.c: 426: PORTCbits.RC4 = 0;
  5416  001122  9882               	bcf	3970,4,c	;volatile
  5417                           
  5418                           ;ST7735_TFT.c: 428: while (h--) {
  5419  001124  D007               	goto	l3370
  5420  001126                     l3368:
  5421                           
  5422                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5423  001126  5020               	movf	drawFastVLine@hi,w,c
  5424  001128  EC6A  F00B         	call	_spiwrite
  5425                           
  5426                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5427  00112C  5021               	movf	drawFastVLine@lo,w,c
  5428  00112E  EC6A  F00B         	call	_spiwrite
  5429  001132  D000               	goto	l3370
  5430  001134                     l3370:
  5431  001134  0619               	decf	drawFastVLine@h,f,c
  5432  001136  2819               	incf	drawFastVLine@h,w,c
  5433  001138  A4D8               	btfss	status,2,c
  5434  00113A  D7F5               	goto	l3368
  5435                           
  5436                           ;ST7735_TFT.c: 431: }
  5437                           ;ST7735_TFT.c: 432: PORTCbits.RC4 = 1;
  5438  00113C  8882               	bsf	3970,4,c	;volatile
  5439  00113E                     l269:
  5440  00113E  0012               	return		;funcret
  5441  001140                     __end_of_drawFastVLine:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           intcon	equ	0xFF2
  5450                           intcon2	equ	0xFF1
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           postdec1	equ	0xFE5
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _drawPixel *****************
  5463 ;; Defined at:
  5464 ;;		line 407 in file "ST7735_TFT.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  x               1    wreg     unsigned char 
  5467 ;;  y               1   23[COMRAM] unsigned char 
  5468 ;;  color           2   24[COMRAM] unsigned int 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  x               1   26[COMRAM] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5480 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:        4 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    6
  5487 ;; This function calls:
  5488 ;;		_setAddrWindow
  5489 ;;		_write_data
  5490 ;; This function is called by:
  5491 ;;		_drawChar
  5492 ;;		_drawCircle
  5493 ;;		_drawCircleHelper
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text21
  5498  0015C6                     __ptext21:
  5499                           	opt stack 0
  5500  0015C6                     _drawPixel:
  5501                           	opt stack 22
  5502                           
  5503                           ;incstack = 0
  5504                           ;drawPixel@x stored from wreg
  5505  0015C6  6E1B               	movwf	drawPixel@x,c
  5506                           
  5507                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5508  0015C8  0E80               	movlw	128
  5509  0015CA  601B               	cpfslt	drawPixel@x,c
  5510  0015CC  D013               	goto	l263
  5511  0015CE  0E9F               	movlw	159
  5512  0015D0  6418               	cpfsgt	drawPixel@y,c
  5513  0015D2  D001               	goto	l3396
  5514                           
  5515                           ;ST7735_TFT.c: 410: return;
  5516  0015D4  D00F               	goto	l263
  5517  0015D6                     l3396:
  5518                           
  5519                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5520  0015D6  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5521  0015DA  281B               	incf	drawPixel@x,w,c
  5522  0015DC  6E15               	movwf	setAddrWindow@x1,c
  5523  0015DE  2818               	incf	drawPixel@y,w,c
  5524  0015E0  6E16               	movwf	setAddrWindow@y1,c
  5525  0015E2  501B               	movf	drawPixel@x,w,c
  5526  0015E4  EC40  F00A         	call	_setAddrWindow
  5527                           
  5528                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5529  0015E8  501A               	movf	drawPixel@color+1,w,c
  5530  0015EA  EC86  F00B         	call	_write_data
  5531                           
  5532                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5533  0015EE  5019               	movf	drawPixel@color,w,c
  5534  0015F0  EC86  F00B         	call	_write_data
  5535  0015F4                     l263:
  5536  0015F4  0012               	return		;funcret
  5537  0015F6                     __end_of_drawPixel:
  5538                           	opt stack 0
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           intcon	equ	0xFF2
  5546                           intcon2	equ	0xFF1
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _setAddrWindow *****************
  5559 ;; Defined at:
  5560 ;;		line 392 in file "ST7735_TFT.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  x0              1    wreg     unsigned char 
  5563 ;;  y0              1   19[COMRAM] unsigned char 
  5564 ;;  x1              1   20[COMRAM] unsigned char 
  5565 ;;  y1              1   21[COMRAM] unsigned char 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  x0              1   22[COMRAM] unsigned char 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;		None               void
  5570 ;; Registers used:
  5571 ;;		wreg, status,2, status,0, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5577 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;Total ram usage:        4 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    5
  5584 ;; This function calls:
  5585 ;;		_write_command
  5586 ;;		_write_data
  5587 ;; This function is called by:
  5588 ;;		_drawPixel
  5589 ;;		_drawFastVLine
  5590 ;;		_fillRectangle
  5591 ;;		_drawFastHLine
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text22
  5596  001480                     __ptext22:
  5597                           	opt stack 0
  5598  001480                     _setAddrWindow:
  5599                           	opt stack 22
  5600                           
  5601                           ;incstack = 0
  5602                           ;setAddrWindow@x0 stored from wreg
  5603  001480  6E17               	movwf	setAddrWindow@x0,c
  5604                           
  5605                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5606  001482  0E2A               	movlw	42
  5607  001484  EC8E  F00B         	call	_write_command
  5608                           
  5609                           ;ST7735_TFT.c: 395: write_data(0);
  5610  001488  0E00               	movlw	0
  5611  00148A  EC86  F00B         	call	_write_data
  5612                           
  5613                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5614  00148E  5017               	movf	setAddrWindow@x0,w,c
  5615  001490  246D               	addwf	_colstart,w,c
  5616  001492  EC86  F00B         	call	_write_data
  5617                           
  5618                           ;ST7735_TFT.c: 397: write_data(0);
  5619  001496  0E00               	movlw	0
  5620  001498  EC86  F00B         	call	_write_data
  5621                           
  5622                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5623  00149C  5015               	movf	setAddrWindow@x1,w,c
  5624  00149E  246D               	addwf	_colstart,w,c
  5625  0014A0  EC86  F00B         	call	_write_data
  5626                           
  5627                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5628  0014A4  0E2B               	movlw	43
  5629  0014A6  EC8E  F00B         	call	_write_command
  5630                           
  5631                           ;ST7735_TFT.c: 400: write_data(0);
  5632  0014AA  0E00               	movlw	0
  5633  0014AC  EC86  F00B         	call	_write_data
  5634                           
  5635                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5636  0014B0  5014               	movf	setAddrWindow@y0,w,c
  5637  0014B2  246F               	addwf	_rowstart,w,c
  5638  0014B4  EC86  F00B         	call	_write_data
  5639                           
  5640                           ;ST7735_TFT.c: 402: write_data(0);
  5641  0014B8  0E00               	movlw	0
  5642  0014BA  EC86  F00B         	call	_write_data
  5643                           
  5644                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5645  0014BE  5016               	movf	setAddrWindow@y1,w,c
  5646  0014C0  246F               	addwf	_rowstart,w,c
  5647  0014C2  EC86  F00B         	call	_write_data
  5648                           
  5649                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5650  0014C6  0E2C               	movlw	44
  5651  0014C8  EC8E  F00B         	call	_write_command
  5652  0014CC  0012               	return		;funcret
  5653  0014CE                     __end_of_setAddrWindow:
  5654                           	opt stack 0
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           prodh	equ	0xFF4
  5660                           prodl	equ	0xFF3
  5661                           intcon	equ	0xFF2
  5662                           intcon2	equ	0xFF1
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           postdec1	equ	0xFE5
  5666                           fsr1l	equ	0xFE1
  5667                           indf2	equ	0xFDF
  5668                           postinc2	equ	0xFDE
  5669                           postdec2	equ	0xFDD
  5670                           fsr2h	equ	0xFDA
  5671                           fsr2l	equ	0xFD9
  5672                           status	equ	0xFD8
  5673                           
  5674 ;; *************** function _TFT_GreenTab_Initialize *****************
  5675 ;; Defined at:
  5676 ;;		line 644 in file "ST7735_TFT.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;Total ram usage:        0 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    6
  5697 ;; This function calls:
  5698 ;;		_Rcmd1
  5699 ;;		_Rcmd2red
  5700 ;;		_Rcmd3
  5701 ;;		_write_command
  5702 ;;		_write_data
  5703 ;; This function is called by:
  5704 ;;		_Initialize_Screen
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text23
  5709  0015F6                     __ptext23:
  5710                           	opt stack 0
  5711  0015F6                     _TFT_GreenTab_Initialize:
  5712                           	opt stack 23
  5713                           
  5714                           ;ST7735_TFT.c: 646: PORTCbits.RC4 = 1;
  5715                           
  5716                           ;incstack = 0
  5717  0015F6  8882               	bsf	3970,4,c	;volatile
  5718                           
  5719                           ;ST7735_TFT.c: 647: PORTCbits.RC2 = 0;
  5720  0015F8  9482               	bcf	3970,2,c	;volatile
  5721                           
  5722                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5723  0015FA  0E80               	movlw	128
  5724  0015FC  6EC7               	movwf	4039,c	;volatile
  5725                           
  5726                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5727  0015FE  0E30               	movlw	48
  5728  001600  6EC6               	movwf	4038,c	;volatile
  5729                           
  5730                           ;ST7735_TFT.c: 653: Rcmd1();
  5731  001602  ECDB  F005         	call	_Rcmd1	;wreg free
  5732                           
  5733                           ;ST7735_TFT.c: 654: Rcmd2red();
  5734  001606  ECAB  F00A         	call	_Rcmd2red	;wreg free
  5735                           
  5736                           ;ST7735_TFT.c: 655: Rcmd3();
  5737  00160A  ECE8  F006         	call	_Rcmd3	;wreg free
  5738                           
  5739                           ;ST7735_TFT.c: 656: write_command(0x36);
  5740  00160E  0E36               	movlw	54
  5741  001610  EC8E  F00B         	call	_write_command
  5742                           
  5743                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5744  001614  0EC0               	movlw	192
  5745  001616  EC86  F00B         	call	_write_data
  5746                           
  5747                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5748  00161A  0E01               	movlw	1
  5749  00161C  6E6B               	movwf	__tft_type,c
  5750  00161E  0012               	return		;funcret
  5751  001620                     __end_of_TFT_GreenTab_Initialize:
  5752                           	opt stack 0
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           intcon	equ	0xFF2
  5760                           intcon2	equ	0xFF1
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function _Rcmd3 *****************
  5773 ;; Defined at:
  5774 ;;		line 338 in file "ST7735_TFT.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;		None
  5779 ;; Return value:  Size  Location     Type
  5780 ;;		None               void
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;Total ram usage:        0 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    5
  5795 ;; This function calls:
  5796 ;;		_delay_ms
  5797 ;;		_write_command
  5798 ;;		_write_data
  5799 ;; This function is called by:
  5800 ;;		_TFT_GreenTab_Initialize
  5801 ;;		_TFT_BlackTab_Initialize
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text24
  5806  000DD0                     __ptext24:
  5807                           	opt stack 0
  5808  000DD0                     _Rcmd3:
  5809                           	opt stack 23
  5810                           
  5811                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5812                           
  5813                           ;incstack = 0
  5814  000DD0  0EE0               	movlw	224
  5815  000DD2  EC8E  F00B         	call	_write_command
  5816                           
  5817                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5818  000DD6  0E02               	movlw	2
  5819  000DD8  EC86  F00B         	call	_write_data
  5820  000DDC  0E1C               	movlw	28
  5821  000DDE  EC86  F00B         	call	_write_data
  5822  000DE2  0E07               	movlw	7
  5823  000DE4  EC86  F00B         	call	_write_data
  5824  000DE8  0E12               	movlw	18
  5825  000DEA  EC86  F00B         	call	_write_data
  5826                           
  5827                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5828  000DEE  0E37               	movlw	55
  5829  000DF0  EC86  F00B         	call	_write_data
  5830  000DF4  0E32               	movlw	50
  5831  000DF6  EC86  F00B         	call	_write_data
  5832  000DFA  0E29               	movlw	41
  5833  000DFC  EC86  F00B         	call	_write_data
  5834  000E00  0E2D               	movlw	45
  5835  000E02  EC86  F00B         	call	_write_data
  5836                           
  5837                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5838  000E06  0E29               	movlw	41
  5839  000E08  EC86  F00B         	call	_write_data
  5840  000E0C  0E25               	movlw	37
  5841  000E0E  EC86  F00B         	call	_write_data
  5842  000E12  0E2B               	movlw	43
  5843  000E14  EC86  F00B         	call	_write_data
  5844  000E18  0E39               	movlw	57
  5845  000E1A  EC86  F00B         	call	_write_data
  5846                           
  5847                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5848  000E1E  0E00               	movlw	0
  5849  000E20  EC86  F00B         	call	_write_data
  5850  000E24  0E01               	movlw	1
  5851  000E26  EC86  F00B         	call	_write_data
  5852  000E2A  0E03               	movlw	3
  5853  000E2C  EC86  F00B         	call	_write_data
  5854  000E30  0E10               	movlw	16
  5855  000E32  EC86  F00B         	call	_write_data
  5856                           
  5857                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5858  000E36  0EE1               	movlw	225
  5859  000E38  EC8E  F00B         	call	_write_command
  5860                           
  5861                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5862  000E3C  0E03               	movlw	3
  5863  000E3E  EC86  F00B         	call	_write_data
  5864  000E42  0E1D               	movlw	29
  5865  000E44  EC86  F00B         	call	_write_data
  5866  000E48  0E07               	movlw	7
  5867  000E4A  EC86  F00B         	call	_write_data
  5868  000E4E  0E06               	movlw	6
  5869  000E50  EC86  F00B         	call	_write_data
  5870                           
  5871                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5872  000E54  0E2E               	movlw	46
  5873  000E56  EC86  F00B         	call	_write_data
  5874  000E5A  0E2C               	movlw	44
  5875  000E5C  EC86  F00B         	call	_write_data
  5876  000E60  0E29               	movlw	41
  5877  000E62  EC86  F00B         	call	_write_data
  5878  000E66  0E2D               	movlw	45
  5879  000E68  EC86  F00B         	call	_write_data
  5880                           
  5881                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5882  000E6C  0E2E               	movlw	46
  5883  000E6E  EC86  F00B         	call	_write_data
  5884  000E72  0E2E               	movlw	46
  5885  000E74  EC86  F00B         	call	_write_data
  5886  000E78  0E37               	movlw	55
  5887  000E7A  EC86  F00B         	call	_write_data
  5888  000E7E  0E3F               	movlw	63
  5889  000E80  EC86  F00B         	call	_write_data
  5890                           
  5891                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5892  000E84  0E00               	movlw	0
  5893  000E86  EC86  F00B         	call	_write_data
  5894  000E8A  0E00               	movlw	0
  5895  000E8C  EC86  F00B         	call	_write_data
  5896  000E90  0E02               	movlw	2
  5897  000E92  EC86  F00B         	call	_write_data
  5898  000E96  0E10               	movlw	16
  5899  000E98  EC86  F00B         	call	_write_data
  5900                           
  5901                           ;ST7735_TFT.c: 350: write_command(0x13);
  5902  000E9C  0E13               	movlw	19
  5903  000E9E  EC8E  F00B         	call	_write_command
  5904                           
  5905                           ;ST7735_TFT.c: 351: delay_ms(10);
  5906  000EA2  0E00               	movlw	0
  5907  000EA4  6E18               	movwf	delay_ms@ms+1,c
  5908  000EA6  0E0A               	movlw	10
  5909  000EA8  6E17               	movwf	delay_ms@ms,c
  5910  000EAA  EC17  F00A         	call	_delay_ms	;wreg free
  5911                           
  5912                           ;ST7735_TFT.c: 352: write_command(0x29);
  5913  000EAE  0E29               	movlw	41
  5914  000EB0  EC8E  F00B         	call	_write_command
  5915                           
  5916                           ;ST7735_TFT.c: 353: delay_ms(100);
  5917  000EB4  0E00               	movlw	0
  5918  000EB6  6E18               	movwf	delay_ms@ms+1,c
  5919  000EB8  0E64               	movlw	100
  5920  000EBA  6E17               	movwf	delay_ms@ms,c
  5921  000EBC  EC17  F00A         	call	_delay_ms	;wreg free
  5922  000EC0  0012               	return		;funcret
  5923  000EC2                     __end_of_Rcmd3:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           intcon	equ	0xFF2
  5932                           intcon2	equ	0xFF1
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           postdec1	equ	0xFE5
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _Rcmd2red *****************
  5945 ;; Defined at:
  5946 ;;		line 328 in file "ST7735_TFT.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;		None               void
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    5
  5967 ;; This function calls:
  5968 ;;		_write_command
  5969 ;;		_write_data
  5970 ;; This function is called by:
  5971 ;;		_TFT_GreenTab_Initialize
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text25
  5976  001556                     __ptext25:
  5977                           	opt stack 0
  5978  001556                     _Rcmd2red:
  5979                           	opt stack 23
  5980                           
  5981                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5982                           
  5983                           ;incstack = 0
  5984  001556  0E2A               	movlw	42
  5985  001558  EC8E  F00B         	call	_write_command
  5986                           
  5987                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5988  00155C  0E00               	movlw	0
  5989  00155E  EC86  F00B         	call	_write_data
  5990  001562  0E00               	movlw	0
  5991  001564  EC86  F00B         	call	_write_data
  5992                           
  5993                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5994  001568  0E00               	movlw	0
  5995  00156A  EC86  F00B         	call	_write_data
  5996  00156E  0E7F               	movlw	127
  5997  001570  EC86  F00B         	call	_write_data
  5998                           
  5999                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6000  001574  0E2B               	movlw	43
  6001  001576  EC8E  F00B         	call	_write_command
  6002                           
  6003                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6004  00157A  0E00               	movlw	0
  6005  00157C  EC86  F00B         	call	_write_data
  6006  001580  0E00               	movlw	0
  6007  001582  EC86  F00B         	call	_write_data
  6008                           
  6009                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6010  001586  0E00               	movlw	0
  6011  001588  EC86  F00B         	call	_write_data
  6012  00158C  0E9F               	movlw	159
  6013  00158E  EC86  F00B         	call	_write_data
  6014  001592  0012               	return		;funcret
  6015  001594                     __end_of_Rcmd2red:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           intcon	equ	0xFF2
  6024                           intcon2	equ	0xFF1
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           postdec1	equ	0xFE5
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function _Rcmd1 *****************
  6037 ;; Defined at:
  6038 ;;		line 281 in file "ST7735_TFT.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;		None               void
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    5
  6059 ;; This function calls:
  6060 ;;		_delay_ms
  6061 ;;		_write_command
  6062 ;;		_write_data
  6063 ;; This function is called by:
  6064 ;;		_TFT_GreenTab_Initialize
  6065 ;;		_TFT_BlackTab_Initialize
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text26
  6070  000BB6                     __ptext26:
  6071                           	opt stack 0
  6072  000BB6                     _Rcmd1:
  6073                           	opt stack 23
  6074                           
  6075                           ;ST7735_TFT.c: 283: write_command(0x01);
  6076                           
  6077                           ;incstack = 0
  6078  000BB6  0E01               	movlw	1
  6079  000BB8  EC8E  F00B         	call	_write_command
  6080                           
  6081                           ;ST7735_TFT.c: 284: delay_ms(150);
  6082  000BBC  0E00               	movlw	0
  6083  000BBE  6E18               	movwf	delay_ms@ms+1,c
  6084  000BC0  0E96               	movlw	150
  6085  000BC2  6E17               	movwf	delay_ms@ms,c
  6086  000BC4  EC17  F00A         	call	_delay_ms	;wreg free
  6087                           
  6088                           ;ST7735_TFT.c: 285: write_command(0x11);
  6089  000BC8  0E11               	movlw	17
  6090  000BCA  EC8E  F00B         	call	_write_command
  6091                           
  6092                           ;ST7735_TFT.c: 286: delay_ms(500);
  6093  000BCE  0E01               	movlw	1
  6094  000BD0  6E18               	movwf	delay_ms@ms+1,c
  6095  000BD2  0EF4               	movlw	244
  6096  000BD4  6E17               	movwf	delay_ms@ms,c
  6097  000BD6  EC17  F00A         	call	_delay_ms	;wreg free
  6098                           
  6099                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6100  000BDA  0EB1               	movlw	177
  6101  000BDC  EC8E  F00B         	call	_write_command
  6102                           
  6103                           ;ST7735_TFT.c: 288: write_data(0x01);
  6104  000BE0  0E01               	movlw	1
  6105  000BE2  EC86  F00B         	call	_write_data
  6106                           
  6107                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6108  000BE6  0E2C               	movlw	44
  6109  000BE8  EC86  F00B         	call	_write_data
  6110                           
  6111                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6112  000BEC  0E2D               	movlw	45
  6113  000BEE  EC86  F00B         	call	_write_data
  6114                           
  6115                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6116  000BF2  0EB2               	movlw	178
  6117  000BF4  EC8E  F00B         	call	_write_command
  6118                           
  6119                           ;ST7735_TFT.c: 292: write_data(0x01);
  6120  000BF8  0E01               	movlw	1
  6121  000BFA  EC86  F00B         	call	_write_data
  6122                           
  6123                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6124  000BFE  0E2C               	movlw	44
  6125  000C00  EC86  F00B         	call	_write_data
  6126                           
  6127                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6128  000C04  0E2D               	movlw	45
  6129  000C06  EC86  F00B         	call	_write_data
  6130                           
  6131                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6132  000C0A  0EB3               	movlw	179
  6133  000C0C  EC8E  F00B         	call	_write_command
  6134                           
  6135                           ;ST7735_TFT.c: 296: write_data(0x01);
  6136  000C10  0E01               	movlw	1
  6137  000C12  EC86  F00B         	call	_write_data
  6138                           
  6139                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6140  000C16  0E2C               	movlw	44
  6141  000C18  EC86  F00B         	call	_write_data
  6142                           
  6143                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6144  000C1C  0E2D               	movlw	45
  6145  000C1E  EC86  F00B         	call	_write_data
  6146                           
  6147                           ;ST7735_TFT.c: 299: write_data(0x01);
  6148  000C22  0E01               	movlw	1
  6149  000C24  EC86  F00B         	call	_write_data
  6150                           
  6151                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6152  000C28  0E2C               	movlw	44
  6153  000C2A  EC86  F00B         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6156  000C2E  0E2D               	movlw	45
  6157  000C30  EC86  F00B         	call	_write_data
  6158                           
  6159                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6160  000C34  0EB4               	movlw	180
  6161  000C36  EC8E  F00B         	call	_write_command
  6162                           
  6163                           ;ST7735_TFT.c: 303: write_data(0x07);
  6164  000C3A  0E07               	movlw	7
  6165  000C3C  EC86  F00B         	call	_write_data
  6166                           
  6167                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6168  000C40  0EC0               	movlw	192
  6169  000C42  EC8E  F00B         	call	_write_command
  6170                           
  6171                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6172  000C46  0EA2               	movlw	162
  6173  000C48  EC86  F00B         	call	_write_data
  6174                           
  6175                           ;ST7735_TFT.c: 306: write_data(0x02);
  6176  000C4C  0E02               	movlw	2
  6177  000C4E  EC86  F00B         	call	_write_data
  6178                           
  6179                           ;ST7735_TFT.c: 307: write_data(0x84);
  6180  000C52  0E84               	movlw	132
  6181  000C54  EC86  F00B         	call	_write_data
  6182                           
  6183                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6184  000C58  0EC1               	movlw	193
  6185  000C5A  EC8E  F00B         	call	_write_command
  6186                           
  6187                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6188  000C5E  0EC5               	movlw	197
  6189  000C60  EC86  F00B         	call	_write_data
  6190                           
  6191                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6192  000C64  0EC2               	movlw	194
  6193  000C66  EC8E  F00B         	call	_write_command
  6194                           
  6195                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6196  000C6A  0E0A               	movlw	10
  6197  000C6C  EC86  F00B         	call	_write_data
  6198                           
  6199                           ;ST7735_TFT.c: 312: write_data(0x00);
  6200  000C70  0E00               	movlw	0
  6201  000C72  EC86  F00B         	call	_write_data
  6202                           
  6203                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6204  000C76  0EC3               	movlw	195
  6205  000C78  EC8E  F00B         	call	_write_command
  6206                           
  6207                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6208  000C7C  0E8A               	movlw	138
  6209  000C7E  EC86  F00B         	call	_write_data
  6210                           
  6211                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6212  000C82  0E2A               	movlw	42
  6213  000C84  EC86  F00B         	call	_write_data
  6214                           
  6215                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6216  000C88  0EC4               	movlw	196
  6217  000C8A  EC8E  F00B         	call	_write_command
  6218                           
  6219                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6220  000C8E  0E8A               	movlw	138
  6221  000C90  EC86  F00B         	call	_write_data
  6222                           
  6223                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6224  000C94  0EEE               	movlw	238
  6225  000C96  EC86  F00B         	call	_write_data
  6226                           
  6227                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6228  000C9A  0EC5               	movlw	197
  6229  000C9C  EC8E  F00B         	call	_write_command
  6230                           
  6231                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6232  000CA0  0E0E               	movlw	14
  6233  000CA2  EC86  F00B         	call	_write_data
  6234                           
  6235                           ;ST7735_TFT.c: 321: write_command(0x20);
  6236  000CA6  0E20               	movlw	32
  6237  000CA8  EC8E  F00B         	call	_write_command
  6238                           
  6239                           ;ST7735_TFT.c: 322: write_command(0x36);
  6240  000CAC  0E36               	movlw	54
  6241  000CAE  EC8E  F00B         	call	_write_command
  6242                           
  6243                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6244  000CB2  0EC8               	movlw	200
  6245  000CB4  EC86  F00B         	call	_write_data
  6246                           
  6247                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6248  000CB8  0E3A               	movlw	58
  6249  000CBA  EC8E  F00B         	call	_write_command
  6250                           
  6251                           ;ST7735_TFT.c: 325: write_data(0x05);
  6252  000CBE  0E05               	movlw	5
  6253  000CC0  EC86  F00B         	call	_write_data
  6254  000CC4  0012               	return		;funcret
  6255  000CC6                     __end_of_Rcmd1:
  6256                           	opt stack 0
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon2	equ	0xFF1
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           postdec1	equ	0xFE5
  6268                           fsr1l	equ	0xFE1
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           fsr2h	equ	0xFDA
  6273                           fsr2l	equ	0xFD9
  6274                           status	equ	0xFD8
  6275                           
  6276 ;; *************** function _write_data *****************
  6277 ;; Defined at:
  6278 ;;		line 209 in file "ST7735_TFT.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;  data_           1    wreg     unsigned char 
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;  data_           1   18[COMRAM] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;		None               void
  6285 ;; Registers used:
  6286 ;;		wreg, status,2, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;Total ram usage:        1 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    4
  6299 ;; This function calls:
  6300 ;;		_spiwrite
  6301 ;; This function is called by:
  6302 ;;		_Rcmd1
  6303 ;;		_Rcmd2red
  6304 ;;		_Rcmd3
  6305 ;;		_setAddrWindow
  6306 ;;		_drawPixel
  6307 ;;		_TFT_GreenTab_Initialize
  6308 ;;		_Bcmd
  6309 ;;		_setScrollDefinition
  6310 ;;		_Rcmd2green
  6311 ;;		_VerticalScroll
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text27
  6316  00170C                     __ptext27:
  6317                           	opt stack 0
  6318  00170C                     _write_data:
  6319                           	opt stack 22
  6320                           
  6321                           ;incstack = 0
  6322                           ;write_data@data_ stored from wreg
  6323  00170C  6E13               	movwf	write_data@data_,c
  6324                           
  6325                           ;ST7735_TFT.c: 211: PORTCbits.RC4 = 0;
  6326  00170E  9882               	bcf	3970,4,c	;volatile
  6327                           
  6328                           ;ST7735_TFT.c: 212: PORTCbits.RC2 = 1;
  6329  001710  8482               	bsf	3970,2,c	;volatile
  6330                           
  6331                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6332  001712  5013               	movf	write_data@data_,w,c
  6333  001714  EC6A  F00B         	call	_spiwrite
  6334                           
  6335                           ;ST7735_TFT.c: 214: PORTCbits.RC4 = 1;
  6336  001718  8882               	bsf	3970,4,c	;volatile
  6337  00171A  0012               	return		;funcret
  6338  00171C                     __end_of_write_data:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           intcon2	equ	0xFF1
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postdec1	equ	0xFE5
  6351                           fsr1l	equ	0xFE1
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           fsr2h	equ	0xFDA
  6356                           fsr2l	equ	0xFD9
  6357                           status	equ	0xFD8
  6358                           
  6359 ;; *************** function _write_command *****************
  6360 ;; Defined at:
  6361 ;;		line 198 in file "ST7735_TFT.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  cmd_            1    wreg     unsigned char 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  cmd_            1   18[COMRAM] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;		None               void
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;Total ram usage:        1 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    4
  6382 ;; This function calls:
  6383 ;;		_spiwrite
  6384 ;; This function is called by:
  6385 ;;		_Rcmd1
  6386 ;;		_Rcmd2red
  6387 ;;		_Rcmd3
  6388 ;;		_setAddrWindow
  6389 ;;		_TFT_GreenTab_Initialize
  6390 ;;		_Bcmd
  6391 ;;		_setScrollDefinition
  6392 ;;		_Rcmd2green
  6393 ;;		_VerticalScroll
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text28
  6398  00171C                     __ptext28:
  6399                           	opt stack 0
  6400  00171C                     _write_command:
  6401                           	opt stack 22
  6402                           
  6403                           ;incstack = 0
  6404                           ;write_command@cmd_ stored from wreg
  6405  00171C  6E13               	movwf	write_command@cmd_,c
  6406                           
  6407                           ;ST7735_TFT.c: 200: PORTCbits.RC4 = 0;
  6408  00171E  9882               	bcf	3970,4,c	;volatile
  6409                           
  6410                           ;ST7735_TFT.c: 202: PORTCbits.RC2 = 0;
  6411  001720  9482               	bcf	3970,2,c	;volatile
  6412                           
  6413                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6414  001722  5013               	movf	write_command@cmd_,w,c
  6415  001724  EC6A  F00B         	call	_spiwrite
  6416                           
  6417                           ;ST7735_TFT.c: 205: PORTCbits.RC4 = 1;
  6418  001728  8882               	bsf	3970,4,c	;volatile
  6419  00172A  0012               	return		;funcret
  6420  00172C                     __end_of_write_command:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           postdec1	equ	0xFE5
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _spiwrite *****************
  6442 ;; Defined at:
  6443 ;;		line 189 in file "ST7735_TFT.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  spidata         1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  spidata         1   17[COMRAM] unsigned char 
  6448 ;;  x               1   16[COMRAM] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;		None               void
  6451 ;; Registers used:
  6452 ;;		wreg
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;Total ram usage:        2 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    3
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_write_command
  6469 ;;		_write_data
  6470 ;;		_drawFastVLine
  6471 ;;		_fillRectangle
  6472 ;;		_drawFastHLine
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text29
  6477  0016D4                     __ptext29:
  6478                           	opt stack 0
  6479  0016D4                     _spiwrite:
  6480                           	opt stack 24
  6481                           
  6482                           ;incstack = 0
  6483                           ;spiwrite@spidata stored from wreg
  6484  0016D4  6E12               	movwf	spiwrite@spidata,c
  6485                           
  6486                           ;ST7735_TFT.c: 191: char x;
  6487                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6488  0016D6  969E               	bcf	3998,3,c	;volatile
  6489                           
  6490                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6491  0016D8  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6492                           
  6493                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6494  0016DC  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6495                           
  6496                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6497  0016E0  D000               	goto	l219
  6498  0016E2                     l219:
  6499  0016E2  A0C7               	btfss	4039,0,c	;volatile
  6500  0016E4  D7FE               	goto	l219
  6501  0016E6  0012               	return		;funcret
  6502  0016E8                     __end_of_spiwrite:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon2	equ	0xFF1
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _LCD_Reset *****************
  6524 ;; Defined at:
  6525 ;;		line 217 in file "ST7735_TFT.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;		None               void
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    5
  6546 ;; This function calls:
  6547 ;;		_delay_ms
  6548 ;; This function is called by:
  6549 ;;		_Initialize_Screen
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text30
  6554  0016E8                     __ptext30:
  6555                           	opt stack 0
  6556  0016E8                     _LCD_Reset:
  6557                           	opt stack 24
  6558                           
  6559                           ;ST7735_TFT.c: 219: PORTCbits.RC0 = 0;
  6560                           
  6561                           ;incstack = 0
  6562  0016E8  9082               	bcf	3970,0,c	;volatile
  6563                           
  6564                           ;ST7735_TFT.c: 220: delay_ms(100);
  6565  0016EA  0E00               	movlw	0
  6566  0016EC  6E18               	movwf	delay_ms@ms+1,c
  6567  0016EE  0E64               	movlw	100
  6568  0016F0  6E17               	movwf	delay_ms@ms,c
  6569  0016F2  EC17  F00A         	call	_delay_ms	;wreg free
  6570                           
  6571                           ;ST7735_TFT.c: 221: PORTCbits.RC0 = 1;
  6572  0016F6  8082               	bsf	3970,0,c	;volatile
  6573  0016F8  0012               	return		;funcret
  6574  0016FA                     __end_of_LCD_Reset:
  6575                           	opt stack 0
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           intcon2	equ	0xFF1
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           postdec1	equ	0xFE5
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           fsr2h	equ	0xFDA
  6592                           fsr2l	equ	0xFD9
  6593                           status	equ	0xFD8
  6594                           
  6595 ;; *************** function _delay_ms *****************
  6596 ;; Defined at:
  6597 ;;		line 64 in file "ST7735_TFT.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  ms              2   22[COMRAM] int 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  count           2   26[COMRAM] int 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;		None               void
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:        6 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    4
  6618 ;; This function calls:
  6619 ;;		___wmul
  6620 ;; This function is called by:
  6621 ;;		_LCD_Reset
  6622 ;;		_Rcmd1
  6623 ;;		_Rcmd3
  6624 ;;		_Bcmd
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text31
  6629  00142E                     __ptext31:
  6630                           	opt stack 0
  6631  00142E                     _delay_ms:
  6632                           	opt stack 23
  6633                           
  6634                           ;ST7735_TFT.c: 70: int count;
  6635                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6636                           
  6637                           ;incstack = 0
  6638  00142E  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6639  001432  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6640  001436  0E00               	movlw	0
  6641  001438  6E14               	movwf	___wmul@multiplicand+1,c
  6642  00143A  0EFA               	movlw	250
  6643  00143C  6E13               	movwf	___wmul@multiplicand,c
  6644  00143E  EC10  F00B         	call	___wmul	;wreg free
  6645  001442  C011  F01B         	movff	?___wmul,delay_ms@count
  6646  001446  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6647                           
  6648                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6649  00144A  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6650  00144E  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6651  001452  1E19               	comf	??_delay_ms,f,c
  6652  001454  1E1A               	comf	??_delay_ms+1,f,c
  6653  001456  4A19               	infsnz	??_delay_ms,f,c
  6654  001458  2A1A               	incf	??_delay_ms+1,f,c
  6655  00145A  0EFF               	movlw	255
  6656  00145C  2419               	addwf	??_delay_ms,w,c
  6657  00145E  6E1B               	movwf	delay_ms@count,c
  6658  001460  0EFF               	movlw	255
  6659  001462  201A               	addwfc	??_delay_ms+1,w,c
  6660  001464  6E1C               	movwf	delay_ms@count+1,c
  6661                           
  6662                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6663  001466  0EB8               	movlw	184
  6664  001468  6EB1               	movwf	4017,c	;volatile
  6665                           
  6666                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6667  00146A  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6668                           
  6669                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6670  00146E  501C               	movf	delay_ms@count+1,w,c
  6671  001470  6EB3               	movwf	4019,c	;volatile
  6672                           
  6673                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6674  001472  92A1               	bcf	4001,1,c	;volatile
  6675                           
  6676                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6677  001474  80B1               	bsf	4017,0,c	;volatile
  6678                           
  6679                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6680  001476  D000               	goto	l209
  6681  001478                     l209:
  6682  001478  A2A1               	btfss	4001,1,c	;volatile
  6683  00147A  D7FE               	goto	l209
  6684                           
  6685                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6686  00147C  90B1               	bcf	4017,0,c	;volatile
  6687  00147E  0012               	return		;funcret
  6688  001480                     __end_of_delay_ms:
  6689                           	opt stack 0
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           intcon2	equ	0xFF1
  6698                           postinc0	equ	0xFEE
  6699                           wreg	equ	0xFE8
  6700                           postdec1	equ	0xFE5
  6701                           fsr1l	equ	0xFE1
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           postdec2	equ	0xFDD
  6705                           fsr2h	equ	0xFDA
  6706                           fsr2l	equ	0xFD9
  6707                           status	equ	0xFD8
  6708                           
  6709 ;; *************** function ___wmul *****************
  6710 ;; Defined at:
  6711 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  multiplier      2   16[COMRAM] unsigned int 
  6714 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  product         2   20[COMRAM] unsigned int 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  2   16[COMRAM] unsigned int 
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, status,0, prodl, prodh
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;Total ram usage:        6 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    3
  6733 ;; This function calls:
  6734 ;;		Nothing
  6735 ;; This function is called by:
  6736 ;;		_delay_ms
  6737 ;;		_drawChar
  6738 ;;		_printf
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           	psect	text32
  6743  001620                     __ptext32:
  6744                           	opt stack 0
  6745  001620                     ___wmul:
  6746                           	opt stack 26
  6747                           
  6748                           ;incstack = 0
  6749  001620  5011               	movf	___wmul@multiplier,w,c
  6750  001622  0213               	mulwf	___wmul@multiplicand,c
  6751  001624  CFF3 F015          	movff	prodl,___wmul@product
  6752  001628  CFF4 F016          	movff	prodh,___wmul@product+1
  6753  00162C  5011               	movf	___wmul@multiplier,w,c
  6754  00162E  0214               	mulwf	___wmul@multiplicand+1,c
  6755  001630  50F3               	movf	prodl,w,c
  6756  001632  2616               	addwf	___wmul@product+1,f,c
  6757  001634  5012               	movf	___wmul@multiplier+1,w,c
  6758  001636  0213               	mulwf	___wmul@multiplicand,c
  6759  001638  50F3               	movf	prodl,w,c
  6760  00163A  2616               	addwf	___wmul@product+1,f,c
  6761  00163C  C015  F011         	movff	___wmul@product,?___wmul
  6762  001640  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6763  001644  D000               	goto	l494
  6764  001646                     l494:
  6765  001646  0012               	return		;funcret
  6766  001648                     __end_of___wmul:
  6767                           	opt stack 0
  6768                           tblptru	equ	0xFF8
  6769                           tblptrh	equ	0xFF7
  6770                           tblptrl	equ	0xFF6
  6771                           tablat	equ	0xFF5
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           intcon	equ	0xFF2
  6775                           intcon2	equ	0xFF1
  6776                           postinc0	equ	0xFEE
  6777                           wreg	equ	0xFE8
  6778                           postdec1	equ	0xFE5
  6779                           fsr1l	equ	0xFE1
  6780                           indf2	equ	0xFDF
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _Deactivate_Buzzer *****************
  6788 ;; Defined at:
  6789 ;;		line 82 in file "Lab10p1.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;		None
  6794 ;; Return value:  Size  Location     Type
  6795 ;;		None               void
  6796 ;; Registers used:
  6797 ;;		wreg, status,2
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;Total ram usage:        0 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    3
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_main
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text33
  6818  001746                     __ptext33:
  6819                           	opt stack 0
  6820  001746                     _Deactivate_Buzzer:
  6821                           	opt stack 27
  6822                           
  6823                           ;Lab10p1.c: 84: CCP2CON = 0x0;
  6824                           
  6825                           ;incstack = 0
  6826  001746  0E00               	movlw	0
  6827  001748  6EBA               	movwf	4026,c	;volatile
  6828                           
  6829                           ;Lab10p1.c: 85: PORTBbits.RB3 = 0;
  6830  00174A  9681               	bcf	3969,3,c	;volatile
  6831  00174C  0012               	return		;funcret
  6832  00174E                     __end_of_Deactivate_Buzzer:
  6833                           	opt stack 0
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           intcon	equ	0xFF2
  6841                           intcon2	equ	0xFF1
  6842                           postinc0	equ	0xFEE
  6843                           wreg	equ	0xFE8
  6844                           postdec1	equ	0xFE5
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _Activate_Buzzer *****************
  6854 ;; Defined at:
  6855 ;;		line 73 in file "Lab10p1.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;		None               void
  6862 ;; Registers used:
  6863 ;;		wreg, status,2
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;Total ram usage:        0 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    3
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text34
  6884  0016FA                     __ptext34:
  6885                           	opt stack 0
  6886  0016FA                     _Activate_Buzzer:
  6887                           	opt stack 27
  6888                           
  6889                           ;Lab10p1.c: 75: PR2 = 0b11111001 ;
  6890                           
  6891                           ;incstack = 0
  6892  0016FA  0EF9               	movlw	249
  6893  0016FC  6ECB               	movwf	4043,c	;volatile
  6894                           
  6895                           ;Lab10p1.c: 76: T2CON = 0b00000101 ;
  6896  0016FE  0E05               	movlw	5
  6897  001700  6ECA               	movwf	4042,c	;volatile
  6898                           
  6899                           ;Lab10p1.c: 77: CCPR2L = 0b01001010 ;
  6900  001702  0E4A               	movlw	74
  6901  001704  6EBB               	movwf	4027,c	;volatile
  6902                           
  6903                           ;Lab10p1.c: 78: CCP2CON = 0b00111100 ;
  6904  001706  0E3C               	movlw	60
  6905  001708  6EBA               	movwf	4026,c	;volatile
  6906  00170A  0012               	return		;funcret
  6907  00170C                     __end_of_Activate_Buzzer:
  6908                           	opt stack 0
  6909                           tblptru	equ	0xFF8
  6910                           tblptrh	equ	0xFF7
  6911                           tblptrl	equ	0xFF6
  6912                           tablat	equ	0xFF5
  6913                           prodh	equ	0xFF4
  6914                           prodl	equ	0xFF3
  6915                           intcon	equ	0xFF2
  6916                           intcon2	equ	0xFF1
  6917                           postinc0	equ	0xFEE
  6918                           wreg	equ	0xFE8
  6919                           postdec1	equ	0xFE5
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _chkisr *****************
  6929 ;; Defined at:
  6930 ;;		line 101 in file "Lab10p1.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;		None               void
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:       14 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    2
  6951 ;; This function calls:
  6952 ;;		_INT0_isr
  6953 ;;		_TIMER1_isr
  6954 ;; This function is called by:
  6955 ;;		Interrupt level 2
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	intcode
  6960  000008                     __pintcode:
  6961                           	opt stack 0
  6962  000008                     _chkisr:
  6963                           	opt stack 20
  6964                           
  6965                           ;incstack = 0
  6966  000008  CFFA F003          	movff	pclath,??_chkisr
  6967  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6968  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6969  000014  EDE1  F008         	call	int_func,f	;refresh shadow registers
  6970                           pclatu	equ	0xFFB
  6971                           pclath	equ	0xFFA
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           intcon2	equ	0xFF1
  6980                           postinc0	equ	0xFEE
  6981                           fsr0l	equ	0xFE9
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992                           	psect	intcode_body
  6993  0011C2                     __pintcode_body:
  6994                           	opt stack 20
  6995  0011C2                     int_func:
  6996                           	opt stack 20
  6997  0011C2  0006               	pop		; remove dummy address from shadow register refresh
  6998  0011C4  CFEA F006          	movff	fsr0h,??_chkisr+3
  6999  0011C8  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7000  0011CC  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7001  0011D0  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7002  0011D4  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7003  0011D8  CFF3 F00B          	movff	prodl,??_chkisr+8
  7004  0011DC  CFF4 F00C          	movff	prodh,??_chkisr+9
  7005  0011E0  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7006  0011E4  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7007  0011E8  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7008  0011EC  CFF5 F010          	movff	tablat,??_chkisr+13
  7009                           
  7010                           ;Lab10p1.c: 103: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7011  0011F0  A09E               	btfss	3998,0,c	;volatile
  7012  0011F2  D003               	goto	i2l1934
  7013  0011F4  EC9D  F00B         	call	_TIMER1_isr	;wreg free
  7014  0011F8  D000               	goto	i2l1934
  7015  0011FA                     i2l1934:
  7016                           
  7017                           ;Lab10p1.c: 104: if (INTCONbits.INT0IF == 1) INT0_isr();
  7018  0011FA  A2F2               	btfss	intcon,1,c	;volatile
  7019  0011FC  D003               	goto	i2l128
  7020  0011FE  EC95  F004         	call	_INT0_isr	;wreg free
  7021  001202  D000               	goto	i2l128
  7022  001204                     i2l128:
  7023  001204  C010  FFF5         	movff	??_chkisr+13,tablat
  7024  001208  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7025  00120C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7026  001210  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7027  001214  C00C  FFF4         	movff	??_chkisr+9,prodh
  7028  001218  C00B  FFF3         	movff	??_chkisr+8,prodl
  7029  00121C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7030  001220  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7031  001224  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7032  001228  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7033  00122C  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7034  001230  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7035  001234  C004  FFFB         	movff	??_chkisr+1,pclatu
  7036  001238  C003  FFFA         	movff	??_chkisr,pclath
  7037  00123C  0011               	retfie		f
  7038  00123E                     __end_of_chkisr:
  7039                           	opt stack 0
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           intcon2	equ	0xFF1
  7050                           postinc0	equ	0xFEE
  7051                           fsr0h	equ	0xFEA
  7052                           fsr0l	equ	0xFE9
  7053                           wreg	equ	0xFE8
  7054                           postdec1	equ	0xFE5
  7055                           fsr1h	equ	0xFE2
  7056                           fsr1l	equ	0xFE1
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function _TIMER1_isr *****************
  7065 ;; Defined at:
  7066 ;;		line 107 in file "Lab10p1.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;		None
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;		None               void
  7073 ;; Registers used:
  7074 ;;		wreg, status,2
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;Total ram usage:        0 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_chkisr
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text36
  7094  00173A                     __ptext36:
  7095                           	opt stack 0
  7096  00173A                     _TIMER1_isr:
  7097                           	opt stack 21
  7098                           
  7099                           ;Lab10p1.c: 109: Nec_state = 0;
  7100                           
  7101                           ;incstack = 0
  7102  00173A  0E00               	movlw	0
  7103  00173C  6E6A               	movwf	_Nec_state,c
  7104                           
  7105                           ;Lab10p1.c: 110: INTCON2bits.INTEDG0 = 0;
  7106  00173E  9CF1               	bcf	intcon2,6,c	;volatile
  7107                           
  7108                           ;Lab10p1.c: 111: T1CONbits.TMR1ON = 0;
  7109  001740  90CD               	bcf	4045,0,c	;volatile
  7110                           
  7111                           ;Lab10p1.c: 112: PIR1bits.TMR1IF = 0;
  7112  001742  909E               	bcf	3998,0,c	;volatile
  7113  001744  0012               	return		;funcret
  7114  001746                     __end_of_TIMER1_isr:
  7115                           	opt stack 0
  7116                           pclatu	equ	0xFFB
  7117                           pclath	equ	0xFFA
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           intcon	equ	0xFF2
  7125                           intcon2	equ	0xFF1
  7126                           postinc0	equ	0xFEE
  7127                           fsr0h	equ	0xFEA
  7128                           fsr0l	equ	0xFE9
  7129                           wreg	equ	0xFE8
  7130                           postdec1	equ	0xFE5
  7131                           fsr1h	equ	0xFE2
  7132                           fsr1l	equ	0xFE1
  7133                           indf2	equ	0xFDF
  7134                           postinc2	equ	0xFDE
  7135                           postdec2	equ	0xFDD
  7136                           fsr2h	equ	0xFDA
  7137                           fsr2l	equ	0xFD9
  7138                           status	equ	0xFD8
  7139                           
  7140 ;; *************** function _INT0_isr *****************
  7141 ;; Defined at:
  7142 ;;		line 121 in file "Lab10p1.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;		None
  7147 ;; Return value:  Size  Location     Type
  7148 ;;		None               void
  7149 ;; Registers used:
  7150 ;;		wreg, status,2, status,0, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;Total ram usage:        2 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    1
  7163 ;; This function calls:
  7164 ;;		_force_nec_state0
  7165 ;; This function is called by:
  7166 ;;		_chkisr
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text37
  7171  00092A                     __ptext37:
  7172                           	opt stack 0
  7173  00092A                     _INT0_isr:
  7174                           	opt stack 20
  7175                           
  7176                           ;Lab10p1.c: 123: INTCONbits.INT0IF = 0;
  7177                           
  7178                           ;incstack = 0
  7179  00092A  92F2               	bcf	intcon,1,c	;volatile
  7180                           
  7181                           ;Lab10p1.c: 124: if (Nec_state != 0)
  7182  00092C  506A               	movf	_Nec_state,w,c
  7183  00092E  B4D8               	btfsc	status,2,c
  7184  000930  D094               	goto	i2l1688
  7185                           
  7186                           ;Lab10p1.c: 125: {
  7187                           ;Lab10p1.c: 126: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7188  000932  50CE               	movf	4046,w,c	;volatile
  7189  000934  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7190  000938  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7191  00093A  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7192  00093E  6A01               	clrf	??_INT0_isr,c
  7193  000940  1001               	iorwf	??_INT0_isr,w,c
  7194  000942  6E61               	movwf	_Time_Elapsed,c
  7195  000944  5002               	movf	??_INT0_isr+1,w,c
  7196  000946  6E62               	movwf	_Time_Elapsed+1,c
  7197                           
  7198                           ;Lab10p1.c: 127: TMR1H = 0;
  7199  000948  0E00               	movlw	0
  7200  00094A  6ECF               	movwf	4047,c	;volatile
  7201                           
  7202                           ;Lab10p1.c: 128: TMR1L = 0;
  7203  00094C  0E00               	movlw	0
  7204  00094E  6ECE               	movwf	4046,c	;volatile
  7205                           
  7206                           ;Lab10p1.c: 129: }
  7207                           ;Lab10p1.c: 131: switch(Nec_state)
  7208  000950  D084               	goto	i2l1688
  7209  000952                     i2l1618:
  7210                           
  7211                           ;Lab10p1.c: 134: {
  7212                           ;Lab10p1.c: 136: TMR1H = 0;
  7213  000952  0E00               	movlw	0
  7214  000954  6ECF               	movwf	4047,c	;volatile
  7215                           
  7216                           ;Lab10p1.c: 137: TMR1L = 0;
  7217  000956  0E00               	movlw	0
  7218  000958  6ECE               	movwf	4046,c	;volatile
  7219                           
  7220                           ;Lab10p1.c: 138: PIR1bits.TMR1IF = 0;
  7221  00095A  909E               	bcf	3998,0,c	;volatile
  7222                           
  7223                           ;Lab10p1.c: 139: T1CON= 0x90;
  7224  00095C  0E90               	movlw	144
  7225  00095E  6ECD               	movwf	4045,c	;volatile
  7226                           
  7227                           ;Lab10p1.c: 140: T1CONbits.TMR1ON = 1;
  7228  000960  80CD               	bsf	4045,0,c	;volatile
  7229                           
  7230                           ;Lab10p1.c: 141: bit_count = 0;
  7231  000962  0E00               	movlw	0
  7232  000964  6E6C               	movwf	_bit_count,c
  7233                           
  7234                           ;Lab10p1.c: 142: Nec_code = 0;
  7235  000966  0E00               	movlw	0
  7236  000968  6E5D               	movwf	_Nec_code,c
  7237  00096A  0E00               	movlw	0
  7238  00096C  6E5E               	movwf	_Nec_code+1,c
  7239  00096E  0E00               	movlw	0
  7240  000970  6E5F               	movwf	_Nec_code+2,c
  7241  000972  0E00               	movlw	0
  7242  000974  6E60               	movwf	_Nec_code+3,c
  7243                           
  7244                           ;Lab10p1.c: 143: Nec_state = 1;
  7245  000976  0E01               	movlw	1
  7246  000978  6E6A               	movwf	_Nec_state,c
  7247  00097A  D06D               	goto	i2l1682
  7248                           
  7249                           ;Lab10p1.c: 145: return;
  7250                           
  7251                           ;Lab10p1.c: 144: INTCON2bits.INTEDG0 = 1;
  7252  00097C  D07F               	goto	i2l140
  7253  00097E                     i2l1628:
  7254                           
  7255                           ;Lab10p1.c: 149: {
  7256                           ;Lab10p1.c: 150: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  7257  00097E  0E35               	movlw	53
  7258  000980  5C61               	subwf	_Time_Elapsed,w,c
  7259  000982  0E21               	movlw	33
  7260  000984  5862               	subwfb	_Time_Elapsed+1,w,c
  7261  000986  A0D8               	btfss	status,0,c
  7262  000988  D009               	goto	i2l1634
  7263  00098A  0E1C               	movlw	28
  7264  00098C  5C61               	subwf	_Time_Elapsed,w,c
  7265  00098E  0E25               	movlw	37
  7266  000990  5862               	subwfb	_Time_Elapsed+1,w,c
  7267  000992  B0D8               	btfsc	status,0,c
  7268  000994  D003               	goto	i2l1634
  7269                           
  7270                           ;Lab10p1.c: 151: {
  7271                           ;Lab10p1.c: 152: Nec_state = 2;
  7272  000996  0E02               	movlw	2
  7273  000998  6E6A               	movwf	_Nec_state,c
  7274                           
  7275                           ;Lab10p1.c: 153: }
  7276  00099A  D02A               	goto	i2l1660
  7277  00099C                     i2l1634:
  7278                           
  7279                           ;Lab10p1.c: 154: else
  7280                           ;Lab10p1.c: 155: {
  7281                           ;Lab10p1.c: 156: force_nec_state0();
  7282  00099C  ECA7  F00B         	call	_force_nec_state0	;wreg free
  7283  0009A0  D027               	goto	i2l1660
  7284  0009A2  D026               	goto	i2l1660
  7285                           
  7286                           ;Lab10p1.c: 159: return;
  7287                           
  7288                           ;Lab10p1.c: 157: }
  7289                           ;Lab10p1.c: 158: INTCON2bits.INTEDG0 = 0;
  7290  0009A4  D06B               	goto	i2l140
  7291  0009A6                     i2l1640:
  7292                           
  7293                           ;Lab10p1.c: 163: {
  7294                           ;Lab10p1.c: 164: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  7295  0009A6  0EA1               	movlw	161
  7296  0009A8  5C61               	subwf	_Time_Elapsed,w,c
  7297  0009AA  0E0F               	movlw	15
  7298  0009AC  5862               	subwfb	_Time_Elapsed+1,w,c
  7299  0009AE  A0D8               	btfss	status,0,c
  7300  0009B0  D009               	goto	i2l1646
  7301  0009B2  0E88               	movlw	136
  7302  0009B4  5C61               	subwf	_Time_Elapsed,w,c
  7303  0009B6  0E13               	movlw	19
  7304  0009B8  5862               	subwfb	_Time_Elapsed+1,w,c
  7305  0009BA  B0D8               	btfsc	status,0,c
  7306  0009BC  D003               	goto	i2l1646
  7307  0009BE                     
  7308                           ;Lab10p1.c: 165: {
  7309                           ;Lab10p1.c: 166: Nec_state = 3;
  7310  0009BE  0E03               	movlw	3
  7311  0009C0  6E6A               	movwf	_Nec_state,c
  7312                           
  7313                           ;Lab10p1.c: 167: }
  7314  0009C2  D049               	goto	i2l1682
  7315  0009C4                     i2l1646:
  7316                           
  7317                           ;Lab10p1.c: 168: else
  7318                           ;Lab10p1.c: 169: {
  7319                           ;Lab10p1.c: 170: force_nec_state0();
  7320  0009C4  ECA7  F00B         	call	_force_nec_state0	;wreg free
  7321  0009C8  D046               	goto	i2l1682
  7322  0009CA  D045               	goto	i2l1682
  7323                           
  7324                           ;Lab10p1.c: 173: return;
  7325                           
  7326                           ;Lab10p1.c: 171: }
  7327                           ;Lab10p1.c: 172: INTCON2bits.INTEDG0 = 1;
  7328  0009CC  D057               	goto	i2l140
  7329  0009CE                     i2l1652:
  7330                           
  7331                           ;Lab10p1.c: 177: {
  7332                           ;Lab10p1.c: 178: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  7333  0009CE  0E91               	movlw	145
  7334  0009D0  5C61               	subwf	_Time_Elapsed,w,c
  7335  0009D2  0E01               	movlw	1
  7336  0009D4  5862               	subwfb	_Time_Elapsed+1,w,c
  7337  0009D6  A0D8               	btfss	status,0,c
  7338  0009D8  D008               	goto	i2l1658
  7339  0009DA  0EBC               	movlw	188
  7340  0009DC  5C61               	subwf	_Time_Elapsed,w,c
  7341  0009DE  0E02               	movlw	2
  7342  0009E0  5862               	subwfb	_Time_Elapsed+1,w,c
  7343  0009E2  B0D8               	btfsc	status,0,c
  7344  0009E4  D002               	goto	i2l1658
  7345                           
  7346                           ;Lab10p1.c: 179: {
  7347                           ;Lab10p1.c: 180: Nec_state = 4;
  7348  0009E6  0E04               	movlw	4
  7349  0009E8  D7D7               	goto	L4
  7350  0009EA                     i2l1658:
  7351                           
  7352                           ;Lab10p1.c: 182: else
  7353                           ;Lab10p1.c: 183: {
  7354                           ;Lab10p1.c: 184: force_nec_state0();
  7355  0009EA  ECA7  F00B         	call	_force_nec_state0	;wreg free
  7356  0009EE  D000               	goto	i2l1660
  7357  0009F0                     i2l1660:
  7358                           
  7359                           ;Lab10p1.c: 185: }
  7360                           ;Lab10p1.c: 186: INTCON2bits.INTEDG0 = 0;
  7361  0009F0  9CF1               	bcf	intcon2,6,c	;volatile
  7362                           
  7363                           ;Lab10p1.c: 187: return;
  7364  0009F2  D044               	goto	i2l140
  7365  0009F4                     i2l1664:
  7366                           
  7367                           ;Lab10p1.c: 191: {
  7368                           ;Lab10p1.c: 192: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  7369  0009F4  0E91               	movlw	145
  7370  0009F6  5C61               	subwf	_Time_Elapsed,w,c
  7371  0009F8  0E01               	movlw	1
  7372  0009FA  5862               	subwfb	_Time_Elapsed+1,w,c
  7373  0009FC  A0D8               	btfss	status,0,c
  7374  0009FE  D028               	goto	i2l1680
  7375  000A00  0E08               	movlw	8
  7376  000A02  5C61               	subwf	_Time_Elapsed,w,c
  7377  000A04  0E07               	movlw	7
  7378  000A06  5862               	subwfb	_Time_Elapsed+1,w,c
  7379  000A08  B0D8               	btfsc	status,0,c
  7380  000A0A  D022               	goto	i2l1680
  7381                           
  7382                           ;Lab10p1.c: 193: {
  7383                           ;Lab10p1.c: 194: Nec_code = Nec_code << 1;
  7384  000A0C  90D8               	bcf	status,0,c
  7385  000A0E  345D               	rlcf	_Nec_code,w,c
  7386  000A10  6E5D               	movwf	_Nec_code,c
  7387  000A12  345E               	rlcf	_Nec_code+1,w,c
  7388  000A14  6E5E               	movwf	_Nec_code+1,c
  7389  000A16  345F               	rlcf	_Nec_code+2,w,c
  7390  000A18  6E5F               	movwf	_Nec_code+2,c
  7391  000A1A  3460               	rlcf	_Nec_code+3,w,c
  7392  000A1C  6E60               	movwf	_Nec_code+3,c
  7393                           
  7394                           ;Lab10p1.c: 195: if(Time_Elapsed > 1000)
  7395  000A1E  0EE9               	movlw	233
  7396  000A20  5C61               	subwf	_Time_Elapsed,w,c
  7397  000A22  0E03               	movlw	3
  7398  000A24  5862               	subwfb	_Time_Elapsed+1,w,c
  7399  000A26  A0D8               	btfss	status,0,c
  7400  000A28  D007               	goto	i2l1672
  7401                           
  7402                           ;Lab10p1.c: 196: {
  7403                           ;Lab10p1.c: 197: Nec_code++;
  7404  000A2A  0E01               	movlw	1
  7405  000A2C  265D               	addwf	_Nec_code,f,c
  7406  000A2E  0E00               	movlw	0
  7407  000A30  225E               	addwfc	_Nec_code+1,f,c
  7408  000A32  225F               	addwfc	_Nec_code+2,f,c
  7409  000A34  2260               	addwfc	_Nec_code+3,f,c
  7410  000A36  D000               	goto	i2l1672
  7411  000A38                     i2l1672:
  7412                           
  7413                           ;Lab10p1.c: 198: }
  7414                           ;Lab10p1.c: 199: bit_count++;
  7415  000A38  2A6C               	incf	_bit_count,f,c
  7416                           
  7417                           ;Lab10p1.c: 200: if(bit_count > 31)
  7418  000A3A  0E1F               	movlw	31
  7419  000A3C  646C               	cpfsgt	_bit_count,c
  7420  000A3E  D7BF               	goto	L5
  7421                           
  7422                           ;Lab10p1.c: 201: {
  7423                           ;Lab10p1.c: 202: nec_ok = 1;
  7424  000A40  0E00               	movlw	0
  7425  000A42  6E66               	movwf	_nec_ok+1,c
  7426  000A44  0E01               	movlw	1
  7427  000A46  6E65               	movwf	_nec_ok,c
  7428                           
  7429                           ;Lab10p1.c: 203: INT0IE = 0;
  7430  000A48  98F2               	bcf	intcon,4,c	;volatile
  7431                           
  7432                           ;Lab10p1.c: 204: Nec_state = 0;
  7433  000A4A  0E00               	movlw	0
  7434  000A4C  6E6A               	movwf	_Nec_state,c
  7435  000A4E  D7B7               	goto	L5
  7436  000A50                     i2l1680:
  7437                           
  7438                           ;Lab10p1.c: 208: else
  7439                           ;Lab10p1.c: 209: {
  7440                           ;Lab10p1.c: 210: force_nec_state0();
  7441  000A50  ECA7  F00B         	call	_force_nec_state0	;wreg free
  7442  000A54  D000               	goto	i2l1682
  7443  000A56                     i2l1682:
  7444                           
  7445                           ;Lab10p1.c: 211: }
  7446                           ;Lab10p1.c: 212: INTCON2bits.INTEDG0 = 1;
  7447  000A56  8CF1               	bsf	intcon2,6,c	;volatile
  7448                           
  7449                           ;Lab10p1.c: 214: }
  7450                           ;Lab10p1.c: 215: }
  7451                           
  7452                           ;Lab10p1.c: 213: return;
  7453  000A58  D011               	goto	i2l140
  7454  000A5A                     i2l1688:
  7455  000A5A  506A               	movf	_Nec_state,w,c
  7456                           
  7457                           ; Switch size 1, requested type "space"
  7458                           ; Number of cases is 5, Range of values is 0 to 4
  7459                           ; switch strategies available:
  7460                           ; Name         Instructions Cycles
  7461                           ; simple_byte           16     9 (average)
  7462                           ;	Chosen strategy is simple_byte
  7463  000A5C  0A00               	xorlw	0	; case 0
  7464  000A5E  B4D8               	btfsc	status,2,c
  7465  000A60  D778               	goto	i2l1618
  7466  000A62  0A01               	xorlw	1	; case 1
  7467  000A64  B4D8               	btfsc	status,2,c
  7468  000A66  D78B               	goto	i2l1628
  7469  000A68  0A03               	xorlw	3	; case 2
  7470  000A6A  B4D8               	btfsc	status,2,c
  7471  000A6C  D79C               	goto	i2l1640
  7472  000A6E  0A01               	xorlw	1	; case 3
  7473  000A70  B4D8               	btfsc	status,2,c
  7474  000A72  D7AD               	goto	i2l1652
  7475  000A74  0A07               	xorlw	7	; case 4
  7476  000A76  B4D8               	btfsc	status,2,c
  7477  000A78  D7BD               	goto	i2l1664
  7478  000A7A  D000               	goto	i2l140
  7479  000A7C                     i2l140:
  7480  000A7C  0012               	return		;funcret
  7481  000A7E                     __end_of_INT0_isr:
  7482                           	opt stack 0
  7483                           pclatu	equ	0xFFB
  7484                           pclath	equ	0xFFA
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           intcon	equ	0xFF2
  7492                           intcon2	equ	0xFF1
  7493                           postinc0	equ	0xFEE
  7494                           fsr0h	equ	0xFEA
  7495                           fsr0l	equ	0xFE9
  7496                           wreg	equ	0xFE8
  7497                           postdec1	equ	0xFE5
  7498                           fsr1h	equ	0xFE2
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8
  7506                           
  7507 ;; *************** function _force_nec_state0 *****************
  7508 ;; Defined at:
  7509 ;;		line 115 in file "Lab10p1.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, status,2
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_INT0_isr
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text38
  7537  00174E                     __ptext38:
  7538                           	opt stack 0
  7539  00174E                     _force_nec_state0:
  7540                           	opt stack 20
  7541                           
  7542                           ;Lab10p1.c: 117: Nec_state=0;
  7543                           
  7544                           ;incstack = 0
  7545  00174E  0E00               	movlw	0
  7546  001750  6E6A               	movwf	_Nec_state,c
  7547                           
  7548                           ;Lab10p1.c: 118: T1CONbits.TMR1ON = 0;
  7549  001752  90CD               	bcf	4045,0,c	;volatile
  7550  001754  0012               	return		;funcret
  7551  001756                     __end_of_force_nec_state0:
  7552                           	opt stack 0
  7553                           pclatu	equ	0xFFB
  7554                           pclath	equ	0xFFA
  7555                           tblptru	equ	0xFF8
  7556                           tblptrh	equ	0xFF7
  7557                           tblptrl	equ	0xFF6
  7558                           tablat	equ	0xFF5
  7559                           prodh	equ	0xFF4
  7560                           prodl	equ	0xFF3
  7561                           intcon	equ	0xFF2
  7562                           intcon2	equ	0xFF1
  7563                           postinc0	equ	0xFEE
  7564                           fsr0h	equ	0xFEA
  7565                           fsr0l	equ	0xFE9
  7566                           wreg	equ	0xFE8
  7567                           postdec1	equ	0xFE5
  7568                           fsr1h	equ	0xFE2
  7569                           fsr1l	equ	0xFE1
  7570                           indf2	equ	0xFDF
  7571                           postinc2	equ	0xFDE
  7572                           postdec2	equ	0xFDD
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8
  7576                           pclatu	equ	0xFFB
  7577                           pclath	equ	0xFFA
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon2	equ	0xFF1
  7586                           postinc0	equ	0xFEE
  7587                           fsr0h	equ	0xFEA
  7588                           fsr0l	equ	0xFE9
  7589                           wreg	equ	0xFE8
  7590                           postdec1	equ	0xFE5
  7591                           fsr1h	equ	0xFE2
  7592                           fsr1l	equ	0xFE1
  7593                           indf2	equ	0xFDF
  7594                           postinc2	equ	0xFDE
  7595                           postdec2	equ	0xFDD
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600                           	psect	rparam
  7601  0000                     pclatu	equ	0xFFB
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon2	equ	0xFF1
  7611                           postinc0	equ	0xFEE
  7612                           fsr0h	equ	0xFEA
  7613                           fsr0l	equ	0xFE9
  7614                           wreg	equ	0xFE8
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8


Data Sizes:
    Strings     81
    Constant    547
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     112
    BANK1           256      0     115
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_4(CODE[8]), STR_3(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_2(CODE[13]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   52159
                                             66 COMRAM     4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
                       _wait_one_sec
 ---------------------------------------------------------------------------------
 (1) _wait_one_sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    3201
                                             38 COMRAM    25    17      8
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
   _wait_one_sec

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      73       7       44.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      70       5       87.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 03 19:49:39 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 00AA                                _D2 00BF  
                              _D3 00D4               ___wmul@multiplicand 0013  
                             l117 1730                               l209 1478  
                             l322 0F9C                               l219 16E2  
                             l323 0F08                               l171 166A  
                             l420 0188                               l325 0F78  
                             l333 06E8                               l326 0F9A  
                             l263 15F4                               l351 0AEC  
                             l417 0126                               l269 113E  
                             l285 0928                               l294 087E  
                             l287 0802                               l482 12DA  
                             l458 045C                               l491 131C  
                             l494 1646                               l486 12F4  
                             l487 12F6                               l488 1300  
                             l489 1302                               l925 168C  
                             l954 10A6                               l964 129C  
                             _PR2 000FCB                 _Deactivate_Buzzer 1746  
                             _nbr 0063                               _txt 0067  
                             prod 000FF3                               wreg 000FE8  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 15F6  
                    __CFG_WDT$OFF 000000                    drawFastVLine@h 0019  
                            l1056 1554                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l3404 14D8  
                            l3510 07F0                              l3408 14F4  
                            l3520 080E                              l2560 12CA  
                            l2720 1064                              l3370 1134  
                            l3354 10C8                              l3514 07FE  
                            l3506 07E4                              l3602 0F96  
                            l2706 1684                              l3524 083E  
                            l3516 0806                              l2564 12D2  
                            l2556 12C0                              l2716 104E  
                            l2740 1266                              l3358 1100  
                            l3526 0872                              l3630 0D60  
                            l3614 0CF2                              l2662 159E  
                            l2718 105C                              l3368 1126  
                            l3544 08F4                              l3536 08A0  
                            l3552 0924                              l3528 0876  
                            l3560 1528                              l3640 0DBA  
                            l2664 15A8                              l2576 12EC  
                            l2568 12DE                              l2728 1096  
                            l2744 128C                              l2736 1250  
                            l3800 025A                              l3720 0044  
                            l3546 091C                              l3538 08C8  
                            l3626 0D42                              l3570 0ED2  
                            l2738 125E                              l3802 026C  
                            l3730 0082                              l3714 0026  
                            l3396 15D6                              l3820 02CE  
                            l3812 02AC                              l3740 00EA  
                            l3724 004E                              l3558 1522  
                            l3638 0DB2                              l3902 07BE  
                            l3822 02D6                              l3814 02B6  
                            l3726 0064                              l3718 0036  
                            l3592 0F7C                              l3576 0F40  
                            l3840 03A8                              l3832 030E  
                            l3808 0288                              l3752 014A  
                            l3744 00F2                              l3850 042C  
                            l3826 02EE                              l3770 01CE  
                            l3738 00E4                              l2970 1664  
                            l3596 0F86                              l3588 0F6E  
                            l3692 0B4E                              l3676 0AD2  
                            l3828 02F6                              l3836 0322  
                            l3780 020E                              l3772 01D2  
                            l3756 016E                              l3852 0440  
                            l3838 0330                              l3846 0412  
                            l3790 0224                              l3766 01A8  
                            l2966 1650                              l3696 0BA0  
                            l3848 0424                              l3784 0214  
                            l3776 01DE                              l3874 06CE  
                            l3794 0254                              l3786 0218  
                            l3980 04D2                              l3992 0508  
                            l3984 04E6                              l3968 04B0  
                            l3988 0500                              STR_1 FFC4  
                            STR_2 FFEA                              STR_3 FFAE  
                            STR_4 FFF7                              STR_5 FFD9  
                            u2430 10F6                              u2730 0D1C  
                            u2660 0F00                              u2590 08D6  
                            u2670 0F36                              _TRMT 007D61  
             ??_Deactivate_Buzzer 0011                              _main 045E  
                            _font FD8B                              fsr0h 000FEA  
                            _txt1 0100                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 005C  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   ??_drawFastVLine 001C  
                    ___param_bank 000010                       ?_TIMER1_isr 0001  
                __end_of_INT0_isr 0A7E         __end_of_Deactivate_Buzzer 174E  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 10B8  
                           _T1CON 000FCD                   __end_of___llmod 12AE  
                           _T2CON 000FCA                             _T3CON 000FB1  
                           i2l140 0A7C                             i2l128 1204  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR1H 000FCF                             _TMR3H 000FB3  
                           _TMR1L 000FCE                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTD 000F83                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Rcmd1 0BB6  
                           _Rcmd3 0DD0                             _nRBPU 007F8F  
                 __end_of_dpowers FF8E                             _color 0080  
                           _font2 FE8A             fillCircleHelper@ddF_x 0031  
           fillCircleHelper@ddF_y 0033                   __end_of_isdigit 168E  
           fillCircleHelper@delta 002B                             _putch 172C  
           fillCircleHelper@color 002D                             main@i 0044  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                   write_data@data_ 0013  
                 __initialization 1140                      __end_of_main 0626  
                    __end_of_font FE8A                  __end_of_Rcmd2red 1594  
                          ??_main 0043                     __activetblptr 000002  
               __end_of_LCD_Reset 16FA         ??_TFT_GreenTab_Initialize 001D  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON1 000FC1                  ___llmod@dividend 001E  
                          _CCPR2L 000FBB                            ?_putch 0001  
                          _INT0IE 007F94                            i2l1640 09A6  
                          i2l1634 099C                            i2l1618 0952  
                          i2l1660 09F0                            i2l1652 09CE  
                          i2l1628 097E                            i2l1646 09C4  
                          i2l1672 0A38                            i2l1680 0A50  
                          i2l1664 09F4                            i2l1682 0A56  
                          i2l1658 09EA                            i2l1934 11FA  
                          i2l1688 0A5A                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 174E  
                __end_of_delay_ms 1480                  __end_of_fillRect 1518  
                __end_of_drawChar 092A                __size_of_OpenUSART 0070  
        __size_of_Activate_Buzzer 0012                            ___wmul 1620  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 0DD0  
                       ??___lldiv 0019                         ??___llmod 0026  
                          _chkisr 0008                            _array1 0047  
                          _buffer 0154                            _nec_ok 0065  
                          clear_0 1146                            clear_1 1152  
      __size_of_Deactivate_Buzzer 0008                            _printf 001C  
                    drawtext@size 0040                            _strcpy 1594  
                          _strlen 1518                      __pdataCOMRAM 0047  
                       ??_isdigit 0011                      __mediumconst FD8A  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 16E8                        __accesstop 0080  
         __end_of__initialization 11B8                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 0CC6  
                   __end_of_Rcmd3 0EC2                    __pcstackCOMRAM 0001  
                    __pidataBANK0 131E                      __pidataBANK1 1387  
                   __end_of_font2 FF66                     __end_of_putch 173A  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 131E                           ??_putch 0011  
                      __pbssBANK1 0154                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014                   spiwrite@spidata 0012  
                      ??_INT0_isr 0001                __CFG_CCP2MX$PORTBE 000000  
                         ?___wmul 0011                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
                    ??_TIMER1_isr 0001                        _fillCircle 13DC  
                         ?_printf 0027                           ?_strcpy 0011  
                         ?_strlen 0011                 ??_Activate_Buzzer 0011  
                      _fillScreen 168E                        _drawCircle 0626  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0F9E  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
              __end_of_TIMER1_isr 1746                     _write_command 171C  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 15F6             __end_of_drawFastVLine 1140  
                _fillCircleHelper 0A7E                           ___lldiv 102C  
                 __size_of___wmul 0028                           ___llmod 123E  
                 __size_of_chkisr 1236                         ?_spiwrite 0001  
                         __pcinit 1140                           __ramtop 1000  
                         __ptext0 045E                           __ptext1 1648  
                         __ptext2 001C                           __ptext3 172C  
                         __ptext4 166C                           __ptext5 123E  
                         __ptext6 102C                           __ptext7 16C0  
                         __ptext8 12AE                           __ptext9 13DC  
                 __size_of_printf 0442                 __end_of_init_UART 16D4  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FFAE          __end_of_force_nec_state0 1756  
                       _T1CONbits 000FCD                           _dpowers FF66  
                         _isdigit 166C                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 003A  
                   drawtext@color 003C                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 16E8  
                   _setAddrWindow 1480                    __pintcode_body 11C2  
                      delay_ms@ms 0017              end_of_initialization 11B8  
                   ?_wait_one_sec 0001                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FD8A  
                         int_func 11C2                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 003F                           printf@f 0027  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00EF                  drawtext@cursor_y 00EE  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                  ??_wait_one_sec 0011                  drawtext@textsize 00EA  
                      drawPixel@x 001B                        drawPixel@y 0018  
                     printf@width 003C                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 0154                    __end_of___wmul 1648  
                   delay_ms@count 001B                        _write_data 170C  
                   __pidataCOMRAM 16AA                    __end_of_chkisr 123E  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                       _Nec_code1 0069                    __end_of_printf 045E  
                  __end_of_strcpy 15C6                    __end_of_strlen 1556  
                       _Nec_state 006A               start_initialization 1140  
                 ??_write_command 0013                         _OpenUSART 12AE  
             __size_of_fillCircle 0052                   ___llmod@divisor 0022  
                __CFG_OSC$INTIO67 000000                   ___llmod@counter 0026  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                   _Activate_Buzzer 16FA  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 002F                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005D  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00E9  
                     ??_LCD_Reset 001D                      _isdigit$1620 0012  
        __end_of_fillCircleHelper 0BB6                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 006C                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 1620                     __pmediumconst FD8A  
                        ?___lldiv 0011                          ?___llmod 001E  
                       __tft_type 006B              __end_of_wait_one_sec 166C  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 15C6                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0F9E                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 16C0  
              ??_force_nec_state0 0001                         _hexpowers FF8E  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 170C                    ___wmul@product 0015  
             ??_Initialize_Screen 0043                          _INT0_isr 092A  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 102C  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 003E                        printf@prec 0034  
                       main@found 0046                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 116C  
                       copy_data1 118C                         copy_data2 11AC  
                       drawtext@i 00EC            __size_of_drawFastVLine 0088  
                       drawtext@x 00E9                         drawtext@y 0039  
                        _Nec_code 005D                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 1556  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0061                __end_of_fillCircle 142E  
                        __Hrparam 0000                __end_of_fillScreen 16AA  
                        __Lrparam 0000                __end_of_drawCircle 07D4  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of_isdigit 0022                          _delay_ms 142E  
                        __ptext10 0A7E                          __ptext11 0626  
                        __ptext20 10B8                          __ptext12 0F9E  
                        __ptext21 15C6                          __ptext13 1594  
                        __ptext30 16E8                          __ptext22 1480  
                        __ptext14 168E                          __ptext31 142E  
                        __ptext23 15F6                          __ptext15 0EC2  
                        __ptext32 1620                          __ptext24 0DD0  
                        __ptext16 0CC6                          __ptext33 1746  
                        __ptext25 1556                          __ptext17 1518  
                        __ptext34 16FA                          __ptext26 0BB6  
                        __ptext18 07D4                          __ptext27 170C  
                        __ptext19 14CE                          __ptext36 173A  
                        __ptext28 171C                          __ptext37 092A  
                        __ptext29 16D4                          __ptext38 174E  
                        _fillRect 14CE                          _drawChar 07D4  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006D  
                        _drawtext 0CC6                        strcpy@from 0013  
                   _fillRectangle 0EC2                  ?_Activate_Buzzer 0001  
                   __size_of_main 01C8             __size_of_wait_one_sec 0024  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 10B8                         printf@idx 0033  
                        _spiwrite 16D4                         printf@val 0038  
                     ??_drawPixel 001B                          _rowstart 006F  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
                        isdigit@c 0013                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                      _wait_one_sec 1648  
              ??_fillCircleHelper 002F             __end_of_write_command 172C  
                ___lldiv@dividend 0011                     wait_one_sec@k 0011  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0036                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 173A                     fillRect@color 0026  
                ___lldiv@quotient 0019                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                     fillCircle@r 003F             __end_of_setAddrWindow 14CE  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 171C         __size_of_force_nec_state0 0008  
                    drawChar@line 0035                      drawChar@size 0034  
