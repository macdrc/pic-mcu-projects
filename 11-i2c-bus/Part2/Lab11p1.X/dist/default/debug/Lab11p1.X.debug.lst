

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 30 17:04:52 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  001A00                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  001A00  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  001A01  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  0010FA                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _color
    96  0010FA  F800               	dw	63488
    97  0010FC  F800               	dw	63488
    98  0010FE  F800               	dw	63488
    99  001100  07FF               	dw	2047
   100  001102  07FF               	dw	2047
   101  001104  07E0               	dw	2016
   102  001106  001F               	dw	31
   103  001108  001F               	dw	31
   104  00110A  F81F               	dw	63519
   105  00110C  FFFF               	dw	65535
   106  00110E  FFFF               	dw	65535
   107  001110  FFFF               	dw	65535
   108  001112  FFFF               	dw	65535
   109  001114  FFFF               	dw	65535
   110  001116  FFFF               	dw	65535
   111  001118  FFFF               	dw	65535
   112  00111A  FFFF               	dw	65535
   113  00111C  FFFF               	dw	65535
   114  00111E  FFFF               	dw	65535
   115  001120  FFFF               	dw	65535
   116  001122  FFFF               	dw	65535
   117                           
   118                           ;initializer for _D1
   119  001124  01                 	db	1
   120  001125  01                 	db	1
   121  001126  01                 	db	1
   122  001127  00                 	db	0
   123  001128  00                 	db	0
   124  001129  00                 	db	0
   125  00112A  00                 	db	0
   126  00112B  00                 	db	0
   127  00112C  00                 	db	0
   128  00112D  00                 	db	0
   129  00112E  00                 	db	0
   130  00112F  00                 	db	0
   131  001130  00                 	db	0
   132  001131  00                 	db	0
   133  001132  00                 	db	0
   134  001133  00                 	db	0
   135  001134  00                 	db	0
   136  001135  00                 	db	0
   137  001136  00                 	db	0
   138  001137  00                 	db	0
   139  001138  00                 	db	0
   140                           
   141                           ;initializer for _D2
   142  001139  00                 	db	0
   143  00113A  00                 	db	0
   144  00113B  00                 	db	0
   145  00113C  06                 	db	6
   146  00113D  06                 	db	6
   147  00113E  02                 	db	2
   148  00113F  04                 	db	4
   149  001140  04                 	db	4
   150  001141  05                 	db	5
   151  001142  00                 	db	0
   152  001143  00                 	db	0
   153  001144  00                 	db	0
   154  001145  00                 	db	0
   155  001146  00                 	db	0
   156  001147  00                 	db	0
   157  001148  00                 	db	0
   158  001149  00                 	db	0
   159  00114A  00                 	db	0
   160  00114B  00                 	db	0
   161  00114C  00                 	db	0
   162  00114D  00                 	db	0
   163                           
   164                           ;initializer for _D3
   165  00114E  00                 	db	0
   166  00114F  00                 	db	0
   167  001150  00                 	db	0
   168  001151  00                 	db	0
   169  001152  00                 	db	0
   170  001153  00                 	db	0
   171  001154  00                 	db	0
   172  001155  00                 	db	0
   173  001156  00                 	db	0
   174  001157  FF                 	db	255
   175  001158  FF                 	db	255
   176  001159  FF                 	db	255
   177  00115A  FF                 	db	255
   178  00115B  FF                 	db	255
   179  00115C  FF                 	db	255
   180  00115D  FF                 	db	255
   181  00115E  FF                 	db	255
   182  00115F  FF                 	db	255
   183  001160  FF                 	db	255
   184  001161  FF                 	db	255
   185  001162  FF                 	db	255
   186                           
   187                           ;initializer for _array1
   188  001163  A2                 	db	162
   189  001164  62                 	db	98
   190  001165  E2                 	db	226
   191  001166  22                 	db	34
   192  001167  02                 	db	2
   193  001168  C2                 	db	194
   194  001169  E0                 	db	224
   195  00116A  A8                 	db	168
   196  00116B  90                 	db	144
   197  00116C  68                 	db	104
   198  00116D  98                 	db	152
   199  00116E  B0                 	db	176
   200  00116F  30                 	db	48
   201  001170  18                 	db	24
   202  001171  7A                 	db	122
   203  001172  10                 	db	16
   204  001173  38                 	db	56
   205  001174  5A                 	db	90
   206  001175  42                 	db	66
   207  001176  4A                 	db	74
   208  001177  52                 	db	82
   209                           
   210                           	psect	idataBANK1
   211  001404                     __pidataBANK1:
   212                           	opt stack 0
   213                           
   214                           ;initializer for _txt1
   215  001404  43                 	db	67
   216  001405  48                 	db	72
   217  001406  2D                 	db	45
   218  001407  00                 	db	0
   219  001408  43                 	db	67
   220  001409  48                 	db	72
   221  00140A  20                 	db	32
   222  00140B  00                 	db	0
   223  00140C  43                 	db	67
   224  00140D  48                 	db	72
   225  00140E  2B                 	db	43
   226  00140F  00                 	db	0
   227  001410  7C                 	db	124
   228  001411  3C                 	db	60
   229  001412  3C                 	db	60
   230  001413  00                 	db	0
   231  001414  3E                 	db	62
   232  001415  3E                 	db	62
   233  001416  7C                 	db	124
   234  001417  00                 	db	0
   235  001418  3E                 	db	62
   236  001419  7C                 	db	124
   237  00141A  7C                 	db	124
   238  00141B  00                 	db	0
   239  00141C  20                 	db	32
   240  00141D  2D                 	db	45
   241  00141E  20                 	db	32
   242  00141F  00                 	db	0
   243  001420  20                 	db	32
   244  001421  2B                 	db	43
   245  001422  20                 	db	32
   246  001423  00                 	db	0
   247  001424  45                 	db	69
   248  001425  51                 	db	81
   249  001426  20                 	db	32
   250  001427  00                 	db	0
   251  001428  20                 	db	32
   252  001429  30                 	db	48
   253  00142A  20                 	db	32
   254  00142B  00                 	db	0
   255  00142C  31                 	db	49
   256  00142D  30                 	db	48
   257  00142E  30                 	db	48
   258  00142F  00                 	db	0
   259  001430  32                 	db	50
   260  001431  30                 	db	48
   261  001432  30                 	db	48
   262  001433  00                 	db	0
   263  001434  20                 	db	32
   264  001435  31                 	db	49
   265  001436  20                 	db	32
   266  001437  00                 	db	0
   267  001438  20                 	db	32
   268  001439  32                 	db	50
   269  00143A  20                 	db	32
   270  00143B  00                 	db	0
   271  00143C  20                 	db	32
   272  00143D  33                 	db	51
   273  00143E  20                 	db	32
   274  00143F  00                 	db	0
   275  001440  20                 	db	32
   276  001441  34                 	db	52
   277  001442  20                 	db	32
   278  001443  00                 	db	0
   279  001444  20                 	db	32
   280  001445  35                 	db	53
   281  001446  20                 	db	32
   282  001447  00                 	db	0
   283  001448  20                 	db	32
   284  001449  36                 	db	54
   285  00144A  20                 	db	32
   286  00144B  00                 	db	0
   287  00144C  20                 	db	32
   288  00144D  37                 	db	55
   289  00144E  20                 	db	32
   290  00144F  00                 	db	0
   291  001450  20                 	db	32
   292  001451  38                 	db	56
   293  001452  20                 	db	32
   294  001453  00                 	db	0
   295  001454  20                 	db	32
   296  001455  39                 	db	57
   297  001456  20                 	db	32
   298  001457  00                 	db	0
   299                           
   300                           	psect	mediumconst
   301  00FA86                     __pmediumconst:
   302                           	opt stack 0
   303  00FA86  00                 	db	0
   304  00FA87                     _font:
   305                           	opt stack 0
   306  00FA87  00                 	db	0
   307  00FA88  00                 	db	0
   308  00FA89  00                 	db	0
   309  00FA8A  00                 	db	0
   310  00FA8B  00                 	db	0
   311  00FA8C  00                 	db	0
   312  00FA8D  00                 	db	0
   313  00FA8E  5F                 	db	95
   314  00FA8F  00                 	db	0
   315  00FA90  00                 	db	0
   316  00FA91  00                 	db	0
   317  00FA92  07                 	db	7
   318  00FA93  00                 	db	0
   319  00FA94  07                 	db	7
   320  00FA95  00                 	db	0
   321  00FA96  14                 	db	20
   322  00FA97  7F                 	db	127
   323  00FA98  14                 	db	20
   324  00FA99  7F                 	db	127
   325  00FA9A  14                 	db	20
   326  00FA9B  24                 	db	36
   327  00FA9C  2A                 	db	42
   328  00FA9D  7F                 	db	127
   329  00FA9E  2A                 	db	42
   330  00FA9F  12                 	db	18
   331  00FAA0  23                 	db	35
   332  00FAA1  13                 	db	19
   333  00FAA2  08                 	db	8
   334  00FAA3  64                 	db	100
   335  00FAA4  62                 	db	98
   336  00FAA5  36                 	db	54
   337  00FAA6  49                 	db	73
   338  00FAA7  56                 	db	86
   339  00FAA8  20                 	db	32
   340  00FAA9  50                 	db	80
   341  00FAAA  00                 	db	0
   342  00FAAB  08                 	db	8
   343  00FAAC  07                 	db	7
   344  00FAAD  03                 	db	3
   345  00FAAE  00                 	db	0
   346  00FAAF  00                 	db	0
   347  00FAB0  1C                 	db	28
   348  00FAB1  22                 	db	34
   349  00FAB2  41                 	db	65
   350  00FAB3  00                 	db	0
   351  00FAB4  00                 	db	0
   352  00FAB5  41                 	db	65
   353  00FAB6  22                 	db	34
   354  00FAB7  1C                 	db	28
   355  00FAB8  00                 	db	0
   356  00FAB9  2A                 	db	42
   357  00FABA  1C                 	db	28
   358  00FABB  7F                 	db	127
   359  00FABC  1C                 	db	28
   360  00FABD  2A                 	db	42
   361  00FABE  08                 	db	8
   362  00FABF  08                 	db	8
   363  00FAC0  3E                 	db	62
   364  00FAC1  08                 	db	8
   365  00FAC2  08                 	db	8
   366  00FAC3  00                 	db	0
   367  00FAC4  80                 	db	128
   368  00FAC5  70                 	db	112
   369  00FAC6  30                 	db	48
   370  00FAC7  00                 	db	0
   371  00FAC8  08                 	db	8
   372  00FAC9  08                 	db	8
   373  00FACA  08                 	db	8
   374  00FACB  08                 	db	8
   375  00FACC  08                 	db	8
   376  00FACD  00                 	db	0
   377  00FACE  00                 	db	0
   378  00FACF  60                 	db	96
   379  00FAD0  60                 	db	96
   380  00FAD1  00                 	db	0
   381  00FAD2  20                 	db	32
   382  00FAD3  10                 	db	16
   383  00FAD4  08                 	db	8
   384  00FAD5  04                 	db	4
   385  00FAD6  02                 	db	2
   386  00FAD7  3E                 	db	62
   387  00FAD8  51                 	db	81
   388  00FAD9  49                 	db	73
   389  00FADA  45                 	db	69
   390  00FADB  3E                 	db	62
   391  00FADC  00                 	db	0
   392  00FADD  42                 	db	66
   393  00FADE  7F                 	db	127
   394  00FADF  40                 	db	64
   395  00FAE0  00                 	db	0
   396  00FAE1  72                 	db	114
   397  00FAE2  49                 	db	73
   398  00FAE3  49                 	db	73
   399  00FAE4  49                 	db	73
   400  00FAE5  46                 	db	70
   401  00FAE6  21                 	db	33
   402  00FAE7  41                 	db	65
   403  00FAE8  49                 	db	73
   404  00FAE9  4D                 	db	77
   405  00FAEA  33                 	db	51
   406  00FAEB  18                 	db	24
   407  00FAEC  14                 	db	20
   408  00FAED  12                 	db	18
   409  00FAEE  7F                 	db	127
   410  00FAEF  10                 	db	16
   411  00FAF0  27                 	db	39
   412  00FAF1  45                 	db	69
   413  00FAF2  45                 	db	69
   414  00FAF3  45                 	db	69
   415  00FAF4  39                 	db	57
   416  00FAF5  3C                 	db	60
   417  00FAF6  4A                 	db	74
   418  00FAF7  49                 	db	73
   419  00FAF8  49                 	db	73
   420  00FAF9  31                 	db	49
   421  00FAFA  41                 	db	65
   422  00FAFB  21                 	db	33
   423  00FAFC  11                 	db	17
   424  00FAFD  09                 	db	9
   425  00FAFE  07                 	db	7
   426  00FAFF  36                 	db	54
   427  00FB00  49                 	db	73
   428  00FB01  49                 	db	73
   429  00FB02  49                 	db	73
   430  00FB03  36                 	db	54
   431  00FB04  46                 	db	70
   432  00FB05  49                 	db	73
   433  00FB06  49                 	db	73
   434  00FB07  29                 	db	41
   435  00FB08  1E                 	db	30
   436  00FB09  00                 	db	0
   437  00FB0A  00                 	db	0
   438  00FB0B  14                 	db	20
   439  00FB0C  00                 	db	0
   440  00FB0D  00                 	db	0
   441  00FB0E  00                 	db	0
   442  00FB0F  40                 	db	64
   443  00FB10  34                 	db	52
   444  00FB11  00                 	db	0
   445  00FB12  00                 	db	0
   446  00FB13  00                 	db	0
   447  00FB14  08                 	db	8
   448  00FB15  14                 	db	20
   449  00FB16  22                 	db	34
   450  00FB17  41                 	db	65
   451  00FB18  14                 	db	20
   452  00FB19  14                 	db	20
   453  00FB1A  14                 	db	20
   454  00FB1B  14                 	db	20
   455  00FB1C  14                 	db	20
   456  00FB1D  00                 	db	0
   457  00FB1E  41                 	db	65
   458  00FB1F  22                 	db	34
   459  00FB20  14                 	db	20
   460  00FB21  08                 	db	8
   461  00FB22  02                 	db	2
   462  00FB23  01                 	db	1
   463  00FB24  59                 	db	89
   464  00FB25  09                 	db	9
   465  00FB26  06                 	db	6
   466  00FB27  3E                 	db	62
   467  00FB28  41                 	db	65
   468  00FB29  5D                 	db	93
   469  00FB2A  59                 	db	89
   470  00FB2B  4E                 	db	78
   471  00FB2C  7C                 	db	124
   472  00FB2D  12                 	db	18
   473  00FB2E  11                 	db	17
   474  00FB2F  12                 	db	18
   475  00FB30  7C                 	db	124
   476  00FB31  7F                 	db	127
   477  00FB32  49                 	db	73
   478  00FB33  49                 	db	73
   479  00FB34  49                 	db	73
   480  00FB35  36                 	db	54
   481  00FB36  3E                 	db	62
   482  00FB37  41                 	db	65
   483  00FB38  41                 	db	65
   484  00FB39  41                 	db	65
   485  00FB3A  22                 	db	34
   486  00FB3B  7F                 	db	127
   487  00FB3C  41                 	db	65
   488  00FB3D  41                 	db	65
   489  00FB3E  41                 	db	65
   490  00FB3F  3E                 	db	62
   491  00FB40  7F                 	db	127
   492  00FB41  49                 	db	73
   493  00FB42  49                 	db	73
   494  00FB43  49                 	db	73
   495  00FB44  41                 	db	65
   496  00FB45  7F                 	db	127
   497  00FB46  09                 	db	9
   498  00FB47  09                 	db	9
   499  00FB48  09                 	db	9
   500  00FB49  01                 	db	1
   501  00FB4A  3E                 	db	62
   502  00FB4B  41                 	db	65
   503  00FB4C  41                 	db	65
   504  00FB4D  51                 	db	81
   505  00FB4E  73                 	db	115
   506  00FB4F  7F                 	db	127
   507  00FB50  08                 	db	8
   508  00FB51  08                 	db	8
   509  00FB52  08                 	db	8
   510  00FB53  7F                 	db	127
   511  00FB54  00                 	db	0
   512  00FB55  41                 	db	65
   513  00FB56  7F                 	db	127
   514  00FB57  41                 	db	65
   515  00FB58  00                 	db	0
   516  00FB59  20                 	db	32
   517  00FB5A  40                 	db	64
   518  00FB5B  41                 	db	65
   519  00FB5C  3F                 	db	63
   520  00FB5D  01                 	db	1
   521  00FB5E  7F                 	db	127
   522  00FB5F  08                 	db	8
   523  00FB60  14                 	db	20
   524  00FB61  22                 	db	34
   525  00FB62  41                 	db	65
   526  00FB63  7F                 	db	127
   527  00FB64  40                 	db	64
   528  00FB65  40                 	db	64
   529  00FB66  40                 	db	64
   530  00FB67  40                 	db	64
   531  00FB68  7F                 	db	127
   532  00FB69  02                 	db	2
   533  00FB6A  1C                 	db	28
   534  00FB6B  02                 	db	2
   535  00FB6C  7F                 	db	127
   536  00FB6D  7F                 	db	127
   537  00FB6E  04                 	db	4
   538  00FB6F  08                 	db	8
   539  00FB70  10                 	db	16
   540  00FB71  7F                 	db	127
   541  00FB72  3E                 	db	62
   542  00FB73  41                 	db	65
   543  00FB74  41                 	db	65
   544  00FB75  41                 	db	65
   545  00FB76  3E                 	db	62
   546  00FB77  7F                 	db	127
   547  00FB78  09                 	db	9
   548  00FB79  09                 	db	9
   549  00FB7A  09                 	db	9
   550  00FB7B  06                 	db	6
   551  00FB7C  3E                 	db	62
   552  00FB7D  41                 	db	65
   553  00FB7E  51                 	db	81
   554  00FB7F  21                 	db	33
   555  00FB80  5E                 	db	94
   556  00FB81  7F                 	db	127
   557  00FB82  09                 	db	9
   558  00FB83  19                 	db	25
   559  00FB84  29                 	db	41
   560  00FB85  46                 	db	70
   561  00FB86                     __end_of_font:
   562                           	opt stack 0
   563  00FB86                     _font2:
   564                           	opt stack 0
   565  00FB86  26                 	db	38
   566  00FB87  49                 	db	73
   567  00FB88  49                 	db	73
   568  00FB89  49                 	db	73
   569  00FB8A  32                 	db	50
   570  00FB8B  03                 	db	3
   571  00FB8C  01                 	db	1
   572  00FB8D  7F                 	db	127
   573  00FB8E  01                 	db	1
   574  00FB8F  03                 	db	3
   575  00FB90  3F                 	db	63
   576  00FB91  40                 	db	64
   577  00FB92  40                 	db	64
   578  00FB93  40                 	db	64
   579  00FB94  3F                 	db	63
   580  00FB95  1F                 	db	31
   581  00FB96  20                 	db	32
   582  00FB97  40                 	db	64
   583  00FB98  20                 	db	32
   584  00FB99  1F                 	db	31
   585  00FB9A  3F                 	db	63
   586  00FB9B  40                 	db	64
   587  00FB9C  38                 	db	56
   588  00FB9D  40                 	db	64
   589  00FB9E  3F                 	db	63
   590  00FB9F  63                 	db	99
   591  00FBA0  14                 	db	20
   592  00FBA1  08                 	db	8
   593  00FBA2  14                 	db	20
   594  00FBA3  63                 	db	99
   595  00FBA4  03                 	db	3
   596  00FBA5  04                 	db	4
   597  00FBA6  78                 	db	120
   598  00FBA7  04                 	db	4
   599  00FBA8  03                 	db	3
   600  00FBA9  61                 	db	97
   601  00FBAA  59                 	db	89
   602  00FBAB  49                 	db	73
   603  00FBAC  4D                 	db	77
   604  00FBAD  43                 	db	67
   605  00FBAE  00                 	db	0
   606  00FBAF  7F                 	db	127
   607  00FBB0  41                 	db	65
   608  00FBB1  41                 	db	65
   609  00FBB2  41                 	db	65
   610  00FBB3  02                 	db	2
   611  00FBB4  04                 	db	4
   612  00FBB5  08                 	db	8
   613  00FBB6  10                 	db	16
   614  00FBB7  20                 	db	32
   615  00FBB8  00                 	db	0
   616  00FBB9  41                 	db	65
   617  00FBBA  41                 	db	65
   618  00FBBB  41                 	db	65
   619  00FBBC  7F                 	db	127
   620  00FBBD  04                 	db	4
   621  00FBBE  02                 	db	2
   622  00FBBF  01                 	db	1
   623  00FBC0  02                 	db	2
   624  00FBC1  04                 	db	4
   625  00FBC2  40                 	db	64
   626  00FBC3  40                 	db	64
   627  00FBC4  40                 	db	64
   628  00FBC5  40                 	db	64
   629  00FBC6  40                 	db	64
   630  00FBC7  00                 	db	0
   631  00FBC8  03                 	db	3
   632  00FBC9  07                 	db	7
   633  00FBCA  08                 	db	8
   634  00FBCB  00                 	db	0
   635  00FBCC  20                 	db	32
   636  00FBCD  54                 	db	84
   637  00FBCE  54                 	db	84
   638  00FBCF  78                 	db	120
   639  00FBD0  40                 	db	64
   640  00FBD1  7F                 	db	127
   641  00FBD2  28                 	db	40
   642  00FBD3  44                 	db	68
   643  00FBD4  44                 	db	68
   644  00FBD5  38                 	db	56
   645  00FBD6  38                 	db	56
   646  00FBD7  44                 	db	68
   647  00FBD8  44                 	db	68
   648  00FBD9  44                 	db	68
   649  00FBDA  28                 	db	40
   650  00FBDB  38                 	db	56
   651  00FBDC  44                 	db	68
   652  00FBDD  44                 	db	68
   653  00FBDE  28                 	db	40
   654  00FBDF  7F                 	db	127
   655  00FBE0  38                 	db	56
   656  00FBE1  54                 	db	84
   657  00FBE2  54                 	db	84
   658  00FBE3  54                 	db	84
   659  00FBE4  18                 	db	24
   660  00FBE5  00                 	db	0
   661  00FBE6  08                 	db	8
   662  00FBE7  7E                 	db	126
   663  00FBE8  09                 	db	9
   664  00FBE9  02                 	db	2
   665  00FBEA  18                 	db	24
   666  00FBEB  A4                 	db	164
   667  00FBEC  A4                 	db	164
   668  00FBED  9C                 	db	156
   669  00FBEE  78                 	db	120
   670  00FBEF  7F                 	db	127
   671  00FBF0  08                 	db	8
   672  00FBF1  04                 	db	4
   673  00FBF2  04                 	db	4
   674  00FBF3  78                 	db	120
   675  00FBF4  00                 	db	0
   676  00FBF5  44                 	db	68
   677  00FBF6  7D                 	db	125
   678  00FBF7  40                 	db	64
   679  00FBF8  00                 	db	0
   680  00FBF9  20                 	db	32
   681  00FBFA  40                 	db	64
   682  00FBFB  40                 	db	64
   683  00FBFC  3D                 	db	61
   684  00FBFD  00                 	db	0
   685  00FBFE  7F                 	db	127
   686  00FBFF  10                 	db	16
   687  00FC00  28                 	db	40
   688  00FC01  44                 	db	68
   689  00FC02  00                 	db	0
   690  00FC03  00                 	db	0
   691  00FC04  41                 	db	65
   692  00FC05  7F                 	db	127
   693  00FC06  40                 	db	64
   694  00FC07  00                 	db	0
   695  00FC08  7C                 	db	124
   696  00FC09  04                 	db	4
   697  00FC0A  78                 	db	120
   698  00FC0B  04                 	db	4
   699  00FC0C  78                 	db	120
   700  00FC0D  7C                 	db	124
   701  00FC0E  08                 	db	8
   702  00FC0F  04                 	db	4
   703  00FC10  04                 	db	4
   704  00FC11  78                 	db	120
   705  00FC12  38                 	db	56
   706  00FC13  44                 	db	68
   707  00FC14  44                 	db	68
   708  00FC15  44                 	db	68
   709  00FC16  38                 	db	56
   710  00FC17  FC                 	db	252
   711  00FC18  18                 	db	24
   712  00FC19  24                 	db	36
   713  00FC1A  24                 	db	36
   714  00FC1B  18                 	db	24
   715  00FC1C  18                 	db	24
   716  00FC1D  24                 	db	36
   717  00FC1E  24                 	db	36
   718  00FC1F  18                 	db	24
   719  00FC20  FC                 	db	252
   720  00FC21  7C                 	db	124
   721  00FC22  08                 	db	8
   722  00FC23  04                 	db	4
   723  00FC24  04                 	db	4
   724  00FC25  08                 	db	8
   725  00FC26  48                 	db	72
   726  00FC27  54                 	db	84
   727  00FC28  54                 	db	84
   728  00FC29  54                 	db	84
   729  00FC2A  24                 	db	36
   730  00FC2B  04                 	db	4
   731  00FC2C  04                 	db	4
   732  00FC2D  3F                 	db	63
   733  00FC2E  44                 	db	68
   734  00FC2F  24                 	db	36
   735  00FC30  3C                 	db	60
   736  00FC31  40                 	db	64
   737  00FC32  40                 	db	64
   738  00FC33  20                 	db	32
   739  00FC34  7C                 	db	124
   740  00FC35  1C                 	db	28
   741  00FC36  20                 	db	32
   742  00FC37  40                 	db	64
   743  00FC38  20                 	db	32
   744  00FC39  1C                 	db	28
   745  00FC3A  3C                 	db	60
   746  00FC3B  40                 	db	64
   747  00FC3C  30                 	db	48
   748  00FC3D  40                 	db	64
   749  00FC3E  3C                 	db	60
   750  00FC3F  44                 	db	68
   751  00FC40  28                 	db	40
   752  00FC41  10                 	db	16
   753  00FC42  28                 	db	40
   754  00FC43  44                 	db	68
   755  00FC44  4C                 	db	76
   756  00FC45  90                 	db	144
   757  00FC46  90                 	db	144
   758  00FC47  90                 	db	144
   759  00FC48  7C                 	db	124
   760  00FC49  44                 	db	68
   761  00FC4A  64                 	db	100
   762  00FC4B  54                 	db	84
   763  00FC4C  4C                 	db	76
   764  00FC4D  44                 	db	68
   765  00FC4E  00                 	db	0
   766  00FC4F  08                 	db	8
   767  00FC50  36                 	db	54
   768  00FC51  41                 	db	65
   769  00FC52  00                 	db	0
   770  00FC53  00                 	db	0
   771  00FC54  00                 	db	0
   772  00FC55  77                 	db	119
   773  00FC56  00                 	db	0
   774  00FC57  00                 	db	0
   775  00FC58  00                 	db	0
   776  00FC59  41                 	db	65
   777  00FC5A  36                 	db	54
   778  00FC5B  08                 	db	8
   779  00FC5C  00                 	db	0
   780  00FC5D  02                 	db	2
   781  00FC5E  01                 	db	1
   782  00FC5F  02                 	db	2
   783  00FC60  04                 	db	4
   784  00FC61  02                 	db	2
   785  00FC62                     __end_of_font2:
   786                           	opt stack 0
   787  00FC62                     _dpowers:
   788                           	opt stack 0
   789  00FC62  0001               	dw	1
   790  00FC64  000A               	dw	10
   791  00FC66  0064               	dw	100
   792  00FC68  03E8               	dw	1000
   793  00FC6A  2710               	dw	10000
   794  00FC6C                     __end_of_dpowers:
   795                           	opt stack 0
   796  00FC6C                     _hexpowers:
   797                           	opt stack 0
   798  00FC6C  0001               	dw	1
   799  00FC6E  0010               	dw	16
   800  00FC70  0100               	dw	256
   801  00FC72  1000               	dw	4096
   802  00FC74                     __end_of_hexpowers:
   803                           	opt stack 0
   804  0000                     _PORTA	set	3968
   805  0000                     _PORTAbits	set	3968
   806  0000                     _PORTBbits	set	3969
   807  0000                     _PORTCbits	set	3970
   808  0000                     _PORTD	set	3971
   809  0000                     _TRISA	set	3986
   810  0000                     _TRISAbits	set	3986
   811  0000                     _TRISB	set	3987
   812  0000                     _TRISBbits	set	3987
   813  0000                     _TRISC	set	3988
   814  0000                     _TRISCbits	set	3988
   815  0000                     _TRISD	set	3989
   816  0000                     _TRISE	set	3990
   817  0000                     _ADCON1	set	4033
   818  0000                     _CCP2CON	set	4026
   819  0000                     _CCPR2L	set	4027
   820  0000                     _OSCCON	set	4051
   821  0000                     _PIE1bits	set	3997
   822  0000                     _PIR1bits	set	3998
   823  0000                     _PIR2bits	set	4001
   824  0000                     _PR2	set	4043
   825  0000                     _RCSTA	set	4011
   826  0000                     _RCSTAbits	set	4011
   827  0000                     _SPBRG	set	4015
   828  0000                     _SPBRGH	set	4016
   829  0000                     _SSPBUF	set	4041
   830  0000                     _SSPCON1	set	4038
   831  0000                     _SSPSTAT	set	4039
   832  0000                     _SSPSTATbits	set	4039
   833  0000                     _T1CON	set	4045
   834  0000                     _T1CONbits	set	4045
   835  0000                     _T2CON	set	4042
   836  0000                     _T3CON	set	4017
   837  0000                     _T3CONbits	set	4017
   838  0000                     _TMR1H	set	4047
   839  0000                     _TMR1L	set	4046
   840  0000                     _TMR3H	set	4019
   841  0000                     _TMR3L	set	4018
   842  0000                     _TXREG	set	4013
   843  0000                     _TXSTA	set	4012
   844  0000                     _TXSTAbits	set	4012
   845  0000                     _TRMT	set	32097
   846  0000                     _INTCON2bits	set	4081
   847  0000                     _INTCONbits	set	4082
   848  0000                     _INT0IE	set	32660
   849  0000                     _nRBPU	set	32655
   850  00FC74                     STR_3:
   851  00FC74  2D                 	db	45
   852  00FC75  2D                 	db	45
   853  00FC76  2D                 	db	45
   854  00FC77  2D                 	db	45
   855  00FC78  2D                 	db	45
   856  00FC79  2D                 	db	45
   857  00FC7A  2D                 	db	45
   858  00FC7B  2D                 	db	45
   859  00FC7C  2D                 	db	45
   860  00FC7D  2D                 	db	45
   861  00FC7E  2D                 	db	45
   862  00FC7F  2D                 	db	45
   863  00FC80  2D                 	db	45
   864  00FC81  2D                 	db	45
   865  00FC82  2D                 	db	45
   866  00FC83  2D                 	db	45
   867  00FC84  2D                 	db	45
   868  00FC85  2D                 	db	45
   869  00FC86  2D                 	db	45
   870  00FC87  2D                 	db	45
   871  00FC88  2D                 	db	45
   872  00FC89  2D                 	db	45
   873  00FC8A  2D                 	db	45
   874  00FC8B  2D                 	db	45
   875  00FC8C  2D                 	db	45
   876  00FC8D  2D                 	db	45
   877  00FC8E  2D                 	db	45
   878  00FC8F  2D                 	db	45
   879  00FC90  2D                 	db	45
   880  00FC91  2D                 	db	45
   881  00FC92  2D                 	db	45
   882  00FC93  2D                 	db	45
   883  00FC94  2D                 	db	45
   884  00FC95  2D                 	db	45
   885  00FC96  2D                 	db	45
   886  00FC97  2D                 	db	45
   887  00FC98  2D                 	db	45
   888  00FC99  2D                 	db	45
   889  00FC9A  2D                 	db	45
   890  00FC9B  2D                 	db	45
   891  00FC9C  2D                 	db	45
   892  00FC9D  2D                 	db	45
   893  00FC9E  2D                 	db	45
   894  00FC9F  2D                 	db	45
   895  00FCA0  2D                 	db	45
   896  00FCA1  2D                 	db	45
   897  00FCA2  2D                 	db	45
   898  00FCA3  2D                 	db	45
   899  00FCA4  2D                 	db	45
   900  00FCA5  2D                 	db	45
   901  00FCA6  2D                 	db	45
   902  00FCA7  2D                 	db	45
   903  00FCA8  2D                 	db	45
   904  00FCA9  2D                 	db	45
   905  00FCAA  2D                 	db	45
   906  00FCAB  2D                 	db	45
   907  00FCAC  2D                 	db	45
   908  00FCAD  2D                 	db	45
   909  00FCAE  2D                 	db	45
   910  00FCAF  2D                 	db	45
   911  00FCB0  0D                 	db	13
   912  00FCB1  0A                 	db	10
   913  00FCB2  00                 	db	0
   914  00FCB3                     STR_2:
   915  00FCB3  20                 	db	32
   916  00FCB4  54                 	db	84	;'T'
   917  00FCB5  65                 	db	101	;'e'
   918  00FCB6  6D                 	db	109	;'m'
   919  00FCB7  70                 	db	112	;'p'
   920  00FCB8  65                 	db	101	;'e'
   921  00FCB9  72                 	db	114	;'r'
   922  00FCBA  61                 	db	97	;'a'
   923  00FCBB  74                 	db	116	;'t'
   924  00FCBC  75                 	db	117	;'u'
   925  00FCBD  72                 	db	114	;'r'
   926  00FCBE  65                 	db	101	;'e'
   927  00FCBF  20                 	db	32
   928  00FCC0  3D                 	db	61	;'='
   929  00FCC1  20                 	db	32
   930  00FCC2  25                 	db	37
   931  00FCC3  64                 	db	100	;'d'
   932  00FCC4  20                 	db	32
   933  00FCC5  64                 	db	100	;'d'
   934  00FCC6  65                 	db	101	;'e'
   935  00FCC7  67                 	db	103	;'g'
   936  00FCC8  72                 	db	114	;'r'
   937  00FCC9  65                 	db	101	;'e'
   938  00FCCA  65                 	db	101	;'e'
   939  00FCCB  73                 	db	115	;'s'
   940  00FCCC  43                 	db	67	;'C'
   941  00FCCD  20                 	db	32
   942  00FCCE  3D                 	db	61	;'='
   943  00FCCF  20                 	db	32
   944  00FCD0  25                 	db	37
   945  00FCD1  64                 	db	100	;'d'
   946  00FCD2  20                 	db	32
   947  00FCD3  64                 	db	100	;'d'
   948  00FCD4  65                 	db	101	;'e'
   949  00FCD5  67                 	db	103	;'g'
   950  00FCD6  72                 	db	114	;'r'
   951  00FCD7  65                 	db	101	;'e'
   952  00FCD8  65                 	db	101	;'e'
   953  00FCD9  73                 	db	115	;'s'
   954  00FCDA  46                 	db	70	;'F'
   955  00FCDB  0D                 	db	13
   956  00FCDC  0A                 	db	10
   957  00FCDD  0A                 	db	10
   958  00FCDE  00                 	db	0
   959  00FCDF                     STR_1:
   960  00FCDF  20                 	db	32
   961  00FCE0  25                 	db	37
   962  00FCE1  30                 	db	48	;'0'
   963  00FCE2  32                 	db	50	;'2'
   964  00FCE3  78                 	db	120	;'x'
   965  00FCE4  3A                 	db	58	;':'
   966  00FCE5  25                 	db	37
   967  00FCE6  30                 	db	48	;'0'
   968  00FCE7  32                 	db	50	;'2'
   969  00FCE8  78                 	db	120	;'x'
   970  00FCE9  3A                 	db	58	;':'
   971  00FCEA  25                 	db	37
   972  00FCEB  30                 	db	48	;'0'
   973  00FCEC  32                 	db	50	;'2'
   974  00FCED  78                 	db	120	;'x'
   975  00FCEE  20                 	db	32
   976  00FCEF  25                 	db	37
   977  00FCF0  30                 	db	48	;'0'
   978  00FCF1  32                 	db	50	;'2'
   979  00FCF2  78                 	db	120	;'x'
   980  00FCF3  2F                 	db	47
   981  00FCF4  25                 	db	37
   982  00FCF5  30                 	db	48	;'0'
   983  00FCF6  32                 	db	50	;'2'
   984  00FCF7  78                 	db	120	;'x'
   985  00FCF8  2F                 	db	47
   986  00FCF9  25                 	db	37
   987  00FCFA  30                 	db	48	;'0'
   988  00FCFB  32                 	db	50	;'2'
   989  00FCFC  78                 	db	120	;'x'
   990  00FCFD  0D                 	db	13
   991  00FCFE  0A                 	db	10
   992  00FCFF  0A                 	db	10
   993  00FD00  00                 	db	0
   994  00FD01                     STR_4:
   995  00FD01  45                 	db	69	;'E'
   996  00FD02  43                 	db	67	;'C'
   997  00FD03  45                 	db	69	;'E'
   998  00FD04  33                 	db	51	;'3'
   999  00FD05  33                 	db	51	;'3'
  1000  00FD06  30                 	db	48	;'0'
  1001  00FD07  31                 	db	49	;'1'
  1002  00FD08  4C                 	db	76	;'L'
  1003  00FD09  20                 	db	32
  1004  00FD0A  46                 	db	70	;'F'
  1005  00FD0B  61                 	db	97	;'a'
  1006  00FD0C  6C                 	db	108	;'l'
  1007  00FD0D  6C                 	db	108	;'l'
  1008  00FD0E  20                 	db	32
  1009  00FD0F  32                 	db	50	;'2'
  1010  00FD10  32                 	db	50	;'2'
  1011  00FD11  2D                 	db	45
  1012  00FD12  53                 	db	83	;'S'
  1013  00FD13  31                 	db	49	;'1'
  1014  00FD14  00                 	db	0
  1015  00FD15                     STR_6:
  1016  00FD15  30                 	db	48	;'0'
  1017  00FD16  31                 	db	49	;'1'
  1018  00FD17  32                 	db	50	;'2'
  1019  00FD18  33                 	db	51	;'3'
  1020  00FD19  34                 	db	52	;'4'
  1021  00FD1A  35                 	db	53	;'5'
  1022  00FD1B  36                 	db	54	;'6'
  1023  00FD1C  37                 	db	55	;'7'
  1024  00FD1D  38                 	db	56	;'8'
  1025  00FD1E  39                 	db	57	;'9'
  1026  00FD1F  61                 	db	97	;'a'
  1027  00FD20  62                 	db	98	;'b'
  1028  00FD21  63                 	db	99	;'c'
  1029  00FD22  64                 	db	100	;'d'
  1030  00FD23  65                 	db	101	;'e'
  1031  00FD24  66                 	db	102	;'f'
  1032  00FD25  00                 	db	0
  1033  00FD26                     STR_5:
  1034  00FD26  4C                 	db	76	;'L'
  1035  00FD27  41                 	db	65	;'A'
  1036  00FD28  42                 	db	66	;'B'
  1037  00FD29  20                 	db	32
  1038  00FD2A  31                 	db	49	;'1'
  1039  00FD2B  31                 	db	49	;'1'
  1040  00FD2C  20                 	db	32
  1041  00FD2D  00                 	db	0
  1042                           
  1043                           ; #config settings
  1044  00FD2E  00                 	db	0	; dummy byte at the end
  1045  0000                     
  1046                           	psect	cinit
  1047  0011F4                     __pcinit:
  1048                           	opt stack 0
  1049  0011F4                     start_initialization:
  1050                           	opt stack 0
  1051  0011F4                     __initialization:
  1052                           	opt stack 0
  1053                           
  1054                           ; Clear objects allocated to BANK1 (31 bytes)
  1055  0011F4  EE01  F054         	lfsr	0,__pbssBANK1
  1056  0011F8  0E1F               	movlw	31
  1057  0011FA                     clear_0:
  1058  0011FA  6AEE               	clrf	postinc0,c
  1059  0011FC  06E8               	decf	wreg,f,c
  1060  0011FE  E1FD               	bnz	clear_0
  1061                           
  1062                           ; Clear objects allocated to COMRAM (41 bytes)
  1063  001200  EE00  F044         	lfsr	0,__pbssCOMRAM
  1064  001204  0E29               	movlw	41
  1065  001206                     clear_1:
  1066  001206  6AEE               	clrf	postinc0,c
  1067  001208  06E8               	decf	wreg,f,c
  1068  00120A  E1FD               	bnz	clear_1
  1069                           
  1070                           ; Initialize objects allocated to BANK1 (84 bytes)
  1071                           ; load TBLPTR registers with __pidataBANK1
  1072  00120C  0E04               	movlw	low __pidataBANK1
  1073  00120E  6EF6               	movwf	tblptrl,c
  1074  001210  0E14               	movlw	high __pidataBANK1
  1075  001212  6EF7               	movwf	tblptrh,c
  1076  001214  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1077  001216  6EF8               	movwf	tblptru,c
  1078  001218  EE01  F000         	lfsr	0,__pdataBANK1
  1079  00121C  EE10 F054          	lfsr	1,84
  1080  001220                     copy_data0:
  1081  001220  0009               	tblrd		*+
  1082  001222  CFF5 FFEE          	movff	tablat,postinc0
  1083  001226  50E5               	movf	postdec1,w,c
  1084  001228  50E1               	movf	fsr1l,w,c
  1085  00122A  E1FA               	bnz	copy_data0
  1086                           
  1087                           ; Initialize objects allocated to BANK0 (126 bytes)
  1088                           ; load TBLPTR registers with __pidataBANK0
  1089  00122C  0EFA               	movlw	low __pidataBANK0
  1090  00122E  6EF6               	movwf	tblptrl,c
  1091  001230  0E10               	movlw	high __pidataBANK0
  1092  001232  6EF7               	movwf	tblptrh,c
  1093  001234  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1094  001236  6EF8               	movwf	tblptru,c
  1095  001238  EE00  F080         	lfsr	0,__pdataBANK0
  1096  00123C  EE10 F07E          	lfsr	1,126
  1097  001240                     copy_data1:
  1098  001240  0009               	tblrd		*+
  1099  001242  CFF5 FFEE          	movff	tablat,postinc0
  1100  001246  50E5               	movf	postdec1,w,c
  1101  001248  50E1               	movf	fsr1l,w,c
  1102  00124A  E1FA               	bnz	copy_data1
  1103                           
  1104                           ; Initialize objects allocated to COMRAM (2 bytes)
  1105                           ; load TBLPTR registers with __pidataCOMRAM
  1106  00124C  0E00               	movlw	low __pidataCOMRAM
  1107  00124E  6EF6               	movwf	tblptrl,c
  1108  001250  0E1A               	movlw	high __pidataCOMRAM
  1109  001252  6EF7               	movwf	tblptrh,c
  1110  001254  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1111  001256  6EF8               	movwf	tblptru,c
  1112  001258  0009               	tblrd		*+	;fetch initializer
  1113  00125A  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1114  00125E  0009               	tblrd		*+	;fetch initializer
  1115  001260  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1116  001264                     end_of_initialization:
  1117                           	opt stack 0
  1118  001264                     __end_of__initialization:
  1119                           	opt stack 0
  1120  001264  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1121  001266  6EF8               	movwf	tblptru,c
  1122  001268  0100               	movlb	0
  1123  00126A  EFBB  F001         	goto	_main	;jump to C main() function
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133                           	psect	bssCOMRAM
  1134  000044                     __pbssCOMRAM:
  1135                           	opt stack 0
  1136  000044                     _Nec_code:
  1137                           	opt stack 0
  1138  000044                     	ds	4
  1139  000048                     _Time_Elapsed:
  1140                           	opt stack 0
  1141  000048                     	ds	2
  1142  00004A                     _nbr:
  1143                           	opt stack 0
  1144  00004A                     	ds	2
  1145  00004C                     _nec_ok:
  1146                           	opt stack 0
  1147  00004C                     	ds	2
  1148  00004E                     _txt:
  1149                           	opt stack 0
  1150  00004E                     	ds	2
  1151  000050                     _Nec_code1:
  1152                           	opt stack 0
  1153  000050                     	ds	1
  1154  000051                     _Nec_state:
  1155                           	opt stack 0
  1156  000051                     	ds	1
  1157  000052                     _TempSecond:
  1158                           	opt stack 0
  1159  000052                     	ds	1
  1160  000053                     __tft_type:
  1161                           	opt stack 0
  1162  000053                     	ds	1
  1163  000054                     _alarm_date:
  1164                           	opt stack 0
  1165  000054                     	ds	1
  1166  000055                     _alarm_hour:
  1167                           	opt stack 0
  1168  000055                     	ds	1
  1169  000056                     _alarm_minute:
  1170                           	opt stack 0
  1171  000056                     	ds	1
  1172  000057                     _alarm_second:
  1173                           	opt stack 0
  1174  000057                     	ds	1
  1175  000058                     _bit_count:
  1176                           	opt stack 0
  1177  000058                     	ds	1
  1178  000059                     _colstart:
  1179                           	opt stack 0
  1180  000059                     	ds	1
  1181  00005A                     _day:
  1182                           	opt stack 0
  1183  00005A                     	ds	1
  1184  00005B                     _dow:
  1185                           	opt stack 0
  1186  00005B                     	ds	1
  1187  00005C                     _found:
  1188                           	opt stack 0
  1189  00005C                     	ds	1
  1190  00005D                     _hour:
  1191                           	opt stack 0
  1192  00005D                     	ds	1
  1193  00005E                     _i:
  1194                           	opt stack 0
  1195  00005E                     	ds	1
  1196  00005F                     _minute:
  1197                           	opt stack 0
  1198  00005F                     	ds	1
  1199  000060                     _month:
  1200                           	opt stack 0
  1201  000060                     	ds	1
  1202  000061                     _rowstart:
  1203                           	opt stack 0
  1204  000061                     	ds	1
  1205  000062                     _second:
  1206                           	opt stack 0
  1207  000062                     	ds	1
  1208  000063                     _setup_alarm_hour:
  1209                           	opt stack 0
  1210  000063                     	ds	1
  1211  000064                     _setup_alarm_minute:
  1212                           	opt stack 0
  1213  000064                     	ds	1
  1214  000065                     _setup_alarm_second:
  1215                           	opt stack 0
  1216  000065                     	ds	1
  1217  000066                     _setup_day:
  1218                           	opt stack 0
  1219  000066                     	ds	1
  1220  000067                     _setup_hour:
  1221                           	opt stack 0
  1222  000067                     	ds	1
  1223  000068                     _setup_minute:
  1224                           	opt stack 0
  1225  000068                     	ds	1
  1226  000069                     _setup_month:
  1227                           	opt stack 0
  1228  000069                     	ds	1
  1229  00006A                     _setup_second:
  1230                           	opt stack 0
  1231  00006A                     	ds	1
  1232  00006B                     _setup_year:
  1233                           	opt stack 0
  1234  00006B                     	ds	1
  1235  00006C                     _year:
  1236                           	opt stack 0
  1237  00006C                     	ds	1
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           
  1247                           	psect	dataCOMRAM
  1248  00006D                     __pdataCOMRAM:
  1249                           	opt stack 0
  1250  00006D                     _tempSecond:
  1251                           	opt stack 0
  1252  00006D                     	ds	1
  1253  00006E                     _wrap:
  1254                           	opt stack 0
  1255  00006E                     	ds	1
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	dataBANK0
  1266  000080                     __pdataBANK0:
  1267                           	opt stack 0
  1268  000080                     _color:
  1269                           	opt stack 0
  1270  000080                     	ds	42
  1271  0000AA                     _D1:
  1272                           	opt stack 0
  1273  0000AA                     	ds	21
  1274  0000BF                     _D2:
  1275                           	opt stack 0
  1276  0000BF                     	ds	21
  1277  0000D4                     _D3:
  1278                           	opt stack 0
  1279  0000D4                     	ds	21
  1280  0000E9                     _array1:
  1281                           	opt stack 0
  1282  0000E9                     	ds	21
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postdec1	equ	0xFE5
  1290                           fsr1l	equ	0xFE1
  1291                           
  1292                           	psect	bssBANK1
  1293  000154                     __pbssBANK1:
  1294                           	opt stack 0
  1295  000154                     _buffer:
  1296                           	opt stack 0
  1297  000154                     	ds	31
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postdec1	equ	0xFE5
  1305                           fsr1l	equ	0xFE1
  1306                           
  1307                           	psect	dataBANK1
  1308  000100                     __pdataBANK1:
  1309                           	opt stack 0
  1310  000100                     _txt1:
  1311                           	opt stack 0
  1312  000100                     	ds	84
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           postinc0	equ	0xFEE
  1318                           wreg	equ	0xFE8
  1319                           postdec1	equ	0xFE5
  1320                           fsr1l	equ	0xFE1
  1321                           
  1322                           	psect	cstackBANK1
  1323  000173                     __pcstackBANK1:
  1324                           	opt stack 0
  1325  000173                     drawtext@x:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x0
  1329  000173                     	ds	1
  1330  000174                     drawtext@textsize:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x1
  1334  000174                     	ds	2
  1335  000176                     drawtext@i:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x3
  1339  000176                     	ds	2
  1340  000178                     drawtext@cursor_y:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x5
  1344  000178                     	ds	1
  1345  000179                     drawtext@cursor_x:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x6
  1349  000179                     	ds	1
  1350  00017A                     main@tempF:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x7
  1354  00017A                     	ds	1
  1355  00017B                     main@tempC:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x8
  1359  00017B                     	ds	1
  1360  00017C                     main@tempF_899:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x9
  1364  00017C                     	ds	1
  1365  00017D                     main@tempC_898:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0xA
  1369  00017D                     	ds	1
  1370  00017E                     main@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0xB
  1374  00017E                     	ds	2
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           
  1384                           	psect	cstackCOMRAM
  1385  000001                     __pcstackCOMRAM:
  1386                           	opt stack 0
  1387  000001                     ??_INT0_isr:
  1388  000001                     
  1389                           ; 1 bytes @ 0x0
  1390  000001                     	ds	2
  1391  000003                     ??_chkisr:
  1392                           
  1393                           ; 0 bytes @ 0x2
  1394  000003                     	ds	14
  1395  000011                     ??_isdigit:
  1396  000011                     ?_strlen:
  1397                           	opt stack 0
  1398  000011                     ?___wmul:
  1399                           	opt stack 0
  1400  000011                     ?___lwdiv:
  1401                           	opt stack 0
  1402  000011                     spiwrite@x:
  1403                           	opt stack 0
  1404  000011                     putch@c:
  1405                           	opt stack 0
  1406  000011                     I2C_Read@ack:
  1407                           	opt stack 0
  1408  000011                     I2C_Write@outByte:
  1409                           	opt stack 0
  1410  000011                     Wait_One_Sec@k:
  1411                           	opt stack 0
  1412  000011                     OpenUSART@spbrg:
  1413                           	opt stack 0
  1414  000011                     ___wmul@multiplier:
  1415                           	opt stack 0
  1416  000011                     ___lwdiv@dividend:
  1417                           	opt stack 0
  1418  000011                     strcpy@to:
  1419                           	opt stack 0
  1420  000011                     strlen@s:
  1421                           	opt stack 0
  1422  000011                     I2C_Init@c:
  1423                           	opt stack 0
  1424                           
  1425                           ; 4 bytes @ 0x10
  1426  000011                     	ds	1
  1427  000012                     spiwrite@spidata:
  1428                           	opt stack 0
  1429  000012                     I2C_Read@n:
  1430                           	opt stack 0
  1431  000012                     I2C_Write@n:
  1432                           	opt stack 0
  1433  000012                     _isdigit$2040:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x11
  1437  000012                     	ds	1
  1438  000013                     ??_strlen:
  1439  000013                     write_command@cmd_:
  1440                           	opt stack 0
  1441  000013                     write_data@data_:
  1442                           	opt stack 0
  1443  000013                     I2C_Read@inByte:
  1444                           	opt stack 0
  1445  000013                     I2C_Write_Cmd_Only@Cmd:
  1446                           	opt stack 0
  1447  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1448                           	opt stack 0
  1449  000013                     DS3231_Setup_Time@Device:
  1450                           	opt stack 0
  1451  000013                     OpenUSART@config:
  1452                           	opt stack 0
  1453  000013                     isdigit@c:
  1454                           	opt stack 0
  1455  000013                     ___wmul@multiplicand:
  1456                           	opt stack 0
  1457  000013                     ___lwdiv@divisor:
  1458                           	opt stack 0
  1459  000013                     strcpy@from:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x12
  1463  000013                     	ds	1
  1464  000014                     ?_DS1621_Read_Temp:
  1465                           	opt stack 0
  1466  000014                     setAddrWindow@y0:
  1467                           	opt stack 0
  1468  000014                     I2C_Write_Cmd_Only@Device:
  1469                           	opt stack 0
  1470  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1471                           	opt stack 0
  1472  000014                     DS3231_Read_Time@Address:
  1473                           	opt stack 0
  1474  000014                     DS3231_Setup_Time@Address:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x13
  1478  000014                     	ds	1
  1479  000015                     setAddrWindow@x1:
  1480                           	opt stack 0
  1481  000015                     I2C_Write_Cmd_Write_Data@Device:
  1482                           	opt stack 0
  1483  000015                     DS3231_Read_Time@Device:
  1484                           	opt stack 0
  1485  000015                     ___lwdiv@counter:
  1486                           	opt stack 0
  1487  000015                     ___wmul@product:
  1488                           	opt stack 0
  1489  000015                     strcpy@cp:
  1490                           	opt stack 0
  1491  000015                     strlen@cp:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x14
  1495  000015                     	ds	1
  1496  000016                     setAddrWindow@y1:
  1497                           	opt stack 0
  1498  000016                     DS1621_Init@Device:
  1499                           	opt stack 0
  1500  000016                     DS1621_Read_Temp@Cmd:
  1501                           	opt stack 0
  1502  000016                     ___lwdiv@quotient:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x15
  1506  000016                     	ds	1
  1507  000017                     ?___awdiv:
  1508                           	opt stack 0
  1509  000017                     setAddrWindow@x0:
  1510                           	opt stack 0
  1511  000017                     DS1621_Read_Temp@Data_Ret:
  1512                           	opt stack 0
  1513  000017                     delay_ms@ms:
  1514                           	opt stack 0
  1515  000017                     ___awdiv@dividend:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x16
  1519  000017                     	ds	1
  1520  000018                     ?___lwmod:
  1521                           	opt stack 0
  1522  000018                     drawPixel@y:
  1523                           	opt stack 0
  1524  000018                     drawFastVLine@y:
  1525                           	opt stack 0
  1526  000018                     fillRectangle@y:
  1527                           	opt stack 0
  1528  000018                     DS1621_Read_Temp@Device:
  1529                           	opt stack 0
  1530  000018                     ___lwmod@dividend:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x17
  1534  000018                     	ds	1
  1535  000019                     ??_delay_ms:
  1536  000019                     drawFastVLine@h:
  1537                           	opt stack 0
  1538  000019                     fillRectangle@w:
  1539                           	opt stack 0
  1540  000019                     drawPixel@color:
  1541                           	opt stack 0
  1542  000019                     ___awdiv@divisor:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x18
  1546  000019                     	ds	1
  1547  00001A                     fillRectangle@h:
  1548                           	opt stack 0
  1549  00001A                     drawFastVLine@color:
  1550                           	opt stack 0
  1551  00001A                     ___lwmod@divisor:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x19
  1555  00001A                     	ds	1
  1556  00001B                     drawPixel@x:
  1557                           	opt stack 0
  1558  00001B                     ___awdiv@counter:
  1559                           	opt stack 0
  1560  00001B                     delay_ms@count:
  1561                           	opt stack 0
  1562  00001B                     fillRectangle@color:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x1A
  1566  00001B                     	ds	1
  1567  00001C                     ??_drawFastVLine:
  1568  00001C                     ___awdiv@sign:
  1569                           	opt stack 0
  1570  00001C                     ___lwmod@counter:
  1571                           	opt stack 0
  1572  00001C                     drawCircle@x0:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x1B
  1576  00001C                     	ds	1
  1577  00001D                     ??_fillRectangle:
  1578  00001D                     ?_printf:
  1579                           	opt stack 0
  1580  00001D                     printf@f:
  1581                           	opt stack 0
  1582  00001D                     ___awdiv@quotient:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x1C
  1586  00001D                     	ds	1
  1587  00001E                     drawCircle@y0:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x1D
  1591  00001E                     	ds	2
  1592  000020                     drawFastVLine@hi:
  1593                           	opt stack 0
  1594  000020                     drawCircle@r:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x1F
  1598  000020                     	ds	1
  1599  000021                     drawFastVLine@lo:
  1600                           	opt stack 0
  1601  000021                     fillRectangle@hi:
  1602                           	opt stack 0
  1603                           
  1604                           ; 1 bytes @ 0x20
  1605  000021                     	ds	1
  1606  000022                     drawFastVLine@x:
  1607                           	opt stack 0
  1608  000022                     fillRectangle@lo:
  1609                           	opt stack 0
  1610  000022                     drawCircle@color:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x21
  1614  000022                     	ds	1
  1615  000023                     fillRect@y:
  1616                           	opt stack 0
  1617  000023                     fillRectangle@x:
  1618                           	opt stack 0
  1619  000023                     fillCircleHelper@x0:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x22
  1623  000023                     	ds	1
  1624  000024                     ??_drawCircle:
  1625  000024                     fillRect@w:
  1626                           	opt stack 0
  1627  000024                     fillScreen@color:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x23
  1631  000024                     	ds	1
  1632  000025                     fillRect@h:
  1633                           	opt stack 0
  1634  000025                     fillCircleHelper@y0:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x24
  1638  000025                     	ds	1
  1639  000026                     fillRect@color:
  1640                           	opt stack 0
  1641  000026                     drawCircle@ddF_x:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x25
  1645  000026                     	ds	1
  1646  000027                     fillCircleHelper@r:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x26
  1650  000027                     	ds	1
  1651  000028                     ??_fillRect:
  1652  000028                     drawCircle@ddF_y:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x27
  1656  000028                     	ds	1
  1657  000029                     fillCircleHelper@cornername:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x28
  1661  000029                     	ds	1
  1662  00002A                     drawCircle@f:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x29
  1666  00002A                     	ds	1
  1667  00002B                     ??_printf:
  1668  00002B                     fillRect@x:
  1669                           	opt stack 0
  1670  00002B                     fillCircleHelper@delta:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x2A
  1674  00002B                     	ds	1
  1675  00002C                     fillRect@i:
  1676                           	opt stack 0
  1677  00002C                     drawCircle@x:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x2B
  1681  00002C                     	ds	1
  1682  00002D                     fillCircleHelper@color:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x2C
  1686  00002D                     	ds	1
  1687  00002E                     drawChar@y:
  1688                           	opt stack 0
  1689  00002E                     drawCircle@y:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x2D
  1693  00002E                     	ds	1
  1694  00002F                     ??_fillCircleHelper:
  1695  00002F                     drawChar@c:
  1696                           	opt stack 0
  1697  00002F                     printf@idx:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x2E
  1701  00002F                     	ds	1
  1702  000030                     drawChar@color:
  1703                           	opt stack 0
  1704  000030                     printf@ap:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x2F
  1708  000030                     	ds	1
  1709  000031                     fillCircleHelper@ddF_x:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x30
  1713  000031                     	ds	1
  1714  000032                     printf@prec:
  1715                           	opt stack 0
  1716  000032                     drawChar@bg:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x31
  1720  000032                     	ds	1
  1721  000033                     fillCircleHelper@ddF_y:
  1722                           	opt stack 0
  1723  000033                     printf@val:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x32
  1727  000033                     	ds	1
  1728  000034                     drawChar@size:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x33
  1732  000034                     	ds	1
  1733  000035                     drawChar@line:
  1734                           	opt stack 0
  1735  000035                     printf@flag:
  1736                           	opt stack 0
  1737  000035                     fillCircleHelper@f:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x34
  1741  000035                     	ds	1
  1742  000036                     drawChar@x:
  1743                           	opt stack 0
  1744  000036                     printf@width:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x35
  1748  000036                     	ds	1
  1749  000037                     drawChar@j:
  1750                           	opt stack 0
  1751  000037                     fillCircleHelper@x:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x36
  1755  000037                     	ds	1
  1756  000038                     drawChar@i:
  1757                           	opt stack 0
  1758  000038                     printf@c:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0x37
  1762  000038                     	ds	1
  1763  000039                     drawtext@y:
  1764                           	opt stack 0
  1765  000039                     fillCircleHelper@y:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x38
  1769  000039                     	ds	1
  1770  00003A                     drawtext@_text:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x39
  1774  00003A                     	ds	1
  1775  00003B                     fillCircle@x0:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x3A
  1779  00003B                     	ds	1
  1780  00003C                     drawtext@color:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x3B
  1784  00003C                     	ds	1
  1785  00003D                     fillCircle@y0:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x3C
  1789  00003D                     	ds	1
  1790  00003E                     drawtext@bg:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x3D
  1794  00003E                     	ds	1
  1795  00003F                     fillCircle@r:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x3E
  1799  00003F                     	ds	1
  1800  000040                     drawtext@size:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0x3F
  1804  000040                     	ds	1
  1805  000041                     ??_drawtext:
  1806  000041                     fillCircle@color:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x40
  1810  000041                     	ds	2
  1811  000043                     ??_main:
  1812                           
  1813                           ; 0 bytes @ 0x42
  1814  000043                     	ds	1
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           
  1824 ;;
  1825 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1826 ;;
  1827 ;; *************** function _main *****************
  1828 ;; Defined at:
  1829 ;;		line 143 in file "Lab11p1.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  i               2   11[BANK1 ] int 
  1834 ;;  tempC           1   10[BANK1 ] char 
  1835 ;;  tempF           1    9[BANK1 ] char 
  1836 ;;  tempC           1    8[BANK1 ] char 
  1837 ;;  tempF           1    7[BANK1 ] char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;		None               void
  1840 ;; Registers used:
  1841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Totals:         1       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;Total ram usage:        7 bytes
  1852 ;; Hardware stack levels required when called:   11
  1853 ;; This function calls:
  1854 ;;		_Activate_Buzzer
  1855 ;;		_DS1621_Read_Temp
  1856 ;;		_DS3231_Read_Time
  1857 ;;		_DS3231_Setup_Time
  1858 ;;		_Deactivate_Buzzer
  1859 ;;		_Do_Init
  1860 ;;		_Initialize_Screen
  1861 ;;		_Wait_One_Sec
  1862 ;;		___awdiv
  1863 ;;		___wmul
  1864 ;;		_drawCircle
  1865 ;;		_drawtext
  1866 ;;		_fillCircle
  1867 ;;		_init_INTERRUPT
  1868 ;;		_printf
  1869 ;; This function is called by:
  1870 ;;		Startup code after reset
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text0
  1875  000376                     __ptext0:
  1876                           	opt stack 0
  1877  000376                     _main:
  1878                           	opt stack 20
  1879                           
  1880                           ;Lab11p1.c: 145: Do_Init();
  1881                           
  1882                           ;incstack = 0
  1883  000376  EC14  F00B         	call	_Do_Init	;wreg free
  1884                           
  1885                           ;Lab11p1.c: 146: DS3231_Setup_Time();
  1886  00037A  EC6F  F009         	call	_DS3231_Setup_Time	;wreg free
  1887                           
  1888                           ;Lab11p1.c: 147: init_INTERRUPT();
  1889  00037E  EC66  F00C         	call	_init_INTERRUPT	;wreg free
  1890                           
  1891                           ;Lab11p1.c: 148: Initialize_Screen();
  1892  000382  ECF2  F007         	call	_Initialize_Screen	;wreg free
  1893  000386  D000               	goto	l5343
  1894  000388                     l5343:
  1895                           
  1896                           ;Lab11p1.c: 151: {
  1897                           ;Lab11p1.c: 153: signed char tempC = DS1621_Read_Temp();
  1898  000388  EC91  F00B         	call	_DS1621_Read_Temp	;wreg free
  1899  00038C  5014               	movf	?_DS1621_Read_Temp,w,c
  1900  00038E  0101               	movlb	1	; () banked
  1901  000390  6F7B               	movwf	main@tempC& (0+255),b
  1902                           
  1903                           ; BSR set to: 1
  1904                           ;Lab11p1.c: 154: signed char tempF = (tempC * 9 / 5) + 32;
  1905  000392  0101               	movlb	1	; () banked
  1906  000394  517B               	movf	main@tempC& (0+255),w,b
  1907  000396  6E11               	movwf	___wmul@multiplier,c
  1908  000398  6A12               	clrf	___wmul@multiplier+1,c
  1909  00039A  BE11               	btfsc	___wmul@multiplier,7,c
  1910  00039C  0612               	decf	___wmul@multiplier+1,f,c
  1911  00039E  0E00               	movlw	0
  1912  0003A0  6E14               	movwf	___wmul@multiplicand+1,c
  1913  0003A2  0E09               	movlw	9
  1914  0003A4  6E13               	movwf	___wmul@multiplicand,c
  1915  0003A6  ECF5  F00B         	call	___wmul	;wreg free
  1916  0003AA  C011  F017         	movff	?___wmul,___awdiv@dividend
  1917  0003AE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1918  0003B2  0E00               	movlw	0
  1919  0003B4  6E1A               	movwf	___awdiv@divisor+1,c
  1920  0003B6  0E05               	movlw	5
  1921  0003B8  6E19               	movwf	___awdiv@divisor,c
  1922  0003BA  ECA7  F007         	call	___awdiv	;wreg free
  1923  0003BE  5017               	movf	?___awdiv,w,c
  1924  0003C0  0F20               	addlw	32
  1925  0003C2  0101               	movlb	1	; () banked
  1926  0003C4  6F7A               	movwf	main@tempF& (0+255),b
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;Lab11p1.c: 160: DS3231_Read_Time();
  1930  0003C6  ECA2  F009         	call	_DS3231_Read_Time	;wreg free
  1931                           
  1932                           ;Lab11p1.c: 161: if(tempSecond != second)
  1933  0003CA  5062               	movf	_second,w,c
  1934  0003CC  186D               	xorwf	_tempSecond,w,c
  1935  0003CE  B4D8               	btfsc	status,2,c
  1936  0003D0  D054               	goto	l5365
  1937                           
  1938                           ;Lab11p1.c: 162: {
  1939                           ;Lab11p1.c: 163: tempSecond = second;
  1940  0003D2  C062  F06D         	movff	_second,_tempSecond
  1941                           
  1942                           ;Lab11p1.c: 164: signed char tempC = DS1621_Read_Temp();
  1943  0003D6  EC91  F00B         	call	_DS1621_Read_Temp	;wreg free
  1944  0003DA  5014               	movf	?_DS1621_Read_Temp,w,c
  1945  0003DC  0101               	movlb	1	; () banked
  1946  0003DE  6F7D               	movwf	main@tempC_898& (0+255),b
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;Lab11p1.c: 165: signed char tempF = (tempC * 9 / 5) + 32;
  1950  0003E0  0101               	movlb	1	; () banked
  1951  0003E2  517D               	movf	main@tempC_898& (0+255),w,b
  1952  0003E4  6E11               	movwf	___wmul@multiplier,c
  1953  0003E6  6A12               	clrf	___wmul@multiplier+1,c
  1954  0003E8  BE11               	btfsc	___wmul@multiplier,7,c
  1955  0003EA  0612               	decf	___wmul@multiplier+1,f,c
  1956  0003EC  0E00               	movlw	0
  1957  0003EE  6E14               	movwf	___wmul@multiplicand+1,c
  1958  0003F0  0E09               	movlw	9
  1959  0003F2  6E13               	movwf	___wmul@multiplicand,c
  1960  0003F4  ECF5  F00B         	call	___wmul	;wreg free
  1961  0003F8  C011  F017         	movff	?___wmul,___awdiv@dividend
  1962  0003FC  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1963  000400  0E00               	movlw	0
  1964  000402  6E1A               	movwf	___awdiv@divisor+1,c
  1965  000404  0E05               	movlw	5
  1966  000406  6E19               	movwf	___awdiv@divisor,c
  1967  000408  ECA7  F007         	call	___awdiv	;wreg free
  1968  00040C  5017               	movf	?___awdiv,w,c
  1969  00040E  0F20               	addlw	32
  1970  000410  0101               	movlb	1	; () banked
  1971  000412  6F7C               	movwf	main@tempF_899& (0+255),b
  1972                           
  1973                           ; BSR set to: 1
  1974                           ;Lab11p1.c: 166: printf (" %02x:%02x:%02x %02x/%02x/%02x\r\n\n",hour,minute,second,month
      +                          ,day,year);
  1975  000414  0EDF               	movlw	low STR_1
  1976  000416  6E1D               	movwf	printf@f,c
  1977  000418  0EFC               	movlw	high STR_1
  1978  00041A  6E1E               	movwf	printf@f+1,c
  1979  00041C  C05D  F01F         	movff	_hour,?_printf+2
  1980  000420  6A20               	clrf	?_printf+3,c
  1981  000422  C05F  F021         	movff	_minute,?_printf+4
  1982  000426  6A22               	clrf	?_printf+5,c
  1983  000428  C062  F023         	movff	_second,?_printf+6
  1984  00042C  6A24               	clrf	?_printf+7,c
  1985  00042E  C060  F025         	movff	_month,?_printf+8
  1986  000432  6A26               	clrf	?_printf+9,c
  1987  000434  C05A  F027         	movff	_day,?_printf+10
  1988  000438  6A28               	clrf	?_printf+11,c
  1989  00043A  C06C  F029         	movff	_year,?_printf+12
  1990  00043E  6A2A               	clrf	?_printf+13,c
  1991  000440  EC0E  F000         	call	_printf	;wreg free
  1992                           
  1993                           ;Lab11p1.c: 168: printf (" Temperature = %d degreesC = %d degreesF\r\n\n", tempC, tempF)
      +                          ;
  1994  000444  0EB3               	movlw	low STR_2
  1995  000446  6E1D               	movwf	printf@f,c
  1996  000448  0EFC               	movlw	high STR_2
  1997  00044A  6E1E               	movwf	printf@f+1,c
  1998  00044C  0101               	movlb	1	; () banked
  1999  00044E  517D               	movf	main@tempC_898& (0+255),w,b
  2000  000450  6E1F               	movwf	?_printf+2,c
  2001  000452  6A20               	clrf	?_printf+3,c
  2002  000454  BE1F               	btfsc	?_printf+2,7,c
  2003  000456  0620               	decf	?_printf+3,f,c
  2004  000458  0101               	movlb	1	; () banked
  2005  00045A  517C               	movf	main@tempF_899& (0+255),w,b
  2006  00045C  6E21               	movwf	?_printf+4,c
  2007  00045E  6A22               	clrf	?_printf+5,c
  2008  000460  BE21               	btfsc	?_printf+4,7,c
  2009  000462  0622               	decf	?_printf+5,f,c
  2010  000464  EC0E  F000         	call	_printf	;wreg free
  2011                           
  2012                           ;Lab11p1.c: 169: printf("------------------------------------------------------------\r\
      +                          n");
  2013  000468  0E74               	movlw	low STR_3
  2014  00046A  6E1D               	movwf	printf@f,c
  2015  00046C  0EFC               	movlw	high STR_3
  2016  00046E  6E1E               	movwf	printf@f+1,c
  2017  000470  EC0E  F000         	call	_printf	;wreg free
  2018                           
  2019                           ;Lab11p1.c: 170: Wait_One_Sec();
  2020  000474  EC09  F00C         	call	_Wait_One_Sec	;wreg free
  2021  000478  D000               	goto	l5365
  2022  00047A                     l5365:
  2023                           
  2024                           ;Lab11p1.c: 171: }
  2025                           ;Lab11p1.c: 173: if (nec_ok == 1)
  2026  00047A  044C               	decf	_nec_ok,w,c
  2027  00047C  104D               	iorwf	_nec_ok+1,w,c
  2028  00047E  A4D8               	btfss	status,2,c
  2029  000480  D783               	goto	l5343
  2030                           
  2031                           ;Lab11p1.c: 174: {
  2032                           ;Lab11p1.c: 175: nec_ok = 0;
  2033  000482  0E00               	movlw	0
  2034  000484  6E4D               	movwf	_nec_ok+1,c
  2035  000486  0E00               	movlw	0
  2036  000488  6E4C               	movwf	_nec_ok,c
  2037                           
  2038                           ;Lab11p1.c: 178: INTCONbits.INT0IE = 1;
  2039  00048A  88F2               	bsf	intcon,4,c	;volatile
  2040                           
  2041                           ;Lab11p1.c: 179: INTCON2bits.INTEDG0 = 0;
  2042  00048C  9CF1               	bcf	intcon2,6,c	;volatile
  2043                           
  2044                           ;Lab11p1.c: 181: found = 0xff;
  2045  00048E  685C               	setf	_found,c
  2046                           
  2047                           ;Lab11p1.c: 184: for(int i = 0;i < 21;i++)
  2048  000490  0E00               	movlw	0
  2049  000492  0101               	movlb	1	; () banked
  2050  000494  6F7F               	movwf	(main@i+1)& (0+255),b
  2051  000496  0E00               	movlw	0
  2052  000498  6F7E               	movwf	main@i& (0+255),b
  2053  00049A                     l5375:
  2054                           
  2055                           ; BSR set to: 1
  2056  00049A  0101               	movlb	1	; () banked
  2057  00049C  BF7F               	btfsc	(main@i+1)& (0+255),7,b
  2058  00049E  D00A               	goto	l5379
  2059  0004A0  0101               	movlb	1	; () banked
  2060  0004A2  517F               	movf	(main@i+1)& (0+255),w,b
  2061  0004A4  E121               	bnz	l5391
  2062  0004A6  0E15               	movlw	21
  2063  0004A8  0101               	movlb	1	; () banked
  2064  0004AA  5D7E               	subwf	main@i& (0+255),w,b
  2065  0004AC  B0D8               	btfsc	status,0,c
  2066  0004AE  D01C               	goto	l5391
  2067  0004B0  D001               	goto	l5379
  2068                           
  2069                           ; BSR set to: 1
  2070  0004B2  D01A               	goto	l5391
  2071  0004B4                     l5379:
  2072                           
  2073                           ; BSR set to: 1
  2074                           ;Lab11p1.c: 185: {
  2075                           ;Lab11p1.c: 186: if(array1[i] == Nec_code1)
  2076  0004B4  0EE9               	movlw	low _array1
  2077  0004B6  0101               	movlb	1	; () banked
  2078  0004B8  257E               	addwf	main@i& (0+255),w,b
  2079  0004BA  6ED9               	movwf	fsr2l,c
  2080  0004BC  0E00               	movlw	high _array1
  2081  0004BE  0101               	movlb	1	; () banked
  2082  0004C0  217F               	addwfc	(main@i+1)& (0+255),w,b
  2083  0004C2  6EDA               	movwf	fsr2h,c
  2084  0004C4  5050               	movf	_Nec_code1,w,c
  2085  0004C6  18DE               	xorwf	postinc2,w,c
  2086  0004C8  A4D8               	btfss	status,2,c
  2087  0004CA  D009               	goto	l5387
  2088                           
  2089                           ; BSR set to: 1
  2090                           ;Lab11p1.c: 187: {
  2091                           ;Lab11p1.c: 188: found = i;
  2092  0004CC  C17E  F05C         	movff	main@i,_found
  2093                           
  2094                           ; BSR set to: 1
  2095                           ;Lab11p1.c: 189: if (found == 15){
  2096  0004D0  0E0F               	movlw	15
  2097  0004D2  185C               	xorwf	_found,w,c
  2098  0004D4  A4D8               	btfss	status,2,c
  2099  0004D6  D008               	goto	l5391
  2100                           
  2101                           ; BSR set to: 1
  2102                           ;Lab11p1.c: 190: DS3231_Setup_Time();
  2103  0004D8  EC6F  F009         	call	_DS3231_Setup_Time	;wreg free
  2104                           
  2105                           ;Lab11p1.c: 191: }
  2106                           ;Lab11p1.c: 192: break;
  2107  0004DC  D005               	goto	l5391
  2108  0004DE                     l5387:
  2109  0004DE  0101               	movlb	1	; () banked
  2110  0004E0  4B7E               	infsnz	main@i& (0+255),f,b
  2111  0004E2  2B7F               	incf	(main@i+1)& (0+255),f,b
  2112  0004E4  D7DA               	goto	l5375
  2113                           
  2114                           ; BSR set to: 1
  2115  0004E6  D000               	goto	l5391
  2116  0004E8                     l5391:
  2117                           
  2118                           ;Lab11p1.c: 193: }
  2119                           ;Lab11p1.c: 194: }
  2120                           ;Lab11p1.c: 200: if (found != 0xff)
  2121  0004E8  285C               	incf	_found,w,c
  2122  0004EA  B4D8               	btfsc	status,2,c
  2123  0004EC  D74D               	goto	l5343
  2124                           
  2125                           ;Lab11p1.c: 201: {
  2126                           ;Lab11p1.c: 202: fillCircle(60, 80, 20, color[found]);
  2127  0004EE  0E00               	movlw	0
  2128  0004F0  6E3C               	movwf	fillCircle@x0+1,c
  2129  0004F2  0E3C               	movlw	60
  2130  0004F4  6E3B               	movwf	fillCircle@x0,c
  2131  0004F6  0E00               	movlw	0
  2132  0004F8  6E3E               	movwf	fillCircle@y0+1,c
  2133  0004FA  0E50               	movlw	80
  2134  0004FC  6E3D               	movwf	fillCircle@y0,c
  2135  0004FE  0E00               	movlw	0
  2136  000500  6E40               	movwf	fillCircle@r+1,c
  2137  000502  0E14               	movlw	20
  2138  000504  6E3F               	movwf	fillCircle@r,c
  2139  000506  505C               	movf	_found,w,c
  2140  000508  0D02               	mullw	2
  2141  00050A  0E80               	movlw	low _color
  2142  00050C  24F3               	addwf	prodl,w,c
  2143  00050E  6ED9               	movwf	fsr2l,c
  2144  000510  0E00               	movlw	high _color
  2145  000512  20F4               	addwfc	prodh,w,c
  2146  000514  6EDA               	movwf	fsr2h,c
  2147  000516  CFDE F041          	movff	postinc2,fillCircle@color
  2148  00051A  CFDD F042          	movff	postdec2,fillCircle@color+1
  2149  00051E  EC2C  F00A         	call	_fillCircle	;wreg free
  2150                           
  2151                           ;Lab11p1.c: 203: drawCircle(60, 80, 20, 0xFFFF);
  2152  000522  0E00               	movlw	0
  2153  000524  6E1D               	movwf	drawCircle@x0+1,c
  2154  000526  0E3C               	movlw	60
  2155  000528  6E1C               	movwf	drawCircle@x0,c
  2156  00052A  0E00               	movlw	0
  2157  00052C  6E1F               	movwf	drawCircle@y0+1,c
  2158  00052E  0E50               	movlw	80
  2159  000530  6E1E               	movwf	drawCircle@y0,c
  2160  000532  0E00               	movlw	0
  2161  000534  6E21               	movwf	drawCircle@r+1,c
  2162  000536  0E14               	movlw	20
  2163  000538  6E20               	movwf	drawCircle@r,c
  2164  00053A  0EFF               	movlw	255
  2165  00053C  6E23               	movwf	drawCircle@color+1,c
  2166  00053E  6822               	setf	drawCircle@color,c
  2167  000540  ECE9  F002         	call	_drawCircle	;wreg free
  2168                           
  2169                           ;Lab11p1.c: 204: drawtext(52, 77, txt1[found], 0x0000, color[found],1);
  2170  000544  0E4D               	movlw	77
  2171  000546  6E39               	movwf	drawtext@y,c
  2172  000548  505C               	movf	_found,w,c
  2173  00054A  0D04               	mullw	4
  2174  00054C  0E00               	movlw	low _txt1
  2175  00054E  24F3               	addwf	prodl,w,c
  2176  000550  6E3A               	movwf	drawtext@_text,c
  2177  000552  0E01               	movlw	high _txt1
  2178  000554  20F4               	addwfc	prodh,w,c
  2179  000556  6E3B               	movwf	drawtext@_text+1,c
  2180  000558  0E00               	movlw	0
  2181  00055A  6E3D               	movwf	drawtext@color+1,c
  2182  00055C  0E00               	movlw	0
  2183  00055E  6E3C               	movwf	drawtext@color,c
  2184  000560  505C               	movf	_found,w,c
  2185  000562  0D02               	mullw	2
  2186  000564  0E80               	movlw	low _color
  2187  000566  24F3               	addwf	prodl,w,c
  2188  000568  6ED9               	movwf	fsr2l,c
  2189  00056A  0E00               	movlw	high _color
  2190  00056C  20F4               	addwfc	prodh,w,c
  2191  00056E  6EDA               	movwf	fsr2h,c
  2192  000570  CFDE F03E          	movff	postinc2,drawtext@bg
  2193  000574  CFDD F03F          	movff	postdec2,drawtext@bg+1
  2194  000578  0E01               	movlw	1
  2195  00057A  6E40               	movwf	drawtext@size,c
  2196  00057C  0E34               	movlw	52
  2197  00057E  EC3B  F006         	call	_drawtext
  2198                           
  2199                           ;Lab11p1.c: 206: PORTA = D3[found];
  2200  000582  505C               	movf	_found,w,c
  2201  000584  0D01               	mullw	1
  2202  000586  0ED4               	movlw	low _D3
  2203  000588  24F3               	addwf	prodl,w,c
  2204  00058A  6ED9               	movwf	fsr2l,c
  2205  00058C  0E00               	movlw	high _D3
  2206  00058E  20F4               	addwfc	prodh,w,c
  2207  000590  6EDA               	movwf	fsr2h,c
  2208  000592  50DF               	movf	indf2,w,c
  2209  000594  6E80               	movwf	3968,c	;volatile
  2210                           
  2211                           ;Lab11p1.c: 207: PORTD = D1[found]|D2[found];
  2212  000596  505C               	movf	_found,w,c
  2213  000598  0D01               	mullw	1
  2214  00059A  0EBF               	movlw	low _D2
  2215  00059C  24F3               	addwf	prodl,w,c
  2216  00059E  6ED9               	movwf	fsr2l,c
  2217  0005A0  0E00               	movlw	high _D2
  2218  0005A2  20F4               	addwfc	prodh,w,c
  2219  0005A4  6EDA               	movwf	fsr2h,c
  2220  0005A6  50DF               	movf	indf2,w,c
  2221  0005A8  6E43               	movwf	??_main& (0+255),c
  2222  0005AA  505C               	movf	_found,w,c
  2223  0005AC  0D01               	mullw	1
  2224  0005AE  0EAA               	movlw	low _D1
  2225  0005B0  24F3               	addwf	prodl,w,c
  2226  0005B2  6ED9               	movwf	fsr2l,c
  2227  0005B4  0E00               	movlw	high _D1
  2228  0005B6  20F4               	addwfc	prodh,w,c
  2229  0005B8  6EDA               	movwf	fsr2h,c
  2230  0005BA  50DF               	movf	indf2,w,c
  2231  0005BC  1043               	iorwf	??_main,w,c
  2232  0005BE  6E83               	movwf	3971,c	;volatile
  2233                           
  2234                           ;Lab11p1.c: 209: Activate_Buzzer();
  2235  0005C0  ECB5  F00C         	call	_Activate_Buzzer	;wreg free
  2236                           
  2237                           ;Lab11p1.c: 210: Wait_One_Sec();
  2238  0005C4  EC09  F00C         	call	_Wait_One_Sec	;wreg free
  2239                           
  2240                           ;Lab11p1.c: 211: Deactivate_Buzzer();
  2241  0005C8  ECF0  F00C         	call	_Deactivate_Buzzer	;wreg free
  2242  0005CC  D6DD               	goto	l5343
  2243  0005CE  EF0C  F000         	goto	start
  2244  0005D2                     __end_of_main:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           intcon	equ	0xFF2
  2253                           intcon2	equ	0xFF1
  2254                           postinc0	equ	0xFEE
  2255                           wreg	equ	0xFE8
  2256                           postdec1	equ	0xFE5
  2257                           fsr1l	equ	0xFE1
  2258                           indf2	equ	0xFDF
  2259                           postinc2	equ	0xFDE
  2260                           postdec2	equ	0xFDD
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _printf *****************
  2266 ;; Defined at:
  2267 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2270 ;;		 -> STR_3(63), STR_2(44), STR_1(34), 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  idx             1   46[COMRAM] unsigned char 
  2273 ;;  tmpval          4    0        struct .
  2274 ;;  cp              3    0        PTR const unsigned char 
  2275 ;;  width           2   53[COMRAM] int 
  2276 ;;  val             2   50[COMRAM] unsigned int 
  2277 ;;  ap              2   47[COMRAM] PTR void [1]
  2278 ;;		 -> ?_printf(2), 
  2279 ;;  len             2    0        unsigned int 
  2280 ;;  c               1   55[COMRAM] char 
  2281 ;;  flag            1   52[COMRAM] unsigned char 
  2282 ;;  prec            1   49[COMRAM] char 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  2   28[COMRAM] int 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2292 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;Total ram usage:       28 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    4
  2299 ;; This function calls:
  2300 ;;		___lwdiv
  2301 ;;		___lwmod
  2302 ;;		___wmul
  2303 ;;		_isdigit
  2304 ;;		_putch
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text1
  2311  00001C                     __ptext1:
  2312                           	opt stack 0
  2313  00001C                     _printf:
  2314                           	opt stack 26
  2315                           
  2316                           ;doprnt.c: 466: va_list ap;
  2317                           ;doprnt.c: 499: signed char c;
  2318                           ;doprnt.c: 501: int width;
  2319                           ;doprnt.c: 506: signed char prec;
  2320                           ;doprnt.c: 508: unsigned char flag;
  2321                           ;doprnt.c: 523: union {
  2322                           ;doprnt.c: 524: unsigned long vd;
  2323                           ;doprnt.c: 525: double integ;
  2324                           ;doprnt.c: 526: } tmpval;
  2325                           ;doprnt.c: 528: unsigned int val;
  2326                           ;doprnt.c: 529: unsigned len;
  2327                           ;doprnt.c: 530: const char * cp;
  2328                           ;doprnt.c: 533: *ap = __va_start();
  2329                           
  2330                           ;incstack = 0
  2331  00001C  0E1F               	movlw	low (?_printf+2)
  2332  00001E  6E30               	movwf	printf@ap,c
  2333  000020  0E00               	movlw	high (?_printf+2)
  2334  000022  6E31               	movwf	printf@ap+1,c
  2335                           
  2336                           ;doprnt.c: 536: while(c = *f++) {
  2337  000024  D199               	goto	l5047
  2338  000026                     l4921:
  2339                           
  2340                           ;doprnt.c: 538: if(c != '%')
  2341  000026  0E25               	movlw	37
  2342  000028  1838               	xorwf	printf@c,w,c
  2343  00002A  B4D8               	btfsc	status,2,c
  2344  00002C  D004               	goto	l4925
  2345                           
  2346                           ;doprnt.c: 540: {
  2347                           ;doprnt.c: 541: (putch(c) );
  2348  00002E  5038               	movf	printf@c,w,c
  2349  000030  ECCE  F00C         	call	_putch
  2350                           
  2351                           ;doprnt.c: 542: continue;
  2352  000034  D191               	goto	l5047
  2353  000036                     l4925:
  2354                           
  2355                           ;doprnt.c: 543: }
  2356                           ;doprnt.c: 546: width = 0;
  2357  000036  0E00               	movlw	0
  2358  000038  6E37               	movwf	printf@width+1,c
  2359  00003A  0E00               	movlw	0
  2360  00003C  6E36               	movwf	printf@width,c
  2361                           
  2362                           ;doprnt.c: 548: flag = 0;
  2363  00003E  0E00               	movlw	0
  2364  000040  6E35               	movwf	printf@flag,c
  2365                           
  2366                           ;doprnt.c: 551: switch(*f) {
  2367                           
  2368                           ;doprnt.c: 550: for(;;) {
  2369  000042  D005               	goto	l4931
  2370  000044                     l4927:
  2371                           
  2372                           ;doprnt.c: 580: flag |= 0x04;
  2373  000044  8435               	bsf	printf@flag,2,c
  2374                           
  2375                           ;doprnt.c: 581: f++;
  2376  000046  4A1D               	infsnz	printf@f,f,c
  2377  000048  2A1E               	incf	printf@f+1,f,c
  2378                           
  2379                           ;doprnt.c: 582: continue;
  2380  00004A  D001               	goto	l4931
  2381                           
  2382                           ;doprnt.c: 584: }
  2383  00004C  D00B               	goto	l4933
  2384  00004E                     l4931:
  2385  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2386  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2387  000056                     	if	0	;tblptru may be non-zero
  2388  000056                     	endif
  2389  000056                     	if	0	;tblptru may be non-zero
  2390  000056                     	endif
  2391  000056  0008               	tblrd		*
  2392  000058  50F5               	movf	tablat,w,c
  2393                           
  2394                           ; Switch size 1, requested type "space"
  2395                           ; Number of cases is 1, Range of values is 48 to 48
  2396                           ; switch strategies available:
  2397                           ; Name         Instructions Cycles
  2398                           ; simple_byte            4     3 (average)
  2399                           ;	Chosen strategy is simple_byte
  2400  00005A  0A30               	xorlw	48	; case 48
  2401  00005C  B4D8               	btfsc	status,2,c
  2402  00005E  D7F2               	goto	l4927
  2403                           
  2404                           ;doprnt.c: 585: break;
  2405  000060  D001               	goto	l4933
  2406                           
  2407                           ;doprnt.c: 586: }
  2408  000062  D7F5               	goto	l4931
  2409  000064                     l4933:
  2410                           
  2411                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2412  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2413  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2414  00006C                     	if	0	;tblptru may be non-zero
  2415  00006C                     	endif
  2416  00006C                     	if	0	;tblptru may be non-zero
  2417  00006C                     	endif
  2418  00006C  0008               	tblrd		*
  2419  00006E  50F5               	movf	tablat,w,c
  2420  000070  EC1B  F00C         	call	_isdigit
  2421  000074  A0D8               	btfss	status,0,c
  2422  000076  D03B               	goto	l4949
  2423                           
  2424                           ;doprnt.c: 598: width = 0;
  2425  000078  0E00               	movlw	0
  2426  00007A  6E37               	movwf	printf@width+1,c
  2427  00007C  0E00               	movlw	0
  2428  00007E  6E36               	movwf	printf@width,c
  2429  000080  D000               	goto	l4937
  2430  000082                     l4937:
  2431                           
  2432                           ;doprnt.c: 600: width *= 10;
  2433  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2434  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2435  00008A  0E00               	movlw	0
  2436  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2437  00008E  0E0A               	movlw	10
  2438  000090  6E13               	movwf	___wmul@multiplicand,c
  2439  000092  ECF5  F00B         	call	___wmul	;wreg free
  2440  000096  C011  F036         	movff	?___wmul,printf@width
  2441  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2442                           
  2443                           ;doprnt.c: 601: width += *f++ - '0';
  2444  00009E  0ED0               	movlw	208
  2445  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2446  0000A2  0EFF               	movlw	255
  2447  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2448  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2449  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2450  0000AE                     	if	0	;tblptru may be non-zero
  2451  0000AE                     	endif
  2452  0000AE                     	if	0	;tblptru may be non-zero
  2453  0000AE                     	endif
  2454  0000AE  0008               	tblrd		*
  2455  0000B0  50F5               	movf	tablat,w,c
  2456  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2457  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2458  0000B6  502B               	movf	??_printf,w,c
  2459  0000B8  262D               	addwf	??_printf+2,f,c
  2460  0000BA  502C               	movf	??_printf+1,w,c
  2461  0000BC  222E               	addwfc	??_printf+3,f,c
  2462  0000BE  502D               	movf	??_printf+2,w,c
  2463  0000C0  2636               	addwf	printf@width,f,c
  2464  0000C2  502E               	movf	??_printf+3,w,c
  2465  0000C4  2237               	addwfc	printf@width+1,f,c
  2466  0000C6  4A1D               	infsnz	printf@f,f,c
  2467  0000C8  2A1E               	incf	printf@f+1,f,c
  2468                           
  2469                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2470  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2471  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2472  0000D2                     	if	0	;tblptru may be non-zero
  2473  0000D2                     	endif
  2474  0000D2                     	if	0	;tblptru may be non-zero
  2475  0000D2                     	endif
  2476  0000D2  0008               	tblrd		*
  2477  0000D4  50F5               	movf	tablat,w,c
  2478  0000D6  EC1B  F00C         	call	_isdigit
  2479  0000DA  A0D8               	btfss	status,0,c
  2480  0000DC  D008               	goto	l4949
  2481  0000DE  D7D1               	goto	l4937
  2482                           
  2483                           ;doprnt.c: 608: }
  2484                           ;doprnt.c: 635: switch(c = *f++) {
  2485  0000E0  D006               	goto	l4949
  2486                           
  2487                           ;doprnt.c: 638: goto alldone;
  2488                           
  2489                           ;doprnt.c: 637: case 0:
  2490  0000E2  D148               	goto	l655
  2491                           
  2492                           ;doprnt.c: 698: case 'i':
  2493                           ;doprnt.c: 699: break;
  2494                           
  2495                           ;doprnt.c: 697: case 'd':
  2496  0000E4  D01B               	goto	l618
  2497  0000E6                     l4945:
  2498                           
  2499                           ;doprnt.c: 721: flag |= 0x80;
  2500  0000E6  8E35               	bsf	printf@flag,7,c
  2501                           
  2502                           ;doprnt.c: 723: break;
  2503  0000E8  D019               	goto	l618
  2504                           
  2505                           ;doprnt.c: 813: continue;
  2506                           
  2507                           ;doprnt.c: 802: default:
  2508  0000EA  D136               	goto	l5047
  2509                           
  2510                           ;doprnt.c: 822: }
  2511  0000EC  D017               	goto	l618
  2512  0000EE                     l4949:
  2513  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2514  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2515  0000F6  4A1D               	infsnz	printf@f,f,c
  2516  0000F8  2A1E               	incf	printf@f+1,f,c
  2517  0000FA                     	if	0	;tblptru may be non-zero
  2518  0000FA                     	endif
  2519  0000FA                     	if	0	;tblptru may be non-zero
  2520  0000FA                     	endif
  2521  0000FA  0008               	tblrd		*
  2522  0000FC  CFF5 F038          	movff	tablat,printf@c
  2523  000100  5038               	movf	printf@c,w,c
  2524                           
  2525                           ; Switch size 1, requested type "space"
  2526                           ; Number of cases is 4, Range of values is 0 to 120
  2527                           ; switch strategies available:
  2528                           ; Name         Instructions Cycles
  2529                           ; simple_byte           13     7 (average)
  2530                           ;	Chosen strategy is simple_byte
  2531  000102  0A00               	xorlw	0	; case 0
  2532  000104  B4D8               	btfsc	status,2,c
  2533  000106  D136               	goto	l655
  2534  000108  0A64               	xorlw	100	; case 100
  2535  00010A  B4D8               	btfsc	status,2,c
  2536  00010C  D007               	goto	l618
  2537  00010E  0A0D               	xorlw	13	; case 105
  2538  000110  B4D8               	btfsc	status,2,c
  2539  000112  D004               	goto	l618
  2540  000114  0A11               	xorlw	17	; case 120
  2541  000116  B4D8               	btfsc	status,2,c
  2542  000118  D7E6               	goto	l4945
  2543  00011A  D11E               	goto	l5047
  2544  00011C                     l618:
  2545                           
  2546                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2547  00011C  BE35               	btfsc	printf@flag,7,c
  2548  00011E  D015               	goto	l4961
  2549                           
  2550                           ;doprnt.c: 1253: {
  2551                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2552  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2553  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2554  000128  CFDE F033          	movff	postinc2,printf@val
  2555  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2556  000130  0E02               	movlw	2
  2557  000132  2630               	addwf	printf@ap,f,c
  2558  000134  0E00               	movlw	0
  2559  000136  2231               	addwfc	printf@ap+1,f,c
  2560                           
  2561                           ;doprnt.c: 1261: if((int)val < 0) {
  2562  000138  AE34               	btfss	printf@val+1,7,c
  2563  00013A  D04E               	goto	l4995
  2564                           
  2565                           ;doprnt.c: 1262: flag |= 0x03;
  2566  00013C  0E03               	movlw	3
  2567  00013E  1235               	iorwf	printf@flag,f,c
  2568                           
  2569                           ;doprnt.c: 1263: val = -val;
  2570  000140  6C33               	negf	printf@val,c
  2571  000142  1E34               	comf	printf@val+1,f,c
  2572  000144  B0D8               	btfsc	status,0,c
  2573  000146  2A34               	incf	printf@val+1,f,c
  2574                           
  2575                           ;doprnt.c: 1264: }
  2576                           ;doprnt.c: 1266: }
  2577  000148  D047               	goto	l4995
  2578  00014A                     l4961:
  2579                           
  2580                           ;doprnt.c: 1268: else
  2581                           ;doprnt.c: 1273: {
  2582                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2583  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2584  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2585  000152  CFDE F033          	movff	postinc2,printf@val
  2586  000156  CFDD F034          	movff	postdec2,printf@val+1
  2587  00015A  0E02               	movlw	2
  2588  00015C  2630               	addwf	printf@ap,f,c
  2589  00015E  0E00               	movlw	0
  2590  000160  2231               	addwfc	printf@ap+1,f,c
  2591                           
  2592                           ;doprnt.c: 1287: }
  2593                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2594  000162  D03A               	goto	l4995
  2595  000164                     l4965:
  2596                           
  2597                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2598  000164  0E01               	movlw	1
  2599  000166  6E38               	movwf	printf@c,c
  2600  000168                     l4967:
  2601  000168  0E05               	movlw	5
  2602  00016A  1838               	xorwf	printf@c,w,c
  2603  00016C  B4D8               	btfsc	status,2,c
  2604  00016E  D03D               	goto	l4997
  2605  000170  D001               	goto	l4971
  2606  000172  D03B               	goto	l4997
  2607  000174                     l4971:
  2608                           
  2609                           ;doprnt.c: 1306: if(val < dpowers[c])
  2610  000174  5038               	movf	printf@c,w,c
  2611  000176  0D02               	mullw	2
  2612  000178  0E62               	movlw	low _dpowers
  2613  00017A  24F3               	addwf	prodl,w,c
  2614  00017C  6EF6               	movwf	tblptrl,c
  2615  00017E  0EFC               	movlw	high _dpowers
  2616  000180  20F4               	addwfc	prodh,w,c
  2617  000182  6EF7               	movwf	tblptrh,c
  2618  000184                     	if	0	;There are less than 3 active tblptr bytes
  2619  000184                     	endif
  2620  000184  0009               	tblrd		*+
  2621  000186  50F5               	movf	tablat,w,c
  2622  000188  5C33               	subwf	printf@val,w,c
  2623  00018A  0009               	tblrd		*+
  2624  00018C  50F5               	movf	tablat,w,c
  2625  00018E  5834               	subwfb	printf@val+1,w,c
  2626  000190  A0D8               	btfss	status,0,c
  2627  000192  D02B               	goto	l4997
  2628  000194  D001               	goto	l4975
  2629                           
  2630                           ;doprnt.c: 1307: break;
  2631  000196  D029               	goto	l4997
  2632  000198                     l4975:
  2633  000198  2A38               	incf	printf@c,f,c
  2634  00019A  D7E6               	goto	l4967
  2635                           
  2636                           ;doprnt.c: 1309: break;
  2637  00019C  D026               	goto	l4997
  2638  00019E                     l4979:
  2639                           
  2640                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2641  00019E  0E01               	movlw	1
  2642  0001A0  6E38               	movwf	printf@c,c
  2643  0001A2                     l4981:
  2644  0001A2  0E04               	movlw	4
  2645  0001A4  1838               	xorwf	printf@c,w,c
  2646  0001A6  B4D8               	btfsc	status,2,c
  2647  0001A8  D020               	goto	l4997
  2648  0001AA  D001               	goto	l4985
  2649  0001AC  D01E               	goto	l4997
  2650  0001AE                     l4985:
  2651                           
  2652                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2653  0001AE  5038               	movf	printf@c,w,c
  2654  0001B0  0D02               	mullw	2
  2655  0001B2  0E6C               	movlw	low _hexpowers
  2656  0001B4  24F3               	addwf	prodl,w,c
  2657  0001B6  6EF6               	movwf	tblptrl,c
  2658  0001B8  0EFC               	movlw	high _hexpowers
  2659  0001BA  20F4               	addwfc	prodh,w,c
  2660  0001BC  6EF7               	movwf	tblptrh,c
  2661  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2662  0001BE                     	endif
  2663  0001BE  0009               	tblrd		*+
  2664  0001C0  50F5               	movf	tablat,w,c
  2665  0001C2  5C33               	subwf	printf@val,w,c
  2666  0001C4  0009               	tblrd		*+
  2667  0001C6  50F5               	movf	tablat,w,c
  2668  0001C8  5834               	subwfb	printf@val+1,w,c
  2669  0001CA  A0D8               	btfss	status,0,c
  2670  0001CC  D00E               	goto	l4997
  2671  0001CE  D001               	goto	l4989
  2672                           
  2673                           ;doprnt.c: 1318: break;
  2674  0001D0  D00C               	goto	l4997
  2675  0001D2                     l4989:
  2676  0001D2  2A38               	incf	printf@c,f,c
  2677  0001D4  D7E6               	goto	l4981
  2678                           
  2679                           ;doprnt.c: 1336: }
  2680                           
  2681                           ;doprnt.c: 1320: break;
  2682  0001D6  D009               	goto	l4997
  2683  0001D8                     l4995:
  2684  0001D8  5035               	movf	printf@flag,w,c
  2685  0001DA  0B80               	andlw	128
  2686                           
  2687                           ; Switch size 1, requested type "space"
  2688                           ; Number of cases is 2, Range of values is 0 to 128
  2689                           ; switch strategies available:
  2690                           ; Name         Instructions Cycles
  2691                           ; simple_byte            7     4 (average)
  2692                           ;	Chosen strategy is simple_byte
  2693  0001DC  0A00               	xorlw	0	; case 0
  2694  0001DE  B4D8               	btfsc	status,2,c
  2695  0001E0  D7C1               	goto	l4965
  2696  0001E2  0A80               	xorlw	128	; case 128
  2697  0001E4  B4D8               	btfsc	status,2,c
  2698  0001E6  D7DB               	goto	l4979
  2699  0001E8  D000               	goto	l4997
  2700  0001EA                     l4997:
  2701                           
  2702                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2703  0001EA  5036               	movf	printf@width,w,c
  2704  0001EC  1037               	iorwf	printf@width+1,w,c
  2705  0001EE  B4D8               	btfsc	status,2,c
  2706  0001F0  D00A               	goto	l5003
  2707  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2708  0001F6  0E03               	movlw	3
  2709  0001F8  162B               	andwf	??_printf,f,c
  2710  0001FA  B4D8               	btfsc	status,2,c
  2711  0001FC  D004               	goto	l5003
  2712                           
  2713                           ;doprnt.c: 1346: width--;
  2714  0001FE  0636               	decf	printf@width,f,c
  2715  000200  A0D8               	btfss	status,0,c
  2716  000202  0637               	decf	printf@width+1,f,c
  2717  000204  D000               	goto	l5003
  2718  000206                     l5003:
  2719                           
  2720                           ;doprnt.c: 1381: if(width > c)
  2721  000206  0E80               	movlw	128
  2722  000208  BE38               	btfsc	printf@c,7,c
  2723  00020A  0E7F               	movlw	127
  2724  00020C  6E2B               	movwf	??_printf& (0+255),c
  2725  00020E  5036               	movf	printf@width,w,c
  2726  000210  5C38               	subwf	printf@c,w,c
  2727  000212  5037               	movf	printf@width+1,w,c
  2728  000214  0A80               	xorlw	128
  2729  000216  582B               	subwfb	??_printf& (0+255),w,c
  2730  000218  B0D8               	btfsc	status,0,c
  2731  00021A  D007               	goto	l5007
  2732                           
  2733                           ;doprnt.c: 1382: width -= c;
  2734  00021C  5038               	movf	printf@c,w,c
  2735  00021E  5E36               	subwf	printf@width,f,c
  2736  000220  0E00               	movlw	0
  2737  000222  BE38               	btfsc	printf@c,7,c
  2738  000224  0EFF               	movlw	255
  2739  000226  5A37               	subwfb	printf@width+1,f,c
  2740  000228  D005               	goto	l5009
  2741  00022A                     l5007:
  2742                           
  2743                           ;doprnt.c: 1383: else
  2744                           ;doprnt.c: 1384: width = 0;
  2745  00022A  0E00               	movlw	0
  2746  00022C  6E37               	movwf	printf@width+1,c
  2747  00022E  0E00               	movlw	0
  2748  000230  6E36               	movwf	printf@width,c
  2749  000232  D000               	goto	l5009
  2750  000234                     l5009:
  2751                           
  2752                           ;doprnt.c: 1387: if(flag & 0x04) {
  2753  000234  A435               	btfss	printf@flag,2,c
  2754  000236  D01A               	goto	l5021
  2755                           
  2756                           ;doprnt.c: 1392: if(flag & 0x03)
  2757  000238  C035  F02B         	movff	printf@flag,??_printf
  2758  00023C  0E03               	movlw	3
  2759  00023E  162B               	andwf	??_printf,f,c
  2760  000240  B4D8               	btfsc	status,2,c
  2761  000242  D004               	goto	l5015
  2762                           
  2763                           ;doprnt.c: 1393: (putch('-') );
  2764  000244  0E2D               	movlw	45
  2765  000246  ECCE  F00C         	call	_putch
  2766  00024A  D000               	goto	l5015
  2767  00024C                     l5015:
  2768                           
  2769                           ;doprnt.c: 1415: if(width)
  2770  00024C  5036               	movf	printf@width,w,c
  2771  00024E  1037               	iorwf	printf@width+1,w,c
  2772  000250  B4D8               	btfsc	status,2,c
  2773  000252  D026               	goto	l5031
  2774  000254                     l5017:
  2775                           
  2776                           ;doprnt.c: 1417: (putch('0') );
  2777  000254  0E30               	movlw	48
  2778  000256  ECCE  F00C         	call	_putch
  2779                           
  2780                           ;doprnt.c: 1418: while(--width);
  2781  00025A  0636               	decf	printf@width,f,c
  2782  00025C  A0D8               	btfss	status,0,c
  2783  00025E  0637               	decf	printf@width+1,f,c
  2784  000260  5036               	movf	printf@width,w,c
  2785  000262  1037               	iorwf	printf@width+1,w,c
  2786  000264  B4D8               	btfsc	status,2,c
  2787  000266  D01C               	goto	l5031
  2788  000268  D7F5               	goto	l5017
  2789                           
  2790                           ;doprnt.c: 1420: } else
  2791  00026A  D01A               	goto	l5031
  2792  00026C                     l5021:
  2793                           
  2794                           ;doprnt.c: 1422: {
  2795                           ;doprnt.c: 1424: if(width
  2796                           ;doprnt.c: 1428: )
  2797  00026C  5036               	movf	printf@width,w,c
  2798  00026E  1037               	iorwf	printf@width+1,w,c
  2799  000270  B4D8               	btfsc	status,2,c
  2800  000272  D00C               	goto	l5027
  2801  000274                     l5023:
  2802                           
  2803                           ;doprnt.c: 1430: (putch(' ') );
  2804  000274  0E20               	movlw	32
  2805  000276  ECCE  F00C         	call	_putch
  2806                           
  2807                           ;doprnt.c: 1431: while(--width);
  2808  00027A  0636               	decf	printf@width,f,c
  2809  00027C  A0D8               	btfss	status,0,c
  2810  00027E  0637               	decf	printf@width+1,f,c
  2811  000280  5036               	movf	printf@width,w,c
  2812  000282  1037               	iorwf	printf@width+1,w,c
  2813  000284  B4D8               	btfsc	status,2,c
  2814  000286  D002               	goto	l5027
  2815  000288  D7F5               	goto	l5023
  2816  00028A  D000               	goto	l5027
  2817  00028C                     l5027:
  2818                           
  2819                           ;doprnt.c: 1438: if(flag & 0x03)
  2820  00028C  C035  F02B         	movff	printf@flag,??_printf
  2821  000290  0E03               	movlw	3
  2822  000292  162B               	andwf	??_printf,f,c
  2823  000294  B4D8               	btfsc	status,2,c
  2824  000296  D004               	goto	l5031
  2825                           
  2826                           ;doprnt.c: 1439: (putch('-') );
  2827  000298  0E2D               	movlw	45
  2828  00029A  ECCE  F00C         	call	_putch
  2829  00029E  D000               	goto	l5031
  2830  0002A0                     l5031:
  2831                           
  2832                           ;doprnt.c: 1469: }
  2833                           ;doprnt.c: 1472: prec = c;
  2834  0002A0  C038  F032         	movff	printf@c,printf@prec
  2835                           
  2836                           ;doprnt.c: 1474: while(prec--) {
  2837  0002A4  D053               	goto	l5045
  2838                           
  2839                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2840  0002A6  D045               	goto	l5041
  2841  0002A8                     l5033:
  2842                           
  2843                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2844  0002A8  5032               	movf	printf@prec,w,c
  2845  0002AA  0D02               	mullw	2
  2846  0002AC  0E62               	movlw	low _dpowers
  2847  0002AE  24F3               	addwf	prodl,w,c
  2848  0002B0  6EF6               	movwf	tblptrl,c
  2849  0002B2  0EFC               	movlw	high _dpowers
  2850  0002B4  20F4               	addwfc	prodh,w,c
  2851  0002B6  6EF7               	movwf	tblptrh,c
  2852  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2853  0002B8                     	endif
  2854  0002B8  0009               	tblrd		*+
  2855  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2856  0002BE  000A               	tblrd		*-
  2857  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2858  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2859  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2860  0002CC  ECD4  F009         	call	___lwdiv	;wreg free
  2861  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2862  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2863  0002D8  0E00               	movlw	0
  2864  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2865  0002DC  0E0A               	movlw	10
  2866  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2867  0002E0  ECA5  F00A         	call	___lwmod	;wreg free
  2868  0002E4  5018               	movf	?___lwmod,w,c
  2869  0002E6  0F30               	addlw	48
  2870  0002E8  6E38               	movwf	printf@c,c
  2871                           
  2872                           ;doprnt.c: 1491: break;
  2873  0002EA  D02C               	goto	l5043
  2874  0002EC                     l5035:
  2875                           
  2876                           ;doprnt.c: 1499: {
  2877                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2878  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2879  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2880  0002F4  5032               	movf	printf@prec,w,c
  2881  0002F6  0D02               	mullw	2
  2882  0002F8  0E6C               	movlw	low _hexpowers
  2883  0002FA  24F3               	addwf	prodl,w,c
  2884  0002FC  6EF6               	movwf	tblptrl,c
  2885  0002FE  0EFC               	movlw	high _hexpowers
  2886  000300  20F4               	addwfc	prodh,w,c
  2887  000302  6EF7               	movwf	tblptrh,c
  2888  000304                     	if	0	;There are less than 3 active tblptr bytes
  2889  000304                     	endif
  2890  000304  0009               	tblrd		*+
  2891  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2892  00030A  000A               	tblrd		*-
  2893  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2894  000310  ECD4  F009         	call	___lwdiv	;wreg free
  2895  000314  5011               	movf	?___lwdiv,w,c
  2896  000316  0B0F               	andlw	15
  2897  000318  6E2F               	movwf	printf@idx,c
  2898                           
  2899                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2900  00031A  502F               	movf	printf@idx,w,c
  2901  00031C  0D01               	mullw	1
  2902  00031E  0E15               	movlw	low STR_6
  2903  000320  24F3               	addwf	prodl,w,c
  2904  000322  6EF6               	movwf	tblptrl,c
  2905  000324  0EFD               	movlw	high STR_6
  2906  000326  20F4               	addwfc	prodh,w,c
  2907  000328  6EF7               	movwf	tblptrh,c
  2908  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2909  00032A                     	endif
  2910  00032A  0008               	tblrd		*
  2911  00032C  CFF5 F038          	movff	tablat,printf@c
  2912                           
  2913                           ;doprnt.c: 1523: }
  2914                           
  2915                           ;doprnt.c: 1508: }
  2916                           ;doprnt.c: 1510: break;
  2917  000330  D009               	goto	l5043
  2918  000332                     l5041:
  2919  000332  5035               	movf	printf@flag,w,c
  2920  000334  0B80               	andlw	128
  2921                           
  2922                           ; Switch size 1, requested type "space"
  2923                           ; Number of cases is 2, Range of values is 0 to 128
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte            7     4 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928  000336  0A00               	xorlw	0	; case 0
  2929  000338  B4D8               	btfsc	status,2,c
  2930  00033A  D7B6               	goto	l5033
  2931  00033C  0A80               	xorlw	128	; case 128
  2932  00033E  B4D8               	btfsc	status,2,c
  2933  000340  D7D5               	goto	l5035
  2934  000342  D000               	goto	l5043
  2935  000344                     l5043:
  2936                           
  2937                           ;doprnt.c: 1524: (putch(c) );
  2938  000344  5038               	movf	printf@c,w,c
  2939  000346  ECCE  F00C         	call	_putch
  2940  00034A  D000               	goto	l5045
  2941  00034C                     l5045:
  2942  00034C  0632               	decf	printf@prec,f,c
  2943  00034E  2832               	incf	printf@prec,w,c
  2944  000350  B4D8               	btfsc	status,2,c
  2945  000352  D002               	goto	l5047
  2946  000354  D7EE               	goto	l5041
  2947  000356  D000               	goto	l5047
  2948  000358                     l5047:
  2949  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2950  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2951  000360  4A1D               	infsnz	printf@f,f,c
  2952  000362  2A1E               	incf	printf@f+1,f,c
  2953  000364                     	if	0	;tblptru may be non-zero
  2954  000364                     	endif
  2955  000364                     	if	0	;tblptru may be non-zero
  2956  000364                     	endif
  2957  000364  0008               	tblrd		*
  2958  000366  CFF5 F038          	movff	tablat,printf@c
  2959  00036A  5038               	movf	printf@c,w,c
  2960  00036C  B4D8               	btfsc	status,2,c
  2961  00036E  D002               	goto	l655
  2962  000370  D65A               	goto	l4921
  2963  000372  D000               	goto	l655
  2964  000374                     l655:
  2965  000374  0012               	return		;funcret
  2966  000376                     __end_of_printf:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           intcon2	equ	0xFF1
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _putch *****************
  2988 ;; Defined at:
  2989 ;;		line 104 in file "Lab11p1.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  c               1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  c               1   16[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        1 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    3
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_printf
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text2
  3018  00199C                     __ptext2:
  3019                           	opt stack 0
  3020  00199C                     _putch:
  3021                           	opt stack 26
  3022                           
  3023                           ;incstack = 0
  3024                           ;putch@c stored from wreg
  3025  00199C  6E11               	movwf	putch@c,c
  3026                           
  3027                           ;Lab11p1.c: 106: while (!TRMT);
  3028  00199E  D000               	goto	l356
  3029  0019A0                     l356:
  3030  0019A0  A2AC               	btfss	4012,1,c	;volatile
  3031  0019A2  D7FE               	goto	l356
  3032                           
  3033                           ;Lab11p1.c: 107: TXREG = c;
  3034  0019A4  C011  FFAD         	movff	putch@c,4013	;volatile
  3035  0019A8  0012               	return		;funcret
  3036  0019AA                     __end_of_putch:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           intcon2	equ	0xFF1
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _isdigit *****************
  3058 ;; Defined at:
  3059 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  c               1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  c               1   18[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;		None               void
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        3 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_printf
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text3
  3088  001836                     __ptext3:
  3089                           	opt stack 0
  3090  001836                     _isdigit:
  3091                           	opt stack 26
  3092                           
  3093                           ;incstack = 0
  3094                           ;isdigit@c stored from wreg
  3095  001836  6E13               	movwf	isdigit@c,c
  3096  001838  0E00               	movlw	0
  3097  00183A  6E12               	movwf	_isdigit$2040,c
  3098  00183C  0E3A               	movlw	58
  3099  00183E  6013               	cpfslt	isdigit@c,c
  3100  001840  D006               	goto	l4685
  3101  001842  0E2F               	movlw	47
  3102  001844  6413               	cpfsgt	isdigit@c,c
  3103  001846  D003               	goto	l4685
  3104  001848  0E01               	movlw	1
  3105  00184A  6E12               	movwf	_isdigit$2040,c
  3106  00184C  D000               	goto	l4685
  3107  00184E                     l4685:
  3108  00184E  C012  F011         	movff	_isdigit$2040,??_isdigit
  3109  001852  3011               	rrcf	??_isdigit,w,c
  3110  001854  D000               	goto	l1122
  3111  001856                     l1122:
  3112  001856  0012               	return		;funcret
  3113  001858                     __end_of_isdigit:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           intcon	equ	0xFF2
  3122                           intcon2	equ	0xFF1
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function ___lwmod *****************
  3135 ;; Defined at:
  3136 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  dividend        2   23[COMRAM] unsigned int 
  3139 ;;  divisor         2   25[COMRAM] unsigned int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  counter         1   27[COMRAM] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   23[COMRAM] unsigned int 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;Total ram usage:        5 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    3
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_printf
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text4
  3166  00154A                     __ptext4:
  3167                           	opt stack 0
  3168  00154A                     ___lwmod:
  3169                           	opt stack 26
  3170                           
  3171                           ;incstack = 0
  3172  00154A  501A               	movf	___lwmod@divisor,w,c
  3173  00154C  101B               	iorwf	___lwmod@divisor+1,w,c
  3174  00154E  B4D8               	btfsc	status,2,c
  3175  001550  D01D               	goto	l1224
  3176  001552  0E01               	movlw	1
  3177  001554  6E1C               	movwf	___lwmod@counter,c
  3178  001556  D005               	goto	l4717
  3179  001558                     l4715:
  3180  001558  90D8               	bcf	status,0,c
  3181  00155A  361A               	rlcf	___lwmod@divisor,f,c
  3182  00155C  361B               	rlcf	___lwmod@divisor+1,f,c
  3183  00155E  2A1C               	incf	___lwmod@counter,f,c
  3184  001560  D000               	goto	l4717
  3185  001562                     l4717:
  3186  001562  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3187  001564  D002               	goto	l4719
  3188  001566  D7F8               	goto	l4715
  3189  001568  D000               	goto	l4719
  3190  00156A                     l4719:
  3191  00156A  501A               	movf	___lwmod@divisor,w,c
  3192  00156C  5C18               	subwf	___lwmod@dividend,w,c
  3193  00156E  501B               	movf	___lwmod@divisor+1,w,c
  3194  001570  5819               	subwfb	___lwmod@dividend+1,w,c
  3195  001572  A0D8               	btfss	status,0,c
  3196  001574  D005               	goto	l4723
  3197  001576  501A               	movf	___lwmod@divisor,w,c
  3198  001578  5E18               	subwf	___lwmod@dividend,f,c
  3199  00157A  501B               	movf	___lwmod@divisor+1,w,c
  3200  00157C  5A19               	subwfb	___lwmod@dividend+1,f,c
  3201  00157E  D000               	goto	l4723
  3202  001580                     l4723:
  3203  001580  90D8               	bcf	status,0,c
  3204  001582  321B               	rrcf	___lwmod@divisor+1,f,c
  3205  001584  321A               	rrcf	___lwmod@divisor,f,c
  3206  001586  2E1C               	decfsz	___lwmod@counter,f,c
  3207  001588  D7F0               	goto	l4719
  3208  00158A  D000               	goto	l1224
  3209  00158C                     l1224:
  3210  00158C  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3211  001590  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3212  001594  0012               	return		;funcret
  3213  001596                     __end_of___lwmod:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           postinc0	equ	0xFEE
  3224                           wreg	equ	0xFE8
  3225                           postdec1	equ	0xFE5
  3226                           fsr1l	equ	0xFE1
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function ___lwdiv *****************
  3235 ;; Defined at:
  3236 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  dividend        2   16[COMRAM] unsigned int 
  3239 ;;  divisor         2   18[COMRAM] unsigned int 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  quotient        2   21[COMRAM] unsigned int 
  3242 ;;  counter         1   20[COMRAM] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  2   16[COMRAM] unsigned int 
  3245 ;; Registers used:
  3246 ;;		wreg, status,2, status,0
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3252 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;Total ram usage:        7 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    3
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_printf
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text5
  3267  0013A8                     __ptext5:
  3268                           	opt stack 0
  3269  0013A8                     ___lwdiv:
  3270                           	opt stack 26
  3271                           
  3272                           ;incstack = 0
  3273  0013A8  0E00               	movlw	0
  3274  0013AA  6E17               	movwf	___lwdiv@quotient+1,c
  3275  0013AC  0E00               	movlw	0
  3276  0013AE  6E16               	movwf	___lwdiv@quotient,c
  3277  0013B0  5013               	movf	___lwdiv@divisor,w,c
  3278  0013B2  1014               	iorwf	___lwdiv@divisor+1,w,c
  3279  0013B4  B4D8               	btfsc	status,2,c
  3280  0013B6  D021               	goto	l1214
  3281  0013B8  0E01               	movlw	1
  3282  0013BA  6E15               	movwf	___lwdiv@counter,c
  3283  0013BC  D005               	goto	l4697
  3284  0013BE                     l4695:
  3285  0013BE  90D8               	bcf	status,0,c
  3286  0013C0  3613               	rlcf	___lwdiv@divisor,f,c
  3287  0013C2  3614               	rlcf	___lwdiv@divisor+1,f,c
  3288  0013C4  2A15               	incf	___lwdiv@counter,f,c
  3289  0013C6  D000               	goto	l4697
  3290  0013C8                     l4697:
  3291  0013C8  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3292  0013CA  D002               	goto	l4699
  3293  0013CC  D7F8               	goto	l4695
  3294  0013CE  D000               	goto	l4699
  3295  0013D0                     l4699:
  3296  0013D0  90D8               	bcf	status,0,c
  3297  0013D2  3616               	rlcf	___lwdiv@quotient,f,c
  3298  0013D4  3617               	rlcf	___lwdiv@quotient+1,f,c
  3299  0013D6  5013               	movf	___lwdiv@divisor,w,c
  3300  0013D8  5C11               	subwf	___lwdiv@dividend,w,c
  3301  0013DA  5014               	movf	___lwdiv@divisor+1,w,c
  3302  0013DC  5812               	subwfb	___lwdiv@dividend+1,w,c
  3303  0013DE  A0D8               	btfss	status,0,c
  3304  0013E0  D006               	goto	l4707
  3305  0013E2  5013               	movf	___lwdiv@divisor,w,c
  3306  0013E4  5E11               	subwf	___lwdiv@dividend,f,c
  3307  0013E6  5014               	movf	___lwdiv@divisor+1,w,c
  3308  0013E8  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3309  0013EA  8016               	bsf	___lwdiv@quotient,0,c
  3310  0013EC  D000               	goto	l4707
  3311  0013EE                     l4707:
  3312  0013EE  90D8               	bcf	status,0,c
  3313  0013F0  3214               	rrcf	___lwdiv@divisor+1,f,c
  3314  0013F2  3213               	rrcf	___lwdiv@divisor,f,c
  3315  0013F4  2E15               	decfsz	___lwdiv@counter,f,c
  3316  0013F6  D7EC               	goto	l4699
  3317  0013F8  D000               	goto	l1214
  3318  0013FA                     l1214:
  3319  0013FA  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3320  0013FE  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3321  001402  0012               	return		;funcret
  3322  001404                     __end_of___lwdiv:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           prodh	equ	0xFF4
  3329                           prodl	equ	0xFF3
  3330                           intcon	equ	0xFF2
  3331                           intcon2	equ	0xFF1
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1l	equ	0xFE1
  3336                           indf2	equ	0xFDF
  3337                           postinc2	equ	0xFDE
  3338                           postdec2	equ	0xFDD
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _fillCircle *****************
  3344 ;; Defined at:
  3345 ;;		line 614 in file "ST7735_TFT.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  x0              2   58[COMRAM] int 
  3348 ;;  y0              2   60[COMRAM] int 
  3349 ;;  r               2   62[COMRAM] int 
  3350 ;;  color           2   64[COMRAM] unsigned int 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;		None
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3362 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;Total ram usage:        8 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    8
  3369 ;; This function calls:
  3370 ;;		_drawFastVLine
  3371 ;;		_fillCircleHelper
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text6
  3378  001458                     __ptext6:
  3379                           	opt stack 0
  3380  001458                     _fillCircle:
  3381                           	opt stack 22
  3382                           
  3383                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3384                           
  3385                           ;incstack = 0
  3386  001458  503F               	movf	fillCircle@r,w,c
  3387  00145A  0800               	sublw	0
  3388  00145C  243D               	addwf	fillCircle@y0,w,c
  3389  00145E  6E18               	movwf	drawFastVLine@y,c
  3390  001460  80D8               	bsf	status,0,c
  3391  001462  343F               	rlcf	fillCircle@r,w,c
  3392  001464  6E19               	movwf	drawFastVLine@h,c
  3393  001466  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3394  00146A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3395  00146E  503B               	movf	fillCircle@x0,w,c
  3396  001470  EC39  F008         	call	_drawFastVLine
  3397                           
  3398                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3399  001474  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3400  001478  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3401  00147C  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3402  001480  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3403  001484  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3404  001488  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3405  00148C  0E00               	movlw	0
  3406  00148E  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3407  001490  0E03               	movlw	3
  3408  001492  6E29               	movwf	fillCircleHelper@cornername,c
  3409  001494  0E00               	movlw	0
  3410  001496  6E2C               	movwf	fillCircleHelper@delta+1,c
  3411  001498  0E00               	movlw	0
  3412  00149A  6E2B               	movwf	fillCircleHelper@delta,c
  3413  00149C  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3414  0014A0  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3415  0014A4  EC17  F005         	call	_fillCircleHelper	;wreg free
  3416  0014A8  0012               	return		;funcret
  3417  0014AA                     __end_of_fillCircle:
  3418                           	opt stack 0
  3419                           tblptru	equ	0xFF8
  3420                           tblptrh	equ	0xFF7
  3421                           tblptrl	equ	0xFF6
  3422                           tablat	equ	0xFF5
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           intcon	equ	0xFF2
  3426                           intcon2	equ	0xFF1
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function _fillCircleHelper *****************
  3439 ;; Defined at:
  3440 ;;		line 589 in file "ST7735_TFT.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  x0              2   34[COMRAM] int 
  3443 ;;  y0              2   36[COMRAM] int 
  3444 ;;  r               2   38[COMRAM] int 
  3445 ;;  cornername      2   40[COMRAM] unsigned int 
  3446 ;;  delta           2   42[COMRAM] int 
  3447 ;;  color           2   44[COMRAM] unsigned int 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  y               2   56[COMRAM] int 
  3450 ;;  x               2   54[COMRAM] int 
  3451 ;;  f               2   52[COMRAM] int 
  3452 ;;  ddF_y           2   50[COMRAM] int 
  3453 ;;  ddF_x           2   48[COMRAM] int 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;		None               void
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:       24 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    7
  3470 ;; This function calls:
  3471 ;;		_drawFastVLine
  3472 ;; This function is called by:
  3473 ;;		_fillCircle
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text7
  3478  000A2E                     __ptext7:
  3479                           	opt stack 0
  3480  000A2E                     _fillCircleHelper:
  3481                           	opt stack 22
  3482                           
  3483                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3484                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3485                           
  3486                           ;incstack = 0
  3487  000A2E  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3488  000A32  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3489  000A36  1E2F               	comf	??_fillCircleHelper,f,c
  3490  000A38  1E30               	comf	??_fillCircleHelper+1,f,c
  3491  000A3A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3492  000A3C  2A30               	incf	??_fillCircleHelper+1,f,c
  3493  000A3E  0E01               	movlw	1
  3494  000A40  242F               	addwf	??_fillCircleHelper,w,c
  3495  000A42  6E35               	movwf	fillCircleHelper@f,c
  3496  000A44  0E00               	movlw	0
  3497  000A46  2030               	addwfc	??_fillCircleHelper+1,w,c
  3498  000A48  6E36               	movwf	fillCircleHelper@f+1,c
  3499  000A4A  0E00               	movlw	0
  3500  000A4C  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3501  000A4E  0E01               	movlw	1
  3502  000A50  6E31               	movwf	fillCircleHelper@ddF_x,c
  3503  000A52  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3504  000A56  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3505  000A5A  90D8               	bcf	status,0,c
  3506  000A5C  362F               	rlcf	??_fillCircleHelper,f,c
  3507  000A5E  3630               	rlcf	??_fillCircleHelper+1,f,c
  3508  000A60  1E2F               	comf	??_fillCircleHelper,f,c
  3509  000A62  1E30               	comf	??_fillCircleHelper+1,f,c
  3510  000A64  4A2F               	infsnz	??_fillCircleHelper,f,c
  3511  000A66  2A30               	incf	??_fillCircleHelper+1,f,c
  3512  000A68  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3513  000A6C  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3514  000A70  0E00               	movlw	0
  3515  000A72  6E38               	movwf	fillCircleHelper@x+1,c
  3516  000A74  0E00               	movlw	0
  3517  000A76  6E37               	movwf	fillCircleHelper@x,c
  3518  000A78  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3519  000A7C  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3520                           
  3521                           ;ST7735_TFT.c: 593: while (x<y) {
  3522  000A80  D067               	goto	l4581
  3523  000A82                     l4561:
  3524                           
  3525                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3526  000A82  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3527  000A84  D00B               	goto	l177
  3528                           
  3529                           ;ST7735_TFT.c: 595: y--;
  3530  000A86  0639               	decf	fillCircleHelper@y,f,c
  3531  000A88  A0D8               	btfss	status,0,c
  3532  000A8A  063A               	decf	fillCircleHelper@y+1,f,c
  3533                           
  3534                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3535  000A8C  0E02               	movlw	2
  3536  000A8E  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3537  000A90  0E00               	movlw	0
  3538  000A92  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3539                           
  3540                           ;ST7735_TFT.c: 597: f += ddF_y;
  3541  000A94  5033               	movf	fillCircleHelper@ddF_y,w,c
  3542  000A96  2635               	addwf	fillCircleHelper@f,f,c
  3543  000A98  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3544  000A9A  2236               	addwfc	fillCircleHelper@f+1,f,c
  3545  000A9C                     l177:
  3546                           
  3547                           ;ST7735_TFT.c: 598: }
  3548                           ;ST7735_TFT.c: 599: x++;
  3549  000A9C  4A37               	infsnz	fillCircleHelper@x,f,c
  3550  000A9E  2A38               	incf	fillCircleHelper@x+1,f,c
  3551                           
  3552                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3553  000AA0  0E02               	movlw	2
  3554  000AA2  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3555  000AA4  0E00               	movlw	0
  3556  000AA6  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3557                           
  3558                           ;ST7735_TFT.c: 601: f += ddF_x;
  3559  000AA8  5031               	movf	fillCircleHelper@ddF_x,w,c
  3560  000AAA  2635               	addwf	fillCircleHelper@f,f,c
  3561  000AAC  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3562  000AAE  2236               	addwfc	fillCircleHelper@f+1,f,c
  3563                           
  3564                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3565  000AB0  A029               	btfss	fillCircleHelper@cornername,0,c
  3566  000AB2  D025               	goto	l4577
  3567                           
  3568                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3569  000AB4  5039               	movf	fillCircleHelper@y,w,c
  3570  000AB6  0800               	sublw	0
  3571  000AB8  2425               	addwf	fillCircleHelper@y0,w,c
  3572  000ABA  6E18               	movwf	drawFastVLine@y,c
  3573  000ABC  5039               	movf	fillCircleHelper@y,w,c
  3574  000ABE  2439               	addwf	fillCircleHelper@y,w,c
  3575  000AC0  242B               	addwf	fillCircleHelper@delta,w,c
  3576  000AC2  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3577  000AC4  282F               	incf	??_fillCircleHelper,w,c
  3578  000AC6  6E19               	movwf	drawFastVLine@h,c
  3579  000AC8  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3580  000ACC  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3581  000AD0  5023               	movf	fillCircleHelper@x0,w,c
  3582  000AD2  2437               	addwf	fillCircleHelper@x,w,c
  3583  000AD4  EC39  F008         	call	_drawFastVLine
  3584                           
  3585                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3586  000AD8  5037               	movf	fillCircleHelper@x,w,c
  3587  000ADA  0800               	sublw	0
  3588  000ADC  2425               	addwf	fillCircleHelper@y0,w,c
  3589  000ADE  6E18               	movwf	drawFastVLine@y,c
  3590  000AE0  5037               	movf	fillCircleHelper@x,w,c
  3591  000AE2  2437               	addwf	fillCircleHelper@x,w,c
  3592  000AE4  242B               	addwf	fillCircleHelper@delta,w,c
  3593  000AE6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3594  000AE8  282F               	incf	??_fillCircleHelper,w,c
  3595  000AEA  6E19               	movwf	drawFastVLine@h,c
  3596  000AEC  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3597  000AF0  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3598  000AF4  5023               	movf	fillCircleHelper@x0,w,c
  3599  000AF6  2439               	addwf	fillCircleHelper@y,w,c
  3600  000AF8  EC39  F008         	call	_drawFastVLine
  3601  000AFC  D000               	goto	l4577
  3602  000AFE                     l4577:
  3603                           
  3604                           ;ST7735_TFT.c: 606: }
  3605                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3606  000AFE  A229               	btfss	fillCircleHelper@cornername,1,c
  3607  000B00  D027               	goto	l4581
  3608                           
  3609                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3610  000B02  5039               	movf	fillCircleHelper@y,w,c
  3611  000B04  0800               	sublw	0
  3612  000B06  2425               	addwf	fillCircleHelper@y0,w,c
  3613  000B08  6E18               	movwf	drawFastVLine@y,c
  3614  000B0A  5039               	movf	fillCircleHelper@y,w,c
  3615  000B0C  2439               	addwf	fillCircleHelper@y,w,c
  3616  000B0E  242B               	addwf	fillCircleHelper@delta,w,c
  3617  000B10  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3618  000B12  282F               	incf	??_fillCircleHelper,w,c
  3619  000B14  6E19               	movwf	drawFastVLine@h,c
  3620  000B16  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3621  000B1A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3622  000B1E  5037               	movf	fillCircleHelper@x,w,c
  3623  000B20  0800               	sublw	0
  3624  000B22  2423               	addwf	fillCircleHelper@x0,w,c
  3625  000B24  EC39  F008         	call	_drawFastVLine
  3626                           
  3627                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3628  000B28  5037               	movf	fillCircleHelper@x,w,c
  3629  000B2A  0800               	sublw	0
  3630  000B2C  2425               	addwf	fillCircleHelper@y0,w,c
  3631  000B2E  6E18               	movwf	drawFastVLine@y,c
  3632  000B30  5037               	movf	fillCircleHelper@x,w,c
  3633  000B32  2437               	addwf	fillCircleHelper@x,w,c
  3634  000B34  242B               	addwf	fillCircleHelper@delta,w,c
  3635  000B36  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3636  000B38  282F               	incf	??_fillCircleHelper,w,c
  3637  000B3A  6E19               	movwf	drawFastVLine@h,c
  3638  000B3C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3639  000B40  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3640  000B44  5039               	movf	fillCircleHelper@y,w,c
  3641  000B46  0800               	sublw	0
  3642  000B48  2423               	addwf	fillCircleHelper@x0,w,c
  3643  000B4A  EC39  F008         	call	_drawFastVLine
  3644  000B4E  D000               	goto	l4581
  3645  000B50                     l4581:
  3646  000B50  5039               	movf	fillCircleHelper@y,w,c
  3647  000B52  5C37               	subwf	fillCircleHelper@x,w,c
  3648  000B54  5038               	movf	fillCircleHelper@x+1,w,c
  3649  000B56  0A80               	xorlw	128
  3650  000B58  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3651  000B5A  503A               	movf	fillCircleHelper@y+1,w,c
  3652  000B5C  0A80               	xorlw	128
  3653  000B5E  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3654  000B60  A0D8               	btfss	status,0,c
  3655  000B62  D78F               	goto	l4561
  3656  000B64  0012               	return		;funcret
  3657  000B66                     __end_of_fillCircleHelper:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           intcon2	equ	0xFF1
  3667                           postinc0	equ	0xFEE
  3668                           wreg	equ	0xFE8
  3669                           postdec1	equ	0xFE5
  3670                           fsr1l	equ	0xFE1
  3671                           indf2	equ	0xFDF
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function _drawCircle *****************
  3679 ;; Defined at:
  3680 ;;		line 528 in file "ST7735_TFT.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  x0              2   27[COMRAM] int 
  3683 ;;  y0              2   29[COMRAM] int 
  3684 ;;  r               2   31[COMRAM] int 
  3685 ;;  color           2   33[COMRAM] unsigned int 
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;  y               2   45[COMRAM] int 
  3688 ;;  x               2   43[COMRAM] int 
  3689 ;;  f               2   41[COMRAM] int 
  3690 ;;  ddF_y           2   39[COMRAM] int 
  3691 ;;  ddF_x           2   37[COMRAM] int 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;		None               void
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3701 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;Total ram usage:       20 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    7
  3708 ;; This function calls:
  3709 ;;		_drawPixel
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text8
  3716  0005D2                     __ptext8:
  3717                           	opt stack 0
  3718  0005D2                     _drawCircle:
  3719                           	opt stack 23
  3720                           
  3721                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3722                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3723                           
  3724                           ;incstack = 0
  3725  0005D2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3726  0005D6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3727  0005DA  1E24               	comf	??_drawCircle,f,c
  3728  0005DC  1E25               	comf	??_drawCircle+1,f,c
  3729  0005DE  4A24               	infsnz	??_drawCircle,f,c
  3730  0005E0  2A25               	incf	??_drawCircle+1,f,c
  3731  0005E2  0E01               	movlw	1
  3732  0005E4  2424               	addwf	??_drawCircle,w,c
  3733  0005E6  6E2A               	movwf	drawCircle@f,c
  3734  0005E8  0E00               	movlw	0
  3735  0005EA  2025               	addwfc	??_drawCircle+1,w,c
  3736  0005EC  6E2B               	movwf	drawCircle@f+1,c
  3737  0005EE  0E00               	movlw	0
  3738  0005F0  6E27               	movwf	drawCircle@ddF_x+1,c
  3739  0005F2  0E01               	movlw	1
  3740  0005F4  6E26               	movwf	drawCircle@ddF_x,c
  3741  0005F6  C020  F024         	movff	drawCircle@r,??_drawCircle
  3742  0005FA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3743  0005FE  90D8               	bcf	status,0,c
  3744  000600  3624               	rlcf	??_drawCircle,f,c
  3745  000602  3625               	rlcf	??_drawCircle+1,f,c
  3746  000604  1E24               	comf	??_drawCircle,f,c
  3747  000606  1E25               	comf	??_drawCircle+1,f,c
  3748  000608  4A24               	infsnz	??_drawCircle,f,c
  3749  00060A  2A25               	incf	??_drawCircle+1,f,c
  3750  00060C  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3751  000610  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3752  000614  0E00               	movlw	0
  3753  000616  6E2D               	movwf	drawCircle@x+1,c
  3754  000618  0E00               	movlw	0
  3755  00061A  6E2C               	movwf	drawCircle@x,c
  3756  00061C  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3757  000620  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3758                           
  3759                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3760  000624  501E               	movf	drawCircle@y0,w,c
  3761  000626  2420               	addwf	drawCircle@r,w,c
  3762  000628  6E18               	movwf	drawPixel@y,c
  3763  00062A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3764  00062E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3765  000632  501C               	movf	drawCircle@x0,w,c
  3766  000634  ECC8  F00B         	call	_drawPixel
  3767                           
  3768                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3769  000638  5020               	movf	drawCircle@r,w,c
  3770  00063A  0800               	sublw	0
  3771  00063C  241E               	addwf	drawCircle@y0,w,c
  3772  00063E  6E18               	movwf	drawPixel@y,c
  3773  000640  C022  F019         	movff	drawCircle@color,drawPixel@color
  3774  000644  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3775  000648  501C               	movf	drawCircle@x0,w,c
  3776  00064A  ECC8  F00B         	call	_drawPixel
  3777                           
  3778                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3779  00064E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3780  000652  C022  F019         	movff	drawCircle@color,drawPixel@color
  3781  000656  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3782  00065A  501C               	movf	drawCircle@x0,w,c
  3783  00065C  2420               	addwf	drawCircle@r,w,c
  3784  00065E  ECC8  F00B         	call	_drawPixel
  3785                           
  3786                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3787  000662  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3788  000666  C022  F019         	movff	drawCircle@color,drawPixel@color
  3789  00066A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3790  00066E  5020               	movf	drawCircle@r,w,c
  3791  000670  0800               	sublw	0
  3792  000672  241C               	addwf	drawCircle@x0,w,c
  3793  000674  ECC8  F00B         	call	_drawPixel
  3794                           
  3795                           ;ST7735_TFT.c: 536: while (x < y) {
  3796  000678  D078               	goto	l4775
  3797  00067A                     l4747:
  3798                           
  3799                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3800  00067A  BE2B               	btfsc	drawCircle@f+1,7,c
  3801  00067C  D00B               	goto	l159
  3802                           
  3803                           ;ST7735_TFT.c: 538: y--;
  3804  00067E  062E               	decf	drawCircle@y,f,c
  3805  000680  A0D8               	btfss	status,0,c
  3806  000682  062F               	decf	drawCircle@y+1,f,c
  3807                           
  3808                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3809  000684  0E02               	movlw	2
  3810  000686  2628               	addwf	drawCircle@ddF_y,f,c
  3811  000688  0E00               	movlw	0
  3812  00068A  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3813                           
  3814                           ;ST7735_TFT.c: 540: f += ddF_y;
  3815  00068C  5028               	movf	drawCircle@ddF_y,w,c
  3816  00068E  262A               	addwf	drawCircle@f,f,c
  3817  000690  5029               	movf	drawCircle@ddF_y+1,w,c
  3818  000692  222B               	addwfc	drawCircle@f+1,f,c
  3819  000694                     l159:
  3820                           
  3821                           ;ST7735_TFT.c: 541: }
  3822                           ;ST7735_TFT.c: 542: x++;
  3823  000694  4A2C               	infsnz	drawCircle@x,f,c
  3824  000696  2A2D               	incf	drawCircle@x+1,f,c
  3825                           
  3826                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3827  000698  0E02               	movlw	2
  3828  00069A  2626               	addwf	drawCircle@ddF_x,f,c
  3829  00069C  0E00               	movlw	0
  3830  00069E  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3831                           
  3832                           ;ST7735_TFT.c: 544: f += ddF_x;
  3833  0006A0  5026               	movf	drawCircle@ddF_x,w,c
  3834  0006A2  262A               	addwf	drawCircle@f,f,c
  3835  0006A4  5027               	movf	drawCircle@ddF_x+1,w,c
  3836  0006A6  222B               	addwfc	drawCircle@f+1,f,c
  3837                           
  3838                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3839  0006A8  501E               	movf	drawCircle@y0,w,c
  3840  0006AA  242E               	addwf	drawCircle@y,w,c
  3841  0006AC  6E18               	movwf	drawPixel@y,c
  3842  0006AE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3843  0006B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3844  0006B6  501C               	movf	drawCircle@x0,w,c
  3845  0006B8  242C               	addwf	drawCircle@x,w,c
  3846  0006BA  ECC8  F00B         	call	_drawPixel
  3847                           
  3848                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3849  0006BE  501E               	movf	drawCircle@y0,w,c
  3850  0006C0  242E               	addwf	drawCircle@y,w,c
  3851  0006C2  6E18               	movwf	drawPixel@y,c
  3852  0006C4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3853  0006C8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3854  0006CC  502C               	movf	drawCircle@x,w,c
  3855  0006CE  0800               	sublw	0
  3856  0006D0  241C               	addwf	drawCircle@x0,w,c
  3857  0006D2  ECC8  F00B         	call	_drawPixel
  3858                           
  3859                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3860  0006D6  502E               	movf	drawCircle@y,w,c
  3861  0006D8  0800               	sublw	0
  3862  0006DA  241E               	addwf	drawCircle@y0,w,c
  3863  0006DC  6E18               	movwf	drawPixel@y,c
  3864  0006DE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3865  0006E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3866  0006E6  501C               	movf	drawCircle@x0,w,c
  3867  0006E8  242C               	addwf	drawCircle@x,w,c
  3868  0006EA  ECC8  F00B         	call	_drawPixel
  3869                           
  3870                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3871  0006EE  502E               	movf	drawCircle@y,w,c
  3872  0006F0  0800               	sublw	0
  3873  0006F2  241E               	addwf	drawCircle@y0,w,c
  3874  0006F4  6E18               	movwf	drawPixel@y,c
  3875  0006F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3876  0006FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3877  0006FE  502C               	movf	drawCircle@x,w,c
  3878  000700  0800               	sublw	0
  3879  000702  241C               	addwf	drawCircle@x0,w,c
  3880  000704  ECC8  F00B         	call	_drawPixel
  3881                           
  3882                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3883  000708  501E               	movf	drawCircle@y0,w,c
  3884  00070A  242C               	addwf	drawCircle@x,w,c
  3885  00070C  6E18               	movwf	drawPixel@y,c
  3886  00070E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3887  000712  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3888  000716  501C               	movf	drawCircle@x0,w,c
  3889  000718  242E               	addwf	drawCircle@y,w,c
  3890  00071A  ECC8  F00B         	call	_drawPixel
  3891                           
  3892                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3893  00071E  501E               	movf	drawCircle@y0,w,c
  3894  000720  242C               	addwf	drawCircle@x,w,c
  3895  000722  6E18               	movwf	drawPixel@y,c
  3896  000724  C022  F019         	movff	drawCircle@color,drawPixel@color
  3897  000728  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3898  00072C  502E               	movf	drawCircle@y,w,c
  3899  00072E  0800               	sublw	0
  3900  000730  241C               	addwf	drawCircle@x0,w,c
  3901  000732  ECC8  F00B         	call	_drawPixel
  3902                           
  3903                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3904  000736  502C               	movf	drawCircle@x,w,c
  3905  000738  0800               	sublw	0
  3906  00073A  241E               	addwf	drawCircle@y0,w,c
  3907  00073C  6E18               	movwf	drawPixel@y,c
  3908  00073E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3909  000742  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3910  000746  501C               	movf	drawCircle@x0,w,c
  3911  000748  242E               	addwf	drawCircle@y,w,c
  3912  00074A  ECC8  F00B         	call	_drawPixel
  3913                           
  3914                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3915  00074E  502C               	movf	drawCircle@x,w,c
  3916  000750  0800               	sublw	0
  3917  000752  241E               	addwf	drawCircle@y0,w,c
  3918  000754  6E18               	movwf	drawPixel@y,c
  3919  000756  C022  F019         	movff	drawCircle@color,drawPixel@color
  3920  00075A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3921  00075E  502E               	movf	drawCircle@y,w,c
  3922  000760  0800               	sublw	0
  3923  000762  241C               	addwf	drawCircle@x0,w,c
  3924  000764  ECC8  F00B         	call	_drawPixel
  3925  000768  D000               	goto	l4775
  3926  00076A                     l4775:
  3927  00076A  502E               	movf	drawCircle@y,w,c
  3928  00076C  5C2C               	subwf	drawCircle@x,w,c
  3929  00076E  502D               	movf	drawCircle@x+1,w,c
  3930  000770  0A80               	xorlw	128
  3931  000772  6E24               	movwf	??_drawCircle& (0+255),c
  3932  000774  502F               	movf	drawCircle@y+1,w,c
  3933  000776  0A80               	xorlw	128
  3934  000778  5824               	subwfb	??_drawCircle& (0+255),w,c
  3935  00077A  A0D8               	btfss	status,0,c
  3936  00077C  D77E               	goto	l4747
  3937  00077E  0012               	return		;funcret
  3938  000780                     __end_of_drawCircle:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           intcon2	equ	0xFF1
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           postdec1	equ	0xFE5
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function ___awdiv *****************
  3960 ;; Defined at:
  3961 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  dividend        2   22[COMRAM] int 
  3964 ;;  divisor         2   24[COMRAM] int 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  quotient        2   28[COMRAM] int 
  3967 ;;  sign            1   27[COMRAM] unsigned char 
  3968 ;;  counter         1   26[COMRAM] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2   22[COMRAM] int 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:        8 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    3
  3985 ;; This function calls:
  3986 ;;		Nothing
  3987 ;; This function is called by:
  3988 ;;		_main
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text9
  3993  000F4E                     __ptext9:
  3994                           	opt stack 0
  3995  000F4E                     ___awdiv:
  3996                           	opt stack 27
  3997                           
  3998                           ;incstack = 0
  3999  000F4E  0E00               	movlw	0
  4000  000F50  6E1C               	movwf	___awdiv@sign,c
  4001  000F52  AE1A               	btfss	___awdiv@divisor+1,7,c
  4002  000F54  D007               	goto	l5063
  4003  000F56  6C19               	negf	___awdiv@divisor,c
  4004  000F58  1E1A               	comf	___awdiv@divisor+1,f,c
  4005  000F5A  B0D8               	btfsc	status,0,c
  4006  000F5C  2A1A               	incf	___awdiv@divisor+1,f,c
  4007  000F5E  0E01               	movlw	1
  4008  000F60  6E1C               	movwf	___awdiv@sign,c
  4009  000F62  D000               	goto	l5063
  4010  000F64                     l5063:
  4011  000F64  AE18               	btfss	___awdiv@dividend+1,7,c
  4012  000F66  D007               	goto	l5069
  4013  000F68  6C17               	negf	___awdiv@dividend,c
  4014  000F6A  1E18               	comf	___awdiv@dividend+1,f,c
  4015  000F6C  B0D8               	btfsc	status,0,c
  4016  000F6E  2A18               	incf	___awdiv@dividend+1,f,c
  4017  000F70  0E01               	movlw	1
  4018  000F72  1A1C               	xorwf	___awdiv@sign,f,c
  4019  000F74  D000               	goto	l5069
  4020  000F76                     l5069:
  4021  000F76  0E00               	movlw	0
  4022  000F78  6E1E               	movwf	___awdiv@quotient+1,c
  4023  000F7A  0E00               	movlw	0
  4024  000F7C  6E1D               	movwf	___awdiv@quotient,c
  4025  000F7E  5019               	movf	___awdiv@divisor,w,c
  4026  000F80  101A               	iorwf	___awdiv@divisor+1,w,c
  4027  000F82  B4D8               	btfsc	status,2,c
  4028  000F84  D021               	goto	l5091
  4029  000F86  0E01               	movlw	1
  4030  000F88  6E1B               	movwf	___awdiv@counter,c
  4031  000F8A  D005               	goto	l5077
  4032  000F8C                     l5075:
  4033  000F8C  90D8               	bcf	status,0,c
  4034  000F8E  3619               	rlcf	___awdiv@divisor,f,c
  4035  000F90  361A               	rlcf	___awdiv@divisor+1,f,c
  4036  000F92  2A1B               	incf	___awdiv@counter,f,c
  4037  000F94  D000               	goto	l5077
  4038  000F96                     l5077:
  4039  000F96  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4040  000F98  D002               	goto	l5079
  4041  000F9A  D7F8               	goto	l5075
  4042  000F9C  D000               	goto	l5079
  4043  000F9E                     l5079:
  4044  000F9E  90D8               	bcf	status,0,c
  4045  000FA0  361D               	rlcf	___awdiv@quotient,f,c
  4046  000FA2  361E               	rlcf	___awdiv@quotient+1,f,c
  4047  000FA4  5019               	movf	___awdiv@divisor,w,c
  4048  000FA6  5C17               	subwf	___awdiv@dividend,w,c
  4049  000FA8  501A               	movf	___awdiv@divisor+1,w,c
  4050  000FAA  5818               	subwfb	___awdiv@dividend+1,w,c
  4051  000FAC  A0D8               	btfss	status,0,c
  4052  000FAE  D006               	goto	l5087
  4053  000FB0  5019               	movf	___awdiv@divisor,w,c
  4054  000FB2  5E17               	subwf	___awdiv@dividend,f,c
  4055  000FB4  501A               	movf	___awdiv@divisor+1,w,c
  4056  000FB6  5A18               	subwfb	___awdiv@dividend+1,f,c
  4057  000FB8  801D               	bsf	___awdiv@quotient,0,c
  4058  000FBA  D000               	goto	l5087
  4059  000FBC                     l5087:
  4060  000FBC  90D8               	bcf	status,0,c
  4061  000FBE  321A               	rrcf	___awdiv@divisor+1,f,c
  4062  000FC0  3219               	rrcf	___awdiv@divisor,f,c
  4063  000FC2  2E1B               	decfsz	___awdiv@counter,f,c
  4064  000FC4  D7EC               	goto	l5079
  4065  000FC6  D000               	goto	l5091
  4066  000FC8                     l5091:
  4067  000FC8  501C               	movf	___awdiv@sign,w,c
  4068  000FCA  B4D8               	btfsc	status,2,c
  4069  000FCC  D005               	goto	l5095
  4070  000FCE  6C1D               	negf	___awdiv@quotient,c
  4071  000FD0  1E1E               	comf	___awdiv@quotient+1,f,c
  4072  000FD2  B0D8               	btfsc	status,0,c
  4073  000FD4  2A1E               	incf	___awdiv@quotient+1,f,c
  4074  000FD6  D000               	goto	l5095
  4075  000FD8                     l5095:
  4076  000FD8  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4077  000FDC  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4078  000FE0  D000               	goto	l884
  4079  000FE2                     l884:
  4080  000FE2  0012               	return		;funcret
  4081  000FE4                     __end_of___awdiv:
  4082                           	opt stack 0
  4083                           tblptru	equ	0xFF8
  4084                           tblptrh	equ	0xFF7
  4085                           tblptrl	equ	0xFF6
  4086                           tablat	equ	0xFF5
  4087                           prodh	equ	0xFF4
  4088                           prodl	equ	0xFF3
  4089                           intcon	equ	0xFF2
  4090                           intcon2	equ	0xFF1
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           postdec1	equ	0xFE5
  4094                           fsr1l	equ	0xFE1
  4095                           indf2	equ	0xFDF
  4096                           postinc2	equ	0xFDE
  4097                           postdec2	equ	0xFDD
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _Wait_One_Sec *****************
  4103 ;; Defined at:
  4104 ;;		line 117 in file "Lab11p1.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  k               2   16[COMRAM] int 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;		None               void
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;Total ram usage:        2 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    3
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text10
  4133  001812                     __ptext10:
  4134                           	opt stack 0
  4135  001812                     _Wait_One_Sec:
  4136                           	opt stack 27
  4137                           
  4138                           ;Lab11p1.c: 119: for (int k=0;k<17000;k++);
  4139                           
  4140                           ;incstack = 0
  4141  001812  0E00               	movlw	0
  4142  001814  6E12               	movwf	Wait_One_Sec@k+1,c
  4143  001816  0E00               	movlw	0
  4144  001818  6E11               	movwf	Wait_One_Sec@k,c
  4145  00181A                     l4803:
  4146  00181A  BE12               	btfsc	Wait_One_Sec@k+1,7,c
  4147  00181C  D008               	goto	l4807
  4148  00181E  0E68               	movlw	104
  4149  001820  5C11               	subwf	Wait_One_Sec@k,w,c
  4150  001822  0E42               	movlw	66
  4151  001824  5812               	subwfb	Wait_One_Sec@k+1,w,c
  4152  001826  B0D8               	btfsc	status,0,c
  4153  001828  D005               	goto	l367
  4154  00182A  D001               	goto	l4807
  4155  00182C  D003               	goto	l367
  4156  00182E                     l4807:
  4157  00182E  4A11               	infsnz	Wait_One_Sec@k,f,c
  4158  001830  2A12               	incf	Wait_One_Sec@k+1,f,c
  4159  001832  D7F3               	goto	l4803
  4160  001834                     l367:
  4161  001834  0012               	return		;funcret
  4162  001836                     __end_of_Wait_One_Sec:
  4163                           	opt stack 0
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           intcon2	equ	0xFF1
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           postdec1	equ	0xFE5
  4175                           fsr1l	equ	0xFE1
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _Initialize_Screen *****************
  4184 ;; Defined at:
  4185 ;;		line 234 in file "Lab11p1.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:   10
  4206 ;; This function calls:
  4207 ;;		_LCD_Reset
  4208 ;;		_TFT_GreenTab_Initialize
  4209 ;;		_drawtext
  4210 ;;		_fillScreen
  4211 ;;		_strcpy
  4212 ;; This function is called by:
  4213 ;;		_main
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text11
  4218  000FE4                     __ptext11:
  4219                           	opt stack 0
  4220  000FE4                     _Initialize_Screen:
  4221                           	opt stack 20
  4222                           
  4223                           ;Lab11p1.c: 236: LCD_Reset();
  4224                           
  4225                           ;incstack = 0
  4226  000FE4  EC91  F00C         	call	_LCD_Reset	;wreg free
  4227                           
  4228                           ;Lab11p1.c: 237: TFT_GreenTab_Initialize();
  4229  000FE8  ECE0  F00B         	call	_TFT_GreenTab_Initialize	;wreg free
  4230                           
  4231                           ;Lab11p1.c: 238: fillScreen(0x0000);
  4232  000FEC  0E00               	movlw	0
  4233  000FEE  6E25               	movwf	fillScreen@color+1,c
  4234  000FF0  0E00               	movlw	0
  4235  000FF2  6E24               	movwf	fillScreen@color,c
  4236  000FF4  EC4B  F00C         	call	_fillScreen	;wreg free
  4237                           
  4238                           ;Lab11p1.c: 241: txt = buffer;
  4239  000FF8  0E54               	movlw	low _buffer
  4240  000FFA  6E4E               	movwf	_txt,c
  4241  000FFC  0E01               	movlw	high _buffer
  4242  000FFE  6E4F               	movwf	_txt+1,c
  4243                           
  4244                           ;Lab11p1.c: 242: strcpy(txt, "ECE3301L Fall 22-S1");
  4245  001000  C04E  F011         	movff	_txt,strcpy@to
  4246  001004  C04F  F012         	movff	_txt+1,strcpy@to+1
  4247  001008  0E01               	movlw	low STR_4
  4248  00100A  6E13               	movwf	strcpy@from,c
  4249  00100C  0EFD               	movlw	high STR_4
  4250  00100E  6E14               	movwf	strcpy@from+1,c
  4251  001010  ECAF  F00B         	call	_strcpy	;wreg free
  4252                           
  4253                           ;Lab11p1.c: 243: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4254  001014  0E02               	movlw	2
  4255  001016  6E39               	movwf	drawtext@y,c
  4256  001018  C04E  F03A         	movff	_txt,drawtext@_text
  4257  00101C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4258  001020  0EFF               	movlw	255
  4259  001022  6E3D               	movwf	drawtext@color+1,c
  4260  001024  683C               	setf	drawtext@color,c
  4261  001026  0E00               	movlw	0
  4262  001028  6E3F               	movwf	drawtext@bg+1,c
  4263  00102A  0E00               	movlw	0
  4264  00102C  6E3E               	movwf	drawtext@bg,c
  4265  00102E  0E01               	movlw	1
  4266  001030  6E40               	movwf	drawtext@size,c
  4267  001032  0E02               	movlw	2
  4268  001034  EC3B  F006         	call	_drawtext
  4269                           
  4270                           ;Lab11p1.c: 245: strcpy(txt, "LAB 11 ");
  4271  001038  C04E  F011         	movff	_txt,strcpy@to
  4272  00103C  C04F  F012         	movff	_txt+1,strcpy@to+1
  4273  001040  0E26               	movlw	low STR_5
  4274  001042  6E13               	movwf	strcpy@from,c
  4275  001044  0EFD               	movlw	high STR_5
  4276  001046  6E14               	movwf	strcpy@from+1,c
  4277  001048  ECAF  F00B         	call	_strcpy	;wreg free
  4278                           
  4279                           ;Lab11p1.c: 246: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4280  00104C  0E0A               	movlw	10
  4281  00104E  6E39               	movwf	drawtext@y,c
  4282  001050  C04E  F03A         	movff	_txt,drawtext@_text
  4283  001054  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4284  001058  0EFF               	movlw	255
  4285  00105A  6E3D               	movwf	drawtext@color+1,c
  4286  00105C  683C               	setf	drawtext@color,c
  4287  00105E  0E00               	movlw	0
  4288  001060  6E3F               	movwf	drawtext@bg+1,c
  4289  001062  0E00               	movlw	0
  4290  001064  6E3E               	movwf	drawtext@bg,c
  4291  001066  0E01               	movlw	1
  4292  001068  6E40               	movwf	drawtext@size,c
  4293  00106A  0E32               	movlw	50
  4294  00106C  EC3B  F006         	call	_drawtext
  4295  001070  0012               	return		;funcret
  4296  001072                     __end_of_Initialize_Screen:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           intcon2	equ	0xFF1
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           postdec1	equ	0xFE5
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _strcpy *****************
  4318 ;; Defined at:
  4319 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  to              2   16[COMRAM] PTR unsigned char 
  4322 ;;		 -> NULL(0), buffer(31), 
  4323 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4324 ;;		 -> STR_5(8), STR_4(20), 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4327 ;;		 -> NULL(0), buffer(31), 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2   16[COMRAM] PTR unsigned char 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        6 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    3
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_Initialize_Screen
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text12
  4352  00175E                     __ptext12:
  4353                           	opt stack 0
  4354  00175E                     _strcpy:
  4355                           	opt stack 26
  4356                           
  4357                           ;incstack = 0
  4358  00175E  C011  F015         	movff	strcpy@to,strcpy@cp
  4359  001762  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4360  001766  D005               	goto	l4635
  4361  001768                     l4633:
  4362  001768  4A15               	infsnz	strcpy@cp,f,c
  4363  00176A  2A16               	incf	strcpy@cp+1,f,c
  4364  00176C  4A13               	infsnz	strcpy@from,f,c
  4365  00176E  2A14               	incf	strcpy@from+1,f,c
  4366  001770  D000               	goto	l4635
  4367  001772                     l4635:
  4368  001772  C013  FFF6         	movff	strcpy@from,tblptrl
  4369  001776  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4370  00177A                     	if	0	;tblptru may be non-zero
  4371  00177A                     	endif
  4372  00177A                     	if	0	;tblptru may be non-zero
  4373  00177A                     	endif
  4374  00177A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4375  00177E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4376  001782  0008               	tblrd		*
  4377  001784  CFF5 FFDF          	movff	tablat,indf2
  4378  001788  50DF               	movf	indf2,w,c
  4379  00178A  A4D8               	btfss	status,2,c
  4380  00178C  D7ED               	goto	l4633
  4381                           
  4382                           ;	Return value of _strcpy is never used
  4383  00178E  0012               	return		;funcret
  4384  001790                     __end_of_strcpy:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           intcon2	equ	0xFF1
  4394                           postinc0	equ	0xFEE
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _fillScreen *****************
  4406 ;; Defined at:
  4407 ;;		line 619 in file "ST7735_TFT.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  color           2   35[COMRAM] unsigned int 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        2 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    7
  4428 ;; This function calls:
  4429 ;;		_fillRectangle
  4430 ;; This function is called by:
  4431 ;;		_Initialize_Screen
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text13
  4436  001896                     __ptext13:
  4437                           	opt stack 0
  4438  001896                     _fillScreen:
  4439                           	opt stack 22
  4440                           
  4441                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4442                           
  4443                           ;incstack = 0
  4444  001896  0E00               	movlw	0
  4445  001898  6E18               	movwf	fillRectangle@y,c
  4446  00189A  0E80               	movlw	128
  4447  00189C  6E19               	movwf	fillRectangle@w,c
  4448  00189E  0EA0               	movlw	160
  4449  0018A0  6E1A               	movwf	fillRectangle@h,c
  4450  0018A2  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4451  0018A6  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4452  0018AA  0E00               	movlw	0
  4453  0018AC  EC39  F007         	call	_fillRectangle
  4454  0018B0  0012               	return		;funcret
  4455  0018B2                     __end_of_fillScreen:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           intcon	equ	0xFF2
  4464                           intcon2	equ	0xFF1
  4465                           postinc0	equ	0xFEE
  4466                           wreg	equ	0xFE8
  4467                           postdec1	equ	0xFE5
  4468                           fsr1l	equ	0xFE1
  4469                           indf2	equ	0xFDF
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _fillRectangle *****************
  4477 ;; Defined at:
  4478 ;;		line 503 in file "ST7735_TFT.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  x               1    wreg     unsigned char 
  4481 ;;  y               1   23[COMRAM] unsigned char 
  4482 ;;  w               1   24[COMRAM] unsigned char 
  4483 ;;  h               1   25[COMRAM] unsigned char 
  4484 ;;  color           2   26[COMRAM] unsigned int 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  x               1   34[COMRAM] unsigned char 
  4487 ;;  lo              1   33[COMRAM] unsigned char 
  4488 ;;  hi              1   32[COMRAM] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;		None               void
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4498 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;Total ram usage:       12 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    6
  4505 ;; This function calls:
  4506 ;;		_setAddrWindow
  4507 ;;		_spiwrite
  4508 ;; This function is called by:
  4509 ;;		_fillScreen
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text14
  4514  000E72                     __ptext14:
  4515                           	opt stack 0
  4516  000E72                     _fillRectangle:
  4517                           	opt stack 22
  4518                           
  4519                           ;incstack = 0
  4520                           ;fillRectangle@x stored from wreg
  4521  000E72  6E23               	movwf	fillRectangle@x,c
  4522                           
  4523                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4524                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4525  000E74  0E80               	movlw	128
  4526  000E76  6023               	cpfslt	fillRectangle@x,c
  4527  000E78  D069               	goto	l148
  4528  000E7A  0E9F               	movlw	159
  4529  000E7C  6418               	cpfsgt	fillRectangle@y,c
  4530  000E7E  D001               	goto	l4395
  4531                           
  4532                           ;ST7735_TFT.c: 507: return;
  4533  000E80  D065               	goto	l148
  4534  000E82                     l4395:
  4535                           
  4536                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4537  000E82  0EFF               	movlw	255
  4538  000E84  6E1D               	movwf	??_fillRectangle& (0+255),c
  4539  000E86  0EFF               	movlw	255
  4540  000E88  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4541  000E8A  5019               	movf	fillRectangle@w,w,c
  4542  000E8C  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4543  000E90  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4544  000E92  261F               	addwf	??_fillRectangle+2,f,c
  4545  000E94  0E00               	movlw	0
  4546  000E96  2220               	addwfc	??_fillRectangle+3,f,c
  4547  000E98  501D               	movf	??_fillRectangle,w,c
  4548  000E9A  261F               	addwf	??_fillRectangle+2,f,c
  4549  000E9C  501E               	movf	??_fillRectangle+1,w,c
  4550  000E9E  2220               	addwfc	??_fillRectangle+3,f,c
  4551  000EA0  BE20               	btfsc	??_fillRectangle+3,7,c
  4552  000EA2  D00A               	goto	l149
  4553  000EA4  5020               	movf	??_fillRectangle+3,w,c
  4554  000EA6  E104               	bnz	u2950
  4555  000EA8  0E80               	movlw	128
  4556  000EAA  5C1F               	subwf	??_fillRectangle+2,w,c
  4557  000EAC  A0D8               	btfss	status,0,c
  4558  000EAE  D004               	goto	l149
  4559  000EB0                     u2950:
  4560                           
  4561                           ;ST7735_TFT.c: 509: w = 128 - x;
  4562  000EB0  5023               	movf	fillRectangle@x,w,c
  4563  000EB2  0800               	sublw	0
  4564  000EB4  0F80               	addlw	128
  4565  000EB6  6E19               	movwf	fillRectangle@w,c
  4566  000EB8                     l149:
  4567                           
  4568                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4569  000EB8  0EFF               	movlw	255
  4570  000EBA  6E1D               	movwf	??_fillRectangle& (0+255),c
  4571  000EBC  0EFF               	movlw	255
  4572  000EBE  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4573  000EC0  501A               	movf	fillRectangle@h,w,c
  4574  000EC2  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4575  000EC6  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4576  000EC8  261F               	addwf	??_fillRectangle+2,f,c
  4577  000ECA  0E00               	movlw	0
  4578  000ECC  2220               	addwfc	??_fillRectangle+3,f,c
  4579  000ECE  501D               	movf	??_fillRectangle,w,c
  4580  000ED0  261F               	addwf	??_fillRectangle+2,f,c
  4581  000ED2  501E               	movf	??_fillRectangle+1,w,c
  4582  000ED4  2220               	addwfc	??_fillRectangle+3,f,c
  4583  000ED6  BE20               	btfsc	??_fillRectangle+3,7,c
  4584  000ED8  D00B               	goto	l4401
  4585  000EDA  5020               	movf	??_fillRectangle+3,w,c
  4586  000EDC  E104               	bnz	u2960
  4587  000EDE  0EA0               	movlw	160
  4588  000EE0  5C1F               	subwf	??_fillRectangle+2,w,c
  4589  000EE2  A0D8               	btfss	status,0,c
  4590  000EE4  D005               	goto	l4401
  4591  000EE6                     u2960:
  4592                           
  4593                           ;ST7735_TFT.c: 511: h = 160 - y;
  4594  000EE6  5018               	movf	fillRectangle@y,w,c
  4595  000EE8  0800               	sublw	0
  4596  000EEA  0FA0               	addlw	160
  4597  000EEC  6E1A               	movwf	fillRectangle@h,c
  4598  000EEE  D000               	goto	l4401
  4599  000EF0                     l4401:
  4600                           
  4601                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4602  000EF0  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4603  000EF4  5023               	movf	fillRectangle@x,w,c
  4604  000EF6  2419               	addwf	fillRectangle@w,w,c
  4605  000EF8  6E1D               	movwf	??_fillRectangle& (0+255),c
  4606  000EFA  041D               	decf	??_fillRectangle,w,c
  4607  000EFC  6E15               	movwf	setAddrWindow@x1,c
  4608  000EFE  5018               	movf	fillRectangle@y,w,c
  4609  000F00  241A               	addwf	fillRectangle@h,w,c
  4610  000F02  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4611  000F04  041E               	decf	??_fillRectangle+1,w,c
  4612  000F06  6E16               	movwf	setAddrWindow@y1,c
  4613  000F08  5023               	movf	fillRectangle@x,w,c
  4614  000F0A  EC7E  F00A         	call	_setAddrWindow
  4615                           
  4616                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4617  000F0E  501C               	movf	fillRectangle@color+1,w,c
  4618  000F10  6E21               	movwf	fillRectangle@hi,c
  4619  000F12  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4620                           
  4621                           ;ST7735_TFT.c: 514: PORTCbits.RC2 = 1;
  4622  000F16  8482               	bsf	3970,2,c	;volatile
  4623                           
  4624                           ;ST7735_TFT.c: 515: PORTCbits.RC4 = 0;
  4625  000F18  9882               	bcf	3970,4,c	;volatile
  4626                           
  4627                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4628  000F1A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4629  000F1E                     l4413:
  4630  000F1E  5018               	movf	fillRectangle@y,w,c
  4631  000F20  B4D8               	btfsc	status,2,c
  4632  000F22  D013               	goto	l152
  4633  000F24  D001               	goto	l151
  4634  000F26  D011               	goto	l152
  4635  000F28                     l151:
  4636                           
  4637                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4638  000F28  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4639  000F2C                     l4417:
  4640  000F2C  5023               	movf	fillRectangle@x,w,c
  4641  000F2E  B4D8               	btfsc	status,2,c
  4642  000F30  D00A               	goto	l4427
  4643  000F32  D001               	goto	l4421
  4644  000F34  D008               	goto	l4427
  4645  000F36                     l4421:
  4646                           
  4647                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4648  000F36  5021               	movf	fillRectangle@hi,w,c
  4649  000F38  EC7D  F00C         	call	_spiwrite
  4650                           
  4651                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4652  000F3C  5022               	movf	fillRectangle@lo,w,c
  4653  000F3E  EC7D  F00C         	call	_spiwrite
  4654  000F42  0623               	decf	fillRectangle@x,f,c
  4655  000F44  D7F3               	goto	l4417
  4656  000F46                     l4427:
  4657  000F46  0618               	decf	fillRectangle@y,f,c
  4658  000F48  D7EA               	goto	l4413
  4659  000F4A                     l152:
  4660                           
  4661                           ;ST7735_TFT.c: 521: }
  4662                           ;ST7735_TFT.c: 522: }
  4663                           ;ST7735_TFT.c: 523: PORTCbits.RC4 = 1;
  4664  000F4A  8882               	bsf	3970,4,c	;volatile
  4665  000F4C                     l148:
  4666  000F4C  0012               	return		;funcret
  4667  000F4E                     __end_of_fillRectangle:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           intcon2	equ	0xFF1
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postdec1	equ	0xFE5
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _drawtext *****************
  4689 ;; Defined at:
  4690 ;;		line 474 in file "ST7735_TFT.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  x               1    wreg     unsigned char 
  4693 ;;  y               1   56[COMRAM] unsigned char 
  4694 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4695 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4696 ;;  color           2   59[COMRAM] unsigned int 
  4697 ;;  bg              2   61[COMRAM] unsigned int 
  4698 ;;  size            1   63[COMRAM] unsigned char 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  x               1    0[BANK1 ] unsigned char 
  4701 ;;  i               2    3[BANK1 ] unsigned int 
  4702 ;;  textsize        2    1[BANK1 ] unsigned int 
  4703 ;;  cursor_x        1    6[BANK1 ] unsigned char 
  4704 ;;  cursor_y        1    5[BANK1 ] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;		None               void
  4707 ;; Registers used:
  4708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:       17 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    9
  4721 ;; This function calls:
  4722 ;;		_drawChar
  4723 ;;		_strlen
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;;		_Initialize_Screen
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text15
  4731  000C76                     __ptext15:
  4732                           	opt stack 0
  4733  000C76                     _drawtext:
  4734                           	opt stack 21
  4735                           
  4736                           ;incstack = 0
  4737                           ;drawtext@x stored from wreg
  4738  000C76  0101               	movlb	1	; () banked
  4739  000C78  6F73               	movwf	drawtext@x& (0+255),b
  4740                           
  4741                           ; BSR set to: 1
  4742                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4743                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4744                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4745  000C7A  C173  F179         	movff	drawtext@x,drawtext@cursor_x
  4746                           
  4747                           ; BSR set to: 1
  4748  000C7E  C039  F178         	movff	drawtext@y,drawtext@cursor_y
  4749                           
  4750                           ; BSR set to: 1
  4751                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4752  000C82  C03A  F011         	movff	drawtext@_text,strlen@s
  4753  000C86  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4754  000C8A  EC34  F00B         	call	_strlen	;wreg free
  4755  000C8E  C011  F174         	movff	?_strlen,drawtext@textsize
  4756  000C92  C012  F175         	movff	?_strlen+1,drawtext@textsize+1
  4757                           
  4758                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4759  000C96  0E00               	movlw	0
  4760  000C98  0101               	movlb	1	; () banked
  4761  000C9A  6F77               	movwf	(drawtext@i+1)& (0+255),b
  4762  000C9C  0E00               	movlw	0
  4763  000C9E  6F76               	movwf	drawtext@i& (0+255),b
  4764  000CA0  D064               	goto	l4549
  4765  000CA2                     l4523:
  4766                           
  4767                           ; BSR set to: 1
  4768                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4769  000CA2  506E               	movf	_wrap,w,c
  4770  000CA4  B4D8               	btfsc	status,2,c
  4771  000CA6  D034               	goto	l4539
  4772                           
  4773                           ; BSR set to: 1
  4774  000CA8  5040               	movf	drawtext@size,w,c
  4775  000CAA  0D05               	mullw	5
  4776  000CAC  0101               	movlb	1	; () banked
  4777  000CAE  5179               	movf	drawtext@cursor_x& (0+255),w,b
  4778  000CB0  6E41               	movwf	??_drawtext& (0+255),c
  4779  000CB2  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4780  000CB4  50F3               	movf	prodl,w,c
  4781  000CB6  2641               	addwf	??_drawtext,f,c
  4782  000CB8  50F4               	movf	prodh,w,c
  4783  000CBA  2242               	addwfc	??_drawtext+1,f,c
  4784  000CBC  BE42               	btfsc	??_drawtext+1,7,c
  4785  000CBE  D028               	goto	l4539
  4786  000CC0  5042               	movf	??_drawtext+1,w,c
  4787  000CC2  E104               	bnz	u3120
  4788  000CC4  0E81               	movlw	129
  4789  000CC6  5C41               	subwf	??_drawtext,w,c
  4790  000CC8  A0D8               	btfss	status,0,c
  4791  000CCA  D022               	goto	l4539
  4792  000CCC                     u3120:
  4793                           
  4794                           ; BSR set to: 1
  4795                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4796  000CCC  0E00               	movlw	0
  4797  000CCE  0101               	movlb	1	; () banked
  4798  000CD0  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4799                           
  4800                           ; BSR set to: 1
  4801                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4802  000CD2  5040               	movf	drawtext@size,w,c
  4803  000CD4  0D07               	mullw	7
  4804  000CD6  50F3               	movf	prodl,w,c
  4805  000CD8  0101               	movlb	1	; () banked
  4806  000CDA  2578               	addwf	drawtext@cursor_y& (0+255),w,b
  4807  000CDC  0F03               	addlw	3
  4808  000CDE  0101               	movlb	1	; () banked
  4809  000CE0  6F78               	movwf	drawtext@cursor_y& (0+255),b
  4810                           
  4811                           ; BSR set to: 1
  4812                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4813  000CE2  0EA0               	movlw	160
  4814  000CE4  0101               	movlb	1	; () banked
  4815  000CE6  6578               	cpfsgt	drawtext@cursor_y& (0+255),b
  4816  000CE8  D004               	goto	l4535
  4817                           
  4818                           ; BSR set to: 1
  4819  000CEA  0EA0               	movlw	160
  4820  000CEC  0101               	movlb	1	; () banked
  4821  000CEE  6F78               	movwf	drawtext@cursor_y& (0+255),b
  4822  000CF0  D000               	goto	l4535
  4823  000CF2                     l4535:
  4824                           
  4825                           ; BSR set to: 1
  4826                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4827  000CF2  0101               	movlb	1	; () banked
  4828  000CF4  5176               	movf	drawtext@i& (0+255),w,b
  4829  000CF6  243A               	addwf	drawtext@_text,w,c
  4830  000CF8  6ED9               	movwf	fsr2l,c
  4831  000CFA  0101               	movlb	1	; () banked
  4832  000CFC  5177               	movf	(drawtext@i+1)& (0+255),w,b
  4833  000CFE  203B               	addwfc	drawtext@_text+1,w,c
  4834  000D00  6EDA               	movwf	fsr2h,c
  4835  000D02  0E20               	movlw	32
  4836  000D04  18DE               	xorwf	postinc2,w,c
  4837  000D06  B4D8               	btfsc	status,2,c
  4838  000D08  D02C               	goto	l4547
  4839  000D0A  D002               	goto	l4539
  4840                           
  4841                           ; BSR set to: 1
  4842  000D0C  D02A               	goto	l4547
  4843                           
  4844                           ; BSR set to: 1
  4845  000D0E  D000               	goto	l4539
  4846  000D10                     l4539:
  4847                           
  4848                           ; BSR set to: 1
  4849                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4850  000D10  C178  F02E         	movff	drawtext@cursor_y,drawChar@y
  4851  000D14  0101               	movlb	1	; () banked
  4852  000D16  5176               	movf	drawtext@i& (0+255),w,b
  4853  000D18  243A               	addwf	drawtext@_text,w,c
  4854  000D1A  6ED9               	movwf	fsr2l,c
  4855  000D1C  0101               	movlb	1	; () banked
  4856  000D1E  5177               	movf	(drawtext@i+1)& (0+255),w,b
  4857  000D20  203B               	addwfc	drawtext@_text+1,w,c
  4858  000D22  6EDA               	movwf	fsr2h,c
  4859  000D24  50DF               	movf	indf2,w,c
  4860  000D26  6E2F               	movwf	drawChar@c,c
  4861  000D28  C03C  F030         	movff	drawtext@color,drawChar@color
  4862  000D2C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4863  000D30  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4864  000D34  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4865  000D38  C040  F034         	movff	drawtext@size,drawChar@size
  4866  000D3C  0101               	movlb	1	; () banked
  4867  000D3E  5179               	movf	drawtext@cursor_x& (0+255),w,b
  4868  000D40  EC6C  F004         	call	_drawChar
  4869                           
  4870                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4871  000D44  5040               	movf	drawtext@size,w,c
  4872  000D46  0D06               	mullw	6
  4873  000D48  50F3               	movf	prodl,w,c
  4874  000D4A  0101               	movlb	1	; () banked
  4875  000D4C  2579               	addwf	drawtext@cursor_x& (0+255),w,b
  4876  000D4E  0101               	movlb	1	; () banked
  4877  000D50  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4878                           
  4879                           ; BSR set to: 1
  4880                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4881  000D52  0E80               	movlw	128
  4882  000D54  0101               	movlb	1	; () banked
  4883  000D56  6579               	cpfsgt	drawtext@cursor_x& (0+255),b
  4884  000D58  D004               	goto	l4547
  4885                           
  4886                           ; BSR set to: 1
  4887  000D5A  0E80               	movlw	128
  4888  000D5C  0101               	movlb	1	; () banked
  4889  000D5E  6F79               	movwf	drawtext@cursor_x& (0+255),b
  4890                           
  4891                           ; BSR set to: 1
  4892  000D60  D000               	goto	l4547
  4893  000D62                     l4547:
  4894                           
  4895                           ; BSR set to: 1
  4896  000D62  0101               	movlb	1	; () banked
  4897  000D64  4B76               	infsnz	drawtext@i& (0+255),f,b
  4898  000D66  2B77               	incf	(drawtext@i+1)& (0+255),f,b
  4899  000D68  D000               	goto	l4549
  4900  000D6A                     l4549:
  4901                           
  4902                           ; BSR set to: 1
  4903  000D6A  0101               	movlb	1	; () banked
  4904  000D6C  5174               	movf	drawtext@textsize& (0+255),w,b
  4905  000D6E  0101               	movlb	1	; () banked
  4906  000D70  5D76               	subwf	drawtext@i& (0+255),w,b
  4907  000D72  0101               	movlb	1	; () banked
  4908  000D74  5175               	movf	(drawtext@textsize+1)& (0+255),w,b
  4909  000D76  0101               	movlb	1	; () banked
  4910  000D78  5977               	subwfb	(drawtext@i+1)& (0+255),w,b
  4911  000D7A  A0D8               	btfss	status,0,c
  4912  000D7C  D792               	goto	l4523
  4913                           
  4914                           ; BSR set to: 1
  4915                           
  4916                           ; BSR set to: 1
  4917  000D7E  0012               	return		;funcret
  4918  000D80                     __end_of_drawtext:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           intcon	equ	0xFF2
  4927                           intcon2	equ	0xFF1
  4928                           postinc0	equ	0xFEE
  4929                           wreg	equ	0xFE8
  4930                           postdec1	equ	0xFE5
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           postdec2	equ	0xFDD
  4935                           fsr2h	equ	0xFDA
  4936                           fsr2l	equ	0xFD9
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _strlen *****************
  4940 ;; Defined at:
  4941 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4944 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4947 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  2   16[COMRAM] unsigned int 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4957 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;Total ram usage:        6 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    3
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_drawtext
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text16
  4972  001668                     __ptext16:
  4973                           	opt stack 0
  4974  001668                     _strlen:
  4975                           	opt stack 26
  4976                           
  4977                           ; BSR set to: 1
  4978                           ;incstack = 0
  4979  001668  C011  F015         	movff	strlen@s,strlen@cp
  4980  00166C  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4981  001670  D003               	goto	l4385
  4982  001672                     l4383:
  4983  001672  4A15               	infsnz	strlen@cp,f,c
  4984  001674  2A16               	incf	strlen@cp+1,f,c
  4985  001676  D000               	goto	l4385
  4986  001678                     l4385:
  4987  001678  C015  FFD9         	movff	strlen@cp,fsr2l
  4988  00167C  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4989  001680  50DF               	movf	indf2,w,c
  4990  001682  A4D8               	btfss	status,2,c
  4991  001684  D7F6               	goto	l4383
  4992  001686  C011  F013         	movff	strlen@s,??_strlen
  4993  00168A  C012  F014         	movff	strlen@s+1,??_strlen+1
  4994  00168E  1E13               	comf	??_strlen,f,c
  4995  001690  1E14               	comf	??_strlen+1,f,c
  4996  001692  4A13               	infsnz	??_strlen,f,c
  4997  001694  2A14               	incf	??_strlen+1,f,c
  4998  001696  5015               	movf	strlen@cp,w,c
  4999  001698  2413               	addwf	??_strlen,w,c
  5000  00169A  6E11               	movwf	?_strlen,c
  5001  00169C  5016               	movf	strlen@cp+1,w,c
  5002  00169E  2014               	addwfc	??_strlen+1,w,c
  5003  0016A0  6E12               	movwf	?_strlen+1,c
  5004  0016A2  D000               	goto	l1253
  5005  0016A4                     l1253:
  5006  0016A4  0012               	return		;funcret
  5007  0016A6                     __end_of_strlen:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           intcon	equ	0xFF2
  5016                           intcon2	equ	0xFF1
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _drawChar *****************
  5029 ;; Defined at:
  5030 ;;		line 447 in file "ST7735_TFT.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  x               1    wreg     unsigned char 
  5033 ;;  y               1   45[COMRAM] unsigned char 
  5034 ;;  c               1   46[COMRAM] unsigned char 
  5035 ;;  color           2   47[COMRAM] unsigned int 
  5036 ;;  bg              2   49[COMRAM] unsigned int 
  5037 ;;  size            1   51[COMRAM] unsigned char 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  x               1   53[COMRAM] unsigned char 
  5040 ;;  line            1   52[COMRAM] unsigned char 
  5041 ;;  i               1   55[COMRAM] unsigned char 
  5042 ;;  j               1   54[COMRAM] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;		None               void
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5052 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;Total ram usage:       11 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    8
  5059 ;; This function calls:
  5060 ;;		___wmul
  5061 ;;		_drawPixel
  5062 ;;		_fillRect
  5063 ;; This function is called by:
  5064 ;;		_drawtext
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text17
  5069  0008D8                     __ptext17:
  5070                           	opt stack 0
  5071  0008D8                     _drawChar:
  5072                           	opt stack 21
  5073                           
  5074                           ;incstack = 0
  5075                           ;drawChar@x stored from wreg
  5076  0008D8  6E36               	movwf	drawChar@x,c
  5077                           
  5078                           ;ST7735_TFT.c: 449: char i, j;
  5079                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5080  0008DA  0E80               	movlw	128
  5081  0008DC  6036               	cpfslt	drawChar@x,c
  5082  0008DE  D0A6               	goto	l111
  5083  0008E0  0E9F               	movlw	159
  5084  0008E2  642E               	cpfsgt	drawChar@y,c
  5085  0008E4  D001               	goto	l4331
  5086                           
  5087                           ;ST7735_TFT.c: 451: return;
  5088  0008E6  D0A2               	goto	l111
  5089  0008E8                     l4331:
  5090                           
  5091                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5092  0008E8  5034               	movf	drawChar@size,w,c
  5093  0008EA  A4D8               	btfss	status,2,c
  5094  0008EC  D003               	goto	l4335
  5095  0008EE  0E01               	movlw	1
  5096  0008F0  6E34               	movwf	drawChar@size,c
  5097  0008F2  D000               	goto	l4335
  5098  0008F4                     l4335:
  5099                           
  5100                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5101  0008F4  0E1F               	movlw	31
  5102  0008F6  642F               	cpfsgt	drawChar@c,c
  5103  0008F8  D004               	goto	l4339
  5104  0008FA  0E7E               	movlw	126
  5105  0008FC  642F               	cpfsgt	drawChar@c,c
  5106  0008FE  D003               	goto	l113
  5107  000900  D000               	goto	l4339
  5108  000902                     l4339:
  5109                           
  5110                           ;ST7735_TFT.c: 454: c = '?';
  5111  000902  0E3F               	movlw	63
  5112  000904  6E2F               	movwf	drawChar@c,c
  5113  000906                     l113:
  5114                           
  5115                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5116  000906  0E00               	movlw	0
  5117  000908  6E38               	movwf	drawChar@i,c
  5118  00090A                     l4341:
  5119  00090A  0E04               	movlw	4
  5120  00090C  6438               	cpfsgt	drawChar@i,c
  5121  00090E  D001               	goto	l4345
  5122  000910  D08D               	goto	l111
  5123  000912                     l4345:
  5124                           
  5125                           ;ST7735_TFT.c: 456: unsigned char line;
  5126                           ;ST7735_TFT.c: 457: if(c < 'S')
  5127  000912  0E53               	movlw	83
  5128  000914  602F               	cpfslt	drawChar@c,c
  5129  000916  D015               	goto	l4349
  5130                           
  5131                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5132  000918  0EE0               	movlw	224
  5133  00091A  242F               	addwf	drawChar@c,w,c
  5134  00091C  6E11               	movwf	___wmul@multiplier,c
  5135  00091E  6A12               	clrf	___wmul@multiplier+1,c
  5136  000920  0EFF               	movlw	255
  5137  000922  2212               	addwfc	___wmul@multiplier+1,f,c
  5138  000924  0E00               	movlw	0
  5139  000926  6E14               	movwf	___wmul@multiplicand+1,c
  5140  000928  0E05               	movlw	5
  5141  00092A  6E13               	movwf	___wmul@multiplicand,c
  5142  00092C  ECF5  F00B         	call	___wmul	;wreg free
  5143  000930  5038               	movf	drawChar@i,w,c
  5144  000932  2611               	addwf	?___wmul,f,c
  5145  000934  0E00               	movlw	0
  5146  000936  2212               	addwfc	?___wmul+1,f,c
  5147  000938  0E87               	movlw	low _font
  5148  00093A  2411               	addwf	?___wmul,w,c
  5149  00093C  6EF6               	movwf	tblptrl,c
  5150  00093E  0EFA               	movlw	high _font
  5151  000940  D014               	goto	L1
  5152  000942                     l4349:
  5153                           
  5154                           ;ST7735_TFT.c: 459: else
  5155                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5156  000942  0EAD               	movlw	173
  5157  000944  242F               	addwf	drawChar@c,w,c
  5158  000946  6E11               	movwf	___wmul@multiplier,c
  5159  000948  6A12               	clrf	___wmul@multiplier+1,c
  5160  00094A  0EFF               	movlw	255
  5161  00094C  2212               	addwfc	___wmul@multiplier+1,f,c
  5162  00094E  0E00               	movlw	0
  5163  000950  6E14               	movwf	___wmul@multiplicand+1,c
  5164  000952  0E05               	movlw	5
  5165  000954  6E13               	movwf	___wmul@multiplicand,c
  5166  000956  ECF5  F00B         	call	___wmul	;wreg free
  5167  00095A  5038               	movf	drawChar@i,w,c
  5168  00095C  2611               	addwf	?___wmul,f,c
  5169  00095E  0E00               	movlw	0
  5170  000960  2212               	addwfc	?___wmul+1,f,c
  5171  000962  0E86               	movlw	low _font2
  5172  000964  2411               	addwf	?___wmul,w,c
  5173  000966  6EF6               	movwf	tblptrl,c
  5174  000968  0EFB               	movlw	high _font2
  5175  00096A                     L1:
  5176  00096A  2012               	addwfc	?___wmul+1,w,c
  5177  00096C  6EF7               	movwf	tblptrh,c
  5178  00096E                     	if	0	;There are less than 3 active tblptr bytes
  5179  00096E                     	endif
  5180  00096E  0008               	tblrd		*
  5181  000970  CFF5 F035          	movff	tablat,drawChar@line
  5182  000974  D000               	goto	l4351
  5183  000976                     l4351:
  5184                           
  5185                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5186  000976  0E00               	movlw	0
  5187  000978  6E37               	movwf	drawChar@j,c
  5188  00097A                     l4353:
  5189  00097A  0E06               	movlw	6
  5190  00097C  6437               	cpfsgt	drawChar@j,c
  5191  00097E  D001               	goto	l120
  5192  000980  D053               	goto	l4377
  5193  000982                     l120:
  5194                           
  5195                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5196  000982  A035               	btfss	drawChar@line,0,c
  5197  000984  D023               	goto	l4363
  5198                           
  5199                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5200  000986  0434               	decf	drawChar@size,w,c
  5201  000988  A4D8               	btfss	status,2,c
  5202  00098A  D00C               	goto	l4361
  5203  00098C  502E               	movf	drawChar@y,w,c
  5204  00098E  2437               	addwf	drawChar@j,w,c
  5205  000990  6E18               	movwf	drawPixel@y,c
  5206  000992  C030  F019         	movff	drawChar@color,drawPixel@color
  5207  000996  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5208  00099A  5036               	movf	drawChar@x,w,c
  5209  00099C  2438               	addwf	drawChar@i,w,c
  5210  00099E  ECC8  F00B         	call	_drawPixel
  5211  0009A2  D03E               	goto	l4371
  5212  0009A4                     l4361:
  5213                           
  5214                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5215  0009A4  5037               	movf	drawChar@j,w,c
  5216  0009A6  0234               	mulwf	drawChar@size,c
  5217  0009A8  50F3               	movf	prodl,w,c
  5218  0009AA  242E               	addwf	drawChar@y,w,c
  5219  0009AC  6E23               	movwf	fillRect@y,c
  5220  0009AE  C034  F024         	movff	drawChar@size,fillRect@w
  5221  0009B2  C034  F025         	movff	drawChar@size,fillRect@h
  5222  0009B6  C030  F026         	movff	drawChar@color,fillRect@color
  5223  0009BA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5224  0009BE  5038               	movf	drawChar@i,w,c
  5225  0009C0  0234               	mulwf	drawChar@size,c
  5226  0009C2  50F3               	movf	prodl,w,c
  5227  0009C4  2436               	addwf	drawChar@x,w,c
  5228  0009C6  ECCB  F00A         	call	_fillRect
  5229                           
  5230                           ;ST7735_TFT.c: 465: }
  5231  0009CA  D02A               	goto	l4371
  5232  0009CC                     l4363:
  5233                           
  5234                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5235  0009CC  5030               	movf	drawChar@color,w,c
  5236  0009CE  1832               	xorwf	drawChar@bg,w,c
  5237  0009D0  E104               	bnz	u2880
  5238  0009D2  5031               	movf	drawChar@color+1,w,c
  5239  0009D4  1833               	xorwf	drawChar@bg+1,w,c
  5240  0009D6  B4D8               	btfsc	status,2,c
  5241  0009D8  D023               	goto	l4371
  5242  0009DA                     u2880:
  5243                           
  5244                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5245  0009DA  0434               	decf	drawChar@size,w,c
  5246  0009DC  A4D8               	btfss	status,2,c
  5247  0009DE  D00C               	goto	l4369
  5248  0009E0  502E               	movf	drawChar@y,w,c
  5249  0009E2  2437               	addwf	drawChar@j,w,c
  5250  0009E4  6E18               	movwf	drawPixel@y,c
  5251  0009E6  C032  F019         	movff	drawChar@bg,drawPixel@color
  5252  0009EA  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5253  0009EE  5036               	movf	drawChar@x,w,c
  5254  0009F0  2438               	addwf	drawChar@i,w,c
  5255  0009F2  ECC8  F00B         	call	_drawPixel
  5256  0009F6  D014               	goto	l4371
  5257  0009F8                     l4369:
  5258                           
  5259                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5260  0009F8  5037               	movf	drawChar@j,w,c
  5261  0009FA  0234               	mulwf	drawChar@size,c
  5262  0009FC  50F3               	movf	prodl,w,c
  5263  0009FE  242E               	addwf	drawChar@y,w,c
  5264  000A00  6E23               	movwf	fillRect@y,c
  5265  000A02  C034  F024         	movff	drawChar@size,fillRect@w
  5266  000A06  C034  F025         	movff	drawChar@size,fillRect@h
  5267  000A0A  C032  F026         	movff	drawChar@bg,fillRect@color
  5268  000A0E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5269  000A12  5038               	movf	drawChar@i,w,c
  5270  000A14  0234               	mulwf	drawChar@size,c
  5271  000A16  50F3               	movf	prodl,w,c
  5272  000A18  2436               	addwf	drawChar@x,w,c
  5273  000A1A  ECCB  F00A         	call	_fillRect
  5274  000A1E  D000               	goto	l4371
  5275  000A20                     l4371:
  5276  000A20  2A37               	incf	drawChar@j,f,c
  5277  000A22  90D8               	bcf	status,0,c
  5278  000A24  3235               	rrcf	drawChar@line,f,c
  5279  000A26  D7A9               	goto	l4353
  5280  000A28                     l4377:
  5281  000A28  2A38               	incf	drawChar@i,f,c
  5282  000A2A  D76F               	goto	l4341
  5283  000A2C                     l111:
  5284  000A2C  0012               	return		;funcret
  5285  000A2E                     __end_of_drawChar:
  5286                           	opt stack 0
  5287                           tblptru	equ	0xFF8
  5288                           tblptrh	equ	0xFF7
  5289                           tblptrl	equ	0xFF6
  5290                           tablat	equ	0xFF5
  5291                           prodh	equ	0xFF4
  5292                           prodl	equ	0xFF3
  5293                           intcon	equ	0xFF2
  5294                           intcon2	equ	0xFF1
  5295                           postinc0	equ	0xFEE
  5296                           wreg	equ	0xFE8
  5297                           postdec1	equ	0xFE5
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _fillRect *****************
  5307 ;; Defined at:
  5308 ;;		line 437 in file "ST7735_TFT.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  x               1    wreg     unsigned char 
  5311 ;;  y               1   34[COMRAM] unsigned char 
  5312 ;;  w               1   35[COMRAM] unsigned char 
  5313 ;;  h               1   36[COMRAM] unsigned char 
  5314 ;;  color           2   37[COMRAM] unsigned int 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;  x               1   42[COMRAM] unsigned char 
  5317 ;;  i               2   43[COMRAM] int 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:       11 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    7
  5334 ;; This function calls:
  5335 ;;		_drawFastVLine
  5336 ;; This function is called by:
  5337 ;;		_drawChar
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	text18
  5342  001596                     __ptext18:
  5343                           	opt stack 0
  5344  001596                     _fillRect:
  5345                           	opt stack 21
  5346                           
  5347                           ;incstack = 0
  5348                           ;fillRect@x stored from wreg
  5349  001596  6E2B               	movwf	fillRect@x,c
  5350                           
  5351                           ;ST7735_TFT.c: 439: signed int i;
  5352                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5353  001598  C02B  F02C         	movff	fillRect@x,fillRect@i
  5354  00159C  6A2D               	clrf	fillRect@i+1,c
  5355  00159E  D00E               	goto	l4193
  5356  0015A0                     l4189:
  5357                           
  5358                           ;ST7735_TFT.c: 442: {
  5359                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5360  0015A0  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5361  0015A4  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5362  0015A8  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5363  0015AC  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5364  0015B0  502C               	movf	fillRect@i,w,c
  5365  0015B2  EC39  F008         	call	_drawFastVLine
  5366  0015B6  4A2C               	infsnz	fillRect@i,f,c
  5367  0015B8  2A2D               	incf	fillRect@i+1,f,c
  5368  0015BA  D000               	goto	l4193
  5369  0015BC                     l4193:
  5370  0015BC  5024               	movf	fillRect@w,w,c
  5371  0015BE  C02B  F028         	movff	fillRect@x,??_fillRect
  5372  0015C2  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5373  0015C4  2628               	addwf	??_fillRect,f,c
  5374  0015C6  0E00               	movlw	0
  5375  0015C8  2229               	addwfc	??_fillRect+1,f,c
  5376  0015CA  5028               	movf	??_fillRect,w,c
  5377  0015CC  5C2C               	subwf	fillRect@i,w,c
  5378  0015CE  502D               	movf	fillRect@i+1,w,c
  5379  0015D0  0A80               	xorlw	128
  5380  0015D2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5381  0015D4  5029               	movf	??_fillRect+1,w,c
  5382  0015D6  0A80               	xorlw	128
  5383  0015D8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5384  0015DA  A0D8               	btfss	status,0,c
  5385  0015DC  D7E1               	goto	l4189
  5386  0015DE  0012               	return		;funcret
  5387  0015E0                     __end_of_fillRect:
  5388                           	opt stack 0
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           intcon2	equ	0xFF1
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1l	equ	0xFE1
  5401                           indf2	equ	0xFDF
  5402                           postinc2	equ	0xFDE
  5403                           postdec2	equ	0xFDD
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function _drawFastVLine *****************
  5409 ;; Defined at:
  5410 ;;		line 416 in file "ST7735_TFT.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  x               1    wreg     unsigned char 
  5413 ;;  y               1   23[COMRAM] unsigned char 
  5414 ;;  h               1   24[COMRAM] unsigned char 
  5415 ;;  color           2   25[COMRAM] unsigned int 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  x               1   33[COMRAM] unsigned char 
  5418 ;;  lo              1   32[COMRAM] unsigned char 
  5419 ;;  hi              1   31[COMRAM] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;		None               void
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;Total ram usage:       11 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    6
  5436 ;; This function calls:
  5437 ;;		_setAddrWindow
  5438 ;;		_spiwrite
  5439 ;; This function is called by:
  5440 ;;		_fillRect
  5441 ;;		_fillCircleHelper
  5442 ;;		_fillCircle
  5443 ;;		_drawRect
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text19
  5448  001072                     __ptext19:
  5449                           	opt stack 0
  5450  001072                     _drawFastVLine:
  5451                           	opt stack 22
  5452                           
  5453                           ;incstack = 0
  5454                           ;drawFastVLine@x stored from wreg
  5455  001072  6E22               	movwf	drawFastVLine@x,c
  5456                           
  5457                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5458                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5459  001074  0E80               	movlw	128
  5460  001076  6022               	cpfslt	drawFastVLine@x,c
  5461  001078  D03F               	goto	l95
  5462  00107A  0E9F               	movlw	159
  5463  00107C  6418               	cpfsgt	drawFastVLine@y,c
  5464  00107E  D001               	goto	l4129
  5465                           
  5466                           ;ST7735_TFT.c: 420: return;
  5467  001080  D03B               	goto	l95
  5468  001082                     l4129:
  5469                           
  5470                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5471  001082  0EFF               	movlw	255
  5472  001084  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5473  001086  0EFF               	movlw	255
  5474  001088  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5475  00108A  5019               	movf	drawFastVLine@h,w,c
  5476  00108C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5477  001090  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5478  001092  261E               	addwf	??_drawFastVLine+2,f,c
  5479  001094  0E00               	movlw	0
  5480  001096  221F               	addwfc	??_drawFastVLine+3,f,c
  5481  001098  501C               	movf	??_drawFastVLine,w,c
  5482  00109A  261E               	addwf	??_drawFastVLine+2,f,c
  5483  00109C  501D               	movf	??_drawFastVLine+1,w,c
  5484  00109E  221F               	addwfc	??_drawFastVLine+3,f,c
  5485  0010A0  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5486  0010A2  D00B               	goto	l4133
  5487  0010A4  501F               	movf	??_drawFastVLine+3,w,c
  5488  0010A6  E104               	bnz	u2690
  5489  0010A8  0EA0               	movlw	160
  5490  0010AA  5C1E               	subwf	??_drawFastVLine+2,w,c
  5491  0010AC  A0D8               	btfss	status,0,c
  5492  0010AE  D005               	goto	l4133
  5493  0010B0                     u2690:
  5494                           
  5495                           ;ST7735_TFT.c: 422: h = 160 - y;
  5496  0010B0  5018               	movf	drawFastVLine@y,w,c
  5497  0010B2  0800               	sublw	0
  5498  0010B4  0FA0               	addlw	160
  5499  0010B6  6E19               	movwf	drawFastVLine@h,c
  5500  0010B8  D000               	goto	l4133
  5501  0010BA                     l4133:
  5502                           
  5503                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5504  0010BA  501B               	movf	drawFastVLine@color+1,w,c
  5505  0010BC  6E20               	movwf	drawFastVLine@hi,c
  5506  0010BE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5507                           
  5508                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5509  0010C2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5510  0010C6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5511  0010CA  5018               	movf	drawFastVLine@y,w,c
  5512  0010CC  2419               	addwf	drawFastVLine@h,w,c
  5513  0010CE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5514  0010D0  041C               	decf	??_drawFastVLine,w,c
  5515  0010D2  6E16               	movwf	setAddrWindow@y1,c
  5516  0010D4  5022               	movf	drawFastVLine@x,w,c
  5517  0010D6  EC7E  F00A         	call	_setAddrWindow
  5518                           
  5519                           ;ST7735_TFT.c: 425: PORTCbits.RC2 = 1;
  5520  0010DA  8482               	bsf	3970,2,c	;volatile
  5521                           
  5522                           ;ST7735_TFT.c: 426: PORTCbits.RC4 = 0;
  5523  0010DC  9882               	bcf	3970,4,c	;volatile
  5524                           
  5525                           ;ST7735_TFT.c: 428: while (h--) {
  5526  0010DE  D007               	goto	l4145
  5527  0010E0                     l4143:
  5528                           
  5529                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5530  0010E0  5020               	movf	drawFastVLine@hi,w,c
  5531  0010E2  EC7D  F00C         	call	_spiwrite
  5532                           
  5533                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5534  0010E6  5021               	movf	drawFastVLine@lo,w,c
  5535  0010E8  EC7D  F00C         	call	_spiwrite
  5536  0010EC  D000               	goto	l4145
  5537  0010EE                     l4145:
  5538  0010EE  0619               	decf	drawFastVLine@h,f,c
  5539  0010F0  2819               	incf	drawFastVLine@h,w,c
  5540  0010F2  A4D8               	btfss	status,2,c
  5541  0010F4  D7F5               	goto	l4143
  5542                           
  5543                           ;ST7735_TFT.c: 431: }
  5544                           ;ST7735_TFT.c: 432: PORTCbits.RC4 = 1;
  5545  0010F6  8882               	bsf	3970,4,c	;volatile
  5546  0010F8                     l95:
  5547  0010F8  0012               	return		;funcret
  5548  0010FA                     __end_of_drawFastVLine:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           intcon	equ	0xFF2
  5557                           intcon2	equ	0xFF1
  5558                           postinc0	equ	0xFEE
  5559                           wreg	equ	0xFE8
  5560                           postdec1	equ	0xFE5
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _drawPixel *****************
  5570 ;; Defined at:
  5571 ;;		line 407 in file "ST7735_TFT.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  x               1    wreg     unsigned char 
  5574 ;;  y               1   23[COMRAM] unsigned char 
  5575 ;;  color           2   24[COMRAM] unsigned int 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  x               1   26[COMRAM] unsigned char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;		None               void
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5587 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;Total ram usage:        4 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    6
  5594 ;; This function calls:
  5595 ;;		_setAddrWindow
  5596 ;;		_write_data
  5597 ;; This function is called by:
  5598 ;;		_drawChar
  5599 ;;		_drawCircle
  5600 ;;		_drawCircleHelper
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text20
  5605  001790                     __ptext20:
  5606                           	opt stack 0
  5607  001790                     _drawPixel:
  5608                           	opt stack 22
  5609                           
  5610                           ;incstack = 0
  5611                           ;drawPixel@x stored from wreg
  5612  001790  6E1B               	movwf	drawPixel@x,c
  5613                           
  5614                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5615  001792  0E80               	movlw	128
  5616  001794  601B               	cpfslt	drawPixel@x,c
  5617  001796  D013               	goto	l89
  5618  001798  0E9F               	movlw	159
  5619  00179A  6418               	cpfsgt	drawPixel@y,c
  5620  00179C  D001               	goto	l4181
  5621                           
  5622                           ;ST7735_TFT.c: 410: return;
  5623  00179E  D00F               	goto	l89
  5624  0017A0                     l4181:
  5625                           
  5626                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5627  0017A0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5628  0017A4  281B               	incf	drawPixel@x,w,c
  5629  0017A6  6E15               	movwf	setAddrWindow@x1,c
  5630  0017A8  2818               	incf	drawPixel@y,w,c
  5631  0017AA  6E16               	movwf	setAddrWindow@y1,c
  5632  0017AC  501B               	movf	drawPixel@x,w,c
  5633  0017AE  EC7E  F00A         	call	_setAddrWindow
  5634                           
  5635                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5636  0017B2  501A               	movf	drawPixel@color+1,w,c
  5637  0017B4  ECBE  F00C         	call	_write_data
  5638                           
  5639                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5640  0017B8  5019               	movf	drawPixel@color,w,c
  5641  0017BA  ECBE  F00C         	call	_write_data
  5642  0017BE                     l89:
  5643  0017BE  0012               	return		;funcret
  5644  0017C0                     __end_of_drawPixel:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           intcon2	equ	0xFF1
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           postdec1	equ	0xFE5
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _setAddrWindow *****************
  5666 ;; Defined at:
  5667 ;;		line 392 in file "ST7735_TFT.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  x0              1    wreg     unsigned char 
  5670 ;;  y0              1   19[COMRAM] unsigned char 
  5671 ;;  x1              1   20[COMRAM] unsigned char 
  5672 ;;  y1              1   21[COMRAM] unsigned char 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  x0              1   22[COMRAM] unsigned char 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;		None               void
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5684 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;Total ram usage:        4 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    5
  5691 ;; This function calls:
  5692 ;;		_write_command
  5693 ;;		_write_data
  5694 ;; This function is called by:
  5695 ;;		_drawPixel
  5696 ;;		_drawFastVLine
  5697 ;;		_fillRectangle
  5698 ;;		_drawFastHLine
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text21
  5703  0014FC                     __ptext21:
  5704                           	opt stack 0
  5705  0014FC                     _setAddrWindow:
  5706                           	opt stack 22
  5707                           
  5708                           ;incstack = 0
  5709                           ;setAddrWindow@x0 stored from wreg
  5710  0014FC  6E17               	movwf	setAddrWindow@x0,c
  5711                           
  5712                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5713  0014FE  0E2A               	movlw	42
  5714  001500  ECC6  F00C         	call	_write_command
  5715                           
  5716                           ;ST7735_TFT.c: 395: write_data(0);
  5717  001504  0E00               	movlw	0
  5718  001506  ECBE  F00C         	call	_write_data
  5719                           
  5720                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5721  00150A  5017               	movf	setAddrWindow@x0,w,c
  5722  00150C  2459               	addwf	_colstart,w,c
  5723  00150E  ECBE  F00C         	call	_write_data
  5724                           
  5725                           ;ST7735_TFT.c: 397: write_data(0);
  5726  001512  0E00               	movlw	0
  5727  001514  ECBE  F00C         	call	_write_data
  5728                           
  5729                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5730  001518  5015               	movf	setAddrWindow@x1,w,c
  5731  00151A  2459               	addwf	_colstart,w,c
  5732  00151C  ECBE  F00C         	call	_write_data
  5733                           
  5734                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5735  001520  0E2B               	movlw	43
  5736  001522  ECC6  F00C         	call	_write_command
  5737                           
  5738                           ;ST7735_TFT.c: 400: write_data(0);
  5739  001526  0E00               	movlw	0
  5740  001528  ECBE  F00C         	call	_write_data
  5741                           
  5742                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5743  00152C  5014               	movf	setAddrWindow@y0,w,c
  5744  00152E  2461               	addwf	_rowstart,w,c
  5745  001530  ECBE  F00C         	call	_write_data
  5746                           
  5747                           ;ST7735_TFT.c: 402: write_data(0);
  5748  001534  0E00               	movlw	0
  5749  001536  ECBE  F00C         	call	_write_data
  5750                           
  5751                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5752  00153A  5016               	movf	setAddrWindow@y1,w,c
  5753  00153C  2461               	addwf	_rowstart,w,c
  5754  00153E  ECBE  F00C         	call	_write_data
  5755                           
  5756                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5757  001542  0E2C               	movlw	44
  5758  001544  ECC6  F00C         	call	_write_command
  5759  001548  0012               	return		;funcret
  5760  00154A                     __end_of_setAddrWindow:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           postdec1	equ	0xFE5
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _TFT_GreenTab_Initialize *****************
  5782 ;; Defined at:
  5783 ;;		line 644 in file "ST7735_TFT.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;		None               void
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    6
  5804 ;; This function calls:
  5805 ;;		_Rcmd1
  5806 ;;		_Rcmd2red
  5807 ;;		_Rcmd3
  5808 ;;		_write_command
  5809 ;;		_write_data
  5810 ;; This function is called by:
  5811 ;;		_Initialize_Screen
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text22
  5816  0017C0                     __ptext22:
  5817                           	opt stack 0
  5818  0017C0                     _TFT_GreenTab_Initialize:
  5819                           	opt stack 23
  5820                           
  5821                           ;ST7735_TFT.c: 646: PORTCbits.RC4 = 1;
  5822                           
  5823                           ;incstack = 0
  5824  0017C0  8882               	bsf	3970,4,c	;volatile
  5825                           
  5826                           ;ST7735_TFT.c: 647: PORTCbits.RC2 = 0;
  5827  0017C2  9482               	bcf	3970,2,c	;volatile
  5828                           
  5829                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5830  0017C4  0E80               	movlw	128
  5831  0017C6  6EC7               	movwf	4039,c	;volatile
  5832                           
  5833                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5834  0017C8  0E30               	movlw	48
  5835  0017CA  6EC6               	movwf	4038,c	;volatile
  5836                           
  5837                           ;ST7735_TFT.c: 653: Rcmd1();
  5838  0017CC  ECB3  F005         	call	_Rcmd1	;wreg free
  5839                           
  5840                           ;ST7735_TFT.c: 654: Rcmd2red();
  5841  0017D0  EC53  F00B         	call	_Rcmd2red	;wreg free
  5842                           
  5843                           ;ST7735_TFT.c: 655: Rcmd3();
  5844  0017D4  ECC0  F006         	call	_Rcmd3	;wreg free
  5845                           
  5846                           ;ST7735_TFT.c: 656: write_command(0x36);
  5847  0017D8  0E36               	movlw	54
  5848  0017DA  ECC6  F00C         	call	_write_command
  5849                           
  5850                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5851  0017DE  0EC0               	movlw	192
  5852  0017E0  ECBE  F00C         	call	_write_data
  5853                           
  5854                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5855  0017E4  0E01               	movlw	1
  5856  0017E6  6E53               	movwf	__tft_type,c
  5857  0017E8  0012               	return		;funcret
  5858  0017EA                     __end_of_TFT_GreenTab_Initialize:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           intcon2	equ	0xFF1
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function _Rcmd3 *****************
  5880 ;; Defined at:
  5881 ;;		line 338 in file "ST7735_TFT.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;		None
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;		None               void
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;Total ram usage:        0 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    5
  5902 ;; This function calls:
  5903 ;;		_delay_ms
  5904 ;;		_write_command
  5905 ;;		_write_data
  5906 ;; This function is called by:
  5907 ;;		_TFT_GreenTab_Initialize
  5908 ;;		_TFT_BlackTab_Initialize
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text23
  5913  000D80                     __ptext23:
  5914                           	opt stack 0
  5915  000D80                     _Rcmd3:
  5916                           	opt stack 23
  5917                           
  5918                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5919                           
  5920                           ;incstack = 0
  5921  000D80  0EE0               	movlw	224
  5922  000D82  ECC6  F00C         	call	_write_command
  5923                           
  5924                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5925  000D86  0E02               	movlw	2
  5926  000D88  ECBE  F00C         	call	_write_data
  5927  000D8C  0E1C               	movlw	28
  5928  000D8E  ECBE  F00C         	call	_write_data
  5929  000D92  0E07               	movlw	7
  5930  000D94  ECBE  F00C         	call	_write_data
  5931  000D98  0E12               	movlw	18
  5932  000D9A  ECBE  F00C         	call	_write_data
  5933                           
  5934                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5935  000D9E  0E37               	movlw	55
  5936  000DA0  ECBE  F00C         	call	_write_data
  5937  000DA4  0E32               	movlw	50
  5938  000DA6  ECBE  F00C         	call	_write_data
  5939  000DAA  0E29               	movlw	41
  5940  000DAC  ECBE  F00C         	call	_write_data
  5941  000DB0  0E2D               	movlw	45
  5942  000DB2  ECBE  F00C         	call	_write_data
  5943                           
  5944                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5945  000DB6  0E29               	movlw	41
  5946  000DB8  ECBE  F00C         	call	_write_data
  5947  000DBC  0E25               	movlw	37
  5948  000DBE  ECBE  F00C         	call	_write_data
  5949  000DC2  0E2B               	movlw	43
  5950  000DC4  ECBE  F00C         	call	_write_data
  5951  000DC8  0E39               	movlw	57
  5952  000DCA  ECBE  F00C         	call	_write_data
  5953                           
  5954                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5955  000DCE  0E00               	movlw	0
  5956  000DD0  ECBE  F00C         	call	_write_data
  5957  000DD4  0E01               	movlw	1
  5958  000DD6  ECBE  F00C         	call	_write_data
  5959  000DDA  0E03               	movlw	3
  5960  000DDC  ECBE  F00C         	call	_write_data
  5961  000DE0  0E10               	movlw	16
  5962  000DE2  ECBE  F00C         	call	_write_data
  5963                           
  5964                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5965  000DE6  0EE1               	movlw	225
  5966  000DE8  ECC6  F00C         	call	_write_command
  5967                           
  5968                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5969  000DEC  0E03               	movlw	3
  5970  000DEE  ECBE  F00C         	call	_write_data
  5971  000DF2  0E1D               	movlw	29
  5972  000DF4  ECBE  F00C         	call	_write_data
  5973  000DF8  0E07               	movlw	7
  5974  000DFA  ECBE  F00C         	call	_write_data
  5975  000DFE  0E06               	movlw	6
  5976  000E00  ECBE  F00C         	call	_write_data
  5977                           
  5978                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5979  000E04  0E2E               	movlw	46
  5980  000E06  ECBE  F00C         	call	_write_data
  5981  000E0A  0E2C               	movlw	44
  5982  000E0C  ECBE  F00C         	call	_write_data
  5983  000E10  0E29               	movlw	41
  5984  000E12  ECBE  F00C         	call	_write_data
  5985  000E16  0E2D               	movlw	45
  5986  000E18  ECBE  F00C         	call	_write_data
  5987                           
  5988                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5989  000E1C  0E2E               	movlw	46
  5990  000E1E  ECBE  F00C         	call	_write_data
  5991  000E22  0E2E               	movlw	46
  5992  000E24  ECBE  F00C         	call	_write_data
  5993  000E28  0E37               	movlw	55
  5994  000E2A  ECBE  F00C         	call	_write_data
  5995  000E2E  0E3F               	movlw	63
  5996  000E30  ECBE  F00C         	call	_write_data
  5997                           
  5998                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5999  000E34  0E00               	movlw	0
  6000  000E36  ECBE  F00C         	call	_write_data
  6001  000E3A  0E00               	movlw	0
  6002  000E3C  ECBE  F00C         	call	_write_data
  6003  000E40  0E02               	movlw	2
  6004  000E42  ECBE  F00C         	call	_write_data
  6005  000E46  0E10               	movlw	16
  6006  000E48  ECBE  F00C         	call	_write_data
  6007                           
  6008                           ;ST7735_TFT.c: 350: write_command(0x13);
  6009  000E4C  0E13               	movlw	19
  6010  000E4E  ECC6  F00C         	call	_write_command
  6011                           
  6012                           ;ST7735_TFT.c: 351: delay_ms(10);
  6013  000E52  0E00               	movlw	0
  6014  000E54  6E18               	movwf	delay_ms@ms+1,c
  6015  000E56  0E0A               	movlw	10
  6016  000E58  6E17               	movwf	delay_ms@ms,c
  6017  000E5A  EC55  F00A         	call	_delay_ms	;wreg free
  6018                           
  6019                           ;ST7735_TFT.c: 352: write_command(0x29);
  6020  000E5E  0E29               	movlw	41
  6021  000E60  ECC6  F00C         	call	_write_command
  6022                           
  6023                           ;ST7735_TFT.c: 353: delay_ms(100);
  6024  000E64  0E00               	movlw	0
  6025  000E66  6E18               	movwf	delay_ms@ms+1,c
  6026  000E68  0E64               	movlw	100
  6027  000E6A  6E17               	movwf	delay_ms@ms,c
  6028  000E6C  EC55  F00A         	call	_delay_ms	;wreg free
  6029  000E70  0012               	return		;funcret
  6030  000E72                     __end_of_Rcmd3:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           intcon	equ	0xFF2
  6039                           intcon2	equ	0xFF1
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           postdec1	equ	0xFE5
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _Rcmd2red *****************
  6052 ;; Defined at:
  6053 ;;		line 328 in file "ST7735_TFT.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;		None               void
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    5
  6074 ;; This function calls:
  6075 ;;		_write_command
  6076 ;;		_write_data
  6077 ;; This function is called by:
  6078 ;;		_TFT_GreenTab_Initialize
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text24
  6083  0016A6                     __ptext24:
  6084                           	opt stack 0
  6085  0016A6                     _Rcmd2red:
  6086                           	opt stack 23
  6087                           
  6088                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6089                           
  6090                           ;incstack = 0
  6091  0016A6  0E2A               	movlw	42
  6092  0016A8  ECC6  F00C         	call	_write_command
  6093                           
  6094                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6095  0016AC  0E00               	movlw	0
  6096  0016AE  ECBE  F00C         	call	_write_data
  6097  0016B2  0E00               	movlw	0
  6098  0016B4  ECBE  F00C         	call	_write_data
  6099                           
  6100                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6101  0016B8  0E00               	movlw	0
  6102  0016BA  ECBE  F00C         	call	_write_data
  6103  0016BE  0E7F               	movlw	127
  6104  0016C0  ECBE  F00C         	call	_write_data
  6105                           
  6106                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6107  0016C4  0E2B               	movlw	43
  6108  0016C6  ECC6  F00C         	call	_write_command
  6109                           
  6110                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6111  0016CA  0E00               	movlw	0
  6112  0016CC  ECBE  F00C         	call	_write_data
  6113  0016D0  0E00               	movlw	0
  6114  0016D2  ECBE  F00C         	call	_write_data
  6115                           
  6116                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6117  0016D6  0E00               	movlw	0
  6118  0016D8  ECBE  F00C         	call	_write_data
  6119  0016DC  0E9F               	movlw	159
  6120  0016DE  ECBE  F00C         	call	_write_data
  6121  0016E2  0012               	return		;funcret
  6122  0016E4                     __end_of_Rcmd2red:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           intcon2	equ	0xFF1
  6132                           postinc0	equ	0xFEE
  6133                           wreg	equ	0xFE8
  6134                           postdec1	equ	0xFE5
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           postdec2	equ	0xFDD
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143 ;; *************** function _Rcmd1 *****************
  6144 ;; Defined at:
  6145 ;;		line 281 in file "ST7735_TFT.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;		None
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;Total ram usage:        0 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    5
  6166 ;; This function calls:
  6167 ;;		_delay_ms
  6168 ;;		_write_command
  6169 ;;		_write_data
  6170 ;; This function is called by:
  6171 ;;		_TFT_GreenTab_Initialize
  6172 ;;		_TFT_BlackTab_Initialize
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           	psect	text25
  6177  000B66                     __ptext25:
  6178                           	opt stack 0
  6179  000B66                     _Rcmd1:
  6180                           	opt stack 23
  6181                           
  6182                           ;ST7735_TFT.c: 283: write_command(0x01);
  6183                           
  6184                           ;incstack = 0
  6185  000B66  0E01               	movlw	1
  6186  000B68  ECC6  F00C         	call	_write_command
  6187                           
  6188                           ;ST7735_TFT.c: 284: delay_ms(150);
  6189  000B6C  0E00               	movlw	0
  6190  000B6E  6E18               	movwf	delay_ms@ms+1,c
  6191  000B70  0E96               	movlw	150
  6192  000B72  6E17               	movwf	delay_ms@ms,c
  6193  000B74  EC55  F00A         	call	_delay_ms	;wreg free
  6194                           
  6195                           ;ST7735_TFT.c: 285: write_command(0x11);
  6196  000B78  0E11               	movlw	17
  6197  000B7A  ECC6  F00C         	call	_write_command
  6198                           
  6199                           ;ST7735_TFT.c: 286: delay_ms(500);
  6200  000B7E  0E01               	movlw	1
  6201  000B80  6E18               	movwf	delay_ms@ms+1,c
  6202  000B82  0EF4               	movlw	244
  6203  000B84  6E17               	movwf	delay_ms@ms,c
  6204  000B86  EC55  F00A         	call	_delay_ms	;wreg free
  6205                           
  6206                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6207  000B8A  0EB1               	movlw	177
  6208  000B8C  ECC6  F00C         	call	_write_command
  6209                           
  6210                           ;ST7735_TFT.c: 288: write_data(0x01);
  6211  000B90  0E01               	movlw	1
  6212  000B92  ECBE  F00C         	call	_write_data
  6213                           
  6214                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6215  000B96  0E2C               	movlw	44
  6216  000B98  ECBE  F00C         	call	_write_data
  6217                           
  6218                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6219  000B9C  0E2D               	movlw	45
  6220  000B9E  ECBE  F00C         	call	_write_data
  6221                           
  6222                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6223  000BA2  0EB2               	movlw	178
  6224  000BA4  ECC6  F00C         	call	_write_command
  6225                           
  6226                           ;ST7735_TFT.c: 292: write_data(0x01);
  6227  000BA8  0E01               	movlw	1
  6228  000BAA  ECBE  F00C         	call	_write_data
  6229                           
  6230                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6231  000BAE  0E2C               	movlw	44
  6232  000BB0  ECBE  F00C         	call	_write_data
  6233                           
  6234                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6235  000BB4  0E2D               	movlw	45
  6236  000BB6  ECBE  F00C         	call	_write_data
  6237                           
  6238                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6239  000BBA  0EB3               	movlw	179
  6240  000BBC  ECC6  F00C         	call	_write_command
  6241                           
  6242                           ;ST7735_TFT.c: 296: write_data(0x01);
  6243  000BC0  0E01               	movlw	1
  6244  000BC2  ECBE  F00C         	call	_write_data
  6245                           
  6246                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6247  000BC6  0E2C               	movlw	44
  6248  000BC8  ECBE  F00C         	call	_write_data
  6249                           
  6250                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6251  000BCC  0E2D               	movlw	45
  6252  000BCE  ECBE  F00C         	call	_write_data
  6253                           
  6254                           ;ST7735_TFT.c: 299: write_data(0x01);
  6255  000BD2  0E01               	movlw	1
  6256  000BD4  ECBE  F00C         	call	_write_data
  6257                           
  6258                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6259  000BD8  0E2C               	movlw	44
  6260  000BDA  ECBE  F00C         	call	_write_data
  6261                           
  6262                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6263  000BDE  0E2D               	movlw	45
  6264  000BE0  ECBE  F00C         	call	_write_data
  6265                           
  6266                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6267  000BE4  0EB4               	movlw	180
  6268  000BE6  ECC6  F00C         	call	_write_command
  6269                           
  6270                           ;ST7735_TFT.c: 303: write_data(0x07);
  6271  000BEA  0E07               	movlw	7
  6272  000BEC  ECBE  F00C         	call	_write_data
  6273                           
  6274                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6275  000BF0  0EC0               	movlw	192
  6276  000BF2  ECC6  F00C         	call	_write_command
  6277                           
  6278                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6279  000BF6  0EA2               	movlw	162
  6280  000BF8  ECBE  F00C         	call	_write_data
  6281                           
  6282                           ;ST7735_TFT.c: 306: write_data(0x02);
  6283  000BFC  0E02               	movlw	2
  6284  000BFE  ECBE  F00C         	call	_write_data
  6285                           
  6286                           ;ST7735_TFT.c: 307: write_data(0x84);
  6287  000C02  0E84               	movlw	132
  6288  000C04  ECBE  F00C         	call	_write_data
  6289                           
  6290                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6291  000C08  0EC1               	movlw	193
  6292  000C0A  ECC6  F00C         	call	_write_command
  6293                           
  6294                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6295  000C0E  0EC5               	movlw	197
  6296  000C10  ECBE  F00C         	call	_write_data
  6297                           
  6298                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6299  000C14  0EC2               	movlw	194
  6300  000C16  ECC6  F00C         	call	_write_command
  6301                           
  6302                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6303  000C1A  0E0A               	movlw	10
  6304  000C1C  ECBE  F00C         	call	_write_data
  6305                           
  6306                           ;ST7735_TFT.c: 312: write_data(0x00);
  6307  000C20  0E00               	movlw	0
  6308  000C22  ECBE  F00C         	call	_write_data
  6309                           
  6310                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6311  000C26  0EC3               	movlw	195
  6312  000C28  ECC6  F00C         	call	_write_command
  6313                           
  6314                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6315  000C2C  0E8A               	movlw	138
  6316  000C2E  ECBE  F00C         	call	_write_data
  6317                           
  6318                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6319  000C32  0E2A               	movlw	42
  6320  000C34  ECBE  F00C         	call	_write_data
  6321                           
  6322                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6323  000C38  0EC4               	movlw	196
  6324  000C3A  ECC6  F00C         	call	_write_command
  6325                           
  6326                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6327  000C3E  0E8A               	movlw	138
  6328  000C40  ECBE  F00C         	call	_write_data
  6329                           
  6330                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6331  000C44  0EEE               	movlw	238
  6332  000C46  ECBE  F00C         	call	_write_data
  6333                           
  6334                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6335  000C4A  0EC5               	movlw	197
  6336  000C4C  ECC6  F00C         	call	_write_command
  6337                           
  6338                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6339  000C50  0E0E               	movlw	14
  6340  000C52  ECBE  F00C         	call	_write_data
  6341                           
  6342                           ;ST7735_TFT.c: 321: write_command(0x20);
  6343  000C56  0E20               	movlw	32
  6344  000C58  ECC6  F00C         	call	_write_command
  6345                           
  6346                           ;ST7735_TFT.c: 322: write_command(0x36);
  6347  000C5C  0E36               	movlw	54
  6348  000C5E  ECC6  F00C         	call	_write_command
  6349                           
  6350                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6351  000C62  0EC8               	movlw	200
  6352  000C64  ECBE  F00C         	call	_write_data
  6353                           
  6354                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6355  000C68  0E3A               	movlw	58
  6356  000C6A  ECC6  F00C         	call	_write_command
  6357                           
  6358                           ;ST7735_TFT.c: 325: write_data(0x05);
  6359  000C6E  0E05               	movlw	5
  6360  000C70  ECBE  F00C         	call	_write_data
  6361  000C74  0012               	return		;funcret
  6362  000C76                     __end_of_Rcmd1:
  6363                           	opt stack 0
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           intcon2	equ	0xFF1
  6372                           postinc0	equ	0xFEE
  6373                           wreg	equ	0xFE8
  6374                           postdec1	equ	0xFE5
  6375                           fsr1l	equ	0xFE1
  6376                           indf2	equ	0xFDF
  6377                           postinc2	equ	0xFDE
  6378                           postdec2	equ	0xFDD
  6379                           fsr2h	equ	0xFDA
  6380                           fsr2l	equ	0xFD9
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _write_data *****************
  6384 ;; Defined at:
  6385 ;;		line 209 in file "ST7735_TFT.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  data_           1    wreg     unsigned char 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  data_           1   18[COMRAM] unsigned char 
  6390 ;; Return value:  Size  Location     Type
  6391 ;;		None               void
  6392 ;; Registers used:
  6393 ;;		wreg, status,2, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    4
  6406 ;; This function calls:
  6407 ;;		_spiwrite
  6408 ;; This function is called by:
  6409 ;;		_Rcmd1
  6410 ;;		_Rcmd2red
  6411 ;;		_Rcmd3
  6412 ;;		_setAddrWindow
  6413 ;;		_drawPixel
  6414 ;;		_TFT_GreenTab_Initialize
  6415 ;;		_Bcmd
  6416 ;;		_setScrollDefinition
  6417 ;;		_Rcmd2green
  6418 ;;		_VerticalScroll
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text26
  6423  00197C                     __ptext26:
  6424                           	opt stack 0
  6425  00197C                     _write_data:
  6426                           	opt stack 22
  6427                           
  6428                           ;incstack = 0
  6429                           ;write_data@data_ stored from wreg
  6430  00197C  6E13               	movwf	write_data@data_,c
  6431                           
  6432                           ;ST7735_TFT.c: 211: PORTCbits.RC4 = 0;
  6433  00197E  9882               	bcf	3970,4,c	;volatile
  6434                           
  6435                           ;ST7735_TFT.c: 212: PORTCbits.RC2 = 1;
  6436  001980  8482               	bsf	3970,2,c	;volatile
  6437                           
  6438                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6439  001982  5013               	movf	write_data@data_,w,c
  6440  001984  EC7D  F00C         	call	_spiwrite
  6441                           
  6442                           ;ST7735_TFT.c: 214: PORTCbits.RC4 = 1;
  6443  001988  8882               	bsf	3970,4,c	;volatile
  6444  00198A  0012               	return		;funcret
  6445  00198C                     __end_of_write_data:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           intcon	equ	0xFF2
  6454                           intcon2	equ	0xFF1
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           postdec1	equ	0xFE5
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _write_command *****************
  6467 ;; Defined at:
  6468 ;;		line 198 in file "ST7735_TFT.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  cmd_            1    wreg     unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  cmd_            1   18[COMRAM] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;Total ram usage:        1 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    4
  6489 ;; This function calls:
  6490 ;;		_spiwrite
  6491 ;; This function is called by:
  6492 ;;		_Rcmd1
  6493 ;;		_Rcmd2red
  6494 ;;		_Rcmd3
  6495 ;;		_setAddrWindow
  6496 ;;		_TFT_GreenTab_Initialize
  6497 ;;		_Bcmd
  6498 ;;		_setScrollDefinition
  6499 ;;		_Rcmd2green
  6500 ;;		_VerticalScroll
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text27
  6505  00198C                     __ptext27:
  6506                           	opt stack 0
  6507  00198C                     _write_command:
  6508                           	opt stack 22
  6509                           
  6510                           ;incstack = 0
  6511                           ;write_command@cmd_ stored from wreg
  6512  00198C  6E13               	movwf	write_command@cmd_,c
  6513                           
  6514                           ;ST7735_TFT.c: 200: PORTCbits.RC4 = 0;
  6515  00198E  9882               	bcf	3970,4,c	;volatile
  6516                           
  6517                           ;ST7735_TFT.c: 202: PORTCbits.RC2 = 0;
  6518  001990  9482               	bcf	3970,2,c	;volatile
  6519                           
  6520                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6521  001992  5013               	movf	write_command@cmd_,w,c
  6522  001994  EC7D  F00C         	call	_spiwrite
  6523                           
  6524                           ;ST7735_TFT.c: 205: PORTCbits.RC4 = 1;
  6525  001998  8882               	bsf	3970,4,c	;volatile
  6526  00199A  0012               	return		;funcret
  6527  00199C                     __end_of_write_command:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           intcon	equ	0xFF2
  6536                           intcon2	equ	0xFF1
  6537                           postinc0	equ	0xFEE
  6538                           wreg	equ	0xFE8
  6539                           postdec1	equ	0xFE5
  6540                           fsr1l	equ	0xFE1
  6541                           indf2	equ	0xFDF
  6542                           postinc2	equ	0xFDE
  6543                           postdec2	equ	0xFDD
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _spiwrite *****************
  6549 ;; Defined at:
  6550 ;;		line 189 in file "ST7735_TFT.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  spidata         1    wreg     unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  spidata         1   17[COMRAM] unsigned char 
  6555 ;;  x               1   16[COMRAM] unsigned char 
  6556 ;; Return value:  Size  Location     Type
  6557 ;;		None               void
  6558 ;; Registers used:
  6559 ;;		wreg
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;Total ram usage:        2 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    3
  6572 ;; This function calls:
  6573 ;;		Nothing
  6574 ;; This function is called by:
  6575 ;;		_write_command
  6576 ;;		_write_data
  6577 ;;		_drawFastVLine
  6578 ;;		_fillRectangle
  6579 ;;		_drawFastHLine
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text28
  6584  0018FA                     __ptext28:
  6585                           	opt stack 0
  6586  0018FA                     _spiwrite:
  6587                           	opt stack 24
  6588                           
  6589                           ;incstack = 0
  6590                           ;spiwrite@spidata stored from wreg
  6591  0018FA  6E12               	movwf	spiwrite@spidata,c
  6592                           
  6593                           ;ST7735_TFT.c: 191: char x;
  6594                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6595  0018FC  969E               	bcf	3998,3,c	;volatile
  6596                           
  6597                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6598  0018FE  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6599                           
  6600                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6601  001902  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6602                           
  6603                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6604  001906  D000               	goto	l45
  6605  001908                     l45:
  6606  001908  A0C7               	btfss	4039,0,c	;volatile
  6607  00190A  D7FE               	goto	l45
  6608  00190C  0012               	return		;funcret
  6609  00190E                     __end_of_spiwrite:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           intcon	equ	0xFF2
  6618                           intcon2	equ	0xFF1
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _LCD_Reset *****************
  6631 ;; Defined at:
  6632 ;;		line 217 in file "ST7735_TFT.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    5
  6653 ;; This function calls:
  6654 ;;		_delay_ms
  6655 ;; This function is called by:
  6656 ;;		_Initialize_Screen
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text29
  6661  001922                     __ptext29:
  6662                           	opt stack 0
  6663  001922                     _LCD_Reset:
  6664                           	opt stack 24
  6665                           
  6666                           ;ST7735_TFT.c: 219: PORTCbits.RC0 = 0;
  6667                           
  6668                           ;incstack = 0
  6669  001922  9082               	bcf	3970,0,c	;volatile
  6670                           
  6671                           ;ST7735_TFT.c: 220: delay_ms(100);
  6672  001924  0E00               	movlw	0
  6673  001926  6E18               	movwf	delay_ms@ms+1,c
  6674  001928  0E64               	movlw	100
  6675  00192A  6E17               	movwf	delay_ms@ms,c
  6676  00192C  EC55  F00A         	call	_delay_ms	;wreg free
  6677                           
  6678                           ;ST7735_TFT.c: 221: PORTCbits.RC0 = 1;
  6679  001930  8082               	bsf	3970,0,c	;volatile
  6680  001932  0012               	return		;funcret
  6681  001934                     __end_of_LCD_Reset:
  6682                           	opt stack 0
  6683                           tblptru	equ	0xFF8
  6684                           tblptrh	equ	0xFF7
  6685                           tblptrl	equ	0xFF6
  6686                           tablat	equ	0xFF5
  6687                           prodh	equ	0xFF4
  6688                           prodl	equ	0xFF3
  6689                           intcon	equ	0xFF2
  6690                           intcon2	equ	0xFF1
  6691                           postinc0	equ	0xFEE
  6692                           wreg	equ	0xFE8
  6693                           postdec1	equ	0xFE5
  6694                           fsr1l	equ	0xFE1
  6695                           indf2	equ	0xFDF
  6696                           postinc2	equ	0xFDE
  6697                           postdec2	equ	0xFDD
  6698                           fsr2h	equ	0xFDA
  6699                           fsr2l	equ	0xFD9
  6700                           status	equ	0xFD8
  6701                           
  6702 ;; *************** function _delay_ms *****************
  6703 ;; Defined at:
  6704 ;;		line 64 in file "ST7735_TFT.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  ms              2   22[COMRAM] int 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;  count           2   26[COMRAM] int 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;		None               void
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;Total ram usage:        6 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    4
  6725 ;; This function calls:
  6726 ;;		___wmul
  6727 ;; This function is called by:
  6728 ;;		_LCD_Reset
  6729 ;;		_Rcmd1
  6730 ;;		_Rcmd3
  6731 ;;		_Bcmd
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text30
  6736  0014AA                     __ptext30:
  6737                           	opt stack 0
  6738  0014AA                     _delay_ms:
  6739                           	opt stack 23
  6740                           
  6741                           ;ST7735_TFT.c: 70: int count;
  6742                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6743                           
  6744                           ;incstack = 0
  6745  0014AA  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6746  0014AE  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6747  0014B2  0E00               	movlw	0
  6748  0014B4  6E14               	movwf	___wmul@multiplicand+1,c
  6749  0014B6  0EFA               	movlw	250
  6750  0014B8  6E13               	movwf	___wmul@multiplicand,c
  6751  0014BA  ECF5  F00B         	call	___wmul	;wreg free
  6752  0014BE  C011  F01B         	movff	?___wmul,delay_ms@count
  6753  0014C2  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6754                           
  6755                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6756  0014C6  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6757  0014CA  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6758  0014CE  1E19               	comf	??_delay_ms,f,c
  6759  0014D0  1E1A               	comf	??_delay_ms+1,f,c
  6760  0014D2  4A19               	infsnz	??_delay_ms,f,c
  6761  0014D4  2A1A               	incf	??_delay_ms+1,f,c
  6762  0014D6  0EFF               	movlw	255
  6763  0014D8  2419               	addwf	??_delay_ms,w,c
  6764  0014DA  6E1B               	movwf	delay_ms@count,c
  6765  0014DC  0EFF               	movlw	255
  6766  0014DE  201A               	addwfc	??_delay_ms+1,w,c
  6767  0014E0  6E1C               	movwf	delay_ms@count+1,c
  6768                           
  6769                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6770  0014E2  0EB8               	movlw	184
  6771  0014E4  6EB1               	movwf	4017,c	;volatile
  6772                           
  6773                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6774  0014E6  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6775                           
  6776                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6777  0014EA  501C               	movf	delay_ms@count+1,w,c
  6778  0014EC  6EB3               	movwf	4019,c	;volatile
  6779                           
  6780                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6781  0014EE  92A1               	bcf	4001,1,c	;volatile
  6782                           
  6783                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6784  0014F0  80B1               	bsf	4017,0,c	;volatile
  6785                           
  6786                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6787  0014F2  D000               	goto	l35
  6788  0014F4                     l35:
  6789  0014F4  A2A1               	btfss	4001,1,c	;volatile
  6790  0014F6  D7FE               	goto	l35
  6791                           
  6792                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6793  0014F8  90B1               	bcf	4017,0,c	;volatile
  6794  0014FA  0012               	return		;funcret
  6795  0014FC                     __end_of_delay_ms:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           intcon2	equ	0xFF1
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function ___wmul *****************
  6817 ;; Defined at:
  6818 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  multiplier      2   16[COMRAM] unsigned int 
  6821 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  product         2   20[COMRAM] unsigned int 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  2   16[COMRAM] unsigned int 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2, status,0, prodl, prodh
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6833 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;Total ram usage:        6 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    3
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_delay_ms
  6844 ;;		_drawChar
  6845 ;;		_main
  6846 ;;		_printf
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text31
  6851  0017EA                     __ptext31:
  6852                           	opt stack 0
  6853  0017EA                     ___wmul:
  6854                           	opt stack 26
  6855                           
  6856                           ;incstack = 0
  6857  0017EA  5011               	movf	___wmul@multiplier,w,c
  6858  0017EC  0213               	mulwf	___wmul@multiplicand,c
  6859  0017EE  CFF3 F015          	movff	prodl,___wmul@product
  6860  0017F2  CFF4 F016          	movff	prodh,___wmul@product+1
  6861  0017F6  5011               	movf	___wmul@multiplier,w,c
  6862  0017F8  0214               	mulwf	___wmul@multiplicand+1,c
  6863  0017FA  50F3               	movf	prodl,w,c
  6864  0017FC  2616               	addwf	___wmul@product+1,f,c
  6865  0017FE  5012               	movf	___wmul@multiplier+1,w,c
  6866  001800  0213               	mulwf	___wmul@multiplicand,c
  6867  001802  50F3               	movf	prodl,w,c
  6868  001804  2616               	addwf	___wmul@product+1,f,c
  6869  001806  C015  F011         	movff	___wmul@product,?___wmul
  6870  00180A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6871  00180E  D000               	goto	l691
  6872  001810                     l691:
  6873  001810  0012               	return		;funcret
  6874  001812                     __end_of___wmul:
  6875                           	opt stack 0
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           intcon	equ	0xFF2
  6883                           intcon2	equ	0xFF1
  6884                           postinc0	equ	0xFEE
  6885                           wreg	equ	0xFE8
  6886                           postdec1	equ	0xFE5
  6887                           fsr1l	equ	0xFE1
  6888                           indf2	equ	0xFDF
  6889                           postinc2	equ	0xFDE
  6890                           postdec2	equ	0xFDD
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _Do_Init *****************
  6896 ;; Defined at:
  6897 ;;		line 123 in file "Lab11p1.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;		None
  6902 ;; Return value:  Size  Location     Type
  6903 ;;		None               void
  6904 ;; Registers used:
  6905 ;;		wreg, status,2, status,0, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;Total ram usage:        0 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    7
  6918 ;; This function calls:
  6919 ;;		_DS1621_Init
  6920 ;;		_I2C_Init
  6921 ;;		_init_INTERRUPT
  6922 ;;		_init_UART
  6923 ;; This function is called by:
  6924 ;;		_main
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text32
  6929  001628                     __ptext32:
  6930                           	opt stack 0
  6931  001628                     _Do_Init:
  6932                           	opt stack 23
  6933                           
  6934                           ;Lab11p1.c: 125: init_UART();
  6935                           
  6936                           ;incstack = 0
  6937  001628  EC87  F00C         	call	_init_UART	;wreg free
  6938                           
  6939                           ;Lab11p1.c: 126: init_INTERRUPT();
  6940  00162C  EC66  F00C         	call	_init_INTERRUPT	;wreg free
  6941                           
  6942                           ;Lab11p1.c: 127: OSCCON=0x70;
  6943  001630  0E70               	movlw	112
  6944  001632  6ED3               	movwf	4051,c	;volatile
  6945                           
  6946                           ;Lab11p1.c: 128: nRBPU=0;
  6947  001634  9EF1               	bcf	intcon2,7,c	;volatile
  6948                           
  6949                           ;Lab11p1.c: 129: ADCON1= 0x0F;
  6950  001636  0E0F               	movlw	15
  6951  001638  6EC1               	movwf	4033,c	;volatile
  6952                           
  6953                           ;Lab11p1.c: 130: TRISA = 0x00;
  6954  00163A  0E00               	movlw	0
  6955  00163C  6E92               	movwf	3986,c	;volatile
  6956                           
  6957                           ;Lab11p1.c: 131: TRISB = 0x01;
  6958  00163E  0E01               	movlw	1
  6959  001640  6E93               	movwf	3987,c	;volatile
  6960                           
  6961                           ;Lab11p1.c: 132: TRISC = 0x00;
  6962  001642  0E00               	movlw	0
  6963  001644  6E94               	movwf	3988,c	;volatile
  6964                           
  6965                           ;Lab11p1.c: 133: TRISD = 0x00;
  6966  001646  0E00               	movlw	0
  6967  001648  6E95               	movwf	3989,c	;volatile
  6968                           
  6969                           ;Lab11p1.c: 134: TRISE = 0x00;
  6970  00164A  0E00               	movlw	0
  6971  00164C  6E96               	movwf	3990,c	;volatile
  6972                           
  6973                           ;Lab11p1.c: 136: I2C_Init(100000);
  6974  00164E  0EA0               	movlw	160
  6975  001650  6E11               	movwf	I2C_Init@c,c
  6976  001652  0E86               	movlw	134
  6977  001654  6E12               	movwf	I2C_Init@c+1,c
  6978  001656  0E01               	movlw	1
  6979  001658  6E13               	movwf	I2C_Init@c+2,c
  6980  00165A  0E00               	movlw	0
  6981  00165C  6E14               	movwf	I2C_Init@c+3,c
  6982  00165E  ECE1  F00C         	call	_I2C_Init	;wreg free
  6983                           
  6984                           ;Lab11p1.c: 138: DS1621_Init();
  6985  001662  EC3C  F00C         	call	_DS1621_Init	;wreg free
  6986  001666  0012               	return		;funcret
  6987  001668                     __end_of_Do_Init:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           postdec1	equ	0xFE5
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function _init_UART *****************
  7009 ;; Defined at:
  7010 ;;		line 110 in file "Lab11p1.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;		None
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;		None               void
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;Total ram usage:        0 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    4
  7031 ;; This function calls:
  7032 ;;		_OpenUSART
  7033 ;; This function is called by:
  7034 ;;		_Do_Init
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text33
  7039  00190E                     __ptext33:
  7040                           	opt stack 0
  7041  00190E                     _init_UART:
  7042                           	opt stack 25
  7043                           
  7044                           ;Lab11p1.c: 112: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  7045                           
  7046                           ;incstack = 0
  7047  00190E  0E00               	movlw	0
  7048  001910  6E12               	movwf	OpenUSART@spbrg+1,c
  7049  001912  0E19               	movlw	25
  7050  001914  6E11               	movwf	OpenUSART@spbrg,c
  7051  001916  0E3C               	movlw	60
  7052  001918  EC37  F009         	call	_OpenUSART
  7053                           
  7054                           ;Lab11p1.c: 113: OSCCON = 0x70;
  7055  00191C  0E70               	movlw	112
  7056  00191E  6ED3               	movwf	4051,c	;volatile
  7057  001920  0012               	return		;funcret
  7058  001922                     __end_of_init_UART:
  7059                           	opt stack 0
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           prodh	equ	0xFF4
  7065                           prodl	equ	0xFF3
  7066                           intcon	equ	0xFF2
  7067                           intcon2	equ	0xFF1
  7068                           postinc0	equ	0xFEE
  7069                           wreg	equ	0xFE8
  7070                           postdec1	equ	0xFE5
  7071                           fsr1l	equ	0xFE1
  7072                           indf2	equ	0xFDF
  7073                           postinc2	equ	0xFDE
  7074                           postdec2	equ	0xFDD
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _OpenUSART *****************
  7080 ;; Defined at:
  7081 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  config          1    wreg     unsigned char 
  7084 ;;  spbrg           2   16[COMRAM] unsigned int 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  config          1   18[COMRAM] unsigned char 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;		None               void
  7089 ;; Registers used:
  7090 ;;		wreg, status,2
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;Total ram usage:        3 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    3
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_init_UART
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text34
  7111  00126E                     __ptext34:
  7112                           	opt stack 0
  7113  00126E                     _OpenUSART:
  7114                           	opt stack 25
  7115                           
  7116                           ;incstack = 0
  7117                           ;OpenUSART@config stored from wreg
  7118  00126E  6E13               	movwf	OpenUSART@config,c
  7119  001270  0E00               	movlw	0
  7120  001272  6EAC               	movwf	4012,c	;volatile
  7121  001274  0E00               	movlw	0
  7122  001276  6EAB               	movwf	4011,c	;volatile
  7123  001278  A013               	btfss	OpenUSART@config,0,c
  7124  00127A  D002               	goto	l4437
  7125  00127C  88AC               	bsf	4012,4,c	;volatile
  7126  00127E  D000               	goto	l4437
  7127  001280                     l4437:
  7128  001280  A213               	btfss	OpenUSART@config,1,c
  7129  001282  D003               	goto	l4441
  7130  001284  8CAC               	bsf	4012,6,c	;volatile
  7131  001286  8CAB               	bsf	4011,6,c	;volatile
  7132  001288  D000               	goto	l4441
  7133  00128A                     l4441:
  7134  00128A  A413               	btfss	OpenUSART@config,2,c
  7135  00128C  D002               	goto	l4445
  7136  00128E  8EAC               	bsf	4012,7,c	;volatile
  7137  001290  D000               	goto	l4445
  7138  001292                     l4445:
  7139  001292  A613               	btfss	OpenUSART@config,3,c
  7140  001294  D002               	goto	l679
  7141  001296  88AB               	bsf	4011,4,c	;volatile
  7142  001298  D002               	goto	l4449
  7143  00129A                     l679:
  7144  00129A  8AAB               	bsf	4011,5,c	;volatile
  7145  00129C  D000               	goto	l4449
  7146  00129E                     l4449:
  7147  00129E  B813               	btfsc	OpenUSART@config,4,c
  7148  0012A0  84AC               	bsf	4012,2,c	;volatile
  7149  0012A2  989E               	bcf	3998,4,c	;volatile
  7150  0012A4  AA13               	btfss	OpenUSART@config,5,c
  7151  0012A6  D002               	goto	l4457
  7152  0012A8  86AB               	bsf	4011,3,c	;volatile
  7153  0012AA  D000               	goto	l4457
  7154  0012AC                     l4457:
  7155  0012AC  AC13               	btfss	OpenUSART@config,6,c
  7156  0012AE  D002               	goto	l683
  7157  0012B0  8A9D               	bsf	3997,5,c	;volatile
  7158  0012B2  D001               	goto	l684
  7159  0012B4                     l683:
  7160  0012B4  9A9D               	bcf	3997,5,c	;volatile
  7161  0012B6                     l684:
  7162  0012B6  9A9E               	bcf	3998,5,c	;volatile
  7163  0012B8  AE13               	btfss	OpenUSART@config,7,c
  7164  0012BA  D002               	goto	l685
  7165  0012BC  889D               	bsf	3997,4,c	;volatile
  7166  0012BE  D001               	goto	l686
  7167  0012C0                     l685:
  7168  0012C0  989D               	bcf	3997,4,c	;volatile
  7169  0012C2                     l686:
  7170  0012C2  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7171  0012C6  5012               	movf	OpenUSART@spbrg+1,w,c
  7172  0012C8  6EB0               	movwf	4016,c	;volatile
  7173  0012CA  8AAC               	bsf	4012,5,c	;volatile
  7174  0012CC  8EAB               	bsf	4011,7,c	;volatile
  7175  0012CE  9C94               	bcf	3988,6,c	;volatile
  7176  0012D0  8E94               	bsf	3988,7,c	;volatile
  7177  0012D2  B8AC               	btfsc	4012,4,c	;volatile
  7178  0012D4  BEAC               	btfsc	4012,7,c	;volatile
  7179  0012D6  D002               	goto	l688
  7180  0012D8  8C94               	bsf	3988,6,c	;volatile
  7181  0012DA  D000               	goto	l688
  7182  0012DC                     l688:
  7183  0012DC  0012               	return		;funcret
  7184  0012DE                     __end_of_OpenUSART:
  7185                           	opt stack 0
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           intcon2	equ	0xFF1
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec1	equ	0xFE5
  7197                           fsr1l	equ	0xFE1
  7198                           indf2	equ	0xFDF
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _init_INTERRUPT *****************
  7206 ;; Defined at:
  7207 ;;		line 135 in file "Interrupt.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;		None               void
  7214 ;; Registers used:
  7215 ;;		wreg, status,2
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;Total ram usage:        0 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    3
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_Do_Init
  7232 ;;		_main
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text35
  7237  0018CC                     __ptext35:
  7238                           	opt stack 0
  7239  0018CC                     _init_INTERRUPT:
  7240                           	opt stack 27
  7241                           
  7242                           ;Interrupt.c: 137: INTCONbits.INT0IF = 0;
  7243                           
  7244                           ;incstack = 0
  7245  0018CC  92F2               	bcf	intcon,1,c	;volatile
  7246                           
  7247                           ;Interrupt.c: 138: INTCON2bits.INTEDG0 = 0;
  7248  0018CE  9CF1               	bcf	intcon2,6,c	;volatile
  7249                           
  7250                           ;Interrupt.c: 139: INTCONbits.INT0IE = 1;
  7251  0018D0  88F2               	bsf	intcon,4,c	;volatile
  7252                           
  7253                           ;Interrupt.c: 140: TMR1H = 0;
  7254  0018D2  0E00               	movlw	0
  7255  0018D4  6ECF               	movwf	4047,c	;volatile
  7256                           
  7257                           ;Interrupt.c: 141: TMR1L = 0;
  7258  0018D6  0E00               	movlw	0
  7259  0018D8  6ECE               	movwf	4046,c	;volatile
  7260                           
  7261                           ;Interrupt.c: 142: PIR1bits.TMR1IF = 0;
  7262  0018DA  909E               	bcf	3998,0,c	;volatile
  7263                           
  7264                           ;Interrupt.c: 143: PIE1bits.TMR1IE = 1;
  7265  0018DC  809D               	bsf	3997,0,c	;volatile
  7266                           
  7267                           ;Interrupt.c: 144: INTCONbits.PEIE = 1;
  7268  0018DE  8CF2               	bsf	intcon,6,c	;volatile
  7269                           
  7270                           ;Interrupt.c: 145: INTCONbits.GIE = 1;
  7271  0018E0  8EF2               	bsf	intcon,7,c	;volatile
  7272  0018E2  0012               	return		;funcret
  7273  0018E4                     __end_of_init_INTERRUPT:
  7274                           	opt stack 0
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           intcon2	equ	0xFF1
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _I2C_Init *****************
  7295 ;; Defined at:
  7296 ;;		line 10 in file "I2C_Soft.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  c               4   16[COMRAM] unsigned long 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;		None
  7301 ;; Return value:  Size  Location     Type
  7302 ;;		None               void
  7303 ;; Registers used:
  7304 ;;		wreg, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7310 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;Total ram usage:        4 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    4
  7317 ;; This function calls:
  7318 ;;		_i2cHighScl
  7319 ;;		_i2cHighSda
  7320 ;; This function is called by:
  7321 ;;		_Do_Init
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text36
  7326  0019C2                     __ptext36:
  7327                           	opt stack 0
  7328  0019C2                     _I2C_Init:
  7329                           	opt stack 25
  7330                           
  7331                           ;I2C_Soft.c: 12: i2cHighScl();
  7332                           
  7333                           ;incstack = 0
  7334  0019C2  ECD5  F00C         	call	_i2cHighScl	;wreg free
  7335                           
  7336                           ;I2C_Soft.c: 13: i2cHighSda();
  7337  0019C6  ECF8  F00C         	call	_i2cHighSda	;wreg free
  7338  0019CA  0012               	return		;funcret
  7339  0019CC                     __end_of_I2C_Init:
  7340                           	opt stack 0
  7341                           tblptru	equ	0xFF8
  7342                           tblptrh	equ	0xFF7
  7343                           tblptrl	equ	0xFF6
  7344                           tablat	equ	0xFF5
  7345                           prodh	equ	0xFF4
  7346                           prodl	equ	0xFF3
  7347                           intcon	equ	0xFF2
  7348                           intcon2	equ	0xFF1
  7349                           postinc0	equ	0xFEE
  7350                           wreg	equ	0xFE8
  7351                           postdec1	equ	0xFE5
  7352                           fsr1l	equ	0xFE1
  7353                           indf2	equ	0xFDF
  7354                           postinc2	equ	0xFDE
  7355                           postdec2	equ	0xFDD
  7356                           fsr2h	equ	0xFDA
  7357                           fsr2l	equ	0xFD9
  7358                           status	equ	0xFD8
  7359                           
  7360 ;; *************** function _DS1621_Init *****************
  7361 ;; Defined at:
  7362 ;;		line 21 in file "I2C_Support.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;		None
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  Device          1   21[COMRAM] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;Total ram usage:        1 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    6
  7383 ;; This function calls:
  7384 ;;		_I2C_Write_Cmd_Only
  7385 ;;		_I2C_Write_Cmd_Write_Data
  7386 ;; This function is called by:
  7387 ;;		_Do_Init
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text37
  7392  001878                     __ptext37:
  7393                           	opt stack 0
  7394  001878                     _DS1621_Init:
  7395                           	opt stack 23
  7396                           
  7397                           ;I2C_Support.c: 23: char Device = 0x48;
  7398                           
  7399                           ;incstack = 0
  7400  001878  0E48               	movlw	72
  7401  00187A  6E16               	movwf	DS1621_Init@Device,c
  7402                           
  7403                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7404  00187C  0EAC               	movlw	172
  7405  00187E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7406  001880  0E02               	movlw	2
  7407  001882  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7408  001884  5016               	movf	DS1621_Init@Device,w,c
  7409  001886  EC2C  F00C         	call	_I2C_Write_Cmd_Write_Data
  7410                           
  7411                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7412  00188A  0EEE               	movlw	238
  7413  00188C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7414  00188E  5016               	movf	DS1621_Init@Device,w,c
  7415  001890  EC59  F00C         	call	_I2C_Write_Cmd_Only
  7416  001894  0012               	return		;funcret
  7417  001896                     __end_of_DS1621_Init:
  7418                           	opt stack 0
  7419                           tblptru	equ	0xFF8
  7420                           tblptrh	equ	0xFF7
  7421                           tblptrl	equ	0xFF6
  7422                           tablat	equ	0xFF5
  7423                           prodh	equ	0xFF4
  7424                           prodl	equ	0xFF3
  7425                           intcon	equ	0xFF2
  7426                           intcon2	equ	0xFF1
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           postdec1	equ	0xFE5
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           postinc2	equ	0xFDE
  7433                           postdec2	equ	0xFDD
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7439 ;; Defined at:
  7440 ;;		line 148 in file "I2C_Soft.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  Device          1    wreg     unsigned char 
  7443 ;;  Cmd             1   18[COMRAM] unsigned char 
  7444 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  Device          1   20[COMRAM] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;		None               void
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;Total ram usage:        3 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    5
  7463 ;; This function calls:
  7464 ;;		_I2C_Start
  7465 ;;		_I2C_Stop
  7466 ;;		_I2C_Write
  7467 ;; This function is called by:
  7468 ;;		_DS1621_Init
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text38
  7473  001858                     __ptext38:
  7474                           	opt stack 0
  7475  001858                     _I2C_Write_Cmd_Write_Data:
  7476                           	opt stack 23
  7477                           
  7478                           ;incstack = 0
  7479                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7480  001858  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7481                           
  7482                           ;I2C_Soft.c: 150: I2C_Start();
  7483  00185A  ECA3  F00C         	call	_I2C_Start	;wreg free
  7484                           
  7485                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  7486  00185E  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7487  001860  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7488  001862  EC72  F00B         	call	_I2C_Write
  7489                           
  7490                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  7491  001866  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7492  001868  EC72  F00B         	call	_I2C_Write
  7493                           
  7494                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  7495  00186C  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7496  00186E  EC72  F00B         	call	_I2C_Write
  7497                           
  7498                           ;I2C_Soft.c: 154: I2C_Stop();
  7499  001872  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7500  001876  0012               	return		;funcret
  7501  001878                     __end_of_I2C_Write_Cmd_Write_Data:
  7502                           	opt stack 0
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           intcon2	equ	0xFF1
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           postdec1	equ	0xFE5
  7514                           fsr1l	equ	0xFE1
  7515                           indf2	equ	0xFDF
  7516                           postinc2	equ	0xFDE
  7517                           postdec2	equ	0xFDD
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function _I2C_Write_Cmd_Only *****************
  7523 ;; Defined at:
  7524 ;;		line 140 in file "I2C_Soft.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  Device          1    wreg     unsigned char 
  7527 ;;  Cmd             1   18[COMRAM] unsigned char 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  Device          1   19[COMRAM] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;		None               void
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;Total ram usage:        2 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    5
  7546 ;; This function calls:
  7547 ;;		_I2C_Start
  7548 ;;		_I2C_Stop
  7549 ;;		_I2C_Write
  7550 ;; This function is called by:
  7551 ;;		_DS1621_Init
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text39
  7556  0018B2                     __ptext39:
  7557                           	opt stack 0
  7558  0018B2                     _I2C_Write_Cmd_Only:
  7559                           	opt stack 23
  7560                           
  7561                           ;incstack = 0
  7562                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7563  0018B2  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7564                           
  7565                           ;I2C_Soft.c: 142: I2C_Start();
  7566  0018B4  ECA3  F00C         	call	_I2C_Start	;wreg free
  7567                           
  7568                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  7569  0018B8  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7570  0018BA  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7571  0018BC  EC72  F00B         	call	_I2C_Write
  7572                           
  7573                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  7574  0018C0  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7575  0018C2  EC72  F00B         	call	_I2C_Write
  7576                           
  7577                           ;I2C_Soft.c: 145: I2C_Stop();
  7578  0018C6  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7579  0018CA  0012               	return		;funcret
  7580  0018CC                     __end_of_I2C_Write_Cmd_Only:
  7581                           	opt stack 0
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           intcon2	equ	0xFF1
  7590                           postinc0	equ	0xFEE
  7591                           wreg	equ	0xFE8
  7592                           postdec1	equ	0xFE5
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           postdec2	equ	0xFDD
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function _Deactivate_Buzzer *****************
  7602 ;; Defined at:
  7603 ;;		line 228 in file "Lab11p1.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;		None
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;		None
  7608 ;; Return value:  Size  Location     Type
  7609 ;;		None               void
  7610 ;; Registers used:
  7611 ;;		wreg, status,2
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;Total ram usage:        0 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    3
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_main
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           	psect	text40
  7632  0019E0                     __ptext40:
  7633                           	opt stack 0
  7634  0019E0                     _Deactivate_Buzzer:
  7635                           	opt stack 27
  7636                           
  7637                           ;Lab11p1.c: 230: CCP2CON = 0x0;
  7638                           
  7639                           ;incstack = 0
  7640  0019E0  0E00               	movlw	0
  7641  0019E2  6EBA               	movwf	4026,c	;volatile
  7642                           
  7643                           ;Lab11p1.c: 231: PORTBbits.RB3 = 0;
  7644  0019E4  9681               	bcf	3969,3,c	;volatile
  7645  0019E6  0012               	return		;funcret
  7646  0019E8                     __end_of_Deactivate_Buzzer:
  7647                           	opt stack 0
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           intcon	equ	0xFF2
  7655                           intcon2	equ	0xFF1
  7656                           postinc0	equ	0xFEE
  7657                           wreg	equ	0xFE8
  7658                           postdec1	equ	0xFE5
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _DS3231_Setup_Time *****************
  7668 ;; Defined at:
  7669 ;;		line 65 in file "I2C_Support.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;		None
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;  Address         1   19[COMRAM] unsigned char 
  7674 ;;  Device          1   18[COMRAM] unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;		None               void
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0, cstack
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;Total ram usage:        2 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    5
  7691 ;; This function calls:
  7692 ;;		_I2C_Start
  7693 ;;		_I2C_Stop
  7694 ;;		_I2C_Write
  7695 ;; This function is called by:
  7696 ;;		_main
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text41
  7701  0012DE                     __ptext41:
  7702                           	opt stack 0
  7703  0012DE                     _DS3231_Setup_Time:
  7704                           	opt stack 25
  7705                           
  7706                           ;I2C_Support.c: 67: char Device = 0x68;
  7707                           
  7708                           ;incstack = 0
  7709  0012DE  0E68               	movlw	104
  7710  0012E0  6E13               	movwf	DS3231_Setup_Time@Device,c
  7711                           
  7712                           ;I2C_Support.c: 68: char Address = 0x00;
  7713  0012E2  0E00               	movlw	0
  7714  0012E4  6E14               	movwf	DS3231_Setup_Time@Address,c
  7715                           
  7716                           ;I2C_Support.c: 69: second = 0x00;
  7717  0012E6  0E00               	movlw	0
  7718  0012E8  6E62               	movwf	_second,c
  7719                           
  7720                           ;I2C_Support.c: 70: minute = 0x00;
  7721  0012EA  0E00               	movlw	0
  7722  0012EC  6E5F               	movwf	_minute,c
  7723                           
  7724                           ;I2C_Support.c: 71: hour = 0x00;
  7725  0012EE  0E00               	movlw	0
  7726  0012F0  6E5D               	movwf	_hour,c
  7727                           
  7728                           ;I2C_Support.c: 72: dow = 0x04;
  7729  0012F2  0E04               	movlw	4
  7730  0012F4  6E5B               	movwf	_dow,c
  7731                           
  7732                           ;I2C_Support.c: 73: day = 0x10;
  7733  0012F6  0E10               	movlw	16
  7734  0012F8  6E5A               	movwf	_day,c
  7735                           
  7736                           ;I2C_Support.c: 74: month = 0x11;
  7737  0012FA  0E11               	movlw	17
  7738  0012FC  6E60               	movwf	_month,c
  7739                           
  7740                           ;I2C_Support.c: 75: year = 0x22;
  7741  0012FE  0E22               	movlw	34
  7742  001300  6E6C               	movwf	_year,c
  7743                           
  7744                           ;I2C_Support.c: 77: I2C_Start();
  7745  001302  ECA3  F00C         	call	_I2C_Start	;wreg free
  7746                           
  7747                           ;I2C_Support.c: 78: I2C_Write((Device << 1) | 0);
  7748  001306  5013               	movf	DS3231_Setup_Time@Device,w,c
  7749  001308  2413               	addwf	DS3231_Setup_Time@Device,w,c
  7750  00130A  EC72  F00B         	call	_I2C_Write
  7751                           
  7752                           ;I2C_Support.c: 79: I2C_Write(Address);
  7753  00130E  5014               	movf	DS3231_Setup_Time@Address,w,c
  7754  001310  EC72  F00B         	call	_I2C_Write
  7755                           
  7756                           ;I2C_Support.c: 80: I2C_Write(second);
  7757  001314  5062               	movf	_second,w,c
  7758  001316  EC72  F00B         	call	_I2C_Write
  7759                           
  7760                           ;I2C_Support.c: 81: I2C_Write(minute);
  7761  00131A  505F               	movf	_minute,w,c
  7762  00131C  EC72  F00B         	call	_I2C_Write
  7763                           
  7764                           ;I2C_Support.c: 82: I2C_Write(hour);
  7765  001320  505D               	movf	_hour,w,c
  7766  001322  EC72  F00B         	call	_I2C_Write
  7767                           
  7768                           ;I2C_Support.c: 83: I2C_Write(dow);
  7769  001326  505B               	movf	_dow,w,c
  7770  001328  EC72  F00B         	call	_I2C_Write
  7771                           
  7772                           ;I2C_Support.c: 84: I2C_Write(day);
  7773  00132C  505A               	movf	_day,w,c
  7774  00132E  EC72  F00B         	call	_I2C_Write
  7775                           
  7776                           ;I2C_Support.c: 85: I2C_Write(month);
  7777  001332  5060               	movf	_month,w,c
  7778  001334  EC72  F00B         	call	_I2C_Write
  7779                           
  7780                           ;I2C_Support.c: 86: I2C_Write(year);
  7781  001338  506C               	movf	_year,w,c
  7782  00133A  EC72  F00B         	call	_I2C_Write
  7783                           
  7784                           ;I2C_Support.c: 87: I2C_Stop();
  7785  00133E  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7786  001342  0012               	return		;funcret
  7787  001344                     __end_of_DS3231_Setup_Time:
  7788                           	opt stack 0
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           intcon2	equ	0xFF1
  7797                           postinc0	equ	0xFEE
  7798                           wreg	equ	0xFE8
  7799                           postdec1	equ	0xFE5
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _DS3231_Read_Time *****************
  7809 ;; Defined at:
  7810 ;;		line 44 in file "I2C_Support.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;  Device          1   20[COMRAM] unsigned char 
  7815 ;;  Address         1   19[COMRAM] unsigned char 
  7816 ;;  Data_Ret        1    0        unsigned char 
  7817 ;; Return value:  Size  Location     Type
  7818 ;;		None               void
  7819 ;; Registers used:
  7820 ;;		wreg, status,2, status,0, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;Total ram usage:        2 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:    6
  7833 ;; This function calls:
  7834 ;;		_I2C_ReStart
  7835 ;;		_I2C_Read
  7836 ;;		_I2C_Start
  7837 ;;		_I2C_Stop
  7838 ;;		_I2C_Write
  7839 ;; This function is called by:
  7840 ;;		_main
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text42
  7845  001344                     __ptext42:
  7846                           	opt stack 0
  7847  001344                     _DS3231_Read_Time:
  7848                           	opt stack 24
  7849                           
  7850                           ;I2C_Support.c: 46: char Device = 0x68;
  7851                           
  7852                           ;incstack = 0
  7853  001344  0E68               	movlw	104
  7854  001346  6E15               	movwf	DS3231_Read_Time@Device,c
  7855                           
  7856                           ;I2C_Support.c: 47: char Address = 0x00;
  7857  001348  0E00               	movlw	0
  7858  00134A  6E14               	movwf	DS3231_Read_Time@Address,c
  7859                           
  7860                           ;I2C_Support.c: 49: char Data_Ret;
  7861                           ;I2C_Support.c: 50: I2C_Start();
  7862  00134C  ECA3  F00C         	call	_I2C_Start	;wreg free
  7863                           
  7864                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  7865  001350  5015               	movf	DS3231_Read_Time@Device,w,c
  7866  001352  2415               	addwf	DS3231_Read_Time@Device,w,c
  7867  001354  EC72  F00B         	call	_I2C_Write
  7868                           
  7869                           ;I2C_Support.c: 52: I2C_Write(Address);
  7870  001358  5014               	movf	DS3231_Read_Time@Address,w,c
  7871  00135A  EC72  F00B         	call	_I2C_Write
  7872                           
  7873                           ;I2C_Support.c: 53: I2C_ReStart();
  7874  00135E  EC72  F00C         	call	_I2C_ReStart	;wreg free
  7875                           
  7876                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  7877  001362  80D8               	bsf	status,0,c
  7878  001364  3415               	rlcf	DS3231_Read_Time@Device,w,c
  7879  001366  EC72  F00B         	call	_I2C_Write
  7880                           
  7881                           ;I2C_Support.c: 55: second = I2C_Read(1);
  7882  00136A  0E01               	movlw	1
  7883  00136C  ECF0  F00A         	call	_I2C_Read
  7884  001370  6E62               	movwf	_second,c
  7885                           
  7886                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  7887  001372  0E01               	movlw	1
  7888  001374  ECF0  F00A         	call	_I2C_Read
  7889  001378  6E5F               	movwf	_minute,c
  7890                           
  7891                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  7892  00137A  0E01               	movlw	1
  7893  00137C  ECF0  F00A         	call	_I2C_Read
  7894  001380  6E5D               	movwf	_hour,c
  7895                           
  7896                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  7897  001382  0E01               	movlw	1
  7898  001384  ECF0  F00A         	call	_I2C_Read
  7899  001388  6E5B               	movwf	_dow,c
  7900                           
  7901                           ;I2C_Support.c: 59: day = I2C_Read(1);
  7902  00138A  0E01               	movlw	1
  7903  00138C  ECF0  F00A         	call	_I2C_Read
  7904  001390  6E5A               	movwf	_day,c
  7905                           
  7906                           ;I2C_Support.c: 60: month = I2C_Read(1);
  7907  001392  0E01               	movlw	1
  7908  001394  ECF0  F00A         	call	_I2C_Read
  7909  001398  6E60               	movwf	_month,c
  7910                           
  7911                           ;I2C_Support.c: 61: year = I2C_Read(0);
  7912  00139A  0E00               	movlw	0
  7913  00139C  ECF0  F00A         	call	_I2C_Read
  7914  0013A0  6E6C               	movwf	_year,c
  7915                           
  7916                           ;I2C_Support.c: 62: I2C_Stop();
  7917  0013A2  EC9A  F00C         	call	_I2C_Stop	;wreg free
  7918  0013A6  0012               	return		;funcret
  7919  0013A8                     __end_of_DS3231_Read_Time:
  7920                           	opt stack 0
  7921                           tblptru	equ	0xFF8
  7922                           tblptrh	equ	0xFF7
  7923                           tblptrl	equ	0xFF6
  7924                           tablat	equ	0xFF5
  7925                           prodh	equ	0xFF4
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           intcon2	equ	0xFF1
  7929                           postinc0	equ	0xFEE
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function _DS1621_Read_Temp *****************
  7941 ;; Defined at:
  7942 ;;		line 29 in file "I2C_Support.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;		None
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  Device          1   23[COMRAM] unsigned char 
  7947 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  7948 ;;  Cmd             1   21[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  2   19[COMRAM] int 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;Total ram usage:        5 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    6
  7965 ;; This function calls:
  7966 ;;		_I2C_ReStart
  7967 ;;		_I2C_Read
  7968 ;;		_I2C_Start
  7969 ;;		_I2C_Stop
  7970 ;;		_I2C_Write
  7971 ;; This function is called by:
  7972 ;;		_main
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text43
  7977  001722                     __ptext43:
  7978                           	opt stack 0
  7979  001722                     _DS1621_Read_Temp:
  7980                           	opt stack 24
  7981                           
  7982                           ;I2C_Support.c: 31: char Device = 0x48;
  7983                           
  7984                           ;incstack = 0
  7985  001722  0E48               	movlw	72
  7986  001724  6E18               	movwf	DS1621_Read_Temp@Device,c
  7987                           
  7988                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  7989  001726  0EAA               	movlw	170
  7990  001728  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  7991                           
  7992                           ;I2C_Support.c: 33: char Data_Ret;
  7993                           ;I2C_Support.c: 34: I2C_Start();
  7994  00172A  ECA3  F00C         	call	_I2C_Start	;wreg free
  7995                           
  7996                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  7997  00172E  5018               	movf	DS1621_Read_Temp@Device,w,c
  7998  001730  2418               	addwf	DS1621_Read_Temp@Device,w,c
  7999  001732  EC72  F00B         	call	_I2C_Write
  8000                           
  8001                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  8002  001736  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8003  001738  EC72  F00B         	call	_I2C_Write
  8004                           
  8005                           ;I2C_Support.c: 37: I2C_ReStart();
  8006  00173C  EC72  F00C         	call	_I2C_ReStart	;wreg free
  8007                           
  8008                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  8009  001740  80D8               	bsf	status,0,c
  8010  001742  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8011  001744  EC72  F00B         	call	_I2C_Write
  8012                           
  8013                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  8014  001748  0E00               	movlw	0
  8015  00174A  ECF0  F00A         	call	_I2C_Read
  8016  00174E  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8017                           
  8018                           ;I2C_Support.c: 40: I2C_Stop();
  8019  001750  EC9A  F00C         	call	_I2C_Stop	;wreg free
  8020                           
  8021                           ;I2C_Support.c: 41: return Data_Ret;
  8022  001754  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8023  001758  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8024  00175A  D000               	goto	l509
  8025  00175C                     l509:
  8026  00175C  0012               	return		;funcret
  8027  00175E                     __end_of_DS1621_Read_Temp:
  8028                           	opt stack 0
  8029                           tblptru	equ	0xFF8
  8030                           tblptrh	equ	0xFF7
  8031                           tblptrl	equ	0xFF6
  8032                           tablat	equ	0xFF5
  8033                           prodh	equ	0xFF4
  8034                           prodl	equ	0xFF3
  8035                           intcon	equ	0xFF2
  8036                           intcon2	equ	0xFF1
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           postdec1	equ	0xFE5
  8040                           fsr1l	equ	0xFE1
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           fsr2h	equ	0xFDA
  8045                           fsr2l	equ	0xFD9
  8046                           status	equ	0xFD8
  8047                           
  8048 ;; *************** function _I2C_Write *****************
  8049 ;; Defined at:
  8050 ;;		line 37 in file "I2C_Soft.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  outByte         1    wreg     unsigned char 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  outByte         1   16[COMRAM] unsigned char 
  8055 ;;  n               1   17[COMRAM] unsigned char 
  8056 ;; Return value:  Size  Location     Type
  8057 ;;		None               void
  8058 ;; Registers used:
  8059 ;;		wreg, status,2, status,0, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;Total ram usage:        2 bytes
  8070 ;; Hardware stack levels used:    1
  8071 ;; Hardware stack levels required when called:    4
  8072 ;; This function calls:
  8073 ;;		_i2cHighScl
  8074 ;;		_i2cHighSda
  8075 ;;		_i2cLowScl
  8076 ;;		_i2cLowSda
  8077 ;; This function is called by:
  8078 ;;		_I2C_Write_Cmd_Only
  8079 ;;		_I2C_Write_Cmd_Write_Data
  8080 ;;		_DS1621_Read_Temp
  8081 ;;		_DS3231_Read_Time
  8082 ;;		_DS3231_Setup_Time
  8083 ;;		_I2C_Write_Address_Read_One_Byte
  8084 ;;		_I2C_Write_Address_Write_One_Byte
  8085 ;;		_I2C_Write_Cmd_Read_One_Byte
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text44
  8090  0016E4                     __ptext44:
  8091                           	opt stack 0
  8092  0016E4                     _I2C_Write:
  8093                           	opt stack 23
  8094                           
  8095                           ;incstack = 0
  8096                           ;I2C_Write@outByte stored from wreg
  8097  0016E4  6E11               	movwf	I2C_Write@outByte,c
  8098                           
  8099                           ;I2C_Soft.c: 39: unsigned char n;
  8100                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  8101  0016E6  0E00               	movlw	0
  8102  0016E8  6E12               	movwf	I2C_Write@n,c
  8103  0016EA                     l4197:
  8104  0016EA  0E07               	movlw	7
  8105  0016EC  6412               	cpfsgt	I2C_Write@n,c
  8106  0016EE  D001               	goto	l429
  8107  0016F0  D011               	goto	l4215
  8108  0016F2                     l429:
  8109                           
  8110                           ;I2C_Soft.c: 41: {
  8111                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  8112  0016F2  AE11               	btfss	I2C_Write@outByte,7,c
  8113  0016F4  D003               	goto	l4203
  8114  0016F6  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8115  0016FA  D003               	goto	l4205
  8116  0016FC                     l4203:
  8117                           
  8118                           ;I2C_Soft.c: 43: else i2cLowSda();
  8119  0016FC  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8120  001700  D000               	goto	l4205
  8121  001702                     l4205:
  8122                           
  8123                           ;I2C_Soft.c: 44: i2cHighScl();
  8124  001702  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8125                           
  8126                           ;I2C_Soft.c: 45: i2cLowScl();
  8127  001706  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8128                           
  8129                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  8130  00170A  5011               	movf	I2C_Write@outByte,w,c
  8131  00170C  2411               	addwf	I2C_Write@outByte,w,c
  8132  00170E  6E11               	movwf	I2C_Write@outByte,c
  8133  001710  2A12               	incf	I2C_Write@n,f,c
  8134  001712  D7EB               	goto	l4197
  8135  001714                     l4215:
  8136                           
  8137                           ;I2C_Soft.c: 47: }
  8138                           ;I2C_Soft.c: 48: i2cHighSda();
  8139  001714  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8140                           
  8141                           ;I2C_Soft.c: 49: i2cHighScl();
  8142  001718  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8143                           
  8144                           ;I2C_Soft.c: 50: i2cLowScl();
  8145  00171C  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8146  001720  0012               	return		;funcret
  8147  001722                     __end_of_I2C_Write:
  8148                           	opt stack 0
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           intcon2	equ	0xFF1
  8157                           postinc0	equ	0xFEE
  8158                           wreg	equ	0xFE8
  8159                           postdec1	equ	0xFE5
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           fsr2h	equ	0xFDA
  8165                           fsr2l	equ	0xFD9
  8166                           status	equ	0xFD8
  8167                           
  8168 ;; *************** function _I2C_Stop *****************
  8169 ;; Defined at:
  8170 ;;		line 84 in file "I2C_Soft.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;		None
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;		None
  8175 ;; Return value:  Size  Location     Type
  8176 ;;		None               void
  8177 ;; Registers used:
  8178 ;;		wreg, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8188 ;;Total ram usage:        0 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    4
  8191 ;; This function calls:
  8192 ;;		_i2cHighScl
  8193 ;;		_i2cHighSda
  8194 ;;		_i2cLowScl
  8195 ;;		_i2cLowSda
  8196 ;; This function is called by:
  8197 ;;		_I2C_Write_Cmd_Only
  8198 ;;		_I2C_Write_Cmd_Write_Data
  8199 ;;		_DS1621_Read_Temp
  8200 ;;		_DS3231_Read_Time
  8201 ;;		_DS3231_Setup_Time
  8202 ;;		_I2C_Write_Address_Read_One_Byte
  8203 ;;		_I2C_Write_Address_Write_One_Byte
  8204 ;;		_I2C_Write_Cmd_Read_One_Byte
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text45
  8209  001934                     __ptext45:
  8210                           	opt stack 0
  8211  001934                     _I2C_Stop:
  8212                           	opt stack 23
  8213                           
  8214                           ;I2C_Soft.c: 86: i2cLowScl();
  8215                           
  8216                           ;incstack = 0
  8217  001934  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8218                           
  8219                           ;I2C_Soft.c: 87: i2cLowSda();
  8220  001938  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8221                           
  8222                           ;I2C_Soft.c: 88: i2cHighScl();
  8223  00193C  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8224                           
  8225                           ;I2C_Soft.c: 89: i2cHighSda();
  8226  001940  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8227  001944  0012               	return		;funcret
  8228  001946                     __end_of_I2C_Stop:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postdec1	equ	0xFE5
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function _I2C_Start *****************
  8250 ;; Defined at:
  8251 ;;		line 67 in file "I2C_Soft.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;		None               void
  8258 ;; Registers used:
  8259 ;;		wreg, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;Total ram usage:        0 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    4
  8272 ;; This function calls:
  8273 ;;		_i2cHighScl
  8274 ;;		_i2cHighSda
  8275 ;;		_i2cLowScl
  8276 ;;		_i2cLowSda
  8277 ;; This function is called by:
  8278 ;;		_I2C_Write_Cmd_Only
  8279 ;;		_I2C_Write_Cmd_Write_Data
  8280 ;;		_DS1621_Read_Temp
  8281 ;;		_DS3231_Read_Time
  8282 ;;		_DS3231_Setup_Time
  8283 ;;		_I2C_Write_Address_Read_One_Byte
  8284 ;;		_I2C_Write_Address_Write_One_Byte
  8285 ;;		_I2C_Write_Cmd_Read_One_Byte
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text46
  8290  001946                     __ptext46:
  8291                           	opt stack 0
  8292  001946                     _I2C_Start:
  8293                           	opt stack 23
  8294                           
  8295                           ;I2C_Soft.c: 69: i2cHighSda();
  8296                           
  8297                           ;incstack = 0
  8298  001946  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8299                           
  8300                           ;I2C_Soft.c: 70: i2cHighScl();
  8301  00194A  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8302                           
  8303                           ;I2C_Soft.c: 71: i2cLowSda();
  8304  00194E  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8305                           
  8306                           ;I2C_Soft.c: 72: i2cLowScl();
  8307  001952  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8308  001956  0012               	return		;funcret
  8309  001958                     __end_of_I2C_Start:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _I2C_Read *****************
  8331 ;; Defined at:
  8332 ;;		line 16 in file "I2C_Soft.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  ack             1    wreg     unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  ack             1   16[COMRAM] unsigned char 
  8337 ;;  inByte          1   18[COMRAM] unsigned char 
  8338 ;;  n               1   17[COMRAM] unsigned char 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      unsigned char 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        3 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    5
  8355 ;; This function calls:
  8356 ;;		_i2cAck
  8357 ;;		_i2cHighScl
  8358 ;;		_i2cHighSda
  8359 ;;		_i2cLowScl
  8360 ;;		_i2cNack
  8361 ;; This function is called by:
  8362 ;;		_DS1621_Read_Temp
  8363 ;;		_DS3231_Read_Time
  8364 ;;		_I2C_Write_Address_Read_One_Byte
  8365 ;;		_I2C_Write_Cmd_Read_One_Byte
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text47
  8370  0015E0                     __ptext47:
  8371                           	opt stack 0
  8372  0015E0                     _I2C_Read:
  8373                           	opt stack 24
  8374                           
  8375                           ;incstack = 0
  8376                           ;I2C_Read@ack stored from wreg
  8377  0015E0  6E11               	movwf	I2C_Read@ack,c
  8378                           
  8379                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  8380                           ;I2C_Soft.c: 19: i2cHighSda();
  8381  0015E2  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8382                           
  8383                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  8384  0015E6  0E00               	movlw	0
  8385  0015E8  6E12               	movwf	I2C_Read@n,c
  8386  0015EA                     l4641:
  8387  0015EA  0E07               	movlw	7
  8388  0015EC  6412               	cpfsgt	I2C_Read@n,c
  8389  0015EE  D001               	goto	l4645
  8390  0015F0  D00F               	goto	l4659
  8391  0015F2                     l4645:
  8392                           
  8393                           ;I2C_Soft.c: 21: {
  8394                           ;I2C_Soft.c: 22: i2cHighScl();
  8395  0015F2  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8396                           
  8397                           ;I2C_Soft.c: 24: if (PORTAbits.RA5)
  8398  0015F6  AA80               	btfss	3968,5,c	;volatile
  8399  0015F8  D003               	goto	l4651
  8400                           
  8401                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  8402  0015FA  80D8               	bsf	status,0,c
  8403  0015FC  3613               	rlcf	I2C_Read@inByte,f,c
  8404  0015FE  D004               	goto	l4653
  8405  001600                     l4651:
  8406                           
  8407                           ;I2C_Soft.c: 26: else
  8408                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  8409  001600  5013               	movf	I2C_Read@inByte,w,c
  8410  001602  2413               	addwf	I2C_Read@inByte,w,c
  8411  001604  6E13               	movwf	I2C_Read@inByte,c
  8412  001606  D000               	goto	l4653
  8413  001608                     l4653:
  8414                           
  8415                           ;I2C_Soft.c: 28: i2cLowScl();
  8416  001608  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8417  00160C  2A12               	incf	I2C_Read@n,f,c
  8418  00160E  D7ED               	goto	l4641
  8419  001610                     l4659:
  8420                           
  8421                           ;I2C_Soft.c: 29: }
  8422                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  8423  001610  5011               	movf	I2C_Read@ack,w,c
  8424  001612  B4D8               	btfsc	status,2,c
  8425  001614  D003               	goto	l4663
  8426  001616  ECAC  F00C         	call	_i2cAck	;wreg free
  8427  00161A  D003               	goto	l4665
  8428  00161C                     l4663:
  8429                           
  8430                           ;I2C_Soft.c: 31: else i2cNack();
  8431  00161C  ECE6  F00C         	call	_i2cNack	;wreg free
  8432  001620  D000               	goto	l4665
  8433  001622                     l4665:
  8434                           
  8435                           ;I2C_Soft.c: 34: return(inByte);
  8436  001622  5013               	movf	I2C_Read@inByte,w,c
  8437  001624  D000               	goto	l426
  8438  001626                     l426:
  8439  001626  0012               	return		;funcret
  8440  001628                     __end_of_I2C_Read:
  8441                           	opt stack 0
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           intcon	equ	0xFF2
  8449                           intcon2	equ	0xFF1
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _i2cNack *****************
  8462 ;; Defined at:
  8463 ;;		line 53 in file "I2C_Soft.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;		None               void
  8470 ;; Registers used:
  8471 ;;		wreg, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    4
  8484 ;; This function calls:
  8485 ;;		_i2cHighScl
  8486 ;;		_i2cLowScl
  8487 ;; This function is called by:
  8488 ;;		_I2C_Read
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text48
  8493  0019CC                     __ptext48:
  8494                           	opt stack 0
  8495  0019CC                     _i2cNack:
  8496                           	opt stack 24
  8497                           
  8498                           ;I2C_Soft.c: 55: i2cHighScl();
  8499                           
  8500                           ;incstack = 0
  8501  0019CC  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8502                           
  8503                           ;I2C_Soft.c: 56: i2cLowScl();
  8504  0019D0  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8505  0019D4  0012               	return		;funcret
  8506  0019D6                     __end_of_i2cNack:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           prodh	equ	0xFF4
  8513                           prodl	equ	0xFF3
  8514                           intcon	equ	0xFF2
  8515                           intcon2	equ	0xFF1
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           fsr2h	equ	0xFDA
  8524                           fsr2l	equ	0xFD9
  8525                           status	equ	0xFD8
  8526                           
  8527 ;; *************** function _i2cAck *****************
  8528 ;; Defined at:
  8529 ;;		line 59 in file "I2C_Soft.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;		None               void
  8536 ;; Registers used:
  8537 ;;		wreg, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    4
  8550 ;; This function calls:
  8551 ;;		_i2cHighScl
  8552 ;;		_i2cHighSda
  8553 ;;		_i2cLowScl
  8554 ;;		_i2cLowSda
  8555 ;; This function is called by:
  8556 ;;		_I2C_Read
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text49
  8561  001958                     __ptext49:
  8562                           	opt stack 0
  8563  001958                     _i2cAck:
  8564                           	opt stack 24
  8565                           
  8566                           ;I2C_Soft.c: 61: i2cLowSda();
  8567                           
  8568                           ;incstack = 0
  8569  001958  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8570                           
  8571                           ;I2C_Soft.c: 62: i2cHighScl();
  8572  00195C  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8573                           
  8574                           ;I2C_Soft.c: 63: i2cLowScl();
  8575  001960  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8576                           
  8577                           ;I2C_Soft.c: 64: i2cHighSda();
  8578  001964  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8579  001968  0012               	return		;funcret
  8580  00196A                     __end_of_i2cAck:
  8581                           	opt stack 0
  8582                           tblptru	equ	0xFF8
  8583                           tblptrh	equ	0xFF7
  8584                           tblptrl	equ	0xFF6
  8585                           tablat	equ	0xFF5
  8586                           prodh	equ	0xFF4
  8587                           prodl	equ	0xFF3
  8588                           intcon	equ	0xFF2
  8589                           intcon2	equ	0xFF1
  8590                           postinc0	equ	0xFEE
  8591                           wreg	equ	0xFE8
  8592                           postdec1	equ	0xFE5
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _I2C_ReStart *****************
  8602 ;; Defined at:
  8603 ;;		line 75 in file "I2C_Soft.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;Total ram usage:        0 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    4
  8624 ;; This function calls:
  8625 ;;		_i2cHighScl
  8626 ;;		_i2cHighSda
  8627 ;;		_i2cLowScl
  8628 ;;		_i2cLowSda
  8629 ;; This function is called by:
  8630 ;;		_DS1621_Read_Temp
  8631 ;;		_DS3231_Read_Time
  8632 ;;		_I2C_Write_Address_Read_One_Byte
  8633 ;;		_I2C_Write_Cmd_Read_One_Byte
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text50
  8638  0018E4                     __ptext50:
  8639                           	opt stack 0
  8640  0018E4                     _I2C_ReStart:
  8641                           	opt stack 25
  8642                           
  8643                           ;I2C_Soft.c: 77: i2cLowScl();
  8644                           
  8645                           ;incstack = 0
  8646  0018E4  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8647                           
  8648                           ;I2C_Soft.c: 78: i2cHighSda();
  8649  0018E8  ECF8  F00C         	call	_i2cHighSda	;wreg free
  8650                           
  8651                           ;I2C_Soft.c: 79: i2cHighScl();
  8652  0018EC  ECD5  F00C         	call	_i2cHighScl	;wreg free
  8653                           
  8654                           ;I2C_Soft.c: 80: i2cLowSda();
  8655  0018F0  ECEB  F00C         	call	_i2cLowSda	;wreg free
  8656                           
  8657                           ;I2C_Soft.c: 81: i2cLowScl();
  8658  0018F4  ECF4  F00C         	call	_i2cLowScl	;wreg free
  8659  0018F8  0012               	return		;funcret
  8660  0018FA                     __end_of_I2C_ReStart:
  8661                           	opt stack 0
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           intcon	equ	0xFF2
  8669                           intcon2	equ	0xFF1
  8670                           postinc0	equ	0xFEE
  8671                           wreg	equ	0xFE8
  8672                           postdec1	equ	0xFE5
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function _i2cLowSda *****************
  8682 ;; Defined at:
  8683 ;;		line 98 in file "I2C_Soft.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;		None
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;		None
  8688 ;; Return value:  Size  Location     Type
  8689 ;;		None               void
  8690 ;; Registers used:
  8691 ;;		None
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;Total ram usage:        0 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; Hardware stack levels required when called:    3
  8704 ;; This function calls:
  8705 ;;		Nothing
  8706 ;; This function is called by:
  8707 ;;		_I2C_Write
  8708 ;;		_i2cAck
  8709 ;;		_I2C_Start
  8710 ;;		_I2C_ReStart
  8711 ;;		_I2C_Stop
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text51
  8716  0019D6                     __ptext51:
  8717                           	opt stack 0
  8718  0019D6                     _i2cLowSda:
  8719                           	opt stack 23
  8720                           
  8721                           ;I2C_Soft.c: 100: PORTAbits.RA5 = 0;
  8722                           
  8723                           ;incstack = 0
  8724  0019D6  9A80               	bcf	3968,5,c	;volatile
  8725                           
  8726                           ;I2C_Soft.c: 101: TRISAbits.RA5 = 0;
  8727  0019D8  9A92               	bcf	3986,5,c	;volatile
  8728                           
  8729                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8730  0019DA  D000               	nop2		;2 cycle nop
  8731  0019DC  D000               	nop2		;2 cycle nop
  8732  0019DE  0012               	return		;funcret
  8733  0019E0                     __end_of_i2cLowSda:
  8734                           	opt stack 0
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           intcon2	equ	0xFF1
  8743                           postinc0	equ	0xFEE
  8744                           wreg	equ	0xFE8
  8745                           postdec1	equ	0xFE5
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function _i2cLowScl *****************
  8755 ;; Defined at:
  8756 ;;		line 111 in file "I2C_Soft.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;		None
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;		None
  8761 ;; Return value:  Size  Location     Type
  8762 ;;		None               void
  8763 ;; Registers used:
  8764 ;;		None
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;Total ram usage:        0 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    3
  8777 ;; This function calls:
  8778 ;;		Nothing
  8779 ;; This function is called by:
  8780 ;;		_I2C_Read
  8781 ;;		_I2C_Write
  8782 ;;		_i2cNack
  8783 ;;		_i2cAck
  8784 ;;		_I2C_Start
  8785 ;;		_I2C_ReStart
  8786 ;;		_I2C_Stop
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           	psect	text52
  8791  0019E8                     __ptext52:
  8792                           	opt stack 0
  8793  0019E8                     _i2cLowScl:
  8794                           	opt stack 23
  8795                           
  8796                           ;I2C_Soft.c: 113: PORTBbits.RB5 = 0;
  8797                           
  8798                           ;incstack = 0
  8799  0019E8  9A81               	bcf	3969,5,c	;volatile
  8800                           
  8801                           ;I2C_Soft.c: 114: TRISBbits.RB5 = 0;
  8802  0019EA  9A93               	bcf	3987,5,c	;volatile
  8803                           
  8804                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8805  0019EC  D000               	nop2		;2 cycle nop
  8806  0019EE  0012               	return		;funcret
  8807  0019F0                     __end_of_i2cLowScl:
  8808                           	opt stack 0
  8809                           tblptru	equ	0xFF8
  8810                           tblptrh	equ	0xFF7
  8811                           tblptrl	equ	0xFF6
  8812                           tablat	equ	0xFF5
  8813                           prodh	equ	0xFF4
  8814                           prodl	equ	0xFF3
  8815                           intcon	equ	0xFF2
  8816                           intcon2	equ	0xFF1
  8817                           postinc0	equ	0xFEE
  8818                           wreg	equ	0xFE8
  8819                           postdec1	equ	0xFE5
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           fsr2h	equ	0xFDA
  8825                           fsr2l	equ	0xFD9
  8826                           status	equ	0xFD8
  8827                           
  8828 ;; *************** function _i2cHighSda *****************
  8829 ;; Defined at:
  8830 ;;		line 92 in file "I2C_Soft.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		None
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;Total ram usage:        0 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    3
  8851 ;; This function calls:
  8852 ;;		Nothing
  8853 ;; This function is called by:
  8854 ;;		_I2C_Init
  8855 ;;		_I2C_Read
  8856 ;;		_I2C_Write
  8857 ;;		_i2cAck
  8858 ;;		_I2C_Start
  8859 ;;		_I2C_ReStart
  8860 ;;		_I2C_Stop
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           	psect	text53
  8865  0019F0                     __ptext53:
  8866                           	opt stack 0
  8867  0019F0                     _i2cHighSda:
  8868                           	opt stack 25
  8869                           
  8870                           ;I2C_Soft.c: 94: TRISAbits.RA5 = 1;
  8871                           
  8872                           ;incstack = 0
  8873  0019F0  8A92               	bsf	3986,5,c	;volatile
  8874                           
  8875                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8876  0019F2  D000               	nop2		;2 cycle nop
  8877  0019F4  D000               	nop2		;2 cycle nop
  8878  0019F6  0012               	return		;funcret
  8879  0019F8                     __end_of_i2cHighSda:
  8880                           	opt stack 0
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           intcon2	equ	0xFF1
  8889                           postinc0	equ	0xFEE
  8890                           wreg	equ	0xFE8
  8891                           postdec1	equ	0xFE5
  8892                           fsr1l	equ	0xFE1
  8893                           indf2	equ	0xFDF
  8894                           postinc2	equ	0xFDE
  8895                           postdec2	equ	0xFDD
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function _i2cHighScl *****************
  8901 ;; Defined at:
  8902 ;;		line 105 in file "I2C_Soft.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;		None
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;		None
  8907 ;; Return value:  Size  Location     Type
  8908 ;;		None               void
  8909 ;; Registers used:
  8910 ;;		wreg
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;Total ram usage:        0 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    3
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_I2C_Init
  8927 ;;		_I2C_Read
  8928 ;;		_I2C_Write
  8929 ;;		_i2cNack
  8930 ;;		_i2cAck
  8931 ;;		_I2C_Start
  8932 ;;		_I2C_ReStart
  8933 ;;		_I2C_Stop
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text54
  8938  0019AA                     __ptext54:
  8939                           	opt stack 0
  8940  0019AA                     _i2cHighScl:
  8941                           	opt stack 25
  8942                           
  8943                           ;I2C_Soft.c: 107: TRISBbits.RB5 = 1;
  8944                           
  8945                           ;incstack = 0
  8946  0019AA  8A93               	bsf	3987,5,c	;volatile
  8947                           
  8948                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8949  0019AC  0E06               	movlw	6
  8950  0019AE                     u3927:
  8951  0019AE  2EE8               	decfsz	wreg,f,c
  8952  0019B0  D7FE               	goto	u3927
  8953  0019B2  D000               	nop2		;nop
  8954  0019B4  0012               	return		;funcret
  8955  0019B6                     __end_of_i2cHighScl:
  8956                           	opt stack 0
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           prodh	equ	0xFF4
  8962                           prodl	equ	0xFF3
  8963                           intcon	equ	0xFF2
  8964                           intcon2	equ	0xFF1
  8965                           postinc0	equ	0xFEE
  8966                           wreg	equ	0xFE8
  8967                           postdec1	equ	0xFE5
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _Activate_Buzzer *****************
  8977 ;; Defined at:
  8978 ;;		line 220 in file "Lab11p1.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;		None
  8983 ;; Return value:  Size  Location     Type
  8984 ;;		None               void
  8985 ;; Registers used:
  8986 ;;		wreg, status,2
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;Total ram usage:        0 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    3
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_main
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           	psect	text55
  9007  00196A                     __ptext55:
  9008                           	opt stack 0
  9009  00196A                     _Activate_Buzzer:
  9010                           	opt stack 27
  9011                           
  9012                           ;Lab11p1.c: 222: PR2 = 0b11111001 ;
  9013                           
  9014                           ;incstack = 0
  9015  00196A  0EF9               	movlw	249
  9016  00196C  6ECB               	movwf	4043,c	;volatile
  9017                           
  9018                           ;Lab11p1.c: 223: T2CON = 0b00000101 ;
  9019  00196E  0E05               	movlw	5
  9020  001970  6ECA               	movwf	4042,c	;volatile
  9021                           
  9022                           ;Lab11p1.c: 224: CCPR2L = 0b01001010 ;
  9023  001972  0E4A               	movlw	74
  9024  001974  6EBB               	movwf	4027,c	;volatile
  9025                           
  9026                           ;Lab11p1.c: 225: CCP2CON = 0b00111100 ;
  9027  001976  0E3C               	movlw	60
  9028  001978  6EBA               	movwf	4026,c	;volatile
  9029  00197A  0012               	return		;funcret
  9030  00197C                     __end_of_Activate_Buzzer:
  9031                           	opt stack 0
  9032                           tblptru	equ	0xFF8
  9033                           tblptrh	equ	0xFF7
  9034                           tblptrl	equ	0xFF6
  9035                           tablat	equ	0xFF5
  9036                           prodh	equ	0xFF4
  9037                           prodl	equ	0xFF3
  9038                           intcon	equ	0xFF2
  9039                           intcon2	equ	0xFF1
  9040                           postinc0	equ	0xFEE
  9041                           wreg	equ	0xFE8
  9042                           postdec1	equ	0xFE5
  9043                           fsr1l	equ	0xFE1
  9044                           indf2	equ	0xFDF
  9045                           postinc2	equ	0xFDE
  9046                           postdec2	equ	0xFDD
  9047                           fsr2h	equ	0xFDA
  9048                           fsr2l	equ	0xFD9
  9049                           status	equ	0xFD8
  9050                           
  9051 ;; *************** function _chkisr *****************
  9052 ;; Defined at:
  9053 ;;		line 17 in file "Interrupt.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;		None               void
  9060 ;; Registers used:
  9061 ;;		wreg, status,2, status,0, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;Total ram usage:       14 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    2
  9074 ;; This function calls:
  9075 ;;		_INT0_isr
  9076 ;;		_TIMER1_isr
  9077 ;; This function is called by:
  9078 ;;		Interrupt level 2
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           	psect	intcode
  9083  000008                     __pintcode:
  9084                           	opt stack 0
  9085  000008                     _chkisr:
  9086                           	opt stack 20
  9087                           
  9088                           ;incstack = 0
  9089  000008  CFFA F003          	movff	pclath,??_chkisr
  9090  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9091  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9092  000014  EDBC  F008         	call	int_func,f	;refresh shadow registers
  9093                           pclatu	equ	0xFFB
  9094                           pclath	equ	0xFFA
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           intcon2	equ	0xFF1
  9103                           postinc0	equ	0xFEE
  9104                           fsr0l	equ	0xFE9
  9105                           wreg	equ	0xFE8
  9106                           postdec1	equ	0xFE5
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           fsr2h	equ	0xFDA
  9112                           fsr2l	equ	0xFD9
  9113                           status	equ	0xFD8
  9114                           
  9115                           	psect	intcode_body
  9116  001178                     __pintcode_body:
  9117                           	opt stack 20
  9118  001178                     int_func:
  9119                           	opt stack 20
  9120  001178  0006               	pop		; remove dummy address from shadow register refresh
  9121  00117A  CFEA F006          	movff	fsr0h,??_chkisr+3
  9122  00117E  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9123  001182  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9124  001186  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9125  00118A  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9126  00118E  CFF3 F00B          	movff	prodl,??_chkisr+8
  9127  001192  CFF4 F00C          	movff	prodh,??_chkisr+9
  9128  001196  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9129  00119A  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9130  00119E  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9131  0011A2  CFF5 F010          	movff	tablat,??_chkisr+13
  9132                           
  9133                           ;Interrupt.c: 19: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9134  0011A6  A09E               	btfss	3998,0,c	;volatile
  9135  0011A8  D003               	goto	i2l2743
  9136  0011AA  ECDB  F00C         	call	_TIMER1_isr	;wreg free
  9137  0011AE  D000               	goto	i2l2743
  9138  0011B0                     i2l2743:
  9139                           
  9140                           ;Interrupt.c: 20: if (INTCONbits.INT0IF == 1) INT0_isr();
  9141  0011B0  A2F2               	btfss	intcon,1,c	;volatile
  9142  0011B2  D003               	goto	i2l556
  9143  0011B4  ECC0  F003         	call	_INT0_isr	;wreg free
  9144  0011B8  D000               	goto	i2l556
  9145  0011BA                     i2l556:
  9146  0011BA  C010  FFF5         	movff	??_chkisr+13,tablat
  9147  0011BE  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9148  0011C2  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9149  0011C6  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9150  0011CA  C00C  FFF4         	movff	??_chkisr+9,prodh
  9151  0011CE  C00B  FFF3         	movff	??_chkisr+8,prodl
  9152  0011D2  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9153  0011D6  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9154  0011DA  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9155  0011DE  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9156  0011E2  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9157  0011E6  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9158  0011EA  C004  FFFB         	movff	??_chkisr+1,pclatu
  9159  0011EE  C003  FFFA         	movff	??_chkisr,pclath
  9160  0011F2  0011               	retfie		f
  9161  0011F4                     __end_of_chkisr:
  9162                           	opt stack 0
  9163                           pclatu	equ	0xFFB
  9164                           pclath	equ	0xFFA
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           intcon2	equ	0xFF1
  9173                           postinc0	equ	0xFEE
  9174                           fsr0h	equ	0xFEA
  9175                           fsr0l	equ	0xFE9
  9176                           wreg	equ	0xFE8
  9177                           postdec1	equ	0xFE5
  9178                           fsr1h	equ	0xFE2
  9179                           fsr1l	equ	0xFE1
  9180                           indf2	equ	0xFDF
  9181                           postinc2	equ	0xFDE
  9182                           postdec2	equ	0xFDD
  9183                           fsr2h	equ	0xFDA
  9184                           fsr2l	equ	0xFD9
  9185                           status	equ	0xFD8
  9186                           
  9187 ;; *************** function _TIMER1_isr *****************
  9188 ;; Defined at:
  9189 ;;		line 23 in file "Interrupt.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;		None
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;		None
  9194 ;; Return value:  Size  Location     Type
  9195 ;;		None               void
  9196 ;; Registers used:
  9197 ;;		wreg, status,2
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;Total ram usage:        0 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; This function calls:
  9210 ;;		Nothing
  9211 ;; This function is called by:
  9212 ;;		_chkisr
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text57
  9217  0019B6                     __ptext57:
  9218                           	opt stack 0
  9219  0019B6                     _TIMER1_isr:
  9220                           	opt stack 21
  9221                           
  9222                           ;Interrupt.c: 25: Nec_state = 0;
  9223                           
  9224                           ;incstack = 0
  9225  0019B6  0E00               	movlw	0
  9226  0019B8  6E51               	movwf	_Nec_state,c
  9227                           
  9228                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
  9229  0019BA  9CF1               	bcf	intcon2,6,c	;volatile
  9230                           
  9231                           ;Interrupt.c: 27: T1CONbits.TMR1ON = 0;
  9232  0019BC  90CD               	bcf	4045,0,c	;volatile
  9233                           
  9234                           ;Interrupt.c: 28: PIR1bits.TMR1IF = 0;
  9235  0019BE  909E               	bcf	3998,0,c	;volatile
  9236  0019C0  0012               	return		;funcret
  9237  0019C2                     __end_of_TIMER1_isr:
  9238                           	opt stack 0
  9239                           pclatu	equ	0xFFB
  9240                           pclath	equ	0xFFA
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           prodh	equ	0xFF4
  9246                           prodl	equ	0xFF3
  9247                           intcon	equ	0xFF2
  9248                           intcon2	equ	0xFF1
  9249                           postinc0	equ	0xFEE
  9250                           fsr0h	equ	0xFEA
  9251                           fsr0l	equ	0xFE9
  9252                           wreg	equ	0xFE8
  9253                           postdec1	equ	0xFE5
  9254                           fsr1h	equ	0xFE2
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function _INT0_isr *****************
  9264 ;; Defined at:
  9265 ;;		line 37 in file "Interrupt.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;		None
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;		None               void
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;Total ram usage:        2 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    1
  9286 ;; This function calls:
  9287 ;;		_force_nec_state0
  9288 ;; This function is called by:
  9289 ;;		_chkisr
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text58
  9294  000780                     __ptext58:
  9295                           	opt stack 0
  9296  000780                     _INT0_isr:
  9297                           	opt stack 20
  9298                           
  9299                           ;Interrupt.c: 39: INTCONbits.INT0IF = 0;
  9300                           
  9301                           ;incstack = 0
  9302  000780  92F2               	bcf	intcon,1,c	;volatile
  9303                           
  9304                           ;Interrupt.c: 40: if (Nec_state != 0)
  9305  000782  5051               	movf	_Nec_state,w,c
  9306  000784  B4D8               	btfsc	status,2,c
  9307  000786  D096               	goto	i2l2349
  9308                           
  9309                           ;Interrupt.c: 41: {
  9310                           ;Interrupt.c: 42: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9311  000788  50CE               	movf	4046,w,c	;volatile
  9312  00078A  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9313  00078E  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9314  000790  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9315  000794  6A01               	clrf	??_INT0_isr,c
  9316  000796  1001               	iorwf	??_INT0_isr,w,c
  9317  000798  6E48               	movwf	_Time_Elapsed,c
  9318  00079A  5002               	movf	??_INT0_isr+1,w,c
  9319  00079C  6E49               	movwf	_Time_Elapsed+1,c
  9320                           
  9321                           ;Interrupt.c: 43: TMR1H = 0;
  9322  00079E  0E00               	movlw	0
  9323  0007A0  6ECF               	movwf	4047,c	;volatile
  9324                           
  9325                           ;Interrupt.c: 44: TMR1L = 0;
  9326  0007A2  0E00               	movlw	0
  9327  0007A4  6ECE               	movwf	4046,c	;volatile
  9328                           
  9329                           ;Interrupt.c: 45: }
  9330                           ;Interrupt.c: 47: switch(Nec_state)
  9331  0007A6  D086               	goto	i2l2349
  9332  0007A8                     i2l2277:
  9333                           
  9334                           ;Interrupt.c: 50: {
  9335                           ;Interrupt.c: 52: TMR1H = 0;
  9336  0007A8  0E00               	movlw	0
  9337  0007AA  6ECF               	movwf	4047,c	;volatile
  9338                           
  9339                           ;Interrupt.c: 53: TMR1L = 0;
  9340  0007AC  0E00               	movlw	0
  9341  0007AE  6ECE               	movwf	4046,c	;volatile
  9342                           
  9343                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
  9344  0007B0  909E               	bcf	3998,0,c	;volatile
  9345                           
  9346                           ;Interrupt.c: 55: T1CON= 0x90;
  9347  0007B2  0E90               	movlw	144
  9348  0007B4  6ECD               	movwf	4045,c	;volatile
  9349                           
  9350                           ;Interrupt.c: 56: T1CONbits.TMR1ON = 1;
  9351  0007B6  80CD               	bsf	4045,0,c	;volatile
  9352                           
  9353                           ;Interrupt.c: 57: bit_count = 0;
  9354  0007B8  0E00               	movlw	0
  9355  0007BA  6E58               	movwf	_bit_count,c
  9356                           
  9357                           ;Interrupt.c: 58: Nec_code = 0;
  9358  0007BC  0E00               	movlw	0
  9359  0007BE  6E44               	movwf	_Nec_code,c
  9360  0007C0  0E00               	movlw	0
  9361  0007C2  6E45               	movwf	_Nec_code+1,c
  9362  0007C4  0E00               	movlw	0
  9363  0007C6  6E46               	movwf	_Nec_code+2,c
  9364  0007C8  0E00               	movlw	0
  9365  0007CA  6E47               	movwf	_Nec_code+3,c
  9366                           
  9367                           ;Interrupt.c: 59: Nec_state = 1;
  9368  0007CC  0E01               	movlw	1
  9369  0007CE  6E51               	movwf	_Nec_state,c
  9370  0007D0  D06F               	goto	i2l2343
  9371                           
  9372                           ;Interrupt.c: 61: return;
  9373                           
  9374                           ;Interrupt.c: 60: INTCON2bits.INTEDG0 = 1;
  9375  0007D2  D081               	goto	i2l568
  9376  0007D4                     i2l2287:
  9377                           
  9378                           ;Interrupt.c: 65: {
  9379                           ;Interrupt.c: 66: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9380  0007D4  0E35               	movlw	53
  9381  0007D6  5C48               	subwf	_Time_Elapsed,w,c
  9382  0007D8  0E21               	movlw	33
  9383  0007DA  5849               	subwfb	_Time_Elapsed+1,w,c
  9384  0007DC  A0D8               	btfss	status,0,c
  9385  0007DE  D009               	goto	i2l2293
  9386  0007E0  0E1C               	movlw	28
  9387  0007E2  5C48               	subwf	_Time_Elapsed,w,c
  9388  0007E4  0E25               	movlw	37
  9389  0007E6  5849               	subwfb	_Time_Elapsed+1,w,c
  9390  0007E8  B0D8               	btfsc	status,0,c
  9391  0007EA  D003               	goto	i2l2293
  9392                           
  9393                           ;Interrupt.c: 67: {
  9394                           ;Interrupt.c: 68: Nec_state = 2;
  9395  0007EC  0E02               	movlw	2
  9396  0007EE  6E51               	movwf	_Nec_state,c
  9397                           
  9398                           ;Interrupt.c: 69: }
  9399  0007F0  D02A               	goto	i2l2319
  9400  0007F2                     i2l2293:
  9401                           
  9402                           ;Interrupt.c: 70: else
  9403                           ;Interrupt.c: 71: {
  9404                           ;Interrupt.c: 72: force_nec_state0();
  9405  0007F2  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9406  0007F6  D027               	goto	i2l2319
  9407  0007F8  D026               	goto	i2l2319
  9408                           
  9409                           ;Interrupt.c: 75: return;
  9410                           
  9411                           ;Interrupt.c: 73: }
  9412                           ;Interrupt.c: 74: INTCON2bits.INTEDG0 = 0;
  9413  0007FA  D06D               	goto	i2l568
  9414  0007FC                     i2l2299:
  9415                           
  9416                           ;Interrupt.c: 79: {
  9417                           ;Interrupt.c: 80: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  9418  0007FC  0EA1               	movlw	161
  9419  0007FE  5C48               	subwf	_Time_Elapsed,w,c
  9420  000800  0E0F               	movlw	15
  9421  000802  5849               	subwfb	_Time_Elapsed+1,w,c
  9422  000804  A0D8               	btfss	status,0,c
  9423  000806  D009               	goto	i2l2305
  9424  000808  0E88               	movlw	136
  9425  00080A  5C48               	subwf	_Time_Elapsed,w,c
  9426  00080C  0E13               	movlw	19
  9427  00080E  5849               	subwfb	_Time_Elapsed+1,w,c
  9428  000810  B0D8               	btfsc	status,0,c
  9429  000812  D003               	goto	i2l2305
  9430  000814                     
  9431                           ;Interrupt.c: 81: {
  9432                           ;Interrupt.c: 82: Nec_state = 3;
  9433  000814  0E03               	movlw	3
  9434  000816  6E51               	movwf	_Nec_state,c
  9435                           
  9436                           ;Interrupt.c: 83: }
  9437  000818  D04B               	goto	i2l2343
  9438  00081A                     i2l2305:
  9439                           
  9440                           ;Interrupt.c: 84: else
  9441                           ;Interrupt.c: 85: {
  9442                           ;Interrupt.c: 86: force_nec_state0();
  9443  00081A  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9444  00081E  D048               	goto	i2l2343
  9445  000820  D047               	goto	i2l2343
  9446                           
  9447                           ;Interrupt.c: 89: return;
  9448                           
  9449                           ;Interrupt.c: 87: }
  9450                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 1;
  9451  000822  D059               	goto	i2l568
  9452  000824                     i2l2311:
  9453                           
  9454                           ;Interrupt.c: 93: {
  9455                           ;Interrupt.c: 94: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  9456  000824  0E91               	movlw	145
  9457  000826  5C48               	subwf	_Time_Elapsed,w,c
  9458  000828  0E01               	movlw	1
  9459  00082A  5849               	subwfb	_Time_Elapsed+1,w,c
  9460  00082C  A0D8               	btfss	status,0,c
  9461  00082E  D008               	goto	i2l2317
  9462  000830  0EBC               	movlw	188
  9463  000832  5C48               	subwf	_Time_Elapsed,w,c
  9464  000834  0E02               	movlw	2
  9465  000836  5849               	subwfb	_Time_Elapsed+1,w,c
  9466  000838  B0D8               	btfsc	status,0,c
  9467  00083A  D002               	goto	i2l2317
  9468                           
  9469                           ;Interrupt.c: 95: {
  9470                           ;Interrupt.c: 96: Nec_state = 4;
  9471  00083C  0E04               	movlw	4
  9472  00083E  D7D7               	goto	L2
  9473  000840                     i2l2317:
  9474                           
  9475                           ;Interrupt.c: 98: else
  9476                           ;Interrupt.c: 99: {
  9477                           ;Interrupt.c: 100: force_nec_state0();
  9478  000840  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9479  000844  D000               	goto	i2l2319
  9480  000846                     i2l2319:
  9481                           
  9482                           ;Interrupt.c: 101: }
  9483                           ;Interrupt.c: 102: INTCON2bits.INTEDG0 = 0;
  9484  000846  9CF1               	bcf	intcon2,6,c	;volatile
  9485                           
  9486                           ;Interrupt.c: 103: return;
  9487  000848  D046               	goto	i2l568
  9488  00084A                     i2l2323:
  9489                           
  9490                           ;Interrupt.c: 107: {
  9491                           ;Interrupt.c: 108: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9492  00084A  0E91               	movlw	145
  9493  00084C  5C48               	subwf	_Time_Elapsed,w,c
  9494  00084E  0E01               	movlw	1
  9495  000850  5849               	subwfb	_Time_Elapsed+1,w,c
  9496  000852  A0D8               	btfss	status,0,c
  9497  000854  D02A               	goto	i2l2341
  9498  000856  0E08               	movlw	8
  9499  000858  5C48               	subwf	_Time_Elapsed,w,c
  9500  00085A  0E07               	movlw	7
  9501  00085C  5849               	subwfb	_Time_Elapsed+1,w,c
  9502  00085E  B0D8               	btfsc	status,0,c
  9503  000860  D024               	goto	i2l2341
  9504                           
  9505                           ;Interrupt.c: 109: {
  9506                           ;Interrupt.c: 110: Nec_code = Nec_code << 1;
  9507  000862  90D8               	bcf	status,0,c
  9508  000864  3444               	rlcf	_Nec_code,w,c
  9509  000866  6E44               	movwf	_Nec_code,c
  9510  000868  3445               	rlcf	_Nec_code+1,w,c
  9511  00086A  6E45               	movwf	_Nec_code+1,c
  9512  00086C  3446               	rlcf	_Nec_code+2,w,c
  9513  00086E  6E46               	movwf	_Nec_code+2,c
  9514  000870  3447               	rlcf	_Nec_code+3,w,c
  9515  000872  6E47               	movwf	_Nec_code+3,c
  9516                           
  9517                           ;Interrupt.c: 111: if(Time_Elapsed > 1000)
  9518  000874  0EE9               	movlw	233
  9519  000876  5C48               	subwf	_Time_Elapsed,w,c
  9520  000878  0E03               	movlw	3
  9521  00087A  5849               	subwfb	_Time_Elapsed+1,w,c
  9522  00087C  A0D8               	btfss	status,0,c
  9523  00087E  D007               	goto	i2l2331
  9524                           
  9525                           ;Interrupt.c: 112: {
  9526                           ;Interrupt.c: 113: Nec_code++;
  9527  000880  0E01               	movlw	1
  9528  000882  2644               	addwf	_Nec_code,f,c
  9529  000884  0E00               	movlw	0
  9530  000886  2245               	addwfc	_Nec_code+1,f,c
  9531  000888  2246               	addwfc	_Nec_code+2,f,c
  9532  00088A  2247               	addwfc	_Nec_code+3,f,c
  9533  00088C  D000               	goto	i2l2331
  9534  00088E                     i2l2331:
  9535                           
  9536                           ;Interrupt.c: 114: }
  9537                           ;Interrupt.c: 115: bit_count++;
  9538  00088E  2A58               	incf	_bit_count,f,c
  9539                           
  9540                           ;Interrupt.c: 116: if(bit_count > 31)
  9541  000890  0E1F               	movlw	31
  9542  000892  6458               	cpfsgt	_bit_count,c
  9543  000894  D7BF               	goto	L3
  9544                           
  9545                           ;Interrupt.c: 117: {
  9546                           ;Interrupt.c: 118: nec_ok = 1;
  9547  000896  0E00               	movlw	0
  9548  000898  6E4D               	movwf	_nec_ok+1,c
  9549  00089A  0E01               	movlw	1
  9550  00089C  6E4C               	movwf	_nec_ok,c
  9551                           
  9552                           ;Interrupt.c: 119: Nec_code1 = (char) ((Nec_code >> 8));
  9553  00089E  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9554                           
  9555                           ;Interrupt.c: 120: INT0IE = 0;
  9556  0008A2  98F2               	bcf	intcon,4,c	;volatile
  9557                           
  9558                           ;Interrupt.c: 121: Nec_state = 0;
  9559  0008A4  0E00               	movlw	0
  9560  0008A6  6E51               	movwf	_Nec_state,c
  9561  0008A8  D7B5               	goto	L3
  9562  0008AA                     i2l2341:
  9563                           
  9564                           ;Interrupt.c: 125: else
  9565                           ;Interrupt.c: 126: {
  9566                           ;Interrupt.c: 127: force_nec_state0();
  9567  0008AA  ECFC  F00C         	call	_force_nec_state0	;wreg free
  9568  0008AE  D000               	goto	i2l2343
  9569  0008B0                     i2l2343:
  9570                           
  9571                           ;Interrupt.c: 128: }
  9572                           ;Interrupt.c: 129: INTCON2bits.INTEDG0 = 1;
  9573  0008B0  8CF1               	bsf	intcon2,6,c	;volatile
  9574                           
  9575                           ;Interrupt.c: 131: }
  9576                           ;Interrupt.c: 132: }
  9577                           
  9578                           ;Interrupt.c: 130: return;
  9579  0008B2  D011               	goto	i2l568
  9580  0008B4                     i2l2349:
  9581  0008B4  5051               	movf	_Nec_state,w,c
  9582                           
  9583                           ; Switch size 1, requested type "space"
  9584                           ; Number of cases is 5, Range of values is 0 to 4
  9585                           ; switch strategies available:
  9586                           ; Name         Instructions Cycles
  9587                           ; simple_byte           16     9 (average)
  9588                           ;	Chosen strategy is simple_byte
  9589  0008B6  0A00               	xorlw	0	; case 0
  9590  0008B8  B4D8               	btfsc	status,2,c
  9591  0008BA  D776               	goto	i2l2277
  9592  0008BC  0A01               	xorlw	1	; case 1
  9593  0008BE  B4D8               	btfsc	status,2,c
  9594  0008C0  D789               	goto	i2l2287
  9595  0008C2  0A03               	xorlw	3	; case 2
  9596  0008C4  B4D8               	btfsc	status,2,c
  9597  0008C6  D79A               	goto	i2l2299
  9598  0008C8  0A01               	xorlw	1	; case 3
  9599  0008CA  B4D8               	btfsc	status,2,c
  9600  0008CC  D7AB               	goto	i2l2311
  9601  0008CE  0A07               	xorlw	7	; case 4
  9602  0008D0  B4D8               	btfsc	status,2,c
  9603  0008D2  D7BB               	goto	i2l2323
  9604  0008D4  D000               	goto	i2l568
  9605  0008D6                     i2l568:
  9606  0008D6  0012               	return		;funcret
  9607  0008D8                     __end_of_INT0_isr:
  9608                           	opt stack 0
  9609                           pclatu	equ	0xFFB
  9610                           pclath	equ	0xFFA
  9611                           tblptru	equ	0xFF8
  9612                           tblptrh	equ	0xFF7
  9613                           tblptrl	equ	0xFF6
  9614                           tablat	equ	0xFF5
  9615                           prodh	equ	0xFF4
  9616                           prodl	equ	0xFF3
  9617                           intcon	equ	0xFF2
  9618                           intcon2	equ	0xFF1
  9619                           postinc0	equ	0xFEE
  9620                           fsr0h	equ	0xFEA
  9621                           fsr0l	equ	0xFE9
  9622                           wreg	equ	0xFE8
  9623                           postdec1	equ	0xFE5
  9624                           fsr1h	equ	0xFE2
  9625                           fsr1l	equ	0xFE1
  9626                           indf2	equ	0xFDF
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _force_nec_state0 *****************
  9634 ;; Defined at:
  9635 ;;		line 31 in file "Interrupt.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;		None               void
  9642 ;; Registers used:
  9643 ;;		wreg, status,2
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        0 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; This function calls:
  9656 ;;		Nothing
  9657 ;; This function is called by:
  9658 ;;		_INT0_isr
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text59
  9663  0019F8                     __ptext59:
  9664                           	opt stack 0
  9665  0019F8                     _force_nec_state0:
  9666                           	opt stack 20
  9667                           
  9668                           ;Interrupt.c: 33: Nec_state=0;
  9669                           
  9670                           ;incstack = 0
  9671  0019F8  0E00               	movlw	0
  9672  0019FA  6E51               	movwf	_Nec_state,c
  9673                           
  9674                           ;Interrupt.c: 34: T1CONbits.TMR1ON = 0;
  9675  0019FC  90CD               	bcf	4045,0,c	;volatile
  9676  0019FE  0012               	return		;funcret
  9677  001A00                     __end_of_force_nec_state0:
  9678                           	opt stack 0
  9679                           pclatu	equ	0xFFB
  9680                           pclath	equ	0xFFA
  9681                           tblptru	equ	0xFF8
  9682                           tblptrh	equ	0xFF7
  9683                           tblptrl	equ	0xFF6
  9684                           tablat	equ	0xFF5
  9685                           prodh	equ	0xFF4
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           intcon2	equ	0xFF1
  9689                           postinc0	equ	0xFEE
  9690                           fsr0h	equ	0xFEA
  9691                           fsr0l	equ	0xFE9
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           pclatu	equ	0xFFB
  9703                           pclath	equ	0xFFA
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           intcon2	equ	0xFF1
  9712                           postinc0	equ	0xFEE
  9713                           fsr0h	equ	0xFEA
  9714                           fsr0l	equ	0xFE9
  9715                           wreg	equ	0xFE8
  9716                           postdec1	equ	0xFE5
  9717                           fsr1h	equ	0xFE2
  9718                           fsr1l	equ	0xFE1
  9719                           indf2	equ	0xFDF
  9720                           postinc2	equ	0xFDE
  9721                           postdec2	equ	0xFDD
  9722                           fsr2h	equ	0xFDA
  9723                           fsr2l	equ	0xFD9
  9724                           status	equ	0xFD8
  9725                           
  9726                           	psect	rparam
  9727  0000                     pclatu	equ	0xFFB
  9728                           pclath	equ	0xFFA
  9729                           tblptru	equ	0xFF8
  9730                           tblptrh	equ	0xFF7
  9731                           tblptrl	equ	0xFF6
  9732                           tablat	equ	0xFF5
  9733                           prodh	equ	0xFF4
  9734                           prodl	equ	0xFF3
  9735                           intcon	equ	0xFF2
  9736                           intcon2	equ	0xFF1
  9737                           postinc0	equ	0xFEE
  9738                           fsr0h	equ	0xFEA
  9739                           fsr0l	equ	0xFE9
  9740                           wreg	equ	0xFE8
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8


Data Sizes:
    Strings     186
    Constant    493
    Data        212
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     110
    BANK0           128      0     126
    BANK1           256     13     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[8]), STR_4(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 63
		 -> STR_3(CODE[63]), STR_2(CODE[44]), STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK1[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    None.

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   57555
                                             66 COMRAM     1     1      0
                                              7 BANK1      6     6      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                  _Initialize_Screen
                       _Wait_One_Sec
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                     _init_INTERRUPT
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3651
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   22023
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12786
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_INTERRUPT
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EF3      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      D      80       8       50.0%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7E       5       98.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6E       1       86.6%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16C       6        0.0%
DATA                 0      0     16C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 30 17:04:52 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 00AA                                 _D2 00BF  
                               _D3 00D4                                 l35 14F4  
                               l45 1908                                 l95 10F8  
                               l89 17BE                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l111 0A2C  
                              l120 0982                                l113 0906  
                              l151 0F28                                l152 0F4A  
                              l148 0F4C                                l149 0EB8  
                              l159 0694                                l177 0A9C  
                              l426 1626                                l356 19A0  
                              l429 16F2                                l509 175C  
                              l367 1834                                l618 011C  
                              l655 0374                                l683 12B4  
                              l691 1810                                l684 12B6  
                              l685 12C0                                l686 12C2  
                              l679 129A                                l688 12DC  
                              l884 0FE2                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 19E0  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 17C0  
                     __CFG_WDT$OFF 000000                               l1122 1856  
                   drawFastVLine@h 0019                               l1214 13FA  
                             l1224 158C                               l1253 16A4  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l4203 16FC                               l5003 0206  
                             l4205 1702                               l4133 10BA  
                             l5021 026C                               l4215 1714  
                             l4143 10E0                               l5023 0274  
                             l5031 02A0                               l5015 024C  
                             l5007 022A                               l4145 10EE  
                             l4129 1082                               l4401 0EF0  
                             l5033 02A8                               l5041 0332  
                             l5017 0254                               l5009 0234  
                             l4331 08E8                               l5035 02EC  
                             l5043 0344                               l5027 028C  
                             l4181 17A0                               l4341 090A  
                             l4421 0F36                               l4413 0F1E  
                             l5045 034C                               l4351 0976  
                             l4335 08F4                               l5063 0F64  
                             l5047 0358                               l4441 128A  
                             l4193 15BC                               l4361 09A4  
                             l4353 097A                               l4345 0912  
                             l4417 0F2C                               l4371 0A20  
                             l4363 09CC                               l4339 0902  
                             l4523 0CA2                               l4427 0F46  
                             l5075 0F8C                               l5091 0FC8  
                             l4197 16EA                               l4445 1292  
                             l4437 1280                               l4189 15A0  
                             l4349 0942                               l5077 0F96  
                             l5069 0F76                               l4383 1672  
                             l4535 0CF2                               l5095 0FD8  
                             l5087 0FBC                               l5079 0F9E  
                             l5343 0388                               l4641 15EA  
                             l4457 12AC                               l4449 129E  
                             l4369 09F8                               l4377 0A28  
                             l4385 1678                               l4633 1768  
                             l4561 0A82                               l4651 1600  
                             l4547 0D62                               l4539 0D10  
                             l4395 0E82                               l4635 1772  
                             l4803 181A                               l4707 13EE  
                             l4723 1580                               l4715 1558  
                             l4653 1608                               l4645 15F2  
                             l4549 0D6A                               l4581 0B50  
                             l4717 1562                               l5365 047A  
   I2C_Write_Cmd_Write_Data@Device 0015                               l4663 161C  
                             l4807 182E                               l4719 156A  
                             l5391 04E8                               l5375 049A  
                             l4665 1622                               l4577 0AFE  
                             l4921 0026                               l4659 1610  
                             l4747 067A                               l4931 004E  
                             l5387 04DE                               l5379 04B4  
                             l4685 184E                               l4933 0064  
                             l4925 0036                               l4775 076A  
                             l4695 13BE                               l4927 0044  
                             l4697 13C8                               l4961 014A  
                             l4945 00E6                               l4937 0082  
                             l4699 13D0                               l4971 0174  
                             l4981 01A2                               l4965 0164  
                             l4949 00EE                               l4975 0198  
                             l4967 0168                               l4985 01AE  
                             l4979 019E                               l4995 01D8  
                             l4989 01D2                               l4997 01EA  
                             STR_1 FCDF                               STR_2 FCB3  
                             STR_3 FC74                               STR_4 FD01  
                             STR_5 FD26                               STR_6 FD15  
                             u3120 0CCC                               u2690 10B0  
                             u2950 0EB0                               u2880 09DA  
                             u2960 0EE6                               u3927 19AE  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 0376                               _font FA87  
                             _hour 005D                   __end_of_I2C_Init 19CC  
                 __end_of_I2C_Read 1628                               _year 006C  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006E                   __end_of_I2C_Stop 1946  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1668                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 19D6                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 08D8  
        __end_of_Deactivate_Buzzer 19E8                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 0FE4                    drawCircle@ddF_x 0026  
                  drawCircle@ddF_y 0028                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1404  
                  __end_of___lwmod 1596                              i2l556 11BA  
                            i2l568 08D6                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR1H 000FCF                              _TMR3H 000FB3  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTD 000F83                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0B66                              _Rcmd3 0D80  
                            _nRBPU 007F8F                         _i2cHighSda 19F0  
                       _i2cHighScl 19AA                    __end_of_dpowers FC6C  
                            _color 0080                              _font2 FB86  
            fillCircleHelper@ddF_x 0031              fillCircleHelper@ddF_y 0033  
                            _found 005C                    __end_of_isdigit 1858  
                            _month 0060              fillCircleHelper@delta 002B  
                            _putch 199C              fillCircleHelper@color 002D  
                            main@i 017E                  __end_of_I2C_Start 1958  
                __end_of_I2C_Write 1722                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 11F4  
                     __end_of_main 05D2                       __end_of_font FB86  
                 __end_of_Rcmd2red 16E4                             ??_main 0043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1934          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             _INT0IE 007F94  
                           i2l2311 0824                             i2l2305 081A  
                           i2l2331 088E                             i2l2323 084A  
                           i2l2341 08AA                             i2l2317 0840  
                           i2l2343 08B0                             i2l2319 0846  
                           i2l2293 07F2                             i2l2277 07A8  
                           i2l2349 08B4                             i2l2287 07D4  
                           i2l2299 07FC                             i2l2743 11B0  
                        ??_Do_Init 0017                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 19F8                   __end_of_delay_ms 14FC  
                           _i2cAck 1958                         _TempSecond 0052  
                 __end_of_fillRect 15E0                   __end_of_drawChar 0A2E  
               __size_of_OpenUSART 0070                      main@tempC_898 017D  
                    main@tempF_899 017C           __size_of_Activate_Buzzer 0012  
                           ___wmul 17EA                          ??___awdiv 001B  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0D80  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00E9                          ??___lwmod 001C  
                           _buffer 0154                             _nec_ok 004C  
                           clear_0 11FA                             clear_1 1206  
                 ___awdiv@quotient 001D                             _minute 005F  
                           _second 0062            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 175E  
                           _strlen 1668                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FA86                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1878                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 190E                         __accesstop 0080  
          __end_of__initialization 1264                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                      __end_of_Rcmd1 0C76  
                    __end_of_Rcmd3 0E72                     __pcstackCOMRAM 0001  
                     __pidataBANK0 10FA                       __pidataBANK1 1404  
                    __end_of_font2 FC62                  __end_of_i2cLowSda 19E0  
                __end_of_i2cLowScl 19F0                      __end_of_putch 19AA  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 12DE  
                          ??_putch 0011                         __pbssBANK1 0154  
                 _setup_alarm_hour 0063                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 1458  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1896  
                       _drawCircle 05D2                     _init_INTERRUPT 18CC  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0F4E  
                        ?_drawtext 0039                  _DS3231_Setup_Time 12DE  
                          _Do_Init 1628           _I2C_Write_Cmd_Write_Data 1858  
       __end_of_I2C_Write_Cmd_Only 18CC                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 19CC                 __end_of_TIMER1_isr 19C2  
               ?_DS3231_Setup_Time 0001                      _write_command 198C  
                        _I2C_Start 1946                          _I2C_Write 16E4  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1896  
                __end_of_drawPixel 17C0                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 10FA                   _fillCircleHelper 0A2E  
                          ___awdiv 0F4E                    __size_of___wmul 0028  
                          ___lwdiv 13A8                            ___lwmod 154A  
                  __size_of_chkisr 11EC                          ?_spiwrite 0001  
                          __pcinit 11F4                            __ramtop 1000  
                          __ptext0 0376                            __ptext1 001C  
                          __ptext2 199C                            __ptext3 1836  
                          __ptext4 154A                            __ptext5 13A8  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 1458  
                          __ptext7 0A2E                            __ptext8 05D2  
                          __ptext9 0F4E                    __size_of_printf 035A  
                __end_of_init_UART 1922             __end_of_init_INTERRUPT 18E4  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FC74           __end_of_force_nec_state0 1A00  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FC62                            _isdigit 1836  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 18FA                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1344                         ??_drawChar 0035  
                        _LCD_Reset 1922                      _setAddrWindow 14FC  
                   __pintcode_body 1178                      Wait_One_Sec@k 0011  
                       delay_ms@ms 0017               end_of_initialization 1264  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FA86          __size_of_DS3231_Read_Time 0064  
                          int_func 1178            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                          _PORTAbits 000F80  
                 drawtext@cursor_x 0179                   drawtext@cursor_y 0178  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_year 006B                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 0174  
                       drawPixel@x 001B                         drawPixel@y 0018  
                      _DS1621_Init 1878                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0158  
                   __end_of_i2cAck 196A           DS1621_Read_Temp@Data_Ret 0017  
               __end_of_i2cHighSda 19F8                 __end_of_i2cHighScl 19B6  
                   __end_of___wmul 1812                      delay_ms@count 001B  
                       _write_data 197C                      __pidataCOMRAM 1A00  
                   __end_of_chkisr 11F4           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 18E4                         drawtext@bg 003E  
                        _Nec_code1 0050                          _i2cLowSda 19D6  
                        _i2cLowScl 19E8               __end_of_Wait_One_Sec 1836  
                   __end_of_printf 0376                     __end_of_strcpy 1790  
                   __end_of_strlen 16A6                          _Nec_state 0051  
              start_initialization 11F4         __size_of_DS3231_Setup_Time 0066  
                  ??_write_command 0013                          _OpenUSART 126E  
              __size_of_fillCircle 0052                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 196A                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 1722                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK1 0173                        ??_LCD_Reset 001D  
                     _isdigit$2040 0012           __end_of_fillCircleHelper 0B66  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1344  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 17EA                      __pmediumconst FA86  
                         ?___awdiv 0017                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 18B2  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 1790  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 19C2                           _I2C_Read 15E0  
                         _I2C_Stop 1934                  _Initialize_Screen 0FE4  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 190E                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FC6C  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 197C  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0780               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 0024  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 1072                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                          main@tempC 017B  
                        main@tempF 017A                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 1220  
                        copy_data1 1240                          drawtext@i 0176  
           __size_of_drawFastVLine 0088                          drawtext@x 0173  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 16A6  
                 __size_of_Do_Init 0040                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 14AA                   __size_of_i2cNack 000A  
                     _Wait_One_Sec 1812                           __Hrparam 0000  
               __end_of_fillScreen 18B2                           __Lrparam 0000  
               __end_of_drawCircle 0780                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 14AA                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 1812  
                         __ptext11 0FE4                           __ptext20 1790  
                         __ptext12 175E                           __ptext21 14FC  
                         __ptext13 1896                           __ptext30 14AA  
                         __ptext22 17C0                           __ptext14 0E72  
                         __ptext31 17EA                           __ptext23 0D80  
                         __ptext15 0C76                           __ptext40 19E0  
                         __ptext32 1628                           __ptext24 16A6  
                         __ptext16 1668                           __ptext41 12DE  
                         __ptext33 190E                           __ptext25 0B66  
                         __ptext17 08D8                           __ptext50 18E4  
                         __ptext42 1344                           __ptext34 126E  
                         __ptext26 197C                           __ptext18 1596  
                         __ptext51 19D6                           __ptext43 1722  
                         __ptext35 18CC                           __ptext27 198C  
                         __ptext19 1072                           __ptext52 19E8  
                         __ptext44 16E4                           __ptext36 19C2  
                         __ptext28 18FA                           __ptext53 19F0  
                         __ptext45 1934                           __ptext37 1878  
                         __ptext29 1922                           __ptext54 19AA  
                         __ptext46 1946                           __ptext38 1858  
                         __ptext55 196A                           __ptext47 15E0  
                         __ptext39 18B2                           __ptext48 19CC  
                         __ptext57 19B6                           __ptext49 1958  
                         __ptext58 0780                           __ptext59 19F8  
                         _fillRect 1596                           _drawChar 08D8  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 0C76                         strcpy@from 0013  
                    _fillRectangle 0E72           __end_of_DS1621_Read_Temp 175E  
                 ?_Activate_Buzzer 0001                      __size_of_main 025C  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1072                          printf@idx 002F  
                         _spiwrite 18FA                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 13A8                 fillCircleHelper@x0 0023  
               fillCircleHelper@y0 0025         __size_of_Initialize_Screen 008E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F                   ___lwmod@dividend 0018  
            __end_of_write_command 199C                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 19B6  
                    fillRect@color 0026                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A                        fillCircle@r 003F  
            __end_of_setAddrWindow 154A                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0069  
               __end_of_write_data 198C          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
