

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 01 20:50:45 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  002486                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _setup_fan_temp
   101  002486  4B                 	db	75
   102                           
   103                           ;initializer for _tempSecond
   104  002487  FF                 	db	255
   105                           
   106                           ;initializer for _wrap
   107  002488  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  001CCA                     __pidataBANK0:
   111                           	opt stack 0
   112                           
   113                           ;initializer for _alarm_time
   114  001CCA  30                 	db	48
   115  001CCB  30                 	db	48
   116  001CCC  3A                 	db	58
   117  001CCD  30                 	db	48
   118  001CCE  30                 	db	48
   119  001CCF  3A                 	db	58
   120  001CD0  30                 	db	48
   121  001CD1  30                 	db	48
   122  001CD2  00                 	db	0
   123                           
   124                           ;initializer for _setup_alarm_time
   125  001CD3  30                 	db	48
   126  001CD4  30                 	db	48
   127  001CD5  3A                 	db	58
   128  001CD6  30                 	db	48
   129  001CD7  30                 	db	48
   130  001CD8  3A                 	db	58
   131  001CD9  30                 	db	48
   132  001CDA  30                 	db	48
   133  001CDB  00                 	db	0
   134                           
   135                           ;initializer for _setup_date
   136  001CDC  31                 	db	49
   137  001CDD  31                 	db	49
   138  001CDE  2F                 	db	47
   139  001CDF  31                 	db	49
   140  001CE0  37                 	db	55
   141  001CE1  2F                 	db	47
   142  001CE2  32                 	db	50
   143  001CE3  32                 	db	50
   144  001CE4  00                 	db	0
   145                           
   146                           ;initializer for _setup_time
   147  001CE5  30                 	db	48
   148  001CE6  30                 	db	48
   149  001CE7  3A                 	db	58
   150  001CE8  30                 	db	48
   151  001CE9  30                 	db	48
   152  001CEA  3A                 	db	58
   153  001CEB  30                 	db	48
   154  001CEC  30                 	db	48
   155  001CED  00                 	db	0
   156                           
   157                           ;initializer for _D1
   158  001CEE  00                 	db	0
   159  001CEF  01                 	db	1
   160  001CF0  02                 	db	2
   161  001CF1  03                 	db	3
   162  001CF2  04                 	db	4
   163  001CF3  05                 	db	5
   164  001CF4  06                 	db	6
   165  001CF5  07                 	db	7
   166                           
   167                           ;initializer for _D2
   168  001CF6  20                 	db	32
   169  001CF7  40                 	db	64
   170  001CF8  60                 	db	96
   171  001CF9  80                 	db	128
   172  001CFA  A0                 	db	160
   173  001CFB  C0                 	db	192
   174  001CFC  E0                 	db	224
   175                           
   176                           ;initializer for _setup_fan_text
   177  001CFD  30                 	db	48
   178  001CFE  37                 	db	55
   179  001CFF  35                 	db	53
   180  001D00  46                 	db	70
   181  001D01  00                 	db	0
   182                           
   183                           ;initializer for _Alarm_SW_Txt
   184  001D02  4F                 	db	79
   185  001D03  46                 	db	70
   186  001D04  46                 	db	70
   187  001D05  00                 	db	0
   188                           
   189                           ;initializer for _RTC_ALARM_Txt
   190  001D06  30                 	db	48
   191  001D07  00                 	db	0
   192                           
   193                           ;initializer for _date
   194  001D08  30                 	db	48
   195  001D09  30                 	db	48
   196  001D0A  2F                 	db	47
   197  001D0B  30                 	db	48
   198  001D0C  30                 	db	48
   199  001D0D  2F                 	db	47
   200  001D0E  30                 	db	48
   201  001D0F  30                 	db	48
   202  001D10  00                 	db	0
   203                           
   204                           ;initializer for _time
   205  001D11  30                 	db	48
   206  001D12  30                 	db	48
   207  001D13  3A                 	db	58
   208  001D14  30                 	db	48
   209  001D15  30                 	db	48
   210  001D16  3A                 	db	58
   211  001D17  30                 	db	48
   212  001D18  30                 	db	48
   213  001D19  00                 	db	0
   214                           
   215                           ;initializer for _RPM_Txt
   216  001D1A  30                 	db	48
   217  001D1B  30                 	db	48
   218  001D1C  30                 	db	48
   219  001D1D  30                 	db	48
   220  001D1E  00                 	db	0
   221                           
   222                           ;initializer for _DC_Txt
   223  001D1F  30                 	db	48
   224  001D20  30                 	db	48
   225  001D21  30                 	db	48
   226  001D22  00                 	db	0
   227                           
   228                           ;initializer for _Fan_SW_Txt
   229  001D23  4F                 	db	79
   230  001D24  46                 	db	70
   231  001D25  46                 	db	70
   232  001D26  00                 	db	0
   233                           
   234                           ;initializer for _tempC
   235  001D27  2B                 	db	43
   236  001D28  32                 	db	50
   237  001D29  35                 	db	53
   238  001D2A  00                 	db	0
   239                           
   240                           ;initializer for _tempF
   241  001D2B  2B                 	db	43
   242  001D2C  37                 	db	55
   243  001D2D  37                 	db	55
   244  001D2E  00                 	db	0
   245                           
   246                           	psect	idataBANK1
   247  001B14                     __pidataBANK1:
   248                           	opt stack 0
   249                           
   250                           ;initializer for _color
   251  001B14  F800               	dw	63488
   252  001B16  F800               	dw	63488
   253  001B18  F800               	dw	63488
   254  001B1A  07FF               	dw	2047
   255  001B1C  07FF               	dw	2047
   256  001B1E  07E0               	dw	2016
   257  001B20  001F               	dw	31
   258  001B22  001F               	dw	31
   259  001B24  F81F               	dw	63519
   260  001B26  FFFF               	dw	65535
   261  001B28  FFFF               	dw	65535
   262  001B2A  FFFF               	dw	65535
   263  001B2C  FFFF               	dw	65535
   264  001B2E  FFFF               	dw	65535
   265  001B30  FFFF               	dw	65535
   266  001B32  FFFF               	dw	65535
   267  001B34  FFFF               	dw	65535
   268  001B36  FFFF               	dw	65535
   269  001B38  FFFF               	dw	65535
   270  001B3A  FFFF               	dw	65535
   271  001B3C  FFFF               	dw	65535
   272                           
   273                           ;initializer for _D3
   274  001B3E  01                 	db	1
   275  001B3F  01                 	db	1
   276  001B40  01                 	db	1
   277  001B41  06                 	db	6
   278  001B42  06                 	db	6
   279  001B43  02                 	db	2
   280  001B44  04                 	db	4
   281  001B45  04                 	db	4
   282  001B46  05                 	db	5
   283  001B47  07                 	db	7
   284  001B48  07                 	db	7
   285  001B49  07                 	db	7
   286  001B4A  07                 	db	7
   287  001B4B  07                 	db	7
   288  001B4C  07                 	db	7
   289  001B4D  07                 	db	7
   290  001B4E  07                 	db	7
   291  001B4F  07                 	db	7
   292  001B50  07                 	db	7
   293  001B51  07                 	db	7
   294  001B52  07                 	db	7
   295                           
   296                           ;initializer for _array1
   297  001B53  A2                 	db	162
   298  001B54  62                 	db	98
   299  001B55  E2                 	db	226
   300  001B56  22                 	db	34
   301  001B57  02                 	db	2
   302  001B58  C2                 	db	194
   303  001B59  E0                 	db	224
   304  001B5A  A8                 	db	168
   305  001B5B  90                 	db	144
   306  001B5C  68                 	db	104
   307  001B5D  98                 	db	152
   308  001B5E  B0                 	db	176
   309  001B5F  30                 	db	48
   310  001B60  18                 	db	24
   311  001B61  7A                 	db	122
   312  001B62  10                 	db	16
   313  001B63  38                 	db	56
   314  001B64  5A                 	db	90
   315  001B65  42                 	db	66
   316  001B66  4A                 	db	74
   317  001B67  52                 	db	82
   318                           
   319                           ;initializer for _buffer
   320  001B68  20                 	db	32
   321  001B69  45                 	db	69
   322  001B6A  43                 	db	67
   323  001B6B  45                 	db	69
   324  001B6C  33                 	db	51
   325  001B6D  33                 	db	51
   326  001B6E  30                 	db	48
   327  001B6F  31                 	db	49
   328  001B70  4C                 	db	76
   329  001B71  20                 	db	32
   330  001B72  46                 	db	70
   331  001B73  61                 	db	97
   332  001B74  27                 	db	39
   333  001B75  32                 	db	50
   334  001B76  32                 	db	50
   335  001B77  20                 	db	32
   336  001B78  4C                 	db	76
   337  001B79  31                 	db	49
   338  001B7A  32                 	db	50
   339  001B7B  00                 	db	0
   340  001B7C  00                 	db	0
   341  001B7D  00                 	db	0
   342  001B7E  00                 	db	0
   343  001B7F  00                 	db	0
   344  001B80  00                 	db	0
   345  001B81  00                 	db	0
   346  001B82  00                 	db	0
   347  001B83  00                 	db	0
   348  001B84  00                 	db	0
   349  001B85  00                 	db	0
   350  001B86  00                 	db	0
   351  001B87  00                 	db	0
   352  001B88  00                 	db	0
   353                           
   354                           	psect	mediumconst
   355  00FD40                     __pmediumconst:
   356                           	opt stack 0
   357  00FD40  00                 	db	0
   358  00FD41                     _font:
   359                           	opt stack 0
   360  00FD41  00                 	db	0
   361  00FD42  00                 	db	0
   362  00FD43  00                 	db	0
   363  00FD44  00                 	db	0
   364  00FD45  00                 	db	0
   365  00FD46  00                 	db	0
   366  00FD47  00                 	db	0
   367  00FD48  5F                 	db	95
   368  00FD49  00                 	db	0
   369  00FD4A  00                 	db	0
   370  00FD4B  00                 	db	0
   371  00FD4C  07                 	db	7
   372  00FD4D  00                 	db	0
   373  00FD4E  07                 	db	7
   374  00FD4F  00                 	db	0
   375  00FD50  14                 	db	20
   376  00FD51  7F                 	db	127
   377  00FD52  14                 	db	20
   378  00FD53  7F                 	db	127
   379  00FD54  14                 	db	20
   380  00FD55  24                 	db	36
   381  00FD56  2A                 	db	42
   382  00FD57  7F                 	db	127
   383  00FD58  2A                 	db	42
   384  00FD59  12                 	db	18
   385  00FD5A  23                 	db	35
   386  00FD5B  13                 	db	19
   387  00FD5C  08                 	db	8
   388  00FD5D  64                 	db	100
   389  00FD5E  62                 	db	98
   390  00FD5F  36                 	db	54
   391  00FD60  49                 	db	73
   392  00FD61  56                 	db	86
   393  00FD62  20                 	db	32
   394  00FD63  50                 	db	80
   395  00FD64  00                 	db	0
   396  00FD65  08                 	db	8
   397  00FD66  07                 	db	7
   398  00FD67  03                 	db	3
   399  00FD68  00                 	db	0
   400  00FD69  00                 	db	0
   401  00FD6A  1C                 	db	28
   402  00FD6B  22                 	db	34
   403  00FD6C  41                 	db	65
   404  00FD6D  00                 	db	0
   405  00FD6E  00                 	db	0
   406  00FD6F  41                 	db	65
   407  00FD70  22                 	db	34
   408  00FD71  1C                 	db	28
   409  00FD72  00                 	db	0
   410  00FD73  2A                 	db	42
   411  00FD74  1C                 	db	28
   412  00FD75  7F                 	db	127
   413  00FD76  1C                 	db	28
   414  00FD77  2A                 	db	42
   415  00FD78  08                 	db	8
   416  00FD79  08                 	db	8
   417  00FD7A  3E                 	db	62
   418  00FD7B  08                 	db	8
   419  00FD7C  08                 	db	8
   420  00FD7D  00                 	db	0
   421  00FD7E  80                 	db	128
   422  00FD7F  70                 	db	112
   423  00FD80  30                 	db	48
   424  00FD81  00                 	db	0
   425  00FD82  08                 	db	8
   426  00FD83  08                 	db	8
   427  00FD84  08                 	db	8
   428  00FD85  08                 	db	8
   429  00FD86  08                 	db	8
   430  00FD87  00                 	db	0
   431  00FD88  00                 	db	0
   432  00FD89  60                 	db	96
   433  00FD8A  60                 	db	96
   434  00FD8B  00                 	db	0
   435  00FD8C  20                 	db	32
   436  00FD8D  10                 	db	16
   437  00FD8E  08                 	db	8
   438  00FD8F  04                 	db	4
   439  00FD90  02                 	db	2
   440  00FD91  3E                 	db	62
   441  00FD92  51                 	db	81
   442  00FD93  49                 	db	73
   443  00FD94  45                 	db	69
   444  00FD95  3E                 	db	62
   445  00FD96  00                 	db	0
   446  00FD97  42                 	db	66
   447  00FD98  7F                 	db	127
   448  00FD99  40                 	db	64
   449  00FD9A  00                 	db	0
   450  00FD9B  72                 	db	114
   451  00FD9C  49                 	db	73
   452  00FD9D  49                 	db	73
   453  00FD9E  49                 	db	73
   454  00FD9F  46                 	db	70
   455  00FDA0  21                 	db	33
   456  00FDA1  41                 	db	65
   457  00FDA2  49                 	db	73
   458  00FDA3  4D                 	db	77
   459  00FDA4  33                 	db	51
   460  00FDA5  18                 	db	24
   461  00FDA6  14                 	db	20
   462  00FDA7  12                 	db	18
   463  00FDA8  7F                 	db	127
   464  00FDA9  10                 	db	16
   465  00FDAA  27                 	db	39
   466  00FDAB  45                 	db	69
   467  00FDAC  45                 	db	69
   468  00FDAD  45                 	db	69
   469  00FDAE  39                 	db	57
   470  00FDAF  3C                 	db	60
   471  00FDB0  4A                 	db	74
   472  00FDB1  49                 	db	73
   473  00FDB2  49                 	db	73
   474  00FDB3  31                 	db	49
   475  00FDB4  41                 	db	65
   476  00FDB5  21                 	db	33
   477  00FDB6  11                 	db	17
   478  00FDB7  09                 	db	9
   479  00FDB8  07                 	db	7
   480  00FDB9  36                 	db	54
   481  00FDBA  49                 	db	73
   482  00FDBB  49                 	db	73
   483  00FDBC  49                 	db	73
   484  00FDBD  36                 	db	54
   485  00FDBE  46                 	db	70
   486  00FDBF  49                 	db	73
   487  00FDC0  49                 	db	73
   488  00FDC1  29                 	db	41
   489  00FDC2  1E                 	db	30
   490  00FDC3  00                 	db	0
   491  00FDC4  00                 	db	0
   492  00FDC5  14                 	db	20
   493  00FDC6  00                 	db	0
   494  00FDC7  00                 	db	0
   495  00FDC8  00                 	db	0
   496  00FDC9  40                 	db	64
   497  00FDCA  34                 	db	52
   498  00FDCB  00                 	db	0
   499  00FDCC  00                 	db	0
   500  00FDCD  00                 	db	0
   501  00FDCE  08                 	db	8
   502  00FDCF  14                 	db	20
   503  00FDD0  22                 	db	34
   504  00FDD1  41                 	db	65
   505  00FDD2  14                 	db	20
   506  00FDD3  14                 	db	20
   507  00FDD4  14                 	db	20
   508  00FDD5  14                 	db	20
   509  00FDD6  14                 	db	20
   510  00FDD7  00                 	db	0
   511  00FDD8  41                 	db	65
   512  00FDD9  22                 	db	34
   513  00FDDA  14                 	db	20
   514  00FDDB  08                 	db	8
   515  00FDDC  02                 	db	2
   516  00FDDD  01                 	db	1
   517  00FDDE  59                 	db	89
   518  00FDDF  09                 	db	9
   519  00FDE0  06                 	db	6
   520  00FDE1  3E                 	db	62
   521  00FDE2  41                 	db	65
   522  00FDE3  5D                 	db	93
   523  00FDE4  59                 	db	89
   524  00FDE5  4E                 	db	78
   525  00FDE6  7C                 	db	124
   526  00FDE7  12                 	db	18
   527  00FDE8  11                 	db	17
   528  00FDE9  12                 	db	18
   529  00FDEA  7C                 	db	124
   530  00FDEB  7F                 	db	127
   531  00FDEC  49                 	db	73
   532  00FDED  49                 	db	73
   533  00FDEE  49                 	db	73
   534  00FDEF  36                 	db	54
   535  00FDF0  3E                 	db	62
   536  00FDF1  41                 	db	65
   537  00FDF2  41                 	db	65
   538  00FDF3  41                 	db	65
   539  00FDF4  22                 	db	34
   540  00FDF5  7F                 	db	127
   541  00FDF6  41                 	db	65
   542  00FDF7  41                 	db	65
   543  00FDF8  41                 	db	65
   544  00FDF9  3E                 	db	62
   545  00FDFA  7F                 	db	127
   546  00FDFB  49                 	db	73
   547  00FDFC  49                 	db	73
   548  00FDFD  49                 	db	73
   549  00FDFE  41                 	db	65
   550  00FDFF  7F                 	db	127
   551  00FE00  09                 	db	9
   552  00FE01  09                 	db	9
   553  00FE02  09                 	db	9
   554  00FE03  01                 	db	1
   555  00FE04  3E                 	db	62
   556  00FE05  41                 	db	65
   557  00FE06  41                 	db	65
   558  00FE07  51                 	db	81
   559  00FE08  73                 	db	115
   560  00FE09  7F                 	db	127
   561  00FE0A  08                 	db	8
   562  00FE0B  08                 	db	8
   563  00FE0C  08                 	db	8
   564  00FE0D  7F                 	db	127
   565  00FE0E  00                 	db	0
   566  00FE0F  41                 	db	65
   567  00FE10  7F                 	db	127
   568  00FE11  41                 	db	65
   569  00FE12  00                 	db	0
   570  00FE13  20                 	db	32
   571  00FE14  40                 	db	64
   572  00FE15  41                 	db	65
   573  00FE16  3F                 	db	63
   574  00FE17  01                 	db	1
   575  00FE18  7F                 	db	127
   576  00FE19  08                 	db	8
   577  00FE1A  14                 	db	20
   578  00FE1B  22                 	db	34
   579  00FE1C  41                 	db	65
   580  00FE1D  7F                 	db	127
   581  00FE1E  40                 	db	64
   582  00FE1F  40                 	db	64
   583  00FE20  40                 	db	64
   584  00FE21  40                 	db	64
   585  00FE22  7F                 	db	127
   586  00FE23  02                 	db	2
   587  00FE24  1C                 	db	28
   588  00FE25  02                 	db	2
   589  00FE26  7F                 	db	127
   590  00FE27  7F                 	db	127
   591  00FE28  04                 	db	4
   592  00FE29  08                 	db	8
   593  00FE2A  10                 	db	16
   594  00FE2B  7F                 	db	127
   595  00FE2C  3E                 	db	62
   596  00FE2D  41                 	db	65
   597  00FE2E  41                 	db	65
   598  00FE2F  41                 	db	65
   599  00FE30  3E                 	db	62
   600  00FE31  7F                 	db	127
   601  00FE32  09                 	db	9
   602  00FE33  09                 	db	9
   603  00FE34  09                 	db	9
   604  00FE35  06                 	db	6
   605  00FE36  3E                 	db	62
   606  00FE37  41                 	db	65
   607  00FE38  51                 	db	81
   608  00FE39  21                 	db	33
   609  00FE3A  5E                 	db	94
   610  00FE3B  7F                 	db	127
   611  00FE3C  09                 	db	9
   612  00FE3D  19                 	db	25
   613  00FE3E  29                 	db	41
   614  00FE3F  46                 	db	70
   615  00FE40                     __end_of_font:
   616                           	opt stack 0
   617  00FE40                     _font2:
   618                           	opt stack 0
   619  00FE40  26                 	db	38
   620  00FE41  49                 	db	73
   621  00FE42  49                 	db	73
   622  00FE43  49                 	db	73
   623  00FE44  32                 	db	50
   624  00FE45  03                 	db	3
   625  00FE46  01                 	db	1
   626  00FE47  7F                 	db	127
   627  00FE48  01                 	db	1
   628  00FE49  03                 	db	3
   629  00FE4A  3F                 	db	63
   630  00FE4B  40                 	db	64
   631  00FE4C  40                 	db	64
   632  00FE4D  40                 	db	64
   633  00FE4E  3F                 	db	63
   634  00FE4F  1F                 	db	31
   635  00FE50  20                 	db	32
   636  00FE51  40                 	db	64
   637  00FE52  20                 	db	32
   638  00FE53  1F                 	db	31
   639  00FE54  3F                 	db	63
   640  00FE55  40                 	db	64
   641  00FE56  38                 	db	56
   642  00FE57  40                 	db	64
   643  00FE58  3F                 	db	63
   644  00FE59  63                 	db	99
   645  00FE5A  14                 	db	20
   646  00FE5B  08                 	db	8
   647  00FE5C  14                 	db	20
   648  00FE5D  63                 	db	99
   649  00FE5E  03                 	db	3
   650  00FE5F  04                 	db	4
   651  00FE60  78                 	db	120
   652  00FE61  04                 	db	4
   653  00FE62  03                 	db	3
   654  00FE63  61                 	db	97
   655  00FE64  59                 	db	89
   656  00FE65  49                 	db	73
   657  00FE66  4D                 	db	77
   658  00FE67  43                 	db	67
   659  00FE68  00                 	db	0
   660  00FE69  7F                 	db	127
   661  00FE6A  41                 	db	65
   662  00FE6B  41                 	db	65
   663  00FE6C  41                 	db	65
   664  00FE6D  02                 	db	2
   665  00FE6E  04                 	db	4
   666  00FE6F  08                 	db	8
   667  00FE70  10                 	db	16
   668  00FE71  20                 	db	32
   669  00FE72  00                 	db	0
   670  00FE73  41                 	db	65
   671  00FE74  41                 	db	65
   672  00FE75  41                 	db	65
   673  00FE76  7F                 	db	127
   674  00FE77  04                 	db	4
   675  00FE78  02                 	db	2
   676  00FE79  01                 	db	1
   677  00FE7A  02                 	db	2
   678  00FE7B  04                 	db	4
   679  00FE7C  40                 	db	64
   680  00FE7D  40                 	db	64
   681  00FE7E  40                 	db	64
   682  00FE7F  40                 	db	64
   683  00FE80  40                 	db	64
   684  00FE81  00                 	db	0
   685  00FE82  03                 	db	3
   686  00FE83  07                 	db	7
   687  00FE84  08                 	db	8
   688  00FE85  00                 	db	0
   689  00FE86  20                 	db	32
   690  00FE87  54                 	db	84
   691  00FE88  54                 	db	84
   692  00FE89  78                 	db	120
   693  00FE8A  40                 	db	64
   694  00FE8B  7F                 	db	127
   695  00FE8C  28                 	db	40
   696  00FE8D  44                 	db	68
   697  00FE8E  44                 	db	68
   698  00FE8F  38                 	db	56
   699  00FE90  38                 	db	56
   700  00FE91  44                 	db	68
   701  00FE92  44                 	db	68
   702  00FE93  44                 	db	68
   703  00FE94  28                 	db	40
   704  00FE95  38                 	db	56
   705  00FE96  44                 	db	68
   706  00FE97  44                 	db	68
   707  00FE98  28                 	db	40
   708  00FE99  7F                 	db	127
   709  00FE9A  38                 	db	56
   710  00FE9B  54                 	db	84
   711  00FE9C  54                 	db	84
   712  00FE9D  54                 	db	84
   713  00FE9E  18                 	db	24
   714  00FE9F  00                 	db	0
   715  00FEA0  08                 	db	8
   716  00FEA1  7E                 	db	126
   717  00FEA2  09                 	db	9
   718  00FEA3  02                 	db	2
   719  00FEA4  18                 	db	24
   720  00FEA5  A4                 	db	164
   721  00FEA6  A4                 	db	164
   722  00FEA7  9C                 	db	156
   723  00FEA8  78                 	db	120
   724  00FEA9  7F                 	db	127
   725  00FEAA  08                 	db	8
   726  00FEAB  04                 	db	4
   727  00FEAC  04                 	db	4
   728  00FEAD  78                 	db	120
   729  00FEAE  00                 	db	0
   730  00FEAF  44                 	db	68
   731  00FEB0  7D                 	db	125
   732  00FEB1  40                 	db	64
   733  00FEB2  00                 	db	0
   734  00FEB3  20                 	db	32
   735  00FEB4  40                 	db	64
   736  00FEB5  40                 	db	64
   737  00FEB6  3D                 	db	61
   738  00FEB7  00                 	db	0
   739  00FEB8  7F                 	db	127
   740  00FEB9  10                 	db	16
   741  00FEBA  28                 	db	40
   742  00FEBB  44                 	db	68
   743  00FEBC  00                 	db	0
   744  00FEBD  00                 	db	0
   745  00FEBE  41                 	db	65
   746  00FEBF  7F                 	db	127
   747  00FEC0  40                 	db	64
   748  00FEC1  00                 	db	0
   749  00FEC2  7C                 	db	124
   750  00FEC3  04                 	db	4
   751  00FEC4  78                 	db	120
   752  00FEC5  04                 	db	4
   753  00FEC6  78                 	db	120
   754  00FEC7  7C                 	db	124
   755  00FEC8  08                 	db	8
   756  00FEC9  04                 	db	4
   757  00FECA  04                 	db	4
   758  00FECB  78                 	db	120
   759  00FECC  38                 	db	56
   760  00FECD  44                 	db	68
   761  00FECE  44                 	db	68
   762  00FECF  44                 	db	68
   763  00FED0  38                 	db	56
   764  00FED1  FC                 	db	252
   765  00FED2  18                 	db	24
   766  00FED3  24                 	db	36
   767  00FED4  24                 	db	36
   768  00FED5  18                 	db	24
   769  00FED6  18                 	db	24
   770  00FED7  24                 	db	36
   771  00FED8  24                 	db	36
   772  00FED9  18                 	db	24
   773  00FEDA  FC                 	db	252
   774  00FEDB  7C                 	db	124
   775  00FEDC  08                 	db	8
   776  00FEDD  04                 	db	4
   777  00FEDE  04                 	db	4
   778  00FEDF  08                 	db	8
   779  00FEE0  48                 	db	72
   780  00FEE1  54                 	db	84
   781  00FEE2  54                 	db	84
   782  00FEE3  54                 	db	84
   783  00FEE4  24                 	db	36
   784  00FEE5  04                 	db	4
   785  00FEE6  04                 	db	4
   786  00FEE7  3F                 	db	63
   787  00FEE8  44                 	db	68
   788  00FEE9  24                 	db	36
   789  00FEEA  3C                 	db	60
   790  00FEEB  40                 	db	64
   791  00FEEC  40                 	db	64
   792  00FEED  20                 	db	32
   793  00FEEE  7C                 	db	124
   794  00FEEF  1C                 	db	28
   795  00FEF0  20                 	db	32
   796  00FEF1  40                 	db	64
   797  00FEF2  20                 	db	32
   798  00FEF3  1C                 	db	28
   799  00FEF4  3C                 	db	60
   800  00FEF5  40                 	db	64
   801  00FEF6  30                 	db	48
   802  00FEF7  40                 	db	64
   803  00FEF8  3C                 	db	60
   804  00FEF9  44                 	db	68
   805  00FEFA  28                 	db	40
   806  00FEFB  10                 	db	16
   807  00FEFC  28                 	db	40
   808  00FEFD  44                 	db	68
   809  00FEFE  4C                 	db	76
   810  00FEFF  90                 	db	144
   811  00FF00  90                 	db	144
   812  00FF01  90                 	db	144
   813  00FF02  7C                 	db	124
   814  00FF03  44                 	db	68
   815  00FF04  64                 	db	100
   816  00FF05  54                 	db	84
   817  00FF06  4C                 	db	76
   818  00FF07  44                 	db	68
   819  00FF08  00                 	db	0
   820  00FF09  08                 	db	8
   821  00FF0A  36                 	db	54
   822  00FF0B  41                 	db	65
   823  00FF0C  00                 	db	0
   824  00FF0D  00                 	db	0
   825  00FF0E  00                 	db	0
   826  00FF0F  77                 	db	119
   827  00FF10  00                 	db	0
   828  00FF11  00                 	db	0
   829  00FF12  00                 	db	0
   830  00FF13  41                 	db	65
   831  00FF14  36                 	db	54
   832  00FF15  08                 	db	8
   833  00FF16  00                 	db	0
   834  00FF17  02                 	db	2
   835  00FF18  01                 	db	1
   836  00FF19  02                 	db	2
   837  00FF1A  04                 	db	4
   838  00FF1B  02                 	db	2
   839  00FF1C                     __end_of_font2:
   840                           	opt stack 0
   841  00FF1C                     _dpowers:
   842                           	opt stack 0
   843  00FF1C  0001               	dw	1
   844  00FF1E  000A               	dw	10
   845  00FF20  0064               	dw	100
   846  00FF22  03E8               	dw	1000
   847  00FF24  2710               	dw	10000
   848  00FF26                     __end_of_dpowers:
   849                           	opt stack 0
   850  00FF26                     _hexpowers:
   851                           	opt stack 0
   852  00FF26  0001               	dw	1
   853  00FF28  0010               	dw	16
   854  00FF2A  0100               	dw	256
   855  00FF2C  1000               	dw	4096
   856  00FF2E                     __end_of_hexpowers:
   857                           	opt stack 0
   858  0000                     _ADCON1	set	4033
   859  0000                     _CCP1CON	set	4029
   860  0000                     _CCP2CON	set	4026
   861  0000                     _CCPR1L	set	4030
   862  0000                     _CCPR2L	set	4027
   863  0000                     _INTCON2bits	set	4081
   864  0000                     _INTCONbits	set	4082
   865  0000                     _OSCCON	set	4051
   866  0000                     _PIE1bits	set	3997
   867  0000                     _PIR1bits	set	3998
   868  0000                     _PORTA	set	3968
   869  0000                     _PORTBbits	set	3969
   870  0000                     _PORTCbits	set	3970
   871  0000                     _PORTD	set	3971
   872  0000                     _PORTEbits	set	3972
   873  0000                     _PR2	set	4043
   874  0000                     _RCSTA	set	4011
   875  0000                     _RCSTAbits	set	4011
   876  0000                     _SPBRG	set	4015
   877  0000                     _SPBRGH	set	4016
   878  0000                     _SSPBUF	set	4041
   879  0000                     _SSPCON1	set	4038
   880  0000                     _SSPSTAT	set	4039
   881  0000                     _SSPSTATbits	set	4039
   882  0000                     _T0CON	set	4053
   883  0000                     _T0CONbits	set	4053
   884  0000                     _T1CON	set	4045
   885  0000                     _T1CONbits	set	4045
   886  0000                     _T2CON	set	4042
   887  0000                     _T3CON	set	4017
   888  0000                     _T3CONbits	set	4017
   889  0000                     _TMR0H	set	4055
   890  0000                     _TMR0L	set	4054
   891  0000                     _TMR1H	set	4047
   892  0000                     _TMR1L	set	4046
   893  0000                     _TMR3L	set	4018
   894  0000                     _TRISA	set	3986
   895  0000                     _TRISB	set	3987
   896  0000                     _TRISBbits	set	3987
   897  0000                     _TRISC	set	3988
   898  0000                     _TRISCbits	set	3988
   899  0000                     _TRISD	set	3989
   900  0000                     _TRISE	set	3990
   901  0000                     _TXREG	set	4013
   902  0000                     _TXSTA	set	4012
   903  0000                     _TXSTAbits	set	4012
   904  0000                     _INT0IE	set	32660
   905  0000                     _RBPU	set	32655
   906  0000                     _TRMT	set	32097
   907  00FF2E                     STR_1:
   908  00FF2E  25                 	db	37
   909  00FF2F  30                 	db	48	;'0'
   910  00FF30  32                 	db	50	;'2'
   911  00FF31  78                 	db	120	;'x'
   912  00FF32  3A                 	db	58	;':'
   913  00FF33  25                 	db	37
   914  00FF34  30                 	db	48	;'0'
   915  00FF35  32                 	db	50	;'2'
   916  00FF36  78                 	db	120	;'x'
   917  00FF37  3A                 	db	58	;':'
   918  00FF38  25                 	db	37
   919  00FF39  30                 	db	48	;'0'
   920  00FF3A  32                 	db	50	;'2'
   921  00FF3B  78                 	db	120	;'x'
   922  00FF3C  20                 	db	32
   923  00FF3D  25                 	db	37
   924  00FF3E  30                 	db	48	;'0'
   925  00FF3F  32                 	db	50	;'2'
   926  00FF40  78                 	db	120	;'x'
   927  00FF41  2F                 	db	47
   928  00FF42  25                 	db	37
   929  00FF43  30                 	db	48	;'0'
   930  00FF44  32                 	db	50	;'2'
   931  00FF45  78                 	db	120	;'x'
   932  00FF46  2F                 	db	47
   933  00FF47  25                 	db	37
   934  00FF48  30                 	db	48	;'0'
   935  00FF49  32                 	db	50	;'2'
   936  00FF4A  78                 	db	120	;'x'
   937  00FF4B  00                 	db	0
   938  00FF4C                     STR_5:
   939  00FF4C  43                 	db	67	;'C'
   940  00FF4D  61                 	db	97	;'a'
   941  00FF4E  6E                 	db	110	;'n'
   942  00FF4F  6E                 	db	110	;'n'
   943  00FF50  6F                 	db	111	;'o'
   944  00FF51  74                 	db	116	;'t'
   945  00FF52  20                 	db	32
   946  00FF53  66                 	db	102	;'f'
   947  00FF54  69                 	db	105	;'i'
   948  00FF55  6E                 	db	110	;'n'
   949  00FF56  64                 	db	100	;'d'
   950  00FF57  20                 	db	32
   951  00FF58  62                 	db	98	;'b'
   952  00FF59  75                 	db	117	;'u'
   953  00FF5A  74                 	db	116	;'t'
   954  00FF5B  74                 	db	116	;'t'
   955  00FF5C  6F                 	db	111	;'o'
   956  00FF5D  6E                 	db	110	;'n'
   957  00FF5E  20                 	db	32
   958  00FF5F  0D                 	db	13
   959  00FF60  0A                 	db	10
   960  00FF61  00                 	db	0
   961  00FF62                     STR_2:
   962  00FF62  20                 	db	32
   963  00FF63  54                 	db	84	;'T'
   964  00FF64  65                 	db	101	;'e'
   965  00FF65  6D                 	db	109	;'m'
   966  00FF66  70                 	db	112	;'p'
   967  00FF67  20                 	db	32
   968  00FF68  3D                 	db	61	;'='
   969  00FF69  20                 	db	32
   970  00FF6A  25                 	db	37
   971  00FF6B  64                 	db	100	;'d'
   972  00FF6C  20                 	db	32
   973  00FF6D  43                 	db	67	;'C'
   974  00FF6E  20                 	db	32
   975  00FF6F  3D                 	db	61	;'='
   976  00FF70  20                 	db	32
   977  00FF71  25                 	db	37
   978  00FF72  64                 	db	100	;'d'
   979  00FF73  20                 	db	32
   980  00FF74  46                 	db	70	;'F'
   981  00FF75  20                 	db	32
   982  00FF76  00                 	db	0
   983  00FF77                     STR_7:
   984  00FF77  45                 	db	69	;'E'
   985  00FF78  43                 	db	67	;'C'
   986  00FF79  45                 	db	69	;'E'
   987  00FF7A  33                 	db	51	;'3'
   988  00FF7B  33                 	db	51	;'3'
   989  00FF7C  30                 	db	48	;'0'
   990  00FF7D  31                 	db	49	;'1'
   991  00FF7E  4C                 	db	76	;'L'
   992  00FF7F  20                 	db	32
   993  00FF80  46                 	db	70	;'F'
   994  00FF81  61                 	db	97	;'a'
   995  00FF82  6C                 	db	108	;'l'
   996  00FF83  6C                 	db	108	;'l'
   997  00FF84  20                 	db	32
   998  00FF85  32                 	db	50	;'2'
   999  00FF86  32                 	db	50	;'2'
  1000  00FF87  2D                 	db	45
  1001  00FF88  53                 	db	83	;'S'
  1002  00FF89  34                 	db	52	;'4'
  1003  00FF8A  00                 	db	0
  1004  00FF8B                     STR_3:
  1005  00FF8B  52                 	db	82	;'R'
  1006  00FF8C  50                 	db	80	;'P'
  1007  00FF8D  4D                 	db	77	;'M'
  1008  00FF8E  20                 	db	32
  1009  00FF8F  3D                 	db	61	;'='
  1010  00FF90  20                 	db	32
  1011  00FF91  25                 	db	37
  1012  00FF92  64                 	db	100	;'d'
  1013  00FF93  20                 	db	32
  1014  00FF94  20                 	db	32
  1015  00FF95  64                 	db	100	;'d'
  1016  00FF96  63                 	db	99	;'c'
  1017  00FF97  20                 	db	32
  1018  00FF98  3D                 	db	61	;'='
  1019  00FF99  20                 	db	32
  1020  00FF9A  25                 	db	37
  1021  00FF9B  64                 	db	100	;'d'
  1022  00FF9C  0D                 	db	13
  1023  00FF9D  0A                 	db	10
  1024  00FF9E  00                 	db	0
  1025  00FF9F                     STR_18:
  1026  00FF9F  30                 	db	48	;'0'
  1027  00FFA0  31                 	db	49	;'1'
  1028  00FFA1  32                 	db	50	;'2'
  1029  00FFA2  33                 	db	51	;'3'
  1030  00FFA3  34                 	db	52	;'4'
  1031  00FFA4  35                 	db	53	;'5'
  1032  00FFA5  36                 	db	54	;'6'
  1033  00FFA6  37                 	db	55	;'7'
  1034  00FFA7  38                 	db	56	;'8'
  1035  00FFA8  39                 	db	57	;'9'
  1036  00FFA9  61                 	db	97	;'a'
  1037  00FFAA  62                 	db	98	;'b'
  1038  00FFAB  63                 	db	99	;'c'
  1039  00FFAC  64                 	db	100	;'d'
  1040  00FFAD  65                 	db	101	;'e'
  1041  00FFAE  66                 	db	102	;'f'
  1042  00FFAF  00                 	db	0
  1043  00FFB0                     STR_4:
  1044  00FFB0  4E                 	db	78	;'N'
  1045  00FFB1  45                 	db	69	;'E'
  1046  00FFB2  43                 	db	67	;'C'
  1047  00FFB3  5F                 	db	95	;'_'
  1048  00FFB4  43                 	db	67	;'C'
  1049  00FFB5  6F                 	db	111	;'o'
  1050  00FFB6  64                 	db	100	;'d'
  1051  00FFB7  65                 	db	101	;'e'
  1052  00FFB8  20                 	db	32
  1053  00FFB9  3D                 	db	61	;'='
  1054  00FFBA  20                 	db	32
  1055  00FFBB  25                 	db	37
  1056  00FFBC  78                 	db	120	;'x'
  1057  00FFBD  0D                 	db	13
  1058  00FFBE  0A                 	db	10
  1059  00FFBF  00                 	db	0
  1060  00FFC0                     STR_6:
  1061  00FFC0  62                 	db	98	;'b'
  1062  00FFC1  75                 	db	117	;'u'
  1063  00FFC2  74                 	db	116	;'t'
  1064  00FFC3  74                 	db	116	;'t'
  1065  00FFC4  6F                 	db	111	;'o'
  1066  00FFC5  6E                 	db	110	;'n'
  1067  00FFC6  20                 	db	32
  1068  00FFC7  3D                 	db	61	;'='
  1069  00FFC8  20                 	db	32
  1070  00FFC9  25                 	db	37
  1071  00FFCA  64                 	db	100	;'d'
  1072  00FFCB  20                 	db	32
  1073  00FFCC  0D                 	db	13
  1074  00FFCD  0A                 	db	10
  1075  00FFCE  00                 	db	0
  1076  00FFCF                     STR_8:
  1077  00FFCF  54                 	db	84	;'T'
  1078  00FFD0  65                 	db	101	;'e'
  1079  00FFD1  6D                 	db	109	;'m'
  1080  00FFD2  70                 	db	112	;'p'
  1081  00FFD3  65                 	db	101	;'e'
  1082  00FFD4  72                 	db	114	;'r'
  1083  00FFD5  61                 	db	97	;'a'
  1084  00FFD6  74                 	db	116	;'t'
  1085  00FFD7  75                 	db	117	;'u'
  1086  00FFD8  72                 	db	114	;'r'
  1087  00FFD9  65                 	db	101	;'e'
  1088  00FFDA  3A                 	db	58	;':'
  1089  00FFDB  00                 	db	0
  1090  00FFDC                     STR_13:
  1091  00FFDC  20                 	db	32
  1092  00FFDD  20                 	db	32
  1093  00FFDE  46                 	db	70	;'F'
  1094  00FFDF  41                 	db	65	;'A'
  1095  00FFE0  4E                 	db	78	;'N'
  1096  00FFE1  00                 	db	0
  1097  00FFE2                     STR_11:
  1098  00FFE2  54                 	db	84	;'T'
  1099  00FFE3  69                 	db	105	;'i'
  1100  00FFE4  6D                 	db	109	;'m'
  1101  00FFE5  65                 	db	101	;'e'
  1102  00FFE6  00                 	db	0
  1103  00FFE7                     STR_12:
  1104  00FFE7  44                 	db	68	;'D'
  1105  00FFE8  61                 	db	97	;'a'
  1106  00FFE9  74                 	db	116	;'t'
  1107  00FFEA  65                 	db	101	;'e'
  1108  00FFEB  00                 	db	0
  1109  00FFEC                     STR_16:
  1110  00FFEC  4F                 	db	79	;'O'
  1111  00FFED  4E                 	db	78	;'N'
  1112  00FFEE  20                 	db	32
  1113  00FFEF  00                 	db	0
  1114  00FFF0                     STR_17:
  1115  00FFF0  4F                 	db	79	;'O'
  1116  00FFF1  46                 	db	70	;'F'
  1117  00FFF2  46                 	db	70	;'F'
  1118  00FFF3  00                 	db	0
  1119  00FFF4                     STR_15:
  1120  00FFF4  52                 	db	82	;'R'
  1121  00FFF5  50                 	db	80	;'P'
  1122  00FFF6  4D                 	db	77	;'M'
  1123  00FFF7  00                 	db	0
  1124  00FFF8                     STR_9:
  1125  00FFF8  43                 	db	67	;'C'
  1126  00FFF9  2F                 	db	47
  1127  00FFFA  00                 	db	0
  1128  00FFFB                     STR_14:
  1129  00FFFB  44                 	db	68	;'D'
  1130  00FFFC  43                 	db	67	;'C'
  1131  00FFFD  00                 	db	0
  1132  0000                     
  1133                           ; #config settings
  1134  00FFFE  00                 	db	0	; dummy byte at the end
  1135  0000                     
  1136                           	psect	cinit
  1137  001A18                     __pcinit:
  1138                           	opt stack 0
  1139  001A18                     start_initialization:
  1140                           	opt stack 0
  1141  001A18                     __initialization:
  1142                           	opt stack 0
  1143                           
  1144                           ; Clear objects allocated to BANK0 (10 bytes)
  1145  001A18  EE00  F0F5         	lfsr	0,__pbssBANK0
  1146  001A1C  0E0A               	movlw	10
  1147  001A1E                     clear_0:
  1148  001A1E  6AEE               	clrf	postinc0,c
  1149  001A20  06E8               	decf	wreg,f,c
  1150  001A22  E1FD               	bnz	clear_0
  1151                           
  1152                           ; Clear objects allocated to COMRAM (41 bytes)
  1153  001A24  EE00  F044         	lfsr	0,__pbssCOMRAM
  1154  001A28  0E29               	movlw	41
  1155  001A2A                     clear_1:
  1156  001A2A  6AEE               	clrf	postinc0,c
  1157  001A2C  06E8               	decf	wreg,f,c
  1158  001A2E  E1FD               	bnz	clear_1
  1159                           
  1160                           ; Initialize objects allocated to BANK1 (117 bytes)
  1161                           ; load TBLPTR registers with __pidataBANK1
  1162  001A30  0E14               	movlw	low __pidataBANK1
  1163  001A32  6EF6               	movwf	tblptrl,c
  1164  001A34  0E1B               	movlw	high __pidataBANK1
  1165  001A36  6EF7               	movwf	tblptrh,c
  1166  001A38  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1167  001A3A  6EF8               	movwf	tblptru,c
  1168  001A3C  EE01  F000         	lfsr	0,__pdataBANK1
  1169  001A40  EE10 F075          	lfsr	1,117
  1170  001A44                     copy_data0:
  1171  001A44  0009               	tblrd		*+
  1172  001A46  CFF5 FFEE          	movff	tablat,postinc0
  1173  001A4A  50E5               	movf	postdec1,w,c
  1174  001A4C  50E1               	movf	fsr1l,w,c
  1175  001A4E  E1FA               	bnz	copy_data0
  1176                           
  1177                           ; Initialize objects allocated to BANK0 (101 bytes)
  1178                           ; load TBLPTR registers with __pidataBANK0
  1179  001A50  0ECA               	movlw	low __pidataBANK0
  1180  001A52  6EF6               	movwf	tblptrl,c
  1181  001A54  0E1C               	movlw	high __pidataBANK0
  1182  001A56  6EF7               	movwf	tblptrh,c
  1183  001A58  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1184  001A5A  6EF8               	movwf	tblptru,c
  1185  001A5C  EE00  F080         	lfsr	0,__pdataBANK0
  1186  001A60  EE10 F065          	lfsr	1,101
  1187  001A64                     copy_data1:
  1188  001A64  0009               	tblrd		*+
  1189  001A66  CFF5 FFEE          	movff	tablat,postinc0
  1190  001A6A  50E5               	movf	postdec1,w,c
  1191  001A6C  50E1               	movf	fsr1l,w,c
  1192  001A6E  E1FA               	bnz	copy_data1
  1193                           
  1194                           ; Initialize objects allocated to COMRAM (3 bytes)
  1195                           ; load TBLPTR registers with __pidataCOMRAM
  1196  001A70  0E86               	movlw	low __pidataCOMRAM
  1197  001A72  6EF6               	movwf	tblptrl,c
  1198  001A74  0E24               	movlw	high __pidataCOMRAM
  1199  001A76  6EF7               	movwf	tblptrh,c
  1200  001A78  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1201  001A7A  6EF8               	movwf	tblptru,c
  1202  001A7C  0009               	tblrd		*+	;fetch initializer
  1203  001A7E  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1204  001A82  0009               	tblrd		*+	;fetch initializer
  1205  001A84  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1206  001A88  0009               	tblrd		*+	;fetch initializer
  1207  001A8A  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1208  001A8E                     end_of_initialization:
  1209                           	opt stack 0
  1210  001A8E                     __end_of__initialization:
  1211                           	opt stack 0
  1212  001A8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1213  001A90  6EF8               	movwf	tblptru,c
  1214  001A92  0100               	movlb	0
  1215  001A94  EFDA  F004         	goto	_main	;jump to C main() function
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           
  1225                           	psect	bssCOMRAM
  1226  000044                     __pbssCOMRAM:
  1227                           	opt stack 0
  1228  000044                     _DS1621_tempC:
  1229                           	opt stack 0
  1230  000044                     	ds	2
  1231  000046                     _DS1621_tempF:
  1232                           	opt stack 0
  1233  000046                     	ds	2
  1234  000048                     _Time_Elapsed:
  1235                           	opt stack 0
  1236  000048                     	ds	2
  1237  00004A                     _nec_ok:
  1238                           	opt stack 0
  1239  00004A                     	ds	2
  1240  00004C                     _rpm:
  1241                           	opt stack 0
  1242  00004C                     	ds	2
  1243  00004E                     _txt:
  1244                           	opt stack 0
  1245  00004E                     	ds	2
  1246  000050                     _FAN:
  1247                           	opt stack 0
  1248  000050                     	ds	1
  1249  000051                     _Nec_code1:
  1250                           	opt stack 0
  1251  000051                     	ds	1
  1252  000052                     _Nec_state:
  1253                           	opt stack 0
  1254  000052                     	ds	1
  1255  000053                     __tft_type:
  1256                           	opt stack 0
  1257  000053                     	ds	1
  1258  000054                     _alarm_date:
  1259                           	opt stack 0
  1260  000054                     	ds	1
  1261  000055                     _alarm_hour:
  1262                           	opt stack 0
  1263  000055                     	ds	1
  1264  000056                     _alarm_minute:
  1265                           	opt stack 0
  1266  000056                     	ds	1
  1267  000057                     _alarm_second:
  1268                           	opt stack 0
  1269  000057                     	ds	1
  1270  000058                     _bit_count:
  1271                           	opt stack 0
  1272  000058                     	ds	1
  1273  000059                     _colstart:
  1274                           	opt stack 0
  1275  000059                     	ds	1
  1276  00005A                     _day:
  1277                           	opt stack 0
  1278  00005A                     	ds	1
  1279  00005B                     _dow:
  1280                           	opt stack 0
  1281  00005B                     	ds	1
  1282  00005C                     _duty_cycle:
  1283                           	opt stack 0
  1284  00005C                     	ds	1
  1285  00005D                     _found:
  1286                           	opt stack 0
  1287  00005D                     	ds	1
  1288  00005E                     _hour:
  1289                           	opt stack 0
  1290  00005E                     	ds	1
  1291  00005F                     _minute:
  1292                           	opt stack 0
  1293  00005F                     	ds	1
  1294  000060                     _month:
  1295                           	opt stack 0
  1296  000060                     	ds	1
  1297  000061                     _rowstart:
  1298                           	opt stack 0
  1299  000061                     	ds	1
  1300  000062                     _second:
  1301                           	opt stack 0
  1302  000062                     	ds	1
  1303  000063                     _setup_alarm_hour:
  1304                           	opt stack 0
  1305  000063                     	ds	1
  1306  000064                     _setup_alarm_minute:
  1307                           	opt stack 0
  1308  000064                     	ds	1
  1309  000065                     _setup_alarm_second:
  1310                           	opt stack 0
  1311  000065                     	ds	1
  1312  000066                     _setup_day:
  1313                           	opt stack 0
  1314  000066                     	ds	1
  1315  000067                     _setup_hour:
  1316                           	opt stack 0
  1317  000067                     	ds	1
  1318  000068                     _setup_minute:
  1319                           	opt stack 0
  1320  000068                     	ds	1
  1321  000069                     _setup_month:
  1322                           	opt stack 0
  1323  000069                     	ds	1
  1324  00006A                     _setup_second:
  1325                           	opt stack 0
  1326  00006A                     	ds	1
  1327  00006B                     _setup_year:
  1328                           	opt stack 0
  1329  00006B                     	ds	1
  1330  00006C                     _year:
  1331                           	opt stack 0
  1332  00006C                     	ds	1
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           
  1342                           	psect	dataCOMRAM
  1343  00006D                     __pdataCOMRAM:
  1344                           	opt stack 0
  1345  00006D                     _setup_fan_temp:
  1346                           	opt stack 0
  1347  00006D                     	ds	1
  1348  00006E                     _tempSecond:
  1349                           	opt stack 0
  1350  00006E                     	ds	1
  1351  00006F                     _wrap:
  1352                           	opt stack 0
  1353  00006F                     	ds	1
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363                           	psect	bssBANK0
  1364  0000F5                     __pbssBANK0:
  1365                           	opt stack 0
  1366  0000F5                     _Nec_code:
  1367                           	opt stack 0
  1368  0000F5                     	ds	4
  1369  0000F9                     _ALARMEN:
  1370                           	opt stack 0
  1371  0000F9                     	ds	2
  1372  0000FB                     _nbr:
  1373                           	opt stack 0
  1374  0000FB                     	ds	2
  1375  0000FD                     _rps:
  1376                           	opt stack 0
  1377  0000FD                     	ds	2
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postdec1	equ	0xFE5
  1385                           fsr1l	equ	0xFE1
  1386                           
  1387                           	psect	dataBANK0
  1388  000080                     __pdataBANK0:
  1389                           	opt stack 0
  1390  000080                     _alarm_time:
  1391                           	opt stack 0
  1392  000080                     	ds	9
  1393  000089                     _setup_alarm_time:
  1394                           	opt stack 0
  1395  000089                     	ds	9
  1396  000092                     _setup_date:
  1397                           	opt stack 0
  1398  000092                     	ds	9
  1399  00009B                     _setup_time:
  1400                           	opt stack 0
  1401  00009B                     	ds	9
  1402  0000A4                     _D1:
  1403                           	opt stack 0
  1404  0000A4                     	ds	8
  1405  0000AC                     _D2:
  1406                           	opt stack 0
  1407  0000AC                     	ds	7
  1408  0000B3                     _setup_fan_text:
  1409                           	opt stack 0
  1410  0000B3                     	ds	5
  1411  0000B8                     _Alarm_SW_Txt:
  1412                           	opt stack 0
  1413  0000B8                     	ds	4
  1414  0000BC                     _RTC_ALARM_Txt:
  1415                           	opt stack 0
  1416  0000BC                     	ds	2
  1417  0000BE                     _date:
  1418                           	opt stack 0
  1419  0000BE                     	ds	9
  1420  0000C7                     _time:
  1421                           	opt stack 0
  1422  0000C7                     	ds	9
  1423  0000D0                     _RPM_Txt:
  1424                           	opt stack 0
  1425  0000D0                     	ds	5
  1426  0000D5                     _DC_Txt:
  1427                           	opt stack 0
  1428  0000D5                     	ds	4
  1429  0000D9                     _Fan_SW_Txt:
  1430                           	opt stack 0
  1431  0000D9                     	ds	4
  1432  0000DD                     _tempC:
  1433                           	opt stack 0
  1434  0000DD                     	ds	4
  1435  0000E1                     _tempF:
  1436                           	opt stack 0
  1437  0000E1                     	ds	4
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1l	equ	0xFE1
  1446                           
  1447                           	psect	dataBANK1
  1448  000100                     __pdataBANK1:
  1449                           	opt stack 0
  1450  000100                     _color:
  1451                           	opt stack 0
  1452  000100                     	ds	42
  1453  00012A                     _D3:
  1454                           	opt stack 0
  1455  00012A                     	ds	21
  1456  00013F                     _array1:
  1457                           	opt stack 0
  1458  00013F                     	ds	21
  1459  000154                     _buffer:
  1460                           	opt stack 0
  1461  000154                     	ds	33
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	cstackBANK0
  1472  0000E5                     __pcstackBANK0:
  1473                           	opt stack 0
  1474  0000E5                     drawtext@x:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x0
  1478  0000E5                     	ds	1
  1479  0000E6                     drawtext@textsize:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x1
  1483  0000E6                     	ds	2
  1484  0000E8                     drawtext@i:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x3
  1488  0000E8                     	ds	2
  1489  0000EA                     drawtext@cursor_y:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x5
  1493  0000EA                     	ds	1
  1494  0000EB                     drawtext@cursor_x:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x6
  1498  0000EB                     	ds	1
  1499  0000EC                     ??_Update_Screen:
  1500                           
  1501                           ; 0 bytes @ 0x7
  1502  0000EC                     	ds	2
  1503  0000EE                     Update_Screen@neg_tempF:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x9
  1507  0000EE                     	ds	2
  1508  0000F0                     
  1509                           ; 0 bytes @ 0xB
  1510  0000F0                     	ds	1
  1511  0000F1                     main@i:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0xC
  1515  0000F1                     	ds	2
  1516  0000F3                     main@j:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0xE
  1520  0000F3                     	ds	2
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1l	equ	0xFE1
  1529                           
  1530                           	psect	cstackCOMRAM
  1531  000001                     __pcstackCOMRAM:
  1532                           	opt stack 0
  1533  000001                     ??_INT0_isr:
  1534  000001                     
  1535                           ; 2 bytes @ 0x0
  1536  000001                     	ds	2
  1537  000003                     ??_chkisr:
  1538                           
  1539                           ; 0 bytes @ 0x2
  1540  000003                     	ds	14
  1541  000011                     ??_isdigit:
  1542  000011                     ?_strlen:
  1543                           	opt stack 0
  1544  000011                     ?___wmul:
  1545                           	opt stack 0
  1546  000011                     ?___lwdiv:
  1547                           	opt stack 0
  1548  000011                     ?___ftpack:
  1549                           	opt stack 0
  1550  000011                     ?___fttol:
  1551                           	opt stack 0
  1552  000011                     putch@c:
  1553                           	opt stack 0
  1554  000011                     I2C_Read@ack:
  1555                           	opt stack 0
  1556  000011                     I2C_Write@outByte:
  1557                           	opt stack 0
  1558  000011                     spiwrite@x:
  1559                           	opt stack 0
  1560  000011                     Wait_One_Sec@k:
  1561                           	opt stack 0
  1562  000011                     OpenUSART@spbrg:
  1563                           	opt stack 0
  1564  000011                     ___wmul@multiplier:
  1565                           	opt stack 0
  1566  000011                     ___lwdiv@dividend:
  1567                           	opt stack 0
  1568  000011                     strcpy@to:
  1569                           	opt stack 0
  1570  000011                     strlen@s:
  1571                           	opt stack 0
  1572  000011                     ___ftpack@arg:
  1573                           	opt stack 0
  1574  000011                     ___fttol@f1:
  1575                           	opt stack 0
  1576  000011                     I2C_Init@c:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x10
  1580  000011                     	ds	1
  1581  000012                     I2C_Read@n:
  1582                           	opt stack 0
  1583  000012                     I2C_Write@n:
  1584                           	opt stack 0
  1585  000012                     spiwrite@spidata:
  1586                           	opt stack 0
  1587  000012                     _isdigit$2431:
  1588                           	opt stack 0
  1589                           
  1590                           ; 1 bytes @ 0x11
  1591  000012                     	ds	1
  1592  000013                     ??_strlen:
  1593  000013                     I2C_Read@inByte:
  1594                           	opt stack 0
  1595  000013                     I2C_Write_Cmd_Only@Cmd:
  1596                           	opt stack 0
  1597  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1598                           	opt stack 0
  1599  000013                     DS3231_Setup_Time@Device:
  1600                           	opt stack 0
  1601  000013                     write_command@cmd_:
  1602                           	opt stack 0
  1603  000013                     write_data@data_:
  1604                           	opt stack 0
  1605  000013                     OpenUSART@config:
  1606                           	opt stack 0
  1607  000013                     isdigit@c:
  1608                           	opt stack 0
  1609  000013                     ___wmul@multiplicand:
  1610                           	opt stack 0
  1611  000013                     ___lwdiv@divisor:
  1612                           	opt stack 0
  1613  000013                     strcpy@from:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x12
  1617  000013                     	ds	1
  1618  000014                     ?_DS1621_Read_Temp:
  1619                           	opt stack 0
  1620  000014                     I2C_Write_Cmd_Only@Device:
  1621                           	opt stack 0
  1622  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1623                           	opt stack 0
  1624  000014                     DS3231_Read_Time@Address:
  1625                           	opt stack 0
  1626  000014                     DS3231_Setup_Time@Address:
  1627                           	opt stack 0
  1628  000014                     setAddrWindow@y0:
  1629                           	opt stack 0
  1630  000014                     ___ftpack@exp:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x13
  1634  000014                     	ds	1
  1635  000015                     ??___fttol:
  1636  000015                     I2C_Write_Cmd_Write_Data@Device:
  1637                           	opt stack 0
  1638  000015                     DS3231_Read_Time@Device:
  1639                           	opt stack 0
  1640  000015                     setAddrWindow@x1:
  1641                           	opt stack 0
  1642  000015                     ___ftpack@sign:
  1643                           	opt stack 0
  1644  000015                     ___lwdiv@counter:
  1645                           	opt stack 0
  1646  000015                     ___wmul@product:
  1647                           	opt stack 0
  1648  000015                     strcpy@cp:
  1649                           	opt stack 0
  1650  000015                     strlen@cp:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x14
  1654  000015                     	ds	1
  1655  000016                     ??___ftpack:
  1656  000016                     DS1621_Init@Device:
  1657                           	opt stack 0
  1658  000016                     DS1621_Read_Temp@Cmd:
  1659                           	opt stack 0
  1660  000016                     setAddrWindow@y1:
  1661                           	opt stack 0
  1662  000016                     ___lwdiv@quotient:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x15
  1666  000016                     	ds	1
  1667  000017                     ?___awdiv:
  1668                           	opt stack 0
  1669  000017                     DS1621_Read_Temp@Data_Ret:
  1670                           	opt stack 0
  1671  000017                     setAddrWindow@x0:
  1672                           	opt stack 0
  1673  000017                     delay_ms@ms:
  1674                           	opt stack 0
  1675  000017                     ___awdiv@dividend:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x16
  1679  000017                     	ds	1
  1680  000018                     ?___lwmod:
  1681                           	opt stack 0
  1682  000018                     DS1621_Read_Temp@Device:
  1683                           	opt stack 0
  1684  000018                     drawPixel@y:
  1685                           	opt stack 0
  1686  000018                     drawFastVLine@y:
  1687                           	opt stack 0
  1688  000018                     fillRectangle@y:
  1689                           	opt stack 0
  1690  000018                     ___lwmod@dividend:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x17
  1694  000018                     	ds	1
  1695  000019                     ??_delay_ms:
  1696  000019                     ?___lbtoft:
  1697                           	opt stack 0
  1698  000019                     drawFastVLine@h:
  1699                           	opt stack 0
  1700  000019                     fillRectangle@w:
  1701                           	opt stack 0
  1702  000019                     drawPixel@color:
  1703                           	opt stack 0
  1704  000019                     ___awdiv@divisor:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x18
  1708  000019                     	ds	1
  1709  00001A                     fillRectangle@h:
  1710                           	opt stack 0
  1711  00001A                     ___fttol@sign1:
  1712                           	opt stack 0
  1713  00001A                     drawFastVLine@color:
  1714                           	opt stack 0
  1715  00001A                     ___lwmod@divisor:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x19
  1719  00001A                     	ds	1
  1720  00001B                     drawPixel@x:
  1721                           	opt stack 0
  1722  00001B                     ___awdiv@counter:
  1723                           	opt stack 0
  1724  00001B                     delay_ms@count:
  1725                           	opt stack 0
  1726  00001B                     fillRectangle@color:
  1727                           	opt stack 0
  1728  00001B                     ___fttol@lval:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x1A
  1732  00001B                     	ds	1
  1733  00001C                     ??_drawFastVLine:
  1734  00001C                     ___awdiv@sign:
  1735                           	opt stack 0
  1736  00001C                     ___lbtoft@c:
  1737                           	opt stack 0
  1738  00001C                     ___lwmod@counter:
  1739                           	opt stack 0
  1740  00001C                     drawCircle@x0:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x1B
  1744  00001C                     	ds	1
  1745  00001D                     ??_fillRectangle:
  1746  00001D                     ?_printf:
  1747                           	opt stack 0
  1748  00001D                     ?___ftmul:
  1749                           	opt stack 0
  1750  00001D                     printf@f:
  1751                           	opt stack 0
  1752  00001D                     ___awdiv@quotient:
  1753                           	opt stack 0
  1754  00001D                     ___ftmul@f1:
  1755                           	opt stack 0
  1756                           
  1757                           ; 3 bytes @ 0x1C
  1758  00001D                     	ds	1
  1759  00001E                     drawCircle@y0:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x1D
  1763  00001E                     	ds	1
  1764  00001F                     ?_get_RPM:
  1765                           	opt stack 0
  1766  00001F                     ?___awmod:
  1767                           	opt stack 0
  1768  00001F                     ___fttol@exp1:
  1769                           	opt stack 0
  1770  00001F                     Set_DC_RGB@duty_cycle:
  1771                           	opt stack 0
  1772  00001F                     Set_RPM_RGB@rpm:
  1773                           	opt stack 0
  1774  00001F                     ___awmod@dividend:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x1E
  1778  00001F                     	ds	1
  1779  000020                     drawFastVLine@hi:
  1780                           	opt stack 0
  1781  000020                     drawCircle@r:
  1782                           	opt stack 0
  1783  000020                     ___ftmul@f2:
  1784                           	opt stack 0
  1785                           
  1786                           ; 3 bytes @ 0x1F
  1787  000020                     	ds	1
  1788  000021                     ??_Set_RPM_RGB:
  1789  000021                     Set_DC_RGB@index:
  1790                           	opt stack 0
  1791  000021                     drawFastVLine@lo:
  1792                           	opt stack 0
  1793  000021                     fillRectangle@hi:
  1794                           	opt stack 0
  1795  000021                     get_RPM@RPS:
  1796                           	opt stack 0
  1797  000021                     ___awmod@divisor:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x20
  1801  000021                     	ds	1
  1802  000022                     drawFastVLine@x:
  1803                           	opt stack 0
  1804  000022                     fillRectangle@lo:
  1805                           	opt stack 0
  1806  000022                     Set_RPM_RGB@RPM:
  1807                           	opt stack 0
  1808  000022                     drawCircle@color:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x21
  1812  000022                     	ds	1
  1813  000023                     ??___ftmul:
  1814  000023                     fillRect@y:
  1815                           	opt stack 0
  1816  000023                     fillRectangle@x:
  1817                           	opt stack 0
  1818  000023                     ___awmod@counter:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0x22
  1822  000023                     	ds	1
  1823  000024                     ??_drawCircle:
  1824  000024                     fillRect@w:
  1825                           	opt stack 0
  1826  000024                     ___awmod@sign:
  1827                           	opt stack 0
  1828  000024                     Set_RPM_RGB@valuemasked:
  1829                           	opt stack 0
  1830  000024                     fillScreen@color:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x23
  1834  000024                     	ds	1
  1835  000025                     fillRect@h:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0x24
  1839  000025                     	ds	1
  1840  000026                     ___ftmul@exp:
  1841                           	opt stack 0
  1842  000026                     fillRect@color:
  1843                           	opt stack 0
  1844  000026                     drawCircle@ddF_x:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x25
  1848  000026                     	ds	1
  1849  000027                     ___ftmul@f3_as_product:
  1850                           	opt stack 0
  1851                           
  1852                           ; 3 bytes @ 0x26
  1853  000027                     	ds	1
  1854  000028                     ??_fillRect:
  1855  000028                     drawCircle@ddF_y:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x27
  1859  000028                     	ds	2
  1860  00002A                     ___ftmul@cntr:
  1861                           	opt stack 0
  1862  00002A                     drawCircle@f:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x29
  1866  00002A                     	ds	1
  1867  00002B                     ??_printf:
  1868  00002B                     fillRect@x:
  1869                           	opt stack 0
  1870  00002B                     ___ftmul@sign:
  1871                           	opt stack 0
  1872                           
  1873                           ; 1 bytes @ 0x2A
  1874  00002B                     	ds	1
  1875  00002C                     ?___ftdiv:
  1876                           	opt stack 0
  1877  00002C                     fillRect@i:
  1878                           	opt stack 0
  1879  00002C                     drawCircle@x:
  1880                           	opt stack 0
  1881  00002C                     ___ftdiv@f1:
  1882                           	opt stack 0
  1883                           
  1884                           ; 3 bytes @ 0x2B
  1885  00002C                     	ds	2
  1886  00002E                     drawChar@y:
  1887                           	opt stack 0
  1888  00002E                     drawCircle@y:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x2D
  1892  00002E                     	ds	1
  1893  00002F                     drawChar@c:
  1894                           	opt stack 0
  1895  00002F                     printf@idx:
  1896                           	opt stack 0
  1897  00002F                     ___ftdiv@f2:
  1898                           	opt stack 0
  1899                           
  1900                           ; 3 bytes @ 0x2E
  1901  00002F                     	ds	1
  1902  000030                     drawChar@color:
  1903                           	opt stack 0
  1904  000030                     printf@ap:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x2F
  1908  000030                     	ds	2
  1909  000032                     ??___ftdiv:
  1910  000032                     printf@prec:
  1911                           	opt stack 0
  1912  000032                     drawChar@bg:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x31
  1916  000032                     	ds	1
  1917  000033                     printf@val:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x32
  1921  000033                     	ds	1
  1922  000034                     drawChar@size:
  1923                           	opt stack 0
  1924                           
  1925                           ; 1 bytes @ 0x33
  1926  000034                     	ds	1
  1927  000035                     drawChar@line:
  1928                           	opt stack 0
  1929  000035                     printf@flag:
  1930                           	opt stack 0
  1931  000035                     ___ftdiv@cntr:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x34
  1935  000035                     	ds	1
  1936  000036                     drawChar@x:
  1937                           	opt stack 0
  1938  000036                     printf@width:
  1939                           	opt stack 0
  1940  000036                     ___ftdiv@f3:
  1941                           	opt stack 0
  1942                           
  1943                           ; 3 bytes @ 0x35
  1944  000036                     	ds	1
  1945  000037                     drawChar@j:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x36
  1949  000037                     	ds	1
  1950  000038                     drawChar@i:
  1951                           	opt stack 0
  1952  000038                     printf@c:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x37
  1956  000038                     	ds	1
  1957  000039                     drawtext@y:
  1958                           	opt stack 0
  1959  000039                     ___ftdiv@exp:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x38
  1963  000039                     	ds	1
  1964  00003A                     ___ftdiv@sign:
  1965                           	opt stack 0
  1966  00003A                     drawtext@_text:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x39
  1970  00003A                     	ds	1
  1971  00003B                     ??_do_update_pwm:
  1972                           
  1973                           ; 0 bytes @ 0x3A
  1974  00003B                     	ds	1
  1975  00003C                     drawtext@color:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x3B
  1979  00003C                     	ds	2
  1980  00003E                     drawtext@bg:
  1981                           	opt stack 0
  1982  00003E                     do_update_pwm@dc_f:
  1983                           	opt stack 0
  1984                           
  1985                           ; 3 bytes @ 0x3D
  1986  00003E                     	ds	2
  1987  000040                     drawtext@size:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x3F
  1991  000040                     	ds	1
  1992  000041                     ??_drawtext:
  1993  000041                     do_update_pwm@duty_cycle:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x40
  1997  000041                     	ds	1
  1998  000042                     do_update_pwm@dc_I:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x41
  2002  000042                     	ds	1
  2003  000043                     
  2004                           ; 0 bytes @ 0x42
  2005  000043                     	ds	1
  2006  000044                     tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           postdec1	equ	0xFE5
  2013                           fsr1l	equ	0xFE1
  2014                           
  2015                           ; 0 bytes @ 0x43
  2016 ;;
  2017 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2018 ;;
  2019 ;; *************** function _main *****************
  2020 ;; Defined at:
  2021 ;;		line 145 in file "Lab12p1.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  i               2   12[BANK0 ] int 
  2026 ;;  j               2   14[BANK0 ] int 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;		None               void
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;Total ram usage:        5 bytes
  2041 ;; Hardware stack levels required when called:   11
  2042 ;; This function calls:
  2043 ;;		_DS1621_Read_Temp
  2044 ;;		_DS3231_Read_Time
  2045 ;;		_DS3231_Setup_Time
  2046 ;;		_Decrease_Speed
  2047 ;;		_Do_Beep
  2048 ;;		_Do_Init
  2049 ;;		_Increase_Speed
  2050 ;;		_Initialize_Screen
  2051 ;;		_Set_DC_RGB
  2052 ;;		_Set_RPM_RGB
  2053 ;;		_Toggle_Fan
  2054 ;;		_Update_Screen
  2055 ;;		___awdiv
  2056 ;;		___wmul
  2057 ;;		_get_RPM
  2058 ;;		_printf
  2059 ;; This function is called by:
  2060 ;;		Startup code after reset
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text0
  2065  0009B4                     __ptext0:
  2066                           	opt stack 0
  2067  0009B4                     _main:
  2068                           	opt stack 20
  2069                           
  2070                           ;Lab12p1.c: 147: Do_Init();
  2071                           
  2072                           ;incstack = 0
  2073  0009B4  EC6E  F00F         	call	_Do_Init	;wreg free
  2074                           
  2075                           ;Lab12p1.c: 148: DS3231_Setup_Time();
  2076  0009B8  EC32  F00E         	call	_DS3231_Setup_Time	;wreg free
  2077                           
  2078                           ;Lab12p1.c: 149: T3CONbits.TMR3ON = 1;
  2079  0009BC  80B1               	bsf	4017,0,c	;volatile
  2080                           
  2081                           ;Lab12p1.c: 150: Initialize_Screen();
  2082  0009BE  ECA5  F003         	call	_Initialize_Screen	;wreg free
  2083  0009C2  D000               	goto	l6706
  2084  0009C4                     l6706:
  2085                           
  2086                           ;Lab12p1.c: 197: {
  2087                           ;Lab12p1.c: 199: DS3231_Read_Time();
  2088  0009C4  EC98  F00E         	call	_DS3231_Read_Time	;wreg free
  2089                           
  2090                           ;Lab12p1.c: 201: if(tempSecond != second)
  2091  0009C8  5062               	movf	_second,w,c
  2092  0009CA  186E               	xorwf	_tempSecond,w,c
  2093  0009CC  B4D8               	btfsc	status,2,c
  2094  0009CE  D069               	goto	l6730
  2095                           
  2096                           ;Lab12p1.c: 202: {
  2097                           ;Lab12p1.c: 203: tempSecond = second;
  2098  0009D0  C062  F06E         	movff	_second,_tempSecond
  2099                           
  2100                           ;Lab12p1.c: 204: DS1621_tempC = DS1621_Read_Temp();
  2101  0009D4  EC7B  F010         	call	_DS1621_Read_Temp	;wreg free
  2102  0009D8  C014  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2103  0009DC  C015  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2104                           
  2105                           ;Lab12p1.c: 205: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2106  0009E0  C044  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2107  0009E4  C045  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2108  0009E8  0E00               	movlw	0
  2109  0009EA  6E14               	movwf	___wmul@multiplicand+1,c
  2110  0009EC  0E09               	movlw	9
  2111  0009EE  6E13               	movwf	___wmul@multiplicand,c
  2112  0009F0  ECDF  F010         	call	___wmul	;wreg free
  2113  0009F4  C011  F017         	movff	?___wmul,___awdiv@dividend
  2114  0009F8  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2115  0009FC  0E00               	movlw	0
  2116  0009FE  6E1A               	movwf	___awdiv@divisor+1,c
  2117  000A00  0E05               	movlw	5
  2118  000A02  6E19               	movwf	___awdiv@divisor,c
  2119  000A04  EC3C  F00C         	call	___awdiv	;wreg free
  2120  000A08  0E20               	movlw	32
  2121  000A0A  2417               	addwf	?___awdiv,w,c
  2122  000A0C  6E46               	movwf	_DS1621_tempF,c
  2123  000A0E  0E00               	movlw	0
  2124  000A10  2018               	addwfc	?___awdiv+1,w,c
  2125  000A12  6E47               	movwf	_DS1621_tempF+1,c
  2126                           
  2127                           ;Lab12p1.c: 206: rpm = get_RPM();
  2128  000A14  ECFF  F00F         	call	_get_RPM	;wreg free
  2129  000A18  C01F  F04C         	movff	?_get_RPM,_rpm
  2130  000A1C  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2131                           
  2132                           ;Lab12p1.c: 207: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  2133  000A20  0E2E               	movlw	low STR_1
  2134  000A22  6E1D               	movwf	printf@f,c
  2135  000A24  0EFF               	movlw	high STR_1
  2136  000A26  6E1E               	movwf	printf@f+1,c
  2137  000A28  C05E  F01F         	movff	_hour,?_printf+2
  2138  000A2C  6A20               	clrf	?_printf+3,c
  2139  000A2E  C05F  F021         	movff	_minute,?_printf+4
  2140  000A32  6A22               	clrf	?_printf+5,c
  2141  000A34  C062  F023         	movff	_second,?_printf+6
  2142  000A38  6A24               	clrf	?_printf+7,c
  2143  000A3A  C060  F025         	movff	_month,?_printf+8
  2144  000A3E  6A26               	clrf	?_printf+9,c
  2145  000A40  C05A  F027         	movff	_day,?_printf+10
  2146  000A44  6A28               	clrf	?_printf+11,c
  2147  000A46  C06C  F029         	movff	_year,?_printf+12
  2148  000A4A  6A2A               	clrf	?_printf+13,c
  2149  000A4C  ECF8  F001         	call	_printf	;wreg free
  2150                           
  2151                           ;Lab12p1.c: 208: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2152  000A50  0E62               	movlw	low STR_2
  2153  000A52  6E1D               	movwf	printf@f,c
  2154  000A54  0EFF               	movlw	high STR_2
  2155  000A56  6E1E               	movwf	printf@f+1,c
  2156  000A58  C044  F01F         	movff	_DS1621_tempC,?_printf+2
  2157  000A5C  C045  F020         	movff	_DS1621_tempC+1,?_printf+3
  2158  000A60  C046  F021         	movff	_DS1621_tempF,?_printf+4
  2159  000A64  C047  F022         	movff	_DS1621_tempF+1,?_printf+5
  2160  000A68  ECF8  F001         	call	_printf	;wreg free
  2161                           
  2162                           ;Lab12p1.c: 209: printf ("RPM = %d  dc = %d\r\n", rpm , duty_cycle);
  2163  000A6C  0E8B               	movlw	low STR_3
  2164  000A6E  6E1D               	movwf	printf@f,c
  2165  000A70  0EFF               	movlw	high STR_3
  2166  000A72  6E1E               	movwf	printf@f+1,c
  2167  000A74  C04C  F01F         	movff	_rpm,?_printf+2
  2168  000A78  C04D  F020         	movff	_rpm+1,?_printf+3
  2169  000A7C  C05C  F021         	movff	_duty_cycle,?_printf+4
  2170  000A80  6A22               	clrf	?_printf+5,c
  2171  000A82  ECF8  F001         	call	_printf	;wreg free
  2172                           
  2173                           ;Lab12p1.c: 210: Set_RPM_RGB(rpm);
  2174  000A86  C04C  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2175  000A8A  C04D  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2176  000A8E  ECFD  F00D         	call	_Set_RPM_RGB	;wreg free
  2177                           
  2178                           ;Lab12p1.c: 211: Set_DC_RGB(duty_cycle);
  2179  000A92  C05C  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2180  000A96  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2181  000A98  ECDD  F00F         	call	_Set_DC_RGB	;wreg free
  2182                           
  2183                           ;Lab12p1.c: 212: Update_Screen();
  2184  000A9C  EC0E  F000         	call	_Update_Screen	;wreg free
  2185  000AA0  D000               	goto	l6730
  2186  000AA2                     l6730:
  2187                           
  2188                           ;Lab12p1.c: 213: }
  2189                           ;Lab12p1.c: 215: if (nec_ok == 1)
  2190  000AA2  044A               	decf	_nec_ok,w,c
  2191  000AA4  104B               	iorwf	_nec_ok+1,w,c
  2192  000AA6  A4D8               	btfss	status,2,c
  2193  000AA8  D78D               	goto	l6706
  2194                           
  2195                           ;Lab12p1.c: 216: {
  2196                           ;Lab12p1.c: 217: nec_ok = 0;
  2197  000AAA  0E00               	movlw	0
  2198  000AAC  6E4B               	movwf	_nec_ok+1,c
  2199  000AAE  0E00               	movlw	0
  2200  000AB0  6E4A               	movwf	_nec_ok,c
  2201                           
  2202                           ;Lab12p1.c: 219: printf ("NEC_Code = %x\r\n", Nec_code1);
  2203  000AB2  0EB0               	movlw	low STR_4
  2204  000AB4  6E1D               	movwf	printf@f,c
  2205  000AB6  0EFF               	movlw	high STR_4
  2206  000AB8  6E1E               	movwf	printf@f+1,c
  2207  000ABA  C051  F01F         	movff	_Nec_code1,?_printf+2
  2208  000ABE  6A20               	clrf	?_printf+3,c
  2209  000AC0  ECF8  F001         	call	_printf	;wreg free
  2210                           
  2211                           ;Lab12p1.c: 221: INTCONbits.INT0IE = 1;
  2212  000AC4  88F2               	bsf	intcon,4,c	;volatile
  2213                           
  2214                           ;Lab12p1.c: 222: INTCON2bits.INTEDG0 = 0;
  2215  000AC6  9CF1               	bcf	intcon2,6,c	;volatile
  2216                           
  2217                           ;Lab12p1.c: 224: found = 0xff;
  2218  000AC8  685D               	setf	_found,c
  2219                           
  2220                           ;Lab12p1.c: 225: for (int j=0; j< 21; j++)
  2221  000ACA  0E00               	movlw	0
  2222  000ACC  0100               	movlb	0	; () banked
  2223  000ACE  6FF4               	movwf	(main@j+1)& (0+255),b
  2224  000AD0  0E00               	movlw	0
  2225  000AD2  6FF3               	movwf	main@j& (0+255),b
  2226  000AD4                     l6744:
  2227                           
  2228                           ; BSR set to: 0
  2229  000AD4  0100               	movlb	0	; () banked
  2230  000AD6  BFF4               	btfsc	(main@j+1)& (0+255),7,b
  2231  000AD8  D00A               	goto	l6748
  2232  000ADA  0100               	movlb	0	; () banked
  2233  000ADC  51F4               	movf	(main@j+1)& (0+255),w,b
  2234  000ADE  E120               	bnz	l6758
  2235  000AE0  0E15               	movlw	21
  2236  000AE2  0100               	movlb	0	; () banked
  2237  000AE4  5DF3               	subwf	main@j& (0+255),w,b
  2238  000AE6  B0D8               	btfsc	status,0,c
  2239  000AE8  D01B               	goto	l6758
  2240  000AEA  D001               	goto	l6748
  2241                           
  2242                           ; BSR set to: 0
  2243  000AEC  D019               	goto	l6758
  2244  000AEE                     l6748:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;Lab12p1.c: 226: {
  2248                           ;Lab12p1.c: 227: if (Nec_code1 == array1[j])
  2249  000AEE  0E3F               	movlw	low _array1
  2250  000AF0  0100               	movlb	0	; () banked
  2251  000AF2  25F3               	addwf	main@j& (0+255),w,b
  2252  000AF4  6ED9               	movwf	fsr2l,c
  2253  000AF6  0E01               	movlw	high _array1
  2254  000AF8  0100               	movlb	0	; () banked
  2255  000AFA  21F4               	addwfc	(main@j+1)& (0+255),w,b
  2256  000AFC  6EDA               	movwf	fsr2h,c
  2257  000AFE  5051               	movf	_Nec_code1,w,c
  2258  000B00  18DE               	xorwf	postinc2,w,c
  2259  000B02  A4D8               	btfss	status,2,c
  2260  000B04  D008               	goto	l6754
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;Lab12p1.c: 228: {
  2264                           ;Lab12p1.c: 229: found = j;
  2265  000B06  C0F3  F05D         	movff	main@j,_found
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;Lab12p1.c: 230: j = 21;
  2269  000B0A  0E00               	movlw	0
  2270  000B0C  0100               	movlb	0	; () banked
  2271  000B0E  6FF4               	movwf	(main@j+1)& (0+255),b
  2272  000B10  0E15               	movlw	21
  2273  000B12  6FF3               	movwf	main@j& (0+255),b
  2274  000B14  D000               	goto	l6754
  2275  000B16                     l6754:
  2276                           
  2277                           ; BSR set to: 0
  2278  000B16  0100               	movlb	0	; () banked
  2279  000B18  4BF3               	infsnz	main@j& (0+255),f,b
  2280  000B1A  2BF4               	incf	(main@j+1)& (0+255),f,b
  2281  000B1C  D7DB               	goto	l6744
  2282                           
  2283                           ; BSR set to: 0
  2284  000B1E  D000               	goto	l6758
  2285  000B20                     l6758:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;Lab12p1.c: 231: }
  2289                           ;Lab12p1.c: 232: }
  2290                           ;Lab12p1.c: 234: for(int i = 0;i < 21;i++)
  2291  000B20  0E00               	movlw	0
  2292  000B22  0100               	movlb	0	; () banked
  2293  000B24  6FF2               	movwf	(main@i+1)& (0+255),b
  2294  000B26  0E00               	movlw	0
  2295  000B28  6FF1               	movwf	main@i& (0+255),b
  2296  000B2A                     l6760:
  2297                           
  2298                           ; BSR set to: 0
  2299  000B2A  0100               	movlb	0	; () banked
  2300  000B2C  BFF2               	btfsc	(main@i+1)& (0+255),7,b
  2301  000B2E  D00A               	goto	l6764
  2302  000B30  0100               	movlb	0	; () banked
  2303  000B32  51F2               	movf	(main@i+1)& (0+255),w,b
  2304  000B34  E121               	bnz	l6776
  2305  000B36  0E15               	movlw	21
  2306  000B38  0100               	movlb	0	; () banked
  2307  000B3A  5DF1               	subwf	main@i& (0+255),w,b
  2308  000B3C  B0D8               	btfsc	status,0,c
  2309  000B3E  D01C               	goto	l6776
  2310  000B40  D001               	goto	l6764
  2311                           
  2312                           ; BSR set to: 0
  2313  000B42  D01A               	goto	l6776
  2314  000B44                     l6764:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;Lab12p1.c: 235: {
  2318                           ;Lab12p1.c: 236: if(array1[i] == Nec_code1)
  2319  000B44  0E3F               	movlw	low _array1
  2320  000B46  0100               	movlb	0	; () banked
  2321  000B48  25F1               	addwf	main@i& (0+255),w,b
  2322  000B4A  6ED9               	movwf	fsr2l,c
  2323  000B4C  0E01               	movlw	high _array1
  2324  000B4E  0100               	movlb	0	; () banked
  2325  000B50  21F2               	addwfc	(main@i+1)& (0+255),w,b
  2326  000B52  6EDA               	movwf	fsr2h,c
  2327  000B54  5051               	movf	_Nec_code1,w,c
  2328  000B56  18DE               	xorwf	postinc2,w,c
  2329  000B58  A4D8               	btfss	status,2,c
  2330  000B5A  D009               	goto	l6772
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;Lab12p1.c: 237: {
  2334                           ;Lab12p1.c: 238: found = i;
  2335  000B5C  C0F1  F05D         	movff	main@i,_found
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;Lab12p1.c: 239: if (found == 15){
  2339  000B60  0E0F               	movlw	15
  2340  000B62  185D               	xorwf	_found,w,c
  2341  000B64  A4D8               	btfss	status,2,c
  2342  000B66  D008               	goto	l6776
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;Lab12p1.c: 240: DS3231_Setup_Time();
  2346  000B68  EC32  F00E         	call	_DS3231_Setup_Time	;wreg free
  2347                           
  2348                           ;Lab12p1.c: 241: }
  2349                           ;Lab12p1.c: 242: break;
  2350  000B6C  D005               	goto	l6776
  2351  000B6E                     l6772:
  2352  000B6E  0100               	movlb	0	; () banked
  2353  000B70  4BF1               	infsnz	main@i& (0+255),f,b
  2354  000B72  2BF2               	incf	(main@i+1)& (0+255),f,b
  2355  000B74  D7DA               	goto	l6760
  2356                           
  2357                           ; BSR set to: 0
  2358  000B76  D000               	goto	l6776
  2359  000B78                     l6776:
  2360                           
  2361                           ;Lab12p1.c: 243: }
  2362                           ;Lab12p1.c: 244: }
  2363                           ;Lab12p1.c: 246: if (found == 0xff)
  2364  000B78  285D               	incf	_found,w,c
  2365  000B7A  A4D8               	btfss	status,2,c
  2366  000B7C  D007               	goto	l6780
  2367                           
  2368                           ;Lab12p1.c: 247: {
  2369                           ;Lab12p1.c: 248: printf ("Cannot find button \r\n");
  2370  000B7E  0E4C               	movlw	low STR_5
  2371  000B80  6E1D               	movwf	printf@f,c
  2372  000B82  0EFF               	movlw	high STR_5
  2373  000B84  6E1E               	movwf	printf@f+1,c
  2374  000B86  ECF8  F001         	call	_printf	;wreg free
  2375                           
  2376                           ;Lab12p1.c: 250: }
  2377  000B8A  D71C               	goto	l6706
  2378  000B8C                     l6780:
  2379                           
  2380                           ;Lab12p1.c: 252: else
  2381                           ;Lab12p1.c: 253: {
  2382                           ;Lab12p1.c: 254: Do_Beep();
  2383  000B8C  ECBD  F011         	call	_Do_Beep	;wreg free
  2384                           
  2385                           ;Lab12p1.c: 255: printf ("button = %d \r\n", found);
  2386  000B90  0EC0               	movlw	low STR_6
  2387  000B92  6E1D               	movwf	printf@f,c
  2388  000B94  0EFF               	movlw	high STR_6
  2389  000B96  6E1E               	movwf	printf@f+1,c
  2390  000B98  C05D  F01F         	movff	_found,?_printf+2
  2391  000B9C  6A20               	clrf	?_printf+3,c
  2392  000B9E  ECF8  F001         	call	_printf	;wreg free
  2393                           
  2394                           ;Lab12p1.c: 257: PORTA = (D3[found]);
  2395  000BA2  505D               	movf	_found,w,c
  2396  000BA4  0D01               	mullw	1
  2397  000BA6  0E2A               	movlw	low _D3
  2398  000BA8  24F3               	addwf	prodl,w,c
  2399  000BAA  6ED9               	movwf	fsr2l,c
  2400  000BAC  0E01               	movlw	high _D3
  2401  000BAE  20F4               	addwfc	prodh,w,c
  2402  000BB0  6EDA               	movwf	fsr2h,c
  2403  000BB2  50DF               	movf	indf2,w,c
  2404  000BB4  6E80               	movwf	3968,c	;volatile
  2405                           
  2406                           ;Lab12p1.c: 258: if (found == 5)
  2407  000BB6  0E05               	movlw	5
  2408  000BB8  185D               	xorwf	_found,w,c
  2409  000BBA  A4D8               	btfss	status,2,c
  2410  000BBC  D003               	goto	l6790
  2411                           
  2412                           ;Lab12p1.c: 259: {
  2413                           ;Lab12p1.c: 260: Toggle_Fan();
  2414  000BBE  EC9F  F011         	call	_Toggle_Fan	;wreg free
  2415  000BC2  D000               	goto	l6790
  2416  000BC4                     l6790:
  2417                           
  2418                           ;Lab12p1.c: 261: }
  2419                           ;Lab12p1.c: 262: if (found == 6)
  2420  000BC4  0E06               	movlw	6
  2421  000BC6  185D               	xorwf	_found,w,c
  2422  000BC8  A4D8               	btfss	status,2,c
  2423  000BCA  D003               	goto	l6794
  2424                           
  2425                           ;Lab12p1.c: 263: {
  2426                           ;Lab12p1.c: 264: Decrease_Speed();
  2427  000BCC  EC19  F011         	call	_Decrease_Speed	;wreg free
  2428  000BD0  D000               	goto	l6794
  2429  000BD2                     l6794:
  2430                           
  2431                           ;Lab12p1.c: 265: }
  2432                           ;Lab12p1.c: 266: if (found == 7)
  2433  000BD2  0E07               	movlw	7
  2434  000BD4  185D               	xorwf	_found,w,c
  2435  000BD6  A4D8               	btfss	status,2,c
  2436  000BD8  D6F5               	goto	l6706
  2437                           
  2438                           ;Lab12p1.c: 267: {
  2439                           ;Lab12p1.c: 268: Increase_Speed();
  2440  000BDA  ECF3  F010         	call	_Increase_Speed	;wreg free
  2441  000BDE  D6F2               	goto	l6706
  2442  000BE0  EF0C  F000         	goto	start
  2443  000BE4                     __end_of_main:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           prodh	equ	0xFF4
  2450                           prodl	equ	0xFF3
  2451                           intcon	equ	0xFF2
  2452                           intcon2	equ	0xFF1
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postdec1	equ	0xFE5
  2456                           fsr1l	equ	0xFE1
  2457                           indf2	equ	0xFDF
  2458                           postinc2	equ	0xFDE
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _printf *****************
  2464 ;; Defined at:
  2465 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2468 ;;		 -> STR_6(15), STR_5(22), STR_4(16), STR_3(20), 
  2469 ;;		 -> STR_2(21), STR_1(30), 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  idx             1   46[COMRAM] unsigned char 
  2472 ;;  tmpval          4    0        struct .
  2473 ;;  cp              3    0        PTR const unsigned char 
  2474 ;;  width           2   53[COMRAM] int 
  2475 ;;  val             2   50[COMRAM] unsigned int 
  2476 ;;  ap              2   47[COMRAM] PTR void [1]
  2477 ;;		 -> ?_printf(2), 
  2478 ;;  len             2    0        unsigned int 
  2479 ;;  c               1   55[COMRAM] char 
  2480 ;;  flag            1   52[COMRAM] unsigned char 
  2481 ;;  prec            1   49[COMRAM] char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  2   28[COMRAM] int 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:       28 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    4
  2498 ;; This function calls:
  2499 ;;		___lwdiv
  2500 ;;		___lwmod
  2501 ;;		___wmul
  2502 ;;		_isdigit
  2503 ;;		_putch
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text1
  2510  0003F0                     __ptext1:
  2511                           	opt stack 0
  2512  0003F0                     _printf:
  2513                           	opt stack 26
  2514                           
  2515                           ;doprnt.c: 466: va_list ap;
  2516                           ;doprnt.c: 499: signed char c;
  2517                           ;doprnt.c: 501: int width;
  2518                           ;doprnt.c: 506: signed char prec;
  2519                           ;doprnt.c: 508: unsigned char flag;
  2520                           ;doprnt.c: 523: union {
  2521                           ;doprnt.c: 524: unsigned long vd;
  2522                           ;doprnt.c: 525: double integ;
  2523                           ;doprnt.c: 526: } tmpval;
  2524                           ;doprnt.c: 528: unsigned int val;
  2525                           ;doprnt.c: 529: unsigned len;
  2526                           ;doprnt.c: 530: const char * cp;
  2527                           ;doprnt.c: 533: *ap = __va_start();
  2528                           
  2529                           ;incstack = 0
  2530  0003F0  0E1F               	movlw	low (?_printf+2)
  2531  0003F2  6E30               	movwf	printf@ap,c
  2532  0003F4  0E00               	movlw	high (?_printf+2)
  2533  0003F6  6E31               	movwf	printf@ap+1,c
  2534                           
  2535                           ;doprnt.c: 536: while(c = *f++) {
  2536  0003F8  D199               	goto	l6514
  2537  0003FA                     l6388:
  2538                           
  2539                           ;doprnt.c: 538: if(c != '%')
  2540  0003FA  0E25               	movlw	37
  2541  0003FC  1838               	xorwf	printf@c,w,c
  2542  0003FE  B4D8               	btfsc	status,2,c
  2543  000400  D004               	goto	l6392
  2544                           
  2545                           ;doprnt.c: 540: {
  2546                           ;doprnt.c: 541: (putch(c) );
  2547  000402  5038               	movf	printf@c,w,c
  2548  000404  EC0C  F012         	call	_putch
  2549                           
  2550                           ;doprnt.c: 542: continue;
  2551  000408  D191               	goto	l6514
  2552  00040A                     l6392:
  2553                           
  2554                           ;doprnt.c: 543: }
  2555                           ;doprnt.c: 546: width = 0;
  2556  00040A  0E00               	movlw	0
  2557  00040C  6E37               	movwf	printf@width+1,c
  2558  00040E  0E00               	movlw	0
  2559  000410  6E36               	movwf	printf@width,c
  2560                           
  2561                           ;doprnt.c: 548: flag = 0;
  2562  000412  0E00               	movlw	0
  2563  000414  6E35               	movwf	printf@flag,c
  2564                           
  2565                           ;doprnt.c: 551: switch(*f) {
  2566                           
  2567                           ;doprnt.c: 550: for(;;) {
  2568  000416  D005               	goto	l6398
  2569  000418                     l6394:
  2570                           
  2571                           ;doprnt.c: 580: flag |= 0x04;
  2572  000418  8435               	bsf	printf@flag,2,c
  2573                           
  2574                           ;doprnt.c: 581: f++;
  2575  00041A  4A1D               	infsnz	printf@f,f,c
  2576  00041C  2A1E               	incf	printf@f+1,f,c
  2577                           
  2578                           ;doprnt.c: 582: continue;
  2579  00041E  D001               	goto	l6398
  2580                           
  2581                           ;doprnt.c: 584: }
  2582  000420  D00B               	goto	l6400
  2583  000422                     l6398:
  2584  000422  C01D  FFF6         	movff	printf@f,tblptrl
  2585  000426  C01E  FFF7         	movff	printf@f+1,tblptrh
  2586  00042A                     	if	0	;tblptru may be non-zero
  2587  00042A                     	endif
  2588  00042A                     	if	0	;tblptru may be non-zero
  2589  00042A                     	endif
  2590  00042A  0008               	tblrd		*
  2591  00042C  50F5               	movf	tablat,w,c
  2592                           
  2593                           ; Switch size 1, requested type "space"
  2594                           ; Number of cases is 1, Range of values is 48 to 48
  2595                           ; switch strategies available:
  2596                           ; Name         Instructions Cycles
  2597                           ; simple_byte            4     3 (average)
  2598                           ;	Chosen strategy is simple_byte
  2599  00042E  0A30               	xorlw	48	; case 48
  2600  000430  B4D8               	btfsc	status,2,c
  2601  000432  D7F2               	goto	l6394
  2602                           
  2603                           ;doprnt.c: 585: break;
  2604  000434  D001               	goto	l6400
  2605                           
  2606                           ;doprnt.c: 586: }
  2607  000436  D7F5               	goto	l6398
  2608  000438                     l6400:
  2609                           
  2610                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2611  000438  C01D  FFF6         	movff	printf@f,tblptrl
  2612  00043C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2613  000440                     	if	0	;tblptru may be non-zero
  2614  000440                     	endif
  2615  000440                     	if	0	;tblptru may be non-zero
  2616  000440                     	endif
  2617  000440  0008               	tblrd		*
  2618  000442  50F5               	movf	tablat,w,c
  2619  000444  EC3D  F011         	call	_isdigit
  2620  000448  A0D8               	btfss	status,0,c
  2621  00044A  D03B               	goto	l6416
  2622                           
  2623                           ;doprnt.c: 598: width = 0;
  2624  00044C  0E00               	movlw	0
  2625  00044E  6E37               	movwf	printf@width+1,c
  2626  000450  0E00               	movlw	0
  2627  000452  6E36               	movwf	printf@width,c
  2628  000454  D000               	goto	l6404
  2629  000456                     l6404:
  2630                           
  2631                           ;doprnt.c: 600: width *= 10;
  2632  000456  C036  F011         	movff	printf@width,___wmul@multiplier
  2633  00045A  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2634  00045E  0E00               	movlw	0
  2635  000460  6E14               	movwf	___wmul@multiplicand+1,c
  2636  000462  0E0A               	movlw	10
  2637  000464  6E13               	movwf	___wmul@multiplicand,c
  2638  000466  ECDF  F010         	call	___wmul	;wreg free
  2639  00046A  C011  F036         	movff	?___wmul,printf@width
  2640  00046E  C012  F037         	movff	?___wmul+1,printf@width+1
  2641                           
  2642                           ;doprnt.c: 601: width += *f++ - '0';
  2643  000472  0ED0               	movlw	208
  2644  000474  6E2B               	movwf	??_printf& (0+255),c
  2645  000476  0EFF               	movlw	255
  2646  000478  6E2C               	movwf	(??_printf+1)& (0+255),c
  2647  00047A  C01D  FFF6         	movff	printf@f,tblptrl
  2648  00047E  C01E  FFF7         	movff	printf@f+1,tblptrh
  2649  000482                     	if	0	;tblptru may be non-zero
  2650  000482                     	endif
  2651  000482                     	if	0	;tblptru may be non-zero
  2652  000482                     	endif
  2653  000482  0008               	tblrd		*
  2654  000484  50F5               	movf	tablat,w,c
  2655  000486  6E2D               	movwf	(??_printf+2)& (0+255),c
  2656  000488  6A2E               	clrf	(??_printf+3)& (0+255),c
  2657  00048A  502B               	movf	??_printf,w,c
  2658  00048C  262D               	addwf	??_printf+2,f,c
  2659  00048E  502C               	movf	??_printf+1,w,c
  2660  000490  222E               	addwfc	??_printf+3,f,c
  2661  000492  502D               	movf	??_printf+2,w,c
  2662  000494  2636               	addwf	printf@width,f,c
  2663  000496  502E               	movf	??_printf+3,w,c
  2664  000498  2237               	addwfc	printf@width+1,f,c
  2665  00049A  4A1D               	infsnz	printf@f,f,c
  2666  00049C  2A1E               	incf	printf@f+1,f,c
  2667                           
  2668                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2669  00049E  C01D  FFF6         	movff	printf@f,tblptrl
  2670  0004A2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2671  0004A6                     	if	0	;tblptru may be non-zero
  2672  0004A6                     	endif
  2673  0004A6                     	if	0	;tblptru may be non-zero
  2674  0004A6                     	endif
  2675  0004A6  0008               	tblrd		*
  2676  0004A8  50F5               	movf	tablat,w,c
  2677  0004AA  EC3D  F011         	call	_isdigit
  2678  0004AE  A0D8               	btfss	status,0,c
  2679  0004B0  D008               	goto	l6416
  2680  0004B2  D7D1               	goto	l6404
  2681                           
  2682                           ;doprnt.c: 608: }
  2683                           ;doprnt.c: 635: switch(c = *f++) {
  2684  0004B4  D006               	goto	l6416
  2685                           
  2686                           ;doprnt.c: 638: goto alldone;
  2687                           
  2688                           ;doprnt.c: 637: case 0:
  2689  0004B6  D148               	goto	l832
  2690                           
  2691                           ;doprnt.c: 698: case 'i':
  2692                           ;doprnt.c: 699: break;
  2693                           
  2694                           ;doprnt.c: 697: case 'd':
  2695  0004B8  D01B               	goto	l795
  2696  0004BA                     l6412:
  2697                           
  2698                           ;doprnt.c: 721: flag |= 0x80;
  2699  0004BA  8E35               	bsf	printf@flag,7,c
  2700                           
  2701                           ;doprnt.c: 723: break;
  2702  0004BC  D019               	goto	l795
  2703                           
  2704                           ;doprnt.c: 813: continue;
  2705                           
  2706                           ;doprnt.c: 802: default:
  2707  0004BE  D136               	goto	l6514
  2708                           
  2709                           ;doprnt.c: 822: }
  2710  0004C0  D017               	goto	l795
  2711  0004C2                     l6416:
  2712  0004C2  C01D  FFF6         	movff	printf@f,tblptrl
  2713  0004C6  C01E  FFF7         	movff	printf@f+1,tblptrh
  2714  0004CA  4A1D               	infsnz	printf@f,f,c
  2715  0004CC  2A1E               	incf	printf@f+1,f,c
  2716  0004CE                     	if	0	;tblptru may be non-zero
  2717  0004CE                     	endif
  2718  0004CE                     	if	0	;tblptru may be non-zero
  2719  0004CE                     	endif
  2720  0004CE  0008               	tblrd		*
  2721  0004D0  CFF5 F038          	movff	tablat,printf@c
  2722  0004D4  5038               	movf	printf@c,w,c
  2723                           
  2724                           ; Switch size 1, requested type "space"
  2725                           ; Number of cases is 4, Range of values is 0 to 120
  2726                           ; switch strategies available:
  2727                           ; Name         Instructions Cycles
  2728                           ; simple_byte           13     7 (average)
  2729                           ;	Chosen strategy is simple_byte
  2730  0004D6  0A00               	xorlw	0	; case 0
  2731  0004D8  B4D8               	btfsc	status,2,c
  2732  0004DA  D136               	goto	l832
  2733  0004DC  0A64               	xorlw	100	; case 100
  2734  0004DE  B4D8               	btfsc	status,2,c
  2735  0004E0  D007               	goto	l795
  2736  0004E2  0A0D               	xorlw	13	; case 105
  2737  0004E4  B4D8               	btfsc	status,2,c
  2738  0004E6  D004               	goto	l795
  2739  0004E8  0A11               	xorlw	17	; case 120
  2740  0004EA  B4D8               	btfsc	status,2,c
  2741  0004EC  D7E6               	goto	l6412
  2742  0004EE  D11E               	goto	l6514
  2743  0004F0                     l795:
  2744                           
  2745                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2746  0004F0  BE35               	btfsc	printf@flag,7,c
  2747  0004F2  D015               	goto	l6428
  2748                           
  2749                           ;doprnt.c: 1253: {
  2750                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2751  0004F4  C030  FFD9         	movff	printf@ap,fsr2l
  2752  0004F8  C031  FFDA         	movff	printf@ap+1,fsr2h
  2753  0004FC  CFDE F033          	movff	postinc2,printf@val
  2754  000500  CFDD F034          	movff	postdec2,printf@val+1
  2755  000504  0E02               	movlw	2
  2756  000506  2630               	addwf	printf@ap,f,c
  2757  000508  0E00               	movlw	0
  2758  00050A  2231               	addwfc	printf@ap+1,f,c
  2759                           
  2760                           ;doprnt.c: 1261: if((int)val < 0) {
  2761  00050C  AE34               	btfss	printf@val+1,7,c
  2762  00050E  D04E               	goto	l6462
  2763                           
  2764                           ;doprnt.c: 1262: flag |= 0x03;
  2765  000510  0E03               	movlw	3
  2766  000512  1235               	iorwf	printf@flag,f,c
  2767                           
  2768                           ;doprnt.c: 1263: val = -val;
  2769  000514  6C33               	negf	printf@val,c
  2770  000516  1E34               	comf	printf@val+1,f,c
  2771  000518  B0D8               	btfsc	status,0,c
  2772  00051A  2A34               	incf	printf@val+1,f,c
  2773                           
  2774                           ;doprnt.c: 1264: }
  2775                           ;doprnt.c: 1266: }
  2776  00051C  D047               	goto	l6462
  2777  00051E                     l6428:
  2778                           
  2779                           ;doprnt.c: 1268: else
  2780                           ;doprnt.c: 1273: {
  2781                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2782  00051E  C030  FFD9         	movff	printf@ap,fsr2l
  2783  000522  C031  FFDA         	movff	printf@ap+1,fsr2h
  2784  000526  CFDE F033          	movff	postinc2,printf@val
  2785  00052A  CFDD F034          	movff	postdec2,printf@val+1
  2786  00052E  0E02               	movlw	2
  2787  000530  2630               	addwf	printf@ap,f,c
  2788  000532  0E00               	movlw	0
  2789  000534  2231               	addwfc	printf@ap+1,f,c
  2790                           
  2791                           ;doprnt.c: 1287: }
  2792                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2793  000536  D03A               	goto	l6462
  2794  000538                     l6432:
  2795                           
  2796                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2797  000538  0E01               	movlw	1
  2798  00053A  6E38               	movwf	printf@c,c
  2799  00053C                     l6434:
  2800  00053C  0E05               	movlw	5
  2801  00053E  1838               	xorwf	printf@c,w,c
  2802  000540  B4D8               	btfsc	status,2,c
  2803  000542  D03D               	goto	l6464
  2804  000544  D001               	goto	l6438
  2805  000546  D03B               	goto	l6464
  2806  000548                     l6438:
  2807                           
  2808                           ;doprnt.c: 1306: if(val < dpowers[c])
  2809  000548  5038               	movf	printf@c,w,c
  2810  00054A  0D02               	mullw	2
  2811  00054C  0E1C               	movlw	low _dpowers
  2812  00054E  24F3               	addwf	prodl,w,c
  2813  000550  6EF6               	movwf	tblptrl,c
  2814  000552  0EFF               	movlw	high _dpowers
  2815  000554  20F4               	addwfc	prodh,w,c
  2816  000556  6EF7               	movwf	tblptrh,c
  2817  000558                     	if	0	;There are less than 3 active tblptr bytes
  2818  000558                     	endif
  2819  000558  0009               	tblrd		*+
  2820  00055A  50F5               	movf	tablat,w,c
  2821  00055C  5C33               	subwf	printf@val,w,c
  2822  00055E  0009               	tblrd		*+
  2823  000560  50F5               	movf	tablat,w,c
  2824  000562  5834               	subwfb	printf@val+1,w,c
  2825  000564  A0D8               	btfss	status,0,c
  2826  000566  D02B               	goto	l6464
  2827  000568  D001               	goto	l6442
  2828                           
  2829                           ;doprnt.c: 1307: break;
  2830  00056A  D029               	goto	l6464
  2831  00056C                     l6442:
  2832  00056C  2A38               	incf	printf@c,f,c
  2833  00056E  D7E6               	goto	l6434
  2834                           
  2835                           ;doprnt.c: 1309: break;
  2836  000570  D026               	goto	l6464
  2837  000572                     l6446:
  2838                           
  2839                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2840  000572  0E01               	movlw	1
  2841  000574  6E38               	movwf	printf@c,c
  2842  000576                     l6448:
  2843  000576  0E04               	movlw	4
  2844  000578  1838               	xorwf	printf@c,w,c
  2845  00057A  B4D8               	btfsc	status,2,c
  2846  00057C  D020               	goto	l6464
  2847  00057E  D001               	goto	l6452
  2848  000580  D01E               	goto	l6464
  2849  000582                     l6452:
  2850                           
  2851                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2852  000582  5038               	movf	printf@c,w,c
  2853  000584  0D02               	mullw	2
  2854  000586  0E26               	movlw	low _hexpowers
  2855  000588  24F3               	addwf	prodl,w,c
  2856  00058A  6EF6               	movwf	tblptrl,c
  2857  00058C  0EFF               	movlw	high _hexpowers
  2858  00058E  20F4               	addwfc	prodh,w,c
  2859  000590  6EF7               	movwf	tblptrh,c
  2860  000592                     	if	0	;There are less than 3 active tblptr bytes
  2861  000592                     	endif
  2862  000592  0009               	tblrd		*+
  2863  000594  50F5               	movf	tablat,w,c
  2864  000596  5C33               	subwf	printf@val,w,c
  2865  000598  0009               	tblrd		*+
  2866  00059A  50F5               	movf	tablat,w,c
  2867  00059C  5834               	subwfb	printf@val+1,w,c
  2868  00059E  A0D8               	btfss	status,0,c
  2869  0005A0  D00E               	goto	l6464
  2870  0005A2  D001               	goto	l6456
  2871                           
  2872                           ;doprnt.c: 1318: break;
  2873  0005A4  D00C               	goto	l6464
  2874  0005A6                     l6456:
  2875  0005A6  2A38               	incf	printf@c,f,c
  2876  0005A8  D7E6               	goto	l6448
  2877                           
  2878                           ;doprnt.c: 1336: }
  2879                           
  2880                           ;doprnt.c: 1320: break;
  2881  0005AA  D009               	goto	l6464
  2882  0005AC                     l6462:
  2883  0005AC  5035               	movf	printf@flag,w,c
  2884  0005AE  0B80               	andlw	128
  2885                           
  2886                           ; Switch size 1, requested type "space"
  2887                           ; Number of cases is 2, Range of values is 0 to 128
  2888                           ; switch strategies available:
  2889                           ; Name         Instructions Cycles
  2890                           ; simple_byte            7     4 (average)
  2891                           ;	Chosen strategy is simple_byte
  2892  0005B0  0A00               	xorlw	0	; case 0
  2893  0005B2  B4D8               	btfsc	status,2,c
  2894  0005B4  D7C1               	goto	l6432
  2895  0005B6  0A80               	xorlw	128	; case 128
  2896  0005B8  B4D8               	btfsc	status,2,c
  2897  0005BA  D7DB               	goto	l6446
  2898  0005BC  D000               	goto	l6464
  2899  0005BE                     l6464:
  2900                           
  2901                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2902  0005BE  5036               	movf	printf@width,w,c
  2903  0005C0  1037               	iorwf	printf@width+1,w,c
  2904  0005C2  B4D8               	btfsc	status,2,c
  2905  0005C4  D00A               	goto	l6470
  2906  0005C6  C035  F02B         	movff	printf@flag,??_printf
  2907  0005CA  0E03               	movlw	3
  2908  0005CC  162B               	andwf	??_printf,f,c
  2909  0005CE  B4D8               	btfsc	status,2,c
  2910  0005D0  D004               	goto	l6470
  2911                           
  2912                           ;doprnt.c: 1346: width--;
  2913  0005D2  0636               	decf	printf@width,f,c
  2914  0005D4  A0D8               	btfss	status,0,c
  2915  0005D6  0637               	decf	printf@width+1,f,c
  2916  0005D8  D000               	goto	l6470
  2917  0005DA                     l6470:
  2918                           
  2919                           ;doprnt.c: 1381: if(width > c)
  2920  0005DA  0E80               	movlw	128
  2921  0005DC  BE38               	btfsc	printf@c,7,c
  2922  0005DE  0E7F               	movlw	127
  2923  0005E0  6E2B               	movwf	??_printf& (0+255),c
  2924  0005E2  5036               	movf	printf@width,w,c
  2925  0005E4  5C38               	subwf	printf@c,w,c
  2926  0005E6  5037               	movf	printf@width+1,w,c
  2927  0005E8  0A80               	xorlw	128
  2928  0005EA  582B               	subwfb	??_printf& (0+255),w,c
  2929  0005EC  B0D8               	btfsc	status,0,c
  2930  0005EE  D007               	goto	l6474
  2931                           
  2932                           ;doprnt.c: 1382: width -= c;
  2933  0005F0  5038               	movf	printf@c,w,c
  2934  0005F2  5E36               	subwf	printf@width,f,c
  2935  0005F4  0E00               	movlw	0
  2936  0005F6  BE38               	btfsc	printf@c,7,c
  2937  0005F8  0EFF               	movlw	255
  2938  0005FA  5A37               	subwfb	printf@width+1,f,c
  2939  0005FC  D005               	goto	l6476
  2940  0005FE                     l6474:
  2941                           
  2942                           ;doprnt.c: 1383: else
  2943                           ;doprnt.c: 1384: width = 0;
  2944  0005FE  0E00               	movlw	0
  2945  000600  6E37               	movwf	printf@width+1,c
  2946  000602  0E00               	movlw	0
  2947  000604  6E36               	movwf	printf@width,c
  2948  000606  D000               	goto	l6476
  2949  000608                     l6476:
  2950                           
  2951                           ;doprnt.c: 1387: if(flag & 0x04) {
  2952  000608  A435               	btfss	printf@flag,2,c
  2953  00060A  D01A               	goto	l6488
  2954                           
  2955                           ;doprnt.c: 1392: if(flag & 0x03)
  2956  00060C  C035  F02B         	movff	printf@flag,??_printf
  2957  000610  0E03               	movlw	3
  2958  000612  162B               	andwf	??_printf,f,c
  2959  000614  B4D8               	btfsc	status,2,c
  2960  000616  D004               	goto	l6482
  2961                           
  2962                           ;doprnt.c: 1393: (putch('-') );
  2963  000618  0E2D               	movlw	45
  2964  00061A  EC0C  F012         	call	_putch
  2965  00061E  D000               	goto	l6482
  2966  000620                     l6482:
  2967                           
  2968                           ;doprnt.c: 1415: if(width)
  2969  000620  5036               	movf	printf@width,w,c
  2970  000622  1037               	iorwf	printf@width+1,w,c
  2971  000624  B4D8               	btfsc	status,2,c
  2972  000626  D026               	goto	l6498
  2973  000628                     l6484:
  2974                           
  2975                           ;doprnt.c: 1417: (putch('0') );
  2976  000628  0E30               	movlw	48
  2977  00062A  EC0C  F012         	call	_putch
  2978                           
  2979                           ;doprnt.c: 1418: while(--width);
  2980  00062E  0636               	decf	printf@width,f,c
  2981  000630  A0D8               	btfss	status,0,c
  2982  000632  0637               	decf	printf@width+1,f,c
  2983  000634  5036               	movf	printf@width,w,c
  2984  000636  1037               	iorwf	printf@width+1,w,c
  2985  000638  B4D8               	btfsc	status,2,c
  2986  00063A  D01C               	goto	l6498
  2987  00063C  D7F5               	goto	l6484
  2988                           
  2989                           ;doprnt.c: 1420: } else
  2990  00063E  D01A               	goto	l6498
  2991  000640                     l6488:
  2992                           
  2993                           ;doprnt.c: 1422: {
  2994                           ;doprnt.c: 1424: if(width
  2995                           ;doprnt.c: 1428: )
  2996  000640  5036               	movf	printf@width,w,c
  2997  000642  1037               	iorwf	printf@width+1,w,c
  2998  000644  B4D8               	btfsc	status,2,c
  2999  000646  D00C               	goto	l6494
  3000  000648                     l6490:
  3001                           
  3002                           ;doprnt.c: 1430: (putch(' ') );
  3003  000648  0E20               	movlw	32
  3004  00064A  EC0C  F012         	call	_putch
  3005                           
  3006                           ;doprnt.c: 1431: while(--width);
  3007  00064E  0636               	decf	printf@width,f,c
  3008  000650  A0D8               	btfss	status,0,c
  3009  000652  0637               	decf	printf@width+1,f,c
  3010  000654  5036               	movf	printf@width,w,c
  3011  000656  1037               	iorwf	printf@width+1,w,c
  3012  000658  B4D8               	btfsc	status,2,c
  3013  00065A  D002               	goto	l6494
  3014  00065C  D7F5               	goto	l6490
  3015  00065E  D000               	goto	l6494
  3016  000660                     l6494:
  3017                           
  3018                           ;doprnt.c: 1438: if(flag & 0x03)
  3019  000660  C035  F02B         	movff	printf@flag,??_printf
  3020  000664  0E03               	movlw	3
  3021  000666  162B               	andwf	??_printf,f,c
  3022  000668  B4D8               	btfsc	status,2,c
  3023  00066A  D004               	goto	l6498
  3024                           
  3025                           ;doprnt.c: 1439: (putch('-') );
  3026  00066C  0E2D               	movlw	45
  3027  00066E  EC0C  F012         	call	_putch
  3028  000672  D000               	goto	l6498
  3029  000674                     l6498:
  3030                           
  3031                           ;doprnt.c: 1469: }
  3032                           ;doprnt.c: 1472: prec = c;
  3033  000674  C038  F032         	movff	printf@c,printf@prec
  3034                           
  3035                           ;doprnt.c: 1474: while(prec--) {
  3036  000678  D053               	goto	l6512
  3037                           
  3038                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3039  00067A  D045               	goto	l6508
  3040  00067C                     l6500:
  3041                           
  3042                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3043  00067C  5032               	movf	printf@prec,w,c
  3044  00067E  0D02               	mullw	2
  3045  000680  0E1C               	movlw	low _dpowers
  3046  000682  24F3               	addwf	prodl,w,c
  3047  000684  6EF6               	movwf	tblptrl,c
  3048  000686  0EFF               	movlw	high _dpowers
  3049  000688  20F4               	addwfc	prodh,w,c
  3050  00068A  6EF7               	movwf	tblptrh,c
  3051  00068C                     	if	0	;There are less than 3 active tblptr bytes
  3052  00068C                     	endif
  3053  00068C  0009               	tblrd		*+
  3054  00068E  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3055  000692  000A               	tblrd		*-
  3056  000694  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3057  000698  C033  F011         	movff	printf@val,___lwdiv@dividend
  3058  00069C  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3059  0006A0  ECCA  F00E         	call	___lwdiv	;wreg free
  3060  0006A4  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3061  0006A8  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3062  0006AC  0E00               	movlw	0
  3063  0006AE  6E1B               	movwf	___lwmod@divisor+1,c
  3064  0006B0  0E0A               	movlw	10
  3065  0006B2  6E1A               	movwf	___lwmod@divisor,c
  3066  0006B4  EC48  F00F         	call	___lwmod	;wreg free
  3067  0006B8  5018               	movf	?___lwmod,w,c
  3068  0006BA  0F30               	addlw	48
  3069  0006BC  6E38               	movwf	printf@c,c
  3070                           
  3071                           ;doprnt.c: 1491: break;
  3072  0006BE  D02C               	goto	l6510
  3073  0006C0                     l6502:
  3074                           
  3075                           ;doprnt.c: 1499: {
  3076                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3077  0006C0  C033  F011         	movff	printf@val,___lwdiv@dividend
  3078  0006C4  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3079  0006C8  5032               	movf	printf@prec,w,c
  3080  0006CA  0D02               	mullw	2
  3081  0006CC  0E26               	movlw	low _hexpowers
  3082  0006CE  24F3               	addwf	prodl,w,c
  3083  0006D0  6EF6               	movwf	tblptrl,c
  3084  0006D2  0EFF               	movlw	high _hexpowers
  3085  0006D4  20F4               	addwfc	prodh,w,c
  3086  0006D6  6EF7               	movwf	tblptrh,c
  3087  0006D8                     	if	0	;There are less than 3 active tblptr bytes
  3088  0006D8                     	endif
  3089  0006D8  0009               	tblrd		*+
  3090  0006DA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3091  0006DE  000A               	tblrd		*-
  3092  0006E0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3093  0006E4  ECCA  F00E         	call	___lwdiv	;wreg free
  3094  0006E8  5011               	movf	?___lwdiv,w,c
  3095  0006EA  0B0F               	andlw	15
  3096  0006EC  6E2F               	movwf	printf@idx,c
  3097                           
  3098                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3099  0006EE  502F               	movf	printf@idx,w,c
  3100  0006F0  0D01               	mullw	1
  3101  0006F2  0E9F               	movlw	low STR_18
  3102  0006F4  24F3               	addwf	prodl,w,c
  3103  0006F6  6EF6               	movwf	tblptrl,c
  3104  0006F8  0EFF               	movlw	high STR_18
  3105  0006FA  20F4               	addwfc	prodh,w,c
  3106  0006FC  6EF7               	movwf	tblptrh,c
  3107  0006FE                     	if	0	;There are less than 3 active tblptr bytes
  3108  0006FE                     	endif
  3109  0006FE  0008               	tblrd		*
  3110  000700  CFF5 F038          	movff	tablat,printf@c
  3111                           
  3112                           ;doprnt.c: 1523: }
  3113                           
  3114                           ;doprnt.c: 1508: }
  3115                           ;doprnt.c: 1510: break;
  3116  000704  D009               	goto	l6510
  3117  000706                     l6508:
  3118  000706  5035               	movf	printf@flag,w,c
  3119  000708  0B80               	andlw	128
  3120                           
  3121                           ; Switch size 1, requested type "space"
  3122                           ; Number of cases is 2, Range of values is 0 to 128
  3123                           ; switch strategies available:
  3124                           ; Name         Instructions Cycles
  3125                           ; simple_byte            7     4 (average)
  3126                           ;	Chosen strategy is simple_byte
  3127  00070A  0A00               	xorlw	0	; case 0
  3128  00070C  B4D8               	btfsc	status,2,c
  3129  00070E  D7B6               	goto	l6500
  3130  000710  0A80               	xorlw	128	; case 128
  3131  000712  B4D8               	btfsc	status,2,c
  3132  000714  D7D5               	goto	l6502
  3133  000716  D000               	goto	l6510
  3134  000718                     l6510:
  3135                           
  3136                           ;doprnt.c: 1524: (putch(c) );
  3137  000718  5038               	movf	printf@c,w,c
  3138  00071A  EC0C  F012         	call	_putch
  3139  00071E  D000               	goto	l6512
  3140  000720                     l6512:
  3141  000720  0632               	decf	printf@prec,f,c
  3142  000722  2832               	incf	printf@prec,w,c
  3143  000724  B4D8               	btfsc	status,2,c
  3144  000726  D002               	goto	l6514
  3145  000728  D7EE               	goto	l6508
  3146  00072A  D000               	goto	l6514
  3147  00072C                     l6514:
  3148  00072C  C01D  FFF6         	movff	printf@f,tblptrl
  3149  000730  C01E  FFF7         	movff	printf@f+1,tblptrh
  3150  000734  4A1D               	infsnz	printf@f,f,c
  3151  000736  2A1E               	incf	printf@f+1,f,c
  3152  000738                     	if	0	;tblptru may be non-zero
  3153  000738                     	endif
  3154  000738                     	if	0	;tblptru may be non-zero
  3155  000738                     	endif
  3156  000738  0008               	tblrd		*
  3157  00073A  CFF5 F038          	movff	tablat,printf@c
  3158  00073E  5038               	movf	printf@c,w,c
  3159  000740  B4D8               	btfsc	status,2,c
  3160  000742  D002               	goto	l832
  3161  000744  D65A               	goto	l6388
  3162  000746  D000               	goto	l832
  3163  000748                     l832:
  3164  000748  0012               	return		;funcret
  3165  00074A                     __end_of_printf:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           intcon	equ	0xFF2
  3174                           intcon2	equ	0xFF1
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           postdec1	equ	0xFE5
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _putch *****************
  3187 ;; Defined at:
  3188 ;;		line 110 in file "Lab12p1.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  c               1    wreg     unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  c               1   16[COMRAM] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;		None               void
  3195 ;; Registers used:
  3196 ;;		wreg
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        1 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    3
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_printf
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text2
  3217  002418                     __ptext2:
  3218                           	opt stack 0
  3219  002418                     _putch:
  3220                           	opt stack 26
  3221                           
  3222                           ;incstack = 0
  3223                           ;putch@c stored from wreg
  3224  002418  6E11               	movwf	putch@c,c
  3225                           
  3226                           ;Lab12p1.c: 112: while (!TRMT);
  3227  00241A  D000               	goto	l175
  3228  00241C                     l175:
  3229  00241C  A2AC               	btfss	4012,1,c	;volatile
  3230  00241E  D7FE               	goto	l175
  3231                           
  3232                           ;Lab12p1.c: 113: TXREG = c;
  3233  002420  C011  FFAD         	movff	putch@c,4013	;volatile
  3234  002424  0012               	return		;funcret
  3235  002426                     __end_of_putch:
  3236                           	opt stack 0
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           prodh	equ	0xFF4
  3242                           prodl	equ	0xFF3
  3243                           intcon	equ	0xFF2
  3244                           intcon2	equ	0xFF1
  3245                           postinc0	equ	0xFEE
  3246                           wreg	equ	0xFE8
  3247                           postdec1	equ	0xFE5
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _isdigit *****************
  3257 ;; Defined at:
  3258 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  c               1    wreg     unsigned char 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  c               1   18[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;		None               void
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;Total ram usage:        3 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    3
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		_printf
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text3
  3287  00227A                     __ptext3:
  3288                           	opt stack 0
  3289  00227A                     _isdigit:
  3290                           	opt stack 26
  3291                           
  3292                           ;incstack = 0
  3293                           ;isdigit@c stored from wreg
  3294  00227A  6E13               	movwf	isdigit@c,c
  3295  00227C  0E00               	movlw	0
  3296  00227E  6E12               	movwf	_isdigit$2431,c
  3297  002280  0E3A               	movlw	58
  3298  002282  6013               	cpfslt	isdigit@c,c
  3299  002284  D006               	goto	l6108
  3300  002286  0E2F               	movlw	47
  3301  002288  6413               	cpfsgt	isdigit@c,c
  3302  00228A  D003               	goto	l6108
  3303  00228C  0E01               	movlw	1
  3304  00228E  6E12               	movwf	_isdigit$2431,c
  3305  002290  D000               	goto	l6108
  3306  002292                     l6108:
  3307  002292  C012  F011         	movff	_isdigit$2431,??_isdigit
  3308  002296  3011               	rrcf	??_isdigit,w,c
  3309  002298  D000               	goto	l1299
  3310  00229A                     l1299:
  3311  00229A  0012               	return		;funcret
  3312  00229C                     __end_of_isdigit:
  3313                           	opt stack 0
  3314                           tblptru	equ	0xFF8
  3315                           tblptrh	equ	0xFF7
  3316                           tblptrl	equ	0xFF6
  3317                           tablat	equ	0xFF5
  3318                           prodh	equ	0xFF4
  3319                           prodl	equ	0xFF3
  3320                           intcon	equ	0xFF2
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           indf2	equ	0xFDF
  3327                           postinc2	equ	0xFDE
  3328                           postdec2	equ	0xFDD
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function ___lwmod *****************
  3334 ;; Defined at:
  3335 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;  dividend        2   23[COMRAM] unsigned int 
  3338 ;;  divisor         2   25[COMRAM] unsigned int 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  counter         1   27[COMRAM] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  2   23[COMRAM] unsigned int 
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3350 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;Total ram usage:        5 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    3
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_printf
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text4
  3365  001E90                     __ptext4:
  3366                           	opt stack 0
  3367  001E90                     ___lwmod:
  3368                           	opt stack 26
  3369                           
  3370                           ;incstack = 0
  3371  001E90  501A               	movf	___lwmod@divisor,w,c
  3372  001E92  101B               	iorwf	___lwmod@divisor+1,w,c
  3373  001E94  B4D8               	btfsc	status,2,c
  3374  001E96  D01D               	goto	l1401
  3375  001E98  0E01               	movlw	1
  3376  001E9A  6E1C               	movwf	___lwmod@counter,c
  3377  001E9C  D005               	goto	l6220
  3378  001E9E                     l6218:
  3379  001E9E  90D8               	bcf	status,0,c
  3380  001EA0  361A               	rlcf	___lwmod@divisor,f,c
  3381  001EA2  361B               	rlcf	___lwmod@divisor+1,f,c
  3382  001EA4  2A1C               	incf	___lwmod@counter,f,c
  3383  001EA6  D000               	goto	l6220
  3384  001EA8                     l6220:
  3385  001EA8  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3386  001EAA  D002               	goto	l6222
  3387  001EAC  D7F8               	goto	l6218
  3388  001EAE  D000               	goto	l6222
  3389  001EB0                     l6222:
  3390  001EB0  501A               	movf	___lwmod@divisor,w,c
  3391  001EB2  5C18               	subwf	___lwmod@dividend,w,c
  3392  001EB4  501B               	movf	___lwmod@divisor+1,w,c
  3393  001EB6  5819               	subwfb	___lwmod@dividend+1,w,c
  3394  001EB8  A0D8               	btfss	status,0,c
  3395  001EBA  D005               	goto	l6226
  3396  001EBC  501A               	movf	___lwmod@divisor,w,c
  3397  001EBE  5E18               	subwf	___lwmod@dividend,f,c
  3398  001EC0  501B               	movf	___lwmod@divisor+1,w,c
  3399  001EC2  5A19               	subwfb	___lwmod@dividend+1,f,c
  3400  001EC4  D000               	goto	l6226
  3401  001EC6                     l6226:
  3402  001EC6  90D8               	bcf	status,0,c
  3403  001EC8  321B               	rrcf	___lwmod@divisor+1,f,c
  3404  001ECA  321A               	rrcf	___lwmod@divisor,f,c
  3405  001ECC  2E1C               	decfsz	___lwmod@counter,f,c
  3406  001ECE  D7F0               	goto	l6222
  3407  001ED0  D000               	goto	l1401
  3408  001ED2                     l1401:
  3409  001ED2  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3410  001ED6  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3411  001EDA  0012               	return		;funcret
  3412  001EDC                     __end_of___lwmod:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           intcon2	equ	0xFF1
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function ___lwdiv *****************
  3434 ;; Defined at:
  3435 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  dividend        2   16[COMRAM] unsigned int 
  3438 ;;  divisor         2   18[COMRAM] unsigned int 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  quotient        2   21[COMRAM] unsigned int 
  3441 ;;  counter         1   20[COMRAM] unsigned char 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  2   16[COMRAM] unsigned int 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;Total ram usage:        7 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    3
  3458 ;; This function calls:
  3459 ;;		Nothing
  3460 ;; This function is called by:
  3461 ;;		_printf
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text5
  3466  001D94                     __ptext5:
  3467                           	opt stack 0
  3468  001D94                     ___lwdiv:
  3469                           	opt stack 26
  3470                           
  3471                           ;incstack = 0
  3472  001D94  0E00               	movlw	0
  3473  001D96  6E17               	movwf	___lwdiv@quotient+1,c
  3474  001D98  0E00               	movlw	0
  3475  001D9A  6E16               	movwf	___lwdiv@quotient,c
  3476  001D9C  5013               	movf	___lwdiv@divisor,w,c
  3477  001D9E  1014               	iorwf	___lwdiv@divisor+1,w,c
  3478  001DA0  B4D8               	btfsc	status,2,c
  3479  001DA2  D021               	goto	l1391
  3480  001DA4  0E01               	movlw	1
  3481  001DA6  6E15               	movwf	___lwdiv@counter,c
  3482  001DA8  D005               	goto	l6200
  3483  001DAA                     l6198:
  3484  001DAA  90D8               	bcf	status,0,c
  3485  001DAC  3613               	rlcf	___lwdiv@divisor,f,c
  3486  001DAE  3614               	rlcf	___lwdiv@divisor+1,f,c
  3487  001DB0  2A15               	incf	___lwdiv@counter,f,c
  3488  001DB2  D000               	goto	l6200
  3489  001DB4                     l6200:
  3490  001DB4  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3491  001DB6  D002               	goto	l6202
  3492  001DB8  D7F8               	goto	l6198
  3493  001DBA  D000               	goto	l6202
  3494  001DBC                     l6202:
  3495  001DBC  90D8               	bcf	status,0,c
  3496  001DBE  3616               	rlcf	___lwdiv@quotient,f,c
  3497  001DC0  3617               	rlcf	___lwdiv@quotient+1,f,c
  3498  001DC2  5013               	movf	___lwdiv@divisor,w,c
  3499  001DC4  5C11               	subwf	___lwdiv@dividend,w,c
  3500  001DC6  5014               	movf	___lwdiv@divisor+1,w,c
  3501  001DC8  5812               	subwfb	___lwdiv@dividend+1,w,c
  3502  001DCA  A0D8               	btfss	status,0,c
  3503  001DCC  D006               	goto	l6210
  3504  001DCE  5013               	movf	___lwdiv@divisor,w,c
  3505  001DD0  5E11               	subwf	___lwdiv@dividend,f,c
  3506  001DD2  5014               	movf	___lwdiv@divisor+1,w,c
  3507  001DD4  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3508  001DD6  8016               	bsf	___lwdiv@quotient,0,c
  3509  001DD8  D000               	goto	l6210
  3510  001DDA                     l6210:
  3511  001DDA  90D8               	bcf	status,0,c
  3512  001DDC  3214               	rrcf	___lwdiv@divisor+1,f,c
  3513  001DDE  3213               	rrcf	___lwdiv@divisor,f,c
  3514  001DE0  2E15               	decfsz	___lwdiv@counter,f,c
  3515  001DE2  D7EC               	goto	l6202
  3516  001DE4  D000               	goto	l1391
  3517  001DE6                     l1391:
  3518  001DE6  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3519  001DEA  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3520  001DEE  0012               	return		;funcret
  3521  001DF0                     __end_of___lwdiv:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           intcon	equ	0xFF2
  3530                           intcon2	equ	0xFF1
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           postdec1	equ	0xFE5
  3534                           fsr1l	equ	0xFE1
  3535                           indf2	equ	0xFDF
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _get_RPM *****************
  3543 ;; Defined at:
  3544 ;;		line 38 in file "Fan_Support.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  RPS             2   32[COMRAM] int 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  2   30[COMRAM] int 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3558 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;Total ram usage:        4 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    4
  3565 ;; This function calls:
  3566 ;;		___awdiv
  3567 ;;		___wmul
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text6
  3574  001FFE                     __ptext6:
  3575                           	opt stack 0
  3576  001FFE                     _get_RPM:
  3577                           	opt stack 26
  3578                           
  3579                           ;Fan_Support.c: 40: int RPS = TMR3L / 2;
  3580                           
  3581                           ;incstack = 0
  3582  001FFE  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3583  002002  6A18               	clrf	___awdiv@dividend+1,c
  3584  002004  0E00               	movlw	0
  3585  002006  6E1A               	movwf	___awdiv@divisor+1,c
  3586  002008  0E02               	movlw	2
  3587  00200A  6E19               	movwf	___awdiv@divisor,c
  3588  00200C  EC3C  F00C         	call	___awdiv	;wreg free
  3589  002010  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3590  002014  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3591                           
  3592                           ;Fan_Support.c: 41: TMR3L = 0;
  3593  002018  0E00               	movlw	0
  3594  00201A  6EB2               	movwf	4018,c	;volatile
  3595                           
  3596                           ;Fan_Support.c: 42: return (RPS * 60);
  3597  00201C  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3598  002020  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3599  002024  0E00               	movlw	0
  3600  002026  6E14               	movwf	___wmul@multiplicand+1,c
  3601  002028  0E3C               	movlw	60
  3602  00202A  6E13               	movwf	___wmul@multiplicand,c
  3603  00202C  ECDF  F010         	call	___wmul	;wreg free
  3604  002030  C011  F01F         	movff	?___wmul,?_get_RPM
  3605  002034  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3606  002038  D000               	goto	l251
  3607  00203A                     l251:
  3608  00203A  0012               	return		;funcret
  3609  00203C                     __end_of_get_RPM:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           intcon2	equ	0xFF1
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _Update_Screen *****************
  3631 ;; Defined at:
  3632 ;;		line 69 in file "Main_Screen.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  neg_tempF       2    9[BANK0 ] int 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  2   52[None  ] int 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        4 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:   10
  3653 ;; This function calls:
  3654 ;;		___awdiv
  3655 ;;		___awmod
  3656 ;;		_drawtext
  3657 ;;		_strcpy
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text7
  3664  00001C                     __ptext7:
  3665                           	opt stack 0
  3666  00001C                     _Update_Screen:
  3667                           	opt stack 20
  3668                           
  3669                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3670                           
  3671                           ;incstack = 0
  3672  00001C  AE44               	btfss	_DS1621_tempC,7,c
  3673  00001E  D01C               	goto	l6542
  3674                           
  3675                           ;Main_Screen.c: 72: {
  3676                           ;Main_Screen.c: 73: tempC[0] = '-';
  3677  000020  0E2D               	movlw	45
  3678  000022  0100               	movlb	0	; () banked
  3679  000024  6FDD               	movwf	_tempC& (0+255),b
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3683  000026  0E7F               	movlw	127
  3684  000028  1444               	andwf	_DS1621_tempC,w,c
  3685  00002A  6E17               	movwf	___awdiv@dividend,c
  3686  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3687  00002E  0E00               	movlw	0
  3688  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3689  000032  0E0A               	movlw	10
  3690  000034  6E19               	movwf	___awdiv@divisor,c
  3691  000036  EC3C  F00C         	call	___awdiv	;wreg free
  3692  00003A  5017               	movf	?___awdiv,w,c
  3693  00003C  0F30               	addlw	48
  3694  00003E  0100               	movlb	0	; () banked
  3695  000040  6FDE               	movwf	(_tempC+1)& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3699  000042  0E7F               	movlw	127
  3700  000044  1444               	andwf	_DS1621_tempC,w,c
  3701  000046  6E1F               	movwf	___awmod@dividend,c
  3702  000048  6A20               	clrf	___awmod@dividend+1,c
  3703  00004A  0E00               	movlw	0
  3704  00004C  6E22               	movwf	___awmod@divisor+1,c
  3705  00004E  0E0A               	movlw	10
  3706  000050  6E21               	movwf	___awmod@divisor,c
  3707  000052  ECCB  F00C         	call	___awmod	;wreg free
  3708  000056  D01B               	goto	L1
  3709  000058                     l6542:
  3710                           
  3711                           ;Main_Screen.c: 77: else
  3712                           ;Main_Screen.c: 78: {
  3713                           ;Main_Screen.c: 79: tempC[0] = '+';
  3714  000058  0E2B               	movlw	43
  3715  00005A  0100               	movlb	0	; () banked
  3716  00005C  6FDD               	movwf	_tempC& (0+255),b
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3720  00005E  C044  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3721  000062  C045  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3722  000066  0E00               	movlw	0
  3723  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3724  00006A  0E0A               	movlw	10
  3725  00006C  6E19               	movwf	___awdiv@divisor,c
  3726  00006E  EC3C  F00C         	call	___awdiv	;wreg free
  3727  000072  5017               	movf	?___awdiv,w,c
  3728  000074  0F30               	addlw	48
  3729  000076  0100               	movlb	0	; () banked
  3730  000078  6FDE               	movwf	(_tempC+1)& (0+255),b
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3734  00007A  C044  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3735  00007E  C045  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3736  000082  0E00               	movlw	0
  3737  000084  6E22               	movwf	___awmod@divisor+1,c
  3738  000086  0E0A               	movlw	10
  3739  000088  6E21               	movwf	___awmod@divisor,c
  3740  00008A  ECCB  F00C         	call	___awmod	;wreg free
  3741  00008E                     L1:
  3742  00008E  501F               	movf	?___awmod,w,c
  3743  000090  0F30               	addlw	48
  3744  000092  0100               	movlb	0	; () banked
  3745  000094  6FDF               	movwf	(_tempC+2)& (0+255),b
  3746  000096  D000               	goto	l6548
  3747  000098                     l6548:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;Main_Screen.c: 82: }
  3751                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3752  000098  AE47               	btfss	_DS1621_tempF+1,7,c
  3753  00009A  D029               	goto	l6558
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;Main_Screen.c: 85: {
  3757                           ;Main_Screen.c: 86: tempF[0] = '-';
  3758  00009C  0E2D               	movlw	45
  3759  00009E  0100               	movlb	0	; () banked
  3760  0000A0  6FE1               	movwf	_tempF& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3764  0000A2  C046  F0EC         	movff	_DS1621_tempF,??_Update_Screen
  3765  0000A6  C047  F0ED         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3766  0000AA  0100               	movlb	0	; () banked
  3767  0000AC  1FEC               	comf	??_Update_Screen& (0+255),f,b
  3768  0000AE  1FED               	comf	(??_Update_Screen+1)& (0+255),f,b
  3769  0000B0  4BEC               	infsnz	??_Update_Screen& (0+255),f,b
  3770  0000B2  2BED               	incf	(??_Update_Screen+1)& (0+255),f,b
  3771  0000B4  C0EC  F0EE         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3772  0000B8  C0ED  F0EF         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3776  0000BC  C0EE  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3777  0000C0  C0EF  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3778  0000C4  0E00               	movlw	0
  3779  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  3780  0000C8  0E0A               	movlw	10
  3781  0000CA  6E19               	movwf	___awdiv@divisor,c
  3782  0000CC  EC3C  F00C         	call	___awdiv	;wreg free
  3783  0000D0  5017               	movf	?___awdiv,w,c
  3784  0000D2  0F30               	addlw	48
  3785  0000D4  0100               	movlb	0	; () banked
  3786  0000D6  6FE2               	movwf	(_tempF+1)& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3790  0000D8  C0EE  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3791  0000DC  C0EF  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3792  0000E0  0E00               	movlw	0
  3793  0000E2  6E22               	movwf	___awmod@divisor+1,c
  3794  0000E4  0E0A               	movlw	10
  3795  0000E6  6E21               	movwf	___awmod@divisor,c
  3796  0000E8  ECCB  F00C         	call	___awmod	;wreg free
  3797  0000EC  D01B               	goto	L2
  3798  0000EE                     l6558:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;Main_Screen.c: 91: else
  3802                           ;Main_Screen.c: 92: {
  3803                           ;Main_Screen.c: 93: tempF[0] = '+';
  3804  0000EE  0E2B               	movlw	43
  3805  0000F0  0100               	movlb	0	; () banked
  3806  0000F2  6FE1               	movwf	_tempF& (0+255),b
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3810  0000F4  C046  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3811  0000F8  C047  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3812  0000FC  0E00               	movlw	0
  3813  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  3814  000100  0E0A               	movlw	10
  3815  000102  6E19               	movwf	___awdiv@divisor,c
  3816  000104  EC3C  F00C         	call	___awdiv	;wreg free
  3817  000108  5017               	movf	?___awdiv,w,c
  3818  00010A  0F30               	addlw	48
  3819  00010C  0100               	movlb	0	; () banked
  3820  00010E  6FE2               	movwf	(_tempF+1)& (0+255),b
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3824  000110  C046  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3825  000114  C047  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3826  000118  0E00               	movlw	0
  3827  00011A  6E22               	movwf	___awmod@divisor+1,c
  3828  00011C  0E0A               	movlw	10
  3829  00011E  6E21               	movwf	___awmod@divisor,c
  3830  000120  ECCB  F00C         	call	___awmod	;wreg free
  3831  000124                     L2:
  3832  000124  501F               	movf	?___awmod,w,c
  3833  000126  0F30               	addlw	48
  3834  000128  0100               	movlb	0	; () banked
  3835  00012A  6FE3               	movwf	(_tempF+2)& (0+255),b
  3836  00012C  D000               	goto	l6564
  3837  00012E                     l6564:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;Main_Screen.c: 96: }
  3841                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3842  00012E  385E               	swapf	_hour,w,c
  3843  000130  0B0F               	andlw	15
  3844  000132  0F30               	addlw	48
  3845  000134  0100               	movlb	0	; () banked
  3846  000136  6FC7               	movwf	_time& (0+255),b
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3850  000138  505E               	movf	_hour,w,c
  3851  00013A  0B0F               	andlw	15
  3852  00013C  0F30               	addlw	48
  3853  00013E  0100               	movlb	0	; () banked
  3854  000140  6FC8               	movwf	(_time+1)& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3858  000142  385F               	swapf	_minute,w,c
  3859  000144  0B0F               	andlw	15
  3860  000146  0F30               	addlw	48
  3861  000148  0100               	movlb	0	; () banked
  3862  00014A  6FCA               	movwf	(_time+3)& (0+255),b
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f) + '0';
  3866  00014C  505F               	movf	_minute,w,c
  3867  00014E  0B0F               	andlw	15
  3868  000150  0F30               	addlw	48
  3869  000152  0100               	movlb	0	; () banked
  3870  000154  6FCB               	movwf	(_time+4)& (0+255),b
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3874  000156  3862               	swapf	_second,w,c
  3875  000158  0B0F               	andlw	15
  3876  00015A  0F30               	addlw	48
  3877  00015C  0100               	movlb	0	; () banked
  3878  00015E  6FCD               	movwf	(_time+6)& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;Main_Screen.c: 105: time[7] = (second & 0x0f) + '0';
  3882  000160  5062               	movf	_second,w,c
  3883  000162  0B0F               	andlw	15
  3884  000164  0F30               	addlw	48
  3885  000166  0100               	movlb	0	; () banked
  3886  000168  6FCE               	movwf	(_time+7)& (0+255),b
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3890  00016A  3860               	swapf	_month,w,c
  3891  00016C  0B0F               	andlw	15
  3892  00016E  0F30               	addlw	48
  3893  000170  0100               	movlb	0	; () banked
  3894  000172  6FBE               	movwf	_date& (0+255),b
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;Main_Screen.c: 108: date[1] = (month & 0x0f) + '0';
  3898  000174  5060               	movf	_month,w,c
  3899  000176  0B0F               	andlw	15
  3900  000178  0F30               	addlw	48
  3901  00017A  0100               	movlb	0	; () banked
  3902  00017C  6FBF               	movwf	(_date+1)& (0+255),b
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;Main_Screen.c: 110: date[3] = (day>>4) + '0';
  3906  00017E  385A               	swapf	_day,w,c
  3907  000180  0B0F               	andlw	15
  3908  000182  0F30               	addlw	48
  3909  000184  0100               	movlb	0	; () banked
  3910  000186  6FC1               	movwf	(_date+3)& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;Main_Screen.c: 111: date[4] = (day & 0x0f) + '0';
  3914  000188  505A               	movf	_day,w,c
  3915  00018A  0B0F               	andlw	15
  3916  00018C  0F30               	addlw	48
  3917  00018E  0100               	movlb	0	; () banked
  3918  000190  6FC2               	movwf	(_date+4)& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;Main_Screen.c: 113: date[6] = (year>>4) + '0';
  3922  000192  386C               	swapf	_year,w,c
  3923  000194  0B0F               	andlw	15
  3924  000196  0F30               	addlw	48
  3925  000198  0100               	movlb	0	; () banked
  3926  00019A  6FC4               	movwf	(_date+6)& (0+255),b
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;Main_Screen.c: 114: date[7] = (year & 0x0f) + '0';
  3930  00019C  506C               	movf	_year,w,c
  3931  00019E  0B0F               	andlw	15
  3932  0001A0  0F30               	addlw	48
  3933  0001A2  0100               	movlb	0	; () banked
  3934  0001A4  6FC5               	movwf	(_date+7)& (0+255),b
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;Main_Screen.c: 117: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3938  0001A6  0450               	decf	_FAN,w,c
  3939  0001A8  A4D8               	btfss	status,2,c
  3940  0001AA  D00B               	goto	l6592
  3941                           
  3942                           ; BSR set to: 0
  3943  0001AC  0ED9               	movlw	low _Fan_SW_Txt
  3944  0001AE  6E11               	movwf	strcpy@to,c
  3945  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3946  0001B2  6E12               	movwf	strcpy@to+1,c
  3947  0001B4  0EEC               	movlw	low STR_16
  3948  0001B6  6E13               	movwf	strcpy@from,c
  3949  0001B8  0EFF               	movlw	high STR_16
  3950  0001BA  6E14               	movwf	strcpy@from+1,c
  3951  0001BC  EC99  F010         	call	_strcpy	;wreg free
  3952  0001C0  D00B               	goto	l6594
  3953  0001C2                     l6592:
  3954                           
  3955                           ;Main_Screen.c: 118: else strcpy(Fan_SW_Txt, "OFF");
  3956  0001C2  0ED9               	movlw	low _Fan_SW_Txt
  3957  0001C4  6E11               	movwf	strcpy@to,c
  3958  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3959  0001C8  6E12               	movwf	strcpy@to+1,c
  3960  0001CA  0EF0               	movlw	low STR_17
  3961  0001CC  6E13               	movwf	strcpy@from,c
  3962  0001CE  0EFF               	movlw	high STR_17
  3963  0001D0  6E14               	movwf	strcpy@from+1,c
  3964  0001D2  EC99  F010         	call	_strcpy	;wreg free
  3965  0001D6  D000               	goto	l6594
  3966  0001D8                     l6594:
  3967                           
  3968                           ;Main_Screen.c: 121: DC_Txt[0] = (duty_cycle/100)%10 + '0';
  3969  0001D8  0E00               	movlw	0
  3970  0001DA  6E1A               	movwf	___awdiv@divisor+1,c
  3971  0001DC  0E64               	movlw	100
  3972  0001DE  6E19               	movwf	___awdiv@divisor,c
  3973  0001E0  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3974  0001E4  6A18               	clrf	___awdiv@dividend+1,c
  3975  0001E6  EC3C  F00C         	call	___awdiv	;wreg free
  3976  0001EA  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3977  0001EE  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3978  0001F2  0E00               	movlw	0
  3979  0001F4  6E22               	movwf	___awmod@divisor+1,c
  3980  0001F6  0E0A               	movlw	10
  3981  0001F8  6E21               	movwf	___awmod@divisor,c
  3982  0001FA  ECCB  F00C         	call	___awmod	;wreg free
  3983  0001FE  501F               	movf	?___awmod,w,c
  3984  000200  0F30               	addlw	48
  3985  000202  0100               	movlb	0	; () banked
  3986  000204  6FD5               	movwf	_DC_Txt& (0+255),b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;Main_Screen.c: 123: DC_Txt[1] = (duty_cycle/10)%10 + '0';
  3990  000206  0E00               	movlw	0
  3991  000208  6E1A               	movwf	___awdiv@divisor+1,c
  3992  00020A  0E0A               	movlw	10
  3993  00020C  6E19               	movwf	___awdiv@divisor,c
  3994  00020E  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3995  000212  6A18               	clrf	___awdiv@dividend+1,c
  3996  000214  EC3C  F00C         	call	___awdiv	;wreg free
  3997  000218  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3998  00021C  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3999  000220  0E00               	movlw	0
  4000  000222  6E22               	movwf	___awmod@divisor+1,c
  4001  000224  0E0A               	movlw	10
  4002  000226  6E21               	movwf	___awmod@divisor,c
  4003  000228  ECCB  F00C         	call	___awmod	;wreg free
  4004  00022C  501F               	movf	?___awmod,w,c
  4005  00022E  0F30               	addlw	48
  4006  000230  0100               	movlb	0	; () banked
  4007  000232  6FD6               	movwf	(_DC_Txt+1)& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;Main_Screen.c: 124: DC_Txt[2] = duty_cycle%10 + '0';
  4011  000234  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  4012  000238  6A20               	clrf	___awmod@dividend+1,c
  4013  00023A  0E00               	movlw	0
  4014  00023C  6E22               	movwf	___awmod@divisor+1,c
  4015  00023E  0E0A               	movlw	10
  4016  000240  6E21               	movwf	___awmod@divisor,c
  4017  000242  ECCB  F00C         	call	___awmod	;wreg free
  4018  000246  501F               	movf	?___awmod,w,c
  4019  000248  0F30               	addlw	48
  4020  00024A  0100               	movlb	0	; () banked
  4021  00024C  6FD7               	movwf	(_DC_Txt+2)& (0+255),b
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;Main_Screen.c: 127: RPM_Txt[0] = rpm/1000 + '0';
  4025  00024E  C04C  F017         	movff	_rpm,___awdiv@dividend
  4026  000252  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4027  000256  0E03               	movlw	3
  4028  000258  6E1A               	movwf	___awdiv@divisor+1,c
  4029  00025A  0EE8               	movlw	232
  4030  00025C  6E19               	movwf	___awdiv@divisor,c
  4031  00025E  EC3C  F00C         	call	___awdiv	;wreg free
  4032  000262  5017               	movf	?___awdiv,w,c
  4033  000264  0F30               	addlw	48
  4034  000266  0100               	movlb	0	; () banked
  4035  000268  6FD0               	movwf	_RPM_Txt& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;Main_Screen.c: 129: RPM_Txt[1] = (rpm/100)%10 + '0';
  4039  00026A  0E00               	movlw	0
  4040  00026C  6E1A               	movwf	___awdiv@divisor+1,c
  4041  00026E  0E64               	movlw	100
  4042  000270  6E19               	movwf	___awdiv@divisor,c
  4043  000272  C04C  F017         	movff	_rpm,___awdiv@dividend
  4044  000276  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4045  00027A  EC3C  F00C         	call	___awdiv	;wreg free
  4046  00027E  C017  F01F         	movff	?___awdiv,___awmod@dividend
  4047  000282  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4048  000286  0E00               	movlw	0
  4049  000288  6E22               	movwf	___awmod@divisor+1,c
  4050  00028A  0E0A               	movlw	10
  4051  00028C  6E21               	movwf	___awmod@divisor,c
  4052  00028E  ECCB  F00C         	call	___awmod	;wreg free
  4053  000292  501F               	movf	?___awmod,w,c
  4054  000294  0F30               	addlw	48
  4055  000296  0100               	movlb	0	; () banked
  4056  000298  6FD1               	movwf	(_RPM_Txt+1)& (0+255),b
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;Main_Screen.c: 130: RPM_Txt[2] = (rpm/10)%10 + '0';
  4060  00029A  0E00               	movlw	0
  4061  00029C  6E1A               	movwf	___awdiv@divisor+1,c
  4062  00029E  0E0A               	movlw	10
  4063  0002A0  6E19               	movwf	___awdiv@divisor,c
  4064  0002A2  C04C  F017         	movff	_rpm,___awdiv@dividend
  4065  0002A6  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4066  0002AA  EC3C  F00C         	call	___awdiv	;wreg free
  4067  0002AE  C017  F01F         	movff	?___awdiv,___awmod@dividend
  4068  0002B2  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4069  0002B6  0E00               	movlw	0
  4070  0002B8  6E22               	movwf	___awmod@divisor+1,c
  4071  0002BA  0E0A               	movlw	10
  4072  0002BC  6E21               	movwf	___awmod@divisor,c
  4073  0002BE  ECCB  F00C         	call	___awmod	;wreg free
  4074  0002C2  501F               	movf	?___awmod,w,c
  4075  0002C4  0F30               	addlw	48
  4076  0002C6  0100               	movlb	0	; () banked
  4077  0002C8  6FD2               	movwf	(_RPM_Txt+2)& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;Main_Screen.c: 131: RPM_Txt[3] = rpm %10 + '0';
  4081  0002CA  C04C  F01F         	movff	_rpm,___awmod@dividend
  4082  0002CE  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  4083  0002D2  0E00               	movlw	0
  4084  0002D4  6E22               	movwf	___awmod@divisor+1,c
  4085  0002D6  0E0A               	movlw	10
  4086  0002D8  6E21               	movwf	___awmod@divisor,c
  4087  0002DA  ECCB  F00C         	call	___awmod	;wreg free
  4088  0002DE  501F               	movf	?___awmod,w,c
  4089  0002E0  0F30               	addlw	48
  4090  0002E2  0100               	movlb	0	; () banked
  4091  0002E4  6FD3               	movwf	(_RPM_Txt+3)& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;Main_Screen.c: 133: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4095  0002E6  0E17               	movlw	23
  4096  0002E8  6E39               	movwf	drawtext@y,c
  4097  0002EA  0EDD               	movlw	low _tempC
  4098  0002EC  6E3A               	movwf	drawtext@_text,c
  4099  0002EE  0E00               	movlw	high _tempC
  4100  0002F0  6E3B               	movwf	drawtext@_text+1,c
  4101  0002F2  0EFF               	movlw	255
  4102  0002F4  6E3D               	movwf	drawtext@color+1,c
  4103  0002F6  0EE0               	movlw	224
  4104  0002F8  6E3C               	movwf	drawtext@color,c
  4105  0002FA  0E00               	movlw	0
  4106  0002FC  6E3F               	movwf	drawtext@bg+1,c
  4107  0002FE  0E00               	movlw	0
  4108  000300  6E3E               	movwf	drawtext@bg,c
  4109  000302  0E02               	movlw	2
  4110  000304  6E40               	movwf	drawtext@size,c
  4111  000306  0E01               	movlw	1
  4112  000308  ECB2  F008         	call	_drawtext
  4113                           
  4114                           ;Main_Screen.c: 134: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4115  00030C  0E17               	movlw	23
  4116  00030E  6E39               	movwf	drawtext@y,c
  4117  000310  0EE1               	movlw	low _tempF
  4118  000312  6E3A               	movwf	drawtext@_text,c
  4119  000314  0E00               	movlw	high _tempF
  4120  000316  6E3B               	movwf	drawtext@_text+1,c
  4121  000318  0EFF               	movlw	255
  4122  00031A  6E3D               	movwf	drawtext@color+1,c
  4123  00031C  0EE0               	movlw	224
  4124  00031E  6E3C               	movwf	drawtext@color,c
  4125  000320  0E00               	movlw	0
  4126  000322  6E3F               	movwf	drawtext@bg+1,c
  4127  000324  0E00               	movlw	0
  4128  000326  6E3E               	movwf	drawtext@bg,c
  4129  000328  0E02               	movlw	2
  4130  00032A  6E40               	movwf	drawtext@size,c
  4131  00032C  0E46               	movlw	70
  4132  00032E  ECB2  F008         	call	_drawtext
  4133                           
  4134                           ;Main_Screen.c: 135: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4135  000332  0E34               	movlw	52
  4136  000334  6E39               	movwf	drawtext@y,c
  4137  000336  0EC7               	movlw	low _time
  4138  000338  6E3A               	movwf	drawtext@_text,c
  4139  00033A  0E00               	movlw	high _time
  4140  00033C  6E3B               	movwf	drawtext@_text+1,c
  4141  00033E  0E07               	movlw	7
  4142  000340  6E3D               	movwf	drawtext@color+1,c
  4143  000342  683C               	setf	drawtext@color,c
  4144  000344  0E00               	movlw	0
  4145  000346  6E3F               	movwf	drawtext@bg+1,c
  4146  000348  0E00               	movlw	0
  4147  00034A  6E3E               	movwf	drawtext@bg,c
  4148  00034C  0E02               	movlw	2
  4149  00034E  6E40               	movwf	drawtext@size,c
  4150  000350  0E0F               	movlw	15
  4151  000352  ECB2  F008         	call	_drawtext
  4152                           
  4153                           ;Main_Screen.c: 136: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4154  000356  0E52               	movlw	82
  4155  000358  6E39               	movwf	drawtext@y,c
  4156  00035A  0EBE               	movlw	low _date
  4157  00035C  6E3A               	movwf	drawtext@_text,c
  4158  00035E  0E00               	movlw	high _date
  4159  000360  6E3B               	movwf	drawtext@_text+1,c
  4160  000362  0E07               	movlw	7
  4161  000364  6E3D               	movwf	drawtext@color+1,c
  4162  000366  0EE0               	movlw	224
  4163  000368  6E3C               	movwf	drawtext@color,c
  4164  00036A  0E00               	movlw	0
  4165  00036C  6E3F               	movwf	drawtext@bg+1,c
  4166  00036E  0E00               	movlw	0
  4167  000370  6E3E               	movwf	drawtext@bg,c
  4168  000372  0E02               	movlw	2
  4169  000374  6E40               	movwf	drawtext@size,c
  4170  000376  0E0F               	movlw	15
  4171  000378  ECB2  F008         	call	_drawtext
  4172                           
  4173                           ;Main_Screen.c: 138: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4174  00037C  0E82               	movlw	130
  4175  00037E  6E39               	movwf	drawtext@y,c
  4176  000380  0ED9               	movlw	low _Fan_SW_Txt
  4177  000382  6E3A               	movwf	drawtext@_text,c
  4178  000384  0E00               	movlw	high _Fan_SW_Txt
  4179  000386  6E3B               	movwf	drawtext@_text+1,c
  4180  000388  0EF8               	movlw	248
  4181  00038A  6E3D               	movwf	drawtext@color+1,c
  4182  00038C  0E00               	movlw	0
  4183  00038E  6E3C               	movwf	drawtext@color,c
  4184  000390  0E00               	movlw	0
  4185  000392  6E3F               	movwf	drawtext@bg+1,c
  4186  000394  0E00               	movlw	0
  4187  000396  6E3E               	movwf	drawtext@bg,c
  4188  000398  0E01               	movlw	1
  4189  00039A  6E40               	movwf	drawtext@size,c
  4190  00039C  0E5F               	movlw	95
  4191  00039E  ECB2  F008         	call	_drawtext
  4192                           
  4193                           ;Main_Screen.c: 139: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4194  0003A2  0E96               	movlw	150
  4195  0003A4  6E39               	movwf	drawtext@y,c
  4196  0003A6  0ED5               	movlw	low _DC_Txt
  4197  0003A8  6E3A               	movwf	drawtext@_text,c
  4198  0003AA  0E00               	movlw	high _DC_Txt
  4199  0003AC  6E3B               	movwf	drawtext@_text+1,c
  4200  0003AE  0E07               	movlw	7
  4201  0003B0  6E3D               	movwf	drawtext@color+1,c
  4202  0003B2  0EE0               	movlw	224
  4203  0003B4  6E3C               	movwf	drawtext@color,c
  4204  0003B6  0E00               	movlw	0
  4205  0003B8  6E3F               	movwf	drawtext@bg+1,c
  4206  0003BA  0E00               	movlw	0
  4207  0003BC  6E3E               	movwf	drawtext@bg,c
  4208  0003BE  0E01               	movlw	1
  4209  0003C0  6E40               	movwf	drawtext@size,c
  4210  0003C2  0E0A               	movlw	10
  4211  0003C4  ECB2  F008         	call	_drawtext
  4212                           
  4213                           ;Main_Screen.c: 140: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4214  0003C8  0E96               	movlw	150
  4215  0003CA  6E39               	movwf	drawtext@y,c
  4216  0003CC  0ED0               	movlw	low _RPM_Txt
  4217  0003CE  6E3A               	movwf	drawtext@_text,c
  4218  0003D0  0E00               	movlw	high _RPM_Txt
  4219  0003D2  6E3B               	movwf	drawtext@_text+1,c
  4220  0003D4  0E07               	movlw	7
  4221  0003D6  6E3D               	movwf	drawtext@color+1,c
  4222  0003D8  0EE0               	movlw	224
  4223  0003DA  6E3C               	movwf	drawtext@color,c
  4224  0003DC  0E00               	movlw	0
  4225  0003DE  6E3F               	movwf	drawtext@bg+1,c
  4226  0003E0  0E00               	movlw	0
  4227  0003E2  6E3E               	movwf	drawtext@bg,c
  4228  0003E4  0E01               	movlw	1
  4229  0003E6  6E40               	movwf	drawtext@size,c
  4230  0003E8  0E5D               	movlw	93
  4231  0003EA  ECB2  F008         	call	_drawtext
  4232  0003EE  0012               	return		;funcret
  4233  0003F0                     __end_of_Update_Screen:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           postinc0	equ	0xFEE
  4244                           wreg	equ	0xFE8
  4245                           postdec1	equ	0xFE5
  4246                           fsr1l	equ	0xFE1
  4247                           indf2	equ	0xFDF
  4248                           postinc2	equ	0xFDE
  4249                           postdec2	equ	0xFDD
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function ___awmod *****************
  4255 ;; Defined at:
  4256 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  dividend        2   30[COMRAM] int 
  4259 ;;  divisor         2   32[COMRAM] int 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  sign            1   35[COMRAM] unsigned char 
  4262 ;;  counter         1   34[COMRAM] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  2   30[COMRAM] int 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;Total ram usage:        6 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    3
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_Update_Screen
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text8
  4287  001996                     __ptext8:
  4288                           	opt stack 0
  4289  001996                     ___awmod:
  4290                           	opt stack 26
  4291                           
  4292                           ;incstack = 0
  4293  001996  0E00               	movlw	0
  4294  001998  6E24               	movwf	___awmod@sign,c
  4295  00199A  AE20               	btfss	___awmod@dividend+1,7,c
  4296  00199C  D007               	goto	l6164
  4297  00199E  6C1F               	negf	___awmod@dividend,c
  4298  0019A0  1E20               	comf	___awmod@dividend+1,f,c
  4299  0019A2  B0D8               	btfsc	status,0,c
  4300  0019A4  2A20               	incf	___awmod@dividend+1,f,c
  4301  0019A6  0E01               	movlw	1
  4302  0019A8  6E24               	movwf	___awmod@sign,c
  4303  0019AA  D000               	goto	l6164
  4304  0019AC                     l6164:
  4305  0019AC  AE22               	btfss	___awmod@divisor+1,7,c
  4306  0019AE  D005               	goto	l6168
  4307  0019B0  6C21               	negf	___awmod@divisor,c
  4308  0019B2  1E22               	comf	___awmod@divisor+1,f,c
  4309  0019B4  B0D8               	btfsc	status,0,c
  4310  0019B6  2A22               	incf	___awmod@divisor+1,f,c
  4311  0019B8  D000               	goto	l6168
  4312  0019BA                     l6168:
  4313  0019BA  5021               	movf	___awmod@divisor,w,c
  4314  0019BC  1022               	iorwf	___awmod@divisor+1,w,c
  4315  0019BE  B4D8               	btfsc	status,2,c
  4316  0019C0  D01D               	goto	l6184
  4317  0019C2  0E01               	movlw	1
  4318  0019C4  6E23               	movwf	___awmod@counter,c
  4319  0019C6  D005               	goto	l6174
  4320  0019C8                     l6172:
  4321  0019C8  90D8               	bcf	status,0,c
  4322  0019CA  3621               	rlcf	___awmod@divisor,f,c
  4323  0019CC  3622               	rlcf	___awmod@divisor+1,f,c
  4324  0019CE  2A23               	incf	___awmod@counter,f,c
  4325  0019D0  D000               	goto	l6174
  4326  0019D2                     l6174:
  4327  0019D2  BE22               	btfsc	___awmod@divisor+1,7,c
  4328  0019D4  D002               	goto	l6176
  4329  0019D6  D7F8               	goto	l6172
  4330  0019D8  D000               	goto	l6176
  4331  0019DA                     l6176:
  4332  0019DA  5021               	movf	___awmod@divisor,w,c
  4333  0019DC  5C1F               	subwf	___awmod@dividend,w,c
  4334  0019DE  5022               	movf	___awmod@divisor+1,w,c
  4335  0019E0  5820               	subwfb	___awmod@dividend+1,w,c
  4336  0019E2  A0D8               	btfss	status,0,c
  4337  0019E4  D005               	goto	l6180
  4338  0019E6  5021               	movf	___awmod@divisor,w,c
  4339  0019E8  5E1F               	subwf	___awmod@dividend,f,c
  4340  0019EA  5022               	movf	___awmod@divisor+1,w,c
  4341  0019EC  5A20               	subwfb	___awmod@dividend+1,f,c
  4342  0019EE  D000               	goto	l6180
  4343  0019F0                     l6180:
  4344  0019F0  90D8               	bcf	status,0,c
  4345  0019F2  3222               	rrcf	___awmod@divisor+1,f,c
  4346  0019F4  3221               	rrcf	___awmod@divisor,f,c
  4347  0019F6  2E23               	decfsz	___awmod@counter,f,c
  4348  0019F8  D7F0               	goto	l6176
  4349  0019FA  D000               	goto	l6184
  4350  0019FC                     l6184:
  4351  0019FC  5024               	movf	___awmod@sign,w,c
  4352  0019FE  B4D8               	btfsc	status,2,c
  4353  001A00  D005               	goto	l6188
  4354  001A02  6C1F               	negf	___awmod@dividend,c
  4355  001A04  1E20               	comf	___awmod@dividend+1,f,c
  4356  001A06  B0D8               	btfsc	status,0,c
  4357  001A08  2A20               	incf	___awmod@dividend+1,f,c
  4358  001A0A  D000               	goto	l6188
  4359  001A0C                     l6188:
  4360  001A0C  C01F  F01F         	movff	___awmod@dividend,?___awmod
  4361  001A10  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  4362  001A14  D000               	goto	l1074
  4363  001A16                     l1074:
  4364  001A16  0012               	return		;funcret
  4365  001A18                     __end_of___awmod:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           intcon2	equ	0xFF1
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           postdec1	equ	0xFE5
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _Toggle_Fan *****************
  4387 ;; Defined at:
  4388 ;;		line 45 in file "Fan_Support.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;		None
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;		None
  4393 ;; Return value:  Size  Location     Type
  4394 ;;		None               void
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;Total ram usage:        0 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    7
  4409 ;; This function calls:
  4410 ;;		_Turn_Off_Fan
  4411 ;;		_Turn_On_Fan
  4412 ;; This function is called by:
  4413 ;;		_main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text9
  4418  00233E                     __ptext9:
  4419                           	opt stack 0
  4420  00233E                     _Toggle_Fan:
  4421                           	opt stack 23
  4422                           
  4423                           ;Fan_Support.c: 47: if (FAN == 0)
  4424                           
  4425                           ;incstack = 0
  4426  00233E  5050               	movf	_FAN,w,c
  4427  002340  A4D8               	btfss	status,2,c
  4428  002342  D003               	goto	l6626
  4429                           
  4430                           ;Fan_Support.c: 48: Turn_On_Fan();
  4431  002344  ECF4  F011         	call	_Turn_On_Fan	;wreg free
  4432  002348  D003               	goto	l256
  4433  00234A                     l6626:
  4434                           
  4435                           ;Fan_Support.c: 49: else
  4436                           ;Fan_Support.c: 50: Turn_Off_Fan();
  4437  00234A  EC1F  F012         	call	_Turn_Off_Fan	;wreg free
  4438  00234E  D000               	goto	l256
  4439  002350                     l256:
  4440  002350  0012               	return		;funcret
  4441  002352                     __end_of_Toggle_Fan:
  4442                           	opt stack 0
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           intcon	equ	0xFF2
  4450                           intcon2	equ	0xFF1
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           postdec1	equ	0xFE5
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _Turn_On_Fan *****************
  4463 ;; Defined at:
  4464 ;;		line 60 in file "Fan_Support.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;		None               void
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    6
  4485 ;; This function calls:
  4486 ;;		_do_update_pwm
  4487 ;; This function is called by:
  4488 ;;		_Toggle_Fan
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text10
  4493  0023E8                     __ptext10:
  4494                           	opt stack 0
  4495  0023E8                     _Turn_On_Fan:
  4496                           	opt stack 23
  4497                           
  4498                           ;Fan_Support.c: 62: FAN = 1;
  4499                           
  4500                           ;incstack = 0
  4501  0023E8  0E01               	movlw	1
  4502  0023EA  6E50               	movwf	_FAN,c
  4503                           
  4504                           ;Fan_Support.c: 63: do_update_pwm(duty_cycle);
  4505  0023EC  505C               	movf	_duty_cycle,w,c
  4506  0023EE  ECE1  F00B         	call	_do_update_pwm
  4507                           
  4508                           ;Fan_Support.c: 64: PORTEbits.RE1 = 1;
  4509  0023F2  8284               	bsf	3972,1,c	;volatile
  4510                           
  4511                           ;Fan_Support.c: 65: PORTEbits.RE2 = 0;
  4512  0023F4  9484               	bcf	3972,2,c	;volatile
  4513  0023F6  0012               	return		;funcret
  4514  0023F8                     __end_of_Turn_On_Fan:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           intcon2	equ	0xFF1
  4524                           postinc0	equ	0xFEE
  4525                           wreg	equ	0xFE8
  4526                           postdec1	equ	0xFE5
  4527                           fsr1l	equ	0xFE1
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _Turn_Off_Fan *****************
  4536 ;; Defined at:
  4537 ;;		line 53 in file "Fan_Support.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;		None               void
  4544 ;; Registers used:
  4545 ;;		wreg, status,2
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    3
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_Toggle_Fan
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text11
  4566  00243E                     __ptext11:
  4567                           	opt stack 0
  4568  00243E                     _Turn_Off_Fan:
  4569                           	opt stack 26
  4570                           
  4571                           ;Fan_Support.c: 55: FAN = 0;
  4572                           
  4573                           ;incstack = 0
  4574  00243E  0E00               	movlw	0
  4575  002440  6E50               	movwf	_FAN,c
  4576                           
  4577                           ;Fan_Support.c: 56: PORTEbits.RE1 = 0;
  4578  002442  9284               	bcf	3972,1,c	;volatile
  4579                           
  4580                           ;Fan_Support.c: 57: PORTEbits.RE2 = 1;
  4581  002444  8484               	bsf	3972,2,c	;volatile
  4582  002446  0012               	return		;funcret
  4583  002448                     __end_of_Turn_Off_Fan:
  4584                           	opt stack 0
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           intcon2	equ	0xFF1
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           postdec1	equ	0xFE5
  4596                           fsr1l	equ	0xFE1
  4597                           indf2	equ	0xFDF
  4598                           postinc2	equ	0xFDE
  4599                           postdec2	equ	0xFDD
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _Set_RPM_RGB *****************
  4605 ;; Defined at:
  4606 ;;		line 137 in file "Fan_Support.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  rpm             2   30[COMRAM] int 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  valuemasked     2   35[COMRAM] unsigned int 
  4611 ;;  RPM             2   33[COMRAM] int 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        7 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		___awdiv
  4630 ;; This function is called by:
  4631 ;;		_main
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text12
  4636  001BFA                     __ptext12:
  4637                           	opt stack 0
  4638  001BFA                     _Set_RPM_RGB:
  4639                           	opt stack 26
  4640                           
  4641                           ;Fan_Support.c: 139: unsigned valuemasked;
  4642                           ;Fan_Support.c: 140: valuemasked = (PORTD & 0b00011111);
  4643                           
  4644                           ;incstack = 0
  4645  001BFA  CF83 F021          	movff	3971,??_Set_RPM_RGB	;volatile
  4646  001BFE  0E1F               	movlw	31
  4647  001C00  1621               	andwf	??_Set_RPM_RGB,f,c
  4648  001C02  5021               	movf	??_Set_RPM_RGB,w,c
  4649  001C04  6E24               	movwf	Set_RPM_RGB@valuemasked,c
  4650  001C06  6A25               	clrf	Set_RPM_RGB@valuemasked+1,c
  4651                           
  4652                           ;Fan_Support.c: 141: int RPM = (rpm/500);
  4653  001C08  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4654  001C0C  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4655  001C10  0E01               	movlw	1
  4656  001C12  6E1A               	movwf	___awdiv@divisor+1,c
  4657  001C14  0EF4               	movlw	244
  4658  001C16  6E19               	movwf	___awdiv@divisor,c
  4659  001C18  EC3C  F00C         	call	___awdiv	;wreg free
  4660  001C1C  C017  F022         	movff	?___awdiv,Set_RPM_RGB@RPM
  4661  001C20  C018  F023         	movff	?___awdiv+1,Set_RPM_RGB@RPM+1
  4662                           
  4663                           ;Fan_Support.c: 142: if (rpm<1){
  4664  001C24  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4665  001C26  D005               	goto	l6522
  4666  001C28  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  4667  001C2A  E106               	bnz	l6524
  4668  001C2C  041F               	decf	Set_RPM_RGB@rpm,w,c
  4669  001C2E  B0D8               	btfsc	status,0,c
  4670  001C30  D003               	goto	l6524
  4671  001C32                     l6522:
  4672                           
  4673                           ;Fan_Support.c: 143: PORTD = valuemasked;
  4674  001C32  C024  FF83         	movff	Set_RPM_RGB@valuemasked,3971	;volatile
  4675                           
  4676                           ;Fan_Support.c: 144: }
  4677  001C36  D015               	goto	l286
  4678  001C38                     l6524:
  4679                           
  4680                           ;Fan_Support.c: 145: else{
  4681                           ;Fan_Support.c: 146: PORTD = (valuemasked | (D2[RPM]) | (D1[found])) ;
  4682  001C38  505D               	movf	_found,w,c
  4683  001C3A  0D01               	mullw	1
  4684  001C3C  0EA4               	movlw	low _D1
  4685  001C3E  24F3               	addwf	prodl,w,c
  4686  001C40  6ED9               	movwf	fsr2l,c
  4687  001C42  0E00               	movlw	high _D1
  4688  001C44  20F4               	addwfc	prodh,w,c
  4689  001C46  6EDA               	movwf	fsr2h,c
  4690  001C48  50DF               	movf	indf2,w,c
  4691  001C4A  6E21               	movwf	??_Set_RPM_RGB& (0+255),c
  4692  001C4C  0EAC               	movlw	low _D2
  4693  001C4E  2422               	addwf	Set_RPM_RGB@RPM,w,c
  4694  001C50  6ED9               	movwf	fsr2l,c
  4695  001C52  0E00               	movlw	high _D2
  4696  001C54  2023               	addwfc	Set_RPM_RGB@RPM+1,w,c
  4697  001C56  6EDA               	movwf	fsr2h,c
  4698  001C58  50DF               	movf	indf2,w,c
  4699  001C5A  1021               	iorwf	??_Set_RPM_RGB,w,c
  4700  001C5C  1024               	iorwf	Set_RPM_RGB@valuemasked,w,c
  4701  001C5E  6E83               	movwf	3971,c	;volatile
  4702  001C60  D000               	goto	l286
  4703  001C62                     l286:
  4704  001C62  0012               	return		;funcret
  4705  001C64                     __end_of_Set_RPM_RGB:
  4706                           	opt stack 0
  4707                           tblptru	equ	0xFF8
  4708                           tblptrh	equ	0xFF7
  4709                           tblptrl	equ	0xFF6
  4710                           tablat	equ	0xFF5
  4711                           prodh	equ	0xFF4
  4712                           prodl	equ	0xFF3
  4713                           intcon	equ	0xFF2
  4714                           intcon2	equ	0xFF1
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1l	equ	0xFE1
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _Set_DC_RGB *****************
  4727 ;; Defined at:
  4728 ;;		line 113 in file "Fan_Support.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  duty_cycle      2   30[COMRAM] int 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  index           1   32[COMRAM] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;		None               void
  4735 ;; Registers used:
  4736 ;;		wreg, status,2, status,0, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;Total ram usage:        3 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    4
  4749 ;; This function calls:
  4750 ;;		___awdiv
  4751 ;; This function is called by:
  4752 ;;		_main
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text13
  4757  001FBA                     __ptext13:
  4758                           	opt stack 0
  4759  001FBA                     _Set_DC_RGB:
  4760                           	opt stack 26
  4761                           
  4762                           ;Fan_Support.c: 115: char index;
  4763                           ;Fan_Support.c: 116: index = duty_cycle /10;
  4764                           
  4765                           ;incstack = 0
  4766  001FBA  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4767  001FBE  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4768  001FC2  0E00               	movlw	0
  4769  001FC4  6E1A               	movwf	___awdiv@divisor+1,c
  4770  001FC6  0E0A               	movlw	10
  4771  001FC8  6E19               	movwf	___awdiv@divisor,c
  4772  001FCA  EC3C  F00C         	call	___awdiv	;wreg free
  4773  001FCE  5017               	movf	?___awdiv,w,c
  4774  001FD0  6E21               	movwf	Set_DC_RGB@index,c
  4775                           
  4776                           ;Fan_Support.c: 117: if (duty_cycle >= 70)
  4777  001FD2  BE20               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4778  001FD4  D00C               	goto	l6532
  4779  001FD6  5020               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4780  001FD8  E104               	bnz	u5080
  4781  001FDA  0E46               	movlw	70
  4782  001FDC  5C1F               	subwf	Set_DC_RGB@duty_cycle,w,c
  4783  001FDE  A0D8               	btfss	status,0,c
  4784  001FE0  D006               	goto	l6532
  4785  001FE2                     u5080:
  4786                           
  4787                           ;Fan_Support.c: 118: {
  4788                           ;Fan_Support.c: 119: PORTD = (PORTD & 0b11111000);
  4789  001FE2  5083               	movf	3971,w,c	;volatile
  4790  001FE4  0BF8               	andlw	248
  4791  001FE6  6E83               	movwf	3971,c	;volatile
  4792                           
  4793                           ;Fan_Support.c: 120: PORTD = PORTD | 0b00000111;
  4794  001FE8  5083               	movf	3971,w,c	;volatile
  4795  001FEA  0907               	iorlw	7
  4796  001FEC  D005               	goto	L3
  4797  001FEE                     l6532:
  4798                           
  4799                           ;Fan_Support.c: 122: else
  4800                           ;Fan_Support.c: 123: {
  4801                           ;Fan_Support.c: 124: PORTD = (PORTD & 0b11111000);
  4802  001FEE  5083               	movf	3971,w,c	;volatile
  4803  001FF0  0BF8               	andlw	248
  4804  001FF2  6E83               	movwf	3971,c	;volatile
  4805                           
  4806                           ;Fan_Support.c: 125: PORTD = PORTD | index;
  4807  001FF4  5083               	movf	3971,w,c	;volatile
  4808  001FF6  1021               	iorwf	Set_DC_RGB@index,w,c
  4809  001FF8                     L3:
  4810  001FF8  6E83               	movwf	3971,c	;volatile
  4811  001FFA  D000               	goto	l281
  4812  001FFC                     l281:
  4813  001FFC  0012               	return		;funcret
  4814  001FFE                     __end_of_Set_DC_RGB:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function ___awdiv *****************
  4836 ;; Defined at:
  4837 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  dividend        2   22[COMRAM] int 
  4840 ;;  divisor         2   24[COMRAM] int 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  quotient        2   28[COMRAM] int 
  4843 ;;  sign            1   27[COMRAM] unsigned char 
  4844 ;;  counter         1   26[COMRAM] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  2   22[COMRAM] int 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        8 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    3
  4861 ;; This function calls:
  4862 ;;		Nothing
  4863 ;; This function is called by:
  4864 ;;		_main
  4865 ;;		_get_RPM
  4866 ;;		_Set_DC_RGB
  4867 ;;		_Set_RPM_RGB
  4868 ;;		_Update_Screen
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text14
  4873  001878                     __ptext14:
  4874                           	opt stack 0
  4875  001878                     ___awdiv:
  4876                           	opt stack 26
  4877                           
  4878                           ;incstack = 0
  4879  001878  0E00               	movlw	0
  4880  00187A  6E1C               	movwf	___awdiv@sign,c
  4881  00187C  AE1A               	btfss	___awdiv@divisor+1,7,c
  4882  00187E  D007               	goto	l6120
  4883  001880  6C19               	negf	___awdiv@divisor,c
  4884  001882  1E1A               	comf	___awdiv@divisor+1,f,c
  4885  001884  B0D8               	btfsc	status,0,c
  4886  001886  2A1A               	incf	___awdiv@divisor+1,f,c
  4887  001888  0E01               	movlw	1
  4888  00188A  6E1C               	movwf	___awdiv@sign,c
  4889  00188C  D000               	goto	l6120
  4890  00188E                     l6120:
  4891  00188E  AE18               	btfss	___awdiv@dividend+1,7,c
  4892  001890  D007               	goto	l6126
  4893  001892  6C17               	negf	___awdiv@dividend,c
  4894  001894  1E18               	comf	___awdiv@dividend+1,f,c
  4895  001896  B0D8               	btfsc	status,0,c
  4896  001898  2A18               	incf	___awdiv@dividend+1,f,c
  4897  00189A  0E01               	movlw	1
  4898  00189C  1A1C               	xorwf	___awdiv@sign,f,c
  4899  00189E  D000               	goto	l6126
  4900  0018A0                     l6126:
  4901  0018A0  0E00               	movlw	0
  4902  0018A2  6E1E               	movwf	___awdiv@quotient+1,c
  4903  0018A4  0E00               	movlw	0
  4904  0018A6  6E1D               	movwf	___awdiv@quotient,c
  4905  0018A8  5019               	movf	___awdiv@divisor,w,c
  4906  0018AA  101A               	iorwf	___awdiv@divisor+1,w,c
  4907  0018AC  B4D8               	btfsc	status,2,c
  4908  0018AE  D021               	goto	l6148
  4909  0018B0  0E01               	movlw	1
  4910  0018B2  6E1B               	movwf	___awdiv@counter,c
  4911  0018B4  D005               	goto	l6134
  4912  0018B6                     l6132:
  4913  0018B6  90D8               	bcf	status,0,c
  4914  0018B8  3619               	rlcf	___awdiv@divisor,f,c
  4915  0018BA  361A               	rlcf	___awdiv@divisor+1,f,c
  4916  0018BC  2A1B               	incf	___awdiv@counter,f,c
  4917  0018BE  D000               	goto	l6134
  4918  0018C0                     l6134:
  4919  0018C0  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4920  0018C2  D002               	goto	l6136
  4921  0018C4  D7F8               	goto	l6132
  4922  0018C6  D000               	goto	l6136
  4923  0018C8                     l6136:
  4924  0018C8  90D8               	bcf	status,0,c
  4925  0018CA  361D               	rlcf	___awdiv@quotient,f,c
  4926  0018CC  361E               	rlcf	___awdiv@quotient+1,f,c
  4927  0018CE  5019               	movf	___awdiv@divisor,w,c
  4928  0018D0  5C17               	subwf	___awdiv@dividend,w,c
  4929  0018D2  501A               	movf	___awdiv@divisor+1,w,c
  4930  0018D4  5818               	subwfb	___awdiv@dividend+1,w,c
  4931  0018D6  A0D8               	btfss	status,0,c
  4932  0018D8  D006               	goto	l6144
  4933  0018DA  5019               	movf	___awdiv@divisor,w,c
  4934  0018DC  5E17               	subwf	___awdiv@dividend,f,c
  4935  0018DE  501A               	movf	___awdiv@divisor+1,w,c
  4936  0018E0  5A18               	subwfb	___awdiv@dividend+1,f,c
  4937  0018E2  801D               	bsf	___awdiv@quotient,0,c
  4938  0018E4  D000               	goto	l6144
  4939  0018E6                     l6144:
  4940  0018E6  90D8               	bcf	status,0,c
  4941  0018E8  321A               	rrcf	___awdiv@divisor+1,f,c
  4942  0018EA  3219               	rrcf	___awdiv@divisor,f,c
  4943  0018EC  2E1B               	decfsz	___awdiv@counter,f,c
  4944  0018EE  D7EC               	goto	l6136
  4945  0018F0  D000               	goto	l6148
  4946  0018F2                     l6148:
  4947  0018F2  501C               	movf	___awdiv@sign,w,c
  4948  0018F4  B4D8               	btfsc	status,2,c
  4949  0018F6  D005               	goto	l6152
  4950  0018F8  6C1D               	negf	___awdiv@quotient,c
  4951  0018FA  1E1E               	comf	___awdiv@quotient+1,f,c
  4952  0018FC  B0D8               	btfsc	status,0,c
  4953  0018FE  2A1E               	incf	___awdiv@quotient+1,f,c
  4954  001900  D000               	goto	l6152
  4955  001902                     l6152:
  4956  001902  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4957  001906  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4958  00190A  D000               	goto	l1061
  4959  00190C                     l1061:
  4960  00190C  0012               	return		;funcret
  4961  00190E                     __end_of___awdiv:
  4962                           	opt stack 0
  4963                           tblptru	equ	0xFF8
  4964                           tblptrh	equ	0xFF7
  4965                           tblptrl	equ	0xFF6
  4966                           tablat	equ	0xFF5
  4967                           prodh	equ	0xFF4
  4968                           prodl	equ	0xFF3
  4969                           intcon	equ	0xFF2
  4970                           intcon2	equ	0xFF1
  4971                           postinc0	equ	0xFEE
  4972                           wreg	equ	0xFE8
  4973                           postdec1	equ	0xFE5
  4974                           fsr1l	equ	0xFE1
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function _Initialize_Screen *****************
  4983 ;; Defined at:
  4984 ;;		line 34 in file "Main_Screen.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;		None               void
  4991 ;; Registers used:
  4992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:   10
  5005 ;; This function calls:
  5006 ;;		_LCD_Reset
  5007 ;;		_TFT_GreenTab_Initialize
  5008 ;;		_drawCircle
  5009 ;;		_drawtext
  5010 ;;		_fillScreen
  5011 ;;		_strcpy
  5012 ;; This function is called by:
  5013 ;;		_main
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text15
  5018  00074A                     __ptext15:
  5019                           	opt stack 0
  5020  00074A                     _Initialize_Screen:
  5021                           	opt stack 20
  5022                           
  5023                           ;Main_Screen.c: 36: LCD_Reset();
  5024                           
  5025                           ;incstack = 0
  5026  00074A  ECC7  F011         	call	_LCD_Reset	;wreg free
  5027                           
  5028                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  5029  00074E  ECCA  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  5030                           
  5031                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5032  000752  0E00               	movlw	0
  5033  000754  6E25               	movwf	fillScreen@color+1,c
  5034  000756  0E00               	movlw	0
  5035  000758  6E24               	movwf	fillScreen@color,c
  5036  00075A  EC6D  F011         	call	_fillScreen	;wreg free
  5037                           
  5038                           ;Main_Screen.c: 39: txt = buffer;
  5039  00075E  0E54               	movlw	low _buffer
  5040  000760  6E4E               	movwf	_txt,c
  5041  000762  0E01               	movlw	high _buffer
  5042  000764  6E4F               	movwf	_txt+1,c
  5043                           
  5044                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Fall 22-S4");
  5045  000766  C04E  F011         	movff	_txt,strcpy@to
  5046  00076A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5047  00076E  0E77               	movlw	low STR_7
  5048  000770  6E13               	movwf	strcpy@from,c
  5049  000772  0EFF               	movlw	high STR_7
  5050  000774  6E14               	movwf	strcpy@from+1,c
  5051  000776  EC99  F010         	call	_strcpy	;wreg free
  5052                           
  5053                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5054  00077A  0E01               	movlw	1
  5055  00077C  6E39               	movwf	drawtext@y,c
  5056  00077E  C04E  F03A         	movff	_txt,drawtext@_text
  5057  000782  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5058  000786  0EFF               	movlw	255
  5059  000788  6E3D               	movwf	drawtext@color+1,c
  5060  00078A  683C               	setf	drawtext@color,c
  5061  00078C  0E00               	movlw	0
  5062  00078E  6E3F               	movwf	drawtext@bg+1,c
  5063  000790  0E00               	movlw	0
  5064  000792  6E3E               	movwf	drawtext@bg,c
  5065  000794  0E01               	movlw	1
  5066  000796  6E40               	movwf	drawtext@size,c
  5067  000798  0E01               	movlw	1
  5068  00079A  ECB2  F008         	call	_drawtext
  5069                           
  5070                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5071  00079E  C04E  F011         	movff	_txt,strcpy@to
  5072  0007A2  C04F  F012         	movff	_txt+1,strcpy@to+1
  5073  0007A6  0ECF               	movlw	low STR_8
  5074  0007A8  6E13               	movwf	strcpy@from,c
  5075  0007AA  0EFF               	movlw	high STR_8
  5076  0007AC  6E14               	movwf	strcpy@from+1,c
  5077  0007AE  EC99  F010         	call	_strcpy	;wreg free
  5078                           
  5079                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5080  0007B2  0E0B               	movlw	11
  5081  0007B4  6E39               	movwf	drawtext@y,c
  5082  0007B6  C04E  F03A         	movff	_txt,drawtext@_text
  5083  0007BA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5084  0007BE  0EF8               	movlw	248
  5085  0007C0  6E3D               	movwf	drawtext@color+1,c
  5086  0007C2  0E1F               	movlw	31
  5087  0007C4  6E3C               	movwf	drawtext@color,c
  5088  0007C6  0E00               	movlw	0
  5089  0007C8  6E3F               	movwf	drawtext@bg+1,c
  5090  0007CA  0E00               	movlw	0
  5091  0007CC  6E3E               	movwf	drawtext@bg,c
  5092  0007CE  0E01               	movlw	1
  5093  0007D0  6E40               	movwf	drawtext@size,c
  5094  0007D2  0E18               	movlw	24
  5095  0007D4  ECB2  F008         	call	_drawtext
  5096                           
  5097                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5098  0007D8  0E00               	movlw	0
  5099  0007DA  6E1D               	movwf	drawCircle@x0+1,c
  5100  0007DC  0E28               	movlw	40
  5101  0007DE  6E1C               	movwf	drawCircle@x0,c
  5102  0007E0  0E00               	movlw	0
  5103  0007E2  6E1F               	movwf	drawCircle@y0+1,c
  5104  0007E4  0E17               	movlw	23
  5105  0007E6  6E1E               	movwf	drawCircle@y0,c
  5106  0007E8  0E00               	movlw	0
  5107  0007EA  6E21               	movwf	drawCircle@r+1,c
  5108  0007EC  0E02               	movlw	2
  5109  0007EE  6E20               	movwf	drawCircle@r,c
  5110  0007F0  0EFF               	movlw	255
  5111  0007F2  6E23               	movwf	drawCircle@color+1,c
  5112  0007F4  0EE0               	movlw	224
  5113  0007F6  6E22               	movwf	drawCircle@color,c
  5114  0007F8  ECF2  F005         	call	_drawCircle	;wreg free
  5115                           
  5116                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5117  0007FC  C04E  F011         	movff	_txt,strcpy@to
  5118  000800  C04F  F012         	movff	_txt+1,strcpy@to+1
  5119  000804  0EF8               	movlw	low STR_9
  5120  000806  6E13               	movwf	strcpy@from,c
  5121  000808  0EFF               	movlw	high STR_9
  5122  00080A  6E14               	movwf	strcpy@from+1,c
  5123  00080C  EC99  F010         	call	_strcpy	;wreg free
  5124                           
  5125                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5126  000810  0E17               	movlw	23
  5127  000812  6E39               	movwf	drawtext@y,c
  5128  000814  C04E  F03A         	movff	_txt,drawtext@_text
  5129  000818  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5130  00081C  0EFF               	movlw	255
  5131  00081E  6E3D               	movwf	drawtext@color+1,c
  5132  000820  0EE0               	movlw	224
  5133  000822  6E3C               	movwf	drawtext@color,c
  5134  000824  0E00               	movlw	0
  5135  000826  6E3F               	movwf	drawtext@bg+1,c
  5136  000828  0E00               	movlw	0
  5137  00082A  6E3E               	movwf	drawtext@bg,c
  5138  00082C  0E02               	movlw	2
  5139  00082E  6E40               	movwf	drawtext@size,c
  5140  000830  0E2D               	movlw	45
  5141  000832  ECB2  F008         	call	_drawtext
  5142                           
  5143                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5144  000836  C04E  F011         	movff	_txt,strcpy@to
  5145  00083A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5146  00083E  0EF2               	movlw	low (STR_17+2)
  5147  000840  6E13               	movwf	strcpy@from,c
  5148  000842  0EFF               	movlw	high (STR_17+2)
  5149  000844  6E14               	movwf	strcpy@from+1,c
  5150  000846  EC99  F010         	call	_strcpy	;wreg free
  5151                           
  5152                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5153  00084A  0E00               	movlw	0
  5154  00084C  6E1D               	movwf	drawCircle@x0+1,c
  5155  00084E  0E6E               	movlw	110
  5156  000850  6E1C               	movwf	drawCircle@x0,c
  5157  000852  0E00               	movlw	0
  5158  000854  6E1F               	movwf	drawCircle@y0+1,c
  5159  000856  0E17               	movlw	23
  5160  000858  6E1E               	movwf	drawCircle@y0,c
  5161  00085A  0E00               	movlw	0
  5162  00085C  6E21               	movwf	drawCircle@r+1,c
  5163  00085E  0E02               	movlw	2
  5164  000860  6E20               	movwf	drawCircle@r,c
  5165  000862  0EFF               	movlw	255
  5166  000864  6E23               	movwf	drawCircle@color+1,c
  5167  000866  0EE0               	movlw	224
  5168  000868  6E22               	movwf	drawCircle@color,c
  5169  00086A  ECF2  F005         	call	_drawCircle	;wreg free
  5170                           
  5171                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5172  00086E  0E17               	movlw	23
  5173  000870  6E39               	movwf	drawtext@y,c
  5174  000872  C04E  F03A         	movff	_txt,drawtext@_text
  5175  000876  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5176  00087A  0EFF               	movlw	255
  5177  00087C  6E3D               	movwf	drawtext@color+1,c
  5178  00087E  0EE0               	movlw	224
  5179  000880  6E3C               	movwf	drawtext@color,c
  5180  000882  0E00               	movlw	0
  5181  000884  6E3F               	movwf	drawtext@bg+1,c
  5182  000886  0E00               	movlw	0
  5183  000888  6E3E               	movwf	drawtext@bg,c
  5184  00088A  0E02               	movlw	2
  5185  00088C  6E40               	movwf	drawtext@size,c
  5186  00088E  0E73               	movlw	115
  5187  000890  ECB2  F008         	call	_drawtext
  5188                           
  5189                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5190  000894  C04E  F011         	movff	_txt,strcpy@to
  5191  000898  C04F  F012         	movff	_txt+1,strcpy@to+1
  5192  00089C  0EE2               	movlw	low STR_11
  5193  00089E  6E13               	movwf	strcpy@from,c
  5194  0008A0  0EFF               	movlw	high STR_11
  5195  0008A2  6E14               	movwf	strcpy@from+1,c
  5196  0008A4  EC99  F010         	call	_strcpy	;wreg free
  5197                           
  5198                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5199  0008A8  0E28               	movlw	40
  5200  0008AA  6E39               	movwf	drawtext@y,c
  5201  0008AC  C04E  F03A         	movff	_txt,drawtext@_text
  5202  0008B0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5203  0008B4  0E00               	movlw	0
  5204  0008B6  6E3D               	movwf	drawtext@color+1,c
  5205  0008B8  0E1F               	movlw	31
  5206  0008BA  6E3C               	movwf	drawtext@color,c
  5207  0008BC  0E00               	movlw	0
  5208  0008BE  6E3F               	movwf	drawtext@bg+1,c
  5209  0008C0  0E00               	movlw	0
  5210  0008C2  6E3E               	movwf	drawtext@bg,c
  5211  0008C4  0E01               	movlw	1
  5212  0008C6  6E40               	movwf	drawtext@size,c
  5213  0008C8  0E32               	movlw	50
  5214  0008CA  ECB2  F008         	call	_drawtext
  5215                           
  5216                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5217  0008CE  C04E  F011         	movff	_txt,strcpy@to
  5218  0008D2  C04F  F012         	movff	_txt+1,strcpy@to+1
  5219  0008D6  0EE7               	movlw	low STR_12
  5220  0008D8  6E13               	movwf	strcpy@from,c
  5221  0008DA  0EFF               	movlw	high STR_12
  5222  0008DC  6E14               	movwf	strcpy@from+1,c
  5223  0008DE  EC99  F010         	call	_strcpy	;wreg free
  5224                           
  5225                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5226  0008E2  0E47               	movlw	71
  5227  0008E4  6E39               	movwf	drawtext@y,c
  5228  0008E6  C04E  F03A         	movff	_txt,drawtext@_text
  5229  0008EA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5230  0008EE  0EF8               	movlw	248
  5231  0008F0  6E3D               	movwf	drawtext@color+1,c
  5232  0008F2  0E00               	movlw	0
  5233  0008F4  6E3C               	movwf	drawtext@color,c
  5234  0008F6  0E00               	movlw	0
  5235  0008F8  6E3F               	movwf	drawtext@bg+1,c
  5236  0008FA  0E00               	movlw	0
  5237  0008FC  6E3E               	movwf	drawtext@bg,c
  5238  0008FE  0E01               	movlw	1
  5239  000900  6E40               	movwf	drawtext@size,c
  5240  000902  0E32               	movlw	50
  5241  000904  ECB2  F008         	call	_drawtext
  5242                           
  5243                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5244  000908  C04E  F011         	movff	_txt,strcpy@to
  5245  00090C  C04F  F012         	movff	_txt+1,strcpy@to+1
  5246  000910  0EDC               	movlw	low STR_13
  5247  000912  6E13               	movwf	strcpy@from,c
  5248  000914  0EFF               	movlw	high STR_13
  5249  000916  6E14               	movwf	strcpy@from+1,c
  5250  000918  EC99  F010         	call	_strcpy	;wreg free
  5251                           
  5252                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5253  00091C  0E78               	movlw	120
  5254  00091E  6E39               	movwf	drawtext@y,c
  5255  000920  C04E  F03A         	movff	_txt,drawtext@_text
  5256  000924  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5257  000928  0E00               	movlw	0
  5258  00092A  6E3D               	movwf	drawtext@color+1,c
  5259  00092C  0E1F               	movlw	31
  5260  00092E  6E3C               	movwf	drawtext@color,c
  5261  000930  0E00               	movlw	0
  5262  000932  6E3F               	movwf	drawtext@bg+1,c
  5263  000934  0E00               	movlw	0
  5264  000936  6E3E               	movwf	drawtext@bg,c
  5265  000938  0E01               	movlw	1
  5266  00093A  6E40               	movwf	drawtext@size,c
  5267  00093C  0E55               	movlw	85
  5268  00093E  ECB2  F008         	call	_drawtext
  5269                           
  5270                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5271  000942  C04E  F011         	movff	_txt,strcpy@to
  5272  000946  C04F  F012         	movff	_txt+1,strcpy@to+1
  5273  00094A  0EFB               	movlw	low STR_14
  5274  00094C  6E13               	movwf	strcpy@from,c
  5275  00094E  0EFF               	movlw	high STR_14
  5276  000950  6E14               	movwf	strcpy@from+1,c
  5277  000952  EC99  F010         	call	_strcpy	;wreg free
  5278                           
  5279                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5280  000956  0E8C               	movlw	140
  5281  000958  6E39               	movwf	drawtext@y,c
  5282  00095A  C04E  F03A         	movff	_txt,drawtext@_text
  5283  00095E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5284  000962  0EFF               	movlw	255
  5285  000964  6E3D               	movwf	drawtext@color+1,c
  5286  000966  683C               	setf	drawtext@color,c
  5287  000968  0E00               	movlw	0
  5288  00096A  6E3F               	movwf	drawtext@bg+1,c
  5289  00096C  0E00               	movlw	0
  5290  00096E  6E3E               	movwf	drawtext@bg,c
  5291  000970  0E01               	movlw	1
  5292  000972  6E40               	movwf	drawtext@size,c
  5293  000974  0E0C               	movlw	12
  5294  000976  ECB2  F008         	call	_drawtext
  5295                           
  5296                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5297  00097A  C04E  F011         	movff	_txt,strcpy@to
  5298  00097E  C04F  F012         	movff	_txt+1,strcpy@to+1
  5299  000982  0EF4               	movlw	low STR_15
  5300  000984  6E13               	movwf	strcpy@from,c
  5301  000986  0EFF               	movlw	high STR_15
  5302  000988  6E14               	movwf	strcpy@from+1,c
  5303  00098A  EC99  F010         	call	_strcpy	;wreg free
  5304                           
  5305                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5306  00098E  0E8C               	movlw	140
  5307  000990  6E39               	movwf	drawtext@y,c
  5308  000992  C04E  F03A         	movff	_txt,drawtext@_text
  5309  000996  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5310  00099A  0EFF               	movlw	255
  5311  00099C  6E3D               	movwf	drawtext@color+1,c
  5312  00099E  683C               	setf	drawtext@color,c
  5313  0009A0  0E00               	movlw	0
  5314  0009A2  6E3F               	movwf	drawtext@bg+1,c
  5315  0009A4  0E00               	movlw	0
  5316  0009A6  6E3E               	movwf	drawtext@bg,c
  5317  0009A8  0E01               	movlw	1
  5318  0009AA  6E40               	movwf	drawtext@size,c
  5319  0009AC  0E5F               	movlw	95
  5320  0009AE  ECB2  F008         	call	_drawtext
  5321  0009B2  0012               	return		;funcret
  5322  0009B4                     __end_of_Initialize_Screen:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           intcon2	equ	0xFF1
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _strcpy *****************
  5344 ;; Defined at:
  5345 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  to              2   16[COMRAM] PTR unsigned char 
  5348 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5349 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5350 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(3), 
  5351 ;;		 -> STR_13(6), STR_12(5), STR_11(5), STR_10(2), 
  5352 ;;		 -> STR_9(3), STR_8(13), STR_7(20), 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5355 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  2   16[COMRAM] PTR unsigned char 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;Total ram usage:        6 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    3
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_Initialize_Screen
  5376 ;;		_Update_Screen
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text16
  5381  002132                     __ptext16:
  5382                           	opt stack 0
  5383  002132                     _strcpy:
  5384                           	opt stack 26
  5385                           
  5386                           ;incstack = 0
  5387  002132  C011  F015         	movff	strcpy@to,strcpy@cp
  5388  002136  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5389  00213A  D005               	goto	l6014
  5390  00213C                     l6012:
  5391  00213C  4A15               	infsnz	strcpy@cp,f,c
  5392  00213E  2A16               	incf	strcpy@cp+1,f,c
  5393  002140  4A13               	infsnz	strcpy@from,f,c
  5394  002142  2A14               	incf	strcpy@from+1,f,c
  5395  002144  D000               	goto	l6014
  5396  002146                     l6014:
  5397  002146  C013  FFF6         	movff	strcpy@from,tblptrl
  5398  00214A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5399  00214E                     	if	0	;tblptru may be non-zero
  5400  00214E                     	endif
  5401  00214E                     	if	0	;tblptru may be non-zero
  5402  00214E                     	endif
  5403  00214E  C015  FFD9         	movff	strcpy@cp,fsr2l
  5404  002152  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5405  002156  0008               	tblrd		*
  5406  002158  CFF5 FFDF          	movff	tablat,indf2
  5407  00215C  50DF               	movf	indf2,w,c
  5408  00215E  A4D8               	btfss	status,2,c
  5409  002160  D7ED               	goto	l6012
  5410                           
  5411                           ;	Return value of _strcpy is never used
  5412  002162  0012               	return		;funcret
  5413  002164                     __end_of_strcpy:
  5414                           	opt stack 0
  5415                           tblptru	equ	0xFF8
  5416                           tblptrh	equ	0xFF7
  5417                           tblptrl	equ	0xFF6
  5418                           tablat	equ	0xFF5
  5419                           prodh	equ	0xFF4
  5420                           prodl	equ	0xFF3
  5421                           intcon	equ	0xFF2
  5422                           intcon2	equ	0xFF1
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _fillScreen *****************
  5435 ;; Defined at:
  5436 ;;		line 620 in file "ST7735_TFT.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  color           2   35[COMRAM] unsigned int 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;		None               void
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;Total ram usage:        2 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    7
  5457 ;; This function calls:
  5458 ;;		_fillRectangle
  5459 ;; This function is called by:
  5460 ;;		_Initialize_Screen
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text17
  5465  0022DA                     __ptext17:
  5466                           	opt stack 0
  5467  0022DA                     _fillScreen:
  5468                           	opt stack 22
  5469                           
  5470                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5471                           
  5472                           ;incstack = 0
  5473  0022DA  0E00               	movlw	0
  5474  0022DC  6E18               	movwf	fillRectangle@y,c
  5475  0022DE  0E80               	movlw	128
  5476  0022E0  6E19               	movwf	fillRectangle@w,c
  5477  0022E2  0EA0               	movlw	160
  5478  0022E4  6E1A               	movwf	fillRectangle@h,c
  5479  0022E6  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5480  0022EA  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5481  0022EE  0E00               	movlw	0
  5482  0022F0  EC10  F00B         	call	_fillRectangle
  5483  0022F4  0012               	return		;funcret
  5484  0022F6                     __end_of_fillScreen:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           intcon2	equ	0xFF1
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           postdec1	equ	0xFE5
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505 ;; *************** function _fillRectangle *****************
  5506 ;; Defined at:
  5507 ;;		line 504 in file "ST7735_TFT.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  x               1    wreg     unsigned char 
  5510 ;;  y               1   23[COMRAM] unsigned char 
  5511 ;;  w               1   24[COMRAM] unsigned char 
  5512 ;;  h               1   25[COMRAM] unsigned char 
  5513 ;;  color           2   26[COMRAM] unsigned int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  x               1   34[COMRAM] unsigned char 
  5516 ;;  lo              1   33[COMRAM] unsigned char 
  5517 ;;  hi              1   32[COMRAM] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5527 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;Total ram usage:       12 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    6
  5534 ;; This function calls:
  5535 ;;		_setAddrWindow
  5536 ;;		_spiwrite
  5537 ;; This function is called by:
  5538 ;;		_fillScreen
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text18
  5543  001620                     __ptext18:
  5544                           	opt stack 0
  5545  001620                     _fillRectangle:
  5546                           	opt stack 22
  5547                           
  5548                           ;incstack = 0
  5549                           ;fillRectangle@x stored from wreg
  5550  001620  6E23               	movwf	fillRectangle@x,c
  5551                           
  5552                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5553                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5554  001622  0E80               	movlw	128
  5555  001624  6023               	cpfslt	fillRectangle@x,c
  5556  001626  D069               	goto	l702
  5557  001628  0E9F               	movlw	159
  5558  00162A  6418               	cpfsgt	fillRectangle@y,c
  5559  00162C  D001               	goto	l5860
  5560                           
  5561                           ;ST7735_TFT.c: 508: return;
  5562  00162E  D065               	goto	l702
  5563  001630                     l5860:
  5564                           
  5565                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5566  001630  0EFF               	movlw	255
  5567  001632  6E1D               	movwf	??_fillRectangle& (0+255),c
  5568  001634  0EFF               	movlw	255
  5569  001636  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5570  001638  5019               	movf	fillRectangle@w,w,c
  5571  00163A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5572  00163E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5573  001640  261F               	addwf	??_fillRectangle+2,f,c
  5574  001642  0E00               	movlw	0
  5575  001644  2220               	addwfc	??_fillRectangle+3,f,c
  5576  001646  501D               	movf	??_fillRectangle,w,c
  5577  001648  261F               	addwf	??_fillRectangle+2,f,c
  5578  00164A  501E               	movf	??_fillRectangle+1,w,c
  5579  00164C  2220               	addwfc	??_fillRectangle+3,f,c
  5580  00164E  BE20               	btfsc	??_fillRectangle+3,7,c
  5581  001650  D00A               	goto	l703
  5582  001652  5020               	movf	??_fillRectangle+3,w,c
  5583  001654  E104               	bnz	u4440
  5584  001656  0E80               	movlw	128
  5585  001658  5C1F               	subwf	??_fillRectangle+2,w,c
  5586  00165A  A0D8               	btfss	status,0,c
  5587  00165C  D004               	goto	l703
  5588  00165E                     u4440:
  5589                           
  5590                           ;ST7735_TFT.c: 510: w = 128 - x;
  5591  00165E  5023               	movf	fillRectangle@x,w,c
  5592  001660  0800               	sublw	0
  5593  001662  0F80               	addlw	128
  5594  001664  6E19               	movwf	fillRectangle@w,c
  5595  001666                     l703:
  5596                           
  5597                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5598  001666  0EFF               	movlw	255
  5599  001668  6E1D               	movwf	??_fillRectangle& (0+255),c
  5600  00166A  0EFF               	movlw	255
  5601  00166C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5602  00166E  501A               	movf	fillRectangle@h,w,c
  5603  001670  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5604  001674  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5605  001676  261F               	addwf	??_fillRectangle+2,f,c
  5606  001678  0E00               	movlw	0
  5607  00167A  2220               	addwfc	??_fillRectangle+3,f,c
  5608  00167C  501D               	movf	??_fillRectangle,w,c
  5609  00167E  261F               	addwf	??_fillRectangle+2,f,c
  5610  001680  501E               	movf	??_fillRectangle+1,w,c
  5611  001682  2220               	addwfc	??_fillRectangle+3,f,c
  5612  001684  BE20               	btfsc	??_fillRectangle+3,7,c
  5613  001686  D00B               	goto	l5866
  5614  001688  5020               	movf	??_fillRectangle+3,w,c
  5615  00168A  E104               	bnz	u4450
  5616  00168C  0EA0               	movlw	160
  5617  00168E  5C1F               	subwf	??_fillRectangle+2,w,c
  5618  001690  A0D8               	btfss	status,0,c
  5619  001692  D005               	goto	l5866
  5620  001694                     u4450:
  5621                           
  5622                           ;ST7735_TFT.c: 512: h = 160 - y;
  5623  001694  5018               	movf	fillRectangle@y,w,c
  5624  001696  0800               	sublw	0
  5625  001698  0FA0               	addlw	160
  5626  00169A  6E1A               	movwf	fillRectangle@h,c
  5627  00169C  D000               	goto	l5866
  5628  00169E                     l5866:
  5629                           
  5630                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5631  00169E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5632  0016A2  5023               	movf	fillRectangle@x,w,c
  5633  0016A4  2419               	addwf	fillRectangle@w,w,c
  5634  0016A6  6E1D               	movwf	??_fillRectangle& (0+255),c
  5635  0016A8  041D               	decf	??_fillRectangle,w,c
  5636  0016AA  6E15               	movwf	setAddrWindow@x1,c
  5637  0016AC  5018               	movf	fillRectangle@y,w,c
  5638  0016AE  241A               	addwf	fillRectangle@h,w,c
  5639  0016B0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5640  0016B2  041E               	decf	??_fillRectangle+1,w,c
  5641  0016B4  6E16               	movwf	setAddrWindow@y1,c
  5642  0016B6  5023               	movf	fillRectangle@x,w,c
  5643  0016B8  EC21  F00F         	call	_setAddrWindow
  5644                           
  5645                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5646  0016BC  501C               	movf	fillRectangle@color+1,w,c
  5647  0016BE  6E21               	movwf	fillRectangle@hi,c
  5648  0016C0  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5649                           
  5650                           ;ST7735_TFT.c: 515: PORTEbits.RE0 = 1;
  5651  0016C4  8084               	bsf	3972,0,c	;volatile
  5652                           
  5653                           ;ST7735_TFT.c: 516: PORTCbits.RC4 = 0;
  5654  0016C6  9882               	bcf	3970,4,c	;volatile
  5655                           
  5656                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5657  0016C8  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5658  0016CC                     l5878:
  5659  0016CC  5018               	movf	fillRectangle@y,w,c
  5660  0016CE  B4D8               	btfsc	status,2,c
  5661  0016D0  D013               	goto	l706
  5662  0016D2  D001               	goto	l705
  5663  0016D4  D011               	goto	l706
  5664  0016D6                     l705:
  5665                           
  5666                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5667  0016D6  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5668  0016DA                     l5882:
  5669  0016DA  5023               	movf	fillRectangle@x,w,c
  5670  0016DC  B4D8               	btfsc	status,2,c
  5671  0016DE  D00A               	goto	l5892
  5672  0016E0  D001               	goto	l5886
  5673  0016E2  D008               	goto	l5892
  5674  0016E4                     l5886:
  5675                           
  5676                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5677  0016E4  5021               	movf	fillRectangle@hi,w,c
  5678  0016E6  ECA9  F011         	call	_spiwrite
  5679                           
  5680                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5681  0016EA  5022               	movf	fillRectangle@lo,w,c
  5682  0016EC  ECA9  F011         	call	_spiwrite
  5683  0016F0  0623               	decf	fillRectangle@x,f,c
  5684  0016F2  D7F3               	goto	l5882
  5685  0016F4                     l5892:
  5686  0016F4  0618               	decf	fillRectangle@y,f,c
  5687  0016F6  D7EA               	goto	l5878
  5688  0016F8                     l706:
  5689                           
  5690                           ;ST7735_TFT.c: 522: }
  5691                           ;ST7735_TFT.c: 523: }
  5692                           ;ST7735_TFT.c: 524: PORTCbits.RC4 = 1;
  5693  0016F8  8882               	bsf	3970,4,c	;volatile
  5694  0016FA                     l702:
  5695  0016FA  0012               	return		;funcret
  5696  0016FC                     __end_of_fillRectangle:
  5697                           	opt stack 0
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           intcon	equ	0xFF2
  5705                           intcon2	equ	0xFF1
  5706                           postinc0	equ	0xFEE
  5707                           wreg	equ	0xFE8
  5708                           postdec1	equ	0xFE5
  5709                           fsr1l	equ	0xFE1
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           postdec2	equ	0xFDD
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _drawtext *****************
  5718 ;; Defined at:
  5719 ;;		line 475 in file "ST7735_TFT.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  x               1    wreg     unsigned char 
  5722 ;;  y               1   56[COMRAM] unsigned char 
  5723 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5724 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5725 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5726 ;;		 -> buffer(33), 
  5727 ;;  color           2   59[COMRAM] unsigned int 
  5728 ;;  bg              2   61[COMRAM] unsigned int 
  5729 ;;  size            1   63[COMRAM] unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  x               1    0[BANK0 ] unsigned char 
  5732 ;;  i               2    3[BANK0 ] unsigned int 
  5733 ;;  textsize        2    1[BANK0 ] unsigned int 
  5734 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5735 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5745 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;Total ram usage:       17 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    9
  5752 ;; This function calls:
  5753 ;;		_drawChar
  5754 ;;		_strlen
  5755 ;; This function is called by:
  5756 ;;		_Initialize_Screen
  5757 ;;		_Update_Screen
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text19
  5762  001164                     __ptext19:
  5763                           	opt stack 0
  5764  001164                     _drawtext:
  5765                           	opt stack 20
  5766                           
  5767                           ;incstack = 0
  5768                           ;drawtext@x stored from wreg
  5769  001164  0100               	movlb	0	; () banked
  5770  001166  6FE5               	movwf	drawtext@x& (0+255),b
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5774                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5775                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5776  001168  C0E5  F0EB         	movff	drawtext@x,drawtext@cursor_x
  5777                           
  5778                           ; BSR set to: 0
  5779  00116C  C039  F0EA         	movff	drawtext@y,drawtext@cursor_y
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5783  001170  C03A  F011         	movff	drawtext@_text,strlen@s
  5784  001174  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5785  001178  EC1E  F010         	call	_strlen	;wreg free
  5786  00117C  C011  F0E6         	movff	?_strlen,drawtext@textsize
  5787  001180  C012  F0E7         	movff	?_strlen+1,drawtext@textsize+1
  5788                           
  5789                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5790  001184  0E00               	movlw	0
  5791  001186  0100               	movlb	0	; () banked
  5792  001188  6FE9               	movwf	(drawtext@i+1)& (0+255),b
  5793  00118A  0E00               	movlw	0
  5794  00118C  6FE8               	movwf	drawtext@i& (0+255),b
  5795  00118E  D064               	goto	l6050
  5796  001190                     l6024:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5800  001190  506F               	movf	_wrap,w,c
  5801  001192  B4D8               	btfsc	status,2,c
  5802  001194  D034               	goto	l6040
  5803                           
  5804                           ; BSR set to: 0
  5805  001196  5040               	movf	drawtext@size,w,c
  5806  001198  0D05               	mullw	5
  5807  00119A  0100               	movlb	0	; () banked
  5808  00119C  51EB               	movf	drawtext@cursor_x& (0+255),w,b
  5809  00119E  6E41               	movwf	??_drawtext& (0+255),c
  5810  0011A0  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5811  0011A2  50F3               	movf	prodl,w,c
  5812  0011A4  2641               	addwf	??_drawtext,f,c
  5813  0011A6  50F4               	movf	prodh,w,c
  5814  0011A8  2242               	addwfc	??_drawtext+1,f,c
  5815  0011AA  BE42               	btfsc	??_drawtext+1,7,c
  5816  0011AC  D028               	goto	l6040
  5817  0011AE  5042               	movf	??_drawtext+1,w,c
  5818  0011B0  E104               	bnz	u4570
  5819  0011B2  0E81               	movlw	129
  5820  0011B4  5C41               	subwf	??_drawtext,w,c
  5821  0011B6  A0D8               	btfss	status,0,c
  5822  0011B8  D022               	goto	l6040
  5823  0011BA                     u4570:
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5827  0011BA  0E00               	movlw	0
  5828  0011BC  0100               	movlb	0	; () banked
  5829  0011BE  6FEB               	movwf	drawtext@cursor_x& (0+255),b
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5833  0011C0  5040               	movf	drawtext@size,w,c
  5834  0011C2  0D07               	mullw	7
  5835  0011C4  50F3               	movf	prodl,w,c
  5836  0011C6  0100               	movlb	0	; () banked
  5837  0011C8  25EA               	addwf	drawtext@cursor_y& (0+255),w,b
  5838  0011CA  0F03               	addlw	3
  5839  0011CC  0100               	movlb	0	; () banked
  5840  0011CE  6FEA               	movwf	drawtext@cursor_y& (0+255),b
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5844  0011D0  0EA0               	movlw	160
  5845  0011D2  0100               	movlb	0	; () banked
  5846  0011D4  65EA               	cpfsgt	drawtext@cursor_y& (0+255),b
  5847  0011D6  D004               	goto	l6036
  5848                           
  5849                           ; BSR set to: 0
  5850  0011D8  0EA0               	movlw	160
  5851  0011DA  0100               	movlb	0	; () banked
  5852  0011DC  6FEA               	movwf	drawtext@cursor_y& (0+255),b
  5853  0011DE  D000               	goto	l6036
  5854  0011E0                     l6036:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5858  0011E0  0100               	movlb	0	; () banked
  5859  0011E2  51E8               	movf	drawtext@i& (0+255),w,b
  5860  0011E4  243A               	addwf	drawtext@_text,w,c
  5861  0011E6  6ED9               	movwf	fsr2l,c
  5862  0011E8  0100               	movlb	0	; () banked
  5863  0011EA  51E9               	movf	(drawtext@i+1)& (0+255),w,b
  5864  0011EC  203B               	addwfc	drawtext@_text+1,w,c
  5865  0011EE  6EDA               	movwf	fsr2h,c
  5866  0011F0  0E20               	movlw	32
  5867  0011F2  18DE               	xorwf	postinc2,w,c
  5868  0011F4  B4D8               	btfsc	status,2,c
  5869  0011F6  D02C               	goto	l6048
  5870  0011F8  D002               	goto	l6040
  5871                           
  5872                           ; BSR set to: 0
  5873  0011FA  D02A               	goto	l6048
  5874                           
  5875                           ; BSR set to: 0
  5876  0011FC  D000               	goto	l6040
  5877  0011FE                     l6040:
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5881  0011FE  C0EA  F02E         	movff	drawtext@cursor_y,drawChar@y
  5882  001202  0100               	movlb	0	; () banked
  5883  001204  51E8               	movf	drawtext@i& (0+255),w,b
  5884  001206  243A               	addwf	drawtext@_text,w,c
  5885  001208  6ED9               	movwf	fsr2l,c
  5886  00120A  0100               	movlb	0	; () banked
  5887  00120C  51E9               	movf	(drawtext@i+1)& (0+255),w,b
  5888  00120E  203B               	addwfc	drawtext@_text+1,w,c
  5889  001210  6EDA               	movwf	fsr2h,c
  5890  001212  50DF               	movf	indf2,w,c
  5891  001214  6E2F               	movwf	drawChar@c,c
  5892  001216  C03C  F030         	movff	drawtext@color,drawChar@color
  5893  00121A  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5894  00121E  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5895  001222  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5896  001226  C040  F034         	movff	drawtext@size,drawChar@size
  5897  00122A  0100               	movlb	0	; () banked
  5898  00122C  51EB               	movf	drawtext@cursor_x& (0+255),w,b
  5899  00122E  EC7F  F007         	call	_drawChar
  5900                           
  5901                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5902  001232  5040               	movf	drawtext@size,w,c
  5903  001234  0D06               	mullw	6
  5904  001236  50F3               	movf	prodl,w,c
  5905  001238  0100               	movlb	0	; () banked
  5906  00123A  25EB               	addwf	drawtext@cursor_x& (0+255),w,b
  5907  00123C  0100               	movlb	0	; () banked
  5908  00123E  6FEB               	movwf	drawtext@cursor_x& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5912  001240  0E80               	movlw	128
  5913  001242  0100               	movlb	0	; () banked
  5914  001244  65EB               	cpfsgt	drawtext@cursor_x& (0+255),b
  5915  001246  D004               	goto	l6048
  5916                           
  5917                           ; BSR set to: 0
  5918  001248  0E80               	movlw	128
  5919  00124A  0100               	movlb	0	; () banked
  5920  00124C  6FEB               	movwf	drawtext@cursor_x& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  00124E  D000               	goto	l6048
  5924  001250                     l6048:
  5925                           
  5926                           ; BSR set to: 0
  5927  001250  0100               	movlb	0	; () banked
  5928  001252  4BE8               	infsnz	drawtext@i& (0+255),f,b
  5929  001254  2BE9               	incf	(drawtext@i+1)& (0+255),f,b
  5930  001256  D000               	goto	l6050
  5931  001258                     l6050:
  5932                           
  5933                           ; BSR set to: 0
  5934  001258  0100               	movlb	0	; () banked
  5935  00125A  51E6               	movf	drawtext@textsize& (0+255),w,b
  5936  00125C  0100               	movlb	0	; () banked
  5937  00125E  5DE8               	subwf	drawtext@i& (0+255),w,b
  5938  001260  0100               	movlb	0	; () banked
  5939  001262  51E7               	movf	(drawtext@textsize+1)& (0+255),w,b
  5940  001264  0100               	movlb	0	; () banked
  5941  001266  59E9               	subwfb	(drawtext@i+1)& (0+255),w,b
  5942  001268  A0D8               	btfss	status,0,c
  5943  00126A  D792               	goto	l6024
  5944                           
  5945                           ; BSR set to: 0
  5946                           
  5947                           ; BSR set to: 0
  5948  00126C  0012               	return		;funcret
  5949  00126E                     __end_of_drawtext:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           postdec1	equ	0xFE5
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _strlen *****************
  5971 ;; Defined at:
  5972 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5975 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5976 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5977 ;;		 -> buffer(33), 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5980 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5981 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5982 ;;		 -> buffer(33), 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  2   16[COMRAM] unsigned int 
  5985 ;; Registers used:
  5986 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;Total ram usage:        6 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    3
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_drawtext
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text20
  6007  00203C                     __ptext20:
  6008                           	opt stack 0
  6009  00203C                     _strlen:
  6010                           	opt stack 25
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;incstack = 0
  6014  00203C  C011  F015         	movff	strlen@s,strlen@cp
  6015  002040  C012  F016         	movff	strlen@s+1,strlen@cp+1
  6016  002044  D003               	goto	l5850
  6017  002046                     l5848:
  6018  002046  4A15               	infsnz	strlen@cp,f,c
  6019  002048  2A16               	incf	strlen@cp+1,f,c
  6020  00204A  D000               	goto	l5850
  6021  00204C                     l5850:
  6022  00204C  C015  FFD9         	movff	strlen@cp,fsr2l
  6023  002050  C016  FFDA         	movff	strlen@cp+1,fsr2h
  6024  002054  50DF               	movf	indf2,w,c
  6025  002056  A4D8               	btfss	status,2,c
  6026  002058  D7F6               	goto	l5848
  6027  00205A  C011  F013         	movff	strlen@s,??_strlen
  6028  00205E  C012  F014         	movff	strlen@s+1,??_strlen+1
  6029  002062  1E13               	comf	??_strlen,f,c
  6030  002064  1E14               	comf	??_strlen+1,f,c
  6031  002066  4A13               	infsnz	??_strlen,f,c
  6032  002068  2A14               	incf	??_strlen+1,f,c
  6033  00206A  5015               	movf	strlen@cp,w,c
  6034  00206C  2413               	addwf	??_strlen,w,c
  6035  00206E  6E11               	movwf	?_strlen,c
  6036  002070  5016               	movf	strlen@cp+1,w,c
  6037  002072  2014               	addwfc	??_strlen+1,w,c
  6038  002074  6E12               	movwf	?_strlen+1,c
  6039  002076  D000               	goto	l1430
  6040  002078                     l1430:
  6041  002078  0012               	return		;funcret
  6042  00207A                     __end_of_strlen:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon2	equ	0xFF1
  6052                           postinc0	equ	0xFEE
  6053                           wreg	equ	0xFE8
  6054                           postdec1	equ	0xFE5
  6055                           fsr1l	equ	0xFE1
  6056                           indf2	equ	0xFDF
  6057                           postinc2	equ	0xFDE
  6058                           postdec2	equ	0xFDD
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063 ;; *************** function _drawChar *****************
  6064 ;; Defined at:
  6065 ;;		line 448 in file "ST7735_TFT.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  x               1    wreg     unsigned char 
  6068 ;;  y               1   45[COMRAM] unsigned char 
  6069 ;;  c               1   46[COMRAM] unsigned char 
  6070 ;;  color           2   47[COMRAM] unsigned int 
  6071 ;;  bg              2   49[COMRAM] unsigned int 
  6072 ;;  size            1   51[COMRAM] unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  x               1   53[COMRAM] unsigned char 
  6075 ;;  line            1   52[COMRAM] unsigned char 
  6076 ;;  i               1   55[COMRAM] unsigned char 
  6077 ;;  j               1   54[COMRAM] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;		None               void
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6087 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;Total ram usage:       11 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    8
  6094 ;; This function calls:
  6095 ;;		___wmul
  6096 ;;		_drawPixel
  6097 ;;		_fillRect
  6098 ;; This function is called by:
  6099 ;;		_drawtext
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text21
  6104  000EFE                     __ptext21:
  6105                           	opt stack 0
  6106  000EFE                     _drawChar:
  6107                           	opt stack 20
  6108                           
  6109                           ;incstack = 0
  6110                           ;drawChar@x stored from wreg
  6111  000EFE  6E36               	movwf	drawChar@x,c
  6112                           
  6113                           ;ST7735_TFT.c: 450: char i, j;
  6114                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6115  000F00  0E80               	movlw	128
  6116  000F02  6036               	cpfslt	drawChar@x,c
  6117  000F04  D0A6               	goto	l665
  6118  000F06  0E9F               	movlw	159
  6119  000F08  642E               	cpfsgt	drawChar@y,c
  6120  000F0A  D001               	goto	l5796
  6121                           
  6122                           ;ST7735_TFT.c: 452: return;
  6123  000F0C  D0A2               	goto	l665
  6124  000F0E                     l5796:
  6125                           
  6126                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6127  000F0E  5034               	movf	drawChar@size,w,c
  6128  000F10  A4D8               	btfss	status,2,c
  6129  000F12  D003               	goto	l5800
  6130  000F14  0E01               	movlw	1
  6131  000F16  6E34               	movwf	drawChar@size,c
  6132  000F18  D000               	goto	l5800
  6133  000F1A                     l5800:
  6134                           
  6135                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6136  000F1A  0E1F               	movlw	31
  6137  000F1C  642F               	cpfsgt	drawChar@c,c
  6138  000F1E  D004               	goto	l5804
  6139  000F20  0E7E               	movlw	126
  6140  000F22  642F               	cpfsgt	drawChar@c,c
  6141  000F24  D003               	goto	l667
  6142  000F26  D000               	goto	l5804
  6143  000F28                     l5804:
  6144                           
  6145                           ;ST7735_TFT.c: 455: c = '?';
  6146  000F28  0E3F               	movlw	63
  6147  000F2A  6E2F               	movwf	drawChar@c,c
  6148  000F2C                     l667:
  6149                           
  6150                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6151  000F2C  0E00               	movlw	0
  6152  000F2E  6E38               	movwf	drawChar@i,c
  6153  000F30                     l5806:
  6154  000F30  0E04               	movlw	4
  6155  000F32  6438               	cpfsgt	drawChar@i,c
  6156  000F34  D001               	goto	l5810
  6157  000F36  D08D               	goto	l665
  6158  000F38                     l5810:
  6159                           
  6160                           ;ST7735_TFT.c: 457: unsigned char line;
  6161                           ;ST7735_TFT.c: 458: if(c < 'S')
  6162  000F38  0E53               	movlw	83
  6163  000F3A  602F               	cpfslt	drawChar@c,c
  6164  000F3C  D015               	goto	l5814
  6165                           
  6166                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6167  000F3E  0EE0               	movlw	224
  6168  000F40  242F               	addwf	drawChar@c,w,c
  6169  000F42  6E11               	movwf	___wmul@multiplier,c
  6170  000F44  6A12               	clrf	___wmul@multiplier+1,c
  6171  000F46  0EFF               	movlw	255
  6172  000F48  2212               	addwfc	___wmul@multiplier+1,f,c
  6173  000F4A  0E00               	movlw	0
  6174  000F4C  6E14               	movwf	___wmul@multiplicand+1,c
  6175  000F4E  0E05               	movlw	5
  6176  000F50  6E13               	movwf	___wmul@multiplicand,c
  6177  000F52  ECDF  F010         	call	___wmul	;wreg free
  6178  000F56  5038               	movf	drawChar@i,w,c
  6179  000F58  2611               	addwf	?___wmul,f,c
  6180  000F5A  0E00               	movlw	0
  6181  000F5C  2212               	addwfc	?___wmul+1,f,c
  6182  000F5E  0E41               	movlw	low _font
  6183  000F60  2411               	addwf	?___wmul,w,c
  6184  000F62  6EF6               	movwf	tblptrl,c
  6185  000F64  0EFD               	movlw	high _font
  6186  000F66  D014               	goto	L4
  6187  000F68                     l5814:
  6188                           
  6189                           ;ST7735_TFT.c: 460: else
  6190                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6191  000F68  0EAD               	movlw	173
  6192  000F6A  242F               	addwf	drawChar@c,w,c
  6193  000F6C  6E11               	movwf	___wmul@multiplier,c
  6194  000F6E  6A12               	clrf	___wmul@multiplier+1,c
  6195  000F70  0EFF               	movlw	255
  6196  000F72  2212               	addwfc	___wmul@multiplier+1,f,c
  6197  000F74  0E00               	movlw	0
  6198  000F76  6E14               	movwf	___wmul@multiplicand+1,c
  6199  000F78  0E05               	movlw	5
  6200  000F7A  6E13               	movwf	___wmul@multiplicand,c
  6201  000F7C  ECDF  F010         	call	___wmul	;wreg free
  6202  000F80  5038               	movf	drawChar@i,w,c
  6203  000F82  2611               	addwf	?___wmul,f,c
  6204  000F84  0E00               	movlw	0
  6205  000F86  2212               	addwfc	?___wmul+1,f,c
  6206  000F88  0E40               	movlw	low _font2
  6207  000F8A  2411               	addwf	?___wmul,w,c
  6208  000F8C  6EF6               	movwf	tblptrl,c
  6209  000F8E  0EFE               	movlw	high _font2
  6210  000F90                     L4:
  6211  000F90  2012               	addwfc	?___wmul+1,w,c
  6212  000F92  6EF7               	movwf	tblptrh,c
  6213  000F94                     	if	0	;There are less than 3 active tblptr bytes
  6214  000F94                     	endif
  6215  000F94  0008               	tblrd		*
  6216  000F96  CFF5 F035          	movff	tablat,drawChar@line
  6217  000F9A  D000               	goto	l5816
  6218  000F9C                     l5816:
  6219                           
  6220                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6221  000F9C  0E00               	movlw	0
  6222  000F9E  6E37               	movwf	drawChar@j,c
  6223  000FA0                     l5818:
  6224  000FA0  0E06               	movlw	6
  6225  000FA2  6437               	cpfsgt	drawChar@j,c
  6226  000FA4  D001               	goto	l674
  6227  000FA6  D053               	goto	l5842
  6228  000FA8                     l674:
  6229                           
  6230                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6231  000FA8  A035               	btfss	drawChar@line,0,c
  6232  000FAA  D023               	goto	l5828
  6233                           
  6234                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6235  000FAC  0434               	decf	drawChar@size,w,c
  6236  000FAE  A4D8               	btfss	status,2,c
  6237  000FB0  D00C               	goto	l5826
  6238  000FB2  502E               	movf	drawChar@y,w,c
  6239  000FB4  2437               	addwf	drawChar@j,w,c
  6240  000FB6  6E18               	movwf	drawPixel@y,c
  6241  000FB8  C030  F019         	movff	drawChar@color,drawPixel@color
  6242  000FBC  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6243  000FC0  5036               	movf	drawChar@x,w,c
  6244  000FC2  2438               	addwf	drawChar@i,w,c
  6245  000FC4  ECB2  F010         	call	_drawPixel
  6246  000FC8  D03E               	goto	l5836
  6247  000FCA                     l5826:
  6248                           
  6249                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6250  000FCA  5037               	movf	drawChar@j,w,c
  6251  000FCC  0234               	mulwf	drawChar@size,c
  6252  000FCE  50F3               	movf	prodl,w,c
  6253  000FD0  242E               	addwf	drawChar@y,w,c
  6254  000FD2  6E23               	movwf	fillRect@y,c
  6255  000FD4  C034  F024         	movff	drawChar@size,fillRect@w
  6256  000FD8  C034  F025         	movff	drawChar@size,fillRect@h
  6257  000FDC  C030  F026         	movff	drawChar@color,fillRect@color
  6258  000FE0  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6259  000FE4  5038               	movf	drawChar@i,w,c
  6260  000FE6  0234               	mulwf	drawChar@size,c
  6261  000FE8  50F3               	movf	prodl,w,c
  6262  000FEA  2436               	addwf	drawChar@x,w,c
  6263  000FEC  EC94  F00F         	call	_fillRect
  6264                           
  6265                           ;ST7735_TFT.c: 466: }
  6266  000FF0  D02A               	goto	l5836
  6267  000FF2                     l5828:
  6268                           
  6269                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6270  000FF2  5030               	movf	drawChar@color,w,c
  6271  000FF4  1832               	xorwf	drawChar@bg,w,c
  6272  000FF6  E104               	bnz	u4370
  6273  000FF8  5031               	movf	drawChar@color+1,w,c
  6274  000FFA  1833               	xorwf	drawChar@bg+1,w,c
  6275  000FFC  B4D8               	btfsc	status,2,c
  6276  000FFE  D023               	goto	l5836
  6277  001000                     u4370:
  6278                           
  6279                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6280  001000  0434               	decf	drawChar@size,w,c
  6281  001002  A4D8               	btfss	status,2,c
  6282  001004  D00C               	goto	l5834
  6283  001006  502E               	movf	drawChar@y,w,c
  6284  001008  2437               	addwf	drawChar@j,w,c
  6285  00100A  6E18               	movwf	drawPixel@y,c
  6286  00100C  C032  F019         	movff	drawChar@bg,drawPixel@color
  6287  001010  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6288  001014  5036               	movf	drawChar@x,w,c
  6289  001016  2438               	addwf	drawChar@i,w,c
  6290  001018  ECB2  F010         	call	_drawPixel
  6291  00101C  D014               	goto	l5836
  6292  00101E                     l5834:
  6293                           
  6294                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6295  00101E  5037               	movf	drawChar@j,w,c
  6296  001020  0234               	mulwf	drawChar@size,c
  6297  001022  50F3               	movf	prodl,w,c
  6298  001024  242E               	addwf	drawChar@y,w,c
  6299  001026  6E23               	movwf	fillRect@y,c
  6300  001028  C034  F024         	movff	drawChar@size,fillRect@w
  6301  00102C  C034  F025         	movff	drawChar@size,fillRect@h
  6302  001030  C032  F026         	movff	drawChar@bg,fillRect@color
  6303  001034  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6304  001038  5038               	movf	drawChar@i,w,c
  6305  00103A  0234               	mulwf	drawChar@size,c
  6306  00103C  50F3               	movf	prodl,w,c
  6307  00103E  2436               	addwf	drawChar@x,w,c
  6308  001040  EC94  F00F         	call	_fillRect
  6309  001044  D000               	goto	l5836
  6310  001046                     l5836:
  6311  001046  2A37               	incf	drawChar@j,f,c
  6312  001048  90D8               	bcf	status,0,c
  6313  00104A  3235               	rrcf	drawChar@line,f,c
  6314  00104C  D7A9               	goto	l5818
  6315  00104E                     l5842:
  6316  00104E  2A38               	incf	drawChar@i,f,c
  6317  001050  D76F               	goto	l5806
  6318  001052                     l665:
  6319  001052  0012               	return		;funcret
  6320  001054                     __end_of_drawChar:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           intcon2	equ	0xFF1
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function _fillRect *****************
  6342 ;; Defined at:
  6343 ;;		line 438 in file "ST7735_TFT.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  x               1    wreg     unsigned char 
  6346 ;;  y               1   34[COMRAM] unsigned char 
  6347 ;;  w               1   35[COMRAM] unsigned char 
  6348 ;;  h               1   36[COMRAM] unsigned char 
  6349 ;;  color           2   37[COMRAM] unsigned int 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  x               1   42[COMRAM] unsigned char 
  6352 ;;  i               2   43[COMRAM] int 
  6353 ;; Return value:  Size  Location     Type
  6354 ;;		None               void
  6355 ;; Registers used:
  6356 ;;		wreg, status,2, status,0, cstack
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6362 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;Total ram usage:       11 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    7
  6369 ;; This function calls:
  6370 ;;		_drawFastVLine
  6371 ;; This function is called by:
  6372 ;;		_drawChar
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text22
  6377  001F28                     __ptext22:
  6378                           	opt stack 0
  6379  001F28                     _fillRect:
  6380                           	opt stack 20
  6381                           
  6382                           ;incstack = 0
  6383                           ;fillRect@x stored from wreg
  6384  001F28  6E2B               	movwf	fillRect@x,c
  6385                           
  6386                           ;ST7735_TFT.c: 440: signed int i;
  6387                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6388  001F2A  C02B  F02C         	movff	fillRect@x,fillRect@i
  6389  001F2E  6A2D               	clrf	fillRect@i+1,c
  6390  001F30  D00E               	goto	l5446
  6391  001F32                     l5442:
  6392                           
  6393                           ;ST7735_TFT.c: 443: {
  6394                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6395  001F32  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6396  001F36  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6397  001F3A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6398  001F3E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6399  001F42  502C               	movf	fillRect@i,w,c
  6400  001F44  EC87  F00C         	call	_drawFastVLine
  6401  001F48  4A2C               	infsnz	fillRect@i,f,c
  6402  001F4A  2A2D               	incf	fillRect@i+1,f,c
  6403  001F4C  D000               	goto	l5446
  6404  001F4E                     l5446:
  6405  001F4E  5024               	movf	fillRect@w,w,c
  6406  001F50  C02B  F028         	movff	fillRect@x,??_fillRect
  6407  001F54  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6408  001F56  2628               	addwf	??_fillRect,f,c
  6409  001F58  0E00               	movlw	0
  6410  001F5A  2229               	addwfc	??_fillRect+1,f,c
  6411  001F5C  5028               	movf	??_fillRect,w,c
  6412  001F5E  5C2C               	subwf	fillRect@i,w,c
  6413  001F60  502D               	movf	fillRect@i+1,w,c
  6414  001F62  0A80               	xorlw	128
  6415  001F64  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6416  001F66  5029               	movf	??_fillRect+1,w,c
  6417  001F68  0A80               	xorlw	128
  6418  001F6A  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6419  001F6C  A0D8               	btfss	status,0,c
  6420  001F6E  D7E1               	goto	l5442
  6421  001F70  0012               	return		;funcret
  6422  001F72                     __end_of_fillRect:
  6423                           	opt stack 0
  6424                           tblptru	equ	0xFF8
  6425                           tblptrh	equ	0xFF7
  6426                           tblptrl	equ	0xFF6
  6427                           tablat	equ	0xFF5
  6428                           prodh	equ	0xFF4
  6429                           prodl	equ	0xFF3
  6430                           intcon	equ	0xFF2
  6431                           intcon2	equ	0xFF1
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           postdec1	equ	0xFE5
  6435                           fsr1l	equ	0xFE1
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           postdec2	equ	0xFDD
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;; *************** function _drawFastVLine *****************
  6444 ;; Defined at:
  6445 ;;		line 417 in file "ST7735_TFT.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  x               1    wreg     unsigned char 
  6448 ;;  y               1   23[COMRAM] unsigned char 
  6449 ;;  h               1   24[COMRAM] unsigned char 
  6450 ;;  color           2   25[COMRAM] unsigned int 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  x               1   33[COMRAM] unsigned char 
  6453 ;;  lo              1   32[COMRAM] unsigned char 
  6454 ;;  hi              1   31[COMRAM] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;		None               void
  6457 ;; Registers used:
  6458 ;;		wreg, status,2, status,0, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;Total ram usage:       11 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    6
  6471 ;; This function calls:
  6472 ;;		_setAddrWindow
  6473 ;;		_spiwrite
  6474 ;; This function is called by:
  6475 ;;		_fillRect
  6476 ;;		_fillCircleHelper
  6477 ;;		_fillCircle
  6478 ;;		_drawRect
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text23
  6483  00190E                     __ptext23:
  6484                           	opt stack 0
  6485  00190E                     _drawFastVLine:
  6486                           	opt stack 20
  6487                           
  6488                           ;incstack = 0
  6489                           ;drawFastVLine@x stored from wreg
  6490  00190E  6E22               	movwf	drawFastVLine@x,c
  6491                           
  6492                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6493                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6494  001910  0E80               	movlw	128
  6495  001912  6022               	cpfslt	drawFastVLine@x,c
  6496  001914  D03F               	goto	l649
  6497  001916  0E9F               	movlw	159
  6498  001918  6418               	cpfsgt	drawFastVLine@y,c
  6499  00191A  D001               	goto	l5316
  6500                           
  6501                           ;ST7735_TFT.c: 421: return;
  6502  00191C  D03B               	goto	l649
  6503  00191E                     l5316:
  6504                           
  6505                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6506  00191E  0EFF               	movlw	255
  6507  001920  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6508  001922  0EFF               	movlw	255
  6509  001924  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6510  001926  5019               	movf	drawFastVLine@h,w,c
  6511  001928  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6512  00192C  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6513  00192E  261E               	addwf	??_drawFastVLine+2,f,c
  6514  001930  0E00               	movlw	0
  6515  001932  221F               	addwfc	??_drawFastVLine+3,f,c
  6516  001934  501C               	movf	??_drawFastVLine,w,c
  6517  001936  261E               	addwf	??_drawFastVLine+2,f,c
  6518  001938  501D               	movf	??_drawFastVLine+1,w,c
  6519  00193A  221F               	addwfc	??_drawFastVLine+3,f,c
  6520  00193C  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6521  00193E  D00B               	goto	l5320
  6522  001940  501F               	movf	??_drawFastVLine+3,w,c
  6523  001942  E104               	bnz	u3780
  6524  001944  0EA0               	movlw	160
  6525  001946  5C1E               	subwf	??_drawFastVLine+2,w,c
  6526  001948  A0D8               	btfss	status,0,c
  6527  00194A  D005               	goto	l5320
  6528  00194C                     u3780:
  6529                           
  6530                           ;ST7735_TFT.c: 423: h = 160 - y;
  6531  00194C  5018               	movf	drawFastVLine@y,w,c
  6532  00194E  0800               	sublw	0
  6533  001950  0FA0               	addlw	160
  6534  001952  6E19               	movwf	drawFastVLine@h,c
  6535  001954  D000               	goto	l5320
  6536  001956                     l5320:
  6537                           
  6538                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6539  001956  501B               	movf	drawFastVLine@color+1,w,c
  6540  001958  6E20               	movwf	drawFastVLine@hi,c
  6541  00195A  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6542                           
  6543                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6544  00195E  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6545  001962  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6546  001966  5018               	movf	drawFastVLine@y,w,c
  6547  001968  2419               	addwf	drawFastVLine@h,w,c
  6548  00196A  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6549  00196C  041C               	decf	??_drawFastVLine,w,c
  6550  00196E  6E16               	movwf	setAddrWindow@y1,c
  6551  001970  5022               	movf	drawFastVLine@x,w,c
  6552  001972  EC21  F00F         	call	_setAddrWindow
  6553                           
  6554                           ;ST7735_TFT.c: 426: PORTEbits.RE0 = 1;
  6555  001976  8084               	bsf	3972,0,c	;volatile
  6556                           
  6557                           ;ST7735_TFT.c: 427: PORTCbits.RC4 = 0;
  6558  001978  9882               	bcf	3970,4,c	;volatile
  6559                           
  6560                           ;ST7735_TFT.c: 429: while (h--) {
  6561  00197A  D007               	goto	l5332
  6562  00197C                     l5330:
  6563                           
  6564                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6565  00197C  5020               	movf	drawFastVLine@hi,w,c
  6566  00197E  ECA9  F011         	call	_spiwrite
  6567                           
  6568                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6569  001982  5021               	movf	drawFastVLine@lo,w,c
  6570  001984  ECA9  F011         	call	_spiwrite
  6571  001988  D000               	goto	l5332
  6572  00198A                     l5332:
  6573  00198A  0619               	decf	drawFastVLine@h,f,c
  6574  00198C  2819               	incf	drawFastVLine@h,w,c
  6575  00198E  A4D8               	btfss	status,2,c
  6576  001990  D7F5               	goto	l5330
  6577                           
  6578                           ;ST7735_TFT.c: 432: }
  6579                           ;ST7735_TFT.c: 433: PORTCbits.RC4 = 1;
  6580  001992  8882               	bsf	3970,4,c	;volatile
  6581  001994                     l649:
  6582  001994  0012               	return		;funcret
  6583  001996                     __end_of_drawFastVLine:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           postinc0	equ	0xFEE
  6594                           wreg	equ	0xFE8
  6595                           postdec1	equ	0xFE5
  6596                           fsr1l	equ	0xFE1
  6597                           indf2	equ	0xFDF
  6598                           postinc2	equ	0xFDE
  6599                           postdec2	equ	0xFDD
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _drawCircle *****************
  6605 ;; Defined at:
  6606 ;;		line 529 in file "ST7735_TFT.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  x0              2   27[COMRAM] int 
  6609 ;;  y0              2   29[COMRAM] int 
  6610 ;;  r               2   31[COMRAM] int 
  6611 ;;  color           2   33[COMRAM] unsigned int 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;  y               2   45[COMRAM] int 
  6614 ;;  x               2   43[COMRAM] int 
  6615 ;;  f               2   41[COMRAM] int 
  6616 ;;  ddF_y           2   39[COMRAM] int 
  6617 ;;  ddF_x           2   37[COMRAM] int 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;		None               void
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:       20 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    7
  6634 ;; This function calls:
  6635 ;;		_drawPixel
  6636 ;; This function is called by:
  6637 ;;		_Initialize_Screen
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text24
  6642  000BE4                     __ptext24:
  6643                           	opt stack 0
  6644  000BE4                     _drawCircle:
  6645                           	opt stack 22
  6646                           
  6647                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6648                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6649                           
  6650                           ;incstack = 0
  6651  000BE4  C020  F024         	movff	drawCircle@r,??_drawCircle
  6652  000BE8  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6653  000BEC  1E24               	comf	??_drawCircle,f,c
  6654  000BEE  1E25               	comf	??_drawCircle+1,f,c
  6655  000BF0  4A24               	infsnz	??_drawCircle,f,c
  6656  000BF2  2A25               	incf	??_drawCircle+1,f,c
  6657  000BF4  0E01               	movlw	1
  6658  000BF6  2424               	addwf	??_drawCircle,w,c
  6659  000BF8  6E2A               	movwf	drawCircle@f,c
  6660  000BFA  0E00               	movlw	0
  6661  000BFC  2025               	addwfc	??_drawCircle+1,w,c
  6662  000BFE  6E2B               	movwf	drawCircle@f+1,c
  6663  000C00  0E00               	movlw	0
  6664  000C02  6E27               	movwf	drawCircle@ddF_x+1,c
  6665  000C04  0E01               	movlw	1
  6666  000C06  6E26               	movwf	drawCircle@ddF_x,c
  6667  000C08  C020  F024         	movff	drawCircle@r,??_drawCircle
  6668  000C0C  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6669  000C10  90D8               	bcf	status,0,c
  6670  000C12  3624               	rlcf	??_drawCircle,f,c
  6671  000C14  3625               	rlcf	??_drawCircle+1,f,c
  6672  000C16  1E24               	comf	??_drawCircle,f,c
  6673  000C18  1E25               	comf	??_drawCircle+1,f,c
  6674  000C1A  4A24               	infsnz	??_drawCircle,f,c
  6675  000C1C  2A25               	incf	??_drawCircle+1,f,c
  6676  000C1E  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6677  000C22  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6678  000C26  0E00               	movlw	0
  6679  000C28  6E2D               	movwf	drawCircle@x+1,c
  6680  000C2A  0E00               	movlw	0
  6681  000C2C  6E2C               	movwf	drawCircle@x,c
  6682  000C2E  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6683  000C32  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6684                           
  6685                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6686  000C36  501E               	movf	drawCircle@y0,w,c
  6687  000C38  2420               	addwf	drawCircle@r,w,c
  6688  000C3A  6E18               	movwf	drawPixel@y,c
  6689  000C3C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6690  000C40  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6691  000C44  501C               	movf	drawCircle@x0,w,c
  6692  000C46  ECB2  F010         	call	_drawPixel
  6693                           
  6694                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6695  000C4A  5020               	movf	drawCircle@r,w,c
  6696  000C4C  0800               	sublw	0
  6697  000C4E  241E               	addwf	drawCircle@y0,w,c
  6698  000C50  6E18               	movwf	drawPixel@y,c
  6699  000C52  C022  F019         	movff	drawCircle@color,drawPixel@color
  6700  000C56  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6701  000C5A  501C               	movf	drawCircle@x0,w,c
  6702  000C5C  ECB2  F010         	call	_drawPixel
  6703                           
  6704                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6705  000C60  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6706  000C64  C022  F019         	movff	drawCircle@color,drawPixel@color
  6707  000C68  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6708  000C6C  501C               	movf	drawCircle@x0,w,c
  6709  000C6E  2420               	addwf	drawCircle@r,w,c
  6710  000C70  ECB2  F010         	call	_drawPixel
  6711                           
  6712                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6713  000C74  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6714  000C78  C022  F019         	movff	drawCircle@color,drawPixel@color
  6715  000C7C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6716  000C80  5020               	movf	drawCircle@r,w,c
  6717  000C82  0800               	sublw	0
  6718  000C84  241C               	addwf	drawCircle@x0,w,c
  6719  000C86  ECB2  F010         	call	_drawPixel
  6720                           
  6721                           ;ST7735_TFT.c: 537: while (x < y) {
  6722  000C8A  D078               	goto	l6098
  6723  000C8C                     l6070:
  6724                           
  6725                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6726  000C8C  BE2B               	btfsc	drawCircle@f+1,7,c
  6727  000C8E  D00B               	goto	l713
  6728                           
  6729                           ;ST7735_TFT.c: 539: y--;
  6730  000C90  062E               	decf	drawCircle@y,f,c
  6731  000C92  A0D8               	btfss	status,0,c
  6732  000C94  062F               	decf	drawCircle@y+1,f,c
  6733                           
  6734                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6735  000C96  0E02               	movlw	2
  6736  000C98  2628               	addwf	drawCircle@ddF_y,f,c
  6737  000C9A  0E00               	movlw	0
  6738  000C9C  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6739                           
  6740                           ;ST7735_TFT.c: 541: f += ddF_y;
  6741  000C9E  5028               	movf	drawCircle@ddF_y,w,c
  6742  000CA0  262A               	addwf	drawCircle@f,f,c
  6743  000CA2  5029               	movf	drawCircle@ddF_y+1,w,c
  6744  000CA4  222B               	addwfc	drawCircle@f+1,f,c
  6745  000CA6                     l713:
  6746                           
  6747                           ;ST7735_TFT.c: 542: }
  6748                           ;ST7735_TFT.c: 543: x++;
  6749  000CA6  4A2C               	infsnz	drawCircle@x,f,c
  6750  000CA8  2A2D               	incf	drawCircle@x+1,f,c
  6751                           
  6752                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6753  000CAA  0E02               	movlw	2
  6754  000CAC  2626               	addwf	drawCircle@ddF_x,f,c
  6755  000CAE  0E00               	movlw	0
  6756  000CB0  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6757                           
  6758                           ;ST7735_TFT.c: 545: f += ddF_x;
  6759  000CB2  5026               	movf	drawCircle@ddF_x,w,c
  6760  000CB4  262A               	addwf	drawCircle@f,f,c
  6761  000CB6  5027               	movf	drawCircle@ddF_x+1,w,c
  6762  000CB8  222B               	addwfc	drawCircle@f+1,f,c
  6763                           
  6764                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6765  000CBA  501E               	movf	drawCircle@y0,w,c
  6766  000CBC  242E               	addwf	drawCircle@y,w,c
  6767  000CBE  6E18               	movwf	drawPixel@y,c
  6768  000CC0  C022  F019         	movff	drawCircle@color,drawPixel@color
  6769  000CC4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6770  000CC8  501C               	movf	drawCircle@x0,w,c
  6771  000CCA  242C               	addwf	drawCircle@x,w,c
  6772  000CCC  ECB2  F010         	call	_drawPixel
  6773                           
  6774                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6775  000CD0  501E               	movf	drawCircle@y0,w,c
  6776  000CD2  242E               	addwf	drawCircle@y,w,c
  6777  000CD4  6E18               	movwf	drawPixel@y,c
  6778  000CD6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6779  000CDA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6780  000CDE  502C               	movf	drawCircle@x,w,c
  6781  000CE0  0800               	sublw	0
  6782  000CE2  241C               	addwf	drawCircle@x0,w,c
  6783  000CE4  ECB2  F010         	call	_drawPixel
  6784                           
  6785                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6786  000CE8  502E               	movf	drawCircle@y,w,c
  6787  000CEA  0800               	sublw	0
  6788  000CEC  241E               	addwf	drawCircle@y0,w,c
  6789  000CEE  6E18               	movwf	drawPixel@y,c
  6790  000CF0  C022  F019         	movff	drawCircle@color,drawPixel@color
  6791  000CF4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6792  000CF8  501C               	movf	drawCircle@x0,w,c
  6793  000CFA  242C               	addwf	drawCircle@x,w,c
  6794  000CFC  ECB2  F010         	call	_drawPixel
  6795                           
  6796                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6797  000D00  502E               	movf	drawCircle@y,w,c
  6798  000D02  0800               	sublw	0
  6799  000D04  241E               	addwf	drawCircle@y0,w,c
  6800  000D06  6E18               	movwf	drawPixel@y,c
  6801  000D08  C022  F019         	movff	drawCircle@color,drawPixel@color
  6802  000D0C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6803  000D10  502C               	movf	drawCircle@x,w,c
  6804  000D12  0800               	sublw	0
  6805  000D14  241C               	addwf	drawCircle@x0,w,c
  6806  000D16  ECB2  F010         	call	_drawPixel
  6807                           
  6808                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6809  000D1A  501E               	movf	drawCircle@y0,w,c
  6810  000D1C  242C               	addwf	drawCircle@x,w,c
  6811  000D1E  6E18               	movwf	drawPixel@y,c
  6812  000D20  C022  F019         	movff	drawCircle@color,drawPixel@color
  6813  000D24  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6814  000D28  501C               	movf	drawCircle@x0,w,c
  6815  000D2A  242E               	addwf	drawCircle@y,w,c
  6816  000D2C  ECB2  F010         	call	_drawPixel
  6817                           
  6818                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6819  000D30  501E               	movf	drawCircle@y0,w,c
  6820  000D32  242C               	addwf	drawCircle@x,w,c
  6821  000D34  6E18               	movwf	drawPixel@y,c
  6822  000D36  C022  F019         	movff	drawCircle@color,drawPixel@color
  6823  000D3A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6824  000D3E  502E               	movf	drawCircle@y,w,c
  6825  000D40  0800               	sublw	0
  6826  000D42  241C               	addwf	drawCircle@x0,w,c
  6827  000D44  ECB2  F010         	call	_drawPixel
  6828                           
  6829                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6830  000D48  502C               	movf	drawCircle@x,w,c
  6831  000D4A  0800               	sublw	0
  6832  000D4C  241E               	addwf	drawCircle@y0,w,c
  6833  000D4E  6E18               	movwf	drawPixel@y,c
  6834  000D50  C022  F019         	movff	drawCircle@color,drawPixel@color
  6835  000D54  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6836  000D58  501C               	movf	drawCircle@x0,w,c
  6837  000D5A  242E               	addwf	drawCircle@y,w,c
  6838  000D5C  ECB2  F010         	call	_drawPixel
  6839                           
  6840                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6841  000D60  502C               	movf	drawCircle@x,w,c
  6842  000D62  0800               	sublw	0
  6843  000D64  241E               	addwf	drawCircle@y0,w,c
  6844  000D66  6E18               	movwf	drawPixel@y,c
  6845  000D68  C022  F019         	movff	drawCircle@color,drawPixel@color
  6846  000D6C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6847  000D70  502E               	movf	drawCircle@y,w,c
  6848  000D72  0800               	sublw	0
  6849  000D74  241C               	addwf	drawCircle@x0,w,c
  6850  000D76  ECB2  F010         	call	_drawPixel
  6851  000D7A  D000               	goto	l6098
  6852  000D7C                     l6098:
  6853  000D7C  502E               	movf	drawCircle@y,w,c
  6854  000D7E  5C2C               	subwf	drawCircle@x,w,c
  6855  000D80  502D               	movf	drawCircle@x+1,w,c
  6856  000D82  0A80               	xorlw	128
  6857  000D84  6E24               	movwf	??_drawCircle& (0+255),c
  6858  000D86  502F               	movf	drawCircle@y+1,w,c
  6859  000D88  0A80               	xorlw	128
  6860  000D8A  5824               	subwfb	??_drawCircle& (0+255),w,c
  6861  000D8C  A0D8               	btfss	status,0,c
  6862  000D8E  D77E               	goto	l6070
  6863  000D90  0012               	return		;funcret
  6864  000D92                     __end_of_drawCircle:
  6865                           	opt stack 0
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           intcon	equ	0xFF2
  6873                           intcon2	equ	0xFF1
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           postdec1	equ	0xFE5
  6877                           fsr1l	equ	0xFE1
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _drawPixel *****************
  6886 ;; Defined at:
  6887 ;;		line 408 in file "ST7735_TFT.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  x               1    wreg     unsigned char 
  6890 ;;  y               1   23[COMRAM] unsigned char 
  6891 ;;  color           2   24[COMRAM] unsigned int 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  x               1   26[COMRAM] unsigned char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;		None               void
  6896 ;; Registers used:
  6897 ;;		wreg, status,2, status,0, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6903 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;Total ram usage:        4 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    6
  6910 ;; This function calls:
  6911 ;;		_setAddrWindow
  6912 ;;		_write_data
  6913 ;; This function is called by:
  6914 ;;		_drawChar
  6915 ;;		_drawCircle
  6916 ;;		_drawCircleHelper
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           	psect	text25
  6921  002164                     __ptext25:
  6922                           	opt stack 0
  6923  002164                     _drawPixel:
  6924                           	opt stack 21
  6925                           
  6926                           ;incstack = 0
  6927                           ;drawPixel@x stored from wreg
  6928  002164  6E1B               	movwf	drawPixel@x,c
  6929                           
  6930                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6931  002166  0E80               	movlw	128
  6932  002168  601B               	cpfslt	drawPixel@x,c
  6933  00216A  D013               	goto	l643
  6934  00216C  0E9F               	movlw	159
  6935  00216E  6418               	cpfsgt	drawPixel@y,c
  6936  002170  D001               	goto	l5434
  6937                           
  6938                           ;ST7735_TFT.c: 411: return;
  6939  002172  D00F               	goto	l643
  6940  002174                     l5434:
  6941                           
  6942                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6943  002174  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6944  002178  281B               	incf	drawPixel@x,w,c
  6945  00217A  6E15               	movwf	setAddrWindow@x1,c
  6946  00217C  2818               	incf	drawPixel@y,w,c
  6947  00217E  6E16               	movwf	setAddrWindow@y1,c
  6948  002180  501B               	movf	drawPixel@x,w,c
  6949  002182  EC21  F00F         	call	_setAddrWindow
  6950                           
  6951                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6952  002186  501A               	movf	drawPixel@color+1,w,c
  6953  002188  ECFC  F011         	call	_write_data
  6954                           
  6955                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6956  00218C  5019               	movf	drawPixel@color,w,c
  6957  00218E  ECFC  F011         	call	_write_data
  6958  002192                     l643:
  6959  002192  0012               	return		;funcret
  6960  002194                     __end_of_drawPixel:
  6961                           	opt stack 0
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           intcon2	equ	0xFF1
  6970                           postinc0	equ	0xFEE
  6971                           wreg	equ	0xFE8
  6972                           postdec1	equ	0xFE5
  6973                           fsr1l	equ	0xFE1
  6974                           indf2	equ	0xFDF
  6975                           postinc2	equ	0xFDE
  6976                           postdec2	equ	0xFDD
  6977                           fsr2h	equ	0xFDA
  6978                           fsr2l	equ	0xFD9
  6979                           status	equ	0xFD8
  6980                           
  6981 ;; *************** function _setAddrWindow *****************
  6982 ;; Defined at:
  6983 ;;		line 393 in file "ST7735_TFT.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  x0              1    wreg     unsigned char 
  6986 ;;  y0              1   19[COMRAM] unsigned char 
  6987 ;;  x1              1   20[COMRAM] unsigned char 
  6988 ;;  y1              1   21[COMRAM] unsigned char 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  x0              1   22[COMRAM] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;		None               void
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;Total ram usage:        4 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    5
  7007 ;; This function calls:
  7008 ;;		_write_command
  7009 ;;		_write_data
  7010 ;; This function is called by:
  7011 ;;		_drawPixel
  7012 ;;		_drawFastVLine
  7013 ;;		_fillRectangle
  7014 ;;		_drawFastHLine
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text26
  7019  001E42                     __ptext26:
  7020                           	opt stack 0
  7021  001E42                     _setAddrWindow:
  7022                           	opt stack 20
  7023                           
  7024                           ;incstack = 0
  7025                           ;setAddrWindow@x0 stored from wreg
  7026  001E42  6E17               	movwf	setAddrWindow@x0,c
  7027                           
  7028                           ;ST7735_TFT.c: 395: write_command(0x2A);
  7029  001E44  0E2A               	movlw	42
  7030  001E46  EC04  F012         	call	_write_command
  7031                           
  7032                           ;ST7735_TFT.c: 396: write_data(0);
  7033  001E4A  0E00               	movlw	0
  7034  001E4C  ECFC  F011         	call	_write_data
  7035                           
  7036                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  7037  001E50  5017               	movf	setAddrWindow@x0,w,c
  7038  001E52  2459               	addwf	_colstart,w,c
  7039  001E54  ECFC  F011         	call	_write_data
  7040                           
  7041                           ;ST7735_TFT.c: 398: write_data(0);
  7042  001E58  0E00               	movlw	0
  7043  001E5A  ECFC  F011         	call	_write_data
  7044                           
  7045                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7046  001E5E  5015               	movf	setAddrWindow@x1,w,c
  7047  001E60  2459               	addwf	_colstart,w,c
  7048  001E62  ECFC  F011         	call	_write_data
  7049                           
  7050                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7051  001E66  0E2B               	movlw	43
  7052  001E68  EC04  F012         	call	_write_command
  7053                           
  7054                           ;ST7735_TFT.c: 401: write_data(0);
  7055  001E6C  0E00               	movlw	0
  7056  001E6E  ECFC  F011         	call	_write_data
  7057                           
  7058                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7059  001E72  5014               	movf	setAddrWindow@y0,w,c
  7060  001E74  2461               	addwf	_rowstart,w,c
  7061  001E76  ECFC  F011         	call	_write_data
  7062                           
  7063                           ;ST7735_TFT.c: 403: write_data(0);
  7064  001E7A  0E00               	movlw	0
  7065  001E7C  ECFC  F011         	call	_write_data
  7066                           
  7067                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7068  001E80  5016               	movf	setAddrWindow@y1,w,c
  7069  001E82  2461               	addwf	_rowstart,w,c
  7070  001E84  ECFC  F011         	call	_write_data
  7071                           
  7072                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7073  001E88  0E2C               	movlw	44
  7074  001E8A  EC04  F012         	call	_write_command
  7075  001E8E  0012               	return		;funcret
  7076  001E90                     __end_of_setAddrWindow:
  7077                           	opt stack 0
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           intcon2	equ	0xFF1
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           postdec1	equ	0xFE5
  7089                           fsr1l	equ	0xFE1
  7090                           indf2	equ	0xFDF
  7091                           postinc2	equ	0xFDE
  7092                           postdec2	equ	0xFDD
  7093                           fsr2h	equ	0xFDA
  7094                           fsr2l	equ	0xFD9
  7095                           status	equ	0xFD8
  7096                           
  7097 ;; *************** function _TFT_GreenTab_Initialize *****************
  7098 ;; Defined at:
  7099 ;;		line 645 in file "ST7735_TFT.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;		None
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;		None
  7104 ;; Return value:  Size  Location     Type
  7105 ;;		None               void
  7106 ;; Registers used:
  7107 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;Total ram usage:        0 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    6
  7120 ;; This function calls:
  7121 ;;		_Rcmd1
  7122 ;;		_Rcmd2red
  7123 ;;		_Rcmd3
  7124 ;;		_write_command
  7125 ;;		_write_data
  7126 ;; This function is called by:
  7127 ;;		_Initialize_Screen
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text27
  7132  002194                     __ptext27:
  7133                           	opt stack 0
  7134  002194                     _TFT_GreenTab_Initialize:
  7135                           	opt stack 23
  7136                           
  7137                           ;ST7735_TFT.c: 647: PORTCbits.RC4 = 1;
  7138                           
  7139                           ;incstack = 0
  7140  002194  8882               	bsf	3970,4,c	;volatile
  7141                           
  7142                           ;ST7735_TFT.c: 648: PORTEbits.RE0 = 0;
  7143  002196  9084               	bcf	3972,0,c	;volatile
  7144                           
  7145                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7146  002198  0E80               	movlw	128
  7147  00219A  6EC7               	movwf	4039,c	;volatile
  7148                           
  7149                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7150  00219C  0E30               	movlw	48
  7151  00219E  6EC6               	movwf	4038,c	;volatile
  7152                           
  7153                           ;ST7735_TFT.c: 654: Rcmd1();
  7154  0021A0  EC2A  F008         	call	_Rcmd1	;wreg free
  7155                           
  7156                           ;ST7735_TFT.c: 655: Rcmd2red();
  7157  0021A4  EC3D  F010         	call	_Rcmd2red	;wreg free
  7158                           
  7159                           ;ST7735_TFT.c: 656: Rcmd3();
  7160  0021A8  ECB3  F009         	call	_Rcmd3	;wreg free
  7161                           
  7162                           ;ST7735_TFT.c: 657: write_command(0x36);
  7163  0021AC  0E36               	movlw	54
  7164  0021AE  EC04  F012         	call	_write_command
  7165                           
  7166                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7167  0021B2  0EC0               	movlw	192
  7168  0021B4  ECFC  F011         	call	_write_data
  7169                           
  7170                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7171  0021B8  0E01               	movlw	1
  7172  0021BA  6E53               	movwf	__tft_type,c
  7173  0021BC  0012               	return		;funcret
  7174  0021BE                     __end_of_TFT_GreenTab_Initialize:
  7175                           	opt stack 0
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon2	equ	0xFF1
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec1	equ	0xFE5
  7187                           fsr1l	equ	0xFE1
  7188                           indf2	equ	0xFDF
  7189                           postinc2	equ	0xFDE
  7190                           postdec2	equ	0xFDD
  7191                           fsr2h	equ	0xFDA
  7192                           fsr2l	equ	0xFD9
  7193                           status	equ	0xFD8
  7194                           
  7195 ;; *************** function _Rcmd3 *****************
  7196 ;; Defined at:
  7197 ;;		line 339 in file "ST7735_TFT.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;		None               void
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;Total ram usage:        0 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    5
  7218 ;; This function calls:
  7219 ;;		_delay_ms
  7220 ;;		_write_command
  7221 ;;		_write_data
  7222 ;; This function is called by:
  7223 ;;		_TFT_GreenTab_Initialize
  7224 ;;		_TFT_BlackTab_Initialize
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text28
  7229  001366                     __ptext28:
  7230                           	opt stack 0
  7231  001366                     _Rcmd3:
  7232                           	opt stack 23
  7233                           
  7234                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7235                           
  7236                           ;incstack = 0
  7237  001366  0EE0               	movlw	224
  7238  001368  EC04  F012         	call	_write_command
  7239                           
  7240                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7241  00136C  0E02               	movlw	2
  7242  00136E  ECFC  F011         	call	_write_data
  7243  001372  0E1C               	movlw	28
  7244  001374  ECFC  F011         	call	_write_data
  7245  001378  0E07               	movlw	7
  7246  00137A  ECFC  F011         	call	_write_data
  7247  00137E  0E12               	movlw	18
  7248  001380  ECFC  F011         	call	_write_data
  7249                           
  7250                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7251  001384  0E37               	movlw	55
  7252  001386  ECFC  F011         	call	_write_data
  7253  00138A  0E32               	movlw	50
  7254  00138C  ECFC  F011         	call	_write_data
  7255  001390  0E29               	movlw	41
  7256  001392  ECFC  F011         	call	_write_data
  7257  001396  0E2D               	movlw	45
  7258  001398  ECFC  F011         	call	_write_data
  7259                           
  7260                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7261  00139C  0E29               	movlw	41
  7262  00139E  ECFC  F011         	call	_write_data
  7263  0013A2  0E25               	movlw	37
  7264  0013A4  ECFC  F011         	call	_write_data
  7265  0013A8  0E2B               	movlw	43
  7266  0013AA  ECFC  F011         	call	_write_data
  7267  0013AE  0E39               	movlw	57
  7268  0013B0  ECFC  F011         	call	_write_data
  7269                           
  7270                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7271  0013B4  0E00               	movlw	0
  7272  0013B6  ECFC  F011         	call	_write_data
  7273  0013BA  0E01               	movlw	1
  7274  0013BC  ECFC  F011         	call	_write_data
  7275  0013C0  0E03               	movlw	3
  7276  0013C2  ECFC  F011         	call	_write_data
  7277  0013C6  0E10               	movlw	16
  7278  0013C8  ECFC  F011         	call	_write_data
  7279                           
  7280                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7281  0013CC  0EE1               	movlw	225
  7282  0013CE  EC04  F012         	call	_write_command
  7283                           
  7284                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7285  0013D2  0E03               	movlw	3
  7286  0013D4  ECFC  F011         	call	_write_data
  7287  0013D8  0E1D               	movlw	29
  7288  0013DA  ECFC  F011         	call	_write_data
  7289  0013DE  0E07               	movlw	7
  7290  0013E0  ECFC  F011         	call	_write_data
  7291  0013E4  0E06               	movlw	6
  7292  0013E6  ECFC  F011         	call	_write_data
  7293                           
  7294                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7295  0013EA  0E2E               	movlw	46
  7296  0013EC  ECFC  F011         	call	_write_data
  7297  0013F0  0E2C               	movlw	44
  7298  0013F2  ECFC  F011         	call	_write_data
  7299  0013F6  0E29               	movlw	41
  7300  0013F8  ECFC  F011         	call	_write_data
  7301  0013FC  0E2D               	movlw	45
  7302  0013FE  ECFC  F011         	call	_write_data
  7303                           
  7304                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7305  001402  0E2E               	movlw	46
  7306  001404  ECFC  F011         	call	_write_data
  7307  001408  0E2E               	movlw	46
  7308  00140A  ECFC  F011         	call	_write_data
  7309  00140E  0E37               	movlw	55
  7310  001410  ECFC  F011         	call	_write_data
  7311  001414  0E3F               	movlw	63
  7312  001416  ECFC  F011         	call	_write_data
  7313                           
  7314                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7315  00141A  0E00               	movlw	0
  7316  00141C  ECFC  F011         	call	_write_data
  7317  001420  0E00               	movlw	0
  7318  001422  ECFC  F011         	call	_write_data
  7319  001426  0E02               	movlw	2
  7320  001428  ECFC  F011         	call	_write_data
  7321  00142C  0E10               	movlw	16
  7322  00142E  ECFC  F011         	call	_write_data
  7323                           
  7324                           ;ST7735_TFT.c: 351: write_command(0x13);
  7325  001432  0E13               	movlw	19
  7326  001434  EC04  F012         	call	_write_command
  7327                           
  7328                           ;ST7735_TFT.c: 352: delay_ms(10);
  7329  001438  0E00               	movlw	0
  7330  00143A  6E18               	movwf	delay_ms@ms+1,c
  7331  00143C  0E0A               	movlw	10
  7332  00143E  6E17               	movwf	delay_ms@ms,c
  7333  001440  ECF8  F00E         	call	_delay_ms	;wreg free
  7334                           
  7335                           ;ST7735_TFT.c: 353: write_command(0x29);
  7336  001444  0E29               	movlw	41
  7337  001446  EC04  F012         	call	_write_command
  7338                           
  7339                           ;ST7735_TFT.c: 354: delay_ms(100);
  7340  00144A  0E00               	movlw	0
  7341  00144C  6E18               	movwf	delay_ms@ms+1,c
  7342  00144E  0E64               	movlw	100
  7343  001450  6E17               	movwf	delay_ms@ms,c
  7344  001452  ECF8  F00E         	call	_delay_ms	;wreg free
  7345  001456  0012               	return		;funcret
  7346  001458                     __end_of_Rcmd3:
  7347                           	opt stack 0
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodh	equ	0xFF4
  7353                           prodl	equ	0xFF3
  7354                           intcon	equ	0xFF2
  7355                           intcon2	equ	0xFF1
  7356                           postinc0	equ	0xFEE
  7357                           wreg	equ	0xFE8
  7358                           postdec1	equ	0xFE5
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function _Rcmd2red *****************
  7368 ;; Defined at:
  7369 ;;		line 329 in file "ST7735_TFT.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;		None
  7374 ;; Return value:  Size  Location     Type
  7375 ;;		None               void
  7376 ;; Registers used:
  7377 ;;		wreg, status,2, cstack
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:        0 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    5
  7390 ;; This function calls:
  7391 ;;		_write_command
  7392 ;;		_write_data
  7393 ;; This function is called by:
  7394 ;;		_TFT_GreenTab_Initialize
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text29
  7399  00207A                     __ptext29:
  7400                           	opt stack 0
  7401  00207A                     _Rcmd2red:
  7402                           	opt stack 23
  7403                           
  7404                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7405                           
  7406                           ;incstack = 0
  7407  00207A  0E2A               	movlw	42
  7408  00207C  EC04  F012         	call	_write_command
  7409                           
  7410                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7411  002080  0E00               	movlw	0
  7412  002082  ECFC  F011         	call	_write_data
  7413  002086  0E00               	movlw	0
  7414  002088  ECFC  F011         	call	_write_data
  7415                           
  7416                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7417  00208C  0E00               	movlw	0
  7418  00208E  ECFC  F011         	call	_write_data
  7419  002092  0E7F               	movlw	127
  7420  002094  ECFC  F011         	call	_write_data
  7421                           
  7422                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7423  002098  0E2B               	movlw	43
  7424  00209A  EC04  F012         	call	_write_command
  7425                           
  7426                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7427  00209E  0E00               	movlw	0
  7428  0020A0  ECFC  F011         	call	_write_data
  7429  0020A4  0E00               	movlw	0
  7430  0020A6  ECFC  F011         	call	_write_data
  7431                           
  7432                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7433  0020AA  0E00               	movlw	0
  7434  0020AC  ECFC  F011         	call	_write_data
  7435  0020B0  0E9F               	movlw	159
  7436  0020B2  ECFC  F011         	call	_write_data
  7437  0020B6  0012               	return		;funcret
  7438  0020B8                     __end_of_Rcmd2red:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           postinc0	equ	0xFEE
  7449                           wreg	equ	0xFE8
  7450                           postdec1	equ	0xFE5
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _Rcmd1 *****************
  7460 ;; Defined at:
  7461 ;;		line 282 in file "ST7735_TFT.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;		None               void
  7468 ;; Registers used:
  7469 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;Total ram usage:        0 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    5
  7482 ;; This function calls:
  7483 ;;		_delay_ms
  7484 ;;		_write_command
  7485 ;;		_write_data
  7486 ;; This function is called by:
  7487 ;;		_TFT_GreenTab_Initialize
  7488 ;;		_TFT_BlackTab_Initialize
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text30
  7493  001054                     __ptext30:
  7494                           	opt stack 0
  7495  001054                     _Rcmd1:
  7496                           	opt stack 23
  7497                           
  7498                           ;ST7735_TFT.c: 284: write_command(0x01);
  7499                           
  7500                           ;incstack = 0
  7501  001054  0E01               	movlw	1
  7502  001056  EC04  F012         	call	_write_command
  7503                           
  7504                           ;ST7735_TFT.c: 285: delay_ms(150);
  7505  00105A  0E00               	movlw	0
  7506  00105C  6E18               	movwf	delay_ms@ms+1,c
  7507  00105E  0E96               	movlw	150
  7508  001060  6E17               	movwf	delay_ms@ms,c
  7509  001062  ECF8  F00E         	call	_delay_ms	;wreg free
  7510                           
  7511                           ;ST7735_TFT.c: 286: write_command(0x11);
  7512  001066  0E11               	movlw	17
  7513  001068  EC04  F012         	call	_write_command
  7514                           
  7515                           ;ST7735_TFT.c: 287: delay_ms(500);
  7516  00106C  0E01               	movlw	1
  7517  00106E  6E18               	movwf	delay_ms@ms+1,c
  7518  001070  0EF4               	movlw	244
  7519  001072  6E17               	movwf	delay_ms@ms,c
  7520  001074  ECF8  F00E         	call	_delay_ms	;wreg free
  7521                           
  7522                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7523  001078  0EB1               	movlw	177
  7524  00107A  EC04  F012         	call	_write_command
  7525                           
  7526                           ;ST7735_TFT.c: 289: write_data(0x01);
  7527  00107E  0E01               	movlw	1
  7528  001080  ECFC  F011         	call	_write_data
  7529                           
  7530                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7531  001084  0E2C               	movlw	44
  7532  001086  ECFC  F011         	call	_write_data
  7533                           
  7534                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7535  00108A  0E2D               	movlw	45
  7536  00108C  ECFC  F011         	call	_write_data
  7537                           
  7538                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7539  001090  0EB2               	movlw	178
  7540  001092  EC04  F012         	call	_write_command
  7541                           
  7542                           ;ST7735_TFT.c: 293: write_data(0x01);
  7543  001096  0E01               	movlw	1
  7544  001098  ECFC  F011         	call	_write_data
  7545                           
  7546                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7547  00109C  0E2C               	movlw	44
  7548  00109E  ECFC  F011         	call	_write_data
  7549                           
  7550                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7551  0010A2  0E2D               	movlw	45
  7552  0010A4  ECFC  F011         	call	_write_data
  7553                           
  7554                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7555  0010A8  0EB3               	movlw	179
  7556  0010AA  EC04  F012         	call	_write_command
  7557                           
  7558                           ;ST7735_TFT.c: 297: write_data(0x01);
  7559  0010AE  0E01               	movlw	1
  7560  0010B0  ECFC  F011         	call	_write_data
  7561                           
  7562                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7563  0010B4  0E2C               	movlw	44
  7564  0010B6  ECFC  F011         	call	_write_data
  7565                           
  7566                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7567  0010BA  0E2D               	movlw	45
  7568  0010BC  ECFC  F011         	call	_write_data
  7569                           
  7570                           ;ST7735_TFT.c: 300: write_data(0x01);
  7571  0010C0  0E01               	movlw	1
  7572  0010C2  ECFC  F011         	call	_write_data
  7573                           
  7574                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7575  0010C6  0E2C               	movlw	44
  7576  0010C8  ECFC  F011         	call	_write_data
  7577                           
  7578                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7579  0010CC  0E2D               	movlw	45
  7580  0010CE  ECFC  F011         	call	_write_data
  7581                           
  7582                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7583  0010D2  0EB4               	movlw	180
  7584  0010D4  EC04  F012         	call	_write_command
  7585                           
  7586                           ;ST7735_TFT.c: 304: write_data(0x07);
  7587  0010D8  0E07               	movlw	7
  7588  0010DA  ECFC  F011         	call	_write_data
  7589                           
  7590                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7591  0010DE  0EC0               	movlw	192
  7592  0010E0  EC04  F012         	call	_write_command
  7593                           
  7594                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7595  0010E4  0EA2               	movlw	162
  7596  0010E6  ECFC  F011         	call	_write_data
  7597                           
  7598                           ;ST7735_TFT.c: 307: write_data(0x02);
  7599  0010EA  0E02               	movlw	2
  7600  0010EC  ECFC  F011         	call	_write_data
  7601                           
  7602                           ;ST7735_TFT.c: 308: write_data(0x84);
  7603  0010F0  0E84               	movlw	132
  7604  0010F2  ECFC  F011         	call	_write_data
  7605                           
  7606                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7607  0010F6  0EC1               	movlw	193
  7608  0010F8  EC04  F012         	call	_write_command
  7609                           
  7610                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7611  0010FC  0EC5               	movlw	197
  7612  0010FE  ECFC  F011         	call	_write_data
  7613                           
  7614                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7615  001102  0EC2               	movlw	194
  7616  001104  EC04  F012         	call	_write_command
  7617                           
  7618                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7619  001108  0E0A               	movlw	10
  7620  00110A  ECFC  F011         	call	_write_data
  7621                           
  7622                           ;ST7735_TFT.c: 313: write_data(0x00);
  7623  00110E  0E00               	movlw	0
  7624  001110  ECFC  F011         	call	_write_data
  7625                           
  7626                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7627  001114  0EC3               	movlw	195
  7628  001116  EC04  F012         	call	_write_command
  7629                           
  7630                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7631  00111A  0E8A               	movlw	138
  7632  00111C  ECFC  F011         	call	_write_data
  7633                           
  7634                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7635  001120  0E2A               	movlw	42
  7636  001122  ECFC  F011         	call	_write_data
  7637                           
  7638                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7639  001126  0EC4               	movlw	196
  7640  001128  EC04  F012         	call	_write_command
  7641                           
  7642                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7643  00112C  0E8A               	movlw	138
  7644  00112E  ECFC  F011         	call	_write_data
  7645                           
  7646                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7647  001132  0EEE               	movlw	238
  7648  001134  ECFC  F011         	call	_write_data
  7649                           
  7650                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7651  001138  0EC5               	movlw	197
  7652  00113A  EC04  F012         	call	_write_command
  7653                           
  7654                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7655  00113E  0E0E               	movlw	14
  7656  001140  ECFC  F011         	call	_write_data
  7657                           
  7658                           ;ST7735_TFT.c: 322: write_command(0x20);
  7659  001144  0E20               	movlw	32
  7660  001146  EC04  F012         	call	_write_command
  7661                           
  7662                           ;ST7735_TFT.c: 323: write_command(0x36);
  7663  00114A  0E36               	movlw	54
  7664  00114C  EC04  F012         	call	_write_command
  7665                           
  7666                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7667  001150  0EC8               	movlw	200
  7668  001152  ECFC  F011         	call	_write_data
  7669                           
  7670                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7671  001156  0E3A               	movlw	58
  7672  001158  EC04  F012         	call	_write_command
  7673                           
  7674                           ;ST7735_TFT.c: 326: write_data(0x05);
  7675  00115C  0E05               	movlw	5
  7676  00115E  ECFC  F011         	call	_write_data
  7677  001162  0012               	return		;funcret
  7678  001164                     __end_of_Rcmd1:
  7679                           	opt stack 0
  7680                           tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           prodh	equ	0xFF4
  7685                           prodl	equ	0xFF3
  7686                           intcon	equ	0xFF2
  7687                           intcon2	equ	0xFF1
  7688                           postinc0	equ	0xFEE
  7689                           wreg	equ	0xFE8
  7690                           postdec1	equ	0xFE5
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _write_data *****************
  7700 ;; Defined at:
  7701 ;;		line 210 in file "ST7735_TFT.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  data_           1    wreg     unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  data_           1   18[COMRAM] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        1 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		_spiwrite
  7724 ;; This function is called by:
  7725 ;;		_Rcmd1
  7726 ;;		_Rcmd2red
  7727 ;;		_Rcmd3
  7728 ;;		_setAddrWindow
  7729 ;;		_drawPixel
  7730 ;;		_TFT_GreenTab_Initialize
  7731 ;;		_Bcmd
  7732 ;;		_setScrollDefinition
  7733 ;;		_Rcmd2green
  7734 ;;		_VerticalScroll
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           	psect	text31
  7739  0023F8                     __ptext31:
  7740                           	opt stack 0
  7741  0023F8                     _write_data:
  7742                           	opt stack 20
  7743                           
  7744                           ;incstack = 0
  7745                           ;write_data@data_ stored from wreg
  7746  0023F8  6E13               	movwf	write_data@data_,c
  7747                           
  7748                           ;ST7735_TFT.c: 212: PORTCbits.RC4 = 0;
  7749  0023FA  9882               	bcf	3970,4,c	;volatile
  7750                           
  7751                           ;ST7735_TFT.c: 213: PORTEbits.RE0 = 1;
  7752  0023FC  8084               	bsf	3972,0,c	;volatile
  7753                           
  7754                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7755  0023FE  5013               	movf	write_data@data_,w,c
  7756  002400  ECA9  F011         	call	_spiwrite
  7757                           
  7758                           ;ST7735_TFT.c: 215: PORTCbits.RC4 = 1;
  7759  002404  8882               	bsf	3970,4,c	;volatile
  7760  002406  0012               	return		;funcret
  7761  002408                     __end_of_write_data:
  7762                           	opt stack 0
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           intcon2	equ	0xFF1
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           postdec1	equ	0xFE5
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           fsr2h	equ	0xFDA
  7779                           fsr2l	equ	0xFD9
  7780                           status	equ	0xFD8
  7781                           
  7782 ;; *************** function _write_command *****************
  7783 ;; Defined at:
  7784 ;;		line 199 in file "ST7735_TFT.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  cmd_            1    wreg     unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  cmd_            1   18[COMRAM] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;		None               void
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:        1 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    4
  7805 ;; This function calls:
  7806 ;;		_spiwrite
  7807 ;; This function is called by:
  7808 ;;		_Rcmd1
  7809 ;;		_Rcmd2red
  7810 ;;		_Rcmd3
  7811 ;;		_setAddrWindow
  7812 ;;		_TFT_GreenTab_Initialize
  7813 ;;		_Bcmd
  7814 ;;		_setScrollDefinition
  7815 ;;		_Rcmd2green
  7816 ;;		_VerticalScroll
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text32
  7821  002408                     __ptext32:
  7822                           	opt stack 0
  7823  002408                     _write_command:
  7824                           	opt stack 20
  7825                           
  7826                           ;incstack = 0
  7827                           ;write_command@cmd_ stored from wreg
  7828  002408  6E13               	movwf	write_command@cmd_,c
  7829                           
  7830                           ;ST7735_TFT.c: 201: PORTCbits.RC4 = 0;
  7831  00240A  9882               	bcf	3970,4,c	;volatile
  7832                           
  7833                           ;ST7735_TFT.c: 203: PORTEbits.RE0 = 0;
  7834  00240C  9084               	bcf	3972,0,c	;volatile
  7835                           
  7836                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7837  00240E  5013               	movf	write_command@cmd_,w,c
  7838  002410  ECA9  F011         	call	_spiwrite
  7839                           
  7840                           ;ST7735_TFT.c: 206: PORTCbits.RC4 = 1;
  7841  002414  8882               	bsf	3970,4,c	;volatile
  7842  002416  0012               	return		;funcret
  7843  002418                     __end_of_write_command:
  7844                           	opt stack 0
  7845                           tblptru	equ	0xFF8
  7846                           tblptrh	equ	0xFF7
  7847                           tblptrl	equ	0xFF6
  7848                           tablat	equ	0xFF5
  7849                           prodh	equ	0xFF4
  7850                           prodl	equ	0xFF3
  7851                           intcon	equ	0xFF2
  7852                           intcon2	equ	0xFF1
  7853                           postinc0	equ	0xFEE
  7854                           wreg	equ	0xFE8
  7855                           postdec1	equ	0xFE5
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           postdec2	equ	0xFDD
  7860                           fsr2h	equ	0xFDA
  7861                           fsr2l	equ	0xFD9
  7862                           status	equ	0xFD8
  7863                           
  7864 ;; *************** function _spiwrite *****************
  7865 ;; Defined at:
  7866 ;;		line 190 in file "ST7735_TFT.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  spidata         1    wreg     unsigned char 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  spidata         1   17[COMRAM] unsigned char 
  7871 ;;  x               1   16[COMRAM] unsigned char 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;		None               void
  7874 ;; Registers used:
  7875 ;;		wreg
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;Total ram usage:        2 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:    3
  7888 ;; This function calls:
  7889 ;;		Nothing
  7890 ;; This function is called by:
  7891 ;;		_write_command
  7892 ;;		_write_data
  7893 ;;		_drawFastVLine
  7894 ;;		_fillRectangle
  7895 ;;		_drawFastHLine
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           	psect	text33
  7900  002352                     __ptext33:
  7901                           	opt stack 0
  7902  002352                     _spiwrite:
  7903                           	opt stack 22
  7904                           
  7905                           ;incstack = 0
  7906                           ;spiwrite@spidata stored from wreg
  7907  002352  6E12               	movwf	spiwrite@spidata,c
  7908                           
  7909                           ;ST7735_TFT.c: 192: char x;
  7910                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7911  002354  969E               	bcf	3998,3,c	;volatile
  7912                           
  7913                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7914  002356  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7915                           
  7916                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7917  00235A  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7918                           
  7919                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7920  00235E  D000               	goto	l599
  7921  002360                     l599:
  7922  002360  A0C7               	btfss	4039,0,c	;volatile
  7923  002362  D7FE               	goto	l599
  7924  002364  0012               	return		;funcret
  7925  002366                     __end_of_spiwrite:
  7926                           	opt stack 0
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           intcon2	equ	0xFF1
  7935                           postinc0	equ	0xFEE
  7936                           wreg	equ	0xFE8
  7937                           postdec1	equ	0xFE5
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _LCD_Reset *****************
  7947 ;; Defined at:
  7948 ;;		line 218 in file "ST7735_TFT.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;		None
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;		None
  7953 ;; Return value:  Size  Location     Type
  7954 ;;		None               void
  7955 ;; Registers used:
  7956 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;Total ram usage:        0 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    5
  7969 ;; This function calls:
  7970 ;;		_delay_ms
  7971 ;; This function is called by:
  7972 ;;		_Initialize_Screen
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text34
  7977  00238E                     __ptext34:
  7978                           	opt stack 0
  7979  00238E                     _LCD_Reset:
  7980                           	opt stack 24
  7981                           
  7982                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7983                           
  7984                           ;incstack = 0
  7985  00238E  9282               	bcf	3970,1,c	;volatile
  7986                           
  7987                           ;ST7735_TFT.c: 221: delay_ms(100);
  7988  002390  0E00               	movlw	0
  7989  002392  6E18               	movwf	delay_ms@ms+1,c
  7990  002394  0E64               	movlw	100
  7991  002396  6E17               	movwf	delay_ms@ms,c
  7992  002398  ECF8  F00E         	call	_delay_ms	;wreg free
  7993                           
  7994                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7995  00239C  8282               	bsf	3970,1,c	;volatile
  7996  00239E  0012               	return		;funcret
  7997  0023A0                     __end_of_LCD_Reset:
  7998                           	opt stack 0
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon2	equ	0xFF1
  8007                           postinc0	equ	0xFEE
  8008                           wreg	equ	0xFE8
  8009                           postdec1	equ	0xFE5
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           fsr2h	equ	0xFDA
  8015                           fsr2l	equ	0xFD9
  8016                           status	equ	0xFD8
  8017                           
  8018 ;; *************** function _delay_ms *****************
  8019 ;; Defined at:
  8020 ;;		line 65 in file "ST7735_TFT.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  ms              2   22[COMRAM] int 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  count           2   26[COMRAM] int 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;		None               void
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;Total ram usage:        6 bytes
  8039 ;; Hardware stack levels used:    1
  8040 ;; Hardware stack levels required when called:    4
  8041 ;; This function calls:
  8042 ;;		___wmul
  8043 ;; This function is called by:
  8044 ;;		_LCD_Reset
  8045 ;;		_Rcmd1
  8046 ;;		_Rcmd3
  8047 ;;		_Bcmd
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text35
  8052  001DF0                     __ptext35:
  8053                           	opt stack 0
  8054  001DF0                     _delay_ms:
  8055                           	opt stack 23
  8056                           
  8057                           ;ST7735_TFT.c: 71: int count;
  8058                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8059                           
  8060                           ;incstack = 0
  8061  001DF0  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8062  001DF4  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8063  001DF8  0E00               	movlw	0
  8064  001DFA  6E14               	movwf	___wmul@multiplicand+1,c
  8065  001DFC  0E7D               	movlw	125
  8066  001DFE  6E13               	movwf	___wmul@multiplicand,c
  8067  001E00  ECDF  F010         	call	___wmul	;wreg free
  8068  001E04  C011  F01B         	movff	?___wmul,delay_ms@count
  8069  001E08  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8070                           
  8071                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8072  001E0C  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8073  001E10  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8074  001E14  1E19               	comf	??_delay_ms,f,c
  8075  001E16  1E1A               	comf	??_delay_ms+1,f,c
  8076  001E18  4A19               	infsnz	??_delay_ms,f,c
  8077  001E1A  2A1A               	incf	??_delay_ms+1,f,c
  8078  001E1C  0EFF               	movlw	255
  8079  001E1E  2419               	addwf	??_delay_ms,w,c
  8080  001E20  6E1B               	movwf	delay_ms@count,c
  8081  001E22  0EFF               	movlw	255
  8082  001E24  201A               	addwfc	??_delay_ms+1,w,c
  8083  001E26  6E1C               	movwf	delay_ms@count+1,c
  8084                           
  8085                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8086  001E28  0E03               	movlw	3
  8087  001E2A  6ED5               	movwf	4053,c	;volatile
  8088                           
  8089                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8090  001E2C  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8091                           
  8092                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8093  001E30  501C               	movf	delay_ms@count+1,w,c
  8094  001E32  6ED7               	movwf	4055,c	;volatile
  8095                           
  8096                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8097  001E34  94F2               	bcf	intcon,2,c	;volatile
  8098                           
  8099                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8100  001E36  8ED5               	bsf	4053,7,c	;volatile
  8101                           
  8102                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8103  001E38  D000               	goto	l589
  8104  001E3A                     l589:
  8105  001E3A  A4F2               	btfss	intcon,2,c	;volatile
  8106  001E3C  D7FE               	goto	l589
  8107                           
  8108                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8109  001E3E  9ED5               	bcf	4053,7,c	;volatile
  8110  001E40  0012               	return		;funcret
  8111  001E42                     __end_of_delay_ms:
  8112                           	opt stack 0
  8113                           tblptru	equ	0xFF8
  8114                           tblptrh	equ	0xFF7
  8115                           tblptrl	equ	0xFF6
  8116                           tablat	equ	0xFF5
  8117                           prodh	equ	0xFF4
  8118                           prodl	equ	0xFF3
  8119                           intcon	equ	0xFF2
  8120                           intcon2	equ	0xFF1
  8121                           postinc0	equ	0xFEE
  8122                           wreg	equ	0xFE8
  8123                           postdec1	equ	0xFE5
  8124                           fsr1l	equ	0xFE1
  8125                           indf2	equ	0xFDF
  8126                           postinc2	equ	0xFDE
  8127                           postdec2	equ	0xFDD
  8128                           fsr2h	equ	0xFDA
  8129                           fsr2l	equ	0xFD9
  8130                           status	equ	0xFD8
  8131                           
  8132 ;; *************** function ___wmul *****************
  8133 ;; Defined at:
  8134 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  multiplier      2   16[COMRAM] unsigned int 
  8137 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  product         2   20[COMRAM] unsigned int 
  8140 ;; Return value:  Size  Location     Type
  8141 ;;                  2   16[COMRAM] unsigned int 
  8142 ;; Registers used:
  8143 ;;		wreg, status,2, status,0, prodl, prodh
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8149 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8150 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;Total ram usage:        6 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    3
  8156 ;; This function calls:
  8157 ;;		Nothing
  8158 ;; This function is called by:
  8159 ;;		_main
  8160 ;;		_get_RPM
  8161 ;;		_delay_ms
  8162 ;;		_drawChar
  8163 ;;		_printf
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text36
  8168  0021BE                     __ptext36:
  8169                           	opt stack 0
  8170  0021BE                     ___wmul:
  8171                           	opt stack 26
  8172                           
  8173                           ;incstack = 0
  8174  0021BE  5011               	movf	___wmul@multiplier,w,c
  8175  0021C0  0213               	mulwf	___wmul@multiplicand,c
  8176  0021C2  CFF3 F015          	movff	prodl,___wmul@product
  8177  0021C6  CFF4 F016          	movff	prodh,___wmul@product+1
  8178  0021CA  5011               	movf	___wmul@multiplier,w,c
  8179  0021CC  0214               	mulwf	___wmul@multiplicand+1,c
  8180  0021CE  50F3               	movf	prodl,w,c
  8181  0021D0  2616               	addwf	___wmul@product+1,f,c
  8182  0021D2  5012               	movf	___wmul@multiplier+1,w,c
  8183  0021D4  0213               	mulwf	___wmul@multiplicand,c
  8184  0021D6  50F3               	movf	prodl,w,c
  8185  0021D8  2616               	addwf	___wmul@product+1,f,c
  8186  0021DA  C015  F011         	movff	___wmul@product,?___wmul
  8187  0021DE  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8188  0021E2  D000               	goto	l868
  8189  0021E4                     l868:
  8190  0021E4  0012               	return		;funcret
  8191  0021E6                     __end_of___wmul:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           postinc0	equ	0xFEE
  8202                           wreg	equ	0xFE8
  8203                           postdec1	equ	0xFE5
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _Increase_Speed *****************
  8213 ;; Defined at:
  8214 ;;		line 68 in file "Fan_Support.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;		None               void
  8221 ;; Registers used:
  8222 ;;		wreg, status,2, status,0, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;Total ram usage:        0 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    7
  8235 ;; This function calls:
  8236 ;;		_Do_Beep
  8237 ;;		_do_update_pwm
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text37
  8244  0021E6                     __ptext37:
  8245                           	opt stack 0
  8246  0021E6                     _Increase_Speed:
  8247                           	opt stack 23
  8248                           
  8249                           ;Fan_Support.c: 70: if (duty_cycle == 100)
  8250                           
  8251                           ;incstack = 0
  8252  0021E6  0E64               	movlw	100
  8253  0021E8  185C               	xorwf	_duty_cycle,w,c
  8254  0021EA  A4D8               	btfss	status,2,c
  8255  0021EC  D008               	goto	l6640
  8256                           
  8257                           ;Fan_Support.c: 71: {
  8258                           ;Fan_Support.c: 72: Do_Beep();
  8259  0021EE  ECBD  F011         	call	_Do_Beep	;wreg free
  8260                           
  8261                           ;Fan_Support.c: 73: Do_Beep();
  8262  0021F2  ECBD  F011         	call	_Do_Beep	;wreg free
  8263                           
  8264                           ;Fan_Support.c: 74: do_update_pwm(100);
  8265  0021F6  0E64               	movlw	100
  8266  0021F8  ECE1  F00B         	call	_do_update_pwm
  8267                           
  8268                           ;Fan_Support.c: 75: }
  8269  0021FC  D006               	goto	l267
  8270  0021FE                     l6640:
  8271                           
  8272                           ;Fan_Support.c: 76: else
  8273                           ;Fan_Support.c: 77: {
  8274                           ;Fan_Support.c: 78: duty_cycle += 5;
  8275  0021FE  0E05               	movlw	5
  8276  002200  265C               	addwf	_duty_cycle,f,c
  8277                           
  8278                           ;Fan_Support.c: 79: do_update_pwm(duty_cycle);
  8279  002202  505C               	movf	_duty_cycle,w,c
  8280  002204  ECE1  F00B         	call	_do_update_pwm
  8281  002208  D000               	goto	l267
  8282  00220A                     l267:
  8283  00220A  0012               	return		;funcret
  8284  00220C                     __end_of_Increase_Speed:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _Do_Init *****************
  8306 ;; Defined at:
  8307 ;;		line 122 in file "Lab12p1.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;		None               void
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;Total ram usage:        0 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    7
  8328 ;; This function calls:
  8329 ;;		_DS1621_Init
  8330 ;;		_I2C_Init
  8331 ;;		_init_INTERRUPT
  8332 ;;		_init_UART
  8333 ;; This function is called by:
  8334 ;;		_main
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text38
  8339  001EDC                     __ptext38:
  8340                           	opt stack 0
  8341  001EDC                     _Do_Init:
  8342                           	opt stack 23
  8343                           
  8344                           ;Lab12p1.c: 124: init_UART();
  8345                           
  8346                           ;incstack = 0
  8347  001EDC  ECB3  F011         	call	_init_UART	;wreg free
  8348                           
  8349                           ;Lab12p1.c: 125: OSCCON= 0x70;
  8350  001EE0  0E70               	movlw	112
  8351  001EE2  6ED3               	movwf	4051,c	;volatile
  8352                           
  8353                           ;Lab12p1.c: 127: ADCON1= 0x0F;
  8354  001EE4  0E0F               	movlw	15
  8355  001EE6  6EC1               	movwf	4033,c	;volatile
  8356                           
  8357                           ;Lab12p1.c: 128: TRISA = 0x00;
  8358  001EE8  0E00               	movlw	0
  8359  001EEA  6E92               	movwf	3986,c	;volatile
  8360                           
  8361                           ;Lab12p1.c: 129: TRISB = 0b00110001;
  8362  001EEC  0E31               	movlw	49
  8363  001EEE  6E93               	movwf	3987,c	;volatile
  8364                           
  8365                           ;Lab12p1.c: 130: TRISC = 0x01;
  8366  001EF0  0E01               	movlw	1
  8367  001EF2  6E94               	movwf	3988,c	;volatile
  8368                           
  8369                           ;Lab12p1.c: 131: TRISD = 0x00;
  8370  001EF4  0E00               	movlw	0
  8371  001EF6  6E95               	movwf	3989,c	;volatile
  8372                           
  8373                           ;Lab12p1.c: 132: TRISE = 0x00;
  8374  001EF8  0E00               	movlw	0
  8375  001EFA  6E96               	movwf	3990,c	;volatile
  8376                           
  8377                           ;Lab12p1.c: 135: RBPU=0;
  8378  001EFC  9EF1               	bcf	intcon2,7,c	;volatile
  8379                           
  8380                           ;Lab12p1.c: 136: TMR3L = 0x00;
  8381  001EFE  0E00               	movlw	0
  8382  001F00  6EB2               	movwf	4018,c	;volatile
  8383                           
  8384                           ;Lab12p1.c: 137: T3CON = 0x02;
  8385  001F02  0E02               	movlw	2
  8386  001F04  6EB1               	movwf	4017,c	;volatile
  8387                           
  8388                           ;Lab12p1.c: 138: I2C_Init(100000);
  8389  001F06  0EA0               	movlw	160
  8390  001F08  6E11               	movwf	I2C_Init@c,c
  8391  001F0A  0E86               	movlw	134
  8392  001F0C  6E12               	movwf	I2C_Init@c+1,c
  8393  001F0E  0E01               	movlw	1
  8394  001F10  6E13               	movwf	I2C_Init@c+2,c
  8395  001F12  0E00               	movlw	0
  8396  001F14  6E14               	movwf	I2C_Init@c+3,c
  8397  001F16  EC24  F012         	call	_I2C_Init	;wreg free
  8398                           
  8399                           ;Lab12p1.c: 140: DS1621_Init();
  8400  001F1A  EC5E  F011         	call	_DS1621_Init	;wreg free
  8401                           
  8402                           ;Lab12p1.c: 141: init_INTERRUPT();
  8403  001F1E  EC88  F011         	call	_init_INTERRUPT	;wreg free
  8404                           
  8405                           ;Lab12p1.c: 142: FAN = 0;
  8406  001F22  0E00               	movlw	0
  8407  001F24  6E50               	movwf	_FAN,c
  8408  001F26  0012               	return		;funcret
  8409  001F28                     __end_of_Do_Init:
  8410                           	opt stack 0
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon	equ	0xFF2
  8418                           intcon2	equ	0xFF1
  8419                           postinc0	equ	0xFEE
  8420                           wreg	equ	0xFE8
  8421                           postdec1	equ	0xFE5
  8422                           fsr1l	equ	0xFE1
  8423                           indf2	equ	0xFDF
  8424                           postinc2	equ	0xFDE
  8425                           postdec2	equ	0xFDD
  8426                           fsr2h	equ	0xFDA
  8427                           fsr2l	equ	0xFD9
  8428                           status	equ	0xFD8
  8429                           
  8430 ;; *************** function _init_UART *****************
  8431 ;; Defined at:
  8432 ;;		line 116 in file "Lab12p1.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;		None               void
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    4
  8453 ;; This function calls:
  8454 ;;		_OpenUSART
  8455 ;; This function is called by:
  8456 ;;		_Do_Init
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           	psect	text39
  8461  002366                     __ptext39:
  8462                           	opt stack 0
  8463  002366                     _init_UART:
  8464                           	opt stack 25
  8465                           
  8466                           ;Lab12p1.c: 118: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  8467                           
  8468                           ;incstack = 0
  8469  002366  0E00               	movlw	0
  8470  002368  6E12               	movwf	OpenUSART@spbrg+1,c
  8471  00236A  0E19               	movlw	25
  8472  00236C  6E11               	movwf	OpenUSART@spbrg,c
  8473  00236E  0E3C               	movlw	60
  8474  002370  ECC5  F00D         	call	_OpenUSART
  8475                           
  8476                           ;Lab12p1.c: 119: OSCCON = 0x70;
  8477  002374  0E70               	movlw	112
  8478  002376  6ED3               	movwf	4051,c	;volatile
  8479  002378  0012               	return		;funcret
  8480  00237A                     __end_of_init_UART:
  8481                           	opt stack 0
  8482                           tblptru	equ	0xFF8
  8483                           tblptrh	equ	0xFF7
  8484                           tblptrl	equ	0xFF6
  8485                           tablat	equ	0xFF5
  8486                           prodh	equ	0xFF4
  8487                           prodl	equ	0xFF3
  8488                           intcon	equ	0xFF2
  8489                           intcon2	equ	0xFF1
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _OpenUSART *****************
  8502 ;; Defined at:
  8503 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  config          1    wreg     unsigned char 
  8506 ;;  spbrg           2   16[COMRAM] unsigned int 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  config          1   18[COMRAM] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;		None               void
  8511 ;; Registers used:
  8512 ;;		wreg, status,2
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;Total ram usage:        3 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    3
  8525 ;; This function calls:
  8526 ;;		Nothing
  8527 ;; This function is called by:
  8528 ;;		_init_UART
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text40
  8533  001B8A                     __ptext40:
  8534                           	opt stack 0
  8535  001B8A                     _OpenUSART:
  8536                           	opt stack 25
  8537                           
  8538                           ;incstack = 0
  8539                           ;OpenUSART@config stored from wreg
  8540  001B8A  6E13               	movwf	OpenUSART@config,c
  8541  001B8C  0E00               	movlw	0
  8542  001B8E  6EAC               	movwf	4012,c	;volatile
  8543  001B90  0E00               	movlw	0
  8544  001B92  6EAB               	movwf	4011,c	;volatile
  8545  001B94  A013               	btfss	OpenUSART@config,0,c
  8546  001B96  D002               	goto	l5598
  8547  001B98  88AC               	bsf	4012,4,c	;volatile
  8548  001B9A  D000               	goto	l5598
  8549  001B9C                     l5598:
  8550  001B9C  A213               	btfss	OpenUSART@config,1,c
  8551  001B9E  D003               	goto	l5602
  8552  001BA0  8CAC               	bsf	4012,6,c	;volatile
  8553  001BA2  8CAB               	bsf	4011,6,c	;volatile
  8554  001BA4  D000               	goto	l5602
  8555  001BA6                     l5602:
  8556  001BA6  A413               	btfss	OpenUSART@config,2,c
  8557  001BA8  D002               	goto	l5606
  8558  001BAA  8EAC               	bsf	4012,7,c	;volatile
  8559  001BAC  D000               	goto	l5606
  8560  001BAE                     l5606:
  8561  001BAE  A613               	btfss	OpenUSART@config,3,c
  8562  001BB0  D002               	goto	l856
  8563  001BB2  88AB               	bsf	4011,4,c	;volatile
  8564  001BB4  D002               	goto	l5610
  8565  001BB6                     l856:
  8566  001BB6  8AAB               	bsf	4011,5,c	;volatile
  8567  001BB8  D000               	goto	l5610
  8568  001BBA                     l5610:
  8569  001BBA  B813               	btfsc	OpenUSART@config,4,c
  8570  001BBC  84AC               	bsf	4012,2,c	;volatile
  8571  001BBE  989E               	bcf	3998,4,c	;volatile
  8572  001BC0  AA13               	btfss	OpenUSART@config,5,c
  8573  001BC2  D002               	goto	l5618
  8574  001BC4  86AB               	bsf	4011,3,c	;volatile
  8575  001BC6  D000               	goto	l5618
  8576  001BC8                     l5618:
  8577  001BC8  AC13               	btfss	OpenUSART@config,6,c
  8578  001BCA  D002               	goto	l860
  8579  001BCC  8A9D               	bsf	3997,5,c	;volatile
  8580  001BCE  D001               	goto	l861
  8581  001BD0                     l860:
  8582  001BD0  9A9D               	bcf	3997,5,c	;volatile
  8583  001BD2                     l861:
  8584  001BD2  9A9E               	bcf	3998,5,c	;volatile
  8585  001BD4  AE13               	btfss	OpenUSART@config,7,c
  8586  001BD6  D002               	goto	l862
  8587  001BD8  889D               	bsf	3997,4,c	;volatile
  8588  001BDA  D001               	goto	l863
  8589  001BDC                     l862:
  8590  001BDC  989D               	bcf	3997,4,c	;volatile
  8591  001BDE                     l863:
  8592  001BDE  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8593  001BE2  5012               	movf	OpenUSART@spbrg+1,w,c
  8594  001BE4  6EB0               	movwf	4016,c	;volatile
  8595  001BE6  8AAC               	bsf	4012,5,c	;volatile
  8596  001BE8  8EAB               	bsf	4011,7,c	;volatile
  8597  001BEA  9C94               	bcf	3988,6,c	;volatile
  8598  001BEC  8E94               	bsf	3988,7,c	;volatile
  8599  001BEE  B8AC               	btfsc	4012,4,c	;volatile
  8600  001BF0  BEAC               	btfsc	4012,7,c	;volatile
  8601  001BF2  D002               	goto	l865
  8602  001BF4  8C94               	bsf	3988,6,c	;volatile
  8603  001BF6  D000               	goto	l865
  8604  001BF8                     l865:
  8605  001BF8  0012               	return		;funcret
  8606  001BFA                     __end_of_OpenUSART:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           intcon	equ	0xFF2
  8615                           intcon2	equ	0xFF1
  8616                           postinc0	equ	0xFEE
  8617                           wreg	equ	0xFE8
  8618                           postdec1	equ	0xFE5
  8619                           fsr1l	equ	0xFE1
  8620                           indf2	equ	0xFDF
  8621                           postinc2	equ	0xFDE
  8622                           postdec2	equ	0xFDD
  8623                           fsr2h	equ	0xFDA
  8624                           fsr2l	equ	0xFD9
  8625                           status	equ	0xFD8
  8626                           
  8627 ;; *************** function _init_INTERRUPT *****************
  8628 ;; Defined at:
  8629 ;;		line 14 in file "Interrupt.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;		None
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;		None
  8634 ;; Return value:  Size  Location     Type
  8635 ;;		None               void
  8636 ;; Registers used:
  8637 ;;		wreg, status,2
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;Total ram usage:        0 bytes
  8648 ;; Hardware stack levels used:    1
  8649 ;; Hardware stack levels required when called:    3
  8650 ;; This function calls:
  8651 ;;		Nothing
  8652 ;; This function is called by:
  8653 ;;		_Do_Init
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           	psect	text41
  8658  002310                     __ptext41:
  8659                           	opt stack 0
  8660  002310                     _init_INTERRUPT:
  8661                           	opt stack 26
  8662                           
  8663                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  8664                           
  8665                           ;incstack = 0
  8666  002310  92F2               	bcf	intcon,1,c	;volatile
  8667                           
  8668                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  8669  002312  9CF1               	bcf	intcon2,6,c	;volatile
  8670                           
  8671                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  8672  002314  88F2               	bsf	intcon,4,c	;volatile
  8673                           
  8674                           ;Interrupt.c: 19: TMR1H = 0;
  8675  002316  0E00               	movlw	0
  8676  002318  6ECF               	movwf	4047,c	;volatile
  8677                           
  8678                           ;Interrupt.c: 20: TMR1L = 0;
  8679  00231A  0E00               	movlw	0
  8680  00231C  6ECE               	movwf	4046,c	;volatile
  8681                           
  8682                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  8683  00231E  909E               	bcf	3998,0,c	;volatile
  8684                           
  8685                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  8686  002320  809D               	bsf	3997,0,c	;volatile
  8687                           
  8688                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  8689  002322  8CF2               	bsf	intcon,6,c	;volatile
  8690                           
  8691                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  8692  002324  8EF2               	bsf	intcon,7,c	;volatile
  8693  002326  0012               	return		;funcret
  8694  002328                     __end_of_init_INTERRUPT:
  8695                           	opt stack 0
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           postinc0	equ	0xFEE
  8705                           wreg	equ	0xFE8
  8706                           postdec1	equ	0xFE5
  8707                           fsr1l	equ	0xFE1
  8708                           indf2	equ	0xFDF
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _I2C_Init *****************
  8716 ;; Defined at:
  8717 ;;		line 19 in file "I2C_Soft.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  c               4   16[COMRAM] unsigned long 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;		None               void
  8724 ;; Registers used:
  8725 ;;		wreg, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        4 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    4
  8738 ;; This function calls:
  8739 ;;		_i2cHighScl
  8740 ;;		_i2cHighSda
  8741 ;; This function is called by:
  8742 ;;		_Do_Init
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           	psect	text42
  8747  002448                     __ptext42:
  8748                           	opt stack 0
  8749  002448                     _I2C_Init:
  8750                           	opt stack 25
  8751                           
  8752                           ;I2C_Soft.c: 21: i2cHighScl();
  8753                           
  8754                           ;incstack = 0
  8755  002448  EC13  F012         	call	_i2cHighScl	;wreg free
  8756                           
  8757                           ;I2C_Soft.c: 22: i2cHighSda();
  8758  00244C  EC3B  F012         	call	_i2cHighSda	;wreg free
  8759  002450  0012               	return		;funcret
  8760  002452                     __end_of_I2C_Init:
  8761                           	opt stack 0
  8762                           tblptru	equ	0xFF8
  8763                           tblptrh	equ	0xFF7
  8764                           tblptrl	equ	0xFF6
  8765                           tablat	equ	0xFF5
  8766                           prodh	equ	0xFF4
  8767                           prodl	equ	0xFF3
  8768                           intcon	equ	0xFF2
  8769                           intcon2	equ	0xFF1
  8770                           postinc0	equ	0xFEE
  8771                           wreg	equ	0xFE8
  8772                           postdec1	equ	0xFE5
  8773                           fsr1l	equ	0xFE1
  8774                           indf2	equ	0xFDF
  8775                           postinc2	equ	0xFDE
  8776                           postdec2	equ	0xFDD
  8777                           fsr2h	equ	0xFDA
  8778                           fsr2l	equ	0xFD9
  8779                           status	equ	0xFD8
  8780                           
  8781 ;; *************** function _DS1621_Init *****************
  8782 ;; Defined at:
  8783 ;;		line 21 in file "I2C_Support.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;		None
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  Device          1   21[COMRAM] unsigned char 
  8788 ;; Return value:  Size  Location     Type
  8789 ;;		None               void
  8790 ;; Registers used:
  8791 ;;		wreg, status,2, status,0, cstack
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;Total ram usage:        1 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    6
  8804 ;; This function calls:
  8805 ;;		_I2C_Write_Cmd_Only
  8806 ;;		_I2C_Write_Cmd_Write_Data
  8807 ;; This function is called by:
  8808 ;;		_Do_Init
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           	psect	text43
  8813  0022BC                     __ptext43:
  8814                           	opt stack 0
  8815  0022BC                     _DS1621_Init:
  8816                           	opt stack 23
  8817                           
  8818                           ;I2C_Support.c: 23: char Device = 0x48;
  8819                           
  8820                           ;incstack = 0
  8821  0022BC  0E48               	movlw	72
  8822  0022BE  6E16               	movwf	DS1621_Init@Device,c
  8823                           
  8824                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8825  0022C0  0EAC               	movlw	172
  8826  0022C2  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8827  0022C4  0E02               	movlw	2
  8828  0022C6  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8829  0022C8  5016               	movf	DS1621_Init@Device,w,c
  8830  0022CA  EC4E  F011         	call	_I2C_Write_Cmd_Write_Data
  8831                           
  8832                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8833  0022CE  0EEE               	movlw	238
  8834  0022D0  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8835  0022D2  5016               	movf	DS1621_Init@Device,w,c
  8836  0022D4  EC7B  F011         	call	_I2C_Write_Cmd_Only
  8837  0022D8  0012               	return		;funcret
  8838  0022DA                     __end_of_DS1621_Init:
  8839                           	opt stack 0
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           postdec1	equ	0xFE5
  8851                           fsr1l	equ	0xFE1
  8852                           indf2	equ	0xFDF
  8853                           postinc2	equ	0xFDE
  8854                           postdec2	equ	0xFDD
  8855                           fsr2h	equ	0xFDA
  8856                           fsr2l	equ	0xFD9
  8857                           status	equ	0xFD8
  8858                           
  8859 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8860 ;; Defined at:
  8861 ;;		line 157 in file "I2C_Soft.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;  Device          1    wreg     unsigned char 
  8864 ;;  Cmd             1   18[COMRAM] unsigned char 
  8865 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  Device          1   20[COMRAM] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;Total ram usage:        3 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    5
  8884 ;; This function calls:
  8885 ;;		_I2C_Start
  8886 ;;		_I2C_Stop
  8887 ;;		_I2C_Write
  8888 ;; This function is called by:
  8889 ;;		_DS1621_Init
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text44
  8894  00229C                     __ptext44:
  8895                           	opt stack 0
  8896  00229C                     _I2C_Write_Cmd_Write_Data:
  8897                           	opt stack 23
  8898                           
  8899                           ;incstack = 0
  8900                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8901  00229C  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8902                           
  8903                           ;I2C_Soft.c: 159: I2C_Start();
  8904  00229E  ECE2  F011         	call	_I2C_Start	;wreg free
  8905                           
  8906                           ;I2C_Soft.c: 160: I2C_Write((Device << 1) | 0);
  8907  0022A2  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8908  0022A4  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8909  0022A6  EC5C  F010         	call	_I2C_Write
  8910                           
  8911                           ;I2C_Soft.c: 161: I2C_Write(Cmd);
  8912  0022AA  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8913  0022AC  EC5C  F010         	call	_I2C_Write
  8914                           
  8915                           ;I2C_Soft.c: 162: I2C_Write(Data_Out);
  8916  0022B0  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8917  0022B2  EC5C  F010         	call	_I2C_Write
  8918                           
  8919                           ;I2C_Soft.c: 163: I2C_Stop();
  8920  0022B6  ECD9  F011         	call	_I2C_Stop	;wreg free
  8921  0022BA  0012               	return		;funcret
  8922  0022BC                     __end_of_I2C_Write_Cmd_Write_Data:
  8923                           	opt stack 0
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           prodh	equ	0xFF4
  8929                           prodl	equ	0xFF3
  8930                           intcon	equ	0xFF2
  8931                           intcon2	equ	0xFF1
  8932                           postinc0	equ	0xFEE
  8933                           wreg	equ	0xFE8
  8934                           postdec1	equ	0xFE5
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           fsr2h	equ	0xFDA
  8940                           fsr2l	equ	0xFD9
  8941                           status	equ	0xFD8
  8942                           
  8943 ;; *************** function _I2C_Write_Cmd_Only *****************
  8944 ;; Defined at:
  8945 ;;		line 149 in file "I2C_Soft.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  Device          1    wreg     unsigned char 
  8948 ;;  Cmd             1   18[COMRAM] unsigned char 
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  Device          1   19[COMRAM] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;		None               void
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0, cstack
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8960 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;Total ram usage:        2 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    5
  8967 ;; This function calls:
  8968 ;;		_I2C_Start
  8969 ;;		_I2C_Stop
  8970 ;;		_I2C_Write
  8971 ;; This function is called by:
  8972 ;;		_DS1621_Init
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           	psect	text45
  8977  0022F6                     __ptext45:
  8978                           	opt stack 0
  8979  0022F6                     _I2C_Write_Cmd_Only:
  8980                           	opt stack 23
  8981                           
  8982                           ;incstack = 0
  8983                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8984  0022F6  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8985                           
  8986                           ;I2C_Soft.c: 151: I2C_Start();
  8987  0022F8  ECE2  F011         	call	_I2C_Start	;wreg free
  8988                           
  8989                           ;I2C_Soft.c: 152: I2C_Write((Device << 1) | 0);
  8990  0022FC  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8991  0022FE  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8992  002300  EC5C  F010         	call	_I2C_Write
  8993                           
  8994                           ;I2C_Soft.c: 153: I2C_Write(Cmd);
  8995  002304  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8996  002306  EC5C  F010         	call	_I2C_Write
  8997                           
  8998                           ;I2C_Soft.c: 154: I2C_Stop();
  8999  00230A  ECD9  F011         	call	_I2C_Stop	;wreg free
  9000  00230E  0012               	return		;funcret
  9001  002310                     __end_of_I2C_Write_Cmd_Only:
  9002                           	opt stack 0
  9003                           tblptru	equ	0xFF8
  9004                           tblptrh	equ	0xFF7
  9005                           tblptrl	equ	0xFF6
  9006                           tablat	equ	0xFF5
  9007                           prodh	equ	0xFF4
  9008                           prodl	equ	0xFF3
  9009                           intcon	equ	0xFF2
  9010                           intcon2	equ	0xFF1
  9011                           postinc0	equ	0xFEE
  9012                           wreg	equ	0xFE8
  9013                           postdec1	equ	0xFE5
  9014                           fsr1l	equ	0xFE1
  9015                           indf2	equ	0xFDF
  9016                           postinc2	equ	0xFDE
  9017                           postdec2	equ	0xFDD
  9018                           fsr2h	equ	0xFDA
  9019                           fsr2l	equ	0xFD9
  9020                           status	equ	0xFD8
  9021                           
  9022 ;; *************** function _Decrease_Speed *****************
  9023 ;; Defined at:
  9024 ;;		line 85 in file "Fan_Support.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    7
  9045 ;; This function calls:
  9046 ;;		_Do_Beep
  9047 ;;		_do_update_pwm
  9048 ;; This function is called by:
  9049 ;;		_main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text46
  9054  002232                     __ptext46:
  9055                           	opt stack 0
  9056  002232                     _Decrease_Speed:
  9057                           	opt stack 23
  9058                           
  9059                           ;Fan_Support.c: 87: if (duty_cycle == 0)
  9060                           
  9061                           ;incstack = 0
  9062  002232  505C               	movf	_duty_cycle,w,c
  9063  002234  A4D8               	btfss	status,2,c
  9064  002236  D008               	goto	l6632
  9065                           
  9066                           ;Fan_Support.c: 88: {
  9067                           ;Fan_Support.c: 89: Do_Beep();
  9068  002238  ECBD  F011         	call	_Do_Beep	;wreg free
  9069                           
  9070                           ;Fan_Support.c: 90: Do_Beep();
  9071  00223C  ECBD  F011         	call	_Do_Beep	;wreg free
  9072                           
  9073                           ;Fan_Support.c: 91: do_update_pwm(0);
  9074  002240  0E00               	movlw	0
  9075  002242  ECE1  F00B         	call	_do_update_pwm
  9076                           
  9077                           ;Fan_Support.c: 92: }
  9078  002246  D006               	goto	l272
  9079  002248                     l6632:
  9080                           
  9081                           ;Fan_Support.c: 93: else
  9082                           ;Fan_Support.c: 94: {
  9083                           ;Fan_Support.c: 95: duty_cycle -= 5;
  9084  002248  0E05               	movlw	5
  9085  00224A  5E5C               	subwf	_duty_cycle,f,c
  9086                           
  9087                           ;Fan_Support.c: 96: do_update_pwm(duty_cycle);
  9088  00224C  505C               	movf	_duty_cycle,w,c
  9089  00224E  ECE1  F00B         	call	_do_update_pwm
  9090  002252  D000               	goto	l272
  9091  002254                     l272:
  9092  002254  0012               	return		;funcret
  9093  002256                     __end_of_Decrease_Speed:
  9094                           	opt stack 0
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           intcon2	equ	0xFF1
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function _Do_Beep *****************
  9115 ;; Defined at:
  9116 ;;		line 151 in file "Fan_Support.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        0 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    6
  9137 ;; This function calls:
  9138 ;;		_Activate_Buzzer
  9139 ;;		_Deactivate_Buzzer
  9140 ;;		_Wait_One_Sec
  9141 ;;		_do_update_pwm
  9142 ;; This function is called by:
  9143 ;;		_main
  9144 ;;		_Increase_Speed
  9145 ;;		_Decrease_Speed
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text47
  9150  00237A                     __ptext47:
  9151                           	opt stack 0
  9152  00237A                     _Do_Beep:
  9153                           	opt stack 23
  9154                           
  9155                           ;Fan_Support.c: 153: Activate_Buzzer();
  9156                           
  9157                           ;incstack = 0
  9158  00237A  ECD0  F011         	call	_Activate_Buzzer	;wreg free
  9159                           
  9160                           ;Fan_Support.c: 154: Wait_One_Sec();
  9161  00237E  EC2B  F011         	call	_Wait_One_Sec	;wreg free
  9162                           
  9163                           ;Fan_Support.c: 155: Deactivate_Buzzer();
  9164  002382  EC33  F012         	call	_Deactivate_Buzzer	;wreg free
  9165                           
  9166                           ;Fan_Support.c: 156: do_update_pwm(duty_cycle);
  9167  002386  505C               	movf	_duty_cycle,w,c
  9168  002388  ECE1  F00B         	call	_do_update_pwm
  9169  00238C  0012               	return		;funcret
  9170  00238E                     __end_of_Do_Beep:
  9171                           	opt stack 0
  9172                           tblptru	equ	0xFF8
  9173                           tblptrh	equ	0xFF7
  9174                           tblptrl	equ	0xFF6
  9175                           tablat	equ	0xFF5
  9176                           prodh	equ	0xFF4
  9177                           prodl	equ	0xFF3
  9178                           intcon	equ	0xFF2
  9179                           intcon2	equ	0xFF1
  9180                           postinc0	equ	0xFEE
  9181                           wreg	equ	0xFE8
  9182                           postdec1	equ	0xFE5
  9183                           fsr1l	equ	0xFE1
  9184                           indf2	equ	0xFDF
  9185                           postinc2	equ	0xFDE
  9186                           postdec2	equ	0xFDD
  9187                           fsr2h	equ	0xFDA
  9188                           fsr2l	equ	0xFD9
  9189                           status	equ	0xFD8
  9190                           
  9191 ;; *************** function _do_update_pwm *****************
  9192 ;; Defined at:
  9193 ;;		line 100 in file "Fan_Support.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  duty_cycle      1    wreg     unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9198 ;;  dc_f            3   61[COMRAM] float 
  9199 ;;  dc_I            2   65[COMRAM] int 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;		None               void
  9202 ;; Registers used:
  9203 ;;		wreg, status,2, status,0, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;Total ram usage:        9 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    5
  9216 ;; This function calls:
  9217 ;;		___ftdiv
  9218 ;;		___ftmul
  9219 ;;		___fttol
  9220 ;;		___lbtoft
  9221 ;; This function is called by:
  9222 ;;		_Turn_On_Fan
  9223 ;;		_Increase_Speed
  9224 ;;		_Decrease_Speed
  9225 ;;		_Do_Beep
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           	psect	text48
  9230  0017C2                     __ptext48:
  9231                           	opt stack 0
  9232  0017C2                     _do_update_pwm:
  9233                           	opt stack 23
  9234                           
  9235                           ;incstack = 0
  9236                           ;do_update_pwm@duty_cycle stored from wreg
  9237  0017C2  6E41               	movwf	do_update_pwm@duty_cycle,c
  9238                           
  9239                           ;Fan_Support.c: 102: float dc_f;
  9240                           ;Fan_Support.c: 103: int dc_I;
  9241                           ;Fan_Support.c: 104: PR2 = 0b00000100 ;
  9242  0017C4  0E04               	movlw	4
  9243  0017C6  6ECB               	movwf	4043,c	;volatile
  9244                           
  9245                           ;Fan_Support.c: 105: T2CON = 0b00000111 ;
  9246  0017C8  0E07               	movlw	7
  9247  0017CA  6ECA               	movwf	4042,c	;volatile
  9248                           
  9249                           ;Fan_Support.c: 106: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9250  0017CC  0E00               	movlw	0
  9251  0017CE  6E20               	movwf	___ftmul@f2,c
  9252  0017D0  0E80               	movlw	128
  9253  0017D2  6E21               	movwf	___ftmul@f2+1,c
  9254  0017D4  0E40               	movlw	64
  9255  0017D6  6E22               	movwf	___ftmul@f2+2,c
  9256  0017D8  5041               	movf	do_update_pwm@duty_cycle,w,c
  9257  0017DA  EC06  F011         	call	___lbtoft
  9258  0017DE  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9259  0017E2  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9260  0017E6  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9261  0017EA  EC37  F009         	call	___ftmul	;wreg free
  9262  0017EE  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9263  0017F2  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9264  0017F6  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9265  0017FA  0E00               	movlw	0
  9266  0017FC  6E2F               	movwf	___ftdiv@f2,c
  9267  0017FE  0EA0               	movlw	160
  9268  001800  6E30               	movwf	___ftdiv@f2+1,c
  9269  001802  0E41               	movlw	65
  9270  001804  6E31               	movwf	___ftdiv@f2+2,c
  9271  001806  EC9F  F00A         	call	___ftdiv	;wreg free
  9272  00180A  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9273  00180E  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9274  001812  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9275                           
  9276                           ;Fan_Support.c: 107: dc_I = (int) dc_f;
  9277  001816  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9278  00181A  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9279  00181E  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9280  001822  EC2C  F00A         	call	___fttol	;wreg free
  9281  001826  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9282  00182A  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9283                           
  9284                           ;Fan_Support.c: 108: if (dc_I > duty_cycle) dc_I++;
  9285  00182E  5041               	movf	do_update_pwm@duty_cycle,w,c
  9286  001830  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9287  001832  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9288  001834  5042               	movf	do_update_pwm@dc_I,w,c
  9289  001836  5C3B               	subwf	??_do_update_pwm,w,c
  9290  001838  503C               	movf	??_do_update_pwm+1,w,c
  9291  00183A  0A80               	xorlw	128
  9292  00183C  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9293  00183E  5043               	movf	do_update_pwm@dc_I+1,w,c
  9294  001840  0A80               	xorlw	128
  9295  001842  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9296  001844  B0D8               	btfsc	status,0,c
  9297  001846  D003               	goto	l5652
  9298  001848  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9299  00184A  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9300  00184C  D000               	goto	l5652
  9301  00184E                     l5652:
  9302                           
  9303                           ;Fan_Support.c: 109: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9304  00184E  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9305  001852  0E03               	movlw	3
  9306  001854  163B               	andwf	??_do_update_pwm,f,c
  9307  001856  383B               	swapf	??_do_update_pwm,w,c
  9308  001858  0BF0               	andlw	240
  9309  00185A  090C               	iorlw	12
  9310  00185C  6EBD               	movwf	4029,c	;volatile
  9311                           
  9312                           ;Fan_Support.c: 110: CCPR1L = (dc_I) >> 2;
  9313  00185E  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9314  001862  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9315  001866  343C               	rlcf	??_do_update_pwm+1,w,c
  9316  001868  323C               	rrcf	??_do_update_pwm+1,f,c
  9317  00186A  323B               	rrcf	??_do_update_pwm,f,c
  9318  00186C  343C               	rlcf	??_do_update_pwm+1,w,c
  9319  00186E  323C               	rrcf	??_do_update_pwm+1,f,c
  9320  001870  323B               	rrcf	??_do_update_pwm,f,c
  9321  001872  503B               	movf	??_do_update_pwm,w,c
  9322  001874  6EBE               	movwf	4030,c	;volatile
  9323  001876  0012               	return		;funcret
  9324  001878                     __end_of_do_update_pwm:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           intcon	equ	0xFF2
  9333                           intcon2	equ	0xFF1
  9334                           postinc0	equ	0xFEE
  9335                           wreg	equ	0xFE8
  9336                           postdec1	equ	0xFE5
  9337                           fsr1l	equ	0xFE1
  9338                           indf2	equ	0xFDF
  9339                           postinc2	equ	0xFDE
  9340                           postdec2	equ	0xFDD
  9341                           fsr2h	equ	0xFDA
  9342                           fsr2l	equ	0xFD9
  9343                           status	equ	0xFD8
  9344                           
  9345 ;; *************** function ___lbtoft *****************
  9346 ;; Defined at:
  9347 ;;		line 27 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;  c               1    wreg     unsigned char 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  c               1   27[COMRAM] unsigned char 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  3   24[COMRAM] float 
  9354 ;; Registers used:
  9355 ;;		wreg, status,2, status,0, cstack
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9361 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;Total ram usage:        4 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    4
  9368 ;; This function calls:
  9369 ;;		___ftpack
  9370 ;; This function is called by:
  9371 ;;		_do_update_pwm
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           	psect	text49
  9376  00220C                     __ptext49:
  9377                           	opt stack 0
  9378  00220C                     ___lbtoft:
  9379                           	opt stack 23
  9380                           
  9381                           ;incstack = 0
  9382                           ;___lbtoft@c stored from wreg
  9383  00220C  6E1C               	movwf	___lbtoft@c,c
  9384  00220E  501C               	movf	___lbtoft@c,w,c
  9385  002210  6E11               	movwf	___ftpack@arg,c
  9386  002212  6A12               	clrf	___ftpack@arg+1,c
  9387  002214  6A13               	clrf	___ftpack@arg+2,c
  9388  002216  0E8E               	movlw	142
  9389  002218  6E14               	movwf	___ftpack@exp,c
  9390  00221A  0E00               	movlw	0
  9391  00221C  6E15               	movwf	___ftpack@sign,c
  9392  00221E  EC7E  F00B         	call	___ftpack	;wreg free
  9393  002222  C011  F019         	movff	?___ftpack,?___lbtoft
  9394  002226  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9395  00222A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9396  00222E  D000               	goto	l1325
  9397  002230                     l1325:
  9398  002230  0012               	return		;funcret
  9399  002232                     __end_of___lbtoft:
  9400                           	opt stack 0
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           intcon2	equ	0xFF1
  9409                           postinc0	equ	0xFEE
  9410                           wreg	equ	0xFE8
  9411                           postdec1	equ	0xFE5
  9412                           fsr1l	equ	0xFE1
  9413                           indf2	equ	0xFDF
  9414                           postinc2	equ	0xFDE
  9415                           postdec2	equ	0xFDD
  9416                           fsr2h	equ	0xFDA
  9417                           fsr2l	equ	0xFD9
  9418                           status	equ	0xFD8
  9419                           
  9420 ;; *************** function ___fttol *****************
  9421 ;; Defined at:
  9422 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;  f1              3   16[COMRAM] float 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;  lval            4   26[COMRAM] unsigned long 
  9427 ;;  exp1            1   30[COMRAM] unsigned char 
  9428 ;;  sign1           1   25[COMRAM] unsigned char 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  4   16[COMRAM] long 
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;Total ram usage:       15 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    3
  9445 ;; This function calls:
  9446 ;;		Nothing
  9447 ;; This function is called by:
  9448 ;;		_do_update_pwm
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           	psect	text50
  9453  001458                     __ptext50:
  9454                           	opt stack 0
  9455  001458                     ___fttol:
  9456                           	opt stack 24
  9457                           
  9458                           ;incstack = 0
  9459  001458  C013  F015         	movff	___fttol@f1+2,??___fttol
  9460  00145C  6A16               	clrf	(??___fttol+1)& (0+255),c
  9461  00145E  6A17               	clrf	(??___fttol+2)& (0+255),c
  9462  001460  3412               	rlcf	___fttol@f1+1,w,c
  9463  001462  3615               	rlcf	??___fttol& (0+255),f,c
  9464  001464  E301               	bnc	u4061
  9465  001466  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9466  001468                     u4061:
  9467  001468  5015               	movf	??___fttol,w,c
  9468  00146A  6E1F               	movwf	___fttol@exp1,c
  9469  00146C  501F               	movf	___fttol@exp1,w,c
  9470  00146E  A4D8               	btfss	status,2,c
  9471  001470  D002               	goto	l5548
  9472  001472  D039               	goto	l5572
  9473  001474  D063               	goto	l1284
  9474  001476                     l5548:
  9475  001476  0E17               	movlw	23
  9476  001478  6E15               	movwf	??___fttol& (0+255),c
  9477  00147A  C011  F016         	movff	___fttol@f1,??___fttol+1
  9478  00147E  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9479  001482  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9480  001486  2815               	incf	??___fttol,w,c
  9481  001488  6E19               	movwf	(??___fttol+4)& (0+255),c
  9482  00148A  D004               	goto	u4080
  9483  00148C                     u4085:
  9484  00148C  90D8               	bcf	status,0,c
  9485  00148E  3218               	rrcf	??___fttol+3,f,c
  9486  001490  3217               	rrcf	??___fttol+2,f,c
  9487  001492  3216               	rrcf	??___fttol+1,f,c
  9488  001494                     u4080:
  9489  001494  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9490  001496  D7FA               	goto	u4085
  9491  001498  5016               	movf	??___fttol+1,w,c
  9492  00149A  6E1A               	movwf	___fttol@sign1,c
  9493  00149C  8E12               	bsf	___fttol@f1+1,7,c
  9494  00149E  0EFF               	movlw	255
  9495  0014A0  1611               	andwf	___fttol@f1,f,c
  9496  0014A2  0EFF               	movlw	255
  9497  0014A4  1612               	andwf	___fttol@f1+1,f,c
  9498  0014A6  0E00               	movlw	0
  9499  0014A8  1613               	andwf	___fttol@f1+2,f,c
  9500  0014AA  5011               	movf	___fttol@f1,w,c
  9501  0014AC  6E1B               	movwf	___fttol@lval,c
  9502  0014AE  5012               	movf	___fttol@f1+1,w,c
  9503  0014B0  6E1C               	movwf	___fttol@lval+1,c
  9504  0014B2  5013               	movf	___fttol@f1+2,w,c
  9505  0014B4  6E1D               	movwf	___fttol@lval+2,c
  9506  0014B6  6A1E               	clrf	___fttol@lval+3,c
  9507  0014B8  0E8E               	movlw	142
  9508  0014BA  5E1F               	subwf	___fttol@exp1,f,c
  9509  0014BC  AE1F               	btfss	___fttol@exp1,7,c
  9510  0014BE  D010               	goto	l5570
  9511  0014C0  501F               	movf	___fttol@exp1,w,c
  9512  0014C2  0A80               	xorlw	128
  9513  0014C4  0F8F               	addlw	143
  9514  0014C6  B0D8               	btfsc	status,0,c
  9515  0014C8  D003               	goto	l5566
  9516  0014CA  D00D               	goto	l5572
  9517  0014CC  D037               	goto	l1284
  9518  0014CE  D000               	goto	l5566
  9519  0014D0                     l5566:
  9520  0014D0  90D8               	bcf	status,0,c
  9521  0014D2  321E               	rrcf	___fttol@lval+3,f,c
  9522  0014D4  321D               	rrcf	___fttol@lval+2,f,c
  9523  0014D6  321C               	rrcf	___fttol@lval+1,f,c
  9524  0014D8  321B               	rrcf	___fttol@lval,f,c
  9525  0014DA  3E1F               	incfsz	___fttol@exp1,f,c
  9526  0014DC  D7F9               	goto	l5566
  9527  0014DE  D019               	goto	l5580
  9528  0014E0                     l5570:
  9529  0014E0  0E17               	movlw	23
  9530  0014E2  641F               	cpfsgt	___fttol@exp1,c
  9531  0014E4  D011               	goto	l5578
  9532  0014E6                     l5572:
  9533  0014E6  0E00               	movlw	0
  9534  0014E8  6E11               	movwf	?___fttol,c
  9535  0014EA  0E00               	movlw	0
  9536  0014EC  6E12               	movwf	?___fttol+1,c
  9537  0014EE  0E00               	movlw	0
  9538  0014F0  6E13               	movwf	?___fttol+2,c
  9539  0014F2  0E00               	movlw	0
  9540  0014F4  6E14               	movwf	?___fttol+3,c
  9541  0014F6  D022               	goto	l1284
  9542  0014F8  D007               	goto	l5578
  9543  0014FA                     l5576:
  9544  0014FA  90D8               	bcf	status,0,c
  9545  0014FC  361B               	rlcf	___fttol@lval,f,c
  9546  0014FE  361C               	rlcf	___fttol@lval+1,f,c
  9547  001500  361D               	rlcf	___fttol@lval+2,f,c
  9548  001502  361E               	rlcf	___fttol@lval+3,f,c
  9549  001504  061F               	decf	___fttol@exp1,f,c
  9550  001506  D000               	goto	l5578
  9551  001508                     l5578:
  9552  001508  501F               	movf	___fttol@exp1,w,c
  9553  00150A  B4D8               	btfsc	status,2,c
  9554  00150C  D002               	goto	l5580
  9555  00150E  D7F5               	goto	l5576
  9556  001510  D000               	goto	l5580
  9557  001512                     l5580:
  9558  001512  501A               	movf	___fttol@sign1,w,c
  9559  001514  B4D8               	btfsc	status,2,c
  9560  001516  D009               	goto	l5584
  9561  001518  1E1E               	comf	___fttol@lval+3,f,c
  9562  00151A  1E1D               	comf	___fttol@lval+2,f,c
  9563  00151C  1E1C               	comf	___fttol@lval+1,f,c
  9564  00151E  6C1B               	negf	___fttol@lval,c
  9565  001520  0E00               	movlw	0
  9566  001522  221C               	addwfc	___fttol@lval+1,f,c
  9567  001524  221D               	addwfc	___fttol@lval+2,f,c
  9568  001526  221E               	addwfc	___fttol@lval+3,f,c
  9569  001528  D000               	goto	l5584
  9570  00152A                     l5584:
  9571  00152A  C01B  F011         	movff	___fttol@lval,?___fttol
  9572  00152E  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9573  001532  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9574  001536  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9575  00153A  D000               	goto	l1284
  9576  00153C                     l1284:
  9577  00153C  0012               	return		;funcret
  9578  00153E                     __end_of___fttol:
  9579                           	opt stack 0
  9580                           tblptru	equ	0xFF8
  9581                           tblptrh	equ	0xFF7
  9582                           tblptrl	equ	0xFF6
  9583                           tablat	equ	0xFF5
  9584                           prodh	equ	0xFF4
  9585                           prodl	equ	0xFF3
  9586                           intcon	equ	0xFF2
  9587                           intcon2	equ	0xFF1
  9588                           postinc0	equ	0xFEE
  9589                           wreg	equ	0xFE8
  9590                           postdec1	equ	0xFE5
  9591                           fsr1l	equ	0xFE1
  9592                           indf2	equ	0xFDF
  9593                           postinc2	equ	0xFDE
  9594                           postdec2	equ	0xFDD
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function ___ftmul *****************
  9600 ;; Defined at:
  9601 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;  f1              3   28[COMRAM] float 
  9604 ;;  f2              3   31[COMRAM] float 
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9607 ;;  sign            1   42[COMRAM] unsigned char 
  9608 ;;  cntr            1   41[COMRAM] unsigned char 
  9609 ;;  exp             1   37[COMRAM] unsigned char 
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  3   28[COMRAM] float 
  9612 ;; Registers used:
  9613 ;;		wreg, status,2, status,0, cstack
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9619 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;Total ram usage:       15 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    4
  9626 ;; This function calls:
  9627 ;;		___ftpack
  9628 ;; This function is called by:
  9629 ;;		_do_update_pwm
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           	psect	text51
  9634  00126E                     __ptext51:
  9635                           	opt stack 0
  9636  00126E                     ___ftmul:
  9637                           	opt stack 23
  9638                           
  9639                           ;incstack = 0
  9640  00126E  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9641  001272  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9642  001274  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9643  001276  341E               	rlcf	___ftmul@f1+1,w,c
  9644  001278  3623               	rlcf	??___ftmul& (0+255),f,c
  9645  00127A  E301               	bnc	u4001
  9646  00127C  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9647  00127E                     u4001:
  9648  00127E  5023               	movf	??___ftmul,w,c
  9649  001280  6E26               	movwf	___ftmul@exp,c
  9650  001282  5026               	movf	___ftmul@exp,w,c
  9651  001284  A4D8               	btfss	status,2,c
  9652  001286  D002               	goto	l5500
  9653  001288  D00E               	goto	l5502
  9654  00128A  D06C               	goto	l1263
  9655  00128C                     l5500:
  9656  00128C  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9657  001290  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9658  001292  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9659  001294  3421               	rlcf	___ftmul@f2+1,w,c
  9660  001296  3623               	rlcf	??___ftmul& (0+255),f,c
  9661  001298  E301               	bnc	u4021
  9662  00129A  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9663  00129C                     u4021:
  9664  00129C  5023               	movf	??___ftmul,w,c
  9665  00129E  6E2B               	movwf	___ftmul@sign,c
  9666  0012A0  502B               	movf	___ftmul@sign,w,c
  9667  0012A2  A4D8               	btfss	status,2,c
  9668  0012A4  D007               	goto	l5506
  9669  0012A6                     l5502:
  9670  0012A6  0E00               	movlw	0
  9671  0012A8  6E1D               	movwf	?___ftmul,c
  9672  0012AA  0E00               	movlw	0
  9673  0012AC  6E1E               	movwf	?___ftmul+1,c
  9674  0012AE  0E00               	movlw	0
  9675  0012B0  6E1F               	movwf	?___ftmul+2,c
  9676  0012B2  D058               	goto	l1263
  9677  0012B4                     l5506:
  9678  0012B4  502B               	movf	___ftmul@sign,w,c
  9679  0012B6  0F7B               	addlw	123
  9680  0012B8  2626               	addwf	___ftmul@exp,f,c
  9681  0012BA  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9682  0012BE  5022               	movf	___ftmul@f2+2,w,c
  9683  0012C0  1A2B               	xorwf	___ftmul@sign,f,c
  9684  0012C2  0E80               	movlw	128
  9685  0012C4  162B               	andwf	___ftmul@sign,f,c
  9686  0012C6  8E1E               	bsf	___ftmul@f1+1,7,c
  9687  0012C8  8E21               	bsf	___ftmul@f2+1,7,c
  9688  0012CA  0EFF               	movlw	255
  9689  0012CC  1620               	andwf	___ftmul@f2,f,c
  9690  0012CE  0EFF               	movlw	255
  9691  0012D0  1621               	andwf	___ftmul@f2+1,f,c
  9692  0012D2  0E00               	movlw	0
  9693  0012D4  1622               	andwf	___ftmul@f2+2,f,c
  9694  0012D6  0E00               	movlw	0
  9695  0012D8  6E27               	movwf	___ftmul@f3_as_product,c
  9696  0012DA  0E00               	movlw	0
  9697  0012DC  6E28               	movwf	___ftmul@f3_as_product+1,c
  9698  0012DE  0E00               	movlw	0
  9699  0012E0  6E29               	movwf	___ftmul@f3_as_product+2,c
  9700  0012E2  0E07               	movlw	7
  9701  0012E4  6E2A               	movwf	___ftmul@cntr,c
  9702  0012E6  D000               	goto	l5520
  9703  0012E8                     l5520:
  9704  0012E8  A01D               	btfss	___ftmul@f1,0,c
  9705  0012EA  D007               	goto	l5524
  9706  0012EC  5020               	movf	___ftmul@f2,w,c
  9707  0012EE  2627               	addwf	___ftmul@f3_as_product,f,c
  9708  0012F0  5021               	movf	___ftmul@f2+1,w,c
  9709  0012F2  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9710  0012F4  5022               	movf	___ftmul@f2+2,w,c
  9711  0012F6  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9712  0012F8  D000               	goto	l5524
  9713  0012FA                     l5524:
  9714  0012FA  90D8               	bcf	status,0,c
  9715  0012FC  321F               	rrcf	___ftmul@f1+2,f,c
  9716  0012FE  321E               	rrcf	___ftmul@f1+1,f,c
  9717  001300  321D               	rrcf	___ftmul@f1,f,c
  9718  001302  90D8               	bcf	status,0,c
  9719  001304  3620               	rlcf	___ftmul@f2,f,c
  9720  001306  3621               	rlcf	___ftmul@f2+1,f,c
  9721  001308  3622               	rlcf	___ftmul@f2+2,f,c
  9722  00130A  2E2A               	decfsz	___ftmul@cntr,f,c
  9723  00130C  D7ED               	goto	l5520
  9724  00130E  D000               	goto	l5528
  9725  001310                     l5528:
  9726  001310  0E09               	movlw	9
  9727  001312  6E2A               	movwf	___ftmul@cntr,c
  9728  001314  D000               	goto	l5530
  9729  001316                     l5530:
  9730  001316  A01D               	btfss	___ftmul@f1,0,c
  9731  001318  D007               	goto	l5534
  9732  00131A  5020               	movf	___ftmul@f2,w,c
  9733  00131C  2627               	addwf	___ftmul@f3_as_product,f,c
  9734  00131E  5021               	movf	___ftmul@f2+1,w,c
  9735  001320  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9736  001322  5022               	movf	___ftmul@f2+2,w,c
  9737  001324  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9738  001326  D000               	goto	l5534
  9739  001328                     l5534:
  9740  001328  90D8               	bcf	status,0,c
  9741  00132A  321F               	rrcf	___ftmul@f1+2,f,c
  9742  00132C  321E               	rrcf	___ftmul@f1+1,f,c
  9743  00132E  321D               	rrcf	___ftmul@f1,f,c
  9744  001330  90D8               	bcf	status,0,c
  9745  001332  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9746  001334  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9747  001336  3227               	rrcf	___ftmul@f3_as_product,f,c
  9748  001338  2E2A               	decfsz	___ftmul@cntr,f,c
  9749  00133A  D7ED               	goto	l5530
  9750  00133C  D000               	goto	l5538
  9751  00133E                     l5538:
  9752  00133E  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9753  001342  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9754  001346  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9755  00134A  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9756  00134E  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9757  001352  EC7E  F00B         	call	___ftpack	;wreg free
  9758  001356  C011  F01D         	movff	?___ftpack,?___ftmul
  9759  00135A  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9760  00135E  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9761  001362  D000               	goto	l1263
  9762  001364                     l1263:
  9763  001364  0012               	return		;funcret
  9764  001366                     __end_of___ftmul:
  9765                           	opt stack 0
  9766                           tblptru	equ	0xFF8
  9767                           tblptrh	equ	0xFF7
  9768                           tblptrl	equ	0xFF6
  9769                           tablat	equ	0xFF5
  9770                           prodh	equ	0xFF4
  9771                           prodl	equ	0xFF3
  9772                           intcon	equ	0xFF2
  9773                           intcon2	equ	0xFF1
  9774                           postinc0	equ	0xFEE
  9775                           wreg	equ	0xFE8
  9776                           postdec1	equ	0xFE5
  9777                           fsr1l	equ	0xFE1
  9778                           indf2	equ	0xFDF
  9779                           postinc2	equ	0xFDE
  9780                           postdec2	equ	0xFDD
  9781                           fsr2h	equ	0xFDA
  9782                           fsr2l	equ	0xFD9
  9783                           status	equ	0xFD8
  9784                           
  9785 ;; *************** function ___ftdiv *****************
  9786 ;; Defined at:
  9787 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9788 ;; Parameters:    Size  Location     Type
  9789 ;;  f1              3   43[COMRAM] float 
  9790 ;;  f2              3   46[COMRAM] float 
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;  f3              3   53[COMRAM] float 
  9793 ;;  sign            1   57[COMRAM] unsigned char 
  9794 ;;  exp             1   56[COMRAM] unsigned char 
  9795 ;;  cntr            1   52[COMRAM] unsigned char 
  9796 ;; Return value:  Size  Location     Type
  9797 ;;                  3   43[COMRAM] float 
  9798 ;; Registers used:
  9799 ;;		wreg, status,2, status,0, cstack
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9805 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;Total ram usage:       15 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    4
  9812 ;; This function calls:
  9813 ;;		___ftpack
  9814 ;; This function is called by:
  9815 ;;		_do_update_pwm
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           	psect	text52
  9820  00153E                     __ptext52:
  9821                           	opt stack 0
  9822  00153E                     ___ftdiv:
  9823                           	opt stack 23
  9824                           
  9825                           ;incstack = 0
  9826  00153E  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9827  001542  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9828  001544  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9829  001546  342D               	rlcf	___ftdiv@f1+1,w,c
  9830  001548  3632               	rlcf	??___ftdiv& (0+255),f,c
  9831  00154A  E301               	bnc	u3951
  9832  00154C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9833  00154E                     u3951:
  9834  00154E  5032               	movf	??___ftdiv,w,c
  9835  001550  6E39               	movwf	___ftdiv@exp,c
  9836  001552  5039               	movf	___ftdiv@exp,w,c
  9837  001554  A4D8               	btfss	status,2,c
  9838  001556  D002               	goto	l5454
  9839  001558  D00E               	goto	l5456
  9840  00155A  D061               	goto	l1248
  9841  00155C                     l5454:
  9842  00155C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9843  001560  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9844  001562  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9845  001564  3430               	rlcf	___ftdiv@f2+1,w,c
  9846  001566  3632               	rlcf	??___ftdiv& (0+255),f,c
  9847  001568  E301               	bnc	u3971
  9848  00156A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9849  00156C                     u3971:
  9850  00156C  5032               	movf	??___ftdiv,w,c
  9851  00156E  6E3A               	movwf	___ftdiv@sign,c
  9852  001570  503A               	movf	___ftdiv@sign,w,c
  9853  001572  A4D8               	btfss	status,2,c
  9854  001574  D007               	goto	l5460
  9855  001576                     l5456:
  9856  001576  0E00               	movlw	0
  9857  001578  6E2C               	movwf	?___ftdiv,c
  9858  00157A  0E00               	movlw	0
  9859  00157C  6E2D               	movwf	?___ftdiv+1,c
  9860  00157E  0E00               	movlw	0
  9861  001580  6E2E               	movwf	?___ftdiv+2,c
  9862  001582  D04D               	goto	l1248
  9863  001584                     l5460:
  9864  001584  0E00               	movlw	0
  9865  001586  6E36               	movwf	___ftdiv@f3,c
  9866  001588  0E00               	movlw	0
  9867  00158A  6E37               	movwf	___ftdiv@f3+1,c
  9868  00158C  0E00               	movlw	0
  9869  00158E  6E38               	movwf	___ftdiv@f3+2,c
  9870  001590  503A               	movf	___ftdiv@sign,w,c
  9871  001592  0F89               	addlw	137
  9872  001594  5E39               	subwf	___ftdiv@exp,f,c
  9873  001596  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9874  00159A  5031               	movf	___ftdiv@f2+2,w,c
  9875  00159C  1A3A               	xorwf	___ftdiv@sign,f,c
  9876  00159E  0E80               	movlw	128
  9877  0015A0  163A               	andwf	___ftdiv@sign,f,c
  9878  0015A2  8E2D               	bsf	___ftdiv@f1+1,7,c
  9879  0015A4  0EFF               	movlw	255
  9880  0015A6  162C               	andwf	___ftdiv@f1,f,c
  9881  0015A8  0EFF               	movlw	255
  9882  0015AA  162D               	andwf	___ftdiv@f1+1,f,c
  9883  0015AC  0E00               	movlw	0
  9884  0015AE  162E               	andwf	___ftdiv@f1+2,f,c
  9885  0015B0  8E30               	bsf	___ftdiv@f2+1,7,c
  9886  0015B2  0EFF               	movlw	255
  9887  0015B4  162F               	andwf	___ftdiv@f2,f,c
  9888  0015B6  0EFF               	movlw	255
  9889  0015B8  1630               	andwf	___ftdiv@f2+1,f,c
  9890  0015BA  0E00               	movlw	0
  9891  0015BC  1631               	andwf	___ftdiv@f2+2,f,c
  9892  0015BE  0E18               	movlw	24
  9893  0015C0  6E35               	movwf	___ftdiv@cntr,c
  9894  0015C2  D000               	goto	l5480
  9895  0015C4                     l5480:
  9896  0015C4  90D8               	bcf	status,0,c
  9897  0015C6  3636               	rlcf	___ftdiv@f3,f,c
  9898  0015C8  3637               	rlcf	___ftdiv@f3+1,f,c
  9899  0015CA  3638               	rlcf	___ftdiv@f3+2,f,c
  9900  0015CC  502F               	movf	___ftdiv@f2,w,c
  9901  0015CE  5C2C               	subwf	___ftdiv@f1,w,c
  9902  0015D0  5030               	movf	___ftdiv@f2+1,w,c
  9903  0015D2  582D               	subwfb	___ftdiv@f1+1,w,c
  9904  0015D4  5031               	movf	___ftdiv@f2+2,w,c
  9905  0015D6  582E               	subwfb	___ftdiv@f1+2,w,c
  9906  0015D8  A0D8               	btfss	status,0,c
  9907  0015DA  D007               	goto	l1251
  9908  0015DC  502F               	movf	___ftdiv@f2,w,c
  9909  0015DE  5E2C               	subwf	___ftdiv@f1,f,c
  9910  0015E0  5030               	movf	___ftdiv@f2+1,w,c
  9911  0015E2  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9912  0015E4  5031               	movf	___ftdiv@f2+2,w,c
  9913  0015E6  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9914  0015E8  8036               	bsf	___ftdiv@f3,0,c
  9915  0015EA                     l1251:
  9916  0015EA  90D8               	bcf	status,0,c
  9917  0015EC  362C               	rlcf	___ftdiv@f1,f,c
  9918  0015EE  362D               	rlcf	___ftdiv@f1+1,f,c
  9919  0015F0  362E               	rlcf	___ftdiv@f1+2,f,c
  9920  0015F2  2E35               	decfsz	___ftdiv@cntr,f,c
  9921  0015F4  D7E7               	goto	l5480
  9922  0015F6  D000               	goto	l5490
  9923  0015F8                     l5490:
  9924  0015F8  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9925  0015FC  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9926  001600  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9927  001604  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9928  001608  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9929  00160C  EC7E  F00B         	call	___ftpack	;wreg free
  9930  001610  C011  F02C         	movff	?___ftpack,?___ftdiv
  9931  001614  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9932  001618  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9933  00161C  D000               	goto	l1248
  9934  00161E                     l1248:
  9935  00161E  0012               	return		;funcret
  9936  001620                     __end_of___ftdiv:
  9937                           	opt stack 0
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           postinc0	equ	0xFEE
  9947                           wreg	equ	0xFE8
  9948                           postdec1	equ	0xFE5
  9949                           fsr1l	equ	0xFE1
  9950                           indf2	equ	0xFDF
  9951                           postinc2	equ	0xFDE
  9952                           postdec2	equ	0xFDD
  9953                           fsr2h	equ	0xFDA
  9954                           fsr2l	equ	0xFD9
  9955                           status	equ	0xFD8
  9956                           
  9957 ;; *************** function ___ftpack *****************
  9958 ;; Defined at:
  9959 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  arg             3   16[COMRAM] unsigned um
  9962 ;;  exp             1   19[COMRAM] unsigned char 
  9963 ;;  sign            1   20[COMRAM] unsigned char 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  3   16[COMRAM] float 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9975 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;Total ram usage:        8 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		___ftdiv
  9986 ;;		___ftmul
  9987 ;;		___lbtoft
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           	psect	text53
  9992  0016FC                     __ptext53:
  9993                           	opt stack 0
  9994  0016FC                     ___ftpack:
  9995                           	opt stack 23
  9996                           
  9997                           ;incstack = 0
  9998  0016FC  5014               	movf	___ftpack@exp,w,c
  9999  0016FE  B4D8               	btfsc	status,2,c
 10000  001700  D005               	goto	l5344
 10001  001702  5011               	movf	___ftpack@arg,w,c
 10002  001704  1012               	iorwf	___ftpack@arg+1,w,c
 10003  001706  1013               	iorwf	___ftpack@arg+2,w,c
 10004  001708  A4D8               	btfss	status,2,c
 10005  00170A  D00E               	goto	l5350
 10006  00170C                     l5344:
 10007  00170C  0E00               	movlw	0
 10008  00170E  6E11               	movwf	?___ftpack,c
 10009  001710  0E00               	movlw	0
 10010  001712  6E12               	movwf	?___ftpack+1,c
 10011  001714  0E00               	movlw	0
 10012  001716  6E13               	movwf	?___ftpack+2,c
 10013  001718  D053               	goto	l1176
 10014  00171A  D006               	goto	l5350
 10015  00171C                     l5348:
 10016  00171C  2A14               	incf	___ftpack@exp,f,c
 10017  00171E  90D8               	bcf	status,0,c
 10018  001720  3213               	rrcf	___ftpack@arg+2,f,c
 10019  001722  3212               	rrcf	___ftpack@arg+1,f,c
 10020  001724  3211               	rrcf	___ftpack@arg,f,c
 10021  001726  D000               	goto	l5350
 10022  001728                     l5350:
 10023  001728  0E00               	movlw	0
 10024  00172A  1411               	andwf	___ftpack@arg,w,c
 10025  00172C  6E16               	movwf	??___ftpack& (0+255),c
 10026  00172E  0E00               	movlw	0
 10027  001730  1412               	andwf	___ftpack@arg+1,w,c
 10028  001732  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10029  001734  0EFE               	movlw	254
 10030  001736  1413               	andwf	___ftpack@arg+2,w,c
 10031  001738  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10032  00173A  5016               	movf	??___ftpack,w,c
 10033  00173C  1017               	iorwf	??___ftpack+1,w,c
 10034  00173E  1018               	iorwf	??___ftpack+2,w,c
 10035  001740  B4D8               	btfsc	status,2,c
 10036  001742  D00E               	goto	l5356
 10037  001744  D7EB               	goto	l5348
 10038  001746  D00C               	goto	l5356
 10039  001748                     l5352:
 10040  001748  2A14               	incf	___ftpack@exp,f,c
 10041  00174A  0E01               	movlw	1
 10042  00174C  2611               	addwf	___ftpack@arg,f,c
 10043  00174E  0E00               	movlw	0
 10044  001750  2212               	addwfc	___ftpack@arg+1,f,c
 10045  001752  0E00               	movlw	0
 10046  001754  2213               	addwfc	___ftpack@arg+2,f,c
 10047  001756  90D8               	bcf	status,0,c
 10048  001758  3213               	rrcf	___ftpack@arg+2,f,c
 10049  00175A  3212               	rrcf	___ftpack@arg+1,f,c
 10050  00175C  3211               	rrcf	___ftpack@arg,f,c
 10051  00175E  D000               	goto	l5356
 10052  001760                     l5356:
 10053  001760  0E00               	movlw	0
 10054  001762  1411               	andwf	___ftpack@arg,w,c
 10055  001764  6E16               	movwf	??___ftpack& (0+255),c
 10056  001766  0E00               	movlw	0
 10057  001768  1412               	andwf	___ftpack@arg+1,w,c
 10058  00176A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10059  00176C  0EFF               	movlw	255
 10060  00176E  1413               	andwf	___ftpack@arg+2,w,c
 10061  001770  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10062  001772  5016               	movf	??___ftpack,w,c
 10063  001774  1017               	iorwf	??___ftpack+1,w,c
 10064  001776  1018               	iorwf	??___ftpack+2,w,c
 10065  001778  B4D8               	btfsc	status,2,c
 10066  00177A  D008               	goto	l5360
 10067  00177C  D7E5               	goto	l5352
 10068  00177E  D006               	goto	l5360
 10069  001780                     l5358:
 10070  001780  0614               	decf	___ftpack@exp,f,c
 10071  001782  90D8               	bcf	status,0,c
 10072  001784  3611               	rlcf	___ftpack@arg,f,c
 10073  001786  3612               	rlcf	___ftpack@arg+1,f,c
 10074  001788  3613               	rlcf	___ftpack@arg+2,f,c
 10075  00178A  D000               	goto	l5360
 10076  00178C                     l5360:
 10077  00178C  BE12               	btfsc	___ftpack@arg+1,7,c
 10078  00178E  D004               	goto	l1187
 10079  001790  0E02               	movlw	2
 10080  001792  6014               	cpfslt	___ftpack@exp,c
 10081  001794  D7F5               	goto	l5358
 10082  001796  D000               	goto	l1187
 10083  001798                     l1187:
 10084  001798  B014               	btfsc	___ftpack@exp,0,c
 10085  00179A  D002               	goto	l5366
 10086  00179C  9E12               	bcf	___ftpack@arg+1,7,c
 10087  00179E  D000               	goto	l5366
 10088  0017A0                     l5366:
 10089  0017A0  90D8               	bcf	status,0,c
 10090  0017A2  3214               	rrcf	___ftpack@exp,f,c
 10091  0017A4  5014               	movf	___ftpack@exp,w,c
 10092  0017A6  1213               	iorwf	___ftpack@arg+2,f,c
 10093  0017A8  5015               	movf	___ftpack@sign,w,c
 10094  0017AA  B4D8               	btfsc	status,2,c
 10095  0017AC  D002               	goto	l5372
 10096  0017AE  8E13               	bsf	___ftpack@arg+2,7,c
 10097  0017B0  D000               	goto	l5372
 10098  0017B2                     l5372:
 10099  0017B2  C011  F011         	movff	___ftpack@arg,?___ftpack
 10100  0017B6  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10101  0017BA  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10102  0017BE  D000               	goto	l1176
 10103  0017C0                     l1176:
 10104  0017C0  0012               	return		;funcret
 10105  0017C2                     __end_of___ftpack:
 10106                           	opt stack 0
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           intcon	equ	0xFF2
 10114                           intcon2	equ	0xFF1
 10115                           postinc0	equ	0xFEE
 10116                           wreg	equ	0xFE8
 10117                           postdec1	equ	0xFE5
 10118                           fsr1l	equ	0xFE1
 10119                           indf2	equ	0xFDF
 10120                           postinc2	equ	0xFDE
 10121                           postdec2	equ	0xFDD
 10122                           fsr2h	equ	0xFDA
 10123                           fsr2l	equ	0xFD9
 10124                           status	equ	0xFD8
 10125                           
 10126 ;; *************** function _Wait_One_Sec *****************
 10127 ;; Defined at:
 10128 ;;		line 160 in file "Fan_Support.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;		None
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;  k               2   16[COMRAM] int 
 10133 ;; Return value:  Size  Location     Type
 10134 ;;		None               void
 10135 ;; Registers used:
 10136 ;;		wreg, status,2, status,0
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;Total ram usage:        2 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    3
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		_Do_Beep
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           	psect	text54
 10157  002256                     __ptext54:
 10158                           	opt stack 0
 10159  002256                     _Wait_One_Sec:
 10160                           	opt stack 25
 10161                           
 10162                           ;Fan_Support.c: 162: for (int k=0;k<17000;k++);
 10163                           
 10164                           ;incstack = 0
 10165  002256  0E00               	movlw	0
 10166  002258  6E12               	movwf	Wait_One_Sec@k+1,c
 10167  00225A  0E00               	movlw	0
 10168  00225C  6E11               	movwf	Wait_One_Sec@k,c
 10169  00225E                     l5660:
 10170  00225E  BE12               	btfsc	Wait_One_Sec@k+1,7,c
 10171  002260  D008               	goto	l5664
 10172  002262  0E68               	movlw	104
 10173  002264  5C11               	subwf	Wait_One_Sec@k,w,c
 10174  002266  0E42               	movlw	66
 10175  002268  5812               	subwfb	Wait_One_Sec@k+1,w,c
 10176  00226A  B0D8               	btfsc	status,0,c
 10177  00226C  D005               	goto	l294
 10178  00226E  D001               	goto	l5664
 10179  002270  D003               	goto	l294
 10180  002272                     l5664:
 10181  002272  4A11               	infsnz	Wait_One_Sec@k,f,c
 10182  002274  2A12               	incf	Wait_One_Sec@k+1,f,c
 10183  002276  D7F3               	goto	l5660
 10184  002278                     l294:
 10185  002278  0012               	return		;funcret
 10186  00227A                     __end_of_Wait_One_Sec:
 10187                           	opt stack 0
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           postinc0	equ	0xFEE
 10197                           wreg	equ	0xFE8
 10198                           postdec1	equ	0xFE5
 10199                           fsr1l	equ	0xFE1
 10200                           indf2	equ	0xFDF
 10201                           postinc2	equ	0xFDE
 10202                           postdec2	equ	0xFDD
 10203                           fsr2h	equ	0xFDA
 10204                           fsr2l	equ	0xFD9
 10205                           status	equ	0xFD8
 10206                           
 10207 ;; *************** function _Deactivate_Buzzer *****************
 10208 ;; Defined at:
 10209 ;;		line 173 in file "Fan_Support.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;		None               void
 10216 ;; Registers used:
 10217 ;;		wreg, status,2
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;Total ram usage:        0 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    3
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_Do_Beep
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           	psect	text55
 10238  002466                     __ptext55:
 10239                           	opt stack 0
 10240  002466                     _Deactivate_Buzzer:
 10241                           	opt stack 25
 10242                           
 10243                           ;Fan_Support.c: 175: CCP2CON = 0x0;
 10244                           
 10245                           ;incstack = 0
 10246  002466  0E00               	movlw	0
 10247  002468  6EBA               	movwf	4026,c	;volatile
 10248                           
 10249                           ;Fan_Support.c: 176: PORTBbits.RB3 = 0;
 10250  00246A  9681               	bcf	3969,3,c	;volatile
 10251  00246C  0012               	return		;funcret
 10252  00246E                     __end_of_Deactivate_Buzzer:
 10253                           	opt stack 0
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           intcon	equ	0xFF2
 10261                           intcon2	equ	0xFF1
 10262                           postinc0	equ	0xFEE
 10263                           wreg	equ	0xFE8
 10264                           postdec1	equ	0xFE5
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _Activate_Buzzer *****************
 10274 ;; Defined at:
 10275 ;;		line 165 in file "Fan_Support.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;		None               void
 10282 ;; Registers used:
 10283 ;;		wreg, status,2
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;Total ram usage:        0 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    3
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_Do_Beep
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           	psect	text56
 10304  0023A0                     __ptext56:
 10305                           	opt stack 0
 10306  0023A0                     _Activate_Buzzer:
 10307                           	opt stack 25
 10308                           
 10309                           ;Fan_Support.c: 167: PR2 = 0b11111001;
 10310                           
 10311                           ;incstack = 0
 10312  0023A0  0EF9               	movlw	249
 10313  0023A2  6ECB               	movwf	4043,c	;volatile
 10314                           
 10315                           ;Fan_Support.c: 168: T2CON = 0b00000101;
 10316  0023A4  0E05               	movlw	5
 10317  0023A6  6ECA               	movwf	4042,c	;volatile
 10318                           
 10319                           ;Fan_Support.c: 169: CCPR2L = 0b01001010;
 10320  0023A8  0E4A               	movlw	74
 10321  0023AA  6EBB               	movwf	4027,c	;volatile
 10322                           
 10323                           ;Fan_Support.c: 170: CCP2CON = 0b00111100;
 10324  0023AC  0E3C               	movlw	60
 10325  0023AE  6EBA               	movwf	4026,c	;volatile
 10326  0023B0  0012               	return		;funcret
 10327  0023B2                     __end_of_Activate_Buzzer:
 10328                           	opt stack 0
 10329                           tblptru	equ	0xFF8
 10330                           tblptrh	equ	0xFF7
 10331                           tblptrl	equ	0xFF6
 10332                           tablat	equ	0xFF5
 10333                           prodh	equ	0xFF4
 10334                           prodl	equ	0xFF3
 10335                           intcon	equ	0xFF2
 10336                           intcon2	equ	0xFF1
 10337                           postinc0	equ	0xFEE
 10338                           wreg	equ	0xFE8
 10339                           postdec1	equ	0xFE5
 10340                           fsr1l	equ	0xFE1
 10341                           indf2	equ	0xFDF
 10342                           postinc2	equ	0xFDE
 10343                           postdec2	equ	0xFDD
 10344                           fsr2h	equ	0xFDA
 10345                           fsr2l	equ	0xFD9
 10346                           status	equ	0xFD8
 10347                           
 10348 ;; *************** function _DS3231_Setup_Time *****************
 10349 ;; Defined at:
 10350 ;;		line 64 in file "I2C_Support.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  Address         1   19[COMRAM] unsigned char 
 10355 ;;  Device          1   18[COMRAM] unsigned char 
 10356 ;; Return value:  Size  Location     Type
 10357 ;;		None               void
 10358 ;; Registers used:
 10359 ;;		wreg, status,2, status,0, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;Total ram usage:        2 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    5
 10372 ;; This function calls:
 10373 ;;		_I2C_Start
 10374 ;;		_I2C_Stop
 10375 ;;		_I2C_Write
 10376 ;; This function is called by:
 10377 ;;		_main
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text57
 10382  001C64                     __ptext57:
 10383                           	opt stack 0
 10384  001C64                     _DS3231_Setup_Time:
 10385                           	opt stack 25
 10386                           
 10387                           ;I2C_Support.c: 66: char Device = 0x68;
 10388                           
 10389                           ;incstack = 0
 10390  001C64  0E68               	movlw	104
 10391  001C66  6E13               	movwf	DS3231_Setup_Time@Device,c
 10392                           
 10393                           ;I2C_Support.c: 67: char Address = 0x00;
 10394  001C68  0E00               	movlw	0
 10395  001C6A  6E14               	movwf	DS3231_Setup_Time@Address,c
 10396                           
 10397                           ;I2C_Support.c: 68: second = 0x00;
 10398  001C6C  0E00               	movlw	0
 10399  001C6E  6E62               	movwf	_second,c
 10400                           
 10401                           ;I2C_Support.c: 69: minute = 0x00;
 10402  001C70  0E00               	movlw	0
 10403  001C72  6E5F               	movwf	_minute,c
 10404                           
 10405                           ;I2C_Support.c: 70: hour = 0x00;
 10406  001C74  0E00               	movlw	0
 10407  001C76  6E5E               	movwf	_hour,c
 10408                           
 10409                           ;I2C_Support.c: 71: dow = 0x04;
 10410  001C78  0E04               	movlw	4
 10411  001C7A  6E5B               	movwf	_dow,c
 10412                           
 10413                           ;I2C_Support.c: 72: day = 0x29;
 10414  001C7C  0E29               	movlw	41
 10415  001C7E  6E5A               	movwf	_day,c
 10416                           
 10417                           ;I2C_Support.c: 73: month = 0x11;
 10418  001C80  0E11               	movlw	17
 10419  001C82  6E60               	movwf	_month,c
 10420                           
 10421                           ;I2C_Support.c: 74: year = 0x22;
 10422  001C84  0E22               	movlw	34
 10423  001C86  6E6C               	movwf	_year,c
 10424                           
 10425                           ;I2C_Support.c: 76: I2C_Start();
 10426  001C88  ECE2  F011         	call	_I2C_Start	;wreg free
 10427                           
 10428                           ;I2C_Support.c: 77: I2C_Write((Device << 1) | 0);
 10429  001C8C  5013               	movf	DS3231_Setup_Time@Device,w,c
 10430  001C8E  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10431  001C90  EC5C  F010         	call	_I2C_Write
 10432                           
 10433                           ;I2C_Support.c: 78: I2C_Write(Address);
 10434  001C94  5014               	movf	DS3231_Setup_Time@Address,w,c
 10435  001C96  EC5C  F010         	call	_I2C_Write
 10436                           
 10437                           ;I2C_Support.c: 79: I2C_Write(second);
 10438  001C9A  5062               	movf	_second,w,c
 10439  001C9C  EC5C  F010         	call	_I2C_Write
 10440                           
 10441                           ;I2C_Support.c: 80: I2C_Write(minute);
 10442  001CA0  505F               	movf	_minute,w,c
 10443  001CA2  EC5C  F010         	call	_I2C_Write
 10444                           
 10445                           ;I2C_Support.c: 81: I2C_Write(hour);
 10446  001CA6  505E               	movf	_hour,w,c
 10447  001CA8  EC5C  F010         	call	_I2C_Write
 10448                           
 10449                           ;I2C_Support.c: 82: I2C_Write(dow);
 10450  001CAC  505B               	movf	_dow,w,c
 10451  001CAE  EC5C  F010         	call	_I2C_Write
 10452                           
 10453                           ;I2C_Support.c: 83: I2C_Write(day);
 10454  001CB2  505A               	movf	_day,w,c
 10455  001CB4  EC5C  F010         	call	_I2C_Write
 10456                           
 10457                           ;I2C_Support.c: 84: I2C_Write(month);
 10458  001CB8  5060               	movf	_month,w,c
 10459  001CBA  EC5C  F010         	call	_I2C_Write
 10460                           
 10461                           ;I2C_Support.c: 85: I2C_Write(year);
 10462  001CBE  506C               	movf	_year,w,c
 10463  001CC0  EC5C  F010         	call	_I2C_Write
 10464                           
 10465                           ;I2C_Support.c: 86: I2C_Stop();
 10466  001CC4  ECD9  F011         	call	_I2C_Stop	;wreg free
 10467  001CC8  0012               	return		;funcret
 10468  001CCA                     __end_of_DS3231_Setup_Time:
 10469                           	opt stack 0
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           intcon2	equ	0xFF1
 10478                           postinc0	equ	0xFEE
 10479                           wreg	equ	0xFE8
 10480                           postdec1	equ	0xFE5
 10481                           fsr1l	equ	0xFE1
 10482                           indf2	equ	0xFDF
 10483                           postinc2	equ	0xFDE
 10484                           postdec2	equ	0xFDD
 10485                           fsr2h	equ	0xFDA
 10486                           fsr2l	equ	0xFD9
 10487                           status	equ	0xFD8
 10488                           
 10489 ;; *************** function _DS3231_Read_Time *****************
 10490 ;; Defined at:
 10491 ;;		line 43 in file "I2C_Support.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;		None
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  Device          1   20[COMRAM] unsigned char 
 10496 ;;  Address         1   19[COMRAM] unsigned char 
 10497 ;;  Data_Ret        1    0        unsigned char 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;		None               void
 10500 ;; Registers used:
 10501 ;;		wreg, status,2, status,0, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;Total ram usage:        2 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    6
 10514 ;; This function calls:
 10515 ;;		_I2C_ReStart
 10516 ;;		_I2C_Read
 10517 ;;		_I2C_Start
 10518 ;;		_I2C_Stop
 10519 ;;		_I2C_Write
 10520 ;; This function is called by:
 10521 ;;		_main
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           	psect	text58
 10526  001D30                     __ptext58:
 10527                           	opt stack 0
 10528  001D30                     _DS3231_Read_Time:
 10529                           	opt stack 24
 10530                           
 10531                           ;I2C_Support.c: 45: char Device = 0x68;
 10532                           
 10533                           ;incstack = 0
 10534  001D30  0E68               	movlw	104
 10535  001D32  6E15               	movwf	DS3231_Read_Time@Device,c
 10536                           
 10537                           ;I2C_Support.c: 46: char Address = 0x00;
 10538  001D34  0E00               	movlw	0
 10539  001D36  6E14               	movwf	DS3231_Read_Time@Address,c
 10540                           
 10541                           ;I2C_Support.c: 48: char Data_Ret;
 10542                           ;I2C_Support.c: 49: I2C_Start();
 10543  001D38  ECE2  F011         	call	_I2C_Start	;wreg free
 10544                           
 10545                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 10546  001D3C  5015               	movf	DS3231_Read_Time@Device,w,c
 10547  001D3E  2415               	addwf	DS3231_Read_Time@Device,w,c
 10548  001D40  EC5C  F010         	call	_I2C_Write
 10549                           
 10550                           ;I2C_Support.c: 51: I2C_Write(Address);
 10551  001D44  5014               	movf	DS3231_Read_Time@Address,w,c
 10552  001D46  EC5C  F010         	call	_I2C_Write
 10553                           
 10554                           ;I2C_Support.c: 52: I2C_ReStart();
 10555  001D4A  EC94  F011         	call	_I2C_ReStart	;wreg free
 10556                           
 10557                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 10558  001D4E  80D8               	bsf	status,0,c
 10559  001D50  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10560  001D52  EC5C  F010         	call	_I2C_Write
 10561                           
 10562                           ;I2C_Support.c: 54: second = I2C_Read(1);
 10563  001D56  0E01               	movlw	1
 10564  001D58  ECB9  F00F         	call	_I2C_Read
 10565  001D5C  6E62               	movwf	_second,c
 10566                           
 10567                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 10568  001D5E  0E01               	movlw	1
 10569  001D60  ECB9  F00F         	call	_I2C_Read
 10570  001D64  6E5F               	movwf	_minute,c
 10571                           
 10572                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 10573  001D66  0E01               	movlw	1
 10574  001D68  ECB9  F00F         	call	_I2C_Read
 10575  001D6C  6E5E               	movwf	_hour,c
 10576                           
 10577                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 10578  001D6E  0E01               	movlw	1
 10579  001D70  ECB9  F00F         	call	_I2C_Read
 10580  001D74  6E5B               	movwf	_dow,c
 10581                           
 10582                           ;I2C_Support.c: 58: day = I2C_Read(1);
 10583  001D76  0E01               	movlw	1
 10584  001D78  ECB9  F00F         	call	_I2C_Read
 10585  001D7C  6E5A               	movwf	_day,c
 10586                           
 10587                           ;I2C_Support.c: 59: month = I2C_Read(1);
 10588  001D7E  0E01               	movlw	1
 10589  001D80  ECB9  F00F         	call	_I2C_Read
 10590  001D84  6E60               	movwf	_month,c
 10591                           
 10592                           ;I2C_Support.c: 60: year = I2C_Read(0);
 10593  001D86  0E00               	movlw	0
 10594  001D88  ECB9  F00F         	call	_I2C_Read
 10595  001D8C  6E6C               	movwf	_year,c
 10596                           
 10597                           ;I2C_Support.c: 61: I2C_Stop();
 10598  001D8E  ECD9  F011         	call	_I2C_Stop	;wreg free
 10599  001D92  0012               	return		;funcret
 10600  001D94                     __end_of_DS3231_Read_Time:
 10601                           	opt stack 0
 10602                           tblptru	equ	0xFF8
 10603                           tblptrh	equ	0xFF7
 10604                           tblptrl	equ	0xFF6
 10605                           tablat	equ	0xFF5
 10606                           prodh	equ	0xFF4
 10607                           prodl	equ	0xFF3
 10608                           intcon	equ	0xFF2
 10609                           intcon2	equ	0xFF1
 10610                           postinc0	equ	0xFEE
 10611                           wreg	equ	0xFE8
 10612                           postdec1	equ	0xFE5
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _DS1621_Read_Temp *****************
 10622 ;; Defined at:
 10623 ;;		line 28 in file "I2C_Support.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;		None
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  Device          1   23[COMRAM] unsigned char 
 10628 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 10629 ;;  Cmd             1   21[COMRAM] unsigned char 
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  2   19[COMRAM] int 
 10632 ;; Registers used:
 10633 ;;		wreg, status,2, status,0, cstack
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10643 ;;Total ram usage:        5 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    6
 10646 ;; This function calls:
 10647 ;;		_I2C_ReStart
 10648 ;;		_I2C_Read
 10649 ;;		_I2C_Start
 10650 ;;		_I2C_Stop
 10651 ;;		_I2C_Write
 10652 ;; This function is called by:
 10653 ;;		_main
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           	psect	text59
 10658  0020F6                     __ptext59:
 10659                           	opt stack 0
 10660  0020F6                     _DS1621_Read_Temp:
 10661                           	opt stack 24
 10662                           
 10663                           ;I2C_Support.c: 30: char Device = 0x48;
 10664                           
 10665                           ;incstack = 0
 10666  0020F6  0E48               	movlw	72
 10667  0020F8  6E18               	movwf	DS1621_Read_Temp@Device,c
 10668                           
 10669                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 10670  0020FA  0EAA               	movlw	170
 10671  0020FC  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 10672                           
 10673                           ;I2C_Support.c: 32: char Data_Ret;
 10674                           ;I2C_Support.c: 33: I2C_Start();
 10675  0020FE  ECE2  F011         	call	_I2C_Start	;wreg free
 10676                           
 10677                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 10678  002102  5018               	movf	DS1621_Read_Temp@Device,w,c
 10679  002104  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10680  002106  EC5C  F010         	call	_I2C_Write
 10681                           
 10682                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 10683  00210A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 10684  00210C  EC5C  F010         	call	_I2C_Write
 10685                           
 10686                           ;I2C_Support.c: 36: I2C_ReStart();
 10687  002110  EC94  F011         	call	_I2C_ReStart	;wreg free
 10688                           
 10689                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 10690  002114  80D8               	bsf	status,0,c
 10691  002116  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10692  002118  EC5C  F010         	call	_I2C_Write
 10693                           
 10694                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 10695  00211C  0E00               	movlw	0
 10696  00211E  ECB9  F00F         	call	_I2C_Read
 10697  002122  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 10698                           
 10699                           ;I2C_Support.c: 39: I2C_Stop();
 10700  002124  ECD9  F011         	call	_I2C_Stop	;wreg free
 10701                           
 10702                           ;I2C_Support.c: 40: return Data_Ret;
 10703  002128  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10704  00212C  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10705  00212E  D000               	goto	l413
 10706  002130                     l413:
 10707  002130  0012               	return		;funcret
 10708  002132                     __end_of_DS1621_Read_Temp:
 10709                           	opt stack 0
 10710                           tblptru	equ	0xFF8
 10711                           tblptrh	equ	0xFF7
 10712                           tblptrl	equ	0xFF6
 10713                           tablat	equ	0xFF5
 10714                           prodh	equ	0xFF4
 10715                           prodl	equ	0xFF3
 10716                           intcon	equ	0xFF2
 10717                           intcon2	equ	0xFF1
 10718                           postinc0	equ	0xFEE
 10719                           wreg	equ	0xFE8
 10720                           postdec1	equ	0xFE5
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           fsr2h	equ	0xFDA
 10726                           fsr2l	equ	0xFD9
 10727                           status	equ	0xFD8
 10728                           
 10729 ;; *************** function _I2C_Write *****************
 10730 ;; Defined at:
 10731 ;;		line 46 in file "I2C_Soft.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  outByte         1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  outByte         1   16[COMRAM] unsigned char 
 10736 ;;  n               1   17[COMRAM] unsigned char 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;		None               void
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;Total ram usage:        2 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    4
 10753 ;; This function calls:
 10754 ;;		_i2cHighScl
 10755 ;;		_i2cHighSda
 10756 ;;		_i2cLowScl
 10757 ;;		_i2cLowSda
 10758 ;; This function is called by:
 10759 ;;		_I2C_Write_Cmd_Only
 10760 ;;		_I2C_Write_Cmd_Write_Data
 10761 ;;		_DS1621_Read_Temp
 10762 ;;		_DS3231_Read_Time
 10763 ;;		_DS3231_Setup_Time
 10764 ;;		_I2C_Write_Address_Read_One_Byte
 10765 ;;		_I2C_Write_Address_Write_One_Byte
 10766 ;;		_I2C_Write_Cmd_Read_One_Byte
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text60
 10771  0020B8                     __ptext60:
 10772                           	opt stack 0
 10773  0020B8                     _I2C_Write:
 10774                           	opt stack 23
 10775                           
 10776                           ;incstack = 0
 10777                           ;I2C_Write@outByte stored from wreg
 10778  0020B8  6E11               	movwf	I2C_Write@outByte,c
 10779                           
 10780                           ;I2C_Soft.c: 48: unsigned char n;
 10781                           ;I2C_Soft.c: 49: for(n=0; n<8; n++)
 10782  0020BA  0E00               	movlw	0
 10783  0020BC  6E12               	movwf	I2C_Write@n,c
 10784  0020BE                     l5378:
 10785  0020BE  0E07               	movlw	7
 10786  0020C0  6412               	cpfsgt	I2C_Write@n,c
 10787  0020C2  D001               	goto	l333
 10788  0020C4  D011               	goto	l5396
 10789  0020C6                     l333:
 10790                           
 10791                           ;I2C_Soft.c: 50: {
 10792                           ;I2C_Soft.c: 51: if(outByte&0x80) i2cHighSda();
 10793  0020C6  AE11               	btfss	I2C_Write@outByte,7,c
 10794  0020C8  D003               	goto	l5384
 10795  0020CA  EC3B  F012         	call	_i2cHighSda	;wreg free
 10796  0020CE  D003               	goto	l5386
 10797  0020D0                     l5384:
 10798                           
 10799                           ;I2C_Soft.c: 52: else i2cLowSda();
 10800  0020D0  EC2E  F012         	call	_i2cLowSda	;wreg free
 10801  0020D4  D000               	goto	l5386
 10802  0020D6                     l5386:
 10803                           
 10804                           ;I2C_Soft.c: 53: i2cHighScl();
 10805  0020D6  EC13  F012         	call	_i2cHighScl	;wreg free
 10806                           
 10807                           ;I2C_Soft.c: 54: i2cLowScl();
 10808  0020DA  EC37  F012         	call	_i2cLowScl	;wreg free
 10809                           
 10810                           ;I2C_Soft.c: 55: outByte = outByte << 1;
 10811  0020DE  5011               	movf	I2C_Write@outByte,w,c
 10812  0020E0  2411               	addwf	I2C_Write@outByte,w,c
 10813  0020E2  6E11               	movwf	I2C_Write@outByte,c
 10814  0020E4  2A12               	incf	I2C_Write@n,f,c
 10815  0020E6  D7EB               	goto	l5378
 10816  0020E8                     l5396:
 10817                           
 10818                           ;I2C_Soft.c: 56: }
 10819                           ;I2C_Soft.c: 57: i2cHighSda();
 10820  0020E8  EC3B  F012         	call	_i2cHighSda	;wreg free
 10821                           
 10822                           ;I2C_Soft.c: 58: i2cHighScl();
 10823  0020EC  EC13  F012         	call	_i2cHighScl	;wreg free
 10824                           
 10825                           ;I2C_Soft.c: 59: i2cLowScl();
 10826  0020F0  EC37  F012         	call	_i2cLowScl	;wreg free
 10827  0020F4  0012               	return		;funcret
 10828  0020F6                     __end_of_I2C_Write:
 10829                           	opt stack 0
 10830                           tblptru	equ	0xFF8
 10831                           tblptrh	equ	0xFF7
 10832                           tblptrl	equ	0xFF6
 10833                           tablat	equ	0xFF5
 10834                           prodh	equ	0xFF4
 10835                           prodl	equ	0xFF3
 10836                           intcon	equ	0xFF2
 10837                           intcon2	equ	0xFF1
 10838                           postinc0	equ	0xFEE
 10839                           wreg	equ	0xFE8
 10840                           postdec1	equ	0xFE5
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _I2C_Stop *****************
 10850 ;; Defined at:
 10851 ;;		line 93 in file "I2C_Soft.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;		None
 10856 ;; Return value:  Size  Location     Type
 10857 ;;		None               void
 10858 ;; Registers used:
 10859 ;;		wreg, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        0 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    4
 10872 ;; This function calls:
 10873 ;;		_i2cHighScl
 10874 ;;		_i2cHighSda
 10875 ;;		_i2cLowScl
 10876 ;;		_i2cLowSda
 10877 ;; This function is called by:
 10878 ;;		_I2C_Write_Cmd_Only
 10879 ;;		_I2C_Write_Cmd_Write_Data
 10880 ;;		_DS1621_Read_Temp
 10881 ;;		_DS3231_Read_Time
 10882 ;;		_DS3231_Setup_Time
 10883 ;;		_I2C_Write_Address_Read_One_Byte
 10884 ;;		_I2C_Write_Address_Write_One_Byte
 10885 ;;		_I2C_Write_Cmd_Read_One_Byte
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           	psect	text61
 10890  0023B2                     __ptext61:
 10891                           	opt stack 0
 10892  0023B2                     _I2C_Stop:
 10893                           	opt stack 23
 10894                           
 10895                           ;I2C_Soft.c: 95: i2cLowScl();
 10896                           
 10897                           ;incstack = 0
 10898  0023B2  EC37  F012         	call	_i2cLowScl	;wreg free
 10899                           
 10900                           ;I2C_Soft.c: 96: i2cLowSda();
 10901  0023B6  EC2E  F012         	call	_i2cLowSda	;wreg free
 10902                           
 10903                           ;I2C_Soft.c: 97: i2cHighScl();
 10904  0023BA  EC13  F012         	call	_i2cHighScl	;wreg free
 10905                           
 10906                           ;I2C_Soft.c: 98: i2cHighSda();
 10907  0023BE  EC3B  F012         	call	_i2cHighSda	;wreg free
 10908  0023C2  0012               	return		;funcret
 10909  0023C4                     __end_of_I2C_Stop:
 10910                           	opt stack 0
 10911                           tblptru	equ	0xFF8
 10912                           tblptrh	equ	0xFF7
 10913                           tblptrl	equ	0xFF6
 10914                           tablat	equ	0xFF5
 10915                           prodh	equ	0xFF4
 10916                           prodl	equ	0xFF3
 10917                           intcon	equ	0xFF2
 10918                           intcon2	equ	0xFF1
 10919                           postinc0	equ	0xFEE
 10920                           wreg	equ	0xFE8
 10921                           postdec1	equ	0xFE5
 10922                           fsr1l	equ	0xFE1
 10923                           indf2	equ	0xFDF
 10924                           postinc2	equ	0xFDE
 10925                           postdec2	equ	0xFDD
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8
 10929                           
 10930 ;; *************** function _I2C_Start *****************
 10931 ;; Defined at:
 10932 ;;		line 76 in file "I2C_Soft.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    4
 10953 ;; This function calls:
 10954 ;;		_i2cHighScl
 10955 ;;		_i2cHighSda
 10956 ;;		_i2cLowScl
 10957 ;;		_i2cLowSda
 10958 ;; This function is called by:
 10959 ;;		_I2C_Write_Cmd_Only
 10960 ;;		_I2C_Write_Cmd_Write_Data
 10961 ;;		_DS1621_Read_Temp
 10962 ;;		_DS3231_Read_Time
 10963 ;;		_DS3231_Setup_Time
 10964 ;;		_I2C_Write_Address_Read_One_Byte
 10965 ;;		_I2C_Write_Address_Write_One_Byte
 10966 ;;		_I2C_Write_Cmd_Read_One_Byte
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           	psect	text62
 10971  0023C4                     __ptext62:
 10972                           	opt stack 0
 10973  0023C4                     _I2C_Start:
 10974                           	opt stack 23
 10975                           
 10976                           ;I2C_Soft.c: 78: i2cHighSda();
 10977                           
 10978                           ;incstack = 0
 10979  0023C4  EC3B  F012         	call	_i2cHighSda	;wreg free
 10980                           
 10981                           ;I2C_Soft.c: 79: i2cHighScl();
 10982  0023C8  EC13  F012         	call	_i2cHighScl	;wreg free
 10983                           
 10984                           ;I2C_Soft.c: 80: i2cLowSda();
 10985  0023CC  EC2E  F012         	call	_i2cLowSda	;wreg free
 10986                           
 10987                           ;I2C_Soft.c: 81: i2cLowScl();
 10988  0023D0  EC37  F012         	call	_i2cLowScl	;wreg free
 10989  0023D4  0012               	return		;funcret
 10990  0023D6                     __end_of_I2C_Start:
 10991                           	opt stack 0
 10992                           tblptru	equ	0xFF8
 10993                           tblptrh	equ	0xFF7
 10994                           tblptrl	equ	0xFF6
 10995                           tablat	equ	0xFF5
 10996                           prodh	equ	0xFF4
 10997                           prodl	equ	0xFF3
 10998                           intcon	equ	0xFF2
 10999                           intcon2	equ	0xFF1
 11000                           postinc0	equ	0xFEE
 11001                           wreg	equ	0xFE8
 11002                           postdec1	equ	0xFE5
 11003                           fsr1l	equ	0xFE1
 11004                           indf2	equ	0xFDF
 11005                           postinc2	equ	0xFDE
 11006                           postdec2	equ	0xFDD
 11007                           fsr2h	equ	0xFDA
 11008                           fsr2l	equ	0xFD9
 11009                           status	equ	0xFD8
 11010                           
 11011 ;; *************** function _I2C_Read *****************
 11012 ;; Defined at:
 11013 ;;		line 25 in file "I2C_Soft.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  ack             1    wreg     unsigned char 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  ack             1   16[COMRAM] unsigned char 
 11018 ;;  inByte          1   18[COMRAM] unsigned char 
 11019 ;;  n               1   17[COMRAM] unsigned char 
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      unsigned char 
 11022 ;; Registers used:
 11023 ;;		wreg, status,2, status,0, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11032 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11033 ;;Total ram usage:        3 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; Hardware stack levels required when called:    5
 11036 ;; This function calls:
 11037 ;;		_i2cAck
 11038 ;;		_i2cHighScl
 11039 ;;		_i2cHighSda
 11040 ;;		_i2cLowScl
 11041 ;;		_i2cNack
 11042 ;; This function is called by:
 11043 ;;		_DS1621_Read_Temp
 11044 ;;		_DS3231_Read_Time
 11045 ;;		_I2C_Write_Address_Read_One_Byte
 11046 ;;		_I2C_Write_Cmd_Read_One_Byte
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           	psect	text63
 11051  001F72                     __ptext63:
 11052                           	opt stack 0
 11053  001F72                     _I2C_Read:
 11054                           	opt stack 24
 11055                           
 11056                           ;incstack = 0
 11057                           ;I2C_Read@ack stored from wreg
 11058  001F72  6E11               	movwf	I2C_Read@ack,c
 11059                           
 11060                           ;I2C_Soft.c: 27: unsigned char inByte, n;
 11061                           ;I2C_Soft.c: 28: i2cHighSda();
 11062  001F74  EC3B  F012         	call	_i2cHighSda	;wreg free
 11063                           
 11064                           ;I2C_Soft.c: 29: for (n=0; n<8; n++)
 11065  001F78  0E00               	movlw	0
 11066  001F7A  6E12               	movwf	I2C_Read@n,c
 11067  001F7C                     l5950:
 11068  001F7C  0E07               	movlw	7
 11069  001F7E  6412               	cpfsgt	I2C_Read@n,c
 11070  001F80  D001               	goto	l5954
 11071  001F82  D00F               	goto	l5968
 11072  001F84                     l5954:
 11073                           
 11074                           ;I2C_Soft.c: 30: {
 11075                           ;I2C_Soft.c: 31: i2cHighScl();
 11076  001F84  EC13  F012         	call	_i2cHighScl	;wreg free
 11077                           
 11078                           ;I2C_Soft.c: 33: if (PORTBbits.RB5)
 11079  001F88  AA81               	btfss	3969,5,c	;volatile
 11080  001F8A  D003               	goto	l5960
 11081                           
 11082                           ;I2C_Soft.c: 34: inByte = (inByte << 1) | 0x01;
 11083  001F8C  80D8               	bsf	status,0,c
 11084  001F8E  3613               	rlcf	I2C_Read@inByte,f,c
 11085  001F90  D004               	goto	l5962
 11086  001F92                     l5960:
 11087                           
 11088                           ;I2C_Soft.c: 35: else
 11089                           ;I2C_Soft.c: 36: inByte = inByte << 1;
 11090  001F92  5013               	movf	I2C_Read@inByte,w,c
 11091  001F94  2413               	addwf	I2C_Read@inByte,w,c
 11092  001F96  6E13               	movwf	I2C_Read@inByte,c
 11093  001F98  D000               	goto	l5962
 11094  001F9A                     l5962:
 11095                           
 11096                           ;I2C_Soft.c: 37: i2cLowScl();
 11097  001F9A  EC37  F012         	call	_i2cLowScl	;wreg free
 11098  001F9E  2A12               	incf	I2C_Read@n,f,c
 11099  001FA0  D7ED               	goto	l5950
 11100  001FA2                     l5968:
 11101                           
 11102                           ;I2C_Soft.c: 38: }
 11103                           ;I2C_Soft.c: 39: if (ack) i2cAck();
 11104  001FA2  5011               	movf	I2C_Read@ack,w,c
 11105  001FA4  B4D8               	btfsc	status,2,c
 11106  001FA6  D003               	goto	l5972
 11107  001FA8  ECEB  F011         	call	_i2cAck	;wreg free
 11108  001FAC  D003               	goto	l5974
 11109  001FAE                     l5972:
 11110                           
 11111                           ;I2C_Soft.c: 40: else i2cNack();
 11112  001FAE  EC29  F012         	call	_i2cNack	;wreg free
 11113  001FB2  D000               	goto	l5974
 11114  001FB4                     l5974:
 11115                           
 11116                           ;I2C_Soft.c: 43: return(inByte);
 11117  001FB4  5013               	movf	I2C_Read@inByte,w,c
 11118  001FB6  D000               	goto	l330
 11119  001FB8                     l330:
 11120  001FB8  0012               	return		;funcret
 11121  001FBA                     __end_of_I2C_Read:
 11122                           	opt stack 0
 11123                           tblptru	equ	0xFF8
 11124                           tblptrh	equ	0xFF7
 11125                           tblptrl	equ	0xFF6
 11126                           tablat	equ	0xFF5
 11127                           prodh	equ	0xFF4
 11128                           prodl	equ	0xFF3
 11129                           intcon	equ	0xFF2
 11130                           intcon2	equ	0xFF1
 11131                           postinc0	equ	0xFEE
 11132                           wreg	equ	0xFE8
 11133                           postdec1	equ	0xFE5
 11134                           fsr1l	equ	0xFE1
 11135                           indf2	equ	0xFDF
 11136                           postinc2	equ	0xFDE
 11137                           postdec2	equ	0xFDD
 11138                           fsr2h	equ	0xFDA
 11139                           fsr2l	equ	0xFD9
 11140                           status	equ	0xFD8
 11141                           
 11142 ;; *************** function _i2cNack *****************
 11143 ;; Defined at:
 11144 ;;		line 62 in file "I2C_Soft.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;		None
 11149 ;; Return value:  Size  Location     Type
 11150 ;;		None               void
 11151 ;; Registers used:
 11152 ;;		wreg, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;Total ram usage:        0 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    4
 11165 ;; This function calls:
 11166 ;;		_i2cHighScl
 11167 ;;		_i2cLowScl
 11168 ;; This function is called by:
 11169 ;;		_I2C_Read
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           	psect	text64
 11174  002452                     __ptext64:
 11175                           	opt stack 0
 11176  002452                     _i2cNack:
 11177                           	opt stack 24
 11178                           
 11179                           ;I2C_Soft.c: 64: i2cHighScl();
 11180                           
 11181                           ;incstack = 0
 11182  002452  EC13  F012         	call	_i2cHighScl	;wreg free
 11183                           
 11184                           ;I2C_Soft.c: 65: i2cLowScl();
 11185  002456  EC37  F012         	call	_i2cLowScl	;wreg free
 11186  00245A  0012               	return		;funcret
 11187  00245C                     __end_of_i2cNack:
 11188                           	opt stack 0
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           intcon2	equ	0xFF1
 11197                           postinc0	equ	0xFEE
 11198                           wreg	equ	0xFE8
 11199                           postdec1	equ	0xFE5
 11200                           fsr1l	equ	0xFE1
 11201                           indf2	equ	0xFDF
 11202                           postinc2	equ	0xFDE
 11203                           postdec2	equ	0xFDD
 11204                           fsr2h	equ	0xFDA
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _i2cAck *****************
 11209 ;; Defined at:
 11210 ;;		line 68 in file "I2C_Soft.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;		None
 11215 ;; Return value:  Size  Location     Type
 11216 ;;		None               void
 11217 ;; Registers used:
 11218 ;;		wreg, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;Total ram usage:        0 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:    4
 11231 ;; This function calls:
 11232 ;;		_i2cHighScl
 11233 ;;		_i2cHighSda
 11234 ;;		_i2cLowScl
 11235 ;;		_i2cLowSda
 11236 ;; This function is called by:
 11237 ;;		_I2C_Read
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           	psect	text65
 11242  0023D6                     __ptext65:
 11243                           	opt stack 0
 11244  0023D6                     _i2cAck:
 11245                           	opt stack 24
 11246                           
 11247                           ;I2C_Soft.c: 70: i2cLowSda();
 11248                           
 11249                           ;incstack = 0
 11250  0023D6  EC2E  F012         	call	_i2cLowSda	;wreg free
 11251                           
 11252                           ;I2C_Soft.c: 71: i2cHighScl();
 11253  0023DA  EC13  F012         	call	_i2cHighScl	;wreg free
 11254                           
 11255                           ;I2C_Soft.c: 72: i2cLowScl();
 11256  0023DE  EC37  F012         	call	_i2cLowScl	;wreg free
 11257                           
 11258                           ;I2C_Soft.c: 73: i2cHighSda();
 11259  0023E2  EC3B  F012         	call	_i2cHighSda	;wreg free
 11260  0023E6  0012               	return		;funcret
 11261  0023E8                     __end_of_i2cAck:
 11262                           	opt stack 0
 11263                           tblptru	equ	0xFF8
 11264                           tblptrh	equ	0xFF7
 11265                           tblptrl	equ	0xFF6
 11266                           tablat	equ	0xFF5
 11267                           prodh	equ	0xFF4
 11268                           prodl	equ	0xFF3
 11269                           intcon	equ	0xFF2
 11270                           intcon2	equ	0xFF1
 11271                           postinc0	equ	0xFEE
 11272                           wreg	equ	0xFE8
 11273                           postdec1	equ	0xFE5
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           fsr2h	equ	0xFDA
 11279                           fsr2l	equ	0xFD9
 11280                           status	equ	0xFD8
 11281                           
 11282 ;; *************** function _I2C_ReStart *****************
 11283 ;; Defined at:
 11284 ;;		line 84 in file "I2C_Soft.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;		None
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;		None               void
 11291 ;; Registers used:
 11292 ;;		wreg, cstack
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;Total ram usage:        0 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    4
 11305 ;; This function calls:
 11306 ;;		_i2cHighScl
 11307 ;;		_i2cHighSda
 11308 ;;		_i2cLowScl
 11309 ;;		_i2cLowSda
 11310 ;; This function is called by:
 11311 ;;		_DS1621_Read_Temp
 11312 ;;		_DS3231_Read_Time
 11313 ;;		_I2C_Write_Address_Read_One_Byte
 11314 ;;		_I2C_Write_Cmd_Read_One_Byte
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text66
 11319  002328                     __ptext66:
 11320                           	opt stack 0
 11321  002328                     _I2C_ReStart:
 11322                           	opt stack 25
 11323                           
 11324                           ;I2C_Soft.c: 86: i2cLowScl();
 11325                           
 11326                           ;incstack = 0
 11327  002328  EC37  F012         	call	_i2cLowScl	;wreg free
 11328                           
 11329                           ;I2C_Soft.c: 87: i2cHighSda();
 11330  00232C  EC3B  F012         	call	_i2cHighSda	;wreg free
 11331                           
 11332                           ;I2C_Soft.c: 88: i2cHighScl();
 11333  002330  EC13  F012         	call	_i2cHighScl	;wreg free
 11334                           
 11335                           ;I2C_Soft.c: 89: i2cLowSda();
 11336  002334  EC2E  F012         	call	_i2cLowSda	;wreg free
 11337                           
 11338                           ;I2C_Soft.c: 90: i2cLowScl();
 11339  002338  EC37  F012         	call	_i2cLowScl	;wreg free
 11340  00233C  0012               	return		;funcret
 11341  00233E                     __end_of_I2C_ReStart:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           postdec1	equ	0xFE5
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function _i2cLowSda *****************
 11363 ;; Defined at:
 11364 ;;		line 107 in file "I2C_Soft.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;		None
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;		None
 11369 ;; Return value:  Size  Location     Type
 11370 ;;		None               void
 11371 ;; Registers used:
 11372 ;;		None
 11373 ;; Tracked objects:
 11374 ;;		On entry : 0/0
 11375 ;;		On exit  : 0/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;Total ram usage:        0 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; Hardware stack levels required when called:    3
 11385 ;; This function calls:
 11386 ;;		Nothing
 11387 ;; This function is called by:
 11388 ;;		_I2C_Write
 11389 ;;		_i2cAck
 11390 ;;		_I2C_Start
 11391 ;;		_I2C_ReStart
 11392 ;;		_I2C_Stop
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text67
 11397  00245C                     __ptext67:
 11398                           	opt stack 0
 11399  00245C                     _i2cLowSda:
 11400                           	opt stack 23
 11401                           
 11402                           ;I2C_Soft.c: 109: PORTBbits.RB5 = 0;
 11403                           
 11404                           ;incstack = 0
 11405  00245C  9A81               	bcf	3969,5,c	;volatile
 11406                           
 11407                           ;I2C_Soft.c: 110: TRISBbits.RB5 = 0;
 11408  00245E  9A93               	bcf	3987,5,c	;volatile
 11409                           
 11410                           ;I2C_Soft.c: 111: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11411  002460  D000               	nop2		;2 cycle nop
 11412  002462  D000               	nop2		;2 cycle nop
 11413  002464  0012               	return		;funcret
 11414  002466                     __end_of_i2cLowSda:
 11415                           	opt stack 0
 11416                           tblptru	equ	0xFF8
 11417                           tblptrh	equ	0xFF7
 11418                           tblptrl	equ	0xFF6
 11419                           tablat	equ	0xFF5
 11420                           prodh	equ	0xFF4
 11421                           prodl	equ	0xFF3
 11422                           intcon	equ	0xFF2
 11423                           intcon2	equ	0xFF1
 11424                           postinc0	equ	0xFEE
 11425                           wreg	equ	0xFE8
 11426                           postdec1	equ	0xFE5
 11427                           fsr1l	equ	0xFE1
 11428                           indf2	equ	0xFDF
 11429                           postinc2	equ	0xFDE
 11430                           postdec2	equ	0xFDD
 11431                           fsr2h	equ	0xFDA
 11432                           fsr2l	equ	0xFD9
 11433                           status	equ	0xFD8
 11434                           
 11435 ;; *************** function _i2cLowScl *****************
 11436 ;; Defined at:
 11437 ;;		line 120 in file "I2C_Soft.c"
 11438 ;; Parameters:    Size  Location     Type
 11439 ;;		None
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;		None
 11442 ;; Return value:  Size  Location     Type
 11443 ;;		None               void
 11444 ;; Registers used:
 11445 ;;		None
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;Total ram usage:        0 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    3
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_I2C_Read
 11462 ;;		_I2C_Write
 11463 ;;		_i2cNack
 11464 ;;		_i2cAck
 11465 ;;		_I2C_Start
 11466 ;;		_I2C_ReStart
 11467 ;;		_I2C_Stop
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           	psect	text68
 11472  00246E                     __ptext68:
 11473                           	opt stack 0
 11474  00246E                     _i2cLowScl:
 11475                           	opt stack 23
 11476                           
 11477                           ;I2C_Soft.c: 122: PORTBbits.RB4 = 0;
 11478                           
 11479                           ;incstack = 0
 11480  00246E  9881               	bcf	3969,4,c	;volatile
 11481                           
 11482                           ;I2C_Soft.c: 123: TRISBbits.RB4 = 0;
 11483  002470  9893               	bcf	3987,4,c	;volatile
 11484                           
 11485                           ;I2C_Soft.c: 124: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11486  002472  D000               	nop2		;2 cycle nop
 11487  002474  0012               	return		;funcret
 11488  002476                     __end_of_i2cLowScl:
 11489                           	opt stack 0
 11490                           tblptru	equ	0xFF8
 11491                           tblptrh	equ	0xFF7
 11492                           tblptrl	equ	0xFF6
 11493                           tablat	equ	0xFF5
 11494                           prodh	equ	0xFF4
 11495                           prodl	equ	0xFF3
 11496                           intcon	equ	0xFF2
 11497                           intcon2	equ	0xFF1
 11498                           postinc0	equ	0xFEE
 11499                           wreg	equ	0xFE8
 11500                           postdec1	equ	0xFE5
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function _i2cHighSda *****************
 11510 ;; Defined at:
 11511 ;;		line 101 in file "I2C_Soft.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		None
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;Total ram usage:        0 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    3
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_I2C_Init
 11536 ;;		_I2C_Read
 11537 ;;		_I2C_Write
 11538 ;;		_i2cAck
 11539 ;;		_I2C_Start
 11540 ;;		_I2C_ReStart
 11541 ;;		_I2C_Stop
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           	psect	text69
 11546  002476                     __ptext69:
 11547                           	opt stack 0
 11548  002476                     _i2cHighSda:
 11549                           	opt stack 25
 11550                           
 11551                           ;I2C_Soft.c: 103: TRISBbits.RB5 = 1;
 11552                           
 11553                           ;incstack = 0
 11554  002476  8A93               	bsf	3987,5,c	;volatile
 11555                           
 11556                           ;I2C_Soft.c: 104: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11557  002478  D000               	nop2		;2 cycle nop
 11558  00247A  D000               	nop2		;2 cycle nop
 11559  00247C  0012               	return		;funcret
 11560  00247E                     __end_of_i2cHighSda:
 11561                           	opt stack 0
 11562                           tblptru	equ	0xFF8
 11563                           tblptrh	equ	0xFF7
 11564                           tblptrl	equ	0xFF6
 11565                           tablat	equ	0xFF5
 11566                           prodh	equ	0xFF4
 11567                           prodl	equ	0xFF3
 11568                           intcon	equ	0xFF2
 11569                           intcon2	equ	0xFF1
 11570                           postinc0	equ	0xFEE
 11571                           wreg	equ	0xFE8
 11572                           postdec1	equ	0xFE5
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _i2cHighScl *****************
 11582 ;; Defined at:
 11583 ;;		line 114 in file "I2C_Soft.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;		None               void
 11590 ;; Registers used:
 11591 ;;		wreg
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;Total ram usage:        0 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    3
 11604 ;; This function calls:
 11605 ;;		Nothing
 11606 ;; This function is called by:
 11607 ;;		_I2C_Init
 11608 ;;		_I2C_Read
 11609 ;;		_I2C_Write
 11610 ;;		_i2cNack
 11611 ;;		_i2cAck
 11612 ;;		_I2C_Start
 11613 ;;		_I2C_ReStart
 11614 ;;		_I2C_Stop
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           	psect	text70
 11619  002426                     __ptext70:
 11620                           	opt stack 0
 11621  002426                     _i2cHighScl:
 11622                           	opt stack 25
 11623                           
 11624                           ;I2C_Soft.c: 116: TRISBbits.RB4 = 1;
 11625                           
 11626                           ;incstack = 0
 11627  002426  8893               	bsf	3987,4,c	;volatile
 11628                           
 11629                           ;I2C_Soft.c: 117: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11630  002428  0E06               	movlw	6
 11631  00242A                     u5497:
 11632  00242A  2EE8               	decfsz	wreg,f,c
 11633  00242C  D7FE               	goto	u5497
 11634  00242E  D000               	nop2		;nop
 11635  002430  0012               	return		;funcret
 11636  002432                     __end_of_i2cHighScl:
 11637                           	opt stack 0
 11638                           tblptru	equ	0xFF8
 11639                           tblptrh	equ	0xFF7
 11640                           tblptrl	equ	0xFF6
 11641                           tablat	equ	0xFF5
 11642                           prodh	equ	0xFF4
 11643                           prodl	equ	0xFF3
 11644                           intcon	equ	0xFF2
 11645                           intcon2	equ	0xFF1
 11646                           postinc0	equ	0xFEE
 11647                           wreg	equ	0xFE8
 11648                           postdec1	equ	0xFE5
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function _chkisr *****************
 11658 ;; Defined at:
 11659 ;;		line 27 in file "Interrupt.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;		None
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;		None
 11664 ;; Return value:  Size  Location     Type
 11665 ;;		None               void
 11666 ;; Registers used:
 11667 ;;		wreg, status,2, status,0, cstack
 11668 ;; Tracked objects:
 11669 ;;		On entry : 0/0
 11670 ;;		On exit  : 0/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;Total ram usage:       14 bytes
 11678 ;; Hardware stack levels used:    1
 11679 ;; Hardware stack levels required when called:    2
 11680 ;; This function calls:
 11681 ;;		_INT0_isr
 11682 ;;		_TIMER1_isr
 11683 ;; This function is called by:
 11684 ;;		Interrupt level 2
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           	psect	intcode
 11689  000008                     __pintcode:
 11690                           	opt stack 0
 11691  000008                     _chkisr:
 11692                           	opt stack 20
 11693                           
 11694                           ;incstack = 0
 11695  000008  CFFA F003          	movff	pclath,??_chkisr
 11696  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11697  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11698  000014  ED4C  F00D         	call	int_func,f	;refresh shadow registers
 11699                           pclatu	equ	0xFFB
 11700                           pclath	equ	0xFFA
 11701                           tblptru	equ	0xFF8
 11702                           tblptrh	equ	0xFF7
 11703                           tblptrl	equ	0xFF6
 11704                           tablat	equ	0xFF5
 11705                           prodh	equ	0xFF4
 11706                           prodl	equ	0xFF3
 11707                           intcon	equ	0xFF2
 11708                           intcon2	equ	0xFF1
 11709                           postinc0	equ	0xFEE
 11710                           fsr0l	equ	0xFE9
 11711                           wreg	equ	0xFE8
 11712                           postdec1	equ	0xFE5
 11713                           fsr1l	equ	0xFE1
 11714                           indf2	equ	0xFDF
 11715                           postinc2	equ	0xFDE
 11716                           postdec2	equ	0xFDD
 11717                           fsr2h	equ	0xFDA
 11718                           fsr2l	equ	0xFD9
 11719                           status	equ	0xFD8
 11720                           
 11721                           	psect	intcode_body
 11722  001A98                     __pintcode_body:
 11723                           	opt stack 20
 11724  001A98                     int_func:
 11725                           	opt stack 20
 11726  001A98  0006               	pop		; remove dummy address from shadow register refresh
 11727  001A9A  CFEA F006          	movff	fsr0h,??_chkisr+3
 11728  001A9E  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11729  001AA2  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11730  001AA6  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11731  001AAA  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11732  001AAE  CFF3 F00B          	movff	prodl,??_chkisr+8
 11733  001AB2  CFF4 F00C          	movff	prodh,??_chkisr+9
 11734  001AB6  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11735  001ABA  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11736  001ABE  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11737  001AC2  CFF5 F010          	movff	tablat,??_chkisr+13
 11738                           
 11739                           ;Interrupt.c: 29: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11740  001AC6  A09E               	btfss	3998,0,c	;volatile
 11741  001AC8  D003               	goto	i2l5028
 11742  001ACA  EC19  F012         	call	_TIMER1_isr	;wreg free
 11743  001ACE  D000               	goto	i2l5028
 11744  001AD0                     i2l5028:
 11745                           
 11746                           ;Interrupt.c: 30: if (INTCONbits.INT0IF == 1) INT0_isr();
 11747  001AD0  A2F2               	btfss	intcon,1,c	;volatile
 11748  001AD2  D003               	goto	i2l461
 11749  001AD4  ECC9  F006         	call	_INT0_isr	;wreg free
 11750  001AD8  D000               	goto	i2l461
 11751  001ADA                     i2l461:
 11752  001ADA  C010  FFF5         	movff	??_chkisr+13,tablat
 11753  001ADE  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11754  001AE2  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11755  001AE6  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11756  001AEA  C00C  FFF4         	movff	??_chkisr+9,prodh
 11757  001AEE  C00B  FFF3         	movff	??_chkisr+8,prodl
 11758  001AF2  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11759  001AF6  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11760  001AFA  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11761  001AFE  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11762  001B02  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11763  001B06  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11764  001B0A  C004  FFFB         	movff	??_chkisr+1,pclatu
 11765  001B0E  C003  FFFA         	movff	??_chkisr,pclath
 11766  001B12  0011               	retfie		f
 11767  001B14                     __end_of_chkisr:
 11768                           	opt stack 0
 11769                           pclatu	equ	0xFFB
 11770                           pclath	equ	0xFFA
 11771                           tblptru	equ	0xFF8
 11772                           tblptrh	equ	0xFF7
 11773                           tblptrl	equ	0xFF6
 11774                           tablat	equ	0xFF5
 11775                           prodh	equ	0xFF4
 11776                           prodl	equ	0xFF3
 11777                           intcon	equ	0xFF2
 11778                           intcon2	equ	0xFF1
 11779                           postinc0	equ	0xFEE
 11780                           fsr0h	equ	0xFEA
 11781                           fsr0l	equ	0xFE9
 11782                           wreg	equ	0xFE8
 11783                           postdec1	equ	0xFE5
 11784                           fsr1h	equ	0xFE2
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           fsr2h	equ	0xFDA
 11790                           fsr2l	equ	0xFD9
 11791                           status	equ	0xFD8
 11792                           
 11793 ;; *************** function _TIMER1_isr *****************
 11794 ;; Defined at:
 11795 ;;		line 33 in file "Interrupt.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;		None
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;		None
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, status,2
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;Total ram usage:        0 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; This function calls:
 11816 ;;		Nothing
 11817 ;; This function is called by:
 11818 ;;		_chkisr
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text72
 11823  002432                     __ptext72:
 11824                           	opt stack 0
 11825  002432                     _TIMER1_isr:
 11826                           	opt stack 21
 11827                           
 11828                           ;Interrupt.c: 35: Nec_state = 0;
 11829                           
 11830                           ;incstack = 0
 11831  002432  0E00               	movlw	0
 11832  002434  6E52               	movwf	_Nec_state,c
 11833                           
 11834                           ;Interrupt.c: 36: INTCON2bits.INTEDG0 = 0;
 11835  002436  9CF1               	bcf	intcon2,6,c	;volatile
 11836                           
 11837                           ;Interrupt.c: 37: T1CONbits.TMR1ON = 0;
 11838  002438  90CD               	bcf	4045,0,c	;volatile
 11839                           
 11840                           ;Interrupt.c: 38: PIR1bits.TMR1IF = 0;
 11841  00243A  909E               	bcf	3998,0,c	;volatile
 11842  00243C  0012               	return		;funcret
 11843  00243E                     __end_of_TIMER1_isr:
 11844                           	opt stack 0
 11845                           pclatu	equ	0xFFB
 11846                           pclath	equ	0xFFA
 11847                           tblptru	equ	0xFF8
 11848                           tblptrh	equ	0xFF7
 11849                           tblptrl	equ	0xFF6
 11850                           tablat	equ	0xFF5
 11851                           prodh	equ	0xFF4
 11852                           prodl	equ	0xFF3
 11853                           intcon	equ	0xFF2
 11854                           intcon2	equ	0xFF1
 11855                           postinc0	equ	0xFEE
 11856                           fsr0h	equ	0xFEA
 11857                           fsr0l	equ	0xFE9
 11858                           wreg	equ	0xFE8
 11859                           postdec1	equ	0xFE5
 11860                           fsr1h	equ	0xFE2
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           fsr2h	equ	0xFDA
 11866                           fsr2l	equ	0xFD9
 11867                           status	equ	0xFD8
 11868                           
 11869 ;; *************** function _INT0_isr *****************
 11870 ;; Defined at:
 11871 ;;		line 47 in file "Interrupt.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;		None               void
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;Total ram usage:        2 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    1
 11892 ;; This function calls:
 11893 ;;		_force_nec_state0
 11894 ;; This function is called by:
 11895 ;;		_chkisr
 11896 ;; This function uses a non-reentrant model
 11897 ;;
 11898                           
 11899                           	psect	text73
 11900  000D92                     __ptext73:
 11901                           	opt stack 0
 11902  000D92                     _INT0_isr:
 11903                           	opt stack 20
 11904                           
 11905                           ;Interrupt.c: 49: INTCONbits.INT0IF = 0;
 11906                           
 11907                           ;incstack = 0
 11908  000D92  92F2               	bcf	intcon,1,c	;volatile
 11909                           
 11910                           ;Interrupt.c: 50: if (Nec_state != 0)
 11911  000D94  5052               	movf	_Nec_state,w,c
 11912  000D96  B4D8               	btfsc	status,2,c
 11913  000D98  D0A0               	goto	i2l4834
 11914                           
 11915                           ;Interrupt.c: 51: {
 11916                           ;Interrupt.c: 52: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11917  000D9A  50CE               	movf	4046,w,c	;volatile
 11918  000D9C  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11919  000DA0  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11920  000DA2  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11921  000DA6  6A01               	clrf	??_INT0_isr,c
 11922  000DA8  1001               	iorwf	??_INT0_isr,w,c
 11923  000DAA  6E48               	movwf	_Time_Elapsed,c
 11924  000DAC  5002               	movf	??_INT0_isr+1,w,c
 11925  000DAE  6E49               	movwf	_Time_Elapsed+1,c
 11926                           
 11927                           ;Interrupt.c: 53: TMR1H = 0;
 11928  000DB0  0E00               	movlw	0
 11929  000DB2  6ECF               	movwf	4047,c	;volatile
 11930                           
 11931                           ;Interrupt.c: 54: TMR1L = 0;
 11932  000DB4  0E00               	movlw	0
 11933  000DB6  6ECE               	movwf	4046,c	;volatile
 11934                           
 11935                           ;Interrupt.c: 55: }
 11936                           ;Interrupt.c: 57: switch(Nec_state)
 11937  000DB8  D090               	goto	i2l4834
 11938  000DBA                     i2l4762:
 11939                           
 11940                           ;Interrupt.c: 60: {
 11941                           ;Interrupt.c: 62: TMR1H = 0;
 11942  000DBA  0E00               	movlw	0
 11943  000DBC  6ECF               	movwf	4047,c	;volatile
 11944                           
 11945                           ;Interrupt.c: 63: TMR1L = 0;
 11946  000DBE  0E00               	movlw	0
 11947  000DC0  6ECE               	movwf	4046,c	;volatile
 11948                           
 11949                           ;Interrupt.c: 64: PIR1bits.TMR1IF = 0;
 11950  000DC2  909E               	bcf	3998,0,c	;volatile
 11951                           
 11952                           ;Interrupt.c: 65: T1CON= 0x90;
 11953  000DC4  0E90               	movlw	144
 11954  000DC6  6ECD               	movwf	4045,c	;volatile
 11955                           
 11956                           ;Interrupt.c: 66: T1CONbits.TMR1ON = 1;
 11957  000DC8  80CD               	bsf	4045,0,c	;volatile
 11958                           
 11959                           ;Interrupt.c: 67: bit_count = 0;
 11960  000DCA  0E00               	movlw	0
 11961  000DCC  6E58               	movwf	_bit_count,c
 11962                           
 11963                           ;Interrupt.c: 68: Nec_code = 0;
 11964  000DCE  0E00               	movlw	0
 11965  000DD0  0100               	movlb	0	; () banked
 11966  000DD2  6FF5               	movwf	_Nec_code& (0+255),b
 11967  000DD4  0E00               	movlw	0
 11968  000DD6  6FF6               	movwf	(_Nec_code+1)& (0+255),b
 11969  000DD8  0E00               	movlw	0
 11970  000DDA  6FF7               	movwf	(_Nec_code+2)& (0+255),b
 11971  000DDC  0E00               	movlw	0
 11972  000DDE  6FF8               	movwf	(_Nec_code+3)& (0+255),b
 11973                           
 11974                           ;Interrupt.c: 69: Nec_state = 1;
 11975  000DE0  0E01               	movlw	1
 11976  000DE2  6E52               	movwf	_Nec_state,c
 11977  000DE4  D078               	goto	i2l4828
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Interrupt.c: 71: return;
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;Interrupt.c: 70: INTCON2bits.INTEDG0 = 1;
 11984  000DE6  D08A               	goto	i2l473
 11985  000DE8                     i2l4772:
 11986                           
 11987                           ;Interrupt.c: 75: {
 11988                           ;Interrupt.c: 76: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 11989  000DE8  0E35               	movlw	53
 11990  000DEA  5C48               	subwf	_Time_Elapsed,w,c
 11991  000DEC  0E21               	movlw	33
 11992  000DEE  5849               	subwfb	_Time_Elapsed+1,w,c
 11993  000DF0  A0D8               	btfss	status,0,c
 11994  000DF2  D009               	goto	i2l4778
 11995  000DF4  0E1C               	movlw	28
 11996  000DF6  5C48               	subwf	_Time_Elapsed,w,c
 11997  000DF8  0E25               	movlw	37
 11998  000DFA  5849               	subwfb	_Time_Elapsed+1,w,c
 11999  000DFC  B0D8               	btfsc	status,0,c
 12000  000DFE  D003               	goto	i2l4778
 12001                           
 12002                           ;Interrupt.c: 77: {
 12003                           ;Interrupt.c: 78: Nec_state = 2;
 12004  000E00  0E02               	movlw	2
 12005  000E02  6E52               	movwf	_Nec_state,c
 12006                           
 12007                           ;Interrupt.c: 79: }
 12008  000E04  D02A               	goto	i2l4804
 12009  000E06                     i2l4778:
 12010                           
 12011                           ;Interrupt.c: 80: else
 12012                           ;Interrupt.c: 81: {
 12013                           ;Interrupt.c: 82: force_nec_state0();
 12014  000E06  EC3F  F012         	call	_force_nec_state0	;wreg free
 12015  000E0A  D027               	goto	i2l4804
 12016  000E0C  D026               	goto	i2l4804
 12017                           
 12018                           ;Interrupt.c: 85: return;
 12019                           
 12020                           ;Interrupt.c: 83: }
 12021                           ;Interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
 12022  000E0E  D076               	goto	i2l473
 12023  000E10                     i2l4784:
 12024                           
 12025                           ;Interrupt.c: 89: {
 12026                           ;Interrupt.c: 90: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 12027  000E10  0EA1               	movlw	161
 12028  000E12  5C48               	subwf	_Time_Elapsed,w,c
 12029  000E14  0E0F               	movlw	15
 12030  000E16  5849               	subwfb	_Time_Elapsed+1,w,c
 12031  000E18  A0D8               	btfss	status,0,c
 12032  000E1A  D009               	goto	i2l4790
 12033  000E1C  0E88               	movlw	136
 12034  000E1E  5C48               	subwf	_Time_Elapsed,w,c
 12035  000E20  0E13               	movlw	19
 12036  000E22  5849               	subwfb	_Time_Elapsed+1,w,c
 12037  000E24  B0D8               	btfsc	status,0,c
 12038  000E26  D003               	goto	i2l4790
 12039  000E28                     
 12040                           ;Interrupt.c: 91: {
 12041                           ;Interrupt.c: 92: Nec_state = 3;
 12042  000E28  0E03               	movlw	3
 12043  000E2A  6E52               	movwf	_Nec_state,c
 12044                           
 12045                           ;Interrupt.c: 93: }
 12046  000E2C  D054               	goto	i2l4828
 12047  000E2E                     i2l4790:
 12048                           
 12049                           ;Interrupt.c: 94: else
 12050                           ;Interrupt.c: 95: {
 12051                           ;Interrupt.c: 96: force_nec_state0();
 12052  000E2E  EC3F  F012         	call	_force_nec_state0	;wreg free
 12053  000E32  D051               	goto	i2l4828
 12054  000E34  D050               	goto	i2l4828
 12055                           
 12056                           ;Interrupt.c: 99: return;
 12057                           
 12058                           ;Interrupt.c: 97: }
 12059                           ;Interrupt.c: 98: INTCON2bits.INTEDG0 = 1;
 12060  000E36  D062               	goto	i2l473
 12061  000E38                     i2l4796:
 12062                           
 12063                           ;Interrupt.c: 103: {
 12064                           ;Interrupt.c: 104: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 12065  000E38  0E91               	movlw	145
 12066  000E3A  5C48               	subwf	_Time_Elapsed,w,c
 12067  000E3C  0E01               	movlw	1
 12068  000E3E  5849               	subwfb	_Time_Elapsed+1,w,c
 12069  000E40  A0D8               	btfss	status,0,c
 12070  000E42  D008               	goto	i2l4802
 12071  000E44  0EBC               	movlw	188
 12072  000E46  5C48               	subwf	_Time_Elapsed,w,c
 12073  000E48  0E02               	movlw	2
 12074  000E4A  5849               	subwfb	_Time_Elapsed+1,w,c
 12075  000E4C  B0D8               	btfsc	status,0,c
 12076  000E4E  D002               	goto	i2l4802
 12077                           
 12078                           ;Interrupt.c: 105: {
 12079                           ;Interrupt.c: 106: Nec_state = 4;
 12080  000E50  0E04               	movlw	4
 12081  000E52  D7D7               	goto	L5
 12082  000E54                     i2l4802:
 12083                           
 12084                           ;Interrupt.c: 108: else
 12085                           ;Interrupt.c: 109: {
 12086                           ;Interrupt.c: 110: force_nec_state0();
 12087  000E54  EC3F  F012         	call	_force_nec_state0	;wreg free
 12088  000E58  D000               	goto	i2l4804
 12089  000E5A                     i2l4804:
 12090                           
 12091                           ;Interrupt.c: 111: }
 12092                           ;Interrupt.c: 112: INTCON2bits.INTEDG0 = 0;
 12093  000E5A  9CF1               	bcf	intcon2,6,c	;volatile
 12094                           
 12095                           ;Interrupt.c: 113: return;
 12096  000E5C  D04F               	goto	i2l473
 12097  000E5E                     i2l4808:
 12098                           
 12099                           ;Interrupt.c: 117: {
 12100                           ;Interrupt.c: 118: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 12101  000E5E  0E91               	movlw	145
 12102  000E60  5C48               	subwf	_Time_Elapsed,w,c
 12103  000E62  0E01               	movlw	1
 12104  000E64  5849               	subwfb	_Time_Elapsed+1,w,c
 12105  000E66  A0D8               	btfss	status,0,c
 12106  000E68  D033               	goto	i2l4826
 12107  000E6A  0E08               	movlw	8
 12108  000E6C  5C48               	subwf	_Time_Elapsed,w,c
 12109  000E6E  0E07               	movlw	7
 12110  000E70  5849               	subwfb	_Time_Elapsed+1,w,c
 12111  000E72  B0D8               	btfsc	status,0,c
 12112  000E74  D02D               	goto	i2l4826
 12113                           
 12114                           ;Interrupt.c: 119: {
 12115                           ;Interrupt.c: 120: Nec_code = Nec_code << 1;
 12116  000E76  90D8               	bcf	status,0,c
 12117  000E78  0100               	movlb	0	; () banked
 12118  000E7A  35F5               	rlcf	_Nec_code& (0+255),w,b
 12119  000E7C  0100               	movlb	0	; () banked
 12120  000E7E  6FF5               	movwf	_Nec_code& (0+255),b
 12121  000E80  0100               	movlb	0	; () banked
 12122  000E82  35F6               	rlcf	(_Nec_code+1)& (0+255),w,b
 12123  000E84  0100               	movlb	0	; () banked
 12124  000E86  6FF6               	movwf	(_Nec_code+1)& (0+255),b
 12125  000E88  0100               	movlb	0	; () banked
 12126  000E8A  35F7               	rlcf	(_Nec_code+2)& (0+255),w,b
 12127  000E8C  0100               	movlb	0	; () banked
 12128  000E8E  6FF7               	movwf	(_Nec_code+2)& (0+255),b
 12129  000E90  0100               	movlb	0	; () banked
 12130  000E92  35F8               	rlcf	(_Nec_code+3)& (0+255),w,b
 12131  000E94  0100               	movlb	0	; () banked
 12132  000E96  6FF8               	movwf	(_Nec_code+3)& (0+255),b
 12133                           
 12134                           ;Interrupt.c: 121: if(Time_Elapsed > 1000)
 12135  000E98  0EE9               	movlw	233
 12136  000E9A  5C48               	subwf	_Time_Elapsed,w,c
 12137  000E9C  0E03               	movlw	3
 12138  000E9E  5849               	subwfb	_Time_Elapsed+1,w,c
 12139  000EA0  A0D8               	btfss	status,0,c
 12140  000EA2  D008               	goto	i2l4816
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;Interrupt.c: 122: {
 12144                           ;Interrupt.c: 123: Nec_code++;
 12145  000EA4  0E01               	movlw	1
 12146  000EA6  0100               	movlb	0	; () banked
 12147  000EA8  27F5               	addwf	_Nec_code& (0+255),f,b
 12148  000EAA  0E00               	movlw	0
 12149  000EAC  23F6               	addwfc	(_Nec_code+1)& (0+255),f,b
 12150  000EAE  23F7               	addwfc	(_Nec_code+2)& (0+255),f,b
 12151  000EB0  23F8               	addwfc	(_Nec_code+3)& (0+255),f,b
 12152  000EB2  D000               	goto	i2l4816
 12153  000EB4                     i2l4816:
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Interrupt.c: 124: }
 12157                           ;Interrupt.c: 125: bit_count++;
 12158  000EB4  2A58               	incf	_bit_count,f,c
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;Interrupt.c: 126: if(bit_count > 31)
 12162  000EB6  0E1F               	movlw	31
 12163  000EB8  6458               	cpfsgt	_bit_count,c
 12164  000EBA  D7B6               	goto	L6
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;Interrupt.c: 127: {
 12168                           ;Interrupt.c: 128: nec_ok = 1;
 12169  000EBC  0E00               	movlw	0
 12170  000EBE  6E4B               	movwf	_nec_ok+1,c
 12171  000EC0  0E01               	movlw	1
 12172  000EC2  6E4A               	movwf	_nec_ok,c
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;Interrupt.c: 129: Nec_code1 = (char) ((Nec_code >> 8));
 12176  000EC4  C0F6  F051         	movff	_Nec_code+1,_Nec_code1
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;Interrupt.c: 130: INT0IE = 0;
 12180  000EC8  98F2               	bcf	intcon,4,c	;volatile
 12181                           
 12182                           ;Interrupt.c: 131: Nec_state = 0;
 12183  000ECA  0E00               	movlw	0
 12184  000ECC  6E52               	movwf	_Nec_state,c
 12185  000ECE  D7AC               	goto	L6
 12186  000ED0                     i2l4826:
 12187                           
 12188                           ;Interrupt.c: 135: else
 12189                           ;Interrupt.c: 136: {
 12190                           ;Interrupt.c: 137: force_nec_state0();
 12191  000ED0  EC3F  F012         	call	_force_nec_state0	;wreg free
 12192  000ED4  D000               	goto	i2l4828
 12193  000ED6                     i2l4828:
 12194                           
 12195                           ;Interrupt.c: 138: }
 12196                           ;Interrupt.c: 139: INTCON2bits.INTEDG0 = 1;
 12197  000ED6  8CF1               	bsf	intcon2,6,c	;volatile
 12198                           
 12199                           ;Interrupt.c: 141: }
 12200                           ;Interrupt.c: 142: }
 12201                           
 12202                           ;Interrupt.c: 140: return;
 12203  000ED8  D011               	goto	i2l473
 12204  000EDA                     i2l4834:
 12205  000EDA  5052               	movf	_Nec_state,w,c
 12206                           
 12207                           ; Switch size 1, requested type "space"
 12208                           ; Number of cases is 5, Range of values is 0 to 4
 12209                           ; switch strategies available:
 12210                           ; Name         Instructions Cycles
 12211                           ; simple_byte           16     9 (average)
 12212                           ;	Chosen strategy is simple_byte
 12213  000EDC  0A00               	xorlw	0	; case 0
 12214  000EDE  B4D8               	btfsc	status,2,c
 12215  000EE0  D76C               	goto	i2l4762
 12216  000EE2  0A01               	xorlw	1	; case 1
 12217  000EE4  B4D8               	btfsc	status,2,c
 12218  000EE6  D780               	goto	i2l4772
 12219  000EE8  0A03               	xorlw	3	; case 2
 12220  000EEA  B4D8               	btfsc	status,2,c
 12221  000EEC  D791               	goto	i2l4784
 12222  000EEE  0A01               	xorlw	1	; case 3
 12223  000EF0  B4D8               	btfsc	status,2,c
 12224  000EF2  D7A2               	goto	i2l4796
 12225  000EF4  0A07               	xorlw	7	; case 4
 12226  000EF6  B4D8               	btfsc	status,2,c
 12227  000EF8  D7B2               	goto	i2l4808
 12228  000EFA  D000               	goto	i2l473
 12229  000EFC                     i2l473:
 12230  000EFC  0012               	return		;funcret
 12231  000EFE                     __end_of_INT0_isr:
 12232                           	opt stack 0
 12233                           pclatu	equ	0xFFB
 12234                           pclath	equ	0xFFA
 12235                           tblptru	equ	0xFF8
 12236                           tblptrh	equ	0xFF7
 12237                           tblptrl	equ	0xFF6
 12238                           tablat	equ	0xFF5
 12239                           prodh	equ	0xFF4
 12240                           prodl	equ	0xFF3
 12241                           intcon	equ	0xFF2
 12242                           intcon2	equ	0xFF1
 12243                           postinc0	equ	0xFEE
 12244                           fsr0h	equ	0xFEA
 12245                           fsr0l	equ	0xFE9
 12246                           wreg	equ	0xFE8
 12247                           postdec1	equ	0xFE5
 12248                           fsr1h	equ	0xFE2
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           fsr2h	equ	0xFDA
 12254                           fsr2l	equ	0xFD9
 12255                           status	equ	0xFD8
 12256                           
 12257 ;; *************** function _force_nec_state0 *****************
 12258 ;; Defined at:
 12259 ;;		line 41 in file "Interrupt.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;		None
 12264 ;; Return value:  Size  Location     Type
 12265 ;;		None               void
 12266 ;; Registers used:
 12267 ;;		wreg, status,2
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;Total ram usage:        0 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; This function calls:
 12280 ;;		Nothing
 12281 ;; This function is called by:
 12282 ;;		_INT0_isr
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           	psect	text74
 12287  00247E                     __ptext74:
 12288                           	opt stack 0
 12289  00247E                     _force_nec_state0:
 12290                           	opt stack 20
 12291                           
 12292                           ;Interrupt.c: 43: Nec_state=0;
 12293                           
 12294                           ;incstack = 0
 12295  00247E  0E00               	movlw	0
 12296  002480  6E52               	movwf	_Nec_state,c
 12297                           
 12298                           ;Interrupt.c: 44: T1CONbits.TMR1ON = 0;
 12299  002482  90CD               	bcf	4045,0,c	;volatile
 12300  002484  0012               	return		;funcret
 12301  002486                     __end_of_force_nec_state0:
 12302                           	opt stack 0
 12303                           pclatu	equ	0xFFB
 12304                           pclath	equ	0xFFA
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           intcon2	equ	0xFF1
 12313                           postinc0	equ	0xFEE
 12314                           fsr0h	equ	0xFEA
 12315                           fsr0l	equ	0xFE9
 12316                           wreg	equ	0xFE8
 12317                           postdec1	equ	0xFE5
 12318                           fsr1h	equ	0xFE2
 12319                           fsr1l	equ	0xFE1
 12320                           indf2	equ	0xFDF
 12321                           postinc2	equ	0xFDE
 12322                           postdec2	equ	0xFDD
 12323                           fsr2h	equ	0xFDA
 12324                           fsr2l	equ	0xFD9
 12325                           status	equ	0xFD8
 12326                           pclatu	equ	0xFFB
 12327                           pclath	equ	0xFFA
 12328                           tblptru	equ	0xFF8
 12329                           tblptrh	equ	0xFF7
 12330                           tblptrl	equ	0xFF6
 12331                           tablat	equ	0xFF5
 12332                           prodh	equ	0xFF4
 12333                           prodl	equ	0xFF3
 12334                           intcon	equ	0xFF2
 12335                           intcon2	equ	0xFF1
 12336                           postinc0	equ	0xFEE
 12337                           fsr0h	equ	0xFEA
 12338                           fsr0l	equ	0xFE9
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           fsr1h	equ	0xFE2
 12342                           fsr1l	equ	0xFE1
 12343                           indf2	equ	0xFDF
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           fsr2h	equ	0xFDA
 12347                           fsr2l	equ	0xFD9
 12348                           status	equ	0xFD8
 12349                           
 12350                           	psect	rparam
 12351  0000                     pclatu	equ	0xFFB
 12352                           pclath	equ	0xFFA
 12353                           tblptru	equ	0xFF8
 12354                           tblptrh	equ	0xFF7
 12355                           tblptrl	equ	0xFF6
 12356                           tablat	equ	0xFF5
 12357                           prodh	equ	0xFF4
 12358                           prodl	equ	0xFF3
 12359                           intcon	equ	0xFF2
 12360                           intcon2	equ	0xFF1
 12361                           postinc0	equ	0xFEE
 12362                           fsr0h	equ	0xFEA
 12363                           fsr0l	equ	0xFE9
 12364                           wreg	equ	0xFE8
 12365                           postdec1	equ	0xFE5
 12366                           fsr1h	equ	0xFE2
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8


Data Sizes:
    Strings     208
    Constant    493
    Data        221
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     16     127
    BANK1           256      0     117
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[3]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), 
		 -> STR_9(CODE[3]), STR_8(CODE[13]), STR_7(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_6(CODE[15]), STR_5(CODE[22]), STR_4(CODE[16]), STR_3(CODE[20]), 
		 -> STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  122363
                                             11 BANK0      5     5      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3846
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22483
                                              7 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          7     5      2    2361
                                             30 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           3     1      2    2296
                                             30 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8102
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      75       7       45.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     163      34        0.0%
DATA                 0      0     163       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 01 20:50:45 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 _D1 00A4  
                               _D2 00AC                                 _D3 012A  
                     ___awdiv@sign 001C               __size_of_Turn_On_Fan 0010  
              ___wmul@multiplicand 0013                    ??_Update_Screen 00EC  
                              l330 1FB8                                l251 203A  
                              l333 20C6                                l413 2130  
                              l175 241C                                l272 2254  
                              l256 2350                                l281 1FFC  
                              l267 220A                                l294 2278  
                              l702 16FA                                l286 1C62  
                              l703 1666                                l713 0CA6  
                              l705 16D6                                l706 16F8  
                              l643 2192                                l832 0748  
                              l649 1994                                l665 1052  
                              l674 0FA8                                l667 0F2C  
                              l860 1BD0                                l861 1BD2  
                              l589 1E3A                                l862 1BDC  
                              l863 1BDE                                l599 2360  
                              l856 1BB6                                _FAN 0050  
                              l865 1BF8                                l795 04F0  
                              l868 21E4                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 2466  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 00FB                                _rpm 004C  
            __size_of_Turn_Off_Fan 000A                                _rps 00FD  
                              _txt 004E                       ___awmod@sign 0024  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                         _Fan_SW_Txt 00D9  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 2194                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1061 190C  
                             l1401 1ED2                               l1074 1A16  
                             l1251 15EA                               l1325 2230  
                             l1430 2078                               l1263 1364  
                             l1176 17C0                               l1248 161E  
                             l1187 1798                               l1284 153C  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l1391 1DE6                               l1299 229A  
                             l6012 213C                               l6014 2146  
                             l5320 1956                               l6040 11FE  
                             l6024 1190                               l6120 188E  
                             l6200 1DB4                               l5330 197C  
                             l6050 1258                               l6210 1DDA  
                             l6202 1DBC                               l5500 128C  
                             l5332 198A                               l5316 191E  
                             l6036 11E0                               l6132 18B6  
                             l6220 1EA8                               l6108 2292  
                             l5350 1728                               l5502 12A6  
                             l6070 0C8C                               l6134 18C0  
                             l6126 18A0                               l6222 1EB0  
                             l5360 178C                               l5352 1748  
                             l5344 170C                               l5520 12E8  
                             l6048 1250                               l6152 1902  
                             l6144 18E6                               l6136 18C8  
                             l6400 0438                               l5530 1316  
                             l5506 12B4                               l5610 1BBA  
                             l5602 1BA6                               l5434 2174  
                             l5442 1F32                               l6226 1EC6  
                             l6218 1E9E                               l5372 17B2  
                             l5356 1760                               l5348 171C  
                             l5460 1584                               l5524 12FA  
                             l6148 18F2                               l6180 19F0  
                             l6172 19C8                               l6164 19AC  
                             l6500 067C                               l6412 04BA  
                             l6404 0456                               l5366 17A0  
                             l5358 1780                               l5454 155C  
                             l5534 1328                               l5606 1BAE  
                             l5446 1F4E                               l6174 19D2  
                             l6502 06C0                               l6510 0718  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5384 20D0  
                             l5480 15C4                               l5456 1576  
                             l5528 1310                               l5800 0F1A  
                             l6176 19DA                               l6184 19FC  
                             l6168 19BA                               l6512 0720  
                             l6432 0538                               l6416 04C2  
                             l5386 20D6                               l5378 20BE  
                             l5490 15F8                               l5538 133E  
                             l5570 14E0                               l5618 1BC8  
                             l6098 0D7C                               l5810 0F38  
                             l6522 1C32                               l6442 056C  
                             l6434 053C                               l6514 072C  
                             l5396 20E8                               l5660 225E  
                             l5572 14E6                               l5580 1512  
                             l5548 1476                               l5652 184E  
                             l5804 0F28                               l6532 1FEE  
                             l6524 1C38                               l6188 1A0C  
                             l6508 0706                               l6452 0582  
                             l6428 051E                               l5566 14D0  
                             l5814 0F68                               l5806 0F30  
                             l6542 0058                               l6198 1DAA  
                             l6470 05DA                               l6446 0572  
                             l6438 0548                               l6462 05AC  
                             l5664 2272                               l5584 152A  
                             l5576 14FA                               l6632 2248  
                             l6640 21FE                               l5816 0F9C  
                             l6456 05A6                               l6448 0576  
                             l6464 05BE                               l6392 040A  
                             l5578 1508                               l5834 101E  
                             l5826 0FCA                               l5842 104E  
                             l5818 0FA0                               l5850 204C  
                             l6626 234A                               l6490 0648  
                             l6482 0620                               l6474 05FE  
                             l6394 0418                               l6730 0AA2  
                             l6706 09C4                               l5836 1046  
                             l5828 0FF2                               l5860 1630  
                             l6564 012E                               l6548 0098  
                             l6484 0628                               l6476 0608  
                             l6388 03FA                               l5950 1F7C  
                             l5598 1B9C                               l6558 00EE  
                             l6494 0660                               l6398 0422  
                             l5960 1F92                               l5848 2046  
                             l6592 01C2                               l6488 0640  
                             l6760 0B2A                               l6744 0AD4  
                             l5962 1F9A                               l5954 1F84  
                             l5882 16DA                               l5866 169E  
                             l6594 01D8                               l6498 0674  
                             l6754 0B16                               l5972 1FAE  
                             l5796 0F0E                               l5892 16F4  
                             l6780 0B8C                               l6772 0B6E  
                             l6764 0B44                               l6748 0AEE  
                             l5974 1FB4                               l5886 16E4  
                             l5878 16CC                               l6790 0BC4  
                             l6758 0B20                               l5968 1FA2  
                             l6776 0B78                               l6794 0BD2  
                             STR_1 FF2E                               STR_2 FF62  
                             STR_3 FF8B                               STR_4 FFB0  
                             STR_5 FF4C                               STR_6 FFC0  
                             STR_7 FF77                               STR_8 FFCF  
                             STR_9 FFF8                               u4001 127E  
                             u4021 129C                               u4061 1468  
                             u4080 1494                               u4085 148C  
                             u4440 165E                               u5080 1FE2  
                             u4370 1000                               u4450 1694  
                             u4570 11BA                               u3780 194C  
                             u3951 154E                               u3971 156C  
                             u5497 242A                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0044  
                     _DS1621_tempF 0046                ??_Deactivate_Buzzer 0011  
                             _date 00BE                               _main 09B4  
                             _font FD41                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 2452                   __end_of_I2C_Read 1FBA  
                             _time 00C7                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 23C4                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 238E  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1F28                     _Increase_Speed 21E6  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 245C                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 243E                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0EFE  
        __end_of_Deactivate_Buzzer 246E                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 190E  
                  drawCircle@ddF_x 0026                              STR_10 FFF2  
                  drawCircle@ddF_y 0028                              STR_11 FFE2  
                            STR_12 FFE7                              STR_13 FFDC  
                            STR_14 FFFB                              STR_15 FFF4  
                            STR_16 FFEC                              STR_17 FFF0  
                            STR_18 FF9F                    __end_of___awmod 1A18  
                  __end_of___ftdiv 1620                    __end_of___ftmul 1366  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 153E  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1DF0                    __end_of___lwmod 1EDC  
                            i2l461 1ADA                              i2l473 0EFC  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTD 000F83                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 203C                              _Rcmd1 1054  
                            _Rcmd3 1366                         _i2cHighSda 2476  
                       _i2cHighScl 2426                    __end_of_dpowers FF26  
                            _color 0100                              _font2 FE40  
                            _found 005D                    __end_of_isdigit 229C  
                            _tempC 00DD                              _tempF 00E1  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 2418                              main@i 00F1  
                            main@j 00F3                  __end_of_I2C_Start 23D6  
                __end_of_I2C_Write 20F6                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5             Set_RPM_RGB@valuemasked 0024  
                            status 000FD8             __end_of_Increase_Speed 220C  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 1A18  
                    ??_Set_RPM_RGB 0021                       __end_of_main 0BE4  
                     __end_of_font FE40                   __end_of_Rcmd2red 20B8  
                 ??_Decrease_Speed 0044                             ??_main 00F0  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 23A0  
                       _Set_DC_RGB 1FBA          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 17C2                   __end_of___lbtoft 2232  
                        ??_Do_Beep 0044                             _INT0IE 007F94  
                           _DC_Txt 00D5                             i2l5028 1AD0  
                        ??_Do_Init 0017                             i2l4802 0E54  
                           i2l4804 0E5A                             i2l4816 0EB4  
                           i2l4808 0E5E                             i2l4826 0ED0  
                           i2l4762 0DBA                             i2l4834 0EDA  
                           i2l4828 0ED6                             i2l4772 0DE8  
                           i2l4790 0E2E                             i2l4784 0E10  
                           i2l4778 0E06                             i2l4796 0E38  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B8                   _force_nec_state0 247E  
                 __end_of_delay_ms 1E42                             _i2cAck 23D6  
                 __end_of_fillRect 1F72                   __end_of_drawChar 1054  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 21BE                          ??___awdiv 001B  
                 __end_of_drawtext 126E                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 013F  
                        ??___lwmod 001C                             _buffer 0154  
                           _nec_ok 004A                             clear_0 1A1E  
                           clear_1 1A2A                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
          DS3231_Setup_Time@Device 0013                    ___awmod@divisor 0021  
                        ??_get_RPM 0021         __size_of_Deactivate_Buzzer 0008  
                  ___awmod@counter 0023                             _printf 03F0  
                     drawtext@size 0040                             _strcpy 2132  
                           _strlen 203C              ___ftmul@f3_as_product 0027  
              __end_of_Set_RPM_RGB 1C64                         _Toggle_Fan 233E  
                     __pdataCOMRAM 006D                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD40  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 22BC  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 2366  
                       __accesstop 0080            __end_of__initialization 1A8E  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0064  
               _setup_alarm_second 0065                      ___rparam_used 000001  
                       ___ftdiv@f1 002C                         ___ftdiv@f2 002F  
                       ___ftdiv@f3 0036                         ___lbtoft@c 001C  
                       ___ftmul@f1 001D                         ___ftmul@f2 0020  
                       ___fttol@f1 0011                      __end_of_Rcmd1 1164  
                    __end_of_Rcmd3 1458                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1CCA                       __pidataBANK1 1B14  
                    __end_of_font2 FF1C                  __end_of_i2cLowSda 2466  
                __end_of_i2cLowScl 2476                      __end_of_putch 2426  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                        ?_Set_DC_RGB 001F  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1BFA  
                          ??_putch 0011                         __pbssBANK0 00F5  
                 _setup_alarm_hour 0063                   _setup_alarm_time 0089  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 0080  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 001F                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 0044                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 1BFA  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                            _ALARMEN 00F9  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       I2C_Write@n 0012                            ?_printf 001D  
                  Set_DC_RGB@index 0021                            ?_strcpy 0011  
                          ?_strlen 0011                        ?_Toggle_Fan 0001  
                ??_Activate_Buzzer 0011                         _fillScreen 22DA  
            __end_of_Update_Screen 03F0                         _drawCircle 0BE4  
                   _init_INTERRUPT 2310                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00D0              __end_of_fillRectangle 16FC  
                          _Do_Beep 237A                          ?_drawtext 0039  
                _DS3231_Setup_Time 1C64                            _Do_Init 1EDC  
         _I2C_Write_Cmd_Write_Data 229C         __end_of_I2C_Write_Cmd_Only 2310  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                   ??_Wait_One_Sec 0011                            _i2cNack 2452  
               __end_of_TIMER1_isr 243E                 ?_DS3231_Setup_Time 0001  
                    _write_command 2408                          _I2C_Start 23C4  
                        _I2C_Write 20B8                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __size_of_Set_DC_RGB 0044                __end_of_DS1621_Init 22DA  
                __end_of_drawPixel 2194                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 1996                            ___awdiv 1878  
                          ___awmod 1996                            ___ftdiv 153E  
                  __size_of___wmul 0028                            ___ftmul 126E  
                          ___fttol 1458                            ___lwdiv 1D94  
                          ___lwmod 1E90                    __size_of_chkisr 1B0C  
                        ?_spiwrite 0001                            __pcinit 1A18  
                       ??___ftpack 0016                         ??___lbtoft 001C  
                          __ramtop 1000                            _get_RPM 1FFE  
                          __ptext0 09B4                            __ptext1 03F0  
                          __ptext2 2418                            __ptext3 227A  
                          __ptext4 1E90                            __ptext5 1D94  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 1FFE  
                          __ptext7 001C                            __ptext8 1996  
                          __ptext9 233E                    __size_of_printf 035A  
                __end_of_init_UART 237A                __end_of_Turn_On_Fan 23F8  
           __end_of_init_INTERRUPT 2328                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF2E           __end_of_force_nec_state0 2486  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF1C              __end_of_do_update_pwm 1878  
                          _isdigit 227A                          _T3CONbits 000FB1  
                 ___awmod@dividend 001F                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 233E  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1CCA  
                 ??_Increase_Speed 0044                         ??_drawChar 0035  
                        _LCD_Reset 238E                      _setAddrWindow 1E42  
                   __pintcode_body 1A98                      Wait_One_Sec@k 0011  
                       delay_ms@ms 0017               end_of_initialization 1A8E  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD40          __size_of_DS3231_Read_Time 0064  
                          int_func 1A98            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                   drawtext@cursor_x 00EB  
                 drawtext@cursor_y 00EA                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                       _setup_date 0092                        ?_fillScreen 0024  
                       _setup_hour 0067                         _setup_time 009B  
                       _setup_year 006B                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E6                         drawPixel@x 001B  
                       drawPixel@y 0018                        _DS1621_Init 22BC  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 016C  
                   __end_of_i2cAck 23E8                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0017                        _Turn_On_Fan 23E8  
               __end_of_i2cHighSda 247E                 __end_of_i2cHighScl 2432  
                   __end_of___wmul 21E6                      delay_ms@count 001B  
                       _write_data 23F8                      __pidataCOMRAM 2486  
                   __end_of_chkisr 1B14           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 2328                         drawtext@bg 003E  
                        _Nec_code1 0051                          _i2cLowSda 245C  
                        _i2cLowScl 246E               __end_of_Wait_One_Sec 227A  
                   __end_of_printf 074A                       ??_Set_DC_RGB 0021  
                   __end_of_strcpy 2164                     __end_of_strlen 207A  
                        _Nec_state 0052                start_initialization 1A18  
           Update_Screen@neg_tempF 00EE         __size_of_DS3231_Setup_Time 0066  
          __size_of_Decrease_Speed 0024                    ??_write_command 0013  
                        _OpenUSART 1B8A                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 23A0                 __end_of_Set_DC_RGB 1FFE  
                         ??___wmul 0015                       ?_Set_RPM_RGB 001F  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 20F6  
                         ??_strcpy 0015                           ??_strlen 0013  
                     ??_Toggle_Fan 0044                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00E5                        ??_LCD_Reset 001D  
                     _isdigit$2431 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1D30  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 2352  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 21BE  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD40  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 22F6  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 2164  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 2448  
                         _I2C_Read 1F72                           _I2C_Stop 23B2  
                _Initialize_Screen 074A                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 2366  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF26                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 23B2                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 0D92  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 03D4             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
            __size_of_Wait_One_Sec 0024                          _setup_day 0066  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 09B4                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                         ?_init_UART 0001  
                   _Decrease_Speed 2232                        _INTCON2bits 000FF1  
                        copy_data0 1A44                          copy_data1 1A64  
                        drawtext@i 00E8             __size_of_drawFastVLine 0088  
                        drawtext@x 00E5                          drawtext@y 0039  
                         _Nec_code 00F5                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                   __size_of_Do_Beep 0014  
                     ?_DS1621_Init 0001                           _Rcmd2red 207A  
                 __size_of_Do_Init 004C                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
                 __size_of_i2cNack 000A                      _RTC_ALARM_Txt 00BC  
                     _Wait_One_Sec 2256                           __Hrparam 0000  
           __size_of_do_update_pwm 00B6                 __end_of_fillScreen 22F6  
                         __Lrparam 0000                 __end_of_drawCircle 0D92  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 006A                           ___ftpack 16FC  
                         ___lbtoft 220C                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006D                     _setup_fan_text 00B3  
                 __size_of_isdigit 0022                           _delay_ms 1DF0  
           __end_of_Decrease_Speed 2256                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 23E8  
                         __ptext11 243E                           __ptext20 203C  
                         __ptext12 1BFA                           __ptext21 0EFE  
                         __ptext13 1FBA                           __ptext30 1054  
                         __ptext22 1F28                           __ptext14 1878  
                         __ptext31 23F8                           __ptext23 190E  
                         __ptext15 074A                           __ptext40 1B8A  
                         __ptext32 2408                           __ptext24 0BE4  
                         __ptext16 2132                           __ptext41 2310  
                         __ptext33 2352                           __ptext25 2164  
                         __ptext17 22DA                           __ptext50 1458  
                         __ptext42 2448                           __ptext34 238E  
                         __ptext26 1E42                           __ptext18 1620  
                         __ptext51 126E                           __ptext43 22BC  
                         __ptext35 1DF0                           __ptext27 2194  
                         __ptext19 1164                           __ptext60 20B8  
                         __ptext52 153E                           __ptext44 229C  
                         __ptext36 21BE                           __ptext28 1366  
                         __ptext61 23B2                           __ptext53 16FC  
                         __ptext45 22F6                           __ptext37 21E6  
                         __ptext29 207A                           __ptext70 2426  
                         __ptext62 23C4                           __ptext54 2256  
                         __ptext46 2232                           __ptext38 1EDC  
                         __ptext63 1F72                           __ptext55 2466  
                         __ptext47 237A                           __ptext39 2366  
                         __ptext72 2432                           __ptext64 2452  
                         __ptext56 23A0                           __ptext48 17C2  
                         __ptext73 0D92                           __ptext65 23D6  
                         __ptext57 1C64                           __ptext49 220C  
                         __ptext74 247E                           __ptext66 2328  
                         __ptext58 1D30                           __ptext67 245C  
                         __ptext59 20F6                           __ptext68 246E  
                         __ptext69 2476                           _fillRect 1F28  
                         _drawChar 0EFE               __end_of_Turn_Off_Fan 2448  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 1164                         strcpy@from 0013  
                    _fillRectangle 1620           __end_of_DS1621_Read_Temp 2132  
                 ?_Activate_Buzzer 0001                      __size_of_main 0230  
          __size_of_Increase_Speed 0026                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 190E  
                        printf@idx 002F                           _spiwrite 2352  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 1D94  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 17C2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 2418                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0041                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 2432                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A              __end_of_setAddrWindow 1E90  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                     Set_RPM_RGB@RPM 0022  
                    drawChar@color 0030                        _setup_month 0069  
                   Set_RPM_RGB@rpm 001F                 __end_of_write_data 2408  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
