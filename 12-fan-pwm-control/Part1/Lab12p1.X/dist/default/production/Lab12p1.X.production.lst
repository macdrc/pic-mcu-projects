

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 01 15:39:28 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  0020E0                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _setup_fan_temp
    88  0020E0  4B                 	db	75
    89                           
    90                           ;initializer for _tempSecond
    91  0020E1  FF                 	db	255
    92                           
    93                           ;initializer for _wrap
    94  0020E2  01                 	db	1
    95                           
    96                           	psect	idataBANK0
    97  001A2C                     __pidataBANK0:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _alarm_time
   101  001A2C  30                 	db	48
   102  001A2D  30                 	db	48
   103  001A2E  3A                 	db	58
   104  001A2F  30                 	db	48
   105  001A30  30                 	db	48
   106  001A31  3A                 	db	58
   107  001A32  30                 	db	48
   108  001A33  30                 	db	48
   109  001A34  00                 	db	0
   110                           
   111                           ;initializer for _setup_alarm_time
   112  001A35  30                 	db	48
   113  001A36  30                 	db	48
   114  001A37  3A                 	db	58
   115  001A38  30                 	db	48
   116  001A39  30                 	db	48
   117  001A3A  3A                 	db	58
   118  001A3B  30                 	db	48
   119  001A3C  30                 	db	48
   120  001A3D  00                 	db	0
   121                           
   122                           ;initializer for _setup_date
   123  001A3E  30                 	db	48
   124  001A3F  31                 	db	49
   125  001A40  2F                 	db	47
   126  001A41  30                 	db	48
   127  001A42  31                 	db	49
   128  001A43  2F                 	db	47
   129  001A44  30                 	db	48
   130  001A45  30                 	db	48
   131  001A46  00                 	db	0
   132                           
   133                           ;initializer for _setup_time
   134  001A47  30                 	db	48
   135  001A48  30                 	db	48
   136  001A49  3A                 	db	58
   137  001A4A  30                 	db	48
   138  001A4B  30                 	db	48
   139  001A4C  3A                 	db	58
   140  001A4D  30                 	db	48
   141  001A4E  30                 	db	48
   142  001A4F  00                 	db	0
   143                           
   144                           ;initializer for _D1
   145  001A50  00                 	db	0
   146  001A51  01                 	db	1
   147  001A52  02                 	db	2
   148  001A53  06                 	db	6
   149  001A54  02                 	db	2
   150  001A55  03                 	db	3
   151  001A56  06                 	db	6
   152  001A57  07                 	db	7
   153                           
   154                           ;initializer for _D2
   155  001A58  00                 	db	0
   156  001A59  01                 	db	1
   157  001A5A  02                 	db	2
   158  001A5B  06                 	db	6
   159  001A5C  02                 	db	2
   160  001A5D  03                 	db	3
   161  001A5E  06                 	db	6
   162  001A5F  07                 	db	7
   163                           
   164                           ;initializer for _setup_fan_text
   165  001A60  30                 	db	48
   166  001A61  37                 	db	55
   167  001A62  35                 	db	53
   168  001A63  46                 	db	70
   169  001A64  00                 	db	0
   170                           
   171                           ;initializer for _Alarm_SW_Txt
   172  001A65  4F                 	db	79
   173  001A66  46                 	db	70
   174  001A67  46                 	db	70
   175  001A68  00                 	db	0
   176                           
   177                           ;initializer for _RTC_ALARM_Txt
   178  001A69  30                 	db	48
   179  001A6A  00                 	db	0
   180                           
   181                           ;initializer for _date
   182  001A6B  30                 	db	48
   183  001A6C  30                 	db	48
   184  001A6D  2F                 	db	47
   185  001A6E  30                 	db	48
   186  001A6F  30                 	db	48
   187  001A70  2F                 	db	47
   188  001A71  30                 	db	48
   189  001A72  30                 	db	48
   190  001A73  00                 	db	0
   191                           
   192                           ;initializer for _time
   193  001A74  30                 	db	48
   194  001A75  30                 	db	48
   195  001A76  3A                 	db	58
   196  001A77  30                 	db	48
   197  001A78  30                 	db	48
   198  001A79  3A                 	db	58
   199  001A7A  30                 	db	48
   200  001A7B  30                 	db	48
   201  001A7C  00                 	db	0
   202                           
   203                           ;initializer for _RPM_Txt
   204  001A7D  30                 	db	48
   205  001A7E  30                 	db	48
   206  001A7F  30                 	db	48
   207  001A80  30                 	db	48
   208  001A81  00                 	db	0
   209                           
   210                           ;initializer for _DC_Txt
   211  001A82  30                 	db	48
   212  001A83  30                 	db	48
   213  001A84  30                 	db	48
   214  001A85  00                 	db	0
   215                           
   216                           ;initializer for _Fan_SW_Txt
   217  001A86  4F                 	db	79
   218  001A87  46                 	db	70
   219  001A88  46                 	db	70
   220  001A89  00                 	db	0
   221                           
   222                           ;initializer for _tempC
   223  001A8A  2B                 	db	43
   224  001A8B  32                 	db	50
   225  001A8C  35                 	db	53
   226  001A8D  00                 	db	0
   227                           
   228                           ;initializer for _tempF
   229  001A8E  2B                 	db	43
   230  001A8F  37                 	db	55
   231  001A90  37                 	db	55
   232  001A91  00                 	db	0
   233                           
   234                           	psect	idataBANK1
   235  001E4C                     __pidataBANK1:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _D3
   239  001E4C  01                 	db	1
   240  001E4D  01                 	db	1
   241  001E4E  01                 	db	1
   242  001E4F  06                 	db	6
   243  001E50  06                 	db	6
   244  001E51  02                 	db	2
   245  001E52  02                 	db	2
   246  001E53  02                 	db	2
   247  001E54  03                 	db	3
   248  001E55  07                 	db	7
   249  001E56  07                 	db	7
   250  001E57  07                 	db	7
   251  001E58  07                 	db	7
   252  001E59  07                 	db	7
   253  001E5A  07                 	db	7
   254  001E5B  07                 	db	7
   255  001E5C  07                 	db	7
   256  001E5D  07                 	db	7
   257  001E5E  07                 	db	7
   258  001E5F  07                 	db	7
   259  001E60  07                 	db	7
   260                           
   261                           ;initializer for _buffer
   262  001E61  45                 	db	69
   263  001E62  43                 	db	67
   264  001E63  45                 	db	69
   265  001E64  33                 	db	51
   266  001E65  33                 	db	51
   267  001E66  30                 	db	48
   268  001E67  31                 	db	49
   269  001E68  4C                 	db	76
   270  001E69  20                 	db	32
   271  001E6A  46                 	db	70
   272  001E6B  61                 	db	97
   273  001E6C  6C                 	db	108
   274  001E6D  6C                 	db	108
   275  001E6E  27                 	db	39
   276  001E6F  32                 	db	50
   277  001E70  32                 	db	50
   278  001E71  20                 	db	32
   279  001E72  4C                 	db	76
   280  001E73  31                 	db	49
   281  001E74  32                 	db	50
   282  001E75  00                 	db	0
   283  001E76  00                 	db	0
   284  001E77  00                 	db	0
   285  001E78  00                 	db	0
   286  001E79  00                 	db	0
   287  001E7A  00                 	db	0
   288  001E7B  00                 	db	0
   289  001E7C  00                 	db	0
   290  001E7D  00                 	db	0
   291  001E7E  00                 	db	0
   292  001E7F  00                 	db	0
   293  001E80  00                 	db	0
   294  001E81  00                 	db	0
   295                           
   296                           	psect	mediumconst
   297  00FD3E                     __pmediumconst:
   298                           	opt stack 0
   299  00FD3E  00                 	db	0
   300  00FD3F                     _font:
   301                           	opt stack 0
   302  00FD3F  00                 	db	0
   303  00FD40  00                 	db	0
   304  00FD41  00                 	db	0
   305  00FD42  00                 	db	0
   306  00FD43  00                 	db	0
   307  00FD44  00                 	db	0
   308  00FD45  00                 	db	0
   309  00FD46  5F                 	db	95
   310  00FD47  00                 	db	0
   311  00FD48  00                 	db	0
   312  00FD49  00                 	db	0
   313  00FD4A  07                 	db	7
   314  00FD4B  00                 	db	0
   315  00FD4C  07                 	db	7
   316  00FD4D  00                 	db	0
   317  00FD4E  14                 	db	20
   318  00FD4F  7F                 	db	127
   319  00FD50  14                 	db	20
   320  00FD51  7F                 	db	127
   321  00FD52  14                 	db	20
   322  00FD53  24                 	db	36
   323  00FD54  2A                 	db	42
   324  00FD55  7F                 	db	127
   325  00FD56  2A                 	db	42
   326  00FD57  12                 	db	18
   327  00FD58  23                 	db	35
   328  00FD59  13                 	db	19
   329  00FD5A  08                 	db	8
   330  00FD5B  64                 	db	100
   331  00FD5C  62                 	db	98
   332  00FD5D  36                 	db	54
   333  00FD5E  49                 	db	73
   334  00FD5F  56                 	db	86
   335  00FD60  20                 	db	32
   336  00FD61  50                 	db	80
   337  00FD62  00                 	db	0
   338  00FD63  08                 	db	8
   339  00FD64  07                 	db	7
   340  00FD65  03                 	db	3
   341  00FD66  00                 	db	0
   342  00FD67  00                 	db	0
   343  00FD68  1C                 	db	28
   344  00FD69  22                 	db	34
   345  00FD6A  41                 	db	65
   346  00FD6B  00                 	db	0
   347  00FD6C  00                 	db	0
   348  00FD6D  41                 	db	65
   349  00FD6E  22                 	db	34
   350  00FD6F  1C                 	db	28
   351  00FD70  00                 	db	0
   352  00FD71  2A                 	db	42
   353  00FD72  1C                 	db	28
   354  00FD73  7F                 	db	127
   355  00FD74  1C                 	db	28
   356  00FD75  2A                 	db	42
   357  00FD76  08                 	db	8
   358  00FD77  08                 	db	8
   359  00FD78  3E                 	db	62
   360  00FD79  08                 	db	8
   361  00FD7A  08                 	db	8
   362  00FD7B  00                 	db	0
   363  00FD7C  80                 	db	128
   364  00FD7D  70                 	db	112
   365  00FD7E  30                 	db	48
   366  00FD7F  00                 	db	0
   367  00FD80  08                 	db	8
   368  00FD81  08                 	db	8
   369  00FD82  08                 	db	8
   370  00FD83  08                 	db	8
   371  00FD84  08                 	db	8
   372  00FD85  00                 	db	0
   373  00FD86  00                 	db	0
   374  00FD87  60                 	db	96
   375  00FD88  60                 	db	96
   376  00FD89  00                 	db	0
   377  00FD8A  20                 	db	32
   378  00FD8B  10                 	db	16
   379  00FD8C  08                 	db	8
   380  00FD8D  04                 	db	4
   381  00FD8E  02                 	db	2
   382  00FD8F  3E                 	db	62
   383  00FD90  51                 	db	81
   384  00FD91  49                 	db	73
   385  00FD92  45                 	db	69
   386  00FD93  3E                 	db	62
   387  00FD94  00                 	db	0
   388  00FD95  42                 	db	66
   389  00FD96  7F                 	db	127
   390  00FD97  40                 	db	64
   391  00FD98  00                 	db	0
   392  00FD99  72                 	db	114
   393  00FD9A  49                 	db	73
   394  00FD9B  49                 	db	73
   395  00FD9C  49                 	db	73
   396  00FD9D  46                 	db	70
   397  00FD9E  21                 	db	33
   398  00FD9F  41                 	db	65
   399  00FDA0  49                 	db	73
   400  00FDA1  4D                 	db	77
   401  00FDA2  33                 	db	51
   402  00FDA3  18                 	db	24
   403  00FDA4  14                 	db	20
   404  00FDA5  12                 	db	18
   405  00FDA6  7F                 	db	127
   406  00FDA7  10                 	db	16
   407  00FDA8  27                 	db	39
   408  00FDA9  45                 	db	69
   409  00FDAA  45                 	db	69
   410  00FDAB  45                 	db	69
   411  00FDAC  39                 	db	57
   412  00FDAD  3C                 	db	60
   413  00FDAE  4A                 	db	74
   414  00FDAF  49                 	db	73
   415  00FDB0  49                 	db	73
   416  00FDB1  31                 	db	49
   417  00FDB2  41                 	db	65
   418  00FDB3  21                 	db	33
   419  00FDB4  11                 	db	17
   420  00FDB5  09                 	db	9
   421  00FDB6  07                 	db	7
   422  00FDB7  36                 	db	54
   423  00FDB8  49                 	db	73
   424  00FDB9  49                 	db	73
   425  00FDBA  49                 	db	73
   426  00FDBB  36                 	db	54
   427  00FDBC  46                 	db	70
   428  00FDBD  49                 	db	73
   429  00FDBE  49                 	db	73
   430  00FDBF  29                 	db	41
   431  00FDC0  1E                 	db	30
   432  00FDC1  00                 	db	0
   433  00FDC2  00                 	db	0
   434  00FDC3  14                 	db	20
   435  00FDC4  00                 	db	0
   436  00FDC5  00                 	db	0
   437  00FDC6  00                 	db	0
   438  00FDC7  40                 	db	64
   439  00FDC8  34                 	db	52
   440  00FDC9  00                 	db	0
   441  00FDCA  00                 	db	0
   442  00FDCB  00                 	db	0
   443  00FDCC  08                 	db	8
   444  00FDCD  14                 	db	20
   445  00FDCE  22                 	db	34
   446  00FDCF  41                 	db	65
   447  00FDD0  14                 	db	20
   448  00FDD1  14                 	db	20
   449  00FDD2  14                 	db	20
   450  00FDD3  14                 	db	20
   451  00FDD4  14                 	db	20
   452  00FDD5  00                 	db	0
   453  00FDD6  41                 	db	65
   454  00FDD7  22                 	db	34
   455  00FDD8  14                 	db	20
   456  00FDD9  08                 	db	8
   457  00FDDA  02                 	db	2
   458  00FDDB  01                 	db	1
   459  00FDDC  59                 	db	89
   460  00FDDD  09                 	db	9
   461  00FDDE  06                 	db	6
   462  00FDDF  3E                 	db	62
   463  00FDE0  41                 	db	65
   464  00FDE1  5D                 	db	93
   465  00FDE2  59                 	db	89
   466  00FDE3  4E                 	db	78
   467  00FDE4  7C                 	db	124
   468  00FDE5  12                 	db	18
   469  00FDE6  11                 	db	17
   470  00FDE7  12                 	db	18
   471  00FDE8  7C                 	db	124
   472  00FDE9  7F                 	db	127
   473  00FDEA  49                 	db	73
   474  00FDEB  49                 	db	73
   475  00FDEC  49                 	db	73
   476  00FDED  36                 	db	54
   477  00FDEE  3E                 	db	62
   478  00FDEF  41                 	db	65
   479  00FDF0  41                 	db	65
   480  00FDF1  41                 	db	65
   481  00FDF2  22                 	db	34
   482  00FDF3  7F                 	db	127
   483  00FDF4  41                 	db	65
   484  00FDF5  41                 	db	65
   485  00FDF6  41                 	db	65
   486  00FDF7  3E                 	db	62
   487  00FDF8  7F                 	db	127
   488  00FDF9  49                 	db	73
   489  00FDFA  49                 	db	73
   490  00FDFB  49                 	db	73
   491  00FDFC  41                 	db	65
   492  00FDFD  7F                 	db	127
   493  00FDFE  09                 	db	9
   494  00FDFF  09                 	db	9
   495  00FE00  09                 	db	9
   496  00FE01  01                 	db	1
   497  00FE02  3E                 	db	62
   498  00FE03  41                 	db	65
   499  00FE04  41                 	db	65
   500  00FE05  51                 	db	81
   501  00FE06  73                 	db	115
   502  00FE07  7F                 	db	127
   503  00FE08  08                 	db	8
   504  00FE09  08                 	db	8
   505  00FE0A  08                 	db	8
   506  00FE0B  7F                 	db	127
   507  00FE0C  00                 	db	0
   508  00FE0D  41                 	db	65
   509  00FE0E  7F                 	db	127
   510  00FE0F  41                 	db	65
   511  00FE10  00                 	db	0
   512  00FE11  20                 	db	32
   513  00FE12  40                 	db	64
   514  00FE13  41                 	db	65
   515  00FE14  3F                 	db	63
   516  00FE15  01                 	db	1
   517  00FE16  7F                 	db	127
   518  00FE17  08                 	db	8
   519  00FE18  14                 	db	20
   520  00FE19  22                 	db	34
   521  00FE1A  41                 	db	65
   522  00FE1B  7F                 	db	127
   523  00FE1C  40                 	db	64
   524  00FE1D  40                 	db	64
   525  00FE1E  40                 	db	64
   526  00FE1F  40                 	db	64
   527  00FE20  7F                 	db	127
   528  00FE21  02                 	db	2
   529  00FE22  1C                 	db	28
   530  00FE23  02                 	db	2
   531  00FE24  7F                 	db	127
   532  00FE25  7F                 	db	127
   533  00FE26  04                 	db	4
   534  00FE27  08                 	db	8
   535  00FE28  10                 	db	16
   536  00FE29  7F                 	db	127
   537  00FE2A  3E                 	db	62
   538  00FE2B  41                 	db	65
   539  00FE2C  41                 	db	65
   540  00FE2D  41                 	db	65
   541  00FE2E  3E                 	db	62
   542  00FE2F  7F                 	db	127
   543  00FE30  09                 	db	9
   544  00FE31  09                 	db	9
   545  00FE32  09                 	db	9
   546  00FE33  06                 	db	6
   547  00FE34  3E                 	db	62
   548  00FE35  41                 	db	65
   549  00FE36  51                 	db	81
   550  00FE37  21                 	db	33
   551  00FE38  5E                 	db	94
   552  00FE39  7F                 	db	127
   553  00FE3A  09                 	db	9
   554  00FE3B  19                 	db	25
   555  00FE3C  29                 	db	41
   556  00FE3D  46                 	db	70
   557  00FE3E                     __end_of_font:
   558                           	opt stack 0
   559  00FE3E                     _font2:
   560                           	opt stack 0
   561  00FE3E  26                 	db	38
   562  00FE3F  49                 	db	73
   563  00FE40  49                 	db	73
   564  00FE41  49                 	db	73
   565  00FE42  32                 	db	50
   566  00FE43  03                 	db	3
   567  00FE44  01                 	db	1
   568  00FE45  7F                 	db	127
   569  00FE46  01                 	db	1
   570  00FE47  03                 	db	3
   571  00FE48  3F                 	db	63
   572  00FE49  40                 	db	64
   573  00FE4A  40                 	db	64
   574  00FE4B  40                 	db	64
   575  00FE4C  3F                 	db	63
   576  00FE4D  1F                 	db	31
   577  00FE4E  20                 	db	32
   578  00FE4F  40                 	db	64
   579  00FE50  20                 	db	32
   580  00FE51  1F                 	db	31
   581  00FE52  3F                 	db	63
   582  00FE53  40                 	db	64
   583  00FE54  38                 	db	56
   584  00FE55  40                 	db	64
   585  00FE56  3F                 	db	63
   586  00FE57  63                 	db	99
   587  00FE58  14                 	db	20
   588  00FE59  08                 	db	8
   589  00FE5A  14                 	db	20
   590  00FE5B  63                 	db	99
   591  00FE5C  03                 	db	3
   592  00FE5D  04                 	db	4
   593  00FE5E  78                 	db	120
   594  00FE5F  04                 	db	4
   595  00FE60  03                 	db	3
   596  00FE61  61                 	db	97
   597  00FE62  59                 	db	89
   598  00FE63  49                 	db	73
   599  00FE64  4D                 	db	77
   600  00FE65  43                 	db	67
   601  00FE66  00                 	db	0
   602  00FE67  7F                 	db	127
   603  00FE68  41                 	db	65
   604  00FE69  41                 	db	65
   605  00FE6A  41                 	db	65
   606  00FE6B  02                 	db	2
   607  00FE6C  04                 	db	4
   608  00FE6D  08                 	db	8
   609  00FE6E  10                 	db	16
   610  00FE6F  20                 	db	32
   611  00FE70  00                 	db	0
   612  00FE71  41                 	db	65
   613  00FE72  41                 	db	65
   614  00FE73  41                 	db	65
   615  00FE74  7F                 	db	127
   616  00FE75  04                 	db	4
   617  00FE76  02                 	db	2
   618  00FE77  01                 	db	1
   619  00FE78  02                 	db	2
   620  00FE79  04                 	db	4
   621  00FE7A  40                 	db	64
   622  00FE7B  40                 	db	64
   623  00FE7C  40                 	db	64
   624  00FE7D  40                 	db	64
   625  00FE7E  40                 	db	64
   626  00FE7F  00                 	db	0
   627  00FE80  03                 	db	3
   628  00FE81  07                 	db	7
   629  00FE82  08                 	db	8
   630  00FE83  00                 	db	0
   631  00FE84  20                 	db	32
   632  00FE85  54                 	db	84
   633  00FE86  54                 	db	84
   634  00FE87  78                 	db	120
   635  00FE88  40                 	db	64
   636  00FE89  7F                 	db	127
   637  00FE8A  28                 	db	40
   638  00FE8B  44                 	db	68
   639  00FE8C  44                 	db	68
   640  00FE8D  38                 	db	56
   641  00FE8E  38                 	db	56
   642  00FE8F  44                 	db	68
   643  00FE90  44                 	db	68
   644  00FE91  44                 	db	68
   645  00FE92  28                 	db	40
   646  00FE93  38                 	db	56
   647  00FE94  44                 	db	68
   648  00FE95  44                 	db	68
   649  00FE96  28                 	db	40
   650  00FE97  7F                 	db	127
   651  00FE98  38                 	db	56
   652  00FE99  54                 	db	84
   653  00FE9A  54                 	db	84
   654  00FE9B  54                 	db	84
   655  00FE9C  18                 	db	24
   656  00FE9D  00                 	db	0
   657  00FE9E  08                 	db	8
   658  00FE9F  7E                 	db	126
   659  00FEA0  09                 	db	9
   660  00FEA1  02                 	db	2
   661  00FEA2  18                 	db	24
   662  00FEA3  A4                 	db	164
   663  00FEA4  A4                 	db	164
   664  00FEA5  9C                 	db	156
   665  00FEA6  78                 	db	120
   666  00FEA7  7F                 	db	127
   667  00FEA8  08                 	db	8
   668  00FEA9  04                 	db	4
   669  00FEAA  04                 	db	4
   670  00FEAB  78                 	db	120
   671  00FEAC  00                 	db	0
   672  00FEAD  44                 	db	68
   673  00FEAE  7D                 	db	125
   674  00FEAF  40                 	db	64
   675  00FEB0  00                 	db	0
   676  00FEB1  20                 	db	32
   677  00FEB2  40                 	db	64
   678  00FEB3  40                 	db	64
   679  00FEB4  3D                 	db	61
   680  00FEB5  00                 	db	0
   681  00FEB6  7F                 	db	127
   682  00FEB7  10                 	db	16
   683  00FEB8  28                 	db	40
   684  00FEB9  44                 	db	68
   685  00FEBA  00                 	db	0
   686  00FEBB  00                 	db	0
   687  00FEBC  41                 	db	65
   688  00FEBD  7F                 	db	127
   689  00FEBE  40                 	db	64
   690  00FEBF  00                 	db	0
   691  00FEC0  7C                 	db	124
   692  00FEC1  04                 	db	4
   693  00FEC2  78                 	db	120
   694  00FEC3  04                 	db	4
   695  00FEC4  78                 	db	120
   696  00FEC5  7C                 	db	124
   697  00FEC6  08                 	db	8
   698  00FEC7  04                 	db	4
   699  00FEC8  04                 	db	4
   700  00FEC9  78                 	db	120
   701  00FECA  38                 	db	56
   702  00FECB  44                 	db	68
   703  00FECC  44                 	db	68
   704  00FECD  44                 	db	68
   705  00FECE  38                 	db	56
   706  00FECF  FC                 	db	252
   707  00FED0  18                 	db	24
   708  00FED1  24                 	db	36
   709  00FED2  24                 	db	36
   710  00FED3  18                 	db	24
   711  00FED4  18                 	db	24
   712  00FED5  24                 	db	36
   713  00FED6  24                 	db	36
   714  00FED7  18                 	db	24
   715  00FED8  FC                 	db	252
   716  00FED9  7C                 	db	124
   717  00FEDA  08                 	db	8
   718  00FEDB  04                 	db	4
   719  00FEDC  04                 	db	4
   720  00FEDD  08                 	db	8
   721  00FEDE  48                 	db	72
   722  00FEDF  54                 	db	84
   723  00FEE0  54                 	db	84
   724  00FEE1  54                 	db	84
   725  00FEE2  24                 	db	36
   726  00FEE3  04                 	db	4
   727  00FEE4  04                 	db	4
   728  00FEE5  3F                 	db	63
   729  00FEE6  44                 	db	68
   730  00FEE7  24                 	db	36
   731  00FEE8  3C                 	db	60
   732  00FEE9  40                 	db	64
   733  00FEEA  40                 	db	64
   734  00FEEB  20                 	db	32
   735  00FEEC  7C                 	db	124
   736  00FEED  1C                 	db	28
   737  00FEEE  20                 	db	32
   738  00FEEF  40                 	db	64
   739  00FEF0  20                 	db	32
   740  00FEF1  1C                 	db	28
   741  00FEF2  3C                 	db	60
   742  00FEF3  40                 	db	64
   743  00FEF4  30                 	db	48
   744  00FEF5  40                 	db	64
   745  00FEF6  3C                 	db	60
   746  00FEF7  44                 	db	68
   747  00FEF8  28                 	db	40
   748  00FEF9  10                 	db	16
   749  00FEFA  28                 	db	40
   750  00FEFB  44                 	db	68
   751  00FEFC  4C                 	db	76
   752  00FEFD  90                 	db	144
   753  00FEFE  90                 	db	144
   754  00FEFF  90                 	db	144
   755  00FF00  7C                 	db	124
   756  00FF01  44                 	db	68
   757  00FF02  64                 	db	100
   758  00FF03  54                 	db	84
   759  00FF04  4C                 	db	76
   760  00FF05  44                 	db	68
   761  00FF06  00                 	db	0
   762  00FF07  08                 	db	8
   763  00FF08  36                 	db	54
   764  00FF09  41                 	db	65
   765  00FF0A  00                 	db	0
   766  00FF0B  00                 	db	0
   767  00FF0C  00                 	db	0
   768  00FF0D  77                 	db	119
   769  00FF0E  00                 	db	0
   770  00FF0F  00                 	db	0
   771  00FF10  00                 	db	0
   772  00FF11  41                 	db	65
   773  00FF12  36                 	db	54
   774  00FF13  08                 	db	8
   775  00FF14  00                 	db	0
   776  00FF15  02                 	db	2
   777  00FF16  01                 	db	1
   778  00FF17  02                 	db	2
   779  00FF18  04                 	db	4
   780  00FF19  02                 	db	2
   781  00FF1A                     __end_of_font2:
   782                           	opt stack 0
   783  00FF1A                     _dpowers:
   784                           	opt stack 0
   785  00FF1A  0001               	dw	1
   786  00FF1C  000A               	dw	10
   787  00FF1E  0064               	dw	100
   788  00FF20  03E8               	dw	1000
   789  00FF22  2710               	dw	10000
   790  00FF24                     __end_of_dpowers:
   791                           	opt stack 0
   792  00FF24                     _hexpowers:
   793                           	opt stack 0
   794  00FF24  0001               	dw	1
   795  00FF26  0010               	dw	16
   796  00FF28  0100               	dw	256
   797  00FF2A  1000               	dw	4096
   798  00FF2C                     __end_of_hexpowers:
   799                           	opt stack 0
   800  0000                     _ADCON1	set	4033
   801  0000                     _CCP1CON	set	4029
   802  0000                     _CCPR1L	set	4030
   803  0000                     _INTCON2bits	set	4081
   804  0000                     _INTCONbits	set	4082
   805  0000                     _OSCCON	set	4051
   806  0000                     _PIE1bits	set	3997
   807  0000                     _PIR1bits	set	3998
   808  0000                     _PORTBbits	set	3969
   809  0000                     _PORTCbits	set	3970
   810  0000                     _PORTD	set	3971
   811  0000                     _PORTDbits	set	3971
   812  0000                     _PORTEbits	set	3972
   813  0000                     _PR2	set	4043
   814  0000                     _RCSTA	set	4011
   815  0000                     _RCSTAbits	set	4011
   816  0000                     _SPBRG	set	4015
   817  0000                     _SPBRGH	set	4016
   818  0000                     _SSPBUF	set	4041
   819  0000                     _SSPCON1	set	4038
   820  0000                     _SSPSTAT	set	4039
   821  0000                     _SSPSTATbits	set	4039
   822  0000                     _T0CON	set	4053
   823  0000                     _T0CONbits	set	4053
   824  0000                     _T2CON	set	4042
   825  0000                     _T3CON	set	4017
   826  0000                     _TMR0H	set	4055
   827  0000                     _TMR0L	set	4054
   828  0000                     _TMR3L	set	4018
   829  0000                     _TRISA	set	3986
   830  0000                     _TRISB	set	3987
   831  0000                     _TRISBbits	set	3987
   832  0000                     _TRISC	set	3988
   833  0000                     _TRISCbits	set	3988
   834  0000                     _TRISD	set	3989
   835  0000                     _TXREG	set	4013
   836  0000                     _TXSTA	set	4012
   837  0000                     _TXSTAbits	set	4012
   838  0000                     _RBPU	set	32655
   839  0000                     _TRMT	set	32097
   840  00FF2C                     STR_1:
   841  00FF2C  25                 	db	37
   842  00FF2D  30                 	db	48	;'0'
   843  00FF2E  32                 	db	50	;'2'
   844  00FF2F  78                 	db	120	;'x'
   845  00FF30  3A                 	db	58	;':'
   846  00FF31  25                 	db	37
   847  00FF32  30                 	db	48	;'0'
   848  00FF33  32                 	db	50	;'2'
   849  00FF34  78                 	db	120	;'x'
   850  00FF35  3A                 	db	58	;':'
   851  00FF36  25                 	db	37
   852  00FF37  30                 	db	48	;'0'
   853  00FF38  32                 	db	50	;'2'
   854  00FF39  78                 	db	120	;'x'
   855  00FF3A  20                 	db	32
   856  00FF3B  25                 	db	37
   857  00FF3C  30                 	db	48	;'0'
   858  00FF3D  32                 	db	50	;'2'
   859  00FF3E  78                 	db	120	;'x'
   860  00FF3F  2F                 	db	47
   861  00FF40  25                 	db	37
   862  00FF41  30                 	db	48	;'0'
   863  00FF42  32                 	db	50	;'2'
   864  00FF43  78                 	db	120	;'x'
   865  00FF44  2F                 	db	47
   866  00FF45  25                 	db	37
   867  00FF46  30                 	db	48	;'0'
   868  00FF47  32                 	db	50	;'2'
   869  00FF48  78                 	db	120	;'x'
   870  00FF49  00                 	db	0
   871  00FF4A                     STR_13:
   872  00FF4A  45                 	db	69	;'E'
   873  00FF4B  43                 	db	67	;'C'
   874  00FF4C  45                 	db	69	;'E'
   875  00FF4D  33                 	db	51	;'3'
   876  00FF4E  33                 	db	51	;'3'
   877  00FF4F  30                 	db	48	;'0'
   878  00FF50  31                 	db	49	;'1'
   879  00FF51  4C                 	db	76	;'L'
   880  00FF52  20                 	db	32
   881  00FF53  53                 	db	83	;'S'
   882  00FF54  70                 	db	112	;'p'
   883  00FF55  72                 	db	114	;'r'
   884  00FF56  69                 	db	105	;'i'
   885  00FF57  6E                 	db	110	;'n'
   886  00FF58  67                 	db	103	;'g'
   887  00FF59  20                 	db	32
   888  00FF5A  32                 	db	50	;'2'
   889  00FF5B  32                 	db	50	;'2'
   890  00FF5C  2D                 	db	45
   891  00FF5D  53                 	db	83	;'S'
   892  00FF5E  3F                 	db	63	;'?'
   893  00FF5F  00                 	db	0
   894  00FF60                     STR_11:
   895  00FF60  43                 	db	67	;'C'
   896  00FF61  61                 	db	97	;'a'
   897  00FF62  6E                 	db	110	;'n'
   898  00FF63  6E                 	db	110	;'n'
   899  00FF64  6F                 	db	111	;'o'
   900  00FF65  74                 	db	116	;'t'
   901  00FF66  20                 	db	32
   902  00FF67  66                 	db	102	;'f'
   903  00FF68  69                 	db	105	;'i'
   904  00FF69  6E                 	db	110	;'n'
   905  00FF6A  64                 	db	100	;'d'
   906  00FF6B  20                 	db	32
   907  00FF6C  62                 	db	98	;'b'
   908  00FF6D  75                 	db	117	;'u'
   909  00FF6E  74                 	db	116	;'t'
   910  00FF6F  74                 	db	116	;'t'
   911  00FF70  6F                 	db	111	;'o'
   912  00FF71  6E                 	db	110	;'n'
   913  00FF72  20                 	db	32
   914  00FF73  0D                 	db	13
   915  00FF74  0A                 	db	10
   916  00FF75  00                 	db	0
   917  00FF76                     STR_2:
   918  00FF76  20                 	db	32
   919  00FF77  54                 	db	84	;'T'
   920  00FF78  65                 	db	101	;'e'
   921  00FF79  6D                 	db	109	;'m'
   922  00FF7A  70                 	db	112	;'p'
   923  00FF7B  20                 	db	32
   924  00FF7C  3D                 	db	61	;'='
   925  00FF7D  20                 	db	32
   926  00FF7E  25                 	db	37
   927  00FF7F  64                 	db	100	;'d'
   928  00FF80  20                 	db	32
   929  00FF81  43                 	db	67	;'C'
   930  00FF82  20                 	db	32
   931  00FF83  3D                 	db	61	;'='
   932  00FF84  20                 	db	32
   933  00FF85  25                 	db	37
   934  00FF86  64                 	db	100	;'d'
   935  00FF87  20                 	db	32
   936  00FF88  46                 	db	70	;'F'
   937  00FF89  20                 	db	32
   938  00FF8A  00                 	db	0
   939  00FF8B                     STR_3:
   940  00FF8B  52                 	db	82	;'R'
   941  00FF8C  50                 	db	80	;'P'
   942  00FF8D  4D                 	db	77	;'M'
   943  00FF8E  20                 	db	32
   944  00FF8F  3D                 	db	61	;'='
   945  00FF90  20                 	db	32
   946  00FF91  25                 	db	37
   947  00FF92  64                 	db	100	;'d'
   948  00FF93  20                 	db	32
   949  00FF94  20                 	db	32
   950  00FF95  64                 	db	100	;'d'
   951  00FF96  63                 	db	99	;'c'
   952  00FF97  20                 	db	32
   953  00FF98  3D                 	db	61	;'='
   954  00FF99  20                 	db	32
   955  00FF9A  25                 	db	37
   956  00FF9B  64                 	db	100	;'d'
   957  00FF9C  0D                 	db	13
   958  00FF9D  0A                 	db	10
   959  00FF9E  00                 	db	0
   960  00FF9F                     STR_24:
   961  00FF9F  30                 	db	48	;'0'
   962  00FFA0  31                 	db	49	;'1'
   963  00FFA1  32                 	db	50	;'2'
   964  00FFA2  33                 	db	51	;'3'
   965  00FFA3  34                 	db	52	;'4'
   966  00FFA4  35                 	db	53	;'5'
   967  00FFA5  36                 	db	54	;'6'
   968  00FFA6  37                 	db	55	;'7'
   969  00FFA7  38                 	db	56	;'8'
   970  00FFA8  39                 	db	57	;'9'
   971  00FFA9  61                 	db	97	;'a'
   972  00FFAA  62                 	db	98	;'b'
   973  00FFAB  63                 	db	99	;'c'
   974  00FFAC  64                 	db	100	;'d'
   975  00FFAD  65                 	db	101	;'e'
   976  00FFAE  66                 	db	102	;'f'
   977  00FFAF  00                 	db	0
   978  00FFB0                     STR_10:
   979  00FFB0  4E                 	db	78	;'N'
   980  00FFB1  45                 	db	69	;'E'
   981  00FFB2  43                 	db	67	;'C'
   982  00FFB3  5F                 	db	95	;'_'
   983  00FFB4  43                 	db	67	;'C'
   984  00FFB5  6F                 	db	111	;'o'
   985  00FFB6  64                 	db	100	;'d'
   986  00FFB7  65                 	db	101	;'e'
   987  00FFB8  20                 	db	32
   988  00FFB9  3D                 	db	61	;'='
   989  00FFBA  20                 	db	32
   990  00FFBB  25                 	db	37
   991  00FFBC  78                 	db	120	;'x'
   992  00FFBD  0D                 	db	13
   993  00FFBE  0A                 	db	10
   994  00FFBF  00                 	db	0
   995  00FFC0                     STR_12:
   996  00FFC0  62                 	db	98	;'b'
   997  00FFC1  75                 	db	117	;'u'
   998  00FFC2  74                 	db	116	;'t'
   999  00FFC3  74                 	db	116	;'t'
  1000  00FFC4  6F                 	db	111	;'o'
  1001  00FFC5  6E                 	db	110	;'n'
  1002  00FFC6  20                 	db	32
  1003  00FFC7  3D                 	db	61	;'='
  1004  00FFC8  20                 	db	32
  1005  00FFC9  25                 	db	37
  1006  00FFCA  64                 	db	100	;'d'
  1007  00FFCB  20                 	db	32
  1008  00FFCC  0D                 	db	13
  1009  00FFCD  0A                 	db	10
  1010  00FFCE  00                 	db	0
  1011  00FFCF                     STR_14:
  1012  00FFCF  54                 	db	84	;'T'
  1013  00FFD0  65                 	db	101	;'e'
  1014  00FFD1  6D                 	db	109	;'m'
  1015  00FFD2  70                 	db	112	;'p'
  1016  00FFD3  65                 	db	101	;'e'
  1017  00FFD4  72                 	db	114	;'r'
  1018  00FFD5  61                 	db	97	;'a'
  1019  00FFD6  74                 	db	116	;'t'
  1020  00FFD7  75                 	db	117	;'u'
  1021  00FFD8  72                 	db	114	;'r'
  1022  00FFD9  65                 	db	101	;'e'
  1023  00FFDA  3A                 	db	58	;':'
  1024  00FFDB  00                 	db	0
  1025  00FFDC                     STR_19:
  1026  00FFDC  20                 	db	32
  1027  00FFDD  20                 	db	32
  1028  00FFDE  46                 	db	70	;'F'
  1029  00FFDF  41                 	db	65	;'A'
  1030  00FFE0  4E                 	db	78	;'N'
  1031  00FFE1  00                 	db	0
  1032  00FFE2                     STR_17:
  1033  00FFE2  54                 	db	84	;'T'
  1034  00FFE3  69                 	db	105	;'i'
  1035  00FFE4  6D                 	db	109	;'m'
  1036  00FFE5  65                 	db	101	;'e'
  1037  00FFE6  00                 	db	0
  1038  00FFE7                     STR_18:
  1039  00FFE7  44                 	db	68	;'D'
  1040  00FFE8  61                 	db	97	;'a'
  1041  00FFE9  74                 	db	116	;'t'
  1042  00FFEA  65                 	db	101	;'e'
  1043  00FFEB  00                 	db	0
  1044  00FFEC                     STR_22:
  1045  00FFEC  4F                 	db	79	;'O'
  1046  00FFED  4E                 	db	78	;'N'
  1047  00FFEE  20                 	db	32
  1048  00FFEF  00                 	db	0
  1049  00FFF0                     STR_23:
  1050  00FFF0  4F                 	db	79	;'O'
  1051  00FFF1  46                 	db	70	;'F'
  1052  00FFF2  46                 	db	70	;'F'
  1053  00FFF3  00                 	db	0
  1054  00FFF4                     STR_21:
  1055  00FFF4  52                 	db	82	;'R'
  1056  00FFF5  50                 	db	80	;'P'
  1057  00FFF6  4D                 	db	77	;'M'
  1058  00FFF7  00                 	db	0
  1059  00FFF8                     STR_15:
  1060  00FFF8  43                 	db	67	;'C'
  1061  00FFF9  2F                 	db	47
  1062  00FFFA  00                 	db	0
  1063  00FFFB                     STR_20:
  1064  00FFFB  44                 	db	68	;'D'
  1065  00FFFC  43                 	db	67	;'C'
  1066  00FFFD  00                 	db	0
  1067  0000                     
  1068                           ; #config settings
  1069  00FFFE  00                 	db	0	; dummy byte at the end
  1070  0000                     
  1071                           	psect	cinit
  1072  0017BC                     __pcinit:
  1073                           	opt stack 0
  1074  0017BC                     start_initialization:
  1075                           	opt stack 0
  1076  0017BC                     __initialization:
  1077                           	opt stack 0
  1078                           
  1079                           ; Clear objects allocated to BANK1 (21 bytes)
  1080  0017BC  EE01  F036         	lfsr	0,__pbssBANK1
  1081  0017C0  0E15               	movlw	21
  1082  0017C2                     clear_0:
  1083  0017C2  6AEE               	clrf	postinc0,c
  1084  0017C4  06E8               	decf	wreg,f,c
  1085  0017C6  E1FD               	bnz	clear_0
  1086                           
  1087                           ; Clear objects allocated to BANK0 (6 bytes)
  1088  0017C8  0100               	movlb	0
  1089  0017CA  6BF9               	clrf	(__pbssBANK0+5)& (0+255),b
  1090  0017CC  6BF8               	clrf	(__pbssBANK0+4)& (0+255),b
  1091  0017CE  6BF7               	clrf	(__pbssBANK0+3)& (0+255),b
  1092  0017D0  6BF6               	clrf	(__pbssBANK0+2)& (0+255),b
  1093  0017D2  6BF5               	clrf	(__pbssBANK0+1)& (0+255),b
  1094  0017D4  6BF4               	clrf	__pbssBANK0& (0+255),b
  1095                           
  1096                           ; Clear objects allocated to COMRAM (45 bytes)
  1097  0017D6  EE00  F042         	lfsr	0,__pbssCOMRAM
  1098  0017DA  0E2D               	movlw	45
  1099  0017DC                     clear_1:
  1100  0017DC  6AEE               	clrf	postinc0,c
  1101  0017DE  06E8               	decf	wreg,f,c
  1102  0017E0  E1FD               	bnz	clear_1
  1103                           
  1104                           ; Initialize objects allocated to BANK1 (54 bytes)
  1105                           ; load TBLPTR registers with __pidataBANK1
  1106  0017E2  0E4C               	movlw	low __pidataBANK1
  1107  0017E4  6EF6               	movwf	tblptrl,c
  1108  0017E6  0E1E               	movlw	high __pidataBANK1
  1109  0017E8  6EF7               	movwf	tblptrh,c
  1110  0017EA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1111  0017EC  6EF8               	movwf	tblptru,c
  1112  0017EE  EE01  F000         	lfsr	0,__pdataBANK1
  1113  0017F2  EE10 F036          	lfsr	1,54
  1114  0017F6                     copy_data0:
  1115  0017F6  0009               	tblrd		*+
  1116  0017F8  CFF5 FFEE          	movff	tablat,postinc0
  1117  0017FC  50E5               	movf	postdec1,w,c
  1118  0017FE  50E1               	movf	fsr1l,w,c
  1119  001800  E1FA               	bnz	copy_data0
  1120                           
  1121                           ; Initialize objects allocated to BANK0 (102 bytes)
  1122                           ; load TBLPTR registers with __pidataBANK0
  1123  001802  0E2C               	movlw	low __pidataBANK0
  1124  001804  6EF6               	movwf	tblptrl,c
  1125  001806  0E1A               	movlw	high __pidataBANK0
  1126  001808  6EF7               	movwf	tblptrh,c
  1127  00180A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1128  00180C  6EF8               	movwf	tblptru,c
  1129  00180E  EE00  F080         	lfsr	0,__pdataBANK0
  1130  001812  EE10 F066          	lfsr	1,102
  1131  001816                     copy_data1:
  1132  001816  0009               	tblrd		*+
  1133  001818  CFF5 FFEE          	movff	tablat,postinc0
  1134  00181C  50E5               	movf	postdec1,w,c
  1135  00181E  50E1               	movf	fsr1l,w,c
  1136  001820  E1FA               	bnz	copy_data1
  1137                           
  1138                           ; Initialize objects allocated to COMRAM (3 bytes)
  1139                           ; load TBLPTR registers with __pidataCOMRAM
  1140  001822  0EE0               	movlw	low __pidataCOMRAM
  1141  001824  6EF6               	movwf	tblptrl,c
  1142  001826  0E20               	movlw	high __pidataCOMRAM
  1143  001828  6EF7               	movwf	tblptrh,c
  1144  00182A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1145  00182C  6EF8               	movwf	tblptru,c
  1146  00182E  0009               	tblrd		*+	;fetch initializer
  1147  001830  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1148  001834  0009               	tblrd		*+	;fetch initializer
  1149  001836  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
  1150  00183A  0009               	tblrd		*+	;fetch initializer
  1151  00183C  CFF5 F071          	movff	tablat,__pdataCOMRAM+2
  1152  001840                     end_of_initialization:
  1153                           	opt stack 0
  1154  001840                     __end_of__initialization:
  1155                           	opt stack 0
  1156  001840  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1157  001842  6EF8               	movwf	tblptru,c
  1158  001844  0100               	movlb	0
  1159  001846  EFBB  F001         	goto	_main	;jump to C main() function
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           
  1169                           	psect	bssCOMRAM
  1170  000042                     __pbssCOMRAM:
  1171                           	opt stack 0
  1172  000042                     _ALARMEN:
  1173                           	opt stack 0
  1174  000042                     	ds	2
  1175  000044                     _DS1621_tempC:
  1176                           	opt stack 0
  1177  000044                     	ds	2
  1178  000046                     _DS1621_tempF:
  1179                           	opt stack 0
  1180  000046                     	ds	2
  1181  000048                     _Time_Elapsed:
  1182                           	opt stack 0
  1183  000048                     	ds	2
  1184  00004A                     _nec_ok:
  1185                           	opt stack 0
  1186  00004A                     	ds	2
  1187  00004C                     _rpm:
  1188                           	opt stack 0
  1189  00004C                     	ds	2
  1190  00004E                     _rps:
  1191                           	opt stack 0
  1192  00004E                     	ds	2
  1193  000050                     _txt:
  1194                           	opt stack 0
  1195  000050                     	ds	2
  1196  000052                     _FAN:
  1197                           	opt stack 0
  1198  000052                     	ds	1
  1199  000053                     _Nec_code1:
  1200                           	opt stack 0
  1201  000053                     	ds	1
  1202  000054                     _Nec_state:
  1203                           	opt stack 0
  1204  000054                     	ds	1
  1205  000055                     __tft_type:
  1206                           	opt stack 0
  1207  000055                     	ds	1
  1208  000056                     _alarm_date:
  1209                           	opt stack 0
  1210  000056                     	ds	1
  1211  000057                     _alarm_hour:
  1212                           	opt stack 0
  1213  000057                     	ds	1
  1214  000058                     _alarm_minute:
  1215                           	opt stack 0
  1216  000058                     	ds	1
  1217  000059                     _alarm_second:
  1218                           	opt stack 0
  1219  000059                     	ds	1
  1220  00005A                     _bit_count:
  1221                           	opt stack 0
  1222  00005A                     	ds	1
  1223  00005B                     _colstart:
  1224                           	opt stack 0
  1225  00005B                     	ds	1
  1226  00005C                     _day:
  1227                           	opt stack 0
  1228  00005C                     	ds	1
  1229  00005D                     _dow:
  1230                           	opt stack 0
  1231  00005D                     	ds	1
  1232  00005E                     _duty_cycle:
  1233                           	opt stack 0
  1234  00005E                     	ds	1
  1235  00005F                     _found:
  1236                           	opt stack 0
  1237  00005F                     	ds	1
  1238  000060                     _hour:
  1239                           	opt stack 0
  1240  000060                     	ds	1
  1241  000061                     _minute:
  1242                           	opt stack 0
  1243  000061                     	ds	1
  1244  000062                     _month:
  1245                           	opt stack 0
  1246  000062                     	ds	1
  1247  000063                     _rowstart:
  1248                           	opt stack 0
  1249  000063                     	ds	1
  1250  000064                     _second:
  1251                           	opt stack 0
  1252  000064                     	ds	1
  1253  000065                     _setup_alarm_hour:
  1254                           	opt stack 0
  1255  000065                     	ds	1
  1256  000066                     _setup_alarm_minute:
  1257                           	opt stack 0
  1258  000066                     	ds	1
  1259  000067                     _setup_alarm_second:
  1260                           	opt stack 0
  1261  000067                     	ds	1
  1262  000068                     _setup_day:
  1263                           	opt stack 0
  1264  000068                     	ds	1
  1265  000069                     _setup_hour:
  1266                           	opt stack 0
  1267  000069                     	ds	1
  1268  00006A                     _setup_minute:
  1269                           	opt stack 0
  1270  00006A                     	ds	1
  1271  00006B                     _setup_month:
  1272                           	opt stack 0
  1273  00006B                     	ds	1
  1274  00006C                     _setup_second:
  1275                           	opt stack 0
  1276  00006C                     	ds	1
  1277  00006D                     _setup_year:
  1278                           	opt stack 0
  1279  00006D                     	ds	1
  1280  00006E                     _year:
  1281                           	opt stack 0
  1282  00006E                     	ds	1
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postdec1	equ	0xFE5
  1290                           fsr1l	equ	0xFE1
  1291                           
  1292                           	psect	dataCOMRAM
  1293  00006F                     __pdataCOMRAM:
  1294                           	opt stack 0
  1295  00006F                     _setup_fan_temp:
  1296                           	opt stack 0
  1297  00006F                     	ds	1
  1298  000070                     _tempSecond:
  1299                           	opt stack 0
  1300  000070                     	ds	1
  1301  000071                     _wrap:
  1302                           	opt stack 0
  1303  000071                     	ds	1
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           
  1313                           	psect	bssBANK0
  1314  0000F4                     __pbssBANK0:
  1315                           	opt stack 0
  1316  0000F4                     _Nec_code:
  1317                           	opt stack 0
  1318  0000F4                     	ds	4
  1319  0000F8                     _nbr:
  1320                           	opt stack 0
  1321  0000F8                     	ds	2
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           postinc0	equ	0xFEE
  1327                           wreg	equ	0xFE8
  1328                           postdec1	equ	0xFE5
  1329                           fsr1l	equ	0xFE1
  1330                           
  1331                           	psect	dataBANK0
  1332  000080                     __pdataBANK0:
  1333                           	opt stack 0
  1334  000080                     _alarm_time:
  1335                           	opt stack 0
  1336  000080                     	ds	9
  1337  000089                     _setup_alarm_time:
  1338                           	opt stack 0
  1339  000089                     	ds	9
  1340  000092                     _setup_date:
  1341                           	opt stack 0
  1342  000092                     	ds	9
  1343  00009B                     _setup_time:
  1344                           	opt stack 0
  1345  00009B                     	ds	9
  1346  0000A4                     _D1:
  1347                           	opt stack 0
  1348  0000A4                     	ds	8
  1349  0000AC                     _D2:
  1350                           	opt stack 0
  1351  0000AC                     	ds	8
  1352  0000B4                     _setup_fan_text:
  1353                           	opt stack 0
  1354  0000B4                     	ds	5
  1355  0000B9                     _Alarm_SW_Txt:
  1356                           	opt stack 0
  1357  0000B9                     	ds	4
  1358  0000BD                     _RTC_ALARM_Txt:
  1359                           	opt stack 0
  1360  0000BD                     	ds	2
  1361  0000BF                     _date:
  1362                           	opt stack 0
  1363  0000BF                     	ds	9
  1364  0000C8                     _time:
  1365                           	opt stack 0
  1366  0000C8                     	ds	9
  1367  0000D1                     _RPM_Txt:
  1368                           	opt stack 0
  1369  0000D1                     	ds	5
  1370  0000D6                     _DC_Txt:
  1371                           	opt stack 0
  1372  0000D6                     	ds	4
  1373  0000DA                     _Fan_SW_Txt:
  1374                           	opt stack 0
  1375  0000DA                     	ds	4
  1376  0000DE                     _tempC:
  1377                           	opt stack 0
  1378  0000DE                     	ds	4
  1379  0000E2                     _tempF:
  1380                           	opt stack 0
  1381  0000E2                     	ds	4
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	bssBANK1
  1392  000136                     __pbssBANK1:
  1393                           	opt stack 0
  1394  000136                     _array1:
  1395                           	opt stack 0
  1396  000136                     	ds	21
  1397                           tblptru	equ	0xFF8
  1398                           tblptrh	equ	0xFF7
  1399                           tblptrl	equ	0xFF6
  1400                           tablat	equ	0xFF5
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1l	equ	0xFE1
  1405                           
  1406                           	psect	dataBANK1
  1407  000100                     __pdataBANK1:
  1408                           	opt stack 0
  1409  000100                     _D3:
  1410                           	opt stack 0
  1411  000100                     	ds	21
  1412  000115                     _buffer:
  1413                           	opt stack 0
  1414  000115                     	ds	33
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           
  1424                           	psect	cstackBANK0
  1425  0000E6                     __pcstackBANK0:
  1426                           	opt stack 0
  1427  0000E6                     drawtext@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x0
  1431  0000E6                     	ds	1
  1432  0000E7                     drawtext@textsize:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x1
  1436  0000E7                     	ds	2
  1437  0000E9                     drawtext@i:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x3
  1441  0000E9                     	ds	2
  1442  0000EB                     drawtext@cursor_y:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x5
  1446  0000EB                     	ds	1
  1447  0000EC                     drawtext@cursor_x:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x6
  1451  0000EC                     	ds	1
  1452  0000ED                     ??_Update_Screen:
  1453                           
  1454                           ; 0 bytes @ 0x7
  1455  0000ED                     	ds	2
  1456  0000EF                     Update_Screen@neg_tempF:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x9
  1460  0000EF                     	ds	2
  1461  0000F1                     
  1462                           ; 0 bytes @ 0xB
  1463  0000F1                     	ds	1
  1464  0000F2                     main@j:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0xC
  1468  0000F2                     	ds	2
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           
  1478                           	psect	cstackCOMRAM
  1479  000001                     __pcstackCOMRAM:
  1480                           	opt stack 0
  1481  000001                     ??_chkisr:
  1482  000001                     
  1483                           ; 2 bytes @ 0x0
  1484  000001                     	ds	14
  1485  00000F                     ??_isdigit:
  1486  00000F                     ?_strlen:
  1487                           	opt stack 0
  1488  00000F                     ?___wmul:
  1489                           	opt stack 0
  1490  00000F                     ?___awmod:
  1491                           	opt stack 0
  1492  00000F                     ?___lwdiv:
  1493                           	opt stack 0
  1494  00000F                     ?___ftpack:
  1495                           	opt stack 0
  1496  00000F                     ?___fttol:
  1497                           	opt stack 0
  1498  00000F                     spiwrite@x:
  1499                           	opt stack 0
  1500  00000F                     I2C_Read@ack:
  1501                           	opt stack 0
  1502  00000F                     I2C_Write@outByte:
  1503                           	opt stack 0
  1504  00000F                     putch@c:
  1505                           	opt stack 0
  1506  00000F                     OpenUSART@spbrg:
  1507                           	opt stack 0
  1508  00000F                     ___wmul@multiplier:
  1509                           	opt stack 0
  1510  00000F                     ___awmod@dividend:
  1511                           	opt stack 0
  1512  00000F                     ___lwdiv@dividend:
  1513                           	opt stack 0
  1514  00000F                     strcpy@to:
  1515                           	opt stack 0
  1516  00000F                     strlen@s:
  1517                           	opt stack 0
  1518  00000F                     ___ftpack@arg:
  1519                           	opt stack 0
  1520  00000F                     ___fttol@f1:
  1521                           	opt stack 0
  1522  00000F                     I2C_Init@c:
  1523                           	opt stack 0
  1524                           
  1525                           ; 4 bytes @ 0xE
  1526  00000F                     	ds	1
  1527  000010                     spiwrite@spidata:
  1528                           	opt stack 0
  1529  000010                     I2C_Read@n:
  1530                           	opt stack 0
  1531  000010                     I2C_Write@n:
  1532                           	opt stack 0
  1533  000010                     _isdigit$1989:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0xF
  1537  000010                     	ds	1
  1538  000011                     ??_strlen:
  1539  000011                     write_command@cmd_:
  1540                           	opt stack 0
  1541  000011                     write_data@data_:
  1542                           	opt stack 0
  1543  000011                     I2C_Read@inByte:
  1544                           	opt stack 0
  1545  000011                     I2C_Write_Cmd_Only@Cmd:
  1546                           	opt stack 0
  1547  000011                     I2C_Write_Cmd_Write_Data@Cmd:
  1548                           	opt stack 0
  1549  000011                     OpenUSART@config:
  1550                           	opt stack 0
  1551  000011                     isdigit@c:
  1552                           	opt stack 0
  1553  000011                     ___wmul@multiplicand:
  1554                           	opt stack 0
  1555  000011                     ___awmod@divisor:
  1556                           	opt stack 0
  1557  000011                     ___lwdiv@divisor:
  1558                           	opt stack 0
  1559  000011                     strcpy@from:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x10
  1563  000011                     	ds	1
  1564  000012                     ?_DS1621_Read_Temp:
  1565                           	opt stack 0
  1566  000012                     setAddrWindow@y0:
  1567                           	opt stack 0
  1568  000012                     I2C_Write_Cmd_Only@Device:
  1569                           	opt stack 0
  1570  000012                     I2C_Write_Cmd_Write_Data@Data_Out:
  1571                           	opt stack 0
  1572  000012                     DS3231_Read_Time@Address:
  1573                           	opt stack 0
  1574  000012                     ___ftpack@exp:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x11
  1578  000012                     	ds	1
  1579  000013                     ??___fttol:
  1580  000013                     setAddrWindow@x1:
  1581                           	opt stack 0
  1582  000013                     I2C_Write_Cmd_Write_Data@Device:
  1583                           	opt stack 0
  1584  000013                     DS3231_Read_Time@Device:
  1585                           	opt stack 0
  1586  000013                     ___awmod@counter:
  1587                           	opt stack 0
  1588  000013                     ___ftpack@sign:
  1589                           	opt stack 0
  1590  000013                     ___lwdiv@counter:
  1591                           	opt stack 0
  1592  000013                     ___wmul@product:
  1593                           	opt stack 0
  1594  000013                     strcpy@cp:
  1595                           	opt stack 0
  1596  000013                     strlen@cp:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x12
  1600  000013                     	ds	1
  1601  000014                     ??___ftpack:
  1602  000014                     setAddrWindow@y1:
  1603                           	opt stack 0
  1604  000014                     DS1621_Init@Device:
  1605                           	opt stack 0
  1606  000014                     DS1621_Read_Temp@Cmd:
  1607                           	opt stack 0
  1608  000014                     ___awmod@sign:
  1609                           	opt stack 0
  1610  000014                     ___lwdiv@quotient:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x13
  1614  000014                     	ds	1
  1615  000015                     ?___awdiv:
  1616                           	opt stack 0
  1617  000015                     setAddrWindow@x0:
  1618                           	opt stack 0
  1619  000015                     DS1621_Read_Temp@Data_Ret:
  1620                           	opt stack 0
  1621  000015                     delay_ms@ms:
  1622                           	opt stack 0
  1623  000015                     ___awdiv@dividend:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x14
  1627  000015                     	ds	1
  1628  000016                     ?___lwmod:
  1629                           	opt stack 0
  1630  000016                     drawPixel@y:
  1631                           	opt stack 0
  1632  000016                     drawFastVLine@y:
  1633                           	opt stack 0
  1634  000016                     fillRectangle@y:
  1635                           	opt stack 0
  1636  000016                     DS1621_Read_Temp@Device:
  1637                           	opt stack 0
  1638  000016                     ___lwmod@dividend:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x15
  1642  000016                     	ds	1
  1643  000017                     ??_delay_ms:
  1644  000017                     ?___lbtoft:
  1645                           	opt stack 0
  1646  000017                     drawFastVLine@h:
  1647                           	opt stack 0
  1648  000017                     fillRectangle@w:
  1649                           	opt stack 0
  1650  000017                     drawPixel@color:
  1651                           	opt stack 0
  1652  000017                     ___awdiv@divisor:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x16
  1656  000017                     	ds	1
  1657  000018                     fillRectangle@h:
  1658                           	opt stack 0
  1659  000018                     ___fttol@sign1:
  1660                           	opt stack 0
  1661  000018                     drawFastVLine@color:
  1662                           	opt stack 0
  1663  000018                     ___lwmod@divisor:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x17
  1667  000018                     	ds	1
  1668  000019                     drawPixel@x:
  1669                           	opt stack 0
  1670  000019                     ___awdiv@counter:
  1671                           	opt stack 0
  1672  000019                     delay_ms@count:
  1673                           	opt stack 0
  1674  000019                     fillRectangle@color:
  1675                           	opt stack 0
  1676  000019                     ___fttol@lval:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x18
  1680  000019                     	ds	1
  1681  00001A                     ??_drawFastVLine:
  1682  00001A                     ___awdiv@sign:
  1683                           	opt stack 0
  1684  00001A                     ___lbtoft@c:
  1685                           	opt stack 0
  1686  00001A                     ___lwmod@counter:
  1687                           	opt stack 0
  1688  00001A                     drawCircle@x0:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x19
  1692  00001A                     	ds	1
  1693  00001B                     ??_fillRectangle:
  1694  00001B                     ?_printf:
  1695                           	opt stack 0
  1696  00001B                     ?___ftmul:
  1697                           	opt stack 0
  1698  00001B                     printf@f:
  1699                           	opt stack 0
  1700  00001B                     ___awdiv@quotient:
  1701                           	opt stack 0
  1702  00001B                     ___ftmul@f1:
  1703                           	opt stack 0
  1704                           
  1705                           ; 3 bytes @ 0x1A
  1706  00001B                     	ds	1
  1707  00001C                     drawCircle@y0:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x1B
  1711  00001C                     	ds	1
  1712  00001D                     ?_get_RPM:
  1713                           	opt stack 0
  1714  00001D                     ___fttol@exp1:
  1715                           	opt stack 0
  1716                           
  1717                           ; 1 bytes @ 0x1C
  1718  00001D                     	ds	1
  1719  00001E                     drawFastVLine@hi:
  1720                           	opt stack 0
  1721  00001E                     drawCircle@r:
  1722                           	opt stack 0
  1723  00001E                     ___ftmul@f2:
  1724                           	opt stack 0
  1725                           
  1726                           ; 3 bytes @ 0x1D
  1727  00001E                     	ds	1
  1728  00001F                     drawFastVLine@lo:
  1729                           	opt stack 0
  1730  00001F                     fillRectangle@hi:
  1731                           	opt stack 0
  1732  00001F                     get_RPM@RPS:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x1E
  1736  00001F                     	ds	1
  1737  000020                     drawFastVLine@x:
  1738                           	opt stack 0
  1739  000020                     fillRectangle@lo:
  1740                           	opt stack 0
  1741  000020                     drawCircle@color:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x1F
  1745  000020                     	ds	1
  1746  000021                     ??___ftmul:
  1747  000021                     fillRect@y:
  1748                           	opt stack 0
  1749  000021                     fillRectangle@x:
  1750                           	opt stack 0
  1751                           
  1752                           ; 1 bytes @ 0x20
  1753  000021                     	ds	1
  1754  000022                     ??_drawCircle:
  1755  000022                     fillRect@w:
  1756                           	opt stack 0
  1757  000022                     fillScreen@color:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x21
  1761  000022                     	ds	1
  1762  000023                     fillRect@h:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x22
  1766  000023                     	ds	1
  1767  000024                     ___ftmul@exp:
  1768                           	opt stack 0
  1769  000024                     fillRect@color:
  1770                           	opt stack 0
  1771  000024                     drawCircle@ddF_x:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x23
  1775  000024                     	ds	1
  1776  000025                     ___ftmul@f3_as_product:
  1777                           	opt stack 0
  1778                           
  1779                           ; 3 bytes @ 0x24
  1780  000025                     	ds	1
  1781  000026                     ??_fillRect:
  1782  000026                     drawCircle@ddF_y:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x25
  1786  000026                     	ds	2
  1787  000028                     ___ftmul@cntr:
  1788                           	opt stack 0
  1789  000028                     drawCircle@f:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x27
  1793  000028                     	ds	1
  1794  000029                     ??_printf:
  1795  000029                     fillRect@x:
  1796                           	opt stack 0
  1797  000029                     ___ftmul@sign:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x28
  1801  000029                     	ds	1
  1802  00002A                     ?___ftdiv:
  1803                           	opt stack 0
  1804  00002A                     fillRect@i:
  1805                           	opt stack 0
  1806  00002A                     drawCircle@x:
  1807                           	opt stack 0
  1808  00002A                     ___ftdiv@f1:
  1809                           	opt stack 0
  1810                           
  1811                           ; 3 bytes @ 0x29
  1812  00002A                     	ds	2
  1813  00002C                     drawChar@y:
  1814                           	opt stack 0
  1815  00002C                     drawCircle@y:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x2B
  1819  00002C                     	ds	1
  1820  00002D                     drawChar@c:
  1821                           	opt stack 0
  1822  00002D                     printf@idx:
  1823                           	opt stack 0
  1824  00002D                     ___ftdiv@f2:
  1825                           	opt stack 0
  1826                           
  1827                           ; 3 bytes @ 0x2C
  1828  00002D                     	ds	1
  1829  00002E                     drawChar@color:
  1830                           	opt stack 0
  1831  00002E                     printf@ap:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x2D
  1835  00002E                     	ds	2
  1836  000030                     ??___ftdiv:
  1837  000030                     printf@prec:
  1838                           	opt stack 0
  1839  000030                     drawChar@bg:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x2F
  1843  000030                     	ds	1
  1844  000031                     printf@val:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x30
  1848  000031                     	ds	1
  1849  000032                     drawChar@size:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x31
  1853  000032                     	ds	1
  1854  000033                     drawChar@line:
  1855                           	opt stack 0
  1856  000033                     printf@flag:
  1857                           	opt stack 0
  1858  000033                     ___ftdiv@cntr:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x32
  1862  000033                     	ds	1
  1863  000034                     drawChar@x:
  1864                           	opt stack 0
  1865  000034                     printf@width:
  1866                           	opt stack 0
  1867  000034                     ___ftdiv@f3:
  1868                           	opt stack 0
  1869                           
  1870                           ; 3 bytes @ 0x33
  1871  000034                     	ds	1
  1872  000035                     drawChar@j:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x34
  1876  000035                     	ds	1
  1877  000036                     drawChar@i:
  1878                           	opt stack 0
  1879  000036                     printf@c:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x35
  1883  000036                     	ds	1
  1884  000037                     drawtext@y:
  1885                           	opt stack 0
  1886  000037                     ___ftdiv@exp:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0x36
  1890  000037                     	ds	1
  1891  000038                     ___ftdiv@sign:
  1892                           	opt stack 0
  1893  000038                     drawtext@_text:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x37
  1897  000038                     	ds	1
  1898  000039                     ??_do_update_pwm:
  1899                           
  1900                           ; 0 bytes @ 0x38
  1901  000039                     	ds	1
  1902  00003A                     drawtext@color:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x39
  1906  00003A                     	ds	2
  1907  00003C                     drawtext@bg:
  1908                           	opt stack 0
  1909  00003C                     do_update_pwm@dc_f:
  1910                           	opt stack 0
  1911                           
  1912                           ; 3 bytes @ 0x3B
  1913  00003C                     	ds	2
  1914  00003E                     drawtext@size:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x3D
  1918  00003E                     	ds	1
  1919  00003F                     ??_drawtext:
  1920  00003F                     do_update_pwm@duty_cycle:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x3E
  1924  00003F                     	ds	1
  1925  000040                     do_update_pwm@dc_I:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3F
  1929  000040                     	ds	1
  1930  000041                     
  1931                           ; 0 bytes @ 0x40
  1932  000041                     	ds	1
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postdec1	equ	0xFE5
  1940                           fsr1l	equ	0xFE1
  1941                           
  1942 ;;
  1943 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1944 ;;
  1945 ;; *************** function _main *****************
  1946 ;; Defined at:
  1947 ;;		line 108 in file "Lab12_ex.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  j               2   12[BANK0 ] int 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;		None               void
  1954 ;; Registers used:
  1955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;Total ram usage:        3 bytes
  1966 ;; Hardware stack levels required when called:    9
  1967 ;; This function calls:
  1968 ;;		_DS1621_Read_Temp
  1969 ;;		_DS3231_Read_Time
  1970 ;;		_Do_Beep
  1971 ;;		_Do_Init
  1972 ;;		_Initialize_Screen
  1973 ;;		_Update_Screen
  1974 ;;		___awdiv
  1975 ;;		___wmul
  1976 ;;		_do_update_pwm
  1977 ;;		_get_RPM
  1978 ;;		_printf
  1979 ;; This function is called by:
  1980 ;;		Startup code after reset
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text0
  1985  000376                     __ptext0:
  1986                           	opt stack 0
  1987  000376                     _main:
  1988                           	opt stack 22
  1989                           
  1990                           ;Lab12_ex.c: 110: Do_Init();
  1991                           
  1992                           ;incstack = 0
  1993  000376  EC44  F00E         	call	_Do_Init	;wreg free
  1994                           
  1995                           ;Lab12_ex.c: 111: Initialize_Screen();
  1996  00037A  ECCA  F004         	call	_Initialize_Screen	;wreg free
  1997                           
  1998                           ;Lab12_ex.c: 113: PORTEbits.RE1 = 1;
  1999  00037E  8284               	bsf	3972,1,c	;volatile
  2000                           
  2001                           ;Lab12_ex.c: 114: PORTEbits.RE2 = 1;
  2002  000380  8484               	bsf	3972,2,c	;volatile
  2003                           
  2004                           ;Lab12_ex.c: 115: PORTCbits.RC2 = 1;
  2005  000382  8482               	bsf	3970,2,c	;volatile
  2006                           
  2007                           ;Lab12_ex.c: 116: duty_cycle = 100;
  2008  000384  0E64               	movlw	100
  2009  000386  6E5E               	movwf	_duty_cycle,c
  2010  000388  D000               	goto	l6399
  2011  00038A                     l6399:
  2012                           
  2013                           ;Lab12_ex.c: 118: {
  2014                           ;Lab12_ex.c: 119: DS3231_Read_Time();
  2015  00038A  EC49  F00D         	call	_DS3231_Read_Time	;wreg free
  2016                           
  2017                           ;Lab12_ex.c: 121: if(tempSecond != second)
  2018  00038E  5064               	movf	_second,w,c
  2019  000390  1870               	xorwf	_tempSecond,w,c
  2020  000392  B4D8               	btfsc	status,2,c
  2021  000394  D7FA               	goto	l6399
  2022                           
  2023                           ;Lab12_ex.c: 122: {
  2024                           ;Lab12_ex.c: 123: rpm = get_RPM();
  2025  000396  EC8C  F00E         	call	_get_RPM	;wreg free
  2026  00039A  C01D  F04C         	movff	?_get_RPM,_rpm
  2027  00039E  C01E  F04D         	movff	?_get_RPM+1,_rpm+1
  2028                           
  2029                           ;Lab12_ex.c: 124: tempSecond = second;
  2030  0003A2  C064  F070         	movff	_second,_tempSecond
  2031                           
  2032                           ;Lab12_ex.c: 125: DS1621_tempC = DS1621_Read_Temp();
  2033  0003A6  EC08  F00F         	call	_DS1621_Read_Temp	;wreg free
  2034  0003AA  C012  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2035  0003AE  C013  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2036                           
  2037                           ;Lab12_ex.c: 126: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2038  0003B2  C044  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  2039  0003B6  C045  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2040  0003BA  0E00               	movlw	0
  2041  0003BC  6E12               	movwf	___wmul@multiplicand+1,c
  2042  0003BE  0E09               	movlw	9
  2043  0003C0  6E11               	movwf	___wmul@multiplicand,c
  2044  0003C2  EC87  F00F         	call	___wmul	;wreg free
  2045  0003C6  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2046  0003CA  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2047  0003CE  0E00               	movlw	0
  2048  0003D0  6E18               	movwf	___awdiv@divisor+1,c
  2049  0003D2  0E05               	movlw	5
  2050  0003D4  6E17               	movwf	___awdiv@divisor,c
  2051  0003D6  EC93  F00B         	call	___awdiv	;wreg free
  2052  0003DA  0E20               	movlw	32
  2053  0003DC  2415               	addwf	?___awdiv,w,c
  2054  0003DE  6E46               	movwf	_DS1621_tempF,c
  2055  0003E0  0E00               	movlw	0
  2056  0003E2  2016               	addwfc	?___awdiv+1,w,c
  2057  0003E4  6E47               	movwf	_DS1621_tempF+1,c
  2058                           
  2059                           ;Lab12_ex.c: 128: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2060  0003E6  0E2C               	movlw	low STR_1
  2061  0003E8  6E1B               	movwf	printf@f,c
  2062  0003EA  0EFF               	movlw	high STR_1
  2063  0003EC  6E1C               	movwf	printf@f+1,c
  2064  0003EE  C060  F01D         	movff	_hour,?_printf+2
  2065  0003F2  6A1E               	clrf	?_printf+3,c
  2066  0003F4  C061  F01F         	movff	_minute,?_printf+4
  2067  0003F8  6A20               	clrf	?_printf+5,c
  2068  0003FA  C064  F021         	movff	_second,?_printf+6
  2069  0003FE  6A22               	clrf	?_printf+7,c
  2070  000400  C062  F023         	movff	_month,?_printf+8
  2071  000404  6A24               	clrf	?_printf+9,c
  2072  000406  C05C  F025         	movff	_day,?_printf+10
  2073  00040A  6A26               	clrf	?_printf+11,c
  2074  00040C  C06E  F027         	movff	_year,?_printf+12
  2075  000410  6A28               	clrf	?_printf+13,c
  2076  000412  EC0E  F000         	call	_printf	;wreg free
  2077                           
  2078                           ;Lab12_ex.c: 129: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2079  000416  0E76               	movlw	low STR_2
  2080  000418  6E1B               	movwf	printf@f,c
  2081  00041A  0EFF               	movlw	high STR_2
  2082  00041C  6E1C               	movwf	printf@f+1,c
  2083  00041E  C044  F01D         	movff	_DS1621_tempC,?_printf+2
  2084  000422  C045  F01E         	movff	_DS1621_tempC+1,?_printf+3
  2085  000426  C046  F01F         	movff	_DS1621_tempF,?_printf+4
  2086  00042A  C047  F020         	movff	_DS1621_tempF+1,?_printf+5
  2087  00042E  EC0E  F000         	call	_printf	;wreg free
  2088                           
  2089                           ;Lab12_ex.c: 130: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2090  000432  0E8B               	movlw	low STR_3
  2091  000434  6E1B               	movwf	printf@f,c
  2092  000436  0EFF               	movlw	high STR_3
  2093  000438  6E1C               	movwf	printf@f+1,c
  2094  00043A  C04C  F01D         	movff	_rpm,?_printf+2
  2095  00043E  C04D  F01E         	movff	_rpm+1,?_printf+3
  2096  000442  C05E  F01F         	movff	_duty_cycle,?_printf+4
  2097  000446  6A20               	clrf	?_printf+5,c
  2098  000448  EC0E  F000         	call	_printf	;wreg free
  2099  00044C  D79E               	goto	l6399
  2100                           
  2101                           ;Lab12_ex.c: 131: }
  2102                           ;Lab12_ex.c: 132: }
  2103                           ;Lab12_ex.c: 135: PORTEbits.RE1 = 1;
  2104  00044E  8284               	bsf	3972,1,c	;volatile
  2105                           
  2106                           ;Lab12_ex.c: 136: duty_cycle = 50;
  2107  000450  0E32               	movlw	50
  2108  000452  6E5E               	movwf	_duty_cycle,c
  2109                           
  2110                           ;Lab12_ex.c: 137: do_update_pwm(duty_cycle);
  2111  000454  505E               	movf	_duty_cycle,w,c
  2112  000456  EC38  F00B         	call	_do_update_pwm
  2113  00045A  D000               	goto	l6421
  2114  00045C                     l6421:
  2115                           
  2116                           ;Lab12_ex.c: 139: {
  2117                           ;Lab12_ex.c: 140: DS3231_Read_Time();
  2118  00045C  EC49  F00D         	call	_DS3231_Read_Time	;wreg free
  2119                           
  2120                           ;Lab12_ex.c: 142: if(tempSecond != second)
  2121  000460  5064               	movf	_second,w,c
  2122  000462  1870               	xorwf	_tempSecond,w,c
  2123  000464  B4D8               	btfsc	status,2,c
  2124  000466  D7FA               	goto	l6421
  2125                           
  2126                           ;Lab12_ex.c: 143: {
  2127                           ;Lab12_ex.c: 144: tempSecond = second;
  2128  000468  C064  F070         	movff	_second,_tempSecond
  2129                           
  2130                           ;Lab12_ex.c: 145: DS1621_tempC = DS1621_Read_Temp();
  2131  00046C  EC08  F00F         	call	_DS1621_Read_Temp	;wreg free
  2132  000470  C012  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2133  000474  C013  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2134                           
  2135                           ;Lab12_ex.c: 146: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2136  000478  C044  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  2137  00047C  C045  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2138  000480  0E00               	movlw	0
  2139  000482  6E12               	movwf	___wmul@multiplicand+1,c
  2140  000484  0E09               	movlw	9
  2141  000486  6E11               	movwf	___wmul@multiplicand,c
  2142  000488  EC87  F00F         	call	___wmul	;wreg free
  2143  00048C  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2144  000490  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2145  000494  0E00               	movlw	0
  2146  000496  6E18               	movwf	___awdiv@divisor+1,c
  2147  000498  0E05               	movlw	5
  2148  00049A  6E17               	movwf	___awdiv@divisor,c
  2149  00049C  EC93  F00B         	call	___awdiv	;wreg free
  2150  0004A0  0E20               	movlw	32
  2151  0004A2  2415               	addwf	?___awdiv,w,c
  2152  0004A4  6E46               	movwf	_DS1621_tempF,c
  2153  0004A6  0E00               	movlw	0
  2154  0004A8  2016               	addwfc	?___awdiv+1,w,c
  2155  0004AA  6E47               	movwf	_DS1621_tempF+1,c
  2156                           
  2157                           ;Lab12_ex.c: 147: rpm = get_RPM();
  2158  0004AC  EC8C  F00E         	call	_get_RPM	;wreg free
  2159  0004B0  C01D  F04C         	movff	?_get_RPM,_rpm
  2160  0004B4  C01E  F04D         	movff	?_get_RPM+1,_rpm+1
  2161                           
  2162                           ;Lab12_ex.c: 148: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2163  0004B8  0E2C               	movlw	low STR_1
  2164  0004BA  6E1B               	movwf	printf@f,c
  2165  0004BC  0EFF               	movlw	high STR_1
  2166  0004BE  6E1C               	movwf	printf@f+1,c
  2167  0004C0  C060  F01D         	movff	_hour,?_printf+2
  2168  0004C4  6A1E               	clrf	?_printf+3,c
  2169  0004C6  C061  F01F         	movff	_minute,?_printf+4
  2170  0004CA  6A20               	clrf	?_printf+5,c
  2171  0004CC  C064  F021         	movff	_second,?_printf+6
  2172  0004D0  6A22               	clrf	?_printf+7,c
  2173  0004D2  C062  F023         	movff	_month,?_printf+8
  2174  0004D6  6A24               	clrf	?_printf+9,c
  2175  0004D8  C05C  F025         	movff	_day,?_printf+10
  2176  0004DC  6A26               	clrf	?_printf+11,c
  2177  0004DE  C06E  F027         	movff	_year,?_printf+12
  2178  0004E2  6A28               	clrf	?_printf+13,c
  2179  0004E4  EC0E  F000         	call	_printf	;wreg free
  2180                           
  2181                           ;Lab12_ex.c: 149: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2182  0004E8  0E76               	movlw	low STR_2
  2183  0004EA  6E1B               	movwf	printf@f,c
  2184  0004EC  0EFF               	movlw	high STR_2
  2185  0004EE  6E1C               	movwf	printf@f+1,c
  2186  0004F0  C044  F01D         	movff	_DS1621_tempC,?_printf+2
  2187  0004F4  C045  F01E         	movff	_DS1621_tempC+1,?_printf+3
  2188  0004F8  C046  F01F         	movff	_DS1621_tempF,?_printf+4
  2189  0004FC  C047  F020         	movff	_DS1621_tempF+1,?_printf+5
  2190  000500  EC0E  F000         	call	_printf	;wreg free
  2191                           
  2192                           ;Lab12_ex.c: 150: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2193  000504  0E8B               	movlw	low STR_3
  2194  000506  6E1B               	movwf	printf@f,c
  2195  000508  0EFF               	movlw	high STR_3
  2196  00050A  6E1C               	movwf	printf@f+1,c
  2197  00050C  C04C  F01D         	movff	_rpm,?_printf+2
  2198  000510  C04D  F01E         	movff	_rpm+1,?_printf+3
  2199  000514  C05E  F01F         	movff	_duty_cycle,?_printf+4
  2200  000518  6A20               	clrf	?_printf+5,c
  2201  00051A  EC0E  F000         	call	_printf	;wreg free
  2202  00051E  D79E               	goto	l6421
  2203  000520  D000               	goto	l6439
  2204  000522                     l6439:
  2205                           
  2206                           ;Lab12_ex.c: 155: {
  2207                           ;Lab12_ex.c: 156: duty_cycle = 50;
  2208  000522  0E32               	movlw	50
  2209  000524  6E5E               	movwf	_duty_cycle,c
  2210                           
  2211                           ;Lab12_ex.c: 157: do_update_pwm(duty_cycle) ;
  2212  000526  505E               	movf	_duty_cycle,w,c
  2213  000528  EC38  F00B         	call	_do_update_pwm
  2214                           
  2215                           ;Lab12_ex.c: 159: DS3231_Read_Time();
  2216  00052C  EC49  F00D         	call	_DS3231_Read_Time	;wreg free
  2217                           
  2218                           ;Lab12_ex.c: 161: if(tempSecond != second)
  2219  000530  5064               	movf	_second,w,c
  2220  000532  1870               	xorwf	_tempSecond,w,c
  2221  000534  B4D8               	btfsc	status,2,c
  2222  000536  D05E               	goto	l6463
  2223                           
  2224                           ;Lab12_ex.c: 162: {
  2225                           ;Lab12_ex.c: 163: tempSecond = second;
  2226  000538  C064  F070         	movff	_second,_tempSecond
  2227                           
  2228                           ;Lab12_ex.c: 164: DS1621_tempC = DS1621_Read_Temp();
  2229  00053C  EC08  F00F         	call	_DS1621_Read_Temp	;wreg free
  2230  000540  C012  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2231  000544  C013  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2232                           
  2233                           ;Lab12_ex.c: 165: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2234  000548  C044  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  2235  00054C  C045  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2236  000550  0E00               	movlw	0
  2237  000552  6E12               	movwf	___wmul@multiplicand+1,c
  2238  000554  0E09               	movlw	9
  2239  000556  6E11               	movwf	___wmul@multiplicand,c
  2240  000558  EC87  F00F         	call	___wmul	;wreg free
  2241  00055C  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2242  000560  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2243  000564  0E00               	movlw	0
  2244  000566  6E18               	movwf	___awdiv@divisor+1,c
  2245  000568  0E05               	movlw	5
  2246  00056A  6E17               	movwf	___awdiv@divisor,c
  2247  00056C  EC93  F00B         	call	___awdiv	;wreg free
  2248  000570  0E20               	movlw	32
  2249  000572  2415               	addwf	?___awdiv,w,c
  2250  000574  6E46               	movwf	_DS1621_tempF,c
  2251  000576  0E00               	movlw	0
  2252  000578  2016               	addwfc	?___awdiv+1,w,c
  2253  00057A  6E47               	movwf	_DS1621_tempF+1,c
  2254                           
  2255                           ;Lab12_ex.c: 166: rpm = get_RPM();
  2256  00057C  EC8C  F00E         	call	_get_RPM	;wreg free
  2257  000580  C01D  F04C         	movff	?_get_RPM,_rpm
  2258  000584  C01E  F04D         	movff	?_get_RPM+1,_rpm+1
  2259                           
  2260                           ;Lab12_ex.c: 167: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2261  000588  0E2C               	movlw	low STR_1
  2262  00058A  6E1B               	movwf	printf@f,c
  2263  00058C  0EFF               	movlw	high STR_1
  2264  00058E  6E1C               	movwf	printf@f+1,c
  2265  000590  C060  F01D         	movff	_hour,?_printf+2
  2266  000594  6A1E               	clrf	?_printf+3,c
  2267  000596  C061  F01F         	movff	_minute,?_printf+4
  2268  00059A  6A20               	clrf	?_printf+5,c
  2269  00059C  C064  F021         	movff	_second,?_printf+6
  2270  0005A0  6A22               	clrf	?_printf+7,c
  2271  0005A2  C062  F023         	movff	_month,?_printf+8
  2272  0005A6  6A24               	clrf	?_printf+9,c
  2273  0005A8  C05C  F025         	movff	_day,?_printf+10
  2274  0005AC  6A26               	clrf	?_printf+11,c
  2275  0005AE  C06E  F027         	movff	_year,?_printf+12
  2276  0005B2  6A28               	clrf	?_printf+13,c
  2277  0005B4  EC0E  F000         	call	_printf	;wreg free
  2278                           
  2279                           ;Lab12_ex.c: 168: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2280  0005B8  0E76               	movlw	low STR_2
  2281  0005BA  6E1B               	movwf	printf@f,c
  2282  0005BC  0EFF               	movlw	high STR_2
  2283  0005BE  6E1C               	movwf	printf@f+1,c
  2284  0005C0  C044  F01D         	movff	_DS1621_tempC,?_printf+2
  2285  0005C4  C045  F01E         	movff	_DS1621_tempC+1,?_printf+3
  2286  0005C8  C046  F01F         	movff	_DS1621_tempF,?_printf+4
  2287  0005CC  C047  F020         	movff	_DS1621_tempF+1,?_printf+5
  2288  0005D0  EC0E  F000         	call	_printf	;wreg free
  2289                           
  2290                           ;Lab12_ex.c: 169: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2291  0005D4  0E8B               	movlw	low STR_3
  2292  0005D6  6E1B               	movwf	printf@f,c
  2293  0005D8  0EFF               	movlw	high STR_3
  2294  0005DA  6E1C               	movwf	printf@f+1,c
  2295  0005DC  C04C  F01D         	movff	_rpm,?_printf+2
  2296  0005E0  C04D  F01E         	movff	_rpm+1,?_printf+3
  2297  0005E4  C05E  F01F         	movff	_duty_cycle,?_printf+4
  2298  0005E8  6A20               	clrf	?_printf+5,c
  2299  0005EA  EC0E  F000         	call	_printf	;wreg free
  2300                           
  2301                           ;Lab12_ex.c: 170: Update_Screen();
  2302  0005EE  EC51  F003         	call	_Update_Screen	;wreg free
  2303  0005F2  D000               	goto	l6463
  2304  0005F4                     l6463:
  2305                           
  2306                           ;Lab12_ex.c: 171: }
  2307                           ;Lab12_ex.c: 173: if (nec_ok == 1)
  2308  0005F4  044A               	decf	_nec_ok,w,c
  2309  0005F6  104B               	iorwf	_nec_ok+1,w,c
  2310  0005F8  A4D8               	btfss	status,2,c
  2311  0005FA  D793               	goto	l6439
  2312                           
  2313                           ;Lab12_ex.c: 174: {
  2314                           ;Lab12_ex.c: 175: nec_ok = 0;
  2315  0005FC  0E00               	movlw	0
  2316  0005FE  6E4B               	movwf	_nec_ok+1,c
  2317  000600  0E00               	movlw	0
  2318  000602  6E4A               	movwf	_nec_ok,c
  2319                           
  2320                           ;Lab12_ex.c: 177: printf ("NEC_Code = %x\r\n", Nec_code1);
  2321  000604  0EB0               	movlw	low STR_10
  2322  000606  6E1B               	movwf	printf@f,c
  2323  000608  0EFF               	movlw	high STR_10
  2324  00060A  6E1C               	movwf	printf@f+1,c
  2325  00060C  C053  F01D         	movff	_Nec_code1,?_printf+2
  2326  000610  6A1E               	clrf	?_printf+3,c
  2327  000612  EC0E  F000         	call	_printf	;wreg free
  2328                           
  2329                           ;Lab12_ex.c: 179: INTCONbits.INT0IE = 1;
  2330  000616  88F2               	bsf	intcon,4,c	;volatile
  2331                           
  2332                           ;Lab12_ex.c: 180: INTCON2bits.INTEDG0 = 0;
  2333  000618  9CF1               	bcf	intcon2,6,c	;volatile
  2334                           
  2335                           ;Lab12_ex.c: 182: found = 0xff;
  2336  00061A  685F               	setf	_found,c
  2337                           
  2338                           ;Lab12_ex.c: 183: for (int j=0; j< 21; j++)
  2339  00061C  0E00               	movlw	0
  2340  00061E  0100               	movlb	0	; () banked
  2341  000620  6FF3               	movwf	(main@j+1)& (0+255),b
  2342  000622  0E00               	movlw	0
  2343  000624  6FF2               	movwf	main@j& (0+255),b
  2344  000626                     l6477:
  2345                           
  2346                           ; BSR set to: 0
  2347  000626  0100               	movlb	0	; () banked
  2348  000628  BFF3               	btfsc	(main@j+1)& (0+255),7,b
  2349  00062A  D00A               	goto	l6481
  2350  00062C  0100               	movlb	0	; () banked
  2351  00062E  51F3               	movf	(main@j+1)& (0+255),w,b
  2352  000630  E120               	bnz	l6491
  2353  000632  0E15               	movlw	21
  2354  000634  0100               	movlb	0	; () banked
  2355  000636  5DF2               	subwf	main@j& (0+255),w,b
  2356  000638  B0D8               	btfsc	status,0,c
  2357  00063A  D01B               	goto	l6491
  2358  00063C  D001               	goto	l6481
  2359                           
  2360                           ; BSR set to: 0
  2361  00063E  D019               	goto	l6491
  2362  000640                     l6481:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;Lab12_ex.c: 184: {
  2366                           ;Lab12_ex.c: 185: if (Nec_code1 == array1[j])
  2367  000640  0E36               	movlw	low _array1
  2368  000642  0100               	movlb	0	; () banked
  2369  000644  25F2               	addwf	main@j& (0+255),w,b
  2370  000646  6ED9               	movwf	fsr2l,c
  2371  000648  0E01               	movlw	high _array1
  2372  00064A  0100               	movlb	0	; () banked
  2373  00064C  21F3               	addwfc	(main@j+1)& (0+255),w,b
  2374  00064E  6EDA               	movwf	fsr2h,c
  2375  000650  5053               	movf	_Nec_code1,w,c
  2376  000652  18DE               	xorwf	postinc2,w,c
  2377  000654  A4D8               	btfss	status,2,c
  2378  000656  D008               	goto	l6487
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;Lab12_ex.c: 186: {
  2382                           ;Lab12_ex.c: 187: found = j;
  2383  000658  C0F2  F05F         	movff	main@j,_found
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;Lab12_ex.c: 188: j = 21;
  2387  00065C  0E00               	movlw	0
  2388  00065E  0100               	movlb	0	; () banked
  2389  000660  6FF3               	movwf	(main@j+1)& (0+255),b
  2390  000662  0E15               	movlw	21
  2391  000664  6FF2               	movwf	main@j& (0+255),b
  2392  000666  D000               	goto	l6487
  2393  000668                     l6487:
  2394                           
  2395                           ; BSR set to: 0
  2396  000668  0100               	movlb	0	; () banked
  2397  00066A  4BF2               	infsnz	main@j& (0+255),f,b
  2398  00066C  2BF3               	incf	(main@j+1)& (0+255),f,b
  2399  00066E  D7DB               	goto	l6477
  2400                           
  2401                           ; BSR set to: 0
  2402  000670  D000               	goto	l6491
  2403  000672                     l6491:
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;Lab12_ex.c: 189: }
  2407                           ;Lab12_ex.c: 190: }
  2408                           ;Lab12_ex.c: 192: if (found == 0xff)
  2409  000672  285F               	incf	_found,w,c
  2410  000674  A4D8               	btfss	status,2,c
  2411  000676  D007               	goto	l6495
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;Lab12_ex.c: 193: {
  2415                           ;Lab12_ex.c: 194: printf ("Cannot find button \r\n");
  2416  000678  0E60               	movlw	low STR_11
  2417  00067A  6E1B               	movwf	printf@f,c
  2418  00067C  0EFF               	movlw	high STR_11
  2419  00067E  6E1C               	movwf	printf@f+1,c
  2420  000680  EC0E  F000         	call	_printf	;wreg free
  2421                           
  2422                           ;Lab12_ex.c: 195: }
  2423  000684  D74E               	goto	l6439
  2424  000686                     l6495:
  2425                           
  2426                           ;Lab12_ex.c: 196: else
  2427                           ;Lab12_ex.c: 197: {
  2428                           ;Lab12_ex.c: 198: Do_Beep();
  2429  000686  EC73  F010         	call	_Do_Beep	;wreg free
  2430                           
  2431                           ;Lab12_ex.c: 199: printf ("button = %d \r\n", found);
  2432  00068A  0EC0               	movlw	low STR_12
  2433  00068C  6E1B               	movwf	printf@f,c
  2434  00068E  0EFF               	movlw	high STR_12
  2435  000690  6E1C               	movwf	printf@f+1,c
  2436  000692  C05F  F01D         	movff	_found,?_printf+2
  2437  000696  6A1E               	clrf	?_printf+3,c
  2438  000698  EC0E  F000         	call	_printf	;wreg free
  2439  00069C  D742               	goto	l6439
  2440  00069E  EF0C  F000         	goto	start
  2441  0006A2                     __end_of_main:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           intcon	equ	0xFF2
  2448                           intcon2	equ	0xFF1
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           postinc2	equ	0xFDE
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _printf *****************
  2459 ;; Defined at:
  2460 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  f               2   26[COMRAM] PTR const unsigned char 
  2463 ;;		 -> STR_12(15), STR_11(22), STR_10(16), STR_9(20), 
  2464 ;;		 -> STR_8(21), STR_7(30), STR_6(20), STR_5(21), 
  2465 ;;		 -> STR_4(30), STR_3(20), STR_2(21), STR_1(30), 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  idx             1   44[COMRAM] unsigned char 
  2468 ;;  tmpval          4    0        struct .
  2469 ;;  cp              3    0        PTR const unsigned char 
  2470 ;;  width           2   51[COMRAM] int 
  2471 ;;  val             2   48[COMRAM] unsigned int 
  2472 ;;  ap              2   45[COMRAM] PTR void [1]
  2473 ;;		 -> ?_printf(2), 
  2474 ;;  len             2    0        unsigned int 
  2475 ;;  c               1   53[COMRAM] char 
  2476 ;;  flag            1   50[COMRAM] unsigned char 
  2477 ;;  prec            1   47[COMRAM] char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2   26[COMRAM] int 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:       28 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    2
  2494 ;; This function calls:
  2495 ;;		___lwdiv
  2496 ;;		___lwmod
  2497 ;;		___wmul
  2498 ;;		_isdigit
  2499 ;;		_putch
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text1
  2506  00001C                     __ptext1:
  2507                           	opt stack 0
  2508  00001C                     _printf:
  2509                           	opt stack 28
  2510                           
  2511                           ;doprnt.c: 466: va_list ap;
  2512                           ;doprnt.c: 499: signed char c;
  2513                           ;doprnt.c: 501: int width;
  2514                           ;doprnt.c: 506: signed char prec;
  2515                           ;doprnt.c: 508: unsigned char flag;
  2516                           ;doprnt.c: 523: union {
  2517                           ;doprnt.c: 524: unsigned long vd;
  2518                           ;doprnt.c: 525: double integ;
  2519                           ;doprnt.c: 526: } tmpval;
  2520                           ;doprnt.c: 528: unsigned int val;
  2521                           ;doprnt.c: 529: unsigned len;
  2522                           ;doprnt.c: 530: const char * cp;
  2523                           ;doprnt.c: 533: *ap = __va_start();
  2524                           
  2525                           ;incstack = 0
  2526  00001C  0E1D               	movlw	low (?_printf+2)
  2527  00001E  6E2E               	movwf	printf@ap,c
  2528  000020  0E00               	movlw	high (?_printf+2)
  2529  000022  6E2F               	movwf	printf@ap+1,c
  2530                           
  2531                           ;doprnt.c: 536: while(c = *f++) {
  2532  000024  D199               	goto	l6013
  2533  000026                     l5887:
  2534                           
  2535                           ;doprnt.c: 538: if(c != '%')
  2536  000026  0E25               	movlw	37
  2537  000028  1836               	xorwf	printf@c,w,c
  2538  00002A  B4D8               	btfsc	status,2,c
  2539  00002C  D004               	goto	l5891
  2540                           
  2541                           ;doprnt.c: 540: {
  2542                           ;doprnt.c: 541: (putch(c) );
  2543  00002E  5036               	movf	printf@c,w,c
  2544  000030  EC4C  F010         	call	_putch
  2545                           
  2546                           ;doprnt.c: 542: continue;
  2547  000034  D191               	goto	l6013
  2548  000036                     l5891:
  2549                           
  2550                           ;doprnt.c: 543: }
  2551                           ;doprnt.c: 546: width = 0;
  2552  000036  0E00               	movlw	0
  2553  000038  6E35               	movwf	printf@width+1,c
  2554  00003A  0E00               	movlw	0
  2555  00003C  6E34               	movwf	printf@width,c
  2556                           
  2557                           ;doprnt.c: 548: flag = 0;
  2558  00003E  0E00               	movlw	0
  2559  000040  6E33               	movwf	printf@flag,c
  2560                           
  2561                           ;doprnt.c: 551: switch(*f) {
  2562                           
  2563                           ;doprnt.c: 550: for(;;) {
  2564  000042  D005               	goto	l5897
  2565  000044                     l5893:
  2566                           
  2567                           ;doprnt.c: 580: flag |= 0x04;
  2568  000044  8433               	bsf	printf@flag,2,c
  2569                           
  2570                           ;doprnt.c: 581: f++;
  2571  000046  4A1B               	infsnz	printf@f,f,c
  2572  000048  2A1C               	incf	printf@f+1,f,c
  2573                           
  2574                           ;doprnt.c: 582: continue;
  2575  00004A  D001               	goto	l5897
  2576                           
  2577                           ;doprnt.c: 584: }
  2578  00004C  D00B               	goto	l5899
  2579  00004E                     l5897:
  2580  00004E  C01B  FFF6         	movff	printf@f,tblptrl
  2581  000052  C01C  FFF7         	movff	printf@f+1,tblptrh
  2582  000056                     	if	0	;tblptru may be non-zero
  2583  000056                     	endif
  2584  000056                     	if	0	;tblptru may be non-zero
  2585  000056                     	endif
  2586  000056  0008               	tblrd		*
  2587  000058  50F5               	movf	tablat,w,c
  2588                           
  2589                           ; Switch size 1, requested type "space"
  2590                           ; Number of cases is 1, Range of values is 48 to 48
  2591                           ; switch strategies available:
  2592                           ; Name         Instructions Cycles
  2593                           ; simple_byte            4     3 (average)
  2594                           ;	Chosen strategy is simple_byte
  2595  00005A  0A30               	xorlw	48	; case 48
  2596  00005C  B4D8               	btfsc	status,2,c
  2597  00005E  D7F2               	goto	l5893
  2598                           
  2599                           ;doprnt.c: 585: break;
  2600  000060  D001               	goto	l5899
  2601                           
  2602                           ;doprnt.c: 586: }
  2603  000062  D7F5               	goto	l5897
  2604  000064                     l5899:
  2605                           
  2606                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2607  000064  C01B  FFF6         	movff	printf@f,tblptrl
  2608  000068  C01C  FFF7         	movff	printf@f+1,tblptrh
  2609  00006C                     	if	0	;tblptru may be non-zero
  2610  00006C                     	endif
  2611  00006C                     	if	0	;tblptru may be non-zero
  2612  00006C                     	endif
  2613  00006C  0008               	tblrd		*
  2614  00006E  50F5               	movf	tablat,w,c
  2615  000070  ECAE  F00F         	call	_isdigit
  2616  000074  A0D8               	btfss	status,0,c
  2617  000076  D03B               	goto	l5915
  2618                           
  2619                           ;doprnt.c: 598: width = 0;
  2620  000078  0E00               	movlw	0
  2621  00007A  6E35               	movwf	printf@width+1,c
  2622  00007C  0E00               	movlw	0
  2623  00007E  6E34               	movwf	printf@width,c
  2624  000080  D000               	goto	l5903
  2625  000082                     l5903:
  2626                           
  2627                           ;doprnt.c: 600: width *= 10;
  2628  000082  C034  F00F         	movff	printf@width,___wmul@multiplier
  2629  000086  C035  F010         	movff	printf@width+1,___wmul@multiplier+1
  2630  00008A  0E00               	movlw	0
  2631  00008C  6E12               	movwf	___wmul@multiplicand+1,c
  2632  00008E  0E0A               	movlw	10
  2633  000090  6E11               	movwf	___wmul@multiplicand,c
  2634  000092  EC87  F00F         	call	___wmul	;wreg free
  2635  000096  C00F  F034         	movff	?___wmul,printf@width
  2636  00009A  C010  F035         	movff	?___wmul+1,printf@width+1
  2637                           
  2638                           ;doprnt.c: 601: width += *f++ - '0';
  2639  00009E  0ED0               	movlw	208
  2640  0000A0  6E29               	movwf	??_printf& (0+255),c
  2641  0000A2  0EFF               	movlw	255
  2642  0000A4  6E2A               	movwf	(??_printf+1)& (0+255),c
  2643  0000A6  C01B  FFF6         	movff	printf@f,tblptrl
  2644  0000AA  C01C  FFF7         	movff	printf@f+1,tblptrh
  2645  0000AE                     	if	0	;tblptru may be non-zero
  2646  0000AE                     	endif
  2647  0000AE                     	if	0	;tblptru may be non-zero
  2648  0000AE                     	endif
  2649  0000AE  0008               	tblrd		*
  2650  0000B0  50F5               	movf	tablat,w,c
  2651  0000B2  6E2B               	movwf	(??_printf+2)& (0+255),c
  2652  0000B4  6A2C               	clrf	(??_printf+3)& (0+255),c
  2653  0000B6  5029               	movf	??_printf,w,c
  2654  0000B8  262B               	addwf	??_printf+2,f,c
  2655  0000BA  502A               	movf	??_printf+1,w,c
  2656  0000BC  222C               	addwfc	??_printf+3,f,c
  2657  0000BE  502B               	movf	??_printf+2,w,c
  2658  0000C0  2634               	addwf	printf@width,f,c
  2659  0000C2  502C               	movf	??_printf+3,w,c
  2660  0000C4  2235               	addwfc	printf@width+1,f,c
  2661  0000C6  4A1B               	infsnz	printf@f,f,c
  2662  0000C8  2A1C               	incf	printf@f+1,f,c
  2663                           
  2664                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2665  0000CA  C01B  FFF6         	movff	printf@f,tblptrl
  2666  0000CE  C01C  FFF7         	movff	printf@f+1,tblptrh
  2667  0000D2                     	if	0	;tblptru may be non-zero
  2668  0000D2                     	endif
  2669  0000D2                     	if	0	;tblptru may be non-zero
  2670  0000D2                     	endif
  2671  0000D2  0008               	tblrd		*
  2672  0000D4  50F5               	movf	tablat,w,c
  2673  0000D6  ECAE  F00F         	call	_isdigit
  2674  0000DA  A0D8               	btfss	status,0,c
  2675  0000DC  D008               	goto	l5915
  2676  0000DE  D7D1               	goto	l5903
  2677                           
  2678                           ;doprnt.c: 608: }
  2679                           ;doprnt.c: 635: switch(c = *f++) {
  2680  0000E0  D006               	goto	l5915
  2681                           
  2682                           ;doprnt.c: 638: goto alldone;
  2683                           
  2684                           ;doprnt.c: 637: case 0:
  2685  0000E2  D148               	goto	l723
  2686                           
  2687                           ;doprnt.c: 698: case 'i':
  2688                           ;doprnt.c: 699: break;
  2689                           
  2690                           ;doprnt.c: 697: case 'd':
  2691  0000E4  D01B               	goto	l686
  2692  0000E6                     l5911:
  2693                           
  2694                           ;doprnt.c: 721: flag |= 0x80;
  2695  0000E6  8E33               	bsf	printf@flag,7,c
  2696                           
  2697                           ;doprnt.c: 723: break;
  2698  0000E8  D019               	goto	l686
  2699                           
  2700                           ;doprnt.c: 813: continue;
  2701                           
  2702                           ;doprnt.c: 802: default:
  2703  0000EA  D136               	goto	l6013
  2704                           
  2705                           ;doprnt.c: 822: }
  2706  0000EC  D017               	goto	l686
  2707  0000EE                     l5915:
  2708  0000EE  C01B  FFF6         	movff	printf@f,tblptrl
  2709  0000F2  C01C  FFF7         	movff	printf@f+1,tblptrh
  2710  0000F6  4A1B               	infsnz	printf@f,f,c
  2711  0000F8  2A1C               	incf	printf@f+1,f,c
  2712  0000FA                     	if	0	;tblptru may be non-zero
  2713  0000FA                     	endif
  2714  0000FA                     	if	0	;tblptru may be non-zero
  2715  0000FA                     	endif
  2716  0000FA  0008               	tblrd		*
  2717  0000FC  CFF5 F036          	movff	tablat,printf@c
  2718  000100  5036               	movf	printf@c,w,c
  2719                           
  2720                           ; Switch size 1, requested type "space"
  2721                           ; Number of cases is 4, Range of values is 0 to 120
  2722                           ; switch strategies available:
  2723                           ; Name         Instructions Cycles
  2724                           ; simple_byte           13     7 (average)
  2725                           ;	Chosen strategy is simple_byte
  2726  000102  0A00               	xorlw	0	; case 0
  2727  000104  B4D8               	btfsc	status,2,c
  2728  000106  D136               	goto	l723
  2729  000108  0A64               	xorlw	100	; case 100
  2730  00010A  B4D8               	btfsc	status,2,c
  2731  00010C  D007               	goto	l686
  2732  00010E  0A0D               	xorlw	13	; case 105
  2733  000110  B4D8               	btfsc	status,2,c
  2734  000112  D004               	goto	l686
  2735  000114  0A11               	xorlw	17	; case 120
  2736  000116  B4D8               	btfsc	status,2,c
  2737  000118  D7E6               	goto	l5911
  2738  00011A  D11E               	goto	l6013
  2739  00011C                     l686:
  2740                           
  2741                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2742  00011C  BE33               	btfsc	printf@flag,7,c
  2743  00011E  D015               	goto	l5927
  2744                           
  2745                           ;doprnt.c: 1253: {
  2746                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2747  000120  C02E  FFD9         	movff	printf@ap,fsr2l
  2748  000124  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2749  000128  CFDE F031          	movff	postinc2,printf@val
  2750  00012C  CFDD F032          	movff	postdec2,printf@val+1
  2751  000130  0E02               	movlw	2
  2752  000132  262E               	addwf	printf@ap,f,c
  2753  000134  0E00               	movlw	0
  2754  000136  222F               	addwfc	printf@ap+1,f,c
  2755                           
  2756                           ;doprnt.c: 1261: if((int)val < 0) {
  2757  000138  AE32               	btfss	printf@val+1,7,c
  2758  00013A  D04E               	goto	l5961
  2759                           
  2760                           ;doprnt.c: 1262: flag |= 0x03;
  2761  00013C  0E03               	movlw	3
  2762  00013E  1233               	iorwf	printf@flag,f,c
  2763                           
  2764                           ;doprnt.c: 1263: val = -val;
  2765  000140  6C31               	negf	printf@val,c
  2766  000142  1E32               	comf	printf@val+1,f,c
  2767  000144  B0D8               	btfsc	status,0,c
  2768  000146  2A32               	incf	printf@val+1,f,c
  2769                           
  2770                           ;doprnt.c: 1264: }
  2771                           ;doprnt.c: 1266: }
  2772  000148  D047               	goto	l5961
  2773  00014A                     l5927:
  2774                           
  2775                           ;doprnt.c: 1268: else
  2776                           ;doprnt.c: 1273: {
  2777                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2778  00014A  C02E  FFD9         	movff	printf@ap,fsr2l
  2779  00014E  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2780  000152  CFDE F031          	movff	postinc2,printf@val
  2781  000156  CFDD F032          	movff	postdec2,printf@val+1
  2782  00015A  0E02               	movlw	2
  2783  00015C  262E               	addwf	printf@ap,f,c
  2784  00015E  0E00               	movlw	0
  2785  000160  222F               	addwfc	printf@ap+1,f,c
  2786                           
  2787                           ;doprnt.c: 1287: }
  2788                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2789  000162  D03A               	goto	l5961
  2790  000164                     l5931:
  2791                           
  2792                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2793  000164  0E01               	movlw	1
  2794  000166  6E36               	movwf	printf@c,c
  2795  000168                     l5933:
  2796  000168  0E05               	movlw	5
  2797  00016A  1836               	xorwf	printf@c,w,c
  2798  00016C  B4D8               	btfsc	status,2,c
  2799  00016E  D03D               	goto	l5963
  2800  000170  D001               	goto	l5937
  2801  000172  D03B               	goto	l5963
  2802  000174                     l5937:
  2803                           
  2804                           ;doprnt.c: 1306: if(val < dpowers[c])
  2805  000174  5036               	movf	printf@c,w,c
  2806  000176  0D02               	mullw	2
  2807  000178  0E1A               	movlw	low _dpowers
  2808  00017A  24F3               	addwf	prodl,w,c
  2809  00017C  6EF6               	movwf	tblptrl,c
  2810  00017E  0EFF               	movlw	high _dpowers
  2811  000180  20F4               	addwfc	prodh,w,c
  2812  000182  6EF7               	movwf	tblptrh,c
  2813  000184                     	if	0	;There are less than 3 active tblptr bytes
  2814  000184                     	endif
  2815  000184  0009               	tblrd		*+
  2816  000186  50F5               	movf	tablat,w,c
  2817  000188  5C31               	subwf	printf@val,w,c
  2818  00018A  0009               	tblrd		*+
  2819  00018C  50F5               	movf	tablat,w,c
  2820  00018E  5832               	subwfb	printf@val+1,w,c
  2821  000190  A0D8               	btfss	status,0,c
  2822  000192  D02B               	goto	l5963
  2823  000194  D001               	goto	l5941
  2824                           
  2825                           ;doprnt.c: 1307: break;
  2826  000196  D029               	goto	l5963
  2827  000198                     l5941:
  2828  000198  2A36               	incf	printf@c,f,c
  2829  00019A  D7E6               	goto	l5933
  2830                           
  2831                           ;doprnt.c: 1309: break;
  2832  00019C  D026               	goto	l5963
  2833  00019E                     l5945:
  2834                           
  2835                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2836  00019E  0E01               	movlw	1
  2837  0001A0  6E36               	movwf	printf@c,c
  2838  0001A2                     l5947:
  2839  0001A2  0E04               	movlw	4
  2840  0001A4  1836               	xorwf	printf@c,w,c
  2841  0001A6  B4D8               	btfsc	status,2,c
  2842  0001A8  D020               	goto	l5963
  2843  0001AA  D001               	goto	l5951
  2844  0001AC  D01E               	goto	l5963
  2845  0001AE                     l5951:
  2846                           
  2847                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2848  0001AE  5036               	movf	printf@c,w,c
  2849  0001B0  0D02               	mullw	2
  2850  0001B2  0E24               	movlw	low _hexpowers
  2851  0001B4  24F3               	addwf	prodl,w,c
  2852  0001B6  6EF6               	movwf	tblptrl,c
  2853  0001B8  0EFF               	movlw	high _hexpowers
  2854  0001BA  20F4               	addwfc	prodh,w,c
  2855  0001BC  6EF7               	movwf	tblptrh,c
  2856  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2857  0001BE                     	endif
  2858  0001BE  0009               	tblrd		*+
  2859  0001C0  50F5               	movf	tablat,w,c
  2860  0001C2  5C31               	subwf	printf@val,w,c
  2861  0001C4  0009               	tblrd		*+
  2862  0001C6  50F5               	movf	tablat,w,c
  2863  0001C8  5832               	subwfb	printf@val+1,w,c
  2864  0001CA  A0D8               	btfss	status,0,c
  2865  0001CC  D00E               	goto	l5963
  2866  0001CE  D001               	goto	l5955
  2867                           
  2868                           ;doprnt.c: 1318: break;
  2869  0001D0  D00C               	goto	l5963
  2870  0001D2                     l5955:
  2871  0001D2  2A36               	incf	printf@c,f,c
  2872  0001D4  D7E6               	goto	l5947
  2873                           
  2874                           ;doprnt.c: 1336: }
  2875                           
  2876                           ;doprnt.c: 1320: break;
  2877  0001D6  D009               	goto	l5963
  2878  0001D8                     l5961:
  2879  0001D8  5033               	movf	printf@flag,w,c
  2880  0001DA  0B80               	andlw	128
  2881                           
  2882                           ; Switch size 1, requested type "space"
  2883                           ; Number of cases is 2, Range of values is 0 to 128
  2884                           ; switch strategies available:
  2885                           ; Name         Instructions Cycles
  2886                           ; simple_byte            7     4 (average)
  2887                           ;	Chosen strategy is simple_byte
  2888  0001DC  0A00               	xorlw	0	; case 0
  2889  0001DE  B4D8               	btfsc	status,2,c
  2890  0001E0  D7C1               	goto	l5931
  2891  0001E2  0A80               	xorlw	128	; case 128
  2892  0001E4  B4D8               	btfsc	status,2,c
  2893  0001E6  D7DB               	goto	l5945
  2894  0001E8  D000               	goto	l5963
  2895  0001EA                     l5963:
  2896                           
  2897                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2898  0001EA  5034               	movf	printf@width,w,c
  2899  0001EC  1035               	iorwf	printf@width+1,w,c
  2900  0001EE  B4D8               	btfsc	status,2,c
  2901  0001F0  D00A               	goto	l5969
  2902  0001F2  C033  F029         	movff	printf@flag,??_printf
  2903  0001F6  0E03               	movlw	3
  2904  0001F8  1629               	andwf	??_printf,f,c
  2905  0001FA  B4D8               	btfsc	status,2,c
  2906  0001FC  D004               	goto	l5969
  2907                           
  2908                           ;doprnt.c: 1346: width--;
  2909  0001FE  0634               	decf	printf@width,f,c
  2910  000200  A0D8               	btfss	status,0,c
  2911  000202  0635               	decf	printf@width+1,f,c
  2912  000204  D000               	goto	l5969
  2913  000206                     l5969:
  2914                           
  2915                           ;doprnt.c: 1381: if(width > c)
  2916  000206  0E80               	movlw	128
  2917  000208  BE36               	btfsc	printf@c,7,c
  2918  00020A  0E7F               	movlw	127
  2919  00020C  6E29               	movwf	??_printf& (0+255),c
  2920  00020E  5034               	movf	printf@width,w,c
  2921  000210  5C36               	subwf	printf@c,w,c
  2922  000212  5035               	movf	printf@width+1,w,c
  2923  000214  0A80               	xorlw	128
  2924  000216  5829               	subwfb	??_printf& (0+255),w,c
  2925  000218  B0D8               	btfsc	status,0,c
  2926  00021A  D007               	goto	l5973
  2927                           
  2928                           ;doprnt.c: 1382: width -= c;
  2929  00021C  5036               	movf	printf@c,w,c
  2930  00021E  5E34               	subwf	printf@width,f,c
  2931  000220  0E00               	movlw	0
  2932  000222  BE36               	btfsc	printf@c,7,c
  2933  000224  0EFF               	movlw	255
  2934  000226  5A35               	subwfb	printf@width+1,f,c
  2935  000228  D005               	goto	l5975
  2936  00022A                     l5973:
  2937                           
  2938                           ;doprnt.c: 1383: else
  2939                           ;doprnt.c: 1384: width = 0;
  2940  00022A  0E00               	movlw	0
  2941  00022C  6E35               	movwf	printf@width+1,c
  2942  00022E  0E00               	movlw	0
  2943  000230  6E34               	movwf	printf@width,c
  2944  000232  D000               	goto	l5975
  2945  000234                     l5975:
  2946                           
  2947                           ;doprnt.c: 1387: if(flag & 0x04) {
  2948  000234  A433               	btfss	printf@flag,2,c
  2949  000236  D01A               	goto	l5987
  2950                           
  2951                           ;doprnt.c: 1392: if(flag & 0x03)
  2952  000238  C033  F029         	movff	printf@flag,??_printf
  2953  00023C  0E03               	movlw	3
  2954  00023E  1629               	andwf	??_printf,f,c
  2955  000240  B4D8               	btfsc	status,2,c
  2956  000242  D004               	goto	l5981
  2957                           
  2958                           ;doprnt.c: 1393: (putch('-') );
  2959  000244  0E2D               	movlw	45
  2960  000246  EC4C  F010         	call	_putch
  2961  00024A  D000               	goto	l5981
  2962  00024C                     l5981:
  2963                           
  2964                           ;doprnt.c: 1415: if(width)
  2965  00024C  5034               	movf	printf@width,w,c
  2966  00024E  1035               	iorwf	printf@width+1,w,c
  2967  000250  B4D8               	btfsc	status,2,c
  2968  000252  D026               	goto	l5997
  2969  000254                     l5983:
  2970                           
  2971                           ;doprnt.c: 1417: (putch('0') );
  2972  000254  0E30               	movlw	48
  2973  000256  EC4C  F010         	call	_putch
  2974                           
  2975                           ;doprnt.c: 1418: while(--width);
  2976  00025A  0634               	decf	printf@width,f,c
  2977  00025C  A0D8               	btfss	status,0,c
  2978  00025E  0635               	decf	printf@width+1,f,c
  2979  000260  5034               	movf	printf@width,w,c
  2980  000262  1035               	iorwf	printf@width+1,w,c
  2981  000264  B4D8               	btfsc	status,2,c
  2982  000266  D01C               	goto	l5997
  2983  000268  D7F5               	goto	l5983
  2984                           
  2985                           ;doprnt.c: 1420: } else
  2986  00026A  D01A               	goto	l5997
  2987  00026C                     l5987:
  2988                           
  2989                           ;doprnt.c: 1422: {
  2990                           ;doprnt.c: 1424: if(width
  2991                           ;doprnt.c: 1428: )
  2992  00026C  5034               	movf	printf@width,w,c
  2993  00026E  1035               	iorwf	printf@width+1,w,c
  2994  000270  B4D8               	btfsc	status,2,c
  2995  000272  D00C               	goto	l5993
  2996  000274                     l5989:
  2997                           
  2998                           ;doprnt.c: 1430: (putch(' ') );
  2999  000274  0E20               	movlw	32
  3000  000276  EC4C  F010         	call	_putch
  3001                           
  3002                           ;doprnt.c: 1431: while(--width);
  3003  00027A  0634               	decf	printf@width,f,c
  3004  00027C  A0D8               	btfss	status,0,c
  3005  00027E  0635               	decf	printf@width+1,f,c
  3006  000280  5034               	movf	printf@width,w,c
  3007  000282  1035               	iorwf	printf@width+1,w,c
  3008  000284  B4D8               	btfsc	status,2,c
  3009  000286  D002               	goto	l5993
  3010  000288  D7F5               	goto	l5989
  3011  00028A  D000               	goto	l5993
  3012  00028C                     l5993:
  3013                           
  3014                           ;doprnt.c: 1438: if(flag & 0x03)
  3015  00028C  C033  F029         	movff	printf@flag,??_printf
  3016  000290  0E03               	movlw	3
  3017  000292  1629               	andwf	??_printf,f,c
  3018  000294  B4D8               	btfsc	status,2,c
  3019  000296  D004               	goto	l5997
  3020                           
  3021                           ;doprnt.c: 1439: (putch('-') );
  3022  000298  0E2D               	movlw	45
  3023  00029A  EC4C  F010         	call	_putch
  3024  00029E  D000               	goto	l5997
  3025  0002A0                     l5997:
  3026                           
  3027                           ;doprnt.c: 1469: }
  3028                           ;doprnt.c: 1472: prec = c;
  3029  0002A0  C036  F030         	movff	printf@c,printf@prec
  3030                           
  3031                           ;doprnt.c: 1474: while(prec--) {
  3032  0002A4  D053               	goto	l6011
  3033                           
  3034                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3035  0002A6  D045               	goto	l6007
  3036  0002A8                     l5999:
  3037                           
  3038                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3039  0002A8  5030               	movf	printf@prec,w,c
  3040  0002AA  0D02               	mullw	2
  3041  0002AC  0E1A               	movlw	low _dpowers
  3042  0002AE  24F3               	addwf	prodl,w,c
  3043  0002B0  6EF6               	movwf	tblptrl,c
  3044  0002B2  0EFF               	movlw	high _dpowers
  3045  0002B4  20F4               	addwfc	prodh,w,c
  3046  0002B6  6EF7               	movwf	tblptrh,c
  3047  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  3048  0002B8                     	endif
  3049  0002B8  0009               	tblrd		*+
  3050  0002BA  CFF5 F011          	movff	tablat,___lwdiv@divisor
  3051  0002BE  000A               	tblrd		*-
  3052  0002C0  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  3053  0002C4  C031  F00F         	movff	printf@val,___lwdiv@dividend
  3054  0002C8  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  3055  0002CC  EC7B  F00D         	call	___lwdiv	;wreg free
  3056  0002D0  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  3057  0002D4  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  3058  0002D8  0E00               	movlw	0
  3059  0002DA  6E19               	movwf	___lwmod@divisor+1,c
  3060  0002DC  0E0A               	movlw	10
  3061  0002DE  6E18               	movwf	___lwmod@divisor,c
  3062  0002E0  ECF9  F00D         	call	___lwmod	;wreg free
  3063  0002E4  5016               	movf	?___lwmod,w,c
  3064  0002E6  0F30               	addlw	48
  3065  0002E8  6E36               	movwf	printf@c,c
  3066                           
  3067                           ;doprnt.c: 1491: break;
  3068  0002EA  D02C               	goto	l6009
  3069  0002EC                     l6001:
  3070                           
  3071                           ;doprnt.c: 1499: {
  3072                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3073  0002EC  C031  F00F         	movff	printf@val,___lwdiv@dividend
  3074  0002F0  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  3075  0002F4  5030               	movf	printf@prec,w,c
  3076  0002F6  0D02               	mullw	2
  3077  0002F8  0E24               	movlw	low _hexpowers
  3078  0002FA  24F3               	addwf	prodl,w,c
  3079  0002FC  6EF6               	movwf	tblptrl,c
  3080  0002FE  0EFF               	movlw	high _hexpowers
  3081  000300  20F4               	addwfc	prodh,w,c
  3082  000302  6EF7               	movwf	tblptrh,c
  3083  000304                     	if	0	;There are less than 3 active tblptr bytes
  3084  000304                     	endif
  3085  000304  0009               	tblrd		*+
  3086  000306  CFF5 F011          	movff	tablat,___lwdiv@divisor
  3087  00030A  000A               	tblrd		*-
  3088  00030C  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  3089  000310  EC7B  F00D         	call	___lwdiv	;wreg free
  3090  000314  500F               	movf	?___lwdiv,w,c
  3091  000316  0B0F               	andlw	15
  3092  000318  6E2D               	movwf	printf@idx,c
  3093                           
  3094                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3095  00031A  502D               	movf	printf@idx,w,c
  3096  00031C  0D01               	mullw	1
  3097  00031E  0E9F               	movlw	low STR_24
  3098  000320  24F3               	addwf	prodl,w,c
  3099  000322  6EF6               	movwf	tblptrl,c
  3100  000324  0EFF               	movlw	high STR_24
  3101  000326  20F4               	addwfc	prodh,w,c
  3102  000328  6EF7               	movwf	tblptrh,c
  3103  00032A                     	if	0	;There are less than 3 active tblptr bytes
  3104  00032A                     	endif
  3105  00032A  0008               	tblrd		*
  3106  00032C  CFF5 F036          	movff	tablat,printf@c
  3107                           
  3108                           ;doprnt.c: 1523: }
  3109                           
  3110                           ;doprnt.c: 1508: }
  3111                           ;doprnt.c: 1510: break;
  3112  000330  D009               	goto	l6009
  3113  000332                     l6007:
  3114  000332  5033               	movf	printf@flag,w,c
  3115  000334  0B80               	andlw	128
  3116                           
  3117                           ; Switch size 1, requested type "space"
  3118                           ; Number of cases is 2, Range of values is 0 to 128
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; simple_byte            7     4 (average)
  3122                           ;	Chosen strategy is simple_byte
  3123  000336  0A00               	xorlw	0	; case 0
  3124  000338  B4D8               	btfsc	status,2,c
  3125  00033A  D7B6               	goto	l5999
  3126  00033C  0A80               	xorlw	128	; case 128
  3127  00033E  B4D8               	btfsc	status,2,c
  3128  000340  D7D5               	goto	l6001
  3129  000342  D000               	goto	l6009
  3130  000344                     l6009:
  3131                           
  3132                           ;doprnt.c: 1524: (putch(c) );
  3133  000344  5036               	movf	printf@c,w,c
  3134  000346  EC4C  F010         	call	_putch
  3135  00034A  D000               	goto	l6011
  3136  00034C                     l6011:
  3137  00034C  0630               	decf	printf@prec,f,c
  3138  00034E  2830               	incf	printf@prec,w,c
  3139  000350  B4D8               	btfsc	status,2,c
  3140  000352  D002               	goto	l6013
  3141  000354  D7EE               	goto	l6007
  3142  000356  D000               	goto	l6013
  3143  000358                     l6013:
  3144  000358  C01B  FFF6         	movff	printf@f,tblptrl
  3145  00035C  C01C  FFF7         	movff	printf@f+1,tblptrh
  3146  000360  4A1B               	infsnz	printf@f,f,c
  3147  000362  2A1C               	incf	printf@f+1,f,c
  3148  000364                     	if	0	;tblptru may be non-zero
  3149  000364                     	endif
  3150  000364                     	if	0	;tblptru may be non-zero
  3151  000364                     	endif
  3152  000364  0008               	tblrd		*
  3153  000366  CFF5 F036          	movff	tablat,printf@c
  3154  00036A  5036               	movf	printf@c,w,c
  3155  00036C  B4D8               	btfsc	status,2,c
  3156  00036E  D002               	goto	l723
  3157  000370  D65A               	goto	l5887
  3158  000372  D000               	goto	l723
  3159  000374                     l723:
  3160  000374  0012               	return		;funcret
  3161  000376                     __end_of_printf:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           prodh	equ	0xFF4
  3168                           prodl	equ	0xFF3
  3169                           intcon	equ	0xFF2
  3170                           intcon2	equ	0xFF1
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           postdec1	equ	0xFE5
  3174                           fsr1l	equ	0xFE1
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _putch *****************
  3182 ;; Defined at:
  3183 ;;		line 74 in file "Lab12_ex.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  c               1    wreg     unsigned char 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  c               1   14[COMRAM] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;		None               void
  3190 ;; Registers used:
  3191 ;;		wreg
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        1 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_printf
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text2
  3212  002098                     __ptext2:
  3213                           	opt stack 0
  3214  002098                     _putch:
  3215                           	opt stack 28
  3216                           
  3217                           ;incstack = 0
  3218                           ;putch@c stored from wreg
  3219  002098  6E0F               	movwf	putch@c,c
  3220                           
  3221                           ;Lab12_ex.c: 76: while (!TRMT);
  3222  00209A  D000               	goto	l570
  3223  00209C                     l570:
  3224  00209C  A2AC               	btfss	4012,1,c	;volatile
  3225  00209E  D7FE               	goto	l570
  3226                           
  3227                           ;Lab12_ex.c: 77: TXREG = c;
  3228  0020A0  C00F  FFAD         	movff	putch@c,4013	;volatile
  3229  0020A4  0012               	return		;funcret
  3230  0020A6                     __end_of_putch:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           intcon2	equ	0xFF1
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           postdec1	equ	0xFE5
  3243                           fsr1l	equ	0xFE1
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _isdigit *****************
  3251 ;; Defined at:
  3252 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  c               1    wreg     unsigned char 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  c               1   16[COMRAM] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;		None               void
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;Total ram usage:        3 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    1
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_printf
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text3
  3281  001F5C                     __ptext3:
  3282                           	opt stack 0
  3283  001F5C                     _isdigit:
  3284                           	opt stack 28
  3285                           
  3286                           ;incstack = 0
  3287                           ;isdigit@c stored from wreg
  3288  001F5C  6E11               	movwf	isdigit@c,c
  3289  001F5E  0E00               	movlw	0
  3290  001F60  6E10               	movwf	_isdigit$1989,c
  3291  001F62  0E3A               	movlw	58
  3292  001F64  6011               	cpfslt	isdigit@c,c
  3293  001F66  D006               	goto	l5421
  3294  001F68  0E2F               	movlw	47
  3295  001F6A  6411               	cpfsgt	isdigit@c,c
  3296  001F6C  D003               	goto	l5421
  3297  001F6E  0E01               	movlw	1
  3298  001F70  6E10               	movwf	_isdigit$1989,c
  3299  001F72  D000               	goto	l5421
  3300  001F74                     l5421:
  3301  001F74  C010  F00F         	movff	_isdigit$1989,??_isdigit
  3302  001F78  300F               	rrcf	??_isdigit,w,c
  3303  001F7A  D000               	goto	l1190
  3304  001F7C                     l1190:
  3305  001F7C  0012               	return		;funcret
  3306  001F7E                     __end_of_isdigit:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           intcon2	equ	0xFF1
  3316                           postinc0	equ	0xFEE
  3317                           wreg	equ	0xFE8
  3318                           postdec1	equ	0xFE5
  3319                           fsr1l	equ	0xFE1
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function ___lwmod *****************
  3327 ;; Defined at:
  3328 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  dividend        2   21[COMRAM] unsigned int 
  3331 ;;  divisor         2   23[COMRAM] unsigned int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  counter         1   25[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  2   21[COMRAM] unsigned int 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:        5 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    1
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_printf
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text4
  3358  001BF2                     __ptext4:
  3359                           	opt stack 0
  3360  001BF2                     ___lwmod:
  3361                           	opt stack 28
  3362                           
  3363                           ;incstack = 0
  3364  001BF2  5018               	movf	___lwmod@divisor,w,c
  3365  001BF4  1019               	iorwf	___lwmod@divisor+1,w,c
  3366  001BF6  B4D8               	btfsc	status,2,c
  3367  001BF8  D01D               	goto	l1292
  3368  001BFA  0E01               	movlw	1
  3369  001BFC  6E1A               	movwf	___lwmod@counter,c
  3370  001BFE  D005               	goto	l5677
  3371  001C00                     l5675:
  3372  001C00  90D8               	bcf	status,0,c
  3373  001C02  3618               	rlcf	___lwmod@divisor,f,c
  3374  001C04  3619               	rlcf	___lwmod@divisor+1,f,c
  3375  001C06  2A1A               	incf	___lwmod@counter,f,c
  3376  001C08  D000               	goto	l5677
  3377  001C0A                     l5677:
  3378  001C0A  BE19               	btfsc	___lwmod@divisor+1,7,c
  3379  001C0C  D002               	goto	l5679
  3380  001C0E  D7F8               	goto	l5675
  3381  001C10  D000               	goto	l5679
  3382  001C12                     l5679:
  3383  001C12  5018               	movf	___lwmod@divisor,w,c
  3384  001C14  5C16               	subwf	___lwmod@dividend,w,c
  3385  001C16  5019               	movf	___lwmod@divisor+1,w,c
  3386  001C18  5817               	subwfb	___lwmod@dividend+1,w,c
  3387  001C1A  A0D8               	btfss	status,0,c
  3388  001C1C  D005               	goto	l5683
  3389  001C1E  5018               	movf	___lwmod@divisor,w,c
  3390  001C20  5E16               	subwf	___lwmod@dividend,f,c
  3391  001C22  5019               	movf	___lwmod@divisor+1,w,c
  3392  001C24  5A17               	subwfb	___lwmod@dividend+1,f,c
  3393  001C26  D000               	goto	l5683
  3394  001C28                     l5683:
  3395  001C28  90D8               	bcf	status,0,c
  3396  001C2A  3219               	rrcf	___lwmod@divisor+1,f,c
  3397  001C2C  3218               	rrcf	___lwmod@divisor,f,c
  3398  001C2E  2E1A               	decfsz	___lwmod@counter,f,c
  3399  001C30  D7F0               	goto	l5679
  3400  001C32  D000               	goto	l1292
  3401  001C34                     l1292:
  3402  001C34  C016  F016         	movff	___lwmod@dividend,?___lwmod
  3403  001C38  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  3404  001C3C  0012               	return		;funcret
  3405  001C3E                     __end_of___lwmod:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon	equ	0xFF2
  3414                           intcon2	equ	0xFF1
  3415                           postinc0	equ	0xFEE
  3416                           wreg	equ	0xFE8
  3417                           postdec1	equ	0xFE5
  3418                           fsr1l	equ	0xFE1
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function ___lwdiv *****************
  3426 ;; Defined at:
  3427 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  dividend        2   14[COMRAM] unsigned int 
  3430 ;;  divisor         2   16[COMRAM] unsigned int 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  quotient        2   19[COMRAM] unsigned int 
  3433 ;;  counter         1   18[COMRAM] unsigned char 
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  2   14[COMRAM] unsigned int 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        7 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    1
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_printf
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text5
  3458  001AF6                     __ptext5:
  3459                           	opt stack 0
  3460  001AF6                     ___lwdiv:
  3461                           	opt stack 28
  3462                           
  3463                           ;incstack = 0
  3464  001AF6  0E00               	movlw	0
  3465  001AF8  6E15               	movwf	___lwdiv@quotient+1,c
  3466  001AFA  0E00               	movlw	0
  3467  001AFC  6E14               	movwf	___lwdiv@quotient,c
  3468  001AFE  5011               	movf	___lwdiv@divisor,w,c
  3469  001B00  1012               	iorwf	___lwdiv@divisor+1,w,c
  3470  001B02  B4D8               	btfsc	status,2,c
  3471  001B04  D021               	goto	l1282
  3472  001B06  0E01               	movlw	1
  3473  001B08  6E13               	movwf	___lwdiv@counter,c
  3474  001B0A  D005               	goto	l5657
  3475  001B0C                     l5655:
  3476  001B0C  90D8               	bcf	status,0,c
  3477  001B0E  3611               	rlcf	___lwdiv@divisor,f,c
  3478  001B10  3612               	rlcf	___lwdiv@divisor+1,f,c
  3479  001B12  2A13               	incf	___lwdiv@counter,f,c
  3480  001B14  D000               	goto	l5657
  3481  001B16                     l5657:
  3482  001B16  BE12               	btfsc	___lwdiv@divisor+1,7,c
  3483  001B18  D002               	goto	l5659
  3484  001B1A  D7F8               	goto	l5655
  3485  001B1C  D000               	goto	l5659
  3486  001B1E                     l5659:
  3487  001B1E  90D8               	bcf	status,0,c
  3488  001B20  3614               	rlcf	___lwdiv@quotient,f,c
  3489  001B22  3615               	rlcf	___lwdiv@quotient+1,f,c
  3490  001B24  5011               	movf	___lwdiv@divisor,w,c
  3491  001B26  5C0F               	subwf	___lwdiv@dividend,w,c
  3492  001B28  5012               	movf	___lwdiv@divisor+1,w,c
  3493  001B2A  5810               	subwfb	___lwdiv@dividend+1,w,c
  3494  001B2C  A0D8               	btfss	status,0,c
  3495  001B2E  D006               	goto	l5667
  3496  001B30  5011               	movf	___lwdiv@divisor,w,c
  3497  001B32  5E0F               	subwf	___lwdiv@dividend,f,c
  3498  001B34  5012               	movf	___lwdiv@divisor+1,w,c
  3499  001B36  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3500  001B38  8014               	bsf	___lwdiv@quotient,0,c
  3501  001B3A  D000               	goto	l5667
  3502  001B3C                     l5667:
  3503  001B3C  90D8               	bcf	status,0,c
  3504  001B3E  3212               	rrcf	___lwdiv@divisor+1,f,c
  3505  001B40  3211               	rrcf	___lwdiv@divisor,f,c
  3506  001B42  2E13               	decfsz	___lwdiv@counter,f,c
  3507  001B44  D7EC               	goto	l5659
  3508  001B46  D000               	goto	l1282
  3509  001B48                     l1282:
  3510  001B48  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3511  001B4C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3512  001B50  0012               	return		;funcret
  3513  001B52                     __end_of___lwdiv:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           intcon2	equ	0xFF1
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1l	equ	0xFE1
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _get_RPM *****************
  3534 ;; Defined at:
  3535 ;;		line 44 in file "Fan_Support.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  RPS             2   30[COMRAM] int 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  2   28[COMRAM] int 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        4 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    2
  3556 ;; This function calls:
  3557 ;;		___awdiv
  3558 ;;		___wmul
  3559 ;; This function is called by:
  3560 ;;		_main
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text6
  3565  001D18                     __ptext6:
  3566                           	opt stack 0
  3567  001D18                     _get_RPM:
  3568                           	opt stack 28
  3569                           
  3570                           ;Fan_Support.c: 46: int RPS = TMR3L / 2;
  3571                           
  3572                           ;incstack = 0
  3573  001D18  CFB2 F015          	movff	4018,___awdiv@dividend	;volatile
  3574  001D1C  6A16               	clrf	___awdiv@dividend+1,c
  3575  001D1E  0E00               	movlw	0
  3576  001D20  6E18               	movwf	___awdiv@divisor+1,c
  3577  001D22  0E02               	movlw	2
  3578  001D24  6E17               	movwf	___awdiv@divisor,c
  3579  001D26  EC93  F00B         	call	___awdiv	;wreg free
  3580  001D2A  C015  F01F         	movff	?___awdiv,get_RPM@RPS
  3581  001D2E  C016  F020         	movff	?___awdiv+1,get_RPM@RPS+1
  3582                           
  3583                           ;Fan_Support.c: 48: TMR3L = 0;
  3584  001D32  0E00               	movlw	0
  3585  001D34  6EB2               	movwf	4018,c	;volatile
  3586                           
  3587                           ;Fan_Support.c: 49: return (RPS * 60);
  3588  001D36  C01F  F00F         	movff	get_RPM@RPS,___wmul@multiplier
  3589  001D3A  C020  F010         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3590  001D3E  0E00               	movlw	0
  3591  001D40  6E12               	movwf	___wmul@multiplicand+1,c
  3592  001D42  0E3C               	movlw	60
  3593  001D44  6E11               	movwf	___wmul@multiplicand,c
  3594  001D46  EC87  F00F         	call	___wmul	;wreg free
  3595  001D4A  C00F  F01D         	movff	?___wmul,?_get_RPM
  3596  001D4E  C010  F01E         	movff	?___wmul+1,?_get_RPM+1
  3597  001D52  D000               	goto	l372
  3598  001D54                     l372:
  3599  001D54  0012               	return		;funcret
  3600  001D56                     __end_of_get_RPM:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           intcon2	equ	0xFF1
  3610                           postinc0	equ	0xFEE
  3611                           wreg	equ	0xFE8
  3612                           postdec1	equ	0xFE5
  3613                           fsr1l	equ	0xFE1
  3614                           postinc2	equ	0xFDE
  3615                           postdec2	equ	0xFDD
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function _do_update_pwm *****************
  3621 ;; Defined at:
  3622 ;;		line 79 in file "Fan_Support.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  duty_cycle      1    wreg     unsigned char 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  duty_cycle      1   62[COMRAM] unsigned char 
  3627 ;;  dc_f            3   59[COMRAM] float 
  3628 ;;  dc_I            2   63[COMRAM] int 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;		None               void
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;Total ram usage:        9 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    3
  3645 ;; This function calls:
  3646 ;;		___ftdiv
  3647 ;;		___ftmul
  3648 ;;		___fttol
  3649 ;;		___lbtoft
  3650 ;; This function is called by:
  3651 ;;		_main
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text7
  3656  001670                     __ptext7:
  3657                           	opt stack 0
  3658  001670                     _do_update_pwm:
  3659                           	opt stack 27
  3660                           
  3661                           ;incstack = 0
  3662                           ;do_update_pwm@duty_cycle stored from wreg
  3663  001670  6E3F               	movwf	do_update_pwm@duty_cycle,c
  3664                           
  3665                           ;Fan_Support.c: 81: float dc_f;
  3666                           ;Fan_Support.c: 82: int dc_I;
  3667                           ;Fan_Support.c: 83: PR2 = 0b00000100 ;
  3668  001672  0E04               	movlw	4
  3669  001674  6ECB               	movwf	4043,c	;volatile
  3670                           
  3671                           ;Fan_Support.c: 84: T2CON = 0b00000111 ;
  3672  001676  0E07               	movlw	7
  3673  001678  6ECA               	movwf	4042,c	;volatile
  3674                           
  3675                           ;Fan_Support.c: 85: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  3676  00167A  0E00               	movlw	0
  3677  00167C  6E1E               	movwf	___ftmul@f2,c
  3678  00167E  0E80               	movlw	128
  3679  001680  6E1F               	movwf	___ftmul@f2+1,c
  3680  001682  0E40               	movlw	64
  3681  001684  6E20               	movwf	___ftmul@f2+2,c
  3682  001686  503F               	movf	do_update_pwm@duty_cycle,w,c
  3683  001688  EC9B  F00F         	call	___lbtoft
  3684  00168C  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  3685  001690  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  3686  001694  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  3687  001698  EC8E  F008         	call	___ftmul	;wreg free
  3688  00169C  C01B  F02A         	movff	?___ftmul,___ftdiv@f1
  3689  0016A0  C01C  F02B         	movff	?___ftmul+1,___ftdiv@f1+1
  3690  0016A4  C01D  F02C         	movff	?___ftmul+2,___ftdiv@f1+2
  3691  0016A8  0E00               	movlw	0
  3692  0016AA  6E2D               	movwf	___ftdiv@f2,c
  3693  0016AC  0EA0               	movlw	160
  3694  0016AE  6E2E               	movwf	___ftdiv@f2+1,c
  3695  0016B0  0E41               	movlw	65
  3696  0016B2  6E2F               	movwf	___ftdiv@f2+2,c
  3697  0016B4  ECF6  F009         	call	___ftdiv	;wreg free
  3698  0016B8  C02A  F03C         	movff	?___ftdiv,do_update_pwm@dc_f
  3699  0016BC  C02B  F03D         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  3700  0016C0  C02C  F03E         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  3701                           
  3702                           ;Fan_Support.c: 87: dc_I = (int) dc_f;
  3703  0016C4  C03C  F00F         	movff	do_update_pwm@dc_f,___fttol@f1
  3704  0016C8  C03D  F010         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  3705  0016CC  C03E  F011         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  3706  0016D0  EC83  F009         	call	___fttol	;wreg free
  3707  0016D4  C00F  F040         	movff	?___fttol,do_update_pwm@dc_I
  3708  0016D8  C010  F041         	movff	?___fttol+1,do_update_pwm@dc_I+1
  3709                           
  3710                           ;Fan_Support.c: 88: if (dc_I > duty_cycle) dc_I++;
  3711  0016DC  503F               	movf	do_update_pwm@duty_cycle,w,c
  3712  0016DE  6E39               	movwf	??_do_update_pwm& (0+255),c
  3713  0016E0  6A3A               	clrf	(??_do_update_pwm+1)& (0+255),c
  3714  0016E2  5040               	movf	do_update_pwm@dc_I,w,c
  3715  0016E4  5C39               	subwf	??_do_update_pwm,w,c
  3716  0016E6  503A               	movf	??_do_update_pwm+1,w,c
  3717  0016E8  0A80               	xorlw	128
  3718  0016EA  6E3B               	movwf	(??_do_update_pwm+2)& (0+255),c
  3719  0016EC  5041               	movf	do_update_pwm@dc_I+1,w,c
  3720  0016EE  0A80               	xorlw	128
  3721  0016F0  583B               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  3722  0016F2  B0D8               	btfsc	status,0,c
  3723  0016F4  D003               	goto	l5809
  3724  0016F6  4A40               	infsnz	do_update_pwm@dc_I,f,c
  3725  0016F8  2A41               	incf	do_update_pwm@dc_I+1,f,c
  3726  0016FA  D000               	goto	l5809
  3727  0016FC                     l5809:
  3728                           
  3729                           ;Fan_Support.c: 89: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  3730  0016FC  C040  F039         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3731  001700  0E03               	movlw	3
  3732  001702  1639               	andwf	??_do_update_pwm,f,c
  3733  001704  3839               	swapf	??_do_update_pwm,w,c
  3734  001706  0BF0               	andlw	240
  3735  001708  090C               	iorlw	12
  3736  00170A  6EBD               	movwf	4029,c	;volatile
  3737                           
  3738                           ;Fan_Support.c: 90: CCPR1L = (dc_I) >> 2;
  3739  00170C  C040  F039         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3740  001710  C041  F03A         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  3741  001714  343A               	rlcf	??_do_update_pwm+1,w,c
  3742  001716  323A               	rrcf	??_do_update_pwm+1,f,c
  3743  001718  3239               	rrcf	??_do_update_pwm,f,c
  3744  00171A  343A               	rlcf	??_do_update_pwm+1,w,c
  3745  00171C  323A               	rrcf	??_do_update_pwm+1,f,c
  3746  00171E  3239               	rrcf	??_do_update_pwm,f,c
  3747  001720  5039               	movf	??_do_update_pwm,w,c
  3748  001722  6EBE               	movwf	4030,c	;volatile
  3749  001724  0012               	return		;funcret
  3750  001726                     __end_of_do_update_pwm:
  3751                           	opt stack 0
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           intcon2	equ	0xFF1
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           postdec1	equ	0xFE5
  3763                           fsr1l	equ	0xFE1
  3764                           postinc2	equ	0xFDE
  3765                           postdec2	equ	0xFDD
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function ___lbtoft *****************
  3771 ;; Defined at:
  3772 ;;		line 27 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  c               1    wreg     unsigned char 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  c               1   25[COMRAM] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  3   22[COMRAM] float 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3786 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;Total ram usage:        4 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    2
  3793 ;; This function calls:
  3794 ;;		___ftpack
  3795 ;; This function is called by:
  3796 ;;		_do_update_pwm
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text8
  3801  001F36                     __ptext8:
  3802                           	opt stack 0
  3803  001F36                     ___lbtoft:
  3804                           	opt stack 27
  3805                           
  3806                           ;incstack = 0
  3807                           ;___lbtoft@c stored from wreg
  3808  001F36  6E1A               	movwf	___lbtoft@c,c
  3809  001F38  501A               	movf	___lbtoft@c,w,c
  3810  001F3A  6E0F               	movwf	___ftpack@arg,c
  3811  001F3C  6A10               	clrf	___ftpack@arg+1,c
  3812  001F3E  6A11               	clrf	___ftpack@arg+2,c
  3813  001F40  0E8E               	movlw	142
  3814  001F42  6E12               	movwf	___ftpack@exp,c
  3815  001F44  0E00               	movlw	0
  3816  001F46  6E13               	movwf	___ftpack@sign,c
  3817  001F48  ECD5  F00A         	call	___ftpack	;wreg free
  3818  001F4C  C00F  F017         	movff	?___ftpack,?___lbtoft
  3819  001F50  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  3820  001F54  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  3821  001F58  D000               	goto	l1216
  3822  001F5A                     l1216:
  3823  001F5A  0012               	return		;funcret
  3824  001F5C                     __end_of___lbtoft:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           prodh	equ	0xFF4
  3831                           prodl	equ	0xFF3
  3832                           intcon	equ	0xFF2
  3833                           intcon2	equ	0xFF1
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           fsr1l	equ	0xFE1
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function ___fttol *****************
  3845 ;; Defined at:
  3846 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  f1              3   14[COMRAM] float 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  lval            4   24[COMRAM] unsigned long 
  3851 ;;  exp1            1   28[COMRAM] unsigned char 
  3852 ;;  sign1           1   23[COMRAM] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  4   14[COMRAM] long 
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;Total ram usage:       15 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    1
  3869 ;; This function calls:
  3870 ;;		Nothing
  3871 ;; This function is called by:
  3872 ;;		_do_update_pwm
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text9
  3877  001306                     __ptext9:
  3878                           	opt stack 0
  3879  001306                     ___fttol:
  3880                           	opt stack 28
  3881                           
  3882                           ;incstack = 0
  3883  001306  C011  F013         	movff	___fttol@f1+2,??___fttol
  3884  00130A  6A14               	clrf	(??___fttol+1)& (0+255),c
  3885  00130C  6A15               	clrf	(??___fttol+2)& (0+255),c
  3886  00130E  3410               	rlcf	___fttol@f1+1,w,c
  3887  001310  3613               	rlcf	??___fttol& (0+255),f,c
  3888  001312  E301               	bnc	u4211
  3889  001314  8014               	bsf	(??___fttol+1)& (0+255),0,c
  3890  001316                     u4211:
  3891  001316  5013               	movf	??___fttol,w,c
  3892  001318  6E1D               	movwf	___fttol@exp1,c
  3893  00131A  501D               	movf	___fttol@exp1,w,c
  3894  00131C  A4D8               	btfss	status,2,c
  3895  00131E  D002               	goto	l5605
  3896  001320  D039               	goto	l5629
  3897  001322  D063               	goto	l1175
  3898  001324                     l5605:
  3899  001324  0E17               	movlw	23
  3900  001326  6E13               	movwf	??___fttol& (0+255),c
  3901  001328  C00F  F014         	movff	___fttol@f1,??___fttol+1
  3902  00132C  C010  F015         	movff	___fttol@f1+1,??___fttol+2
  3903  001330  C011  F016         	movff	___fttol@f1+2,??___fttol+3
  3904  001334  2813               	incf	??___fttol,w,c
  3905  001336  6E17               	movwf	(??___fttol+4)& (0+255),c
  3906  001338  D004               	goto	u4230
  3907  00133A                     u4235:
  3908  00133A  90D8               	bcf	status,0,c
  3909  00133C  3216               	rrcf	??___fttol+3,f,c
  3910  00133E  3215               	rrcf	??___fttol+2,f,c
  3911  001340  3214               	rrcf	??___fttol+1,f,c
  3912  001342                     u4230:
  3913  001342  2E17               	decfsz	(??___fttol+4)& (0+255),f,c
  3914  001344  D7FA               	goto	u4235
  3915  001346  5014               	movf	??___fttol+1,w,c
  3916  001348  6E18               	movwf	___fttol@sign1,c
  3917  00134A  8E10               	bsf	___fttol@f1+1,7,c
  3918  00134C  0EFF               	movlw	255
  3919  00134E  160F               	andwf	___fttol@f1,f,c
  3920  001350  0EFF               	movlw	255
  3921  001352  1610               	andwf	___fttol@f1+1,f,c
  3922  001354  0E00               	movlw	0
  3923  001356  1611               	andwf	___fttol@f1+2,f,c
  3924  001358  500F               	movf	___fttol@f1,w,c
  3925  00135A  6E19               	movwf	___fttol@lval,c
  3926  00135C  5010               	movf	___fttol@f1+1,w,c
  3927  00135E  6E1A               	movwf	___fttol@lval+1,c
  3928  001360  5011               	movf	___fttol@f1+2,w,c
  3929  001362  6E1B               	movwf	___fttol@lval+2,c
  3930  001364  6A1C               	clrf	___fttol@lval+3,c
  3931  001366  0E8E               	movlw	142
  3932  001368  5E1D               	subwf	___fttol@exp1,f,c
  3933  00136A  AE1D               	btfss	___fttol@exp1,7,c
  3934  00136C  D010               	goto	l5627
  3935  00136E  501D               	movf	___fttol@exp1,w,c
  3936  001370  0A80               	xorlw	128
  3937  001372  0F8F               	addlw	143
  3938  001374  B0D8               	btfsc	status,0,c
  3939  001376  D003               	goto	l5623
  3940  001378  D00D               	goto	l5629
  3941  00137A  D037               	goto	l1175
  3942  00137C  D000               	goto	l5623
  3943  00137E                     l5623:
  3944  00137E  90D8               	bcf	status,0,c
  3945  001380  321C               	rrcf	___fttol@lval+3,f,c
  3946  001382  321B               	rrcf	___fttol@lval+2,f,c
  3947  001384  321A               	rrcf	___fttol@lval+1,f,c
  3948  001386  3219               	rrcf	___fttol@lval,f,c
  3949  001388  3E1D               	incfsz	___fttol@exp1,f,c
  3950  00138A  D7F9               	goto	l5623
  3951  00138C  D019               	goto	l5637
  3952  00138E                     l5627:
  3953  00138E  0E17               	movlw	23
  3954  001390  641D               	cpfsgt	___fttol@exp1,c
  3955  001392  D011               	goto	l5635
  3956  001394                     l5629:
  3957  001394  0E00               	movlw	0
  3958  001396  6E0F               	movwf	?___fttol,c
  3959  001398  0E00               	movlw	0
  3960  00139A  6E10               	movwf	?___fttol+1,c
  3961  00139C  0E00               	movlw	0
  3962  00139E  6E11               	movwf	?___fttol+2,c
  3963  0013A0  0E00               	movlw	0
  3964  0013A2  6E12               	movwf	?___fttol+3,c
  3965  0013A4  D022               	goto	l1175
  3966  0013A6  D007               	goto	l5635
  3967  0013A8                     l5633:
  3968  0013A8  90D8               	bcf	status,0,c
  3969  0013AA  3619               	rlcf	___fttol@lval,f,c
  3970  0013AC  361A               	rlcf	___fttol@lval+1,f,c
  3971  0013AE  361B               	rlcf	___fttol@lval+2,f,c
  3972  0013B0  361C               	rlcf	___fttol@lval+3,f,c
  3973  0013B2  061D               	decf	___fttol@exp1,f,c
  3974  0013B4  D000               	goto	l5635
  3975  0013B6                     l5635:
  3976  0013B6  501D               	movf	___fttol@exp1,w,c
  3977  0013B8  B4D8               	btfsc	status,2,c
  3978  0013BA  D002               	goto	l5637
  3979  0013BC  D7F5               	goto	l5633
  3980  0013BE  D000               	goto	l5637
  3981  0013C0                     l5637:
  3982  0013C0  5018               	movf	___fttol@sign1,w,c
  3983  0013C2  B4D8               	btfsc	status,2,c
  3984  0013C4  D009               	goto	l5641
  3985  0013C6  1E1C               	comf	___fttol@lval+3,f,c
  3986  0013C8  1E1B               	comf	___fttol@lval+2,f,c
  3987  0013CA  1E1A               	comf	___fttol@lval+1,f,c
  3988  0013CC  6C19               	negf	___fttol@lval,c
  3989  0013CE  0E00               	movlw	0
  3990  0013D0  221A               	addwfc	___fttol@lval+1,f,c
  3991  0013D2  221B               	addwfc	___fttol@lval+2,f,c
  3992  0013D4  221C               	addwfc	___fttol@lval+3,f,c
  3993  0013D6  D000               	goto	l5641
  3994  0013D8                     l5641:
  3995  0013D8  C019  F00F         	movff	___fttol@lval,?___fttol
  3996  0013DC  C01A  F010         	movff	___fttol@lval+1,?___fttol+1
  3997  0013E0  C01B  F011         	movff	___fttol@lval+2,?___fttol+2
  3998  0013E4  C01C  F012         	movff	___fttol@lval+3,?___fttol+3
  3999  0013E8  D000               	goto	l1175
  4000  0013EA                     l1175:
  4001  0013EA  0012               	return		;funcret
  4002  0013EC                     __end_of___fttol:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1l	equ	0xFE1
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function ___ftmul *****************
  4023 ;; Defined at:
  4024 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  f1              3   26[COMRAM] float 
  4027 ;;  f2              3   29[COMRAM] float 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  4030 ;;  sign            1   40[COMRAM] unsigned char 
  4031 ;;  cntr            1   39[COMRAM] unsigned char 
  4032 ;;  exp             1   35[COMRAM] unsigned char 
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  3   26[COMRAM] float 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4042 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;Total ram usage:       15 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    2
  4049 ;; This function calls:
  4050 ;;		___ftpack
  4051 ;; This function is called by:
  4052 ;;		_do_update_pwm
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text10
  4057  00111C                     __ptext10:
  4058                           	opt stack 0
  4059  00111C                     ___ftmul:
  4060                           	opt stack 27
  4061                           
  4062                           ;incstack = 0
  4063  00111C  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  4064  001120  6A22               	clrf	(??___ftmul+1)& (0+255),c
  4065  001122  6A23               	clrf	(??___ftmul+2)& (0+255),c
  4066  001124  341C               	rlcf	___ftmul@f1+1,w,c
  4067  001126  3621               	rlcf	??___ftmul& (0+255),f,c
  4068  001128  E301               	bnc	u4031
  4069  00112A  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  4070  00112C                     u4031:
  4071  00112C  5021               	movf	??___ftmul,w,c
  4072  00112E  6E24               	movwf	___ftmul@exp,c
  4073  001130  5024               	movf	___ftmul@exp,w,c
  4074  001132  A4D8               	btfss	status,2,c
  4075  001134  D002               	goto	l5477
  4076  001136  D00E               	goto	l5479
  4077  001138  D06C               	goto	l1154
  4078  00113A                     l5477:
  4079  00113A  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  4080  00113E  6A22               	clrf	(??___ftmul+1)& (0+255),c
  4081  001140  6A23               	clrf	(??___ftmul+2)& (0+255),c
  4082  001142  341F               	rlcf	___ftmul@f2+1,w,c
  4083  001144  3621               	rlcf	??___ftmul& (0+255),f,c
  4084  001146  E301               	bnc	u4051
  4085  001148  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  4086  00114A                     u4051:
  4087  00114A  5021               	movf	??___ftmul,w,c
  4088  00114C  6E29               	movwf	___ftmul@sign,c
  4089  00114E  5029               	movf	___ftmul@sign,w,c
  4090  001150  A4D8               	btfss	status,2,c
  4091  001152  D007               	goto	l5483
  4092  001154                     l5479:
  4093  001154  0E00               	movlw	0
  4094  001156  6E1B               	movwf	?___ftmul,c
  4095  001158  0E00               	movlw	0
  4096  00115A  6E1C               	movwf	?___ftmul+1,c
  4097  00115C  0E00               	movlw	0
  4098  00115E  6E1D               	movwf	?___ftmul+2,c
  4099  001160  D058               	goto	l1154
  4100  001162                     l5483:
  4101  001162  5029               	movf	___ftmul@sign,w,c
  4102  001164  0F7B               	addlw	123
  4103  001166  2624               	addwf	___ftmul@exp,f,c
  4104  001168  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  4105  00116C  5020               	movf	___ftmul@f2+2,w,c
  4106  00116E  1A29               	xorwf	___ftmul@sign,f,c
  4107  001170  0E80               	movlw	128
  4108  001172  1629               	andwf	___ftmul@sign,f,c
  4109  001174  8E1C               	bsf	___ftmul@f1+1,7,c
  4110  001176  8E1F               	bsf	___ftmul@f2+1,7,c
  4111  001178  0EFF               	movlw	255
  4112  00117A  161E               	andwf	___ftmul@f2,f,c
  4113  00117C  0EFF               	movlw	255
  4114  00117E  161F               	andwf	___ftmul@f2+1,f,c
  4115  001180  0E00               	movlw	0
  4116  001182  1620               	andwf	___ftmul@f2+2,f,c
  4117  001184  0E00               	movlw	0
  4118  001186  6E25               	movwf	___ftmul@f3_as_product,c
  4119  001188  0E00               	movlw	0
  4120  00118A  6E26               	movwf	___ftmul@f3_as_product+1,c
  4121  00118C  0E00               	movlw	0
  4122  00118E  6E27               	movwf	___ftmul@f3_as_product+2,c
  4123  001190  0E07               	movlw	7
  4124  001192  6E28               	movwf	___ftmul@cntr,c
  4125  001194  D000               	goto	l5497
  4126  001196                     l5497:
  4127  001196  A01B               	btfss	___ftmul@f1,0,c
  4128  001198  D007               	goto	l5501
  4129  00119A  501E               	movf	___ftmul@f2,w,c
  4130  00119C  2625               	addwf	___ftmul@f3_as_product,f,c
  4131  00119E  501F               	movf	___ftmul@f2+1,w,c
  4132  0011A0  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  4133  0011A2  5020               	movf	___ftmul@f2+2,w,c
  4134  0011A4  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  4135  0011A6  D000               	goto	l5501
  4136  0011A8                     l5501:
  4137  0011A8  90D8               	bcf	status,0,c
  4138  0011AA  321D               	rrcf	___ftmul@f1+2,f,c
  4139  0011AC  321C               	rrcf	___ftmul@f1+1,f,c
  4140  0011AE  321B               	rrcf	___ftmul@f1,f,c
  4141  0011B0  90D8               	bcf	status,0,c
  4142  0011B2  361E               	rlcf	___ftmul@f2,f,c
  4143  0011B4  361F               	rlcf	___ftmul@f2+1,f,c
  4144  0011B6  3620               	rlcf	___ftmul@f2+2,f,c
  4145  0011B8  2E28               	decfsz	___ftmul@cntr,f,c
  4146  0011BA  D7ED               	goto	l5497
  4147  0011BC  D000               	goto	l5505
  4148  0011BE                     l5505:
  4149  0011BE  0E09               	movlw	9
  4150  0011C0  6E28               	movwf	___ftmul@cntr,c
  4151  0011C2  D000               	goto	l5507
  4152  0011C4                     l5507:
  4153  0011C4  A01B               	btfss	___ftmul@f1,0,c
  4154  0011C6  D007               	goto	l5511
  4155  0011C8  501E               	movf	___ftmul@f2,w,c
  4156  0011CA  2625               	addwf	___ftmul@f3_as_product,f,c
  4157  0011CC  501F               	movf	___ftmul@f2+1,w,c
  4158  0011CE  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  4159  0011D0  5020               	movf	___ftmul@f2+2,w,c
  4160  0011D2  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  4161  0011D4  D000               	goto	l5511
  4162  0011D6                     l5511:
  4163  0011D6  90D8               	bcf	status,0,c
  4164  0011D8  321D               	rrcf	___ftmul@f1+2,f,c
  4165  0011DA  321C               	rrcf	___ftmul@f1+1,f,c
  4166  0011DC  321B               	rrcf	___ftmul@f1,f,c
  4167  0011DE  90D8               	bcf	status,0,c
  4168  0011E0  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  4169  0011E2  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  4170  0011E4  3225               	rrcf	___ftmul@f3_as_product,f,c
  4171  0011E6  2E28               	decfsz	___ftmul@cntr,f,c
  4172  0011E8  D7ED               	goto	l5507
  4173  0011EA  D000               	goto	l5515
  4174  0011EC                     l5515:
  4175  0011EC  C025  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  4176  0011F0  C026  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4177  0011F4  C027  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4178  0011F8  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  4179  0011FC  C029  F013         	movff	___ftmul@sign,___ftpack@sign
  4180  001200  ECD5  F00A         	call	___ftpack	;wreg free
  4181  001204  C00F  F01B         	movff	?___ftpack,?___ftmul
  4182  001208  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  4183  00120C  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  4184  001210  D000               	goto	l1154
  4185  001212                     l1154:
  4186  001212  0012               	return		;funcret
  4187  001214                     __end_of___ftmul:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           prodh	equ	0xFF4
  4194                           prodl	equ	0xFF3
  4195                           intcon	equ	0xFF2
  4196                           intcon2	equ	0xFF1
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           postdec1	equ	0xFE5
  4200                           fsr1l	equ	0xFE1
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function ___ftdiv *****************
  4208 ;; Defined at:
  4209 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  f1              3   41[COMRAM] float 
  4212 ;;  f2              3   44[COMRAM] float 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  f3              3   51[COMRAM] float 
  4215 ;;  sign            1   55[COMRAM] unsigned char 
  4216 ;;  exp             1   54[COMRAM] unsigned char 
  4217 ;;  cntr            1   50[COMRAM] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  3   41[COMRAM] float 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4227 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;Total ram usage:       15 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    2
  4234 ;; This function calls:
  4235 ;;		___ftpack
  4236 ;; This function is called by:
  4237 ;;		_do_update_pwm
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text11
  4242  0013EC                     __ptext11:
  4243                           	opt stack 0
  4244  0013EC                     ___ftdiv:
  4245                           	opt stack 27
  4246                           
  4247                           ;incstack = 0
  4248  0013EC  C02C  F030         	movff	___ftdiv@f1+2,??___ftdiv
  4249  0013F0  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  4250  0013F2  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  4251  0013F4  342B               	rlcf	___ftdiv@f1+1,w,c
  4252  0013F6  3630               	rlcf	??___ftdiv& (0+255),f,c
  4253  0013F8  E301               	bnc	u3981
  4254  0013FA  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  4255  0013FC                     u3981:
  4256  0013FC  5030               	movf	??___ftdiv,w,c
  4257  0013FE  6E37               	movwf	___ftdiv@exp,c
  4258  001400  5037               	movf	___ftdiv@exp,w,c
  4259  001402  A4D8               	btfss	status,2,c
  4260  001404  D002               	goto	l5431
  4261  001406  D00E               	goto	l5433
  4262  001408  D061               	goto	l1139
  4263  00140A                     l5431:
  4264  00140A  C02F  F030         	movff	___ftdiv@f2+2,??___ftdiv
  4265  00140E  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  4266  001410  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  4267  001412  342E               	rlcf	___ftdiv@f2+1,w,c
  4268  001414  3630               	rlcf	??___ftdiv& (0+255),f,c
  4269  001416  E301               	bnc	u4001
  4270  001418  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  4271  00141A                     u4001:
  4272  00141A  5030               	movf	??___ftdiv,w,c
  4273  00141C  6E38               	movwf	___ftdiv@sign,c
  4274  00141E  5038               	movf	___ftdiv@sign,w,c
  4275  001420  A4D8               	btfss	status,2,c
  4276  001422  D007               	goto	l5437
  4277  001424                     l5433:
  4278  001424  0E00               	movlw	0
  4279  001426  6E2A               	movwf	?___ftdiv,c
  4280  001428  0E00               	movlw	0
  4281  00142A  6E2B               	movwf	?___ftdiv+1,c
  4282  00142C  0E00               	movlw	0
  4283  00142E  6E2C               	movwf	?___ftdiv+2,c
  4284  001430  D04D               	goto	l1139
  4285  001432                     l5437:
  4286  001432  0E00               	movlw	0
  4287  001434  6E34               	movwf	___ftdiv@f3,c
  4288  001436  0E00               	movlw	0
  4289  001438  6E35               	movwf	___ftdiv@f3+1,c
  4290  00143A  0E00               	movlw	0
  4291  00143C  6E36               	movwf	___ftdiv@f3+2,c
  4292  00143E  5038               	movf	___ftdiv@sign,w,c
  4293  001440  0F89               	addlw	137
  4294  001442  5E37               	subwf	___ftdiv@exp,f,c
  4295  001444  C02C  F038         	movff	___ftdiv@f1+2,___ftdiv@sign
  4296  001448  502F               	movf	___ftdiv@f2+2,w,c
  4297  00144A  1A38               	xorwf	___ftdiv@sign,f,c
  4298  00144C  0E80               	movlw	128
  4299  00144E  1638               	andwf	___ftdiv@sign,f,c
  4300  001450  8E2B               	bsf	___ftdiv@f1+1,7,c
  4301  001452  0EFF               	movlw	255
  4302  001454  162A               	andwf	___ftdiv@f1,f,c
  4303  001456  0EFF               	movlw	255
  4304  001458  162B               	andwf	___ftdiv@f1+1,f,c
  4305  00145A  0E00               	movlw	0
  4306  00145C  162C               	andwf	___ftdiv@f1+2,f,c
  4307  00145E  8E2E               	bsf	___ftdiv@f2+1,7,c
  4308  001460  0EFF               	movlw	255
  4309  001462  162D               	andwf	___ftdiv@f2,f,c
  4310  001464  0EFF               	movlw	255
  4311  001466  162E               	andwf	___ftdiv@f2+1,f,c
  4312  001468  0E00               	movlw	0
  4313  00146A  162F               	andwf	___ftdiv@f2+2,f,c
  4314  00146C  0E18               	movlw	24
  4315  00146E  6E33               	movwf	___ftdiv@cntr,c
  4316  001470  D000               	goto	l5457
  4317  001472                     l5457:
  4318  001472  90D8               	bcf	status,0,c
  4319  001474  3634               	rlcf	___ftdiv@f3,f,c
  4320  001476  3635               	rlcf	___ftdiv@f3+1,f,c
  4321  001478  3636               	rlcf	___ftdiv@f3+2,f,c
  4322  00147A  502D               	movf	___ftdiv@f2,w,c
  4323  00147C  5C2A               	subwf	___ftdiv@f1,w,c
  4324  00147E  502E               	movf	___ftdiv@f2+1,w,c
  4325  001480  582B               	subwfb	___ftdiv@f1+1,w,c
  4326  001482  502F               	movf	___ftdiv@f2+2,w,c
  4327  001484  582C               	subwfb	___ftdiv@f1+2,w,c
  4328  001486  A0D8               	btfss	status,0,c
  4329  001488  D007               	goto	l1142
  4330  00148A  502D               	movf	___ftdiv@f2,w,c
  4331  00148C  5E2A               	subwf	___ftdiv@f1,f,c
  4332  00148E  502E               	movf	___ftdiv@f2+1,w,c
  4333  001490  5A2B               	subwfb	___ftdiv@f1+1,f,c
  4334  001492  502F               	movf	___ftdiv@f2+2,w,c
  4335  001494  5A2C               	subwfb	___ftdiv@f1+2,f,c
  4336  001496  8034               	bsf	___ftdiv@f3,0,c
  4337  001498                     l1142:
  4338  001498  90D8               	bcf	status,0,c
  4339  00149A  362A               	rlcf	___ftdiv@f1,f,c
  4340  00149C  362B               	rlcf	___ftdiv@f1+1,f,c
  4341  00149E  362C               	rlcf	___ftdiv@f1+2,f,c
  4342  0014A0  2E33               	decfsz	___ftdiv@cntr,f,c
  4343  0014A2  D7E7               	goto	l5457
  4344  0014A4  D000               	goto	l5467
  4345  0014A6                     l5467:
  4346  0014A6  C034  F00F         	movff	___ftdiv@f3,___ftpack@arg
  4347  0014AA  C035  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4348  0014AE  C036  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4349  0014B2  C037  F012         	movff	___ftdiv@exp,___ftpack@exp
  4350  0014B6  C038  F013         	movff	___ftdiv@sign,___ftpack@sign
  4351  0014BA  ECD5  F00A         	call	___ftpack	;wreg free
  4352  0014BE  C00F  F02A         	movff	?___ftpack,?___ftdiv
  4353  0014C2  C010  F02B         	movff	?___ftpack+1,?___ftdiv+1
  4354  0014C6  C011  F02C         	movff	?___ftpack+2,?___ftdiv+2
  4355  0014CA  D000               	goto	l1139
  4356  0014CC                     l1139:
  4357  0014CC  0012               	return		;funcret
  4358  0014CE                     __end_of___ftdiv:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           intcon	equ	0xFF2
  4367                           intcon2	equ	0xFF1
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function ___ftpack *****************
  4379 ;; Defined at:
  4380 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  arg             3   14[COMRAM] unsigned um
  4383 ;;  exp             1   17[COMRAM] unsigned char 
  4384 ;;  sign            1   18[COMRAM] unsigned char 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  3   14[COMRAM] float 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4396 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;Total ram usage:        8 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    1
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		___ftdiv
  4407 ;;		___ftmul
  4408 ;;		___lbtoft
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text12
  4413  0015AA                     __ptext12:
  4414                           	opt stack 0
  4415  0015AA                     ___ftpack:
  4416                           	opt stack 27
  4417                           
  4418                           ;incstack = 0
  4419  0015AA  5012               	movf	___ftpack@exp,w,c
  4420  0015AC  B4D8               	btfsc	status,2,c
  4421  0015AE  D005               	goto	l5209
  4422  0015B0  500F               	movf	___ftpack@arg,w,c
  4423  0015B2  1010               	iorwf	___ftpack@arg+1,w,c
  4424  0015B4  1011               	iorwf	___ftpack@arg+2,w,c
  4425  0015B6  A4D8               	btfss	status,2,c
  4426  0015B8  D00E               	goto	l5215
  4427  0015BA                     l5209:
  4428  0015BA  0E00               	movlw	0
  4429  0015BC  6E0F               	movwf	?___ftpack,c
  4430  0015BE  0E00               	movlw	0
  4431  0015C0  6E10               	movwf	?___ftpack+1,c
  4432  0015C2  0E00               	movlw	0
  4433  0015C4  6E11               	movwf	?___ftpack+2,c
  4434  0015C6  D053               	goto	l1067
  4435  0015C8  D006               	goto	l5215
  4436  0015CA                     l5213:
  4437  0015CA  2A12               	incf	___ftpack@exp,f,c
  4438  0015CC  90D8               	bcf	status,0,c
  4439  0015CE  3211               	rrcf	___ftpack@arg+2,f,c
  4440  0015D0  3210               	rrcf	___ftpack@arg+1,f,c
  4441  0015D2  320F               	rrcf	___ftpack@arg,f,c
  4442  0015D4  D000               	goto	l5215
  4443  0015D6                     l5215:
  4444  0015D6  0E00               	movlw	0
  4445  0015D8  140F               	andwf	___ftpack@arg,w,c
  4446  0015DA  6E14               	movwf	??___ftpack& (0+255),c
  4447  0015DC  0E00               	movlw	0
  4448  0015DE  1410               	andwf	___ftpack@arg+1,w,c
  4449  0015E0  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4450  0015E2  0EFE               	movlw	254
  4451  0015E4  1411               	andwf	___ftpack@arg+2,w,c
  4452  0015E6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4453  0015E8  5014               	movf	??___ftpack,w,c
  4454  0015EA  1015               	iorwf	??___ftpack+1,w,c
  4455  0015EC  1016               	iorwf	??___ftpack+2,w,c
  4456  0015EE  B4D8               	btfsc	status,2,c
  4457  0015F0  D00E               	goto	l5221
  4458  0015F2  D7EB               	goto	l5213
  4459  0015F4  D00C               	goto	l5221
  4460  0015F6                     l5217:
  4461  0015F6  2A12               	incf	___ftpack@exp,f,c
  4462  0015F8  0E01               	movlw	1
  4463  0015FA  260F               	addwf	___ftpack@arg,f,c
  4464  0015FC  0E00               	movlw	0
  4465  0015FE  2210               	addwfc	___ftpack@arg+1,f,c
  4466  001600  0E00               	movlw	0
  4467  001602  2211               	addwfc	___ftpack@arg+2,f,c
  4468  001604  90D8               	bcf	status,0,c
  4469  001606  3211               	rrcf	___ftpack@arg+2,f,c
  4470  001608  3210               	rrcf	___ftpack@arg+1,f,c
  4471  00160A  320F               	rrcf	___ftpack@arg,f,c
  4472  00160C  D000               	goto	l5221
  4473  00160E                     l5221:
  4474  00160E  0E00               	movlw	0
  4475  001610  140F               	andwf	___ftpack@arg,w,c
  4476  001612  6E14               	movwf	??___ftpack& (0+255),c
  4477  001614  0E00               	movlw	0
  4478  001616  1410               	andwf	___ftpack@arg+1,w,c
  4479  001618  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4480  00161A  0EFF               	movlw	255
  4481  00161C  1411               	andwf	___ftpack@arg+2,w,c
  4482  00161E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4483  001620  5014               	movf	??___ftpack,w,c
  4484  001622  1015               	iorwf	??___ftpack+1,w,c
  4485  001624  1016               	iorwf	??___ftpack+2,w,c
  4486  001626  B4D8               	btfsc	status,2,c
  4487  001628  D008               	goto	l5225
  4488  00162A  D7E5               	goto	l5217
  4489  00162C  D006               	goto	l5225
  4490  00162E                     l5223:
  4491  00162E  0612               	decf	___ftpack@exp,f,c
  4492  001630  90D8               	bcf	status,0,c
  4493  001632  360F               	rlcf	___ftpack@arg,f,c
  4494  001634  3610               	rlcf	___ftpack@arg+1,f,c
  4495  001636  3611               	rlcf	___ftpack@arg+2,f,c
  4496  001638  D000               	goto	l5225
  4497  00163A                     l5225:
  4498  00163A  BE10               	btfsc	___ftpack@arg+1,7,c
  4499  00163C  D004               	goto	l1078
  4500  00163E  0E02               	movlw	2
  4501  001640  6012               	cpfslt	___ftpack@exp,c
  4502  001642  D7F5               	goto	l5223
  4503  001644  D000               	goto	l1078
  4504  001646                     l1078:
  4505  001646  B012               	btfsc	___ftpack@exp,0,c
  4506  001648  D002               	goto	l5231
  4507  00164A  9E10               	bcf	___ftpack@arg+1,7,c
  4508  00164C  D000               	goto	l5231
  4509  00164E                     l5231:
  4510  00164E  90D8               	bcf	status,0,c
  4511  001650  3212               	rrcf	___ftpack@exp,f,c
  4512  001652  5012               	movf	___ftpack@exp,w,c
  4513  001654  1211               	iorwf	___ftpack@arg+2,f,c
  4514  001656  5013               	movf	___ftpack@sign,w,c
  4515  001658  B4D8               	btfsc	status,2,c
  4516  00165A  D002               	goto	l5237
  4517  00165C  8E11               	bsf	___ftpack@arg+2,7,c
  4518  00165E  D000               	goto	l5237
  4519  001660                     l5237:
  4520  001660  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  4521  001664  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  4522  001668  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  4523  00166C  D000               	goto	l1067
  4524  00166E                     l1067:
  4525  00166E  0012               	return		;funcret
  4526  001670                     __end_of___ftpack:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon2	equ	0xFF1
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _Update_Screen *****************
  4547 ;; Defined at:
  4548 ;;		line 68 in file "Main_Screen.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  neg_tempF       2    9[BANK0 ] int 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  2  461[None  ] int 
  4555 ;; Registers used:
  4556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;Total ram usage:        4 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    8
  4569 ;; This function calls:
  4570 ;;		___awdiv
  4571 ;;		___awmod
  4572 ;;		_drawtext
  4573 ;;		_strcpy
  4574 ;; This function is called by:
  4575 ;;		_main
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text13
  4580  0006A2                     __ptext13:
  4581                           	opt stack 0
  4582  0006A2                     _Update_Screen:
  4583                           	opt stack 22
  4584                           
  4585                           ;Main_Screen.c: 70: if ((DS1621_tempC & 0x80) == 0x80)
  4586                           
  4587                           ;incstack = 0
  4588  0006A2  AE44               	btfss	_DS1621_tempC,7,c
  4589  0006A4  D01C               	goto	l6023
  4590                           
  4591                           ;Main_Screen.c: 71: {
  4592                           ;Main_Screen.c: 72: tempC[0] = '-';
  4593  0006A6  0E2D               	movlw	45
  4594  0006A8  0100               	movlb	0	; () banked
  4595  0006AA  6FDE               	movwf	_tempC& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;Main_Screen.c: 73: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  4599  0006AC  0E7F               	movlw	127
  4600  0006AE  1444               	andwf	_DS1621_tempC,w,c
  4601  0006B0  6E15               	movwf	___awdiv@dividend,c
  4602  0006B2  6A16               	clrf	___awdiv@dividend+1,c
  4603  0006B4  0E00               	movlw	0
  4604  0006B6  6E18               	movwf	___awdiv@divisor+1,c
  4605  0006B8  0E0A               	movlw	10
  4606  0006BA  6E17               	movwf	___awdiv@divisor,c
  4607  0006BC  EC93  F00B         	call	___awdiv	;wreg free
  4608  0006C0  5015               	movf	?___awdiv,w,c
  4609  0006C2  0F30               	addlw	48
  4610  0006C4  0100               	movlb	0	; () banked
  4611  0006C6  6FDF               	movwf	(_tempC+1)& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;Main_Screen.c: 74: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  4615  0006C8  0E7F               	movlw	127
  4616  0006CA  1444               	andwf	_DS1621_tempC,w,c
  4617  0006CC  6E0F               	movwf	___awmod@dividend,c
  4618  0006CE  6A10               	clrf	___awmod@dividend+1,c
  4619  0006D0  0E00               	movlw	0
  4620  0006D2  6E12               	movwf	___awmod@divisor+1,c
  4621  0006D4  0E0A               	movlw	10
  4622  0006D6  6E11               	movwf	___awmod@divisor,c
  4623  0006D8  EC69  F00C         	call	___awmod	;wreg free
  4624  0006DC  D01B               	goto	L1
  4625  0006DE                     l6023:
  4626                           
  4627                           ;Main_Screen.c: 76: else
  4628                           ;Main_Screen.c: 77: {
  4629                           ;Main_Screen.c: 78: tempC[0] = '+';
  4630  0006DE  0E2B               	movlw	43
  4631  0006E0  0100               	movlb	0	; () banked
  4632  0006E2  6FDE               	movwf	_tempC& (0+255),b
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;Main_Screen.c: 79: tempC[1] = DS1621_tempC/10 + '0';
  4636  0006E4  C044  F015         	movff	_DS1621_tempC,___awdiv@dividend
  4637  0006E8  C045  F016         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  4638  0006EC  0E00               	movlw	0
  4639  0006EE  6E18               	movwf	___awdiv@divisor+1,c
  4640  0006F0  0E0A               	movlw	10
  4641  0006F2  6E17               	movwf	___awdiv@divisor,c
  4642  0006F4  EC93  F00B         	call	___awdiv	;wreg free
  4643  0006F8  5015               	movf	?___awdiv,w,c
  4644  0006FA  0F30               	addlw	48
  4645  0006FC  0100               	movlb	0	; () banked
  4646  0006FE  6FDF               	movwf	(_tempC+1)& (0+255),b
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;Main_Screen.c: 80: tempC[2] = DS1621_tempC%10 + '0';
  4650  000700  C044  F00F         	movff	_DS1621_tempC,___awmod@dividend
  4651  000704  C045  F010         	movff	_DS1621_tempC+1,___awmod@dividend+1
  4652  000708  0E00               	movlw	0
  4653  00070A  6E12               	movwf	___awmod@divisor+1,c
  4654  00070C  0E0A               	movlw	10
  4655  00070E  6E11               	movwf	___awmod@divisor,c
  4656  000710  EC69  F00C         	call	___awmod	;wreg free
  4657  000714                     L1:
  4658  000714  500F               	movf	?___awmod,w,c
  4659  000716  0F30               	addlw	48
  4660  000718  0100               	movlb	0	; () banked
  4661  00071A  6FE0               	movwf	(_tempC+2)& (0+255),b
  4662  00071C  D000               	goto	l6029
  4663  00071E                     l6029:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;Main_Screen.c: 81: }
  4667                           ;Main_Screen.c: 83: if (DS1621_tempF < 0)
  4668  00071E  AE47               	btfss	_DS1621_tempF+1,7,c
  4669  000720  D029               	goto	l6039
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;Main_Screen.c: 84: {
  4673                           ;Main_Screen.c: 85: tempF[0] = '-';
  4674  000722  0E2D               	movlw	45
  4675  000724  0100               	movlb	0	; () banked
  4676  000726  6FE2               	movwf	_tempF& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;Main_Screen.c: 86: int neg_tempF = -DS1621_tempF;
  4680  000728  C046  F0ED         	movff	_DS1621_tempF,??_Update_Screen
  4681  00072C  C047  F0EE         	movff	_DS1621_tempF+1,??_Update_Screen+1
  4682  000730  0100               	movlb	0	; () banked
  4683  000732  1FED               	comf	??_Update_Screen& (0+255),f,b
  4684  000734  1FEE               	comf	(??_Update_Screen+1)& (0+255),f,b
  4685  000736  4BED               	infsnz	??_Update_Screen& (0+255),f,b
  4686  000738  2BEE               	incf	(??_Update_Screen+1)& (0+255),f,b
  4687  00073A  C0ED  F0EF         	movff	??_Update_Screen,Update_Screen@neg_tempF
  4688  00073E  C0EE  F0F0         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;Main_Screen.c: 87: tempF[1] = neg_tempF/10 + '0';
  4692  000742  C0EF  F015         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  4693  000746  C0F0  F016         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  4694  00074A  0E00               	movlw	0
  4695  00074C  6E18               	movwf	___awdiv@divisor+1,c
  4696  00074E  0E0A               	movlw	10
  4697  000750  6E17               	movwf	___awdiv@divisor,c
  4698  000752  EC93  F00B         	call	___awdiv	;wreg free
  4699  000756  5015               	movf	?___awdiv,w,c
  4700  000758  0F30               	addlw	48
  4701  00075A  0100               	movlb	0	; () banked
  4702  00075C  6FE3               	movwf	(_tempF+1)& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;Main_Screen.c: 88: tempF[2] = neg_tempF%10 + '0';
  4706  00075E  C0EF  F00F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  4707  000762  C0F0  F010         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  4708  000766  0E00               	movlw	0
  4709  000768  6E12               	movwf	___awmod@divisor+1,c
  4710  00076A  0E0A               	movlw	10
  4711  00076C  6E11               	movwf	___awmod@divisor,c
  4712  00076E  EC69  F00C         	call	___awmod	;wreg free
  4713  000772  D01B               	goto	L2
  4714  000774                     l6039:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;Main_Screen.c: 90: else
  4718                           ;Main_Screen.c: 91: {
  4719                           ;Main_Screen.c: 92: tempF[0] = '+';
  4720  000774  0E2B               	movlw	43
  4721  000776  0100               	movlb	0	; () banked
  4722  000778  6FE2               	movwf	_tempF& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;Main_Screen.c: 93: tempF[1] = DS1621_tempF/10 + '0';
  4726  00077A  C046  F015         	movff	_DS1621_tempF,___awdiv@dividend
  4727  00077E  C047  F016         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  4728  000782  0E00               	movlw	0
  4729  000784  6E18               	movwf	___awdiv@divisor+1,c
  4730  000786  0E0A               	movlw	10
  4731  000788  6E17               	movwf	___awdiv@divisor,c
  4732  00078A  EC93  F00B         	call	___awdiv	;wreg free
  4733  00078E  5015               	movf	?___awdiv,w,c
  4734  000790  0F30               	addlw	48
  4735  000792  0100               	movlb	0	; () banked
  4736  000794  6FE3               	movwf	(_tempF+1)& (0+255),b
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;Main_Screen.c: 94: tempF[2] = DS1621_tempF%10 + '0';
  4740  000796  C046  F00F         	movff	_DS1621_tempF,___awmod@dividend
  4741  00079A  C047  F010         	movff	_DS1621_tempF+1,___awmod@dividend+1
  4742  00079E  0E00               	movlw	0
  4743  0007A0  6E12               	movwf	___awmod@divisor+1,c
  4744  0007A2  0E0A               	movlw	10
  4745  0007A4  6E11               	movwf	___awmod@divisor,c
  4746  0007A6  EC69  F00C         	call	___awmod	;wreg free
  4747  0007AA                     L2:
  4748  0007AA  500F               	movf	?___awmod,w,c
  4749  0007AC  0F30               	addlw	48
  4750  0007AE  0100               	movlb	0	; () banked
  4751  0007B0  6FE4               	movwf	(_tempF+2)& (0+255),b
  4752  0007B2  D000               	goto	l6045
  4753  0007B4                     l6045:
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;Main_Screen.c: 95: }
  4757                           ;Main_Screen.c: 96: time[0] = (hour>>4) + '0';
  4758  0007B4  3860               	swapf	_hour,w,c
  4759  0007B6  0B0F               	andlw	15
  4760  0007B8  0F30               	addlw	48
  4761  0007BA  0100               	movlb	0	; () banked
  4762  0007BC  6FC8               	movwf	_time& (0+255),b
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;Main_Screen.c: 97: time[1] = (hour & 0x0f)+ '0';
  4766  0007BE  5060               	movf	_hour,w,c
  4767  0007C0  0B0F               	andlw	15
  4768  0007C2  0F30               	addlw	48
  4769  0007C4  0100               	movlb	0	; () banked
  4770  0007C6  6FC9               	movwf	(_time+1)& (0+255),b
  4771                           
  4772                           ;Main_Screen.c: 100: time[3] = '0';
  4773  0007C8  0E30               	movlw	48
  4774  0007CA  0100               	movlb	0	; () banked
  4775  0007CC  6FCB               	movwf	(_time+3)& (0+255),b
  4776                           
  4777                           ;Main_Screen.c: 101: time[4] = '0';
  4778  0007CE  0E30               	movlw	48
  4779  0007D0  0100               	movlb	0	; () banked
  4780  0007D2  6FCC               	movwf	(_time+4)& (0+255),b
  4781                           
  4782                           ;Main_Screen.c: 103: time[6] = '0';
  4783  0007D4  0E30               	movlw	48
  4784  0007D6  0100               	movlb	0	; () banked
  4785  0007D8  6FCE               	movwf	(_time+6)& (0+255),b
  4786                           
  4787                           ;Main_Screen.c: 104: time[7] = '0';
  4788  0007DA  0E30               	movlw	48
  4789  0007DC  0100               	movlb	0	; () banked
  4790  0007DE  6FCF               	movwf	(_time+7)& (0+255),b
  4791                           
  4792                           ;Main_Screen.c: 106: date[0] = '0';
  4793  0007E0  0E30               	movlw	48
  4794  0007E2  0100               	movlb	0	; () banked
  4795  0007E4  6FBF               	movwf	_date& (0+255),b
  4796                           
  4797                           ;Main_Screen.c: 107: date[1] = '0';
  4798  0007E6  0E30               	movlw	48
  4799  0007E8  0100               	movlb	0	; () banked
  4800  0007EA  6FC0               	movwf	(_date+1)& (0+255),b
  4801                           
  4802                           ;Main_Screen.c: 108: date[3] = '0';
  4803  0007EC  0E30               	movlw	48
  4804  0007EE  0100               	movlb	0	; () banked
  4805  0007F0  6FC2               	movwf	(_date+3)& (0+255),b
  4806                           
  4807                           ;Main_Screen.c: 109: date[4] = '0';
  4808  0007F2  0E30               	movlw	48
  4809  0007F4  0100               	movlb	0	; () banked
  4810  0007F6  6FC3               	movwf	(_date+4)& (0+255),b
  4811                           
  4812                           ;Main_Screen.c: 110: date[6] = '0';
  4813  0007F8  0E30               	movlw	48
  4814  0007FA  0100               	movlb	0	; () banked
  4815  0007FC  6FC5               	movwf	(_date+6)& (0+255),b
  4816                           
  4817                           ;Main_Screen.c: 111: date[7] = '0';
  4818  0007FE  0E30               	movlw	48
  4819  000800  0100               	movlb	0	; () banked
  4820  000802  6FC6               	movwf	(_date+7)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;Main_Screen.c: 114: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  4824  000804  0452               	decf	_FAN,w,c
  4825  000806  A4D8               	btfss	status,2,c
  4826  000808  D00B               	goto	l6053
  4827                           
  4828                           ; BSR set to: 0
  4829  00080A  0EDA               	movlw	low _Fan_SW_Txt
  4830  00080C  6E0F               	movwf	strcpy@to,c
  4831  00080E  0E00               	movlw	high _Fan_SW_Txt
  4832  000810  6E10               	movwf	strcpy@to+1,c
  4833  000812  0EEC               	movlw	low STR_22
  4834  000814  6E11               	movwf	strcpy@from,c
  4835  000816  0EFF               	movlw	high STR_22
  4836  000818  6E12               	movwf	strcpy@from+1,c
  4837  00081A  EC41  F00F         	call	_strcpy	;wreg free
  4838  00081E  D00B               	goto	l6055
  4839  000820                     l6053:
  4840                           
  4841                           ;Main_Screen.c: 115: else strcpy(Fan_SW_Txt, "OFF");
  4842  000820  0EDA               	movlw	low _Fan_SW_Txt
  4843  000822  6E0F               	movwf	strcpy@to,c
  4844  000824  0E00               	movlw	high _Fan_SW_Txt
  4845  000826  6E10               	movwf	strcpy@to+1,c
  4846  000828  0EF0               	movlw	low STR_23
  4847  00082A  6E11               	movwf	strcpy@from,c
  4848  00082C  0EFF               	movlw	high STR_23
  4849  00082E  6E12               	movwf	strcpy@from+1,c
  4850  000830  EC41  F00F         	call	_strcpy	;wreg free
  4851  000834  D000               	goto	l6055
  4852  000836                     l6055:
  4853                           
  4854                           ;Main_Screen.c: 118: DC_Txt[0] = duty_cycle/100 + '0';
  4855  000836  C05E  F015         	movff	_duty_cycle,___awdiv@dividend
  4856  00083A  6A16               	clrf	___awdiv@dividend+1,c
  4857  00083C  0E00               	movlw	0
  4858  00083E  6E18               	movwf	___awdiv@divisor+1,c
  4859  000840  0E64               	movlw	100
  4860  000842  6E17               	movwf	___awdiv@divisor,c
  4861  000844  EC93  F00B         	call	___awdiv	;wreg free
  4862  000848  5015               	movf	?___awdiv,w,c
  4863  00084A  0F30               	addlw	48
  4864  00084C  0100               	movlb	0	; () banked
  4865  00084E  6FD6               	movwf	_DC_Txt& (0+255),b
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;Main_Screen.c: 120: DC_Txt[1] = '0';
  4869  000850  0E30               	movlw	48
  4870  000852  0100               	movlb	0	; () banked
  4871  000854  6FD7               	movwf	(_DC_Txt+1)& (0+255),b
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;Main_Screen.c: 121: DC_Txt[2] = '0';
  4875  000856  0E30               	movlw	48
  4876  000858  0100               	movlb	0	; () banked
  4877  00085A  6FD8               	movwf	(_DC_Txt+2)& (0+255),b
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;Main_Screen.c: 124: RPM_Txt[0] = rpm/1000 + '0';
  4881  00085C  C04C  F015         	movff	_rpm,___awdiv@dividend
  4882  000860  C04D  F016         	movff	_rpm+1,___awdiv@dividend+1
  4883  000864  0E03               	movlw	3
  4884  000866  6E18               	movwf	___awdiv@divisor+1,c
  4885  000868  0EE8               	movlw	232
  4886  00086A  6E17               	movwf	___awdiv@divisor,c
  4887  00086C  EC93  F00B         	call	___awdiv	;wreg free
  4888  000870  5015               	movf	?___awdiv,w,c
  4889  000872  0F30               	addlw	48
  4890  000874  0100               	movlb	0	; () banked
  4891  000876  6FD1               	movwf	_RPM_Txt& (0+255),b
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;Main_Screen.c: 126: RPM_Txt[1] = '0';
  4895  000878  0E30               	movlw	48
  4896  00087A  0100               	movlb	0	; () banked
  4897  00087C  6FD2               	movwf	(_RPM_Txt+1)& (0+255),b
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;Main_Screen.c: 127: RPM_Txt[2] = '0';
  4901  00087E  0E30               	movlw	48
  4902  000880  0100               	movlb	0	; () banked
  4903  000882  6FD3               	movwf	(_RPM_Txt+2)& (0+255),b
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;Main_Screen.c: 128: RPM_Txt[3] = '0';
  4907  000884  0E30               	movlw	48
  4908  000886  0100               	movlb	0	; () banked
  4909  000888  6FD4               	movwf	(_RPM_Txt+3)& (0+255),b
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;Main_Screen.c: 130: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4913  00088A  0E17               	movlw	23
  4914  00088C  6E37               	movwf	drawtext@y,c
  4915  00088E  0EDE               	movlw	low _tempC
  4916  000890  6E38               	movwf	drawtext@_text,c
  4917  000892  0E00               	movlw	high _tempC
  4918  000894  6E39               	movwf	drawtext@_text+1,c
  4919  000896  0EFF               	movlw	255
  4920  000898  6E3B               	movwf	drawtext@color+1,c
  4921  00089A  0EE0               	movlw	224
  4922  00089C  6E3A               	movwf	drawtext@color,c
  4923  00089E  0E00               	movlw	0
  4924  0008A0  6E3D               	movwf	drawtext@bg+1,c
  4925  0008A2  0E00               	movlw	0
  4926  0008A4  6E3C               	movwf	drawtext@bg,c
  4927  0008A6  0E02               	movlw	2
  4928  0008A8  6E3E               	movwf	drawtext@size,c
  4929  0008AA  0E01               	movlw	1
  4930  0008AC  EC09  F008         	call	_drawtext
  4931                           
  4932                           ;Main_Screen.c: 131: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4933  0008B0  0E17               	movlw	23
  4934  0008B2  6E37               	movwf	drawtext@y,c
  4935  0008B4  0EE2               	movlw	low _tempF
  4936  0008B6  6E38               	movwf	drawtext@_text,c
  4937  0008B8  0E00               	movlw	high _tempF
  4938  0008BA  6E39               	movwf	drawtext@_text+1,c
  4939  0008BC  0EFF               	movlw	255
  4940  0008BE  6E3B               	movwf	drawtext@color+1,c
  4941  0008C0  0EE0               	movlw	224
  4942  0008C2  6E3A               	movwf	drawtext@color,c
  4943  0008C4  0E00               	movlw	0
  4944  0008C6  6E3D               	movwf	drawtext@bg+1,c
  4945  0008C8  0E00               	movlw	0
  4946  0008CA  6E3C               	movwf	drawtext@bg,c
  4947  0008CC  0E02               	movlw	2
  4948  0008CE  6E3E               	movwf	drawtext@size,c
  4949  0008D0  0E46               	movlw	70
  4950  0008D2  EC09  F008         	call	_drawtext
  4951                           
  4952                           ;Main_Screen.c: 132: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4953  0008D6  0E34               	movlw	52
  4954  0008D8  6E37               	movwf	drawtext@y,c
  4955  0008DA  0EC8               	movlw	low _time
  4956  0008DC  6E38               	movwf	drawtext@_text,c
  4957  0008DE  0E00               	movlw	high _time
  4958  0008E0  6E39               	movwf	drawtext@_text+1,c
  4959  0008E2  0E07               	movlw	7
  4960  0008E4  6E3B               	movwf	drawtext@color+1,c
  4961  0008E6  683A               	setf	drawtext@color,c
  4962  0008E8  0E00               	movlw	0
  4963  0008EA  6E3D               	movwf	drawtext@bg+1,c
  4964  0008EC  0E00               	movlw	0
  4965  0008EE  6E3C               	movwf	drawtext@bg,c
  4966  0008F0  0E02               	movlw	2
  4967  0008F2  6E3E               	movwf	drawtext@size,c
  4968  0008F4  0E0F               	movlw	15
  4969  0008F6  EC09  F008         	call	_drawtext
  4970                           
  4971                           ;Main_Screen.c: 133: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4972  0008FA  0E52               	movlw	82
  4973  0008FC  6E37               	movwf	drawtext@y,c
  4974  0008FE  0EBF               	movlw	low _date
  4975  000900  6E38               	movwf	drawtext@_text,c
  4976  000902  0E00               	movlw	high _date
  4977  000904  6E39               	movwf	drawtext@_text+1,c
  4978  000906  0E07               	movlw	7
  4979  000908  6E3B               	movwf	drawtext@color+1,c
  4980  00090A  0EE0               	movlw	224
  4981  00090C  6E3A               	movwf	drawtext@color,c
  4982  00090E  0E00               	movlw	0
  4983  000910  6E3D               	movwf	drawtext@bg+1,c
  4984  000912  0E00               	movlw	0
  4985  000914  6E3C               	movwf	drawtext@bg,c
  4986  000916  0E02               	movlw	2
  4987  000918  6E3E               	movwf	drawtext@size,c
  4988  00091A  0E0F               	movlw	15
  4989  00091C  EC09  F008         	call	_drawtext
  4990                           
  4991                           ;Main_Screen.c: 135: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4992  000920  0E82               	movlw	130
  4993  000922  6E37               	movwf	drawtext@y,c
  4994  000924  0EDA               	movlw	low _Fan_SW_Txt
  4995  000926  6E38               	movwf	drawtext@_text,c
  4996  000928  0E00               	movlw	high _Fan_SW_Txt
  4997  00092A  6E39               	movwf	drawtext@_text+1,c
  4998  00092C  0EF8               	movlw	248
  4999  00092E  6E3B               	movwf	drawtext@color+1,c
  5000  000930  0E00               	movlw	0
  5001  000932  6E3A               	movwf	drawtext@color,c
  5002  000934  0E00               	movlw	0
  5003  000936  6E3D               	movwf	drawtext@bg+1,c
  5004  000938  0E00               	movlw	0
  5005  00093A  6E3C               	movwf	drawtext@bg,c
  5006  00093C  0E01               	movlw	1
  5007  00093E  6E3E               	movwf	drawtext@size,c
  5008  000940  0E5F               	movlw	95
  5009  000942  EC09  F008         	call	_drawtext
  5010                           
  5011                           ;Main_Screen.c: 136: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  5012  000946  0E96               	movlw	150
  5013  000948  6E37               	movwf	drawtext@y,c
  5014  00094A  0ED6               	movlw	low _DC_Txt
  5015  00094C  6E38               	movwf	drawtext@_text,c
  5016  00094E  0E00               	movlw	high _DC_Txt
  5017  000950  6E39               	movwf	drawtext@_text+1,c
  5018  000952  0E07               	movlw	7
  5019  000954  6E3B               	movwf	drawtext@color+1,c
  5020  000956  0EE0               	movlw	224
  5021  000958  6E3A               	movwf	drawtext@color,c
  5022  00095A  0E00               	movlw	0
  5023  00095C  6E3D               	movwf	drawtext@bg+1,c
  5024  00095E  0E00               	movlw	0
  5025  000960  6E3C               	movwf	drawtext@bg,c
  5026  000962  0E01               	movlw	1
  5027  000964  6E3E               	movwf	drawtext@size,c
  5028  000966  0E0A               	movlw	10
  5029  000968  EC09  F008         	call	_drawtext
  5030                           
  5031                           ;Main_Screen.c: 137: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  5032  00096C  0E96               	movlw	150
  5033  00096E  6E37               	movwf	drawtext@y,c
  5034  000970  0ED1               	movlw	low _RPM_Txt
  5035  000972  6E38               	movwf	drawtext@_text,c
  5036  000974  0E00               	movlw	high _RPM_Txt
  5037  000976  6E39               	movwf	drawtext@_text+1,c
  5038  000978  0E07               	movlw	7
  5039  00097A  6E3B               	movwf	drawtext@color+1,c
  5040  00097C  0EE0               	movlw	224
  5041  00097E  6E3A               	movwf	drawtext@color,c
  5042  000980  0E00               	movlw	0
  5043  000982  6E3D               	movwf	drawtext@bg+1,c
  5044  000984  0E00               	movlw	0
  5045  000986  6E3C               	movwf	drawtext@bg,c
  5046  000988  0E01               	movlw	1
  5047  00098A  6E3E               	movwf	drawtext@size,c
  5048  00098C  0E5D               	movlw	93
  5049  00098E  EC09  F008         	call	_drawtext
  5050  000992  0012               	return		;funcret
  5051  000994                     __end_of_Update_Screen:
  5052                           	opt stack 0
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           postdec1	equ	0xFE5
  5064                           fsr1l	equ	0xFE1
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function ___awmod *****************
  5072 ;; Defined at:
  5073 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  dividend        2   14[COMRAM] int 
  5076 ;;  divisor         2   16[COMRAM] int 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  sign            1   19[COMRAM] unsigned char 
  5079 ;;  counter         1   18[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  2   14[COMRAM] int 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        6 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    1
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_Update_Screen
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text14
  5104  0018D2                     __ptext14:
  5105                           	opt stack 0
  5106  0018D2                     ___awmod:
  5107                           	opt stack 28
  5108                           
  5109                           ;incstack = 0
  5110  0018D2  0E00               	movlw	0
  5111  0018D4  6E14               	movwf	___awmod@sign,c
  5112  0018D6  AE10               	btfss	___awmod@dividend+1,7,c
  5113  0018D8  D007               	goto	l5571
  5114  0018DA  6C0F               	negf	___awmod@dividend,c
  5115  0018DC  1E10               	comf	___awmod@dividend+1,f,c
  5116  0018DE  B0D8               	btfsc	status,0,c
  5117  0018E0  2A10               	incf	___awmod@dividend+1,f,c
  5118  0018E2  0E01               	movlw	1
  5119  0018E4  6E14               	movwf	___awmod@sign,c
  5120  0018E6  D000               	goto	l5571
  5121  0018E8                     l5571:
  5122  0018E8  AE12               	btfss	___awmod@divisor+1,7,c
  5123  0018EA  D005               	goto	l5575
  5124  0018EC  6C11               	negf	___awmod@divisor,c
  5125  0018EE  1E12               	comf	___awmod@divisor+1,f,c
  5126  0018F0  B0D8               	btfsc	status,0,c
  5127  0018F2  2A12               	incf	___awmod@divisor+1,f,c
  5128  0018F4  D000               	goto	l5575
  5129  0018F6                     l5575:
  5130  0018F6  5011               	movf	___awmod@divisor,w,c
  5131  0018F8  1012               	iorwf	___awmod@divisor+1,w,c
  5132  0018FA  B4D8               	btfsc	status,2,c
  5133  0018FC  D01D               	goto	l5591
  5134  0018FE  0E01               	movlw	1
  5135  001900  6E13               	movwf	___awmod@counter,c
  5136  001902  D005               	goto	l5581
  5137  001904                     l5579:
  5138  001904  90D8               	bcf	status,0,c
  5139  001906  3611               	rlcf	___awmod@divisor,f,c
  5140  001908  3612               	rlcf	___awmod@divisor+1,f,c
  5141  00190A  2A13               	incf	___awmod@counter,f,c
  5142  00190C  D000               	goto	l5581
  5143  00190E                     l5581:
  5144  00190E  BE12               	btfsc	___awmod@divisor+1,7,c
  5145  001910  D002               	goto	l5583
  5146  001912  D7F8               	goto	l5579
  5147  001914  D000               	goto	l5583
  5148  001916                     l5583:
  5149  001916  5011               	movf	___awmod@divisor,w,c
  5150  001918  5C0F               	subwf	___awmod@dividend,w,c
  5151  00191A  5012               	movf	___awmod@divisor+1,w,c
  5152  00191C  5810               	subwfb	___awmod@dividend+1,w,c
  5153  00191E  A0D8               	btfss	status,0,c
  5154  001920  D005               	goto	l5587
  5155  001922  5011               	movf	___awmod@divisor,w,c
  5156  001924  5E0F               	subwf	___awmod@dividend,f,c
  5157  001926  5012               	movf	___awmod@divisor+1,w,c
  5158  001928  5A10               	subwfb	___awmod@dividend+1,f,c
  5159  00192A  D000               	goto	l5587
  5160  00192C                     l5587:
  5161  00192C  90D8               	bcf	status,0,c
  5162  00192E  3212               	rrcf	___awmod@divisor+1,f,c
  5163  001930  3211               	rrcf	___awmod@divisor,f,c
  5164  001932  2E13               	decfsz	___awmod@counter,f,c
  5165  001934  D7F0               	goto	l5583
  5166  001936  D000               	goto	l5591
  5167  001938                     l5591:
  5168  001938  5014               	movf	___awmod@sign,w,c
  5169  00193A  B4D8               	btfsc	status,2,c
  5170  00193C  D005               	goto	l5595
  5171  00193E  6C0F               	negf	___awmod@dividend,c
  5172  001940  1E10               	comf	___awmod@dividend+1,f,c
  5173  001942  B0D8               	btfsc	status,0,c
  5174  001944  2A10               	incf	___awmod@dividend+1,f,c
  5175  001946  D000               	goto	l5595
  5176  001948                     l5595:
  5177  001948  C00F  F00F         	movff	___awmod@dividend,?___awmod
  5178  00194C  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  5179  001950  D000               	goto	l965
  5180  001952                     l965:
  5181  001952  0012               	return		;funcret
  5182  001954                     __end_of___awmod:
  5183                           	opt stack 0
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           intcon2	equ	0xFF1
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1l	equ	0xFE1
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function ___awdiv *****************
  5203 ;; Defined at:
  5204 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  dividend        2   20[COMRAM] int 
  5207 ;;  divisor         2   22[COMRAM] int 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  quotient        2   26[COMRAM] int 
  5210 ;;  sign            1   25[COMRAM] unsigned char 
  5211 ;;  counter         1   24[COMRAM] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  2   20[COMRAM] int 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;Total ram usage:        8 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    1
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_get_RPM
  5232 ;;		_main
  5233 ;;		_Update_Screen
  5234 ;;		_Set_DC_RGB
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text15
  5239  001726                     __ptext15:
  5240                           	opt stack 0
  5241  001726                     ___awdiv:
  5242                           	opt stack 28
  5243                           
  5244                           ;incstack = 0
  5245  001726  0E00               	movlw	0
  5246  001728  6E1A               	movwf	___awdiv@sign,c
  5247  00172A  AE18               	btfss	___awdiv@divisor+1,7,c
  5248  00172C  D007               	goto	l5527
  5249  00172E  6C17               	negf	___awdiv@divisor,c
  5250  001730  1E18               	comf	___awdiv@divisor+1,f,c
  5251  001732  B0D8               	btfsc	status,0,c
  5252  001734  2A18               	incf	___awdiv@divisor+1,f,c
  5253  001736  0E01               	movlw	1
  5254  001738  6E1A               	movwf	___awdiv@sign,c
  5255  00173A  D000               	goto	l5527
  5256  00173C                     l5527:
  5257  00173C  AE16               	btfss	___awdiv@dividend+1,7,c
  5258  00173E  D007               	goto	l5533
  5259  001740  6C15               	negf	___awdiv@dividend,c
  5260  001742  1E16               	comf	___awdiv@dividend+1,f,c
  5261  001744  B0D8               	btfsc	status,0,c
  5262  001746  2A16               	incf	___awdiv@dividend+1,f,c
  5263  001748  0E01               	movlw	1
  5264  00174A  1A1A               	xorwf	___awdiv@sign,f,c
  5265  00174C  D000               	goto	l5533
  5266  00174E                     l5533:
  5267  00174E  0E00               	movlw	0
  5268  001750  6E1C               	movwf	___awdiv@quotient+1,c
  5269  001752  0E00               	movlw	0
  5270  001754  6E1B               	movwf	___awdiv@quotient,c
  5271  001756  5017               	movf	___awdiv@divisor,w,c
  5272  001758  1018               	iorwf	___awdiv@divisor+1,w,c
  5273  00175A  B4D8               	btfsc	status,2,c
  5274  00175C  D021               	goto	l5555
  5275  00175E  0E01               	movlw	1
  5276  001760  6E19               	movwf	___awdiv@counter,c
  5277  001762  D005               	goto	l5541
  5278  001764                     l5539:
  5279  001764  90D8               	bcf	status,0,c
  5280  001766  3617               	rlcf	___awdiv@divisor,f,c
  5281  001768  3618               	rlcf	___awdiv@divisor+1,f,c
  5282  00176A  2A19               	incf	___awdiv@counter,f,c
  5283  00176C  D000               	goto	l5541
  5284  00176E                     l5541:
  5285  00176E  BE18               	btfsc	___awdiv@divisor+1,7,c
  5286  001770  D002               	goto	l5543
  5287  001772  D7F8               	goto	l5539
  5288  001774  D000               	goto	l5543
  5289  001776                     l5543:
  5290  001776  90D8               	bcf	status,0,c
  5291  001778  361B               	rlcf	___awdiv@quotient,f,c
  5292  00177A  361C               	rlcf	___awdiv@quotient+1,f,c
  5293  00177C  5017               	movf	___awdiv@divisor,w,c
  5294  00177E  5C15               	subwf	___awdiv@dividend,w,c
  5295  001780  5018               	movf	___awdiv@divisor+1,w,c
  5296  001782  5816               	subwfb	___awdiv@dividend+1,w,c
  5297  001784  A0D8               	btfss	status,0,c
  5298  001786  D006               	goto	l5551
  5299  001788  5017               	movf	___awdiv@divisor,w,c
  5300  00178A  5E15               	subwf	___awdiv@dividend,f,c
  5301  00178C  5018               	movf	___awdiv@divisor+1,w,c
  5302  00178E  5A16               	subwfb	___awdiv@dividend+1,f,c
  5303  001790  801B               	bsf	___awdiv@quotient,0,c
  5304  001792  D000               	goto	l5551
  5305  001794                     l5551:
  5306  001794  90D8               	bcf	status,0,c
  5307  001796  3218               	rrcf	___awdiv@divisor+1,f,c
  5308  001798  3217               	rrcf	___awdiv@divisor,f,c
  5309  00179A  2E19               	decfsz	___awdiv@counter,f,c
  5310  00179C  D7EC               	goto	l5543
  5311  00179E  D000               	goto	l5555
  5312  0017A0                     l5555:
  5313  0017A0  501A               	movf	___awdiv@sign,w,c
  5314  0017A2  B4D8               	btfsc	status,2,c
  5315  0017A4  D005               	goto	l5559
  5316  0017A6  6C1B               	negf	___awdiv@quotient,c
  5317  0017A8  1E1C               	comf	___awdiv@quotient+1,f,c
  5318  0017AA  B0D8               	btfsc	status,0,c
  5319  0017AC  2A1C               	incf	___awdiv@quotient+1,f,c
  5320  0017AE  D000               	goto	l5559
  5321  0017B0                     l5559:
  5322  0017B0  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  5323  0017B4  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  5324  0017B8  D000               	goto	l952
  5325  0017BA                     l952:
  5326  0017BA  0012               	return		;funcret
  5327  0017BC                     __end_of___awdiv:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           intcon2	equ	0xFF1
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           postdec1	equ	0xFE5
  5340                           fsr1l	equ	0xFE1
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _Initialize_Screen *****************
  5348 ;; Defined at:
  5349 ;;		line 33 in file "Main_Screen.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;		None               void
  5356 ;; Registers used:
  5357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;Total ram usage:        0 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    8
  5370 ;; This function calls:
  5371 ;;		_LCD_Reset
  5372 ;;		_TFT_GreenTab_Initialize
  5373 ;;		_drawCircle
  5374 ;;		_drawtext
  5375 ;;		_fillScreen
  5376 ;;		_strcpy
  5377 ;; This function is called by:
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text16
  5383  000994                     __ptext16:
  5384                           	opt stack 0
  5385  000994                     _Initialize_Screen:
  5386                           	opt stack 22
  5387                           
  5388                           ;Main_Screen.c: 35: LCD_Reset();
  5389                           
  5390                           ;incstack = 0
  5391  000994  EC18  F010         	call	_LCD_Reset	;wreg free
  5392                           
  5393                           ;Main_Screen.c: 36: TFT_GreenTab_Initialize();
  5394  000998  EC72  F00F         	call	_TFT_GreenTab_Initialize	;wreg free
  5395                           
  5396                           ;Main_Screen.c: 37: fillScreen(0x0000);
  5397  00099C  0E00               	movlw	0
  5398  00099E  6E23               	movwf	fillScreen@color+1,c
  5399  0009A0  0E00               	movlw	0
  5400  0009A2  6E22               	movwf	fillScreen@color,c
  5401  0009A4  ECDE  F00F         	call	_fillScreen	;wreg free
  5402                           
  5403                           ;Main_Screen.c: 38: txt = buffer;
  5404  0009A8  0E15               	movlw	low _buffer
  5405  0009AA  6E50               	movwf	_txt,c
  5406  0009AC  0E01               	movlw	high _buffer
  5407  0009AE  6E51               	movwf	_txt+1,c
  5408                           
  5409                           ;Main_Screen.c: 39: strcpy(txt, "ECE3301L Spring 22-S?");
  5410  0009B0  C050  F00F         	movff	_txt,strcpy@to
  5411  0009B4  C051  F010         	movff	_txt+1,strcpy@to+1
  5412  0009B8  0E4A               	movlw	low STR_13
  5413  0009BA  6E11               	movwf	strcpy@from,c
  5414  0009BC  0EFF               	movlw	high STR_13
  5415  0009BE  6E12               	movwf	strcpy@from+1,c
  5416  0009C0  EC41  F00F         	call	_strcpy	;wreg free
  5417                           
  5418                           ;Main_Screen.c: 41: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5419  0009C4  0E01               	movlw	1
  5420  0009C6  6E37               	movwf	drawtext@y,c
  5421  0009C8  C050  F038         	movff	_txt,drawtext@_text
  5422  0009CC  C051  F039         	movff	_txt+1,drawtext@_text+1
  5423  0009D0  0EFF               	movlw	255
  5424  0009D2  6E3B               	movwf	drawtext@color+1,c
  5425  0009D4  683A               	setf	drawtext@color,c
  5426  0009D6  0E00               	movlw	0
  5427  0009D8  6E3D               	movwf	drawtext@bg+1,c
  5428  0009DA  0E00               	movlw	0
  5429  0009DC  6E3C               	movwf	drawtext@bg,c
  5430  0009DE  0E01               	movlw	1
  5431  0009E0  6E3E               	movwf	drawtext@size,c
  5432  0009E2  0E01               	movlw	1
  5433  0009E4  EC09  F008         	call	_drawtext
  5434                           
  5435                           ;Main_Screen.c: 43: strcpy(txt, "Temperature:");
  5436  0009E8  C050  F00F         	movff	_txt,strcpy@to
  5437  0009EC  C051  F010         	movff	_txt+1,strcpy@to+1
  5438  0009F0  0ECF               	movlw	low STR_14
  5439  0009F2  6E11               	movwf	strcpy@from,c
  5440  0009F4  0EFF               	movlw	high STR_14
  5441  0009F6  6E12               	movwf	strcpy@from+1,c
  5442  0009F8  EC41  F00F         	call	_strcpy	;wreg free
  5443                           
  5444                           ;Main_Screen.c: 44: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5445  0009FC  0E0B               	movlw	11
  5446  0009FE  6E37               	movwf	drawtext@y,c
  5447  000A00  C050  F038         	movff	_txt,drawtext@_text
  5448  000A04  C051  F039         	movff	_txt+1,drawtext@_text+1
  5449  000A08  0EF8               	movlw	248
  5450  000A0A  6E3B               	movwf	drawtext@color+1,c
  5451  000A0C  0E1F               	movlw	31
  5452  000A0E  6E3A               	movwf	drawtext@color,c
  5453  000A10  0E00               	movlw	0
  5454  000A12  6E3D               	movwf	drawtext@bg+1,c
  5455  000A14  0E00               	movlw	0
  5456  000A16  6E3C               	movwf	drawtext@bg,c
  5457  000A18  0E01               	movlw	1
  5458  000A1A  6E3E               	movwf	drawtext@size,c
  5459  000A1C  0E18               	movlw	24
  5460  000A1E  EC09  F008         	call	_drawtext
  5461                           
  5462                           ;Main_Screen.c: 45: drawCircle(40, 23 , 2 , 0xFFE0);
  5463  000A22  0E00               	movlw	0
  5464  000A24  6E1B               	movwf	drawCircle@x0+1,c
  5465  000A26  0E28               	movlw	40
  5466  000A28  6E1A               	movwf	drawCircle@x0,c
  5467  000A2A  0E00               	movlw	0
  5468  000A2C  6E1D               	movwf	drawCircle@y0+1,c
  5469  000A2E  0E17               	movlw	23
  5470  000A30  6E1C               	movwf	drawCircle@y0,c
  5471  000A32  0E00               	movlw	0
  5472  000A34  6E1F               	movwf	drawCircle@r+1,c
  5473  000A36  0E02               	movlw	2
  5474  000A38  6E1E               	movwf	drawCircle@r,c
  5475  000A3A  0EFF               	movlw	255
  5476  000A3C  6E21               	movwf	drawCircle@color+1,c
  5477  000A3E  0EE0               	movlw	224
  5478  000A40  6E20               	movwf	drawCircle@color,c
  5479  000A42  ECFF  F005         	call	_drawCircle	;wreg free
  5480                           
  5481                           ;Main_Screen.c: 46: strcpy(txt, "C/");
  5482  000A46  C050  F00F         	movff	_txt,strcpy@to
  5483  000A4A  C051  F010         	movff	_txt+1,strcpy@to+1
  5484  000A4E  0EF8               	movlw	low STR_15
  5485  000A50  6E11               	movwf	strcpy@from,c
  5486  000A52  0EFF               	movlw	high STR_15
  5487  000A54  6E12               	movwf	strcpy@from+1,c
  5488  000A56  EC41  F00F         	call	_strcpy	;wreg free
  5489                           
  5490                           ;Main_Screen.c: 47: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5491  000A5A  0E17               	movlw	23
  5492  000A5C  6E37               	movwf	drawtext@y,c
  5493  000A5E  C050  F038         	movff	_txt,drawtext@_text
  5494  000A62  C051  F039         	movff	_txt+1,drawtext@_text+1
  5495  000A66  0EFF               	movlw	255
  5496  000A68  6E3B               	movwf	drawtext@color+1,c
  5497  000A6A  0EE0               	movlw	224
  5498  000A6C  6E3A               	movwf	drawtext@color,c
  5499  000A6E  0E00               	movlw	0
  5500  000A70  6E3D               	movwf	drawtext@bg+1,c
  5501  000A72  0E00               	movlw	0
  5502  000A74  6E3C               	movwf	drawtext@bg,c
  5503  000A76  0E02               	movlw	2
  5504  000A78  6E3E               	movwf	drawtext@size,c
  5505  000A7A  0E2D               	movlw	45
  5506  000A7C  EC09  F008         	call	_drawtext
  5507                           
  5508                           ;Main_Screen.c: 48: strcpy(txt, "F");
  5509  000A80  C050  F00F         	movff	_txt,strcpy@to
  5510  000A84  C051  F010         	movff	_txt+1,strcpy@to+1
  5511  000A88  0EF2               	movlw	low (STR_23+2)
  5512  000A8A  6E11               	movwf	strcpy@from,c
  5513  000A8C  0EFF               	movlw	high (STR_23+2)
  5514  000A8E  6E12               	movwf	strcpy@from+1,c
  5515  000A90  EC41  F00F         	call	_strcpy	;wreg free
  5516                           
  5517                           ;Main_Screen.c: 49: drawCircle(110, 23 , 2 , 0xFFE0);
  5518  000A94  0E00               	movlw	0
  5519  000A96  6E1B               	movwf	drawCircle@x0+1,c
  5520  000A98  0E6E               	movlw	110
  5521  000A9A  6E1A               	movwf	drawCircle@x0,c
  5522  000A9C  0E00               	movlw	0
  5523  000A9E  6E1D               	movwf	drawCircle@y0+1,c
  5524  000AA0  0E17               	movlw	23
  5525  000AA2  6E1C               	movwf	drawCircle@y0,c
  5526  000AA4  0E00               	movlw	0
  5527  000AA6  6E1F               	movwf	drawCircle@r+1,c
  5528  000AA8  0E02               	movlw	2
  5529  000AAA  6E1E               	movwf	drawCircle@r,c
  5530  000AAC  0EFF               	movlw	255
  5531  000AAE  6E21               	movwf	drawCircle@color+1,c
  5532  000AB0  0EE0               	movlw	224
  5533  000AB2  6E20               	movwf	drawCircle@color,c
  5534  000AB4  ECFF  F005         	call	_drawCircle	;wreg free
  5535                           
  5536                           ;Main_Screen.c: 50: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5537  000AB8  0E17               	movlw	23
  5538  000ABA  6E37               	movwf	drawtext@y,c
  5539  000ABC  C050  F038         	movff	_txt,drawtext@_text
  5540  000AC0  C051  F039         	movff	_txt+1,drawtext@_text+1
  5541  000AC4  0EFF               	movlw	255
  5542  000AC6  6E3B               	movwf	drawtext@color+1,c
  5543  000AC8  0EE0               	movlw	224
  5544  000ACA  6E3A               	movwf	drawtext@color,c
  5545  000ACC  0E00               	movlw	0
  5546  000ACE  6E3D               	movwf	drawtext@bg+1,c
  5547  000AD0  0E00               	movlw	0
  5548  000AD2  6E3C               	movwf	drawtext@bg,c
  5549  000AD4  0E02               	movlw	2
  5550  000AD6  6E3E               	movwf	drawtext@size,c
  5551  000AD8  0E73               	movlw	115
  5552  000ADA  EC09  F008         	call	_drawtext
  5553                           
  5554                           ;Main_Screen.c: 51: strcpy(txt, "Time");
  5555  000ADE  C050  F00F         	movff	_txt,strcpy@to
  5556  000AE2  C051  F010         	movff	_txt+1,strcpy@to+1
  5557  000AE6  0EE2               	movlw	low STR_17
  5558  000AE8  6E11               	movwf	strcpy@from,c
  5559  000AEA  0EFF               	movlw	high STR_17
  5560  000AEC  6E12               	movwf	strcpy@from+1,c
  5561  000AEE  EC41  F00F         	call	_strcpy	;wreg free
  5562                           
  5563                           ;Main_Screen.c: 52: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5564  000AF2  0E28               	movlw	40
  5565  000AF4  6E37               	movwf	drawtext@y,c
  5566  000AF6  C050  F038         	movff	_txt,drawtext@_text
  5567  000AFA  C051  F039         	movff	_txt+1,drawtext@_text+1
  5568  000AFE  0E00               	movlw	0
  5569  000B00  6E3B               	movwf	drawtext@color+1,c
  5570  000B02  0E1F               	movlw	31
  5571  000B04  6E3A               	movwf	drawtext@color,c
  5572  000B06  0E00               	movlw	0
  5573  000B08  6E3D               	movwf	drawtext@bg+1,c
  5574  000B0A  0E00               	movlw	0
  5575  000B0C  6E3C               	movwf	drawtext@bg,c
  5576  000B0E  0E01               	movlw	1
  5577  000B10  6E3E               	movwf	drawtext@size,c
  5578  000B12  0E32               	movlw	50
  5579  000B14  EC09  F008         	call	_drawtext
  5580                           
  5581                           ;Main_Screen.c: 53: strcpy(txt, "Date");
  5582  000B18  C050  F00F         	movff	_txt,strcpy@to
  5583  000B1C  C051  F010         	movff	_txt+1,strcpy@to+1
  5584  000B20  0EE7               	movlw	low STR_18
  5585  000B22  6E11               	movwf	strcpy@from,c
  5586  000B24  0EFF               	movlw	high STR_18
  5587  000B26  6E12               	movwf	strcpy@from+1,c
  5588  000B28  EC41  F00F         	call	_strcpy	;wreg free
  5589                           
  5590                           ;Main_Screen.c: 54: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5591  000B2C  0E47               	movlw	71
  5592  000B2E  6E37               	movwf	drawtext@y,c
  5593  000B30  C050  F038         	movff	_txt,drawtext@_text
  5594  000B34  C051  F039         	movff	_txt+1,drawtext@_text+1
  5595  000B38  0EF8               	movlw	248
  5596  000B3A  6E3B               	movwf	drawtext@color+1,c
  5597  000B3C  0E00               	movlw	0
  5598  000B3E  6E3A               	movwf	drawtext@color,c
  5599  000B40  0E00               	movlw	0
  5600  000B42  6E3D               	movwf	drawtext@bg+1,c
  5601  000B44  0E00               	movlw	0
  5602  000B46  6E3C               	movwf	drawtext@bg,c
  5603  000B48  0E01               	movlw	1
  5604  000B4A  6E3E               	movwf	drawtext@size,c
  5605  000B4C  0E32               	movlw	50
  5606  000B4E  EC09  F008         	call	_drawtext
  5607                           
  5608                           ;Main_Screen.c: 57: strcpy(txt, "  FAN");
  5609  000B52  C050  F00F         	movff	_txt,strcpy@to
  5610  000B56  C051  F010         	movff	_txt+1,strcpy@to+1
  5611  000B5A  0EDC               	movlw	low STR_19
  5612  000B5C  6E11               	movwf	strcpy@from,c
  5613  000B5E  0EFF               	movlw	high STR_19
  5614  000B60  6E12               	movwf	strcpy@from+1,c
  5615  000B62  EC41  F00F         	call	_strcpy	;wreg free
  5616                           
  5617                           ;Main_Screen.c: 58: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5618  000B66  0E78               	movlw	120
  5619  000B68  6E37               	movwf	drawtext@y,c
  5620  000B6A  C050  F038         	movff	_txt,drawtext@_text
  5621  000B6E  C051  F039         	movff	_txt+1,drawtext@_text+1
  5622  000B72  0E00               	movlw	0
  5623  000B74  6E3B               	movwf	drawtext@color+1,c
  5624  000B76  0E1F               	movlw	31
  5625  000B78  6E3A               	movwf	drawtext@color,c
  5626  000B7A  0E00               	movlw	0
  5627  000B7C  6E3D               	movwf	drawtext@bg+1,c
  5628  000B7E  0E00               	movlw	0
  5629  000B80  6E3C               	movwf	drawtext@bg,c
  5630  000B82  0E01               	movlw	1
  5631  000B84  6E3E               	movwf	drawtext@size,c
  5632  000B86  0E55               	movlw	85
  5633  000B88  EC09  F008         	call	_drawtext
  5634                           
  5635                           ;Main_Screen.c: 60: strcpy(txt, "DC");
  5636  000B8C  C050  F00F         	movff	_txt,strcpy@to
  5637  000B90  C051  F010         	movff	_txt+1,strcpy@to+1
  5638  000B94  0EFB               	movlw	low STR_20
  5639  000B96  6E11               	movwf	strcpy@from,c
  5640  000B98  0EFF               	movlw	high STR_20
  5641  000B9A  6E12               	movwf	strcpy@from+1,c
  5642  000B9C  EC41  F00F         	call	_strcpy	;wreg free
  5643                           
  5644                           ;Main_Screen.c: 61: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5645  000BA0  0E8C               	movlw	140
  5646  000BA2  6E37               	movwf	drawtext@y,c
  5647  000BA4  C050  F038         	movff	_txt,drawtext@_text
  5648  000BA8  C051  F039         	movff	_txt+1,drawtext@_text+1
  5649  000BAC  0EFF               	movlw	255
  5650  000BAE  6E3B               	movwf	drawtext@color+1,c
  5651  000BB0  683A               	setf	drawtext@color,c
  5652  000BB2  0E00               	movlw	0
  5653  000BB4  6E3D               	movwf	drawtext@bg+1,c
  5654  000BB6  0E00               	movlw	0
  5655  000BB8  6E3C               	movwf	drawtext@bg,c
  5656  000BBA  0E01               	movlw	1
  5657  000BBC  6E3E               	movwf	drawtext@size,c
  5658  000BBE  0E0C               	movlw	12
  5659  000BC0  EC09  F008         	call	_drawtext
  5660                           
  5661                           ;Main_Screen.c: 63: strcpy(txt, "RPM");
  5662  000BC4  C050  F00F         	movff	_txt,strcpy@to
  5663  000BC8  C051  F010         	movff	_txt+1,strcpy@to+1
  5664  000BCC  0EF4               	movlw	low STR_21
  5665  000BCE  6E11               	movwf	strcpy@from,c
  5666  000BD0  0EFF               	movlw	high STR_21
  5667  000BD2  6E12               	movwf	strcpy@from+1,c
  5668  000BD4  EC41  F00F         	call	_strcpy	;wreg free
  5669                           
  5670                           ;Main_Screen.c: 64: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5671  000BD8  0E8C               	movlw	140
  5672  000BDA  6E37               	movwf	drawtext@y,c
  5673  000BDC  C050  F038         	movff	_txt,drawtext@_text
  5674  000BE0  C051  F039         	movff	_txt+1,drawtext@_text+1
  5675  000BE4  0EFF               	movlw	255
  5676  000BE6  6E3B               	movwf	drawtext@color+1,c
  5677  000BE8  683A               	setf	drawtext@color,c
  5678  000BEA  0E00               	movlw	0
  5679  000BEC  6E3D               	movwf	drawtext@bg+1,c
  5680  000BEE  0E00               	movlw	0
  5681  000BF0  6E3C               	movwf	drawtext@bg,c
  5682  000BF2  0E01               	movlw	1
  5683  000BF4  6E3E               	movwf	drawtext@size,c
  5684  000BF6  0E5F               	movlw	95
  5685  000BF8  EC09  F008         	call	_drawtext
  5686  000BFC  0012               	return		;funcret
  5687  000BFE                     __end_of_Initialize_Screen:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           intcon2	equ	0xFF1
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1l	equ	0xFE1
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _strcpy *****************
  5708 ;; Defined at:
  5709 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  to              2   14[COMRAM] PTR unsigned char 
  5712 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5713 ;;  from            2   16[COMRAM] PTR const unsigned char 
  5714 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(3), 
  5715 ;;		 -> STR_19(6), STR_18(5), STR_17(5), STR_16(2), 
  5716 ;;		 -> STR_15(3), STR_14(13), STR_13(22), 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  cp              2   18[COMRAM] PTR unsigned char 
  5719 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  2   14[COMRAM] PTR unsigned char 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;Total ram usage:        6 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_Initialize_Screen
  5740 ;;		_Update_Screen
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           	psect	text17
  5745  001E82                     __ptext17:
  5746                           	opt stack 0
  5747  001E82                     _strcpy:
  5748                           	opt stack 28
  5749                           
  5750                           ;incstack = 0
  5751  001E82  C00F  F013         	movff	strcpy@to,strcpy@cp
  5752  001E86  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  5753  001E8A  D005               	goto	l5411
  5754  001E8C                     l5409:
  5755  001E8C  4A13               	infsnz	strcpy@cp,f,c
  5756  001E8E  2A14               	incf	strcpy@cp+1,f,c
  5757  001E90  4A11               	infsnz	strcpy@from,f,c
  5758  001E92  2A12               	incf	strcpy@from+1,f,c
  5759  001E94  D000               	goto	l5411
  5760  001E96                     l5411:
  5761  001E96  C011  FFF6         	movff	strcpy@from,tblptrl
  5762  001E9A  C012  FFF7         	movff	strcpy@from+1,tblptrh
  5763  001E9E                     	if	0	;tblptru may be non-zero
  5764  001E9E                     	endif
  5765  001E9E                     	if	0	;tblptru may be non-zero
  5766  001E9E                     	endif
  5767  001E9E  C013  FFD9         	movff	strcpy@cp,fsr2l
  5768  001EA2  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  5769  001EA6  0008               	tblrd		*
  5770  001EA8  CFF5 FFDF          	movff	tablat,indf2
  5771  001EAC  50DF               	movf	indf2,w,c
  5772  001EAE  A4D8               	btfss	status,2,c
  5773  001EB0  D7ED               	goto	l5409
  5774                           
  5775                           ;	Return value of _strcpy is never used
  5776  001EB2  0012               	return		;funcret
  5777  001EB4                     __end_of_strcpy:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon2	equ	0xFF1
  5787                           postinc0	equ	0xFEE
  5788                           wreg	equ	0xFE8
  5789                           postdec1	equ	0xFE5
  5790                           fsr1l	equ	0xFE1
  5791                           indf2	equ	0xFDF
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _fillScreen *****************
  5799 ;; Defined at:
  5800 ;;		line 620 in file "ST7735_TFT.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  color           2   33[COMRAM] unsigned int 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;		None               void
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5814 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;Total ram usage:        2 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    5
  5821 ;; This function calls:
  5822 ;;		_fillRectangle
  5823 ;; This function is called by:
  5824 ;;		_Initialize_Screen
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text18
  5829  001FBC                     __ptext18:
  5830                           	opt stack 0
  5831  001FBC                     _fillScreen:
  5832                           	opt stack 24
  5833                           
  5834                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5835                           
  5836                           ;incstack = 0
  5837  001FBC  0E00               	movlw	0
  5838  001FBE  6E16               	movwf	fillRectangle@y,c
  5839  001FC0  0E80               	movlw	128
  5840  001FC2  6E17               	movwf	fillRectangle@w,c
  5841  001FC4  0EA0               	movlw	160
  5842  001FC6  6E18               	movwf	fillRectangle@h,c
  5843  001FC8  C022  F019         	movff	fillScreen@color,fillRectangle@color
  5844  001FCC  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  5845  001FD0  0E00               	movlw	0
  5846  001FD2  EC67  F00A         	call	_fillRectangle
  5847  001FD6  0012               	return		;funcret
  5848  001FD8                     __end_of_fillScreen:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           intcon	equ	0xFF2
  5857                           intcon2	equ	0xFF1
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           postdec1	equ	0xFE5
  5861                           fsr1l	equ	0xFE1
  5862                           indf2	equ	0xFDF
  5863                           postinc2	equ	0xFDE
  5864                           postdec2	equ	0xFDD
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _fillRectangle *****************
  5870 ;; Defined at:
  5871 ;;		line 504 in file "ST7735_TFT.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  x               1    wreg     unsigned char 
  5874 ;;  y               1   21[COMRAM] unsigned char 
  5875 ;;  w               1   22[COMRAM] unsigned char 
  5876 ;;  h               1   23[COMRAM] unsigned char 
  5877 ;;  color           2   24[COMRAM] unsigned int 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  x               1   32[COMRAM] unsigned char 
  5880 ;;  lo              1   31[COMRAM] unsigned char 
  5881 ;;  hi              1   30[COMRAM] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;		None               void
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, status,0, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5891 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;Total ram usage:       12 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    4
  5898 ;; This function calls:
  5899 ;;		_setAddrWindow
  5900 ;;		_spiwrite
  5901 ;; This function is called by:
  5902 ;;		_fillScreen
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text19
  5907  0014CE                     __ptext19:
  5908                           	opt stack 0
  5909  0014CE                     _fillRectangle:
  5910                           	opt stack 24
  5911                           
  5912                           ;incstack = 0
  5913                           ;fillRectangle@x stored from wreg
  5914  0014CE  6E21               	movwf	fillRectangle@x,c
  5915                           
  5916                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5917                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5918  0014D0  0E80               	movlw	128
  5919  0014D2  6021               	cpfslt	fillRectangle@x,c
  5920  0014D4  D069               	goto	l148
  5921  0014D6  0E9F               	movlw	159
  5922  0014D8  6416               	cpfsgt	fillRectangle@y,c
  5923  0014DA  D001               	goto	l5091
  5924                           
  5925                           ;ST7735_TFT.c: 508: return;
  5926  0014DC  D065               	goto	l148
  5927  0014DE                     l5091:
  5928                           
  5929                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5930  0014DE  0EFF               	movlw	255
  5931  0014E0  6E1B               	movwf	??_fillRectangle& (0+255),c
  5932  0014E2  0EFF               	movlw	255
  5933  0014E4  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  5934  0014E6  5017               	movf	fillRectangle@w,w,c
  5935  0014E8  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  5936  0014EC  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  5937  0014EE  261D               	addwf	??_fillRectangle+2,f,c
  5938  0014F0  0E00               	movlw	0
  5939  0014F2  221E               	addwfc	??_fillRectangle+3,f,c
  5940  0014F4  501B               	movf	??_fillRectangle,w,c
  5941  0014F6  261D               	addwf	??_fillRectangle+2,f,c
  5942  0014F8  501C               	movf	??_fillRectangle+1,w,c
  5943  0014FA  221E               	addwfc	??_fillRectangle+3,f,c
  5944  0014FC  BE1E               	btfsc	??_fillRectangle+3,7,c
  5945  0014FE  D00A               	goto	l149
  5946  001500  501E               	movf	??_fillRectangle+3,w,c
  5947  001502  E104               	bnz	u3580
  5948  001504  0E80               	movlw	128
  5949  001506  5C1D               	subwf	??_fillRectangle+2,w,c
  5950  001508  A0D8               	btfss	status,0,c
  5951  00150A  D004               	goto	l149
  5952  00150C                     u3580:
  5953                           
  5954                           ;ST7735_TFT.c: 510: w = 128 - x;
  5955  00150C  5021               	movf	fillRectangle@x,w,c
  5956  00150E  0800               	sublw	0
  5957  001510  0F80               	addlw	128
  5958  001512  6E17               	movwf	fillRectangle@w,c
  5959  001514                     l149:
  5960                           
  5961                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5962  001514  0EFF               	movlw	255
  5963  001516  6E1B               	movwf	??_fillRectangle& (0+255),c
  5964  001518  0EFF               	movlw	255
  5965  00151A  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  5966  00151C  5018               	movf	fillRectangle@h,w,c
  5967  00151E  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  5968  001522  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  5969  001524  261D               	addwf	??_fillRectangle+2,f,c
  5970  001526  0E00               	movlw	0
  5971  001528  221E               	addwfc	??_fillRectangle+3,f,c
  5972  00152A  501B               	movf	??_fillRectangle,w,c
  5973  00152C  261D               	addwf	??_fillRectangle+2,f,c
  5974  00152E  501C               	movf	??_fillRectangle+1,w,c
  5975  001530  221E               	addwfc	??_fillRectangle+3,f,c
  5976  001532  BE1E               	btfsc	??_fillRectangle+3,7,c
  5977  001534  D00B               	goto	l5097
  5978  001536  501E               	movf	??_fillRectangle+3,w,c
  5979  001538  E104               	bnz	u3590
  5980  00153A  0EA0               	movlw	160
  5981  00153C  5C1D               	subwf	??_fillRectangle+2,w,c
  5982  00153E  A0D8               	btfss	status,0,c
  5983  001540  D005               	goto	l5097
  5984  001542                     u3590:
  5985                           
  5986                           ;ST7735_TFT.c: 512: h = 160 - y;
  5987  001542  5016               	movf	fillRectangle@y,w,c
  5988  001544  0800               	sublw	0
  5989  001546  0FA0               	addlw	160
  5990  001548  6E18               	movwf	fillRectangle@h,c
  5991  00154A  D000               	goto	l5097
  5992  00154C                     l5097:
  5993                           
  5994                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5995  00154C  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  5996  001550  5021               	movf	fillRectangle@x,w,c
  5997  001552  2417               	addwf	fillRectangle@w,w,c
  5998  001554  6E1B               	movwf	??_fillRectangle& (0+255),c
  5999  001556  041B               	decf	??_fillRectangle,w,c
  6000  001558  6E13               	movwf	setAddrWindow@x1,c
  6001  00155A  5016               	movf	fillRectangle@y,w,c
  6002  00155C  2418               	addwf	fillRectangle@h,w,c
  6003  00155E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  6004  001560  041C               	decf	??_fillRectangle+1,w,c
  6005  001562  6E14               	movwf	setAddrWindow@y1,c
  6006  001564  5021               	movf	fillRectangle@x,w,c
  6007  001566  ECD2  F00D         	call	_setAddrWindow
  6008                           
  6009                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  6010  00156A  501A               	movf	fillRectangle@color+1,w,c
  6011  00156C  6E1F               	movwf	fillRectangle@hi,c
  6012  00156E  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  6013                           
  6014                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
  6015  001572  8083               	bsf	3971,0,c	;volatile
  6016                           
  6017                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
  6018  001574  9283               	bcf	3971,1,c	;volatile
  6019                           
  6020                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  6021  001576  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  6022  00157A                     l5109:
  6023  00157A  5016               	movf	fillRectangle@y,w,c
  6024  00157C  B4D8               	btfsc	status,2,c
  6025  00157E  D013               	goto	l152
  6026  001580  D001               	goto	l151
  6027  001582  D011               	goto	l152
  6028  001584                     l151:
  6029                           
  6030                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  6031  001584  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  6032  001588                     l5113:
  6033  001588  5021               	movf	fillRectangle@x,w,c
  6034  00158A  B4D8               	btfsc	status,2,c
  6035  00158C  D00A               	goto	l5123
  6036  00158E  D001               	goto	l5117
  6037  001590  D008               	goto	l5123
  6038  001592                     l5117:
  6039                           
  6040                           ;ST7735_TFT.c: 520: spiwrite(hi);
  6041  001592  501F               	movf	fillRectangle@hi,w,c
  6042  001594  EC04  F010         	call	_spiwrite
  6043                           
  6044                           ;ST7735_TFT.c: 521: spiwrite(lo);
  6045  001598  5020               	movf	fillRectangle@lo,w,c
  6046  00159A  EC04  F010         	call	_spiwrite
  6047  00159E  0621               	decf	fillRectangle@x,f,c
  6048  0015A0  D7F3               	goto	l5113
  6049  0015A2                     l5123:
  6050  0015A2  0616               	decf	fillRectangle@y,f,c
  6051  0015A4  D7EA               	goto	l5109
  6052  0015A6                     l152:
  6053                           
  6054                           ;ST7735_TFT.c: 522: }
  6055                           ;ST7735_TFT.c: 523: }
  6056                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
  6057  0015A6  8283               	bsf	3971,1,c	;volatile
  6058  0015A8                     l148:
  6059  0015A8  0012               	return		;funcret
  6060  0015AA                     __end_of_fillRectangle:
  6061                           	opt stack 0
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           intcon2	equ	0xFF1
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           postdec1	equ	0xFE5
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function _drawtext *****************
  6082 ;; Defined at:
  6083 ;;		line 475 in file "ST7735_TFT.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  x               1    wreg     unsigned char 
  6086 ;;  y               1   54[COMRAM] unsigned char 
  6087 ;;  _text           2   55[COMRAM] PTR unsigned char 
  6088 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6089 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6090 ;;		 -> buffer(33), 
  6091 ;;  color           2   57[COMRAM] unsigned int 
  6092 ;;  bg              2   59[COMRAM] unsigned int 
  6093 ;;  size            1   61[COMRAM] unsigned char 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  x               1    0[BANK0 ] unsigned char 
  6096 ;;  i               2    3[BANK0 ] unsigned int 
  6097 ;;  textsize        2    1[BANK0 ] unsigned int 
  6098 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  6099 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;		None               void
  6102 ;; Registers used:
  6103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:       17 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    7
  6116 ;; This function calls:
  6117 ;;		_drawChar
  6118 ;;		_strlen
  6119 ;; This function is called by:
  6120 ;;		_Initialize_Screen
  6121 ;;		_Update_Screen
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text20
  6126  001012                     __ptext20:
  6127                           	opt stack 0
  6128  001012                     _drawtext:
  6129                           	opt stack 22
  6130                           
  6131                           ;incstack = 0
  6132                           ;drawtext@x stored from wreg
  6133  001012  0100               	movlb	0	; () banked
  6134  001014  6FE6               	movwf	drawtext@x& (0+255),b
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  6138                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  6139                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  6140  001016  C0E6  F0EC         	movff	drawtext@x,drawtext@cursor_x
  6141                           
  6142                           ; BSR set to: 0
  6143  00101A  C037  F0EB         	movff	drawtext@y,drawtext@cursor_y
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  6147  00101E  C038  F00F         	movff	drawtext@_text,strlen@s
  6148  001022  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  6149  001026  ECAB  F00E         	call	_strlen	;wreg free
  6150  00102A  C00F  F0E7         	movff	?_strlen,drawtext@textsize
  6151  00102E  C010  F0E8         	movff	?_strlen+1,drawtext@textsize+1
  6152                           
  6153                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  6154  001032  0E00               	movlw	0
  6155  001034  0100               	movlb	0	; () banked
  6156  001036  6FEA               	movwf	(drawtext@i+1)& (0+255),b
  6157  001038  0E00               	movlw	0
  6158  00103A  6FE9               	movwf	drawtext@i& (0+255),b
  6159  00103C  D064               	goto	l5281
  6160  00103E                     l5255:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  6164  00103E  5071               	movf	_wrap,w,c
  6165  001040  B4D8               	btfsc	status,2,c
  6166  001042  D034               	goto	l5271
  6167                           
  6168                           ; BSR set to: 0
  6169  001044  503E               	movf	drawtext@size,w,c
  6170  001046  0D05               	mullw	5
  6171  001048  0100               	movlb	0	; () banked
  6172  00104A  51EC               	movf	drawtext@cursor_x& (0+255),w,b
  6173  00104C  6E3F               	movwf	??_drawtext& (0+255),c
  6174  00104E  6A40               	clrf	(??_drawtext+1)& (0+255),c
  6175  001050  50F3               	movf	prodl,w,c
  6176  001052  263F               	addwf	??_drawtext,f,c
  6177  001054  50F4               	movf	prodh,w,c
  6178  001056  2240               	addwfc	??_drawtext+1,f,c
  6179  001058  BE40               	btfsc	??_drawtext+1,7,c
  6180  00105A  D028               	goto	l5271
  6181  00105C  5040               	movf	??_drawtext+1,w,c
  6182  00105E  E104               	bnz	u3830
  6183  001060  0E81               	movlw	129
  6184  001062  5C3F               	subwf	??_drawtext,w,c
  6185  001064  A0D8               	btfss	status,0,c
  6186  001066  D022               	goto	l5271
  6187  001068                     u3830:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;ST7735_TFT.c: 483: cursor_x = 0;
  6191  001068  0E00               	movlw	0
  6192  00106A  0100               	movlb	0	; () banked
  6193  00106C  6FEC               	movwf	drawtext@cursor_x& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  6197  00106E  503E               	movf	drawtext@size,w,c
  6198  001070  0D07               	mullw	7
  6199  001072  50F3               	movf	prodl,w,c
  6200  001074  0100               	movlb	0	; () banked
  6201  001076  25EB               	addwf	drawtext@cursor_y& (0+255),w,b
  6202  001078  0F03               	addlw	3
  6203  00107A  0100               	movlb	0	; () banked
  6204  00107C  6FEB               	movwf	drawtext@cursor_y& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  6208  00107E  0EA0               	movlw	160
  6209  001080  0100               	movlb	0	; () banked
  6210  001082  65EB               	cpfsgt	drawtext@cursor_y& (0+255),b
  6211  001084  D004               	goto	l5267
  6212                           
  6213                           ; BSR set to: 0
  6214  001086  0EA0               	movlw	160
  6215  001088  0100               	movlb	0	; () banked
  6216  00108A  6FEB               	movwf	drawtext@cursor_y& (0+255),b
  6217  00108C  D000               	goto	l5267
  6218  00108E                     l5267:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  6222  00108E  0100               	movlb	0	; () banked
  6223  001090  51E9               	movf	drawtext@i& (0+255),w,b
  6224  001092  2438               	addwf	drawtext@_text,w,c
  6225  001094  6ED9               	movwf	fsr2l,c
  6226  001096  0100               	movlb	0	; () banked
  6227  001098  51EA               	movf	(drawtext@i+1)& (0+255),w,b
  6228  00109A  2039               	addwfc	drawtext@_text+1,w,c
  6229  00109C  6EDA               	movwf	fsr2h,c
  6230  00109E  0E20               	movlw	32
  6231  0010A0  18DE               	xorwf	postinc2,w,c
  6232  0010A2  B4D8               	btfsc	status,2,c
  6233  0010A4  D02C               	goto	l5279
  6234  0010A6  D002               	goto	l5271
  6235                           
  6236                           ; BSR set to: 0
  6237  0010A8  D02A               	goto	l5279
  6238                           
  6239                           ; BSR set to: 0
  6240  0010AA  D000               	goto	l5271
  6241  0010AC                     l5271:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  6245  0010AC  C0EB  F02C         	movff	drawtext@cursor_y,drawChar@y
  6246  0010B0  0100               	movlb	0	; () banked
  6247  0010B2  51E9               	movf	drawtext@i& (0+255),w,b
  6248  0010B4  2438               	addwf	drawtext@_text,w,c
  6249  0010B6  6ED9               	movwf	fsr2l,c
  6250  0010B8  0100               	movlb	0	; () banked
  6251  0010BA  51EA               	movf	(drawtext@i+1)& (0+255),w,b
  6252  0010BC  2039               	addwfc	drawtext@_text+1,w,c
  6253  0010BE  6EDA               	movwf	fsr2h,c
  6254  0010C0  50DF               	movf	indf2,w,c
  6255  0010C2  6E2D               	movwf	drawChar@c,c
  6256  0010C4  C03A  F02E         	movff	drawtext@color,drawChar@color
  6257  0010C8  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  6258  0010CC  C03C  F030         	movff	drawtext@bg,drawChar@bg
  6259  0010D0  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  6260  0010D4  C03E  F032         	movff	drawtext@size,drawChar@size
  6261  0010D8  0100               	movlb	0	; () banked
  6262  0010DA  51EC               	movf	drawtext@cursor_x& (0+255),w,b
  6263  0010DC  ECD6  F006         	call	_drawChar
  6264                           
  6265                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  6266  0010E0  503E               	movf	drawtext@size,w,c
  6267  0010E2  0D06               	mullw	6
  6268  0010E4  50F3               	movf	prodl,w,c
  6269  0010E6  0100               	movlb	0	; () banked
  6270  0010E8  25EC               	addwf	drawtext@cursor_x& (0+255),w,b
  6271  0010EA  0100               	movlb	0	; () banked
  6272  0010EC  6FEC               	movwf	drawtext@cursor_x& (0+255),b
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  6276  0010EE  0E80               	movlw	128
  6277  0010F0  0100               	movlb	0	; () banked
  6278  0010F2  65EC               	cpfsgt	drawtext@cursor_x& (0+255),b
  6279  0010F4  D004               	goto	l5279
  6280                           
  6281                           ; BSR set to: 0
  6282  0010F6  0E80               	movlw	128
  6283  0010F8  0100               	movlb	0	; () banked
  6284  0010FA  6FEC               	movwf	drawtext@cursor_x& (0+255),b
  6285                           
  6286                           ; BSR set to: 0
  6287  0010FC  D000               	goto	l5279
  6288  0010FE                     l5279:
  6289                           
  6290                           ; BSR set to: 0
  6291  0010FE  0100               	movlb	0	; () banked
  6292  001100  4BE9               	infsnz	drawtext@i& (0+255),f,b
  6293  001102  2BEA               	incf	(drawtext@i+1)& (0+255),f,b
  6294  001104  D000               	goto	l5281
  6295  001106                     l5281:
  6296                           
  6297                           ; BSR set to: 0
  6298  001106  0100               	movlb	0	; () banked
  6299  001108  51E7               	movf	drawtext@textsize& (0+255),w,b
  6300  00110A  0100               	movlb	0	; () banked
  6301  00110C  5DE9               	subwf	drawtext@i& (0+255),w,b
  6302  00110E  0100               	movlb	0	; () banked
  6303  001110  51E8               	movf	(drawtext@textsize+1)& (0+255),w,b
  6304  001112  0100               	movlb	0	; () banked
  6305  001114  59EA               	subwfb	(drawtext@i+1)& (0+255),w,b
  6306  001116  A0D8               	btfss	status,0,c
  6307  001118  D792               	goto	l5255
  6308                           
  6309                           ; BSR set to: 0
  6310                           
  6311                           ; BSR set to: 0
  6312  00111A  0012               	return		;funcret
  6313  00111C                     __end_of_drawtext:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           intcon2	equ	0xFF1
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           postdec1	equ	0xFE5
  6326                           fsr1l	equ	0xFE1
  6327                           indf2	equ	0xFDF
  6328                           postinc2	equ	0xFDE
  6329                           postdec2	equ	0xFDD
  6330                           fsr2h	equ	0xFDA
  6331                           fsr2l	equ	0xFD9
  6332                           status	equ	0xFD8
  6333                           
  6334 ;; *************** function _strlen *****************
  6335 ;; Defined at:
  6336 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  s               2   14[COMRAM] PTR const unsigned char 
  6339 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6340 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6341 ;;		 -> buffer(33), 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  6344 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6345 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6346 ;;		 -> buffer(33), 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  2   14[COMRAM] unsigned int 
  6349 ;; Registers used:
  6350 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;Total ram usage:        6 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    1
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_drawtext
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text21
  6371  001D56                     __ptext21:
  6372                           	opt stack 0
  6373  001D56                     _strlen:
  6374                           	opt stack 27
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;incstack = 0
  6378  001D56  C00F  F013         	movff	strlen@s,strlen@cp
  6379  001D5A  C010  F014         	movff	strlen@s+1,strlen@cp+1
  6380  001D5E  D003               	goto	l5081
  6381  001D60                     l5079:
  6382  001D60  4A13               	infsnz	strlen@cp,f,c
  6383  001D62  2A14               	incf	strlen@cp+1,f,c
  6384  001D64  D000               	goto	l5081
  6385  001D66                     l5081:
  6386  001D66  C013  FFD9         	movff	strlen@cp,fsr2l
  6387  001D6A  C014  FFDA         	movff	strlen@cp+1,fsr2h
  6388  001D6E  50DF               	movf	indf2,w,c
  6389  001D70  A4D8               	btfss	status,2,c
  6390  001D72  D7F6               	goto	l5079
  6391  001D74  C00F  F011         	movff	strlen@s,??_strlen
  6392  001D78  C010  F012         	movff	strlen@s+1,??_strlen+1
  6393  001D7C  1E11               	comf	??_strlen,f,c
  6394  001D7E  1E12               	comf	??_strlen+1,f,c
  6395  001D80  4A11               	infsnz	??_strlen,f,c
  6396  001D82  2A12               	incf	??_strlen+1,f,c
  6397  001D84  5013               	movf	strlen@cp,w,c
  6398  001D86  2411               	addwf	??_strlen,w,c
  6399  001D88  6E0F               	movwf	?_strlen,c
  6400  001D8A  5014               	movf	strlen@cp+1,w,c
  6401  001D8C  2012               	addwfc	??_strlen+1,w,c
  6402  001D8E  6E10               	movwf	?_strlen+1,c
  6403  001D90  D000               	goto	l1321
  6404  001D92                     l1321:
  6405  001D92  0012               	return		;funcret
  6406  001D94                     __end_of_strlen:
  6407                           	opt stack 0
  6408                           tblptru	equ	0xFF8
  6409                           tblptrh	equ	0xFF7
  6410                           tblptrl	equ	0xFF6
  6411                           tablat	equ	0xFF5
  6412                           prodh	equ	0xFF4
  6413                           prodl	equ	0xFF3
  6414                           intcon	equ	0xFF2
  6415                           intcon2	equ	0xFF1
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _drawChar *****************
  6428 ;; Defined at:
  6429 ;;		line 448 in file "ST7735_TFT.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  x               1    wreg     unsigned char 
  6432 ;;  y               1   43[COMRAM] unsigned char 
  6433 ;;  c               1   44[COMRAM] unsigned char 
  6434 ;;  color           2   45[COMRAM] unsigned int 
  6435 ;;  bg              2   47[COMRAM] unsigned int 
  6436 ;;  size            1   49[COMRAM] unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  x               1   51[COMRAM] unsigned char 
  6439 ;;  line            1   50[COMRAM] unsigned char 
  6440 ;;  i               1   53[COMRAM] unsigned char 
  6441 ;;  j               1   52[COMRAM] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:       11 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    6
  6458 ;; This function calls:
  6459 ;;		___wmul
  6460 ;;		_drawPixel
  6461 ;;		_fillRect
  6462 ;; This function is called by:
  6463 ;;		_drawtext
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text22
  6468  000DAC                     __ptext22:
  6469                           	opt stack 0
  6470  000DAC                     _drawChar:
  6471                           	opt stack 22
  6472                           
  6473                           ;incstack = 0
  6474                           ;drawChar@x stored from wreg
  6475  000DAC  6E34               	movwf	drawChar@x,c
  6476                           
  6477                           ;ST7735_TFT.c: 450: char i, j;
  6478                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6479  000DAE  0E80               	movlw	128
  6480  000DB0  6034               	cpfslt	drawChar@x,c
  6481  000DB2  D0A6               	goto	l111
  6482  000DB4  0E9F               	movlw	159
  6483  000DB6  642C               	cpfsgt	drawChar@y,c
  6484  000DB8  D001               	goto	l5027
  6485                           
  6486                           ;ST7735_TFT.c: 452: return;
  6487  000DBA  D0A2               	goto	l111
  6488  000DBC                     l5027:
  6489                           
  6490                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6491  000DBC  5032               	movf	drawChar@size,w,c
  6492  000DBE  A4D8               	btfss	status,2,c
  6493  000DC0  D003               	goto	l5031
  6494  000DC2  0E01               	movlw	1
  6495  000DC4  6E32               	movwf	drawChar@size,c
  6496  000DC6  D000               	goto	l5031
  6497  000DC8                     l5031:
  6498                           
  6499                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6500  000DC8  0E1F               	movlw	31
  6501  000DCA  642D               	cpfsgt	drawChar@c,c
  6502  000DCC  D004               	goto	l5035
  6503  000DCE  0E7E               	movlw	126
  6504  000DD0  642D               	cpfsgt	drawChar@c,c
  6505  000DD2  D003               	goto	l113
  6506  000DD4  D000               	goto	l5035
  6507  000DD6                     l5035:
  6508                           
  6509                           ;ST7735_TFT.c: 455: c = '?';
  6510  000DD6  0E3F               	movlw	63
  6511  000DD8  6E2D               	movwf	drawChar@c,c
  6512  000DDA                     l113:
  6513                           
  6514                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6515  000DDA  0E00               	movlw	0
  6516  000DDC  6E36               	movwf	drawChar@i,c
  6517  000DDE                     l5037:
  6518  000DDE  0E04               	movlw	4
  6519  000DE0  6436               	cpfsgt	drawChar@i,c
  6520  000DE2  D001               	goto	l5041
  6521  000DE4  D08D               	goto	l111
  6522  000DE6                     l5041:
  6523                           
  6524                           ;ST7735_TFT.c: 457: unsigned char line;
  6525                           ;ST7735_TFT.c: 458: if(c < 'S')
  6526  000DE6  0E53               	movlw	83
  6527  000DE8  602D               	cpfslt	drawChar@c,c
  6528  000DEA  D015               	goto	l5045
  6529                           
  6530                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6531  000DEC  0EE0               	movlw	224
  6532  000DEE  242D               	addwf	drawChar@c,w,c
  6533  000DF0  6E0F               	movwf	___wmul@multiplier,c
  6534  000DF2  6A10               	clrf	___wmul@multiplier+1,c
  6535  000DF4  0EFF               	movlw	255
  6536  000DF6  2210               	addwfc	___wmul@multiplier+1,f,c
  6537  000DF8  0E00               	movlw	0
  6538  000DFA  6E12               	movwf	___wmul@multiplicand+1,c
  6539  000DFC  0E05               	movlw	5
  6540  000DFE  6E11               	movwf	___wmul@multiplicand,c
  6541  000E00  EC87  F00F         	call	___wmul	;wreg free
  6542  000E04  5036               	movf	drawChar@i,w,c
  6543  000E06  260F               	addwf	?___wmul,f,c
  6544  000E08  0E00               	movlw	0
  6545  000E0A  2210               	addwfc	?___wmul+1,f,c
  6546  000E0C  0E3F               	movlw	low _font
  6547  000E0E  240F               	addwf	?___wmul,w,c
  6548  000E10  6EF6               	movwf	tblptrl,c
  6549  000E12  0EFD               	movlw	high _font
  6550  000E14  D014               	goto	L3
  6551  000E16                     l5045:
  6552                           
  6553                           ;ST7735_TFT.c: 460: else
  6554                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6555  000E16  0EAD               	movlw	173
  6556  000E18  242D               	addwf	drawChar@c,w,c
  6557  000E1A  6E0F               	movwf	___wmul@multiplier,c
  6558  000E1C  6A10               	clrf	___wmul@multiplier+1,c
  6559  000E1E  0EFF               	movlw	255
  6560  000E20  2210               	addwfc	___wmul@multiplier+1,f,c
  6561  000E22  0E00               	movlw	0
  6562  000E24  6E12               	movwf	___wmul@multiplicand+1,c
  6563  000E26  0E05               	movlw	5
  6564  000E28  6E11               	movwf	___wmul@multiplicand,c
  6565  000E2A  EC87  F00F         	call	___wmul	;wreg free
  6566  000E2E  5036               	movf	drawChar@i,w,c
  6567  000E30  260F               	addwf	?___wmul,f,c
  6568  000E32  0E00               	movlw	0
  6569  000E34  2210               	addwfc	?___wmul+1,f,c
  6570  000E36  0E3E               	movlw	low _font2
  6571  000E38  240F               	addwf	?___wmul,w,c
  6572  000E3A  6EF6               	movwf	tblptrl,c
  6573  000E3C  0EFE               	movlw	high _font2
  6574  000E3E                     L3:
  6575  000E3E  2010               	addwfc	?___wmul+1,w,c
  6576  000E40  6EF7               	movwf	tblptrh,c
  6577  000E42                     	if	0	;There are less than 3 active tblptr bytes
  6578  000E42                     	endif
  6579  000E42  0008               	tblrd		*
  6580  000E44  CFF5 F033          	movff	tablat,drawChar@line
  6581  000E48  D000               	goto	l5047
  6582  000E4A                     l5047:
  6583                           
  6584                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6585  000E4A  0E00               	movlw	0
  6586  000E4C  6E35               	movwf	drawChar@j,c
  6587  000E4E                     l5049:
  6588  000E4E  0E06               	movlw	6
  6589  000E50  6435               	cpfsgt	drawChar@j,c
  6590  000E52  D001               	goto	l120
  6591  000E54  D053               	goto	l5073
  6592  000E56                     l120:
  6593                           
  6594                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6595  000E56  A033               	btfss	drawChar@line,0,c
  6596  000E58  D023               	goto	l5059
  6597                           
  6598                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6599  000E5A  0432               	decf	drawChar@size,w,c
  6600  000E5C  A4D8               	btfss	status,2,c
  6601  000E5E  D00C               	goto	l5057
  6602  000E60  502C               	movf	drawChar@y,w,c
  6603  000E62  2435               	addwf	drawChar@j,w,c
  6604  000E64  6E16               	movwf	drawPixel@y,c
  6605  000E66  C02E  F017         	movff	drawChar@color,drawPixel@color
  6606  000E6A  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  6607  000E6E  5034               	movf	drawChar@x,w,c
  6608  000E70  2436               	addwf	drawChar@i,w,c
  6609  000E72  EC5A  F00F         	call	_drawPixel
  6610  000E76  D03E               	goto	l5067
  6611  000E78                     l5057:
  6612                           
  6613                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6614  000E78  5035               	movf	drawChar@j,w,c
  6615  000E7A  0232               	mulwf	drawChar@size,c
  6616  000E7C  50F3               	movf	prodl,w,c
  6617  000E7E  242C               	addwf	drawChar@y,w,c
  6618  000E80  6E21               	movwf	fillRect@y,c
  6619  000E82  C032  F022         	movff	drawChar@size,fillRect@w
  6620  000E86  C032  F023         	movff	drawChar@size,fillRect@h
  6621  000E8A  C02E  F024         	movff	drawChar@color,fillRect@color
  6622  000E8E  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  6623  000E92  5036               	movf	drawChar@i,w,c
  6624  000E94  0232               	mulwf	drawChar@size,c
  6625  000E96  50F3               	movf	prodl,w,c
  6626  000E98  2434               	addwf	drawChar@x,w,c
  6627  000E9A  EC1F  F00E         	call	_fillRect
  6628                           
  6629                           ;ST7735_TFT.c: 466: }
  6630  000E9E  D02A               	goto	l5067
  6631  000EA0                     l5059:
  6632                           
  6633                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6634  000EA0  502E               	movf	drawChar@color,w,c
  6635  000EA2  1830               	xorwf	drawChar@bg,w,c
  6636  000EA4  E104               	bnz	u3510
  6637  000EA6  502F               	movf	drawChar@color+1,w,c
  6638  000EA8  1831               	xorwf	drawChar@bg+1,w,c
  6639  000EAA  B4D8               	btfsc	status,2,c
  6640  000EAC  D023               	goto	l5067
  6641  000EAE                     u3510:
  6642                           
  6643                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6644  000EAE  0432               	decf	drawChar@size,w,c
  6645  000EB0  A4D8               	btfss	status,2,c
  6646  000EB2  D00C               	goto	l5065
  6647  000EB4  502C               	movf	drawChar@y,w,c
  6648  000EB6  2435               	addwf	drawChar@j,w,c
  6649  000EB8  6E16               	movwf	drawPixel@y,c
  6650  000EBA  C030  F017         	movff	drawChar@bg,drawPixel@color
  6651  000EBE  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  6652  000EC2  5034               	movf	drawChar@x,w,c
  6653  000EC4  2436               	addwf	drawChar@i,w,c
  6654  000EC6  EC5A  F00F         	call	_drawPixel
  6655  000ECA  D014               	goto	l5067
  6656  000ECC                     l5065:
  6657                           
  6658                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6659  000ECC  5035               	movf	drawChar@j,w,c
  6660  000ECE  0232               	mulwf	drawChar@size,c
  6661  000ED0  50F3               	movf	prodl,w,c
  6662  000ED2  242C               	addwf	drawChar@y,w,c
  6663  000ED4  6E21               	movwf	fillRect@y,c
  6664  000ED6  C032  F022         	movff	drawChar@size,fillRect@w
  6665  000EDA  C032  F023         	movff	drawChar@size,fillRect@h
  6666  000EDE  C030  F024         	movff	drawChar@bg,fillRect@color
  6667  000EE2  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  6668  000EE6  5036               	movf	drawChar@i,w,c
  6669  000EE8  0232               	mulwf	drawChar@size,c
  6670  000EEA  50F3               	movf	prodl,w,c
  6671  000EEC  2434               	addwf	drawChar@x,w,c
  6672  000EEE  EC1F  F00E         	call	_fillRect
  6673  000EF2  D000               	goto	l5067
  6674  000EF4                     l5067:
  6675  000EF4  2A35               	incf	drawChar@j,f,c
  6676  000EF6  90D8               	bcf	status,0,c
  6677  000EF8  3233               	rrcf	drawChar@line,f,c
  6678  000EFA  D7A9               	goto	l5049
  6679  000EFC                     l5073:
  6680  000EFC  2A36               	incf	drawChar@i,f,c
  6681  000EFE  D76F               	goto	l5037
  6682  000F00                     l111:
  6683  000F00  0012               	return		;funcret
  6684  000F02                     __end_of_drawChar:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _fillRect *****************
  6706 ;; Defined at:
  6707 ;;		line 438 in file "ST7735_TFT.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  x               1    wreg     unsigned char 
  6710 ;;  y               1   32[COMRAM] unsigned char 
  6711 ;;  w               1   33[COMRAM] unsigned char 
  6712 ;;  h               1   34[COMRAM] unsigned char 
  6713 ;;  color           2   35[COMRAM] unsigned int 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  x               1   40[COMRAM] unsigned char 
  6716 ;;  i               2   41[COMRAM] int 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;		None               void
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, status,0, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6726 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;Total ram usage:       11 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    5
  6733 ;; This function calls:
  6734 ;;		_drawFastVLine
  6735 ;; This function is called by:
  6736 ;;		_drawChar
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text23
  6741  001C3E                     __ptext23:
  6742                           	opt stack 0
  6743  001C3E                     _fillRect:
  6744                           	opt stack 22
  6745                           
  6746                           ;incstack = 0
  6747                           ;fillRect@x stored from wreg
  6748  001C3E  6E29               	movwf	fillRect@x,c
  6749                           
  6750                           ;ST7735_TFT.c: 440: signed int i;
  6751                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6752  001C40  C029  F02A         	movff	fillRect@x,fillRect@i
  6753  001C44  6A2B               	clrf	fillRect@i+1,c
  6754  001C46  D00E               	goto	l4889
  6755  001C48                     l4885:
  6756                           
  6757                           ;ST7735_TFT.c: 443: {
  6758                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6759  001C48  C021  F016         	movff	fillRect@y,drawFastVLine@y
  6760  001C4C  C023  F017         	movff	fillRect@h,drawFastVLine@h
  6761  001C50  C024  F018         	movff	fillRect@color,drawFastVLine@color
  6762  001C54  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  6763  001C58  502A               	movf	fillRect@i,w,c
  6764  001C5A  EC25  F00C         	call	_drawFastVLine
  6765  001C5E  4A2A               	infsnz	fillRect@i,f,c
  6766  001C60  2A2B               	incf	fillRect@i+1,f,c
  6767  001C62  D000               	goto	l4889
  6768  001C64                     l4889:
  6769  001C64  5022               	movf	fillRect@w,w,c
  6770  001C66  C029  F026         	movff	fillRect@x,??_fillRect
  6771  001C6A  6A27               	clrf	(??_fillRect+1)& (0+255),c
  6772  001C6C  2626               	addwf	??_fillRect,f,c
  6773  001C6E  0E00               	movlw	0
  6774  001C70  2227               	addwfc	??_fillRect+1,f,c
  6775  001C72  5026               	movf	??_fillRect,w,c
  6776  001C74  5C2A               	subwf	fillRect@i,w,c
  6777  001C76  502B               	movf	fillRect@i+1,w,c
  6778  001C78  0A80               	xorlw	128
  6779  001C7A  6E28               	movwf	(??_fillRect+2)& (0+255),c
  6780  001C7C  5027               	movf	??_fillRect+1,w,c
  6781  001C7E  0A80               	xorlw	128
  6782  001C80  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  6783  001C82  A0D8               	btfss	status,0,c
  6784  001C84  D7E1               	goto	l4885
  6785  001C86  0012               	return		;funcret
  6786  001C88                     __end_of_fillRect:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           intcon	equ	0xFF2
  6795                           intcon2	equ	0xFF1
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           postdec1	equ	0xFE5
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           fsr2h	equ	0xFDA
  6804                           fsr2l	equ	0xFD9
  6805                           status	equ	0xFD8
  6806                           
  6807 ;; *************** function _drawFastVLine *****************
  6808 ;; Defined at:
  6809 ;;		line 417 in file "ST7735_TFT.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  x               1    wreg     unsigned char 
  6812 ;;  y               1   21[COMRAM] unsigned char 
  6813 ;;  h               1   22[COMRAM] unsigned char 
  6814 ;;  color           2   23[COMRAM] unsigned int 
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;  x               1   31[COMRAM] unsigned char 
  6817 ;;  lo              1   30[COMRAM] unsigned char 
  6818 ;;  hi              1   29[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;		None               void
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;Total ram usage:       11 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    4
  6835 ;; This function calls:
  6836 ;;		_setAddrWindow
  6837 ;;		_spiwrite
  6838 ;; This function is called by:
  6839 ;;		_fillRect
  6840 ;;		_fillCircleHelper
  6841 ;;		_fillCircle
  6842 ;;		_drawRect
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text24
  6847  00184A                     __ptext24:
  6848                           	opt stack 0
  6849  00184A                     _drawFastVLine:
  6850                           	opt stack 22
  6851                           
  6852                           ;incstack = 0
  6853                           ;drawFastVLine@x stored from wreg
  6854  00184A  6E20               	movwf	drawFastVLine@x,c
  6855                           
  6856                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6857                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6858  00184C  0E80               	movlw	128
  6859  00184E  6020               	cpfslt	drawFastVLine@x,c
  6860  001850  D03F               	goto	l95
  6861  001852  0E9F               	movlw	159
  6862  001854  6416               	cpfsgt	drawFastVLine@y,c
  6863  001856  D001               	goto	l4825
  6864                           
  6865                           ;ST7735_TFT.c: 421: return;
  6866  001858  D03B               	goto	l95
  6867  00185A                     l4825:
  6868                           
  6869                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6870  00185A  0EFF               	movlw	255
  6871  00185C  6E1A               	movwf	??_drawFastVLine& (0+255),c
  6872  00185E  0EFF               	movlw	255
  6873  001860  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  6874  001862  5017               	movf	drawFastVLine@h,w,c
  6875  001864  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  6876  001868  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  6877  00186A  261C               	addwf	??_drawFastVLine+2,f,c
  6878  00186C  0E00               	movlw	0
  6879  00186E  221D               	addwfc	??_drawFastVLine+3,f,c
  6880  001870  501A               	movf	??_drawFastVLine,w,c
  6881  001872  261C               	addwf	??_drawFastVLine+2,f,c
  6882  001874  501B               	movf	??_drawFastVLine+1,w,c
  6883  001876  221D               	addwfc	??_drawFastVLine+3,f,c
  6884  001878  BE1D               	btfsc	??_drawFastVLine+3,7,c
  6885  00187A  D00B               	goto	l4829
  6886  00187C  501D               	movf	??_drawFastVLine+3,w,c
  6887  00187E  E104               	bnz	u3320
  6888  001880  0EA0               	movlw	160
  6889  001882  5C1C               	subwf	??_drawFastVLine+2,w,c
  6890  001884  A0D8               	btfss	status,0,c
  6891  001886  D005               	goto	l4829
  6892  001888                     u3320:
  6893                           
  6894                           ;ST7735_TFT.c: 423: h = 160 - y;
  6895  001888  5016               	movf	drawFastVLine@y,w,c
  6896  00188A  0800               	sublw	0
  6897  00188C  0FA0               	addlw	160
  6898  00188E  6E17               	movwf	drawFastVLine@h,c
  6899  001890  D000               	goto	l4829
  6900  001892                     l4829:
  6901                           
  6902                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6903  001892  5019               	movf	drawFastVLine@color+1,w,c
  6904  001894  6E1E               	movwf	drawFastVLine@hi,c
  6905  001896  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  6906                           
  6907                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6908  00189A  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  6909  00189E  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  6910  0018A2  5016               	movf	drawFastVLine@y,w,c
  6911  0018A4  2417               	addwf	drawFastVLine@h,w,c
  6912  0018A6  6E1A               	movwf	??_drawFastVLine& (0+255),c
  6913  0018A8  041A               	decf	??_drawFastVLine,w,c
  6914  0018AA  6E14               	movwf	setAddrWindow@y1,c
  6915  0018AC  5020               	movf	drawFastVLine@x,w,c
  6916  0018AE  ECD2  F00D         	call	_setAddrWindow
  6917                           
  6918                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
  6919  0018B2  8083               	bsf	3971,0,c	;volatile
  6920                           
  6921                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
  6922  0018B4  9283               	bcf	3971,1,c	;volatile
  6923                           
  6924                           ;ST7735_TFT.c: 429: while (h--) {
  6925  0018B6  D007               	goto	l4841
  6926  0018B8                     l4839:
  6927                           
  6928                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6929  0018B8  501E               	movf	drawFastVLine@hi,w,c
  6930  0018BA  EC04  F010         	call	_spiwrite
  6931                           
  6932                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6933  0018BE  501F               	movf	drawFastVLine@lo,w,c
  6934  0018C0  EC04  F010         	call	_spiwrite
  6935  0018C4  D000               	goto	l4841
  6936  0018C6                     l4841:
  6937  0018C6  0617               	decf	drawFastVLine@h,f,c
  6938  0018C8  2817               	incf	drawFastVLine@h,w,c
  6939  0018CA  A4D8               	btfss	status,2,c
  6940  0018CC  D7F5               	goto	l4839
  6941                           
  6942                           ;ST7735_TFT.c: 432: }
  6943                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
  6944  0018CE  8283               	bsf	3971,1,c	;volatile
  6945  0018D0                     l95:
  6946  0018D0  0012               	return		;funcret
  6947  0018D2                     __end_of_drawFastVLine:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           intcon	equ	0xFF2
  6956                           intcon2	equ	0xFF1
  6957                           postinc0	equ	0xFEE
  6958                           wreg	equ	0xFE8
  6959                           postdec1	equ	0xFE5
  6960                           fsr1l	equ	0xFE1
  6961                           indf2	equ	0xFDF
  6962                           postinc2	equ	0xFDE
  6963                           postdec2	equ	0xFDD
  6964                           fsr2h	equ	0xFDA
  6965                           fsr2l	equ	0xFD9
  6966                           status	equ	0xFD8
  6967                           
  6968 ;; *************** function _drawCircle *****************
  6969 ;; Defined at:
  6970 ;;		line 529 in file "ST7735_TFT.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  x0              2   25[COMRAM] int 
  6973 ;;  y0              2   27[COMRAM] int 
  6974 ;;  r               2   29[COMRAM] int 
  6975 ;;  color           2   31[COMRAM] unsigned int 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  y               2   43[COMRAM] int 
  6978 ;;  x               2   41[COMRAM] int 
  6979 ;;  f               2   39[COMRAM] int 
  6980 ;;  ddF_y           2   37[COMRAM] int 
  6981 ;;  ddF_x           2   35[COMRAM] int 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;		None               void
  6984 ;; Registers used:
  6985 ;;		wreg, status,2, status,0, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6991 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;Total ram usage:       20 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    5
  6998 ;; This function calls:
  6999 ;;		_drawPixel
  7000 ;; This function is called by:
  7001 ;;		_Initialize_Screen
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text25
  7006  000BFE                     __ptext25:
  7007                           	opt stack 0
  7008  000BFE                     _drawCircle:
  7009                           	opt stack 24
  7010                           
  7011                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  7012                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7013                           
  7014                           ;incstack = 0
  7015  000BFE  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7016  000C02  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7017  000C06  1E22               	comf	??_drawCircle,f,c
  7018  000C08  1E23               	comf	??_drawCircle+1,f,c
  7019  000C0A  4A22               	infsnz	??_drawCircle,f,c
  7020  000C0C  2A23               	incf	??_drawCircle+1,f,c
  7021  000C0E  0E01               	movlw	1
  7022  000C10  2422               	addwf	??_drawCircle,w,c
  7023  000C12  6E28               	movwf	drawCircle@f,c
  7024  000C14  0E00               	movlw	0
  7025  000C16  2023               	addwfc	??_drawCircle+1,w,c
  7026  000C18  6E29               	movwf	drawCircle@f+1,c
  7027  000C1A  0E00               	movlw	0
  7028  000C1C  6E25               	movwf	drawCircle@ddF_x+1,c
  7029  000C1E  0E01               	movlw	1
  7030  000C20  6E24               	movwf	drawCircle@ddF_x,c
  7031  000C22  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7032  000C26  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7033  000C2A  90D8               	bcf	status,0,c
  7034  000C2C  3622               	rlcf	??_drawCircle,f,c
  7035  000C2E  3623               	rlcf	??_drawCircle+1,f,c
  7036  000C30  1E22               	comf	??_drawCircle,f,c
  7037  000C32  1E23               	comf	??_drawCircle+1,f,c
  7038  000C34  4A22               	infsnz	??_drawCircle,f,c
  7039  000C36  2A23               	incf	??_drawCircle+1,f,c
  7040  000C38  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7041  000C3C  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7042  000C40  0E00               	movlw	0
  7043  000C42  6E2B               	movwf	drawCircle@x+1,c
  7044  000C44  0E00               	movlw	0
  7045  000C46  6E2A               	movwf	drawCircle@x,c
  7046  000C48  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7047  000C4C  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7048                           
  7049                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  7050  000C50  501C               	movf	drawCircle@y0,w,c
  7051  000C52  241E               	addwf	drawCircle@r,w,c
  7052  000C54  6E16               	movwf	drawPixel@y,c
  7053  000C56  C020  F017         	movff	drawCircle@color,drawPixel@color
  7054  000C5A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7055  000C5E  501A               	movf	drawCircle@x0,w,c
  7056  000C60  EC5A  F00F         	call	_drawPixel
  7057                           
  7058                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  7059  000C64  501E               	movf	drawCircle@r,w,c
  7060  000C66  0800               	sublw	0
  7061  000C68  241C               	addwf	drawCircle@y0,w,c
  7062  000C6A  6E16               	movwf	drawPixel@y,c
  7063  000C6C  C020  F017         	movff	drawCircle@color,drawPixel@color
  7064  000C70  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7065  000C74  501A               	movf	drawCircle@x0,w,c
  7066  000C76  EC5A  F00F         	call	_drawPixel
  7067                           
  7068                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  7069  000C7A  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7070  000C7E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7071  000C82  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7072  000C86  501A               	movf	drawCircle@x0,w,c
  7073  000C88  241E               	addwf	drawCircle@r,w,c
  7074  000C8A  EC5A  F00F         	call	_drawPixel
  7075                           
  7076                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  7077  000C8E  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7078  000C92  C020  F017         	movff	drawCircle@color,drawPixel@color
  7079  000C96  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7080  000C9A  501E               	movf	drawCircle@r,w,c
  7081  000C9C  0800               	sublw	0
  7082  000C9E  241A               	addwf	drawCircle@x0,w,c
  7083  000CA0  EC5A  F00F         	call	_drawPixel
  7084                           
  7085                           ;ST7735_TFT.c: 537: while (x < y) {
  7086  000CA4  D078               	goto	l5329
  7087  000CA6                     l5301:
  7088                           
  7089                           ;ST7735_TFT.c: 538: if (f >= 0) {
  7090  000CA6  BE29               	btfsc	drawCircle@f+1,7,c
  7091  000CA8  D00B               	goto	l159
  7092                           
  7093                           ;ST7735_TFT.c: 539: y--;
  7094  000CAA  062C               	decf	drawCircle@y,f,c
  7095  000CAC  A0D8               	btfss	status,0,c
  7096  000CAE  062D               	decf	drawCircle@y+1,f,c
  7097                           
  7098                           ;ST7735_TFT.c: 540: ddF_y += 2;
  7099  000CB0  0E02               	movlw	2
  7100  000CB2  2626               	addwf	drawCircle@ddF_y,f,c
  7101  000CB4  0E00               	movlw	0
  7102  000CB6  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7103                           
  7104                           ;ST7735_TFT.c: 541: f += ddF_y;
  7105  000CB8  5026               	movf	drawCircle@ddF_y,w,c
  7106  000CBA  2628               	addwf	drawCircle@f,f,c
  7107  000CBC  5027               	movf	drawCircle@ddF_y+1,w,c
  7108  000CBE  2229               	addwfc	drawCircle@f+1,f,c
  7109  000CC0                     l159:
  7110                           
  7111                           ;ST7735_TFT.c: 542: }
  7112                           ;ST7735_TFT.c: 543: x++;
  7113  000CC0  4A2A               	infsnz	drawCircle@x,f,c
  7114  000CC2  2A2B               	incf	drawCircle@x+1,f,c
  7115                           
  7116                           ;ST7735_TFT.c: 544: ddF_x += 2;
  7117  000CC4  0E02               	movlw	2
  7118  000CC6  2624               	addwf	drawCircle@ddF_x,f,c
  7119  000CC8  0E00               	movlw	0
  7120  000CCA  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7121                           
  7122                           ;ST7735_TFT.c: 545: f += ddF_x;
  7123  000CCC  5024               	movf	drawCircle@ddF_x,w,c
  7124  000CCE  2628               	addwf	drawCircle@f,f,c
  7125  000CD0  5025               	movf	drawCircle@ddF_x+1,w,c
  7126  000CD2  2229               	addwfc	drawCircle@f+1,f,c
  7127                           
  7128                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  7129  000CD4  501C               	movf	drawCircle@y0,w,c
  7130  000CD6  242C               	addwf	drawCircle@y,w,c
  7131  000CD8  6E16               	movwf	drawPixel@y,c
  7132  000CDA  C020  F017         	movff	drawCircle@color,drawPixel@color
  7133  000CDE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7134  000CE2  501A               	movf	drawCircle@x0,w,c
  7135  000CE4  242A               	addwf	drawCircle@x,w,c
  7136  000CE6  EC5A  F00F         	call	_drawPixel
  7137                           
  7138                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  7139  000CEA  501C               	movf	drawCircle@y0,w,c
  7140  000CEC  242C               	addwf	drawCircle@y,w,c
  7141  000CEE  6E16               	movwf	drawPixel@y,c
  7142  000CF0  C020  F017         	movff	drawCircle@color,drawPixel@color
  7143  000CF4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7144  000CF8  502A               	movf	drawCircle@x,w,c
  7145  000CFA  0800               	sublw	0
  7146  000CFC  241A               	addwf	drawCircle@x0,w,c
  7147  000CFE  EC5A  F00F         	call	_drawPixel
  7148                           
  7149                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  7150  000D02  502C               	movf	drawCircle@y,w,c
  7151  000D04  0800               	sublw	0
  7152  000D06  241C               	addwf	drawCircle@y0,w,c
  7153  000D08  6E16               	movwf	drawPixel@y,c
  7154  000D0A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7155  000D0E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7156  000D12  501A               	movf	drawCircle@x0,w,c
  7157  000D14  242A               	addwf	drawCircle@x,w,c
  7158  000D16  EC5A  F00F         	call	_drawPixel
  7159                           
  7160                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  7161  000D1A  502C               	movf	drawCircle@y,w,c
  7162  000D1C  0800               	sublw	0
  7163  000D1E  241C               	addwf	drawCircle@y0,w,c
  7164  000D20  6E16               	movwf	drawPixel@y,c
  7165  000D22  C020  F017         	movff	drawCircle@color,drawPixel@color
  7166  000D26  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7167  000D2A  502A               	movf	drawCircle@x,w,c
  7168  000D2C  0800               	sublw	0
  7169  000D2E  241A               	addwf	drawCircle@x0,w,c
  7170  000D30  EC5A  F00F         	call	_drawPixel
  7171                           
  7172                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  7173  000D34  501C               	movf	drawCircle@y0,w,c
  7174  000D36  242A               	addwf	drawCircle@x,w,c
  7175  000D38  6E16               	movwf	drawPixel@y,c
  7176  000D3A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7177  000D3E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7178  000D42  501A               	movf	drawCircle@x0,w,c
  7179  000D44  242C               	addwf	drawCircle@y,w,c
  7180  000D46  EC5A  F00F         	call	_drawPixel
  7181                           
  7182                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  7183  000D4A  501C               	movf	drawCircle@y0,w,c
  7184  000D4C  242A               	addwf	drawCircle@x,w,c
  7185  000D4E  6E16               	movwf	drawPixel@y,c
  7186  000D50  C020  F017         	movff	drawCircle@color,drawPixel@color
  7187  000D54  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7188  000D58  502C               	movf	drawCircle@y,w,c
  7189  000D5A  0800               	sublw	0
  7190  000D5C  241A               	addwf	drawCircle@x0,w,c
  7191  000D5E  EC5A  F00F         	call	_drawPixel
  7192                           
  7193                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  7194  000D62  502A               	movf	drawCircle@x,w,c
  7195  000D64  0800               	sublw	0
  7196  000D66  241C               	addwf	drawCircle@y0,w,c
  7197  000D68  6E16               	movwf	drawPixel@y,c
  7198  000D6A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7199  000D6E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7200  000D72  501A               	movf	drawCircle@x0,w,c
  7201  000D74  242C               	addwf	drawCircle@y,w,c
  7202  000D76  EC5A  F00F         	call	_drawPixel
  7203                           
  7204                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  7205  000D7A  502A               	movf	drawCircle@x,w,c
  7206  000D7C  0800               	sublw	0
  7207  000D7E  241C               	addwf	drawCircle@y0,w,c
  7208  000D80  6E16               	movwf	drawPixel@y,c
  7209  000D82  C020  F017         	movff	drawCircle@color,drawPixel@color
  7210  000D86  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7211  000D8A  502C               	movf	drawCircle@y,w,c
  7212  000D8C  0800               	sublw	0
  7213  000D8E  241A               	addwf	drawCircle@x0,w,c
  7214  000D90  EC5A  F00F         	call	_drawPixel
  7215  000D94  D000               	goto	l5329
  7216  000D96                     l5329:
  7217  000D96  502C               	movf	drawCircle@y,w,c
  7218  000D98  5C2A               	subwf	drawCircle@x,w,c
  7219  000D9A  502B               	movf	drawCircle@x+1,w,c
  7220  000D9C  0A80               	xorlw	128
  7221  000D9E  6E22               	movwf	??_drawCircle& (0+255),c
  7222  000DA0  502D               	movf	drawCircle@y+1,w,c
  7223  000DA2  0A80               	xorlw	128
  7224  000DA4  5822               	subwfb	??_drawCircle& (0+255),w,c
  7225  000DA6  A0D8               	btfss	status,0,c
  7226  000DA8  D77E               	goto	l5301
  7227  000DAA  0012               	return		;funcret
  7228  000DAC                     __end_of_drawCircle:
  7229                           	opt stack 0
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           prodh	equ	0xFF4
  7235                           prodl	equ	0xFF3
  7236                           intcon	equ	0xFF2
  7237                           intcon2	equ	0xFF1
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           postdec1	equ	0xFE5
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _drawPixel *****************
  7250 ;; Defined at:
  7251 ;;		line 408 in file "ST7735_TFT.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  x               1    wreg     unsigned char 
  7254 ;;  y               1   21[COMRAM] unsigned char 
  7255 ;;  color           2   22[COMRAM] unsigned int 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  x               1   24[COMRAM] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;		None               void
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        4 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    4
  7274 ;; This function calls:
  7275 ;;		_setAddrWindow
  7276 ;;		_write_data
  7277 ;; This function is called by:
  7278 ;;		_drawChar
  7279 ;;		_drawCircle
  7280 ;;		_drawCircleHelper
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text26
  7285  001EB4                     __ptext26:
  7286                           	opt stack 0
  7287  001EB4                     _drawPixel:
  7288                           	opt stack 23
  7289                           
  7290                           ;incstack = 0
  7291                           ;drawPixel@x stored from wreg
  7292  001EB4  6E19               	movwf	drawPixel@x,c
  7293                           
  7294                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  7295  001EB6  0E80               	movlw	128
  7296  001EB8  6019               	cpfslt	drawPixel@x,c
  7297  001EBA  D013               	goto	l89
  7298  001EBC  0E9F               	movlw	159
  7299  001EBE  6416               	cpfsgt	drawPixel@y,c
  7300  001EC0  D001               	goto	l4877
  7301                           
  7302                           ;ST7735_TFT.c: 411: return;
  7303  001EC2  D00F               	goto	l89
  7304  001EC4                     l4877:
  7305                           
  7306                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  7307  001EC4  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  7308  001EC8  2819               	incf	drawPixel@x,w,c
  7309  001ECA  6E13               	movwf	setAddrWindow@x1,c
  7310  001ECC  2816               	incf	drawPixel@y,w,c
  7311  001ECE  6E14               	movwf	setAddrWindow@y1,c
  7312  001ED0  5019               	movf	drawPixel@x,w,c
  7313  001ED2  ECD2  F00D         	call	_setAddrWindow
  7314                           
  7315                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  7316  001ED6  5018               	movf	drawPixel@color+1,w,c
  7317  001ED8  EC3C  F010         	call	_write_data
  7318                           
  7319                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  7320  001EDC  5017               	movf	drawPixel@color,w,c
  7321  001EDE  EC3C  F010         	call	_write_data
  7322  001EE2                     l89:
  7323  001EE2  0012               	return		;funcret
  7324  001EE4                     __end_of_drawPixel:
  7325                           	opt stack 0
  7326                           tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           prodh	equ	0xFF4
  7331                           prodl	equ	0xFF3
  7332                           intcon	equ	0xFF2
  7333                           intcon2	equ	0xFF1
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           postdec1	equ	0xFE5
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           
  7345 ;; *************** function _setAddrWindow *****************
  7346 ;; Defined at:
  7347 ;;		line 393 in file "ST7735_TFT.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  x0              1    wreg     unsigned char 
  7350 ;;  y0              1   17[COMRAM] unsigned char 
  7351 ;;  x1              1   18[COMRAM] unsigned char 
  7352 ;;  y1              1   19[COMRAM] unsigned char 
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;  x0              1   20[COMRAM] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;		None               void
  7357 ;; Registers used:
  7358 ;;		wreg, status,2, status,0, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7364 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;Total ram usage:        4 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    3
  7371 ;; This function calls:
  7372 ;;		_write_command
  7373 ;;		_write_data
  7374 ;; This function is called by:
  7375 ;;		_drawPixel
  7376 ;;		_drawFastVLine
  7377 ;;		_fillRectangle
  7378 ;;		_drawFastHLine
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text27
  7383  001BA4                     __ptext27:
  7384                           	opt stack 0
  7385  001BA4                     _setAddrWindow:
  7386                           	opt stack 22
  7387                           
  7388                           ;incstack = 0
  7389                           ;setAddrWindow@x0 stored from wreg
  7390  001BA4  6E15               	movwf	setAddrWindow@x0,c
  7391                           
  7392                           ;ST7735_TFT.c: 395: write_command(0x2A);
  7393  001BA6  0E2A               	movlw	42
  7394  001BA8  EC44  F010         	call	_write_command
  7395                           
  7396                           ;ST7735_TFT.c: 396: write_data(0);
  7397  001BAC  0E00               	movlw	0
  7398  001BAE  EC3C  F010         	call	_write_data
  7399                           
  7400                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  7401  001BB2  5015               	movf	setAddrWindow@x0,w,c
  7402  001BB4  245B               	addwf	_colstart,w,c
  7403  001BB6  EC3C  F010         	call	_write_data
  7404                           
  7405                           ;ST7735_TFT.c: 398: write_data(0);
  7406  001BBA  0E00               	movlw	0
  7407  001BBC  EC3C  F010         	call	_write_data
  7408                           
  7409                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7410  001BC0  5013               	movf	setAddrWindow@x1,w,c
  7411  001BC2  245B               	addwf	_colstart,w,c
  7412  001BC4  EC3C  F010         	call	_write_data
  7413                           
  7414                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7415  001BC8  0E2B               	movlw	43
  7416  001BCA  EC44  F010         	call	_write_command
  7417                           
  7418                           ;ST7735_TFT.c: 401: write_data(0);
  7419  001BCE  0E00               	movlw	0
  7420  001BD0  EC3C  F010         	call	_write_data
  7421                           
  7422                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7423  001BD4  5012               	movf	setAddrWindow@y0,w,c
  7424  001BD6  2463               	addwf	_rowstart,w,c
  7425  001BD8  EC3C  F010         	call	_write_data
  7426                           
  7427                           ;ST7735_TFT.c: 403: write_data(0);
  7428  001BDC  0E00               	movlw	0
  7429  001BDE  EC3C  F010         	call	_write_data
  7430                           
  7431                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7432  001BE2  5014               	movf	setAddrWindow@y1,w,c
  7433  001BE4  2463               	addwf	_rowstart,w,c
  7434  001BE6  EC3C  F010         	call	_write_data
  7435                           
  7436                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7437  001BEA  0E2C               	movlw	44
  7438  001BEC  EC44  F010         	call	_write_command
  7439  001BF0  0012               	return		;funcret
  7440  001BF2                     __end_of_setAddrWindow:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           postinc0	equ	0xFEE
  7451                           wreg	equ	0xFE8
  7452                           postdec1	equ	0xFE5
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           
  7461 ;; *************** function _TFT_GreenTab_Initialize *****************
  7462 ;; Defined at:
  7463 ;;		line 645 in file "ST7735_TFT.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;		None               void
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    4
  7484 ;; This function calls:
  7485 ;;		_Rcmd1
  7486 ;;		_Rcmd2red
  7487 ;;		_Rcmd3
  7488 ;;		_write_command
  7489 ;;		_write_data
  7490 ;; This function is called by:
  7491 ;;		_Initialize_Screen
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text28
  7496  001EE4                     __ptext28:
  7497                           	opt stack 0
  7498  001EE4                     _TFT_GreenTab_Initialize:
  7499                           	opt stack 25
  7500                           
  7501                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
  7502                           
  7503                           ;incstack = 0
  7504  001EE4  8283               	bsf	3971,1,c	;volatile
  7505                           
  7506                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
  7507  001EE6  9083               	bcf	3971,0,c	;volatile
  7508                           
  7509                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7510  001EE8  0E80               	movlw	128
  7511  001EEA  6EC7               	movwf	4039,c	;volatile
  7512                           
  7513                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7514  001EEC  0E30               	movlw	48
  7515  001EEE  6EC6               	movwf	4038,c	;volatile
  7516                           
  7517                           ;ST7735_TFT.c: 654: Rcmd1();
  7518  001EF0  EC81  F007         	call	_Rcmd1	;wreg free
  7519                           
  7520                           ;ST7735_TFT.c: 655: Rcmd2red();
  7521  001EF4  ECCA  F00E         	call	_Rcmd2red	;wreg free
  7522                           
  7523                           ;ST7735_TFT.c: 656: Rcmd3();
  7524  001EF8  EC0A  F009         	call	_Rcmd3	;wreg free
  7525                           
  7526                           ;ST7735_TFT.c: 657: write_command(0x36);
  7527  001EFC  0E36               	movlw	54
  7528  001EFE  EC44  F010         	call	_write_command
  7529                           
  7530                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7531  001F02  0EC0               	movlw	192
  7532  001F04  EC3C  F010         	call	_write_data
  7533                           
  7534                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7535  001F08  0E01               	movlw	1
  7536  001F0A  6E55               	movwf	__tft_type,c
  7537  001F0C  0012               	return		;funcret
  7538  001F0E                     __end_of_TFT_GreenTab_Initialize:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           intcon2	equ	0xFF1
  7548                           postinc0	equ	0xFEE
  7549                           wreg	equ	0xFE8
  7550                           postdec1	equ	0xFE5
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _Rcmd3 *****************
  7560 ;; Defined at:
  7561 ;;		line 339 in file "ST7735_TFT.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;		None               void
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:        0 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    3
  7582 ;; This function calls:
  7583 ;;		_delay_ms
  7584 ;;		_write_command
  7585 ;;		_write_data
  7586 ;; This function is called by:
  7587 ;;		_TFT_GreenTab_Initialize
  7588 ;;		_TFT_BlackTab_Initialize
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text29
  7593  001214                     __ptext29:
  7594                           	opt stack 0
  7595  001214                     _Rcmd3:
  7596                           	opt stack 25
  7597                           
  7598                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7599                           
  7600                           ;incstack = 0
  7601  001214  0EE0               	movlw	224
  7602  001216  EC44  F010         	call	_write_command
  7603                           
  7604                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7605  00121A  0E02               	movlw	2
  7606  00121C  EC3C  F010         	call	_write_data
  7607  001220  0E1C               	movlw	28
  7608  001222  EC3C  F010         	call	_write_data
  7609  001226  0E07               	movlw	7
  7610  001228  EC3C  F010         	call	_write_data
  7611  00122C  0E12               	movlw	18
  7612  00122E  EC3C  F010         	call	_write_data
  7613                           
  7614                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7615  001232  0E37               	movlw	55
  7616  001234  EC3C  F010         	call	_write_data
  7617  001238  0E32               	movlw	50
  7618  00123A  EC3C  F010         	call	_write_data
  7619  00123E  0E29               	movlw	41
  7620  001240  EC3C  F010         	call	_write_data
  7621  001244  0E2D               	movlw	45
  7622  001246  EC3C  F010         	call	_write_data
  7623                           
  7624                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7625  00124A  0E29               	movlw	41
  7626  00124C  EC3C  F010         	call	_write_data
  7627  001250  0E25               	movlw	37
  7628  001252  EC3C  F010         	call	_write_data
  7629  001256  0E2B               	movlw	43
  7630  001258  EC3C  F010         	call	_write_data
  7631  00125C  0E39               	movlw	57
  7632  00125E  EC3C  F010         	call	_write_data
  7633                           
  7634                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7635  001262  0E00               	movlw	0
  7636  001264  EC3C  F010         	call	_write_data
  7637  001268  0E01               	movlw	1
  7638  00126A  EC3C  F010         	call	_write_data
  7639  00126E  0E03               	movlw	3
  7640  001270  EC3C  F010         	call	_write_data
  7641  001274  0E10               	movlw	16
  7642  001276  EC3C  F010         	call	_write_data
  7643                           
  7644                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7645  00127A  0EE1               	movlw	225
  7646  00127C  EC44  F010         	call	_write_command
  7647                           
  7648                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7649  001280  0E03               	movlw	3
  7650  001282  EC3C  F010         	call	_write_data
  7651  001286  0E1D               	movlw	29
  7652  001288  EC3C  F010         	call	_write_data
  7653  00128C  0E07               	movlw	7
  7654  00128E  EC3C  F010         	call	_write_data
  7655  001292  0E06               	movlw	6
  7656  001294  EC3C  F010         	call	_write_data
  7657                           
  7658                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7659  001298  0E2E               	movlw	46
  7660  00129A  EC3C  F010         	call	_write_data
  7661  00129E  0E2C               	movlw	44
  7662  0012A0  EC3C  F010         	call	_write_data
  7663  0012A4  0E29               	movlw	41
  7664  0012A6  EC3C  F010         	call	_write_data
  7665  0012AA  0E2D               	movlw	45
  7666  0012AC  EC3C  F010         	call	_write_data
  7667                           
  7668                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7669  0012B0  0E2E               	movlw	46
  7670  0012B2  EC3C  F010         	call	_write_data
  7671  0012B6  0E2E               	movlw	46
  7672  0012B8  EC3C  F010         	call	_write_data
  7673  0012BC  0E37               	movlw	55
  7674  0012BE  EC3C  F010         	call	_write_data
  7675  0012C2  0E3F               	movlw	63
  7676  0012C4  EC3C  F010         	call	_write_data
  7677                           
  7678                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7679  0012C8  0E00               	movlw	0
  7680  0012CA  EC3C  F010         	call	_write_data
  7681  0012CE  0E00               	movlw	0
  7682  0012D0  EC3C  F010         	call	_write_data
  7683  0012D4  0E02               	movlw	2
  7684  0012D6  EC3C  F010         	call	_write_data
  7685  0012DA  0E10               	movlw	16
  7686  0012DC  EC3C  F010         	call	_write_data
  7687                           
  7688                           ;ST7735_TFT.c: 351: write_command(0x13);
  7689  0012E0  0E13               	movlw	19
  7690  0012E2  EC44  F010         	call	_write_command
  7691                           
  7692                           ;ST7735_TFT.c: 352: delay_ms(10);
  7693  0012E6  0E00               	movlw	0
  7694  0012E8  6E16               	movwf	delay_ms@ms+1,c
  7695  0012EA  0E0A               	movlw	10
  7696  0012EC  6E15               	movwf	delay_ms@ms,c
  7697  0012EE  ECA9  F00D         	call	_delay_ms	;wreg free
  7698                           
  7699                           ;ST7735_TFT.c: 353: write_command(0x29);
  7700  0012F2  0E29               	movlw	41
  7701  0012F4  EC44  F010         	call	_write_command
  7702                           
  7703                           ;ST7735_TFT.c: 354: delay_ms(100);
  7704  0012F8  0E00               	movlw	0
  7705  0012FA  6E16               	movwf	delay_ms@ms+1,c
  7706  0012FC  0E64               	movlw	100
  7707  0012FE  6E15               	movwf	delay_ms@ms,c
  7708  001300  ECA9  F00D         	call	_delay_ms	;wreg free
  7709  001304  0012               	return		;funcret
  7710  001306                     __end_of_Rcmd3:
  7711                           	opt stack 0
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           intcon	equ	0xFF2
  7719                           intcon2	equ	0xFF1
  7720                           postinc0	equ	0xFEE
  7721                           wreg	equ	0xFE8
  7722                           postdec1	equ	0xFE5
  7723                           fsr1l	equ	0xFE1
  7724                           indf2	equ	0xFDF
  7725                           postinc2	equ	0xFDE
  7726                           postdec2	equ	0xFDD
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _Rcmd2red *****************
  7732 ;; Defined at:
  7733 ;;		line 329 in file "ST7735_TFT.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;		None
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;		None
  7738 ;; Return value:  Size  Location     Type
  7739 ;;		None               void
  7740 ;; Registers used:
  7741 ;;		wreg, status,2, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;Total ram usage:        0 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    3
  7754 ;; This function calls:
  7755 ;;		_write_command
  7756 ;;		_write_data
  7757 ;; This function is called by:
  7758 ;;		_TFT_GreenTab_Initialize
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text30
  7763  001D94                     __ptext30:
  7764                           	opt stack 0
  7765  001D94                     _Rcmd2red:
  7766                           	opt stack 25
  7767                           
  7768                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7769                           
  7770                           ;incstack = 0
  7771  001D94  0E2A               	movlw	42
  7772  001D96  EC44  F010         	call	_write_command
  7773                           
  7774                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7775  001D9A  0E00               	movlw	0
  7776  001D9C  EC3C  F010         	call	_write_data
  7777  001DA0  0E00               	movlw	0
  7778  001DA2  EC3C  F010         	call	_write_data
  7779                           
  7780                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7781  001DA6  0E00               	movlw	0
  7782  001DA8  EC3C  F010         	call	_write_data
  7783  001DAC  0E7F               	movlw	127
  7784  001DAE  EC3C  F010         	call	_write_data
  7785                           
  7786                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7787  001DB2  0E2B               	movlw	43
  7788  001DB4  EC44  F010         	call	_write_command
  7789                           
  7790                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7791  001DB8  0E00               	movlw	0
  7792  001DBA  EC3C  F010         	call	_write_data
  7793  001DBE  0E00               	movlw	0
  7794  001DC0  EC3C  F010         	call	_write_data
  7795                           
  7796                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7797  001DC4  0E00               	movlw	0
  7798  001DC6  EC3C  F010         	call	_write_data
  7799  001DCA  0E9F               	movlw	159
  7800  001DCC  EC3C  F010         	call	_write_data
  7801  001DD0  0012               	return		;funcret
  7802  001DD2                     __end_of_Rcmd2red:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           intcon2	equ	0xFF1
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           postdec1	equ	0xFE5
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function _Rcmd1 *****************
  7824 ;; Defined at:
  7825 ;;		line 282 in file "ST7735_TFT.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;		None               void
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;Total ram usage:        0 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    3
  7846 ;; This function calls:
  7847 ;;		_delay_ms
  7848 ;;		_write_command
  7849 ;;		_write_data
  7850 ;; This function is called by:
  7851 ;;		_TFT_GreenTab_Initialize
  7852 ;;		_TFT_BlackTab_Initialize
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text31
  7857  000F02                     __ptext31:
  7858                           	opt stack 0
  7859  000F02                     _Rcmd1:
  7860                           	opt stack 25
  7861                           
  7862                           ;ST7735_TFT.c: 284: write_command(0x01);
  7863                           
  7864                           ;incstack = 0
  7865  000F02  0E01               	movlw	1
  7866  000F04  EC44  F010         	call	_write_command
  7867                           
  7868                           ;ST7735_TFT.c: 285: delay_ms(150);
  7869  000F08  0E00               	movlw	0
  7870  000F0A  6E16               	movwf	delay_ms@ms+1,c
  7871  000F0C  0E96               	movlw	150
  7872  000F0E  6E15               	movwf	delay_ms@ms,c
  7873  000F10  ECA9  F00D         	call	_delay_ms	;wreg free
  7874                           
  7875                           ;ST7735_TFT.c: 286: write_command(0x11);
  7876  000F14  0E11               	movlw	17
  7877  000F16  EC44  F010         	call	_write_command
  7878                           
  7879                           ;ST7735_TFT.c: 287: delay_ms(500);
  7880  000F1A  0E01               	movlw	1
  7881  000F1C  6E16               	movwf	delay_ms@ms+1,c
  7882  000F1E  0EF4               	movlw	244
  7883  000F20  6E15               	movwf	delay_ms@ms,c
  7884  000F22  ECA9  F00D         	call	_delay_ms	;wreg free
  7885                           
  7886                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7887  000F26  0EB1               	movlw	177
  7888  000F28  EC44  F010         	call	_write_command
  7889                           
  7890                           ;ST7735_TFT.c: 289: write_data(0x01);
  7891  000F2C  0E01               	movlw	1
  7892  000F2E  EC3C  F010         	call	_write_data
  7893                           
  7894                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7895  000F32  0E2C               	movlw	44
  7896  000F34  EC3C  F010         	call	_write_data
  7897                           
  7898                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7899  000F38  0E2D               	movlw	45
  7900  000F3A  EC3C  F010         	call	_write_data
  7901                           
  7902                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7903  000F3E  0EB2               	movlw	178
  7904  000F40  EC44  F010         	call	_write_command
  7905                           
  7906                           ;ST7735_TFT.c: 293: write_data(0x01);
  7907  000F44  0E01               	movlw	1
  7908  000F46  EC3C  F010         	call	_write_data
  7909                           
  7910                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7911  000F4A  0E2C               	movlw	44
  7912  000F4C  EC3C  F010         	call	_write_data
  7913                           
  7914                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7915  000F50  0E2D               	movlw	45
  7916  000F52  EC3C  F010         	call	_write_data
  7917                           
  7918                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7919  000F56  0EB3               	movlw	179
  7920  000F58  EC44  F010         	call	_write_command
  7921                           
  7922                           ;ST7735_TFT.c: 297: write_data(0x01);
  7923  000F5C  0E01               	movlw	1
  7924  000F5E  EC3C  F010         	call	_write_data
  7925                           
  7926                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7927  000F62  0E2C               	movlw	44
  7928  000F64  EC3C  F010         	call	_write_data
  7929                           
  7930                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7931  000F68  0E2D               	movlw	45
  7932  000F6A  EC3C  F010         	call	_write_data
  7933                           
  7934                           ;ST7735_TFT.c: 300: write_data(0x01);
  7935  000F6E  0E01               	movlw	1
  7936  000F70  EC3C  F010         	call	_write_data
  7937                           
  7938                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7939  000F74  0E2C               	movlw	44
  7940  000F76  EC3C  F010         	call	_write_data
  7941                           
  7942                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7943  000F7A  0E2D               	movlw	45
  7944  000F7C  EC3C  F010         	call	_write_data
  7945                           
  7946                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7947  000F80  0EB4               	movlw	180
  7948  000F82  EC44  F010         	call	_write_command
  7949                           
  7950                           ;ST7735_TFT.c: 304: write_data(0x07);
  7951  000F86  0E07               	movlw	7
  7952  000F88  EC3C  F010         	call	_write_data
  7953                           
  7954                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7955  000F8C  0EC0               	movlw	192
  7956  000F8E  EC44  F010         	call	_write_command
  7957                           
  7958                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7959  000F92  0EA2               	movlw	162
  7960  000F94  EC3C  F010         	call	_write_data
  7961                           
  7962                           ;ST7735_TFT.c: 307: write_data(0x02);
  7963  000F98  0E02               	movlw	2
  7964  000F9A  EC3C  F010         	call	_write_data
  7965                           
  7966                           ;ST7735_TFT.c: 308: write_data(0x84);
  7967  000F9E  0E84               	movlw	132
  7968  000FA0  EC3C  F010         	call	_write_data
  7969                           
  7970                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7971  000FA4  0EC1               	movlw	193
  7972  000FA6  EC44  F010         	call	_write_command
  7973                           
  7974                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7975  000FAA  0EC5               	movlw	197
  7976  000FAC  EC3C  F010         	call	_write_data
  7977                           
  7978                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7979  000FB0  0EC2               	movlw	194
  7980  000FB2  EC44  F010         	call	_write_command
  7981                           
  7982                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7983  000FB6  0E0A               	movlw	10
  7984  000FB8  EC3C  F010         	call	_write_data
  7985                           
  7986                           ;ST7735_TFT.c: 313: write_data(0x00);
  7987  000FBC  0E00               	movlw	0
  7988  000FBE  EC3C  F010         	call	_write_data
  7989                           
  7990                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7991  000FC2  0EC3               	movlw	195
  7992  000FC4  EC44  F010         	call	_write_command
  7993                           
  7994                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7995  000FC8  0E8A               	movlw	138
  7996  000FCA  EC3C  F010         	call	_write_data
  7997                           
  7998                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7999  000FCE  0E2A               	movlw	42
  8000  000FD0  EC3C  F010         	call	_write_data
  8001                           
  8002                           ;ST7735_TFT.c: 317: write_command(0xC4);
  8003  000FD4  0EC4               	movlw	196
  8004  000FD6  EC44  F010         	call	_write_command
  8005                           
  8006                           ;ST7735_TFT.c: 318: write_data(0x8A);
  8007  000FDA  0E8A               	movlw	138
  8008  000FDC  EC3C  F010         	call	_write_data
  8009                           
  8010                           ;ST7735_TFT.c: 319: write_data(0xEE);
  8011  000FE0  0EEE               	movlw	238
  8012  000FE2  EC3C  F010         	call	_write_data
  8013                           
  8014                           ;ST7735_TFT.c: 320: write_command(0xC5);
  8015  000FE6  0EC5               	movlw	197
  8016  000FE8  EC44  F010         	call	_write_command
  8017                           
  8018                           ;ST7735_TFT.c: 321: write_data(0x0E);
  8019  000FEC  0E0E               	movlw	14
  8020  000FEE  EC3C  F010         	call	_write_data
  8021                           
  8022                           ;ST7735_TFT.c: 322: write_command(0x20);
  8023  000FF2  0E20               	movlw	32
  8024  000FF4  EC44  F010         	call	_write_command
  8025                           
  8026                           ;ST7735_TFT.c: 323: write_command(0x36);
  8027  000FF8  0E36               	movlw	54
  8028  000FFA  EC44  F010         	call	_write_command
  8029                           
  8030                           ;ST7735_TFT.c: 324: write_data(0xC8);
  8031  000FFE  0EC8               	movlw	200
  8032  001000  EC3C  F010         	call	_write_data
  8033                           
  8034                           ;ST7735_TFT.c: 325: write_command(0x3A);
  8035  001004  0E3A               	movlw	58
  8036  001006  EC44  F010         	call	_write_command
  8037                           
  8038                           ;ST7735_TFT.c: 326: write_data(0x05);
  8039  00100A  0E05               	movlw	5
  8040  00100C  EC3C  F010         	call	_write_data
  8041  001010  0012               	return		;funcret
  8042  001012                     __end_of_Rcmd1:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           intcon	equ	0xFF2
  8051                           intcon2	equ	0xFF1
  8052                           postinc0	equ	0xFEE
  8053                           wreg	equ	0xFE8
  8054                           postdec1	equ	0xFE5
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _write_data *****************
  8064 ;; Defined at:
  8065 ;;		line 210 in file "ST7735_TFT.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  data_           1    wreg     unsigned char 
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  data_           1   16[COMRAM] unsigned char 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;		None               void
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;Total ram usage:        1 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    2
  8086 ;; This function calls:
  8087 ;;		_spiwrite
  8088 ;; This function is called by:
  8089 ;;		_Rcmd1
  8090 ;;		_Rcmd2red
  8091 ;;		_Rcmd3
  8092 ;;		_setAddrWindow
  8093 ;;		_drawPixel
  8094 ;;		_TFT_GreenTab_Initialize
  8095 ;;		_Bcmd
  8096 ;;		_setScrollDefinition
  8097 ;;		_Rcmd2green
  8098 ;;		_VerticalScroll
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text32
  8103  002078                     __ptext32:
  8104                           	opt stack 0
  8105  002078                     _write_data:
  8106                           	opt stack 22
  8107                           
  8108                           ;incstack = 0
  8109                           ;write_data@data_ stored from wreg
  8110  002078  6E11               	movwf	write_data@data_,c
  8111                           
  8112                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
  8113  00207A  9283               	bcf	3971,1,c	;volatile
  8114                           
  8115                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
  8116  00207C  8083               	bsf	3971,0,c	;volatile
  8117                           
  8118                           ;ST7735_TFT.c: 214: spiwrite(data_);
  8119  00207E  5011               	movf	write_data@data_,w,c
  8120  002080  EC04  F010         	call	_spiwrite
  8121                           
  8122                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
  8123  002084  8283               	bsf	3971,1,c	;volatile
  8124  002086  0012               	return		;funcret
  8125  002088                     __end_of_write_data:
  8126                           	opt stack 0
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           intcon2	equ	0xFF1
  8135                           postinc0	equ	0xFEE
  8136                           wreg	equ	0xFE8
  8137                           postdec1	equ	0xFE5
  8138                           fsr1l	equ	0xFE1
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146 ;; *************** function _write_command *****************
  8147 ;; Defined at:
  8148 ;;		line 199 in file "ST7735_TFT.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  cmd_            1    wreg     unsigned char 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  cmd_            1   16[COMRAM] unsigned char 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;		None               void
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;Total ram usage:        1 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    2
  8169 ;; This function calls:
  8170 ;;		_spiwrite
  8171 ;; This function is called by:
  8172 ;;		_Rcmd1
  8173 ;;		_Rcmd2red
  8174 ;;		_Rcmd3
  8175 ;;		_setAddrWindow
  8176 ;;		_TFT_GreenTab_Initialize
  8177 ;;		_Bcmd
  8178 ;;		_setScrollDefinition
  8179 ;;		_Rcmd2green
  8180 ;;		_VerticalScroll
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text33
  8185  002088                     __ptext33:
  8186                           	opt stack 0
  8187  002088                     _write_command:
  8188                           	opt stack 22
  8189                           
  8190                           ;incstack = 0
  8191                           ;write_command@cmd_ stored from wreg
  8192  002088  6E11               	movwf	write_command@cmd_,c
  8193                           
  8194                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
  8195  00208A  9283               	bcf	3971,1,c	;volatile
  8196                           
  8197                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
  8198  00208C  9083               	bcf	3971,0,c	;volatile
  8199                           
  8200                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  8201  00208E  5011               	movf	write_command@cmd_,w,c
  8202  002090  EC04  F010         	call	_spiwrite
  8203                           
  8204                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
  8205  002094  8283               	bsf	3971,1,c	;volatile
  8206  002096  0012               	return		;funcret
  8207  002098                     __end_of_write_command:
  8208                           	opt stack 0
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           postdec1	equ	0xFE5
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           fsr2h	equ	0xFDA
  8225                           fsr2l	equ	0xFD9
  8226                           status	equ	0xFD8
  8227                           
  8228 ;; *************** function _spiwrite *****************
  8229 ;; Defined at:
  8230 ;;		line 190 in file "ST7735_TFT.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  spidata         1    wreg     unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  spidata         1   15[COMRAM] unsigned char 
  8235 ;;  x               1   14[COMRAM] unsigned char 
  8236 ;; Return value:  Size  Location     Type
  8237 ;;		None               void
  8238 ;; Registers used:
  8239 ;;		wreg
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;Total ram usage:        2 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    1
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_write_command
  8256 ;;		_write_data
  8257 ;;		_drawFastVLine
  8258 ;;		_fillRectangle
  8259 ;;		_drawFastHLine
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text34
  8264  002008                     __ptext34:
  8265                           	opt stack 0
  8266  002008                     _spiwrite:
  8267                           	opt stack 24
  8268                           
  8269                           ;incstack = 0
  8270                           ;spiwrite@spidata stored from wreg
  8271  002008  6E10               	movwf	spiwrite@spidata,c
  8272                           
  8273                           ;ST7735_TFT.c: 192: char x;
  8274                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  8275  00200A  969E               	bcf	3998,3,c	;volatile
  8276                           
  8277                           ;ST7735_TFT.c: 194: x = SSPBUF;
  8278  00200C  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  8279                           
  8280                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  8281  002010  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  8282                           
  8283                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  8284  002014  D000               	goto	l45
  8285  002016                     l45:
  8286  002016  A0C7               	btfss	4039,0,c	;volatile
  8287  002018  D7FE               	goto	l45
  8288  00201A  0012               	return		;funcret
  8289  00201C                     __end_of_spiwrite:
  8290                           	opt stack 0
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           intcon2	equ	0xFF1
  8299                           postinc0	equ	0xFEE
  8300                           wreg	equ	0xFE8
  8301                           postdec1	equ	0xFE5
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           fsr2h	equ	0xFDA
  8307                           fsr2l	equ	0xFD9
  8308                           status	equ	0xFD8
  8309                           
  8310 ;; *************** function _LCD_Reset *****************
  8311 ;; Defined at:
  8312 ;;		line 218 in file "ST7735_TFT.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;		None
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;		None               void
  8319 ;; Registers used:
  8320 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;Total ram usage:        0 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    3
  8333 ;; This function calls:
  8334 ;;		_delay_ms
  8335 ;; This function is called by:
  8336 ;;		_Initialize_Screen
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text35
  8341  002030                     __ptext35:
  8342                           	opt stack 0
  8343  002030                     _LCD_Reset:
  8344                           	opt stack 26
  8345                           
  8346                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
  8347                           
  8348                           ;incstack = 0
  8349  002030  9483               	bcf	3971,2,c	;volatile
  8350                           
  8351                           ;ST7735_TFT.c: 221: delay_ms(100);
  8352  002032  0E00               	movlw	0
  8353  002034  6E16               	movwf	delay_ms@ms+1,c
  8354  002036  0E64               	movlw	100
  8355  002038  6E15               	movwf	delay_ms@ms,c
  8356  00203A  ECA9  F00D         	call	_delay_ms	;wreg free
  8357                           
  8358                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
  8359  00203E  8483               	bsf	3971,2,c	;volatile
  8360  002040  0012               	return		;funcret
  8361  002042                     __end_of_LCD_Reset:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           intcon	equ	0xFF2
  8370                           intcon2	equ	0xFF1
  8371                           postinc0	equ	0xFEE
  8372                           wreg	equ	0xFE8
  8373                           postdec1	equ	0xFE5
  8374                           fsr1l	equ	0xFE1
  8375                           indf2	equ	0xFDF
  8376                           postinc2	equ	0xFDE
  8377                           postdec2	equ	0xFDD
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function _delay_ms *****************
  8383 ;; Defined at:
  8384 ;;		line 65 in file "ST7735_TFT.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;  ms              2   20[COMRAM] int 
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  count           2   24[COMRAM] int 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;		None               void
  8391 ;; Registers used:
  8392 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8402 ;;Total ram usage:        6 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    2
  8405 ;; This function calls:
  8406 ;;		___wmul
  8407 ;; This function is called by:
  8408 ;;		_LCD_Reset
  8409 ;;		_Rcmd1
  8410 ;;		_Rcmd3
  8411 ;;		_Bcmd
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text36
  8416  001B52                     __ptext36:
  8417                           	opt stack 0
  8418  001B52                     _delay_ms:
  8419                           	opt stack 25
  8420                           
  8421                           ;ST7735_TFT.c: 71: int count;
  8422                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8423                           
  8424                           ;incstack = 0
  8425  001B52  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  8426  001B56  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8427  001B5A  0E00               	movlw	0
  8428  001B5C  6E12               	movwf	___wmul@multiplicand+1,c
  8429  001B5E  0E7D               	movlw	125
  8430  001B60  6E11               	movwf	___wmul@multiplicand,c
  8431  001B62  EC87  F00F         	call	___wmul	;wreg free
  8432  001B66  C00F  F019         	movff	?___wmul,delay_ms@count
  8433  001B6A  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  8434                           
  8435                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8436  001B6E  C019  F017         	movff	delay_ms@count,??_delay_ms
  8437  001B72  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  8438  001B76  1E17               	comf	??_delay_ms,f,c
  8439  001B78  1E18               	comf	??_delay_ms+1,f,c
  8440  001B7A  4A17               	infsnz	??_delay_ms,f,c
  8441  001B7C  2A18               	incf	??_delay_ms+1,f,c
  8442  001B7E  0EFF               	movlw	255
  8443  001B80  2417               	addwf	??_delay_ms,w,c
  8444  001B82  6E19               	movwf	delay_ms@count,c
  8445  001B84  0EFF               	movlw	255
  8446  001B86  2018               	addwfc	??_delay_ms+1,w,c
  8447  001B88  6E1A               	movwf	delay_ms@count+1,c
  8448                           
  8449                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8450  001B8A  0E03               	movlw	3
  8451  001B8C  6ED5               	movwf	4053,c	;volatile
  8452                           
  8453                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8454  001B8E  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  8455                           
  8456                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8457  001B92  501A               	movf	delay_ms@count+1,w,c
  8458  001B94  6ED7               	movwf	4055,c	;volatile
  8459                           
  8460                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8461  001B96  94F2               	bcf	intcon,2,c	;volatile
  8462                           
  8463                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8464  001B98  8ED5               	bsf	4053,7,c	;volatile
  8465                           
  8466                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8467  001B9A  D000               	goto	l35
  8468  001B9C                     l35:
  8469  001B9C  A4F2               	btfss	intcon,2,c	;volatile
  8470  001B9E  D7FE               	goto	l35
  8471                           
  8472                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8473  001BA0  9ED5               	bcf	4053,7,c	;volatile
  8474  001BA2  0012               	return		;funcret
  8475  001BA4                     __end_of_delay_ms:
  8476                           	opt stack 0
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           intcon	equ	0xFF2
  8484                           intcon2	equ	0xFF1
  8485                           postinc0	equ	0xFEE
  8486                           wreg	equ	0xFE8
  8487                           postdec1	equ	0xFE5
  8488                           fsr1l	equ	0xFE1
  8489                           indf2	equ	0xFDF
  8490                           postinc2	equ	0xFDE
  8491                           postdec2	equ	0xFDD
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function ___wmul *****************
  8497 ;; Defined at:
  8498 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  multiplier      2   14[COMRAM] unsigned int 
  8501 ;;  multiplicand    2   16[COMRAM] unsigned int 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  product         2   18[COMRAM] unsigned int 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  2   14[COMRAM] unsigned int 
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0, prodl, prodh
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;Total ram usage:        6 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    1
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_delay_ms
  8524 ;;		_drawChar
  8525 ;;		_get_RPM
  8526 ;;		_main
  8527 ;;		_printf
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text37
  8532  001F0E                     __ptext37:
  8533                           	opt stack 0
  8534  001F0E                     ___wmul:
  8535                           	opt stack 28
  8536                           
  8537                           ;incstack = 0
  8538  001F0E  500F               	movf	___wmul@multiplier,w,c
  8539  001F10  0211               	mulwf	___wmul@multiplicand,c
  8540  001F12  CFF3 F013          	movff	prodl,___wmul@product
  8541  001F16  CFF4 F014          	movff	prodh,___wmul@product+1
  8542  001F1A  500F               	movf	___wmul@multiplier,w,c
  8543  001F1C  0212               	mulwf	___wmul@multiplicand+1,c
  8544  001F1E  50F3               	movf	prodl,w,c
  8545  001F20  2614               	addwf	___wmul@product+1,f,c
  8546  001F22  5010               	movf	___wmul@multiplier+1,w,c
  8547  001F24  0211               	mulwf	___wmul@multiplicand,c
  8548  001F26  50F3               	movf	prodl,w,c
  8549  001F28  2614               	addwf	___wmul@product+1,f,c
  8550  001F2A  C013  F00F         	movff	___wmul@product,?___wmul
  8551  001F2E  C014  F010         	movff	___wmul@product+1,?___wmul+1
  8552  001F32  D000               	goto	l759
  8553  001F34                     l759:
  8554  001F34  0012               	return		;funcret
  8555  001F36                     __end_of___wmul:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon2	equ	0xFF1
  8565                           postinc0	equ	0xFEE
  8566                           wreg	equ	0xFE8
  8567                           postdec1	equ	0xFE5
  8568                           fsr1l	equ	0xFE1
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function _Do_Init *****************
  8577 ;; Defined at:
  8578 ;;		line 86 in file "Lab12_ex.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;		None
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;		None
  8583 ;; Return value:  Size  Location     Type
  8584 ;;		None               void
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;Total ram usage:        0 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    5
  8599 ;; This function calls:
  8600 ;;		_DS1621_Init
  8601 ;;		_I2C_Init
  8602 ;;		_init_INTERRUPT
  8603 ;;		_init_UART
  8604 ;; This function is called by:
  8605 ;;		_main
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text38
  8610  001C88                     __ptext38:
  8611                           	opt stack 0
  8612  001C88                     _Do_Init:
  8613                           	opt stack 25
  8614                           
  8615                           ;Lab12_ex.c: 88: init_UART();
  8616                           
  8617                           ;incstack = 0
  8618  001C88  EC0E  F010         	call	_init_UART	;wreg free
  8619                           
  8620                           ;Lab12_ex.c: 89: OSCCON= 0x70;
  8621  001C8C  0E70               	movlw	112
  8622  001C8E  6ED3               	movwf	4051,c	;volatile
  8623                           
  8624                           ;Lab12_ex.c: 91: ADCON1= 0x0F;
  8625  001C90  0E0F               	movlw	15
  8626  001C92  6EC1               	movwf	4033,c	;volatile
  8627                           
  8628                           ;Lab12_ex.c: 92: TRISA = 0x00;
  8629  001C94  0E00               	movlw	0
  8630  001C96  6E92               	movwf	3986,c	;volatile
  8631                           
  8632                           ;Lab12_ex.c: 93: TRISB = 0x01;
  8633  001C98  0E01               	movlw	1
  8634  001C9A  6E93               	movwf	3987,c	;volatile
  8635                           
  8636                           ;Lab12_ex.c: 94: TRISC = 0x01;
  8637  001C9C  0E01               	movlw	1
  8638  001C9E  6E94               	movwf	3988,c	;volatile
  8639                           
  8640                           ;Lab12_ex.c: 95: TRISD = 0x00;
  8641  001CA0  0E00               	movlw	0
  8642  001CA2  6E95               	movwf	3989,c	;volatile
  8643                           
  8644                           ;Lab12_ex.c: 98: RBPU=0;
  8645  001CA4  9EF1               	bcf	intcon2,7,c	;volatile
  8646                           
  8647                           ;Lab12_ex.c: 99: TMR3L = 0x00;
  8648  001CA6  0E00               	movlw	0
  8649  001CA8  6EB2               	movwf	4018,c	;volatile
  8650                           
  8651                           ;Lab12_ex.c: 100: T3CON = 0x02;
  8652  001CAA  0E02               	movlw	2
  8653  001CAC  6EB1               	movwf	4017,c	;volatile
  8654                           
  8655                           ;Lab12_ex.c: 101: I2C_Init(100000);
  8656  001CAE  0EA0               	movlw	160
  8657  001CB0  6E0F               	movwf	I2C_Init@c,c
  8658  001CB2  0E86               	movlw	134
  8659  001CB4  6E10               	movwf	I2C_Init@c+1,c
  8660  001CB6  0E01               	movlw	1
  8661  001CB8  6E11               	movwf	I2C_Init@c+2,c
  8662  001CBA  0E00               	movlw	0
  8663  001CBC  6E12               	movwf	I2C_Init@c+3,c
  8664  001CBE  EC59  F010         	call	_I2C_Init	;wreg free
  8665                           
  8666                           ;Lab12_ex.c: 103: DS1621_Init();
  8667  001CC2  ECCF  F00F         	call	_DS1621_Init	;wreg free
  8668                           
  8669                           ;Lab12_ex.c: 104: init_INTERRUPT();
  8670  001CC6  EC72  F010         	call	_init_INTERRUPT	;wreg free
  8671                           
  8672                           ;Lab12_ex.c: 105: FAN = 0;
  8673  001CCA  0E00               	movlw	0
  8674  001CCC  6E52               	movwf	_FAN,c
  8675  001CCE  0012               	return		;funcret
  8676  001CD0                     __end_of_Do_Init:
  8677                           	opt stack 0
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           intcon2	equ	0xFF1
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           postdec1	equ	0xFE5
  8689                           fsr1l	equ	0xFE1
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           
  8697 ;; *************** function _init_UART *****************
  8698 ;; Defined at:
  8699 ;;		line 80 in file "Lab12_ex.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;		None               void
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        0 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    2
  8720 ;; This function calls:
  8721 ;;		_OpenUSART
  8722 ;; This function is called by:
  8723 ;;		_Do_Init
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text39
  8728  00201C                     __ptext39:
  8729                           	opt stack 0
  8730  00201C                     _init_UART:
  8731                           	opt stack 27
  8732                           
  8733                           ;Lab12_ex.c: 82: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  8734                           
  8735                           ;incstack = 0
  8736  00201C  0E00               	movlw	0
  8737  00201E  6E10               	movwf	OpenUSART@spbrg+1,c
  8738  002020  0E19               	movlw	25
  8739  002022  6E0F               	movwf	OpenUSART@spbrg,c
  8740  002024  0E3C               	movlw	60
  8741  002026  ECAA  F00C         	call	_OpenUSART
  8742                           
  8743                           ;Lab12_ex.c: 83: OSCCON = 0x70;
  8744  00202A  0E70               	movlw	112
  8745  00202C  6ED3               	movwf	4051,c	;volatile
  8746  00202E  0012               	return		;funcret
  8747  002030                     __end_of_init_UART:
  8748                           	opt stack 0
  8749                           tblptru	equ	0xFF8
  8750                           tblptrh	equ	0xFF7
  8751                           tblptrl	equ	0xFF6
  8752                           tablat	equ	0xFF5
  8753                           prodh	equ	0xFF4
  8754                           prodl	equ	0xFF3
  8755                           intcon	equ	0xFF2
  8756                           intcon2	equ	0xFF1
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           postdec1	equ	0xFE5
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _OpenUSART *****************
  8769 ;; Defined at:
  8770 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  config          1    wreg     unsigned char 
  8773 ;;  spbrg           2   14[COMRAM] unsigned int 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  config          1   16[COMRAM] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;		None               void
  8778 ;; Registers used:
  8779 ;;		wreg, status,2
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:        3 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    1
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_init_UART
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text40
  8800  001954                     __ptext40:
  8801                           	opt stack 0
  8802  001954                     _OpenUSART:
  8803                           	opt stack 27
  8804                           
  8805                           ;incstack = 0
  8806                           ;OpenUSART@config stored from wreg
  8807  001954  6E11               	movwf	OpenUSART@config,c
  8808  001956  0E00               	movlw	0
  8809  001958  6EAC               	movwf	4012,c	;volatile
  8810  00195A  0E00               	movlw	0
  8811  00195C  6EAB               	movwf	4011,c	;volatile
  8812  00195E  A011               	btfss	OpenUSART@config,0,c
  8813  001960  D002               	goto	l5161
  8814  001962  88AC               	bsf	4012,4,c	;volatile
  8815  001964  D000               	goto	l5161
  8816  001966                     l5161:
  8817  001966  A211               	btfss	OpenUSART@config,1,c
  8818  001968  D003               	goto	l5165
  8819  00196A  8CAC               	bsf	4012,6,c	;volatile
  8820  00196C  8CAB               	bsf	4011,6,c	;volatile
  8821  00196E  D000               	goto	l5165
  8822  001970                     l5165:
  8823  001970  A411               	btfss	OpenUSART@config,2,c
  8824  001972  D002               	goto	l5169
  8825  001974  8EAC               	bsf	4012,7,c	;volatile
  8826  001976  D000               	goto	l5169
  8827  001978                     l5169:
  8828  001978  A611               	btfss	OpenUSART@config,3,c
  8829  00197A  D002               	goto	l747
  8830  00197C  88AB               	bsf	4011,4,c	;volatile
  8831  00197E  D002               	goto	l5173
  8832  001980                     l747:
  8833  001980  8AAB               	bsf	4011,5,c	;volatile
  8834  001982  D000               	goto	l5173
  8835  001984                     l5173:
  8836  001984  B811               	btfsc	OpenUSART@config,4,c
  8837  001986  84AC               	bsf	4012,2,c	;volatile
  8838  001988  989E               	bcf	3998,4,c	;volatile
  8839  00198A  AA11               	btfss	OpenUSART@config,5,c
  8840  00198C  D002               	goto	l5181
  8841  00198E  86AB               	bsf	4011,3,c	;volatile
  8842  001990  D000               	goto	l5181
  8843  001992                     l5181:
  8844  001992  AC11               	btfss	OpenUSART@config,6,c
  8845  001994  D002               	goto	l751
  8846  001996  8A9D               	bsf	3997,5,c	;volatile
  8847  001998  D001               	goto	l752
  8848  00199A                     l751:
  8849  00199A  9A9D               	bcf	3997,5,c	;volatile
  8850  00199C                     l752:
  8851  00199C  9A9E               	bcf	3998,5,c	;volatile
  8852  00199E  AE11               	btfss	OpenUSART@config,7,c
  8853  0019A0  D002               	goto	l753
  8854  0019A2  889D               	bsf	3997,4,c	;volatile
  8855  0019A4  D001               	goto	l754
  8856  0019A6                     l753:
  8857  0019A6  989D               	bcf	3997,4,c	;volatile
  8858  0019A8                     l754:
  8859  0019A8  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8860  0019AC  5010               	movf	OpenUSART@spbrg+1,w,c
  8861  0019AE  6EB0               	movwf	4016,c	;volatile
  8862  0019B0  8AAC               	bsf	4012,5,c	;volatile
  8863  0019B2  8EAB               	bsf	4011,7,c	;volatile
  8864  0019B4  9C94               	bcf	3988,6,c	;volatile
  8865  0019B6  8E94               	bsf	3988,7,c	;volatile
  8866  0019B8  B8AC               	btfsc	4012,4,c	;volatile
  8867  0019BA  BEAC               	btfsc	4012,7,c	;volatile
  8868  0019BC  D002               	goto	l756
  8869  0019BE  8C94               	bsf	3988,6,c	;volatile
  8870  0019C0  D000               	goto	l756
  8871  0019C2                     l756:
  8872  0019C2  0012               	return		;funcret
  8873  0019C4                     __end_of_OpenUSART:
  8874                           	opt stack 0
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon	equ	0xFF2
  8882                           intcon2	equ	0xFF1
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           postdec1	equ	0xFE5
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _init_INTERRUPT *****************
  8895 ;; Defined at:
  8896 ;;		line 17 in file "Interrupt.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		None
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    1
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_Do_Init
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text41
  8925  0020E4                     __ptext41:
  8926                           	opt stack 0
  8927  0020E4                     _init_INTERRUPT:
  8928                           	opt stack 28
  8929                           
  8930                           ;incstack = 0
  8931  0020E4  0012               	return		;funcret
  8932  0020E6                     __end_of_init_INTERRUPT:
  8933                           	opt stack 0
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           postinc0	equ	0xFEE
  8943                           wreg	equ	0xFE8
  8944                           postdec1	equ	0xFE5
  8945                           fsr1l	equ	0xFE1
  8946                           indf2	equ	0xFDF
  8947                           postinc2	equ	0xFDE
  8948                           postdec2	equ	0xFDD
  8949                           fsr2h	equ	0xFDA
  8950                           fsr2l	equ	0xFD9
  8951                           status	equ	0xFD8
  8952                           
  8953 ;; *************** function _I2C_Init *****************
  8954 ;; Defined at:
  8955 ;;		line 10 in file "I2C_Soft.c"
  8956 ;; Parameters:    Size  Location     Type
  8957 ;;  c               4   14[COMRAM] unsigned long 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;		None
  8960 ;; Return value:  Size  Location     Type
  8961 ;;		None               void
  8962 ;; Registers used:
  8963 ;;		wreg, cstack
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;Total ram usage:        4 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; Hardware stack levels required when called:    2
  8976 ;; This function calls:
  8977 ;;		_i2cHighScl
  8978 ;;		_i2cHighSda
  8979 ;; This function is called by:
  8980 ;;		_Do_Init
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           	psect	text42
  8985  0020B2                     __ptext42:
  8986                           	opt stack 0
  8987  0020B2                     _I2C_Init:
  8988                           	opt stack 27
  8989                           
  8990                           ;I2C_Soft.c: 12: i2cHighScl();
  8991                           
  8992                           ;incstack = 0
  8993  0020B2  EC53  F010         	call	_i2cHighScl	;wreg free
  8994                           
  8995                           ;I2C_Soft.c: 13: i2cHighSda();
  8996  0020B6  EC6C  F010         	call	_i2cHighSda	;wreg free
  8997  0020BA  0012               	return		;funcret
  8998  0020BC                     __end_of_I2C_Init:
  8999                           	opt stack 0
  9000                           tblptru	equ	0xFF8
  9001                           tblptrh	equ	0xFF7
  9002                           tblptrl	equ	0xFF6
  9003                           tablat	equ	0xFF5
  9004                           prodh	equ	0xFF4
  9005                           prodl	equ	0xFF3
  9006                           intcon	equ	0xFF2
  9007                           intcon2	equ	0xFF1
  9008                           postinc0	equ	0xFEE
  9009                           wreg	equ	0xFE8
  9010                           postdec1	equ	0xFE5
  9011                           fsr1l	equ	0xFE1
  9012                           indf2	equ	0xFDF
  9013                           postinc2	equ	0xFDE
  9014                           postdec2	equ	0xFDD
  9015                           fsr2h	equ	0xFDA
  9016                           fsr2l	equ	0xFD9
  9017                           status	equ	0xFD8
  9018                           
  9019 ;; *************** function _DS1621_Init *****************
  9020 ;; Defined at:
  9021 ;;		line 22 in file "I2C_Support.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;		None
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  Device          1   19[COMRAM] unsigned char 
  9026 ;; Return value:  Size  Location     Type
  9027 ;;		None               void
  9028 ;; Registers used:
  9029 ;;		wreg, status,2, status,0, cstack
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;Total ram usage:        1 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:    4
  9042 ;; This function calls:
  9043 ;;		_I2C_Write_Cmd_Only
  9044 ;;		_I2C_Write_Cmd_Write_Data
  9045 ;; This function is called by:
  9046 ;;		_Do_Init
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           	psect	text43
  9051  001F9E                     __ptext43:
  9052                           	opt stack 0
  9053  001F9E                     _DS1621_Init:
  9054                           	opt stack 25
  9055                           
  9056                           ;I2C_Support.c: 24: char Device = 0x48;
  9057                           
  9058                           ;incstack = 0
  9059  001F9E  0E48               	movlw	72
  9060  001FA0  6E14               	movwf	DS1621_Init@Device,c
  9061                           
  9062                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  9063  001FA2  0EAC               	movlw	172
  9064  001FA4  6E11               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  9065  001FA6  0E02               	movlw	2
  9066  001FA8  6E12               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  9067  001FAA  5014               	movf	DS1621_Init@Device,w,c
  9068  001FAC  ECBF  F00F         	call	_I2C_Write_Cmd_Write_Data
  9069                           
  9070                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
  9071  001FB0  0EEE               	movlw	238
  9072  001FB2  6E11               	movwf	I2C_Write_Cmd_Only@Cmd,c
  9073  001FB4  5014               	movf	DS1621_Init@Device,w,c
  9074  001FB6  ECEC  F00F         	call	_I2C_Write_Cmd_Only
  9075  001FBA  0012               	return		;funcret
  9076  001FBC                     __end_of_DS1621_Init:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           intcon2	equ	0xFF1
  9086                           postinc0	equ	0xFEE
  9087                           wreg	equ	0xFE8
  9088                           postdec1	equ	0xFE5
  9089                           fsr1l	equ	0xFE1
  9090                           indf2	equ	0xFDF
  9091                           postinc2	equ	0xFDE
  9092                           postdec2	equ	0xFDD
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  9098 ;; Defined at:
  9099 ;;		line 148 in file "I2C_Soft.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  Device          1    wreg     unsigned char 
  9102 ;;  Cmd             1   16[COMRAM] unsigned char 
  9103 ;;  Data_Out        1   17[COMRAM] unsigned char 
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;  Device          1   18[COMRAM] unsigned char 
  9106 ;; Return value:  Size  Location     Type
  9107 ;;		None               void
  9108 ;; Registers used:
  9109 ;;		wreg, status,2, status,0, cstack
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;Total ram usage:        3 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    3
  9122 ;; This function calls:
  9123 ;;		_I2C_Start
  9124 ;;		_I2C_Stop
  9125 ;;		_I2C_Write
  9126 ;; This function is called by:
  9127 ;;		_DS1621_Init
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text44
  9132  001F7E                     __ptext44:
  9133                           	opt stack 0
  9134  001F7E                     _I2C_Write_Cmd_Write_Data:
  9135                           	opt stack 25
  9136                           
  9137                           ;incstack = 0
  9138                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  9139  001F7E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  9140                           
  9141                           ;I2C_Soft.c: 150: I2C_Start();
  9142  001F80  EC2A  F010         	call	_I2C_Start	;wreg free
  9143                           
  9144                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  9145  001F84  5013               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  9146  001F86  2413               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  9147  001F88  ECE9  F00E         	call	_I2C_Write
  9148                           
  9149                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  9150  001F8C  5011               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  9151  001F8E  ECE9  F00E         	call	_I2C_Write
  9152                           
  9153                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  9154  001F92  5012               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  9155  001F94  ECE9  F00E         	call	_I2C_Write
  9156                           
  9157                           ;I2C_Soft.c: 154: I2C_Stop();
  9158  001F98  EC21  F010         	call	_I2C_Stop	;wreg free
  9159  001F9C  0012               	return		;funcret
  9160  001F9E                     __end_of_I2C_Write_Cmd_Write_Data:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           postinc0	equ	0xFEE
  9171                           wreg	equ	0xFE8
  9172                           postdec1	equ	0xFE5
  9173                           fsr1l	equ	0xFE1
  9174                           indf2	equ	0xFDF
  9175                           postinc2	equ	0xFDE
  9176                           postdec2	equ	0xFDD
  9177                           fsr2h	equ	0xFDA
  9178                           fsr2l	equ	0xFD9
  9179                           status	equ	0xFD8
  9180                           
  9181 ;; *************** function _I2C_Write_Cmd_Only *****************
  9182 ;; Defined at:
  9183 ;;		line 140 in file "I2C_Soft.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;  Device          1    wreg     unsigned char 
  9186 ;;  Cmd             1   16[COMRAM] unsigned char 
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;  Device          1   17[COMRAM] unsigned char 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;		None               void
  9191 ;; Registers used:
  9192 ;;		wreg, status,2, status,0, cstack
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9198 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;Total ram usage:        2 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    3
  9205 ;; This function calls:
  9206 ;;		_I2C_Start
  9207 ;;		_I2C_Stop
  9208 ;;		_I2C_Write
  9209 ;; This function is called by:
  9210 ;;		_DS1621_Init
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           	psect	text45
  9215  001FD8                     __ptext45:
  9216                           	opt stack 0
  9217  001FD8                     _I2C_Write_Cmd_Only:
  9218                           	opt stack 25
  9219                           
  9220                           ;incstack = 0
  9221                           ;I2C_Write_Cmd_Only@Device stored from wreg
  9222  001FD8  6E12               	movwf	I2C_Write_Cmd_Only@Device,c
  9223                           
  9224                           ;I2C_Soft.c: 142: I2C_Start();
  9225  001FDA  EC2A  F010         	call	_I2C_Start	;wreg free
  9226                           
  9227                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  9228  001FDE  5012               	movf	I2C_Write_Cmd_Only@Device,w,c
  9229  001FE0  2412               	addwf	I2C_Write_Cmd_Only@Device,w,c
  9230  001FE2  ECE9  F00E         	call	_I2C_Write
  9231                           
  9232                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  9233  001FE6  5011               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  9234  001FE8  ECE9  F00E         	call	_I2C_Write
  9235                           
  9236                           ;I2C_Soft.c: 145: I2C_Stop();
  9237  001FEC  EC21  F010         	call	_I2C_Stop	;wreg free
  9238  001FF0  0012               	return		;funcret
  9239  001FF2                     __end_of_I2C_Write_Cmd_Only:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           prodh	equ	0xFF4
  9246                           prodl	equ	0xFF3
  9247                           intcon	equ	0xFF2
  9248                           intcon2	equ	0xFF1
  9249                           postinc0	equ	0xFEE
  9250                           wreg	equ	0xFE8
  9251                           postdec1	equ	0xFE5
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           fsr2h	equ	0xFDA
  9257                           fsr2l	equ	0xFD9
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function _Do_Beep *****************
  9261 ;; Defined at:
  9262 ;;		line 104 in file "Fan_Support.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;		None
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;		None
  9267 ;; Return value:  Size  Location     Type
  9268 ;;		None               void
  9269 ;; Registers used:
  9270 ;;		None
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;Total ram usage:        0 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    1
  9283 ;; This function calls:
  9284 ;;		Nothing
  9285 ;; This function is called by:
  9286 ;;		_main
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text46
  9291  0020E6                     __ptext46:
  9292                           	opt stack 0
  9293  0020E6                     _Do_Beep:
  9294                           	opt stack 29
  9295                           
  9296                           ;incstack = 0
  9297  0020E6  0012               	return		;funcret
  9298  0020E8                     __end_of_Do_Beep:
  9299                           	opt stack 0
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           intcon2	equ	0xFF1
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           postdec1	equ	0xFE5
  9311                           fsr1l	equ	0xFE1
  9312                           indf2	equ	0xFDF
  9313                           postinc2	equ	0xFDE
  9314                           postdec2	equ	0xFDD
  9315                           fsr2h	equ	0xFDA
  9316                           fsr2l	equ	0xFD9
  9317                           status	equ	0xFD8
  9318                           
  9319 ;; *************** function _DS3231_Read_Time *****************
  9320 ;; Defined at:
  9321 ;;		line 45 in file "I2C_Support.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;		None
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;  Device          1   18[COMRAM] unsigned char 
  9326 ;;  Address         1   17[COMRAM] unsigned char 
  9327 ;;  Data_Ret        1    0        unsigned char 
  9328 ;; Return value:  Size  Location     Type
  9329 ;;		None               void
  9330 ;; Registers used:
  9331 ;;		wreg, status,2, status,0, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;Total ram usage:        2 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    4
  9344 ;; This function calls:
  9345 ;;		_I2C_ReStart
  9346 ;;		_I2C_Read
  9347 ;;		_I2C_Start
  9348 ;;		_I2C_Stop
  9349 ;;		_I2C_Write
  9350 ;; This function is called by:
  9351 ;;		_main
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text47
  9356  001A92                     __ptext47:
  9357                           	opt stack 0
  9358  001A92                     _DS3231_Read_Time:
  9359                           	opt stack 26
  9360                           
  9361                           ;I2C_Support.c: 47: char Device = 0x68;
  9362                           
  9363                           ;incstack = 0
  9364  001A92  0E68               	movlw	104
  9365  001A94  6E13               	movwf	DS3231_Read_Time@Device,c
  9366                           
  9367                           ;I2C_Support.c: 48: char Address = 0x00;
  9368  001A96  0E00               	movlw	0
  9369  001A98  6E12               	movwf	DS3231_Read_Time@Address,c
  9370                           
  9371                           ;I2C_Support.c: 50: char Data_Ret;
  9372                           ;I2C_Support.c: 51: I2C_Start();
  9373  001A9A  EC2A  F010         	call	_I2C_Start	;wreg free
  9374                           
  9375                           ;I2C_Support.c: 52: I2C_Write((Device << 1) | 0);
  9376  001A9E  5013               	movf	DS3231_Read_Time@Device,w,c
  9377  001AA0  2413               	addwf	DS3231_Read_Time@Device,w,c
  9378  001AA2  ECE9  F00E         	call	_I2C_Write
  9379                           
  9380                           ;I2C_Support.c: 53: I2C_Write(Address);
  9381  001AA6  5012               	movf	DS3231_Read_Time@Address,w,c
  9382  001AA8  ECE9  F00E         	call	_I2C_Write
  9383                           
  9384                           ;I2C_Support.c: 54: I2C_ReStart();
  9385  001AAC  ECF9  F00F         	call	_I2C_ReStart	;wreg free
  9386                           
  9387                           ;I2C_Support.c: 55: I2C_Write((Device << 1) | 1);
  9388  001AB0  80D8               	bsf	status,0,c
  9389  001AB2  3413               	rlcf	DS3231_Read_Time@Device,w,c
  9390  001AB4  ECE9  F00E         	call	_I2C_Write
  9391                           
  9392                           ;I2C_Support.c: 56: second = I2C_Read(1);
  9393  001AB8  0E01               	movlw	1
  9394  001ABA  EC68  F00E         	call	_I2C_Read
  9395  001ABE  6E64               	movwf	_second,c
  9396                           
  9397                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  9398  001AC0  0E01               	movlw	1
  9399  001AC2  EC68  F00E         	call	_I2C_Read
  9400  001AC6  6E61               	movwf	_minute,c
  9401                           
  9402                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  9403  001AC8  0E01               	movlw	1
  9404  001ACA  EC68  F00E         	call	_I2C_Read
  9405  001ACE  6E60               	movwf	_hour,c
  9406                           
  9407                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  9408  001AD0  0E01               	movlw	1
  9409  001AD2  EC68  F00E         	call	_I2C_Read
  9410  001AD6  6E5D               	movwf	_dow,c
  9411                           
  9412                           ;I2C_Support.c: 60: day = I2C_Read(1);
  9413  001AD8  0E01               	movlw	1
  9414  001ADA  EC68  F00E         	call	_I2C_Read
  9415  001ADE  6E5C               	movwf	_day,c
  9416                           
  9417                           ;I2C_Support.c: 61: month = I2C_Read(1);
  9418  001AE0  0E01               	movlw	1
  9419  001AE2  EC68  F00E         	call	_I2C_Read
  9420  001AE6  6E62               	movwf	_month,c
  9421                           
  9422                           ;I2C_Support.c: 62: year = I2C_Read(0);
  9423  001AE8  0E00               	movlw	0
  9424  001AEA  EC68  F00E         	call	_I2C_Read
  9425  001AEE  6E6E               	movwf	_year,c
  9426                           
  9427                           ;I2C_Support.c: 63: I2C_Stop();
  9428  001AF0  EC21  F010         	call	_I2C_Stop	;wreg free
  9429  001AF4  0012               	return		;funcret
  9430  001AF6                     __end_of_DS3231_Read_Time:
  9431                           	opt stack 0
  9432                           tblptru	equ	0xFF8
  9433                           tblptrh	equ	0xFF7
  9434                           tblptrl	equ	0xFF6
  9435                           tablat	equ	0xFF5
  9436                           prodh	equ	0xFF4
  9437                           prodl	equ	0xFF3
  9438                           intcon	equ	0xFF2
  9439                           intcon2	equ	0xFF1
  9440                           postinc0	equ	0xFEE
  9441                           wreg	equ	0xFE8
  9442                           postdec1	equ	0xFE5
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function _DS1621_Read_Temp *****************
  9452 ;; Defined at:
  9453 ;;		line 30 in file "I2C_Support.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  Device          1   21[COMRAM] unsigned char 
  9458 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  9459 ;;  Cmd             1   19[COMRAM] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  2   17[COMRAM] int 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:        5 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    4
  9476 ;; This function calls:
  9477 ;;		_I2C_ReStart
  9478 ;;		_I2C_Read
  9479 ;;		_I2C_Start
  9480 ;;		_I2C_Stop
  9481 ;;		_I2C_Write
  9482 ;; This function is called by:
  9483 ;;		_main
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text48
  9488  001E10                     __ptext48:
  9489                           	opt stack 0
  9490  001E10                     _DS1621_Read_Temp:
  9491                           	opt stack 26
  9492                           
  9493                           ;I2C_Support.c: 32: char Device = 0x48;
  9494                           
  9495                           ;incstack = 0
  9496  001E10  0E48               	movlw	72
  9497  001E12  6E16               	movwf	DS1621_Read_Temp@Device,c
  9498                           
  9499                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  9500  001E14  0EAA               	movlw	170
  9501  001E16  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  9502                           
  9503                           ;I2C_Support.c: 34: char Data_Ret;
  9504                           ;I2C_Support.c: 35: I2C_Start();
  9505  001E18  EC2A  F010         	call	_I2C_Start	;wreg free
  9506                           
  9507                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  9508  001E1C  5016               	movf	DS1621_Read_Temp@Device,w,c
  9509  001E1E  2416               	addwf	DS1621_Read_Temp@Device,w,c
  9510  001E20  ECE9  F00E         	call	_I2C_Write
  9511                           
  9512                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  9513  001E24  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  9514  001E26  ECE9  F00E         	call	_I2C_Write
  9515                           
  9516                           ;I2C_Support.c: 38: I2C_ReStart();
  9517  001E2A  ECF9  F00F         	call	_I2C_ReStart	;wreg free
  9518                           
  9519                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  9520  001E2E  80D8               	bsf	status,0,c
  9521  001E30  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  9522  001E32  ECE9  F00E         	call	_I2C_Write
  9523                           
  9524                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  9525  001E36  0E00               	movlw	0
  9526  001E38  EC68  F00E         	call	_I2C_Read
  9527  001E3C  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  9528                           
  9529                           ;I2C_Support.c: 41: I2C_Stop();
  9530  001E3E  EC21  F010         	call	_I2C_Stop	;wreg free
  9531                           
  9532                           ;I2C_Support.c: 42: return Data_Ret;
  9533  001E42  C015  F012         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  9534  001E46  6A13               	clrf	?_DS1621_Read_Temp+1,c
  9535  001E48  D000               	goto	l322
  9536  001E4A                     l322:
  9537  001E4A  0012               	return		;funcret
  9538  001E4C                     __end_of_DS1621_Read_Temp:
  9539                           	opt stack 0
  9540                           tblptru	equ	0xFF8
  9541                           tblptrh	equ	0xFF7
  9542                           tblptrl	equ	0xFF6
  9543                           tablat	equ	0xFF5
  9544                           prodh	equ	0xFF4
  9545                           prodl	equ	0xFF3
  9546                           intcon	equ	0xFF2
  9547                           intcon2	equ	0xFF1
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           postdec1	equ	0xFE5
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _I2C_Write *****************
  9560 ;; Defined at:
  9561 ;;		line 37 in file "I2C_Soft.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;  outByte         1    wreg     unsigned char 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  outByte         1   14[COMRAM] unsigned char 
  9566 ;;  n               1   15[COMRAM] unsigned char 
  9567 ;; Return value:  Size  Location     Type
  9568 ;;		None               void
  9569 ;; Registers used:
  9570 ;;		wreg, status,2, status,0, cstack
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;Total ram usage:        2 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    2
  9583 ;; This function calls:
  9584 ;;		_i2cHighScl
  9585 ;;		_i2cHighSda
  9586 ;;		_i2cLowScl
  9587 ;;		_i2cLowSda
  9588 ;; This function is called by:
  9589 ;;		_I2C_Write_Cmd_Only
  9590 ;;		_I2C_Write_Cmd_Write_Data
  9591 ;;		_DS1621_Read_Temp
  9592 ;;		_DS3231_Read_Time
  9593 ;;		_I2C_Write_Address_Read_One_Byte
  9594 ;;		_I2C_Write_Address_Write_One_Byte
  9595 ;;		_I2C_Write_Cmd_Read_One_Byte
  9596 ;;		_DS3231_Setup_Time
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text49
  9601  001DD2                     __ptext49:
  9602                           	opt stack 0
  9603  001DD2                     _I2C_Write:
  9604                           	opt stack 25
  9605                           
  9606                           ;incstack = 0
  9607                           ;I2C_Write@outByte stored from wreg
  9608  001DD2  6E0F               	movwf	I2C_Write@outByte,c
  9609                           
  9610                           ;I2C_Soft.c: 39: unsigned char n;
  9611                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  9612  001DD4  0E00               	movlw	0
  9613  001DD6  6E10               	movwf	I2C_Write@n,c
  9614  001DD8                     l4893:
  9615  001DD8  0E07               	movlw	7
  9616  001DDA  6410               	cpfsgt	I2C_Write@n,c
  9617  001DDC  D001               	goto	l242
  9618  001DDE  D011               	goto	l4911
  9619  001DE0                     l242:
  9620                           
  9621                           ;I2C_Soft.c: 41: {
  9622                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  9623  001DE0  AE0F               	btfss	I2C_Write@outByte,7,c
  9624  001DE2  D003               	goto	l4899
  9625  001DE4  EC6C  F010         	call	_i2cHighSda	;wreg free
  9626  001DE8  D003               	goto	l4901
  9627  001DEA                     l4899:
  9628                           
  9629                           ;I2C_Soft.c: 43: else i2cLowSda();
  9630  001DEA  EC63  F010         	call	_i2cLowSda	;wreg free
  9631  001DEE  D000               	goto	l4901
  9632  001DF0                     l4901:
  9633                           
  9634                           ;I2C_Soft.c: 44: i2cHighScl();
  9635  001DF0  EC53  F010         	call	_i2cHighScl	;wreg free
  9636                           
  9637                           ;I2C_Soft.c: 45: i2cLowScl();
  9638  001DF4  EC68  F010         	call	_i2cLowScl	;wreg free
  9639                           
  9640                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  9641  001DF8  500F               	movf	I2C_Write@outByte,w,c
  9642  001DFA  240F               	addwf	I2C_Write@outByte,w,c
  9643  001DFC  6E0F               	movwf	I2C_Write@outByte,c
  9644  001DFE  2A10               	incf	I2C_Write@n,f,c
  9645  001E00  D7EB               	goto	l4893
  9646  001E02                     l4911:
  9647                           
  9648                           ;I2C_Soft.c: 47: }
  9649                           ;I2C_Soft.c: 48: i2cHighSda();
  9650  001E02  EC6C  F010         	call	_i2cHighSda	;wreg free
  9651                           
  9652                           ;I2C_Soft.c: 49: i2cHighScl();
  9653  001E06  EC53  F010         	call	_i2cHighScl	;wreg free
  9654                           
  9655                           ;I2C_Soft.c: 50: i2cLowScl();
  9656  001E0A  EC68  F010         	call	_i2cLowScl	;wreg free
  9657  001E0E  0012               	return		;funcret
  9658  001E10                     __end_of_I2C_Write:
  9659                           	opt stack 0
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           intcon	equ	0xFF2
  9667                           intcon2	equ	0xFF1
  9668                           postinc0	equ	0xFEE
  9669                           wreg	equ	0xFE8
  9670                           postdec1	equ	0xFE5
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _I2C_Stop *****************
  9680 ;; Defined at:
  9681 ;;		line 84 in file "I2C_Soft.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;		None               void
  9688 ;; Registers used:
  9689 ;;		wreg, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;Total ram usage:        0 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    2
  9702 ;; This function calls:
  9703 ;;		_i2cHighScl
  9704 ;;		_i2cHighSda
  9705 ;;		_i2cLowScl
  9706 ;;		_i2cLowSda
  9707 ;; This function is called by:
  9708 ;;		_I2C_Write_Cmd_Only
  9709 ;;		_I2C_Write_Cmd_Write_Data
  9710 ;;		_DS1621_Read_Temp
  9711 ;;		_DS3231_Read_Time
  9712 ;;		_I2C_Write_Address_Read_One_Byte
  9713 ;;		_I2C_Write_Address_Write_One_Byte
  9714 ;;		_I2C_Write_Cmd_Read_One_Byte
  9715 ;;		_DS3231_Setup_Time
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text50
  9720  002042                     __ptext50:
  9721                           	opt stack 0
  9722  002042                     _I2C_Stop:
  9723                           	opt stack 25
  9724                           
  9725                           ;I2C_Soft.c: 86: i2cLowScl();
  9726                           
  9727                           ;incstack = 0
  9728  002042  EC68  F010         	call	_i2cLowScl	;wreg free
  9729                           
  9730                           ;I2C_Soft.c: 87: i2cLowSda();
  9731  002046  EC63  F010         	call	_i2cLowSda	;wreg free
  9732                           
  9733                           ;I2C_Soft.c: 88: i2cHighScl();
  9734  00204A  EC53  F010         	call	_i2cHighScl	;wreg free
  9735                           
  9736                           ;I2C_Soft.c: 89: i2cHighSda();
  9737  00204E  EC6C  F010         	call	_i2cHighSda	;wreg free
  9738  002052  0012               	return		;funcret
  9739  002054                     __end_of_I2C_Stop:
  9740                           	opt stack 0
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           intcon	equ	0xFF2
  9748                           intcon2	equ	0xFF1
  9749                           postinc0	equ	0xFEE
  9750                           wreg	equ	0xFE8
  9751                           postdec1	equ	0xFE5
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           postdec2	equ	0xFDD
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function _I2C_Start *****************
  9761 ;; Defined at:
  9762 ;;		line 67 in file "I2C_Soft.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;		None               void
  9769 ;; Registers used:
  9770 ;;		wreg, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;Total ram usage:        0 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    2
  9783 ;; This function calls:
  9784 ;;		_i2cHighScl
  9785 ;;		_i2cHighSda
  9786 ;;		_i2cLowScl
  9787 ;;		_i2cLowSda
  9788 ;; This function is called by:
  9789 ;;		_I2C_Write_Cmd_Only
  9790 ;;		_I2C_Write_Cmd_Write_Data
  9791 ;;		_DS1621_Read_Temp
  9792 ;;		_DS3231_Read_Time
  9793 ;;		_I2C_Write_Address_Read_One_Byte
  9794 ;;		_I2C_Write_Address_Write_One_Byte
  9795 ;;		_I2C_Write_Cmd_Read_One_Byte
  9796 ;;		_DS3231_Setup_Time
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text51
  9801  002054                     __ptext51:
  9802                           	opt stack 0
  9803  002054                     _I2C_Start:
  9804                           	opt stack 25
  9805                           
  9806                           ;I2C_Soft.c: 69: i2cHighSda();
  9807                           
  9808                           ;incstack = 0
  9809  002054  EC6C  F010         	call	_i2cHighSda	;wreg free
  9810                           
  9811                           ;I2C_Soft.c: 70: i2cHighScl();
  9812  002058  EC53  F010         	call	_i2cHighScl	;wreg free
  9813                           
  9814                           ;I2C_Soft.c: 71: i2cLowSda();
  9815  00205C  EC63  F010         	call	_i2cLowSda	;wreg free
  9816                           
  9817                           ;I2C_Soft.c: 72: i2cLowScl();
  9818  002060  EC68  F010         	call	_i2cLowScl	;wreg free
  9819  002064  0012               	return		;funcret
  9820  002066                     __end_of_I2C_Start:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           intcon	equ	0xFF2
  9829                           intcon2	equ	0xFF1
  9830                           postinc0	equ	0xFEE
  9831                           wreg	equ	0xFE8
  9832                           postdec1	equ	0xFE5
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function _I2C_Read *****************
  9842 ;; Defined at:
  9843 ;;		line 16 in file "I2C_Soft.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  ack             1    wreg     unsigned char 
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;  ack             1   14[COMRAM] unsigned char 
  9848 ;;  inByte          1   16[COMRAM] unsigned char 
  9849 ;;  n               1   15[COMRAM] unsigned char 
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  1    wreg      unsigned char 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;Total ram usage:        3 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    3
  9866 ;; This function calls:
  9867 ;;		_i2cAck
  9868 ;;		_i2cHighScl
  9869 ;;		_i2cHighSda
  9870 ;;		_i2cLowScl
  9871 ;;		_i2cNack
  9872 ;; This function is called by:
  9873 ;;		_DS1621_Read_Temp
  9874 ;;		_DS3231_Read_Time
  9875 ;;		_I2C_Write_Address_Read_One_Byte
  9876 ;;		_I2C_Write_Cmd_Read_One_Byte
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           	psect	text52
  9881  001CD0                     __ptext52:
  9882                           	opt stack 0
  9883  001CD0                     _I2C_Read:
  9884                           	opt stack 26
  9885                           
  9886                           ;incstack = 0
  9887                           ;I2C_Read@ack stored from wreg
  9888  001CD0  6E0F               	movwf	I2C_Read@ack,c
  9889                           
  9890                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  9891                           ;I2C_Soft.c: 19: i2cHighSda();
  9892  001CD2  EC6C  F010         	call	_i2cHighSda	;wreg free
  9893                           
  9894                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  9895  001CD6  0E00               	movlw	0
  9896  001CD8  6E10               	movwf	I2C_Read@n,c
  9897  001CDA                     l5357:
  9898  001CDA  0E07               	movlw	7
  9899  001CDC  6410               	cpfsgt	I2C_Read@n,c
  9900  001CDE  D001               	goto	l5361
  9901  001CE0  D00F               	goto	l5375
  9902  001CE2                     l5361:
  9903                           
  9904                           ;I2C_Soft.c: 21: {
  9905                           ;I2C_Soft.c: 22: i2cHighScl();
  9906  001CE2  EC53  F010         	call	_i2cHighScl	;wreg free
  9907                           
  9908                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
  9909  001CE6  AA81               	btfss	3969,5,c	;volatile
  9910  001CE8  D003               	goto	l5367
  9911                           
  9912                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  9913  001CEA  80D8               	bsf	status,0,c
  9914  001CEC  3611               	rlcf	I2C_Read@inByte,f,c
  9915  001CEE  D004               	goto	l5369
  9916  001CF0                     l5367:
  9917                           
  9918                           ;I2C_Soft.c: 26: else
  9919                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  9920  001CF0  5011               	movf	I2C_Read@inByte,w,c
  9921  001CF2  2411               	addwf	I2C_Read@inByte,w,c
  9922  001CF4  6E11               	movwf	I2C_Read@inByte,c
  9923  001CF6  D000               	goto	l5369
  9924  001CF8                     l5369:
  9925                           
  9926                           ;I2C_Soft.c: 28: i2cLowScl();
  9927  001CF8  EC68  F010         	call	_i2cLowScl	;wreg free
  9928  001CFC  2A10               	incf	I2C_Read@n,f,c
  9929  001CFE  D7ED               	goto	l5357
  9930  001D00                     l5375:
  9931                           
  9932                           ;I2C_Soft.c: 29: }
  9933                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  9934  001D00  500F               	movf	I2C_Read@ack,w,c
  9935  001D02  B4D8               	btfsc	status,2,c
  9936  001D04  D003               	goto	l5379
  9937  001D06  EC33  F010         	call	_i2cAck	;wreg free
  9938  001D0A  D003               	goto	l5381
  9939  001D0C                     l5379:
  9940                           
  9941                           ;I2C_Soft.c: 31: else i2cNack();
  9942  001D0C  EC5E  F010         	call	_i2cNack	;wreg free
  9943  001D10  D000               	goto	l5381
  9944  001D12                     l5381:
  9945                           
  9946                           ;I2C_Soft.c: 34: return(inByte);
  9947  001D12  5011               	movf	I2C_Read@inByte,w,c
  9948  001D14  D000               	goto	l239
  9949  001D16                     l239:
  9950  001D16  0012               	return		;funcret
  9951  001D18                     __end_of_I2C_Read:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           intcon2	equ	0xFF1
  9961                           postinc0	equ	0xFEE
  9962                           wreg	equ	0xFE8
  9963                           postdec1	equ	0xFE5
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972 ;; *************** function _i2cNack *****************
  9973 ;; Defined at:
  9974 ;;		line 53 in file "I2C_Soft.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;		None
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;		None
  9979 ;; Return value:  Size  Location     Type
  9980 ;;		None               void
  9981 ;; Registers used:
  9982 ;;		wreg, cstack
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;Total ram usage:        0 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:    2
  9995 ;; This function calls:
  9996 ;;		_i2cHighScl
  9997 ;;		_i2cLowScl
  9998 ;; This function is called by:
  9999 ;;		_I2C_Read
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           	psect	text53
 10004  0020BC                     __ptext53:
 10005                           	opt stack 0
 10006  0020BC                     _i2cNack:
 10007                           	opt stack 26
 10008                           
 10009                           ;I2C_Soft.c: 55: i2cHighScl();
 10010                           
 10011                           ;incstack = 0
 10012  0020BC  EC53  F010         	call	_i2cHighScl	;wreg free
 10013                           
 10014                           ;I2C_Soft.c: 56: i2cLowScl();
 10015  0020C0  EC68  F010         	call	_i2cLowScl	;wreg free
 10016  0020C4  0012               	return		;funcret
 10017  0020C6                     __end_of_i2cNack:
 10018                           	opt stack 0
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           intcon2	equ	0xFF1
 10027                           postinc0	equ	0xFEE
 10028                           wreg	equ	0xFE8
 10029                           postdec1	equ	0xFE5
 10030                           fsr1l	equ	0xFE1
 10031                           indf2	equ	0xFDF
 10032                           postinc2	equ	0xFDE
 10033                           postdec2	equ	0xFDD
 10034                           fsr2h	equ	0xFDA
 10035                           fsr2l	equ	0xFD9
 10036                           status	equ	0xFD8
 10037                           
 10038 ;; *************** function _i2cAck *****************
 10039 ;; Defined at:
 10040 ;;		line 59 in file "I2C_Soft.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;		None
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg, cstack
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;Total ram usage:        0 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    2
 10061 ;; This function calls:
 10062 ;;		_i2cHighScl
 10063 ;;		_i2cHighSda
 10064 ;;		_i2cLowScl
 10065 ;;		_i2cLowSda
 10066 ;; This function is called by:
 10067 ;;		_I2C_Read
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text54
 10072  002066                     __ptext54:
 10073                           	opt stack 0
 10074  002066                     _i2cAck:
 10075                           	opt stack 26
 10076                           
 10077                           ;I2C_Soft.c: 61: i2cLowSda();
 10078                           
 10079                           ;incstack = 0
 10080  002066  EC63  F010         	call	_i2cLowSda	;wreg free
 10081                           
 10082                           ;I2C_Soft.c: 62: i2cHighScl();
 10083  00206A  EC53  F010         	call	_i2cHighScl	;wreg free
 10084                           
 10085                           ;I2C_Soft.c: 63: i2cLowScl();
 10086  00206E  EC68  F010         	call	_i2cLowScl	;wreg free
 10087                           
 10088                           ;I2C_Soft.c: 64: i2cHighSda();
 10089  002072  EC6C  F010         	call	_i2cHighSda	;wreg free
 10090  002076  0012               	return		;funcret
 10091  002078                     __end_of_i2cAck:
 10092                           	opt stack 0
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           intcon	equ	0xFF2
 10100                           intcon2	equ	0xFF1
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           postdec1	equ	0xFE5
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _I2C_ReStart *****************
 10113 ;; Defined at:
 10114 ;;		line 75 in file "I2C_Soft.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;		None
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;		None
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;Total ram usage:        0 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    2
 10135 ;; This function calls:
 10136 ;;		_i2cHighScl
 10137 ;;		_i2cHighSda
 10138 ;;		_i2cLowScl
 10139 ;;		_i2cLowSda
 10140 ;; This function is called by:
 10141 ;;		_DS1621_Read_Temp
 10142 ;;		_DS3231_Read_Time
 10143 ;;		_I2C_Write_Address_Read_One_Byte
 10144 ;;		_I2C_Write_Cmd_Read_One_Byte
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           	psect	text55
 10149  001FF2                     __ptext55:
 10150                           	opt stack 0
 10151  001FF2                     _I2C_ReStart:
 10152                           	opt stack 27
 10153                           
 10154                           ;I2C_Soft.c: 77: i2cLowScl();
 10155                           
 10156                           ;incstack = 0
 10157  001FF2  EC68  F010         	call	_i2cLowScl	;wreg free
 10158                           
 10159                           ;I2C_Soft.c: 78: i2cHighSda();
 10160  001FF6  EC6C  F010         	call	_i2cHighSda	;wreg free
 10161                           
 10162                           ;I2C_Soft.c: 79: i2cHighScl();
 10163  001FFA  EC53  F010         	call	_i2cHighScl	;wreg free
 10164                           
 10165                           ;I2C_Soft.c: 80: i2cLowSda();
 10166  001FFE  EC63  F010         	call	_i2cLowSda	;wreg free
 10167                           
 10168                           ;I2C_Soft.c: 81: i2cLowScl();
 10169  002002  EC68  F010         	call	_i2cLowScl	;wreg free
 10170  002006  0012               	return		;funcret
 10171  002008                     __end_of_I2C_ReStart:
 10172                           	opt stack 0
 10173                           tblptru	equ	0xFF8
 10174                           tblptrh	equ	0xFF7
 10175                           tblptrl	equ	0xFF6
 10176                           tablat	equ	0xFF5
 10177                           prodh	equ	0xFF4
 10178                           prodl	equ	0xFF3
 10179                           intcon	equ	0xFF2
 10180                           intcon2	equ	0xFF1
 10181                           postinc0	equ	0xFEE
 10182                           wreg	equ	0xFE8
 10183                           postdec1	equ	0xFE5
 10184                           fsr1l	equ	0xFE1
 10185                           indf2	equ	0xFDF
 10186                           postinc2	equ	0xFDE
 10187                           postdec2	equ	0xFDD
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function _i2cLowSda *****************
 10193 ;; Defined at:
 10194 ;;		line 98 in file "I2C_Soft.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;		None               void
 10201 ;; Registers used:
 10202 ;;		None
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;Total ram usage:        0 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    1
 10215 ;; This function calls:
 10216 ;;		Nothing
 10217 ;; This function is called by:
 10218 ;;		_I2C_Write
 10219 ;;		_i2cAck
 10220 ;;		_I2C_Start
 10221 ;;		_I2C_ReStart
 10222 ;;		_I2C_Stop
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           	psect	text56
 10227  0020C6                     __ptext56:
 10228                           	opt stack 0
 10229  0020C6                     _i2cLowSda:
 10230                           	opt stack 25
 10231                           
 10232                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 10233                           
 10234                           ;incstack = 0
 10235  0020C6  9A81               	bcf	3969,5,c	;volatile
 10236                           
 10237                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 10238  0020C8  9A93               	bcf	3987,5,c	;volatile
 10239                           
 10240                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10241  0020CA  D000               	nop2		;2 cycle nop
 10242  0020CC  D000               	nop2		;2 cycle nop
 10243  0020CE  0012               	return		;funcret
 10244  0020D0                     __end_of_i2cLowSda:
 10245                           	opt stack 0
 10246                           tblptru	equ	0xFF8
 10247                           tblptrh	equ	0xFF7
 10248                           tblptrl	equ	0xFF6
 10249                           tablat	equ	0xFF5
 10250                           prodh	equ	0xFF4
 10251                           prodl	equ	0xFF3
 10252                           intcon	equ	0xFF2
 10253                           intcon2	equ	0xFF1
 10254                           postinc0	equ	0xFEE
 10255                           wreg	equ	0xFE8
 10256                           postdec1	equ	0xFE5
 10257                           fsr1l	equ	0xFE1
 10258                           indf2	equ	0xFDF
 10259                           postinc2	equ	0xFDE
 10260                           postdec2	equ	0xFDD
 10261                           fsr2h	equ	0xFDA
 10262                           fsr2l	equ	0xFD9
 10263                           status	equ	0xFD8
 10264                           
 10265 ;; *************** function _i2cLowScl *****************
 10266 ;; Defined at:
 10267 ;;		line 111 in file "I2C_Soft.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;		None
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;		None
 10272 ;; Return value:  Size  Location     Type
 10273 ;;		None               void
 10274 ;; Registers used:
 10275 ;;		None
 10276 ;; Tracked objects:
 10277 ;;		On entry : 0/0
 10278 ;;		On exit  : 0/0
 10279 ;;		Unchanged: 0/0
 10280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;Total ram usage:        0 bytes
 10286 ;; Hardware stack levels used:    1
 10287 ;; Hardware stack levels required when called:    1
 10288 ;; This function calls:
 10289 ;;		Nothing
 10290 ;; This function is called by:
 10291 ;;		_I2C_Read
 10292 ;;		_I2C_Write
 10293 ;;		_i2cNack
 10294 ;;		_i2cAck
 10295 ;;		_I2C_Start
 10296 ;;		_I2C_ReStart
 10297 ;;		_I2C_Stop
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           	psect	text57
 10302  0020D0                     __ptext57:
 10303                           	opt stack 0
 10304  0020D0                     _i2cLowScl:
 10305                           	opt stack 25
 10306                           
 10307                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 10308                           
 10309                           ;incstack = 0
 10310  0020D0  9881               	bcf	3969,4,c	;volatile
 10311                           
 10312                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 10313  0020D2  9893               	bcf	3987,4,c	;volatile
 10314                           
 10315                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10316  0020D4  D000               	nop2		;2 cycle nop
 10317  0020D6  0012               	return		;funcret
 10318  0020D8                     __end_of_i2cLowScl:
 10319                           	opt stack 0
 10320                           tblptru	equ	0xFF8
 10321                           tblptrh	equ	0xFF7
 10322                           tblptrl	equ	0xFF6
 10323                           tablat	equ	0xFF5
 10324                           prodh	equ	0xFF4
 10325                           prodl	equ	0xFF3
 10326                           intcon	equ	0xFF2
 10327                           intcon2	equ	0xFF1
 10328                           postinc0	equ	0xFEE
 10329                           wreg	equ	0xFE8
 10330                           postdec1	equ	0xFE5
 10331                           fsr1l	equ	0xFE1
 10332                           indf2	equ	0xFDF
 10333                           postinc2	equ	0xFDE
 10334                           postdec2	equ	0xFDD
 10335                           fsr2h	equ	0xFDA
 10336                           fsr2l	equ	0xFD9
 10337                           status	equ	0xFD8
 10338                           
 10339 ;; *************** function _i2cHighSda *****************
 10340 ;; Defined at:
 10341 ;;		line 92 in file "I2C_Soft.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;		None
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;		None
 10346 ;; Return value:  Size  Location     Type
 10347 ;;		None               void
 10348 ;; Registers used:
 10349 ;;		None
 10350 ;; Tracked objects:
 10351 ;;		On entry : 0/0
 10352 ;;		On exit  : 0/0
 10353 ;;		Unchanged: 0/0
 10354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10359 ;;Total ram usage:        0 bytes
 10360 ;; Hardware stack levels used:    1
 10361 ;; Hardware stack levels required when called:    1
 10362 ;; This function calls:
 10363 ;;		Nothing
 10364 ;; This function is called by:
 10365 ;;		_I2C_Init
 10366 ;;		_I2C_Read
 10367 ;;		_I2C_Write
 10368 ;;		_i2cAck
 10369 ;;		_I2C_Start
 10370 ;;		_I2C_ReStart
 10371 ;;		_I2C_Stop
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           	psect	text58
 10376  0020D8                     __ptext58:
 10377                           	opt stack 0
 10378  0020D8                     _i2cHighSda:
 10379                           	opt stack 27
 10380                           
 10381                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 10382                           
 10383                           ;incstack = 0
 10384  0020D8  8A93               	bsf	3987,5,c	;volatile
 10385                           
 10386                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10387  0020DA  D000               	nop2		;2 cycle nop
 10388  0020DC  D000               	nop2		;2 cycle nop
 10389  0020DE  0012               	return		;funcret
 10390  0020E0                     __end_of_i2cHighSda:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon2	equ	0xFF1
 10400                           postinc0	equ	0xFEE
 10401                           wreg	equ	0xFE8
 10402                           postdec1	equ	0xFE5
 10403                           fsr1l	equ	0xFE1
 10404                           indf2	equ	0xFDF
 10405                           postinc2	equ	0xFDE
 10406                           postdec2	equ	0xFDD
 10407                           fsr2h	equ	0xFDA
 10408                           fsr2l	equ	0xFD9
 10409                           status	equ	0xFD8
 10410                           
 10411 ;; *************** function _i2cHighScl *****************
 10412 ;; Defined at:
 10413 ;;		line 105 in file "I2C_Soft.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;		None               void
 10420 ;; Registers used:
 10421 ;;		wreg
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;Total ram usage:        0 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    1
 10434 ;; This function calls:
 10435 ;;		Nothing
 10436 ;; This function is called by:
 10437 ;;		_I2C_Init
 10438 ;;		_I2C_Read
 10439 ;;		_I2C_Write
 10440 ;;		_i2cNack
 10441 ;;		_i2cAck
 10442 ;;		_I2C_Start
 10443 ;;		_I2C_ReStart
 10444 ;;		_I2C_Stop
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text59
 10449  0020A6                     __ptext59:
 10450                           	opt stack 0
 10451  0020A6                     _i2cHighScl:
 10452                           	opt stack 27
 10453                           
 10454                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 10455                           
 10456                           ;incstack = 0
 10457  0020A6  8893               	bsf	3987,4,c	;volatile
 10458                           
 10459                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 10460  0020A8  0E06               	movlw	6
 10461  0020AA                     u4927:
 10462  0020AA  2EE8               	decfsz	wreg,f,c
 10463  0020AC  D7FE               	goto	u4927
 10464  0020AE  D000               	nop2		;nop
 10465  0020B0  0012               	return		;funcret
 10466  0020B2                     __end_of_i2cHighScl:
 10467                           	opt stack 0
 10468                           tblptru	equ	0xFF8
 10469                           tblptrh	equ	0xFF7
 10470                           tblptrl	equ	0xFF6
 10471                           tablat	equ	0xFF5
 10472                           prodh	equ	0xFF4
 10473                           prodl	equ	0xFF3
 10474                           intcon	equ	0xFF2
 10475                           intcon2	equ	0xFF1
 10476                           postinc0	equ	0xFEE
 10477                           wreg	equ	0xFE8
 10478                           postdec1	equ	0xFE5
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _chkisr *****************
 10488 ;; Defined at:
 10489 ;;		line 22 in file "Interrupt.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;		None
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;		None
 10494 ;; Return value:  Size  Location     Type
 10495 ;;		None               void
 10496 ;; Registers used:
 10497 ;;		None
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;Total ram usage:       14 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		Interrupt level 2
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	intcode
 10517  000008                     __pintcode:
 10518                           	opt stack 0
 10519  000008                     _chkisr:
 10520                           	opt stack 22
 10521                           
 10522                           ;incstack = 0
 10523  000008  CFFA F001          	movff	pclath,??_chkisr
 10524  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10525  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10526  000014  EDE2  F00C         	call	int_func,f	;refresh shadow registers
 10527                           pclatu	equ	0xFFB
 10528                           pclath	equ	0xFFA
 10529                           tblptru	equ	0xFF8
 10530                           tblptrh	equ	0xFF7
 10531                           tblptrl	equ	0xFF6
 10532                           tablat	equ	0xFF5
 10533                           prodh	equ	0xFF4
 10534                           prodl	equ	0xFF3
 10535                           intcon	equ	0xFF2
 10536                           intcon2	equ	0xFF1
 10537                           postinc0	equ	0xFEE
 10538                           fsr0l	equ	0xFE9
 10539                           wreg	equ	0xFE8
 10540                           postdec1	equ	0xFE5
 10541                           fsr1l	equ	0xFE1
 10542                           indf2	equ	0xFDF
 10543                           postinc2	equ	0xFDE
 10544                           postdec2	equ	0xFDD
 10545                           fsr2h	equ	0xFDA
 10546                           fsr2l	equ	0xFD9
 10547                           status	equ	0xFD8
 10548                           
 10549                           	psect	intcode_body
 10550  0019C4                     __pintcode_body:
 10551                           	opt stack 22
 10552  0019C4                     int_func:
 10553                           	opt stack 22
 10554  0019C4  0006               	pop		; remove dummy address from shadow register refresh
 10555  0019C6  CFEA F004          	movff	fsr0h,??_chkisr+3
 10556  0019CA  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10557  0019CE  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10558  0019D2  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10559  0019D6  CFDA F008          	movff	fsr2h,??_chkisr+7
 10560  0019DA  CFF3 F009          	movff	prodl,??_chkisr+8
 10561  0019DE  CFF4 F00A          	movff	prodh,??_chkisr+9
 10562  0019E2  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10563  0019E6  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10564  0019EA  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10565  0019EE  CFF5 F00E          	movff	tablat,??_chkisr+13
 10566  0019F2  C00E  FFF5         	movff	??_chkisr+13,tablat
 10567  0019F6  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10568  0019FA  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10569  0019FE  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10570  001A02  C00A  FFF4         	movff	??_chkisr+9,prodh
 10571  001A06  C009  FFF3         	movff	??_chkisr+8,prodl
 10572  001A0A  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10573  001A0E  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10574  001A12  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10575  001A16  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10576  001A1A  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10577  001A1E  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10578  001A22  C002  FFFB         	movff	??_chkisr+1,pclatu
 10579  001A26  C001  FFFA         	movff	??_chkisr,pclath
 10580  001A2A  0011               	retfie		f
 10581  001A2C                     __end_of_chkisr:
 10582                           	opt stack 0
 10583                           pclatu	equ	0xFFB
 10584                           pclath	equ	0xFFA
 10585                           tblptru	equ	0xFF8
 10586                           tblptrh	equ	0xFF7
 10587                           tblptrl	equ	0xFF6
 10588                           tablat	equ	0xFF5
 10589                           prodh	equ	0xFF4
 10590                           prodl	equ	0xFF3
 10591                           intcon	equ	0xFF2
 10592                           intcon2	equ	0xFF1
 10593                           postinc0	equ	0xFEE
 10594                           fsr0h	equ	0xFEA
 10595                           fsr0l	equ	0xFE9
 10596                           wreg	equ	0xFE8
 10597                           postdec1	equ	0xFE5
 10598                           fsr1h	equ	0xFE2
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           pclatu	equ	0xFFB
 10607                           pclath	equ	0xFFA
 10608                           tblptru	equ	0xFF8
 10609                           tblptrh	equ	0xFF7
 10610                           tblptrl	equ	0xFF6
 10611                           tablat	equ	0xFF5
 10612                           prodh	equ	0xFF4
 10613                           prodl	equ	0xFF3
 10614                           intcon	equ	0xFF2
 10615                           intcon2	equ	0xFF1
 10616                           postinc0	equ	0xFEE
 10617                           fsr0h	equ	0xFEA
 10618                           fsr0l	equ	0xFE9
 10619                           wreg	equ	0xFE8
 10620                           postdec1	equ	0xFE5
 10621                           fsr1h	equ	0xFE2
 10622                           fsr1l	equ	0xFE1
 10623                           indf2	equ	0xFDF
 10624                           postinc2	equ	0xFDE
 10625                           postdec2	equ	0xFDD
 10626                           fsr2h	equ	0xFDA
 10627                           fsr2l	equ	0xFD9
 10628                           status	equ	0xFD8
 10629                           
 10630                           	psect	rparam
 10631  0000                     pclatu	equ	0xFFB
 10632                           pclath	equ	0xFFA
 10633                           tblptru	equ	0xFF8
 10634                           tblptrh	equ	0xFF7
 10635                           tblptrl	equ	0xFF6
 10636                           tablat	equ	0xFF5
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           intcon	equ	0xFF2
 10640                           intcon2	equ	0xFF1
 10641                           postinc0	equ	0xFEE
 10642                           fsr0h	equ	0xFEA
 10643                           fsr0l	equ	0xFE9
 10644                           wreg	equ	0xFE8
 10645                           postdec1	equ	0xFE5
 10646                           fsr1h	equ	0xFE2
 10647                           fsr1l	equ	0xFE1
 10648                           indf2	equ	0xFDF
 10649                           postinc2	equ	0xFDE
 10650                           postdec2	equ	0xFDD
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8


Data Sizes:
    Strings     210
    Constant    493
    Data        159
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     113
    BANK0           128     14     122
    BANK1           256      0      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[3]), 
		 -> STR_19(CODE[6]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[2]), 
		 -> STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_12(CODE[15]), STR_11(CODE[22]), STR_10(CODE[16]), STR_9(CODE[20]), 
		 -> STR_8(CODE[21]), STR_7(CODE[30]), STR_6(CODE[20]), STR_5(CODE[21]), 
		 -> STR_4(CODE[30]), STR_3(CODE[20]), STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _main->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Screen->_drawtext
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   77911
                                             11 BANK0      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Beep
                            _Do_Init
                  _Initialize_Screen
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    4496
                                             26 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             28 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             56 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             14 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             26 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             41 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   21703
                                              7 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     953
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1875
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   35202
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17271
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   11164
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    5144
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2442
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2442
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2312
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2312
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1272
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Do_Beep                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             17 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Beep
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      7A       5       95.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     136      34        0.0%
DATA                 0      0     136       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 01 15:39:28 2022

                      drawCircle@f 0028                        drawCircle@r 001E  
                      drawCircle@x 002A                        drawCircle@y 002C  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001A  
                     drawCircle@y0 001C                                 _D1 00A4  
                               _D2 00AC                                 _D3 0100  
                               l35 1B9C                                 l45 2016  
                               l95 18D0                                 l89 1EE2  
                     ___awdiv@sign 001A                ___wmul@multiplicand 0011  
                  ??_Update_Screen 00ED                                l111 0F00  
                              l120 0E56                                l113 0DDA  
                              l151 1584                                l152 15A6  
                              l242 1DE0                                l322 1E4A  
                              l148 15A8                                l149 1514  
                              l239 1D16                                l159 0CC0  
                              l372 1D54                                l570 209C  
                              l723 0374                                l751 199A  
                              l752 199C                                l753 19A6  
                              l754 19A8                                l747 1980  
                              l756 19C2                                l686 011C  
                              l759 1F34                                l952 17BA  
                              _FAN 0052                                l965 1952  
                              _PR2 000FCB                                _day 005C  
             __size_of_I2C_ReStart 0016                                _dow 005D  
                              _nbr 00F8                                _rpm 004C  
                              _rps 004E                                _txt 0050  
                     ___awmod@sign 0014                                wreg 000FE8  
                       _Fan_SW_Txt 00DA                    ??_fillRectangle 001B  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1EE4  
                     ___ftdiv@cntr 0033                       ___ftdiv@sign 0038  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0017  
                             l1142 1498                               l1216 1F5A  
                             l1321 1D92                               l1154 1212  
                             l1067 166E                               l1139 14CC  
                             l1078 1646                               l1190 1F7C  
                             l1175 13EA                               l1282 1B48  
                             l1292 1C34                     drawFastVLine@x 0020  
                   drawFastVLine@y 0016                               l5031 0DC8  
                             l5041 0DE6                               l5113 1588  
                             l6001 02EC                               l5035 0DD6  
                             l5027 0DBC                               l5123 15A2  
                             l6011 034C                               l5301 0CA6  
                             l5045 0E16                               l5037 0DDE  
                             l5117 1592                               l5109 157A  
                             l5221 160E                               l5213 15CA  
                             l6013 0358                               l5047 0E4A  
                             l6023 06DE                               l5231 164E  
                             l5223 162E                               l5215 15D6  
                             l6007 0332                               l5161 1966  
                             l5065 0ECC                               l5057 0E78  
                             l5073 0EFC                               l5049 0E4E  
                             l5081 1D66                               l5225 163A  
                             l5217 15F6                               l5209 15BA  
                             l6009 0344                               l5067 0EF4  
                             l5059 0EA0                               l5091 14DE  
                             l5411 1E96                               l5181 1992  
                             l5173 1984                               l5165 1970  
                             l6053 0820                               l6045 07B4  
                             l6029 071E                               l5237 1660  
                             l5501 11A8                               l5421 1F74  
                             l5079 1D60                               l5271 10AC  
                             l5255 103E                               l6055 0836  
                             l6039 0774                               l5431 140A  
                             l5511 11D6                               l5361 1CE2  
                             l5169 1978                               l5329 0D96  
                             l5281 1106                               l5097 154C  
                             l5409 1E8C                               l5433 1424  
                             l5505 11BE                               l5267 108E  
                             l5515 11EC                               l5507 11C4  
                             l5381 1D12                               l5357 1CDA  
                             l4901 1DF0                               l5541 176E  
                             l5533 174E                               l5437 1432  
                             l5605 1324                               l6421 045C  
   I2C_Write_Cmd_Write_Data@Device 0013                               l5367 1CF0  
                             l5375 1D00                               l4911 1E02  
                             l5279 10FE                               l5551 1794  
                             l5543 1776                               l5527 173C  
                             l5623 137E                               l5369 1CF8  
                             l4841 18C6                               l4825 185A  
                             l5457 1472                               l5641 13D8  
                             l5633 13A8                               l5379 1D0C  
                             l5539 1764                               l5555 17A0  
                             l5571 18E8                               l5467 14A6  
                             l5483 1162                               l5635 13B6  
                             l5627 138E                               l4829 1892  
                             l5581 190E                               l5477 113A  
                             l5629 1394                               l5637 13C0  
                             l4839 18B8                               l5559 17B0  
                             l5583 1916                               l5591 1938  
                             l5575 18F6                               l5479 1154  
                             l5655 1B0C                               l5911 00E6  
                             l5903 0082                               l6463 05F4  
                             l6439 0522                               l5497 1196  
                             l5809 16FC                               l5657 1B16  
                             l6481 0640                               l5595 1948  
                             l5587 192C                               l5579 1904  
                             l5667 1B3C                               l5659 1B1E  
                             l5683 1C28                               l5675 1C00  
                             l5931 0164                               l5915 00EE  
                             l6491 0672                               l4893 1DD8  
                             l4877 1EC4                               l4885 1C48  
                             l5677 1C0A                               l5941 0198  
                             l5933 0168                               l6477 0626  
                             l5679 1C12                               l5951 01AE  
                             l5927 014A                               l6495 0686  
                             l6487 0668                               l6399 038A  
                             l4889 1C64                               l5945 019E  
                             l5937 0174                               l5961 01D8  
                             l4899 1DEA                               l5955 01D2  
                             l5947 01A2                               l5963 01EA  
                             l5891 0036                               l5981 024C  
                             l5973 022A                               l5893 0044  
                             l5983 0254                               l5975 0234  
                             l5887 0026                               l5993 028C  
                             l5969 0206                               l5897 004E  
                             l5987 026C                               l5899 0064  
                             l5989 0274                               l5997 02A0  
                             l5999 02A8                               STR_1 FF2C  
                             STR_2 FF76                               STR_3 FF8B  
                             STR_4 FF2C                               STR_5 FF76  
                             STR_6 FF8B                               STR_7 FF2C  
                             STR_8 FF76                               STR_9 FF8B  
                             u4001 141A                               u4031 112C  
                             u3320 1888                               u4051 114A  
                             u4211 1316                               u3510 0EAE  
                             u4230 1342                               u4235 133A  
                             u3580 150C                               u3830 1068  
                             u3590 1542                               u3981 13FC  
                             u4927 20AA                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0044  
                     _DS1621_tempF 0046                               _date 00BF  
                             _main 0376                               _font FD3F  
                     ___ftpack@arg 000F                               _hour 0060  
                     ___ftpack@exp 0012                   __end_of_I2C_Init 20BC  
                 __end_of_I2C_Read 1D18                               _time 00C8  
                             _year 006E                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 0071                   __end_of_I2C_Stop 2054  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_Do_Beep 20E8                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 1CD0  
                  ??_drawFastVLine 001A                       ___ftmul@cntr 0028  
                  __end_of_i2cNack 20C6                       ___param_bank 000010  
                     ___ftmul@sign 0029                       ___fttol@exp1 001D  
                     ___fttol@lval 0019                    ??_do_update_pwm 0039  
                  drawFastVLine@hi 001E                    drawFastVLine@lo 001F  
                            ?_main 0001                    __end_of___awdiv 17BC  
                  drawCircle@ddF_x 0024                              STR_10 FFB0  
                  drawCircle@ddF_y 0026                              STR_11 FF60  
                            STR_20 FFFB                              STR_12 FFC0  
                            STR_21 FFF4                              STR_13 FF4A  
                            STR_22 FFEC                              STR_14 FFCF  
                            STR_15 FFF8                              STR_23 FFF0  
                            STR_16 FFF2                              STR_24 FF9F  
                            STR_17 FFE2                              STR_18 FFE7  
                            STR_19 FFDC                    __end_of___awmod 1954  
                  __end_of___ftdiv 14CE                    __end_of___ftmul 1214  
                            _T0CON 000FD5                    ___awdiv@divisor 0017  
                  __end_of___fttol 13EC                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1B52  
                  __end_of___lwmod 1C3E                    ___awdiv@counter 0019  
                  drawCircle@color 0020                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR0L 000FD6  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTD 000F83                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_RPM 1D56  
                            _Rcmd1 0F02                              _Rcmd3 1214  
                       _i2cHighSda 20D8                         _i2cHighScl 20A6  
                  __end_of_dpowers FF24                              _font2 FE3E  
                            _found 005F                    __end_of_isdigit 1F7E  
                            _tempC 00DE                              _tempF 00E2  
                            _month 0062                      ___ftpack@sign 0013  
                            _putch 2098                              main@j 00F2  
                __end_of_I2C_Start 2066                  __end_of_I2C_Write 1E10  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0012  
                  write_data@data_ 0011                 ??_DS1621_Read_Temp 0014  
                  __initialization 17BC                       __end_of_main 06A2  
                     __end_of_font FE3E                   __end_of_Rcmd2red 1DD2  
                           ??_main 00F1                      ___fttol@sign1 0018  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 2042          ??_TFT_GreenTab_Initialize 001B  
               ??_DS3231_Read_Time 0012                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0002  
                        I2C_Init@c 000F                          I2C_Read@n 0010  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0014  
                           _CCPR1L 000FBE                   ___awdiv@dividend 0015  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 1670  
                 __end_of___lbtoft 1F5C                          ??_Do_Beep 000F  
                           _DC_Txt 00D6                          ??_Do_Init 0015  
                           _OSCCON 000FD3                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 000F  
                     _Alarm_SW_Txt 00B9                   __end_of_delay_ms 1BA4  
                           _i2cAck 2066                   __end_of_fillRect 1C88  
                 __end_of_drawChar 0F02                 __size_of_OpenUSART 0070  
                           ___wmul 1F0E                          ??___awdiv 0019  
                 __end_of_drawtext 111C                          ??___awmod 0013  
                        ??___ftdiv 0030                          ??___ftmul 0021  
                        ??___fttol 0013                             _chkisr 0008  
                        ??___lwdiv 0013                             _array1 0136  
                        ??___lwmod 001A                             _buffer 0115  
                           _nec_ok 004A                             clear_0 17C2  
                           clear_1 17DC                   ___awdiv@quotient 001B  
                           _minute 0061                             _second 0064  
                  ___awmod@divisor 0011                          ??_get_RPM 001F  
                  ___awmod@counter 0013                             _printf 001C  
                     drawtext@size 003E                             _strcpy 1E82  
                           _strlen 1D56              ___ftmul@f3_as_product 0025  
                     __pdataCOMRAM 006F                          ??_isdigit 000F  
                        ?_I2C_Init 000F                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD3E  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1F9E  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 000F                   __end_of_spiwrite 201C  
                       __accesstop 0080            __end_of__initialization 1840  
               _setup_alarm_minute 0066                 _setup_alarm_second 0067  
                    ___rparam_used 000001                         ___ftdiv@f1 002A  
                       ___ftdiv@f2 002D                         ___ftdiv@f3 0034  
                       ___lbtoft@c 001A                         ___ftmul@f1 001B  
                       ___ftmul@f2 001E                         ___fttol@f1 000F  
                    __end_of_Rcmd1 1012                      __end_of_Rcmd3 1306  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1A2C  
                     __pidataBANK1 1E4C                      __end_of_font2 FF1A  
                __end_of_i2cLowSda 20D0                  __end_of_i2cLowScl 20D8  
                    __end_of_putch 20A6                     drawPixel@color 0017  
           __size_of_write_command 0010                         ??_I2C_Init 0013  
                       ??_I2C_Read 000F                       _alarm_minute 0058  
                     _alarm_second 0059                         ??_I2C_Stop 000F  
                          ??_Rcmd1 001B                            ??_Rcmd3 001B  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 19C4  
                          ??_putch 000F                         __pbssBANK0 00F4  
                       __pbssBANK1 0136                   _setup_alarm_hour 0065  
                 _setup_alarm_time 0089                      ??_DS1621_Init 0014  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0010                         _alarm_date 0056  
                       _alarm_hour 0057                         _alarm_time 0080  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0011                            ?___wmul 000F  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0012  
                    ??_I2C_ReStart 000F                            _ALARMEN 0042  
                        ?___ftpack 000F                          ?___lbtoft 0017  
                       I2C_Write@n 0010                            ?_printf 001B  
                          ?_strcpy 000F                            ?_strlen 000F  
                       _fillScreen 1FBC              __end_of_Update_Screen 0994  
                       _drawCircle 0BFE                     _init_INTERRUPT 20E4  
                        ?_delay_ms 0015                          ?_fillRect 0021  
                        ?_drawChar 002C                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D1  
            __end_of_fillRectangle 15AA                            _Do_Beep 20E6  
                        ?_drawtext 0037                            _Do_Init 1C88  
         _I2C_Write_Cmd_Write_Data 1F7E         __end_of_I2C_Write_Cmd_Only 1FF2  
                       ??_Rcmd2red 0012             DS1621_Read_Temp@Device 0016  
                          _i2cNack 20BC                      _write_command 2088  
                        _I2C_Start 2054                          _I2C_Write 1DD2  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1FBC  
                __end_of_drawPixel 1EE4              __end_of_drawFastVLine 18D2  
                          ___awdiv 1726                            ___awmod 18D2  
                          ___ftdiv 13EC                    __size_of___wmul 0028  
                          ___ftmul 111C                            ___fttol 1306  
                          ___lwdiv 1AF6                            ___lwmod 1BF2  
                  __size_of_chkisr 1A24                          ?_spiwrite 0001  
                          __pcinit 17BC                         ??___ftpack 0014  
                       ??___lbtoft 001A                            __ramtop 1000  
                          _get_RPM 1D18                            __ptext0 0376  
                          __ptext1 001C                            __ptext2 2098  
                          __ptext3 1F5C                            __ptext4 1BF2  
                          __ptext5 1AF6          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1D18                            __ptext7 1670  
                          __ptext8 1F36                            __ptext9 1306  
                  __size_of_printf 035A                  __end_of_init_UART 2030  
           __end_of_init_INTERRUPT 20E6                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF2C                            _dpowers FF1A  
            __end_of_do_update_pwm 1726                            _isdigit 1F5C  
                 ___awmod@dividend 000F                         _duty_cycle 005E  
                       ??_delay_ms 0017                __end_of_I2C_ReStart 2008  
                    drawtext@_text 0038                      drawtext@color 003A  
                       ??_fillRect 0026                         ??_drawChar 0033  
                        _LCD_Reset 2030                      _setAddrWindow 1BA4  
                   __pintcode_body 19C4                         delay_ms@ms 0015  
             end_of_initialization 1840                         ??_drawtext 003F  
                   ?_write_command 0001                      __Lmediumconst FD3E  
        __size_of_DS3231_Read_Time 0064                            int_func 19C4  
          DS3231_Read_Time@Address 0012                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 001F  
                       _tempSecond 0070                          _RCSTAbits 000FAB  
                          printf@c 0036                            printf@f 001B  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 000F                            strlen@s 000F  
      I2C_Write_Cmd_Write_Data@Cmd 0011                   drawtext@cursor_x 00EC  
                 drawtext@cursor_y 00EB                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 000F  
                  ?_init_INTERRUPT 0001                         _setup_date 0092  
                      ?_fillScreen 0022                         _setup_hour 0069  
                       _setup_time 009B                         _setup_year 006D  
                      ?_drawCircle 001A                         drawChar@bg 0030  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 000F                       ??_i2cHighScl 000F  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0012  
                       ?_LCD_Reset 0001                   drawtext@textsize 00E7  
                       drawPixel@x 0019                         drawPixel@y 0016  
                      _DS1621_Init 1F9E                        ___ftdiv@exp 0037  
                      printf@width 0034                          _TXSTAbits 000FAC  
                   __end_of_i2cAck 2078                        ___ftmul@exp 0024  
         DS1621_Read_Temp@Data_Ret 0015                 __end_of_i2cHighSda 20E0  
               __end_of_i2cHighScl 20B2                     __end_of___wmul 1F36  
                    delay_ms@count 0019                         _write_data 2078  
                    __pidataCOMRAM 20E0                     __end_of_chkisr 1A2C  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 1FF2  
                       drawtext@bg 003C                          _Nec_code1 0053  
                        _i2cLowSda 20C6                          _i2cLowScl 20D0  
                   __end_of_printf 0376                     __end_of_strcpy 1EB4  
                   __end_of_strlen 1D94                          _Nec_state 0054  
              start_initialization 17BC             Update_Screen@neg_tempF 00EF  
                  ??_write_command 0011                          _OpenUSART 1954  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 000F  
                      ??_I2C_Write 000F                           ??_i2cAck 000F  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                           ??___wmul 0013  
                         ??_chkisr 0001                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0015  
                  setAddrWindow@x1 0013                    setAddrWindow@y0 0012  
                  setAddrWindow@y1 0014                           ??_printf 0029  
                 _DS1621_Read_Temp 1E10                           ??_strcpy 0013  
                         ??_strlen 0011                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0042  
       ??_I2C_Write_Cmd_Write_Data 0013                    ??_setAddrWindow 0015  
                    __pcstackBANK0 00E6                        ??_LCD_Reset 001B  
                     _isdigit$1989 0010                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 000F                   _DS3231_Read_Time 1A92  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 000F                        I2C_Read@ack 000F  
                        _bit_count 005A                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 1F0E                      __pmediumconst FD3E  
                         ?___awdiv 0015                           ?___awmod 000F  
                         ?___ftdiv 002A                           ?___ftmul 001B  
                         ?___fttol 000F                          __tft_type 0055  
                         ?___lwdiv 000F                 _I2C_Write_Cmd_Only 1FD8  
                         ?___lwmod 0016                 drawFastVLine@color 0018  
                      ?_write_data 0001                          _drawPixel 1EB4  
                         ?_get_RPM 001D                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0011                           ?_isdigit 0001  
                         _I2C_Init 20B2                           _I2C_Read 1CD0  
                         _I2C_Stop 2042                  _Initialize_Screen 0994  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 201C           I2C_Write_Cmd_Only@Device 0012  
                        _hexpowers FF24                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0014                     __size_of_putch 000E  
                   ___wmul@product 0013                ??_Initialize_Screen 0041  
             ??_I2C_Write_Cmd_Only 0012                           _PIE1bits 000F9D  
           __size_of_Update_Screen 02F2             DS3231_Read_Time@Device 0013  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 000F  
                        _setup_day 0068                  DS1621_Init@Device 0014  
                        fillRect@h 0023                          fillRect@i 002A  
                        fillRect@w 0022                          fillRect@x 0029  
                        fillRect@y 0021                          drawChar@c 002D  
                        drawChar@i 0036                          drawChar@j 0035  
                        drawChar@x 0034                          drawChar@y 002C  
                       ?_drawPixel 0016             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 000F          __end_of_Initialize_Screen 0BFE  
                      ??_i2cLowSda 000F                        ??_i2cLowScl 000F  
                     ??_fillScreen 0024                       ??_drawCircle 0022  
                       printf@flag 0033                         printf@prec 0030  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 17F6                          copy_data1 1816  
                        drawtext@i 00E9             __size_of_drawFastVLine 0088  
                        drawtext@x 00E6                          drawtext@y 0037  
                         _Nec_code 00F4                  write_command@cmd_ 0011  
                      ??_OpenUSART 0011                   __size_of_Do_Beep 0002  
                     ?_DS1621_Init 0001                           _Rcmd2red 1D94  
                 __size_of_Do_Init 0048                __size_of_write_data 0010  
                  OpenUSART@config 0011                       _Time_Elapsed 0048  
                 __size_of_i2cNack 000A                      _RTC_ALARM_Txt 00BD  
                         __Hrparam 0000             __size_of_do_update_pwm 00B6  
               __end_of_fillScreen 1FD8                           __Lrparam 0000  
               __end_of_drawCircle 0DAC                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                         ___ftpack 15AA                           ___lbtoft 1F36  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                    _Update_Screen 06A2                     _setup_fan_temp 006F  
                   _setup_fan_text 00B4                   __size_of_isdigit 0022  
                         _delay_ms 1B52                    ___lwdiv@divisor 0011  
                  ___lwdiv@counter 0013                           __ptext10 111C  
                         __ptext11 13EC                           __ptext20 1012  
                         __ptext12 15AA                           __ptext21 1D56  
                         __ptext13 06A2                           __ptext30 1D94  
                         __ptext22 0DAC                           __ptext14 18D2  
                         __ptext31 0F02                           __ptext23 1C3E  
                         __ptext15 1726                           __ptext40 1954  
                         __ptext32 2078                           __ptext24 184A  
                         __ptext16 0994                           __ptext41 20E4  
                         __ptext33 2088                           __ptext25 0BFE  
                         __ptext17 1E82                           __ptext50 2042  
                         __ptext42 20B2                           __ptext34 2008  
                         __ptext26 1EB4                           __ptext18 1FBC  
                         __ptext51 2054                           __ptext43 1F9E  
                         __ptext35 2030                           __ptext27 1BA4  
                         __ptext19 14CE                           __ptext52 1CD0  
                         __ptext44 1F7E                           __ptext36 1B52  
                         __ptext28 1EE4                           __ptext53 20BC  
                         __ptext45 1FD8                           __ptext37 1F0E  
                         __ptext29 1214                           __ptext54 2066  
                         __ptext46 20E6                           __ptext38 1C88  
                         __ptext55 1FF2                           __ptext47 1A92  
                         __ptext39 201C                           __ptext56 20C6  
                         __ptext48 1E10                           __ptext57 20D0  
                         __ptext49 1DD2                           __ptext58 20D8  
                         __ptext59 20A6                           _fillRect 1C3E  
                         _drawChar 0DAC   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 005B                           _drawtext 1012  
                       strcpy@from 0011                      _fillRectangle 14CE  
         __end_of_DS1621_Read_Temp 1E4C                      __size_of_main 032C  
                  fillRectangle@hi 001F                    fillRectangle@lo 0020  
                    _drawFastVLine 184A                          printf@idx 002D  
                         _spiwrite 2008                          printf@val 0031  
                      ??_drawPixel 0019                           _rowstart 0063  
         __end_of_DS3231_Read_Time 1AF6         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 1670                     OpenUSART@spbrg 000F  
                      ??_init_UART 0012                           isdigit@c 0011  
                        spiwrite@x 000F                           intlevel2 0000  
                   ?_fillRectangle 0016                   ___lwmod@dividend 0016  
            __end_of_write_command 2098                    fillScreen@color 0022  
          do_update_pwm@duty_cycle 003F                     fillRectangle@h 0018  
                   fillRectangle@w 0017                     fillRectangle@x 0021  
                   fillRectangle@y 0016                     ?_drawFastVLine 0016  
                         printf@ap 002E                       ??_write_data 0011  
                    fillRect@color 0024                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 0018                           strcpy@cp 0013  
                         strlen@cp 0013                           strcpy@to 000F  
            I2C_Write_Cmd_Only@Cmd 0011                    ___lwmod@counter 001A  
                     _setup_minute 006A                       _setup_second 006C  
            __end_of_setAddrWindow 1BF2                 fillRectangle@color 0019  
                do_update_pwm@dc_I 0040                  do_update_pwm@dc_f 003C  
                    drawChar@color 002E                        _setup_month 006B  
               __end_of_write_data 2088                       drawChar@line 0033  
                     drawChar@size 0032  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0011  
