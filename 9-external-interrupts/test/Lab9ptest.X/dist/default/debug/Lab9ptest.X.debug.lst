

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 03 12:49:37 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    94  0000                     
    95                           	psect	idataCOMRAM
    96  003E70                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _wrap
   100  003E70  01                 	db	1
   101                           
   102                           ;initializer for _SW_EWLT_Txt
   103  003E71  30                 	db	48
   104  003E72  00                 	db	0
   105                           
   106                           ;initializer for _SW_EWPED_Txt
   107  003E73  30                 	db	48
   108  003E74  00                 	db	0
   109                           
   110                           	psect	idataBANK0
   111  003C6C                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _array
   115  003C6C  40                 	db	64
   116  003C6D  79                 	db	121
   117  003C6E  24                 	db	36
   118  003C6F  30                 	db	48
   119  003C70  19                 	db	25
   120  003C71  12                 	db	18
   121  003C72  02                 	db	2
   122  003C73  78                 	db	120
   123  003C74  00                 	db	0
   124  003C75  10                 	db	16
   125  003C76  FF                 	db	255
   126                           
   127                           ;initializer for _EWLT_Count
   128  003C77  30                 	db	48
   129  003C78  30                 	db	48
   130  003C79  00                 	db	0
   131                           
   132                           ;initializer for _EW_Count
   133  003C7A  30                 	db	48
   134  003C7B  30                 	db	48
   135  003C7C  00                 	db	0
   136                           
   137                           ;initializer for _NSLT_Count
   138  003C7D  30                 	db	48
   139  003C7E  30                 	db	48
   140  003C7F  00                 	db	0
   141                           
   142                           ;initializer for _NS_Count
   143  003C80  30                 	db	48
   144  003C81  30                 	db	48
   145  003C82  00                 	db	0
   146                           
   147                           ;initializer for _PED_EW_Count
   148  003C83  30                 	db	48
   149  003C84  30                 	db	48
   150  003C85  00                 	db	0
   151                           
   152                           ;initializer for _PED_NS_Count
   153  003C86  30                 	db	48
   154  003C87  30                 	db	48
   155  003C88  00                 	db	0
   156                           
   157                           ;initializer for _Act_Mode_Txt
   158  003C89  44                 	db	68
   159  003C8A  00                 	db	0
   160                           
   161                           ;initializer for _FlashingR_Txt
   162  003C8B  30                 	db	48
   163  003C8C  00                 	db	0
   164                           
   165                           ;initializer for _FlashingS_Txt
   166  003C8D  30                 	db	48
   167  003C8E  00                 	db	0
   168                           
   169                           ;initializer for _SW_MODE_Txt
   170  003C8F  44                 	db	68
   171  003C90  00                 	db	0
   172                           
   173                           ;initializer for _SW_NSLT_Txt
   174  003C91  30                 	db	48
   175  003C92  00                 	db	0
   176                           
   177                           ;initializer for _SW_NSPED_Txt
   178  003C93  30                 	db	48
   179  003C94  00                 	db	0
   180                           
   181                           	psect	mediumconst
   182  00FA06                     __pmediumconst:
   183                           	opt stack 0
   184  00FA06  00                 	db	0
   185  00FA07                     _font:
   186                           	opt stack 0
   187  00FA07  00                 	db	0
   188  00FA08  00                 	db	0
   189  00FA09  00                 	db	0
   190  00FA0A  00                 	db	0
   191  00FA0B  00                 	db	0
   192  00FA0C  00                 	db	0
   193  00FA0D  00                 	db	0
   194  00FA0E  5F                 	db	95
   195  00FA0F  00                 	db	0
   196  00FA10  00                 	db	0
   197  00FA11  00                 	db	0
   198  00FA12  07                 	db	7
   199  00FA13  00                 	db	0
   200  00FA14  07                 	db	7
   201  00FA15  00                 	db	0
   202  00FA16  14                 	db	20
   203  00FA17  7F                 	db	127
   204  00FA18  14                 	db	20
   205  00FA19  7F                 	db	127
   206  00FA1A  14                 	db	20
   207  00FA1B  24                 	db	36
   208  00FA1C  2A                 	db	42
   209  00FA1D  7F                 	db	127
   210  00FA1E  2A                 	db	42
   211  00FA1F  12                 	db	18
   212  00FA20  23                 	db	35
   213  00FA21  13                 	db	19
   214  00FA22  08                 	db	8
   215  00FA23  64                 	db	100
   216  00FA24  62                 	db	98
   217  00FA25  36                 	db	54
   218  00FA26  49                 	db	73
   219  00FA27  56                 	db	86
   220  00FA28  20                 	db	32
   221  00FA29  50                 	db	80
   222  00FA2A  00                 	db	0
   223  00FA2B  08                 	db	8
   224  00FA2C  07                 	db	7
   225  00FA2D  03                 	db	3
   226  00FA2E  00                 	db	0
   227  00FA2F  00                 	db	0
   228  00FA30  1C                 	db	28
   229  00FA31  22                 	db	34
   230  00FA32  41                 	db	65
   231  00FA33  00                 	db	0
   232  00FA34  00                 	db	0
   233  00FA35  41                 	db	65
   234  00FA36  22                 	db	34
   235  00FA37  1C                 	db	28
   236  00FA38  00                 	db	0
   237  00FA39  2A                 	db	42
   238  00FA3A  1C                 	db	28
   239  00FA3B  7F                 	db	127
   240  00FA3C  1C                 	db	28
   241  00FA3D  2A                 	db	42
   242  00FA3E  08                 	db	8
   243  00FA3F  08                 	db	8
   244  00FA40  3E                 	db	62
   245  00FA41  08                 	db	8
   246  00FA42  08                 	db	8
   247  00FA43  00                 	db	0
   248  00FA44  80                 	db	128
   249  00FA45  70                 	db	112
   250  00FA46  30                 	db	48
   251  00FA47  00                 	db	0
   252  00FA48  08                 	db	8
   253  00FA49  08                 	db	8
   254  00FA4A  08                 	db	8
   255  00FA4B  08                 	db	8
   256  00FA4C  08                 	db	8
   257  00FA4D  00                 	db	0
   258  00FA4E  00                 	db	0
   259  00FA4F  60                 	db	96
   260  00FA50  60                 	db	96
   261  00FA51  00                 	db	0
   262  00FA52  20                 	db	32
   263  00FA53  10                 	db	16
   264  00FA54  08                 	db	8
   265  00FA55  04                 	db	4
   266  00FA56  02                 	db	2
   267  00FA57  3E                 	db	62
   268  00FA58  51                 	db	81
   269  00FA59  49                 	db	73
   270  00FA5A  45                 	db	69
   271  00FA5B  3E                 	db	62
   272  00FA5C  00                 	db	0
   273  00FA5D  42                 	db	66
   274  00FA5E  7F                 	db	127
   275  00FA5F  40                 	db	64
   276  00FA60  00                 	db	0
   277  00FA61  72                 	db	114
   278  00FA62  49                 	db	73
   279  00FA63  49                 	db	73
   280  00FA64  49                 	db	73
   281  00FA65  46                 	db	70
   282  00FA66  21                 	db	33
   283  00FA67  41                 	db	65
   284  00FA68  49                 	db	73
   285  00FA69  4D                 	db	77
   286  00FA6A  33                 	db	51
   287  00FA6B  18                 	db	24
   288  00FA6C  14                 	db	20
   289  00FA6D  12                 	db	18
   290  00FA6E  7F                 	db	127
   291  00FA6F  10                 	db	16
   292  00FA70  27                 	db	39
   293  00FA71  45                 	db	69
   294  00FA72  45                 	db	69
   295  00FA73  45                 	db	69
   296  00FA74  39                 	db	57
   297  00FA75  3C                 	db	60
   298  00FA76  4A                 	db	74
   299  00FA77  49                 	db	73
   300  00FA78  49                 	db	73
   301  00FA79  31                 	db	49
   302  00FA7A  41                 	db	65
   303  00FA7B  21                 	db	33
   304  00FA7C  11                 	db	17
   305  00FA7D  09                 	db	9
   306  00FA7E  07                 	db	7
   307  00FA7F  36                 	db	54
   308  00FA80  49                 	db	73
   309  00FA81  49                 	db	73
   310  00FA82  49                 	db	73
   311  00FA83  36                 	db	54
   312  00FA84  46                 	db	70
   313  00FA85  49                 	db	73
   314  00FA86  49                 	db	73
   315  00FA87  29                 	db	41
   316  00FA88  1E                 	db	30
   317  00FA89  00                 	db	0
   318  00FA8A  00                 	db	0
   319  00FA8B  14                 	db	20
   320  00FA8C  00                 	db	0
   321  00FA8D  00                 	db	0
   322  00FA8E  00                 	db	0
   323  00FA8F  40                 	db	64
   324  00FA90  34                 	db	52
   325  00FA91  00                 	db	0
   326  00FA92  00                 	db	0
   327  00FA93  00                 	db	0
   328  00FA94  08                 	db	8
   329  00FA95  14                 	db	20
   330  00FA96  22                 	db	34
   331  00FA97  41                 	db	65
   332  00FA98  14                 	db	20
   333  00FA99  14                 	db	20
   334  00FA9A  14                 	db	20
   335  00FA9B  14                 	db	20
   336  00FA9C  14                 	db	20
   337  00FA9D  00                 	db	0
   338  00FA9E  41                 	db	65
   339  00FA9F  22                 	db	34
   340  00FAA0  14                 	db	20
   341  00FAA1  08                 	db	8
   342  00FAA2  02                 	db	2
   343  00FAA3  01                 	db	1
   344  00FAA4  59                 	db	89
   345  00FAA5  09                 	db	9
   346  00FAA6  06                 	db	6
   347  00FAA7  3E                 	db	62
   348  00FAA8  41                 	db	65
   349  00FAA9  5D                 	db	93
   350  00FAAA  59                 	db	89
   351  00FAAB  4E                 	db	78
   352  00FAAC  7C                 	db	124
   353  00FAAD  12                 	db	18
   354  00FAAE  11                 	db	17
   355  00FAAF  12                 	db	18
   356  00FAB0  7C                 	db	124
   357  00FAB1  7F                 	db	127
   358  00FAB2  49                 	db	73
   359  00FAB3  49                 	db	73
   360  00FAB4  49                 	db	73
   361  00FAB5  36                 	db	54
   362  00FAB6  3E                 	db	62
   363  00FAB7  41                 	db	65
   364  00FAB8  41                 	db	65
   365  00FAB9  41                 	db	65
   366  00FABA  22                 	db	34
   367  00FABB  7F                 	db	127
   368  00FABC  41                 	db	65
   369  00FABD  41                 	db	65
   370  00FABE  41                 	db	65
   371  00FABF  3E                 	db	62
   372  00FAC0  7F                 	db	127
   373  00FAC1  49                 	db	73
   374  00FAC2  49                 	db	73
   375  00FAC3  49                 	db	73
   376  00FAC4  41                 	db	65
   377  00FAC5  7F                 	db	127
   378  00FAC6  09                 	db	9
   379  00FAC7  09                 	db	9
   380  00FAC8  09                 	db	9
   381  00FAC9  01                 	db	1
   382  00FACA  3E                 	db	62
   383  00FACB  41                 	db	65
   384  00FACC  41                 	db	65
   385  00FACD  51                 	db	81
   386  00FACE  73                 	db	115
   387  00FACF  7F                 	db	127
   388  00FAD0  08                 	db	8
   389  00FAD1  08                 	db	8
   390  00FAD2  08                 	db	8
   391  00FAD3  7F                 	db	127
   392  00FAD4  00                 	db	0
   393  00FAD5  41                 	db	65
   394  00FAD6  7F                 	db	127
   395  00FAD7  41                 	db	65
   396  00FAD8  00                 	db	0
   397  00FAD9  20                 	db	32
   398  00FADA  40                 	db	64
   399  00FADB  41                 	db	65
   400  00FADC  3F                 	db	63
   401  00FADD  01                 	db	1
   402  00FADE  7F                 	db	127
   403  00FADF  08                 	db	8
   404  00FAE0  14                 	db	20
   405  00FAE1  22                 	db	34
   406  00FAE2  41                 	db	65
   407  00FAE3  7F                 	db	127
   408  00FAE4  40                 	db	64
   409  00FAE5  40                 	db	64
   410  00FAE6  40                 	db	64
   411  00FAE7  40                 	db	64
   412  00FAE8  7F                 	db	127
   413  00FAE9  02                 	db	2
   414  00FAEA  1C                 	db	28
   415  00FAEB  02                 	db	2
   416  00FAEC  7F                 	db	127
   417  00FAED  7F                 	db	127
   418  00FAEE  04                 	db	4
   419  00FAEF  08                 	db	8
   420  00FAF0  10                 	db	16
   421  00FAF1  7F                 	db	127
   422  00FAF2  3E                 	db	62
   423  00FAF3  41                 	db	65
   424  00FAF4  41                 	db	65
   425  00FAF5  41                 	db	65
   426  00FAF6  3E                 	db	62
   427  00FAF7  7F                 	db	127
   428  00FAF8  09                 	db	9
   429  00FAF9  09                 	db	9
   430  00FAFA  09                 	db	9
   431  00FAFB  06                 	db	6
   432  00FAFC  3E                 	db	62
   433  00FAFD  41                 	db	65
   434  00FAFE  51                 	db	81
   435  00FAFF  21                 	db	33
   436  00FB00  5E                 	db	94
   437  00FB01  7F                 	db	127
   438  00FB02  09                 	db	9
   439  00FB03  19                 	db	25
   440  00FB04  29                 	db	41
   441  00FB05  46                 	db	70
   442  00FB06                     __end_of_font:
   443                           	opt stack 0
   444  00FB06                     _font2:
   445                           	opt stack 0
   446  00FB06  26                 	db	38
   447  00FB07  49                 	db	73
   448  00FB08  49                 	db	73
   449  00FB09  49                 	db	73
   450  00FB0A  32                 	db	50
   451  00FB0B  03                 	db	3
   452  00FB0C  01                 	db	1
   453  00FB0D  7F                 	db	127
   454  00FB0E  01                 	db	1
   455  00FB0F  03                 	db	3
   456  00FB10  3F                 	db	63
   457  00FB11  40                 	db	64
   458  00FB12  40                 	db	64
   459  00FB13  40                 	db	64
   460  00FB14  3F                 	db	63
   461  00FB15  1F                 	db	31
   462  00FB16  20                 	db	32
   463  00FB17  40                 	db	64
   464  00FB18  20                 	db	32
   465  00FB19  1F                 	db	31
   466  00FB1A  3F                 	db	63
   467  00FB1B  40                 	db	64
   468  00FB1C  38                 	db	56
   469  00FB1D  40                 	db	64
   470  00FB1E  3F                 	db	63
   471  00FB1F  63                 	db	99
   472  00FB20  14                 	db	20
   473  00FB21  08                 	db	8
   474  00FB22  14                 	db	20
   475  00FB23  63                 	db	99
   476  00FB24  03                 	db	3
   477  00FB25  04                 	db	4
   478  00FB26  78                 	db	120
   479  00FB27  04                 	db	4
   480  00FB28  03                 	db	3
   481  00FB29  61                 	db	97
   482  00FB2A  59                 	db	89
   483  00FB2B  49                 	db	73
   484  00FB2C  4D                 	db	77
   485  00FB2D  43                 	db	67
   486  00FB2E  00                 	db	0
   487  00FB2F  7F                 	db	127
   488  00FB30  41                 	db	65
   489  00FB31  41                 	db	65
   490  00FB32  41                 	db	65
   491  00FB33  02                 	db	2
   492  00FB34  04                 	db	4
   493  00FB35  08                 	db	8
   494  00FB36  10                 	db	16
   495  00FB37  20                 	db	32
   496  00FB38  00                 	db	0
   497  00FB39  41                 	db	65
   498  00FB3A  41                 	db	65
   499  00FB3B  41                 	db	65
   500  00FB3C  7F                 	db	127
   501  00FB3D  04                 	db	4
   502  00FB3E  02                 	db	2
   503  00FB3F  01                 	db	1
   504  00FB40  02                 	db	2
   505  00FB41  04                 	db	4
   506  00FB42  40                 	db	64
   507  00FB43  40                 	db	64
   508  00FB44  40                 	db	64
   509  00FB45  40                 	db	64
   510  00FB46  40                 	db	64
   511  00FB47  00                 	db	0
   512  00FB48  03                 	db	3
   513  00FB49  07                 	db	7
   514  00FB4A  08                 	db	8
   515  00FB4B  00                 	db	0
   516  00FB4C  20                 	db	32
   517  00FB4D  54                 	db	84
   518  00FB4E  54                 	db	84
   519  00FB4F  78                 	db	120
   520  00FB50  40                 	db	64
   521  00FB51  7F                 	db	127
   522  00FB52  28                 	db	40
   523  00FB53  44                 	db	68
   524  00FB54  44                 	db	68
   525  00FB55  38                 	db	56
   526  00FB56  38                 	db	56
   527  00FB57  44                 	db	68
   528  00FB58  44                 	db	68
   529  00FB59  44                 	db	68
   530  00FB5A  28                 	db	40
   531  00FB5B  38                 	db	56
   532  00FB5C  44                 	db	68
   533  00FB5D  44                 	db	68
   534  00FB5E  28                 	db	40
   535  00FB5F  7F                 	db	127
   536  00FB60  38                 	db	56
   537  00FB61  54                 	db	84
   538  00FB62  54                 	db	84
   539  00FB63  54                 	db	84
   540  00FB64  18                 	db	24
   541  00FB65  00                 	db	0
   542  00FB66  08                 	db	8
   543  00FB67  7E                 	db	126
   544  00FB68  09                 	db	9
   545  00FB69  02                 	db	2
   546  00FB6A  18                 	db	24
   547  00FB6B  A4                 	db	164
   548  00FB6C  A4                 	db	164
   549  00FB6D  9C                 	db	156
   550  00FB6E  78                 	db	120
   551  00FB6F  7F                 	db	127
   552  00FB70  08                 	db	8
   553  00FB71  04                 	db	4
   554  00FB72  04                 	db	4
   555  00FB73  78                 	db	120
   556  00FB74  00                 	db	0
   557  00FB75  44                 	db	68
   558  00FB76  7D                 	db	125
   559  00FB77  40                 	db	64
   560  00FB78  00                 	db	0
   561  00FB79  20                 	db	32
   562  00FB7A  40                 	db	64
   563  00FB7B  40                 	db	64
   564  00FB7C  3D                 	db	61
   565  00FB7D  00                 	db	0
   566  00FB7E  7F                 	db	127
   567  00FB7F  10                 	db	16
   568  00FB80  28                 	db	40
   569  00FB81  44                 	db	68
   570  00FB82  00                 	db	0
   571  00FB83  00                 	db	0
   572  00FB84  41                 	db	65
   573  00FB85  7F                 	db	127
   574  00FB86  40                 	db	64
   575  00FB87  00                 	db	0
   576  00FB88  7C                 	db	124
   577  00FB89  04                 	db	4
   578  00FB8A  78                 	db	120
   579  00FB8B  04                 	db	4
   580  00FB8C  78                 	db	120
   581  00FB8D  7C                 	db	124
   582  00FB8E  08                 	db	8
   583  00FB8F  04                 	db	4
   584  00FB90  04                 	db	4
   585  00FB91  78                 	db	120
   586  00FB92  38                 	db	56
   587  00FB93  44                 	db	68
   588  00FB94  44                 	db	68
   589  00FB95  44                 	db	68
   590  00FB96  38                 	db	56
   591  00FB97  FC                 	db	252
   592  00FB98  18                 	db	24
   593  00FB99  24                 	db	36
   594  00FB9A  24                 	db	36
   595  00FB9B  18                 	db	24
   596  00FB9C  18                 	db	24
   597  00FB9D  24                 	db	36
   598  00FB9E  24                 	db	36
   599  00FB9F  18                 	db	24
   600  00FBA0  FC                 	db	252
   601  00FBA1  7C                 	db	124
   602  00FBA2  08                 	db	8
   603  00FBA3  04                 	db	4
   604  00FBA4  04                 	db	4
   605  00FBA5  08                 	db	8
   606  00FBA6  48                 	db	72
   607  00FBA7  54                 	db	84
   608  00FBA8  54                 	db	84
   609  00FBA9  54                 	db	84
   610  00FBAA  24                 	db	36
   611  00FBAB  04                 	db	4
   612  00FBAC  04                 	db	4
   613  00FBAD  3F                 	db	63
   614  00FBAE  44                 	db	68
   615  00FBAF  24                 	db	36
   616  00FBB0  3C                 	db	60
   617  00FBB1  40                 	db	64
   618  00FBB2  40                 	db	64
   619  00FBB3  20                 	db	32
   620  00FBB4  7C                 	db	124
   621  00FBB5  1C                 	db	28
   622  00FBB6  20                 	db	32
   623  00FBB7  40                 	db	64
   624  00FBB8  20                 	db	32
   625  00FBB9  1C                 	db	28
   626  00FBBA  3C                 	db	60
   627  00FBBB  40                 	db	64
   628  00FBBC  30                 	db	48
   629  00FBBD  40                 	db	64
   630  00FBBE  3C                 	db	60
   631  00FBBF  44                 	db	68
   632  00FBC0  28                 	db	40
   633  00FBC1  10                 	db	16
   634  00FBC2  28                 	db	40
   635  00FBC3  44                 	db	68
   636  00FBC4  4C                 	db	76
   637  00FBC5  90                 	db	144
   638  00FBC6  90                 	db	144
   639  00FBC7  90                 	db	144
   640  00FBC8  7C                 	db	124
   641  00FBC9  44                 	db	68
   642  00FBCA  64                 	db	100
   643  00FBCB  54                 	db	84
   644  00FBCC  4C                 	db	76
   645  00FBCD  44                 	db	68
   646  00FBCE  00                 	db	0
   647  00FBCF  08                 	db	8
   648  00FBD0  36                 	db	54
   649  00FBD1  41                 	db	65
   650  00FBD2  00                 	db	0
   651  00FBD3  00                 	db	0
   652  00FBD4  00                 	db	0
   653  00FBD5  77                 	db	119
   654  00FBD6  00                 	db	0
   655  00FBD7  00                 	db	0
   656  00FBD8  00                 	db	0
   657  00FBD9  41                 	db	65
   658  00FBDA  36                 	db	54
   659  00FBDB  08                 	db	8
   660  00FBDC  00                 	db	0
   661  00FBDD  02                 	db	2
   662  00FBDE  01                 	db	1
   663  00FBDF  02                 	db	2
   664  00FBE0  04                 	db	4
   665  00FBE1  02                 	db	2
   666  00FBE2                     __end_of_font2:
   667                           	opt stack 0
   668  00FBE2                     _dpowers:
   669                           	opt stack 0
   670  00FBE2  0001               	dw	1
   671  00FBE4  0000               	dw	0
   672  00FBE6  000A               	dw	10
   673  00FBE8  0000               	dw	0
   674  00FBEA  0064               	dw	100
   675  00FBEC  0000               	dw	0
   676  00FBEE  03E8               	dw	1000
   677  00FBF0  0000               	dw	0
   678  00FBF2  2710               	dw	10000
   679  00FBF4  0000               	dw	0
   680  00FBF6  86A0               	dw	34464
   681  00FBF8  0001               	dw	1
   682  00FBFA  4240               	dw	16960
   683  00FBFC  000F               	dw	15
   684  00FBFE  9680               	dw	38528
   685  00FC00  0098               	dw	152
   686  00FC02  E100               	dw	57600
   687  00FC04  05F5               	dw	1525
   688  00FC06  CA00               	dw	51712
   689  00FC08  3B9A               	dw	15258
   690  00FC0A                     __end_of_dpowers:
   691                           	opt stack 0
   692  00FC0A                     __npowers_:
   693                           	opt stack 0
   694  00FC0A  00                 	db	0
   695  00FC0B  80                 	db	128
   696  00FC0C  3F                 	db	63
   697  00FC0D  CD                 	db	205
   698  00FC0E  CC                 	db	204
   699  00FC0F  3D                 	db	61
   700  00FC10  D7                 	db	215
   701  00FC11  23                 	db	35
   702  00FC12  3C                 	db	60
   703  00FC13  12                 	db	18
   704  00FC14  83                 	db	131
   705  00FC15  3A                 	db	58
   706  00FC16  B7                 	db	183
   707  00FC17  D1                 	db	209
   708  00FC18  38                 	db	56
   709  00FC19  C6                 	db	198
   710  00FC1A  27                 	db	39
   711  00FC1B  37                 	db	55
   712  00FC1C  38                 	db	56
   713  00FC1D  86                 	db	134
   714  00FC1E  35                 	db	53
   715  00FC1F  C0                 	db	192
   716  00FC20  D6                 	db	214
   717  00FC21  33                 	db	51
   718  00FC22  CC                 	db	204
   719  00FC23  2B                 	db	43
   720  00FC24  32                 	db	50
   721  00FC25  70                 	db	112
   722  00FC26  89                 	db	137
   723  00FC27  30                 	db	48
   724  00FC28  E7                 	db	231
   725  00FC29  DB                 	db	219
   726  00FC2A  2E                 	db	46
   727  00FC2B  E5                 	db	229
   728  00FC2C  3C                 	db	60
   729  00FC2D  1E                 	db	30
   730  00FC2E  42                 	db	66
   731  00FC2F  A2                 	db	162
   732  00FC30  0D                 	db	13
   733  00FC31                     __end_of__npowers_:
   734                           	opt stack 0
   735  00FC31                     __powers_:
   736                           	opt stack 0
   737  00FC31  00                 	db	0
   738  00FC32  80                 	db	128
   739  00FC33  3F                 	db	63
   740  00FC34  00                 	db	0
   741  00FC35  20                 	db	32
   742  00FC36  41                 	db	65
   743  00FC37  00                 	db	0
   744  00FC38  C8                 	db	200
   745  00FC39  42                 	db	66
   746  00FC3A  00                 	db	0
   747  00FC3B  7A                 	db	122
   748  00FC3C  44                 	db	68
   749  00FC3D  40                 	db	64
   750  00FC3E  1C                 	db	28
   751  00FC3F  46                 	db	70
   752  00FC40  50                 	db	80
   753  00FC41  C3                 	db	195
   754  00FC42  47                 	db	71
   755  00FC43  24                 	db	36
   756  00FC44  74                 	db	116
   757  00FC45  49                 	db	73
   758  00FC46  97                 	db	151
   759  00FC47  18                 	db	24
   760  00FC48  4B                 	db	75
   761  00FC49  BC                 	db	188
   762  00FC4A  BE                 	db	190
   763  00FC4B  4C                 	db	76
   764  00FC4C  6B                 	db	107
   765  00FC4D  6E                 	db	110
   766  00FC4E  4E                 	db	78
   767  00FC4F  03                 	db	3
   768  00FC50  15                 	db	21
   769  00FC51  50                 	db	80
   770  00FC52  79                 	db	121
   771  00FC53  AD                 	db	173
   772  00FC54  60                 	db	96
   773  00FC55  F3                 	db	243
   774  00FC56  49                 	db	73
   775  00FC57  71                 	db	113
   776  00FC58                     __end_of__powers_:
   777                           	opt stack 0
   778  0000                     _PORTAbits	set	3968
   779  0000                     _PORTBbits	set	3969
   780  0000                     _PORTCbits	set	3970
   781  0000                     _PORTD	set	3971
   782  0000                     _PORTDbits	set	3971
   783  0000                     _PORTEbits	set	3972
   784  0000                     _TRISA	set	3986
   785  0000                     _TRISB	set	3987
   786  0000                     _TRISC	set	3988
   787  0000                     _TRISCbits	set	3988
   788  0000                     _TRISD	set	3989
   789  0000                     _TRISE	set	3990
   790  0000                     _ADCON0	set	4034
   791  0000                     _ADCON0bits	set	4034
   792  0000                     _ADCON1	set	4033
   793  0000                     _ADCON2	set	4032
   794  0000                     _ADRESH	set	4036
   795  0000                     _ADRESL	set	4035
   796  0000                     _CCP2CON	set	4026
   797  0000                     _CCPR2L	set	4027
   798  0000                     _OSCCON	set	4051
   799  0000                     _PIE1bits	set	3997
   800  0000                     _PIR1bits	set	3998
   801  0000                     _PIR2bits	set	4001
   802  0000                     _PR2	set	4043
   803  0000                     _RCSTA	set	4011
   804  0000                     _RCSTAbits	set	4011
   805  0000                     _SPBRG	set	4015
   806  0000                     _SPBRGH	set	4016
   807  0000                     _SSPBUF	set	4041
   808  0000                     _SSPCON1	set	4038
   809  0000                     _SSPSTAT	set	4039
   810  0000                     _SSPSTATbits	set	4039
   811  0000                     _T2CON	set	4042
   812  0000                     _T3CON	set	4017
   813  0000                     _T3CONbits	set	4017
   814  0000                     _TXREG	set	4013
   815  0000                     _TXSTA	set	4012
   816  0000                     _TXSTAbits	set	4012
   817  0000                     _TRMT	set	32097
   818  0000                     _T0CON	set	4053
   819  0000                     _T0CONbits	set	4053
   820  0000                     _TMR0H	set	4055
   821  0000                     _TMR0L	set	4054
   822  0000                     _INTCON2bits	set	4081
   823  0000                     _INTCON3bits	set	4080
   824  0000                     _INTCONbits	set	4082
   825  0000                     _RBPU	set	32655
   826  00FC58                     STR_16:
   827                           
   828                           ; BSR set to: 0
   829  00FC58  49                 	db	73	;'I'
   830  00FC59  4E                 	db	78	;'N'
   831  00FC5A  54                 	db	84	;'T'
   832  00FC5B  30                 	db	48	;'0'
   833  00FC5C  20                 	db	32
   834  00FC5D  69                 	db	105	;'i'
   835  00FC5E  6E                 	db	110	;'n'
   836  00FC5F  74                 	db	116	;'t'
   837  00FC60  65                 	db	101	;'e'
   838  00FC61  72                 	db	114	;'r'
   839  00FC62  72                 	db	114	;'r'
   840  00FC63  75                 	db	117	;'u'
   841  00FC64  70                 	db	112	;'p'
   842  00FC65  74                 	db	116	;'t'
   843  00FC66  20                 	db	32
   844  00FC67  70                 	db	112	;'p'
   845  00FC68  69                 	db	105	;'i'
   846  00FC69  6E                 	db	110	;'n'
   847  00FC6A  20                 	db	32
   848  00FC6B  64                 	db	100	;'d'
   849  00FC6C  65                 	db	101	;'e'
   850  00FC6D  74                 	db	116	;'t'
   851  00FC6E  65                 	db	101	;'e'
   852  00FC6F  63                 	db	99	;'c'
   853  00FC70  74                 	db	116	;'t'
   854  00FC71  65                 	db	101	;'e'
   855  00FC72  64                 	db	100	;'d'
   856  00FC73  20                 	db	32
   857  00FC74  0D                 	db	13
   858  00FC75  0A                 	db	10
   859  00FC76  00                 	db	0
   860  00FC77                     STR_17:
   861                           
   862                           ; BSR set to: 0
   863  00FC77  49                 	db	73	;'I'
   864  00FC78  4E                 	db	78	;'N'
   865  00FC79  54                 	db	84	;'T'
   866  00FC7A  31                 	db	49	;'1'
   867  00FC7B  20                 	db	32
   868  00FC7C  69                 	db	105	;'i'
   869  00FC7D  6E                 	db	110	;'n'
   870  00FC7E  74                 	db	116	;'t'
   871  00FC7F  65                 	db	101	;'e'
   872  00FC80  72                 	db	114	;'r'
   873  00FC81  72                 	db	114	;'r'
   874  00FC82  75                 	db	117	;'u'
   875  00FC83  70                 	db	112	;'p'
   876  00FC84  74                 	db	116	;'t'
   877  00FC85  20                 	db	32
   878  00FC86  70                 	db	112	;'p'
   879  00FC87  69                 	db	105	;'i'
   880  00FC88  6E                 	db	110	;'n'
   881  00FC89  20                 	db	32
   882  00FC8A  64                 	db	100	;'d'
   883  00FC8B  65                 	db	101	;'e'
   884  00FC8C  74                 	db	116	;'t'
   885  00FC8D  65                 	db	101	;'e'
   886  00FC8E  63                 	db	99	;'c'
   887  00FC8F  74                 	db	116	;'t'
   888  00FC90  65                 	db	101	;'e'
   889  00FC91  64                 	db	100	;'d'
   890  00FC92  20                 	db	32
   891  00FC93  0D                 	db	13
   892  00FC94  0A                 	db	10
   893  00FC95  00                 	db	0
   894  00FC96                     STR_18:
   895                           
   896                           ; BSR set to: 0
   897  00FC96  49                 	db	73	;'I'
   898  00FC97  4E                 	db	78	;'N'
   899  00FC98  54                 	db	84	;'T'
   900  00FC99  32                 	db	50	;'2'
   901  00FC9A  20                 	db	32
   902  00FC9B  69                 	db	105	;'i'
   903  00FC9C  6E                 	db	110	;'n'
   904  00FC9D  74                 	db	116	;'t'
   905  00FC9E  65                 	db	101	;'e'
   906  00FC9F  72                 	db	114	;'r'
   907  00FCA0  72                 	db	114	;'r'
   908  00FCA1  75                 	db	117	;'u'
   909  00FCA2  70                 	db	112	;'p'
   910  00FCA3  74                 	db	116	;'t'
   911  00FCA4  20                 	db	32
   912  00FCA5  70                 	db	112	;'p'
   913  00FCA6  69                 	db	105	;'i'
   914  00FCA7  6E                 	db	110	;'n'
   915  00FCA8  20                 	db	32
   916  00FCA9  64                 	db	100	;'d'
   917  00FCAA  65                 	db	101	;'e'
   918  00FCAB  74                 	db	116	;'t'
   919  00FCAC  65                 	db	101	;'e'
   920  00FCAD  63                 	db	99	;'c'
   921  00FCAE  74                 	db	116	;'t'
   922  00FCAF  65                 	db	101	;'e'
   923  00FCB0  64                 	db	100	;'d'
   924  00FCB1  20                 	db	32
   925  00FCB2  0D                 	db	13
   926  00FCB3  0A                 	db	10
   927  00FCB4  00                 	db	0
   928  00FCB5                     STR_12:
   929                           
   930                           ; BSR set to: 0
   931  00FCB5  45                 	db	69	;'E'
   932  00FCB6  57                 	db	87	;'W'
   933  00FCB7  50                 	db	80	;'P'
   934  00FCB8  20                 	db	32
   935  00FCB9  45                 	db	69	;'E'
   936  00FCBA  57                 	db	87	;'W'
   937  00FCBB  4C                 	db	76	;'L'
   938  00FCBC  54                 	db	84	;'T'
   939  00FCBD  20                 	db	32
   940  00FCBE  4E                 	db	78	;'N'
   941  00FCBF  53                 	db	83	;'S'
   942  00FCC0  50                 	db	80	;'P'
   943  00FCC1  20                 	db	32
   944  00FCC2  4E                 	db	78	;'N'
   945  00FCC3  53                 	db	83	;'S'
   946  00FCC4  4C                 	db	76	;'L'
   947  00FCC5  54                 	db	84	;'T'
   948  00FCC6  20                 	db	32
   949  00FCC7  4D                 	db	77	;'M'
   950  00FCC8  44                 	db	68	;'D'
   951  00FCC9  00                 	db	0
   952  00FCCA                     STR_1:
   953                           
   954                           ; BSR set to: 0
   955  00FCCA  45                 	db	69	;'E'
   956  00FCCB  43                 	db	67	;'C'
   957  00FCCC  45                 	db	69	;'E'
   958  00FCCD  33                 	db	51	;'3'
   959  00FCCE  33                 	db	51	;'3'
   960  00FCCF  30                 	db	48	;'0'
   961  00FCD0  31                 	db	49	;'1'
   962  00FCD1  4C                 	db	76	;'L'
   963  00FCD2  20                 	db	32
   964  00FCD3  46                 	db	70	;'F'
   965  00FCD4  61                 	db	97	;'a'
   966  00FCD5  6C                 	db	108	;'l'
   967  00FCD6  6C                 	db	108	;'l'
   968  00FCD7  20                 	db	32
   969  00FCD8  32                 	db	50	;'2'
   970  00FCD9  32                 	db	50	;'2'
   971  00FCDA  2D                 	db	45
   972  00FCDB  53                 	db	83	;'S'
   973  00FCDC  31                 	db	49	;'1'
   974  00FCDD  00                 	db	0
   975  00FCDE                     STR_15:
   976                           
   977                           ; BSR set to: 0
   978  00FCDE  76                 	db	118	;'v'
   979  00FCDF  6F                 	db	111	;'o'
   980  00FCE0  6C                 	db	108	;'l'
   981  00FCE1  74                 	db	116	;'t'
   982  00FCE2  73                 	db	115	;'s'
   983  00FCE3  20                 	db	32
   984  00FCE4  61                 	db	97	;'a'
   985  00FCE5  72                 	db	114	;'r'
   986  00FCE6  65                 	db	101	;'e'
   987  00FCE7  20                 	db	32
   988  00FCE8  25                 	db	37
   989  00FCE9  30                 	db	48	;'0'
   990  00FCEA  2E                 	db	46
   991  00FCEB  33                 	db	51	;'3'
   992  00FCEC  66                 	db	102	;'f'
   993  00FCED  0D                 	db	13
   994  00FCEE  0A                 	db	10
   995  00FCEF  0A                 	db	10
   996  00FCF0  00                 	db	0
   997  00FCF1                     STR_8:
   998                           
   999                           ; BSR set to: 0
  1000  00FCF1  4E                 	db	78	;'N'
  1001  00FCF2  4F                 	db	79	;'O'
  1002  00FCF3  52                 	db	82	;'R'
  1003  00FCF4  54                 	db	84	;'T'
  1004  00FCF5  48                 	db	72	;'H'
  1005  00FCF6  2F                 	db	47
  1006  00FCF7  53                 	db	83	;'S'
  1007  00FCF8  4F                 	db	79	;'O'
  1008  00FCF9  55                 	db	85	;'U'
  1009  00FCFA  54                 	db	84	;'T'
  1010  00FCFB  48                 	db	72	;'H'
  1011  00FCFC  00                 	db	0
  1012  00FCFD                     STR_6:
  1013                           
  1014                           ; BSR set to: 0
  1015  00FCFD  45                 	db	69	;'E'
  1016  00FCFE  41                 	db	65	;'A'
  1017  00FCFF  53                 	db	83	;'S'
  1018  00FD00  54                 	db	84	;'T'
  1019  00FD01  2F                 	db	47
  1020  00FD02  57                 	db	87	;'W'
  1021  00FD03  45                 	db	69	;'E'
  1022  00FD04  53                 	db	83	;'S'
  1023  00FD05  54                 	db	84	;'T'
  1024  00FD06  00                 	db	0
  1025  00FD07                     STR_9:
  1026                           
  1027                           ; BSR set to: 0
  1028  00FD07  4E                 	db	78	;'N'
  1029  00FD08  2F                 	db	47
  1030  00FD09  53                 	db	83	;'S'
  1031  00FD0A  20                 	db	32
  1032  00FD0B  4C                 	db	76	;'L'
  1033  00FD0C  54                 	db	84	;'T'
  1034  00FD0D  00                 	db	0
  1035  00FD0E                     STR_7:
  1036                           
  1037                           ; BSR set to: 0
  1038  00FD0E  45                 	db	69	;'E'
  1039  00FD0F  2F                 	db	47
  1040  00FD10  57                 	db	87	;'W'
  1041  00FD11  20                 	db	32
  1042  00FD12  4C                 	db	76	;'L'
  1043  00FD13  54                 	db	84	;'T'
  1044  00FD14  00                 	db	0
  1045  00FD15                     STR_2:
  1046                           
  1047                           ; BSR set to: 0
  1048  00FD15  4D                 	db	77	;'M'
  1049  00FD16  6F                 	db	111	;'o'
  1050  00FD17  64                 	db	100	;'d'
  1051  00FD18  65                 	db	101	;'e'
  1052  00FD19  3A                 	db	58	;':'
  1053  00FD1A  00                 	db	0
  1054  00FD1B                     STR_3:
  1055                           
  1056                           ; BSR set to: 0
  1057  00FD1B  46                 	db	70	;'F'
  1058  00FD1C  52                 	db	82	;'R'
  1059  00FD1D  3A                 	db	58	;':'
  1060  00FD1E  00                 	db	0
  1061  00FD1F                     STR_4:
  1062                           
  1063                           ; BSR set to: 0
  1064  00FD1F  46                 	db	70	;'F'
  1065  00FD20  53                 	db	83	;'S'
  1066  00FD21  3A                 	db	58	;':'
  1067  00FD22  00                 	db	0
  1068  00FD23                     STR_11:
  1069                           
  1070                           ; BSR set to: 0
  1071  00FD23  50                 	db	80	;'P'
  1072  00FD24  4E                 	db	78	;'N'
  1073  00FD25  53                 	db	83	;'S'
  1074  00FD26  00                 	db	0
  1075  00FD27                     STR_10:
  1076                           
  1077                           ; BSR set to: 0
  1078  00FD27  50                 	db	80	;'P'
  1079  00FD28  45                 	db	69	;'E'
  1080  00FD29  57                 	db	87	;'W'
  1081  00FD2A  00                 	db	0
  1082  00FD2B                     STR_14:
  1083                           
  1084                           ; BSR set to: 0
  1085  00FD2B  20                 	db	32
  1086  00FD2C  00                 	db	0
  1087  00FD2D                     STR_5:
  1088                           
  1089                           ; BSR set to: 0
  1090  00FD2D  2A                 	db	42
  1091  00FD2E  00                 	db	0
  1092  0000                     
  1093                           ; #config settings
  1094  00FD2F  00                 	db	0	; dummy byte at the end
  1095  0000                     
  1096                           	psect	cinit
  1097  003738                     __pcinit:
  1098                           	opt stack 0
  1099  003738                     start_initialization:
  1100                           	opt stack 0
  1101  003738                     __initialization:
  1102                           	opt stack 0
  1103                           
  1104                           ; Clear objects allocated to BANK0 (52 bytes)
  1105  003738  EE00  F080         	lfsr	0,__pbssBANK0
  1106  00373C  0E34               	movlw	52
  1107  00373E                     clear_0:
  1108  00373E  6AEE               	clrf	postinc0,c
  1109  003740  06E8               	decf	wreg,f,c
  1110  003742  E1FD               	bnz	clear_0
  1111                           
  1112                           ; Clear objects allocated to COMRAM (8 bytes)
  1113  003744  EE00  F064         	lfsr	0,__pbssCOMRAM
  1114  003748  0E08               	movlw	8
  1115  00374A                     clear_1:
  1116  00374A  6AEE               	clrf	postinc0,c
  1117  00374C  06E8               	decf	wreg,f,c
  1118  00374E  E1FD               	bnz	clear_1
  1119                           
  1120                           ; Initialize objects allocated to BANK0 (41 bytes)
  1121                           ; load TBLPTR registers with __pidataBANK0
  1122  003750  0E6C               	movlw	low __pidataBANK0
  1123  003752  6EF6               	movwf	tblptrl,c
  1124  003754  0E3C               	movlw	high __pidataBANK0
  1125  003756  6EF7               	movwf	tblptrh,c
  1126  003758  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1127  00375A  6EF8               	movwf	tblptru,c
  1128  00375C  EE00  F0B4         	lfsr	0,__pdataBANK0
  1129  003760  EE10 F029          	lfsr	1,41
  1130  003764                     copy_data0:
  1131  003764  0009               	tblrd		*+
  1132  003766  CFF5 FFEE          	movff	tablat,postinc0
  1133  00376A  50E5               	movf	postdec1,w,c
  1134  00376C  50E1               	movf	fsr1l,w,c
  1135  00376E  E1FA               	bnz	copy_data0
  1136                           
  1137                           ; Initialize objects allocated to COMRAM (5 bytes)
  1138                           ; load TBLPTR registers with __pidataCOMRAM
  1139  003770  0E70               	movlw	low __pidataCOMRAM
  1140  003772  6EF6               	movwf	tblptrl,c
  1141  003774  0E3E               	movlw	high __pidataCOMRAM
  1142  003776  6EF7               	movwf	tblptrh,c
  1143  003778  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1144  00377A  6EF8               	movwf	tblptru,c
  1145  00377C  EE00  F06C         	lfsr	0,__pdataCOMRAM
  1146  003780  EE10 F005          	lfsr	1,5
  1147  003784                     copy_data1:
  1148  003784  0009               	tblrd		*+
  1149  003786  CFF5 FFEE          	movff	tablat,postinc0
  1150  00378A  50E5               	movf	postdec1,w,c
  1151  00378C  50E1               	movf	fsr1l,w,c
  1152  00378E  E1FA               	bnz	copy_data1
  1153  003790                     end_of_initialization:
  1154                           	opt stack 0
  1155  003790                     __end_of__initialization:
  1156                           	opt stack 0
  1157  003790  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1158  003792  6EF8               	movwf	tblptru,c
  1159  003794  0100               	movlb	0
  1160  003796  EF2B  F018         	goto	_main	;jump to C main() function
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170                           	psect	bssCOMRAM
  1171  000064                     __pbssCOMRAM:
  1172                           	opt stack 0
  1173  000064                     _txt:
  1174                           	opt stack 0
  1175  000064                     	ds	2
  1176  000066                     _Count:
  1177                           	opt stack 0
  1178  000066                     	ds	1
  1179  000067                     _PED_Count:
  1180                           	opt stack 0
  1181  000067                     	ds	1
  1182  000068                     __tft_type:
  1183                           	opt stack 0
  1184  000068                     	ds	1
  1185  000069                     _colstart:
  1186                           	opt stack 0
  1187  000069                     	ds	1
  1188  00006A                     _dir:
  1189                           	opt stack 0
  1190  00006A                     	ds	1
  1191  00006B                     _rowstart:
  1192                           	opt stack 0
  1193  00006B                     	ds	1
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           postdec1	equ	0xFE5
  1201                           fsr1l	equ	0xFE1
  1202                           
  1203                           	psect	dataCOMRAM
  1204  00006C                     __pdataCOMRAM:
  1205                           	opt stack 0
  1206  00006C                     _wrap:
  1207                           	opt stack 0
  1208  00006C                     	ds	1
  1209  00006D                     _SW_EWLT_Txt:
  1210                           	opt stack 0
  1211  00006D                     	ds	2
  1212  00006F                     _SW_EWPED_Txt:
  1213                           	opt stack 0
  1214  00006F                     	ds	2
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           postdec1	equ	0xFE5
  1222                           fsr1l	equ	0xFE1
  1223                           
  1224                           	psect	bssBANK0
  1225  000080                     __pbssBANK0:
  1226                           	opt stack 0
  1227  000080                     _volts:
  1228                           	opt stack 0
  1229  000080                     	ds	3
  1230  000083                     _INT0_flag:
  1231                           	opt stack 0
  1232  000083                     	ds	2
  1233  000085                     _INT1_flag:
  1234                           	opt stack 0
  1235  000085                     	ds	2
  1236  000087                     _INT2_flag:
  1237                           	opt stack 0
  1238  000087                     	ds	2
  1239  000089                     _MODE:
  1240                           	opt stack 0
  1241  000089                     	ds	2
  1242  00008B                     _nbr:
  1243                           	opt stack 0
  1244  00008B                     	ds	2
  1245  00008D                     _EWPED_SW:
  1246                           	opt stack 0
  1247  00008D                     	ds	1
  1248  00008E                     _NSPED_SW:
  1249                           	opt stack 0
  1250  00008E                     	ds	1
  1251  00008F                     _SW_EWLT:
  1252                           	opt stack 0
  1253  00008F                     	ds	1
  1254  000090                     _SW_EWPED:
  1255                           	opt stack 0
  1256  000090                     	ds	1
  1257  000091                     _SW_MODE:
  1258                           	opt stack 0
  1259  000091                     	ds	1
  1260  000092                     _SW_NSLT:
  1261                           	opt stack 0
  1262  000092                     	ds	1
  1263  000093                     _SW_NSPED:
  1264                           	opt stack 0
  1265  000093                     	ds	1
  1266  000094                     _direction:
  1267                           	opt stack 0
  1268  000094                     	ds	1
  1269  000095                     _buffer:
  1270                           	opt stack 0
  1271  000095                     	ds	31
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postdec1	equ	0xFE5
  1279                           fsr1l	equ	0xFE1
  1280                           
  1281                           	psect	dataBANK0
  1282  0000B4                     __pdataBANK0:
  1283                           	opt stack 0
  1284  0000B4                     _array:
  1285                           	opt stack 0
  1286  0000B4                     	ds	11
  1287  0000BF                     _EWLT_Count:
  1288                           	opt stack 0
  1289  0000BF                     	ds	3
  1290  0000C2                     _EW_Count:
  1291                           	opt stack 0
  1292  0000C2                     	ds	3
  1293  0000C5                     _NSLT_Count:
  1294                           	opt stack 0
  1295  0000C5                     	ds	3
  1296  0000C8                     _NS_Count:
  1297                           	opt stack 0
  1298  0000C8                     	ds	3
  1299  0000CB                     _PED_EW_Count:
  1300                           	opt stack 0
  1301  0000CB                     	ds	3
  1302  0000CE                     _PED_NS_Count:
  1303                           	opt stack 0
  1304  0000CE                     	ds	3
  1305  0000D1                     _Act_Mode_Txt:
  1306                           	opt stack 0
  1307  0000D1                     	ds	2
  1308  0000D3                     _FlashingR_Txt:
  1309                           	opt stack 0
  1310  0000D3                     	ds	2
  1311  0000D5                     _FlashingS_Txt:
  1312                           	opt stack 0
  1313  0000D5                     	ds	2
  1314  0000D7                     _SW_MODE_Txt:
  1315                           	opt stack 0
  1316  0000D7                     	ds	2
  1317  0000D9                     _SW_NSLT_Txt:
  1318                           	opt stack 0
  1319  0000D9                     	ds	2
  1320  0000DB                     _SW_NSPED_Txt:
  1321                           	opt stack 0
  1322  0000DB                     	ds	2
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           
  1332                           	psect	cstackBANK0
  1333  0000DD                     __pcstackBANK0:
  1334                           	opt stack 0
  1335  0000DD                     _printf$2518:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x0
  1339  0000DD                     	ds	3
  1340  0000E0                     printf@ap:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x3
  1344  0000E0                     	ds	2
  1345  0000E2                     printf@val:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x5
  1349  0000E2                     	ds	4
  1350  0000E6                     printf@tmpval:
  1351                           	opt stack 0
  1352                           
  1353                           ; 4 bytes @ 0x9
  1354  0000E6                     	ds	4
  1355  0000EA                     printf@exp:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0xD
  1359  0000EA                     	ds	2
  1360  0000EC                     printf@flag:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0xF
  1364  0000EC                     	ds	2
  1365  0000EE                     printf@width:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x11
  1369  0000EE                     	ds	2
  1370  0000F0                     printf@fval:
  1371                           	opt stack 0
  1372                           
  1373                           ; 3 bytes @ 0x13
  1374  0000F0                     	ds	3
  1375  0000F3                     printf@prec:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x16
  1379  0000F3                     	ds	2
  1380  0000F5                     printf@c:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x18
  1384  0000F5                     	ds	1
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1l	equ	0xFE1
  1393                           
  1394                           	psect	cstackCOMRAM
  1395  000001                     __pcstackCOMRAM:
  1396                           	opt stack 0
  1397  000001                     ??_chkisr:
  1398  000001                     
  1399                           ; 1 bytes @ 0x0
  1400  000001                     	ds	14
  1401  00000F                     ??_isdigit:
  1402  00000F                     ?_strlen:
  1403                           	opt stack 0
  1404  00000F                     ?_get_full_ADC:
  1405                           	opt stack 0
  1406  00000F                     ?___awmod:
  1407                           	opt stack 0
  1408  00000F                     ?___ftpack:
  1409                           	opt stack 0
  1410  00000F                     ?___ftneg:
  1411                           	opt stack 0
  1412  00000F                     ?__tdiv_to_l_:
  1413                           	opt stack 0
  1414  00000F                     ?__div_to_l_:
  1415                           	opt stack 0
  1416  00000F                     ?___lldiv:
  1417                           	opt stack 0
  1418  00000F                     ?___llmod:
  1419                           	opt stack 0
  1420  00000F                     spiwrite@x:
  1421                           	opt stack 0
  1422  00000F                     putch@c:
  1423                           	opt stack 0
  1424  00000F                     Select_ADC_Channel@channel:
  1425                           	opt stack 0
  1426  00000F                     OpenUSART@spbrg:
  1427                           	opt stack 0
  1428  00000F                     ___awmod@dividend:
  1429                           	opt stack 0
  1430  00000F                     strcpy@to:
  1431                           	opt stack 0
  1432  00000F                     strlen@s:
  1433                           	opt stack 0
  1434  00000F                     __div_to_l_@f1:
  1435                           	opt stack 0
  1436  00000F                     ___ftpack@arg:
  1437                           	opt stack 0
  1438  00000F                     __tdiv_to_l_@f1:
  1439                           	opt stack 0
  1440  00000F                     ___ftge@ff1:
  1441                           	opt stack 0
  1442  00000F                     ___ftneg@f1:
  1443                           	opt stack 0
  1444  00000F                     ___lldiv@dividend:
  1445                           	opt stack 0
  1446  00000F                     ___llmod@dividend:
  1447                           	opt stack 0
  1448                           
  1449                           ; 4 bytes @ 0xE
  1450  00000F                     	ds	1
  1451  000010                     spiwrite@spidata:
  1452                           	opt stack 0
  1453  000010                     _isdigit$2209:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0xF
  1457  000010                     	ds	1
  1458  000011                     ??_strlen:
  1459  000011                     ??_get_full_ADC:
  1460  000011                     write_command@cmd_:
  1461                           	opt stack 0
  1462  000011                     write_data@data_:
  1463                           	opt stack 0
  1464  000011                     OpenUSART@config:
  1465                           	opt stack 0
  1466  000011                     isdigit@c:
  1467                           	opt stack 0
  1468  000011                     ___awmod@divisor:
  1469                           	opt stack 0
  1470  000011                     strcpy@from:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x10
  1474  000011                     	ds	1
  1475  000012                     setAddrWindow@y0:
  1476                           	opt stack 0
  1477  000012                     ___ftpack@exp:
  1478                           	opt stack 0
  1479  000012                     __div_to_l_@f2:
  1480                           	opt stack 0
  1481  000012                     __tdiv_to_l_@f2:
  1482                           	opt stack 0
  1483  000012                     ___ftge@ff2:
  1484                           	opt stack 0
  1485                           
  1486                           ; 3 bytes @ 0x11
  1487  000012                     	ds	1
  1488  000013                     setAddrWindow@x1:
  1489                           	opt stack 0
  1490  000013                     ___awmod@counter:
  1491                           	opt stack 0
  1492  000013                     ___ftpack@sign:
  1493                           	opt stack 0
  1494  000013                     get_full_ADC@result:
  1495                           	opt stack 0
  1496  000013                     strcpy@cp:
  1497                           	opt stack 0
  1498  000013                     strlen@cp:
  1499                           	opt stack 0
  1500  000013                     ___lldiv@divisor:
  1501                           	opt stack 0
  1502  000013                     ___llmod@divisor:
  1503                           	opt stack 0
  1504                           
  1505                           ; 4 bytes @ 0x12
  1506  000013                     	ds	1
  1507  000014                     ??___ftpack:
  1508  000014                     setAddrWindow@y1:
  1509                           	opt stack 0
  1510  000014                     ___awmod@sign:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x13
  1514  000014                     	ds	1
  1515  000015                     ??__tdiv_to_l_:
  1516  000015                     ??___ftge:
  1517  000015                     ?___awdiv:
  1518                           	opt stack 0
  1519  000015                     setAddrWindow@x0:
  1520                           	opt stack 0
  1521  000015                     ___awdiv@dividend:
  1522                           	opt stack 0
  1523  000015                     __div_to_l_@quot:
  1524                           	opt stack 0
  1525                           
  1526                           ; 4 bytes @ 0x14
  1527  000015                     	ds	1
  1528  000016                     drawPixel@y:
  1529                           	opt stack 0
  1530  000016                     drawFastVLine@y:
  1531                           	opt stack 0
  1532  000016                     fillRectangle@y:
  1533                           	opt stack 0
  1534  000016                     drawFastHLine@y:
  1535                           	opt stack 0
  1536                           
  1537                           ; 1 bytes @ 0x15
  1538  000016                     	ds	1
  1539  000017                     ?___lltoft:
  1540                           	opt stack 0
  1541  000017                     drawFastVLine@h:
  1542                           	opt stack 0
  1543  000017                     fillRectangle@w:
  1544                           	opt stack 0
  1545  000017                     drawFastHLine@w:
  1546                           	opt stack 0
  1547  000017                     ___llmod@counter:
  1548                           	opt stack 0
  1549  000017                     drawPixel@color:
  1550                           	opt stack 0
  1551  000017                     ___awdiv@divisor:
  1552                           	opt stack 0
  1553  000017                     ___lldiv@quotient:
  1554                           	opt stack 0
  1555  000017                     ___lltoft@c:
  1556                           	opt stack 0
  1557                           
  1558                           ; 4 bytes @ 0x16
  1559  000017                     	ds	1
  1560  000018                     fillRectangle@h:
  1561                           	opt stack 0
  1562  000018                     drawFastVLine@color:
  1563                           	opt stack 0
  1564  000018                     drawFastHLine@color:
  1565                           	opt stack 0
  1566  000018                     __tdiv_to_l_@quot:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x17
  1570  000018                     	ds	1
  1571  000019                     drawPixel@x:
  1572                           	opt stack 0
  1573  000019                     ___awdiv@counter:
  1574                           	opt stack 0
  1575  000019                     __div_to_l_@cntr:
  1576                           	opt stack 0
  1577  000019                     fillRectangle@color:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x18
  1581  000019                     	ds	1
  1582  00001A                     ??_drawFastVLine:
  1583  00001A                     ??_drawFastHLine:
  1584  00001A                     ___awdiv@sign:
  1585                           	opt stack 0
  1586  00001A                     __div_to_l_@exp1:
  1587                           	opt stack 0
  1588  00001A                     drawCircle@x0:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x19
  1592  00001A                     	ds	1
  1593  00001B                     ??_fillRectangle:
  1594  00001B                     ??___lltoft:
  1595  00001B                     ___lldiv@counter:
  1596                           	opt stack 0
  1597  00001B                     ___awdiv@quotient:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x1A
  1601  00001B                     	ds	1
  1602  00001C                     __tdiv_to_l_@cntr:
  1603                           	opt stack 0
  1604  00001C                     drawCircle@y0:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x1B
  1608  00001C                     	ds	1
  1609  00001D                     ?___wmul:
  1610                           	opt stack 0
  1611  00001D                     __tdiv_to_l_@exp1:
  1612                           	opt stack 0
  1613  00001D                     ___wmul@multiplier:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x1C
  1617  00001D                     	ds	1
  1618  00001E                     drawFastVLine@hi:
  1619                           	opt stack 0
  1620  00001E                     drawFastHLine@hi:
  1621                           	opt stack 0
  1622  00001E                     drawCircle@r:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x1D
  1626  00001E                     	ds	1
  1627  00001F                     drawFastVLine@lo:
  1628                           	opt stack 0
  1629  00001F                     fillRectangle@hi:
  1630                           	opt stack 0
  1631  00001F                     drawFastHLine@lo:
  1632                           	opt stack 0
  1633  00001F                     ___lltoft@exp:
  1634                           	opt stack 0
  1635  00001F                     ___wmul@multiplicand:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x1E
  1639  00001F                     	ds	1
  1640  000020                     drawFastVLine@x:
  1641                           	opt stack 0
  1642  000020                     fillRectangle@lo:
  1643                           	opt stack 0
  1644  000020                     drawFastHLine@x:
  1645                           	opt stack 0
  1646  000020                     drawCircle@color:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x1F
  1650  000020                     	ds	1
  1651  000021                     fillRect@y:
  1652                           	opt stack 0
  1653  000021                     fillRectangle@x:
  1654                           	opt stack 0
  1655  000021                     fillCircleHelper@x0:
  1656                           	opt stack 0
  1657  000021                     drawRect@x:
  1658                           	opt stack 0
  1659  000021                     ___wmul@product:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x20
  1663  000021                     	ds	1
  1664  000022                     ??_drawCircle:
  1665  000022                     fillRect@w:
  1666                           	opt stack 0
  1667  000022                     fillScreen@color:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x21
  1671  000022                     	ds	1
  1672  000023                     ?___ftmul:
  1673                           	opt stack 0
  1674  000023                     ?___awtoft:
  1675                           	opt stack 0
  1676  000023                     fillRect@h:
  1677                           	opt stack 0
  1678  000023                     delay_ms@ms:
  1679                           	opt stack 0
  1680  000023                     fillCircleHelper@y0:
  1681                           	opt stack 0
  1682  000023                     drawRect@y:
  1683                           	opt stack 0
  1684  000023                     ___awtoft@c:
  1685                           	opt stack 0
  1686  000023                     ___ftmul@f1:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x22
  1690  000023                     	ds	1
  1691  000024                     fillRect@color:
  1692                           	opt stack 0
  1693  000024                     drawCircle@ddF_x:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x23
  1697  000024                     	ds	1
  1698  000025                     ??_delay_ms:
  1699  000025                     fillCircleHelper@r:
  1700                           	opt stack 0
  1701  000025                     drawRect@w:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x24
  1705  000025                     	ds	1
  1706  000026                     ??_fillRect:
  1707  000026                     ___awtoft@sign:
  1708                           	opt stack 0
  1709  000026                     drawCircle@ddF_y:
  1710                           	opt stack 0
  1711  000026                     ___ftmul@f2:
  1712                           	opt stack 0
  1713                           
  1714                           ; 3 bytes @ 0x25
  1715  000026                     	ds	1
  1716  000027                     ?___ftdiv:
  1717                           	opt stack 0
  1718  000027                     delay_ms@count:
  1719                           	opt stack 0
  1720  000027                     fillCircleHelper@cornername:
  1721                           	opt stack 0
  1722  000027                     drawRect@h:
  1723                           	opt stack 0
  1724  000027                     ___ftdiv@f1:
  1725                           	opt stack 0
  1726                           
  1727                           ; 3 bytes @ 0x26
  1728  000027                     	ds	1
  1729  000028                     drawCircle@f:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x27
  1733  000028                     	ds	1
  1734  000029                     ??___ftmul:
  1735  000029                     fillRect@x:
  1736                           	opt stack 0
  1737  000029                     fillCircleHelper@delta:
  1738                           	opt stack 0
  1739  000029                     drawRect@color:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x28
  1743  000029                     	ds	1
  1744  00002A                     fillRect@i:
  1745                           	opt stack 0
  1746  00002A                     drawCircle@x:
  1747                           	opt stack 0
  1748  00002A                     ___ftdiv@f2:
  1749                           	opt stack 0
  1750                           
  1751                           ; 3 bytes @ 0x29
  1752  00002A                     	ds	1
  1753  00002B                     ??_drawRect:
  1754  00002B                     fillCircleHelper@color:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x2A
  1758  00002B                     	ds	1
  1759  00002C                     drawChar@y:
  1760                           	opt stack 0
  1761  00002C                     ___ftmul@exp:
  1762                           	opt stack 0
  1763  00002C                     drawCircle@y:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x2B
  1767  00002C                     	ds	1
  1768  00002D                     ??___ftdiv:
  1769  00002D                     ??_fillCircleHelper:
  1770  00002D                     drawChar@c:
  1771                           	opt stack 0
  1772  00002D                     ___ftmul@f3_as_product:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x2C
  1776  00002D                     	ds	1
  1777  00002E                     drawChar@color:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x2D
  1781  00002E                     	ds	1
  1782  00002F                     fillCircleHelper@ddF_x:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x2E
  1786  00002F                     	ds	1
  1787  000030                     ___ftdiv@cntr:
  1788                           	opt stack 0
  1789  000030                     ___ftmul@cntr:
  1790                           	opt stack 0
  1791  000030                     drawChar@bg:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x2F
  1795  000030                     	ds	1
  1796  000031                     ___ftmul@sign:
  1797                           	opt stack 0
  1798  000031                     fillCircleHelper@ddF_y:
  1799                           	opt stack 0
  1800  000031                     ___ftdiv@f3:
  1801                           	opt stack 0
  1802                           
  1803                           ; 3 bytes @ 0x30
  1804  000031                     	ds	1
  1805  000032                     ?_fround:
  1806                           	opt stack 0
  1807  000032                     ?_scale:
  1808                           	opt stack 0
  1809  000032                     drawChar@size:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x31
  1813  000032                     	ds	1
  1814  000033                     drawChar@line:
  1815                           	opt stack 0
  1816  000033                     fillCircleHelper@f:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x32
  1820  000033                     	ds	1
  1821  000034                     drawChar@x:
  1822                           	opt stack 0
  1823  000034                     ___ftdiv@exp:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x33
  1827  000034                     	ds	1
  1828  000035                     drawChar@j:
  1829                           	opt stack 0
  1830  000035                     ___ftdiv@sign:
  1831                           	opt stack 0
  1832  000035                     fillCircleHelper@x:
  1833                           	opt stack 0
  1834  000035                     _fround$2516:
  1835                           	opt stack 0
  1836  000035                     _scale$2517:
  1837                           	opt stack 0
  1838                           
  1839                           ; 3 bytes @ 0x34
  1840  000035                     	ds	1
  1841  000036                     drawChar@i:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x35
  1845  000036                     	ds	1
  1846  000037                     drawtext@y:
  1847                           	opt stack 0
  1848  000037                     fillCircleHelper@y:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x36
  1852  000037                     	ds	1
  1853  000038                     scale@scl:
  1854                           	opt stack 0
  1855  000038                     drawtext@_text:
  1856                           	opt stack 0
  1857  000038                     _fround$2515:
  1858                           	opt stack 0
  1859                           
  1860                           ; 3 bytes @ 0x37
  1861  000038                     	ds	1
  1862  000039                     ?___fttol:
  1863                           	opt stack 0
  1864  000039                     fillCircle@x0:
  1865                           	opt stack 0
  1866  000039                     ___fttol@f1:
  1867                           	opt stack 0
  1868                           
  1869                           ; 3 bytes @ 0x38
  1870  000039                     	ds	1
  1871  00003A                     drawtext@color:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x39
  1875  00003A                     	ds	1
  1876  00003B                     fround@prec:
  1877                           	opt stack 0
  1878  00003B                     fillCircle@y0:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x3A
  1882  00003B                     	ds	1
  1883  00003C                     ?___ftadd:
  1884                           	opt stack 0
  1885  00003C                     drawtext@bg:
  1886                           	opt stack 0
  1887  00003C                     ___ftadd@f1:
  1888                           	opt stack 0
  1889                           
  1890                           ; 3 bytes @ 0x3B
  1891  00003C                     	ds	1
  1892  00003D                     ??___fttol:
  1893  00003D                     fillCircle@r:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x3C
  1897  00003D                     	ds	1
  1898  00003E                     drawtext@size:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x3D
  1902  00003E                     	ds	1
  1903  00003F                     ??_drawtext:
  1904  00003F                     fillCircle@color:
  1905                           	opt stack 0
  1906  00003F                     ___ftadd@f2:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0x3E
  1910  00003F                     	ds	2
  1911  000041                     drawtext@x:
  1912                           	opt stack 0
  1913  000041                     update_LCD_color@color:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0x40
  1917  000041                     	ds	1
  1918  000042                     ??___ftadd:
  1919  000042                     update_LCD_color@direction:
  1920                           	opt stack 0
  1921  000042                     ___fttol@sign1:
  1922                           	opt stack 0
  1923  000042                     drawtext@textsize:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x41
  1927  000042                     	ds	1
  1928  000043                     update_LCD_color@Circle_Y:
  1929                           	opt stack 0
  1930  000043                     ___fttol@lval:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0x42
  1934  000043                     	ds	1
  1935  000044                     Set_NS@color:
  1936                           	opt stack 0
  1937  000044                     Set_NSLT@color:
  1938                           	opt stack 0
  1939  000044                     Set_EW@color:
  1940                           	opt stack 0
  1941  000044                     Set_EWLT@color:
  1942                           	opt stack 0
  1943  000044                     drawtext@i:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x43
  1947  000044                     	ds	1
  1948  000045                     ___ftadd@sign:
  1949                           	opt stack 0
  1950                           
  1951                           ; 1 bytes @ 0x44
  1952  000045                     	ds	1
  1953  000046                     drawtext@cursor_y:
  1954                           	opt stack 0
  1955  000046                     ___ftadd@exp2:
  1956                           	opt stack 0
  1957                           
  1958                           ; 1 bytes @ 0x45
  1959  000046                     	ds	1
  1960  000047                     drawtext@cursor_x:
  1961                           	opt stack 0
  1962  000047                     ___ftadd@exp1:
  1963                           	opt stack 0
  1964  000047                     ___fttol@exp1:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x46
  1968  000047                     	ds	1
  1969  000048                     ?___ftsub:
  1970                           	opt stack 0
  1971  000048                     update_LCD_count@count:
  1972                           	opt stack 0
  1973  000048                     update_LCD_PED_Count@count:
  1974                           	opt stack 0
  1975  000048                     ___ftsub@f1:
  1976                           	opt stack 0
  1977                           
  1978                           ; 3 bytes @ 0x47
  1979  000048                     	ds	1
  1980  000049                     ??_update_LCD_count:
  1981  000049                     ??_update_LCD_PED_Count:
  1982                           
  1983                           ; 0 bytes @ 0x48
  1984  000049                     	ds	1
  1985  00004A                     update_LCD_count@direction:
  1986                           	opt stack 0
  1987  00004A                     update_LCD_PED_Count@direction:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x49
  1991  00004A                     	ds	1
  1992  00004B                     PED_Control@Num_Sec:
  1993                           	opt stack 0
  1994  00004B                     ___ftsub@f2:
  1995                           	opt stack 0
  1996                           
  1997                           ; 3 bytes @ 0x4A
  1998  00004B                     	ds	1
  1999  00004C                     PED_Control@i:
  2000                           	opt stack 0
  2001                           
  2002                           ; 1 bytes @ 0x4B
  2003  00004C                     	ds	2
  2004  00004E                     ?_printf:
  2005                           	opt stack 0
  2006  00004E                     printf@f:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x4D
  2010  00004E                     	ds	5
  2011  000053                     ??_printf:
  2012                           
  2013                           ; 0 bytes @ 0x52
  2014  000053                     	ds	6
  2015  000059                     update_LCD_misc@nStep:
  2016                           	opt stack 0
  2017                           
  2018                           ; 2 bytes @ 0x58
  2019  000059                     	ds	2
  2020  00005B                     update_LCD_misc@volts:
  2021                           	opt stack 0
  2022                           
  2023                           ; 3 bytes @ 0x5A
  2024  00005B                     	ds	3
  2025  00005E                     WAIT_N_SEC@seconds:
  2026                           	opt stack 0
  2027                           
  2028                           ; 1 bytes @ 0x5D
  2029  00005E                     	ds	1
  2030  00005F                     WAIT_N_SEC@i:
  2031                           	opt stack 0
  2032                           
  2033                           ; 1 bytes @ 0x5E
  2034  00005F                     	ds	1
  2035  000060                     ??_main:
  2036                           
  2037                           ; 0 bytes @ 0x5F
  2038  000060                     	ds	2
  2039  000062                     main@nStep:
  2040                           	opt stack 0
  2041                           
  2042                           ; 2 bytes @ 0x61
  2043  000062                     	ds	2
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           postinc0	equ	0xFEE
  2049                           wreg	equ	0xFE8
  2050                           postdec1	equ	0xFE5
  2051                           fsr1l	equ	0xFE1
  2052                           
  2053 ;;
  2054 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2055 ;;
  2056 ;; *************** function _main *****************
  2057 ;; Defined at:
  2058 ;;		line 302 in file "Lab9test.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;		None
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  nStep           2   97[COMRAM] int 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;		None               void
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:        4 bytes
  2077 ;; Hardware stack levels required when called:   13
  2078 ;; This function calls:
  2079 ;;		_Day_Mode
  2080 ;;		_Do_Init
  2081 ;;		_Init_ADC
  2082 ;;		_Init_TRIS
  2083 ;;		_Initialize_Screen
  2084 ;;		_Night_Mode
  2085 ;;		_Select_ADC_Channel
  2086 ;;		___awtoft
  2087 ;;		___ftdiv
  2088 ;;		___ftge
  2089 ;;		_get_full_ADC
  2090 ;;		_init_UART
  2091 ;; This function is called by:
  2092 ;;		Startup code after reset
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text0
  2097  003056                     __ptext0:
  2098                           	opt stack 0
  2099  003056                     _main:
  2100                           	opt stack 18
  2101                           
  2102                           ;Lab9test.c: 304: Init_ADC();
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;incstack = 0
  2106  003056  EC16  F01F         	call	_Init_ADC	;wreg free
  2107                           
  2108                           ;Lab9test.c: 305: Init_TRIS();
  2109  00305A  ECC3  F01E         	call	_Init_TRIS	;wreg free
  2110                           
  2111                           ;Lab9test.c: 306: init_UART ();
  2112  00305E  ECD9  F01E         	call	_init_UART	;wreg free
  2113                           
  2114                           ;Lab9test.c: 307: Select_ADC_Channel(0);
  2115  003062  0E00               	movlw	0
  2116  003064  EC24  F01F         	call	_Select_ADC_Channel
  2117                           
  2118                           ;Lab9test.c: 309: OSCCON = 0x70;
  2119  003068  0E70               	movlw	112
  2120  00306A  6ED3               	movwf	4051,c	;volatile
  2121                           
  2122                           ;Lab9test.c: 310: RBPU = 0;
  2123  00306C  9EF1               	bcf	intcon2,7,c	;volatile
  2124                           
  2125                           ;Lab9test.c: 311: Initialize_Screen();
  2126  00306E  EC5C  F005         	call	_Initialize_Screen	;wreg free
  2127                           
  2128                           ;Lab9test.c: 312: Do_Init();
  2129  003072  EC72  F01E         	call	_Do_Init	;wreg free
  2130  003076  D000               	goto	l7798
  2131  003078                     l7798:
  2132                           
  2133                           ;Lab9test.c: 315: {
  2134                           ;Lab9test.c: 316: int nStep = get_full_ADC ();
  2135  003078  EC5F  F01E         	call	_get_full_ADC	;wreg free
  2136  00307C  C00F  F062         	movff	?_get_full_ADC,main@nStep
  2137  003080  C010  F063         	movff	?_get_full_ADC+1,main@nStep+1
  2138                           
  2139                           ;Lab9test.c: 317: volts = nStep*4/1024.0;
  2140  003084  C062  F060         	movff	main@nStep,??_main
  2141  003088  C063  F061         	movff	main@nStep+1,??_main+1
  2142  00308C  90D8               	bcf	status,0,c
  2143  00308E  3660               	rlcf	??_main,f,c
  2144  003090  3661               	rlcf	??_main+1,f,c
  2145  003092  90D8               	bcf	status,0,c
  2146  003094  3660               	rlcf	??_main,f,c
  2147  003096  3661               	rlcf	??_main+1,f,c
  2148  003098  C060  F023         	movff	??_main,___awtoft@c
  2149  00309C  C061  F024         	movff	??_main+1,___awtoft@c+1
  2150  0030A0  ECB9  F01D         	call	___awtoft	;wreg free
  2151  0030A4  C023  F027         	movff	?___awtoft,___ftdiv@f1
  2152  0030A8  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  2153  0030AC  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  2154  0030B0  0E00               	movlw	0
  2155  0030B2  6E2A               	movwf	___ftdiv@f2,c
  2156  0030B4  0E80               	movlw	128
  2157  0030B6  6E2B               	movwf	___ftdiv@f2+1,c
  2158  0030B8  0E44               	movlw	68
  2159  0030BA  6E2C               	movwf	___ftdiv@f2+2,c
  2160  0030BC  EC16  F016         	call	___ftdiv	;wreg free
  2161  0030C0  C027  F080         	movff	?___ftdiv,_volts
  2162  0030C4  C028  F081         	movff	?___ftdiv+1,_volts+1
  2163  0030C8  C029  F082         	movff	?___ftdiv+2,_volts+2
  2164                           
  2165                           ;Lab9test.c: 319: if (volts < 2.3)
  2166  0030CC  C080  F00F         	movff	_volts,___ftge@ff1
  2167  0030D0  C081  F010         	movff	_volts+1,___ftge@ff1+1
  2168  0030D4  C082  F011         	movff	_volts+2,___ftge@ff1+2
  2169  0030D8  0E33               	movlw	51
  2170  0030DA  6E12               	movwf	___ftge@ff2,c
  2171  0030DC  0E13               	movlw	19
  2172  0030DE  6E13               	movwf	___ftge@ff2+1,c
  2173  0030E0  0E40               	movlw	64
  2174  0030E2  6E14               	movwf	___ftge@ff2+2,c
  2175  0030E4  ECD0  F018         	call	___ftge	;wreg free
  2176  0030E8  B0D8               	btfsc	status,0,c
  2177  0030EA  D003               	goto	l7806
  2178                           
  2179                           ;Lab9test.c: 320: {
  2180                           ;Lab9test.c: 321: Day_Mode();
  2181  0030EC  EC64  F017         	call	_Day_Mode	;wreg free
  2182                           
  2183                           ;Lab9test.c: 322: }
  2184  0030F0  D7C3               	goto	l7798
  2185  0030F2                     l7806:
  2186                           
  2187                           ;Lab9test.c: 323: else
  2188                           ;Lab9test.c: 324: {
  2189                           ;Lab9test.c: 325: Night_Mode();
  2190  0030F2  EC7E  F018         	call	_Night_Mode	;wreg free
  2191  0030F6  D7C0               	goto	l7798
  2192  0030F8  EF0C  F000         	goto	start
  2193  0030FC                     __end_of_main:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           intcon2	equ	0xFF1
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postdec1	equ	0xFE5
  2203                           fsr1l	equ	0xFE1
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _Select_ADC_Channel *****************
  2207 ;; Defined at:
  2208 ;;		line 456 in file "Lab9test.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  channel         1    wreg     unsigned char 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  channel         1   14[COMRAM] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;		None               void
  2215 ;; Registers used:
  2216 ;;		wreg, status,2, status,0, prodl, prodh
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;Total ram usage:        1 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    2
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_main
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text1
  2237  003E48                     __ptext1:
  2238                           	opt stack 0
  2239  003E48                     _Select_ADC_Channel:
  2240                           	opt stack 28
  2241                           
  2242                           ;incstack = 0
  2243                           ;Select_ADC_Channel@channel stored from wreg
  2244  003E48  6E0F               	movwf	Select_ADC_Channel@channel,c
  2245                           
  2246                           ;Lab9test.c: 458: ADCON0 = channel * 4 + 1;
  2247  003E4A  500F               	movf	Select_ADC_Channel@channel,w,c
  2248  003E4C  0D04               	mullw	4
  2249  003E4E  28F3               	incf	prodl,w,c
  2250  003E50  6EC2               	movwf	4034,c	;volatile
  2251  003E52  0012               	return		;funcret
  2252  003E54                     __end_of_Select_ADC_Channel:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           prodl	equ	0xFF3
  2259                           intcon2	equ	0xFF1
  2260                           postinc0	equ	0xFEE
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _Night_Mode *****************
  2267 ;; Defined at:
  2268 ;;		line 390 in file "Lab9test.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;		None               void
  2275 ;; Registers used:
  2276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:   12
  2289 ;; This function calls:
  2290 ;;		_Set_EW
  2291 ;;		_Set_EWLT
  2292 ;;		_Set_NS
  2293 ;;		_Set_NSLT
  2294 ;;		_WAIT_N_SEC
  2295 ;; This function is called by:
  2296 ;;		_main
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text2
  2301  0030FC                     __ptext2:
  2302                           	opt stack 0
  2303  0030FC                     _Night_Mode:
  2304                           	opt stack 18
  2305                           
  2306                           ;Lab9test.c: 392: PORTBbits.RB7 = 1;
  2307                           
  2308                           ;incstack = 0
  2309  0030FC  8E81               	bsf	3969,7,c	;volatile
  2310                           
  2311                           ;Lab9test.c: 393: Act_Mode_Txt[0] = 'N';
  2312  0030FE  0E4E               	movlw	78
  2313  003100  0100               	movlb	0	; () banked
  2314  003102  6FD1               	movwf	_Act_Mode_Txt& (0+255),b
  2315  003104  D000               	goto	l7508
  2316  003106                     l7508:
  2317                           
  2318                           ;Lab9test.c: 396: {
  2319                           ;Lab9test.c: 397: Set_NSLT (1);
  2320  003106  0E01               	movlw	1
  2321  003108  ECC9  F01C         	call	_Set_NSLT
  2322                           
  2323                           ;Lab9test.c: 398: Set_EW (1);
  2324  00310C  0E01               	movlw	1
  2325  00310E  EC35  F01D         	call	_Set_EW
  2326                           
  2327                           ;Lab9test.c: 399: Set_EWLT (1);
  2328  003112  0E01               	movlw	1
  2329  003114  EC11  F01D         	call	_Set_EWLT
  2330                           
  2331                           ;Lab9test.c: 400: Set_NS (2);
  2332  003118  0E02               	movlw	2
  2333  00311A  ECED  F01C         	call	_Set_NS
  2334                           
  2335                           ;Lab9test.c: 402: WAIT_N_SEC (8);
  2336  00311E  0E08               	movlw	8
  2337  003120  ECD7  F01D         	call	_WAIT_N_SEC
  2338                           
  2339                           ;Lab9test.c: 403: Set_NS (3);
  2340  003124  0E03               	movlw	3
  2341  003126  ECED  F01C         	call	_Set_NS
  2342                           
  2343                           ;Lab9test.c: 405: WAIT_N_SEC (2);
  2344  00312A  0E02               	movlw	2
  2345  00312C  ECD7  F01D         	call	_WAIT_N_SEC
  2346                           
  2347                           ;Lab9test.c: 406: Set_NS (1);
  2348  003130  0E01               	movlw	1
  2349  003132  ECED  F01C         	call	_Set_NS
  2350                           
  2351                           ;Lab9test.c: 408: if (PORTAbits.RA4 == 1)
  2352  003136  A880               	btfss	3968,4,c	;volatile
  2353  003138  D010               	goto	l7534
  2354                           
  2355                           ;Lab9test.c: 409: {
  2356                           ;Lab9test.c: 410: Set_EWLT (2);
  2357  00313A  0E02               	movlw	2
  2358  00313C  EC11  F01D         	call	_Set_EWLT
  2359                           
  2360                           ;Lab9test.c: 411: WAIT_N_SEC (6);
  2361  003140  0E06               	movlw	6
  2362  003142  ECD7  F01D         	call	_WAIT_N_SEC
  2363                           
  2364                           ;Lab9test.c: 412: Set_EWLT (3);
  2365  003146  0E03               	movlw	3
  2366  003148  EC11  F01D         	call	_Set_EWLT
  2367                           
  2368                           ;Lab9test.c: 413: WAIT_N_SEC (2);
  2369  00314C  0E02               	movlw	2
  2370  00314E  ECD7  F01D         	call	_WAIT_N_SEC
  2371                           
  2372                           ;Lab9test.c: 414: Set_EWLT (1);
  2373  003152  0E01               	movlw	1
  2374  003154  EC11  F01D         	call	_Set_EWLT
  2375  003158  D000               	goto	l7534
  2376  00315A                     l7534:
  2377                           
  2378                           ;Lab9test.c: 415: }
  2379                           ;Lab9test.c: 417: Set_EW (2);
  2380  00315A  0E02               	movlw	2
  2381  00315C  EC35  F01D         	call	_Set_EW
  2382                           
  2383                           ;Lab9test.c: 418: WAIT_N_SEC (9);
  2384  003160  0E09               	movlw	9
  2385  003162  ECD7  F01D         	call	_WAIT_N_SEC
  2386                           
  2387                           ;Lab9test.c: 420: Set_EW (3);
  2388  003166  0E03               	movlw	3
  2389  003168  EC35  F01D         	call	_Set_EW
  2390                           
  2391                           ;Lab9test.c: 421: WAIT_N_SEC (2);
  2392  00316C  0E02               	movlw	2
  2393  00316E  ECD7  F01D         	call	_WAIT_N_SEC
  2394                           
  2395                           ;Lab9test.c: 423: Set_EW (1);
  2396  003172  0E01               	movlw	1
  2397  003174  EC35  F01D         	call	_Set_EW
  2398                           
  2399                           ;Lab9test.c: 425: if (PORTAbits.RA3 == 1)
  2400  003178  A680               	btfss	3968,3,c	;volatile
  2401  00317A  D011               	goto	l425
  2402                           
  2403                           ;Lab9test.c: 426: {
  2404                           ;Lab9test.c: 427: Set_NSLT (2);
  2405  00317C  0E02               	movlw	2
  2406  00317E  ECC9  F01C         	call	_Set_NSLT
  2407                           
  2408                           ;Lab9test.c: 428: WAIT_N_SEC (7);
  2409  003182  0E07               	movlw	7
  2410  003184  ECD7  F01D         	call	_WAIT_N_SEC
  2411                           
  2412                           ;Lab9test.c: 430: Set_NSLT (3);
  2413  003188  0E03               	movlw	3
  2414  00318A  ECC9  F01C         	call	_Set_NSLT
  2415                           
  2416                           ;Lab9test.c: 431: WAIT_N_SEC (2);
  2417  00318E  0E02               	movlw	2
  2418  003190  ECD7  F01D         	call	_WAIT_N_SEC
  2419                           
  2420                           ;Lab9test.c: 433: Set_NSLT (1);
  2421  003194  0E01               	movlw	1
  2422  003196  ECC9  F01C         	call	_Set_NSLT
  2423                           
  2424                           ;Lab9test.c: 434: }
  2425                           ;Lab9test.c: 435: break;
  2426  00319A  D001               	goto	l425
  2427  00319C  D7B4               	goto	l7508
  2428  00319E                     l425:
  2429  00319E  0012               	return		;funcret
  2430  0031A0                     __end_of_Night_Mode:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodl	equ	0xFF3
  2437                           intcon2	equ	0xFF1
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           postdec1	equ	0xFE5
  2441                           fsr1l	equ	0xFE1
  2442                           status	equ	0xFD8
  2443                           
  2444 ;; *************** function _Initialize_Screen *****************
  2445 ;; Defined at:
  2446 ;;		line 199 in file "Lab9test.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;		None
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;		None               void
  2453 ;; Registers used:
  2454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;Total ram usage:        0 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    9
  2467 ;; This function calls:
  2468 ;;		_LCD_Reset
  2469 ;;		_TFT_GreenTab_Initialize
  2470 ;;		_drawCircle
  2471 ;;		_drawRect
  2472 ;;		_drawtext
  2473 ;;		_fillCircle
  2474 ;;		_fillScreen
  2475 ;;		_strcpy
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text3
  2482  000AB8                     __ptext3:
  2483                           	opt stack 0
  2484  000AB8                     _Initialize_Screen:
  2485                           	opt stack 21
  2486                           
  2487                           ;Lab9test.c: 201: LCD_Reset();
  2488                           
  2489                           ;incstack = 0
  2490  000AB8  ECED  F01E         	call	_LCD_Reset	;wreg free
  2491                           
  2492                           ;Lab9test.c: 202: TFT_GreenTab_Initialize();
  2493  000ABC  EC21  F01E         	call	_TFT_GreenTab_Initialize	;wreg free
  2494                           
  2495                           ;Lab9test.c: 203: fillScreen(0x0000);
  2496  000AC0  0E00               	movlw	0
  2497  000AC2  6E23               	movwf	fillScreen@color+1,c
  2498  000AC4  0E00               	movlw	0
  2499  000AC6  6E22               	movwf	fillScreen@color,c
  2500  000AC8  ECA8  F01E         	call	_fillScreen	;wreg free
  2501                           
  2502                           ;Lab9test.c: 206: txt = buffer;
  2503  000ACC  0E95               	movlw	low _buffer
  2504  000ACE  6E64               	movwf	_txt,c
  2505  000AD0  0E00               	movlw	high _buffer
  2506  000AD2  6E65               	movwf	_txt+1,c
  2507                           
  2508                           ;Lab9test.c: 207: strcpy(txt, "ECE3301L Fall 22-S1");
  2509  000AD4  C064  F00F         	movff	_txt,strcpy@to
  2510  000AD8  C065  F010         	movff	_txt+1,strcpy@to+1
  2511  000ADC  0ECA               	movlw	low STR_1
  2512  000ADE  6E11               	movwf	strcpy@from,c
  2513  000AE0  0EFC               	movlw	high STR_1
  2514  000AE2  6E12               	movwf	strcpy@from+1,c
  2515  000AE4  ECF0  F01D         	call	_strcpy	;wreg free
  2516                           
  2517                           ;Lab9test.c: 208: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2518  000AE8  0E02               	movlw	2
  2519  000AEA  6E37               	movwf	drawtext@y,c
  2520  000AEC  C064  F038         	movff	_txt,drawtext@_text
  2521  000AF0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2522  000AF4  0EFF               	movlw	255
  2523  000AF6  6E3B               	movwf	drawtext@color+1,c
  2524  000AF8  683A               	setf	drawtext@color,c
  2525  000AFA  0E00               	movlw	0
  2526  000AFC  6E3D               	movwf	drawtext@bg+1,c
  2527  000AFE  0E00               	movlw	0
  2528  000B00  6E3C               	movwf	drawtext@bg,c
  2529  000B02  0E01               	movlw	1
  2530  000B04  6E3E               	movwf	drawtext@size,c
  2531  000B06  0E02               	movlw	2
  2532  000B08  EC87  F016         	call	_drawtext
  2533                           
  2534                           ;Lab9test.c: 211: strcpy(txt, "Mode:");
  2535  000B0C  C064  F00F         	movff	_txt,strcpy@to
  2536  000B10  C065  F010         	movff	_txt+1,strcpy@to+1
  2537  000B14  0E15               	movlw	low STR_2
  2538  000B16  6E11               	movwf	strcpy@from,c
  2539  000B18  0EFD               	movlw	high STR_2
  2540  000B1A  6E12               	movwf	strcpy@from+1,c
  2541  000B1C  ECF0  F01D         	call	_strcpy	;wreg free
  2542                           
  2543                           ;Lab9test.c: 212: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2544  000B20  0E0A               	movlw	10
  2545  000B22  6E37               	movwf	drawtext@y,c
  2546  000B24  C064  F038         	movff	_txt,drawtext@_text
  2547  000B28  C065  F039         	movff	_txt+1,drawtext@_text+1
  2548  000B2C  0EFF               	movlw	255
  2549  000B2E  6E3B               	movwf	drawtext@color+1,c
  2550  000B30  683A               	setf	drawtext@color,c
  2551  000B32  0E00               	movlw	0
  2552  000B34  6E3D               	movwf	drawtext@bg+1,c
  2553  000B36  0E00               	movlw	0
  2554  000B38  6E3C               	movwf	drawtext@bg,c
  2555  000B3A  0E01               	movlw	1
  2556  000B3C  6E3E               	movwf	drawtext@size,c
  2557  000B3E  0E02               	movlw	2
  2558  000B40  EC87  F016         	call	_drawtext
  2559                           
  2560                           ;Lab9test.c: 213: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2561  000B44  0E0A               	movlw	10
  2562  000B46  6E37               	movwf	drawtext@y,c
  2563  000B48  0ED1               	movlw	low _Act_Mode_Txt
  2564  000B4A  6E38               	movwf	drawtext@_text,c
  2565  000B4C  0E00               	movlw	high _Act_Mode_Txt
  2566  000B4E  6E39               	movwf	drawtext@_text+1,c
  2567  000B50  0EFF               	movlw	255
  2568  000B52  6E3B               	movwf	drawtext@color+1,c
  2569  000B54  683A               	setf	drawtext@color,c
  2570  000B56  0E00               	movlw	0
  2571  000B58  6E3D               	movwf	drawtext@bg+1,c
  2572  000B5A  0E00               	movlw	0
  2573  000B5C  6E3C               	movwf	drawtext@bg,c
  2574  000B5E  0E01               	movlw	1
  2575  000B60  6E3E               	movwf	drawtext@size,c
  2576  000B62  0E23               	movlw	35
  2577  000B64  EC87  F016         	call	_drawtext
  2578                           
  2579                           ;Lab9test.c: 216: strcpy(txt, "FR:");
  2580  000B68  C064  F00F         	movff	_txt,strcpy@to
  2581  000B6C  C065  F010         	movff	_txt+1,strcpy@to+1
  2582  000B70  0E1B               	movlw	low STR_3
  2583  000B72  6E11               	movwf	strcpy@from,c
  2584  000B74  0EFD               	movlw	high STR_3
  2585  000B76  6E12               	movwf	strcpy@from+1,c
  2586  000B78  ECF0  F01D         	call	_strcpy	;wreg free
  2587                           
  2588                           ;Lab9test.c: 217: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2589  000B7C  0E0A               	movlw	10
  2590  000B7E  6E37               	movwf	drawtext@y,c
  2591  000B80  C064  F038         	movff	_txt,drawtext@_text
  2592  000B84  C065  F039         	movff	_txt+1,drawtext@_text+1
  2593  000B88  0EFF               	movlw	255
  2594  000B8A  6E3B               	movwf	drawtext@color+1,c
  2595  000B8C  683A               	setf	drawtext@color,c
  2596  000B8E  0E00               	movlw	0
  2597  000B90  6E3D               	movwf	drawtext@bg+1,c
  2598  000B92  0E00               	movlw	0
  2599  000B94  6E3C               	movwf	drawtext@bg,c
  2600  000B96  0E01               	movlw	1
  2601  000B98  6E3E               	movwf	drawtext@size,c
  2602  000B9A  0E32               	movlw	50
  2603  000B9C  EC87  F016         	call	_drawtext
  2604                           
  2605                           ;Lab9test.c: 218: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2606  000BA0  0E0A               	movlw	10
  2607  000BA2  6E37               	movwf	drawtext@y,c
  2608  000BA4  0ED3               	movlw	low _FlashingR_Txt
  2609  000BA6  6E38               	movwf	drawtext@_text,c
  2610  000BA8  0E00               	movlw	high _FlashingR_Txt
  2611  000BAA  6E39               	movwf	drawtext@_text+1,c
  2612  000BAC  0EFF               	movlw	255
  2613  000BAE  6E3B               	movwf	drawtext@color+1,c
  2614  000BB0  683A               	setf	drawtext@color,c
  2615  000BB2  0E00               	movlw	0
  2616  000BB4  6E3D               	movwf	drawtext@bg+1,c
  2617  000BB6  0E00               	movlw	0
  2618  000BB8  6E3C               	movwf	drawtext@bg,c
  2619  000BBA  0E01               	movlw	1
  2620  000BBC  6E3E               	movwf	drawtext@size,c
  2621  000BBE  0E46               	movlw	70
  2622  000BC0  EC87  F016         	call	_drawtext
  2623                           
  2624                           ;Lab9test.c: 221: strcpy(txt, "FS:");
  2625  000BC4  C064  F00F         	movff	_txt,strcpy@to
  2626  000BC8  C065  F010         	movff	_txt+1,strcpy@to+1
  2627  000BCC  0E1F               	movlw	low STR_4
  2628  000BCE  6E11               	movwf	strcpy@from,c
  2629  000BD0  0EFD               	movlw	high STR_4
  2630  000BD2  6E12               	movwf	strcpy@from+1,c
  2631  000BD4  ECF0  F01D         	call	_strcpy	;wreg free
  2632                           
  2633                           ;Lab9test.c: 222: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2634  000BD8  0E0A               	movlw	10
  2635  000BDA  6E37               	movwf	drawtext@y,c
  2636  000BDC  C064  F038         	movff	_txt,drawtext@_text
  2637  000BE0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2638  000BE4  0EFF               	movlw	255
  2639  000BE6  6E3B               	movwf	drawtext@color+1,c
  2640  000BE8  683A               	setf	drawtext@color,c
  2641  000BEA  0E00               	movlw	0
  2642  000BEC  6E3D               	movwf	drawtext@bg+1,c
  2643  000BEE  0E00               	movlw	0
  2644  000BF0  6E3C               	movwf	drawtext@bg,c
  2645  000BF2  0E01               	movlw	1
  2646  000BF4  6E3E               	movwf	drawtext@size,c
  2647  000BF6  0E50               	movlw	80
  2648  000BF8  EC87  F016         	call	_drawtext
  2649                           
  2650                           ;Lab9test.c: 223: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2651  000BFC  0E0A               	movlw	10
  2652  000BFE  6E37               	movwf	drawtext@y,c
  2653  000C00  0ED5               	movlw	low _FlashingS_Txt
  2654  000C02  6E38               	movwf	drawtext@_text,c
  2655  000C04  0E00               	movlw	high _FlashingS_Txt
  2656  000C06  6E39               	movwf	drawtext@_text+1,c
  2657  000C08  0EFF               	movlw	255
  2658  000C0A  6E3B               	movwf	drawtext@color+1,c
  2659  000C0C  683A               	setf	drawtext@color,c
  2660  000C0E  0E00               	movlw	0
  2661  000C10  6E3D               	movwf	drawtext@bg+1,c
  2662  000C12  0E00               	movlw	0
  2663  000C14  6E3C               	movwf	drawtext@bg,c
  2664  000C16  0E01               	movlw	1
  2665  000C18  6E3E               	movwf	drawtext@size,c
  2666  000C1A  0E64               	movlw	100
  2667  000C1C  EC87  F016         	call	_drawtext
  2668                           
  2669                           ;Lab9test.c: 226: strcpy(txt, "*");
  2670  000C20  C064  F00F         	movff	_txt,strcpy@to
  2671  000C24  C065  F010         	movff	_txt+1,strcpy@to+1
  2672  000C28  0E2D               	movlw	low STR_5
  2673  000C2A  6E11               	movwf	strcpy@from,c
  2674  000C2C  0EFD               	movlw	high STR_5
  2675  000C2E  6E12               	movwf	strcpy@from+1,c
  2676  000C30  ECF0  F01D         	call	_strcpy	;wreg free
  2677                           
  2678                           ;Lab9test.c: 227: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2679  000C34  0E0A               	movlw	10
  2680  000C36  6E37               	movwf	drawtext@y,c
  2681  000C38  C064  F038         	movff	_txt,drawtext@_text
  2682  000C3C  C065  F039         	movff	_txt+1,drawtext@_text+1
  2683  000C40  0EFF               	movlw	255
  2684  000C42  6E3B               	movwf	drawtext@color+1,c
  2685  000C44  683A               	setf	drawtext@color,c
  2686  000C46  0E00               	movlw	0
  2687  000C48  6E3D               	movwf	drawtext@bg+1,c
  2688  000C4A  0E00               	movlw	0
  2689  000C4C  6E3C               	movwf	drawtext@bg,c
  2690  000C4E  0E01               	movlw	1
  2691  000C50  6E3E               	movwf	drawtext@size,c
  2692  000C52  0E78               	movlw	120
  2693  000C54  EC87  F016         	call	_drawtext
  2694                           
  2695                           ;Lab9test.c: 230: strcpy(txt, "EAST/WEST");
  2696  000C58  C064  F00F         	movff	_txt,strcpy@to
  2697  000C5C  C065  F010         	movff	_txt+1,strcpy@to+1
  2698  000C60  0EFD               	movlw	low STR_6
  2699  000C62  6E11               	movwf	strcpy@from,c
  2700  000C64  0EFC               	movlw	high STR_6
  2701  000C66  6E12               	movwf	strcpy@from+1,c
  2702  000C68  ECF0  F01D         	call	_strcpy	;wreg free
  2703                           
  2704                           ;Lab9test.c: 231: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2705  000C6C  0E14               	movlw	20
  2706  000C6E  6E37               	movwf	drawtext@y,c
  2707  000C70  C064  F038         	movff	_txt,drawtext@_text
  2708  000C74  C065  F039         	movff	_txt+1,drawtext@_text+1
  2709  000C78  0E07               	movlw	7
  2710  000C7A  6E3B               	movwf	drawtext@color+1,c
  2711  000C7C  683A               	setf	drawtext@color,c
  2712  000C7E  0E00               	movlw	0
  2713  000C80  6E3D               	movwf	drawtext@bg+1,c
  2714  000C82  0E00               	movlw	0
  2715  000C84  6E3C               	movwf	drawtext@bg,c
  2716  000C86  0E01               	movlw	1
  2717  000C88  6E3E               	movwf	drawtext@size,c
  2718  000C8A  0E1E               	movlw	30
  2719  000C8C  EC87  F016         	call	_drawtext
  2720                           
  2721                           ;Lab9test.c: 232: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2722  000C90  0E00               	movlw	0
  2723  000C92  6E22               	movwf	drawRect@x+1,c
  2724  000C94  0E1E               	movlw	30
  2725  000C96  6E21               	movwf	drawRect@x,c
  2726  000C98  0E00               	movlw	0
  2727  000C9A  6E24               	movwf	drawRect@y+1,c
  2728  000C9C  0E1B               	movlw	27
  2729  000C9E  6E23               	movwf	drawRect@y,c
  2730  000CA0  0E00               	movlw	0
  2731  000CA2  6E26               	movwf	drawRect@w+1,c
  2732  000CA4  0E3C               	movlw	60
  2733  000CA6  6E25               	movwf	drawRect@w,c
  2734  000CA8  0E00               	movlw	0
  2735  000CAA  6E28               	movwf	drawRect@h+1,c
  2736  000CAC  0E12               	movlw	18
  2737  000CAE  6E27               	movwf	drawRect@h,c
  2738  000CB0  0E07               	movlw	7
  2739  000CB2  6E2A               	movwf	drawRect@color+1,c
  2740  000CB4  6829               	setf	drawRect@color,c
  2741  000CB6  EC69  F01B         	call	_drawRect	;wreg free
  2742                           
  2743                           ;Lab9test.c: 233: fillCircle(40, 20 + 15, 7, 0xF800);
  2744  000CBA  0E00               	movlw	0
  2745  000CBC  6E3A               	movwf	fillCircle@x0+1,c
  2746  000CBE  0E28               	movlw	40
  2747  000CC0  6E39               	movwf	fillCircle@x0,c
  2748  000CC2  0E00               	movlw	0
  2749  000CC4  6E3C               	movwf	fillCircle@y0+1,c
  2750  000CC6  0E23               	movlw	35
  2751  000CC8  6E3B               	movwf	fillCircle@y0,c
  2752  000CCA  0E00               	movlw	0
  2753  000CCC  6E3E               	movwf	fillCircle@r+1,c
  2754  000CCE  0E07               	movlw	7
  2755  000CD0  6E3D               	movwf	fillCircle@r,c
  2756  000CD2  0EF8               	movlw	248
  2757  000CD4  6E40               	movwf	fillCircle@color+1,c
  2758  000CD6  0E00               	movlw	0
  2759  000CD8  6E3F               	movwf	fillCircle@color,c
  2760  000CDA  EC54  F01C         	call	_fillCircle	;wreg free
  2761                           
  2762                           ;Lab9test.c: 234: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2763  000CDE  0E00               	movlw	0
  2764  000CE0  6E1B               	movwf	drawCircle@x0+1,c
  2765  000CE2  0E3C               	movlw	60
  2766  000CE4  6E1A               	movwf	drawCircle@x0,c
  2767  000CE6  0E00               	movlw	0
  2768  000CE8  6E1D               	movwf	drawCircle@y0+1,c
  2769  000CEA  0E23               	movlw	35
  2770  000CEC  6E1C               	movwf	drawCircle@y0,c
  2771  000CEE  0E00               	movlw	0
  2772  000CF0  6E1F               	movwf	drawCircle@r+1,c
  2773  000CF2  0E07               	movlw	7
  2774  000CF4  6E1E               	movwf	drawCircle@r,c
  2775  000CF6  0EFF               	movlw	255
  2776  000CF8  6E21               	movwf	drawCircle@color+1,c
  2777  000CFA  0EE0               	movlw	224
  2778  000CFC  6E20               	movwf	drawCircle@color,c
  2779  000CFE  ECB2  F00F         	call	_drawCircle	;wreg free
  2780                           
  2781                           ;Lab9test.c: 235: drawCircle(80, 20 + 15, 7, 0x07E0);
  2782  000D02  0E00               	movlw	0
  2783  000D04  6E1B               	movwf	drawCircle@x0+1,c
  2784  000D06  0E50               	movlw	80
  2785  000D08  6E1A               	movwf	drawCircle@x0,c
  2786  000D0A  0E00               	movlw	0
  2787  000D0C  6E1D               	movwf	drawCircle@y0+1,c
  2788  000D0E  0E23               	movlw	35
  2789  000D10  6E1C               	movwf	drawCircle@y0,c
  2790  000D12  0E00               	movlw	0
  2791  000D14  6E1F               	movwf	drawCircle@r+1,c
  2792  000D16  0E07               	movlw	7
  2793  000D18  6E1E               	movwf	drawCircle@r,c
  2794  000D1A  0E07               	movlw	7
  2795  000D1C  6E21               	movwf	drawCircle@color+1,c
  2796  000D1E  0EE0               	movlw	224
  2797  000D20  6E20               	movwf	drawCircle@color,c
  2798  000D22  ECB2  F00F         	call	_drawCircle	;wreg free
  2799                           
  2800                           ;Lab9test.c: 236: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2801  000D26  0E1E               	movlw	30
  2802  000D28  6E37               	movwf	drawtext@y,c
  2803  000D2A  0EC2               	movlw	low _EW_Count
  2804  000D2C  6E38               	movwf	drawtext@_text,c
  2805  000D2E  0E00               	movlw	high _EW_Count
  2806  000D30  6E39               	movwf	drawtext@_text+1,c
  2807  000D32  0E07               	movlw	7
  2808  000D34  6E3B               	movwf	drawtext@color+1,c
  2809  000D36  683A               	setf	drawtext@color,c
  2810  000D38  0E00               	movlw	0
  2811  000D3A  6E3D               	movwf	drawtext@bg+1,c
  2812  000D3C  0E00               	movlw	0
  2813  000D3E  6E3C               	movwf	drawtext@bg,c
  2814  000D40  0E02               	movlw	2
  2815  000D42  6E3E               	movwf	drawtext@size,c
  2816  000D44  0E64               	movlw	100
  2817  000D46  EC87  F016         	call	_drawtext
  2818                           
  2819                           ;Lab9test.c: 239: strcpy(txt, "E/W LT");
  2820  000D4A  C064  F00F         	movff	_txt,strcpy@to
  2821  000D4E  C065  F010         	movff	_txt+1,strcpy@to+1
  2822  000D52  0E0E               	movlw	low STR_7
  2823  000D54  6E11               	movwf	strcpy@from,c
  2824  000D56  0EFD               	movlw	high STR_7
  2825  000D58  6E12               	movwf	strcpy@from+1,c
  2826  000D5A  ECF0  F01D         	call	_strcpy	;wreg free
  2827                           
  2828                           ;Lab9test.c: 240: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2829  000D5E  0E32               	movlw	50
  2830  000D60  6E37               	movwf	drawtext@y,c
  2831  000D62  C064  F038         	movff	_txt,drawtext@_text
  2832  000D66  C065  F039         	movff	_txt+1,drawtext@_text+1
  2833  000D6A  0EFF               	movlw	255
  2834  000D6C  6E3B               	movwf	drawtext@color+1,c
  2835  000D6E  683A               	setf	drawtext@color,c
  2836  000D70  0E00               	movlw	0
  2837  000D72  6E3D               	movwf	drawtext@bg+1,c
  2838  000D74  0E00               	movlw	0
  2839  000D76  6E3C               	movwf	drawtext@bg,c
  2840  000D78  0E01               	movlw	1
  2841  000D7A  6E3E               	movwf	drawtext@size,c
  2842  000D7C  0E1E               	movlw	30
  2843  000D7E  EC87  F016         	call	_drawtext
  2844                           
  2845                           ;Lab9test.c: 241: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2846  000D82  0E00               	movlw	0
  2847  000D84  6E22               	movwf	drawRect@x+1,c
  2848  000D86  0E1E               	movlw	30
  2849  000D88  6E21               	movwf	drawRect@x,c
  2850  000D8A  0E00               	movlw	0
  2851  000D8C  6E24               	movwf	drawRect@y+1,c
  2852  000D8E  0E39               	movlw	57
  2853  000D90  6E23               	movwf	drawRect@y,c
  2854  000D92  0E00               	movlw	0
  2855  000D94  6E26               	movwf	drawRect@w+1,c
  2856  000D96  0E3C               	movlw	60
  2857  000D98  6E25               	movwf	drawRect@w,c
  2858  000D9A  0E00               	movlw	0
  2859  000D9C  6E28               	movwf	drawRect@h+1,c
  2860  000D9E  0E12               	movlw	18
  2861  000DA0  6E27               	movwf	drawRect@h,c
  2862  000DA2  0EFF               	movlw	255
  2863  000DA4  6E2A               	movwf	drawRect@color+1,c
  2864  000DA6  6829               	setf	drawRect@color,c
  2865  000DA8  EC69  F01B         	call	_drawRect	;wreg free
  2866                           
  2867                           ;Lab9test.c: 242: fillCircle(40, 50 + 15, 7, 0xF800);
  2868  000DAC  0E00               	movlw	0
  2869  000DAE  6E3A               	movwf	fillCircle@x0+1,c
  2870  000DB0  0E28               	movlw	40
  2871  000DB2  6E39               	movwf	fillCircle@x0,c
  2872  000DB4  0E00               	movlw	0
  2873  000DB6  6E3C               	movwf	fillCircle@y0+1,c
  2874  000DB8  0E41               	movlw	65
  2875  000DBA  6E3B               	movwf	fillCircle@y0,c
  2876  000DBC  0E00               	movlw	0
  2877  000DBE  6E3E               	movwf	fillCircle@r+1,c
  2878  000DC0  0E07               	movlw	7
  2879  000DC2  6E3D               	movwf	fillCircle@r,c
  2880  000DC4  0EF8               	movlw	248
  2881  000DC6  6E40               	movwf	fillCircle@color+1,c
  2882  000DC8  0E00               	movlw	0
  2883  000DCA  6E3F               	movwf	fillCircle@color,c
  2884  000DCC  EC54  F01C         	call	_fillCircle	;wreg free
  2885                           
  2886                           ;Lab9test.c: 243: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2887  000DD0  0E00               	movlw	0
  2888  000DD2  6E1B               	movwf	drawCircle@x0+1,c
  2889  000DD4  0E3C               	movlw	60
  2890  000DD6  6E1A               	movwf	drawCircle@x0,c
  2891  000DD8  0E00               	movlw	0
  2892  000DDA  6E1D               	movwf	drawCircle@y0+1,c
  2893  000DDC  0E41               	movlw	65
  2894  000DDE  6E1C               	movwf	drawCircle@y0,c
  2895  000DE0  0E00               	movlw	0
  2896  000DE2  6E1F               	movwf	drawCircle@r+1,c
  2897  000DE4  0E07               	movlw	7
  2898  000DE6  6E1E               	movwf	drawCircle@r,c
  2899  000DE8  0EFF               	movlw	255
  2900  000DEA  6E21               	movwf	drawCircle@color+1,c
  2901  000DEC  0EE0               	movlw	224
  2902  000DEE  6E20               	movwf	drawCircle@color,c
  2903  000DF0  ECB2  F00F         	call	_drawCircle	;wreg free
  2904                           
  2905                           ;Lab9test.c: 244: drawCircle(80, 50 + 15, 7, 0x07E0);
  2906  000DF4  0E00               	movlw	0
  2907  000DF6  6E1B               	movwf	drawCircle@x0+1,c
  2908  000DF8  0E50               	movlw	80
  2909  000DFA  6E1A               	movwf	drawCircle@x0,c
  2910  000DFC  0E00               	movlw	0
  2911  000DFE  6E1D               	movwf	drawCircle@y0+1,c
  2912  000E00  0E41               	movlw	65
  2913  000E02  6E1C               	movwf	drawCircle@y0,c
  2914  000E04  0E00               	movlw	0
  2915  000E06  6E1F               	movwf	drawCircle@r+1,c
  2916  000E08  0E07               	movlw	7
  2917  000E0A  6E1E               	movwf	drawCircle@r,c
  2918  000E0C  0E07               	movlw	7
  2919  000E0E  6E21               	movwf	drawCircle@color+1,c
  2920  000E10  0EE0               	movlw	224
  2921  000E12  6E20               	movwf	drawCircle@color,c
  2922  000E14  ECB2  F00F         	call	_drawCircle	;wreg free
  2923                           
  2924                           ;Lab9test.c: 245: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2925  000E18  0E3C               	movlw	60
  2926  000E1A  6E37               	movwf	drawtext@y,c
  2927  000E1C  0EBF               	movlw	low _EWLT_Count
  2928  000E1E  6E38               	movwf	drawtext@_text,c
  2929  000E20  0E00               	movlw	high _EWLT_Count
  2930  000E22  6E39               	movwf	drawtext@_text+1,c
  2931  000E24  0EFF               	movlw	255
  2932  000E26  6E3B               	movwf	drawtext@color+1,c
  2933  000E28  683A               	setf	drawtext@color,c
  2934  000E2A  0E00               	movlw	0
  2935  000E2C  6E3D               	movwf	drawtext@bg+1,c
  2936  000E2E  0E00               	movlw	0
  2937  000E30  6E3C               	movwf	drawtext@bg,c
  2938  000E32  0E02               	movlw	2
  2939  000E34  6E3E               	movwf	drawtext@size,c
  2940  000E36  0E64               	movlw	100
  2941  000E38  EC87  F016         	call	_drawtext
  2942                           
  2943                           ;Lab9test.c: 248: strcpy(txt, "NORTH/SOUTH");
  2944  000E3C  C064  F00F         	movff	_txt,strcpy@to
  2945  000E40  C065  F010         	movff	_txt+1,strcpy@to+1
  2946  000E44  0EF1               	movlw	low STR_8
  2947  000E46  6E11               	movwf	strcpy@from,c
  2948  000E48  0EFC               	movlw	high STR_8
  2949  000E4A  6E12               	movwf	strcpy@from+1,c
  2950  000E4C  ECF0  F01D         	call	_strcpy	;wreg free
  2951                           
  2952                           ;Lab9test.c: 249: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2953  000E50  0E50               	movlw	80
  2954  000E52  6E37               	movwf	drawtext@y,c
  2955  000E54  C064  F038         	movff	_txt,drawtext@_text
  2956  000E58  C065  F039         	movff	_txt+1,drawtext@_text+1
  2957  000E5C  0E00               	movlw	0
  2958  000E5E  6E3B               	movwf	drawtext@color+1,c
  2959  000E60  0E1F               	movlw	31
  2960  000E62  6E3A               	movwf	drawtext@color,c
  2961  000E64  0E00               	movlw	0
  2962  000E66  6E3D               	movwf	drawtext@bg+1,c
  2963  000E68  0E00               	movlw	0
  2964  000E6A  6E3C               	movwf	drawtext@bg,c
  2965  000E6C  0E01               	movlw	1
  2966  000E6E  6E3E               	movwf	drawtext@size,c
  2967  000E70  0E1E               	movlw	30
  2968  000E72  EC87  F016         	call	_drawtext
  2969                           
  2970                           ;Lab9test.c: 250: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2971  000E76  0E00               	movlw	0
  2972  000E78  6E22               	movwf	drawRect@x+1,c
  2973  000E7A  0E1E               	movlw	30
  2974  000E7C  6E21               	movwf	drawRect@x,c
  2975  000E7E  0E00               	movlw	0
  2976  000E80  6E24               	movwf	drawRect@y+1,c
  2977  000E82  0E57               	movlw	87
  2978  000E84  6E23               	movwf	drawRect@y,c
  2979  000E86  0E00               	movlw	0
  2980  000E88  6E26               	movwf	drawRect@w+1,c
  2981  000E8A  0E3C               	movlw	60
  2982  000E8C  6E25               	movwf	drawRect@w,c
  2983  000E8E  0E00               	movlw	0
  2984  000E90  6E28               	movwf	drawRect@h+1,c
  2985  000E92  0E12               	movlw	18
  2986  000E94  6E27               	movwf	drawRect@h,c
  2987  000E96  0E00               	movlw	0
  2988  000E98  6E2A               	movwf	drawRect@color+1,c
  2989  000E9A  0E1F               	movlw	31
  2990  000E9C  6E29               	movwf	drawRect@color,c
  2991  000E9E  EC69  F01B         	call	_drawRect	;wreg free
  2992                           
  2993                           ;Lab9test.c: 251: drawCircle(40, 80 + 15 , 7, 0xF800);
  2994  000EA2  0E00               	movlw	0
  2995  000EA4  6E1B               	movwf	drawCircle@x0+1,c
  2996  000EA6  0E28               	movlw	40
  2997  000EA8  6E1A               	movwf	drawCircle@x0,c
  2998  000EAA  0E00               	movlw	0
  2999  000EAC  6E1D               	movwf	drawCircle@y0+1,c
  3000  000EAE  0E5F               	movlw	95
  3001  000EB0  6E1C               	movwf	drawCircle@y0,c
  3002  000EB2  0E00               	movlw	0
  3003  000EB4  6E1F               	movwf	drawCircle@r+1,c
  3004  000EB6  0E07               	movlw	7
  3005  000EB8  6E1E               	movwf	drawCircle@r,c
  3006  000EBA  0EF8               	movlw	248
  3007  000EBC  6E21               	movwf	drawCircle@color+1,c
  3008  000EBE  0E00               	movlw	0
  3009  000EC0  6E20               	movwf	drawCircle@color,c
  3010  000EC2  ECB2  F00F         	call	_drawCircle	;wreg free
  3011                           
  3012                           ;Lab9test.c: 252: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  3013  000EC6  0E00               	movlw	0
  3014  000EC8  6E1B               	movwf	drawCircle@x0+1,c
  3015  000ECA  0E3C               	movlw	60
  3016  000ECC  6E1A               	movwf	drawCircle@x0,c
  3017  000ECE  0E00               	movlw	0
  3018  000ED0  6E1D               	movwf	drawCircle@y0+1,c
  3019  000ED2  0E5F               	movlw	95
  3020  000ED4  6E1C               	movwf	drawCircle@y0,c
  3021  000ED6  0E00               	movlw	0
  3022  000ED8  6E1F               	movwf	drawCircle@r+1,c
  3023  000EDA  0E07               	movlw	7
  3024  000EDC  6E1E               	movwf	drawCircle@r,c
  3025  000EDE  0EFF               	movlw	255
  3026  000EE0  6E21               	movwf	drawCircle@color+1,c
  3027  000EE2  0EE0               	movlw	224
  3028  000EE4  6E20               	movwf	drawCircle@color,c
  3029  000EE6  ECB2  F00F         	call	_drawCircle	;wreg free
  3030                           
  3031                           ;Lab9test.c: 253: fillCircle(80, 80 + 15 , 7, 0x07E0);
  3032  000EEA  0E00               	movlw	0
  3033  000EEC  6E3A               	movwf	fillCircle@x0+1,c
  3034  000EEE  0E50               	movlw	80
  3035  000EF0  6E39               	movwf	fillCircle@x0,c
  3036  000EF2  0E00               	movlw	0
  3037  000EF4  6E3C               	movwf	fillCircle@y0+1,c
  3038  000EF6  0E5F               	movlw	95
  3039  000EF8  6E3B               	movwf	fillCircle@y0,c
  3040  000EFA  0E00               	movlw	0
  3041  000EFC  6E3E               	movwf	fillCircle@r+1,c
  3042  000EFE  0E07               	movlw	7
  3043  000F00  6E3D               	movwf	fillCircle@r,c
  3044  000F02  0E07               	movlw	7
  3045  000F04  6E40               	movwf	fillCircle@color+1,c
  3046  000F06  0EE0               	movlw	224
  3047  000F08  6E3F               	movwf	fillCircle@color,c
  3048  000F0A  EC54  F01C         	call	_fillCircle	;wreg free
  3049                           
  3050                           ;Lab9test.c: 254: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  3051  000F0E  0E5A               	movlw	90
  3052  000F10  6E37               	movwf	drawtext@y,c
  3053  000F12  0EC8               	movlw	low _NS_Count
  3054  000F14  6E38               	movwf	drawtext@_text,c
  3055  000F16  0E00               	movlw	high _NS_Count
  3056  000F18  6E39               	movwf	drawtext@_text+1,c
  3057  000F1A  0E00               	movlw	0
  3058  000F1C  6E3B               	movwf	drawtext@color+1,c
  3059  000F1E  0E1F               	movlw	31
  3060  000F20  6E3A               	movwf	drawtext@color,c
  3061  000F22  0E00               	movlw	0
  3062  000F24  6E3D               	movwf	drawtext@bg+1,c
  3063  000F26  0E00               	movlw	0
  3064  000F28  6E3C               	movwf	drawtext@bg,c
  3065  000F2A  0E02               	movlw	2
  3066  000F2C  6E3E               	movwf	drawtext@size,c
  3067  000F2E  0E64               	movlw	100
  3068  000F30  EC87  F016         	call	_drawtext
  3069                           
  3070                           ;Lab9test.c: 257: strcpy(txt, "N/S LT");
  3071  000F34  C064  F00F         	movff	_txt,strcpy@to
  3072  000F38  C065  F010         	movff	_txt+1,strcpy@to+1
  3073  000F3C  0E07               	movlw	low STR_9
  3074  000F3E  6E11               	movwf	strcpy@from,c
  3075  000F40  0EFD               	movlw	high STR_9
  3076  000F42  6E12               	movwf	strcpy@from+1,c
  3077  000F44  ECF0  F01D         	call	_strcpy	;wreg free
  3078                           
  3079                           ;Lab9test.c: 258: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  3080  000F48  0E6E               	movlw	110
  3081  000F4A  6E37               	movwf	drawtext@y,c
  3082  000F4C  C064  F038         	movff	_txt,drawtext@_text
  3083  000F50  C065  F039         	movff	_txt+1,drawtext@_text+1
  3084  000F54  0EF8               	movlw	248
  3085  000F56  6E3B               	movwf	drawtext@color+1,c
  3086  000F58  0E1F               	movlw	31
  3087  000F5A  6E3A               	movwf	drawtext@color,c
  3088  000F5C  0E00               	movlw	0
  3089  000F5E  6E3D               	movwf	drawtext@bg+1,c
  3090  000F60  0E00               	movlw	0
  3091  000F62  6E3C               	movwf	drawtext@bg,c
  3092  000F64  0E01               	movlw	1
  3093  000F66  6E3E               	movwf	drawtext@size,c
  3094  000F68  0E1E               	movlw	30
  3095  000F6A  EC87  F016         	call	_drawtext
  3096                           
  3097                           ;Lab9test.c: 259: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  3098  000F6E  0E00               	movlw	0
  3099  000F70  6E22               	movwf	drawRect@x+1,c
  3100  000F72  0E1E               	movlw	30
  3101  000F74  6E21               	movwf	drawRect@x,c
  3102  000F76  0E00               	movlw	0
  3103  000F78  6E24               	movwf	drawRect@y+1,c
  3104  000F7A  0E75               	movlw	117
  3105  000F7C  6E23               	movwf	drawRect@y,c
  3106  000F7E  0E00               	movlw	0
  3107  000F80  6E26               	movwf	drawRect@w+1,c
  3108  000F82  0E3C               	movlw	60
  3109  000F84  6E25               	movwf	drawRect@w,c
  3110  000F86  0E00               	movlw	0
  3111  000F88  6E28               	movwf	drawRect@h+1,c
  3112  000F8A  0E12               	movlw	18
  3113  000F8C  6E27               	movwf	drawRect@h,c
  3114  000F8E  0EF8               	movlw	248
  3115  000F90  6E2A               	movwf	drawRect@color+1,c
  3116  000F92  0E1F               	movlw	31
  3117  000F94  6E29               	movwf	drawRect@color,c
  3118  000F96  EC69  F01B         	call	_drawRect	;wreg free
  3119                           
  3120                           ;Lab9test.c: 260: fillCircle(40, 110 + 15, 7, 0xF800);
  3121  000F9A  0E00               	movlw	0
  3122  000F9C  6E3A               	movwf	fillCircle@x0+1,c
  3123  000F9E  0E28               	movlw	40
  3124  000FA0  6E39               	movwf	fillCircle@x0,c
  3125  000FA2  0E00               	movlw	0
  3126  000FA4  6E3C               	movwf	fillCircle@y0+1,c
  3127  000FA6  0E7D               	movlw	125
  3128  000FA8  6E3B               	movwf	fillCircle@y0,c
  3129  000FAA  0E00               	movlw	0
  3130  000FAC  6E3E               	movwf	fillCircle@r+1,c
  3131  000FAE  0E07               	movlw	7
  3132  000FB0  6E3D               	movwf	fillCircle@r,c
  3133  000FB2  0EF8               	movlw	248
  3134  000FB4  6E40               	movwf	fillCircle@color+1,c
  3135  000FB6  0E00               	movlw	0
  3136  000FB8  6E3F               	movwf	fillCircle@color,c
  3137  000FBA  EC54  F01C         	call	_fillCircle	;wreg free
  3138                           
  3139                           ;Lab9test.c: 261: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3140  000FBE  0E00               	movlw	0
  3141  000FC0  6E1B               	movwf	drawCircle@x0+1,c
  3142  000FC2  0E3C               	movlw	60
  3143  000FC4  6E1A               	movwf	drawCircle@x0,c
  3144  000FC6  0E00               	movlw	0
  3145  000FC8  6E1D               	movwf	drawCircle@y0+1,c
  3146  000FCA  0E7D               	movlw	125
  3147  000FCC  6E1C               	movwf	drawCircle@y0,c
  3148  000FCE  0E00               	movlw	0
  3149  000FD0  6E1F               	movwf	drawCircle@r+1,c
  3150  000FD2  0E07               	movlw	7
  3151  000FD4  6E1E               	movwf	drawCircle@r,c
  3152  000FD6  0EFF               	movlw	255
  3153  000FD8  6E21               	movwf	drawCircle@color+1,c
  3154  000FDA  0EE0               	movlw	224
  3155  000FDC  6E20               	movwf	drawCircle@color,c
  3156  000FDE  ECB2  F00F         	call	_drawCircle	;wreg free
  3157                           
  3158                           ;Lab9test.c: 262: drawCircle(80, 110 + 15, 7, 0x07E0);
  3159  000FE2  0E00               	movlw	0
  3160  000FE4  6E1B               	movwf	drawCircle@x0+1,c
  3161  000FE6  0E50               	movlw	80
  3162  000FE8  6E1A               	movwf	drawCircle@x0,c
  3163  000FEA  0E00               	movlw	0
  3164  000FEC  6E1D               	movwf	drawCircle@y0+1,c
  3165  000FEE  0E7D               	movlw	125
  3166  000FF0  6E1C               	movwf	drawCircle@y0,c
  3167  000FF2  0E00               	movlw	0
  3168  000FF4  6E1F               	movwf	drawCircle@r+1,c
  3169  000FF6  0E07               	movlw	7
  3170  000FF8  6E1E               	movwf	drawCircle@r,c
  3171  000FFA  0E07               	movlw	7
  3172  000FFC  6E21               	movwf	drawCircle@color+1,c
  3173  000FFE  0EE0               	movlw	224
  3174  001000  6E20               	movwf	drawCircle@color,c
  3175  001002  ECB2  F00F         	call	_drawCircle	;wreg free
  3176                           
  3177                           ;Lab9test.c: 263: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3178  001006  0E78               	movlw	120
  3179  001008  6E37               	movwf	drawtext@y,c
  3180  00100A  0EC5               	movlw	low _NSLT_Count
  3181  00100C  6E38               	movwf	drawtext@_text,c
  3182  00100E  0E00               	movlw	high _NSLT_Count
  3183  001010  6E39               	movwf	drawtext@_text+1,c
  3184  001012  0EF8               	movlw	248
  3185  001014  6E3B               	movwf	drawtext@color+1,c
  3186  001016  0E1F               	movlw	31
  3187  001018  6E3A               	movwf	drawtext@color,c
  3188  00101A  0E00               	movlw	0
  3189  00101C  6E3D               	movwf	drawtext@bg+1,c
  3190  00101E  0E00               	movlw	0
  3191  001020  6E3C               	movwf	drawtext@bg,c
  3192  001022  0E02               	movlw	2
  3193  001024  6E3E               	movwf	drawtext@size,c
  3194  001026  0E64               	movlw	100
  3195  001028  EC87  F016         	call	_drawtext
  3196                           
  3197                           ;Lab9test.c: 267: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  3198  00102C  0E1E               	movlw	30
  3199  00102E  6E37               	movwf	drawtext@y,c
  3200  001030  0ECB               	movlw	low _PED_EW_Count
  3201  001032  6E38               	movwf	drawtext@_text,c
  3202  001034  0E00               	movlw	high _PED_EW_Count
  3203  001036  6E39               	movwf	drawtext@_text+1,c
  3204  001038  0E07               	movlw	7
  3205  00103A  6E3B               	movwf	drawtext@color+1,c
  3206  00103C  683A               	setf	drawtext@color,c
  3207  00103E  0E00               	movlw	0
  3208  001040  6E3D               	movwf	drawtext@bg+1,c
  3209  001042  0E00               	movlw	0
  3210  001044  6E3C               	movwf	drawtext@bg,c
  3211  001046  0E02               	movlw	2
  3212  001048  6E3E               	movwf	drawtext@size,c
  3213  00104A  0E02               	movlw	2
  3214  00104C  EC87  F016         	call	_drawtext
  3215                           
  3216                           ;Lab9test.c: 268: strcpy(txt, "PEW");
  3217  001050  C064  F00F         	movff	_txt,strcpy@to
  3218  001054  C065  F010         	movff	_txt+1,strcpy@to+1
  3219  001058  0E27               	movlw	low STR_10
  3220  00105A  6E11               	movwf	strcpy@from,c
  3221  00105C  0EFD               	movlw	high STR_10
  3222  00105E  6E12               	movwf	strcpy@from+1,c
  3223  001060  ECF0  F01D         	call	_strcpy	;wreg free
  3224                           
  3225                           ;Lab9test.c: 269: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  3226  001064  0E14               	movlw	20
  3227  001066  6E37               	movwf	drawtext@y,c
  3228  001068  C064  F038         	movff	_txt,drawtext@_text
  3229  00106C  C065  F039         	movff	_txt+1,drawtext@_text+1
  3230  001070  0E07               	movlw	7
  3231  001072  6E3B               	movwf	drawtext@color+1,c
  3232  001074  683A               	setf	drawtext@color,c
  3233  001076  0E00               	movlw	0
  3234  001078  6E3D               	movwf	drawtext@bg+1,c
  3235  00107A  0E00               	movlw	0
  3236  00107C  6E3C               	movwf	drawtext@bg,c
  3237  00107E  0E01               	movlw	1
  3238  001080  6E3E               	movwf	drawtext@size,c
  3239  001082  0E03               	movlw	3
  3240  001084  EC87  F016         	call	_drawtext
  3241                           
  3242                           ;Lab9test.c: 272: strcpy(txt, "PNS");
  3243  001088  C064  F00F         	movff	_txt,strcpy@to
  3244  00108C  C065  F010         	movff	_txt+1,strcpy@to+1
  3245  001090  0E23               	movlw	low STR_11
  3246  001092  6E11               	movwf	strcpy@from,c
  3247  001094  0EFD               	movlw	high STR_11
  3248  001096  6E12               	movwf	strcpy@from+1,c
  3249  001098  ECF0  F01D         	call	_strcpy	;wreg free
  3250                           
  3251                           ;Lab9test.c: 273: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3252  00109C  0E50               	movlw	80
  3253  00109E  6E37               	movwf	drawtext@y,c
  3254  0010A0  C064  F038         	movff	_txt,drawtext@_text
  3255  0010A4  C065  F039         	movff	_txt+1,drawtext@_text+1
  3256  0010A8  0E00               	movlw	0
  3257  0010AA  6E3B               	movwf	drawtext@color+1,c
  3258  0010AC  0E1F               	movlw	31
  3259  0010AE  6E3A               	movwf	drawtext@color,c
  3260  0010B0  0E00               	movlw	0
  3261  0010B2  6E3D               	movwf	drawtext@bg+1,c
  3262  0010B4  0E00               	movlw	0
  3263  0010B6  6E3C               	movwf	drawtext@bg,c
  3264  0010B8  0E01               	movlw	1
  3265  0010BA  6E3E               	movwf	drawtext@size,c
  3266  0010BC  0E03               	movlw	3
  3267  0010BE  EC87  F016         	call	_drawtext
  3268                           
  3269                           ;Lab9test.c: 274: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3270  0010C2  0E5A               	movlw	90
  3271  0010C4  6E37               	movwf	drawtext@y,c
  3272  0010C6  0ECE               	movlw	low _PED_NS_Count
  3273  0010C8  6E38               	movwf	drawtext@_text,c
  3274  0010CA  0E00               	movlw	high _PED_NS_Count
  3275  0010CC  6E39               	movwf	drawtext@_text+1,c
  3276  0010CE  0E00               	movlw	0
  3277  0010D0  6E3B               	movwf	drawtext@color+1,c
  3278  0010D2  0E1F               	movlw	31
  3279  0010D4  6E3A               	movwf	drawtext@color,c
  3280  0010D6  0E00               	movlw	0
  3281  0010D8  6E3D               	movwf	drawtext@bg+1,c
  3282  0010DA  0E00               	movlw	0
  3283  0010DC  6E3C               	movwf	drawtext@bg,c
  3284  0010DE  0E02               	movlw	2
  3285  0010E0  6E3E               	movwf	drawtext@size,c
  3286  0010E2  0E02               	movlw	2
  3287  0010E4  EC87  F016         	call	_drawtext
  3288                           
  3289                           ;Lab9test.c: 277: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3290  0010E8  C064  F00F         	movff	_txt,strcpy@to
  3291  0010EC  C065  F010         	movff	_txt+1,strcpy@to+1
  3292  0010F0  0EB5               	movlw	low STR_12
  3293  0010F2  6E11               	movwf	strcpy@from,c
  3294  0010F4  0EFC               	movlw	high STR_12
  3295  0010F6  6E12               	movwf	strcpy@from+1,c
  3296  0010F8  ECF0  F01D         	call	_strcpy	;wreg free
  3297                           
  3298                           ;Lab9test.c: 278: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3299  0010FC  0E8C               	movlw	140
  3300  0010FE  6E37               	movwf	drawtext@y,c
  3301  001100  C064  F038         	movff	_txt,drawtext@_text
  3302  001104  C065  F039         	movff	_txt+1,drawtext@_text+1
  3303  001108  0EFF               	movlw	255
  3304  00110A  6E3B               	movwf	drawtext@color+1,c
  3305  00110C  683A               	setf	drawtext@color,c
  3306  00110E  0E00               	movlw	0
  3307  001110  6E3D               	movwf	drawtext@bg+1,c
  3308  001112  0E00               	movlw	0
  3309  001114  6E3C               	movwf	drawtext@bg,c
  3310  001116  0E01               	movlw	1
  3311  001118  6E3E               	movwf	drawtext@size,c
  3312  00111A  0E01               	movlw	1
  3313  00111C  EC87  F016         	call	_drawtext
  3314                           
  3315                           ;Lab9test.c: 279: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3316  001120  0E95               	movlw	149
  3317  001122  6E37               	movwf	drawtext@y,c
  3318  001124  0E6F               	movlw	low _SW_EWPED_Txt
  3319  001126  6E38               	movwf	drawtext@_text,c
  3320  001128  0E00               	movlw	high _SW_EWPED_Txt
  3321  00112A  6E39               	movwf	drawtext@_text+1,c
  3322  00112C  0EFF               	movlw	255
  3323  00112E  6E3B               	movwf	drawtext@color+1,c
  3324  001130  683A               	setf	drawtext@color,c
  3325  001132  0E00               	movlw	0
  3326  001134  6E3D               	movwf	drawtext@bg+1,c
  3327  001136  0E00               	movlw	0
  3328  001138  6E3C               	movwf	drawtext@bg,c
  3329  00113A  0E01               	movlw	1
  3330  00113C  6E3E               	movwf	drawtext@size,c
  3331  00113E  0E06               	movlw	6
  3332  001140  EC87  F016         	call	_drawtext
  3333                           
  3334                           ;Lab9test.c: 280: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3335  001144  0E95               	movlw	149
  3336  001146  6E37               	movwf	drawtext@y,c
  3337  001148  0E6D               	movlw	low _SW_EWLT_Txt
  3338  00114A  6E38               	movwf	drawtext@_text,c
  3339  00114C  0E00               	movlw	high _SW_EWLT_Txt
  3340  00114E  6E39               	movwf	drawtext@_text+1,c
  3341  001150  0EFF               	movlw	255
  3342  001152  6E3B               	movwf	drawtext@color+1,c
  3343  001154  683A               	setf	drawtext@color,c
  3344  001156  0E00               	movlw	0
  3345  001158  6E3D               	movwf	drawtext@bg+1,c
  3346  00115A  0E00               	movlw	0
  3347  00115C  6E3C               	movwf	drawtext@bg,c
  3348  00115E  0E01               	movlw	1
  3349  001160  6E3E               	movwf	drawtext@size,c
  3350  001162  0E20               	movlw	32
  3351  001164  EC87  F016         	call	_drawtext
  3352                           
  3353                           ;Lab9test.c: 281: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3354  001168  0E95               	movlw	149
  3355  00116A  6E37               	movwf	drawtext@y,c
  3356  00116C  0EDB               	movlw	low _SW_NSPED_Txt
  3357  00116E  6E38               	movwf	drawtext@_text,c
  3358  001170  0E00               	movlw	high _SW_NSPED_Txt
  3359  001172  6E39               	movwf	drawtext@_text+1,c
  3360  001174  0EFF               	movlw	255
  3361  001176  6E3B               	movwf	drawtext@color+1,c
  3362  001178  683A               	setf	drawtext@color,c
  3363  00117A  0E00               	movlw	0
  3364  00117C  6E3D               	movwf	drawtext@bg+1,c
  3365  00117E  0E00               	movlw	0
  3366  001180  6E3C               	movwf	drawtext@bg,c
  3367  001182  0E01               	movlw	1
  3368  001184  6E3E               	movwf	drawtext@size,c
  3369  001186  0E3A               	movlw	58
  3370  001188  EC87  F016         	call	_drawtext
  3371                           
  3372                           ;Lab9test.c: 282: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3373  00118C  0E95               	movlw	149
  3374  00118E  6E37               	movwf	drawtext@y,c
  3375  001190  0ED9               	movlw	low _SW_NSLT_Txt
  3376  001192  6E38               	movwf	drawtext@_text,c
  3377  001194  0E00               	movlw	high _SW_NSLT_Txt
  3378  001196  6E39               	movwf	drawtext@_text+1,c
  3379  001198  0EFF               	movlw	255
  3380  00119A  6E3B               	movwf	drawtext@color+1,c
  3381  00119C  683A               	setf	drawtext@color,c
  3382  00119E  0E00               	movlw	0
  3383  0011A0  6E3D               	movwf	drawtext@bg+1,c
  3384  0011A2  0E00               	movlw	0
  3385  0011A4  6E3C               	movwf	drawtext@bg,c
  3386  0011A6  0E01               	movlw	1
  3387  0011A8  6E3E               	movwf	drawtext@size,c
  3388  0011AA  0E57               	movlw	87
  3389  0011AC  EC87  F016         	call	_drawtext
  3390                           
  3391                           ;Lab9test.c: 284: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3392  0011B0  0E95               	movlw	149
  3393  0011B2  6E37               	movwf	drawtext@y,c
  3394  0011B4  0ED7               	movlw	low _SW_MODE_Txt
  3395  0011B6  6E38               	movwf	drawtext@_text,c
  3396  0011B8  0E00               	movlw	high _SW_MODE_Txt
  3397  0011BA  6E39               	movwf	drawtext@_text+1,c
  3398  0011BC  0EFF               	movlw	255
  3399  0011BE  6E3B               	movwf	drawtext@color+1,c
  3400  0011C0  683A               	setf	drawtext@color,c
  3401  0011C2  0E00               	movlw	0
  3402  0011C4  6E3D               	movwf	drawtext@bg+1,c
  3403  0011C6  0E00               	movlw	0
  3404  0011C8  6E3C               	movwf	drawtext@bg,c
  3405  0011CA  0E01               	movlw	1
  3406  0011CC  6E3E               	movwf	drawtext@size,c
  3407  0011CE  0E70               	movlw	112
  3408  0011D0  EC87  F016         	call	_drawtext
  3409  0011D4  0012               	return		;funcret
  3410  0011D6                     __end_of_Initialize_Screen:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodl	equ	0xFF3
  3417                           intcon2	equ	0xFF1
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           postdec1	equ	0xFE5
  3421                           fsr1l	equ	0xFE1
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _fillScreen *****************
  3425 ;; Defined at:
  3426 ;;		line 652 in file "ST7735_TFT.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  color           2   33[COMRAM] unsigned int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;		None               void
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3440 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;Total ram usage:        2 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    6
  3447 ;; This function calls:
  3448 ;;		_fillRectangle
  3449 ;; This function is called by:
  3450 ;;		_Initialize_Screen
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text4
  3455  003D50                     __ptext4:
  3456                           	opt stack 0
  3457  003D50                     _fillScreen:
  3458                           	opt stack 23
  3459                           
  3460                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3461                           
  3462                           ;incstack = 0
  3463  003D50  0E00               	movlw	0
  3464  003D52  6E16               	movwf	fillRectangle@y,c
  3465  003D54  0E80               	movlw	128
  3466  003D56  6E17               	movwf	fillRectangle@w,c
  3467  003D58  0EA0               	movlw	160
  3468  003D5A  6E18               	movwf	fillRectangle@h,c
  3469  003D5C  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3470  003D60  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3471  003D64  0E00               	movlw	0
  3472  003D66  ECF6  F016         	call	_fillRectangle
  3473  003D6A  0012               	return		;funcret
  3474  003D6C                     __end_of_fillScreen:
  3475                           	opt stack 0
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           prodl	equ	0xFF3
  3481                           intcon2	equ	0xFF1
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _fillRectangle *****************
  3489 ;; Defined at:
  3490 ;;		line 536 in file "ST7735_TFT.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  x               1    wreg     unsigned char 
  3493 ;;  y               1   21[COMRAM] unsigned char 
  3494 ;;  w               1   22[COMRAM] unsigned char 
  3495 ;;  h               1   23[COMRAM] unsigned char 
  3496 ;;  color           2   24[COMRAM] unsigned int 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  x               1   32[COMRAM] unsigned char 
  3499 ;;  lo              1   31[COMRAM] unsigned char 
  3500 ;;  hi              1   30[COMRAM] unsigned char 
  3501 ;; Return value:  Size  Location     Type
  3502 ;;		None               void
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3510 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;Total ram usage:       12 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    5
  3517 ;; This function calls:
  3518 ;;		_setAddrWindow
  3519 ;;		_spiwrite
  3520 ;; This function is called by:
  3521 ;;		_fillScreen
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text5
  3526  002DEC                     __ptext5:
  3527                           	opt stack 0
  3528  002DEC                     _fillRectangle:
  3529                           	opt stack 23
  3530                           
  3531                           ;incstack = 0
  3532                           ;fillRectangle@x stored from wreg
  3533  002DEC  6E21               	movwf	fillRectangle@x,c
  3534                           
  3535                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3536                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3537  002DEE  0E80               	movlw	128
  3538  002DF0  6021               	cpfslt	fillRectangle@x,c
  3539  002DF2  D069               	goto	l262
  3540  002DF4  0E9F               	movlw	159
  3541  002DF6  6416               	cpfsgt	fillRectangle@y,c
  3542  002DF8  D001               	goto	l7104
  3543                           
  3544                           ;ST7735_TFT.c: 540: return;
  3545  002DFA  D065               	goto	l262
  3546  002DFC                     l7104:
  3547                           
  3548                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3549  002DFC  0EFF               	movlw	255
  3550  002DFE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3551  002E00  0EFF               	movlw	255
  3552  002E02  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3553  002E04  5017               	movf	fillRectangle@w,w,c
  3554  002E06  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3555  002E0A  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3556  002E0C  261D               	addwf	??_fillRectangle+2,f,c
  3557  002E0E  0E00               	movlw	0
  3558  002E10  221E               	addwfc	??_fillRectangle+3,f,c
  3559  002E12  501B               	movf	??_fillRectangle,w,c
  3560  002E14  261D               	addwf	??_fillRectangle+2,f,c
  3561  002E16  501C               	movf	??_fillRectangle+1,w,c
  3562  002E18  221E               	addwfc	??_fillRectangle+3,f,c
  3563  002E1A  BE1E               	btfsc	??_fillRectangle+3,7,c
  3564  002E1C  D00A               	goto	l263
  3565  002E1E  501E               	movf	??_fillRectangle+3,w,c
  3566  002E20  E104               	bnz	u7200
  3567  002E22  0E80               	movlw	128
  3568  002E24  5C1D               	subwf	??_fillRectangle+2,w,c
  3569  002E26  A0D8               	btfss	status,0,c
  3570  002E28  D004               	goto	l263
  3571  002E2A                     u7200:
  3572                           
  3573                           ;ST7735_TFT.c: 542: w = 128 - x;
  3574  002E2A  5021               	movf	fillRectangle@x,w,c
  3575  002E2C  0800               	sublw	0
  3576  002E2E  0F80               	addlw	128
  3577  002E30  6E17               	movwf	fillRectangle@w,c
  3578  002E32                     l263:
  3579                           
  3580                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3581  002E32  0EFF               	movlw	255
  3582  002E34  6E1B               	movwf	??_fillRectangle& (0+255),c
  3583  002E36  0EFF               	movlw	255
  3584  002E38  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3585  002E3A  5018               	movf	fillRectangle@h,w,c
  3586  002E3C  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3587  002E40  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3588  002E42  261D               	addwf	??_fillRectangle+2,f,c
  3589  002E44  0E00               	movlw	0
  3590  002E46  221E               	addwfc	??_fillRectangle+3,f,c
  3591  002E48  501B               	movf	??_fillRectangle,w,c
  3592  002E4A  261D               	addwf	??_fillRectangle+2,f,c
  3593  002E4C  501C               	movf	??_fillRectangle+1,w,c
  3594  002E4E  221E               	addwfc	??_fillRectangle+3,f,c
  3595  002E50  BE1E               	btfsc	??_fillRectangle+3,7,c
  3596  002E52  D00B               	goto	l7110
  3597  002E54  501E               	movf	??_fillRectangle+3,w,c
  3598  002E56  E104               	bnz	u7210
  3599  002E58  0EA0               	movlw	160
  3600  002E5A  5C1D               	subwf	??_fillRectangle+2,w,c
  3601  002E5C  A0D8               	btfss	status,0,c
  3602  002E5E  D005               	goto	l7110
  3603  002E60                     u7210:
  3604                           
  3605                           ;ST7735_TFT.c: 544: h = 160 - y;
  3606  002E60  5016               	movf	fillRectangle@y,w,c
  3607  002E62  0800               	sublw	0
  3608  002E64  0FA0               	addlw	160
  3609  002E66  6E18               	movwf	fillRectangle@h,c
  3610  002E68  D000               	goto	l7110
  3611  002E6A                     l7110:
  3612                           
  3613                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3614  002E6A  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3615  002E6E  5021               	movf	fillRectangle@x,w,c
  3616  002E70  2417               	addwf	fillRectangle@w,w,c
  3617  002E72  6E1B               	movwf	??_fillRectangle& (0+255),c
  3618  002E74  041B               	decf	??_fillRectangle,w,c
  3619  002E76  6E13               	movwf	setAddrWindow@x1,c
  3620  002E78  5016               	movf	fillRectangle@y,w,c
  3621  002E7A  2418               	addwf	fillRectangle@h,w,c
  3622  002E7C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3623  002E7E  041C               	decf	??_fillRectangle+1,w,c
  3624  002E80  6E14               	movwf	setAddrWindow@y1,c
  3625  002E82  5021               	movf	fillRectangle@x,w,c
  3626  002E84  EC7D  F01C         	call	_setAddrWindow
  3627                           
  3628                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3629  002E88  501A               	movf	fillRectangle@color+1,w,c
  3630  002E8A  6E1F               	movwf	fillRectangle@hi,c
  3631  002E8C  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3632                           
  3633                           ;ST7735_TFT.c: 547: PORTCbits.RC2 = 1;
  3634  002E90  8482               	bsf	3970,2,c	;volatile
  3635                           
  3636                           ;ST7735_TFT.c: 548: PORTCbits.RC4 = 0;
  3637  002E92  9882               	bcf	3970,4,c	;volatile
  3638                           
  3639                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3640  002E94  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3641  002E98                     l7122:
  3642  002E98  5016               	movf	fillRectangle@y,w,c
  3643  002E9A  B4D8               	btfsc	status,2,c
  3644  002E9C  D013               	goto	l266
  3645  002E9E  D001               	goto	l265
  3646  002EA0  D011               	goto	l266
  3647  002EA2                     l265:
  3648                           
  3649                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3650  002EA2  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3651  002EA6                     l7126:
  3652  002EA6  5021               	movf	fillRectangle@x,w,c
  3653  002EA8  B4D8               	btfsc	status,2,c
  3654  002EAA  D00A               	goto	l7136
  3655  002EAC  D001               	goto	l7130
  3656  002EAE  D008               	goto	l7136
  3657  002EB0                     l7130:
  3658                           
  3659                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3660  002EB0  501F               	movf	fillRectangle@hi,w,c
  3661  002EB2  ECE3  F01E         	call	_spiwrite
  3662                           
  3663                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3664  002EB6  5020               	movf	fillRectangle@lo,w,c
  3665  002EB8  ECE3  F01E         	call	_spiwrite
  3666  002EBC  0621               	decf	fillRectangle@x,f,c
  3667  002EBE  D7F3               	goto	l7126
  3668  002EC0                     l7136:
  3669  002EC0  0616               	decf	fillRectangle@y,f,c
  3670  002EC2  D7EA               	goto	l7122
  3671  002EC4                     l266:
  3672                           
  3673                           ;ST7735_TFT.c: 554: }
  3674                           ;ST7735_TFT.c: 555: }
  3675                           ;ST7735_TFT.c: 556: PORTCbits.RC4 = 1;
  3676  002EC4  8882               	bsf	3970,4,c	;volatile
  3677  002EC6                     l262:
  3678  002EC6  0012               	return		;funcret
  3679  002EC8                     __end_of_fillRectangle:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodl	equ	0xFF3
  3686                           intcon2	equ	0xFF1
  3687                           postinc0	equ	0xFEE
  3688                           wreg	equ	0xFE8
  3689                           postdec1	equ	0xFE5
  3690                           fsr1l	equ	0xFE1
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _drawRect *****************
  3694 ;; Defined at:
  3695 ;;		line 718 in file "ST7735_TFT.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  x               2   32[COMRAM] unsigned int 
  3698 ;;  y               2   34[COMRAM] unsigned int 
  3699 ;;  w               2   36[COMRAM] unsigned int 
  3700 ;;  h               2   38[COMRAM] unsigned int 
  3701 ;;  color           2   40[COMRAM] unsigned int 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;		None               void
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:       11 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    6
  3720 ;; This function calls:
  3721 ;;		_drawFastHLine
  3722 ;;		_drawFastVLine
  3723 ;; This function is called by:
  3724 ;;		_Initialize_Screen
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text6
  3729  0036D2                     __ptext6:
  3730                           	opt stack 0
  3731  0036D2                     _drawRect:
  3732                           	opt stack 23
  3733                           
  3734                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3735                           
  3736                           ;incstack = 0
  3737  0036D2  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3738  0036D6  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3739  0036DA  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3740  0036DE  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3741  0036E2  5021               	movf	drawRect@x,w,c
  3742  0036E4  ECAC  F019         	call	_drawFastHLine
  3743                           
  3744                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3745  0036E8  5023               	movf	drawRect@y,w,c
  3746  0036EA  2427               	addwf	drawRect@h,w,c
  3747  0036EC  6E2B               	movwf	??_drawRect& (0+255),c
  3748  0036EE  042B               	decf	??_drawRect,w,c
  3749  0036F0  6E16               	movwf	drawFastHLine@y,c
  3750  0036F2  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3751  0036F6  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3752  0036FA  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3753  0036FE  5021               	movf	drawRect@x,w,c
  3754  003700  ECAC  F019         	call	_drawFastHLine
  3755                           
  3756                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3757  003704  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3758  003708  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3759  00370C  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3760  003710  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3761  003714  5021               	movf	drawRect@x,w,c
  3762  003716  ECF0  F019         	call	_drawFastVLine
  3763                           
  3764                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3765  00371A  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3766  00371E  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3767  003722  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3768  003726  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3769  00372A  5021               	movf	drawRect@x,w,c
  3770  00372C  2425               	addwf	drawRect@w,w,c
  3771  00372E  6E2B               	movwf	??_drawRect& (0+255),c
  3772  003730  042B               	decf	??_drawRect,w,c
  3773  003732  ECF0  F019         	call	_drawFastVLine
  3774  003736  0012               	return		;funcret
  3775  003738                     __end_of_drawRect:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodl	equ	0xFF3
  3782                           intcon2	equ	0xFF1
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _drawFastHLine *****************
  3790 ;; Defined at:
  3791 ;;		line 657 in file "ST7735_TFT.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  x               1    wreg     unsigned char 
  3794 ;;  y               1   21[COMRAM] unsigned char 
  3795 ;;  w               1   22[COMRAM] unsigned char 
  3796 ;;  color           2   23[COMRAM] unsigned int 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  x               1   31[COMRAM] unsigned char 
  3799 ;;  lo              1   30[COMRAM] unsigned char 
  3800 ;;  hi              1   29[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;		None               void
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:       11 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    5
  3817 ;; This function calls:
  3818 ;;		_setAddrWindow
  3819 ;;		_spiwrite
  3820 ;; This function is called by:
  3821 ;;		_drawRect
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text7
  3826  003358                     __ptext7:
  3827                           	opt stack 0
  3828  003358                     _drawFastHLine:
  3829                           	opt stack 23
  3830                           
  3831                           ;incstack = 0
  3832                           ;drawFastHLine@x stored from wreg
  3833  003358  6E20               	movwf	drawFastHLine@x,c
  3834                           
  3835                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3836                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3837  00335A  0E80               	movlw	128
  3838  00335C  6020               	cpfslt	drawFastHLine@x,c
  3839  00335E  D03F               	goto	l307
  3840  003360  0E9F               	movlw	159
  3841  003362  6416               	cpfsgt	drawFastHLine@y,c
  3842  003364  D001               	goto	l7144
  3843                           
  3844                           ;ST7735_TFT.c: 661: return;
  3845  003366  D03B               	goto	l307
  3846  003368                     l7144:
  3847                           
  3848                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3849  003368  0EFF               	movlw	255
  3850  00336A  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3851  00336C  0EFF               	movlw	255
  3852  00336E  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3853  003370  5017               	movf	drawFastHLine@w,w,c
  3854  003372  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3855  003376  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3856  003378  261C               	addwf	??_drawFastHLine+2,f,c
  3857  00337A  0E00               	movlw	0
  3858  00337C  221D               	addwfc	??_drawFastHLine+3,f,c
  3859  00337E  501A               	movf	??_drawFastHLine,w,c
  3860  003380  261C               	addwf	??_drawFastHLine+2,f,c
  3861  003382  501B               	movf	??_drawFastHLine+1,w,c
  3862  003384  221D               	addwfc	??_drawFastHLine+3,f,c
  3863  003386  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3864  003388  D00B               	goto	l7148
  3865  00338A  501D               	movf	??_drawFastHLine+3,w,c
  3866  00338C  E104               	bnz	u7280
  3867  00338E  0E80               	movlw	128
  3868  003390  5C1C               	subwf	??_drawFastHLine+2,w,c
  3869  003392  A0D8               	btfss	status,0,c
  3870  003394  D005               	goto	l7148
  3871  003396                     u7280:
  3872                           
  3873                           ;ST7735_TFT.c: 663: w = 128 - x;
  3874  003396  5020               	movf	drawFastHLine@x,w,c
  3875  003398  0800               	sublw	0
  3876  00339A  0F80               	addlw	128
  3877  00339C  6E17               	movwf	drawFastHLine@w,c
  3878  00339E  D000               	goto	l7148
  3879  0033A0                     l7148:
  3880                           
  3881                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3882  0033A0  5019               	movf	drawFastHLine@color+1,w,c
  3883  0033A2  6E1E               	movwf	drawFastHLine@hi,c
  3884  0033A4  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3885                           
  3886                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3887  0033A8  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3888  0033AC  5020               	movf	drawFastHLine@x,w,c
  3889  0033AE  2417               	addwf	drawFastHLine@w,w,c
  3890  0033B0  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3891  0033B2  041A               	decf	??_drawFastHLine,w,c
  3892  0033B4  6E13               	movwf	setAddrWindow@x1,c
  3893  0033B6  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3894  0033BA  5020               	movf	drawFastHLine@x,w,c
  3895  0033BC  EC7D  F01C         	call	_setAddrWindow
  3896                           
  3897                           ;ST7735_TFT.c: 666: PORTCbits.RC2 = 1;
  3898  0033C0  8482               	bsf	3970,2,c	;volatile
  3899                           
  3900                           ;ST7735_TFT.c: 667: PORTCbits.RC4 = 0;
  3901  0033C2  9882               	bcf	3970,4,c	;volatile
  3902                           
  3903                           ;ST7735_TFT.c: 669: while (w--) {
  3904  0033C4  D007               	goto	l7160
  3905  0033C6                     l7158:
  3906                           
  3907                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3908  0033C6  501E               	movf	drawFastHLine@hi,w,c
  3909  0033C8  ECE3  F01E         	call	_spiwrite
  3910                           
  3911                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3912  0033CC  501F               	movf	drawFastHLine@lo,w,c
  3913  0033CE  ECE3  F01E         	call	_spiwrite
  3914  0033D2  D000               	goto	l7160
  3915  0033D4                     l7160:
  3916  0033D4  0617               	decf	drawFastHLine@w,f,c
  3917  0033D6  2817               	incf	drawFastHLine@w,w,c
  3918  0033D8  A4D8               	btfss	status,2,c
  3919  0033DA  D7F5               	goto	l7158
  3920                           
  3921                           ;ST7735_TFT.c: 672: }
  3922                           ;ST7735_TFT.c: 673: PORTCbits.RC4 = 1;
  3923  0033DC  8882               	bsf	3970,4,c	;volatile
  3924  0033DE                     l307:
  3925  0033DE  0012               	return		;funcret
  3926  0033E0                     __end_of_drawFastHLine:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodl	equ	0xFF3
  3933                           intcon2	equ	0xFF1
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1l	equ	0xFE1
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _TFT_GreenTab_Initialize *****************
  3941 ;; Defined at:
  3942 ;;		line 677 in file "ST7735_TFT.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;		None               void
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    5
  3963 ;; This function calls:
  3964 ;;		_Rcmd1
  3965 ;;		_Rcmd2red
  3966 ;;		_Rcmd3
  3967 ;;		_write_command
  3968 ;;		_write_data
  3969 ;; This function is called by:
  3970 ;;		_Initialize_Screen
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text8
  3975  003C42                     __ptext8:
  3976                           	opt stack 0
  3977  003C42                     _TFT_GreenTab_Initialize:
  3978                           	opt stack 24
  3979                           
  3980                           ;ST7735_TFT.c: 679: PORTCbits.RC4 = 1;
  3981                           
  3982                           ;incstack = 0
  3983  003C42  8882               	bsf	3970,4,c	;volatile
  3984                           
  3985                           ;ST7735_TFT.c: 680: PORTCbits.RC2 = 0;
  3986  003C44  9482               	bcf	3970,2,c	;volatile
  3987                           
  3988                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3989  003C46  0E80               	movlw	128
  3990  003C48  6EC7               	movwf	4039,c	;volatile
  3991                           
  3992                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3993  003C4A  0E30               	movlw	48
  3994  003C4C  6EC6               	movwf	4038,c	;volatile
  3995                           
  3996                           ;ST7735_TFT.c: 686: Rcmd1();
  3997  003C4E  ECA5  F012         	call	_Rcmd1	;wreg free
  3998                           
  3999                           ;ST7735_TFT.c: 687: Rcmd2red();
  4000  003C52  EC7B  F01D         	call	_Rcmd2red	;wreg free
  4001                           
  4002                           ;ST7735_TFT.c: 688: Rcmd3();
  4003  003C56  ECB6  F014         	call	_Rcmd3	;wreg free
  4004                           
  4005                           ;ST7735_TFT.c: 689: write_command(0x36);
  4006  003C5A  0E36               	movlw	54
  4007  003C5C  EC07  F01F         	call	_write_command
  4008                           
  4009                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4010  003C60  0EC0               	movlw	192
  4011  003C62  ECFF  F01E         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4014  003C66  0E01               	movlw	1
  4015  003C68  6E68               	movwf	__tft_type,c
  4016  003C6A  0012               	return		;funcret
  4017  003C6C                     __end_of_TFT_GreenTab_Initialize:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodl	equ	0xFF3
  4024                           intcon2	equ	0xFF1
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           postdec1	equ	0xFE5
  4028                           fsr1l	equ	0xFE1
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _Rcmd3 *****************
  4032 ;; Defined at:
  4033 ;;		line 371 in file "ST7735_TFT.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;		None               void
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;Total ram usage:        0 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    4
  4054 ;; This function calls:
  4055 ;;		_delay_ms
  4056 ;;		_write_command
  4057 ;;		_write_data
  4058 ;; This function is called by:
  4059 ;;		_TFT_GreenTab_Initialize
  4060 ;;		_TFT_BlackTab_Initialize
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text9
  4065  00296C                     __ptext9:
  4066                           	opt stack 0
  4067  00296C                     _Rcmd3:
  4068                           	opt stack 24
  4069                           
  4070                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4071                           
  4072                           ;incstack = 0
  4073  00296C  0EE0               	movlw	224
  4074  00296E  EC07  F01F         	call	_write_command
  4075                           
  4076                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4077  002972  0E02               	movlw	2
  4078  002974  ECFF  F01E         	call	_write_data
  4079  002978  0E1C               	movlw	28
  4080  00297A  ECFF  F01E         	call	_write_data
  4081  00297E  0E07               	movlw	7
  4082  002980  ECFF  F01E         	call	_write_data
  4083  002984  0E12               	movlw	18
  4084  002986  ECFF  F01E         	call	_write_data
  4085                           
  4086                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4087  00298A  0E37               	movlw	55
  4088  00298C  ECFF  F01E         	call	_write_data
  4089  002990  0E32               	movlw	50
  4090  002992  ECFF  F01E         	call	_write_data
  4091  002996  0E29               	movlw	41
  4092  002998  ECFF  F01E         	call	_write_data
  4093  00299C  0E2D               	movlw	45
  4094  00299E  ECFF  F01E         	call	_write_data
  4095                           
  4096                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4097  0029A2  0E29               	movlw	41
  4098  0029A4  ECFF  F01E         	call	_write_data
  4099  0029A8  0E25               	movlw	37
  4100  0029AA  ECFF  F01E         	call	_write_data
  4101  0029AE  0E2B               	movlw	43
  4102  0029B0  ECFF  F01E         	call	_write_data
  4103  0029B4  0E39               	movlw	57
  4104  0029B6  ECFF  F01E         	call	_write_data
  4105                           
  4106                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4107  0029BA  0E00               	movlw	0
  4108  0029BC  ECFF  F01E         	call	_write_data
  4109  0029C0  0E01               	movlw	1
  4110  0029C2  ECFF  F01E         	call	_write_data
  4111  0029C6  0E03               	movlw	3
  4112  0029C8  ECFF  F01E         	call	_write_data
  4113  0029CC  0E10               	movlw	16
  4114  0029CE  ECFF  F01E         	call	_write_data
  4115                           
  4116                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4117  0029D2  0EE1               	movlw	225
  4118  0029D4  EC07  F01F         	call	_write_command
  4119                           
  4120                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4121  0029D8  0E03               	movlw	3
  4122  0029DA  ECFF  F01E         	call	_write_data
  4123  0029DE  0E1D               	movlw	29
  4124  0029E0  ECFF  F01E         	call	_write_data
  4125  0029E4  0E07               	movlw	7
  4126  0029E6  ECFF  F01E         	call	_write_data
  4127  0029EA  0E06               	movlw	6
  4128  0029EC  ECFF  F01E         	call	_write_data
  4129                           
  4130                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4131  0029F0  0E2E               	movlw	46
  4132  0029F2  ECFF  F01E         	call	_write_data
  4133  0029F6  0E2C               	movlw	44
  4134  0029F8  ECFF  F01E         	call	_write_data
  4135  0029FC  0E29               	movlw	41
  4136  0029FE  ECFF  F01E         	call	_write_data
  4137  002A02  0E2D               	movlw	45
  4138  002A04  ECFF  F01E         	call	_write_data
  4139                           
  4140                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4141  002A08  0E2E               	movlw	46
  4142  002A0A  ECFF  F01E         	call	_write_data
  4143  002A0E  0E2E               	movlw	46
  4144  002A10  ECFF  F01E         	call	_write_data
  4145  002A14  0E37               	movlw	55
  4146  002A16  ECFF  F01E         	call	_write_data
  4147  002A1A  0E3F               	movlw	63
  4148  002A1C  ECFF  F01E         	call	_write_data
  4149                           
  4150                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4151  002A20  0E00               	movlw	0
  4152  002A22  ECFF  F01E         	call	_write_data
  4153  002A26  0E00               	movlw	0
  4154  002A28  ECFF  F01E         	call	_write_data
  4155  002A2C  0E02               	movlw	2
  4156  002A2E  ECFF  F01E         	call	_write_data
  4157  002A32  0E10               	movlw	16
  4158  002A34  ECFF  F01E         	call	_write_data
  4159                           
  4160                           ;ST7735_TFT.c: 383: write_command(0x13);
  4161  002A38  0E13               	movlw	19
  4162  002A3A  EC07  F01F         	call	_write_command
  4163                           
  4164                           ;ST7735_TFT.c: 384: delay_ms(10);
  4165  002A3E  0E00               	movlw	0
  4166  002A40  6E24               	movwf	delay_ms@ms+1,c
  4167  002A42  0E0A               	movlw	10
  4168  002A44  6E23               	movwf	delay_ms@ms,c
  4169  002A46  EC2B  F01C         	call	_delay_ms	;wreg free
  4170                           
  4171                           ;ST7735_TFT.c: 385: write_command(0x29);
  4172  002A4A  0E29               	movlw	41
  4173  002A4C  EC07  F01F         	call	_write_command
  4174                           
  4175                           ;ST7735_TFT.c: 386: delay_ms(100);
  4176  002A50  0E00               	movlw	0
  4177  002A52  6E24               	movwf	delay_ms@ms+1,c
  4178  002A54  0E64               	movlw	100
  4179  002A56  6E23               	movwf	delay_ms@ms,c
  4180  002A58  EC2B  F01C         	call	_delay_ms	;wreg free
  4181  002A5C  0012               	return		;funcret
  4182  002A5E                     __end_of_Rcmd3:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodl	equ	0xFF3
  4189                           intcon2	equ	0xFF1
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1l	equ	0xFE1
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _Rcmd2red *****************
  4197 ;; Defined at:
  4198 ;;		line 361 in file "ST7735_TFT.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    4
  4219 ;; This function calls:
  4220 ;;		_write_command
  4221 ;;		_write_data
  4222 ;; This function is called by:
  4223 ;;		_TFT_GreenTab_Initialize
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text10
  4228  003AF6                     __ptext10:
  4229                           	opt stack 0
  4230  003AF6                     _Rcmd2red:
  4231                           	opt stack 24
  4232                           
  4233                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4234                           
  4235                           ;incstack = 0
  4236  003AF6  0E2A               	movlw	42
  4237  003AF8  EC07  F01F         	call	_write_command
  4238                           
  4239                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4240  003AFC  0E00               	movlw	0
  4241  003AFE  ECFF  F01E         	call	_write_data
  4242  003B02  0E00               	movlw	0
  4243  003B04  ECFF  F01E         	call	_write_data
  4244                           
  4245                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4246  003B08  0E00               	movlw	0
  4247  003B0A  ECFF  F01E         	call	_write_data
  4248  003B0E  0E7F               	movlw	127
  4249  003B10  ECFF  F01E         	call	_write_data
  4250                           
  4251                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4252  003B14  0E2B               	movlw	43
  4253  003B16  EC07  F01F         	call	_write_command
  4254                           
  4255                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4256  003B1A  0E00               	movlw	0
  4257  003B1C  ECFF  F01E         	call	_write_data
  4258  003B20  0E00               	movlw	0
  4259  003B22  ECFF  F01E         	call	_write_data
  4260                           
  4261                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4262  003B26  0E00               	movlw	0
  4263  003B28  ECFF  F01E         	call	_write_data
  4264  003B2C  0E9F               	movlw	159
  4265  003B2E  ECFF  F01E         	call	_write_data
  4266  003B32  0012               	return		;funcret
  4267  003B34                     __end_of_Rcmd2red:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodl	equ	0xFF3
  4274                           intcon2	equ	0xFF1
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           postdec1	equ	0xFE5
  4278                           fsr1l	equ	0xFE1
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function _Rcmd1 *****************
  4282 ;; Defined at:
  4283 ;;		line 314 in file "ST7735_TFT.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;		None               void
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    4
  4304 ;; This function calls:
  4305 ;;		_delay_ms
  4306 ;;		_write_command
  4307 ;;		_write_data
  4308 ;; This function is called by:
  4309 ;;		_TFT_GreenTab_Initialize
  4310 ;;		_TFT_BlackTab_Initialize
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text11
  4315  00254A                     __ptext11:
  4316                           	opt stack 0
  4317  00254A                     _Rcmd1:
  4318                           	opt stack 24
  4319                           
  4320                           ;ST7735_TFT.c: 316: write_command(0x01);
  4321                           
  4322                           ;incstack = 0
  4323  00254A  0E01               	movlw	1
  4324  00254C  EC07  F01F         	call	_write_command
  4325                           
  4326                           ;ST7735_TFT.c: 317: delay_ms(150);
  4327  002550  0E00               	movlw	0
  4328  002552  6E24               	movwf	delay_ms@ms+1,c
  4329  002554  0E96               	movlw	150
  4330  002556  6E23               	movwf	delay_ms@ms,c
  4331  002558  EC2B  F01C         	call	_delay_ms	;wreg free
  4332                           
  4333                           ;ST7735_TFT.c: 318: write_command(0x11);
  4334  00255C  0E11               	movlw	17
  4335  00255E  EC07  F01F         	call	_write_command
  4336                           
  4337                           ;ST7735_TFT.c: 319: delay_ms(500);
  4338  002562  0E01               	movlw	1
  4339  002564  6E24               	movwf	delay_ms@ms+1,c
  4340  002566  0EF4               	movlw	244
  4341  002568  6E23               	movwf	delay_ms@ms,c
  4342  00256A  EC2B  F01C         	call	_delay_ms	;wreg free
  4343                           
  4344                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4345  00256E  0EB1               	movlw	177
  4346  002570  EC07  F01F         	call	_write_command
  4347                           
  4348                           ;ST7735_TFT.c: 321: write_data(0x01);
  4349  002574  0E01               	movlw	1
  4350  002576  ECFF  F01E         	call	_write_data
  4351                           
  4352                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4353  00257A  0E2C               	movlw	44
  4354  00257C  ECFF  F01E         	call	_write_data
  4355                           
  4356                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4357  002580  0E2D               	movlw	45
  4358  002582  ECFF  F01E         	call	_write_data
  4359                           
  4360                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4361  002586  0EB2               	movlw	178
  4362  002588  EC07  F01F         	call	_write_command
  4363                           
  4364                           ;ST7735_TFT.c: 325: write_data(0x01);
  4365  00258C  0E01               	movlw	1
  4366  00258E  ECFF  F01E         	call	_write_data
  4367                           
  4368                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4369  002592  0E2C               	movlw	44
  4370  002594  ECFF  F01E         	call	_write_data
  4371                           
  4372                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4373  002598  0E2D               	movlw	45
  4374  00259A  ECFF  F01E         	call	_write_data
  4375                           
  4376                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4377  00259E  0EB3               	movlw	179
  4378  0025A0  EC07  F01F         	call	_write_command
  4379                           
  4380                           ;ST7735_TFT.c: 329: write_data(0x01);
  4381  0025A4  0E01               	movlw	1
  4382  0025A6  ECFF  F01E         	call	_write_data
  4383                           
  4384                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4385  0025AA  0E2C               	movlw	44
  4386  0025AC  ECFF  F01E         	call	_write_data
  4387                           
  4388                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4389  0025B0  0E2D               	movlw	45
  4390  0025B2  ECFF  F01E         	call	_write_data
  4391                           
  4392                           ;ST7735_TFT.c: 332: write_data(0x01);
  4393  0025B6  0E01               	movlw	1
  4394  0025B8  ECFF  F01E         	call	_write_data
  4395                           
  4396                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4397  0025BC  0E2C               	movlw	44
  4398  0025BE  ECFF  F01E         	call	_write_data
  4399                           
  4400                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4401  0025C2  0E2D               	movlw	45
  4402  0025C4  ECFF  F01E         	call	_write_data
  4403                           
  4404                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4405  0025C8  0EB4               	movlw	180
  4406  0025CA  EC07  F01F         	call	_write_command
  4407                           
  4408                           ;ST7735_TFT.c: 336: write_data(0x07);
  4409  0025CE  0E07               	movlw	7
  4410  0025D0  ECFF  F01E         	call	_write_data
  4411                           
  4412                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4413  0025D4  0EC0               	movlw	192
  4414  0025D6  EC07  F01F         	call	_write_command
  4415                           
  4416                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4417  0025DA  0EA2               	movlw	162
  4418  0025DC  ECFF  F01E         	call	_write_data
  4419                           
  4420                           ;ST7735_TFT.c: 339: write_data(0x02);
  4421  0025E0  0E02               	movlw	2
  4422  0025E2  ECFF  F01E         	call	_write_data
  4423                           
  4424                           ;ST7735_TFT.c: 340: write_data(0x84);
  4425  0025E6  0E84               	movlw	132
  4426  0025E8  ECFF  F01E         	call	_write_data
  4427                           
  4428                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4429  0025EC  0EC1               	movlw	193
  4430  0025EE  EC07  F01F         	call	_write_command
  4431                           
  4432                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4433  0025F2  0EC5               	movlw	197
  4434  0025F4  ECFF  F01E         	call	_write_data
  4435                           
  4436                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4437  0025F8  0EC2               	movlw	194
  4438  0025FA  EC07  F01F         	call	_write_command
  4439                           
  4440                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4441  0025FE  0E0A               	movlw	10
  4442  002600  ECFF  F01E         	call	_write_data
  4443                           
  4444                           ;ST7735_TFT.c: 345: write_data(0x00);
  4445  002604  0E00               	movlw	0
  4446  002606  ECFF  F01E         	call	_write_data
  4447                           
  4448                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4449  00260A  0EC3               	movlw	195
  4450  00260C  EC07  F01F         	call	_write_command
  4451                           
  4452                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4453  002610  0E8A               	movlw	138
  4454  002612  ECFF  F01E         	call	_write_data
  4455                           
  4456                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4457  002616  0E2A               	movlw	42
  4458  002618  ECFF  F01E         	call	_write_data
  4459                           
  4460                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4461  00261C  0EC4               	movlw	196
  4462  00261E  EC07  F01F         	call	_write_command
  4463                           
  4464                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4465  002622  0E8A               	movlw	138
  4466  002624  ECFF  F01E         	call	_write_data
  4467                           
  4468                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4469  002628  0EEE               	movlw	238
  4470  00262A  ECFF  F01E         	call	_write_data
  4471                           
  4472                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4473  00262E  0EC5               	movlw	197
  4474  002630  EC07  F01F         	call	_write_command
  4475                           
  4476                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4477  002634  0E0E               	movlw	14
  4478  002636  ECFF  F01E         	call	_write_data
  4479                           
  4480                           ;ST7735_TFT.c: 354: write_command(0x20);
  4481  00263A  0E20               	movlw	32
  4482  00263C  EC07  F01F         	call	_write_command
  4483                           
  4484                           ;ST7735_TFT.c: 355: write_command(0x36);
  4485  002640  0E36               	movlw	54
  4486  002642  EC07  F01F         	call	_write_command
  4487                           
  4488                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4489  002646  0EC8               	movlw	200
  4490  002648  ECFF  F01E         	call	_write_data
  4491                           
  4492                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4493  00264C  0E3A               	movlw	58
  4494  00264E  EC07  F01F         	call	_write_command
  4495                           
  4496                           ;ST7735_TFT.c: 358: write_data(0x05);
  4497  002652  0E05               	movlw	5
  4498  002654  ECFF  F01E         	call	_write_data
  4499  002658  0012               	return		;funcret
  4500  00265A                     __end_of_Rcmd1:
  4501                           	opt stack 0
  4502                           tblptru	equ	0xFF8
  4503                           tblptrh	equ	0xFF7
  4504                           tblptrl	equ	0xFF6
  4505                           tablat	equ	0xFF5
  4506                           prodl	equ	0xFF3
  4507                           intcon2	equ	0xFF1
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           postdec1	equ	0xFE5
  4511                           fsr1l	equ	0xFE1
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _LCD_Reset *****************
  4515 ;; Defined at:
  4516 ;;		line 250 in file "ST7735_TFT.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        0 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    4
  4537 ;; This function calls:
  4538 ;;		_delay_ms
  4539 ;; This function is called by:
  4540 ;;		_Initialize_Screen
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text12
  4545  003DDA                     __ptext12:
  4546                           	opt stack 0
  4547  003DDA                     _LCD_Reset:
  4548                           	opt stack 25
  4549                           
  4550                           ;ST7735_TFT.c: 252: PORTCbits.RC1 = 0;
  4551                           
  4552                           ;incstack = 0
  4553  003DDA  9282               	bcf	3970,1,c	;volatile
  4554                           
  4555                           ;ST7735_TFT.c: 253: delay_ms(100);
  4556  003DDC  0E00               	movlw	0
  4557  003DDE  6E24               	movwf	delay_ms@ms+1,c
  4558  003DE0  0E64               	movlw	100
  4559  003DE2  6E23               	movwf	delay_ms@ms,c
  4560  003DE4  EC2B  F01C         	call	_delay_ms	;wreg free
  4561                           
  4562                           ;ST7735_TFT.c: 254: PORTCbits.RC1 = 1;
  4563  003DE8  8282               	bsf	3970,1,c	;volatile
  4564  003DEA  0012               	return		;funcret
  4565  003DEC                     __end_of_LCD_Reset:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodl	equ	0xFF3
  4572                           intcon2	equ	0xFF1
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1l	equ	0xFE1
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _delay_ms *****************
  4580 ;; Defined at:
  4581 ;;		line 97 in file "ST7735_TFT.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  ms              2   34[COMRAM] int 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  count           2   38[COMRAM] int 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;		None               void
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        6 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    3
  4602 ;; This function calls:
  4603 ;;		___wmul
  4604 ;; This function is called by:
  4605 ;;		_LCD_Reset
  4606 ;;		_Rcmd1
  4607 ;;		_Rcmd3
  4608 ;;		_Bcmd
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text13
  4613  003856                     __ptext13:
  4614                           	opt stack 0
  4615  003856                     _delay_ms:
  4616                           	opt stack 24
  4617                           
  4618                           ;ST7735_TFT.c: 103: int count;
  4619                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4620                           
  4621                           ;incstack = 0
  4622  003856  C023  F01D         	movff	delay_ms@ms,___wmul@multiplier
  4623  00385A  C024  F01E         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4624  00385E  0E00               	movlw	0
  4625  003860  6E20               	movwf	___wmul@multiplicand+1,c
  4626  003862  0EFA               	movlw	250
  4627  003864  6E1F               	movwf	___wmul@multiplicand,c
  4628  003866  EC4B  F01E         	call	___wmul	;wreg free
  4629  00386A  C01D  F027         	movff	?___wmul,delay_ms@count
  4630  00386E  C01E  F028         	movff	?___wmul+1,delay_ms@count+1
  4631                           
  4632                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4633  003872  C027  F025         	movff	delay_ms@count,??_delay_ms
  4634  003876  C028  F026         	movff	delay_ms@count+1,??_delay_ms+1
  4635  00387A  1E25               	comf	??_delay_ms,f,c
  4636  00387C  1E26               	comf	??_delay_ms+1,f,c
  4637  00387E  4A25               	infsnz	??_delay_ms,f,c
  4638  003880  2A26               	incf	??_delay_ms+1,f,c
  4639  003882  0EFF               	movlw	255
  4640  003884  2425               	addwf	??_delay_ms,w,c
  4641  003886  6E27               	movwf	delay_ms@count,c
  4642  003888  0EFF               	movlw	255
  4643  00388A  2026               	addwfc	??_delay_ms+1,w,c
  4644  00388C  6E28               	movwf	delay_ms@count+1,c
  4645                           
  4646                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4647  00388E  0EB8               	movlw	184
  4648  003890  6EB1               	movwf	4017,c	;volatile
  4649                           
  4650                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4651  003892  C027  FFD6         	movff	delay_ms@count,4054	;volatile
  4652                           
  4653                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4654  003896  5028               	movf	delay_ms@count+1,w,c
  4655  003898  6ED7               	movwf	4055,c	;volatile
  4656                           
  4657                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4658  00389A  92A1               	bcf	4001,1,c	;volatile
  4659                           
  4660                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4661  00389C  80B1               	bsf	4017,0,c	;volatile
  4662                           
  4663                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4664  00389E  D000               	goto	l149
  4665  0038A0                     l149:
  4666  0038A0  A2A1               	btfss	4001,1,c	;volatile
  4667  0038A2  D7FE               	goto	l149
  4668                           
  4669                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4670  0038A4  90B1               	bcf	4017,0,c	;volatile
  4671  0038A6  0012               	return		;funcret
  4672  0038A8                     __end_of_delay_ms:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodl	equ	0xFF3
  4679                           intcon2	equ	0xFF1
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           postdec1	equ	0xFE5
  4683                           fsr1l	equ	0xFE1
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _Day_Mode *****************
  4687 ;; Defined at:
  4688 ;;		line 331 in file "Lab9test.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;		None               void
  4695 ;; Registers used:
  4696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:   12
  4709 ;; This function calls:
  4710 ;;		_PED_Control
  4711 ;;		_Set_EW
  4712 ;;		_Set_EWLT
  4713 ;;		_Set_NS
  4714 ;;		_Set_NSLT
  4715 ;;		_WAIT_N_SEC
  4716 ;; This function is called by:
  4717 ;;		_main
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text14
  4722  002EC8                     __ptext14:
  4723                           	opt stack 0
  4724  002EC8                     _Day_Mode:
  4725                           	opt stack 18
  4726                           
  4727                           ;Lab9test.c: 333: PORTBbits.RB7 = 0;
  4728                           
  4729                           ;incstack = 0
  4730  002EC8  9E81               	bcf	3969,7,c	;volatile
  4731                           
  4732                           ;Lab9test.c: 334: Act_Mode_Txt[0] = 'D';
  4733  002ECA  0E44               	movlw	68
  4734  002ECC  0100               	movlb	0	; () banked
  4735  002ECE  6FD1               	movwf	_Act_Mode_Txt& (0+255),b
  4736  002ED0  D000               	goto	l7458
  4737  002ED2                     l7458:
  4738                           
  4739                           ;Lab9test.c: 337: {
  4740                           ;Lab9test.c: 338: Set_NSLT (1);
  4741  002ED2  0E01               	movlw	1
  4742  002ED4  ECC9  F01C         	call	_Set_NSLT
  4743                           
  4744                           ;Lab9test.c: 339: Set_EW (1);
  4745  002ED8  0E01               	movlw	1
  4746  002EDA  EC35  F01D         	call	_Set_EW
  4747                           
  4748                           ;Lab9test.c: 340: Set_EWLT (1);
  4749  002EDE  0E01               	movlw	1
  4750  002EE0  EC11  F01D         	call	_Set_EWLT
  4751                           
  4752                           ;Lab9test.c: 341: Set_NS (2);
  4753  002EE4  0E02               	movlw	2
  4754  002EE6  ECED  F01C         	call	_Set_NS
  4755                           
  4756                           ;Lab9test.c: 343: if (NSPED_SW == 1)
  4757  002EEA  0100               	movlb	0	; () banked
  4758  002EEC  058E               	decf	_NSPED_SW& (0+255),w,b
  4759  002EEE  A4D8               	btfss	status,2,c
  4760  002EF0  D005               	goto	l411
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;Lab9test.c: 344: {
  4764                           ;Lab9test.c: 345: PED_Control(0, 9);
  4765  002EF2  0E09               	movlw	9
  4766  002EF4  6E4B               	movwf	PED_Control@Num_Sec,c
  4767  002EF6  0E00               	movlw	0
  4768  002EF8  ECFD  F01B         	call	_PED_Control
  4769  002EFC                     l411:
  4770                           
  4771                           ;Lab9test.c: 346: }
  4772                           ;Lab9test.c: 347: WAIT_N_SEC (8);
  4773  002EFC  0E08               	movlw	8
  4774  002EFE  ECD7  F01D         	call	_WAIT_N_SEC
  4775                           
  4776                           ;Lab9test.c: 349: Set_NS (3);
  4777  002F02  0E03               	movlw	3
  4778  002F04  ECED  F01C         	call	_Set_NS
  4779                           
  4780                           ;Lab9test.c: 350: WAIT_N_SEC (3);
  4781  002F08  0E03               	movlw	3
  4782  002F0A  ECD7  F01D         	call	_WAIT_N_SEC
  4783                           
  4784                           ;Lab9test.c: 352: Set_NS (1);
  4785  002F0E  0E01               	movlw	1
  4786  002F10  ECED  F01C         	call	_Set_NS
  4787                           
  4788                           ;Lab9test.c: 354: if (PORTAbits.RA4 == 1)
  4789  002F14  A880               	btfss	3968,4,c	;volatile
  4790  002F16  D010               	goto	l7484
  4791                           
  4792                           ;Lab9test.c: 355: {
  4793                           ;Lab9test.c: 356: Set_EWLT (2);
  4794  002F18  0E02               	movlw	2
  4795  002F1A  EC11  F01D         	call	_Set_EWLT
  4796                           
  4797                           ;Lab9test.c: 357: WAIT_N_SEC (7);
  4798  002F1E  0E07               	movlw	7
  4799  002F20  ECD7  F01D         	call	_WAIT_N_SEC
  4800                           
  4801                           ;Lab9test.c: 358: Set_EWLT (3);
  4802  002F24  0E03               	movlw	3
  4803  002F26  EC11  F01D         	call	_Set_EWLT
  4804                           
  4805                           ;Lab9test.c: 359: WAIT_N_SEC (3);
  4806  002F2A  0E03               	movlw	3
  4807  002F2C  ECD7  F01D         	call	_WAIT_N_SEC
  4808                           
  4809                           ;Lab9test.c: 360: Set_EWLT (1);
  4810  002F30  0E01               	movlw	1
  4811  002F32  EC11  F01D         	call	_Set_EWLT
  4812  002F36  D000               	goto	l7484
  4813  002F38                     l7484:
  4814                           
  4815                           ;Lab9test.c: 361: }
  4816                           ;Lab9test.c: 363: Set_EW (2);
  4817  002F38  0E02               	movlw	2
  4818  002F3A  EC35  F01D         	call	_Set_EW
  4819                           
  4820                           ;Lab9test.c: 365: if (EWPED_SW == 1)
  4821  002F3E  0100               	movlb	0	; () banked
  4822  002F40  058D               	decf	_EWPED_SW& (0+255),w,b
  4823  002F42  A4D8               	btfss	status,2,c
  4824  002F44  D005               	goto	l413
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;Lab9test.c: 366: {
  4828                           ;Lab9test.c: 367: PED_Control(1, 8);
  4829  002F46  0E08               	movlw	8
  4830  002F48  6E4B               	movwf	PED_Control@Num_Sec,c
  4831  002F4A  0E01               	movlw	1
  4832  002F4C  ECFD  F01B         	call	_PED_Control
  4833  002F50                     l413:
  4834                           
  4835                           ;Lab9test.c: 368: }
  4836                           ;Lab9test.c: 369: WAIT_N_SEC (6);
  4837  002F50  0E06               	movlw	6
  4838  002F52  ECD7  F01D         	call	_WAIT_N_SEC
  4839                           
  4840                           ;Lab9test.c: 371: Set_EW (3);
  4841  002F56  0E03               	movlw	3
  4842  002F58  EC35  F01D         	call	_Set_EW
  4843                           
  4844                           ;Lab9test.c: 372: WAIT_N_SEC (3);
  4845  002F5C  0E03               	movlw	3
  4846  002F5E  ECD7  F01D         	call	_WAIT_N_SEC
  4847                           
  4848                           ;Lab9test.c: 374: Set_EW (1);
  4849  002F62  0E01               	movlw	1
  4850  002F64  EC35  F01D         	call	_Set_EW
  4851                           
  4852                           ;Lab9test.c: 376: if (PORTAbits.RA3 == 1)
  4853  002F68  A680               	btfss	3968,3,c	;volatile
  4854  002F6A  D011               	goto	l417
  4855                           
  4856                           ;Lab9test.c: 377: {
  4857                           ;Lab9test.c: 378: Set_NSLT (2);
  4858  002F6C  0E02               	movlw	2
  4859  002F6E  ECC9  F01C         	call	_Set_NSLT
  4860                           
  4861                           ;Lab9test.c: 379: WAIT_N_SEC (6);
  4862  002F72  0E06               	movlw	6
  4863  002F74  ECD7  F01D         	call	_WAIT_N_SEC
  4864                           
  4865                           ;Lab9test.c: 381: Set_NSLT (3);
  4866  002F78  0E03               	movlw	3
  4867  002F7A  ECC9  F01C         	call	_Set_NSLT
  4868                           
  4869                           ;Lab9test.c: 382: WAIT_N_SEC (3);
  4870  002F7E  0E03               	movlw	3
  4871  002F80  ECD7  F01D         	call	_WAIT_N_SEC
  4872                           
  4873                           ;Lab9test.c: 384: Set_NSLT (1);
  4874  002F84  0E01               	movlw	1
  4875  002F86  ECC9  F01C         	call	_Set_NSLT
  4876                           
  4877                           ;Lab9test.c: 385: }
  4878                           ;Lab9test.c: 386: break;
  4879  002F8A  D001               	goto	l417
  4880  002F8C  D7A2               	goto	l7458
  4881  002F8E                     l417:
  4882  002F8E  0012               	return		;funcret
  4883  002F90                     __end_of_Day_Mode:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodl	equ	0xFF3
  4890                           intcon2	equ	0xFF1
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1l	equ	0xFE1
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _WAIT_N_SEC *****************
  4898 ;; Defined at:
  4899 ;;		line 498 in file "Lab9test.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  seconds         1    wreg     unsigned char 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  seconds         1   93[COMRAM] unsigned char 
  4904 ;;  i               1   94[COMRAM] unsigned char 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        2 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   11
  4921 ;; This function calls:
  4922 ;;		_WAIT_1_SEC
  4923 ;;		_update_LCD_count
  4924 ;; This function is called by:
  4925 ;;		_Day_Mode
  4926 ;;		_Night_Mode
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text15
  4931  003BAE                     __ptext15:
  4932                           	opt stack 0
  4933  003BAE                     _WAIT_N_SEC:
  4934                           	opt stack 18
  4935                           
  4936                           ;incstack = 0
  4937                           ;WAIT_N_SEC@seconds stored from wreg
  4938  003BAE  6E5E               	movwf	WAIT_N_SEC@seconds,c
  4939                           
  4940                           ;Lab9test.c: 500: char i;
  4941                           ;Lab9test.c: 501: for (i = seconds; i > 0; i--)
  4942  003BB0  C05E  F05F         	movff	WAIT_N_SEC@seconds,WAIT_N_SEC@i
  4943  003BB4                     l7324:
  4944  003BB4  505F               	movf	WAIT_N_SEC@i,w,c
  4945  003BB6  B4D8               	btfsc	status,2,c
  4946  003BB8  D00C               	goto	l7334
  4947  003BBA  D001               	goto	l7328
  4948  003BBC  D00A               	goto	l7334
  4949  003BBE                     l7328:
  4950                           
  4951                           ;Lab9test.c: 502: {
  4952                           ;Lab9test.c: 503: update_LCD_count(direction, i);
  4953  003BBE  C05F  F048         	movff	WAIT_N_SEC@i,update_LCD_count@count
  4954  003BC2  0100               	movlb	0	; () banked
  4955  003BC4  5194               	movf	_direction& (0+255),w,b
  4956  003BC6  EC89  F010         	call	_update_LCD_count
  4957                           
  4958                           ;Lab9test.c: 504: WAIT_1_SEC();
  4959  003BCA  EC77  F01A         	call	_WAIT_1_SEC	;wreg free
  4960  003BCE  065F               	decf	WAIT_N_SEC@i,f,c
  4961  003BD0  D7F1               	goto	l7324
  4962  003BD2                     l7334:
  4963                           
  4964                           ;Lab9test.c: 505: }
  4965                           ;Lab9test.c: 506: update_LCD_count(direction, 0);
  4966  003BD2  0E00               	movlw	0
  4967  003BD4  6E48               	movwf	update_LCD_count@count,c
  4968  003BD6  0100               	movlb	0	; () banked
  4969  003BD8  5194               	movf	_direction& (0+255),w,b
  4970  003BDA  EC89  F010         	call	_update_LCD_count
  4971  003BDE  0012               	return		;funcret
  4972  003BE0                     __end_of_WAIT_N_SEC:
  4973                           	opt stack 0
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodl	equ	0xFF3
  4979                           intcon2	equ	0xFF1
  4980                           postinc0	equ	0xFEE
  4981                           wreg	equ	0xFE8
  4982                           postdec1	equ	0xFE5
  4983                           fsr1l	equ	0xFE1
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _update_LCD_count *****************
  4987 ;; Defined at:
  4988 ;;		line 654 in file "Lab9test.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  direction       1    wreg     unsigned char 
  4991 ;;  count           1   71[COMRAM] unsigned char 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  direction       1   73[COMRAM] unsigned char 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;		None               void
  4996 ;; Registers used:
  4997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5003 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;Total ram usage:        3 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    9
  5010 ;; This function calls:
  5011 ;;		___awdiv
  5012 ;;		___awmod
  5013 ;;		_drawtext
  5014 ;; This function is called by:
  5015 ;;		_WAIT_N_SEC
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text16
  5020  002112                     __ptext16:
  5021                           	opt stack 0
  5022  002112                     _update_LCD_count:
  5023                           	opt stack 19
  5024                           
  5025                           ;incstack = 0
  5026                           ;update_LCD_count@direction stored from wreg
  5027  002112  6E4A               	movwf	update_LCD_count@direction,c
  5028                           
  5029                           ;Lab9test.c: 656: PORTD = (PORTD & 0x80) | array[count];
  5030  002114  5048               	movf	update_LCD_count@count,w,c
  5031  002116  0D01               	mullw	1
  5032  002118  0EB4               	movlw	low _array
  5033  00211A  24F3               	addwf	prodl,w,c
  5034  00211C  6ED9               	movwf	fsr2l,c
  5035  00211E  0E00               	movlw	high _array
  5036  002120  20F4               	addwfc	prodh,w,c
  5037  002122  6EDA               	movwf	fsr2h,c
  5038  002124  50DF               	movf	indf2,w,c
  5039  002126  6E49               	movwf	??_update_LCD_count& (0+255),c
  5040  002128  5083               	movf	3971,w,c	;volatile
  5041  00212A  0B80               	andlw	128
  5042  00212C  1049               	iorwf	??_update_LCD_count,w,c
  5043  00212E  6E83               	movwf	3971,c	;volatile
  5044                           
  5045                           ;Lab9test.c: 657: switch (direction)
  5046  002130  D0B6               	goto	l7198
  5047  002132                     l7180:
  5048                           
  5049                           ;Lab9test.c: 660: EW_Count[0] = count/10 + '0';
  5050  002132  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5051  002136  6A16               	clrf	___awdiv@dividend+1,c
  5052  002138  0E00               	movlw	0
  5053  00213A  6E18               	movwf	___awdiv@divisor+1,c
  5054  00213C  0E0A               	movlw	10
  5055  00213E  6E17               	movwf	___awdiv@divisor,c
  5056  002140  EC1B  F019         	call	___awdiv	;wreg free
  5057  002144  5015               	movf	?___awdiv,w,c
  5058  002146  0F30               	addlw	48
  5059  002148  0100               	movlb	0	; () banked
  5060  00214A  6FC2               	movwf	_EW_Count& (0+255),b
  5061                           
  5062                           ;Lab9test.c: 661: EW_Count[1] = count%10 + '0';
  5063  00214C  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5064  002150  6A10               	clrf	___awmod@dividend+1,c
  5065  002152  0E00               	movlw	0
  5066  002154  6E12               	movwf	___awmod@divisor+1,c
  5067  002156  0E0A               	movlw	10
  5068  002158  6E11               	movwf	___awmod@divisor,c
  5069  00215A  ECB8  F01A         	call	___awmod	;wreg free
  5070  00215E  500F               	movf	?___awmod,w,c
  5071  002160  0F30               	addlw	48
  5072  002162  0100               	movlb	0	; () banked
  5073  002164  6FC3               	movwf	(_EW_Count+1)& (0+255),b
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;Lab9test.c: 662: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5077  002166  0E1E               	movlw	30
  5078  002168  6E37               	movwf	drawtext@y,c
  5079  00216A  0EC2               	movlw	low _EW_Count
  5080  00216C  6E38               	movwf	drawtext@_text,c
  5081  00216E  0E00               	movlw	high _EW_Count
  5082  002170  6E39               	movwf	drawtext@_text+1,c
  5083  002172  0E07               	movlw	7
  5084  002174  6E3B               	movwf	drawtext@color+1,c
  5085  002176  683A               	setf	drawtext@color,c
  5086  002178  0E00               	movlw	0
  5087  00217A  6E3D               	movwf	drawtext@bg+1,c
  5088  00217C  0E00               	movlw	0
  5089  00217E  6E3C               	movwf	drawtext@bg,c
  5090  002180  0E02               	movlw	2
  5091  002182  6E3E               	movwf	drawtext@size,c
  5092  002184  0E64               	movlw	100
  5093  002186  EC87  F016         	call	_drawtext
  5094                           
  5095                           ;Lab9test.c: 663: break;
  5096  00218A  D097               	goto	l523
  5097  00218C                     l7184:
  5098                           
  5099                           ;Lab9test.c: 666: NS_Count[0] = count/10 + '0';
  5100  00218C  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5101  002190  6A16               	clrf	___awdiv@dividend+1,c
  5102  002192  0E00               	movlw	0
  5103  002194  6E18               	movwf	___awdiv@divisor+1,c
  5104  002196  0E0A               	movlw	10
  5105  002198  6E17               	movwf	___awdiv@divisor,c
  5106  00219A  EC1B  F019         	call	___awdiv	;wreg free
  5107  00219E  5015               	movf	?___awdiv,w,c
  5108  0021A0  0F30               	addlw	48
  5109  0021A2  0100               	movlb	0	; () banked
  5110  0021A4  6FC8               	movwf	_NS_Count& (0+255),b
  5111                           
  5112                           ;Lab9test.c: 667: NS_Count[1] = count%10 + '0';
  5113  0021A6  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5114  0021AA  6A10               	clrf	___awmod@dividend+1,c
  5115  0021AC  0E00               	movlw	0
  5116  0021AE  6E12               	movwf	___awmod@divisor+1,c
  5117  0021B0  0E0A               	movlw	10
  5118  0021B2  6E11               	movwf	___awmod@divisor,c
  5119  0021B4  ECB8  F01A         	call	___awmod	;wreg free
  5120  0021B8  500F               	movf	?___awmod,w,c
  5121  0021BA  0F30               	addlw	48
  5122  0021BC  0100               	movlb	0	; () banked
  5123  0021BE  6FC9               	movwf	(_NS_Count+1)& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;Lab9test.c: 668: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5127  0021C0  0E5A               	movlw	90
  5128  0021C2  6E37               	movwf	drawtext@y,c
  5129  0021C4  0EC8               	movlw	low _NS_Count
  5130  0021C6  6E38               	movwf	drawtext@_text,c
  5131  0021C8  0E00               	movlw	high _NS_Count
  5132  0021CA  6E39               	movwf	drawtext@_text+1,c
  5133  0021CC  0E00               	movlw	0
  5134  0021CE  6E3B               	movwf	drawtext@color+1,c
  5135  0021D0  0E1F               	movlw	31
  5136  0021D2  6E3A               	movwf	drawtext@color,c
  5137  0021D4  0E00               	movlw	0
  5138  0021D6  6E3D               	movwf	drawtext@bg+1,c
  5139  0021D8  0E00               	movlw	0
  5140  0021DA  6E3C               	movwf	drawtext@bg,c
  5141  0021DC  0E02               	movlw	2
  5142  0021DE  6E3E               	movwf	drawtext@size,c
  5143  0021E0  0E64               	movlw	100
  5144  0021E2  EC87  F016         	call	_drawtext
  5145                           
  5146                           ;Lab9test.c: 669: break;
  5147  0021E6  D069               	goto	l523
  5148  0021E8                     l7188:
  5149                           
  5150                           ;Lab9test.c: 672: EWLT_Count[0] = count/10 + '0';
  5151  0021E8  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5152  0021EC  6A16               	clrf	___awdiv@dividend+1,c
  5153  0021EE  0E00               	movlw	0
  5154  0021F0  6E18               	movwf	___awdiv@divisor+1,c
  5155  0021F2  0E0A               	movlw	10
  5156  0021F4  6E17               	movwf	___awdiv@divisor,c
  5157  0021F6  EC1B  F019         	call	___awdiv	;wreg free
  5158  0021FA  5015               	movf	?___awdiv,w,c
  5159  0021FC  0F30               	addlw	48
  5160  0021FE  0100               	movlb	0	; () banked
  5161  002200  6FBF               	movwf	_EWLT_Count& (0+255),b
  5162                           
  5163                           ;Lab9test.c: 673: EWLT_Count[1] = count%10 + '0';
  5164  002202  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5165  002206  6A10               	clrf	___awmod@dividend+1,c
  5166  002208  0E00               	movlw	0
  5167  00220A  6E12               	movwf	___awmod@divisor+1,c
  5168  00220C  0E0A               	movlw	10
  5169  00220E  6E11               	movwf	___awmod@divisor,c
  5170  002210  ECB8  F01A         	call	___awmod	;wreg free
  5171  002214  500F               	movf	?___awmod,w,c
  5172  002216  0F30               	addlw	48
  5173  002218  0100               	movlb	0	; () banked
  5174  00221A  6FC0               	movwf	(_EWLT_Count+1)& (0+255),b
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;Lab9test.c: 674: drawtext(100, 50 + 10, EWLT_Count,
  5178                           ;Lab9test.c: 675: 0xFFFF, 0x0000, 2);
  5179  00221C  0E3C               	movlw	60
  5180  00221E  6E37               	movwf	drawtext@y,c
  5181  002220  0EBF               	movlw	low _EWLT_Count
  5182  002222  6E38               	movwf	drawtext@_text,c
  5183  002224  0E00               	movlw	high _EWLT_Count
  5184  002226  6E39               	movwf	drawtext@_text+1,c
  5185  002228  0EFF               	movlw	255
  5186  00222A  6E3B               	movwf	drawtext@color+1,c
  5187  00222C  683A               	setf	drawtext@color,c
  5188  00222E  0E00               	movlw	0
  5189  002230  6E3D               	movwf	drawtext@bg+1,c
  5190  002232  0E00               	movlw	0
  5191  002234  6E3C               	movwf	drawtext@bg,c
  5192  002236  0E02               	movlw	2
  5193  002238  6E3E               	movwf	drawtext@size,c
  5194  00223A  0E64               	movlw	100
  5195  00223C  EC87  F016         	call	_drawtext
  5196                           
  5197                           ;Lab9test.c: 676: break;
  5198  002240  D03C               	goto	l523
  5199  002242                     l7192:
  5200                           
  5201                           ;Lab9test.c: 679: NSLT_Count[0] = count/10 + '0';
  5202  002242  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5203  002246  6A16               	clrf	___awdiv@dividend+1,c
  5204  002248  0E00               	movlw	0
  5205  00224A  6E18               	movwf	___awdiv@divisor+1,c
  5206  00224C  0E0A               	movlw	10
  5207  00224E  6E17               	movwf	___awdiv@divisor,c
  5208  002250  EC1B  F019         	call	___awdiv	;wreg free
  5209  002254  5015               	movf	?___awdiv,w,c
  5210  002256  0F30               	addlw	48
  5211  002258  0100               	movlb	0	; () banked
  5212  00225A  6FC5               	movwf	_NSLT_Count& (0+255),b
  5213                           
  5214                           ;Lab9test.c: 680: NSLT_Count[1] = count%10 + '0';
  5215  00225C  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5216  002260  6A10               	clrf	___awmod@dividend+1,c
  5217  002262  0E00               	movlw	0
  5218  002264  6E12               	movwf	___awmod@divisor+1,c
  5219  002266  0E0A               	movlw	10
  5220  002268  6E11               	movwf	___awmod@divisor,c
  5221  00226A  ECB8  F01A         	call	___awmod	;wreg free
  5222  00226E  500F               	movf	?___awmod,w,c
  5223  002270  0F30               	addlw	48
  5224  002272  0100               	movlb	0	; () banked
  5225  002274  6FC6               	movwf	(_NSLT_Count+1)& (0+255),b
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;Lab9test.c: 681: drawtext(100, 110 + 10, NSLT_Count,
  5229                           ;Lab9test.c: 682: 0xF81F, 0x0000, 2);
  5230  002276  0E78               	movlw	120
  5231  002278  6E37               	movwf	drawtext@y,c
  5232  00227A  0EC5               	movlw	low _NSLT_Count
  5233  00227C  6E38               	movwf	drawtext@_text,c
  5234  00227E  0E00               	movlw	high _NSLT_Count
  5235  002280  6E39               	movwf	drawtext@_text+1,c
  5236  002282  0EF8               	movlw	248
  5237  002284  6E3B               	movwf	drawtext@color+1,c
  5238  002286  0E1F               	movlw	31
  5239  002288  6E3A               	movwf	drawtext@color,c
  5240  00228A  0E00               	movlw	0
  5241  00228C  6E3D               	movwf	drawtext@bg+1,c
  5242  00228E  0E00               	movlw	0
  5243  002290  6E3C               	movwf	drawtext@bg,c
  5244  002292  0E02               	movlw	2
  5245  002294  6E3E               	movwf	drawtext@size,c
  5246  002296  0E64               	movlw	100
  5247  002298  EC87  F016         	call	_drawtext
  5248                           
  5249                           ;Lab9test.c: 684: }
  5250                           
  5251                           ;Lab9test.c: 683: break;
  5252  00229C  D00E               	goto	l523
  5253  00229E                     l7198:
  5254  00229E  504A               	movf	update_LCD_count@direction,w,c
  5255                           
  5256                           ; Switch size 1, requested type "space"
  5257                           ; Number of cases is 4, Range of values is 0 to 3
  5258                           ; switch strategies available:
  5259                           ; Name         Instructions Cycles
  5260                           ; simple_byte           13     7 (average)
  5261                           ;	Chosen strategy is simple_byte
  5262  0022A0  0A00               	xorlw	0	; case 0
  5263  0022A2  B4D8               	btfsc	status,2,c
  5264  0022A4  D746               	goto	l7180
  5265  0022A6  0A01               	xorlw	1	; case 1
  5266  0022A8  B4D8               	btfsc	status,2,c
  5267  0022AA  D79E               	goto	l7188
  5268  0022AC  0A03               	xorlw	3	; case 2
  5269  0022AE  B4D8               	btfsc	status,2,c
  5270  0022B0  D76D               	goto	l7184
  5271  0022B2  0A01               	xorlw	1	; case 3
  5272  0022B4  B4D8               	btfsc	status,2,c
  5273  0022B6  D7C5               	goto	l7192
  5274  0022B8  D000               	goto	l523
  5275  0022BA                     l523:
  5276  0022BA  0012               	return		;funcret
  5277  0022BC                     __end_of_update_LCD_count:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon2	equ	0xFF1
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function _WAIT_1_SEC *****************
  5296 ;; Defined at:
  5297 ;;		line 471 in file "Lab9test.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;		None               void
  5304 ;; Registers used:
  5305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;Total ram usage:        0 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:   10
  5318 ;; This function calls:
  5319 ;;		_WAIT_HALF_SEC
  5320 ;;		_drawtext
  5321 ;;		_strcpy
  5322 ;;		_update_LCD_misc
  5323 ;; This function is called by:
  5324 ;;		_WAIT_N_SEC
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text17
  5329  0034EE                     __ptext17:
  5330                           	opt stack 0
  5331  0034EE                     _WAIT_1_SEC:
  5332                           	opt stack 18
  5333                           
  5334                           ;Lab9test.c: 473: PORTDbits.RD7 = 1;
  5335                           
  5336                           ;incstack = 0
  5337  0034EE  8E83               	bsf	3971,7,c	;volatile
  5338                           
  5339                           ;Lab9test.c: 474: strcpy(txt,"*");
  5340  0034F0  C064  F00F         	movff	_txt,strcpy@to
  5341  0034F4  C065  F010         	movff	_txt+1,strcpy@to+1
  5342  0034F8  0E2D               	movlw	low STR_5
  5343  0034FA  6E11               	movwf	strcpy@from,c
  5344  0034FC  0EFD               	movlw	high STR_5
  5345  0034FE  6E12               	movwf	strcpy@from+1,c
  5346  003500  ECF0  F01D         	call	_strcpy	;wreg free
  5347                           
  5348                           ;Lab9test.c: 475: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5349  003504  0E0A               	movlw	10
  5350  003506  6E37               	movwf	drawtext@y,c
  5351  003508  C064  F038         	movff	_txt,drawtext@_text
  5352  00350C  C065  F039         	movff	_txt+1,drawtext@_text+1
  5353  003510  0EFF               	movlw	255
  5354  003512  6E3B               	movwf	drawtext@color+1,c
  5355  003514  683A               	setf	drawtext@color,c
  5356  003516  0E00               	movlw	0
  5357  003518  6E3D               	movwf	drawtext@bg+1,c
  5358  00351A  0E00               	movlw	0
  5359  00351C  6E3C               	movwf	drawtext@bg,c
  5360  00351E  0E01               	movlw	1
  5361  003520  6E3E               	movwf	drawtext@size,c
  5362  003522  0E78               	movlw	120
  5363  003524  EC87  F016         	call	_drawtext
  5364                           
  5365                           ;Lab9test.c: 477: WAIT_HALF_SEC();
  5366  003528  ECB6  F01E         	call	_WAIT_HALF_SEC	;wreg free
  5367                           
  5368                           ;Lab9test.c: 479: PORTDbits.RD7 = 0;
  5369  00352C  9E83               	bcf	3971,7,c	;volatile
  5370                           
  5371                           ;Lab9test.c: 480: strcpy(txt," ");
  5372  00352E  C064  F00F         	movff	_txt,strcpy@to
  5373  003532  C065  F010         	movff	_txt+1,strcpy@to+1
  5374  003536  0E2B               	movlw	low STR_14
  5375  003538  6E11               	movwf	strcpy@from,c
  5376  00353A  0EFD               	movlw	high STR_14
  5377  00353C  6E12               	movwf	strcpy@from+1,c
  5378  00353E  ECF0  F01D         	call	_strcpy	;wreg free
  5379                           
  5380                           ;Lab9test.c: 481: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5381  003542  0E0A               	movlw	10
  5382  003544  6E37               	movwf	drawtext@y,c
  5383  003546  C064  F038         	movff	_txt,drawtext@_text
  5384  00354A  C065  F039         	movff	_txt+1,drawtext@_text+1
  5385  00354E  0EFF               	movlw	255
  5386  003550  6E3B               	movwf	drawtext@color+1,c
  5387  003552  683A               	setf	drawtext@color,c
  5388  003554  0E00               	movlw	0
  5389  003556  6E3D               	movwf	drawtext@bg+1,c
  5390  003558  0E00               	movlw	0
  5391  00355A  6E3C               	movwf	drawtext@bg,c
  5392  00355C  0E01               	movlw	1
  5393  00355E  6E3E               	movwf	drawtext@size,c
  5394  003560  0E78               	movlw	120
  5395  003562  EC87  F016         	call	_drawtext
  5396                           
  5397                           ;Lab9test.c: 483: WAIT_HALF_SEC();
  5398  003566  ECB6  F01E         	call	_WAIT_HALF_SEC	;wreg free
  5399                           
  5400                           ;Lab9test.c: 484: update_LCD_misc();
  5401  00356A  EC8C  F00C         	call	_update_LCD_misc	;wreg free
  5402  00356E  0012               	return		;funcret
  5403  003570                     __end_of_WAIT_1_SEC:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon2	equ	0xFF1
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           postdec1	equ	0xFE5
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _update_LCD_misc *****************
  5422 ;; Defined at:
  5423 ;;		line 707 in file "Lab9test.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  volts           3   90[COMRAM] float 
  5428 ;;  nStep           2   88[COMRAM] int 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        5 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    9
  5445 ;; This function calls:
  5446 ;;		_Do_Init
  5447 ;;		___awtoft
  5448 ;;		___ftdiv
  5449 ;;		___ftge
  5450 ;;		___wmul
  5451 ;;		_drawtext
  5452 ;;		_get_full_ADC
  5453 ;;		_printf
  5454 ;; This function is called by:
  5455 ;;		_WAIT_1_SEC
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text18
  5460  001918                     __ptext18:
  5461                           	opt stack 0
  5462  001918                     _update_LCD_misc:
  5463                           	opt stack 18
  5464                           
  5465                           ;Lab9test.c: 709: int nStep = get_full_ADC ();
  5466                           
  5467                           ;incstack = 0
  5468  001918  EC5F  F01E         	call	_get_full_ADC	;wreg free
  5469  00191C  C00F  F059         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5470  001920  C010  F05A         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5471                           
  5472                           ;Lab9test.c: 710: float volts = nStep*5/1024.0;
  5473  001924  C059  F01D         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5474  001928  C05A  F01E         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5475  00192C  0E00               	movlw	0
  5476  00192E  6E20               	movwf	___wmul@multiplicand+1,c
  5477  001930  0E05               	movlw	5
  5478  001932  6E1F               	movwf	___wmul@multiplicand,c
  5479  001934  EC4B  F01E         	call	___wmul	;wreg free
  5480  001938  C01D  F023         	movff	?___wmul,___awtoft@c
  5481  00193C  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  5482  001940  ECB9  F01D         	call	___awtoft	;wreg free
  5483  001944  C023  F027         	movff	?___awtoft,___ftdiv@f1
  5484  001948  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  5485  00194C  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  5486  001950  0E00               	movlw	0
  5487  001952  6E2A               	movwf	___ftdiv@f2,c
  5488  001954  0E80               	movlw	128
  5489  001956  6E2B               	movwf	___ftdiv@f2+1,c
  5490  001958  0E44               	movlw	68
  5491  00195A  6E2C               	movwf	___ftdiv@f2+2,c
  5492  00195C  EC16  F016         	call	___ftdiv	;wreg free
  5493  001960  C027  F05B         	movff	?___ftdiv,update_LCD_misc@volts
  5494  001964  C028  F05C         	movff	?___ftdiv+1,update_LCD_misc@volts+1
  5495  001968  C029  F05D         	movff	?___ftdiv+2,update_LCD_misc@volts+2
  5496                           
  5497                           ;Lab9test.c: 712: printf ("volts are %0.3f\r\n\n", volts);
  5498  00196C  0EDE               	movlw	low STR_15
  5499  00196E  6E4E               	movwf	printf@f,c
  5500  001970  0EFC               	movlw	high STR_15
  5501  001972  6E4F               	movwf	printf@f+1,c
  5502  001974  C05B  F050         	movff	update_LCD_misc@volts,?_printf+2
  5503  001978  C05C  F051         	movff	update_LCD_misc@volts+1,?_printf+3
  5504  00197C  C05D  F052         	movff	update_LCD_misc@volts+2,?_printf+4
  5505  001980  EC0E  F000         	call	_printf	;wreg free
  5506                           
  5507                           ;Lab9test.c: 715: if (volts < 2.570)
  5508  001984  C05B  F00F         	movff	update_LCD_misc@volts,___ftge@ff1
  5509  001988  C05C  F010         	movff	update_LCD_misc@volts+1,___ftge@ff1+1
  5510  00198C  C05D  F011         	movff	update_LCD_misc@volts+2,___ftge@ff1+2
  5511  001990  0E7B               	movlw	123
  5512  001992  6E12               	movwf	___ftge@ff2,c
  5513  001994  0E24               	movlw	36
  5514  001996  6E13               	movwf	___ftge@ff2+1,c
  5515  001998  0E40               	movlw	64
  5516  00199A  6E14               	movwf	___ftge@ff2+2,c
  5517  00199C  ECD0  F018         	call	___ftge	;wreg free
  5518  0019A0  B0D8               	btfsc	status,0,c
  5519  0019A2  D002               	goto	l6944
  5520                           
  5521                           ;Lab9test.c: 716: {
  5522                           ;Lab9test.c: 717: SW_MODE = 1;
  5523  0019A4  0E01               	movlw	1
  5524  0019A6  D001               	goto	L1
  5525  0019A8                     l6944:
  5526                           
  5527                           ;Lab9test.c: 719: else
  5528                           ;Lab9test.c: 720: {
  5529                           ;Lab9test.c: 721: SW_MODE = 0;
  5530  0019A8  0E00               	movlw	0
  5531  0019AA                     L1:
  5532  0019AA  0100               	movlb	0	; () banked
  5533  0019AC  6F91               	movwf	_SW_MODE& (0+255),b
  5534  0019AE  D000               	goto	l6946
  5535  0019B0                     l6946:
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;Lab9test.c: 722: }
  5539                           ;Lab9test.c: 725: SW_EWPED = EWPED_SW;
  5540  0019B0  C08D  F090         	movff	_EWPED_SW,_SW_EWPED
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;Lab9test.c: 726: SW_EWLT = PORTAbits.RA4;
  5544  0019B4  0E00               	movlw	0
  5545  0019B6  B880               	btfsc	3968,4,c	;volatile
  5546  0019B8  0E01               	movlw	1
  5547  0019BA  0100               	movlb	0	; () banked
  5548  0019BC  6F8F               	movwf	_SW_EWLT& (0+255),b
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;Lab9test.c: 727: SW_NSPED = NSPED_SW;
  5552  0019BE  C08E  F093         	movff	_NSPED_SW,_SW_NSPED
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;Lab9test.c: 728: SW_NSLT = PORTAbits.RA3;
  5556  0019C2  0E00               	movlw	0
  5557  0019C4  B680               	btfsc	3968,3,c	;volatile
  5558  0019C6  0E01               	movlw	1
  5559  0019C8  0100               	movlb	0	; () banked
  5560  0019CA  6F92               	movwf	_SW_NSLT& (0+255),b
  5561                           
  5562                           ;Lab9test.c: 730: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5563  0019CC  0100               	movlb	0	; () banked
  5564  0019CE  5191               	movf	_SW_MODE& (0+255),w,b
  5565  0019D0  0100               	movlb	0	; () banked
  5566  0019D2  A4D8               	btfss	status,2,c
  5567  0019D4  D002               	goto	l6956
  5568                           
  5569                           ; BSR set to: 0
  5570  0019D6  0E4E               	movlw	78
  5571  0019D8  D001               	goto	L2
  5572  0019DA                     l6956:
  5573                           
  5574                           ; BSR set to: 0
  5575  0019DA  0E44               	movlw	68
  5576  0019DC                     L2:
  5577  0019DC  0100               	movlb	0	; () banked
  5578  0019DE  6FD7               	movwf	_SW_MODE_Txt& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;Lab9test.c: 731: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5582  0019E0  0100               	movlb	0	; () banked
  5583  0019E2  5193               	movf	_SW_NSPED& (0+255),w,b
  5584  0019E4  0100               	movlb	0	; () banked
  5585  0019E6  A4D8               	btfss	status,2,c
  5586  0019E8  D002               	goto	l6960
  5587                           
  5588                           ; BSR set to: 0
  5589  0019EA  0E30               	movlw	48
  5590  0019EC  D001               	goto	L3
  5591  0019EE                     l6960:
  5592                           
  5593                           ; BSR set to: 0
  5594  0019EE  0E31               	movlw	49
  5595  0019F0                     L3:
  5596  0019F0  0100               	movlb	0	; () banked
  5597  0019F2  6FDB               	movwf	_SW_NSPED_Txt& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;Lab9test.c: 732: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5601  0019F4  0100               	movlb	0	; () banked
  5602  0019F6  5192               	movf	_SW_NSLT& (0+255),w,b
  5603  0019F8  0100               	movlb	0	; () banked
  5604  0019FA  A4D8               	btfss	status,2,c
  5605  0019FC  D002               	goto	l6964
  5606                           
  5607                           ; BSR set to: 0
  5608  0019FE  0E30               	movlw	48
  5609  001A00  D001               	goto	L4
  5610  001A02                     l6964:
  5611                           
  5612                           ; BSR set to: 0
  5613  001A02  0E31               	movlw	49
  5614  001A04                     L4:
  5615  001A04  0100               	movlb	0	; () banked
  5616  001A06  6FD9               	movwf	_SW_NSLT_Txt& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;Lab9test.c: 733: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5620  001A08  0100               	movlb	0	; () banked
  5621  001A0A  5190               	movf	_SW_EWPED& (0+255),w,b
  5622  001A0C  0100               	movlb	0	; () banked
  5623  001A0E  A4D8               	btfss	status,2,c
  5624  001A10  D002               	goto	l6968
  5625                           
  5626                           ; BSR set to: 0
  5627  001A12  0E30               	movlw	48
  5628  001A14  D001               	goto	L5
  5629  001A16                     l6968:
  5630                           
  5631                           ; BSR set to: 0
  5632  001A16  0E31               	movlw	49
  5633  001A18                     L5:
  5634  001A18  6E6F               	movwf	_SW_EWPED_Txt,c
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;Lab9test.c: 734: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5638  001A1A  0100               	movlb	0	; () banked
  5639  001A1C  518F               	movf	_SW_EWLT& (0+255),w,b
  5640  001A1E  0100               	movlb	0	; () banked
  5641  001A20  A4D8               	btfss	status,2,c
  5642  001A22  D002               	goto	l6972
  5643                           
  5644                           ; BSR set to: 0
  5645  001A24  0E30               	movlw	48
  5646  001A26  D001               	goto	L6
  5647  001A28                     l6972:
  5648                           
  5649                           ; BSR set to: 0
  5650  001A28  0E31               	movlw	49
  5651  001A2A                     L6:
  5652  001A2A  6E6D               	movwf	_SW_EWLT_Txt,c
  5653  001A2C  D000               	goto	l6974
  5654  001A2E                     l6974:
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;Lab9test.c: 736: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5658  001A2E  0E0A               	movlw	10
  5659  001A30  6E37               	movwf	drawtext@y,c
  5660  001A32  0ED1               	movlw	low _Act_Mode_Txt
  5661  001A34  6E38               	movwf	drawtext@_text,c
  5662  001A36  0E00               	movlw	high _Act_Mode_Txt
  5663  001A38  6E39               	movwf	drawtext@_text+1,c
  5664  001A3A  0EFF               	movlw	255
  5665  001A3C  6E3B               	movwf	drawtext@color+1,c
  5666  001A3E  683A               	setf	drawtext@color,c
  5667  001A40  0E00               	movlw	0
  5668  001A42  6E3D               	movwf	drawtext@bg+1,c
  5669  001A44  0E00               	movlw	0
  5670  001A46  6E3C               	movwf	drawtext@bg,c
  5671  001A48  0E01               	movlw	1
  5672  001A4A  6E3E               	movwf	drawtext@size,c
  5673  001A4C  0E23               	movlw	35
  5674  001A4E  EC87  F016         	call	_drawtext
  5675                           
  5676                           ;Lab9test.c: 737: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5677  001A52  0E95               	movlw	149
  5678  001A54  6E37               	movwf	drawtext@y,c
  5679  001A56  0E6F               	movlw	low _SW_EWPED_Txt
  5680  001A58  6E38               	movwf	drawtext@_text,c
  5681  001A5A  0E00               	movlw	high _SW_EWPED_Txt
  5682  001A5C  6E39               	movwf	drawtext@_text+1,c
  5683  001A5E  0EFF               	movlw	255
  5684  001A60  6E3B               	movwf	drawtext@color+1,c
  5685  001A62  683A               	setf	drawtext@color,c
  5686  001A64  0E00               	movlw	0
  5687  001A66  6E3D               	movwf	drawtext@bg+1,c
  5688  001A68  0E00               	movlw	0
  5689  001A6A  6E3C               	movwf	drawtext@bg,c
  5690  001A6C  0E01               	movlw	1
  5691  001A6E  6E3E               	movwf	drawtext@size,c
  5692  001A70  0E06               	movlw	6
  5693  001A72  EC87  F016         	call	_drawtext
  5694                           
  5695                           ;Lab9test.c: 738: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5696  001A76  0E95               	movlw	149
  5697  001A78  6E37               	movwf	drawtext@y,c
  5698  001A7A  0E6D               	movlw	low _SW_EWLT_Txt
  5699  001A7C  6E38               	movwf	drawtext@_text,c
  5700  001A7E  0E00               	movlw	high _SW_EWLT_Txt
  5701  001A80  6E39               	movwf	drawtext@_text+1,c
  5702  001A82  0EFF               	movlw	255
  5703  001A84  6E3B               	movwf	drawtext@color+1,c
  5704  001A86  683A               	setf	drawtext@color,c
  5705  001A88  0E00               	movlw	0
  5706  001A8A  6E3D               	movwf	drawtext@bg+1,c
  5707  001A8C  0E00               	movlw	0
  5708  001A8E  6E3C               	movwf	drawtext@bg,c
  5709  001A90  0E01               	movlw	1
  5710  001A92  6E3E               	movwf	drawtext@size,c
  5711  001A94  0E20               	movlw	32
  5712  001A96  EC87  F016         	call	_drawtext
  5713                           
  5714                           ;Lab9test.c: 739: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5715  001A9A  0E95               	movlw	149
  5716  001A9C  6E37               	movwf	drawtext@y,c
  5717  001A9E  0EDB               	movlw	low _SW_NSPED_Txt
  5718  001AA0  6E38               	movwf	drawtext@_text,c
  5719  001AA2  0E00               	movlw	high _SW_NSPED_Txt
  5720  001AA4  6E39               	movwf	drawtext@_text+1,c
  5721  001AA6  0EFF               	movlw	255
  5722  001AA8  6E3B               	movwf	drawtext@color+1,c
  5723  001AAA  683A               	setf	drawtext@color,c
  5724  001AAC  0E00               	movlw	0
  5725  001AAE  6E3D               	movwf	drawtext@bg+1,c
  5726  001AB0  0E00               	movlw	0
  5727  001AB2  6E3C               	movwf	drawtext@bg,c
  5728  001AB4  0E01               	movlw	1
  5729  001AB6  6E3E               	movwf	drawtext@size,c
  5730  001AB8  0E3A               	movlw	58
  5731  001ABA  EC87  F016         	call	_drawtext
  5732                           
  5733                           ;Lab9test.c: 740: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5734  001ABE  0E95               	movlw	149
  5735  001AC0  6E37               	movwf	drawtext@y,c
  5736  001AC2  0ED9               	movlw	low _SW_NSLT_Txt
  5737  001AC4  6E38               	movwf	drawtext@_text,c
  5738  001AC6  0E00               	movlw	high _SW_NSLT_Txt
  5739  001AC8  6E39               	movwf	drawtext@_text+1,c
  5740  001ACA  0EFF               	movlw	255
  5741  001ACC  6E3B               	movwf	drawtext@color+1,c
  5742  001ACE  683A               	setf	drawtext@color,c
  5743  001AD0  0E00               	movlw	0
  5744  001AD2  6E3D               	movwf	drawtext@bg+1,c
  5745  001AD4  0E00               	movlw	0
  5746  001AD6  6E3C               	movwf	drawtext@bg,c
  5747  001AD8  0E01               	movlw	1
  5748  001ADA  6E3E               	movwf	drawtext@size,c
  5749  001ADC  0E57               	movlw	87
  5750  001ADE  EC87  F016         	call	_drawtext
  5751                           
  5752                           ;Lab9test.c: 742: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5753  001AE2  0E95               	movlw	149
  5754  001AE4  6E37               	movwf	drawtext@y,c
  5755  001AE6  0ED7               	movlw	low _SW_MODE_Txt
  5756  001AE8  6E38               	movwf	drawtext@_text,c
  5757  001AEA  0E00               	movlw	high _SW_MODE_Txt
  5758  001AEC  6E39               	movwf	drawtext@_text+1,c
  5759  001AEE  0EFF               	movlw	255
  5760  001AF0  6E3B               	movwf	drawtext@color+1,c
  5761  001AF2  683A               	setf	drawtext@color,c
  5762  001AF4  0E00               	movlw	0
  5763  001AF6  6E3D               	movwf	drawtext@bg+1,c
  5764  001AF8  0E00               	movlw	0
  5765  001AFA  6E3C               	movwf	drawtext@bg,c
  5766  001AFC  0E01               	movlw	1
  5767  001AFE  6E3E               	movwf	drawtext@size,c
  5768  001B00  0E70               	movlw	112
  5769  001B02  EC87  F016         	call	_drawtext
  5770                           
  5771                           ;Lab9test.c: 744: Do_Init();
  5772  001B06  EC72  F01E         	call	_Do_Init	;wreg free
  5773                           
  5774                           ;Lab9test.c: 747: if (NSPED_SW == 1)
  5775  001B0A  0100               	movlb	0	; () banked
  5776  001B0C  058E               	decf	_NSPED_SW& (0+255),w,b
  5777  001B0E  A4D8               	btfss	status,2,c
  5778  001B10  D007               	goto	l6992
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;Lab9test.c: 748: {
  5782                           ;Lab9test.c: 750: printf ("INT0 interrupt pin detected \r\n");
  5783  001B12  0E58               	movlw	low STR_16
  5784  001B14  6E4E               	movwf	printf@f,c
  5785  001B16  0EFC               	movlw	high STR_16
  5786  001B18  6E4F               	movwf	printf@f+1,c
  5787  001B1A  EC0E  F000         	call	_printf	;wreg free
  5788  001B1E  D000               	goto	l6992
  5789  001B20                     l6992:
  5790                           
  5791                           ;Lab9test.c: 751: }
  5792                           ;Lab9test.c: 753: if (EWPED_SW == 1)
  5793  001B20  0100               	movlb	0	; () banked
  5794  001B22  058D               	decf	_EWPED_SW& (0+255),w,b
  5795  001B24  A4D8               	btfss	status,2,c
  5796  001B26  D007               	goto	l6996
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;Lab9test.c: 754: {
  5800                           ;Lab9test.c: 756: printf ("INT1 interrupt pin detected \r\n");
  5801  001B28  0E77               	movlw	low STR_17
  5802  001B2A  6E4E               	movwf	printf@f,c
  5803  001B2C  0EFC               	movlw	high STR_17
  5804  001B2E  6E4F               	movwf	printf@f+1,c
  5805  001B30  EC0E  F000         	call	_printf	;wreg free
  5806  001B34  D000               	goto	l6996
  5807  001B36                     l6996:
  5808                           
  5809                           ;Lab9test.c: 757: }
  5810                           ;Lab9test.c: 759: if (INT2_flag == 1)
  5811  001B36  0100               	movlb	0	; () banked
  5812  001B38  0587               	decf	_INT2_flag& (0+255),w,b
  5813  001B3A  0100               	movlb	0	; () banked
  5814  001B3C  1188               	iorwf	(_INT2_flag+1)& (0+255),w,b
  5815  001B3E  A4D8               	btfss	status,2,c
  5816  001B40  D00C               	goto	l548
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;Lab9test.c: 760: {
  5820                           ;Lab9test.c: 761: INT2_flag = 0;
  5821  001B42  0E00               	movlw	0
  5822  001B44  0100               	movlb	0	; () banked
  5823  001B46  6F88               	movwf	(_INT2_flag+1)& (0+255),b
  5824  001B48  0E00               	movlw	0
  5825  001B4A  6F87               	movwf	_INT2_flag& (0+255),b
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;Lab9test.c: 762: printf ("INT2 interrupt pin detected \r\n");
  5829  001B4C  0E96               	movlw	low STR_18
  5830  001B4E  6E4E               	movwf	printf@f,c
  5831  001B50  0EFC               	movlw	high STR_18
  5832  001B52  6E4F               	movwf	printf@f+1,c
  5833  001B54  EC0E  F000         	call	_printf	;wreg free
  5834  001B58  D000               	goto	l548
  5835  001B5A                     l548:
  5836  001B5A  0012               	return		;funcret
  5837  001B5C                     __end_of_update_LCD_misc:
  5838                           	opt stack 0
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon2	equ	0xFF1
  5846                           postinc0	equ	0xFEE
  5847                           wreg	equ	0xFE8
  5848                           postdec1	equ	0xFE5
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           fsr2h	equ	0xFDA
  5852                           fsr2l	equ	0xFD9
  5853                           status	equ	0xFD8
  5854                           
  5855 ;; *************** function _printf *****************
  5856 ;; Defined at:
  5857 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;  f               2   77[COMRAM] PTR const unsigned char 
  5860 ;;		 -> STR_18(31), STR_17(31), STR_16(31), STR_15(19), 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  tmpval          4    9[BANK0 ] struct .
  5863 ;;  val             4    5[BANK0 ] unsigned long 
  5864 ;;  fval            3   19[BANK0 ] unsigned long 
  5865 ;;  cp              3    0        PTR const unsigned char 
  5866 ;;  prec            2   22[BANK0 ] int 
  5867 ;;  width           2   17[BANK0 ] int 
  5868 ;;  flag            2   15[BANK0 ] unsigned short 
  5869 ;;  exp             2   13[BANK0 ] int 
  5870 ;;  ap              2    3[BANK0 ] PTR void [1]
  5871 ;;		 -> ?_printf(2), 
  5872 ;;  len             2    0        unsigned int 
  5873 ;;  c               1   24[BANK0 ] char 
  5874 ;;  d               1    0        unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  2   77[COMRAM] int 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5884 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Totals:        11      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;Total ram usage:       36 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    5
  5891 ;; This function calls:
  5892 ;;		___awdiv
  5893 ;;		___ftadd
  5894 ;;		___ftge
  5895 ;;		___ftmul
  5896 ;;		___ftneg
  5897 ;;		___ftsub
  5898 ;;		___fttol
  5899 ;;		___lldiv
  5900 ;;		___llmod
  5901 ;;		___lltoft
  5902 ;;		___wmul
  5903 ;;		__div_to_l_
  5904 ;;		__tdiv_to_l_
  5905 ;;		_fround
  5906 ;;		_isdigit
  5907 ;;		_putch
  5908 ;;		_scale
  5909 ;; This function is called by:
  5910 ;;		_update_LCD_misc
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text19
  5915  00001C                     __ptext19:
  5916                           	opt stack 0
  5917  00001C                     _printf:
  5918                           	opt stack 21
  5919                           
  5920                           ;doprnt.c: 466: va_list ap;
  5921                           ;doprnt.c: 499: signed char c;
  5922                           ;doprnt.c: 501: int width;
  5923                           ;doprnt.c: 504: int prec;
  5924                           ;doprnt.c: 508: unsigned short flag;
  5925                           ;doprnt.c: 515: char d;
  5926                           ;doprnt.c: 516: double fval;
  5927                           ;doprnt.c: 517: int exp;
  5928                           ;doprnt.c: 523: union {
  5929                           ;doprnt.c: 524: unsigned long vd;
  5930                           ;doprnt.c: 525: double integ;
  5931                           ;doprnt.c: 526: } tmpval;
  5932                           ;doprnt.c: 528: unsigned long val;
  5933                           ;doprnt.c: 529: unsigned len;
  5934                           ;doprnt.c: 530: const char * cp;
  5935                           ;doprnt.c: 533: *ap = __va_start();
  5936                           
  5937                           ;incstack = 0
  5938  00001C  0E50               	movlw	low (?_printf+2)
  5939  00001E  0100               	movlb	0	; () banked
  5940  000020  6FE0               	movwf	printf@ap& (0+255),b
  5941  000022  0E00               	movlw	high (?_printf+2)
  5942  000024  0100               	movlb	0	; () banked
  5943  000026  6FE1               	movwf	(printf@ap+1)& (0+255),b
  5944                           
  5945                           ;doprnt.c: 536: while(c = *f++) {
  5946  000028  EF4B  F005         	goto	l6798
  5947  00002C                     l6536:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;doprnt.c: 538: if(c != '%')
  5951  00002C  0E25               	movlw	37
  5952  00002E  0100               	movlb	0	; () banked
  5953  000030  19F5               	xorwf	printf@c& (0+255),w,b
  5954  000032  B4D8               	btfsc	status,2,c
  5955  000034  D006               	goto	l6540
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;doprnt.c: 540: {
  5959                           ;doprnt.c: 541: (putch(c) );
  5960  000036  0100               	movlb	0	; () banked
  5961  000038  51F5               	movf	printf@c& (0+255),w,b
  5962  00003A  EC0F  F01F         	call	_putch
  5963                           
  5964                           ;doprnt.c: 542: continue;
  5965  00003E  EF4B  F005         	goto	l6798
  5966  000042                     l6540:
  5967                           
  5968                           ;doprnt.c: 543: }
  5969                           ;doprnt.c: 546: width = 0;
  5970  000042  0E00               	movlw	0
  5971  000044  0100               	movlb	0	; () banked
  5972  000046  6FEF               	movwf	(printf@width+1)& (0+255),b
  5973  000048  0E00               	movlw	0
  5974  00004A  6FEE               	movwf	printf@width& (0+255),b
  5975                           
  5976                           ;doprnt.c: 548: flag = 0;
  5977  00004C  0E00               	movlw	0
  5978  00004E  0100               	movlb	0	; () banked
  5979  000050  6FED               	movwf	(printf@flag+1)& (0+255),b
  5980  000052  0E00               	movlw	0
  5981  000054  6FEC               	movwf	printf@flag& (0+255),b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;doprnt.c: 551: switch(*f) {
  5985                           
  5986                           ;doprnt.c: 550: for(;;) {
  5987  000056  D006               	goto	l6546
  5988  000058                     l6542:
  5989                           
  5990                           ;doprnt.c: 580: flag |= 0x04;
  5991  000058  0100               	movlb	0	; () banked
  5992  00005A  85EC               	bsf	printf@flag& (0+255),2,b
  5993                           
  5994                           ;doprnt.c: 581: f++;
  5995  00005C  4A4E               	infsnz	printf@f,f,c
  5996  00005E  2A4F               	incf	printf@f+1,f,c
  5997                           
  5998                           ;doprnt.c: 582: continue;
  5999  000060  D001               	goto	l6546
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;doprnt.c: 584: }
  6003  000062  D00B               	goto	l6548
  6004  000064                     l6546:
  6005  000064  C04E  FFF6         	movff	printf@f,tblptrl
  6006  000068  C04F  FFF7         	movff	printf@f+1,tblptrh
  6007  00006C                     	if	0	;tblptru may be non-zero
  6008  00006C                     	endif
  6009  00006C                     	if	0	;tblptru may be non-zero
  6010  00006C                     	endif
  6011  00006C  0008               	tblrd		*
  6012  00006E  50F5               	movf	tablat,w,c
  6013                           
  6014                           ; Switch size 1, requested type "space"
  6015                           ; Number of cases is 1, Range of values is 48 to 48
  6016                           ; switch strategies available:
  6017                           ; Name         Instructions Cycles
  6018                           ; simple_byte            4     3 (average)
  6019                           ;	Chosen strategy is simple_byte
  6020  000070  0A30               	xorlw	48	; case 48
  6021  000072  B4D8               	btfsc	status,2,c
  6022  000074  D7F1               	goto	l6542
  6023                           
  6024                           ;doprnt.c: 585: break;
  6025  000076  D001               	goto	l6548
  6026                           
  6027                           ;doprnt.c: 586: }
  6028  000078  D7F5               	goto	l6546
  6029  00007A                     l6548:
  6030                           
  6031                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6032  00007A  C04E  FFF6         	movff	printf@f,tblptrl
  6033  00007E  C04F  FFF7         	movff	printf@f+1,tblptrh
  6034  000082                     	if	0	;tblptru may be non-zero
  6035  000082                     	endif
  6036  000082                     	if	0	;tblptru may be non-zero
  6037  000082                     	endif
  6038  000082  0008               	tblrd		*
  6039  000084  50F5               	movf	tablat,w,c
  6040  000086  EC97  F01E         	call	_isdigit
  6041  00008A  A0D8               	btfss	status,0,c
  6042  00008C  D038               	goto	l6560
  6043                           
  6044                           ;doprnt.c: 598: width = 0;
  6045  00008E  0E00               	movlw	0
  6046  000090  0100               	movlb	0	; () banked
  6047  000092  6FEF               	movwf	(printf@width+1)& (0+255),b
  6048  000094  0E00               	movlw	0
  6049  000096  6FEE               	movwf	printf@width& (0+255),b
  6050  000098  D000               	goto	l6552
  6051  00009A                     l6552:
  6052                           
  6053                           ;doprnt.c: 600: width *= 10;
  6054  00009A  C0EE  F01D         	movff	printf@width,___wmul@multiplier
  6055  00009E  C0EF  F01E         	movff	printf@width+1,___wmul@multiplier+1
  6056  0000A2  0E00               	movlw	0
  6057  0000A4  6E20               	movwf	___wmul@multiplicand+1,c
  6058  0000A6  0E0A               	movlw	10
  6059  0000A8  6E1F               	movwf	___wmul@multiplicand,c
  6060  0000AA  EC4B  F01E         	call	___wmul	;wreg free
  6061  0000AE  C01D  F0EE         	movff	?___wmul,printf@width
  6062  0000B2  C01E  F0EF         	movff	?___wmul+1,printf@width+1
  6063                           
  6064                           ;doprnt.c: 601: width += *f++ - '0';
  6065  0000B6  0ED0               	movlw	208
  6066  0000B8  6E53               	movwf	??_printf& (0+255),c
  6067  0000BA  0EFF               	movlw	255
  6068  0000BC  6E54               	movwf	(??_printf+1)& (0+255),c
  6069  0000BE  C04E  FFF6         	movff	printf@f,tblptrl
  6070  0000C2  C04F  FFF7         	movff	printf@f+1,tblptrh
  6071  0000C6                     	if	0	;tblptru may be non-zero
  6072  0000C6                     	endif
  6073  0000C6                     	if	0	;tblptru may be non-zero
  6074  0000C6                     	endif
  6075  0000C6  0008               	tblrd		*
  6076  0000C8  50F5               	movf	tablat,w,c
  6077  0000CA  6E55               	movwf	(??_printf+2)& (0+255),c
  6078  0000CC  6A56               	clrf	(??_printf+3)& (0+255),c
  6079  0000CE  5053               	movf	??_printf,w,c
  6080  0000D0  2655               	addwf	??_printf+2,f,c
  6081  0000D2  5054               	movf	??_printf+1,w,c
  6082  0000D4  2256               	addwfc	??_printf+3,f,c
  6083  0000D6  5055               	movf	??_printf+2,w,c
  6084  0000D8  0100               	movlb	0	; () banked
  6085  0000DA  27EE               	addwf	printf@width& (0+255),f,b
  6086  0000DC  5056               	movf	??_printf+3,w,c
  6087  0000DE  0100               	movlb	0	; () banked
  6088  0000E0  23EF               	addwfc	(printf@width+1)& (0+255),f,b
  6089                           
  6090                           ; BSR set to: 0
  6091  0000E2  4A4E               	infsnz	printf@f,f,c
  6092  0000E4  2A4F               	incf	printf@f+1,f,c
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6096  0000E6  C04E  FFF6         	movff	printf@f,tblptrl
  6097  0000EA  C04F  FFF7         	movff	printf@f+1,tblptrh
  6098  0000EE                     	if	0	;tblptru may be non-zero
  6099  0000EE                     	endif
  6100  0000EE                     	if	0	;tblptru may be non-zero
  6101  0000EE                     	endif
  6102  0000EE  0008               	tblrd		*
  6103  0000F0  50F5               	movf	tablat,w,c
  6104  0000F2  EC97  F01E         	call	_isdigit
  6105  0000F6  A0D8               	btfss	status,0,c
  6106  0000F8  D002               	goto	l6560
  6107  0000FA  D7CF               	goto	l6552
  6108  0000FC  D000               	goto	l6560
  6109  0000FE                     l6560:
  6110                           
  6111                           ;doprnt.c: 608: }
  6112                           ;doprnt.c: 611: if(*f == '.') {
  6113  0000FE  C04E  FFF6         	movff	printf@f,tblptrl
  6114  000102  C04F  FFF7         	movff	printf@f+1,tblptrh
  6115  000106                     	if	0	;tblptru may be non-zero
  6116  000106                     	endif
  6117  000106                     	if	0	;tblptru may be non-zero
  6118  000106                     	endif
  6119  000106  0008               	tblrd		*
  6120  000108  50F5               	movf	tablat,w,c
  6121  00010A  0A2E               	xorlw	46
  6122  00010C  A4D8               	btfss	status,2,c
  6123  00010E  D034               	goto	l6572
  6124                           
  6125                           ;doprnt.c: 612: flag |= 0x4000;
  6126  000110  0100               	movlb	0	; () banked
  6127  000112  8DED               	bsf	(printf@flag+1)& (0+255),6,b
  6128                           
  6129                           ;doprnt.c: 613: f++;
  6130  000114  4A4E               	infsnz	printf@f,f,c
  6131  000116  2A4F               	incf	printf@f+1,f,c
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;doprnt.c: 620: {
  6135                           ;doprnt.c: 621: prec = 0;
  6136  000118  0E00               	movlw	0
  6137  00011A  0100               	movlb	0	; () banked
  6138  00011C  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6139  00011E  0E00               	movlw	0
  6140  000120  6FF3               	movwf	printf@prec& (0+255),b
  6141                           
  6142                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6143  000122  D01E               	goto	l6570
  6144  000124                     l6566:
  6145                           
  6146                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6147  000124  C0F3  F01D         	movff	printf@prec,___wmul@multiplier
  6148  000128  C0F4  F01E         	movff	printf@prec+1,___wmul@multiplier+1
  6149  00012C  0E00               	movlw	0
  6150  00012E  6E20               	movwf	___wmul@multiplicand+1,c
  6151  000130  0E0A               	movlw	10
  6152  000132  6E1F               	movwf	___wmul@multiplicand,c
  6153  000134  EC4B  F01E         	call	___wmul	;wreg free
  6154  000138  C04E  FFF6         	movff	printf@f,tblptrl
  6155  00013C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6156  000140                     	if	0	;tblptru may be non-zero
  6157  000140                     	endif
  6158  000140                     	if	0	;tblptru may be non-zero
  6159  000140                     	endif
  6160  000140  0008               	tblrd		*
  6161  000142  50F5               	movf	tablat,w,c
  6162  000144  261D               	addwf	?___wmul,f,c
  6163  000146  0E00               	movlw	0
  6164  000148  221E               	addwfc	?___wmul+1,f,c
  6165  00014A  0ED0               	movlw	208
  6166  00014C  241D               	addwf	?___wmul,w,c
  6167  00014E  0100               	movlb	0	; () banked
  6168  000150  6FF3               	movwf	printf@prec& (0+255),b
  6169  000152  0EFF               	movlw	255
  6170  000154  201E               	addwfc	?___wmul+1,w,c
  6171  000156  0100               	movlb	0	; () banked
  6172  000158  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175  00015A  4A4E               	infsnz	printf@f,f,c
  6176  00015C  2A4F               	incf	printf@f+1,f,c
  6177  00015E  D000               	goto	l6570
  6178  000160                     l6570:
  6179                           
  6180                           ; BSR set to: 0
  6181  000160  C04E  FFF6         	movff	printf@f,tblptrl
  6182  000164  C04F  FFF7         	movff	printf@f+1,tblptrh
  6183  000168                     	if	0	;tblptru may be non-zero
  6184  000168                     	endif
  6185  000168                     	if	0	;tblptru may be non-zero
  6186  000168                     	endif
  6187  000168  0008               	tblrd		*
  6188  00016A  50F5               	movf	tablat,w,c
  6189  00016C  EC97  F01E         	call	_isdigit
  6190  000170  A0D8               	btfss	status,0,c
  6191  000172  D012               	goto	l6580
  6192  000174  D7D7               	goto	l6566
  6193                           
  6194                           ;doprnt.c: 624: }
  6195                           ;doprnt.c: 625: } else {
  6196  000176  D010               	goto	l6580
  6197  000178                     l6572:
  6198                           
  6199                           ;doprnt.c: 626: prec = 0;
  6200  000178  0E00               	movlw	0
  6201  00017A  0100               	movlb	0	; () banked
  6202  00017C  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6203  00017E  0E00               	movlw	0
  6204  000180  6FF3               	movwf	printf@prec& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;doprnt.c: 628: flag |= 0x1000;
  6208  000182  0100               	movlb	0	; () banked
  6209  000184  89ED               	bsf	(printf@flag+1)& (0+255),4,b
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;doprnt.c: 630: }
  6213                           ;doprnt.c: 635: switch(c = *f++) {
  6214  000186  D008               	goto	l6580
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;doprnt.c: 638: goto alldone;
  6218                           
  6219                           ;doprnt.c: 637: case 0:
  6220  000188  EF5B  F005         	goto	l696
  6221  00018C                     l6576:
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;doprnt.c: 663: flag |= 0x400;
  6225  00018C  0100               	movlb	0	; () banked
  6226  00018E  85ED               	bsf	(printf@flag+1)& (0+255),2,b
  6227                           
  6228                           ;doprnt.c: 664: break;
  6229  000190  D017               	goto	l6582
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;doprnt.c: 813: continue;
  6233                           
  6234                           ;doprnt.c: 802: default:
  6235  000192  EF4B  F005         	goto	l6798
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 822: }
  6239  000196  D014               	goto	l6582
  6240  000198                     l6580:
  6241  000198  C04E  FFF6         	movff	printf@f,tblptrl
  6242  00019C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6243  0001A0  4A4E               	infsnz	printf@f,f,c
  6244  0001A2  2A4F               	incf	printf@f+1,f,c
  6245  0001A4                     	if	0	;tblptru may be non-zero
  6246  0001A4                     	endif
  6247  0001A4                     	if	0	;tblptru may be non-zero
  6248  0001A4                     	endif
  6249  0001A4  0008               	tblrd		*
  6250  0001A6  CFF5 F0F5          	movff	tablat,printf@c
  6251  0001AA  0100               	movlb	0	; () banked
  6252  0001AC  51F5               	movf	printf@c& (0+255),w,b
  6253                           
  6254                           ; Switch size 1, requested type "space"
  6255                           ; Number of cases is 2, Range of values is 0 to 102
  6256                           ; switch strategies available:
  6257                           ; Name         Instructions Cycles
  6258                           ; simple_byte            7     4 (average)
  6259                           ;	Chosen strategy is simple_byte
  6260  0001AE  0A00               	xorlw	0	; case 0
  6261  0001B0  B4D8               	btfsc	status,2,c
  6262  0001B2  EF5B  F005         	goto	l696
  6263  0001B6  0A66               	xorlw	102	; case 102
  6264  0001B8  B4D8               	btfsc	status,2,c
  6265  0001BA  D7E8               	goto	l6576
  6266  0001BC  EF4B  F005         	goto	l6798
  6267  0001C0                     l6582:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;doprnt.c: 825: if(flag & (0x700)) {
  6271  0001C0  0E07               	movlw	7
  6272  0001C2  0100               	movlb	0	; () banked
  6273  0001C4  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  6274  0001C6  B4D8               	btfsc	status,2,c
  6275  0001C8  D385               	goto	l6742
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;doprnt.c: 827: if(flag & 0x1000)
  6279  0001CA  0100               	movlb	0	; () banked
  6280  0001CC  A9ED               	btfss	(printf@flag+1)& (0+255),4,b
  6281  0001CE  D006               	goto	l6588
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;doprnt.c: 829: prec = 6;
  6285  0001D0  0E00               	movlw	0
  6286  0001D2  0100               	movlb	0	; () banked
  6287  0001D4  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6288  0001D6  0E06               	movlw	6
  6289  0001D8  6FF3               	movwf	printf@prec& (0+255),b
  6290  0001DA  D000               	goto	l6588
  6291  0001DC                     l6588:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6295  0001DC  C0E0  FFD9         	movff	printf@ap,fsr2l
  6296  0001E0  C0E1  FFDA         	movff	printf@ap+1,fsr2h
  6297  0001E4  CFDE F0F0          	movff	postinc2,printf@fval
  6298  0001E8  CFDE F0F1          	movff	postinc2,printf@fval+1
  6299  0001EC  CFDD F0F2          	movff	postdec2,printf@fval+2
  6300                           
  6301                           ; BSR set to: 0
  6302  0001F0  0E03               	movlw	3
  6303  0001F2  0100               	movlb	0	; () banked
  6304  0001F4  27E0               	addwf	printf@ap& (0+255),f,b
  6305  0001F6  0E00               	movlw	0
  6306  0001F8  23E1               	addwfc	(printf@ap+1)& (0+255),f,b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;doprnt.c: 831: if(fval < 0.0) {
  6310  0001FA  0100               	movlb	0	; () banked
  6311  0001FC  AFF2               	btfss	(printf@fval+2)& (0+255),7,b
  6312  0001FE  D012               	goto	l6598
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;doprnt.c: 832: fval = -fval;
  6316  000200  C0F0  F00F         	movff	printf@fval,___ftneg@f1
  6317  000204  C0F1  F010         	movff	printf@fval+1,___ftneg@f1+1
  6318  000208  C0F2  F011         	movff	printf@fval+2,___ftneg@f1+2
  6319  00020C  EC85  F01E         	call	___ftneg	;wreg free
  6320  000210  C00F  F0F0         	movff	?___ftneg,printf@fval
  6321  000214  C010  F0F1         	movff	?___ftneg+1,printf@fval+1
  6322  000218  C011  F0F2         	movff	?___ftneg+2,printf@fval+2
  6323                           
  6324                           ;doprnt.c: 833: flag |= 0x03;
  6325  00021C  0E03               	movlw	3
  6326  00021E  0100               	movlb	0	; () banked
  6327  000220  13EC               	iorwf	printf@flag& (0+255),f,b
  6328  000222  D000               	goto	l6598
  6329  000224                     l6598:
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;doprnt.c: 834: }
  6333                           ;doprnt.c: 835: exp = 0;
  6334  000224  0E00               	movlw	0
  6335  000226  0100               	movlb	0	; () banked
  6336  000228  6FEB               	movwf	(printf@exp+1)& (0+255),b
  6337  00022A  0E00               	movlw	0
  6338  00022C  6FEA               	movwf	printf@exp& (0+255),b
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;doprnt.c: 836: if( fval!=0) {
  6342  00022E  0100               	movlb	0	; () banked
  6343  000230  51F0               	movf	printf@fval& (0+255),w,b
  6344  000232  0100               	movlb	0	; () banked
  6345  000234  11F1               	iorwf	(printf@fval+1)& (0+255),w,b
  6346  000236  0100               	movlb	0	; () banked
  6347  000238  11F2               	iorwf	(printf@fval+2)& (0+255),w,b
  6348  00023A  B4D8               	btfsc	status,2,c
  6349  00023C  D08D               	goto	l6626
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6353  00023E  0E82               	movlw	130
  6354  000240  6E53               	movwf	??_printf& (0+255),c
  6355  000242  0EFF               	movlw	255
  6356  000244  6E54               	movwf	(??_printf+1)& (0+255),c
  6357  000246  C0F0  F055         	movff	printf@fval,??_printf+2
  6358  00024A  C0F1  F056         	movff	printf@fval+1,??_printf+3
  6359  00024E  C0F2  F057         	movff	printf@fval+2,??_printf+4
  6360  000252  C0F3  F058         	movff	printf@fval+3,??_printf+5
  6361  000256  0E10               	movlw	16
  6362  000258  D005               	goto	u6550
  6363  00025A                     u6555:
  6364  00025A  90D8               	bcf	status,0,c
  6365  00025C  3258               	rrcf	??_printf+5,f,c
  6366  00025E  3257               	rrcf	??_printf+4,f,c
  6367  000260  3256               	rrcf	??_printf+3,f,c
  6368  000262  3255               	rrcf	??_printf+2,f,c
  6369  000264                     u6550:
  6370  000264  2EE8               	decfsz	wreg,f,c
  6371  000266  D7F9               	goto	u6555
  6372  000268  5055               	movf	??_printf+2,w,c
  6373  00026A  2453               	addwf	??_printf,w,c
  6374  00026C  0100               	movlb	0	; () banked
  6375  00026E  6FEA               	movwf	printf@exp& (0+255),b
  6376  000270  0E00               	movlw	0
  6377  000272  2054               	addwfc	??_printf+1,w,c
  6378  000274  0100               	movlb	0	; () banked
  6379  000276  6FEB               	movwf	(printf@exp+1)& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;doprnt.c: 838: exp--;
  6383  000278  0100               	movlb	0	; () banked
  6384  00027A  07EA               	decf	printf@exp& (0+255),f,b
  6385  00027C  A0D8               	btfss	status,0,c
  6386  00027E  07EB               	decf	(printf@exp+1)& (0+255),f,b
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;doprnt.c: 839: exp *= 3;
  6390  000280  C0EA  F01D         	movff	printf@exp,___wmul@multiplier
  6391  000284  C0EB  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  6392  000288  0E00               	movlw	0
  6393  00028A  6E20               	movwf	___wmul@multiplicand+1,c
  6394  00028C  0E03               	movlw	3
  6395  00028E  6E1F               	movwf	___wmul@multiplicand,c
  6396  000290  EC4B  F01E         	call	___wmul	;wreg free
  6397  000294  C01D  F0EA         	movff	?___wmul,printf@exp
  6398  000298  C01E  F0EB         	movff	?___wmul+1,printf@exp+1
  6399                           
  6400                           ;doprnt.c: 840: exp /= 10;
  6401  00029C  C0EA  F015         	movff	printf@exp,___awdiv@dividend
  6402  0002A0  C0EB  F016         	movff	printf@exp+1,___awdiv@dividend+1
  6403  0002A4  0E00               	movlw	0
  6404  0002A6  6E18               	movwf	___awdiv@divisor+1,c
  6405  0002A8  0E0A               	movlw	10
  6406  0002AA  6E17               	movwf	___awdiv@divisor,c
  6407  0002AC  EC1B  F019         	call	___awdiv	;wreg free
  6408  0002B0  C015  F0EA         	movff	?___awdiv,printf@exp
  6409  0002B4  C016  F0EB         	movff	?___awdiv+1,printf@exp+1
  6410                           
  6411                           ;doprnt.c: 841: if(exp < 0)
  6412  0002B8  0100               	movlb	0	; () banked
  6413  0002BA  AFEB               	btfss	(printf@exp+1)& (0+255),7,b
  6414  0002BC  D005               	goto	l6614
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;doprnt.c: 842: exp--;
  6418  0002BE  0100               	movlb	0	; () banked
  6419  0002C0  07EA               	decf	printf@exp& (0+255),f,b
  6420  0002C2  A0D8               	btfss	status,0,c
  6421  0002C4  07EB               	decf	(printf@exp+1)& (0+255),f,b
  6422  0002C6  D000               	goto	l6614
  6423  0002C8                     l6614:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6427  0002C8  0100               	movlb	0	; () banked
  6428  0002CA  51EA               	movf	printf@exp& (0+255),w,b
  6429  0002CC  0800               	sublw	0
  6430  0002CE  ECEB  F008         	call	_scale
  6431  0002D2  C032  F0E6         	movff	?_scale,printf@tmpval
  6432  0002D6  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  6433  0002DA  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  6434                           
  6435                           ;doprnt.c: 847: tmpval.integ *= fval;
  6436  0002DE  C0E6  F023         	movff	printf@tmpval,___ftmul@f1
  6437  0002E2  C0E7  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  6438  0002E6  C0E8  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  6439  0002EA  C0F0  F026         	movff	printf@fval,___ftmul@f2
  6440  0002EE  C0F1  F027         	movff	printf@fval+1,___ftmul@f2+1
  6441  0002F2  C0F2  F028         	movff	printf@fval+2,___ftmul@f2+2
  6442  0002F6  EC3A  F014         	call	___ftmul	;wreg free
  6443  0002FA  C023  F0E6         	movff	?___ftmul,printf@tmpval
  6444  0002FE  C024  F0E7         	movff	?___ftmul+1,printf@tmpval+1
  6445  000302  C025  F0E8         	movff	?___ftmul+2,printf@tmpval+2
  6446                           
  6447                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6448  000306  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  6449  00030A  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6450  00030E  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6451  000312  0E00               	movlw	0
  6452  000314  6E12               	movwf	___ftge@ff2,c
  6453  000316  0E80               	movlw	128
  6454  000318  6E13               	movwf	___ftge@ff2+1,c
  6455  00031A  0E3F               	movlw	63
  6456  00031C  6E14               	movwf	___ftge@ff2+2,c
  6457  00031E  ECD0  F018         	call	___ftge	;wreg free
  6458  000322  B0D8               	btfsc	status,0,c
  6459  000324  D005               	goto	l6622
  6460                           
  6461                           ;doprnt.c: 849: exp--;
  6462  000326  0100               	movlb	0	; () banked
  6463  000328  07EA               	decf	printf@exp& (0+255),f,b
  6464  00032A  A0D8               	btfss	status,0,c
  6465  00032C  07EB               	decf	(printf@exp+1)& (0+255),f,b
  6466  00032E  D014               	goto	l6626
  6467  000330                     l6622:
  6468                           
  6469                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6470  000330  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  6471  000334  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6472  000338  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6473  00033C  0E00               	movlw	0
  6474  00033E  6E12               	movwf	___ftge@ff2,c
  6475  000340  0E20               	movlw	32
  6476  000342  6E13               	movwf	___ftge@ff2+1,c
  6477  000344  0E41               	movlw	65
  6478  000346  6E14               	movwf	___ftge@ff2+2,c
  6479  000348  ECD0  F018         	call	___ftge	;wreg free
  6480  00034C  A0D8               	btfss	status,0,c
  6481  00034E  D004               	goto	l6626
  6482                           
  6483                           ;doprnt.c: 851: exp++;
  6484  000350  0100               	movlb	0	; () banked
  6485  000352  4BEA               	infsnz	printf@exp& (0+255),f,b
  6486  000354  2BEB               	incf	(printf@exp+1)& (0+255),f,b
  6487                           
  6488                           ; BSR set to: 0
  6489                           
  6490                           ; BSR set to: 0
  6491  000356  D000               	goto	l6626
  6492  000358                     l6626:
  6493                           
  6494                           ;doprnt.c: 852: }
  6495                           ;doprnt.c: 1112: if(prec <= 12)
  6496  000358  0100               	movlb	0	; () banked
  6497  00035A  BFF4               	btfsc	(printf@prec+1)& (0+255),7,b
  6498  00035C  D008               	goto	l6628
  6499  00035E  0100               	movlb	0	; () banked
  6500  000360  51F4               	movf	(printf@prec+1)& (0+255),w,b
  6501  000362  E11E               	bnz	l6630
  6502  000364  0E0D               	movlw	13
  6503  000366  0100               	movlb	0	; () banked
  6504  000368  5DF3               	subwf	printf@prec& (0+255),w,b
  6505  00036A  B0D8               	btfsc	status,0,c
  6506  00036C  D019               	goto	l6630
  6507  00036E                     l6628:
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 1113: fval += fround(prec);
  6511  00036E  C0F0  F03C         	movff	printf@fval,___ftadd@f1
  6512  000372  C0F1  F03D         	movff	printf@fval+1,___ftadd@f1+1
  6513  000376  C0F2  F03E         	movff	printf@fval+2,___ftadd@f1+2
  6514  00037A  0100               	movlb	0	; () banked
  6515  00037C  51F3               	movf	printf@prec& (0+255),w,b
  6516  00037E  ECAE  F00D         	call	_fround
  6517  000382  C032  F03F         	movff	?_fround,___ftadd@f2
  6518  000386  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  6519  00038A  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  6520  00038E  ECD0  F00E         	call	___ftadd	;wreg free
  6521  000392  C03C  F0F0         	movff	?___ftadd,printf@fval
  6522  000396  C03D  F0F1         	movff	?___ftadd+1,printf@fval+1
  6523  00039A  C03E  F0F2         	movff	?___ftadd+2,printf@fval+2
  6524  00039E  D000               	goto	l6630
  6525  0003A0                     l6630:
  6526                           
  6527                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6528  0003A0  0100               	movlb	0	; () banked
  6529  0003A2  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  6530  0003A4  D008               	goto	l6632
  6531  0003A6  0100               	movlb	0	; () banked
  6532  0003A8  51EB               	movf	(printf@exp+1)& (0+255),w,b
  6533  0003AA  E128               	bnz	l6638
  6534  0003AC  0E0A               	movlw	10
  6535  0003AE  0100               	movlb	0	; () banked
  6536  0003B0  5DEA               	subwf	printf@exp& (0+255),w,b
  6537  0003B2  B0D8               	btfsc	status,0,c
  6538  0003B4  D023               	goto	l6638
  6539  0003B6                     l6632:
  6540                           
  6541                           ; BSR set to: 0
  6542  0003B6  0100               	movlb	0	; () banked
  6543  0003B8  51F0               	movf	printf@fval& (0+255),w,b
  6544  0003BA  0100               	movlb	0	; () banked
  6545  0003BC  11F1               	iorwf	(printf@fval+1)& (0+255),w,b
  6546  0003BE  0100               	movlb	0	; () banked
  6547  0003C0  11F2               	iorwf	(printf@fval+2)& (0+255),w,b
  6548  0003C2  B4D8               	btfsc	status,2,c
  6549  0003C4  D077               	goto	l6652
  6550                           
  6551                           ; BSR set to: 0
  6552  0003C6  C0F0  F039         	movff	printf@fval,___fttol@f1
  6553  0003CA  C0F1  F03A         	movff	printf@fval+1,___fttol@f1+1
  6554  0003CE  C0F2  F03B         	movff	printf@fval+2,___fttol@f1+2
  6555  0003D2  ECA3  F015         	call	___fttol	;wreg free
  6556  0003D6  5039               	movf	?___fttol,w,c
  6557  0003D8  103A               	iorwf	?___fttol+1,w,c
  6558  0003DA  103B               	iorwf	?___fttol+2,w,c
  6559  0003DC  103C               	iorwf	?___fttol+3,w,c
  6560  0003DE  A4D8               	btfss	status,2,c
  6561  0003E0  D069               	goto	l6652
  6562  0003E2  0100               	movlb	0	; () banked
  6563  0003E4  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  6564  0003E6  D066               	goto	l6652
  6565  0003E8  0100               	movlb	0	; () banked
  6566  0003EA  51EB               	movf	(printf@exp+1)& (0+255),w,b
  6567  0003EC  E107               	bnz	l6638
  6568  0003EE  0E02               	movlw	2
  6569  0003F0  0100               	movlb	0	; () banked
  6570  0003F2  5DEA               	subwf	printf@exp& (0+255),w,b
  6571  0003F4  B0D8               	btfsc	status,0,c
  6572  0003F6  D002               	goto	l6638
  6573  0003F8  D05D               	goto	l6652
  6574  0003FA  D000               	goto	l6638
  6575  0003FC                     l6638:
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6579  0003FC  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  6580  000400  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6581  000404  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6582  000408  0E70               	movlw	112
  6583  00040A  6E12               	movwf	___ftge@ff2,c
  6584  00040C  0E89               	movlw	137
  6585  00040E  6E13               	movwf	___ftge@ff2+1,c
  6586  000410  0E40               	movlw	64
  6587  000412  6E14               	movwf	___ftge@ff2+2,c
  6588  000414  ECD0  F018         	call	___ftge	;wreg free
  6589  000418  B0D8               	btfsc	status,0,c
  6590  00041A  D003               	goto	l6642
  6591                           
  6592                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6593  00041C  0100               	movlb	0	; () banked
  6594  00041E  0EF7               	movlw	247
  6595  000420  D002               	goto	L7
  6596  000422                     l6642:
  6597                           
  6598                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6599  000422  0100               	movlb	0	; () banked
  6600  000424  0EF8               	movlw	248
  6601  000426                     L7:
  6602  000426  27EA               	addwf	printf@exp& (0+255),f,b
  6603  000428  0EFF               	movlw	255
  6604  00042A  23EB               	addwfc	(printf@exp+1)& (0+255),f,b
  6605  00042C  D000               	goto	l6644
  6606  00042E                     l6644:
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;doprnt.c: 1124: }
  6610                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6611  00042E  0100               	movlb	0	; () banked
  6612  000430  51EA               	movf	printf@exp& (0+255),w,b
  6613  000432  ECEB  F008         	call	_scale
  6614  000436  C032  F0E6         	movff	?_scale,printf@tmpval
  6615  00043A  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  6616  00043E  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  6617                           
  6618                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6619  000442  D017               	goto	l6648
  6620  000444  C0F0  F00F         	movff	printf@fval,__div_to_l_@f1
  6621  000448  C0F1  F010         	movff	printf@fval+1,__div_to_l_@f1+1
  6622  00044C  C0F2  F011         	movff	printf@fval+2,__div_to_l_@f1+2
  6623  000450  C0E6  F012         	movff	printf@tmpval,__div_to_l_@f2
  6624  000454  C0E7  F013         	movff	printf@tmpval+1,__div_to_l_@f2+1
  6625  000458  C0E8  F014         	movff	printf@tmpval+2,__div_to_l_@f2+2
  6626  00045C  ECB5  F013         	call	__div_to_l_	;wreg free
  6627  000460  C00F  F0E2         	movff	?__div_to_l_,printf@val
  6628  000464  C010  F0E3         	movff	?__div_to_l_+1,printf@val+1
  6629  000468  C011  F0E4         	movff	?__div_to_l_+2,printf@val+2
  6630  00046C  C012  F0E5         	movff	?__div_to_l_+3,printf@val+3
  6631  000470  D017               	goto	l6650
  6632  000472                     l6648:
  6633  000472  C0F0  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  6634  000476  C0F1  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6635  00047A  C0F2  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6636  00047E  C0E6  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  6637  000482  C0E7  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6638  000486  C0E8  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6639  00048A  EC2D  F013         	call	__tdiv_to_l_	;wreg free
  6640  00048E  C00F  F0E2         	movff	?__tdiv_to_l_,printf@val
  6641  000492  C010  F0E3         	movff	?__tdiv_to_l_+1,printf@val+1
  6642  000496  C011  F0E4         	movff	?__tdiv_to_l_+2,printf@val+2
  6643  00049A  C012  F0E5         	movff	?__tdiv_to_l_+3,printf@val+3
  6644  00049E  D000               	goto	l6650
  6645  0004A0                     l6650:
  6646                           
  6647                           ;doprnt.c: 1129: fval = 0.0;
  6648  0004A0  0E00               	movlw	0
  6649  0004A2  0100               	movlb	0	; () banked
  6650  0004A4  6FF0               	movwf	printf@fval& (0+255),b
  6651  0004A6  0E00               	movlw	0
  6652  0004A8  0100               	movlb	0	; () banked
  6653  0004AA  6FF1               	movwf	(printf@fval+1)& (0+255),b
  6654  0004AC  0E00               	movlw	0
  6655  0004AE  0100               	movlb	0	; () banked
  6656  0004B0  6FF2               	movwf	(printf@fval+2)& (0+255),b
  6657                           
  6658                           ;doprnt.c: 1130: } else {
  6659  0004B2  D034               	goto	l6656
  6660  0004B4                     l6652:
  6661                           
  6662                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6663  0004B4  C0F0  F039         	movff	printf@fval,___fttol@f1
  6664  0004B8  C0F1  F03A         	movff	printf@fval+1,___fttol@f1+1
  6665  0004BC  C0F2  F03B         	movff	printf@fval+2,___fttol@f1+2
  6666  0004C0  ECA3  F015         	call	___fttol	;wreg free
  6667  0004C4  C039  F0E2         	movff	?___fttol,printf@val
  6668  0004C8  C03A  F0E3         	movff	?___fttol+1,printf@val+1
  6669  0004CC  C03B  F0E4         	movff	?___fttol+2,printf@val+2
  6670  0004D0  C03C  F0E5         	movff	?___fttol+3,printf@val+3
  6671                           
  6672                           ;doprnt.c: 1132: fval -= (double)val;
  6673  0004D4  C0F0  F048         	movff	printf@fval,___ftsub@f1
  6674  0004D8  C0F1  F049         	movff	printf@fval+1,___ftsub@f1+1
  6675  0004DC  C0F2  F04A         	movff	printf@fval+2,___ftsub@f1+2
  6676  0004E0  C0E2  F017         	movff	printf@val,___lltoft@c
  6677  0004E4  C0E3  F018         	movff	printf@val+1,___lltoft@c+1
  6678  0004E8  C0E4  F019         	movff	printf@val+2,___lltoft@c+2
  6679  0004EC  C0E5  F01A         	movff	printf@val+3,___lltoft@c+3
  6680  0004F0  ECCD  F01B         	call	___lltoft	;wreg free
  6681  0004F4  C017  F04B         	movff	?___lltoft,___ftsub@f2
  6682  0004F8  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  6683  0004FC  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  6684  000500  EC59  F01D         	call	___ftsub	;wreg free
  6685  000504  C048  F0F0         	movff	?___ftsub,printf@fval
  6686  000508  C049  F0F1         	movff	?___ftsub+1,printf@fval+1
  6687  00050C  C04A  F0F2         	movff	?___ftsub+2,printf@fval+2
  6688                           
  6689                           ;doprnt.c: 1133: exp = 0;
  6690  000510  0E00               	movlw	0
  6691  000512  0100               	movlb	0	; () banked
  6692  000514  6FEB               	movwf	(printf@exp+1)& (0+255),b
  6693  000516  0E00               	movlw	0
  6694  000518  6FEA               	movwf	printf@exp& (0+255),b
  6695  00051A  D000               	goto	l6656
  6696  00051C                     l6656:
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;doprnt.c: 1134: }
  6700                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6701  00051C  0E01               	movlw	1
  6702  00051E  0100               	movlb	0	; () banked
  6703  000520  6FF5               	movwf	printf@c& (0+255),b
  6704  000522                     l6658:
  6705                           
  6706                           ; BSR set to: 0
  6707  000522  0E0A               	movlw	10
  6708  000524  0100               	movlb	0	; () banked
  6709  000526  19F5               	xorwf	printf@c& (0+255),w,b
  6710  000528  B4D8               	btfsc	status,2,c
  6711  00052A  D022               	goto	l6670
  6712  00052C  D001               	goto	l6662
  6713                           
  6714                           ; BSR set to: 0
  6715  00052E  D020               	goto	l6670
  6716  000530                     l6662:
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;doprnt.c: 1137: if(val < dpowers[c])
  6720  000530  0100               	movlb	0	; () banked
  6721  000532  51F5               	movf	printf@c& (0+255),w,b
  6722  000534  0D04               	mullw	4
  6723  000536  0EE2               	movlw	low _dpowers
  6724  000538  24F3               	addwf	prodl,w,c
  6725  00053A  6EF6               	movwf	tblptrl,c
  6726  00053C  0EFB               	movlw	high _dpowers
  6727  00053E  20F4               	addwfc	prodh,w,c
  6728  000540  6EF7               	movwf	tblptrh,c
  6729  000542                     	if	0	;There are less than 3 active tblptr bytes
  6730  000542                     	endif
  6731  000542  0009               	tblrd		*+
  6732  000544  50F5               	movf	tablat,w,c
  6733  000546  0100               	movlb	0	; () banked
  6734  000548  5DE2               	subwf	printf@val& (0+255),w,b
  6735  00054A  0009               	tblrd		*+
  6736  00054C  50F5               	movf	tablat,w,c
  6737  00054E  0100               	movlb	0	; () banked
  6738  000550  59E3               	subwfb	(printf@val+1)& (0+255),w,b
  6739  000552  0009               	tblrd		*+
  6740  000554  50F5               	movf	tablat,w,c
  6741  000556  0100               	movlb	0	; () banked
  6742  000558  59E4               	subwfb	(printf@val+2)& (0+255),w,b
  6743  00055A  0009               	tblrd		*+
  6744  00055C  50F5               	movf	tablat,w,c
  6745  00055E  0100               	movlb	0	; () banked
  6746  000560  59E5               	subwfb	(printf@val+3)& (0+255),w,b
  6747  000562  A0D8               	btfss	status,0,c
  6748  000564  D005               	goto	l6670
  6749  000566  D001               	goto	l6666
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;doprnt.c: 1138: break;
  6753  000568  D003               	goto	l6670
  6754  00056A                     l6666:
  6755                           
  6756                           ; BSR set to: 0
  6757  00056A  0100               	movlb	0	; () banked
  6758  00056C  2BF5               	incf	printf@c& (0+255),f,b
  6759  00056E  D7D9               	goto	l6658
  6760  000570                     l6670:
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;doprnt.c: 1142: width -= prec + c + exp;
  6764  000570  C0F5  F053         	movff	printf@c,??_printf
  6765  000574  6A54               	clrf	(??_printf+1)& (0+255),c
  6766  000576  BE53               	btfsc	??_printf& (0+255),7,c
  6767  000578  0654               	decf	(??_printf+1)& (0+255),f,c
  6768  00057A  0100               	movlb	0	; () banked
  6769  00057C  51F3               	movf	printf@prec& (0+255),w,b
  6770  00057E  2653               	addwf	??_printf,f,c
  6771  000580  0100               	movlb	0	; () banked
  6772  000582  51F4               	movf	(printf@prec+1)& (0+255),w,b
  6773  000584  2254               	addwfc	??_printf+1,f,c
  6774  000586  0100               	movlb	0	; () banked
  6775  000588  51EA               	movf	printf@exp& (0+255),w,b
  6776  00058A  2653               	addwf	??_printf,f,c
  6777  00058C  0100               	movlb	0	; () banked
  6778  00058E  51EB               	movf	(printf@exp+1)& (0+255),w,b
  6779  000590  2254               	addwfc	??_printf+1,f,c
  6780  000592  5053               	movf	??_printf,w,c
  6781  000594  0100               	movlb	0	; () banked
  6782  000596  5FEE               	subwf	printf@width& (0+255),f,b
  6783  000598  5054               	movf	??_printf+1,w,c
  6784  00059A  0100               	movlb	0	; () banked
  6785  00059C  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  6786                           
  6787                           ;doprnt.c: 1143: if(
  6788                           ;doprnt.c: 1147: prec)
  6789  00059E  0100               	movlb	0	; () banked
  6790  0005A0  51F3               	movf	printf@prec& (0+255),w,b
  6791  0005A2  0100               	movlb	0	; () banked
  6792  0005A4  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  6793  0005A6  B4D8               	btfsc	status,2,c
  6794  0005A8  D005               	goto	l6674
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 1148: width--;
  6798  0005AA  0100               	movlb	0	; () banked
  6799  0005AC  07EE               	decf	printf@width& (0+255),f,b
  6800  0005AE  A0D8               	btfss	status,0,c
  6801  0005B0  07EF               	decf	(printf@width+1)& (0+255),f,b
  6802  0005B2  D000               	goto	l6674
  6803  0005B4                     l6674:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;doprnt.c: 1149: if(flag & 0x03)
  6807  0005B4  0E03               	movlw	3
  6808  0005B6  0100               	movlb	0	; () banked
  6809  0005B8  15EC               	andwf	printf@flag& (0+255),w,b
  6810  0005BA  6E53               	movwf	??_printf& (0+255),c
  6811  0005BC  0E00               	movlw	0
  6812  0005BE  0100               	movlb	0	; () banked
  6813  0005C0  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  6814  0005C2  6E54               	movwf	(??_printf+1)& (0+255),c
  6815  0005C4  5053               	movf	??_printf,w,c
  6816  0005C6  1054               	iorwf	??_printf+1,w,c
  6817  0005C8  B4D8               	btfsc	status,2,c
  6818  0005CA  D005               	goto	l6678
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;doprnt.c: 1150: width--;
  6822  0005CC  0100               	movlb	0	; () banked
  6823  0005CE  07EE               	decf	printf@width& (0+255),f,b
  6824  0005D0  A0D8               	btfss	status,0,c
  6825  0005D2  07EF               	decf	(printf@width+1)& (0+255),f,b
  6826  0005D4  D000               	goto	l6678
  6827  0005D6                     l6678:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;doprnt.c: 1153: if(flag & 0x04) {
  6831  0005D6  0100               	movlb	0	; () banked
  6832  0005D8  A5EC               	btfss	printf@flag& (0+255),2,b
  6833  0005DA  D02D               	goto	l6694
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;doprnt.c: 1157: if(flag & 0x03)
  6837  0005DC  0E03               	movlw	3
  6838  0005DE  0100               	movlb	0	; () banked
  6839  0005E0  15EC               	andwf	printf@flag& (0+255),w,b
  6840  0005E2  6E53               	movwf	??_printf& (0+255),c
  6841  0005E4  0E00               	movlw	0
  6842  0005E6  0100               	movlb	0	; () banked
  6843  0005E8  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  6844  0005EA  6E54               	movwf	(??_printf+1)& (0+255),c
  6845  0005EC  5053               	movf	??_printf,w,c
  6846  0005EE  1054               	iorwf	??_printf+1,w,c
  6847  0005F0  B4D8               	btfsc	status,2,c
  6848  0005F2  D00C               	goto	l6688
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;doprnt.c: 1159: (putch('-') );
  6852  0005F4  0E2D               	movlw	45
  6853  0005F6  EC0F  F01F         	call	_putch
  6854                           
  6855                           ;doprnt.c: 1168: while(width > 0) {
  6856  0005FA  D008               	goto	l6688
  6857  0005FC                     l6684:
  6858                           
  6859                           ;doprnt.c: 1169: (putch('0') );
  6860  0005FC  0E30               	movlw	48
  6861  0005FE  EC0F  F01F         	call	_putch
  6862                           
  6863                           ;doprnt.c: 1170: width--;
  6864  000602  0100               	movlb	0	; () banked
  6865  000604  07EE               	decf	printf@width& (0+255),f,b
  6866  000606  A0D8               	btfss	status,0,c
  6867  000608  07EF               	decf	(printf@width+1)& (0+255),f,b
  6868  00060A  D000               	goto	l6688
  6869  00060C                     l6688:
  6870  00060C  0100               	movlb	0	; () banked
  6871  00060E  BFEF               	btfsc	(printf@width+1)& (0+255),7,b
  6872  000610  D073               	goto	l6706
  6873  000612  0100               	movlb	0	; () banked
  6874  000614  51EF               	movf	(printf@width+1)& (0+255),w,b
  6875  000616  E1F2               	bnz	l6684
  6876  000618  0100               	movlb	0	; () banked
  6877  00061A  05EE               	decf	printf@width& (0+255),w,b
  6878  00061C  A0D8               	btfss	status,0,c
  6879  00061E  D06C               	goto	l6706
  6880  000620  D7ED               	goto	l6684
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;doprnt.c: 1171: }
  6884                           ;doprnt.c: 1173: } else
  6885  000622  D06A               	goto	l6706
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;doprnt.c: 1175: {
  6889                           ;doprnt.c: 1180: while(width > 0) {
  6890  000624  D008               	goto	l6694
  6891  000626                     l6690:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;doprnt.c: 1181: (putch(' ') );
  6895  000626  0E20               	movlw	32
  6896  000628  EC0F  F01F         	call	_putch
  6897                           
  6898                           ;doprnt.c: 1182: width--;
  6899  00062C  0100               	movlb	0	; () banked
  6900  00062E  07EE               	decf	printf@width& (0+255),f,b
  6901  000630  A0D8               	btfss	status,0,c
  6902  000632  07EF               	decf	(printf@width+1)& (0+255),f,b
  6903  000634  D000               	goto	l6694
  6904  000636                     l6694:
  6905                           
  6906                           ; BSR set to: 0
  6907  000636  0100               	movlb	0	; () banked
  6908  000638  BFEF               	btfsc	(printf@width+1)& (0+255),7,b
  6909  00063A  D007               	goto	l6696
  6910  00063C  0100               	movlb	0	; () banked
  6911  00063E  51EF               	movf	(printf@width+1)& (0+255),w,b
  6912  000640  E1F2               	bnz	l6690
  6913  000642  0100               	movlb	0	; () banked
  6914  000644  05EE               	decf	printf@width& (0+255),w,b
  6915  000646  B0D8               	btfsc	status,0,c
  6916  000648  D7EE               	goto	l6690
  6917  00064A                     l6696:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;doprnt.c: 1183: }
  6921                           ;doprnt.c: 1188: if(flag & 0x03)
  6922  00064A  0E03               	movlw	3
  6923  00064C  0100               	movlb	0	; () banked
  6924  00064E  15EC               	andwf	printf@flag& (0+255),w,b
  6925  000650  6E53               	movwf	??_printf& (0+255),c
  6926  000652  0E00               	movlw	0
  6927  000654  0100               	movlb	0	; () banked
  6928  000656  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  6929  000658  6E54               	movwf	(??_printf+1)& (0+255),c
  6930  00065A  5053               	movf	??_printf,w,c
  6931  00065C  1054               	iorwf	??_printf+1,w,c
  6932  00065E  B4D8               	btfsc	status,2,c
  6933  000660  D04B               	goto	l6706
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;doprnt.c: 1190: (putch('-') );
  6937  000662  0E2D               	movlw	45
  6938  000664  EC0F  F01F         	call	_putch
  6939                           
  6940                           ;doprnt.c: 1195: }
  6941                           ;doprnt.c: 1196: while(c--) {
  6942  000668  D047               	goto	l6706
  6943  00066A                     l6700:
  6944                           
  6945                           ;doprnt.c: 1200: {
  6946                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6947  00066A  C0E2  F00F         	movff	printf@val,___lldiv@dividend
  6948  00066E  C0E3  F010         	movff	printf@val+1,___lldiv@dividend+1
  6949  000672  C0E4  F011         	movff	printf@val+2,___lldiv@dividend+2
  6950  000676  C0E5  F012         	movff	printf@val+3,___lldiv@dividend+3
  6951  00067A  0100               	movlb	0	; () banked
  6952  00067C  51F5               	movf	printf@c& (0+255),w,b
  6953  00067E  0D04               	mullw	4
  6954  000680  0EE2               	movlw	low _dpowers
  6955  000682  24F3               	addwf	prodl,w,c
  6956  000684  6EF6               	movwf	tblptrl,c
  6957  000686  0EFB               	movlw	high _dpowers
  6958  000688  20F4               	addwfc	prodh,w,c
  6959  00068A  6EF7               	movwf	tblptrh,c
  6960  00068C                     	if	0	;There are less than 3 active tblptr bytes
  6961  00068C                     	endif
  6962  00068C  0009               	tblrd		*+
  6963  00068E  CFF5 F013          	movff	tablat,___lldiv@divisor
  6964  000692  0009               	tblrd		*+
  6965  000694  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  6966  000698  0009               	tblrd		*+
  6967  00069A  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  6968  00069E  000A               	tblrd		*-
  6969  0006A0  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  6970  0006A4  EC66  F019         	call	___lldiv	;wreg free
  6971  0006A8  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  6972  0006AC  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  6973  0006B0  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  6974  0006B4  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  6975                           
  6976                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6977  0006B8  C0E6  F00F         	movff	printf@tmpval,___llmod@dividend
  6978  0006BC  C0E7  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  6979  0006C0  C0E8  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  6980  0006C4  C0E9  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  6981  0006C8  0E0A               	movlw	10
  6982  0006CA  6E13               	movwf	___llmod@divisor,c
  6983  0006CC  0E00               	movlw	0
  6984  0006CE  6E14               	movwf	___llmod@divisor+1,c
  6985  0006D0  0E00               	movlw	0
  6986  0006D2  6E15               	movwf	___llmod@divisor+2,c
  6987  0006D4  0E00               	movlw	0
  6988  0006D6  6E16               	movwf	___llmod@divisor+3,c
  6989  0006D8  ECF9  F01A         	call	___llmod	;wreg free
  6990  0006DC  C00F  F0E6         	movff	?___llmod,printf@tmpval
  6991  0006E0  C010  F0E7         	movff	?___llmod+1,printf@tmpval+1
  6992  0006E4  C011  F0E8         	movff	?___llmod+2,printf@tmpval+2
  6993  0006E8  C012  F0E9         	movff	?___llmod+3,printf@tmpval+3
  6994                           
  6995                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6996  0006EC  0100               	movlb	0	; () banked
  6997  0006EE  51E6               	movf	printf@tmpval& (0+255),w,b
  6998  0006F0  0F30               	addlw	48
  6999  0006F2  EC0F  F01F         	call	_putch
  7000  0006F6  D000               	goto	l6706
  7001  0006F8                     l6706:
  7002  0006F8  0100               	movlb	0	; () banked
  7003  0006FA  07F5               	decf	printf@c& (0+255),f,b
  7004  0006FC  0100               	movlb	0	; () banked
  7005  0006FE  29F5               	incf	printf@c& (0+255),w,b
  7006  000700  B4D8               	btfsc	status,2,c
  7007  000702  D00A               	goto	l6712
  7008  000704  D7B2               	goto	l6700
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;doprnt.c: 1204: }
  7012                           ;doprnt.c: 1206: }
  7013                           ;doprnt.c: 1207: while(exp > 0) {
  7014  000706  D008               	goto	l6712
  7015  000708                     l6708:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;doprnt.c: 1208: (putch('0') );
  7019  000708  0E30               	movlw	48
  7020  00070A  EC0F  F01F         	call	_putch
  7021                           
  7022                           ;doprnt.c: 1209: exp--;
  7023  00070E  0100               	movlb	0	; () banked
  7024  000710  07EA               	decf	printf@exp& (0+255),f,b
  7025  000712  A0D8               	btfss	status,0,c
  7026  000714  07EB               	decf	(printf@exp+1)& (0+255),f,b
  7027  000716  D000               	goto	l6712
  7028  000718                     l6712:
  7029                           
  7030                           ; BSR set to: 0
  7031  000718  0100               	movlb	0	; () banked
  7032  00071A  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  7033  00071C  D007               	goto	l6714
  7034  00071E  0100               	movlb	0	; () banked
  7035  000720  51EB               	movf	(printf@exp+1)& (0+255),w,b
  7036  000722  E1F2               	bnz	l6708
  7037  000724  0100               	movlb	0	; () banked
  7038  000726  05EA               	decf	printf@exp& (0+255),w,b
  7039  000728  B0D8               	btfsc	status,0,c
  7040  00072A  D7EE               	goto	l6708
  7041  00072C                     l6714:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;doprnt.c: 1210: }
  7045                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7046  00072C  0100               	movlb	0	; () banked
  7047  00072E  BFF4               	btfsc	(printf@prec+1)& (0+255),7,b
  7048  000730  D00C               	goto	l666
  7049  000732  0100               	movlb	0	; () banked
  7050  000734  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7051  000736  E105               	bnz	u6770
  7052  000738  0E09               	movlw	9
  7053  00073A  0100               	movlb	0	; () banked
  7054  00073C  5DF3               	subwf	printf@prec& (0+255),w,b
  7055  00073E  A0D8               	btfss	status,0,c
  7056  000740  D004               	goto	l666
  7057  000742                     u6770:
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7061  000742  0E08               	movlw	8
  7062  000744  0100               	movlb	0	; () banked
  7063  000746  6FF5               	movwf	printf@c& (0+255),b
  7064  000748  D003               	goto	l6718
  7065  00074A                     l666:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;doprnt.c: 1213: else
  7069                           ;doprnt.c: 1214: c = prec;
  7070  00074A  C0F3  F0F5         	movff	printf@prec,printf@c
  7071  00074E  D000               	goto	l6718
  7072  000750                     l6718:
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;doprnt.c: 1215: prec -= c;
  7076  000750  0100               	movlb	0	; () banked
  7077  000752  51F5               	movf	printf@c& (0+255),w,b
  7078  000754  0100               	movlb	0	; () banked
  7079  000756  5FF3               	subwf	printf@prec& (0+255),f,b
  7080  000758  0E00               	movlw	0
  7081  00075A  0100               	movlb	0	; () banked
  7082  00075C  BFF5               	btfsc	printf@c& (0+255),7,b
  7083  00075E  0EFF               	movlw	255
  7084  000760  0100               	movlb	0	; () banked
  7085  000762  5BF4               	subwfb	(printf@prec+1)& (0+255),f,b
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;doprnt.c: 1219: if(c)
  7089  000764  0100               	movlb	0	; () banked
  7090  000766  51F5               	movf	printf@c& (0+255),w,b
  7091  000768  0100               	movlb	0	; () banked
  7092  00076A  B4D8               	btfsc	status,2,c
  7093  00076C  D004               	goto	l6724
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;doprnt.c: 1221: (putch('.') );
  7097  00076E  0E2E               	movlw	46
  7098  000770  EC0F  F01F         	call	_putch
  7099  000774  D000               	goto	l6724
  7100  000776                     l6724:
  7101                           
  7102                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7103  000776  0100               	movlb	0	; () banked
  7104  000778  51F5               	movf	printf@c& (0+255),w,b
  7105  00077A  ECEB  F008         	call	_scale
  7106  00077E  C032  F0DD         	movff	?_scale,_printf$2518
  7107  000782  C033  F0DE         	movff	?_scale+1,_printf$2518+1
  7108  000786  C034  F0DF         	movff	?_scale+2,_printf$2518+2
  7109                           
  7110                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7111  00078A  C0F0  F026         	movff	printf@fval,___ftmul@f2
  7112  00078E  C0F1  F027         	movff	printf@fval+1,___ftmul@f2+1
  7113  000792  C0F2  F028         	movff	printf@fval+2,___ftmul@f2+2
  7114  000796  C0DD  F023         	movff	_printf$2518,___ftmul@f1
  7115  00079A  C0DE  F024         	movff	_printf$2518+1,___ftmul@f1+1
  7116  00079E  C0DF  F025         	movff	_printf$2518+2,___ftmul@f1+2
  7117  0007A2  EC3A  F014         	call	___ftmul	;wreg free
  7118  0007A6  C023  F039         	movff	?___ftmul,___fttol@f1
  7119  0007AA  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  7120  0007AE  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  7121  0007B2  ECA3  F015         	call	___fttol	;wreg free
  7122  0007B6  C039  F0E2         	movff	?___fttol,printf@val
  7123  0007BA  C03A  F0E3         	movff	?___fttol+1,printf@val+1
  7124  0007BE  C03B  F0E4         	movff	?___fttol+2,printf@val+2
  7125  0007C2  C03C  F0E5         	movff	?___fttol+3,printf@val+3
  7126                           
  7127                           ;doprnt.c: 1228: while(c--) {
  7128  0007C6  D06E               	goto	l6734
  7129  0007C8                     l6728:
  7130                           
  7131                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7132  0007C8  C0E2  F00F         	movff	printf@val,___lldiv@dividend
  7133  0007CC  C0E3  F010         	movff	printf@val+1,___lldiv@dividend+1
  7134  0007D0  C0E4  F011         	movff	printf@val+2,___lldiv@dividend+2
  7135  0007D4  C0E5  F012         	movff	printf@val+3,___lldiv@dividend+3
  7136  0007D8  0100               	movlb	0	; () banked
  7137  0007DA  51F5               	movf	printf@c& (0+255),w,b
  7138  0007DC  0D04               	mullw	4
  7139  0007DE  0EE2               	movlw	low _dpowers
  7140  0007E0  24F3               	addwf	prodl,w,c
  7141  0007E2  6EF6               	movwf	tblptrl,c
  7142  0007E4  0EFB               	movlw	high _dpowers
  7143  0007E6  20F4               	addwfc	prodh,w,c
  7144  0007E8  6EF7               	movwf	tblptrh,c
  7145  0007EA                     	if	0	;There are less than 3 active tblptr bytes
  7146  0007EA                     	endif
  7147  0007EA  0009               	tblrd		*+
  7148  0007EC  CFF5 F013          	movff	tablat,___lldiv@divisor
  7149  0007F0  0009               	tblrd		*+
  7150  0007F2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  7151  0007F6  0009               	tblrd		*+
  7152  0007F8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  7153  0007FC  000A               	tblrd		*-
  7154  0007FE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  7155  000802  EC66  F019         	call	___lldiv	;wreg free
  7156  000806  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  7157  00080A  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  7158  00080E  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  7159  000812  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  7160                           
  7161                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7162  000816  C0E6  F00F         	movff	printf@tmpval,___llmod@dividend
  7163  00081A  C0E7  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  7164  00081E  C0E8  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  7165  000822  C0E9  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  7166  000826  0E0A               	movlw	10
  7167  000828  6E13               	movwf	___llmod@divisor,c
  7168  00082A  0E00               	movlw	0
  7169  00082C  6E14               	movwf	___llmod@divisor+1,c
  7170  00082E  0E00               	movlw	0
  7171  000830  6E15               	movwf	___llmod@divisor+2,c
  7172  000832  0E00               	movlw	0
  7173  000834  6E16               	movwf	___llmod@divisor+3,c
  7174  000836  ECF9  F01A         	call	___llmod	;wreg free
  7175  00083A  C00F  F0E6         	movff	?___llmod,printf@tmpval
  7176  00083E  C010  F0E7         	movff	?___llmod+1,printf@tmpval+1
  7177  000842  C011  F0E8         	movff	?___llmod+2,printf@tmpval+2
  7178  000846  C012  F0E9         	movff	?___llmod+3,printf@tmpval+3
  7179                           
  7180                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7181  00084A  0100               	movlb	0	; () banked
  7182  00084C  51E6               	movf	printf@tmpval& (0+255),w,b
  7183  00084E  0F30               	addlw	48
  7184  000850  EC0F  F01F         	call	_putch
  7185                           
  7186                           ;doprnt.c: 1232: val %= dpowers[c];
  7187  000854  C0E2  F00F         	movff	printf@val,___llmod@dividend
  7188  000858  C0E3  F010         	movff	printf@val+1,___llmod@dividend+1
  7189  00085C  C0E4  F011         	movff	printf@val+2,___llmod@dividend+2
  7190  000860  C0E5  F012         	movff	printf@val+3,___llmod@dividend+3
  7191  000864  0100               	movlb	0	; () banked
  7192  000866  51F5               	movf	printf@c& (0+255),w,b
  7193  000868  0D04               	mullw	4
  7194  00086A  0EE2               	movlw	low _dpowers
  7195  00086C  24F3               	addwf	prodl,w,c
  7196  00086E  6EF6               	movwf	tblptrl,c
  7197  000870  0EFB               	movlw	high _dpowers
  7198  000872  20F4               	addwfc	prodh,w,c
  7199  000874  6EF7               	movwf	tblptrh,c
  7200  000876                     	if	0	;There are less than 3 active tblptr bytes
  7201  000876                     	endif
  7202  000876  0009               	tblrd		*+
  7203  000878  CFF5 F013          	movff	tablat,___llmod@divisor
  7204  00087C  0009               	tblrd		*+
  7205  00087E  CFF5 F014          	movff	tablat,___llmod@divisor+1
  7206  000882  0009               	tblrd		*+
  7207  000884  CFF5 F015          	movff	tablat,___llmod@divisor+2
  7208  000888  000A               	tblrd		*-
  7209  00088A  CFF5 F016          	movff	tablat,___llmod@divisor+3
  7210  00088E  ECF9  F01A         	call	___llmod	;wreg free
  7211  000892  C00F  F0E2         	movff	?___llmod,printf@val
  7212  000896  C010  F0E3         	movff	?___llmod+1,printf@val+1
  7213  00089A  C011  F0E4         	movff	?___llmod+2,printf@val+2
  7214  00089E  C012  F0E5         	movff	?___llmod+3,printf@val+3
  7215  0008A2  D000               	goto	l6734
  7216  0008A4                     l6734:
  7217  0008A4  0100               	movlb	0	; () banked
  7218  0008A6  07F5               	decf	printf@c& (0+255),f,b
  7219  0008A8  0100               	movlb	0	; () banked
  7220  0008AA  29F5               	incf	printf@c& (0+255),w,b
  7221  0008AC  B4D8               	btfsc	status,2,c
  7222  0008AE  D00A               	goto	l6740
  7223  0008B0  D78B               	goto	l6728
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;doprnt.c: 1233: }
  7227                           ;doprnt.c: 1235: while(prec) {
  7228  0008B2  D008               	goto	l6740
  7229  0008B4                     l6736:
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;doprnt.c: 1236: (putch('0') );
  7233  0008B4  0E30               	movlw	48
  7234  0008B6  EC0F  F01F         	call	_putch
  7235                           
  7236                           ;doprnt.c: 1237: prec--;
  7237  0008BA  0100               	movlb	0	; () banked
  7238  0008BC  07F3               	decf	printf@prec& (0+255),f,b
  7239  0008BE  A0D8               	btfss	status,0,c
  7240  0008C0  07F4               	decf	(printf@prec+1)& (0+255),f,b
  7241  0008C2  D000               	goto	l6740
  7242  0008C4                     l6740:
  7243                           
  7244                           ; BSR set to: 0
  7245  0008C4  0100               	movlb	0	; () banked
  7246  0008C6  51F3               	movf	printf@prec& (0+255),w,b
  7247  0008C8  0100               	movlb	0	; () banked
  7248  0008CA  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  7249  0008CC  B4D8               	btfsc	status,2,c
  7250  0008CE  D0E3               	goto	l6798
  7251  0008D0  D7F1               	goto	l6736
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;doprnt.c: 1238: }
  7255                           ;doprnt.c: 1245: continue;
  7256  0008D2  D0E1               	goto	l6798
  7257  0008D4                     l6742:
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;doprnt.c: 1246: }
  7261                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7262  0008D4  0100               	movlb	0	; () banked
  7263  0008D6  51F3               	movf	printf@prec& (0+255),w,b
  7264  0008D8  0100               	movlb	0	; () banked
  7265  0008DA  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  7266  0008DC  A4D8               	btfss	status,2,c
  7267  0008DE  D00E               	goto	l6748
  7268                           
  7269                           ; BSR set to: 0
  7270  0008E0  0100               	movlb	0	; () banked
  7271  0008E2  51E2               	movf	printf@val& (0+255),w,b
  7272  0008E4  0100               	movlb	0	; () banked
  7273  0008E6  11E3               	iorwf	(printf@val+1)& (0+255),w,b
  7274  0008E8  0100               	movlb	0	; () banked
  7275  0008EA  11E4               	iorwf	(printf@val+2)& (0+255),w,b
  7276  0008EC  0100               	movlb	0	; () banked
  7277  0008EE  11E5               	iorwf	(printf@val+3)& (0+255),w,b
  7278  0008F0  A4D8               	btfss	status,2,c
  7279  0008F2  D004               	goto	l6748
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;doprnt.c: 1291: prec++;
  7283  0008F4  0100               	movlb	0	; () banked
  7284  0008F6  4BF3               	infsnz	printf@prec& (0+255),f,b
  7285  0008F8  2BF4               	incf	(printf@prec+1)& (0+255),f,b
  7286  0008FA  D000               	goto	l6748
  7287  0008FC                     l6748:
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;doprnt.c: 1339: if(c < prec)
  7291  0008FC  0E80               	movlw	128
  7292  0008FE  0100               	movlb	0	; () banked
  7293  000900  BFF5               	btfsc	printf@c& (0+255),7,b
  7294  000902  0E7F               	movlw	127
  7295  000904  6E53               	movwf	??_printf& (0+255),c
  7296  000906  0100               	movlb	0	; () banked
  7297  000908  51F3               	movf	printf@prec& (0+255),w,b
  7298  00090A  0100               	movlb	0	; () banked
  7299  00090C  5DF5               	subwf	printf@c& (0+255),w,b
  7300  00090E  0100               	movlb	0	; () banked
  7301  000910  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7302  000912  0A80               	xorlw	128
  7303  000914  5853               	subwfb	??_printf& (0+255),w,c
  7304  000916  B0D8               	btfsc	status,0,c
  7305  000918  D003               	goto	l6752
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;doprnt.c: 1340: c = prec;
  7309  00091A  C0F3  F0F5         	movff	printf@prec,printf@c
  7310  00091E  D017               	goto	l6756
  7311  000920                     l6752:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;doprnt.c: 1341: else if(prec < c)
  7315  000920  0100               	movlb	0	; () banked
  7316  000922  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7317  000924  0A80               	xorlw	128
  7318  000926  6E53               	movwf	??_printf& (0+255),c
  7319  000928  0100               	movlb	0	; () banked
  7320  00092A  51F5               	movf	printf@c& (0+255),w,b
  7321  00092C  0100               	movlb	0	; () banked
  7322  00092E  5DF3               	subwf	printf@prec& (0+255),w,b
  7323  000930  0E80               	movlw	128
  7324  000932  0100               	movlb	0	; () banked
  7325  000934  BFF5               	btfsc	printf@c& (0+255),7,b
  7326  000936  0E7F               	movlw	127
  7327  000938  5853               	subwfb	??_printf& (0+255),w,c
  7328  00093A  B0D8               	btfsc	status,0,c
  7329  00093C  D008               	goto	l6756
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;doprnt.c: 1342: prec = c;
  7333  00093E  0100               	movlb	0	; () banked
  7334  000940  51F5               	movf	printf@c& (0+255),w,b
  7335  000942  0100               	movlb	0	; () banked
  7336  000944  6FF3               	movwf	printf@prec& (0+255),b
  7337  000946  6BF4               	clrf	(printf@prec+1)& (0+255),b
  7338  000948  BFF3               	btfsc	printf@prec& (0+255),7,b
  7339  00094A  07F4               	decf	(printf@prec+1)& (0+255),f,b
  7340                           
  7341                           ; BSR set to: 0
  7342  00094C  D000               	goto	l6756
  7343  00094E                     l6756:
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7347  00094E  0100               	movlb	0	; () banked
  7348  000950  51EE               	movf	printf@width& (0+255),w,b
  7349  000952  0100               	movlb	0	; () banked
  7350  000954  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  7351  000956  B4D8               	btfsc	status,2,c
  7352  000958  D011               	goto	l6762
  7353                           
  7354                           ; BSR set to: 0
  7355  00095A  0E03               	movlw	3
  7356  00095C  0100               	movlb	0	; () banked
  7357  00095E  15EC               	andwf	printf@flag& (0+255),w,b
  7358  000960  6E53               	movwf	??_printf& (0+255),c
  7359  000962  0E00               	movlw	0
  7360  000964  0100               	movlb	0	; () banked
  7361  000966  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7362  000968  6E54               	movwf	(??_printf+1)& (0+255),c
  7363  00096A  5053               	movf	??_printf,w,c
  7364  00096C  1054               	iorwf	??_printf+1,w,c
  7365  00096E  B4D8               	btfsc	status,2,c
  7366  000970  D005               	goto	l6762
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;doprnt.c: 1346: width--;
  7370  000972  0100               	movlb	0	; () banked
  7371  000974  07EE               	decf	printf@width& (0+255),f,b
  7372  000976  A0D8               	btfss	status,0,c
  7373  000978  07EF               	decf	(printf@width+1)& (0+255),f,b
  7374  00097A  D000               	goto	l6762
  7375  00097C                     l6762:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7379  00097C  0100               	movlb	0	; () banked
  7380  00097E  ADED               	btfss	(printf@flag+1)& (0+255),6,b
  7381  000980  D01D               	goto	l6770
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;doprnt.c: 1349: if(width > prec)
  7385  000982  0100               	movlb	0	; () banked
  7386  000984  51EE               	movf	printf@width& (0+255),w,b
  7387  000986  0100               	movlb	0	; () banked
  7388  000988  5DF3               	subwf	printf@prec& (0+255),w,b
  7389  00098A  0100               	movlb	0	; () banked
  7390  00098C  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7391  00098E  0A80               	xorlw	128
  7392  000990  6E53               	movwf	??_printf& (0+255),c
  7393  000992  0100               	movlb	0	; () banked
  7394  000994  51EF               	movf	(printf@width+1)& (0+255),w,b
  7395  000996  0A80               	xorlw	128
  7396  000998  5853               	subwfb	??_printf& (0+255),w,c
  7397  00099A  B0D8               	btfsc	status,0,c
  7398  00099C  D009               	goto	l6768
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;doprnt.c: 1350: width -= prec;
  7402  00099E  0100               	movlb	0	; () banked
  7403  0009A0  51F3               	movf	printf@prec& (0+255),w,b
  7404  0009A2  0100               	movlb	0	; () banked
  7405  0009A4  5FEE               	subwf	printf@width& (0+255),f,b
  7406  0009A6  0100               	movlb	0	; () banked
  7407  0009A8  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7408  0009AA  0100               	movlb	0	; () banked
  7409  0009AC  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  7410  0009AE  D006               	goto	l6770
  7411  0009B0                     l6768:
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;doprnt.c: 1351: else
  7415                           ;doprnt.c: 1352: width = 0;
  7416  0009B0  0E00               	movlw	0
  7417  0009B2  0100               	movlb	0	; () banked
  7418  0009B4  6FEF               	movwf	(printf@width+1)& (0+255),b
  7419  0009B6  0E00               	movlw	0
  7420  0009B8  6FEE               	movwf	printf@width& (0+255),b
  7421                           
  7422                           ; BSR set to: 0
  7423  0009BA  D000               	goto	l6770
  7424  0009BC                     l6770:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;doprnt.c: 1353: }
  7428                           ;doprnt.c: 1381: if(width > c)
  7429  0009BC  0E80               	movlw	128
  7430  0009BE  0100               	movlb	0	; () banked
  7431  0009C0  BFF5               	btfsc	printf@c& (0+255),7,b
  7432  0009C2  0E7F               	movlw	127
  7433  0009C4  6E53               	movwf	??_printf& (0+255),c
  7434  0009C6  0100               	movlb	0	; () banked
  7435  0009C8  51EE               	movf	printf@width& (0+255),w,b
  7436  0009CA  0100               	movlb	0	; () banked
  7437  0009CC  5DF5               	subwf	printf@c& (0+255),w,b
  7438  0009CE  0100               	movlb	0	; () banked
  7439  0009D0  51EF               	movf	(printf@width+1)& (0+255),w,b
  7440  0009D2  0A80               	xorlw	128
  7441  0009D4  5853               	subwfb	??_printf& (0+255),w,c
  7442  0009D6  B0D8               	btfsc	status,0,c
  7443  0009D8  D00B               	goto	l6774
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;doprnt.c: 1382: width -= c;
  7447  0009DA  0100               	movlb	0	; () banked
  7448  0009DC  51F5               	movf	printf@c& (0+255),w,b
  7449  0009DE  0100               	movlb	0	; () banked
  7450  0009E0  5FEE               	subwf	printf@width& (0+255),f,b
  7451  0009E2  0E00               	movlw	0
  7452  0009E4  0100               	movlb	0	; () banked
  7453  0009E6  BFF5               	btfsc	printf@c& (0+255),7,b
  7454  0009E8  0EFF               	movlw	255
  7455  0009EA  0100               	movlb	0	; () banked
  7456  0009EC  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  7457  0009EE  D006               	goto	l6776
  7458  0009F0                     l6774:
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;doprnt.c: 1383: else
  7462                           ;doprnt.c: 1384: width = 0;
  7463  0009F0  0E00               	movlw	0
  7464  0009F2  0100               	movlb	0	; () banked
  7465  0009F4  6FEF               	movwf	(printf@width+1)& (0+255),b
  7466  0009F6  0E00               	movlw	0
  7467  0009F8  6FEE               	movwf	printf@width& (0+255),b
  7468  0009FA  D000               	goto	l6776
  7469  0009FC                     l6776:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;doprnt.c: 1387: if(flag & 0x04) {
  7473  0009FC  0100               	movlb	0	; () banked
  7474  0009FE  A5EC               	btfss	printf@flag& (0+255),2,b
  7475  000A00  D025               	goto	l6788
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;doprnt.c: 1392: if(flag & 0x03)
  7479  000A02  0E03               	movlw	3
  7480  000A04  0100               	movlb	0	; () banked
  7481  000A06  15EC               	andwf	printf@flag& (0+255),w,b
  7482  000A08  6E53               	movwf	??_printf& (0+255),c
  7483  000A0A  0E00               	movlw	0
  7484  000A0C  0100               	movlb	0	; () banked
  7485  000A0E  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7486  000A10  6E54               	movwf	(??_printf+1)& (0+255),c
  7487  000A12  5053               	movf	??_printf,w,c
  7488  000A14  1054               	iorwf	??_printf+1,w,c
  7489  000A16  B4D8               	btfsc	status,2,c
  7490  000A18  D004               	goto	l6782
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;doprnt.c: 1393: (putch('-') );
  7494  000A1A  0E2D               	movlw	45
  7495  000A1C  EC0F  F01F         	call	_putch
  7496  000A20  D000               	goto	l6782
  7497  000A22                     l6782:
  7498                           
  7499                           ;doprnt.c: 1415: if(width)
  7500  000A22  0100               	movlb	0	; () banked
  7501  000A24  51EE               	movf	printf@width& (0+255),w,b
  7502  000A26  0100               	movlb	0	; () banked
  7503  000A28  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  7504  000A2A  B4D8               	btfsc	status,2,c
  7505  000A2C  D034               	goto	l6798
  7506  000A2E                     l6784:
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;doprnt.c: 1417: (putch('0') );
  7510  000A2E  0E30               	movlw	48
  7511  000A30  EC0F  F01F         	call	_putch
  7512                           
  7513                           ;doprnt.c: 1418: while(--width);
  7514  000A34  0100               	movlb	0	; () banked
  7515  000A36  07EE               	decf	printf@width& (0+255),f,b
  7516  000A38  A0D8               	btfss	status,0,c
  7517  000A3A  07EF               	decf	(printf@width+1)& (0+255),f,b
  7518  000A3C  0100               	movlb	0	; () banked
  7519  000A3E  51EE               	movf	printf@width& (0+255),w,b
  7520  000A40  0100               	movlb	0	; () banked
  7521  000A42  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  7522  000A44  B4D8               	btfsc	status,2,c
  7523  000A46  D027               	goto	l6798
  7524  000A48  D7F2               	goto	l6784
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;doprnt.c: 1420: } else
  7528                           
  7529                           ; BSR set to: 0
  7530  000A4A  D025               	goto	l6798
  7531  000A4C                     l6788:
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;doprnt.c: 1422: {
  7535                           ;doprnt.c: 1424: if(width
  7536                           ;doprnt.c: 1428: )
  7537  000A4C  0100               	movlb	0	; () banked
  7538  000A4E  51EE               	movf	printf@width& (0+255),w,b
  7539  000A50  0100               	movlb	0	; () banked
  7540  000A52  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  7541  000A54  B4D8               	btfsc	status,2,c
  7542  000A56  D00F               	goto	l6794
  7543  000A58                     l6790:
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;doprnt.c: 1430: (putch(' ') );
  7547  000A58  0E20               	movlw	32
  7548  000A5A  EC0F  F01F         	call	_putch
  7549                           
  7550                           ;doprnt.c: 1431: while(--width);
  7551  000A5E  0100               	movlb	0	; () banked
  7552  000A60  07EE               	decf	printf@width& (0+255),f,b
  7553  000A62  A0D8               	btfss	status,0,c
  7554  000A64  07EF               	decf	(printf@width+1)& (0+255),f,b
  7555  000A66  0100               	movlb	0	; () banked
  7556  000A68  51EE               	movf	printf@width& (0+255),w,b
  7557  000A6A  0100               	movlb	0	; () banked
  7558  000A6C  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  7559  000A6E  B4D8               	btfsc	status,2,c
  7560  000A70  D002               	goto	l6794
  7561  000A72  D7F2               	goto	l6790
  7562                           
  7563                           ; BSR set to: 0
  7564  000A74  D000               	goto	l6794
  7565  000A76                     l6794:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;doprnt.c: 1438: if(flag & 0x03)
  7569  000A76  0E03               	movlw	3
  7570  000A78  0100               	movlb	0	; () banked
  7571  000A7A  15EC               	andwf	printf@flag& (0+255),w,b
  7572  000A7C  6E53               	movwf	??_printf& (0+255),c
  7573  000A7E  0E00               	movlw	0
  7574  000A80  0100               	movlb	0	; () banked
  7575  000A82  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7576  000A84  6E54               	movwf	(??_printf+1)& (0+255),c
  7577  000A86  5053               	movf	??_printf,w,c
  7578  000A88  1054               	iorwf	??_printf+1,w,c
  7579  000A8A  B4D8               	btfsc	status,2,c
  7580  000A8C  D004               	goto	l6798
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;doprnt.c: 1439: (putch('-') );
  7584  000A8E  0E2D               	movlw	45
  7585  000A90  EC0F  F01F         	call	_putch
  7586  000A94  D000               	goto	l6798
  7587  000A96                     l6798:
  7588  000A96  C04E  FFF6         	movff	printf@f,tblptrl
  7589  000A9A  C04F  FFF7         	movff	printf@f+1,tblptrh
  7590  000A9E  4A4E               	infsnz	printf@f,f,c
  7591  000AA0  2A4F               	incf	printf@f+1,f,c
  7592  000AA2                     	if	0	;tblptru may be non-zero
  7593  000AA2                     	endif
  7594  000AA2                     	if	0	;tblptru may be non-zero
  7595  000AA2                     	endif
  7596  000AA2  0008               	tblrd		*
  7597  000AA4  CFF5 F0F5          	movff	tablat,printf@c
  7598  000AA8  0100               	movlb	0	; () banked
  7599  000AAA  51F5               	movf	printf@c& (0+255),w,b
  7600  000AAC  B4D8               	btfsc	status,2,c
  7601  000AAE  D003               	goto	l696
  7602  000AB0  EF16  F000         	goto	l6536
  7603                           
  7604                           ; BSR set to: 0
  7605  000AB4  D000               	goto	l696
  7606  000AB6                     l696:
  7607                           
  7608                           ; BSR set to: 0
  7609  000AB6  0012               	return		;funcret
  7610  000AB8                     __end_of_printf:
  7611                           	opt stack 0
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon2	equ	0xFF1
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           
  7630 ;; *************** function _scale *****************
  7631 ;; Defined at:
  7632 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  scl             1    wreg     char 
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;  scl             1   55[COMRAM] char 
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  3   49[COMRAM] char 
  7639 ;; Registers used:
  7640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7646 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;Total ram usage:        7 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    4
  7653 ;; This function calls:
  7654 ;;		___awdiv
  7655 ;;		___awmod
  7656 ;;		___ftmul
  7657 ;;		___wmul
  7658 ;; This function is called by:
  7659 ;;		_printf
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text20
  7664  0011D6                     __ptext20:
  7665                           	opt stack 0
  7666  0011D6                     _scale:
  7667                           	opt stack 21
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;incstack = 0
  7671                           ;scale@scl stored from wreg
  7672  0011D6  6E38               	movwf	scale@scl,c
  7673                           
  7674                           ;doprnt.c: 428: if(scl < 0) {
  7675  0011D8  AE38               	btfss	scale@scl,7,c
  7676  0011DA  D0EF               	goto	l6164
  7677                           
  7678                           ;doprnt.c: 429: scl = -scl;
  7679  0011DC  6C38               	negf	scale@scl,c
  7680                           
  7681                           ;doprnt.c: 430: if(scl>=110)
  7682  0011DE  5038               	movf	scale@scl,w,c
  7683  0011E0  0A80               	xorlw	128
  7684  0011E2  0F12               	addlw	-238
  7685  0011E4  A0D8               	btfss	status,0,c
  7686  0011E6  D08D               	goto	l6154
  7687                           
  7688                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7689  0011E8  0E00               	movlw	0
  7690  0011EA  6E20               	movwf	___wmul@multiplicand+1,c
  7691  0011EC  0E03               	movlw	3
  7692  0011EE  6E1F               	movwf	___wmul@multiplicand,c
  7693  0011F0  0E00               	movlw	0
  7694  0011F2  6E18               	movwf	___awdiv@divisor+1,c
  7695  0011F4  0E0A               	movlw	10
  7696  0011F6  6E17               	movwf	___awdiv@divisor,c
  7697  0011F8  0E00               	movlw	0
  7698  0011FA  6E12               	movwf	___awmod@divisor+1,c
  7699  0011FC  0E64               	movlw	100
  7700  0011FE  6E11               	movwf	___awmod@divisor,c
  7701  001200  5038               	movf	scale@scl,w,c
  7702  001202  6E0F               	movwf	___awmod@dividend,c
  7703  001204  6A10               	clrf	___awmod@dividend+1,c
  7704  001206  BE0F               	btfsc	___awmod@dividend,7,c
  7705  001208  0610               	decf	___awmod@dividend+1,f,c
  7706  00120A  ECB8  F01A         	call	___awmod	;wreg free
  7707  00120E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  7708  001212  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  7709  001216  EC1B  F019         	call	___awdiv	;wreg free
  7710  00121A  0E09               	movlw	9
  7711  00121C  2415               	addwf	?___awdiv,w,c
  7712  00121E  6E1D               	movwf	___wmul@multiplier,c
  7713  001220  0E00               	movlw	0
  7714  001222  2016               	addwfc	?___awdiv+1,w,c
  7715  001224  6E1E               	movwf	___wmul@multiplier+1,c
  7716  001226  EC4B  F01E         	call	___wmul	;wreg free
  7717  00122A  0E0A               	movlw	low __npowers_
  7718  00122C  241D               	addwf	?___wmul,w,c
  7719  00122E  6EF6               	movwf	tblptrl,c
  7720  001230  0EFC               	movlw	high __npowers_
  7721  001232  201E               	addwfc	?___wmul+1,w,c
  7722  001234  6EF7               	movwf	tblptrh,c
  7723  001236                     	if	0	;There are less than 3 active tblptr bytes
  7724  001236                     	endif
  7725  001236  0009               	tblrd		*+
  7726  001238  CFF5 F026          	movff	tablat,___ftmul@f2
  7727  00123C  0009               	tblrd		*+
  7728  00123E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  7729  001242  000A               	tblrd		*-
  7730  001244  CFF5 F028          	movff	tablat,___ftmul@f2+2
  7731  001248  0E00               	movlw	0
  7732  00124A  6E18               	movwf	___awdiv@divisor+1,c
  7733  00124C  0E64               	movlw	100
  7734  00124E  6E17               	movwf	___awdiv@divisor,c
  7735  001250  5038               	movf	scale@scl,w,c
  7736  001252  6E15               	movwf	___awdiv@dividend,c
  7737  001254  6A16               	clrf	___awdiv@dividend+1,c
  7738  001256  BE15               	btfsc	___awdiv@dividend,7,c
  7739  001258  0616               	decf	___awdiv@dividend+1,f,c
  7740  00125A  EC1B  F019         	call	___awdiv	;wreg free
  7741  00125E  0E12               	movlw	18
  7742  001260  2415               	addwf	?___awdiv,w,c
  7743  001262  6E1D               	movwf	___wmul@multiplier,c
  7744  001264  0E00               	movlw	0
  7745  001266  2016               	addwfc	?___awdiv+1,w,c
  7746  001268  6E1E               	movwf	___wmul@multiplier+1,c
  7747  00126A  0E00               	movlw	0
  7748  00126C  6E20               	movwf	___wmul@multiplicand+1,c
  7749  00126E  0E03               	movlw	3
  7750  001270  6E1F               	movwf	___wmul@multiplicand,c
  7751  001272  EC4B  F01E         	call	___wmul	;wreg free
  7752  001276  0E0A               	movlw	low __npowers_
  7753  001278  241D               	addwf	?___wmul,w,c
  7754  00127A  6EF6               	movwf	tblptrl,c
  7755  00127C  0EFC               	movlw	high __npowers_
  7756  00127E  201E               	addwfc	?___wmul+1,w,c
  7757  001280  6EF7               	movwf	tblptrh,c
  7758  001282                     	if	0	;There are less than 3 active tblptr bytes
  7759  001282                     	endif
  7760  001282  0009               	tblrd		*+
  7761  001284  CFF5 F023          	movff	tablat,___ftmul@f1
  7762  001288  0009               	tblrd		*+
  7763  00128A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  7764  00128E  000A               	tblrd		*-
  7765  001290  CFF5 F025          	movff	tablat,___ftmul@f1+2
  7766  001294  EC3A  F014         	call	___ftmul	;wreg free
  7767  001298  C023  F035         	movff	?___ftmul,_scale$2517
  7768  00129C  C024  F036         	movff	?___ftmul+1,_scale$2517+1
  7769  0012A0  C025  F037         	movff	?___ftmul+2,_scale$2517+2
  7770                           
  7771                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7772  0012A4  C035  F023         	movff	_scale$2517,___ftmul@f1
  7773  0012A8  C036  F024         	movff	_scale$2517+1,___ftmul@f1+1
  7774  0012AC  C037  F025         	movff	_scale$2517+2,___ftmul@f1+2
  7775  0012B0  0E00               	movlw	0
  7776  0012B2  6E20               	movwf	___wmul@multiplicand+1,c
  7777  0012B4  0E03               	movlw	3
  7778  0012B6  6E1F               	movwf	___wmul@multiplicand,c
  7779  0012B8  0E00               	movlw	0
  7780  0012BA  6E12               	movwf	___awmod@divisor+1,c
  7781  0012BC  0E0A               	movlw	10
  7782  0012BE  6E11               	movwf	___awmod@divisor,c
  7783  0012C0  5038               	movf	scale@scl,w,c
  7784  0012C2  6E0F               	movwf	___awmod@dividend,c
  7785  0012C4  6A10               	clrf	___awmod@dividend+1,c
  7786  0012C6  BE0F               	btfsc	___awmod@dividend,7,c
  7787  0012C8  0610               	decf	___awmod@dividend+1,f,c
  7788  0012CA  ECB8  F01A         	call	___awmod	;wreg free
  7789  0012CE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  7790  0012D2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7791  0012D6  EC4B  F01E         	call	___wmul	;wreg free
  7792  0012DA  0E0A               	movlw	low __npowers_
  7793  0012DC  241D               	addwf	?___wmul,w,c
  7794  0012DE  6EF6               	movwf	tblptrl,c
  7795  0012E0  0EFC               	movlw	high __npowers_
  7796  0012E2  201E               	addwfc	?___wmul+1,w,c
  7797  0012E4  6EF7               	movwf	tblptrh,c
  7798  0012E6                     	if	0	;There are less than 3 active tblptr bytes
  7799  0012E6                     	endif
  7800  0012E6  0009               	tblrd		*+
  7801  0012E8  CFF5 F026          	movff	tablat,___ftmul@f2
  7802  0012EC  0009               	tblrd		*+
  7803  0012EE  CFF5 F027          	movff	tablat,___ftmul@f2+1
  7804  0012F2  000A               	tblrd		*-
  7805  0012F4  CFF5 F028          	movff	tablat,___ftmul@f2+2
  7806  0012F8  EC3A  F014         	call	___ftmul	;wreg free
  7807  0012FC  D141               	goto	L11
  7808  0012FE  D15A               	goto	l595
  7809  001300  D054               	goto	l6160
  7810  001302                     l6154:
  7811                           
  7812                           ;doprnt.c: 432: else if(scl > 10)
  7813  001302  5038               	movf	scale@scl,w,c
  7814  001304  0A80               	xorlw	128
  7815  001306  0F75               	addlw	-139
  7816  001308  A0D8               	btfss	status,0,c
  7817  00130A  D04F               	goto	l6160
  7818                           
  7819                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7820  00130C  0E00               	movlw	0
  7821  00130E  6E18               	movwf	___awdiv@divisor+1,c
  7822  001310  0E0A               	movlw	10
  7823  001312  6E17               	movwf	___awdiv@divisor,c
  7824  001314  5038               	movf	scale@scl,w,c
  7825  001316  6E15               	movwf	___awdiv@dividend,c
  7826  001318  6A16               	clrf	___awdiv@dividend+1,c
  7827  00131A  BE15               	btfsc	___awdiv@dividend,7,c
  7828  00131C  0616               	decf	___awdiv@dividend+1,f,c
  7829  00131E  EC1B  F019         	call	___awdiv	;wreg free
  7830  001322  0E09               	movlw	9
  7831  001324  2415               	addwf	?___awdiv,w,c
  7832  001326  6E1D               	movwf	___wmul@multiplier,c
  7833  001328  0E00               	movlw	0
  7834  00132A  2016               	addwfc	?___awdiv+1,w,c
  7835  00132C  6E1E               	movwf	___wmul@multiplier+1,c
  7836  00132E  0E00               	movlw	0
  7837  001330  6E20               	movwf	___wmul@multiplicand+1,c
  7838  001332  0E03               	movlw	3
  7839  001334  6E1F               	movwf	___wmul@multiplicand,c
  7840  001336  EC4B  F01E         	call	___wmul	;wreg free
  7841  00133A  0E0A               	movlw	low __npowers_
  7842  00133C  241D               	addwf	?___wmul,w,c
  7843  00133E  6EF6               	movwf	tblptrl,c
  7844  001340  0EFC               	movlw	high __npowers_
  7845  001342  201E               	addwfc	?___wmul+1,w,c
  7846  001344  6EF7               	movwf	tblptrh,c
  7847  001346                     	if	0	;There are less than 3 active tblptr bytes
  7848  001346                     	endif
  7849  001346  0009               	tblrd		*+
  7850  001348  CFF5 F023          	movff	tablat,___ftmul@f1
  7851  00134C  0009               	tblrd		*+
  7852  00134E  CFF5 F024          	movff	tablat,___ftmul@f1+1
  7853  001352  000A               	tblrd		*-
  7854  001354  CFF5 F025          	movff	tablat,___ftmul@f1+2
  7855  001358  0E00               	movlw	0
  7856  00135A  6E20               	movwf	___wmul@multiplicand+1,c
  7857  00135C  0E03               	movlw	3
  7858  00135E  6E1F               	movwf	___wmul@multiplicand,c
  7859  001360  0E00               	movlw	0
  7860  001362  6E12               	movwf	___awmod@divisor+1,c
  7861  001364  0E0A               	movlw	10
  7862  001366  6E11               	movwf	___awmod@divisor,c
  7863  001368  5038               	movf	scale@scl,w,c
  7864  00136A  6E0F               	movwf	___awmod@dividend,c
  7865  00136C  6A10               	clrf	___awmod@dividend+1,c
  7866  00136E  BE0F               	btfsc	___awmod@dividend,7,c
  7867  001370  0610               	decf	___awmod@dividend+1,f,c
  7868  001372  ECB8  F01A         	call	___awmod	;wreg free
  7869  001376  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  7870  00137A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7871  00137E  EC4B  F01E         	call	___wmul	;wreg free
  7872  001382  0E0A               	movlw	low __npowers_
  7873  001384  241D               	addwf	?___wmul,w,c
  7874  001386  6EF6               	movwf	tblptrl,c
  7875  001388  0EFC               	movlw	high __npowers_
  7876  00138A  201E               	addwfc	?___wmul+1,w,c
  7877  00138C  6EF7               	movwf	tblptrh,c
  7878  00138E                     	if	0	;There are less than 3 active tblptr bytes
  7879  00138E                     	endif
  7880  00138E  0009               	tblrd		*+
  7881  001390  CFF5 F026          	movff	tablat,___ftmul@f2
  7882  001394  0009               	tblrd		*+
  7883  001396  CFF5 F027          	movff	tablat,___ftmul@f2+1
  7884  00139A  000A               	tblrd		*-
  7885  00139C  CFF5 F028          	movff	tablat,___ftmul@f2+2
  7886  0013A0  EC3A  F014         	call	___ftmul	;wreg free
  7887  0013A4  D0ED               	goto	L11
  7888  0013A6  D106               	goto	l595
  7889  0013A8  D000               	goto	l6160
  7890  0013AA                     l6160:
  7891                           
  7892                           ;doprnt.c: 434: return _npowers_[scl];
  7893  0013AA  5038               	movf	scale@scl,w,c
  7894  0013AC  0D03               	mullw	3
  7895  0013AE  0E0A               	movlw	low __npowers_
  7896  0013B0  24F3               	addwf	prodl,w,c
  7897  0013B2  6EF6               	movwf	tblptrl,c
  7898  0013B4  0EFC               	movlw	high __npowers_
  7899  0013B6  D0F2               	goto	L10
  7900  0013B8  D0FD               	goto	l595
  7901  0013BA                     l6164:
  7902                           
  7903                           ;doprnt.c: 435: }
  7904                           ;doprnt.c: 436: if(scl>=110)
  7905  0013BA  5038               	movf	scale@scl,w,c
  7906  0013BC  0A80               	xorlw	128
  7907  0013BE  0F12               	addlw	-238
  7908  0013C0  A0D8               	btfss	status,0,c
  7909  0013C2  D08D               	goto	l6172
  7910                           
  7911                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7912  0013C4  0E00               	movlw	0
  7913  0013C6  6E20               	movwf	___wmul@multiplicand+1,c
  7914  0013C8  0E03               	movlw	3
  7915  0013CA  6E1F               	movwf	___wmul@multiplicand,c
  7916  0013CC  0E00               	movlw	0
  7917  0013CE  6E18               	movwf	___awdiv@divisor+1,c
  7918  0013D0  0E0A               	movlw	10
  7919  0013D2  6E17               	movwf	___awdiv@divisor,c
  7920  0013D4  0E00               	movlw	0
  7921  0013D6  6E12               	movwf	___awmod@divisor+1,c
  7922  0013D8  0E64               	movlw	100
  7923  0013DA  6E11               	movwf	___awmod@divisor,c
  7924  0013DC  5038               	movf	scale@scl,w,c
  7925  0013DE  6E0F               	movwf	___awmod@dividend,c
  7926  0013E0  6A10               	clrf	___awmod@dividend+1,c
  7927  0013E2  BE0F               	btfsc	___awmod@dividend,7,c
  7928  0013E4  0610               	decf	___awmod@dividend+1,f,c
  7929  0013E6  ECB8  F01A         	call	___awmod	;wreg free
  7930  0013EA  C00F  F015         	movff	?___awmod,___awdiv@dividend
  7931  0013EE  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  7932  0013F2  EC1B  F019         	call	___awdiv	;wreg free
  7933  0013F6  0E09               	movlw	9
  7934  0013F8  2415               	addwf	?___awdiv,w,c
  7935  0013FA  6E1D               	movwf	___wmul@multiplier,c
  7936  0013FC  0E00               	movlw	0
  7937  0013FE  2016               	addwfc	?___awdiv+1,w,c
  7938  001400  6E1E               	movwf	___wmul@multiplier+1,c
  7939  001402  EC4B  F01E         	call	___wmul	;wreg free
  7940  001406  0E31               	movlw	low __powers_
  7941  001408  241D               	addwf	?___wmul,w,c
  7942  00140A  6EF6               	movwf	tblptrl,c
  7943  00140C  0EFC               	movlw	high __powers_
  7944  00140E  201E               	addwfc	?___wmul+1,w,c
  7945  001410  6EF7               	movwf	tblptrh,c
  7946  001412                     	if	0	;There are less than 3 active tblptr bytes
  7947  001412                     	endif
  7948  001412  0009               	tblrd		*+
  7949  001414  CFF5 F026          	movff	tablat,___ftmul@f2
  7950  001418  0009               	tblrd		*+
  7951  00141A  CFF5 F027          	movff	tablat,___ftmul@f2+1
  7952  00141E  000A               	tblrd		*-
  7953  001420  CFF5 F028          	movff	tablat,___ftmul@f2+2
  7954  001424  0E00               	movlw	0
  7955  001426  6E18               	movwf	___awdiv@divisor+1,c
  7956  001428  0E64               	movlw	100
  7957  00142A  6E17               	movwf	___awdiv@divisor,c
  7958  00142C  5038               	movf	scale@scl,w,c
  7959  00142E  6E15               	movwf	___awdiv@dividend,c
  7960  001430  6A16               	clrf	___awdiv@dividend+1,c
  7961  001432  BE15               	btfsc	___awdiv@dividend,7,c
  7962  001434  0616               	decf	___awdiv@dividend+1,f,c
  7963  001436  EC1B  F019         	call	___awdiv	;wreg free
  7964  00143A  0E12               	movlw	18
  7965  00143C  2415               	addwf	?___awdiv,w,c
  7966  00143E  6E1D               	movwf	___wmul@multiplier,c
  7967  001440  0E00               	movlw	0
  7968  001442  2016               	addwfc	?___awdiv+1,w,c
  7969  001444  6E1E               	movwf	___wmul@multiplier+1,c
  7970  001446  0E00               	movlw	0
  7971  001448  6E20               	movwf	___wmul@multiplicand+1,c
  7972  00144A  0E03               	movlw	3
  7973  00144C  6E1F               	movwf	___wmul@multiplicand,c
  7974  00144E  EC4B  F01E         	call	___wmul	;wreg free
  7975  001452  0E31               	movlw	low __powers_
  7976  001454  241D               	addwf	?___wmul,w,c
  7977  001456  6EF6               	movwf	tblptrl,c
  7978  001458  0EFC               	movlw	high __powers_
  7979  00145A  201E               	addwfc	?___wmul+1,w,c
  7980  00145C  6EF7               	movwf	tblptrh,c
  7981  00145E                     	if	0	;There are less than 3 active tblptr bytes
  7982  00145E                     	endif
  7983  00145E  0009               	tblrd		*+
  7984  001460  CFF5 F023          	movff	tablat,___ftmul@f1
  7985  001464  0009               	tblrd		*+
  7986  001466  CFF5 F024          	movff	tablat,___ftmul@f1+1
  7987  00146A  000A               	tblrd		*-
  7988  00146C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  7989  001470  EC3A  F014         	call	___ftmul	;wreg free
  7990  001474  C023  F035         	movff	?___ftmul,_scale$2517
  7991  001478  C024  F036         	movff	?___ftmul+1,_scale$2517+1
  7992  00147C  C025  F037         	movff	?___ftmul+2,_scale$2517+2
  7993                           
  7994                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7995  001480  C035  F023         	movff	_scale$2517,___ftmul@f1
  7996  001484  C036  F024         	movff	_scale$2517+1,___ftmul@f1+1
  7997  001488  C037  F025         	movff	_scale$2517+2,___ftmul@f1+2
  7998  00148C  0E00               	movlw	0
  7999  00148E  6E20               	movwf	___wmul@multiplicand+1,c
  8000  001490  0E03               	movlw	3
  8001  001492  6E1F               	movwf	___wmul@multiplicand,c
  8002  001494  0E00               	movlw	0
  8003  001496  6E12               	movwf	___awmod@divisor+1,c
  8004  001498  0E0A               	movlw	10
  8005  00149A  6E11               	movwf	___awmod@divisor,c
  8006  00149C  5038               	movf	scale@scl,w,c
  8007  00149E  6E0F               	movwf	___awmod@dividend,c
  8008  0014A0  6A10               	clrf	___awmod@dividend+1,c
  8009  0014A2  BE0F               	btfsc	___awmod@dividend,7,c
  8010  0014A4  0610               	decf	___awmod@dividend+1,f,c
  8011  0014A6  ECB8  F01A         	call	___awmod	;wreg free
  8012  0014AA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8013  0014AE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8014  0014B2  EC4B  F01E         	call	___wmul	;wreg free
  8015  0014B6  0E31               	movlw	low __powers_
  8016  0014B8  241D               	addwf	?___wmul,w,c
  8017  0014BA  6EF6               	movwf	tblptrl,c
  8018  0014BC  0EFC               	movlw	high __powers_
  8019  0014BE  201E               	addwfc	?___wmul+1,w,c
  8020  0014C0  6EF7               	movwf	tblptrh,c
  8021  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  8022  0014C2                     	endif
  8023  0014C2  0009               	tblrd		*+
  8024  0014C4  CFF5 F026          	movff	tablat,___ftmul@f2
  8025  0014C8  0009               	tblrd		*+
  8026  0014CA  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8027  0014CE  000A               	tblrd		*-
  8028  0014D0  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8029  0014D4  EC3A  F014         	call	___ftmul	;wreg free
  8030  0014D8  D053               	goto	L11
  8031  0014DA  D06C               	goto	l595
  8032  0014DC  D059               	goto	l6178
  8033  0014DE                     l6172:
  8034                           
  8035                           ;doprnt.c: 438: else if(scl > 10)
  8036  0014DE  5038               	movf	scale@scl,w,c
  8037  0014E0  0A80               	xorlw	128
  8038  0014E2  0F75               	addlw	-139
  8039  0014E4  A0D8               	btfss	status,0,c
  8040  0014E6  D054               	goto	l6178
  8041                           
  8042                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8043  0014E8  0E00               	movlw	0
  8044  0014EA  6E18               	movwf	___awdiv@divisor+1,c
  8045  0014EC  0E0A               	movlw	10
  8046  0014EE  6E17               	movwf	___awdiv@divisor,c
  8047  0014F0  5038               	movf	scale@scl,w,c
  8048  0014F2  6E15               	movwf	___awdiv@dividend,c
  8049  0014F4  6A16               	clrf	___awdiv@dividend+1,c
  8050  0014F6  BE15               	btfsc	___awdiv@dividend,7,c
  8051  0014F8  0616               	decf	___awdiv@dividend+1,f,c
  8052  0014FA  EC1B  F019         	call	___awdiv	;wreg free
  8053  0014FE  0E09               	movlw	9
  8054  001500  2415               	addwf	?___awdiv,w,c
  8055  001502  6E1D               	movwf	___wmul@multiplier,c
  8056  001504  0E00               	movlw	0
  8057  001506  2016               	addwfc	?___awdiv+1,w,c
  8058  001508  6E1E               	movwf	___wmul@multiplier+1,c
  8059  00150A  0E00               	movlw	0
  8060  00150C  6E20               	movwf	___wmul@multiplicand+1,c
  8061  00150E  0E03               	movlw	3
  8062  001510  6E1F               	movwf	___wmul@multiplicand,c
  8063  001512  EC4B  F01E         	call	___wmul	;wreg free
  8064  001516  0E31               	movlw	low __powers_
  8065  001518  241D               	addwf	?___wmul,w,c
  8066  00151A  6EF6               	movwf	tblptrl,c
  8067  00151C  0EFC               	movlw	high __powers_
  8068  00151E  201E               	addwfc	?___wmul+1,w,c
  8069  001520  6EF7               	movwf	tblptrh,c
  8070  001522                     	if	0	;There are less than 3 active tblptr bytes
  8071  001522                     	endif
  8072  001522  0009               	tblrd		*+
  8073  001524  CFF5 F023          	movff	tablat,___ftmul@f1
  8074  001528  0009               	tblrd		*+
  8075  00152A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8076  00152E  000A               	tblrd		*-
  8077  001530  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8078  001534  0E00               	movlw	0
  8079  001536  6E20               	movwf	___wmul@multiplicand+1,c
  8080  001538  0E03               	movlw	3
  8081  00153A  6E1F               	movwf	___wmul@multiplicand,c
  8082  00153C  0E00               	movlw	0
  8083  00153E  6E12               	movwf	___awmod@divisor+1,c
  8084  001540  0E0A               	movlw	10
  8085  001542  6E11               	movwf	___awmod@divisor,c
  8086  001544  5038               	movf	scale@scl,w,c
  8087  001546  6E0F               	movwf	___awmod@dividend,c
  8088  001548  6A10               	clrf	___awmod@dividend+1,c
  8089  00154A  BE0F               	btfsc	___awmod@dividend,7,c
  8090  00154C  0610               	decf	___awmod@dividend+1,f,c
  8091  00154E  ECB8  F01A         	call	___awmod	;wreg free
  8092  001552  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8093  001556  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8094  00155A  EC4B  F01E         	call	___wmul	;wreg free
  8095  00155E  0E31               	movlw	low __powers_
  8096  001560  241D               	addwf	?___wmul,w,c
  8097  001562  6EF6               	movwf	tblptrl,c
  8098  001564  0EFC               	movlw	high __powers_
  8099  001566  201E               	addwfc	?___wmul+1,w,c
  8100  001568  6EF7               	movwf	tblptrh,c
  8101  00156A                     	if	0	;There are less than 3 active tblptr bytes
  8102  00156A                     	endif
  8103  00156A  0009               	tblrd		*+
  8104  00156C  CFF5 F026          	movff	tablat,___ftmul@f2
  8105  001570  0009               	tblrd		*+
  8106  001572  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8107  001576  000A               	tblrd		*-
  8108  001578  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8109  00157C  EC3A  F014         	call	___ftmul	;wreg free
  8110  001580                     L11:
  8111  001580  C023  F032         	movff	?___ftmul,?_scale
  8112  001584  C024  F033         	movff	?___ftmul+1,?_scale+1
  8113  001588  C025  F034         	movff	?___ftmul+2,?_scale+2
  8114  00158C  D013               	goto	l595
  8115  00158E  D000               	goto	l6178
  8116  001590                     l6178:
  8117                           
  8118                           ;doprnt.c: 440: return _powers_[scl];
  8119  001590  5038               	movf	scale@scl,w,c
  8120  001592  0D03               	mullw	3
  8121  001594  0E31               	movlw	low __powers_
  8122  001596  24F3               	addwf	prodl,w,c
  8123  001598  6EF6               	movwf	tblptrl,c
  8124  00159A  0EFC               	movlw	high __powers_
  8125  00159C                     L10:
  8126  00159C  20F4               	addwfc	prodh,w,c
  8127  00159E  6EF7               	movwf	tblptrh,c
  8128  0015A0                     	if	0	;There are less than 3 active tblptr bytes
  8129  0015A0                     	endif
  8130  0015A0  0009               	tblrd		*+
  8131  0015A2  CFF5 F032          	movff	tablat,?_scale
  8132  0015A6  0009               	tblrd		*+
  8133  0015A8  CFF5 F033          	movff	tablat,?_scale+1
  8134  0015AC  000A               	tblrd		*-
  8135  0015AE  CFF5 F034          	movff	tablat,?_scale+2
  8136  0015B2  D000               	goto	l595
  8137  0015B4                     l595:
  8138  0015B4  0012               	return		;funcret
  8139  0015B6                     __end_of_scale:
  8140                           	opt stack 0
  8141                           tblptru	equ	0xFF8
  8142                           tblptrh	equ	0xFF7
  8143                           tblptrl	equ	0xFF6
  8144                           tablat	equ	0xFF5
  8145                           prodh	equ	0xFF4
  8146                           prodl	equ	0xFF3
  8147                           intcon2	equ	0xFF1
  8148                           postinc0	equ	0xFEE
  8149                           wreg	equ	0xFE8
  8150                           postdec1	equ	0xFE5
  8151                           fsr1l	equ	0xFE1
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159 ;; *************** function _putch *****************
  8160 ;; Defined at:
  8161 ;;		line 294 in file "Lab9test.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;  c               1    wreg     unsigned char 
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  c               1   14[COMRAM] unsigned char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;		None               void
  8168 ;; Registers used:
  8169 ;;		wreg
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;Total ram usage:        1 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    2
  8182 ;; This function calls:
  8183 ;;		Nothing
  8184 ;; This function is called by:
  8185 ;;		_printf
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text21
  8190  003E1E                     __ptext21:
  8191                           	opt stack 0
  8192  003E1E                     _putch:
  8193                           	opt stack 23
  8194                           
  8195                           ;incstack = 0
  8196                           ;putch@c stored from wreg
  8197  003E1E  6E0F               	movwf	putch@c,c
  8198                           
  8199                           ;Lab9test.c: 296: while (!TRMT);
  8200  003E20  D000               	goto	l396
  8201  003E22                     l396:
  8202  003E22  A2AC               	btfss	4012,1,c	;volatile
  8203  003E24  D7FE               	goto	l396
  8204                           
  8205                           ;Lab9test.c: 297: TXREG = c;
  8206  003E26  C00F  FFAD         	movff	putch@c,4013	;volatile
  8207  003E2A  0012               	return		;funcret
  8208  003E2C                     __end_of_putch:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon2	equ	0xFF1
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           postdec1	equ	0xFE5
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           fsr2h	equ	0xFDA
  8225                           fsr2l	equ	0xFD9
  8226                           status	equ	0xFD8
  8227                           
  8228 ;; *************** function _isdigit *****************
  8229 ;; Defined at:
  8230 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  c               1    wreg     unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  c               1   16[COMRAM] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;		None               void
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;Total ram usage:        3 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    2
  8251 ;; This function calls:
  8252 ;;		Nothing
  8253 ;; This function is called by:
  8254 ;;		_printf
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text22
  8259  003D2E                     __ptext22:
  8260                           	opt stack 0
  8261  003D2E                     _isdigit:
  8262                           	opt stack 23
  8263                           
  8264                           ;incstack = 0
  8265                           ;isdigit@c stored from wreg
  8266  003D2E  6E11               	movwf	isdigit@c,c
  8267  003D30  0E00               	movlw	0
  8268  003D32  6E10               	movwf	_isdigit$2209,c
  8269  003D34  0E3A               	movlw	58
  8270  003D36  6011               	cpfslt	isdigit@c,c
  8271  003D38  D006               	goto	l6190
  8272  003D3A  0E2F               	movlw	47
  8273  003D3C  6411               	cpfsgt	isdigit@c,c
  8274  003D3E  D003               	goto	l6190
  8275  003D40  0E01               	movlw	1
  8276  003D42  6E10               	movwf	_isdigit$2209,c
  8277  003D44  D000               	goto	l6190
  8278  003D46                     l6190:
  8279  003D46  C010  F00F         	movff	_isdigit$2209,??_isdigit
  8280  003D4A  300F               	rrcf	??_isdigit,w,c
  8281  003D4C  D000               	goto	l1197
  8282  003D4E                     l1197:
  8283  003D4E  0012               	return		;funcret
  8284  003D50                     __end_of_isdigit:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon2	equ	0xFF1
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _fround *****************
  8305 ;; Defined at:
  8306 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  prec            1    wreg     unsigned char 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  prec            1   58[COMRAM] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  3   49[COMRAM] unsigned char 
  8313 ;; Registers used:
  8314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8320 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;Total ram usage:       10 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    4
  8327 ;; This function calls:
  8328 ;;		___awdiv
  8329 ;;		___awmod
  8330 ;;		___ftmul
  8331 ;;		___wmul
  8332 ;; This function is called by:
  8333 ;;		_printf
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text23
  8338  001B5C                     __ptext23:
  8339                           	opt stack 0
  8340  001B5C                     _fround:
  8341                           	opt stack 21
  8342                           
  8343                           ;incstack = 0
  8344                           ;fround@prec stored from wreg
  8345  001B5C  6E3B               	movwf	fround@prec,c
  8346                           
  8347                           ;doprnt.c: 413: if(prec>=110)
  8348  001B5E  0E6D               	movlw	109
  8349  001B60  643B               	cpfsgt	fround@prec,c
  8350  001B62  D09B               	goto	l6132
  8351                           
  8352                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8353  001B64  0E00               	movlw	0
  8354  001B66  6E20               	movwf	___wmul@multiplicand+1,c
  8355  001B68  0E03               	movlw	3
  8356  001B6A  6E1F               	movwf	___wmul@multiplicand,c
  8357  001B6C  0E00               	movlw	0
  8358  001B6E  6E18               	movwf	___awdiv@divisor+1,c
  8359  001B70  0E0A               	movlw	10
  8360  001B72  6E17               	movwf	___awdiv@divisor,c
  8361  001B74  0E00               	movlw	0
  8362  001B76  6E12               	movwf	___awmod@divisor+1,c
  8363  001B78  0E64               	movlw	100
  8364  001B7A  6E11               	movwf	___awmod@divisor,c
  8365  001B7C  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8366  001B80  6A10               	clrf	___awmod@dividend+1,c
  8367  001B82  ECB8  F01A         	call	___awmod	;wreg free
  8368  001B86  C00F  F015         	movff	?___awmod,___awdiv@dividend
  8369  001B8A  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  8370  001B8E  EC1B  F019         	call	___awdiv	;wreg free
  8371  001B92  0E09               	movlw	9
  8372  001B94  2415               	addwf	?___awdiv,w,c
  8373  001B96  6E1D               	movwf	___wmul@multiplier,c
  8374  001B98  0E00               	movlw	0
  8375  001B9A  2016               	addwfc	?___awdiv+1,w,c
  8376  001B9C  6E1E               	movwf	___wmul@multiplier+1,c
  8377  001B9E  EC4B  F01E         	call	___wmul	;wreg free
  8378  001BA2  0E0A               	movlw	low __npowers_
  8379  001BA4  241D               	addwf	?___wmul,w,c
  8380  001BA6  6EF6               	movwf	tblptrl,c
  8381  001BA8  0EFC               	movlw	high __npowers_
  8382  001BAA  201E               	addwfc	?___wmul+1,w,c
  8383  001BAC  6EF7               	movwf	tblptrh,c
  8384  001BAE                     	if	0	;There are less than 3 active tblptr bytes
  8385  001BAE                     	endif
  8386  001BAE  0009               	tblrd		*+
  8387  001BB0  CFF5 F026          	movff	tablat,___ftmul@f2
  8388  001BB4  0009               	tblrd		*+
  8389  001BB6  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8390  001BBA  000A               	tblrd		*-
  8391  001BBC  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8392  001BC0  0E00               	movlw	0
  8393  001BC2  6E18               	movwf	___awdiv@divisor+1,c
  8394  001BC4  0E64               	movlw	100
  8395  001BC6  6E17               	movwf	___awdiv@divisor,c
  8396  001BC8  C03B  F015         	movff	fround@prec,___awdiv@dividend
  8397  001BCC  6A16               	clrf	___awdiv@dividend+1,c
  8398  001BCE  EC1B  F019         	call	___awdiv	;wreg free
  8399  001BD2  0E12               	movlw	18
  8400  001BD4  2415               	addwf	?___awdiv,w,c
  8401  001BD6  6E1D               	movwf	___wmul@multiplier,c
  8402  001BD8  0E00               	movlw	0
  8403  001BDA  2016               	addwfc	?___awdiv+1,w,c
  8404  001BDC  6E1E               	movwf	___wmul@multiplier+1,c
  8405  001BDE  0E00               	movlw	0
  8406  001BE0  6E20               	movwf	___wmul@multiplicand+1,c
  8407  001BE2  0E03               	movlw	3
  8408  001BE4  6E1F               	movwf	___wmul@multiplicand,c
  8409  001BE6  EC4B  F01E         	call	___wmul	;wreg free
  8410  001BEA  0E0A               	movlw	low __npowers_
  8411  001BEC  241D               	addwf	?___wmul,w,c
  8412  001BEE  6EF6               	movwf	tblptrl,c
  8413  001BF0  0EFC               	movlw	high __npowers_
  8414  001BF2  201E               	addwfc	?___wmul+1,w,c
  8415  001BF4  6EF7               	movwf	tblptrh,c
  8416  001BF6                     	if	0	;There are less than 3 active tblptr bytes
  8417  001BF6                     	endif
  8418  001BF6  0009               	tblrd		*+
  8419  001BF8  CFF5 F023          	movff	tablat,___ftmul@f1
  8420  001BFC  0009               	tblrd		*+
  8421  001BFE  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8422  001C02  000A               	tblrd		*-
  8423  001C04  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8424  001C08  EC3A  F014         	call	___ftmul	;wreg free
  8425  001C0C  C023  F038         	movff	?___ftmul,_fround$2515
  8426  001C10  C024  F039         	movff	?___ftmul+1,_fround$2515+1
  8427  001C14  C025  F03A         	movff	?___ftmul+2,_fround$2515+2
  8428                           
  8429                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8430  001C18  0E00               	movlw	0
  8431  001C1A  6E20               	movwf	___wmul@multiplicand+1,c
  8432  001C1C  0E03               	movlw	3
  8433  001C1E  6E1F               	movwf	___wmul@multiplicand,c
  8434  001C20  0E00               	movlw	0
  8435  001C22  6E12               	movwf	___awmod@divisor+1,c
  8436  001C24  0E0A               	movlw	10
  8437  001C26  6E11               	movwf	___awmod@divisor,c
  8438  001C28  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8439  001C2C  6A10               	clrf	___awmod@dividend+1,c
  8440  001C2E  ECB8  F01A         	call	___awmod	;wreg free
  8441  001C32  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8442  001C36  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8443  001C3A  EC4B  F01E         	call	___wmul	;wreg free
  8444  001C3E  0E0A               	movlw	low __npowers_
  8445  001C40  241D               	addwf	?___wmul,w,c
  8446  001C42  6EF6               	movwf	tblptrl,c
  8447  001C44  0EFC               	movlw	high __npowers_
  8448  001C46  201E               	addwfc	?___wmul+1,w,c
  8449  001C48  6EF7               	movwf	tblptrh,c
  8450  001C4A                     	if	0	;There are less than 3 active tblptr bytes
  8451  001C4A                     	endif
  8452  001C4A  0009               	tblrd		*+
  8453  001C4C  CFF5 F026          	movff	tablat,___ftmul@f2
  8454  001C50  0009               	tblrd		*+
  8455  001C52  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8456  001C56  000A               	tblrd		*-
  8457  001C58  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8458  001C5C  C038  F023         	movff	_fround$2515,___ftmul@f1
  8459  001C60  C039  F024         	movff	_fround$2515+1,___ftmul@f1+1
  8460  001C64  C03A  F025         	movff	_fround$2515+2,___ftmul@f1+2
  8461  001C68  EC3A  F014         	call	___ftmul	;wreg free
  8462  001C6C  C023  F035         	movff	?___ftmul,_fround$2516
  8463  001C70  C024  F036         	movff	?___ftmul+1,_fround$2516+1
  8464  001C74  C025  F037         	movff	?___ftmul+2,_fround$2516+2
  8465                           
  8466                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8467  001C78  C035  F023         	movff	_fround$2516,___ftmul@f1
  8468  001C7C  C036  F024         	movff	_fround$2516+1,___ftmul@f1+1
  8469  001C80  C037  F025         	movff	_fround$2516+2,___ftmul@f1+2
  8470  001C84  0E00               	movlw	0
  8471  001C86  6E26               	movwf	___ftmul@f2,c
  8472  001C88  0E00               	movlw	0
  8473  001C8A  6E27               	movwf	___ftmul@f2+1,c
  8474  001C8C  0E3F               	movlw	63
  8475  001C8E  6E28               	movwf	___ftmul@f2+2,c
  8476  001C90  EC3A  F014         	call	___ftmul	;wreg free
  8477  001C94  D07D               	goto	L13
  8478  001C96  D083               	goto	l588
  8479  001C98  D062               	goto	l6140
  8480  001C9A                     l6132:
  8481                           
  8482                           ;doprnt.c: 415: else if(prec > 10)
  8483  001C9A  0E0A               	movlw	10
  8484  001C9C  643B               	cpfsgt	fround@prec,c
  8485  001C9E  D05F               	goto	l6140
  8486                           
  8487                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8488  001CA0  0E00               	movlw	0
  8489  001CA2  6E20               	movwf	___wmul@multiplicand+1,c
  8490  001CA4  0E03               	movlw	3
  8491  001CA6  6E1F               	movwf	___wmul@multiplicand,c
  8492  001CA8  0E00               	movlw	0
  8493  001CAA  6E12               	movwf	___awmod@divisor+1,c
  8494  001CAC  0E0A               	movlw	10
  8495  001CAE  6E11               	movwf	___awmod@divisor,c
  8496  001CB0  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8497  001CB4  6A10               	clrf	___awmod@dividend+1,c
  8498  001CB6  ECB8  F01A         	call	___awmod	;wreg free
  8499  001CBA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8500  001CBE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8501  001CC2  EC4B  F01E         	call	___wmul	;wreg free
  8502  001CC6  0E0A               	movlw	low __npowers_
  8503  001CC8  241D               	addwf	?___wmul,w,c
  8504  001CCA  6EF6               	movwf	tblptrl,c
  8505  001CCC  0EFC               	movlw	high __npowers_
  8506  001CCE  201E               	addwfc	?___wmul+1,w,c
  8507  001CD0  6EF7               	movwf	tblptrh,c
  8508  001CD2                     	if	0	;There are less than 3 active tblptr bytes
  8509  001CD2                     	endif
  8510  001CD2  0009               	tblrd		*+
  8511  001CD4  CFF5 F026          	movff	tablat,___ftmul@f2
  8512  001CD8  0009               	tblrd		*+
  8513  001CDA  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8514  001CDE  000A               	tblrd		*-
  8515  001CE0  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8516  001CE4  0E00               	movlw	0
  8517  001CE6  6E18               	movwf	___awdiv@divisor+1,c
  8518  001CE8  0E0A               	movlw	10
  8519  001CEA  6E17               	movwf	___awdiv@divisor,c
  8520  001CEC  C03B  F015         	movff	fround@prec,___awdiv@dividend
  8521  001CF0  6A16               	clrf	___awdiv@dividend+1,c
  8522  001CF2  EC1B  F019         	call	___awdiv	;wreg free
  8523  001CF6  0E09               	movlw	9
  8524  001CF8  2415               	addwf	?___awdiv,w,c
  8525  001CFA  6E1D               	movwf	___wmul@multiplier,c
  8526  001CFC  0E00               	movlw	0
  8527  001CFE  2016               	addwfc	?___awdiv+1,w,c
  8528  001D00  6E1E               	movwf	___wmul@multiplier+1,c
  8529  001D02  0E00               	movlw	0
  8530  001D04  6E20               	movwf	___wmul@multiplicand+1,c
  8531  001D06  0E03               	movlw	3
  8532  001D08  6E1F               	movwf	___wmul@multiplicand,c
  8533  001D0A  EC4B  F01E         	call	___wmul	;wreg free
  8534  001D0E  0E0A               	movlw	low __npowers_
  8535  001D10  241D               	addwf	?___wmul,w,c
  8536  001D12  6EF6               	movwf	tblptrl,c
  8537  001D14  0EFC               	movlw	high __npowers_
  8538  001D16  201E               	addwfc	?___wmul+1,w,c
  8539  001D18  6EF7               	movwf	tblptrh,c
  8540  001D1A                     	if	0	;There are less than 3 active tblptr bytes
  8541  001D1A                     	endif
  8542  001D1A  0009               	tblrd		*+
  8543  001D1C  CFF5 F023          	movff	tablat,___ftmul@f1
  8544  001D20  0009               	tblrd		*+
  8545  001D22  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8546  001D26  000A               	tblrd		*-
  8547  001D28  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8548  001D2C  EC3A  F014         	call	___ftmul	;wreg free
  8549  001D30  C023  F038         	movff	?___ftmul,_fround$2515
  8550  001D34  C024  F039         	movff	?___ftmul+1,_fround$2515+1
  8551  001D38  C025  F03A         	movff	?___ftmul+2,_fround$2515+2
  8552                           
  8553                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8554  001D3C  C038  F023         	movff	_fround$2515,___ftmul@f1
  8555  001D40  C039  F024         	movff	_fround$2515+1,___ftmul@f1+1
  8556  001D44  C03A  F025         	movff	_fround$2515+2,___ftmul@f1+2
  8557  001D48  0E00               	movlw	0
  8558  001D4A  6E26               	movwf	___ftmul@f2,c
  8559  001D4C  0E00               	movlw	0
  8560  001D4E  6E27               	movwf	___ftmul@f2+1,c
  8561  001D50  0E3F               	movlw	63
  8562  001D52  6E28               	movwf	___ftmul@f2+2,c
  8563  001D54  EC3A  F014         	call	___ftmul	;wreg free
  8564  001D58  D01B               	goto	L13
  8565  001D5A  D021               	goto	l588
  8566  001D5C  D000               	goto	l6140
  8567  001D5E                     l6140:
  8568                           
  8569                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8570  001D5E  503B               	movf	fround@prec,w,c
  8571  001D60  0D03               	mullw	3
  8572  001D62  0E0A               	movlw	low __npowers_
  8573  001D64  24F3               	addwf	prodl,w,c
  8574  001D66  6EF6               	movwf	tblptrl,c
  8575  001D68  0EFC               	movlw	high __npowers_
  8576  001D6A  20F4               	addwfc	prodh,w,c
  8577  001D6C  6EF7               	movwf	tblptrh,c
  8578  001D6E                     	if	0	;There are less than 3 active tblptr bytes
  8579  001D6E                     	endif
  8580  001D6E  0009               	tblrd		*+
  8581  001D70  CFF5 F023          	movff	tablat,___ftmul@f1
  8582  001D74  0009               	tblrd		*+
  8583  001D76  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8584  001D7A  000A               	tblrd		*-
  8585  001D7C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8586  001D80  0E00               	movlw	0
  8587  001D82  6E26               	movwf	___ftmul@f2,c
  8588  001D84  0E00               	movlw	0
  8589  001D86  6E27               	movwf	___ftmul@f2+1,c
  8590  001D88  0E3F               	movlw	63
  8591  001D8A  6E28               	movwf	___ftmul@f2+2,c
  8592  001D8C  EC3A  F014         	call	___ftmul	;wreg free
  8593  001D90                     L13:
  8594  001D90  C023  F032         	movff	?___ftmul,?_fround
  8595  001D94  C024  F033         	movff	?___ftmul+1,?_fround+1
  8596  001D98  C025  F034         	movff	?___ftmul+2,?_fround+2
  8597  001D9C  D000               	goto	l588
  8598  001D9E                     l588:
  8599  001D9E  0012               	return		;funcret
  8600  001DA0                     __end_of_fround:
  8601                           	opt stack 0
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           postdec1	equ	0xFE5
  8612                           fsr1l	equ	0xFE1
  8613                           indf2	equ	0xFDF
  8614                           postinc2	equ	0xFDE
  8615                           postdec2	equ	0xFDD
  8616                           fsr2h	equ	0xFDA
  8617                           fsr2l	equ	0xFD9
  8618                           status	equ	0xFD8
  8619                           
  8620 ;; *************** function ___ftmul *****************
  8621 ;; Defined at:
  8622 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  f1              3   34[COMRAM] float 
  8625 ;;  f2              3   37[COMRAM] float 
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  8628 ;;  sign            1   48[COMRAM] unsigned char 
  8629 ;;  cntr            1   47[COMRAM] unsigned char 
  8630 ;;  exp             1   43[COMRAM] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  3   34[COMRAM] float 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:       15 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    3
  8647 ;; This function calls:
  8648 ;;		___ftpack
  8649 ;; This function is called by:
  8650 ;;		_fround
  8651 ;;		_scale
  8652 ;;		_printf
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text24
  8657  002874                     __ptext24:
  8658                           	opt stack 0
  8659  002874                     ___ftmul:
  8660                           	opt stack 21
  8661                           
  8662                           ;incstack = 0
  8663  002874  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  8664  002878  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8665  00287A  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8666  00287C  3424               	rlcf	___ftmul@f1+1,w,c
  8667  00287E  3629               	rlcf	??___ftmul& (0+255),f,c
  8668  002880  E301               	bnc	u5561
  8669  002882  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8670  002884                     u5561:
  8671  002884  5029               	movf	??___ftmul,w,c
  8672  002886  6E2C               	movwf	___ftmul@exp,c
  8673  002888  502C               	movf	___ftmul@exp,w,c
  8674  00288A  A4D8               	btfss	status,2,c
  8675  00288C  D002               	goto	l5924
  8676  00288E  D00E               	goto	l5926
  8677  002890  D06C               	goto	l1161
  8678  002892                     l5924:
  8679  002892  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  8680  002896  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8681  002898  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8682  00289A  3427               	rlcf	___ftmul@f2+1,w,c
  8683  00289C  3629               	rlcf	??___ftmul& (0+255),f,c
  8684  00289E  E301               	bnc	u5581
  8685  0028A0  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8686  0028A2                     u5581:
  8687  0028A2  5029               	movf	??___ftmul,w,c
  8688  0028A4  6E31               	movwf	___ftmul@sign,c
  8689  0028A6  5031               	movf	___ftmul@sign,w,c
  8690  0028A8  A4D8               	btfss	status,2,c
  8691  0028AA  D007               	goto	l5930
  8692  0028AC                     l5926:
  8693  0028AC  0E00               	movlw	0
  8694  0028AE  6E23               	movwf	?___ftmul,c
  8695  0028B0  0E00               	movlw	0
  8696  0028B2  6E24               	movwf	?___ftmul+1,c
  8697  0028B4  0E00               	movlw	0
  8698  0028B6  6E25               	movwf	?___ftmul+2,c
  8699  0028B8  D058               	goto	l1161
  8700  0028BA                     l5930:
  8701  0028BA  5031               	movf	___ftmul@sign,w,c
  8702  0028BC  0F7B               	addlw	123
  8703  0028BE  262C               	addwf	___ftmul@exp,f,c
  8704  0028C0  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  8705  0028C4  5028               	movf	___ftmul@f2+2,w,c
  8706  0028C6  1A31               	xorwf	___ftmul@sign,f,c
  8707  0028C8  0E80               	movlw	128
  8708  0028CA  1631               	andwf	___ftmul@sign,f,c
  8709  0028CC  8E24               	bsf	___ftmul@f1+1,7,c
  8710  0028CE  8E27               	bsf	___ftmul@f2+1,7,c
  8711  0028D0  0EFF               	movlw	255
  8712  0028D2  1626               	andwf	___ftmul@f2,f,c
  8713  0028D4  0EFF               	movlw	255
  8714  0028D6  1627               	andwf	___ftmul@f2+1,f,c
  8715  0028D8  0E00               	movlw	0
  8716  0028DA  1628               	andwf	___ftmul@f2+2,f,c
  8717  0028DC  0E00               	movlw	0
  8718  0028DE  6E2D               	movwf	___ftmul@f3_as_product,c
  8719  0028E0  0E00               	movlw	0
  8720  0028E2  6E2E               	movwf	___ftmul@f3_as_product+1,c
  8721  0028E4  0E00               	movlw	0
  8722  0028E6  6E2F               	movwf	___ftmul@f3_as_product+2,c
  8723  0028E8  0E07               	movlw	7
  8724  0028EA  6E30               	movwf	___ftmul@cntr,c
  8725  0028EC  D000               	goto	l5944
  8726  0028EE                     l5944:
  8727  0028EE  A023               	btfss	___ftmul@f1,0,c
  8728  0028F0  D007               	goto	l5948
  8729  0028F2  5026               	movf	___ftmul@f2,w,c
  8730  0028F4  262D               	addwf	___ftmul@f3_as_product,f,c
  8731  0028F6  5027               	movf	___ftmul@f2+1,w,c
  8732  0028F8  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  8733  0028FA  5028               	movf	___ftmul@f2+2,w,c
  8734  0028FC  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  8735  0028FE  D000               	goto	l5948
  8736  002900                     l5948:
  8737  002900  90D8               	bcf	status,0,c
  8738  002902  3225               	rrcf	___ftmul@f1+2,f,c
  8739  002904  3224               	rrcf	___ftmul@f1+1,f,c
  8740  002906  3223               	rrcf	___ftmul@f1,f,c
  8741  002908  90D8               	bcf	status,0,c
  8742  00290A  3626               	rlcf	___ftmul@f2,f,c
  8743  00290C  3627               	rlcf	___ftmul@f2+1,f,c
  8744  00290E  3628               	rlcf	___ftmul@f2+2,f,c
  8745  002910  2E30               	decfsz	___ftmul@cntr,f,c
  8746  002912  D7ED               	goto	l5944
  8747  002914  D000               	goto	l5952
  8748  002916                     l5952:
  8749  002916  0E09               	movlw	9
  8750  002918  6E30               	movwf	___ftmul@cntr,c
  8751  00291A  D000               	goto	l5954
  8752  00291C                     l5954:
  8753  00291C  A023               	btfss	___ftmul@f1,0,c
  8754  00291E  D007               	goto	l5958
  8755  002920  5026               	movf	___ftmul@f2,w,c
  8756  002922  262D               	addwf	___ftmul@f3_as_product,f,c
  8757  002924  5027               	movf	___ftmul@f2+1,w,c
  8758  002926  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  8759  002928  5028               	movf	___ftmul@f2+2,w,c
  8760  00292A  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  8761  00292C  D000               	goto	l5958
  8762  00292E                     l5958:
  8763  00292E  90D8               	bcf	status,0,c
  8764  002930  3225               	rrcf	___ftmul@f1+2,f,c
  8765  002932  3224               	rrcf	___ftmul@f1+1,f,c
  8766  002934  3223               	rrcf	___ftmul@f1,f,c
  8767  002936  90D8               	bcf	status,0,c
  8768  002938  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  8769  00293A  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  8770  00293C  322D               	rrcf	___ftmul@f3_as_product,f,c
  8771  00293E  2E30               	decfsz	___ftmul@cntr,f,c
  8772  002940  D7ED               	goto	l5954
  8773  002942  D000               	goto	l5962
  8774  002944                     l5962:
  8775  002944  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  8776  002948  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8777  00294C  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8778  002950  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  8779  002954  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  8780  002958  ECC8  F017         	call	___ftpack	;wreg free
  8781  00295C  C00F  F023         	movff	?___ftpack,?___ftmul
  8782  002960  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  8783  002964  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  8784  002968  D000               	goto	l1161
  8785  00296A                     l1161:
  8786  00296A  0012               	return		;funcret
  8787  00296C                     __end_of___ftmul:
  8788                           	opt stack 0
  8789                           tblptru	equ	0xFF8
  8790                           tblptrh	equ	0xFF7
  8791                           tblptrl	equ	0xFF6
  8792                           tablat	equ	0xFF5
  8793                           prodh	equ	0xFF4
  8794                           prodl	equ	0xFF3
  8795                           intcon2	equ	0xFF1
  8796                           postinc0	equ	0xFEE
  8797                           wreg	equ	0xFE8
  8798                           postdec1	equ	0xFE5
  8799                           fsr1l	equ	0xFE1
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           postdec2	equ	0xFDD
  8803                           fsr2h	equ	0xFDA
  8804                           fsr2l	equ	0xFD9
  8805                           status	equ	0xFD8
  8806                           
  8807 ;; *************** function __tdiv_to_l_ *****************
  8808 ;; Defined at:
  8809 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;  f1              3   14[COMRAM] float 
  8812 ;;  f2              3   17[COMRAM] float 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  quot            4   23[COMRAM] unsigned long 
  8815 ;;  exp1            1   28[COMRAM] unsigned char 
  8816 ;;  cntr            1   27[COMRAM] unsigned char 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  4   14[COMRAM] unsigned long 
  8819 ;; Registers used:
  8820 ;;		wreg, status,2, status,0
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8826 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;Total ram usage:       15 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    2
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_printf
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text25
  8841  00265A                     __ptext25:
  8842                           	opt stack 0
  8843  00265A                     __tdiv_to_l_:
  8844                           	opt stack 23
  8845                           
  8846                           ;incstack = 0
  8847  00265A  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8848  00265E  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8849  002660  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8850  002662  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  8851  002664  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8852  002666  E301               	bnc	u5991
  8853  002668  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8854  00266A                     u5991:
  8855  00266A  5015               	movf	??__tdiv_to_l_,w,c
  8856  00266C  6E1D               	movwf	__tdiv_to_l_@exp1,c
  8857  00266E  501D               	movf	__tdiv_to_l_@exp1,w,c
  8858  002670  A4D8               	btfss	status,2,c
  8859  002672  D002               	goto	l6200
  8860  002674  D05D               	goto	l6242
  8861  002676  D078               	goto	l1137
  8862  002678                     l6200:
  8863  002678  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8864  00267C  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8865  00267E  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8866  002680  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  8867  002682  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8868  002684  E301               	bnc	u6011
  8869  002686  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8870  002688                     u6011:
  8871  002688  5015               	movf	??__tdiv_to_l_,w,c
  8872  00268A  6E1C               	movwf	__tdiv_to_l_@cntr,c
  8873  00268C  501C               	movf	__tdiv_to_l_@cntr,w,c
  8874  00268E  A4D8               	btfss	status,2,c
  8875  002690  D002               	goto	l6206
  8876  002692  D04E               	goto	l6242
  8877  002694  D069               	goto	l1137
  8878  002696                     l6206:
  8879  002696  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  8880  002698  0EFF               	movlw	255
  8881  00269A  160F               	andwf	__tdiv_to_l_@f1,f,c
  8882  00269C  0EFF               	movlw	255
  8883  00269E  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  8884  0026A0  0E00               	movlw	0
  8885  0026A2  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  8886  0026A4  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  8887  0026A6  0EFF               	movlw	255
  8888  0026A8  1612               	andwf	__tdiv_to_l_@f2,f,c
  8889  0026AA  0EFF               	movlw	255
  8890  0026AC  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  8891  0026AE  0E00               	movlw	0
  8892  0026B0  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  8893  0026B2  0E00               	movlw	0
  8894  0026B4  6E18               	movwf	__tdiv_to_l_@quot,c
  8895  0026B6  0E00               	movlw	0
  8896  0026B8  6E19               	movwf	__tdiv_to_l_@quot+1,c
  8897  0026BA  0E00               	movlw	0
  8898  0026BC  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  8899  0026BE  0E00               	movlw	0
  8900  0026C0  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  8901  0026C2  0E7F               	movlw	127
  8902  0026C4  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  8903  0026C6  501C               	movf	__tdiv_to_l_@cntr,w,c
  8904  0026C8  0F98               	addlw	152
  8905  0026CA  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  8906  0026CC  0E18               	movlw	24
  8907  0026CE  6E1C               	movwf	__tdiv_to_l_@cntr,c
  8908  0026D0                     l1139:
  8909  0026D0  90D8               	bcf	status,0,c
  8910  0026D2  3618               	rlcf	__tdiv_to_l_@quot,f,c
  8911  0026D4  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  8912  0026D6  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  8913  0026D8  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  8914  0026DA  5012               	movf	__tdiv_to_l_@f2,w,c
  8915  0026DC  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  8916  0026DE  5013               	movf	__tdiv_to_l_@f2+1,w,c
  8917  0026E0  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  8918  0026E2  5014               	movf	__tdiv_to_l_@f2+2,w,c
  8919  0026E4  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  8920  0026E6  A0D8               	btfss	status,0,c
  8921  0026E8  D007               	goto	l1140
  8922  0026EA  5012               	movf	__tdiv_to_l_@f2,w,c
  8923  0026EC  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  8924  0026EE  5013               	movf	__tdiv_to_l_@f2+1,w,c
  8925  0026F0  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  8926  0026F2  5014               	movf	__tdiv_to_l_@f2+2,w,c
  8927  0026F4  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  8928  0026F6  8018               	bsf	__tdiv_to_l_@quot,0,c
  8929  0026F8                     l1140:
  8930  0026F8  90D8               	bcf	status,0,c
  8931  0026FA  360F               	rlcf	__tdiv_to_l_@f1,f,c
  8932  0026FC  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  8933  0026FE  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  8934  002700  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  8935  002702  D7E6               	goto	l1139
  8936  002704  D000               	goto	l6228
  8937  002706                     l6228:
  8938  002706  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  8939  002708  D010               	goto	l6240
  8940  00270A  501D               	movf	__tdiv_to_l_@exp1,w,c
  8941  00270C  0A80               	xorlw	128
  8942  00270E  0F97               	addlw	151
  8943  002710  B0D8               	btfsc	status,0,c
  8944  002712  D003               	goto	l6236
  8945  002714  D00D               	goto	l6242
  8946  002716  D028               	goto	l1137
  8947  002718  D000               	goto	l6236
  8948  00271A                     l6236:
  8949  00271A  90D8               	bcf	status,0,c
  8950  00271C  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  8951  00271E  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  8952  002720  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  8953  002722  3218               	rrcf	__tdiv_to_l_@quot,f,c
  8954  002724  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  8955  002726  D7F9               	goto	l6236
  8956  002728  D017               	goto	l1146
  8957  00272A                     l6240:
  8958  00272A  0E17               	movlw	23
  8959  00272C  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  8960  00272E  D011               	goto	l6248
  8961  002730                     l6242:
  8962  002730  0E00               	movlw	0
  8963  002732  6E0F               	movwf	?__tdiv_to_l_,c
  8964  002734  0E00               	movlw	0
  8965  002736  6E10               	movwf	?__tdiv_to_l_+1,c
  8966  002738  0E00               	movlw	0
  8967  00273A  6E11               	movwf	?__tdiv_to_l_+2,c
  8968  00273C  0E00               	movlw	0
  8969  00273E  6E12               	movwf	?__tdiv_to_l_+3,c
  8970  002740  D013               	goto	l1137
  8971  002742  D007               	goto	l6248
  8972  002744                     l6246:
  8973  002744  90D8               	bcf	status,0,c
  8974  002746  3618               	rlcf	__tdiv_to_l_@quot,f,c
  8975  002748  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  8976  00274A  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  8977  00274C  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  8978  00274E  061D               	decf	__tdiv_to_l_@exp1,f,c
  8979  002750  D000               	goto	l6248
  8980  002752                     l6248:
  8981  002752  501D               	movf	__tdiv_to_l_@exp1,w,c
  8982  002754  A4D8               	btfss	status,2,c
  8983  002756  D7F6               	goto	l6246
  8984  002758                     l1146:
  8985  002758  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8986  00275C  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8987  002760  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8988  002764  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8989  002768                     l1137:
  8990  002768  0012               	return		;funcret
  8991  00276A                     __end_of__tdiv_to_l_:
  8992                           	opt stack 0
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           intcon2	equ	0xFF1
  9000                           postinc0	equ	0xFEE
  9001                           wreg	equ	0xFE8
  9002                           postdec1	equ	0xFE5
  9003                           fsr1l	equ	0xFE1
  9004                           indf2	equ	0xFDF
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           fsr2h	equ	0xFDA
  9008                           fsr2l	equ	0xFD9
  9009                           status	equ	0xFD8
  9010                           
  9011 ;; *************** function __div_to_l_ *****************
  9012 ;; Defined at:
  9013 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;  f1              3   14[COMRAM] unsigned long 
  9016 ;;  f2              3   17[COMRAM] unsigned long 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  quot            4   20[COMRAM] unsigned long 
  9019 ;;  exp1            1   25[COMRAM] unsigned char 
  9020 ;;  cntr            1   24[COMRAM] unsigned char 
  9021 ;; Return value:  Size  Location     Type
  9022 ;;                  4   14[COMRAM] unsigned long 
  9023 ;; Registers used:
  9024 ;;		wreg, status,2, status,0
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9030 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;Total ram usage:       12 bytes
  9035 ;; Hardware stack levels used:    1
  9036 ;; Hardware stack levels required when called:    2
  9037 ;; This function calls:
  9038 ;;		Nothing
  9039 ;; This function is called by:
  9040 ;;		_printf
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text26
  9045  00276A                     __ptext26:
  9046                           	opt stack 0
  9047  00276A                     __div_to_l_:
  9048                           	opt stack 23
  9049                           
  9050                           ;incstack = 0
  9051  00276A  3411               	rlcf	__div_to_l_@f1+2,w,c
  9052  00276C  3412               	rlcf	__div_to_l_@f1+3,w,c
  9053  00276E  6E1A               	movwf	__div_to_l_@exp1,c
  9054  002770  501A               	movf	__div_to_l_@exp1,w,c
  9055  002772  A4D8               	btfss	status,2,c
  9056  002774  D002               	goto	l6256
  9057  002776  D061               	goto	l6302
  9058  002778  D07C               	goto	l1016
  9059  00277A                     l6256:
  9060  00277A  3414               	rlcf	__div_to_l_@f2+2,w,c
  9061  00277C  3415               	rlcf	__div_to_l_@f2+3,w,c
  9062  00277E  6E19               	movwf	__div_to_l_@cntr,c
  9063  002780  5019               	movf	__div_to_l_@cntr,w,c
  9064  002782  A4D8               	btfss	status,2,c
  9065  002784  D002               	goto	l6262
  9066  002786  D059               	goto	l6302
  9067  002788  D074               	goto	l1016
  9068  00278A                     l6262:
  9069  00278A  8E11               	bsf	__div_to_l_@f1+2,7,c
  9070  00278C  0EFF               	movlw	255
  9071  00278E  160F               	andwf	__div_to_l_@f1,f,c
  9072  002790  0EFF               	movlw	255
  9073  002792  1610               	andwf	__div_to_l_@f1+1,f,c
  9074  002794  0EFF               	movlw	255
  9075  002796  1611               	andwf	__div_to_l_@f1+2,f,c
  9076  002798  0E00               	movlw	0
  9077  00279A  1612               	andwf	__div_to_l_@f1+3,f,c
  9078  00279C  8E14               	bsf	__div_to_l_@f2+2,7,c
  9079  00279E  0EFF               	movlw	255
  9080  0027A0  1612               	andwf	__div_to_l_@f2,f,c
  9081  0027A2  0EFF               	movlw	255
  9082  0027A4  1613               	andwf	__div_to_l_@f2+1,f,c
  9083  0027A6  0EFF               	movlw	255
  9084  0027A8  1614               	andwf	__div_to_l_@f2+2,f,c
  9085  0027AA  0E00               	movlw	0
  9086  0027AC  1615               	andwf	__div_to_l_@f2+3,f,c
  9087  0027AE  0E00               	movlw	0
  9088  0027B0  6E15               	movwf	__div_to_l_@quot,c
  9089  0027B2  0E00               	movlw	0
  9090  0027B4  6E16               	movwf	__div_to_l_@quot+1,c
  9091  0027B6  0E00               	movlw	0
  9092  0027B8  6E17               	movwf	__div_to_l_@quot+2,c
  9093  0027BA  0E00               	movlw	0
  9094  0027BC  6E18               	movwf	__div_to_l_@quot+3,c
  9095  0027BE  0E7F               	movlw	127
  9096  0027C0  5E1A               	subwf	__div_to_l_@exp1,f,c
  9097  0027C2  5019               	movf	__div_to_l_@cntr,w,c
  9098  0027C4  0FA0               	addlw	160
  9099  0027C6  5E1A               	subwf	__div_to_l_@exp1,f,c
  9100  0027C8  0E20               	movlw	32
  9101  0027CA  6E19               	movwf	__div_to_l_@cntr,c
  9102  0027CC  D000               	goto	l6276
  9103  0027CE                     l6276:
  9104  0027CE  90D8               	bcf	status,0,c
  9105  0027D0  3615               	rlcf	__div_to_l_@quot,f,c
  9106  0027D2  3616               	rlcf	__div_to_l_@quot+1,f,c
  9107  0027D4  3617               	rlcf	__div_to_l_@quot+2,f,c
  9108  0027D6  3618               	rlcf	__div_to_l_@quot+3,f,c
  9109  0027D8  5012               	movf	__div_to_l_@f2,w,c
  9110  0027DA  5C0F               	subwf	__div_to_l_@f1,w,c
  9111  0027DC  5013               	movf	__div_to_l_@f2+1,w,c
  9112  0027DE  5810               	subwfb	__div_to_l_@f1+1,w,c
  9113  0027E0  5014               	movf	__div_to_l_@f2+2,w,c
  9114  0027E2  5811               	subwfb	__div_to_l_@f1+2,w,c
  9115  0027E4  5015               	movf	__div_to_l_@f2+3,w,c
  9116  0027E6  5812               	subwfb	__div_to_l_@f1+3,w,c
  9117  0027E8  A0D8               	btfss	status,0,c
  9118  0027EA  D00A               	goto	l6284
  9119  0027EC  5012               	movf	__div_to_l_@f2,w,c
  9120  0027EE  5E0F               	subwf	__div_to_l_@f1,f,c
  9121  0027F0  5013               	movf	__div_to_l_@f2+1,w,c
  9122  0027F2  5A10               	subwfb	__div_to_l_@f1+1,f,c
  9123  0027F4  5014               	movf	__div_to_l_@f2+2,w,c
  9124  0027F6  5A11               	subwfb	__div_to_l_@f1+2,f,c
  9125  0027F8  5015               	movf	__div_to_l_@f2+3,w,c
  9126  0027FA  5A12               	subwfb	__div_to_l_@f1+3,f,c
  9127  0027FC  8015               	bsf	__div_to_l_@quot,0,c
  9128  0027FE  D000               	goto	l6284
  9129  002800                     l6284:
  9130  002800  90D8               	bcf	status,0,c
  9131  002802  360F               	rlcf	__div_to_l_@f1,f,c
  9132  002804  3610               	rlcf	__div_to_l_@f1+1,f,c
  9133  002806  3611               	rlcf	__div_to_l_@f1+2,f,c
  9134  002808  3612               	rlcf	__div_to_l_@f1+3,f,c
  9135  00280A  2E19               	decfsz	__div_to_l_@cntr,f,c
  9136  00280C  D7E0               	goto	l6276
  9137  00280E  D000               	goto	l6288
  9138  002810                     l6288:
  9139  002810  AE1A               	btfss	__div_to_l_@exp1,7,c
  9140  002812  D010               	goto	l6300
  9141  002814  501A               	movf	__div_to_l_@exp1,w,c
  9142  002816  0A80               	xorlw	128
  9143  002818  0F9F               	addlw	159
  9144  00281A  B0D8               	btfsc	status,0,c
  9145  00281C  D003               	goto	l6296
  9146  00281E  D00D               	goto	l6302
  9147  002820  D028               	goto	l1016
  9148  002822  D000               	goto	l6296
  9149  002824                     l6296:
  9150  002824  90D8               	bcf	status,0,c
  9151  002826  3218               	rrcf	__div_to_l_@quot+3,f,c
  9152  002828  3217               	rrcf	__div_to_l_@quot+2,f,c
  9153  00282A  3216               	rrcf	__div_to_l_@quot+1,f,c
  9154  00282C  3215               	rrcf	__div_to_l_@quot,f,c
  9155  00282E  3E1A               	incfsz	__div_to_l_@exp1,f,c
  9156  002830  D7F9               	goto	l6296
  9157  002832  D017               	goto	l1025
  9158  002834                     l6300:
  9159  002834  0E1F               	movlw	31
  9160  002836  641A               	cpfsgt	__div_to_l_@exp1,c
  9161  002838  D011               	goto	l6308
  9162  00283A                     l6302:
  9163  00283A  0E00               	movlw	0
  9164  00283C  6E0F               	movwf	?__div_to_l_,c
  9165  00283E  0E00               	movlw	0
  9166  002840  6E10               	movwf	?__div_to_l_+1,c
  9167  002842  0E00               	movlw	0
  9168  002844  6E11               	movwf	?__div_to_l_+2,c
  9169  002846  0E00               	movlw	0
  9170  002848  6E12               	movwf	?__div_to_l_+3,c
  9171  00284A  D013               	goto	l1016
  9172  00284C  D007               	goto	l6308
  9173  00284E                     l6306:
  9174  00284E  90D8               	bcf	status,0,c
  9175  002850  3615               	rlcf	__div_to_l_@quot,f,c
  9176  002852  3616               	rlcf	__div_to_l_@quot+1,f,c
  9177  002854  3617               	rlcf	__div_to_l_@quot+2,f,c
  9178  002856  3618               	rlcf	__div_to_l_@quot+3,f,c
  9179  002858  061A               	decf	__div_to_l_@exp1,f,c
  9180  00285A  D000               	goto	l6308
  9181  00285C                     l6308:
  9182  00285C  501A               	movf	__div_to_l_@exp1,w,c
  9183  00285E  A4D8               	btfss	status,2,c
  9184  002860  D7F6               	goto	l6306
  9185  002862                     l1025:
  9186  002862  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  9187  002866  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9188  00286A  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9189  00286E  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9190  002872                     l1016:
  9191  002872  0012               	return		;funcret
  9192  002874                     __end_of__div_to_l_:
  9193                           	opt stack 0
  9194                           tblptru	equ	0xFF8
  9195                           tblptrh	equ	0xFF7
  9196                           tblptrl	equ	0xFF6
  9197                           tablat	equ	0xFF5
  9198                           prodh	equ	0xFF4
  9199                           prodl	equ	0xFF3
  9200                           intcon2	equ	0xFF1
  9201                           postinc0	equ	0xFEE
  9202                           wreg	equ	0xFE8
  9203                           postdec1	equ	0xFE5
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           postdec2	equ	0xFDD
  9208                           fsr2h	equ	0xFDA
  9209                           fsr2l	equ	0xFD9
  9210                           status	equ	0xFD8
  9211                           
  9212 ;; *************** function ___lltoft *****************
  9213 ;; Defined at:
  9214 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  c               4   22[COMRAM] unsigned long 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  exp             1   30[COMRAM] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  3   22[COMRAM] float 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        9 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    3
  9235 ;; This function calls:
  9236 ;;		___ftpack
  9237 ;; This function is called by:
  9238 ;;		_printf
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text27
  9243  00379A                     __ptext27:
  9244                           	opt stack 0
  9245  00379A                     ___lltoft:
  9246                           	opt stack 22
  9247                           
  9248                           ;incstack = 0
  9249  00379A  0E8E               	movlw	142
  9250  00379C  6E1F               	movwf	___lltoft@exp,c
  9251  00379E  D007               	goto	l6428
  9252  0037A0                     l6426:
  9253  0037A0  90D8               	bcf	status,0,c
  9254  0037A2  321A               	rrcf	___lltoft@c+3,f,c
  9255  0037A4  3219               	rrcf	___lltoft@c+2,f,c
  9256  0037A6  3218               	rrcf	___lltoft@c+1,f,c
  9257  0037A8  3217               	rrcf	___lltoft@c,f,c
  9258  0037AA  2A1F               	incf	___lltoft@exp,f,c
  9259  0037AC  D000               	goto	l6428
  9260  0037AE                     l6428:
  9261  0037AE  0E00               	movlw	0
  9262  0037B0  1417               	andwf	___lltoft@c,w,c
  9263  0037B2  6E1B               	movwf	??___lltoft& (0+255),c
  9264  0037B4  0E00               	movlw	0
  9265  0037B6  1418               	andwf	___lltoft@c+1,w,c
  9266  0037B8  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  9267  0037BA  0E00               	movlw	0
  9268  0037BC  1419               	andwf	___lltoft@c+2,w,c
  9269  0037BE  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  9270  0037C0  0EFF               	movlw	255
  9271  0037C2  141A               	andwf	___lltoft@c+3,w,c
  9272  0037C4  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  9273  0037C6  501B               	movf	??___lltoft,w,c
  9274  0037C8  101C               	iorwf	??___lltoft+1,w,c
  9275  0037CA  101D               	iorwf	??___lltoft+2,w,c
  9276  0037CC  101E               	iorwf	??___lltoft+3,w,c
  9277  0037CE  A4D8               	btfss	status,2,c
  9278  0037D0  D7E7               	goto	l6426
  9279  0037D2  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  9280  0037D6  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  9281  0037DA  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  9282  0037DE  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  9283  0037E2  0E00               	movlw	0
  9284  0037E4  6E13               	movwf	___ftpack@sign,c
  9285  0037E6  ECC8  F017         	call	___ftpack	;wreg free
  9286  0037EA  C00F  F017         	movff	?___ftpack,?___lltoft
  9287  0037EE  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  9288  0037F2  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  9289  0037F6  D000               	goto	l1256
  9290  0037F8                     l1256:
  9291  0037F8  0012               	return		;funcret
  9292  0037FA                     __end_of___lltoft:
  9293                           	opt stack 0
  9294                           tblptru	equ	0xFF8
  9295                           tblptrh	equ	0xFF7
  9296                           tblptrl	equ	0xFF6
  9297                           tablat	equ	0xFF5
  9298                           prodh	equ	0xFF4
  9299                           prodl	equ	0xFF3
  9300                           intcon2	equ	0xFF1
  9301                           postinc0	equ	0xFEE
  9302                           wreg	equ	0xFE8
  9303                           postdec1	equ	0xFE5
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function ___llmod *****************
  9313 ;; Defined at:
  9314 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  dividend        4   14[COMRAM] unsigned long 
  9317 ;;  divisor         4   18[COMRAM] unsigned long 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  counter         1   22[COMRAM] unsigned char 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  4   14[COMRAM] unsigned long 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9329 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;Total ram usage:        9 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    2
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_printf
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text28
  9344  0035F2                     __ptext28:
  9345                           	opt stack 0
  9346  0035F2                     ___llmod:
  9347                           	opt stack 23
  9348                           
  9349                           ;incstack = 0
  9350  0035F2  5013               	movf	___llmod@divisor,w,c
  9351  0035F4  1014               	iorwf	___llmod@divisor+1,w,c
  9352  0035F6  1015               	iorwf	___llmod@divisor+2,w,c
  9353  0035F8  1016               	iorwf	___llmod@divisor+3,w,c
  9354  0035FA  B4D8               	btfsc	status,2,c
  9355  0035FC  D029               	goto	l1236
  9356  0035FE  0E01               	movlw	1
  9357  003600  6E17               	movwf	___llmod@counter,c
  9358  003602  D007               	goto	l6414
  9359  003604                     l6412:
  9360  003604  90D8               	bcf	status,0,c
  9361  003606  3613               	rlcf	___llmod@divisor,f,c
  9362  003608  3614               	rlcf	___llmod@divisor+1,f,c
  9363  00360A  3615               	rlcf	___llmod@divisor+2,f,c
  9364  00360C  3616               	rlcf	___llmod@divisor+3,f,c
  9365  00360E  2A17               	incf	___llmod@counter,f,c
  9366  003610  D000               	goto	l6414
  9367  003612                     l6414:
  9368  003612  BE16               	btfsc	___llmod@divisor+3,7,c
  9369  003614  D002               	goto	l6416
  9370  003616  D7F6               	goto	l6412
  9371  003618  D000               	goto	l6416
  9372  00361A                     l6416:
  9373  00361A  5013               	movf	___llmod@divisor,w,c
  9374  00361C  5C0F               	subwf	___llmod@dividend,w,c
  9375  00361E  5014               	movf	___llmod@divisor+1,w,c
  9376  003620  5810               	subwfb	___llmod@dividend+1,w,c
  9377  003622  5015               	movf	___llmod@divisor+2,w,c
  9378  003624  5811               	subwfb	___llmod@dividend+2,w,c
  9379  003626  5016               	movf	___llmod@divisor+3,w,c
  9380  003628  5812               	subwfb	___llmod@dividend+3,w,c
  9381  00362A  A0D8               	btfss	status,0,c
  9382  00362C  D009               	goto	l6420
  9383  00362E  5013               	movf	___llmod@divisor,w,c
  9384  003630  5E0F               	subwf	___llmod@dividend,f,c
  9385  003632  5014               	movf	___llmod@divisor+1,w,c
  9386  003634  5A10               	subwfb	___llmod@dividend+1,f,c
  9387  003636  5015               	movf	___llmod@divisor+2,w,c
  9388  003638  5A11               	subwfb	___llmod@dividend+2,f,c
  9389  00363A  5016               	movf	___llmod@divisor+3,w,c
  9390  00363C  5A12               	subwfb	___llmod@dividend+3,f,c
  9391  00363E  D000               	goto	l6420
  9392  003640                     l6420:
  9393  003640  90D8               	bcf	status,0,c
  9394  003642  3216               	rrcf	___llmod@divisor+3,f,c
  9395  003644  3215               	rrcf	___llmod@divisor+2,f,c
  9396  003646  3214               	rrcf	___llmod@divisor+1,f,c
  9397  003648  3213               	rrcf	___llmod@divisor,f,c
  9398  00364A  2E17               	decfsz	___llmod@counter,f,c
  9399  00364C  D7E6               	goto	l6416
  9400  00364E  D000               	goto	l1236
  9401  003650                     l1236:
  9402  003650  C00F  F00F         	movff	___llmod@dividend,?___llmod
  9403  003654  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  9404  003658  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  9405  00365C  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  9406  003660  0012               	return		;funcret
  9407  003662                     __end_of___llmod:
  9408                           	opt stack 0
  9409                           tblptru	equ	0xFF8
  9410                           tblptrh	equ	0xFF7
  9411                           tblptrl	equ	0xFF6
  9412                           tablat	equ	0xFF5
  9413                           prodh	equ	0xFF4
  9414                           prodl	equ	0xFF3
  9415                           intcon2	equ	0xFF1
  9416                           postinc0	equ	0xFEE
  9417                           wreg	equ	0xFE8
  9418                           postdec1	equ	0xFE5
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function ___lldiv *****************
  9428 ;; Defined at:
  9429 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  dividend        4   14[COMRAM] unsigned long 
  9432 ;;  divisor         4   18[COMRAM] unsigned long 
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  quotient        4   22[COMRAM] unsigned long 
  9435 ;;  counter         1   26[COMRAM] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  4   14[COMRAM] unsigned long 
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9445 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9448 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;Total ram usage:       13 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    2
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_printf
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           	psect	text29
  9460  0032CC                     __ptext29:
  9461                           	opt stack 0
  9462  0032CC                     ___lldiv:
  9463                           	opt stack 23
  9464                           
  9465                           ;incstack = 0
  9466  0032CC  0E00               	movlw	0
  9467  0032CE  6E17               	movwf	___lldiv@quotient,c
  9468  0032D0  0E00               	movlw	0
  9469  0032D2  6E18               	movwf	___lldiv@quotient+1,c
  9470  0032D4  0E00               	movlw	0
  9471  0032D6  6E19               	movwf	___lldiv@quotient+2,c
  9472  0032D8  0E00               	movlw	0
  9473  0032DA  6E1A               	movwf	___lldiv@quotient+3,c
  9474  0032DC  5013               	movf	___lldiv@divisor,w,c
  9475  0032DE  1014               	iorwf	___lldiv@divisor+1,w,c
  9476  0032E0  1015               	iorwf	___lldiv@divisor+2,w,c
  9477  0032E2  1016               	iorwf	___lldiv@divisor+3,w,c
  9478  0032E4  B4D8               	btfsc	status,2,c
  9479  0032E6  D02F               	goto	l1226
  9480  0032E8  0E01               	movlw	1
  9481  0032EA  6E1B               	movwf	___lldiv@counter,c
  9482  0032EC  D007               	goto	l6394
  9483  0032EE                     l6392:
  9484  0032EE  90D8               	bcf	status,0,c
  9485  0032F0  3613               	rlcf	___lldiv@divisor,f,c
  9486  0032F2  3614               	rlcf	___lldiv@divisor+1,f,c
  9487  0032F4  3615               	rlcf	___lldiv@divisor+2,f,c
  9488  0032F6  3616               	rlcf	___lldiv@divisor+3,f,c
  9489  0032F8  2A1B               	incf	___lldiv@counter,f,c
  9490  0032FA  D000               	goto	l6394
  9491  0032FC                     l6394:
  9492  0032FC  BE16               	btfsc	___lldiv@divisor+3,7,c
  9493  0032FE  D002               	goto	l6396
  9494  003300  D7F6               	goto	l6392
  9495  003302  D000               	goto	l6396
  9496  003304                     l6396:
  9497  003304  90D8               	bcf	status,0,c
  9498  003306  3617               	rlcf	___lldiv@quotient,f,c
  9499  003308  3618               	rlcf	___lldiv@quotient+1,f,c
  9500  00330A  3619               	rlcf	___lldiv@quotient+2,f,c
  9501  00330C  361A               	rlcf	___lldiv@quotient+3,f,c
  9502  00330E  5013               	movf	___lldiv@divisor,w,c
  9503  003310  5C0F               	subwf	___lldiv@dividend,w,c
  9504  003312  5014               	movf	___lldiv@divisor+1,w,c
  9505  003314  5810               	subwfb	___lldiv@dividend+1,w,c
  9506  003316  5015               	movf	___lldiv@divisor+2,w,c
  9507  003318  5811               	subwfb	___lldiv@dividend+2,w,c
  9508  00331A  5016               	movf	___lldiv@divisor+3,w,c
  9509  00331C  5812               	subwfb	___lldiv@dividend+3,w,c
  9510  00331E  A0D8               	btfss	status,0,c
  9511  003320  D00A               	goto	l6404
  9512  003322  5013               	movf	___lldiv@divisor,w,c
  9513  003324  5E0F               	subwf	___lldiv@dividend,f,c
  9514  003326  5014               	movf	___lldiv@divisor+1,w,c
  9515  003328  5A10               	subwfb	___lldiv@dividend+1,f,c
  9516  00332A  5015               	movf	___lldiv@divisor+2,w,c
  9517  00332C  5A11               	subwfb	___lldiv@dividend+2,f,c
  9518  00332E  5016               	movf	___lldiv@divisor+3,w,c
  9519  003330  5A12               	subwfb	___lldiv@dividend+3,f,c
  9520  003332  8017               	bsf	___lldiv@quotient,0,c
  9521  003334  D000               	goto	l6404
  9522  003336                     l6404:
  9523  003336  90D8               	bcf	status,0,c
  9524  003338  3216               	rrcf	___lldiv@divisor+3,f,c
  9525  00333A  3215               	rrcf	___lldiv@divisor+2,f,c
  9526  00333C  3214               	rrcf	___lldiv@divisor+1,f,c
  9527  00333E  3213               	rrcf	___lldiv@divisor,f,c
  9528  003340  2E1B               	decfsz	___lldiv@counter,f,c
  9529  003342  D7E0               	goto	l6396
  9530  003344  D000               	goto	l1226
  9531  003346                     l1226:
  9532  003346  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  9533  00334A  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  9534  00334E  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  9535  003352  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  9536  003356  0012               	return		;funcret
  9537  003358                     __end_of___lldiv:
  9538                           	opt stack 0
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           intcon2	equ	0xFF1
  9546                           postinc0	equ	0xFEE
  9547                           wreg	equ	0xFE8
  9548                           postdec1	equ	0xFE5
  9549                           fsr1l	equ	0xFE1
  9550                           indf2	equ	0xFDF
  9551                           postinc2	equ	0xFDE
  9552                           postdec2	equ	0xFDD
  9553                           fsr2h	equ	0xFDA
  9554                           fsr2l	equ	0xFD9
  9555                           status	equ	0xFD8
  9556                           
  9557 ;; *************** function ___fttol *****************
  9558 ;; Defined at:
  9559 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  f1              3   56[COMRAM] float 
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;  lval            4   66[COMRAM] unsigned long 
  9564 ;;  exp1            1   70[COMRAM] unsigned char 
  9565 ;;  sign1           1   65[COMRAM] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  4   56[COMRAM] long 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;Total ram usage:       15 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    2
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_printf
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text30
  9590  002B46                     __ptext30:
  9591                           	opt stack 0
  9592  002B46                     ___fttol:
  9593                           	opt stack 23
  9594                           
  9595                           ;incstack = 0
  9596  002B46  C03B  F03D         	movff	___fttol@f1+2,??___fttol
  9597  002B4A  6A3E               	clrf	(??___fttol+1)& (0+255),c
  9598  002B4C  6A3F               	clrf	(??___fttol+2)& (0+255),c
  9599  002B4E  343A               	rlcf	___fttol@f1+1,w,c
  9600  002B50  363D               	rlcf	??___fttol& (0+255),f,c
  9601  002B52  E301               	bnc	u6201
  9602  002B54  803E               	bsf	(??___fttol+1)& (0+255),0,c
  9603  002B56                     u6201:
  9604  002B56  503D               	movf	??___fttol,w,c
  9605  002B58  6E47               	movwf	___fttol@exp1,c
  9606  002B5A  5047               	movf	___fttol@exp1,w,c
  9607  002B5C  A4D8               	btfss	status,2,c
  9608  002B5E  D002               	goto	l6346
  9609  002B60  D039               	goto	l6370
  9610  002B62  D063               	goto	l1182
  9611  002B64                     l6346:
  9612  002B64  0E17               	movlw	23
  9613  002B66  6E3D               	movwf	??___fttol& (0+255),c
  9614  002B68  C039  F03E         	movff	___fttol@f1,??___fttol+1
  9615  002B6C  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
  9616  002B70  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
  9617  002B74  283D               	incf	??___fttol,w,c
  9618  002B76  6E41               	movwf	(??___fttol+4)& (0+255),c
  9619  002B78  D004               	goto	u6220
  9620  002B7A                     u6225:
  9621  002B7A  90D8               	bcf	status,0,c
  9622  002B7C  3240               	rrcf	??___fttol+3,f,c
  9623  002B7E  323F               	rrcf	??___fttol+2,f,c
  9624  002B80  323E               	rrcf	??___fttol+1,f,c
  9625  002B82                     u6220:
  9626  002B82  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
  9627  002B84  D7FA               	goto	u6225
  9628  002B86  503E               	movf	??___fttol+1,w,c
  9629  002B88  6E42               	movwf	___fttol@sign1,c
  9630  002B8A  8E3A               	bsf	___fttol@f1+1,7,c
  9631  002B8C  0EFF               	movlw	255
  9632  002B8E  1639               	andwf	___fttol@f1,f,c
  9633  002B90  0EFF               	movlw	255
  9634  002B92  163A               	andwf	___fttol@f1+1,f,c
  9635  002B94  0E00               	movlw	0
  9636  002B96  163B               	andwf	___fttol@f1+2,f,c
  9637  002B98  5039               	movf	___fttol@f1,w,c
  9638  002B9A  6E43               	movwf	___fttol@lval,c
  9639  002B9C  503A               	movf	___fttol@f1+1,w,c
  9640  002B9E  6E44               	movwf	___fttol@lval+1,c
  9641  002BA0  503B               	movf	___fttol@f1+2,w,c
  9642  002BA2  6E45               	movwf	___fttol@lval+2,c
  9643  002BA4  6A46               	clrf	___fttol@lval+3,c
  9644  002BA6  0E8E               	movlw	142
  9645  002BA8  5E47               	subwf	___fttol@exp1,f,c
  9646  002BAA  AE47               	btfss	___fttol@exp1,7,c
  9647  002BAC  D010               	goto	l6368
  9648  002BAE  5047               	movf	___fttol@exp1,w,c
  9649  002BB0  0A80               	xorlw	128
  9650  002BB2  0F8F               	addlw	143
  9651  002BB4  B0D8               	btfsc	status,0,c
  9652  002BB6  D003               	goto	l6364
  9653  002BB8  D00D               	goto	l6370
  9654  002BBA  D037               	goto	l1182
  9655  002BBC  D000               	goto	l6364
  9656  002BBE                     l6364:
  9657  002BBE  90D8               	bcf	status,0,c
  9658  002BC0  3246               	rrcf	___fttol@lval+3,f,c
  9659  002BC2  3245               	rrcf	___fttol@lval+2,f,c
  9660  002BC4  3244               	rrcf	___fttol@lval+1,f,c
  9661  002BC6  3243               	rrcf	___fttol@lval,f,c
  9662  002BC8  3E47               	incfsz	___fttol@exp1,f,c
  9663  002BCA  D7F9               	goto	l6364
  9664  002BCC  D019               	goto	l6378
  9665  002BCE                     l6368:
  9666  002BCE  0E17               	movlw	23
  9667  002BD0  6447               	cpfsgt	___fttol@exp1,c
  9668  002BD2  D011               	goto	l6376
  9669  002BD4                     l6370:
  9670  002BD4  0E00               	movlw	0
  9671  002BD6  6E39               	movwf	?___fttol,c
  9672  002BD8  0E00               	movlw	0
  9673  002BDA  6E3A               	movwf	?___fttol+1,c
  9674  002BDC  0E00               	movlw	0
  9675  002BDE  6E3B               	movwf	?___fttol+2,c
  9676  002BE0  0E00               	movlw	0
  9677  002BE2  6E3C               	movwf	?___fttol+3,c
  9678  002BE4  D022               	goto	l1182
  9679  002BE6  D007               	goto	l6376
  9680  002BE8                     l6374:
  9681  002BE8  90D8               	bcf	status,0,c
  9682  002BEA  3643               	rlcf	___fttol@lval,f,c
  9683  002BEC  3644               	rlcf	___fttol@lval+1,f,c
  9684  002BEE  3645               	rlcf	___fttol@lval+2,f,c
  9685  002BF0  3646               	rlcf	___fttol@lval+3,f,c
  9686  002BF2  0647               	decf	___fttol@exp1,f,c
  9687  002BF4  D000               	goto	l6376
  9688  002BF6                     l6376:
  9689  002BF6  5047               	movf	___fttol@exp1,w,c
  9690  002BF8  B4D8               	btfsc	status,2,c
  9691  002BFA  D002               	goto	l6378
  9692  002BFC  D7F5               	goto	l6374
  9693  002BFE  D000               	goto	l6378
  9694  002C00                     l6378:
  9695  002C00  5042               	movf	___fttol@sign1,w,c
  9696  002C02  B4D8               	btfsc	status,2,c
  9697  002C04  D009               	goto	l6382
  9698  002C06  1E46               	comf	___fttol@lval+3,f,c
  9699  002C08  1E45               	comf	___fttol@lval+2,f,c
  9700  002C0A  1E44               	comf	___fttol@lval+1,f,c
  9701  002C0C  6C43               	negf	___fttol@lval,c
  9702  002C0E  0E00               	movlw	0
  9703  002C10  2244               	addwfc	___fttol@lval+1,f,c
  9704  002C12  2245               	addwfc	___fttol@lval+2,f,c
  9705  002C14  2246               	addwfc	___fttol@lval+3,f,c
  9706  002C16  D000               	goto	l6382
  9707  002C18                     l6382:
  9708  002C18  C043  F039         	movff	___fttol@lval,?___fttol
  9709  002C1C  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
  9710  002C20  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
  9711  002C24  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
  9712  002C28  D000               	goto	l1182
  9713  002C2A                     l1182:
  9714  002C2A  0012               	return		;funcret
  9715  002C2C                     __end_of___fttol:
  9716                           	opt stack 0
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon2	equ	0xFF1
  9724                           postinc0	equ	0xFEE
  9725                           wreg	equ	0xFE8
  9726                           postdec1	equ	0xFE5
  9727                           fsr1l	equ	0xFE1
  9728                           indf2	equ	0xFDF
  9729                           postinc2	equ	0xFDE
  9730                           postdec2	equ	0xFDD
  9731                           fsr2h	equ	0xFDA
  9732                           fsr2l	equ	0xFD9
  9733                           status	equ	0xFD8
  9734                           
  9735 ;; *************** function ___ftsub *****************
  9736 ;; Defined at:
  9737 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  f1              3   71[COMRAM] float 
  9740 ;;  f2              3   74[COMRAM] float 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  3   71[COMRAM] float 
  9745 ;; Registers used:
  9746 ;;		wreg, status,2, status,0, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9752 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9755 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9756 ;;Total ram usage:        6 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    4
  9759 ;; This function calls:
  9760 ;;		___ftadd
  9761 ;; This function is called by:
  9762 ;;		_printf
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           	psect	text31
  9767  003AB2                     __ptext31:
  9768                           	opt stack 0
  9769  003AB2                     ___ftsub:
  9770                           	opt stack 21
  9771                           
  9772                           ;incstack = 0
  9773  003AB2  504B               	movf	___ftsub@f2,w,c
  9774  003AB4  104C               	iorwf	___ftsub@f2+1,w,c
  9775  003AB6  104D               	iorwf	___ftsub@f2+2,w,c
  9776  003AB8  B4D8               	btfsc	status,2,c
  9777  003ABA  D007               	goto	l6314
  9778  003ABC  0E00               	movlw	0
  9779  003ABE  1A4B               	xorwf	___ftsub@f2,f,c
  9780  003AC0  0E00               	movlw	0
  9781  003AC2  1A4C               	xorwf	___ftsub@f2+1,f,c
  9782  003AC4  0E80               	movlw	128
  9783  003AC6  1A4D               	xorwf	___ftsub@f2+2,f,c
  9784  003AC8  D000               	goto	l6314
  9785  003ACA                     l6314:
  9786  003ACA  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
  9787  003ACE  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
  9788  003AD2  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
  9789  003AD6  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
  9790  003ADA  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
  9791  003ADE  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
  9792  003AE2  ECD0  F00E         	call	___ftadd	;wreg free
  9793  003AE6  C03C  F048         	movff	?___ftadd,?___ftsub
  9794  003AEA  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
  9795  003AEE  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
  9796  003AF2  D000               	goto	l1178
  9797  003AF4                     l1178:
  9798  003AF4  0012               	return		;funcret
  9799  003AF6                     __end_of___ftsub:
  9800                           	opt stack 0
  9801                           tblptru	equ	0xFF8
  9802                           tblptrh	equ	0xFF7
  9803                           tblptrl	equ	0xFF6
  9804                           tablat	equ	0xFF5
  9805                           prodh	equ	0xFF4
  9806                           prodl	equ	0xFF3
  9807                           intcon2	equ	0xFF1
  9808                           postinc0	equ	0xFEE
  9809                           wreg	equ	0xFE8
  9810                           postdec1	equ	0xFE5
  9811                           fsr1l	equ	0xFE1
  9812                           indf2	equ	0xFDF
  9813                           postinc2	equ	0xFDE
  9814                           postdec2	equ	0xFDD
  9815                           fsr2h	equ	0xFDA
  9816                           fsr2l	equ	0xFD9
  9817                           status	equ	0xFD8
  9818                           
  9819 ;; *************** function ___ftadd *****************
  9820 ;; Defined at:
  9821 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  f1              3   59[COMRAM] float 
  9824 ;;  f2              3   62[COMRAM] float 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;  exp1            1   70[COMRAM] unsigned char 
  9827 ;;  exp2            1   69[COMRAM] unsigned char 
  9828 ;;  sign            1   68[COMRAM] unsigned char 
  9829 ;; Return value:  Size  Location     Type
  9830 ;;                  3   59[COMRAM] float 
  9831 ;; Registers used:
  9832 ;;		wreg, status,2, status,0, cstack
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9838 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9842 ;;Total ram usage:       12 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    3
  9845 ;; This function calls:
  9846 ;;		___ftpack
  9847 ;; This function is called by:
  9848 ;;		_printf
  9849 ;;		___ftsub
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           	psect	text32
  9854  001DA0                     __ptext32:
  9855                           	opt stack 0
  9856  001DA0                     ___ftadd:
  9857                           	opt stack 21
  9858                           
  9859                           ;incstack = 0
  9860  001DA0  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
  9861  001DA4  6A43               	clrf	(??___ftadd+1)& (0+255),c
  9862  001DA6  6A44               	clrf	(??___ftadd+2)& (0+255),c
  9863  001DA8  343D               	rlcf	___ftadd@f1+1,w,c
  9864  001DAA  3642               	rlcf	??___ftadd& (0+255),f,c
  9865  001DAC  E301               	bnc	u5351
  9866  001DAE  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  9867  001DB0                     u5351:
  9868  001DB0  5042               	movf	??___ftadd,w,c
  9869  001DB2  6E47               	movwf	___ftadd@exp1,c
  9870  001DB4  C041  F042         	movff	___ftadd@f2+2,??___ftadd
  9871  001DB8  6A43               	clrf	(??___ftadd+1)& (0+255),c
  9872  001DBA  6A44               	clrf	(??___ftadd+2)& (0+255),c
  9873  001DBC  3440               	rlcf	___ftadd@f2+1,w,c
  9874  001DBE  3642               	rlcf	??___ftadd& (0+255),f,c
  9875  001DC0  E301               	bnc	u5361
  9876  001DC2  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  9877  001DC4                     u5361:
  9878  001DC4  5042               	movf	??___ftadd,w,c
  9879  001DC6  6E46               	movwf	___ftadd@exp2,c
  9880  001DC8  5047               	movf	___ftadd@exp1,w,c
  9881  001DCA  B4D8               	btfsc	status,2,c
  9882  001DCC  D00B               	goto	l1097
  9883  001DCE  5046               	movf	___ftadd@exp2,w,c
  9884  001DD0  5C47               	subwf	___ftadd@exp1,w,c
  9885  001DD2  B0D8               	btfsc	status,0,c
  9886  001DD4  D00E               	goto	l5856
  9887  001DD6  5047               	movf	___ftadd@exp1,w,c
  9888  001DD8  0800               	sublw	0
  9889  001DDA  2446               	addwf	___ftadd@exp2,w,c
  9890  001DDC  6E42               	movwf	??___ftadd& (0+255),c
  9891  001DDE  0E18               	movlw	24
  9892  001DE0  6442               	cpfsgt	??___ftadd,c
  9893  001DE2  D007               	goto	l5856
  9894  001DE4                     l1097:
  9895  001DE4  C03F  F03C         	movff	___ftadd@f2,?___ftadd
  9896  001DE8  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
  9897  001DEC  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
  9898  001DF0  D0B8               	goto	l1098
  9899  001DF2                     l5856:
  9900  001DF2  5046               	movf	___ftadd@exp2,w,c
  9901  001DF4  B4D8               	btfsc	status,2,c
  9902  001DF6  D00B               	goto	l1101
  9903  001DF8  5047               	movf	___ftadd@exp1,w,c
  9904  001DFA  5C46               	subwf	___ftadd@exp2,w,c
  9905  001DFC  B0D8               	btfsc	status,0,c
  9906  001DFE  D00E               	goto	l5862
  9907  001E00  5046               	movf	___ftadd@exp2,w,c
  9908  001E02  0800               	sublw	0
  9909  001E04  2447               	addwf	___ftadd@exp1,w,c
  9910  001E06  6E42               	movwf	??___ftadd& (0+255),c
  9911  001E08  0E18               	movlw	24
  9912  001E0A  6442               	cpfsgt	??___ftadd,c
  9913  001E0C  D007               	goto	l5862
  9914  001E0E                     l1101:
  9915  001E0E  C03C  F03C         	movff	___ftadd@f1,?___ftadd
  9916  001E12  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
  9917  001E16  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
  9918  001E1A  D0A3               	goto	l1098
  9919  001E1C                     l5862:
  9920  001E1C  0E06               	movlw	6
  9921  001E1E  6E45               	movwf	___ftadd@sign,c
  9922  001E20  AE3E               	btfss	___ftadd@f1+2,7,c
  9923  001E22  D002               	goto	l5868
  9924  001E24  8E45               	bsf	___ftadd@sign,7,c
  9925  001E26  D000               	goto	l5868
  9926  001E28                     l5868:
  9927  001E28  BE41               	btfsc	___ftadd@f2+2,7,c
  9928  001E2A  8C45               	bsf	___ftadd@sign,6,c
  9929  001E2C  8E3D               	bsf	___ftadd@f1+1,7,c
  9930  001E2E  0EFF               	movlw	255
  9931  001E30  163C               	andwf	___ftadd@f1,f,c
  9932  001E32  0EFF               	movlw	255
  9933  001E34  163D               	andwf	___ftadd@f1+1,f,c
  9934  001E36  0E00               	movlw	0
  9935  001E38  163E               	andwf	___ftadd@f1+2,f,c
  9936  001E3A  8E40               	bsf	___ftadd@f2+1,7,c
  9937  001E3C  0EFF               	movlw	255
  9938  001E3E  163F               	andwf	___ftadd@f2,f,c
  9939  001E40  0EFF               	movlw	255
  9940  001E42  1640               	andwf	___ftadd@f2+1,f,c
  9941  001E44  0E00               	movlw	0
  9942  001E46  1641               	andwf	___ftadd@f2+2,f,c
  9943  001E48  5046               	movf	___ftadd@exp2,w,c
  9944  001E4A  5C47               	subwf	___ftadd@exp1,w,c
  9945  001E4C  B0D8               	btfsc	status,0,c
  9946  001E4E  D01E               	goto	l5888
  9947  001E50                     l5878:
  9948  001E50  90D8               	bcf	status,0,c
  9949  001E52  363F               	rlcf	___ftadd@f2,f,c
  9950  001E54  3640               	rlcf	___ftadd@f2+1,f,c
  9951  001E56  3641               	rlcf	___ftadd@f2+2,f,c
  9952  001E58  0646               	decf	___ftadd@exp2,f,c
  9953  001E5A  5047               	movf	___ftadd@exp1,w,c
  9954  001E5C  1846               	xorwf	___ftadd@exp2,w,c
  9955  001E5E  B4D8               	btfsc	status,2,c
  9956  001E60  D00F               	goto	l5886
  9957  001E62  0645               	decf	___ftadd@sign,f,c
  9958  001E64  C045  F042         	movff	___ftadd@sign,??___ftadd
  9959  001E68  0E07               	movlw	7
  9960  001E6A  1642               	andwf	??___ftadd,f,c
  9961  001E6C  B4D8               	btfsc	status,2,c
  9962  001E6E  D008               	goto	l5886
  9963  001E70  D7EF               	goto	l5878
  9964  001E72  D006               	goto	l5886
  9965  001E74                     l5884:
  9966  001E74  90D8               	bcf	status,0,c
  9967  001E76  323E               	rrcf	___ftadd@f1+2,f,c
  9968  001E78  323D               	rrcf	___ftadd@f1+1,f,c
  9969  001E7A  323C               	rrcf	___ftadd@f1,f,c
  9970  001E7C  2A47               	incf	___ftadd@exp1,f,c
  9971  001E7E  D000               	goto	l5886
  9972  001E80                     l5886:
  9973  001E80  5046               	movf	___ftadd@exp2,w,c
  9974  001E82  1847               	xorwf	___ftadd@exp1,w,c
  9975  001E84  B4D8               	btfsc	status,2,c
  9976  001E86  D024               	goto	l1112
  9977  001E88  D7F5               	goto	l5884
  9978  001E8A  D022               	goto	l1112
  9979  001E8C                     l5888:
  9980  001E8C  5047               	movf	___ftadd@exp1,w,c
  9981  001E8E  5C46               	subwf	___ftadd@exp2,w,c
  9982  001E90  B0D8               	btfsc	status,0,c
  9983  001E92  D01E               	goto	l1112
  9984  001E94                     l5890:
  9985  001E94  90D8               	bcf	status,0,c
  9986  001E96  363C               	rlcf	___ftadd@f1,f,c
  9987  001E98  363D               	rlcf	___ftadd@f1+1,f,c
  9988  001E9A  363E               	rlcf	___ftadd@f1+2,f,c
  9989  001E9C  0647               	decf	___ftadd@exp1,f,c
  9990  001E9E  5047               	movf	___ftadd@exp1,w,c
  9991  001EA0  1846               	xorwf	___ftadd@exp2,w,c
  9992  001EA2  B4D8               	btfsc	status,2,c
  9993  001EA4  D00F               	goto	l5898
  9994  001EA6  0645               	decf	___ftadd@sign,f,c
  9995  001EA8  C045  F042         	movff	___ftadd@sign,??___ftadd
  9996  001EAC  0E07               	movlw	7
  9997  001EAE  1642               	andwf	??___ftadd,f,c
  9998  001EB0  B4D8               	btfsc	status,2,c
  9999  001EB2  D008               	goto	l5898
 10000  001EB4  D7EF               	goto	l5890
 10001  001EB6  D006               	goto	l5898
 10002  001EB8                     l5896:
 10003  001EB8  90D8               	bcf	status,0,c
 10004  001EBA  3241               	rrcf	___ftadd@f2+2,f,c
 10005  001EBC  3240               	rrcf	___ftadd@f2+1,f,c
 10006  001EBE  323F               	rrcf	___ftadd@f2,f,c
 10007  001EC0  2A46               	incf	___ftadd@exp2,f,c
 10008  001EC2  D000               	goto	l5898
 10009  001EC4                     l5898:
 10010  001EC4  5046               	movf	___ftadd@exp2,w,c
 10011  001EC6  1847               	xorwf	___ftadd@exp1,w,c
 10012  001EC8  B4D8               	btfsc	status,2,c
 10013  001ECA  D002               	goto	l1112
 10014  001ECC  D7F5               	goto	l5896
 10015  001ECE  D000               	goto	l1112
 10016  001ED0                     l1112:
 10017  001ED0  AE45               	btfss	___ftadd@sign,7,c
 10018  001ED2  D00C               	goto	l1121
 10019  001ED4  0EFF               	movlw	255
 10020  001ED6  1A3C               	xorwf	___ftadd@f1,f,c
 10021  001ED8  0EFF               	movlw	255
 10022  001EDA  1A3D               	xorwf	___ftadd@f1+1,f,c
 10023  001EDC  0EFF               	movlw	255
 10024  001EDE  1A3E               	xorwf	___ftadd@f1+2,f,c
 10025  001EE0  0E01               	movlw	1
 10026  001EE2  263C               	addwf	___ftadd@f1,f,c
 10027  001EE4  0E00               	movlw	0
 10028  001EE6  223D               	addwfc	___ftadd@f1+1,f,c
 10029  001EE8  0E00               	movlw	0
 10030  001EEA  223E               	addwfc	___ftadd@f1+2,f,c
 10031  001EEC                     l1121:
 10032  001EEC  AC45               	btfss	___ftadd@sign,6,c
 10033  001EEE  D00D               	goto	l5904
 10034  001EF0  0EFF               	movlw	255
 10035  001EF2  1A3F               	xorwf	___ftadd@f2,f,c
 10036  001EF4  0EFF               	movlw	255
 10037  001EF6  1A40               	xorwf	___ftadd@f2+1,f,c
 10038  001EF8  0EFF               	movlw	255
 10039  001EFA  1A41               	xorwf	___ftadd@f2+2,f,c
 10040  001EFC  0E01               	movlw	1
 10041  001EFE  263F               	addwf	___ftadd@f2,f,c
 10042  001F00  0E00               	movlw	0
 10043  001F02  2240               	addwfc	___ftadd@f2+1,f,c
 10044  001F04  0E00               	movlw	0
 10045  001F06  2241               	addwfc	___ftadd@f2+2,f,c
 10046  001F08  D000               	goto	l5904
 10047  001F0A                     l5904:
 10048  001F0A  0E00               	movlw	0
 10049  001F0C  6E45               	movwf	___ftadd@sign,c
 10050  001F0E  503C               	movf	___ftadd@f1,w,c
 10051  001F10  263F               	addwf	___ftadd@f2,f,c
 10052  001F12  503D               	movf	___ftadd@f1+1,w,c
 10053  001F14  2240               	addwfc	___ftadd@f2+1,f,c
 10054  001F16  503E               	movf	___ftadd@f1+2,w,c
 10055  001F18  2241               	addwfc	___ftadd@f2+2,f,c
 10056  001F1A  AE41               	btfss	___ftadd@f2+2,7,c
 10057  001F1C  D00F               	goto	l5914
 10058  001F1E  0EFF               	movlw	255
 10059  001F20  1A3F               	xorwf	___ftadd@f2,f,c
 10060  001F22  0EFF               	movlw	255
 10061  001F24  1A40               	xorwf	___ftadd@f2+1,f,c
 10062  001F26  0EFF               	movlw	255
 10063  001F28  1A41               	xorwf	___ftadd@f2+2,f,c
 10064  001F2A  0E01               	movlw	1
 10065  001F2C  263F               	addwf	___ftadd@f2,f,c
 10066  001F2E  0E00               	movlw	0
 10067  001F30  2240               	addwfc	___ftadd@f2+1,f,c
 10068  001F32  0E00               	movlw	0
 10069  001F34  2241               	addwfc	___ftadd@f2+2,f,c
 10070  001F36  0E01               	movlw	1
 10071  001F38  6E45               	movwf	___ftadd@sign,c
 10072  001F3A  D000               	goto	l5914
 10073  001F3C                     l5914:
 10074  001F3C  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
 10075  001F40  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 10076  001F44  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 10077  001F48  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
 10078  001F4C  C045  F013         	movff	___ftadd@sign,___ftpack@sign
 10079  001F50  ECC8  F017         	call	___ftpack	;wreg free
 10080  001F54  C00F  F03C         	movff	?___ftpack,?___ftadd
 10081  001F58  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
 10082  001F5C  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
 10083  001F60  D000               	goto	l1098
 10084  001F62                     l1098:
 10085  001F62  0012               	return		;funcret
 10086  001F64                     __end_of___ftadd:
 10087                           	opt stack 0
 10088                           tblptru	equ	0xFF8
 10089                           tblptrh	equ	0xFF7
 10090                           tblptrl	equ	0xFF6
 10091                           tablat	equ	0xFF5
 10092                           prodh	equ	0xFF4
 10093                           prodl	equ	0xFF3
 10094                           intcon2	equ	0xFF1
 10095                           postinc0	equ	0xFEE
 10096                           wreg	equ	0xFE8
 10097                           postdec1	equ	0xFE5
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function ___ftneg *****************
 10107 ;; Defined at:
 10108 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  f1              3   14[COMRAM] float 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;		None
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  3   14[COMRAM] float 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, status,0
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10122 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;Total ram usage:        3 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    2
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_printf
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text33
 10137  003D0A                     __ptext33:
 10138                           	opt stack 0
 10139  003D0A                     ___ftneg:
 10140                           	opt stack 23
 10141                           
 10142                           ;incstack = 0
 10143  003D0A  500F               	movf	___ftneg@f1,w,c
 10144  003D0C  1010               	iorwf	___ftneg@f1+1,w,c
 10145  003D0E  1011               	iorwf	___ftneg@f1+2,w,c
 10146  003D10  B4D8               	btfsc	status,2,c
 10147  003D12  D006               	goto	l1171
 10148  003D14  0E00               	movlw	0
 10149  003D16  1A0F               	xorwf	___ftneg@f1,f,c
 10150  003D18  0E00               	movlw	0
 10151  003D1A  1A10               	xorwf	___ftneg@f1+1,f,c
 10152  003D1C  0E80               	movlw	128
 10153  003D1E  1A11               	xorwf	___ftneg@f1+2,f,c
 10154  003D20                     l1171:
 10155  003D20  C00F  F00F         	movff	___ftneg@f1,?___ftneg
 10156  003D24  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
 10157  003D28  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
 10158  003D2C  0012               	return		;funcret
 10159  003D2E                     __end_of___ftneg:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon2	equ	0xFF1
 10168                           postinc0	equ	0xFEE
 10169                           wreg	equ	0xFE8
 10170                           postdec1	equ	0xFE5
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179 ;; *************** function ___ftge *****************
 10180 ;; Defined at:
 10181 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  ff1             3   14[COMRAM] float 
 10184 ;;  ff2             3   17[COMRAM] float 
 10185 ;; Auto vars:     Size  Location     Type
 10186 ;;		None
 10187 ;; Return value:  Size  Location     Type
 10188 ;;		None               void
 10189 ;; Registers used:
 10190 ;;		wreg, status,2, status,0
 10191 ;; Tracked objects:
 10192 ;;		On entry : 0/0
 10193 ;;		On exit  : 0/0
 10194 ;;		Unchanged: 0/0
 10195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10196 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;Total ram usage:        9 bytes
 10201 ;; Hardware stack levels used:    1
 10202 ;; Hardware stack levels required when called:    2
 10203 ;; This function calls:
 10204 ;;		Nothing
 10205 ;; This function is called by:
 10206 ;;		_main
 10207 ;;		_update_LCD_misc
 10208 ;;		_printf
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           	psect	text34
 10213  0031A0                     __ptext34:
 10214                           	opt stack 0
 10215  0031A0                     ___ftge:
 10216                           	opt stack 28
 10217                           
 10218                           ;incstack = 0
 10219  0031A0  AE11               	btfss	___ftge@ff1+2,7,c
 10220  0031A2  D017               	goto	l6322
 10221  0031A4  C00F  F015         	movff	___ftge@ff1,??___ftge
 10222  0031A8  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 10223  0031AC  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 10224  0031B0  1E15               	comf	??___ftge,f,c
 10225  0031B2  1E16               	comf	??___ftge+1,f,c
 10226  0031B4  1E17               	comf	??___ftge+2,f,c
 10227  0031B6  2A15               	incf	??___ftge,f,c
 10228  0031B8  0E00               	movlw	0
 10229  0031BA  2216               	addwfc	??___ftge+1,f,c
 10230  0031BC  2217               	addwfc	??___ftge+2,f,c
 10231  0031BE  0E00               	movlw	0
 10232  0031C0  2415               	addwf	??___ftge,w,c
 10233  0031C2  6E0F               	movwf	___ftge@ff1,c
 10234  0031C4  0E00               	movlw	0
 10235  0031C6  2016               	addwfc	??___ftge+1,w,c
 10236  0031C8  6E10               	movwf	___ftge@ff1+1,c
 10237  0031CA  0E80               	movlw	128
 10238  0031CC  2017               	addwfc	??___ftge+2,w,c
 10239  0031CE  6E11               	movwf	___ftge@ff1+2,c
 10240  0031D0  D000               	goto	l6322
 10241  0031D2                     l6322:
 10242  0031D2  AE14               	btfss	___ftge@ff2+2,7,c
 10243  0031D4  D017               	goto	l6326
 10244  0031D6  C012  F015         	movff	___ftge@ff2,??___ftge
 10245  0031DA  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 10246  0031DE  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 10247  0031E2  1E15               	comf	??___ftge,f,c
 10248  0031E4  1E16               	comf	??___ftge+1,f,c
 10249  0031E6  1E17               	comf	??___ftge+2,f,c
 10250  0031E8  2A15               	incf	??___ftge,f,c
 10251  0031EA  0E00               	movlw	0
 10252  0031EC  2216               	addwfc	??___ftge+1,f,c
 10253  0031EE  2217               	addwfc	??___ftge+2,f,c
 10254  0031F0  0E00               	movlw	0
 10255  0031F2  2415               	addwf	??___ftge,w,c
 10256  0031F4  6E12               	movwf	___ftge@ff2,c
 10257  0031F6  0E00               	movlw	0
 10258  0031F8  2016               	addwfc	??___ftge+1,w,c
 10259  0031FA  6E13               	movwf	___ftge@ff2+1,c
 10260  0031FC  0E80               	movlw	128
 10261  0031FE  2017               	addwfc	??___ftge+2,w,c
 10262  003200  6E14               	movwf	___ftge@ff2+2,c
 10263  003202  D000               	goto	l6326
 10264  003204                     l6326:
 10265  003204  0E00               	movlw	0
 10266  003206  1A0F               	xorwf	___ftge@ff1,f,c
 10267  003208  0E00               	movlw	0
 10268  00320A  1A10               	xorwf	___ftge@ff1+1,f,c
 10269  00320C  0E80               	movlw	128
 10270  00320E  1A11               	xorwf	___ftge@ff1+2,f,c
 10271  003210  0E00               	movlw	0
 10272  003212  1A12               	xorwf	___ftge@ff2,f,c
 10273  003214  0E00               	movlw	0
 10274  003216  1A13               	xorwf	___ftge@ff2+1,f,c
 10275  003218  0E80               	movlw	128
 10276  00321A  1A14               	xorwf	___ftge@ff2+2,f,c
 10277  00321C  5012               	movf	___ftge@ff2,w,c
 10278  00321E  5C0F               	subwf	___ftge@ff1,w,c
 10279  003220  5013               	movf	___ftge@ff2+1,w,c
 10280  003222  5810               	subwfb	___ftge@ff1+1,w,c
 10281  003224  5014               	movf	___ftge@ff2+2,w,c
 10282  003226  5811               	subwfb	___ftge@ff1+2,w,c
 10283  003228  B0D8               	btfsc	status,0,c
 10284  00322A  D002               	goto	l6332
 10285  00322C  90D8               	bcf	status,0,c
 10286  00322E  D002               	goto	l1155
 10287  003230                     l6332:
 10288  003230  80D8               	bsf	status,0,c
 10289  003232  D000               	goto	l1155
 10290  003234                     l1155:
 10291  003234  0012               	return		;funcret
 10292  003236                     __end_of___ftge:
 10293                           	opt stack 0
 10294                           tblptru	equ	0xFF8
 10295                           tblptrh	equ	0xFF7
 10296                           tblptrl	equ	0xFF6
 10297                           tablat	equ	0xFF5
 10298                           prodh	equ	0xFF4
 10299                           prodl	equ	0xFF3
 10300                           intcon2	equ	0xFF1
 10301                           postinc0	equ	0xFEE
 10302                           wreg	equ	0xFE8
 10303                           postdec1	equ	0xFE5
 10304                           fsr1l	equ	0xFE1
 10305                           indf2	equ	0xFDF
 10306                           postinc2	equ	0xFDE
 10307                           postdec2	equ	0xFDD
 10308                           fsr2h	equ	0xFDA
 10309                           fsr2l	equ	0xFD9
 10310                           status	equ	0xFD8
 10311                           
 10312 ;; *************** function _get_full_ADC *****************
 10313 ;; Defined at:
 10314 ;;		line 461 in file "Lab9test.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;		None
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;  result          2   18[COMRAM] int 
 10319 ;; Return value:  Size  Location     Type
 10320 ;;                  2   14[COMRAM] unsigned int 
 10321 ;; Registers used:
 10322 ;;		wreg, status,2, status,0
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;Total ram usage:        6 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    2
 10335 ;; This function calls:
 10336 ;;		Nothing
 10337 ;; This function is called by:
 10338 ;;		_main
 10339 ;;		_update_LCD_misc
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           	psect	text35
 10344  003CBE                     __ptext35:
 10345                           	opt stack 0
 10346  003CBE                     _get_full_ADC:
 10347                           	opt stack 28
 10348                           
 10349                           ;Lab9test.c: 463: int result;
 10350                           ;Lab9test.c: 464: ADCON0bits.GO=1;
 10351                           
 10352                           ;incstack = 0
 10353  003CBE  82C2               	bsf	4034,1,c	;volatile
 10354                           
 10355                           ;Lab9test.c: 465: while(ADCON0bits.DONE==1);
 10356  003CC0  D000               	goto	l437
 10357  003CC2                     l437:
 10358  003CC2  B2C2               	btfsc	4034,1,c	;volatile
 10359  003CC4  D7FE               	goto	l437
 10360                           
 10361                           ;Lab9test.c: 466: result = (ADRESH * 0x100) + ADRESL;
 10362  003CC6  50C4               	movf	4036,w,c	;volatile
 10363  003CC8  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
 10364  003CCA  6A11               	clrf	??_get_full_ADC& (0+255),c
 10365  003CCC  50C3               	movf	4035,w,c	;volatile
 10366  003CCE  2411               	addwf	??_get_full_ADC,w,c
 10367  003CD0  6E13               	movwf	get_full_ADC@result,c
 10368  003CD2  0E00               	movlw	0
 10369  003CD4  2012               	addwfc	??_get_full_ADC+1,w,c
 10370  003CD6  6E14               	movwf	get_full_ADC@result+1,c
 10371                           
 10372                           ;Lab9test.c: 468: return result;
 10373  003CD8  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
 10374  003CDC  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 10375  003CE0  D000               	goto	l440
 10376  003CE2                     l440:
 10377  003CE2  0012               	return		;funcret
 10378  003CE4                     __end_of_get_full_ADC:
 10379                           	opt stack 0
 10380                           tblptru	equ	0xFF8
 10381                           tblptrh	equ	0xFF7
 10382                           tblptrl	equ	0xFF6
 10383                           tablat	equ	0xFF5
 10384                           prodh	equ	0xFF4
 10385                           prodl	equ	0xFF3
 10386                           intcon2	equ	0xFF1
 10387                           postinc0	equ	0xFEE
 10388                           wreg	equ	0xFE8
 10389                           postdec1	equ	0xFE5
 10390                           fsr1l	equ	0xFE1
 10391                           indf2	equ	0xFDF
 10392                           postinc2	equ	0xFDE
 10393                           postdec2	equ	0xFDD
 10394                           fsr2h	equ	0xFDA
 10395                           fsr2l	equ	0xFD9
 10396                           status	equ	0xFD8
 10397                           
 10398 ;; *************** function ___ftdiv *****************
 10399 ;; Defined at:
 10400 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;  f1              3   38[COMRAM] float 
 10403 ;;  f2              3   41[COMRAM] float 
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;  f3              3   48[COMRAM] float 
 10406 ;;  sign            1   52[COMRAM] unsigned char 
 10407 ;;  exp             1   51[COMRAM] unsigned char 
 10408 ;;  cntr            1   47[COMRAM] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  3   38[COMRAM] float 
 10411 ;; Registers used:
 10412 ;;		wreg, status,2, status,0, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10418 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;Total ram usage:       15 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    3
 10425 ;; This function calls:
 10426 ;;		___ftpack
 10427 ;; This function is called by:
 10428 ;;		_main
 10429 ;;		_update_LCD_misc
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           	psect	text36
 10434  002C2C                     __ptext36:
 10435                           	opt stack 0
 10436  002C2C                     ___ftdiv:
 10437                           	opt stack 27
 10438                           
 10439                           ;incstack = 0
 10440  002C2C  C029  F02D         	movff	___ftdiv@f1+2,??___ftdiv
 10441  002C30  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10442  002C32  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10443  002C34  3428               	rlcf	___ftdiv@f1+1,w,c
 10444  002C36  362D               	rlcf	??___ftdiv& (0+255),f,c
 10445  002C38  E301               	bnc	u6981
 10446  002C3A  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10447  002C3C                     u6981:
 10448  002C3C  502D               	movf	??___ftdiv,w,c
 10449  002C3E  6E34               	movwf	___ftdiv@exp,c
 10450  002C40  5034               	movf	___ftdiv@exp,w,c
 10451  002C42  A4D8               	btfss	status,2,c
 10452  002C44  D002               	goto	l6806
 10453  002C46  D00E               	goto	l6808
 10454  002C48  D061               	goto	l1129
 10455  002C4A                     l6806:
 10456  002C4A  C02C  F02D         	movff	___ftdiv@f2+2,??___ftdiv
 10457  002C4E  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10458  002C50  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10459  002C52  342B               	rlcf	___ftdiv@f2+1,w,c
 10460  002C54  362D               	rlcf	??___ftdiv& (0+255),f,c
 10461  002C56  E301               	bnc	u7001
 10462  002C58  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10463  002C5A                     u7001:
 10464  002C5A  502D               	movf	??___ftdiv,w,c
 10465  002C5C  6E35               	movwf	___ftdiv@sign,c
 10466  002C5E  5035               	movf	___ftdiv@sign,w,c
 10467  002C60  A4D8               	btfss	status,2,c
 10468  002C62  D007               	goto	l6812
 10469  002C64                     l6808:
 10470  002C64  0E00               	movlw	0
 10471  002C66  6E27               	movwf	?___ftdiv,c
 10472  002C68  0E00               	movlw	0
 10473  002C6A  6E28               	movwf	?___ftdiv+1,c
 10474  002C6C  0E00               	movlw	0
 10475  002C6E  6E29               	movwf	?___ftdiv+2,c
 10476  002C70  D04D               	goto	l1129
 10477  002C72                     l6812:
 10478  002C72  0E00               	movlw	0
 10479  002C74  6E31               	movwf	___ftdiv@f3,c
 10480  002C76  0E00               	movlw	0
 10481  002C78  6E32               	movwf	___ftdiv@f3+1,c
 10482  002C7A  0E00               	movlw	0
 10483  002C7C  6E33               	movwf	___ftdiv@f3+2,c
 10484  002C7E  5035               	movf	___ftdiv@sign,w,c
 10485  002C80  0F89               	addlw	137
 10486  002C82  5E34               	subwf	___ftdiv@exp,f,c
 10487  002C84  C029  F035         	movff	___ftdiv@f1+2,___ftdiv@sign
 10488  002C88  502C               	movf	___ftdiv@f2+2,w,c
 10489  002C8A  1A35               	xorwf	___ftdiv@sign,f,c
 10490  002C8C  0E80               	movlw	128
 10491  002C8E  1635               	andwf	___ftdiv@sign,f,c
 10492  002C90  8E28               	bsf	___ftdiv@f1+1,7,c
 10493  002C92  0EFF               	movlw	255
 10494  002C94  1627               	andwf	___ftdiv@f1,f,c
 10495  002C96  0EFF               	movlw	255
 10496  002C98  1628               	andwf	___ftdiv@f1+1,f,c
 10497  002C9A  0E00               	movlw	0
 10498  002C9C  1629               	andwf	___ftdiv@f1+2,f,c
 10499  002C9E  8E2B               	bsf	___ftdiv@f2+1,7,c
 10500  002CA0  0EFF               	movlw	255
 10501  002CA2  162A               	andwf	___ftdiv@f2,f,c
 10502  002CA4  0EFF               	movlw	255
 10503  002CA6  162B               	andwf	___ftdiv@f2+1,f,c
 10504  002CA8  0E00               	movlw	0
 10505  002CAA  162C               	andwf	___ftdiv@f2+2,f,c
 10506  002CAC  0E18               	movlw	24
 10507  002CAE  6E30               	movwf	___ftdiv@cntr,c
 10508  002CB0  D000               	goto	l6832
 10509  002CB2                     l6832:
 10510  002CB2  90D8               	bcf	status,0,c
 10511  002CB4  3631               	rlcf	___ftdiv@f3,f,c
 10512  002CB6  3632               	rlcf	___ftdiv@f3+1,f,c
 10513  002CB8  3633               	rlcf	___ftdiv@f3+2,f,c
 10514  002CBA  502A               	movf	___ftdiv@f2,w,c
 10515  002CBC  5C27               	subwf	___ftdiv@f1,w,c
 10516  002CBE  502B               	movf	___ftdiv@f2+1,w,c
 10517  002CC0  5828               	subwfb	___ftdiv@f1+1,w,c
 10518  002CC2  502C               	movf	___ftdiv@f2+2,w,c
 10519  002CC4  5829               	subwfb	___ftdiv@f1+2,w,c
 10520  002CC6  A0D8               	btfss	status,0,c
 10521  002CC8  D007               	goto	l1132
 10522  002CCA  502A               	movf	___ftdiv@f2,w,c
 10523  002CCC  5E27               	subwf	___ftdiv@f1,f,c
 10524  002CCE  502B               	movf	___ftdiv@f2+1,w,c
 10525  002CD0  5A28               	subwfb	___ftdiv@f1+1,f,c
 10526  002CD2  502C               	movf	___ftdiv@f2+2,w,c
 10527  002CD4  5A29               	subwfb	___ftdiv@f1+2,f,c
 10528  002CD6  8031               	bsf	___ftdiv@f3,0,c
 10529  002CD8                     l1132:
 10530  002CD8  90D8               	bcf	status,0,c
 10531  002CDA  3627               	rlcf	___ftdiv@f1,f,c
 10532  002CDC  3628               	rlcf	___ftdiv@f1+1,f,c
 10533  002CDE  3629               	rlcf	___ftdiv@f1+2,f,c
 10534  002CE0  2E30               	decfsz	___ftdiv@cntr,f,c
 10535  002CE2  D7E7               	goto	l6832
 10536  002CE4  D000               	goto	l6842
 10537  002CE6                     l6842:
 10538  002CE6  C031  F00F         	movff	___ftdiv@f3,___ftpack@arg
 10539  002CEA  C032  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10540  002CEE  C033  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10541  002CF2  C034  F012         	movff	___ftdiv@exp,___ftpack@exp
 10542  002CF6  C035  F013         	movff	___ftdiv@sign,___ftpack@sign
 10543  002CFA  ECC8  F017         	call	___ftpack	;wreg free
 10544  002CFE  C00F  F027         	movff	?___ftpack,?___ftdiv
 10545  002D02  C010  F028         	movff	?___ftpack+1,?___ftdiv+1
 10546  002D06  C011  F029         	movff	?___ftpack+2,?___ftdiv+2
 10547  002D0A  D000               	goto	l1129
 10548  002D0C                     l1129:
 10549  002D0C  0012               	return		;funcret
 10550  002D0E                     __end_of___ftdiv:
 10551                           	opt stack 0
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           intcon2	equ	0xFF1
 10559                           postinc0	equ	0xFEE
 10560                           wreg	equ	0xFE8
 10561                           postdec1	equ	0xFE5
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function ___awtoft *****************
 10571 ;; Defined at:
 10572 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  c               2   34[COMRAM] int 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  sign            1   37[COMRAM] unsigned char 
 10577 ;; Return value:  Size  Location     Type
 10578 ;;                  3   34[COMRAM] float 
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, status,0, cstack
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10586 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10590 ;;Total ram usage:        4 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; Hardware stack levels required when called:    3
 10593 ;; This function calls:
 10594 ;;		___ftpack
 10595 ;; This function is called by:
 10596 ;;		_main
 10597 ;;		_update_LCD_misc
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           	psect	text37
 10602  003B72                     __ptext37:
 10603                           	opt stack 0
 10604  003B72                     ___awtoft:
 10605                           	opt stack 27
 10606                           
 10607                           ;incstack = 0
 10608  003B72  0E00               	movlw	0
 10609  003B74  6E26               	movwf	___awtoft@sign,c
 10610  003B76  AE24               	btfss	___awtoft@c+1,7,c
 10611  003B78  D007               	goto	l6854
 10612  003B7A  6C23               	negf	___awtoft@c,c
 10613  003B7C  1E24               	comf	___awtoft@c+1,f,c
 10614  003B7E  B0D8               	btfsc	status,0,c
 10615  003B80  2A24               	incf	___awtoft@c+1,f,c
 10616  003B82  0E01               	movlw	1
 10617  003B84  6E26               	movwf	___awtoft@sign,c
 10618  003B86  D000               	goto	l6854
 10619  003B88                     l6854:
 10620  003B88  C023  F00F         	movff	___awtoft@c,___ftpack@arg
 10621  003B8C  C024  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 10622  003B90  6A11               	clrf	___ftpack@arg+2,c
 10623  003B92  0E8E               	movlw	142
 10624  003B94  6E12               	movwf	___ftpack@exp,c
 10625  003B96  C026  F013         	movff	___awtoft@sign,___ftpack@sign
 10626  003B9A  ECC8  F017         	call	___ftpack	;wreg free
 10627  003B9E  C00F  F023         	movff	?___ftpack,?___awtoft
 10628  003BA2  C010  F024         	movff	?___ftpack+1,?___awtoft+1
 10629  003BA6  C011  F025         	movff	?___ftpack+2,?___awtoft+2
 10630  003BAA  D000               	goto	l950
 10631  003BAC                     l950:
 10632  003BAC  0012               	return		;funcret
 10633  003BAE                     __end_of___awtoft:
 10634                           	opt stack 0
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           prodh	equ	0xFF4
 10640                           prodl	equ	0xFF3
 10641                           intcon2	equ	0xFF1
 10642                           postinc0	equ	0xFEE
 10643                           wreg	equ	0xFE8
 10644                           postdec1	equ	0xFE5
 10645                           fsr1l	equ	0xFE1
 10646                           indf2	equ	0xFDF
 10647                           postinc2	equ	0xFDE
 10648                           postdec2	equ	0xFDD
 10649                           fsr2h	equ	0xFDA
 10650                           fsr2l	equ	0xFD9
 10651                           status	equ	0xFD8
 10652                           
 10653 ;; *************** function ___ftpack *****************
 10654 ;; Defined at:
 10655 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  arg             3   14[COMRAM] unsigned um
 10658 ;;  exp             1   17[COMRAM] unsigned char 
 10659 ;;  sign            1   18[COMRAM] unsigned char 
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  3   14[COMRAM] float 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, status,0
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10671 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;Total ram usage:        8 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    2
 10678 ;; This function calls:
 10679 ;;		Nothing
 10680 ;; This function is called by:
 10681 ;;		___awtoft
 10682 ;;		___ftadd
 10683 ;;		___ftdiv
 10684 ;;		___ftmul
 10685 ;;		___lltoft
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text38
 10690  002F90                     __ptext38:
 10691                           	opt stack 0
 10692  002F90                     ___ftpack:
 10693                           	opt stack 27
 10694                           
 10695                           ;incstack = 0
 10696  002F90  5012               	movf	___ftpack@exp,w,c
 10697  002F92  B4D8               	btfsc	status,2,c
 10698  002F94  D005               	goto	l5742
 10699  002F96  500F               	movf	___ftpack@arg,w,c
 10700  002F98  1010               	iorwf	___ftpack@arg+1,w,c
 10701  002F9A  1011               	iorwf	___ftpack@arg+2,w,c
 10702  002F9C  A4D8               	btfss	status,2,c
 10703  002F9E  D00E               	goto	l5748
 10704  002FA0                     l5742:
 10705  002FA0  0E00               	movlw	0
 10706  002FA2  6E0F               	movwf	?___ftpack,c
 10707  002FA4  0E00               	movlw	0
 10708  002FA6  6E10               	movwf	?___ftpack+1,c
 10709  002FA8  0E00               	movlw	0
 10710  002FAA  6E11               	movwf	?___ftpack+2,c
 10711  002FAC  D053               	goto	l1057
 10712  002FAE  D006               	goto	l5748
 10713  002FB0                     l5746:
 10714  002FB0  2A12               	incf	___ftpack@exp,f,c
 10715  002FB2  90D8               	bcf	status,0,c
 10716  002FB4  3211               	rrcf	___ftpack@arg+2,f,c
 10717  002FB6  3210               	rrcf	___ftpack@arg+1,f,c
 10718  002FB8  320F               	rrcf	___ftpack@arg,f,c
 10719  002FBA  D000               	goto	l5748
 10720  002FBC                     l5748:
 10721  002FBC  0E00               	movlw	0
 10722  002FBE  140F               	andwf	___ftpack@arg,w,c
 10723  002FC0  6E14               	movwf	??___ftpack& (0+255),c
 10724  002FC2  0E00               	movlw	0
 10725  002FC4  1410               	andwf	___ftpack@arg+1,w,c
 10726  002FC6  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10727  002FC8  0EFE               	movlw	254
 10728  002FCA  1411               	andwf	___ftpack@arg+2,w,c
 10729  002FCC  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10730  002FCE  5014               	movf	??___ftpack,w,c
 10731  002FD0  1015               	iorwf	??___ftpack+1,w,c
 10732  002FD2  1016               	iorwf	??___ftpack+2,w,c
 10733  002FD4  B4D8               	btfsc	status,2,c
 10734  002FD6  D00E               	goto	l5754
 10735  002FD8  D7EB               	goto	l5746
 10736  002FDA  D00C               	goto	l5754
 10737  002FDC                     l5750:
 10738  002FDC  2A12               	incf	___ftpack@exp,f,c
 10739  002FDE  0E01               	movlw	1
 10740  002FE0  260F               	addwf	___ftpack@arg,f,c
 10741  002FE2  0E00               	movlw	0
 10742  002FE4  2210               	addwfc	___ftpack@arg+1,f,c
 10743  002FE6  0E00               	movlw	0
 10744  002FE8  2211               	addwfc	___ftpack@arg+2,f,c
 10745  002FEA  90D8               	bcf	status,0,c
 10746  002FEC  3211               	rrcf	___ftpack@arg+2,f,c
 10747  002FEE  3210               	rrcf	___ftpack@arg+1,f,c
 10748  002FF0  320F               	rrcf	___ftpack@arg,f,c
 10749  002FF2  D000               	goto	l5754
 10750  002FF4                     l5754:
 10751  002FF4  0E00               	movlw	0
 10752  002FF6  140F               	andwf	___ftpack@arg,w,c
 10753  002FF8  6E14               	movwf	??___ftpack& (0+255),c
 10754  002FFA  0E00               	movlw	0
 10755  002FFC  1410               	andwf	___ftpack@arg+1,w,c
 10756  002FFE  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10757  003000  0EFF               	movlw	255
 10758  003002  1411               	andwf	___ftpack@arg+2,w,c
 10759  003004  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10760  003006  5014               	movf	??___ftpack,w,c
 10761  003008  1015               	iorwf	??___ftpack+1,w,c
 10762  00300A  1016               	iorwf	??___ftpack+2,w,c
 10763  00300C  B4D8               	btfsc	status,2,c
 10764  00300E  D008               	goto	l5758
 10765  003010  D7E5               	goto	l5750
 10766  003012  D006               	goto	l5758
 10767  003014                     l5756:
 10768  003014  0612               	decf	___ftpack@exp,f,c
 10769  003016  90D8               	bcf	status,0,c
 10770  003018  360F               	rlcf	___ftpack@arg,f,c
 10771  00301A  3610               	rlcf	___ftpack@arg+1,f,c
 10772  00301C  3611               	rlcf	___ftpack@arg+2,f,c
 10773  00301E  D000               	goto	l5758
 10774  003020                     l5758:
 10775  003020  BE10               	btfsc	___ftpack@arg+1,7,c
 10776  003022  D004               	goto	l1068
 10777  003024  0E02               	movlw	2
 10778  003026  6012               	cpfslt	___ftpack@exp,c
 10779  003028  D7F5               	goto	l5756
 10780  00302A  D000               	goto	l1068
 10781  00302C                     l1068:
 10782  00302C  B012               	btfsc	___ftpack@exp,0,c
 10783  00302E  D002               	goto	l5764
 10784  003030  9E10               	bcf	___ftpack@arg+1,7,c
 10785  003032  D000               	goto	l5764
 10786  003034                     l5764:
 10787  003034  90D8               	bcf	status,0,c
 10788  003036  3212               	rrcf	___ftpack@exp,f,c
 10789  003038  5012               	movf	___ftpack@exp,w,c
 10790  00303A  1211               	iorwf	___ftpack@arg+2,f,c
 10791  00303C  5013               	movf	___ftpack@sign,w,c
 10792  00303E  B4D8               	btfsc	status,2,c
 10793  003040  D002               	goto	l5770
 10794  003042  8E11               	bsf	___ftpack@arg+2,7,c
 10795  003044  D000               	goto	l5770
 10796  003046                     l5770:
 10797  003046  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10798  00304A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10799  00304E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10800  003052  D000               	goto	l1057
 10801  003054                     l1057:
 10802  003054  0012               	return		;funcret
 10803  003056                     __end_of___ftpack:
 10804                           	opt stack 0
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           intcon2	equ	0xFF1
 10812                           postinc0	equ	0xFEE
 10813                           wreg	equ	0xFE8
 10814                           postdec1	equ	0xFE5
 10815                           fsr1l	equ	0xFE1
 10816                           indf2	equ	0xFDF
 10817                           postinc2	equ	0xFDE
 10818                           postdec2	equ	0xFDD
 10819                           fsr2h	equ	0xFDA
 10820                           fsr2l	equ	0xFD9
 10821                           status	equ	0xFD8
 10822                           
 10823 ;; *************** function _Do_Init *****************
 10824 ;; Defined at:
 10825 ;;		line 771 in file "Lab9test.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;		None               void
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, cstack
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10843 ;;Total ram usage:        0 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    4
 10846 ;; This function calls:
 10847 ;;		_Init_ADC
 10848 ;;		_Init_TRIS
 10849 ;;		_init_UART
 10850 ;; This function is called by:
 10851 ;;		_main
 10852 ;;		_update_LCD_misc
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text39
 10857  003CE4                     __ptext39:
 10858                           	opt stack 0
 10859  003CE4                     _Do_Init:
 10860                           	opt stack 22
 10861                           
 10862                           ;Lab9test.c: 774: Init_ADC();
 10863                           
 10864                           ;incstack = 0
 10865  003CE4  EC16  F01F         	call	_Init_ADC	;wreg free
 10866                           
 10867                           ;Lab9test.c: 775: Init_TRIS();
 10868  003CE8  ECC3  F01E         	call	_Init_TRIS	;wreg free
 10869                           
 10870                           ;Lab9test.c: 776: init_UART ();
 10871  003CEC  ECD9  F01E         	call	_init_UART	;wreg free
 10872                           
 10873                           ;Lab9test.c: 777: OSCCON = 0x70;
 10874  003CF0  0E70               	movlw	112
 10875  003CF2  6ED3               	movwf	4051,c	;volatile
 10876                           
 10877                           ;Lab9test.c: 779: INTCONbits.INT0IF = 0;
 10878  003CF4  92F2               	bcf	intcon,1,c	;volatile
 10879                           
 10880                           ;Lab9test.c: 780: INTCON3bits.INT1IF = 0;
 10881  003CF6  90F0               	bcf	intcon3,0,c	;volatile
 10882                           
 10883                           ;Lab9test.c: 781: INTCON3bits.INT2IF =0;
 10884  003CF8  92F0               	bcf	intcon3,1,c	;volatile
 10885                           
 10886                           ;Lab9test.c: 783: INTCON2bits.INTEDG0 = 0 ;
 10887  003CFA  9CF1               	bcf	intcon2,6,c	;volatile
 10888                           
 10889                           ;Lab9test.c: 784: INTCON2bits.INTEDG1 = 0;
 10890  003CFC  9AF1               	bcf	intcon2,5,c	;volatile
 10891                           
 10892                           ;Lab9test.c: 785: INTCON2bits.INTEDG2 = 1;
 10893  003CFE  88F1               	bsf	intcon2,4,c	;volatile
 10894                           
 10895                           ;Lab9test.c: 787: INTCONbits.INT0IE = 1;
 10896  003D00  88F2               	bsf	intcon,4,c	;volatile
 10897                           
 10898                           ;Lab9test.c: 788: INTCON3bits.INT1IE = 1;
 10899  003D02  86F0               	bsf	intcon3,3,c	;volatile
 10900                           
 10901                           ;Lab9test.c: 789: INTCON3bits.INT2IE = 1;
 10902  003D04  88F0               	bsf	intcon3,4,c	;volatile
 10903                           
 10904                           ;Lab9test.c: 791: INTCONbits.GIE = 1;
 10905  003D06  8EF2               	bsf	intcon,7,c	;volatile
 10906  003D08  0012               	return		;funcret
 10907  003D0A                     __end_of_Do_Init:
 10908                           	opt stack 0
 10909                           tblptru	equ	0xFF8
 10910                           tblptrh	equ	0xFF7
 10911                           tblptrl	equ	0xFF6
 10912                           tablat	equ	0xFF5
 10913                           prodh	equ	0xFF4
 10914                           prodl	equ	0xFF3
 10915                           intcon	equ	0xFF2
 10916                           intcon2	equ	0xFF1
 10917                           intcon3	equ	0xFF0
 10918                           postinc0	equ	0xFEE
 10919                           wreg	equ	0xFE8
 10920                           postdec1	equ	0xFE5
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8
 10928                           
 10929 ;; *************** function _init_UART *****************
 10930 ;; Defined at:
 10931 ;;		line 287 in file "Lab9test.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;		None
 10936 ;; Return value:  Size  Location     Type
 10937 ;;		None               void
 10938 ;; Registers used:
 10939 ;;		wreg, status,2, cstack
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;Total ram usage:        0 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    3
 10952 ;; This function calls:
 10953 ;;		_OpenUSART
 10954 ;; This function is called by:
 10955 ;;		_main
 10956 ;;		_Do_Init
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           	psect	text40
 10961  003DB2                     __ptext40:
 10962                           	opt stack 0
 10963  003DB2                     _init_UART:
 10964                           	opt stack 27
 10965                           
 10966                           ;Lab9test.c: 289: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
 10967                           ;Lab9test.c: 290: & 0b11111111 & 0b11111111, 25);
 10968                           
 10969                           ;incstack = 0
 10970  003DB2  0E00               	movlw	0
 10971  003DB4  6E10               	movwf	OpenUSART@spbrg+1,c
 10972  003DB6  0E19               	movlw	25
 10973  003DB8  6E0F               	movwf	OpenUSART@spbrg,c
 10974  003DBA  0E3C               	movlw	60
 10975  003DBC  EC31  F01B         	call	_OpenUSART
 10976                           
 10977                           ;Lab9test.c: 291: OSCCON = 0x60;
 10978  003DC0  0E60               	movlw	96
 10979  003DC2  6ED3               	movwf	4051,c	;volatile
 10980  003DC4  0012               	return		;funcret
 10981  003DC6                     __end_of_init_UART:
 10982                           	opt stack 0
 10983                           tblptru	equ	0xFF8
 10984                           tblptrh	equ	0xFF7
 10985                           tblptrl	equ	0xFF6
 10986                           tablat	equ	0xFF5
 10987                           prodh	equ	0xFF4
 10988                           prodl	equ	0xFF3
 10989                           intcon	equ	0xFF2
 10990                           intcon2	equ	0xFF1
 10991                           intcon3	equ	0xFF0
 10992                           postinc0	equ	0xFEE
 10993                           wreg	equ	0xFE8
 10994                           postdec1	equ	0xFE5
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           fsr2h	equ	0xFDA
 11000                           fsr2l	equ	0xFD9
 11001                           status	equ	0xFD8
 11002                           
 11003 ;; *************** function _OpenUSART *****************
 11004 ;; Defined at:
 11005 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  config          1    wreg     unsigned char 
 11008 ;;  spbrg           2   14[COMRAM] unsigned int 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  config          1   16[COMRAM] unsigned char 
 11011 ;; Return value:  Size  Location     Type
 11012 ;;		None               void
 11013 ;; Registers used:
 11014 ;;		wreg, status,2
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;Total ram usage:        3 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    2
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		_init_UART
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           	psect	text41
 11035  003662                     __ptext41:
 11036                           	opt stack 0
 11037  003662                     _OpenUSART:
 11038                           	opt stack 27
 11039                           
 11040                           ;incstack = 0
 11041                           ;OpenUSART@config stored from wreg
 11042  003662  6E11               	movwf	OpenUSART@config,c
 11043  003664  0E00               	movlw	0
 11044  003666  6EAC               	movwf	4012,c	;volatile
 11045  003668  0E00               	movlw	0
 11046  00366A  6EAB               	movwf	4011,c	;volatile
 11047  00366C  A011               	btfss	OpenUSART@config,0,c
 11048  00366E  D002               	goto	l5798
 11049  003670  88AC               	bsf	4012,4,c	;volatile
 11050  003672  D000               	goto	l5798
 11051  003674                     l5798:
 11052  003674  A211               	btfss	OpenUSART@config,1,c
 11053  003676  D003               	goto	l5802
 11054  003678  8CAC               	bsf	4012,6,c	;volatile
 11055  00367A  8CAB               	bsf	4011,6,c	;volatile
 11056  00367C  D000               	goto	l5802
 11057  00367E                     l5802:
 11058  00367E  A411               	btfss	OpenUSART@config,2,c
 11059  003680  D002               	goto	l5806
 11060  003682  8EAC               	bsf	4012,7,c	;volatile
 11061  003684  D000               	goto	l5806
 11062  003686                     l5806:
 11063  003686  A611               	btfss	OpenUSART@config,3,c
 11064  003688  D002               	goto	l720
 11065  00368A  88AB               	bsf	4011,4,c	;volatile
 11066  00368C  D002               	goto	l5810
 11067  00368E                     l720:
 11068  00368E  8AAB               	bsf	4011,5,c	;volatile
 11069  003690  D000               	goto	l5810
 11070  003692                     l5810:
 11071  003692  B811               	btfsc	OpenUSART@config,4,c
 11072  003694  84AC               	bsf	4012,2,c	;volatile
 11073  003696  989E               	bcf	3998,4,c	;volatile
 11074  003698  AA11               	btfss	OpenUSART@config,5,c
 11075  00369A  D002               	goto	l5818
 11076  00369C  86AB               	bsf	4011,3,c	;volatile
 11077  00369E  D000               	goto	l5818
 11078  0036A0                     l5818:
 11079  0036A0  AC11               	btfss	OpenUSART@config,6,c
 11080  0036A2  D002               	goto	l724
 11081  0036A4  8A9D               	bsf	3997,5,c	;volatile
 11082  0036A6  D001               	goto	l725
 11083  0036A8                     l724:
 11084  0036A8  9A9D               	bcf	3997,5,c	;volatile
 11085  0036AA                     l725:
 11086  0036AA  9A9E               	bcf	3998,5,c	;volatile
 11087  0036AC  AE11               	btfss	OpenUSART@config,7,c
 11088  0036AE  D002               	goto	l726
 11089  0036B0  889D               	bsf	3997,4,c	;volatile
 11090  0036B2  D001               	goto	l727
 11091  0036B4                     l726:
 11092  0036B4  989D               	bcf	3997,4,c	;volatile
 11093  0036B6                     l727:
 11094  0036B6  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 11095  0036BA  5010               	movf	OpenUSART@spbrg+1,w,c
 11096  0036BC  6EB0               	movwf	4016,c	;volatile
 11097  0036BE  8AAC               	bsf	4012,5,c	;volatile
 11098  0036C0  8EAB               	bsf	4011,7,c	;volatile
 11099  0036C2  9C94               	bcf	3988,6,c	;volatile
 11100  0036C4  8E94               	bsf	3988,7,c	;volatile
 11101  0036C6  B8AC               	btfsc	4012,4,c	;volatile
 11102  0036C8  BEAC               	btfsc	4012,7,c	;volatile
 11103  0036CA  D002               	goto	l729
 11104  0036CC  8C94               	bsf	3988,6,c	;volatile
 11105  0036CE  D000               	goto	l729
 11106  0036D0                     l729:
 11107  0036D0  0012               	return		;funcret
 11108  0036D2                     __end_of_OpenUSART:
 11109                           	opt stack 0
 11110                           tblptru	equ	0xFF8
 11111                           tblptrh	equ	0xFF7
 11112                           tblptrl	equ	0xFF6
 11113                           tablat	equ	0xFF5
 11114                           prodh	equ	0xFF4
 11115                           prodl	equ	0xFF3
 11116                           intcon	equ	0xFF2
 11117                           intcon2	equ	0xFF1
 11118                           intcon3	equ	0xFF0
 11119                           postinc0	equ	0xFEE
 11120                           wreg	equ	0xFE8
 11121                           postdec1	equ	0xFE5
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           postdec2	equ	0xFDD
 11126                           fsr2h	equ	0xFDA
 11127                           fsr2l	equ	0xFD9
 11128                           status	equ	0xFD8
 11129                           
 11130 ;; *************** function _Init_TRIS *****************
 11131 ;; Defined at:
 11132 ;;		line 447 in file "Lab9test.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;		None
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;		None
 11137 ;; Return value:  Size  Location     Type
 11138 ;;		None               void
 11139 ;; Registers used:
 11140 ;;		wreg, status,2
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11150 ;;Total ram usage:        0 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    2
 11153 ;; This function calls:
 11154 ;;		Nothing
 11155 ;; This function is called by:
 11156 ;;		_main
 11157 ;;		_Do_Init
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text42
 11162  003D86                     __ptext42:
 11163                           	opt stack 0
 11164  003D86                     _Init_TRIS:
 11165                           	opt stack 23
 11166                           
 11167                           ;Lab9test.c: 449: TRISA = 0b00011001;
 11168                           
 11169                           ;incstack = 0
 11170  003D86  0E19               	movlw	25
 11171  003D88  6E92               	movwf	3986,c	;volatile
 11172                           
 11173                           ;Lab9test.c: 450: TRISB = 0b00000111;
 11174  003D8A  0E07               	movlw	7
 11175  003D8C  6E93               	movwf	3987,c	;volatile
 11176                           
 11177                           ;Lab9test.c: 451: TRISC = 0x00;
 11178  003D8E  0E00               	movlw	0
 11179  003D90  6E94               	movwf	3988,c	;volatile
 11180                           
 11181                           ;Lab9test.c: 452: TRISD = 0x00;
 11182  003D92  0E00               	movlw	0
 11183  003D94  6E95               	movwf	3989,c	;volatile
 11184                           
 11185                           ;Lab9test.c: 453: TRISE = 0x00;
 11186  003D96  0E00               	movlw	0
 11187  003D98  6E96               	movwf	3990,c	;volatile
 11188  003D9A  0012               	return		;funcret
 11189  003D9C                     __end_of_Init_TRIS:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           intcon2	equ	0xFF1
 11199                           intcon3	equ	0xFF0
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           postdec1	equ	0xFE5
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function _Init_ADC *****************
 11212 ;; Defined at:
 11213 ;;		line 440 in file "Lab9test.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;		None
 11218 ;; Return value:  Size  Location     Type
 11219 ;;		None               void
 11220 ;; Registers used:
 11221 ;;		wreg, status,2
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;Total ram usage:        0 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    2
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_main
 11238 ;;		_Do_Init
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text43
 11243  003E2C                     __ptext43:
 11244                           	opt stack 0
 11245  003E2C                     _Init_ADC:
 11246                           	opt stack 23
 11247                           
 11248                           ;Lab9test.c: 442: ADCON0 = 0b00000001;
 11249                           
 11250                           ;incstack = 0
 11251  003E2C  0E01               	movlw	1
 11252  003E2E  6EC2               	movwf	4034,c	;volatile
 11253                           
 11254                           ;Lab9test.c: 443: ADCON1 = 0b00001110;
 11255  003E30  0E0E               	movlw	14
 11256  003E32  6EC1               	movwf	4033,c	;volatile
 11257                           
 11258                           ;Lab9test.c: 444: ADCON2 = 0xA9;
 11259  003E34  0EA9               	movlw	169
 11260  003E36  6EC0               	movwf	4032,c	;volatile
 11261  003E38  0012               	return		;funcret
 11262  003E3A                     __end_of_Init_ADC:
 11263                           	opt stack 0
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           intcon3	equ	0xFF0
 11273                           postinc0	equ	0xFEE
 11274                           wreg	equ	0xFE8
 11275                           postdec1	equ	0xFE5
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function _strcpy *****************
 11285 ;; Defined at:
 11286 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  to              2   14[COMRAM] PTR unsigned char 
 11289 ;;		 -> NULL(0), buffer(31), 
 11290 ;;  from            2   16[COMRAM] PTR const unsigned char 
 11291 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
 11292 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
 11293 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
 11294 ;;		 -> STR_2(6), STR_1(20), 
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;  cp              2   18[COMRAM] PTR unsigned char 
 11297 ;;		 -> NULL(0), buffer(31), 
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  2   14[COMRAM] PTR unsigned char 
 11300 ;; Registers used:
 11301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;Total ram usage:        6 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    2
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_Initialize_Screen
 11318 ;;		_WAIT_1_SEC
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           	psect	text44
 11323  003BE0                     __ptext44:
 11324                           	opt stack 0
 11325  003BE0                     _strcpy:
 11326                           	opt stack 25
 11327                           
 11328                           ;incstack = 0
 11329  003BE0  C00F  F013         	movff	strcpy@to,strcpy@cp
 11330  003BE4  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 11331  003BE8  D005               	goto	l6926
 11332  003BEA                     l6924:
 11333  003BEA  4A13               	infsnz	strcpy@cp,f,c
 11334  003BEC  2A14               	incf	strcpy@cp+1,f,c
 11335  003BEE  4A11               	infsnz	strcpy@from,f,c
 11336  003BF0  2A12               	incf	strcpy@from+1,f,c
 11337  003BF2  D000               	goto	l6926
 11338  003BF4                     l6926:
 11339  003BF4  C011  FFF6         	movff	strcpy@from,tblptrl
 11340  003BF8  C012  FFF7         	movff	strcpy@from+1,tblptrh
 11341  003BFC                     	if	0	;tblptru may be non-zero
 11342  003BFC                     	endif
 11343  003BFC                     	if	0	;tblptru may be non-zero
 11344  003BFC                     	endif
 11345  003BFC  C013  FFD9         	movff	strcpy@cp,fsr2l
 11346  003C00  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 11347  003C04  0008               	tblrd		*
 11348  003C06  CFF5 FFDF          	movff	tablat,indf2
 11349  003C0A  50DF               	movf	indf2,w,c
 11350  003C0C  A4D8               	btfss	status,2,c
 11351  003C0E  D7ED               	goto	l6924
 11352                           
 11353                           ;	Return value of _strcpy is never used
 11354  003C10  0012               	return		;funcret
 11355  003C12                     __end_of_strcpy:
 11356                           	opt stack 0
 11357                           tblptru	equ	0xFF8
 11358                           tblptrh	equ	0xFF7
 11359                           tblptrl	equ	0xFF6
 11360                           tablat	equ	0xFF5
 11361                           prodh	equ	0xFF4
 11362                           prodl	equ	0xFF3
 11363                           intcon	equ	0xFF2
 11364                           intcon2	equ	0xFF1
 11365                           intcon3	equ	0xFF0
 11366                           postinc0	equ	0xFEE
 11367                           wreg	equ	0xFE8
 11368                           postdec1	equ	0xFE5
 11369                           fsr1l	equ	0xFE1
 11370                           indf2	equ	0xFDF
 11371                           postinc2	equ	0xFDE
 11372                           postdec2	equ	0xFDD
 11373                           fsr2h	equ	0xFDA
 11374                           fsr2l	equ	0xFD9
 11375                           status	equ	0xFD8
 11376                           
 11377 ;; *************** function _Set_NSLT *****************
 11378 ;; Defined at:
 11379 ;;		line 567 in file "Lab9test.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;  color           1    wreg     unsigned char 
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;  color           1   67[COMRAM] unsigned char 
 11384 ;; Return value:  Size  Location     Type
 11385 ;;		None               void
 11386 ;; Registers used:
 11387 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;Total ram usage:        1 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:    9
 11400 ;; This function calls:
 11401 ;;		_update_LCD_color
 11402 ;; This function is called by:
 11403 ;;		_Day_Mode
 11404 ;;		_Night_Mode
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text45
 11409  003992                     __ptext45:
 11410                           	opt stack 0
 11411  003992                     _Set_NSLT:
 11412                           	opt stack 20
 11413                           
 11414                           ;incstack = 0
 11415                           ;Set_NSLT@color stored from wreg
 11416  003992  6E44               	movwf	Set_NSLT@color,c
 11417                           
 11418                           ;Lab9test.c: 569: direction = 3;
 11419  003994  0E03               	movlw	3
 11420  003996  0100               	movlb	0	; () banked
 11421  003998  6F94               	movwf	_direction& (0+255),b
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;Lab9test.c: 570: update_LCD_color(direction, color);
 11425  00399A  C044  F041         	movff	Set_NSLT@color,update_LCD_color@color
 11426  00399E  0100               	movlb	0	; () banked
 11427  0039A0  5194               	movf	_direction& (0+255),w,b
 11428  0039A2  ECDB  F00A         	call	_update_LCD_color
 11429                           
 11430                           ;Lab9test.c: 571: switch (color)
 11431  0039A6  D00A               	goto	l7270
 11432  0039A8                     l484:
 11433  0039A8  9881               	bcf	3969,4,c	;volatile
 11434  0039AA  D001               	goto	L14
 11435  0039AC                     l486:
 11436  0039AC  8881               	bsf	3969,4,c	;volatile
 11437  0039AE                     L14:
 11438  0039AE  9A81               	bcf	3969,5,c	;volatile
 11439  0039B0  D013               	goto	l489
 11440  0039B2                     l487:
 11441  0039B2  9881               	bcf	3969,4,c	;volatile
 11442  0039B4  D001               	goto	L15
 11443  0039B6                     l488:
 11444  0039B6  8881               	bsf	3969,4,c	;volatile
 11445  0039B8                     L15:
 11446  0039B8  8A81               	bsf	3969,5,c	;volatile
 11447                           
 11448                           ;Lab9test.c: 577: }
 11449  0039BA  D00E               	goto	l489
 11450  0039BC                     l7270:
 11451  0039BC  5044               	movf	Set_NSLT@color,w,c
 11452                           
 11453                           ; Switch size 1, requested type "space"
 11454                           ; Number of cases is 4, Range of values is 0 to 3
 11455                           ; switch strategies available:
 11456                           ; Name         Instructions Cycles
 11457                           ; simple_byte           13     7 (average)
 11458                           ;	Chosen strategy is simple_byte
 11459  0039BE  0A00               	xorlw	0	; case 0
 11460  0039C0  B4D8               	btfsc	status,2,c
 11461  0039C2  D7F2               	goto	l484
 11462  0039C4  0A01               	xorlw	1	; case 1
 11463  0039C6  B4D8               	btfsc	status,2,c
 11464  0039C8  D7F1               	goto	l486
 11465  0039CA  0A03               	xorlw	3	; case 2
 11466  0039CC  B4D8               	btfsc	status,2,c
 11467  0039CE  D7F1               	goto	l487
 11468  0039D0  0A01               	xorlw	1	; case 3
 11469  0039D2  B4D8               	btfsc	status,2,c
 11470  0039D4  D7F0               	goto	l488
 11471  0039D6  D000               	goto	l489
 11472  0039D8                     l489:
 11473  0039D8  0012               	return		;funcret
 11474  0039DA                     __end_of_Set_NSLT:
 11475                           	opt stack 0
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           intcon2	equ	0xFF1
 11484                           intcon3	equ	0xFF0
 11485                           postinc0	equ	0xFEE
 11486                           wreg	equ	0xFE8
 11487                           postdec1	equ	0xFE5
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _Set_NS *****************
 11497 ;; Defined at:
 11498 ;;		line 554 in file "Lab9test.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  color           1    wreg     unsigned char 
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  color           1   67[COMRAM] unsigned char 
 11503 ;; Return value:  Size  Location     Type
 11504 ;;		None               void
 11505 ;; Registers used:
 11506 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;Total ram usage:        1 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    9
 11519 ;; This function calls:
 11520 ;;		_update_LCD_color
 11521 ;; This function is called by:
 11522 ;;		_Day_Mode
 11523 ;;		_Night_Mode
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text46
 11528  0039DA                     __ptext46:
 11529                           	opt stack 0
 11530  0039DA                     _Set_NS:
 11531                           	opt stack 20
 11532                           
 11533                           ;incstack = 0
 11534                           ;Set_NS@color stored from wreg
 11535  0039DA  6E44               	movwf	Set_NS@color,c
 11536                           
 11537                           ;Lab9test.c: 556: direction = 2;
 11538  0039DC  0E02               	movlw	2
 11539  0039DE  0100               	movlb	0	; () banked
 11540  0039E0  6F94               	movwf	_direction& (0+255),b
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;Lab9test.c: 557: update_LCD_color(direction, color);
 11544  0039E2  C044  F041         	movff	Set_NS@color,update_LCD_color@color
 11545  0039E6  0100               	movlb	0	; () banked
 11546  0039E8  5194               	movf	_direction& (0+255),w,b
 11547  0039EA  ECDB  F00A         	call	_update_LCD_color
 11548                           
 11549                           ;Lab9test.c: 558: switch (color)
 11550  0039EE  D00A               	goto	l7294
 11551  0039F0                     l475:
 11552  0039F0  9280               	bcf	3968,1,c	;volatile
 11553  0039F2  D001               	goto	L16
 11554  0039F4                     l477:
 11555  0039F4  8280               	bsf	3968,1,c	;volatile
 11556  0039F6                     L16:
 11557  0039F6  9480               	bcf	3968,2,c	;volatile
 11558  0039F8  D013               	goto	l480
 11559  0039FA                     l478:
 11560  0039FA  9280               	bcf	3968,1,c	;volatile
 11561  0039FC  D001               	goto	L17
 11562  0039FE                     l479:
 11563  0039FE  8280               	bsf	3968,1,c	;volatile
 11564  003A00                     L17:
 11565  003A00  8480               	bsf	3968,2,c	;volatile
 11566                           
 11567                           ;Lab9test.c: 564: }
 11568  003A02  D00E               	goto	l480
 11569  003A04                     l7294:
 11570  003A04  5044               	movf	Set_NS@color,w,c
 11571                           
 11572                           ; Switch size 1, requested type "space"
 11573                           ; Number of cases is 4, Range of values is 0 to 3
 11574                           ; switch strategies available:
 11575                           ; Name         Instructions Cycles
 11576                           ; simple_byte           13     7 (average)
 11577                           ;	Chosen strategy is simple_byte
 11578  003A06  0A00               	xorlw	0	; case 0
 11579  003A08  B4D8               	btfsc	status,2,c
 11580  003A0A  D7F2               	goto	l475
 11581  003A0C  0A01               	xorlw	1	; case 1
 11582  003A0E  B4D8               	btfsc	status,2,c
 11583  003A10  D7F1               	goto	l477
 11584  003A12  0A03               	xorlw	3	; case 2
 11585  003A14  B4D8               	btfsc	status,2,c
 11586  003A16  D7F1               	goto	l478
 11587  003A18  0A01               	xorlw	1	; case 3
 11588  003A1A  B4D8               	btfsc	status,2,c
 11589  003A1C  D7F0               	goto	l479
 11590  003A1E  D000               	goto	l480
 11591  003A20                     l480:
 11592  003A20  0012               	return		;funcret
 11593  003A22                     __end_of_Set_NS:
 11594                           	opt stack 0
 11595                           tblptru	equ	0xFF8
 11596                           tblptrh	equ	0xFF7
 11597                           tblptrl	equ	0xFF6
 11598                           tablat	equ	0xFF5
 11599                           prodh	equ	0xFF4
 11600                           prodl	equ	0xFF3
 11601                           intcon	equ	0xFF2
 11602                           intcon2	equ	0xFF1
 11603                           intcon3	equ	0xFF0
 11604                           postinc0	equ	0xFEE
 11605                           wreg	equ	0xFE8
 11606                           postdec1	equ	0xFE5
 11607                           fsr1l	equ	0xFE1
 11608                           indf2	equ	0xFDF
 11609                           postinc2	equ	0xFDE
 11610                           postdec2	equ	0xFDD
 11611                           fsr2h	equ	0xFDA
 11612                           fsr2l	equ	0xFD9
 11613                           status	equ	0xFD8
 11614                           
 11615 ;; *************** function _Set_EWLT *****************
 11616 ;; Defined at:
 11617 ;;		line 593 in file "Lab9test.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  color           1    wreg     unsigned char 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  color           1   67[COMRAM] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11635 ;;Total ram usage:        1 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    9
 11638 ;; This function calls:
 11639 ;;		_update_LCD_color
 11640 ;; This function is called by:
 11641 ;;		_Day_Mode
 11642 ;;		_Night_Mode
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text47
 11647  003A22                     __ptext47:
 11648                           	opt stack 0
 11649  003A22                     _Set_EWLT:
 11650                           	opt stack 20
 11651                           
 11652                           ;incstack = 0
 11653                           ;Set_EWLT@color stored from wreg
 11654  003A22  6E44               	movwf	Set_EWLT@color,c
 11655                           
 11656                           ;Lab9test.c: 595: direction = 1;
 11657  003A24  0E01               	movlw	1
 11658  003A26  0100               	movlb	0	; () banked
 11659  003A28  6F94               	movwf	_direction& (0+255),b
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;Lab9test.c: 596: update_LCD_color(direction, color);
 11663  003A2A  C044  F041         	movff	Set_EWLT@color,update_LCD_color@color
 11664  003A2E  0100               	movlb	0	; () banked
 11665  003A30  5194               	movf	_direction& (0+255),w,b
 11666  003A32  ECDB  F00A         	call	_update_LCD_color
 11667                           
 11668                           ;Lab9test.c: 597: switch (color)
 11669  003A36  D00A               	goto	l7286
 11670  003A38                     l502:
 11671  003A38  9284               	bcf	3972,1,c	;volatile
 11672  003A3A  D001               	goto	L18
 11673  003A3C                     l504:
 11674  003A3C  8284               	bsf	3972,1,c	;volatile
 11675  003A3E                     L18:
 11676  003A3E  9484               	bcf	3972,2,c	;volatile
 11677  003A40  D013               	goto	l507
 11678  003A42                     l505:
 11679  003A42  9284               	bcf	3972,1,c	;volatile
 11680  003A44  D001               	goto	L19
 11681  003A46                     l506:
 11682  003A46  8284               	bsf	3972,1,c	;volatile
 11683  003A48                     L19:
 11684  003A48  8484               	bsf	3972,2,c	;volatile
 11685                           
 11686                           ;Lab9test.c: 603: }
 11687  003A4A  D00E               	goto	l507
 11688  003A4C                     l7286:
 11689  003A4C  5044               	movf	Set_EWLT@color,w,c
 11690                           
 11691                           ; Switch size 1, requested type "space"
 11692                           ; Number of cases is 4, Range of values is 0 to 3
 11693                           ; switch strategies available:
 11694                           ; Name         Instructions Cycles
 11695                           ; simple_byte           13     7 (average)
 11696                           ;	Chosen strategy is simple_byte
 11697  003A4E  0A00               	xorlw	0	; case 0
 11698  003A50  B4D8               	btfsc	status,2,c
 11699  003A52  D7F2               	goto	l502
 11700  003A54  0A01               	xorlw	1	; case 1
 11701  003A56  B4D8               	btfsc	status,2,c
 11702  003A58  D7F1               	goto	l504
 11703  003A5A  0A03               	xorlw	3	; case 2
 11704  003A5C  B4D8               	btfsc	status,2,c
 11705  003A5E  D7F1               	goto	l505
 11706  003A60  0A01               	xorlw	1	; case 3
 11707  003A62  B4D8               	btfsc	status,2,c
 11708  003A64  D7F0               	goto	l506
 11709  003A66  D000               	goto	l507
 11710  003A68                     l507:
 11711  003A68  0012               	return		;funcret
 11712  003A6A                     __end_of_Set_EWLT:
 11713                           	opt stack 0
 11714                           tblptru	equ	0xFF8
 11715                           tblptrh	equ	0xFF7
 11716                           tblptrl	equ	0xFF6
 11717                           tablat	equ	0xFF5
 11718                           prodh	equ	0xFF4
 11719                           prodl	equ	0xFF3
 11720                           intcon	equ	0xFF2
 11721                           intcon2	equ	0xFF1
 11722                           intcon3	equ	0xFF0
 11723                           postinc0	equ	0xFEE
 11724                           wreg	equ	0xFE8
 11725                           postdec1	equ	0xFE5
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           fsr2h	equ	0xFDA
 11731                           fsr2l	equ	0xFD9
 11732                           status	equ	0xFD8
 11733                           
 11734 ;; *************** function _Set_EW *****************
 11735 ;; Defined at:
 11736 ;;		line 580 in file "Lab9test.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;  color           1    wreg     unsigned char 
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;  color           1   67[COMRAM] unsigned char 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;		None               void
 11743 ;; Registers used:
 11744 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;Total ram usage:        1 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    9
 11757 ;; This function calls:
 11758 ;;		_update_LCD_color
 11759 ;; This function is called by:
 11760 ;;		_Day_Mode
 11761 ;;		_Night_Mode
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text48
 11766  003A6A                     __ptext48:
 11767                           	opt stack 0
 11768  003A6A                     _Set_EW:
 11769                           	opt stack 20
 11770                           
 11771                           ;incstack = 0
 11772                           ;Set_EW@color stored from wreg
 11773  003A6A  6E44               	movwf	Set_EW@color,c
 11774                           
 11775                           ;Lab9test.c: 582: direction = 0;
 11776  003A6C  0E00               	movlw	0
 11777  003A6E  0100               	movlb	0	; () banked
 11778  003A70  6F94               	movwf	_direction& (0+255),b
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;Lab9test.c: 583: update_LCD_color(direction, color);
 11782  003A72  C044  F041         	movff	Set_EW@color,update_LCD_color@color
 11783  003A76  0100               	movlb	0	; () banked
 11784  003A78  5194               	movf	_direction& (0+255),w,b
 11785  003A7A  ECDB  F00A         	call	_update_LCD_color
 11786                           
 11787                           ;Lab9test.c: 584: switch (color)
 11788  003A7E  D00A               	goto	l7278
 11789  003A80                     l493:
 11790  003A80  9A80               	bcf	3968,5,c	;volatile
 11791  003A82  D001               	goto	L20
 11792  003A84                     l495:
 11793  003A84  8A80               	bsf	3968,5,c	;volatile
 11794  003A86                     L20:
 11795  003A86  9C81               	bcf	3969,6,c	;volatile
 11796  003A88  D013               	goto	l498
 11797  003A8A                     l496:
 11798  003A8A  9A80               	bcf	3968,5,c	;volatile
 11799  003A8C  D001               	goto	L21
 11800  003A8E                     l497:
 11801  003A8E  8A80               	bsf	3968,5,c	;volatile
 11802  003A90                     L21:
 11803  003A90  8C81               	bsf	3969,6,c	;volatile
 11804                           
 11805                           ;Lab9test.c: 590: }
 11806  003A92  D00E               	goto	l498
 11807  003A94                     l7278:
 11808  003A94  5044               	movf	Set_EW@color,w,c
 11809                           
 11810                           ; Switch size 1, requested type "space"
 11811                           ; Number of cases is 4, Range of values is 0 to 3
 11812                           ; switch strategies available:
 11813                           ; Name         Instructions Cycles
 11814                           ; simple_byte           13     7 (average)
 11815                           ;	Chosen strategy is simple_byte
 11816  003A96  0A00               	xorlw	0	; case 0
 11817  003A98  B4D8               	btfsc	status,2,c
 11818  003A9A  D7F2               	goto	l493
 11819  003A9C  0A01               	xorlw	1	; case 1
 11820  003A9E  B4D8               	btfsc	status,2,c
 11821  003AA0  D7F1               	goto	l495
 11822  003AA2  0A03               	xorlw	3	; case 2
 11823  003AA4  B4D8               	btfsc	status,2,c
 11824  003AA6  D7F1               	goto	l496
 11825  003AA8  0A01               	xorlw	1	; case 3
 11826  003AAA  B4D8               	btfsc	status,2,c
 11827  003AAC  D7F0               	goto	l497
 11828  003AAE  D000               	goto	l498
 11829  003AB0                     l498:
 11830  003AB0  0012               	return		;funcret
 11831  003AB2                     __end_of_Set_EW:
 11832                           	opt stack 0
 11833                           tblptru	equ	0xFF8
 11834                           tblptrh	equ	0xFF7
 11835                           tblptrl	equ	0xFF6
 11836                           tablat	equ	0xFF5
 11837                           prodh	equ	0xFF4
 11838                           prodl	equ	0xFF3
 11839                           intcon	equ	0xFF2
 11840                           intcon2	equ	0xFF1
 11841                           intcon3	equ	0xFF0
 11842                           postinc0	equ	0xFEE
 11843                           wreg	equ	0xFE8
 11844                           postdec1	equ	0xFE5
 11845                           fsr1l	equ	0xFE1
 11846                           indf2	equ	0xFDF
 11847                           postinc2	equ	0xFDE
 11848                           postdec2	equ	0xFDD
 11849                           fsr2h	equ	0xFDA
 11850                           fsr2l	equ	0xFD9
 11851                           status	equ	0xFD8
 11852                           
 11853 ;; *************** function _update_LCD_color *****************
 11854 ;; Defined at:
 11855 ;;		line 606 in file "Lab9test.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  direction       1    wreg     unsigned char 
 11858 ;;  color           1   64[COMRAM] unsigned char 
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  direction       1   65[COMRAM] unsigned char 
 11861 ;;  Circle_Y        1   66[COMRAM] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;		None               void
 11864 ;; Registers used:
 11865 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11871 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;Total ram usage:        3 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    8
 11878 ;; This function calls:
 11879 ;;		_drawCircle
 11880 ;;		_fillCircle
 11881 ;; This function is called by:
 11882 ;;		_Set_NS
 11883 ;;		_Set_NSLT
 11884 ;;		_Set_EW
 11885 ;;		_Set_EWLT
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text49
 11890  0015B6                     __ptext49:
 11891                           	opt stack 0
 11892  0015B6                     _update_LCD_color:
 11893                           	opt stack 20
 11894                           
 11895                           ;incstack = 0
 11896                           ;update_LCD_color@direction stored from wreg
 11897  0015B6  6E42               	movwf	update_LCD_color@direction,c
 11898                           
 11899                           ;Lab9test.c: 608: char Circle_Y;
 11900                           ;Lab9test.c: 609: Circle_Y = 20 + 15 + direction * 30;
 11901  0015B8  5042               	movf	update_LCD_color@direction,w,c
 11902  0015BA  0D1E               	mullw	30
 11903  0015BC  50F3               	movf	prodl,w,c
 11904  0015BE  0F23               	addlw	35
 11905  0015C0  6E43               	movwf	update_LCD_color@Circle_Y,c
 11906                           
 11907                           ;Lab9test.c: 611: if (color == 0)
 11908  0015C2  5041               	movf	update_LCD_color@color,w,c
 11909  0015C4  A4D8               	btfss	status,2,c
 11910  0015C6  D067               	goto	l7226
 11911                           
 11912                           ;Lab9test.c: 612: {
 11913                           ;Lab9test.c: 613: fillCircle(40, Circle_Y, 7, 0x0000);
 11914  0015C8  0E00               	movlw	0
 11915  0015CA  6E3A               	movwf	fillCircle@x0+1,c
 11916  0015CC  0E28               	movlw	40
 11917  0015CE  6E39               	movwf	fillCircle@x0,c
 11918  0015D0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11919  0015D4  6A3C               	clrf	fillCircle@y0+1,c
 11920  0015D6  0E00               	movlw	0
 11921  0015D8  6E3E               	movwf	fillCircle@r+1,c
 11922  0015DA  0E07               	movlw	7
 11923  0015DC  6E3D               	movwf	fillCircle@r,c
 11924  0015DE  0E00               	movlw	0
 11925  0015E0  6E40               	movwf	fillCircle@color+1,c
 11926  0015E2  0E00               	movlw	0
 11927  0015E4  6E3F               	movwf	fillCircle@color,c
 11928  0015E6  EC54  F01C         	call	_fillCircle	;wreg free
 11929                           
 11930                           ;Lab9test.c: 614: fillCircle(60, Circle_Y, 7, 0x0000);
 11931  0015EA  0E00               	movlw	0
 11932  0015EC  6E3A               	movwf	fillCircle@x0+1,c
 11933  0015EE  0E3C               	movlw	60
 11934  0015F0  6E39               	movwf	fillCircle@x0,c
 11935  0015F2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11936  0015F6  6A3C               	clrf	fillCircle@y0+1,c
 11937  0015F8  0E00               	movlw	0
 11938  0015FA  6E3E               	movwf	fillCircle@r+1,c
 11939  0015FC  0E07               	movlw	7
 11940  0015FE  6E3D               	movwf	fillCircle@r,c
 11941  001600  0E00               	movlw	0
 11942  001602  6E40               	movwf	fillCircle@color+1,c
 11943  001604  0E00               	movlw	0
 11944  001606  6E3F               	movwf	fillCircle@color,c
 11945  001608  EC54  F01C         	call	_fillCircle	;wreg free
 11946                           
 11947                           ;Lab9test.c: 615: fillCircle(80, Circle_Y, 7, 0x0000);
 11948  00160C  0E00               	movlw	0
 11949  00160E  6E3A               	movwf	fillCircle@x0+1,c
 11950  001610  0E50               	movlw	80
 11951  001612  6E39               	movwf	fillCircle@x0,c
 11952  001614  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11953  001618  6A3C               	clrf	fillCircle@y0+1,c
 11954  00161A  0E00               	movlw	0
 11955  00161C  6E3E               	movwf	fillCircle@r+1,c
 11956  00161E  0E07               	movlw	7
 11957  001620  6E3D               	movwf	fillCircle@r,c
 11958  001622  0E00               	movlw	0
 11959  001624  6E40               	movwf	fillCircle@color+1,c
 11960  001626  0E00               	movlw	0
 11961  001628  6E3F               	movwf	fillCircle@color,c
 11962  00162A  EC54  F01C         	call	_fillCircle	;wreg free
 11963                           
 11964                           ;Lab9test.c: 616: drawCircle(40, Circle_Y, 7, 0xF800);
 11965  00162E  0E00               	movlw	0
 11966  001630  6E1B               	movwf	drawCircle@x0+1,c
 11967  001632  0E28               	movlw	40
 11968  001634  6E1A               	movwf	drawCircle@x0,c
 11969  001636  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11970  00163A  6A1D               	clrf	drawCircle@y0+1,c
 11971  00163C  0E00               	movlw	0
 11972  00163E  6E1F               	movwf	drawCircle@r+1,c
 11973  001640  0E07               	movlw	7
 11974  001642  6E1E               	movwf	drawCircle@r,c
 11975  001644  0EF8               	movlw	248
 11976  001646  6E21               	movwf	drawCircle@color+1,c
 11977  001648  0E00               	movlw	0
 11978  00164A  6E20               	movwf	drawCircle@color,c
 11979  00164C  ECB2  F00F         	call	_drawCircle	;wreg free
 11980                           
 11981                           ;Lab9test.c: 617: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11982  001650  0E00               	movlw	0
 11983  001652  6E1B               	movwf	drawCircle@x0+1,c
 11984  001654  0E3C               	movlw	60
 11985  001656  6E1A               	movwf	drawCircle@x0,c
 11986  001658  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11987  00165C  6A1D               	clrf	drawCircle@y0+1,c
 11988  00165E  0E00               	movlw	0
 11989  001660  6E1F               	movwf	drawCircle@r+1,c
 11990  001662  0E07               	movlw	7
 11991  001664  6E1E               	movwf	drawCircle@r,c
 11992  001666  0EFF               	movlw	255
 11993  001668  6E21               	movwf	drawCircle@color+1,c
 11994  00166A  0EE0               	movlw	224
 11995  00166C  6E20               	movwf	drawCircle@color,c
 11996  00166E  ECB2  F00F         	call	_drawCircle	;wreg free
 11997                           
 11998                           ;Lab9test.c: 618: drawCircle(80, Circle_Y, 7, 0x07E0);
 11999  001672  0E00               	movlw	0
 12000  001674  6E1B               	movwf	drawCircle@x0+1,c
 12001  001676  0E50               	movlw	80
 12002  001678  6E1A               	movwf	drawCircle@x0,c
 12003  00167A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12004  00167E  6A1D               	clrf	drawCircle@y0+1,c
 12005  001680  0E00               	movlw	0
 12006  001682  6E1F               	movwf	drawCircle@r+1,c
 12007  001684  0E07               	movlw	7
 12008  001686  6E1E               	movwf	drawCircle@r,c
 12009  001688  0E07               	movlw	7
 12010  00168A  6E21               	movwf	drawCircle@color+1,c
 12011  00168C  0EE0               	movlw	224
 12012  00168E  6E20               	movwf	drawCircle@color,c
 12013  001690  ECB2  F00F         	call	_drawCircle	;wreg free
 12014  001694  D000               	goto	l7226
 12015  001696                     l7226:
 12016                           
 12017                           ;Lab9test.c: 619: }
 12018                           ;Lab9test.c: 621: if (color == 1)
 12019  001696  0441               	decf	update_LCD_color@color,w,c
 12020  001698  A4D8               	btfss	status,2,c
 12021  00169A  D067               	goto	l7230
 12022                           
 12023                           ;Lab9test.c: 622: {
 12024                           ;Lab9test.c: 623: fillCircle(40, Circle_Y, 7, 0xF800);
 12025  00169C  0E00               	movlw	0
 12026  00169E  6E3A               	movwf	fillCircle@x0+1,c
 12027  0016A0  0E28               	movlw	40
 12028  0016A2  6E39               	movwf	fillCircle@x0,c
 12029  0016A4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12030  0016A8  6A3C               	clrf	fillCircle@y0+1,c
 12031  0016AA  0E00               	movlw	0
 12032  0016AC  6E3E               	movwf	fillCircle@r+1,c
 12033  0016AE  0E07               	movlw	7
 12034  0016B0  6E3D               	movwf	fillCircle@r,c
 12035  0016B2  0EF8               	movlw	248
 12036  0016B4  6E40               	movwf	fillCircle@color+1,c
 12037  0016B6  0E00               	movlw	0
 12038  0016B8  6E3F               	movwf	fillCircle@color,c
 12039  0016BA  EC54  F01C         	call	_fillCircle	;wreg free
 12040                           
 12041                           ;Lab9test.c: 624: fillCircle(60, Circle_Y, 7, 0x0000);
 12042  0016BE  0E00               	movlw	0
 12043  0016C0  6E3A               	movwf	fillCircle@x0+1,c
 12044  0016C2  0E3C               	movlw	60
 12045  0016C4  6E39               	movwf	fillCircle@x0,c
 12046  0016C6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12047  0016CA  6A3C               	clrf	fillCircle@y0+1,c
 12048  0016CC  0E00               	movlw	0
 12049  0016CE  6E3E               	movwf	fillCircle@r+1,c
 12050  0016D0  0E07               	movlw	7
 12051  0016D2  6E3D               	movwf	fillCircle@r,c
 12052  0016D4  0E00               	movlw	0
 12053  0016D6  6E40               	movwf	fillCircle@color+1,c
 12054  0016D8  0E00               	movlw	0
 12055  0016DA  6E3F               	movwf	fillCircle@color,c
 12056  0016DC  EC54  F01C         	call	_fillCircle	;wreg free
 12057                           
 12058                           ;Lab9test.c: 625: fillCircle(80, Circle_Y, 7, 0x0000);
 12059  0016E0  0E00               	movlw	0
 12060  0016E2  6E3A               	movwf	fillCircle@x0+1,c
 12061  0016E4  0E50               	movlw	80
 12062  0016E6  6E39               	movwf	fillCircle@x0,c
 12063  0016E8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12064  0016EC  6A3C               	clrf	fillCircle@y0+1,c
 12065  0016EE  0E00               	movlw	0
 12066  0016F0  6E3E               	movwf	fillCircle@r+1,c
 12067  0016F2  0E07               	movlw	7
 12068  0016F4  6E3D               	movwf	fillCircle@r,c
 12069  0016F6  0E00               	movlw	0
 12070  0016F8  6E40               	movwf	fillCircle@color+1,c
 12071  0016FA  0E00               	movlw	0
 12072  0016FC  6E3F               	movwf	fillCircle@color,c
 12073  0016FE  EC54  F01C         	call	_fillCircle	;wreg free
 12074                           
 12075                           ;Lab9test.c: 626: drawCircle(40, Circle_Y, 7, 0xF800);
 12076  001702  0E00               	movlw	0
 12077  001704  6E1B               	movwf	drawCircle@x0+1,c
 12078  001706  0E28               	movlw	40
 12079  001708  6E1A               	movwf	drawCircle@x0,c
 12080  00170A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12081  00170E  6A1D               	clrf	drawCircle@y0+1,c
 12082  001710  0E00               	movlw	0
 12083  001712  6E1F               	movwf	drawCircle@r+1,c
 12084  001714  0E07               	movlw	7
 12085  001716  6E1E               	movwf	drawCircle@r,c
 12086  001718  0EF8               	movlw	248
 12087  00171A  6E21               	movwf	drawCircle@color+1,c
 12088  00171C  0E00               	movlw	0
 12089  00171E  6E20               	movwf	drawCircle@color,c
 12090  001720  ECB2  F00F         	call	_drawCircle	;wreg free
 12091                           
 12092                           ;Lab9test.c: 627: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12093  001724  0E00               	movlw	0
 12094  001726  6E1B               	movwf	drawCircle@x0+1,c
 12095  001728  0E3C               	movlw	60
 12096  00172A  6E1A               	movwf	drawCircle@x0,c
 12097  00172C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12098  001730  6A1D               	clrf	drawCircle@y0+1,c
 12099  001732  0E00               	movlw	0
 12100  001734  6E1F               	movwf	drawCircle@r+1,c
 12101  001736  0E07               	movlw	7
 12102  001738  6E1E               	movwf	drawCircle@r,c
 12103  00173A  0EFF               	movlw	255
 12104  00173C  6E21               	movwf	drawCircle@color+1,c
 12105  00173E  0EE0               	movlw	224
 12106  001740  6E20               	movwf	drawCircle@color,c
 12107  001742  ECB2  F00F         	call	_drawCircle	;wreg free
 12108                           
 12109                           ;Lab9test.c: 628: drawCircle(80, Circle_Y, 7, 0x07E0);
 12110  001746  0E00               	movlw	0
 12111  001748  6E1B               	movwf	drawCircle@x0+1,c
 12112  00174A  0E50               	movlw	80
 12113  00174C  6E1A               	movwf	drawCircle@x0,c
 12114  00174E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12115  001752  6A1D               	clrf	drawCircle@y0+1,c
 12116  001754  0E00               	movlw	0
 12117  001756  6E1F               	movwf	drawCircle@r+1,c
 12118  001758  0E07               	movlw	7
 12119  00175A  6E1E               	movwf	drawCircle@r,c
 12120  00175C  0E07               	movlw	7
 12121  00175E  6E21               	movwf	drawCircle@color+1,c
 12122  001760  0EE0               	movlw	224
 12123  001762  6E20               	movwf	drawCircle@color,c
 12124  001764  ECB2  F00F         	call	_drawCircle	;wreg free
 12125  001768  D000               	goto	l7230
 12126  00176A                     l7230:
 12127                           
 12128                           ;Lab9test.c: 629: }
 12129                           ;Lab9test.c: 631: if (color == 2)
 12130  00176A  0E02               	movlw	2
 12131  00176C  1841               	xorwf	update_LCD_color@color,w,c
 12132  00176E  A4D8               	btfss	status,2,c
 12133  001770  D067               	goto	l7234
 12134                           
 12135                           ;Lab9test.c: 632: {
 12136                           ;Lab9test.c: 633: fillCircle(40, Circle_Y, 7, 0x0000);
 12137  001772  0E00               	movlw	0
 12138  001774  6E3A               	movwf	fillCircle@x0+1,c
 12139  001776  0E28               	movlw	40
 12140  001778  6E39               	movwf	fillCircle@x0,c
 12141  00177A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12142  00177E  6A3C               	clrf	fillCircle@y0+1,c
 12143  001780  0E00               	movlw	0
 12144  001782  6E3E               	movwf	fillCircle@r+1,c
 12145  001784  0E07               	movlw	7
 12146  001786  6E3D               	movwf	fillCircle@r,c
 12147  001788  0E00               	movlw	0
 12148  00178A  6E40               	movwf	fillCircle@color+1,c
 12149  00178C  0E00               	movlw	0
 12150  00178E  6E3F               	movwf	fillCircle@color,c
 12151  001790  EC54  F01C         	call	_fillCircle	;wreg free
 12152                           
 12153                           ;Lab9test.c: 634: fillCircle(60, Circle_Y, 7, 0x0000);
 12154  001794  0E00               	movlw	0
 12155  001796  6E3A               	movwf	fillCircle@x0+1,c
 12156  001798  0E3C               	movlw	60
 12157  00179A  6E39               	movwf	fillCircle@x0,c
 12158  00179C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12159  0017A0  6A3C               	clrf	fillCircle@y0+1,c
 12160  0017A2  0E00               	movlw	0
 12161  0017A4  6E3E               	movwf	fillCircle@r+1,c
 12162  0017A6  0E07               	movlw	7
 12163  0017A8  6E3D               	movwf	fillCircle@r,c
 12164  0017AA  0E00               	movlw	0
 12165  0017AC  6E40               	movwf	fillCircle@color+1,c
 12166  0017AE  0E00               	movlw	0
 12167  0017B0  6E3F               	movwf	fillCircle@color,c
 12168  0017B2  EC54  F01C         	call	_fillCircle	;wreg free
 12169                           
 12170                           ;Lab9test.c: 635: fillCircle(80, Circle_Y, 7, 0x07E0);
 12171  0017B6  0E00               	movlw	0
 12172  0017B8  6E3A               	movwf	fillCircle@x0+1,c
 12173  0017BA  0E50               	movlw	80
 12174  0017BC  6E39               	movwf	fillCircle@x0,c
 12175  0017BE  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12176  0017C2  6A3C               	clrf	fillCircle@y0+1,c
 12177  0017C4  0E00               	movlw	0
 12178  0017C6  6E3E               	movwf	fillCircle@r+1,c
 12179  0017C8  0E07               	movlw	7
 12180  0017CA  6E3D               	movwf	fillCircle@r,c
 12181  0017CC  0E07               	movlw	7
 12182  0017CE  6E40               	movwf	fillCircle@color+1,c
 12183  0017D0  0EE0               	movlw	224
 12184  0017D2  6E3F               	movwf	fillCircle@color,c
 12185  0017D4  EC54  F01C         	call	_fillCircle	;wreg free
 12186                           
 12187                           ;Lab9test.c: 636: drawCircle(40, Circle_Y, 7, 0xF800);
 12188  0017D8  0E00               	movlw	0
 12189  0017DA  6E1B               	movwf	drawCircle@x0+1,c
 12190  0017DC  0E28               	movlw	40
 12191  0017DE  6E1A               	movwf	drawCircle@x0,c
 12192  0017E0  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12193  0017E4  6A1D               	clrf	drawCircle@y0+1,c
 12194  0017E6  0E00               	movlw	0
 12195  0017E8  6E1F               	movwf	drawCircle@r+1,c
 12196  0017EA  0E07               	movlw	7
 12197  0017EC  6E1E               	movwf	drawCircle@r,c
 12198  0017EE  0EF8               	movlw	248
 12199  0017F0  6E21               	movwf	drawCircle@color+1,c
 12200  0017F2  0E00               	movlw	0
 12201  0017F4  6E20               	movwf	drawCircle@color,c
 12202  0017F6  ECB2  F00F         	call	_drawCircle	;wreg free
 12203                           
 12204                           ;Lab9test.c: 637: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12205  0017FA  0E00               	movlw	0
 12206  0017FC  6E1B               	movwf	drawCircle@x0+1,c
 12207  0017FE  0E3C               	movlw	60
 12208  001800  6E1A               	movwf	drawCircle@x0,c
 12209  001802  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12210  001806  6A1D               	clrf	drawCircle@y0+1,c
 12211  001808  0E00               	movlw	0
 12212  00180A  6E1F               	movwf	drawCircle@r+1,c
 12213  00180C  0E07               	movlw	7
 12214  00180E  6E1E               	movwf	drawCircle@r,c
 12215  001810  0EFF               	movlw	255
 12216  001812  6E21               	movwf	drawCircle@color+1,c
 12217  001814  0EE0               	movlw	224
 12218  001816  6E20               	movwf	drawCircle@color,c
 12219  001818  ECB2  F00F         	call	_drawCircle	;wreg free
 12220                           
 12221                           ;Lab9test.c: 638: drawCircle(80, Circle_Y, 7, 0x07E0);
 12222  00181C  0E00               	movlw	0
 12223  00181E  6E1B               	movwf	drawCircle@x0+1,c
 12224  001820  0E50               	movlw	80
 12225  001822  6E1A               	movwf	drawCircle@x0,c
 12226  001824  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12227  001828  6A1D               	clrf	drawCircle@y0+1,c
 12228  00182A  0E00               	movlw	0
 12229  00182C  6E1F               	movwf	drawCircle@r+1,c
 12230  00182E  0E07               	movlw	7
 12231  001830  6E1E               	movwf	drawCircle@r,c
 12232  001832  0E07               	movlw	7
 12233  001834  6E21               	movwf	drawCircle@color+1,c
 12234  001836  0EE0               	movlw	224
 12235  001838  6E20               	movwf	drawCircle@color,c
 12236  00183A  ECB2  F00F         	call	_drawCircle	;wreg free
 12237  00183E  D000               	goto	l7234
 12238  001840                     l7234:
 12239                           
 12240                           ;Lab9test.c: 639: }
 12241                           ;Lab9test.c: 641: if (color == 3)
 12242  001840  0E03               	movlw	3
 12243  001842  1841               	xorwf	update_LCD_color@color,w,c
 12244  001844  A4D8               	btfss	status,2,c
 12245  001846  D067               	goto	l514
 12246                           
 12247                           ;Lab9test.c: 642: {
 12248                           ;Lab9test.c: 643: fillCircle(40, Circle_Y, 7, 0x0000);
 12249  001848  0E00               	movlw	0
 12250  00184A  6E3A               	movwf	fillCircle@x0+1,c
 12251  00184C  0E28               	movlw	40
 12252  00184E  6E39               	movwf	fillCircle@x0,c
 12253  001850  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12254  001854  6A3C               	clrf	fillCircle@y0+1,c
 12255  001856  0E00               	movlw	0
 12256  001858  6E3E               	movwf	fillCircle@r+1,c
 12257  00185A  0E07               	movlw	7
 12258  00185C  6E3D               	movwf	fillCircle@r,c
 12259  00185E  0E00               	movlw	0
 12260  001860  6E40               	movwf	fillCircle@color+1,c
 12261  001862  0E00               	movlw	0
 12262  001864  6E3F               	movwf	fillCircle@color,c
 12263  001866  EC54  F01C         	call	_fillCircle	;wreg free
 12264                           
 12265                           ;Lab9test.c: 644: fillCircle(60, Circle_Y, 7, 0xFFE0);
 12266  00186A  0E00               	movlw	0
 12267  00186C  6E3A               	movwf	fillCircle@x0+1,c
 12268  00186E  0E3C               	movlw	60
 12269  001870  6E39               	movwf	fillCircle@x0,c
 12270  001872  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12271  001876  6A3C               	clrf	fillCircle@y0+1,c
 12272  001878  0E00               	movlw	0
 12273  00187A  6E3E               	movwf	fillCircle@r+1,c
 12274  00187C  0E07               	movlw	7
 12275  00187E  6E3D               	movwf	fillCircle@r,c
 12276  001880  0EFF               	movlw	255
 12277  001882  6E40               	movwf	fillCircle@color+1,c
 12278  001884  0EE0               	movlw	224
 12279  001886  6E3F               	movwf	fillCircle@color,c
 12280  001888  EC54  F01C         	call	_fillCircle	;wreg free
 12281                           
 12282                           ;Lab9test.c: 645: fillCircle(80, Circle_Y, 7, 0x0000);
 12283  00188C  0E00               	movlw	0
 12284  00188E  6E3A               	movwf	fillCircle@x0+1,c
 12285  001890  0E50               	movlw	80
 12286  001892  6E39               	movwf	fillCircle@x0,c
 12287  001894  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12288  001898  6A3C               	clrf	fillCircle@y0+1,c
 12289  00189A  0E00               	movlw	0
 12290  00189C  6E3E               	movwf	fillCircle@r+1,c
 12291  00189E  0E07               	movlw	7
 12292  0018A0  6E3D               	movwf	fillCircle@r,c
 12293  0018A2  0E00               	movlw	0
 12294  0018A4  6E40               	movwf	fillCircle@color+1,c
 12295  0018A6  0E00               	movlw	0
 12296  0018A8  6E3F               	movwf	fillCircle@color,c
 12297  0018AA  EC54  F01C         	call	_fillCircle	;wreg free
 12298                           
 12299                           ;Lab9test.c: 646: drawCircle(40, Circle_Y, 7, 0xF800);
 12300  0018AE  0E00               	movlw	0
 12301  0018B0  6E1B               	movwf	drawCircle@x0+1,c
 12302  0018B2  0E28               	movlw	40
 12303  0018B4  6E1A               	movwf	drawCircle@x0,c
 12304  0018B6  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12305  0018BA  6A1D               	clrf	drawCircle@y0+1,c
 12306  0018BC  0E00               	movlw	0
 12307  0018BE  6E1F               	movwf	drawCircle@r+1,c
 12308  0018C0  0E07               	movlw	7
 12309  0018C2  6E1E               	movwf	drawCircle@r,c
 12310  0018C4  0EF8               	movlw	248
 12311  0018C6  6E21               	movwf	drawCircle@color+1,c
 12312  0018C8  0E00               	movlw	0
 12313  0018CA  6E20               	movwf	drawCircle@color,c
 12314  0018CC  ECB2  F00F         	call	_drawCircle	;wreg free
 12315                           
 12316                           ;Lab9test.c: 647: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12317  0018D0  0E00               	movlw	0
 12318  0018D2  6E1B               	movwf	drawCircle@x0+1,c
 12319  0018D4  0E3C               	movlw	60
 12320  0018D6  6E1A               	movwf	drawCircle@x0,c
 12321  0018D8  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12322  0018DC  6A1D               	clrf	drawCircle@y0+1,c
 12323  0018DE  0E00               	movlw	0
 12324  0018E0  6E1F               	movwf	drawCircle@r+1,c
 12325  0018E2  0E07               	movlw	7
 12326  0018E4  6E1E               	movwf	drawCircle@r,c
 12327  0018E6  0EFF               	movlw	255
 12328  0018E8  6E21               	movwf	drawCircle@color+1,c
 12329  0018EA  0EE0               	movlw	224
 12330  0018EC  6E20               	movwf	drawCircle@color,c
 12331  0018EE  ECB2  F00F         	call	_drawCircle	;wreg free
 12332                           
 12333                           ;Lab9test.c: 648: drawCircle(80, Circle_Y, 7, 0x07E0);
 12334  0018F2  0E00               	movlw	0
 12335  0018F4  6E1B               	movwf	drawCircle@x0+1,c
 12336  0018F6  0E50               	movlw	80
 12337  0018F8  6E1A               	movwf	drawCircle@x0,c
 12338  0018FA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12339  0018FE  6A1D               	clrf	drawCircle@y0+1,c
 12340  001900  0E00               	movlw	0
 12341  001902  6E1F               	movwf	drawCircle@r+1,c
 12342  001904  0E07               	movlw	7
 12343  001906  6E1E               	movwf	drawCircle@r,c
 12344  001908  0E07               	movlw	7
 12345  00190A  6E21               	movwf	drawCircle@color+1,c
 12346  00190C  0EE0               	movlw	224
 12347  00190E  6E20               	movwf	drawCircle@color,c
 12348  001910  ECB2  F00F         	call	_drawCircle	;wreg free
 12349  001914  D000               	goto	l514
 12350  001916                     l514:
 12351  001916  0012               	return		;funcret
 12352  001918                     __end_of_update_LCD_color:
 12353                           	opt stack 0
 12354                           tblptru	equ	0xFF8
 12355                           tblptrh	equ	0xFF7
 12356                           tblptrl	equ	0xFF6
 12357                           tablat	equ	0xFF5
 12358                           prodh	equ	0xFF4
 12359                           prodl	equ	0xFF3
 12360                           intcon	equ	0xFF2
 12361                           intcon2	equ	0xFF1
 12362                           intcon3	equ	0xFF0
 12363                           postinc0	equ	0xFEE
 12364                           wreg	equ	0xFE8
 12365                           postdec1	equ	0xFE5
 12366                           fsr1l	equ	0xFE1
 12367                           indf2	equ	0xFDF
 12368                           postinc2	equ	0xFDE
 12369                           postdec2	equ	0xFDD
 12370                           fsr2h	equ	0xFDA
 12371                           fsr2l	equ	0xFD9
 12372                           status	equ	0xFD8
 12373                           
 12374 ;; *************** function _fillCircle *****************
 12375 ;; Defined at:
 12376 ;;		line 647 in file "ST7735_TFT.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  x0              2   56[COMRAM] int 
 12379 ;;  y0              2   58[COMRAM] int 
 12380 ;;  r               2   60[COMRAM] int 
 12381 ;;  color           2   62[COMRAM] unsigned int 
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;		None
 12384 ;; Return value:  Size  Location     Type
 12385 ;;		None               void
 12386 ;; Registers used:
 12387 ;;		wreg, status,2, status,0, cstack
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12393 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;Total ram usage:        8 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; Hardware stack levels required when called:    7
 12400 ;; This function calls:
 12401 ;;		_drawFastVLine
 12402 ;;		_fillCircleHelper
 12403 ;; This function is called by:
 12404 ;;		_Initialize_Screen
 12405 ;;		_update_LCD_color
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           	psect	text50
 12410  0038A8                     __ptext50:
 12411                           	opt stack 0
 12412  0038A8                     _fillCircle:
 12413                           	opt stack 20
 12414                           
 12415                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 12416                           
 12417                           ;incstack = 0
 12418  0038A8  503D               	movf	fillCircle@r,w,c
 12419  0038AA  0800               	sublw	0
 12420  0038AC  243B               	addwf	fillCircle@y0,w,c
 12421  0038AE  6E16               	movwf	drawFastVLine@y,c
 12422  0038B0  80D8               	bsf	status,0,c
 12423  0038B2  343D               	rlcf	fillCircle@r,w,c
 12424  0038B4  6E17               	movwf	drawFastVLine@h,c
 12425  0038B6  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
 12426  0038BA  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
 12427  0038BE  5039               	movf	fillCircle@x0,w,c
 12428  0038C0  ECF0  F019         	call	_drawFastVLine
 12429                           
 12430                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 12431  0038C4  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
 12432  0038C8  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 12433  0038CC  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
 12434  0038D0  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 12435  0038D4  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
 12436  0038D8  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
 12437  0038DC  0E00               	movlw	0
 12438  0038DE  6E28               	movwf	fillCircleHelper@cornername+1,c
 12439  0038E0  0E03               	movlw	3
 12440  0038E2  6E27               	movwf	fillCircleHelper@cornername,c
 12441  0038E4  0E00               	movlw	0
 12442  0038E6  6E2A               	movwf	fillCircleHelper@delta+1,c
 12443  0038E8  0E00               	movlw	0
 12444  0038EA  6E29               	movwf	fillCircleHelper@delta,c
 12445  0038EC  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
 12446  0038F0  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
 12447  0038F4  EC09  F012         	call	_fillCircleHelper	;wreg free
 12448  0038F8  0012               	return		;funcret
 12449  0038FA                     __end_of_fillCircle:
 12450                           	opt stack 0
 12451                           tblptru	equ	0xFF8
 12452                           tblptrh	equ	0xFF7
 12453                           tblptrl	equ	0xFF6
 12454                           tablat	equ	0xFF5
 12455                           prodh	equ	0xFF4
 12456                           prodl	equ	0xFF3
 12457                           intcon	equ	0xFF2
 12458                           intcon2	equ	0xFF1
 12459                           intcon3	equ	0xFF0
 12460                           postinc0	equ	0xFEE
 12461                           wreg	equ	0xFE8
 12462                           postdec1	equ	0xFE5
 12463                           fsr1l	equ	0xFE1
 12464                           indf2	equ	0xFDF
 12465                           postinc2	equ	0xFDE
 12466                           postdec2	equ	0xFDD
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function _fillCircleHelper *****************
 12472 ;; Defined at:
 12473 ;;		line 622 in file "ST7735_TFT.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  x0              2   32[COMRAM] int 
 12476 ;;  y0              2   34[COMRAM] int 
 12477 ;;  r               2   36[COMRAM] int 
 12478 ;;  cornername      2   38[COMRAM] unsigned int 
 12479 ;;  delta           2   40[COMRAM] int 
 12480 ;;  color           2   42[COMRAM] unsigned int 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;  y               2   54[COMRAM] int 
 12483 ;;  x               2   52[COMRAM] int 
 12484 ;;  f               2   50[COMRAM] int 
 12485 ;;  ddF_y           2   48[COMRAM] int 
 12486 ;;  ddF_x           2   46[COMRAM] int 
 12487 ;; Return value:  Size  Location     Type
 12488 ;;		None               void
 12489 ;; Registers used:
 12490 ;;		wreg, status,2, status,0, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12496 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12500 ;;Total ram usage:       24 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    6
 12503 ;; This function calls:
 12504 ;;		_drawFastVLine
 12505 ;; This function is called by:
 12506 ;;		_fillCircle
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           	psect	text51
 12511  002412                     __ptext51:
 12512                           	opt stack 0
 12513  002412                     _fillCircleHelper:
 12514                           	opt stack 20
 12515                           
 12516                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 12517                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12518                           
 12519                           ;incstack = 0
 12520  002412  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12521  002416  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12522  00241A  1E2D               	comf	??_fillCircleHelper,f,c
 12523  00241C  1E2E               	comf	??_fillCircleHelper+1,f,c
 12524  00241E  4A2D               	infsnz	??_fillCircleHelper,f,c
 12525  002420  2A2E               	incf	??_fillCircleHelper+1,f,c
 12526  002422  0E01               	movlw	1
 12527  002424  242D               	addwf	??_fillCircleHelper,w,c
 12528  002426  6E33               	movwf	fillCircleHelper@f,c
 12529  002428  0E00               	movlw	0
 12530  00242A  202E               	addwfc	??_fillCircleHelper+1,w,c
 12531  00242C  6E34               	movwf	fillCircleHelper@f+1,c
 12532  00242E  0E00               	movlw	0
 12533  002430  6E30               	movwf	fillCircleHelper@ddF_x+1,c
 12534  002432  0E01               	movlw	1
 12535  002434  6E2F               	movwf	fillCircleHelper@ddF_x,c
 12536  002436  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12537  00243A  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12538  00243E  90D8               	bcf	status,0,c
 12539  002440  362D               	rlcf	??_fillCircleHelper,f,c
 12540  002442  362E               	rlcf	??_fillCircleHelper+1,f,c
 12541  002444  1E2D               	comf	??_fillCircleHelper,f,c
 12542  002446  1E2E               	comf	??_fillCircleHelper+1,f,c
 12543  002448  4A2D               	infsnz	??_fillCircleHelper,f,c
 12544  00244A  2A2E               	incf	??_fillCircleHelper+1,f,c
 12545  00244C  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 12546  002450  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 12547  002454  0E00               	movlw	0
 12548  002456  6E36               	movwf	fillCircleHelper@x+1,c
 12549  002458  0E00               	movlw	0
 12550  00245A  6E35               	movwf	fillCircleHelper@x,c
 12551  00245C  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
 12552  002460  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 12553                           
 12554                           ;ST7735_TFT.c: 626: while (x<y) {
 12555  002464  D067               	goto	l6500
 12556  002466                     l6480:
 12557                           
 12558                           ;ST7735_TFT.c: 627: if (f >= 0) {
 12559  002466  BE34               	btfsc	fillCircleHelper@f+1,7,c
 12560  002468  D00B               	goto	l291
 12561                           
 12562                           ;ST7735_TFT.c: 628: y--;
 12563  00246A  0637               	decf	fillCircleHelper@y,f,c
 12564  00246C  A0D8               	btfss	status,0,c
 12565  00246E  0638               	decf	fillCircleHelper@y+1,f,c
 12566                           
 12567                           ;ST7735_TFT.c: 629: ddF_y += 2;
 12568  002470  0E02               	movlw	2
 12569  002472  2631               	addwf	fillCircleHelper@ddF_y,f,c
 12570  002474  0E00               	movlw	0
 12571  002476  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
 12572                           
 12573                           ;ST7735_TFT.c: 630: f += ddF_y;
 12574  002478  5031               	movf	fillCircleHelper@ddF_y,w,c
 12575  00247A  2633               	addwf	fillCircleHelper@f,f,c
 12576  00247C  5032               	movf	fillCircleHelper@ddF_y+1,w,c
 12577  00247E  2234               	addwfc	fillCircleHelper@f+1,f,c
 12578  002480                     l291:
 12579                           
 12580                           ;ST7735_TFT.c: 631: }
 12581                           ;ST7735_TFT.c: 632: x++;
 12582  002480  4A35               	infsnz	fillCircleHelper@x,f,c
 12583  002482  2A36               	incf	fillCircleHelper@x+1,f,c
 12584                           
 12585                           ;ST7735_TFT.c: 633: ddF_x += 2;
 12586  002484  0E02               	movlw	2
 12587  002486  262F               	addwf	fillCircleHelper@ddF_x,f,c
 12588  002488  0E00               	movlw	0
 12589  00248A  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
 12590                           
 12591                           ;ST7735_TFT.c: 634: f += ddF_x;
 12592  00248C  502F               	movf	fillCircleHelper@ddF_x,w,c
 12593  00248E  2633               	addwf	fillCircleHelper@f,f,c
 12594  002490  5030               	movf	fillCircleHelper@ddF_x+1,w,c
 12595  002492  2234               	addwfc	fillCircleHelper@f+1,f,c
 12596                           
 12597                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 12598  002494  A027               	btfss	fillCircleHelper@cornername,0,c
 12599  002496  D025               	goto	l6496
 12600                           
 12601                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 12602  002498  5037               	movf	fillCircleHelper@y,w,c
 12603  00249A  0800               	sublw	0
 12604  00249C  2423               	addwf	fillCircleHelper@y0,w,c
 12605  00249E  6E16               	movwf	drawFastVLine@y,c
 12606  0024A0  5037               	movf	fillCircleHelper@y,w,c
 12607  0024A2  2437               	addwf	fillCircleHelper@y,w,c
 12608  0024A4  2429               	addwf	fillCircleHelper@delta,w,c
 12609  0024A6  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12610  0024A8  282D               	incf	??_fillCircleHelper,w,c
 12611  0024AA  6E17               	movwf	drawFastVLine@h,c
 12612  0024AC  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12613  0024B0  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12614  0024B4  5021               	movf	fillCircleHelper@x0,w,c
 12615  0024B6  2435               	addwf	fillCircleHelper@x,w,c
 12616  0024B8  ECF0  F019         	call	_drawFastVLine
 12617                           
 12618                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 12619  0024BC  5035               	movf	fillCircleHelper@x,w,c
 12620  0024BE  0800               	sublw	0
 12621  0024C0  2423               	addwf	fillCircleHelper@y0,w,c
 12622  0024C2  6E16               	movwf	drawFastVLine@y,c
 12623  0024C4  5035               	movf	fillCircleHelper@x,w,c
 12624  0024C6  2435               	addwf	fillCircleHelper@x,w,c
 12625  0024C8  2429               	addwf	fillCircleHelper@delta,w,c
 12626  0024CA  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12627  0024CC  282D               	incf	??_fillCircleHelper,w,c
 12628  0024CE  6E17               	movwf	drawFastVLine@h,c
 12629  0024D0  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12630  0024D4  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12631  0024D8  5021               	movf	fillCircleHelper@x0,w,c
 12632  0024DA  2437               	addwf	fillCircleHelper@y,w,c
 12633  0024DC  ECF0  F019         	call	_drawFastVLine
 12634  0024E0  D000               	goto	l6496
 12635  0024E2                     l6496:
 12636                           
 12637                           ;ST7735_TFT.c: 639: }
 12638                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 12639  0024E2  A227               	btfss	fillCircleHelper@cornername,1,c
 12640  0024E4  D027               	goto	l6500
 12641                           
 12642                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 12643  0024E6  5037               	movf	fillCircleHelper@y,w,c
 12644  0024E8  0800               	sublw	0
 12645  0024EA  2423               	addwf	fillCircleHelper@y0,w,c
 12646  0024EC  6E16               	movwf	drawFastVLine@y,c
 12647  0024EE  5037               	movf	fillCircleHelper@y,w,c
 12648  0024F0  2437               	addwf	fillCircleHelper@y,w,c
 12649  0024F2  2429               	addwf	fillCircleHelper@delta,w,c
 12650  0024F4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12651  0024F6  282D               	incf	??_fillCircleHelper,w,c
 12652  0024F8  6E17               	movwf	drawFastVLine@h,c
 12653  0024FA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12654  0024FE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12655  002502  5035               	movf	fillCircleHelper@x,w,c
 12656  002504  0800               	sublw	0
 12657  002506  2421               	addwf	fillCircleHelper@x0,w,c
 12658  002508  ECF0  F019         	call	_drawFastVLine
 12659                           
 12660                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 12661  00250C  5035               	movf	fillCircleHelper@x,w,c
 12662  00250E  0800               	sublw	0
 12663  002510  2423               	addwf	fillCircleHelper@y0,w,c
 12664  002512  6E16               	movwf	drawFastVLine@y,c
 12665  002514  5035               	movf	fillCircleHelper@x,w,c
 12666  002516  2435               	addwf	fillCircleHelper@x,w,c
 12667  002518  2429               	addwf	fillCircleHelper@delta,w,c
 12668  00251A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12669  00251C  282D               	incf	??_fillCircleHelper,w,c
 12670  00251E  6E17               	movwf	drawFastVLine@h,c
 12671  002520  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12672  002524  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12673  002528  5037               	movf	fillCircleHelper@y,w,c
 12674  00252A  0800               	sublw	0
 12675  00252C  2421               	addwf	fillCircleHelper@x0,w,c
 12676  00252E  ECF0  F019         	call	_drawFastVLine
 12677  002532  D000               	goto	l6500
 12678  002534                     l6500:
 12679  002534  5037               	movf	fillCircleHelper@y,w,c
 12680  002536  5C35               	subwf	fillCircleHelper@x,w,c
 12681  002538  5036               	movf	fillCircleHelper@x+1,w,c
 12682  00253A  0A80               	xorlw	128
 12683  00253C  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12684  00253E  5038               	movf	fillCircleHelper@y+1,w,c
 12685  002540  0A80               	xorlw	128
 12686  002542  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
 12687  002544  A0D8               	btfss	status,0,c
 12688  002546  D78F               	goto	l6480
 12689  002548  0012               	return		;funcret
 12690  00254A                     __end_of_fillCircleHelper:
 12691                           	opt stack 0
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           intcon2	equ	0xFF1
 12700                           intcon3	equ	0xFF0
 12701                           postinc0	equ	0xFEE
 12702                           wreg	equ	0xFE8
 12703                           postdec1	equ	0xFE5
 12704                           fsr1l	equ	0xFE1
 12705                           indf2	equ	0xFDF
 12706                           postinc2	equ	0xFDE
 12707                           postdec2	equ	0xFDD
 12708                           fsr2h	equ	0xFDA
 12709                           fsr2l	equ	0xFD9
 12710                           status	equ	0xFD8
 12711                           
 12712 ;; *************** function _drawCircle *****************
 12713 ;; Defined at:
 12714 ;;		line 561 in file "ST7735_TFT.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  x0              2   25[COMRAM] int 
 12717 ;;  y0              2   27[COMRAM] int 
 12718 ;;  r               2   29[COMRAM] int 
 12719 ;;  color           2   31[COMRAM] unsigned int 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;  y               2   43[COMRAM] int 
 12722 ;;  x               2   41[COMRAM] int 
 12723 ;;  f               2   39[COMRAM] int 
 12724 ;;  ddF_y           2   37[COMRAM] int 
 12725 ;;  ddF_x           2   35[COMRAM] int 
 12726 ;; Return value:  Size  Location     Type
 12727 ;;		None               void
 12728 ;; Registers used:
 12729 ;;		wreg, status,2, status,0, cstack
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12735 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;Total ram usage:       20 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    6
 12742 ;; This function calls:
 12743 ;;		_drawPixel
 12744 ;; This function is called by:
 12745 ;;		_Initialize_Screen
 12746 ;;		_update_LCD_color
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text52
 12751  001F64                     __ptext52:
 12752                           	opt stack 0
 12753  001F64                     _drawCircle:
 12754                           	opt stack 21
 12755                           
 12756                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12757                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12758                           
 12759                           ;incstack = 0
 12760  001F64  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12761  001F68  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12762  001F6C  1E22               	comf	??_drawCircle,f,c
 12763  001F6E  1E23               	comf	??_drawCircle+1,f,c
 12764  001F70  4A22               	infsnz	??_drawCircle,f,c
 12765  001F72  2A23               	incf	??_drawCircle+1,f,c
 12766  001F74  0E01               	movlw	1
 12767  001F76  2422               	addwf	??_drawCircle,w,c
 12768  001F78  6E28               	movwf	drawCircle@f,c
 12769  001F7A  0E00               	movlw	0
 12770  001F7C  2023               	addwfc	??_drawCircle+1,w,c
 12771  001F7E  6E29               	movwf	drawCircle@f+1,c
 12772  001F80  0E00               	movlw	0
 12773  001F82  6E25               	movwf	drawCircle@ddF_x+1,c
 12774  001F84  0E01               	movlw	1
 12775  001F86  6E24               	movwf	drawCircle@ddF_x,c
 12776  001F88  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12777  001F8C  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12778  001F90  90D8               	bcf	status,0,c
 12779  001F92  3622               	rlcf	??_drawCircle,f,c
 12780  001F94  3623               	rlcf	??_drawCircle+1,f,c
 12781  001F96  1E22               	comf	??_drawCircle,f,c
 12782  001F98  1E23               	comf	??_drawCircle+1,f,c
 12783  001F9A  4A22               	infsnz	??_drawCircle,f,c
 12784  001F9C  2A23               	incf	??_drawCircle+1,f,c
 12785  001F9E  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
 12786  001FA2  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12787  001FA6  0E00               	movlw	0
 12788  001FA8  6E2B               	movwf	drawCircle@x+1,c
 12789  001FAA  0E00               	movlw	0
 12790  001FAC  6E2A               	movwf	drawCircle@x,c
 12791  001FAE  C01E  F02C         	movff	drawCircle@r,drawCircle@y
 12792  001FB2  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
 12793                           
 12794                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12795  001FB6  501C               	movf	drawCircle@y0,w,c
 12796  001FB8  241E               	addwf	drawCircle@r,w,c
 12797  001FBA  6E16               	movwf	drawPixel@y,c
 12798  001FBC  C020  F017         	movff	drawCircle@color,drawPixel@color
 12799  001FC0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12800  001FC4  501A               	movf	drawCircle@x0,w,c
 12801  001FC6  EC09  F01E         	call	_drawPixel
 12802                           
 12803                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12804  001FCA  501E               	movf	drawCircle@r,w,c
 12805  001FCC  0800               	sublw	0
 12806  001FCE  241C               	addwf	drawCircle@y0,w,c
 12807  001FD0  6E16               	movwf	drawPixel@y,c
 12808  001FD2  C020  F017         	movff	drawCircle@color,drawPixel@color
 12809  001FD6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12810  001FDA  501A               	movf	drawCircle@x0,w,c
 12811  001FDC  EC09  F01E         	call	_drawPixel
 12812                           
 12813                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12814  001FE0  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12815  001FE4  C020  F017         	movff	drawCircle@color,drawPixel@color
 12816  001FE8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12817  001FEC  501A               	movf	drawCircle@x0,w,c
 12818  001FEE  241E               	addwf	drawCircle@r,w,c
 12819  001FF0  EC09  F01E         	call	_drawPixel
 12820                           
 12821                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 12822  001FF4  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12823  001FF8  C020  F017         	movff	drawCircle@color,drawPixel@color
 12824  001FFC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12825  002000  501E               	movf	drawCircle@r,w,c
 12826  002002  0800               	sublw	0
 12827  002004  241A               	addwf	drawCircle@x0,w,c
 12828  002006  EC09  F01E         	call	_drawPixel
 12829                           
 12830                           ;ST7735_TFT.c: 569: while (x < y) {
 12831  00200A  D078               	goto	l6918
 12832  00200C                     l6890:
 12833                           
 12834                           ;ST7735_TFT.c: 570: if (f >= 0) {
 12835  00200C  BE29               	btfsc	drawCircle@f+1,7,c
 12836  00200E  D00B               	goto	l273
 12837                           
 12838                           ;ST7735_TFT.c: 571: y--;
 12839  002010  062C               	decf	drawCircle@y,f,c
 12840  002012  A0D8               	btfss	status,0,c
 12841  002014  062D               	decf	drawCircle@y+1,f,c
 12842                           
 12843                           ;ST7735_TFT.c: 572: ddF_y += 2;
 12844  002016  0E02               	movlw	2
 12845  002018  2626               	addwf	drawCircle@ddF_y,f,c
 12846  00201A  0E00               	movlw	0
 12847  00201C  2227               	addwfc	drawCircle@ddF_y+1,f,c
 12848                           
 12849                           ;ST7735_TFT.c: 573: f += ddF_y;
 12850  00201E  5026               	movf	drawCircle@ddF_y,w,c
 12851  002020  2628               	addwf	drawCircle@f,f,c
 12852  002022  5027               	movf	drawCircle@ddF_y+1,w,c
 12853  002024  2229               	addwfc	drawCircle@f+1,f,c
 12854  002026                     l273:
 12855                           
 12856                           ;ST7735_TFT.c: 574: }
 12857                           ;ST7735_TFT.c: 575: x++;
 12858  002026  4A2A               	infsnz	drawCircle@x,f,c
 12859  002028  2A2B               	incf	drawCircle@x+1,f,c
 12860                           
 12861                           ;ST7735_TFT.c: 576: ddF_x += 2;
 12862  00202A  0E02               	movlw	2
 12863  00202C  2624               	addwf	drawCircle@ddF_x,f,c
 12864  00202E  0E00               	movlw	0
 12865  002030  2225               	addwfc	drawCircle@ddF_x+1,f,c
 12866                           
 12867                           ;ST7735_TFT.c: 577: f += ddF_x;
 12868  002032  5024               	movf	drawCircle@ddF_x,w,c
 12869  002034  2628               	addwf	drawCircle@f,f,c
 12870  002036  5025               	movf	drawCircle@ddF_x+1,w,c
 12871  002038  2229               	addwfc	drawCircle@f+1,f,c
 12872                           
 12873                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 12874  00203A  501C               	movf	drawCircle@y0,w,c
 12875  00203C  242C               	addwf	drawCircle@y,w,c
 12876  00203E  6E16               	movwf	drawPixel@y,c
 12877  002040  C020  F017         	movff	drawCircle@color,drawPixel@color
 12878  002044  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12879  002048  501A               	movf	drawCircle@x0,w,c
 12880  00204A  242A               	addwf	drawCircle@x,w,c
 12881  00204C  EC09  F01E         	call	_drawPixel
 12882                           
 12883                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 12884  002050  501C               	movf	drawCircle@y0,w,c
 12885  002052  242C               	addwf	drawCircle@y,w,c
 12886  002054  6E16               	movwf	drawPixel@y,c
 12887  002056  C020  F017         	movff	drawCircle@color,drawPixel@color
 12888  00205A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12889  00205E  502A               	movf	drawCircle@x,w,c
 12890  002060  0800               	sublw	0
 12891  002062  241A               	addwf	drawCircle@x0,w,c
 12892  002064  EC09  F01E         	call	_drawPixel
 12893                           
 12894                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 12895  002068  502C               	movf	drawCircle@y,w,c
 12896  00206A  0800               	sublw	0
 12897  00206C  241C               	addwf	drawCircle@y0,w,c
 12898  00206E  6E16               	movwf	drawPixel@y,c
 12899  002070  C020  F017         	movff	drawCircle@color,drawPixel@color
 12900  002074  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12901  002078  501A               	movf	drawCircle@x0,w,c
 12902  00207A  242A               	addwf	drawCircle@x,w,c
 12903  00207C  EC09  F01E         	call	_drawPixel
 12904                           
 12905                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 12906  002080  502C               	movf	drawCircle@y,w,c
 12907  002082  0800               	sublw	0
 12908  002084  241C               	addwf	drawCircle@y0,w,c
 12909  002086  6E16               	movwf	drawPixel@y,c
 12910  002088  C020  F017         	movff	drawCircle@color,drawPixel@color
 12911  00208C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12912  002090  502A               	movf	drawCircle@x,w,c
 12913  002092  0800               	sublw	0
 12914  002094  241A               	addwf	drawCircle@x0,w,c
 12915  002096  EC09  F01E         	call	_drawPixel
 12916                           
 12917                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 12918  00209A  501C               	movf	drawCircle@y0,w,c
 12919  00209C  242A               	addwf	drawCircle@x,w,c
 12920  00209E  6E16               	movwf	drawPixel@y,c
 12921  0020A0  C020  F017         	movff	drawCircle@color,drawPixel@color
 12922  0020A4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12923  0020A8  501A               	movf	drawCircle@x0,w,c
 12924  0020AA  242C               	addwf	drawCircle@y,w,c
 12925  0020AC  EC09  F01E         	call	_drawPixel
 12926                           
 12927                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 12928  0020B0  501C               	movf	drawCircle@y0,w,c
 12929  0020B2  242A               	addwf	drawCircle@x,w,c
 12930  0020B4  6E16               	movwf	drawPixel@y,c
 12931  0020B6  C020  F017         	movff	drawCircle@color,drawPixel@color
 12932  0020BA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12933  0020BE  502C               	movf	drawCircle@y,w,c
 12934  0020C0  0800               	sublw	0
 12935  0020C2  241A               	addwf	drawCircle@x0,w,c
 12936  0020C4  EC09  F01E         	call	_drawPixel
 12937                           
 12938                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 12939  0020C8  502A               	movf	drawCircle@x,w,c
 12940  0020CA  0800               	sublw	0
 12941  0020CC  241C               	addwf	drawCircle@y0,w,c
 12942  0020CE  6E16               	movwf	drawPixel@y,c
 12943  0020D0  C020  F017         	movff	drawCircle@color,drawPixel@color
 12944  0020D4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12945  0020D8  501A               	movf	drawCircle@x0,w,c
 12946  0020DA  242C               	addwf	drawCircle@y,w,c
 12947  0020DC  EC09  F01E         	call	_drawPixel
 12948                           
 12949                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 12950  0020E0  502A               	movf	drawCircle@x,w,c
 12951  0020E2  0800               	sublw	0
 12952  0020E4  241C               	addwf	drawCircle@y0,w,c
 12953  0020E6  6E16               	movwf	drawPixel@y,c
 12954  0020E8  C020  F017         	movff	drawCircle@color,drawPixel@color
 12955  0020EC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12956  0020F0  502C               	movf	drawCircle@y,w,c
 12957  0020F2  0800               	sublw	0
 12958  0020F4  241A               	addwf	drawCircle@x0,w,c
 12959  0020F6  EC09  F01E         	call	_drawPixel
 12960  0020FA  D000               	goto	l6918
 12961  0020FC                     l6918:
 12962  0020FC  502C               	movf	drawCircle@y,w,c
 12963  0020FE  5C2A               	subwf	drawCircle@x,w,c
 12964  002100  502B               	movf	drawCircle@x+1,w,c
 12965  002102  0A80               	xorlw	128
 12966  002104  6E22               	movwf	??_drawCircle& (0+255),c
 12967  002106  502D               	movf	drawCircle@y+1,w,c
 12968  002108  0A80               	xorlw	128
 12969  00210A  5822               	subwfb	??_drawCircle& (0+255),w,c
 12970  00210C  A0D8               	btfss	status,0,c
 12971  00210E  D77E               	goto	l6890
 12972  002110  0012               	return		;funcret
 12973  002112                     __end_of_drawCircle:
 12974                           	opt stack 0
 12975                           tblptru	equ	0xFF8
 12976                           tblptrh	equ	0xFF7
 12977                           tblptrl	equ	0xFF6
 12978                           tablat	equ	0xFF5
 12979                           prodh	equ	0xFF4
 12980                           prodl	equ	0xFF3
 12981                           intcon	equ	0xFF2
 12982                           intcon2	equ	0xFF1
 12983                           intcon3	equ	0xFF0
 12984                           postinc0	equ	0xFEE
 12985                           wreg	equ	0xFE8
 12986                           postdec1	equ	0xFE5
 12987                           fsr1l	equ	0xFE1
 12988                           indf2	equ	0xFDF
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           fsr2h	equ	0xFDA
 12992                           fsr2l	equ	0xFD9
 12993                           status	equ	0xFD8
 12994                           
 12995 ;; *************** function _PED_Control *****************
 12996 ;; Defined at:
 12997 ;;		line 534 in file "Lab9test.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;  Direction       1    wreg     unsigned char 
 13000 ;;  Num_Sec         1   74[COMRAM] unsigned char 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  Direction       1    0[COMRAM] unsigned char 
 13003 ;;  i               1   75[COMRAM] unsigned char 
 13004 ;; Return value:  Size  Location     Type
 13005 ;;		None               void
 13006 ;; Registers used:
 13007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13013 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;Total ram usage:        2 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; Hardware stack levels required when called:   10
 13020 ;; This function calls:
 13021 ;;		_WAIT_1_SEC_W_BEEP
 13022 ;;		_update_LCD_PED_Count
 13023 ;; This function is called by:
 13024 ;;		_Day_Mode
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           	psect	text53
 13029  0037FA                     __ptext53:
 13030                           	opt stack 0
 13031  0037FA                     _PED_Control:
 13032                           	opt stack 19
 13033                           
 13034                           ;Lab9test.c: 536: for(char i = Num_Sec-1; i>0; i--)
 13035                           
 13036                           ;incstack = 0
 13037  0037FA  044B               	decf	PED_Control@Num_Sec,w,c
 13038  0037FC  6E4C               	movwf	PED_Control@i,c
 13039  0037FE                     l7298:
 13040  0037FE  504C               	movf	PED_Control@i,w,c
 13041  003800  B4D8               	btfsc	status,2,c
 13042  003802  D00C               	goto	l7310
 13043  003804  D001               	goto	l7302
 13044  003806  D00A               	goto	l7310
 13045  003808                     l7302:
 13046                           
 13047                           ;Lab9test.c: 537: {
 13048                           ;Lab9test.c: 538: update_LCD_PED_Count(direction, i);
 13049  003808  C04C  F048         	movff	PED_Control@i,update_LCD_PED_Count@count
 13050  00380C  0100               	movlb	0	; () banked
 13051  00380E  5194               	movf	_direction& (0+255),w,b
 13052  003810  EC2F  F015         	call	_update_LCD_PED_Count
 13053                           
 13054                           ;Lab9test.c: 539: WAIT_1_SEC_W_BEEP();
 13055  003814  ECCE  F01E         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 13056  003818  064C               	decf	PED_Control@i,f,c
 13057  00381A  D7F1               	goto	l7298
 13058  00381C                     l7310:
 13059                           
 13060                           ;Lab9test.c: 540: }
 13061                           ;Lab9test.c: 541: update_LCD_PED_Count(direction, 0);
 13062  00381C  0E00               	movlw	0
 13063  00381E  6E48               	movwf	update_LCD_PED_Count@count,c
 13064  003820  0100               	movlb	0	; () banked
 13065  003822  5194               	movf	_direction& (0+255),w,b
 13066  003824  EC2F  F015         	call	_update_LCD_PED_Count
 13067                           
 13068                           ;Lab9test.c: 542: WAIT_1_SEC_W_BEEP();
 13069  003828  ECCE  F01E         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 13070                           
 13071                           ;Lab9test.c: 544: if (direction = NSPED_SW)
 13072  00382C  C08E  F094         	movff	_NSPED_SW,_direction
 13073  003830  0100               	movlb	0	; () banked
 13074  003832  5194               	movf	_direction& (0+255),w,b
 13075  003834  B4D8               	btfsc	status,2,c
 13076  003836  D004               	goto	l7318
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;Lab9test.c: 545: {
 13080                           ;Lab9test.c: 546: NSPED_SW = 0;
 13081  003838  0E00               	movlw	0
 13082  00383A  0100               	movlb	0	; () banked
 13083  00383C  6F8E               	movwf	_NSPED_SW& (0+255),b
 13084                           
 13085                           ;Lab9test.c: 547: }
 13086  00383E  D00A               	goto	l471
 13087  003840                     l7318:
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;Lab9test.c: 548: else if (direction = EWPED_SW)
 13091  003840  C08D  F094         	movff	_EWPED_SW,_direction
 13092  003844  0100               	movlb	0	; () banked
 13093  003846  5194               	movf	_direction& (0+255),w,b
 13094  003848  B4D8               	btfsc	status,2,c
 13095  00384A  D004               	goto	l471
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;Lab9test.c: 549: {
 13099                           ;Lab9test.c: 550: EWPED_SW = 0;
 13100  00384C  0E00               	movlw	0
 13101  00384E  0100               	movlb	0	; () banked
 13102  003850  6F8D               	movwf	_EWPED_SW& (0+255),b
 13103                           
 13104                           ; BSR set to: 0
 13105  003852  D000               	goto	l471
 13106  003854                     l471:
 13107                           
 13108                           ; BSR set to: 0
 13109  003854  0012               	return		;funcret
 13110  003856                     __end_of_PED_Control:
 13111                           	opt stack 0
 13112                           tblptru	equ	0xFF8
 13113                           tblptrh	equ	0xFF7
 13114                           tblptrl	equ	0xFF6
 13115                           tablat	equ	0xFF5
 13116                           prodh	equ	0xFF4
 13117                           prodl	equ	0xFF3
 13118                           intcon	equ	0xFF2
 13119                           intcon2	equ	0xFF1
 13120                           intcon3	equ	0xFF0
 13121                           postinc0	equ	0xFEE
 13122                           wreg	equ	0xFE8
 13123                           postdec1	equ	0xFE5
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           fsr2h	equ	0xFDA
 13129                           fsr2l	equ	0xFD9
 13130                           status	equ	0xFD8
 13131                           
 13132 ;; *************** function _update_LCD_PED_Count *****************
 13133 ;; Defined at:
 13134 ;;		line 687 in file "Lab9test.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;  direction       1    wreg     unsigned char 
 13137 ;;  count           1   71[COMRAM] unsigned char 
 13138 ;; Auto vars:     Size  Location     Type
 13139 ;;  direction       1   73[COMRAM] unsigned char 
 13140 ;; Return value:  Size  Location     Type
 13141 ;;		None               void
 13142 ;; Registers used:
 13143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13144 ;; Tracked objects:
 13145 ;;		On entry : 0/0
 13146 ;;		On exit  : 0/0
 13147 ;;		Unchanged: 0/0
 13148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13149 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;Total ram usage:        3 bytes
 13154 ;; Hardware stack levels used:    1
 13155 ;; Hardware stack levels required when called:    9
 13156 ;; This function calls:
 13157 ;;		___awdiv
 13158 ;;		___awmod
 13159 ;;		_drawtext
 13160 ;; This function is called by:
 13161 ;;		_PED_Control
 13162 ;; This function uses a non-reentrant model
 13163 ;;
 13164                           
 13165                           	psect	text54
 13166  002A5E                     __ptext54:
 13167                           	opt stack 0
 13168  002A5E                     _update_LCD_PED_Count:
 13169                           	opt stack 19
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;incstack = 0
 13173                           ;update_LCD_PED_Count@direction stored from wreg
 13174  002A5E  6E4A               	movwf	update_LCD_PED_Count@direction,c
 13175                           
 13176                           ;Lab9test.c: 689: PORTD = (PORTD & 0x80) | array[count];
 13177  002A60  5048               	movf	update_LCD_PED_Count@count,w,c
 13178  002A62  0D01               	mullw	1
 13179  002A64  0EB4               	movlw	low _array
 13180  002A66  24F3               	addwf	prodl,w,c
 13181  002A68  6ED9               	movwf	fsr2l,c
 13182  002A6A  0E00               	movlw	high _array
 13183  002A6C  20F4               	addwfc	prodh,w,c
 13184  002A6E  6EDA               	movwf	fsr2h,c
 13185  002A70  50DF               	movf	indf2,w,c
 13186  002A72  6E49               	movwf	??_update_LCD_PED_Count& (0+255),c
 13187  002A74  5083               	movf	3971,w,c	;volatile
 13188  002A76  0B80               	andlw	128
 13189  002A78  1049               	iorwf	??_update_LCD_PED_Count,w,c
 13190  002A7A  6E83               	movwf	3971,c	;volatile
 13191                           
 13192                           ;Lab9test.c: 690: switch (direction)
 13193  002A7C  D05B               	goto	l7218
 13194  002A7E                     l7208:
 13195                           
 13196                           ;Lab9test.c: 693: PED_EW_Count[0] = count/10 + '0';
 13197  002A7E  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13198  002A82  6A16               	clrf	___awdiv@dividend+1,c
 13199  002A84  0E00               	movlw	0
 13200  002A86  6E18               	movwf	___awdiv@divisor+1,c
 13201  002A88  0E0A               	movlw	10
 13202  002A8A  6E17               	movwf	___awdiv@divisor,c
 13203  002A8C  EC1B  F019         	call	___awdiv	;wreg free
 13204  002A90  5015               	movf	?___awdiv,w,c
 13205  002A92  0F30               	addlw	48
 13206  002A94  0100               	movlb	0	; () banked
 13207  002A96  6FCB               	movwf	_PED_EW_Count& (0+255),b
 13208                           
 13209                           ;Lab9test.c: 694: PED_EW_Count[1] = count%10 + '0';
 13210  002A98  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13211  002A9C  6A10               	clrf	___awmod@dividend+1,c
 13212  002A9E  0E00               	movlw	0
 13213  002AA0  6E12               	movwf	___awmod@divisor+1,c
 13214  002AA2  0E0A               	movlw	10
 13215  002AA4  6E11               	movwf	___awmod@divisor,c
 13216  002AA6  ECB8  F01A         	call	___awmod	;wreg free
 13217  002AAA  500F               	movf	?___awmod,w,c
 13218  002AAC  0F30               	addlw	48
 13219  002AAE  0100               	movlb	0	; () banked
 13220  002AB0  6FCC               	movwf	(_PED_EW_Count+1)& (0+255),b
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;Lab9test.c: 695: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 13224  002AB2  0E1E               	movlw	30
 13225  002AB4  6E37               	movwf	drawtext@y,c
 13226  002AB6  0ECB               	movlw	low _PED_EW_Count
 13227  002AB8  6E38               	movwf	drawtext@_text,c
 13228  002ABA  0E00               	movlw	high _PED_EW_Count
 13229  002ABC  6E39               	movwf	drawtext@_text+1,c
 13230  002ABE  0E07               	movlw	7
 13231  002AC0  6E3B               	movwf	drawtext@color+1,c
 13232  002AC2  683A               	setf	drawtext@color,c
 13233  002AC4  0E00               	movlw	0
 13234  002AC6  6E3D               	movwf	drawtext@bg+1,c
 13235  002AC8  0E00               	movlw	0
 13236  002ACA  6E3C               	movwf	drawtext@bg,c
 13237  002ACC  0E02               	movlw	2
 13238  002ACE  6E3E               	movwf	drawtext@size,c
 13239  002AD0  0E02               	movlw	2
 13240  002AD2  EC87  F016         	call	_drawtext
 13241                           
 13242                           ;Lab9test.c: 696: break;
 13243  002AD6  D036               	goto	l530
 13244  002AD8                     l7212:
 13245                           
 13246                           ;Lab9test.c: 699: PED_NS_Count[0] = count/10 + '0';
 13247  002AD8  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13248  002ADC  6A16               	clrf	___awdiv@dividend+1,c
 13249  002ADE  0E00               	movlw	0
 13250  002AE0  6E18               	movwf	___awdiv@divisor+1,c
 13251  002AE2  0E0A               	movlw	10
 13252  002AE4  6E17               	movwf	___awdiv@divisor,c
 13253  002AE6  EC1B  F019         	call	___awdiv	;wreg free
 13254  002AEA  5015               	movf	?___awdiv,w,c
 13255  002AEC  0F30               	addlw	48
 13256  002AEE  0100               	movlb	0	; () banked
 13257  002AF0  6FCE               	movwf	_PED_NS_Count& (0+255),b
 13258                           
 13259                           ;Lab9test.c: 700: PED_NS_Count[1] = count%10 + '0';
 13260  002AF2  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13261  002AF6  6A10               	clrf	___awmod@dividend+1,c
 13262  002AF8  0E00               	movlw	0
 13263  002AFA  6E12               	movwf	___awmod@divisor+1,c
 13264  002AFC  0E0A               	movlw	10
 13265  002AFE  6E11               	movwf	___awmod@divisor,c
 13266  002B00  ECB8  F01A         	call	___awmod	;wreg free
 13267  002B04  500F               	movf	?___awmod,w,c
 13268  002B06  0F30               	addlw	48
 13269  002B08  0100               	movlb	0	; () banked
 13270  002B0A  6FCF               	movwf	(_PED_NS_Count+1)& (0+255),b
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;Lab9test.c: 701: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
 13274  002B0C  0E5A               	movlw	90
 13275  002B0E  6E37               	movwf	drawtext@y,c
 13276  002B10  0ECE               	movlw	low _PED_NS_Count
 13277  002B12  6E38               	movwf	drawtext@_text,c
 13278  002B14  0E00               	movlw	high _PED_NS_Count
 13279  002B16  6E39               	movwf	drawtext@_text+1,c
 13280  002B18  0E00               	movlw	0
 13281  002B1A  6E3B               	movwf	drawtext@color+1,c
 13282  002B1C  0E1F               	movlw	31
 13283  002B1E  6E3A               	movwf	drawtext@color,c
 13284  002B20  0E00               	movlw	0
 13285  002B22  6E3D               	movwf	drawtext@bg+1,c
 13286  002B24  0E00               	movlw	0
 13287  002B26  6E3C               	movwf	drawtext@bg,c
 13288  002B28  0E02               	movlw	2
 13289  002B2A  6E3E               	movwf	drawtext@size,c
 13290  002B2C  0E02               	movlw	2
 13291  002B2E  EC87  F016         	call	_drawtext
 13292                           
 13293                           ;Lab9test.c: 703: }
 13294                           
 13295                           ;Lab9test.c: 702: break;
 13296  002B32  D008               	goto	l530
 13297  002B34                     l7218:
 13298  002B34  504A               	movf	update_LCD_PED_Count@direction,w,c
 13299                           
 13300                           ; Switch size 1, requested type "space"
 13301                           ; Number of cases is 2, Range of values is 0 to 2
 13302                           ; switch strategies available:
 13303                           ; Name         Instructions Cycles
 13304                           ; simple_byte            7     4 (average)
 13305                           ;	Chosen strategy is simple_byte
 13306  002B36  0A00               	xorlw	0	; case 0
 13307  002B38  B4D8               	btfsc	status,2,c
 13308  002B3A  D7A1               	goto	l7208
 13309  002B3C  0A02               	xorlw	2	; case 2
 13310  002B3E  B4D8               	btfsc	status,2,c
 13311  002B40  D7CB               	goto	l7212
 13312  002B42  D000               	goto	l530
 13313  002B44                     l530:
 13314  002B44  0012               	return		;funcret
 13315  002B46                     __end_of_update_LCD_PED_Count:
 13316                           	opt stack 0
 13317                           tblptru	equ	0xFF8
 13318                           tblptrh	equ	0xFF7
 13319                           tblptrl	equ	0xFF6
 13320                           tablat	equ	0xFF5
 13321                           prodh	equ	0xFF4
 13322                           prodl	equ	0xFF3
 13323                           intcon	equ	0xFF2
 13324                           intcon2	equ	0xFF1
 13325                           intcon3	equ	0xFF0
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           postdec1	equ	0xFE5
 13329                           fsr1l	equ	0xFE1
 13330                           indf2	equ	0xFDF
 13331                           postinc2	equ	0xFDE
 13332                           postdec2	equ	0xFDD
 13333                           fsr2h	equ	0xFDA
 13334                           fsr2l	equ	0xFD9
 13335                           status	equ	0xFD8
 13336                           
 13337 ;; *************** function _drawtext *****************
 13338 ;; Defined at:
 13339 ;;		line 507 in file "ST7735_TFT.c"
 13340 ;; Parameters:    Size  Location     Type
 13341 ;;  x               1    wreg     unsigned char 
 13342 ;;  y               1   54[COMRAM] unsigned char 
 13343 ;;  _text           2   55[COMRAM] PTR unsigned char 
 13344 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13345 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13346 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13347 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13348 ;;  color           2   57[COMRAM] unsigned int 
 13349 ;;  bg              2   59[COMRAM] unsigned int 
 13350 ;;  size            1   61[COMRAM] unsigned char 
 13351 ;; Auto vars:     Size  Location     Type
 13352 ;;  x               1   64[COMRAM] unsigned char 
 13353 ;;  i               2   67[COMRAM] unsigned int 
 13354 ;;  textsize        2   65[COMRAM] unsigned int 
 13355 ;;  cursor_x        1   70[COMRAM] unsigned char 
 13356 ;;  cursor_y        1   69[COMRAM] unsigned char 
 13357 ;; Return value:  Size  Location     Type
 13358 ;;		None               void
 13359 ;; Registers used:
 13360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13366 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13369 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13370 ;;Total ram usage:       17 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:    8
 13373 ;; This function calls:
 13374 ;;		_drawChar
 13375 ;;		_strlen
 13376 ;; This function is called by:
 13377 ;;		_Initialize_Screen
 13378 ;;		_WAIT_1_SEC
 13379 ;;		_update_LCD_count
 13380 ;;		_update_LCD_PED_Count
 13381 ;;		_update_LCD_misc
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           	psect	text55
 13386  002D0E                     __ptext55:
 13387                           	opt stack 0
 13388  002D0E                     _drawtext:
 13389                           	opt stack 19
 13390                           
 13391                           ;incstack = 0
 13392                           ;drawtext@x stored from wreg
 13393  002D0E  6E41               	movwf	drawtext@x,c
 13394                           
 13395                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 13396                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 13397                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 13398  002D10  C041  F047         	movff	drawtext@x,drawtext@cursor_x
 13399  002D14  C037  F046         	movff	drawtext@y,drawtext@cursor_y
 13400                           
 13401                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 13402  002D18  C038  F00F         	movff	drawtext@_text,strlen@s
 13403  002D1C  C039  F010         	movff	drawtext@_text+1,strlen@s+1
 13404  002D20  EC9A  F01D         	call	_strlen	;wreg free
 13405  002D24  C00F  F042         	movff	?_strlen,drawtext@textsize
 13406  002D28  C010  F043         	movff	?_strlen+1,drawtext@textsize+1
 13407                           
 13408                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 13409  002D2C  0E00               	movlw	0
 13410  002D2E  6E45               	movwf	drawtext@i+1,c
 13411  002D30  0E00               	movlw	0
 13412  002D32  6E44               	movwf	drawtext@i,c
 13413  002D34  D054               	goto	l6468
 13414  002D36                     l6442:
 13415                           
 13416                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 13417  002D36  506C               	movf	_wrap,w,c
 13418  002D38  B4D8               	btfsc	status,2,c
 13419  002D3A  D02C               	goto	l6458
 13420  002D3C  503E               	movf	drawtext@size,w,c
 13421  002D3E  0D05               	mullw	5
 13422  002D40  5047               	movf	drawtext@cursor_x,w,c
 13423  002D42  6E3F               	movwf	??_drawtext& (0+255),c
 13424  002D44  6A40               	clrf	(??_drawtext+1)& (0+255),c
 13425  002D46  50F3               	movf	prodl,w,c
 13426  002D48  263F               	addwf	??_drawtext,f,c
 13427  002D4A  50F4               	movf	prodh,w,c
 13428  002D4C  2240               	addwfc	??_drawtext+1,f,c
 13429  002D4E  BE40               	btfsc	??_drawtext+1,7,c
 13430  002D50  D021               	goto	l6458
 13431  002D52  5040               	movf	??_drawtext+1,w,c
 13432  002D54  E104               	bnz	u6360
 13433  002D56  0E81               	movlw	129
 13434  002D58  5C3F               	subwf	??_drawtext,w,c
 13435  002D5A  A0D8               	btfss	status,0,c
 13436  002D5C  D01B               	goto	l6458
 13437  002D5E                     u6360:
 13438                           
 13439                           ;ST7735_TFT.c: 515: cursor_x = 0;
 13440  002D5E  0E00               	movlw	0
 13441  002D60  6E47               	movwf	drawtext@cursor_x,c
 13442                           
 13443                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 13444  002D62  503E               	movf	drawtext@size,w,c
 13445  002D64  0D07               	mullw	7
 13446  002D66  50F3               	movf	prodl,w,c
 13447  002D68  2446               	addwf	drawtext@cursor_y,w,c
 13448  002D6A  0F03               	addlw	3
 13449  002D6C  6E46               	movwf	drawtext@cursor_y,c
 13450                           
 13451                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 13452  002D6E  0EA0               	movlw	160
 13453  002D70  6446               	cpfsgt	drawtext@cursor_y,c
 13454  002D72  D003               	goto	l6454
 13455  002D74  0EA0               	movlw	160
 13456  002D76  6E46               	movwf	drawtext@cursor_y,c
 13457  002D78  D000               	goto	l6454
 13458  002D7A                     l6454:
 13459                           
 13460                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 13461  002D7A  5044               	movf	drawtext@i,w,c
 13462  002D7C  2438               	addwf	drawtext@_text,w,c
 13463  002D7E  6ED9               	movwf	fsr2l,c
 13464  002D80  5045               	movf	drawtext@i+1,w,c
 13465  002D82  2039               	addwfc	drawtext@_text+1,w,c
 13466  002D84  6EDA               	movwf	fsr2h,c
 13467  002D86  0E20               	movlw	32
 13468  002D88  18DE               	xorwf	postinc2,w,c
 13469  002D8A  B4D8               	btfsc	status,2,c
 13470  002D8C  D025               	goto	l6466
 13471  002D8E  D002               	goto	l6458
 13472  002D90  D023               	goto	l6466
 13473  002D92  D000               	goto	l6458
 13474  002D94                     l6458:
 13475                           
 13476                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 13477  002D94  C046  F02C         	movff	drawtext@cursor_y,drawChar@y
 13478  002D98  5044               	movf	drawtext@i,w,c
 13479  002D9A  2438               	addwf	drawtext@_text,w,c
 13480  002D9C  6ED9               	movwf	fsr2l,c
 13481  002D9E  5045               	movf	drawtext@i+1,w,c
 13482  002DA0  2039               	addwfc	drawtext@_text+1,w,c
 13483  002DA2  6EDA               	movwf	fsr2h,c
 13484  002DA4  50DF               	movf	indf2,w,c
 13485  002DA6  6E2D               	movwf	drawChar@c,c
 13486  002DA8  C03A  F02E         	movff	drawtext@color,drawChar@color
 13487  002DAC  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
 13488  002DB0  C03C  F030         	movff	drawtext@bg,drawChar@bg
 13489  002DB4  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
 13490  002DB8  C03E  F032         	movff	drawtext@size,drawChar@size
 13491  002DBC  5047               	movf	drawtext@cursor_x,w,c
 13492  002DBE  EC5E  F011         	call	_drawChar
 13493                           
 13494                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 13495  002DC2  503E               	movf	drawtext@size,w,c
 13496  002DC4  0D06               	mullw	6
 13497  002DC6  50F3               	movf	prodl,w,c
 13498  002DC8  2447               	addwf	drawtext@cursor_x,w,c
 13499  002DCA  6E47               	movwf	drawtext@cursor_x,c
 13500                           
 13501                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 13502  002DCC  0E80               	movlw	128
 13503  002DCE  6447               	cpfsgt	drawtext@cursor_x,c
 13504  002DD0  D003               	goto	l6466
 13505  002DD2  0E80               	movlw	128
 13506  002DD4  6E47               	movwf	drawtext@cursor_x,c
 13507  002DD6  D000               	goto	l6466
 13508  002DD8                     l6466:
 13509  002DD8  4A44               	infsnz	drawtext@i,f,c
 13510  002DDA  2A45               	incf	drawtext@i+1,f,c
 13511  002DDC  D000               	goto	l6468
 13512  002DDE                     l6468:
 13513  002DDE  5042               	movf	drawtext@textsize,w,c
 13514  002DE0  5C44               	subwf	drawtext@i,w,c
 13515  002DE2  5043               	movf	drawtext@textsize+1,w,c
 13516  002DE4  5845               	subwfb	drawtext@i+1,w,c
 13517  002DE6  A0D8               	btfss	status,0,c
 13518  002DE8  D7A6               	goto	l6442
 13519  002DEA  0012               	return		;funcret
 13520  002DEC                     __end_of_drawtext:
 13521                           	opt stack 0
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           intcon2	equ	0xFF1
 13530                           intcon3	equ	0xFF0
 13531                           postinc0	equ	0xFEE
 13532                           wreg	equ	0xFE8
 13533                           postdec1	equ	0xFE5
 13534                           fsr1l	equ	0xFE1
 13535                           indf2	equ	0xFDF
 13536                           postinc2	equ	0xFDE
 13537                           postdec2	equ	0xFDD
 13538                           fsr2h	equ	0xFDA
 13539                           fsr2l	equ	0xFD9
 13540                           status	equ	0xFD8
 13541                           
 13542 ;; *************** function _strlen *****************
 13543 ;; Defined at:
 13544 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  s               2   14[COMRAM] PTR const unsigned char 
 13547 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13548 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13549 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13550 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13551 ;; Auto vars:     Size  Location     Type
 13552 ;;  cp              2   18[COMRAM] PTR const unsigned char 
 13553 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13554 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13555 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13556 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  2   14[COMRAM] unsigned int 
 13559 ;; Registers used:
 13560 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13570 ;;Total ram usage:        6 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; Hardware stack levels required when called:    2
 13573 ;; This function calls:
 13574 ;;		Nothing
 13575 ;; This function is called by:
 13576 ;;		_drawtext
 13577 ;; This function uses a non-reentrant model
 13578 ;;
 13579                           
 13580                           	psect	text56
 13581  003B34                     __ptext56:
 13582                           	opt stack 0
 13583  003B34                     _strlen:
 13584                           	opt stack 24
 13585                           
 13586                           ;incstack = 0
 13587  003B34  C00F  F013         	movff	strlen@s,strlen@cp
 13588  003B38  C010  F014         	movff	strlen@s+1,strlen@cp+1
 13589  003B3C  D003               	goto	l6104
 13590  003B3E                     l6102:
 13591  003B3E  4A13               	infsnz	strlen@cp,f,c
 13592  003B40  2A14               	incf	strlen@cp+1,f,c
 13593  003B42  D000               	goto	l6104
 13594  003B44                     l6104:
 13595  003B44  C013  FFD9         	movff	strlen@cp,fsr2l
 13596  003B48  C014  FFDA         	movff	strlen@cp+1,fsr2h
 13597  003B4C  50DF               	movf	indf2,w,c
 13598  003B4E  A4D8               	btfss	status,2,c
 13599  003B50  D7F6               	goto	l6102
 13600  003B52  C00F  F011         	movff	strlen@s,??_strlen
 13601  003B56  C010  F012         	movff	strlen@s+1,??_strlen+1
 13602  003B5A  1E11               	comf	??_strlen,f,c
 13603  003B5C  1E12               	comf	??_strlen+1,f,c
 13604  003B5E  4A11               	infsnz	??_strlen,f,c
 13605  003B60  2A12               	incf	??_strlen+1,f,c
 13606  003B62  5013               	movf	strlen@cp,w,c
 13607  003B64  2411               	addwf	??_strlen,w,c
 13608  003B66  6E0F               	movwf	?_strlen,c
 13609  003B68  5014               	movf	strlen@cp+1,w,c
 13610  003B6A  2012               	addwfc	??_strlen+1,w,c
 13611  003B6C  6E10               	movwf	?_strlen+1,c
 13612  003B6E  D000               	goto	l1332
 13613  003B70                     l1332:
 13614  003B70  0012               	return		;funcret
 13615  003B72                     __end_of_strlen:
 13616                           	opt stack 0
 13617                           tblptru	equ	0xFF8
 13618                           tblptrh	equ	0xFF7
 13619                           tblptrl	equ	0xFF6
 13620                           tablat	equ	0xFF5
 13621                           prodh	equ	0xFF4
 13622                           prodl	equ	0xFF3
 13623                           intcon	equ	0xFF2
 13624                           intcon2	equ	0xFF1
 13625                           intcon3	equ	0xFF0
 13626                           postinc0	equ	0xFEE
 13627                           wreg	equ	0xFE8
 13628                           postdec1	equ	0xFE5
 13629                           fsr1l	equ	0xFE1
 13630                           indf2	equ	0xFDF
 13631                           postinc2	equ	0xFDE
 13632                           postdec2	equ	0xFDD
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _drawChar *****************
 13638 ;; Defined at:
 13639 ;;		line 480 in file "ST7735_TFT.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  x               1    wreg     unsigned char 
 13642 ;;  y               1   43[COMRAM] unsigned char 
 13643 ;;  c               1   44[COMRAM] unsigned char 
 13644 ;;  color           2   45[COMRAM] unsigned int 
 13645 ;;  bg              2   47[COMRAM] unsigned int 
 13646 ;;  size            1   49[COMRAM] unsigned char 
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  x               1   51[COMRAM] unsigned char 
 13649 ;;  line            1   50[COMRAM] unsigned char 
 13650 ;;  i               1   53[COMRAM] unsigned char 
 13651 ;;  j               1   52[COMRAM] unsigned char 
 13652 ;; Return value:  Size  Location     Type
 13653 ;;		None               void
 13654 ;; Registers used:
 13655 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13656 ;; Tracked objects:
 13657 ;;		On entry : 0/0
 13658 ;;		On exit  : 0/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13661 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;Total ram usage:       11 bytes
 13666 ;; Hardware stack levels used:    1
 13667 ;; Hardware stack levels required when called:    7
 13668 ;; This function calls:
 13669 ;;		___wmul
 13670 ;;		_drawPixel
 13671 ;;		_fillRect
 13672 ;; This function is called by:
 13673 ;;		_drawtext
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text57
 13678  0022BC                     __ptext57:
 13679                           	opt stack 0
 13680  0022BC                     _drawChar:
 13681                           	opt stack 19
 13682                           
 13683                           ;incstack = 0
 13684                           ;drawChar@x stored from wreg
 13685  0022BC  6E34               	movwf	drawChar@x,c
 13686                           
 13687                           ;ST7735_TFT.c: 482: char i, j;
 13688                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 13689  0022BE  0E80               	movlw	128
 13690  0022C0  6034               	cpfslt	drawChar@x,c
 13691  0022C2  D0A6               	goto	l225
 13692  0022C4  0E9F               	movlw	159
 13693  0022C6  642C               	cpfsgt	drawChar@y,c
 13694  0022C8  D001               	goto	l6050
 13695                           
 13696                           ;ST7735_TFT.c: 484: return;
 13697  0022CA  D0A2               	goto	l225
 13698  0022CC                     l6050:
 13699                           
 13700                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 13701  0022CC  5032               	movf	drawChar@size,w,c
 13702  0022CE  A4D8               	btfss	status,2,c
 13703  0022D0  D003               	goto	l6054
 13704  0022D2  0E01               	movlw	1
 13705  0022D4  6E32               	movwf	drawChar@size,c
 13706  0022D6  D000               	goto	l6054
 13707  0022D8                     l6054:
 13708                           
 13709                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 13710  0022D8  0E1F               	movlw	31
 13711  0022DA  642D               	cpfsgt	drawChar@c,c
 13712  0022DC  D004               	goto	l6058
 13713  0022DE  0E7E               	movlw	126
 13714  0022E0  642D               	cpfsgt	drawChar@c,c
 13715  0022E2  D003               	goto	l227
 13716  0022E4  D000               	goto	l6058
 13717  0022E6                     l6058:
 13718                           
 13719                           ;ST7735_TFT.c: 487: c = '?';
 13720  0022E6  0E3F               	movlw	63
 13721  0022E8  6E2D               	movwf	drawChar@c,c
 13722  0022EA                     l227:
 13723                           
 13724                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 13725  0022EA  0E00               	movlw	0
 13726  0022EC  6E36               	movwf	drawChar@i,c
 13727  0022EE                     l6060:
 13728  0022EE  0E04               	movlw	4
 13729  0022F0  6436               	cpfsgt	drawChar@i,c
 13730  0022F2  D001               	goto	l6064
 13731  0022F4  D08D               	goto	l225
 13732  0022F6                     l6064:
 13733                           
 13734                           ;ST7735_TFT.c: 489: unsigned char line;
 13735                           ;ST7735_TFT.c: 490: if(c < 'S')
 13736  0022F6  0E53               	movlw	83
 13737  0022F8  602D               	cpfslt	drawChar@c,c
 13738  0022FA  D015               	goto	l6068
 13739                           
 13740                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 13741  0022FC  0EE0               	movlw	224
 13742  0022FE  242D               	addwf	drawChar@c,w,c
 13743  002300  6E1D               	movwf	___wmul@multiplier,c
 13744  002302  6A1E               	clrf	___wmul@multiplier+1,c
 13745  002304  0EFF               	movlw	255
 13746  002306  221E               	addwfc	___wmul@multiplier+1,f,c
 13747  002308  0E00               	movlw	0
 13748  00230A  6E20               	movwf	___wmul@multiplicand+1,c
 13749  00230C  0E05               	movlw	5
 13750  00230E  6E1F               	movwf	___wmul@multiplicand,c
 13751  002310  EC4B  F01E         	call	___wmul	;wreg free
 13752  002314  5036               	movf	drawChar@i,w,c
 13753  002316  261D               	addwf	?___wmul,f,c
 13754  002318  0E00               	movlw	0
 13755  00231A  221E               	addwfc	?___wmul+1,f,c
 13756  00231C  0E07               	movlw	low _font
 13757  00231E  241D               	addwf	?___wmul,w,c
 13758  002320  6EF6               	movwf	tblptrl,c
 13759  002322  0EFA               	movlw	high _font
 13760  002324  D014               	goto	L22
 13761  002326                     l6068:
 13762                           
 13763                           ;ST7735_TFT.c: 492: else
 13764                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 13765  002326  0EAD               	movlw	173
 13766  002328  242D               	addwf	drawChar@c,w,c
 13767  00232A  6E1D               	movwf	___wmul@multiplier,c
 13768  00232C  6A1E               	clrf	___wmul@multiplier+1,c
 13769  00232E  0EFF               	movlw	255
 13770  002330  221E               	addwfc	___wmul@multiplier+1,f,c
 13771  002332  0E00               	movlw	0
 13772  002334  6E20               	movwf	___wmul@multiplicand+1,c
 13773  002336  0E05               	movlw	5
 13774  002338  6E1F               	movwf	___wmul@multiplicand,c
 13775  00233A  EC4B  F01E         	call	___wmul	;wreg free
 13776  00233E  5036               	movf	drawChar@i,w,c
 13777  002340  261D               	addwf	?___wmul,f,c
 13778  002342  0E00               	movlw	0
 13779  002344  221E               	addwfc	?___wmul+1,f,c
 13780  002346  0E06               	movlw	low _font2
 13781  002348  241D               	addwf	?___wmul,w,c
 13782  00234A  6EF6               	movwf	tblptrl,c
 13783  00234C  0EFB               	movlw	high _font2
 13784  00234E                     L22:
 13785  00234E  201E               	addwfc	?___wmul+1,w,c
 13786  002350  6EF7               	movwf	tblptrh,c
 13787  002352                     	if	0	;There are less than 3 active tblptr bytes
 13788  002352                     	endif
 13789  002352  0008               	tblrd		*
 13790  002354  CFF5 F033          	movff	tablat,drawChar@line
 13791  002358  D000               	goto	l6070
 13792  00235A                     l6070:
 13793                           
 13794                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 13795  00235A  0E00               	movlw	0
 13796  00235C  6E35               	movwf	drawChar@j,c
 13797  00235E                     l6072:
 13798  00235E  0E06               	movlw	6
 13799  002360  6435               	cpfsgt	drawChar@j,c
 13800  002362  D001               	goto	l234
 13801  002364  D053               	goto	l6096
 13802  002366                     l234:
 13803                           
 13804                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 13805  002366  A033               	btfss	drawChar@line,0,c
 13806  002368  D023               	goto	l6082
 13807                           
 13808                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 13809  00236A  0432               	decf	drawChar@size,w,c
 13810  00236C  A4D8               	btfss	status,2,c
 13811  00236E  D00C               	goto	l6080
 13812  002370  502C               	movf	drawChar@y,w,c
 13813  002372  2435               	addwf	drawChar@j,w,c
 13814  002374  6E16               	movwf	drawPixel@y,c
 13815  002376  C02E  F017         	movff	drawChar@color,drawPixel@color
 13816  00237A  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 13817  00237E  5034               	movf	drawChar@x,w,c
 13818  002380  2436               	addwf	drawChar@i,w,c
 13819  002382  EC09  F01E         	call	_drawPixel
 13820  002386  D03E               	goto	l6090
 13821  002388                     l6080:
 13822                           
 13823                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13824  002388  5035               	movf	drawChar@j,w,c
 13825  00238A  0232               	mulwf	drawChar@size,c
 13826  00238C  50F3               	movf	prodl,w,c
 13827  00238E  242C               	addwf	drawChar@y,w,c
 13828  002390  6E21               	movwf	fillRect@y,c
 13829  002392  C032  F022         	movff	drawChar@size,fillRect@w
 13830  002396  C032  F023         	movff	drawChar@size,fillRect@h
 13831  00239A  C02E  F024         	movff	drawChar@color,fillRect@color
 13832  00239E  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 13833  0023A2  5036               	movf	drawChar@i,w,c
 13834  0023A4  0232               	mulwf	drawChar@size,c
 13835  0023A6  50F3               	movf	prodl,w,c
 13836  0023A8  2434               	addwf	drawChar@x,w,c
 13837  0023AA  ECA4  F01C         	call	_fillRect
 13838                           
 13839                           ;ST7735_TFT.c: 498: }
 13840  0023AE  D02A               	goto	l6090
 13841  0023B0                     l6082:
 13842                           
 13843                           ;ST7735_TFT.c: 499: else if(bg != color) {
 13844  0023B0  502E               	movf	drawChar@color,w,c
 13845  0023B2  1830               	xorwf	drawChar@bg,w,c
 13846  0023B4  E104               	bnz	u5840
 13847  0023B6  502F               	movf	drawChar@color+1,w,c
 13848  0023B8  1831               	xorwf	drawChar@bg+1,w,c
 13849  0023BA  B4D8               	btfsc	status,2,c
 13850  0023BC  D023               	goto	l6090
 13851  0023BE                     u5840:
 13852                           
 13853                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 13854  0023BE  0432               	decf	drawChar@size,w,c
 13855  0023C0  A4D8               	btfss	status,2,c
 13856  0023C2  D00C               	goto	l6088
 13857  0023C4  502C               	movf	drawChar@y,w,c
 13858  0023C6  2435               	addwf	drawChar@j,w,c
 13859  0023C8  6E16               	movwf	drawPixel@y,c
 13860  0023CA  C030  F017         	movff	drawChar@bg,drawPixel@color
 13861  0023CE  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 13862  0023D2  5034               	movf	drawChar@x,w,c
 13863  0023D4  2436               	addwf	drawChar@i,w,c
 13864  0023D6  EC09  F01E         	call	_drawPixel
 13865  0023DA  D014               	goto	l6090
 13866  0023DC                     l6088:
 13867                           
 13868                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 13869  0023DC  5035               	movf	drawChar@j,w,c
 13870  0023DE  0232               	mulwf	drawChar@size,c
 13871  0023E0  50F3               	movf	prodl,w,c
 13872  0023E2  242C               	addwf	drawChar@y,w,c
 13873  0023E4  6E21               	movwf	fillRect@y,c
 13874  0023E6  C032  F022         	movff	drawChar@size,fillRect@w
 13875  0023EA  C032  F023         	movff	drawChar@size,fillRect@h
 13876  0023EE  C030  F024         	movff	drawChar@bg,fillRect@color
 13877  0023F2  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 13878  0023F6  5036               	movf	drawChar@i,w,c
 13879  0023F8  0232               	mulwf	drawChar@size,c
 13880  0023FA  50F3               	movf	prodl,w,c
 13881  0023FC  2434               	addwf	drawChar@x,w,c
 13882  0023FE  ECA4  F01C         	call	_fillRect
 13883  002402  D000               	goto	l6090
 13884  002404                     l6090:
 13885  002404  2A35               	incf	drawChar@j,f,c
 13886  002406  90D8               	bcf	status,0,c
 13887  002408  3233               	rrcf	drawChar@line,f,c
 13888  00240A  D7A9               	goto	l6072
 13889  00240C                     l6096:
 13890  00240C  2A36               	incf	drawChar@i,f,c
 13891  00240E  D76F               	goto	l6060
 13892  002410                     l225:
 13893  002410  0012               	return		;funcret
 13894  002412                     __end_of_drawChar:
 13895                           	opt stack 0
 13896                           tblptru	equ	0xFF8
 13897                           tblptrh	equ	0xFF7
 13898                           tblptrl	equ	0xFF6
 13899                           tablat	equ	0xFF5
 13900                           prodh	equ	0xFF4
 13901                           prodl	equ	0xFF3
 13902                           intcon	equ	0xFF2
 13903                           intcon2	equ	0xFF1
 13904                           intcon3	equ	0xFF0
 13905                           postinc0	equ	0xFEE
 13906                           wreg	equ	0xFE8
 13907                           postdec1	equ	0xFE5
 13908                           fsr1l	equ	0xFE1
 13909                           indf2	equ	0xFDF
 13910                           postinc2	equ	0xFDE
 13911                           postdec2	equ	0xFDD
 13912                           fsr2h	equ	0xFDA
 13913                           fsr2l	equ	0xFD9
 13914                           status	equ	0xFD8
 13915                           
 13916 ;; *************** function _fillRect *****************
 13917 ;; Defined at:
 13918 ;;		line 470 in file "ST7735_TFT.c"
 13919 ;; Parameters:    Size  Location     Type
 13920 ;;  x               1    wreg     unsigned char 
 13921 ;;  y               1   32[COMRAM] unsigned char 
 13922 ;;  w               1   33[COMRAM] unsigned char 
 13923 ;;  h               1   34[COMRAM] unsigned char 
 13924 ;;  color           2   35[COMRAM] unsigned int 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;  x               1   40[COMRAM] unsigned char 
 13927 ;;  i               2   41[COMRAM] int 
 13928 ;; Return value:  Size  Location     Type
 13929 ;;		None               void
 13930 ;; Registers used:
 13931 ;;		wreg, status,2, status,0, cstack
 13932 ;; Tracked objects:
 13933 ;;		On entry : 0/0
 13934 ;;		On exit  : 0/0
 13935 ;;		Unchanged: 0/0
 13936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13937 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13938 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13939 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13940 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;Total ram usage:       11 bytes
 13942 ;; Hardware stack levels used:    1
 13943 ;; Hardware stack levels required when called:    6
 13944 ;; This function calls:
 13945 ;;		_drawFastVLine
 13946 ;; This function is called by:
 13947 ;;		_drawChar
 13948 ;; This function uses a non-reentrant model
 13949 ;;
 13950                           
 13951                           	psect	text58
 13952  003948                     __ptext58:
 13953                           	opt stack 0
 13954  003948                     _fillRect:
 13955                           	opt stack 19
 13956                           
 13957                           ;incstack = 0
 13958                           ;fillRect@x stored from wreg
 13959  003948  6E29               	movwf	fillRect@x,c
 13960                           
 13961                           ;ST7735_TFT.c: 472: signed int i;
 13962                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 13963  00394A  C029  F02A         	movff	fillRect@x,fillRect@i
 13964  00394E  6A2B               	clrf	fillRect@i+1,c
 13965  003950  D00E               	goto	l5790
 13966  003952                     l5786:
 13967                           
 13968                           ;ST7735_TFT.c: 475: {
 13969                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 13970  003952  C021  F016         	movff	fillRect@y,drawFastVLine@y
 13971  003956  C023  F017         	movff	fillRect@h,drawFastVLine@h
 13972  00395A  C024  F018         	movff	fillRect@color,drawFastVLine@color
 13973  00395E  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 13974  003962  502A               	movf	fillRect@i,w,c
 13975  003964  ECF0  F019         	call	_drawFastVLine
 13976  003968  4A2A               	infsnz	fillRect@i,f,c
 13977  00396A  2A2B               	incf	fillRect@i+1,f,c
 13978  00396C  D000               	goto	l5790
 13979  00396E                     l5790:
 13980  00396E  5022               	movf	fillRect@w,w,c
 13981  003970  C029  F026         	movff	fillRect@x,??_fillRect
 13982  003974  6A27               	clrf	(??_fillRect+1)& (0+255),c
 13983  003976  2626               	addwf	??_fillRect,f,c
 13984  003978  0E00               	movlw	0
 13985  00397A  2227               	addwfc	??_fillRect+1,f,c
 13986  00397C  5026               	movf	??_fillRect,w,c
 13987  00397E  5C2A               	subwf	fillRect@i,w,c
 13988  003980  502B               	movf	fillRect@i+1,w,c
 13989  003982  0A80               	xorlw	128
 13990  003984  6E28               	movwf	(??_fillRect+2)& (0+255),c
 13991  003986  5027               	movf	??_fillRect+1,w,c
 13992  003988  0A80               	xorlw	128
 13993  00398A  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 13994  00398C  A0D8               	btfss	status,0,c
 13995  00398E  D7E1               	goto	l5786
 13996  003990  0012               	return		;funcret
 13997  003992                     __end_of_fillRect:
 13998                           	opt stack 0
 13999                           tblptru	equ	0xFF8
 14000                           tblptrh	equ	0xFF7
 14001                           tblptrl	equ	0xFF6
 14002                           tablat	equ	0xFF5
 14003                           prodh	equ	0xFF4
 14004                           prodl	equ	0xFF3
 14005                           intcon	equ	0xFF2
 14006                           intcon2	equ	0xFF1
 14007                           intcon3	equ	0xFF0
 14008                           postinc0	equ	0xFEE
 14009                           wreg	equ	0xFE8
 14010                           postdec1	equ	0xFE5
 14011                           fsr1l	equ	0xFE1
 14012                           indf2	equ	0xFDF
 14013                           postinc2	equ	0xFDE
 14014                           postdec2	equ	0xFDD
 14015                           fsr2h	equ	0xFDA
 14016                           fsr2l	equ	0xFD9
 14017                           status	equ	0xFD8
 14018                           
 14019 ;; *************** function _drawFastVLine *****************
 14020 ;; Defined at:
 14021 ;;		line 449 in file "ST7735_TFT.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  x               1    wreg     unsigned char 
 14024 ;;  y               1   21[COMRAM] unsigned char 
 14025 ;;  h               1   22[COMRAM] unsigned char 
 14026 ;;  color           2   23[COMRAM] unsigned int 
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;  x               1   31[COMRAM] unsigned char 
 14029 ;;  lo              1   30[COMRAM] unsigned char 
 14030 ;;  hi              1   29[COMRAM] unsigned char 
 14031 ;; Return value:  Size  Location     Type
 14032 ;;		None               void
 14033 ;; Registers used:
 14034 ;;		wreg, status,2, status,0, cstack
 14035 ;; Tracked objects:
 14036 ;;		On entry : 0/0
 14037 ;;		On exit  : 0/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14041 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14042 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14043 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14044 ;;Total ram usage:       11 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:    5
 14047 ;; This function calls:
 14048 ;;		_setAddrWindow
 14049 ;;		_spiwrite
 14050 ;; This function is called by:
 14051 ;;		_fillRect
 14052 ;;		_fillCircleHelper
 14053 ;;		_fillCircle
 14054 ;;		_drawRect
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text59
 14059  0033E0                     __ptext59:
 14060                           	opt stack 0
 14061  0033E0                     _drawFastVLine:
 14062                           	opt stack 19
 14063                           
 14064                           ;incstack = 0
 14065                           ;drawFastVLine@x stored from wreg
 14066  0033E0  6E20               	movwf	drawFastVLine@x,c
 14067                           
 14068                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 14069                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 14070  0033E2  0E80               	movlw	128
 14071  0033E4  6020               	cpfslt	drawFastVLine@x,c
 14072  0033E6  D03F               	goto	l209
 14073  0033E8  0E9F               	movlw	159
 14074  0033EA  6416               	cpfsgt	drawFastVLine@y,c
 14075  0033EC  D001               	goto	l5720
 14076                           
 14077                           ;ST7735_TFT.c: 453: return;
 14078  0033EE  D03B               	goto	l209
 14079  0033F0                     l5720:
 14080                           
 14081                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 14082  0033F0  0EFF               	movlw	255
 14083  0033F2  6E1A               	movwf	??_drawFastVLine& (0+255),c
 14084  0033F4  0EFF               	movlw	255
 14085  0033F6  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 14086  0033F8  5017               	movf	drawFastVLine@h,w,c
 14087  0033FA  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 14088  0033FE  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 14089  003400  261C               	addwf	??_drawFastVLine+2,f,c
 14090  003402  0E00               	movlw	0
 14091  003404  221D               	addwfc	??_drawFastVLine+3,f,c
 14092  003406  501A               	movf	??_drawFastVLine,w,c
 14093  003408  261C               	addwf	??_drawFastVLine+2,f,c
 14094  00340A  501B               	movf	??_drawFastVLine+1,w,c
 14095  00340C  221D               	addwfc	??_drawFastVLine+3,f,c
 14096  00340E  BE1D               	btfsc	??_drawFastVLine+3,7,c
 14097  003410  D00B               	goto	l5724
 14098  003412  501D               	movf	??_drawFastVLine+3,w,c
 14099  003414  E104               	bnz	u5120
 14100  003416  0EA0               	movlw	160
 14101  003418  5C1C               	subwf	??_drawFastVLine+2,w,c
 14102  00341A  A0D8               	btfss	status,0,c
 14103  00341C  D005               	goto	l5724
 14104  00341E                     u5120:
 14105                           
 14106                           ;ST7735_TFT.c: 455: h = 160 - y;
 14107  00341E  5016               	movf	drawFastVLine@y,w,c
 14108  003420  0800               	sublw	0
 14109  003422  0FA0               	addlw	160
 14110  003424  6E17               	movwf	drawFastVLine@h,c
 14111  003426  D000               	goto	l5724
 14112  003428                     l5724:
 14113                           
 14114                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 14115  003428  5019               	movf	drawFastVLine@color+1,w,c
 14116  00342A  6E1E               	movwf	drawFastVLine@hi,c
 14117  00342C  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 14118                           
 14119                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 14120  003430  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 14121  003434  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 14122  003438  5016               	movf	drawFastVLine@y,w,c
 14123  00343A  2417               	addwf	drawFastVLine@h,w,c
 14124  00343C  6E1A               	movwf	??_drawFastVLine& (0+255),c
 14125  00343E  041A               	decf	??_drawFastVLine,w,c
 14126  003440  6E14               	movwf	setAddrWindow@y1,c
 14127  003442  5020               	movf	drawFastVLine@x,w,c
 14128  003444  EC7D  F01C         	call	_setAddrWindow
 14129                           
 14130                           ;ST7735_TFT.c: 458: PORTCbits.RC2 = 1;
 14131  003448  8482               	bsf	3970,2,c	;volatile
 14132                           
 14133                           ;ST7735_TFT.c: 459: PORTCbits.RC4 = 0;
 14134  00344A  9882               	bcf	3970,4,c	;volatile
 14135                           
 14136                           ;ST7735_TFT.c: 461: while (h--) {
 14137  00344C  D007               	goto	l5736
 14138  00344E                     l5734:
 14139                           
 14140                           ;ST7735_TFT.c: 462: spiwrite(hi);
 14141  00344E  501E               	movf	drawFastVLine@hi,w,c
 14142  003450  ECE3  F01E         	call	_spiwrite
 14143                           
 14144                           ;ST7735_TFT.c: 463: spiwrite(lo);
 14145  003454  501F               	movf	drawFastVLine@lo,w,c
 14146  003456  ECE3  F01E         	call	_spiwrite
 14147  00345A  D000               	goto	l5736
 14148  00345C                     l5736:
 14149  00345C  0617               	decf	drawFastVLine@h,f,c
 14150  00345E  2817               	incf	drawFastVLine@h,w,c
 14151  003460  A4D8               	btfss	status,2,c
 14152  003462  D7F5               	goto	l5734
 14153                           
 14154                           ;ST7735_TFT.c: 464: }
 14155                           ;ST7735_TFT.c: 465: PORTCbits.RC4 = 1;
 14156  003464  8882               	bsf	3970,4,c	;volatile
 14157  003466                     l209:
 14158  003466  0012               	return		;funcret
 14159  003468                     __end_of_drawFastVLine:
 14160                           	opt stack 0
 14161                           tblptru	equ	0xFF8
 14162                           tblptrh	equ	0xFF7
 14163                           tblptrl	equ	0xFF6
 14164                           tablat	equ	0xFF5
 14165                           prodh	equ	0xFF4
 14166                           prodl	equ	0xFF3
 14167                           intcon	equ	0xFF2
 14168                           intcon2	equ	0xFF1
 14169                           intcon3	equ	0xFF0
 14170                           postinc0	equ	0xFEE
 14171                           wreg	equ	0xFE8
 14172                           postdec1	equ	0xFE5
 14173                           fsr1l	equ	0xFE1
 14174                           indf2	equ	0xFDF
 14175                           postinc2	equ	0xFDE
 14176                           postdec2	equ	0xFDD
 14177                           fsr2h	equ	0xFDA
 14178                           fsr2l	equ	0xFD9
 14179                           status	equ	0xFD8
 14180                           
 14181 ;; *************** function _drawPixel *****************
 14182 ;; Defined at:
 14183 ;;		line 440 in file "ST7735_TFT.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  x               1    wreg     unsigned char 
 14186 ;;  y               1   21[COMRAM] unsigned char 
 14187 ;;  color           2   22[COMRAM] unsigned int 
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;  x               1   24[COMRAM] unsigned char 
 14190 ;; Return value:  Size  Location     Type
 14191 ;;		None               void
 14192 ;; Registers used:
 14193 ;;		wreg, status,2, status,0, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/0
 14196 ;;		On exit  : 0/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14199 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;Total ram usage:        4 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    5
 14206 ;; This function calls:
 14207 ;;		_setAddrWindow
 14208 ;;		_write_data
 14209 ;; This function is called by:
 14210 ;;		_drawChar
 14211 ;;		_drawCircle
 14212 ;;		_drawCircleHelper
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text60
 14217  003C12                     __ptext60:
 14218                           	opt stack 0
 14219  003C12                     _drawPixel:
 14220                           	opt stack 20
 14221                           
 14222                           ;incstack = 0
 14223                           ;drawPixel@x stored from wreg
 14224  003C12  6E19               	movwf	drawPixel@x,c
 14225                           
 14226                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 14227  003C14  0E80               	movlw	128
 14228  003C16  6019               	cpfslt	drawPixel@x,c
 14229  003C18  D013               	goto	l203
 14230  003C1A  0E9F               	movlw	159
 14231  003C1C  6416               	cpfsgt	drawPixel@y,c
 14232  003C1E  D001               	goto	l5778
 14233                           
 14234                           ;ST7735_TFT.c: 443: return;
 14235  003C20  D00F               	goto	l203
 14236  003C22                     l5778:
 14237                           
 14238                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 14239  003C22  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 14240  003C26  2819               	incf	drawPixel@x,w,c
 14241  003C28  6E13               	movwf	setAddrWindow@x1,c
 14242  003C2A  2816               	incf	drawPixel@y,w,c
 14243  003C2C  6E14               	movwf	setAddrWindow@y1,c
 14244  003C2E  5019               	movf	drawPixel@x,w,c
 14245  003C30  EC7D  F01C         	call	_setAddrWindow
 14246                           
 14247                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 14248  003C34  5018               	movf	drawPixel@color+1,w,c
 14249  003C36  ECFF  F01E         	call	_write_data
 14250                           
 14251                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 14252  003C3A  5017               	movf	drawPixel@color,w,c
 14253  003C3C  ECFF  F01E         	call	_write_data
 14254  003C40                     l203:
 14255  003C40  0012               	return		;funcret
 14256  003C42                     __end_of_drawPixel:
 14257                           	opt stack 0
 14258                           tblptru	equ	0xFF8
 14259                           tblptrh	equ	0xFF7
 14260                           tblptrl	equ	0xFF6
 14261                           tablat	equ	0xFF5
 14262                           prodh	equ	0xFF4
 14263                           prodl	equ	0xFF3
 14264                           intcon	equ	0xFF2
 14265                           intcon2	equ	0xFF1
 14266                           intcon3	equ	0xFF0
 14267                           postinc0	equ	0xFEE
 14268                           wreg	equ	0xFE8
 14269                           postdec1	equ	0xFE5
 14270                           fsr1l	equ	0xFE1
 14271                           indf2	equ	0xFDF
 14272                           postinc2	equ	0xFDE
 14273                           postdec2	equ	0xFDD
 14274                           fsr2h	equ	0xFDA
 14275                           fsr2l	equ	0xFD9
 14276                           status	equ	0xFD8
 14277                           
 14278 ;; *************** function _setAddrWindow *****************
 14279 ;; Defined at:
 14280 ;;		line 425 in file "ST7735_TFT.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  x0              1    wreg     unsigned char 
 14283 ;;  y0              1   17[COMRAM] unsigned char 
 14284 ;;  x1              1   18[COMRAM] unsigned char 
 14285 ;;  y1              1   19[COMRAM] unsigned char 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;  x0              1   20[COMRAM] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;		None               void
 14290 ;; Registers used:
 14291 ;;		wreg, status,2, status,0, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14301 ;;Total ram usage:        4 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    4
 14304 ;; This function calls:
 14305 ;;		_write_command
 14306 ;;		_write_data
 14307 ;; This function is called by:
 14308 ;;		_drawPixel
 14309 ;;		_drawFastVLine
 14310 ;;		_fillRectangle
 14311 ;;		_drawFastHLine
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           	psect	text61
 14316  0038FA                     __ptext61:
 14317                           	opt stack 0
 14318  0038FA                     _setAddrWindow:
 14319                           	opt stack 19
 14320                           
 14321                           ;incstack = 0
 14322                           ;setAddrWindow@x0 stored from wreg
 14323  0038FA  6E15               	movwf	setAddrWindow@x0,c
 14324                           
 14325                           ;ST7735_TFT.c: 427: write_command(0x2A);
 14326  0038FC  0E2A               	movlw	42
 14327  0038FE  EC07  F01F         	call	_write_command
 14328                           
 14329                           ;ST7735_TFT.c: 428: write_data(0);
 14330  003902  0E00               	movlw	0
 14331  003904  ECFF  F01E         	call	_write_data
 14332                           
 14333                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 14334  003908  5015               	movf	setAddrWindow@x0,w,c
 14335  00390A  2469               	addwf	_colstart,w,c
 14336  00390C  ECFF  F01E         	call	_write_data
 14337                           
 14338                           ;ST7735_TFT.c: 430: write_data(0);
 14339  003910  0E00               	movlw	0
 14340  003912  ECFF  F01E         	call	_write_data
 14341                           
 14342                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 14343  003916  5013               	movf	setAddrWindow@x1,w,c
 14344  003918  2469               	addwf	_colstart,w,c
 14345  00391A  ECFF  F01E         	call	_write_data
 14346                           
 14347                           ;ST7735_TFT.c: 432: write_command(0x2B);
 14348  00391E  0E2B               	movlw	43
 14349  003920  EC07  F01F         	call	_write_command
 14350                           
 14351                           ;ST7735_TFT.c: 433: write_data(0);
 14352  003924  0E00               	movlw	0
 14353  003926  ECFF  F01E         	call	_write_data
 14354                           
 14355                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 14356  00392A  5012               	movf	setAddrWindow@y0,w,c
 14357  00392C  246B               	addwf	_rowstart,w,c
 14358  00392E  ECFF  F01E         	call	_write_data
 14359                           
 14360                           ;ST7735_TFT.c: 435: write_data(0);
 14361  003932  0E00               	movlw	0
 14362  003934  ECFF  F01E         	call	_write_data
 14363                           
 14364                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 14365  003938  5014               	movf	setAddrWindow@y1,w,c
 14366  00393A  246B               	addwf	_rowstart,w,c
 14367  00393C  ECFF  F01E         	call	_write_data
 14368                           
 14369                           ;ST7735_TFT.c: 437: write_command(0x2C);
 14370  003940  0E2C               	movlw	44
 14371  003942  EC07  F01F         	call	_write_command
 14372  003946  0012               	return		;funcret
 14373  003948                     __end_of_setAddrWindow:
 14374                           	opt stack 0
 14375                           tblptru	equ	0xFF8
 14376                           tblptrh	equ	0xFF7
 14377                           tblptrl	equ	0xFF6
 14378                           tablat	equ	0xFF5
 14379                           prodh	equ	0xFF4
 14380                           prodl	equ	0xFF3
 14381                           intcon	equ	0xFF2
 14382                           intcon2	equ	0xFF1
 14383                           intcon3	equ	0xFF0
 14384                           postinc0	equ	0xFEE
 14385                           wreg	equ	0xFE8
 14386                           postdec1	equ	0xFE5
 14387                           fsr1l	equ	0xFE1
 14388                           indf2	equ	0xFDF
 14389                           postinc2	equ	0xFDE
 14390                           postdec2	equ	0xFDD
 14391                           fsr2h	equ	0xFDA
 14392                           fsr2l	equ	0xFD9
 14393                           status	equ	0xFD8
 14394                           
 14395 ;; *************** function _write_data *****************
 14396 ;; Defined at:
 14397 ;;		line 242 in file "ST7735_TFT.c"
 14398 ;; Parameters:    Size  Location     Type
 14399 ;;  data_           1    wreg     unsigned char 
 14400 ;; Auto vars:     Size  Location     Type
 14401 ;;  data_           1   16[COMRAM] unsigned char 
 14402 ;; Return value:  Size  Location     Type
 14403 ;;		None               void
 14404 ;; Registers used:
 14405 ;;		wreg, status,2, cstack
 14406 ;; Tracked objects:
 14407 ;;		On entry : 0/0
 14408 ;;		On exit  : 0/0
 14409 ;;		Unchanged: 0/0
 14410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14415 ;;Total ram usage:        1 bytes
 14416 ;; Hardware stack levels used:    1
 14417 ;; Hardware stack levels required when called:    3
 14418 ;; This function calls:
 14419 ;;		_spiwrite
 14420 ;; This function is called by:
 14421 ;;		_Rcmd1
 14422 ;;		_Rcmd2red
 14423 ;;		_Rcmd3
 14424 ;;		_setAddrWindow
 14425 ;;		_drawPixel
 14426 ;;		_TFT_GreenTab_Initialize
 14427 ;;		_Bcmd
 14428 ;;		_setScrollDefinition
 14429 ;;		_Rcmd2green
 14430 ;;		_VerticalScroll
 14431 ;; This function uses a non-reentrant model
 14432 ;;
 14433                           
 14434                           	psect	text62
 14435  003DFE                     __ptext62:
 14436                           	opt stack 0
 14437  003DFE                     _write_data:
 14438                           	opt stack 19
 14439                           
 14440                           ;incstack = 0
 14441                           ;write_data@data_ stored from wreg
 14442  003DFE  6E11               	movwf	write_data@data_,c
 14443                           
 14444                           ;ST7735_TFT.c: 244: PORTCbits.RC4 = 0;
 14445  003E00  9882               	bcf	3970,4,c	;volatile
 14446                           
 14447                           ;ST7735_TFT.c: 245: PORTCbits.RC2 = 1;
 14448  003E02  8482               	bsf	3970,2,c	;volatile
 14449                           
 14450                           ;ST7735_TFT.c: 246: spiwrite(data_);
 14451  003E04  5011               	movf	write_data@data_,w,c
 14452  003E06  ECE3  F01E         	call	_spiwrite
 14453                           
 14454                           ;ST7735_TFT.c: 247: PORTCbits.RC4 = 1;
 14455  003E0A  8882               	bsf	3970,4,c	;volatile
 14456  003E0C  0012               	return		;funcret
 14457  003E0E                     __end_of_write_data:
 14458                           	opt stack 0
 14459                           tblptru	equ	0xFF8
 14460                           tblptrh	equ	0xFF7
 14461                           tblptrl	equ	0xFF6
 14462                           tablat	equ	0xFF5
 14463                           prodh	equ	0xFF4
 14464                           prodl	equ	0xFF3
 14465                           intcon	equ	0xFF2
 14466                           intcon2	equ	0xFF1
 14467                           intcon3	equ	0xFF0
 14468                           postinc0	equ	0xFEE
 14469                           wreg	equ	0xFE8
 14470                           postdec1	equ	0xFE5
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function _write_command *****************
 14480 ;; Defined at:
 14481 ;;		line 231 in file "ST7735_TFT.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  cmd_            1    wreg     unsigned char 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  cmd_            1   16[COMRAM] unsigned char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;		None               void
 14488 ;; Registers used:
 14489 ;;		wreg, status,2, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;Total ram usage:        1 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    3
 14502 ;; This function calls:
 14503 ;;		_spiwrite
 14504 ;; This function is called by:
 14505 ;;		_Rcmd1
 14506 ;;		_Rcmd2red
 14507 ;;		_Rcmd3
 14508 ;;		_setAddrWindow
 14509 ;;		_TFT_GreenTab_Initialize
 14510 ;;		_Bcmd
 14511 ;;		_setScrollDefinition
 14512 ;;		_Rcmd2green
 14513 ;;		_VerticalScroll
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           	psect	text63
 14518  003E0E                     __ptext63:
 14519                           	opt stack 0
 14520  003E0E                     _write_command:
 14521                           	opt stack 19
 14522                           
 14523                           ;incstack = 0
 14524                           ;write_command@cmd_ stored from wreg
 14525  003E0E  6E11               	movwf	write_command@cmd_,c
 14526                           
 14527                           ;ST7735_TFT.c: 233: PORTCbits.RC4 = 0;
 14528  003E10  9882               	bcf	3970,4,c	;volatile
 14529                           
 14530                           ;ST7735_TFT.c: 235: PORTCbits.RC2 = 0;
 14531  003E12  9482               	bcf	3970,2,c	;volatile
 14532                           
 14533                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 14534  003E14  5011               	movf	write_command@cmd_,w,c
 14535  003E16  ECE3  F01E         	call	_spiwrite
 14536                           
 14537                           ;ST7735_TFT.c: 238: PORTCbits.RC4 = 1;
 14538  003E1A  8882               	bsf	3970,4,c	;volatile
 14539  003E1C  0012               	return		;funcret
 14540  003E1E                     __end_of_write_command:
 14541                           	opt stack 0
 14542                           tblptru	equ	0xFF8
 14543                           tblptrh	equ	0xFF7
 14544                           tblptrl	equ	0xFF6
 14545                           tablat	equ	0xFF5
 14546                           prodh	equ	0xFF4
 14547                           prodl	equ	0xFF3
 14548                           intcon	equ	0xFF2
 14549                           intcon2	equ	0xFF1
 14550                           intcon3	equ	0xFF0
 14551                           postinc0	equ	0xFEE
 14552                           wreg	equ	0xFE8
 14553                           postdec1	equ	0xFE5
 14554                           fsr1l	equ	0xFE1
 14555                           indf2	equ	0xFDF
 14556                           postinc2	equ	0xFDE
 14557                           postdec2	equ	0xFDD
 14558                           fsr2h	equ	0xFDA
 14559                           fsr2l	equ	0xFD9
 14560                           status	equ	0xFD8
 14561                           
 14562 ;; *************** function _spiwrite *****************
 14563 ;; Defined at:
 14564 ;;		line 222 in file "ST7735_TFT.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;  spidata         1    wreg     unsigned char 
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;  spidata         1   15[COMRAM] unsigned char 
 14569 ;;  x               1   14[COMRAM] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;		None               void
 14572 ;; Registers used:
 14573 ;;		wreg
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14582 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14583 ;;Total ram usage:        2 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    2
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_write_command
 14590 ;;		_write_data
 14591 ;;		_drawFastVLine
 14592 ;;		_fillRectangle
 14593 ;;		_drawFastHLine
 14594 ;; This function uses a non-reentrant model
 14595 ;;
 14596                           
 14597                           	psect	text64
 14598  003DC6                     __ptext64:
 14599                           	opt stack 0
 14600  003DC6                     _spiwrite:
 14601                           	opt stack 21
 14602                           
 14603                           ;incstack = 0
 14604                           ;spiwrite@spidata stored from wreg
 14605  003DC6  6E10               	movwf	spiwrite@spidata,c
 14606                           
 14607                           ;ST7735_TFT.c: 224: char x;
 14608                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 14609  003DC8  969E               	bcf	3998,3,c	;volatile
 14610                           
 14611                           ;ST7735_TFT.c: 226: x = SSPBUF;
 14612  003DCA  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 14613                           
 14614                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 14615  003DCE  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 14616                           
 14617                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 14618  003DD2  D000               	goto	l159
 14619  003DD4                     l159:
 14620  003DD4  A0C7               	btfss	4039,0,c	;volatile
 14621  003DD6  D7FE               	goto	l159
 14622  003DD8  0012               	return		;funcret
 14623  003DDA                     __end_of_spiwrite:
 14624                           	opt stack 0
 14625                           tblptru	equ	0xFF8
 14626                           tblptrh	equ	0xFF7
 14627                           tblptrl	equ	0xFF6
 14628                           tablat	equ	0xFF5
 14629                           prodh	equ	0xFF4
 14630                           prodl	equ	0xFF3
 14631                           intcon	equ	0xFF2
 14632                           intcon2	equ	0xFF1
 14633                           intcon3	equ	0xFF0
 14634                           postinc0	equ	0xFEE
 14635                           wreg	equ	0xFE8
 14636                           postdec1	equ	0xFE5
 14637                           fsr1l	equ	0xFE1
 14638                           indf2	equ	0xFDF
 14639                           postinc2	equ	0xFDE
 14640                           postdec2	equ	0xFDD
 14641                           fsr2h	equ	0xFDA
 14642                           fsr2l	equ	0xFD9
 14643                           status	equ	0xFD8
 14644                           
 14645 ;; *************** function ___wmul *****************
 14646 ;; Defined at:
 14647 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;  multiplier      2   28[COMRAM] unsigned int 
 14650 ;;  multiplicand    2   30[COMRAM] unsigned int 
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;  product         2   32[COMRAM] unsigned int 
 14653 ;; Return value:  Size  Location     Type
 14654 ;;                  2   28[COMRAM] unsigned int 
 14655 ;; Registers used:
 14656 ;;		wreg, status,2, status,0, prodl, prodh
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14666 ;;Total ram usage:        6 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    2
 14669 ;; This function calls:
 14670 ;;		Nothing
 14671 ;; This function is called by:
 14672 ;;		_delay_ms
 14673 ;;		_drawChar
 14674 ;;		_update_LCD_misc
 14675 ;;		_fround
 14676 ;;		_scale
 14677 ;;		_printf
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           	psect	text65
 14682  003C96                     __ptext65:
 14683                           	opt stack 0
 14684  003C96                     ___wmul:
 14685                           	opt stack 23
 14686                           
 14687                           ;incstack = 0
 14688  003C96  501D               	movf	___wmul@multiplier,w,c
 14689  003C98  021F               	mulwf	___wmul@multiplicand,c
 14690  003C9A  CFF3 F021          	movff	prodl,___wmul@product
 14691  003C9E  CFF4 F022          	movff	prodh,___wmul@product+1
 14692  003CA2  501D               	movf	___wmul@multiplier,w,c
 14693  003CA4  0220               	mulwf	___wmul@multiplicand+1,c
 14694  003CA6  50F3               	movf	prodl,w,c
 14695  003CA8  2622               	addwf	___wmul@product+1,f,c
 14696  003CAA  501E               	movf	___wmul@multiplier+1,w,c
 14697  003CAC  021F               	mulwf	___wmul@multiplicand,c
 14698  003CAE  50F3               	movf	prodl,w,c
 14699  003CB0  2622               	addwf	___wmul@product+1,f,c
 14700  003CB2  C021  F01D         	movff	___wmul@product,?___wmul
 14701  003CB6  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 14702  003CBA  D000               	goto	l732
 14703  003CBC                     l732:
 14704  003CBC  0012               	return		;funcret
 14705  003CBE                     __end_of___wmul:
 14706                           	opt stack 0
 14707                           tblptru	equ	0xFF8
 14708                           tblptrh	equ	0xFF7
 14709                           tblptrl	equ	0xFF6
 14710                           tablat	equ	0xFF5
 14711                           prodh	equ	0xFF4
 14712                           prodl	equ	0xFF3
 14713                           intcon	equ	0xFF2
 14714                           intcon2	equ	0xFF1
 14715                           intcon3	equ	0xFF0
 14716                           postinc0	equ	0xFEE
 14717                           wreg	equ	0xFE8
 14718                           postdec1	equ	0xFE5
 14719                           fsr1l	equ	0xFE1
 14720                           indf2	equ	0xFDF
 14721                           postinc2	equ	0xFDE
 14722                           postdec2	equ	0xFDD
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function ___awmod *****************
 14728 ;; Defined at:
 14729 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;  dividend        2   14[COMRAM] int 
 14732 ;;  divisor         2   16[COMRAM] int 
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;  sign            1   19[COMRAM] unsigned char 
 14735 ;;  counter         1   18[COMRAM] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  2   14[COMRAM] int 
 14738 ;; Registers used:
 14739 ;;		wreg, status,2, status,0
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14749 ;;Total ram usage:        6 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    2
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_update_LCD_count
 14756 ;;		_update_LCD_PED_Count
 14757 ;;		_fround
 14758 ;;		_scale
 14759 ;; This function uses a non-reentrant model
 14760 ;;
 14761                           
 14762                           	psect	text66
 14763  003570                     __ptext66:
 14764                           	opt stack 0
 14765  003570                     ___awmod:
 14766                           	opt stack 25
 14767                           
 14768                           ;incstack = 0
 14769  003570  0E00               	movlw	0
 14770  003572  6E14               	movwf	___awmod@sign,c
 14771  003574  AE10               	btfss	___awmod@dividend+1,7,c
 14772  003576  D007               	goto	l6018
 14773  003578  6C0F               	negf	___awmod@dividend,c
 14774  00357A  1E10               	comf	___awmod@dividend+1,f,c
 14775  00357C  B0D8               	btfsc	status,0,c
 14776  00357E  2A10               	incf	___awmod@dividend+1,f,c
 14777  003580  0E01               	movlw	1
 14778  003582  6E14               	movwf	___awmod@sign,c
 14779  003584  D000               	goto	l6018
 14780  003586                     l6018:
 14781  003586  AE12               	btfss	___awmod@divisor+1,7,c
 14782  003588  D005               	goto	l6022
 14783  00358A  6C11               	negf	___awmod@divisor,c
 14784  00358C  1E12               	comf	___awmod@divisor+1,f,c
 14785  00358E  B0D8               	btfsc	status,0,c
 14786  003590  2A12               	incf	___awmod@divisor+1,f,c
 14787  003592  D000               	goto	l6022
 14788  003594                     l6022:
 14789  003594  5011               	movf	___awmod@divisor,w,c
 14790  003596  1012               	iorwf	___awmod@divisor+1,w,c
 14791  003598  B4D8               	btfsc	status,2,c
 14792  00359A  D01D               	goto	l6038
 14793  00359C  0E01               	movlw	1
 14794  00359E  6E13               	movwf	___awmod@counter,c
 14795  0035A0  D005               	goto	l6028
 14796  0035A2                     l6026:
 14797  0035A2  90D8               	bcf	status,0,c
 14798  0035A4  3611               	rlcf	___awmod@divisor,f,c
 14799  0035A6  3612               	rlcf	___awmod@divisor+1,f,c
 14800  0035A8  2A13               	incf	___awmod@counter,f,c
 14801  0035AA  D000               	goto	l6028
 14802  0035AC                     l6028:
 14803  0035AC  BE12               	btfsc	___awmod@divisor+1,7,c
 14804  0035AE  D002               	goto	l6030
 14805  0035B0  D7F8               	goto	l6026
 14806  0035B2  D000               	goto	l6030
 14807  0035B4                     l6030:
 14808  0035B4  5011               	movf	___awmod@divisor,w,c
 14809  0035B6  5C0F               	subwf	___awmod@dividend,w,c
 14810  0035B8  5012               	movf	___awmod@divisor+1,w,c
 14811  0035BA  5810               	subwfb	___awmod@dividend+1,w,c
 14812  0035BC  A0D8               	btfss	status,0,c
 14813  0035BE  D005               	goto	l6034
 14814  0035C0  5011               	movf	___awmod@divisor,w,c
 14815  0035C2  5E0F               	subwf	___awmod@dividend,f,c
 14816  0035C4  5012               	movf	___awmod@divisor+1,w,c
 14817  0035C6  5A10               	subwfb	___awmod@dividend+1,f,c
 14818  0035C8  D000               	goto	l6034
 14819  0035CA                     l6034:
 14820  0035CA  90D8               	bcf	status,0,c
 14821  0035CC  3212               	rrcf	___awmod@divisor+1,f,c
 14822  0035CE  3211               	rrcf	___awmod@divisor,f,c
 14823  0035D0  2E13               	decfsz	___awmod@counter,f,c
 14824  0035D2  D7F0               	goto	l6030
 14825  0035D4  D000               	goto	l6038
 14826  0035D6                     l6038:
 14827  0035D6  5014               	movf	___awmod@sign,w,c
 14828  0035D8  B4D8               	btfsc	status,2,c
 14829  0035DA  D005               	goto	l6042
 14830  0035DC  6C0F               	negf	___awmod@dividend,c
 14831  0035DE  1E10               	comf	___awmod@dividend+1,f,c
 14832  0035E0  B0D8               	btfsc	status,0,c
 14833  0035E2  2A10               	incf	___awmod@dividend+1,f,c
 14834  0035E4  D000               	goto	l6042
 14835  0035E6                     l6042:
 14836  0035E6  C00F  F00F         	movff	___awmod@dividend,?___awmod
 14837  0035EA  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 14838  0035EE  D000               	goto	l938
 14839  0035F0                     l938:
 14840  0035F0  0012               	return		;funcret
 14841  0035F2                     __end_of___awmod:
 14842                           	opt stack 0
 14843                           tblptru	equ	0xFF8
 14844                           tblptrh	equ	0xFF7
 14845                           tblptrl	equ	0xFF6
 14846                           tablat	equ	0xFF5
 14847                           prodh	equ	0xFF4
 14848                           prodl	equ	0xFF3
 14849                           intcon	equ	0xFF2
 14850                           intcon2	equ	0xFF1
 14851                           intcon3	equ	0xFF0
 14852                           postinc0	equ	0xFEE
 14853                           wreg	equ	0xFE8
 14854                           postdec1	equ	0xFE5
 14855                           fsr1l	equ	0xFE1
 14856                           indf2	equ	0xFDF
 14857                           postinc2	equ	0xFDE
 14858                           postdec2	equ	0xFDD
 14859                           fsr2h	equ	0xFDA
 14860                           fsr2l	equ	0xFD9
 14861                           status	equ	0xFD8
 14862                           
 14863 ;; *************** function ___awdiv *****************
 14864 ;; Defined at:
 14865 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;  dividend        2   20[COMRAM] int 
 14868 ;;  divisor         2   22[COMRAM] int 
 14869 ;; Auto vars:     Size  Location     Type
 14870 ;;  quotient        2   26[COMRAM] int 
 14871 ;;  sign            1   25[COMRAM] unsigned char 
 14872 ;;  counter         1   24[COMRAM] unsigned char 
 14873 ;; Return value:  Size  Location     Type
 14874 ;;                  2   20[COMRAM] int 
 14875 ;; Registers used:
 14876 ;;		wreg, status,2, status,0
 14877 ;; Tracked objects:
 14878 ;;		On entry : 0/0
 14879 ;;		On exit  : 0/0
 14880 ;;		Unchanged: 0/0
 14881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14882 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14883 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14886 ;;Total ram usage:        8 bytes
 14887 ;; Hardware stack levels used:    1
 14888 ;; Hardware stack levels required when called:    2
 14889 ;; This function calls:
 14890 ;;		Nothing
 14891 ;; This function is called by:
 14892 ;;		_update_LCD_count
 14893 ;;		_update_LCD_PED_Count
 14894 ;;		_fround
 14895 ;;		_scale
 14896 ;;		_printf
 14897 ;; This function uses a non-reentrant model
 14898 ;;
 14899                           
 14900                           	psect	text67
 14901  003236                     __ptext67:
 14902                           	opt stack 0
 14903  003236                     ___awdiv:
 14904                           	opt stack 25
 14905                           
 14906                           ;incstack = 0
 14907  003236  0E00               	movlw	0
 14908  003238  6E1A               	movwf	___awdiv@sign,c
 14909  00323A  AE18               	btfss	___awdiv@divisor+1,7,c
 14910  00323C  D007               	goto	l5974
 14911  00323E  6C17               	negf	___awdiv@divisor,c
 14912  003240  1E18               	comf	___awdiv@divisor+1,f,c
 14913  003242  B0D8               	btfsc	status,0,c
 14914  003244  2A18               	incf	___awdiv@divisor+1,f,c
 14915  003246  0E01               	movlw	1
 14916  003248  6E1A               	movwf	___awdiv@sign,c
 14917  00324A  D000               	goto	l5974
 14918  00324C                     l5974:
 14919  00324C  AE16               	btfss	___awdiv@dividend+1,7,c
 14920  00324E  D007               	goto	l5980
 14921  003250  6C15               	negf	___awdiv@dividend,c
 14922  003252  1E16               	comf	___awdiv@dividend+1,f,c
 14923  003254  B0D8               	btfsc	status,0,c
 14924  003256  2A16               	incf	___awdiv@dividend+1,f,c
 14925  003258  0E01               	movlw	1
 14926  00325A  1A1A               	xorwf	___awdiv@sign,f,c
 14927  00325C  D000               	goto	l5980
 14928  00325E                     l5980:
 14929  00325E  0E00               	movlw	0
 14930  003260  6E1C               	movwf	___awdiv@quotient+1,c
 14931  003262  0E00               	movlw	0
 14932  003264  6E1B               	movwf	___awdiv@quotient,c
 14933  003266  5017               	movf	___awdiv@divisor,w,c
 14934  003268  1018               	iorwf	___awdiv@divisor+1,w,c
 14935  00326A  B4D8               	btfsc	status,2,c
 14936  00326C  D021               	goto	l6002
 14937  00326E  0E01               	movlw	1
 14938  003270  6E19               	movwf	___awdiv@counter,c
 14939  003272  D005               	goto	l5988
 14940  003274                     l5986:
 14941  003274  90D8               	bcf	status,0,c
 14942  003276  3617               	rlcf	___awdiv@divisor,f,c
 14943  003278  3618               	rlcf	___awdiv@divisor+1,f,c
 14944  00327A  2A19               	incf	___awdiv@counter,f,c
 14945  00327C  D000               	goto	l5988
 14946  00327E                     l5988:
 14947  00327E  BE18               	btfsc	___awdiv@divisor+1,7,c
 14948  003280  D002               	goto	l5990
 14949  003282  D7F8               	goto	l5986
 14950  003284  D000               	goto	l5990
 14951  003286                     l5990:
 14952  003286  90D8               	bcf	status,0,c
 14953  003288  361B               	rlcf	___awdiv@quotient,f,c
 14954  00328A  361C               	rlcf	___awdiv@quotient+1,f,c
 14955  00328C  5017               	movf	___awdiv@divisor,w,c
 14956  00328E  5C15               	subwf	___awdiv@dividend,w,c
 14957  003290  5018               	movf	___awdiv@divisor+1,w,c
 14958  003292  5816               	subwfb	___awdiv@dividend+1,w,c
 14959  003294  A0D8               	btfss	status,0,c
 14960  003296  D006               	goto	l5998
 14961  003298  5017               	movf	___awdiv@divisor,w,c
 14962  00329A  5E15               	subwf	___awdiv@dividend,f,c
 14963  00329C  5018               	movf	___awdiv@divisor+1,w,c
 14964  00329E  5A16               	subwfb	___awdiv@dividend+1,f,c
 14965  0032A0  801B               	bsf	___awdiv@quotient,0,c
 14966  0032A2  D000               	goto	l5998
 14967  0032A4                     l5998:
 14968  0032A4  90D8               	bcf	status,0,c
 14969  0032A6  3218               	rrcf	___awdiv@divisor+1,f,c
 14970  0032A8  3217               	rrcf	___awdiv@divisor,f,c
 14971  0032AA  2E19               	decfsz	___awdiv@counter,f,c
 14972  0032AC  D7EC               	goto	l5990
 14973  0032AE  D000               	goto	l6002
 14974  0032B0                     l6002:
 14975  0032B0  501A               	movf	___awdiv@sign,w,c
 14976  0032B2  B4D8               	btfsc	status,2,c
 14977  0032B4  D005               	goto	l6006
 14978  0032B6  6C1B               	negf	___awdiv@quotient,c
 14979  0032B8  1E1C               	comf	___awdiv@quotient+1,f,c
 14980  0032BA  B0D8               	btfsc	status,0,c
 14981  0032BC  2A1C               	incf	___awdiv@quotient+1,f,c
 14982  0032BE  D000               	goto	l6006
 14983  0032C0                     l6006:
 14984  0032C0  C01B  F015         	movff	___awdiv@quotient,?___awdiv
 14985  0032C4  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
 14986  0032C8  D000               	goto	l925
 14987  0032CA                     l925:
 14988  0032CA  0012               	return		;funcret
 14989  0032CC                     __end_of___awdiv:
 14990                           	opt stack 0
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           intcon2	equ	0xFF1
 14999                           intcon3	equ	0xFF0
 15000                           postinc0	equ	0xFEE
 15001                           wreg	equ	0xFE8
 15002                           postdec1	equ	0xFE5
 15003                           fsr1l	equ	0xFE1
 15004                           indf2	equ	0xFDF
 15005                           postinc2	equ	0xFDE
 15006                           postdec2	equ	0xFDD
 15007                           fsr2h	equ	0xFDA
 15008                           fsr2l	equ	0xFD9
 15009                           status	equ	0xFD8
 15010                           
 15011 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
 15012 ;; Defined at:
 15013 ;;		line 510 in file "Lab9test.c"
 15014 ;; Parameters:    Size  Location     Type
 15015 ;;		None
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;		None
 15018 ;; Return value:  Size  Location     Type
 15019 ;;		None               void
 15020 ;; Registers used:
 15021 ;;		wreg, status,2, cstack
 15022 ;; Tracked objects:
 15023 ;;		On entry : 0/0
 15024 ;;		On exit  : 0/0
 15025 ;;		Unchanged: 0/0
 15026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15031 ;;Total ram usage:        0 bytes
 15032 ;; Hardware stack levels used:    1
 15033 ;; Hardware stack levels required when called:    3
 15034 ;; This function calls:
 15035 ;;		_Activate_Buzzer
 15036 ;;		_Deactivate_Buzzer
 15037 ;;		_WAIT_HALF_SEC
 15038 ;; This function is called by:
 15039 ;;		_PED_Control
 15040 ;; This function uses a non-reentrant model
 15041 ;;
 15042                           
 15043                           	psect	text68
 15044  003D9C                     __ptext68:
 15045                           	opt stack 0
 15046  003D9C                     _WAIT_1_SEC_W_BEEP:
 15047                           	opt stack 25
 15048                           
 15049                           ;Lab9test.c: 512: PORTDbits.RD7 = 1;
 15050                           
 15051                           ;incstack = 0
 15052  003D9C  8E83               	bsf	3971,7,c	;volatile
 15053                           
 15054                           ;Lab9test.c: 513: Activate_Buzzer();
 15055  003D9E  ECF6  F01E         	call	_Activate_Buzzer	;wreg free
 15056                           
 15057                           ;Lab9test.c: 514: WAIT_HALF_SEC();
 15058  003DA2  ECB6  F01E         	call	_WAIT_HALF_SEC	;wreg free
 15059                           
 15060                           ;Lab9test.c: 515: PORTDbits.RD7 = 0;
 15061  003DA6  9E83               	bcf	3971,7,c	;volatile
 15062                           
 15063                           ;Lab9test.c: 516: Deactivate_Buzzer ();
 15064  003DA8  EC34  F01F         	call	_Deactivate_Buzzer	;wreg free
 15065                           
 15066                           ;Lab9test.c: 517: WAIT_HALF_SEC();
 15067  003DAC  ECB6  F01E         	call	_WAIT_HALF_SEC	;wreg free
 15068  003DB0  0012               	return		;funcret
 15069  003DB2                     __end_of_WAIT_1_SEC_W_BEEP:
 15070                           	opt stack 0
 15071                           tblptru	equ	0xFF8
 15072                           tblptrh	equ	0xFF7
 15073                           tblptrl	equ	0xFF6
 15074                           tablat	equ	0xFF5
 15075                           prodh	equ	0xFF4
 15076                           prodl	equ	0xFF3
 15077                           intcon	equ	0xFF2
 15078                           intcon2	equ	0xFF1
 15079                           intcon3	equ	0xFF0
 15080                           postinc0	equ	0xFEE
 15081                           wreg	equ	0xFE8
 15082                           postdec1	equ	0xFE5
 15083                           fsr1l	equ	0xFE1
 15084                           indf2	equ	0xFDF
 15085                           postinc2	equ	0xFDE
 15086                           postdec2	equ	0xFDD
 15087                           fsr2h	equ	0xFDA
 15088                           fsr2l	equ	0xFD9
 15089                           status	equ	0xFD8
 15090                           
 15091 ;; *************** function _WAIT_HALF_SEC *****************
 15092 ;; Defined at:
 15093 ;;		line 487 in file "Lab9test.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;		None
 15096 ;; Auto vars:     Size  Location     Type
 15097 ;;		None
 15098 ;; Return value:  Size  Location     Type
 15099 ;;		None               void
 15100 ;; Registers used:
 15101 ;;		wreg, status,2
 15102 ;; Tracked objects:
 15103 ;;		On entry : 0/0
 15104 ;;		On exit  : 0/0
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;Total ram usage:        0 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    2
 15114 ;; This function calls:
 15115 ;;		Nothing
 15116 ;; This function is called by:
 15117 ;;		_WAIT_1_SEC
 15118 ;;		_WAIT_1_SEC_W_BEEP
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           	psect	text69
 15123  003D6C                     __ptext69:
 15124                           	opt stack 0
 15125  003D6C                     _WAIT_HALF_SEC:
 15126                           	opt stack 25
 15127                           
 15128                           ;Lab9test.c: 489: T0CON = 0x03;
 15129                           
 15130                           ;incstack = 0
 15131  003D6C  0E03               	movlw	3
 15132  003D6E  6ED5               	movwf	4053,c	;volatile
 15133                           
 15134                           ;Lab9test.c: 490: TMR0L = 0xDB;
 15135  003D70  0EDB               	movlw	219
 15136  003D72  6ED6               	movwf	4054,c	;volatile
 15137                           
 15138                           ;Lab9test.c: 491: TMR0H = 0xB;
 15139  003D74  0E0B               	movlw	11
 15140  003D76  6ED7               	movwf	4055,c	;volatile
 15141                           
 15142                           ;Lab9test.c: 492: INTCONbits.TMR0IF = 0;
 15143  003D78  94F2               	bcf	intcon,2,c	;volatile
 15144                           
 15145                           ;Lab9test.c: 493: T0CONbits.TMR0ON = 1;
 15146  003D7A  8ED5               	bsf	4053,7,c	;volatile
 15147                           
 15148                           ;Lab9test.c: 494: while (INTCONbits.TMR0IF == 0);
 15149  003D7C  D000               	goto	l446
 15150  003D7E                     l446:
 15151  003D7E  A4F2               	btfss	intcon,2,c	;volatile
 15152  003D80  D7FE               	goto	l446
 15153                           
 15154                           ;Lab9test.c: 495: T0CONbits.TMR0ON = 0;
 15155  003D82  9ED5               	bcf	4053,7,c	;volatile
 15156  003D84  0012               	return		;funcret
 15157  003D86                     __end_of_WAIT_HALF_SEC:
 15158                           	opt stack 0
 15159                           tblptru	equ	0xFF8
 15160                           tblptrh	equ	0xFF7
 15161                           tblptrl	equ	0xFF6
 15162                           tablat	equ	0xFF5
 15163                           prodh	equ	0xFF4
 15164                           prodl	equ	0xFF3
 15165                           intcon	equ	0xFF2
 15166                           intcon2	equ	0xFF1
 15167                           intcon3	equ	0xFF0
 15168                           postinc0	equ	0xFEE
 15169                           wreg	equ	0xFE8
 15170                           postdec1	equ	0xFE5
 15171                           fsr1l	equ	0xFE1
 15172                           indf2	equ	0xFDF
 15173                           postinc2	equ	0xFDE
 15174                           postdec2	equ	0xFDD
 15175                           fsr2h	equ	0xFDA
 15176                           fsr2l	equ	0xFD9
 15177                           status	equ	0xFD8
 15178                           
 15179 ;; *************** function _Deactivate_Buzzer *****************
 15180 ;; Defined at:
 15181 ;;		line 528 in file "Lab9test.c"
 15182 ;; Parameters:    Size  Location     Type
 15183 ;;		None
 15184 ;; Auto vars:     Size  Location     Type
 15185 ;;		None
 15186 ;; Return value:  Size  Location     Type
 15187 ;;		None               void
 15188 ;; Registers used:
 15189 ;;		wreg, status,2
 15190 ;; Tracked objects:
 15191 ;;		On entry : 0/0
 15192 ;;		On exit  : 0/0
 15193 ;;		Unchanged: 0/0
 15194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;Total ram usage:        0 bytes
 15200 ;; Hardware stack levels used:    1
 15201 ;; Hardware stack levels required when called:    2
 15202 ;; This function calls:
 15203 ;;		Nothing
 15204 ;; This function is called by:
 15205 ;;		_WAIT_1_SEC_W_BEEP
 15206 ;; This function uses a non-reentrant model
 15207 ;;
 15208                           
 15209                           	psect	text70
 15210  003E68                     __ptext70:
 15211                           	opt stack 0
 15212  003E68                     _Deactivate_Buzzer:
 15213                           	opt stack 25
 15214                           
 15215                           ;Lab9test.c: 530: CCP2CON = 0x0;
 15216                           
 15217                           ;incstack = 0
 15218  003E68  0E00               	movlw	0
 15219  003E6A  6EBA               	movwf	4026,c	;volatile
 15220                           
 15221                           ;Lab9test.c: 531: PORTBbits.RB3 = 0;
 15222  003E6C  9681               	bcf	3969,3,c	;volatile
 15223  003E6E  0012               	return		;funcret
 15224  003E70                     __end_of_Deactivate_Buzzer:
 15225                           	opt stack 0
 15226                           tblptru	equ	0xFF8
 15227                           tblptrh	equ	0xFF7
 15228                           tblptrl	equ	0xFF6
 15229                           tablat	equ	0xFF5
 15230                           prodh	equ	0xFF4
 15231                           prodl	equ	0xFF3
 15232                           intcon	equ	0xFF2
 15233                           intcon2	equ	0xFF1
 15234                           intcon3	equ	0xFF0
 15235                           postinc0	equ	0xFEE
 15236                           wreg	equ	0xFE8
 15237                           postdec1	equ	0xFE5
 15238                           fsr1l	equ	0xFE1
 15239                           indf2	equ	0xFDF
 15240                           postinc2	equ	0xFDE
 15241                           postdec2	equ	0xFDD
 15242                           fsr2h	equ	0xFDA
 15243                           fsr2l	equ	0xFD9
 15244                           status	equ	0xFD8
 15245                           
 15246 ;; *************** function _Activate_Buzzer *****************
 15247 ;; Defined at:
 15248 ;;		line 520 in file "Lab9test.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;		None
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;		None
 15253 ;; Return value:  Size  Location     Type
 15254 ;;		None               void
 15255 ;; Registers used:
 15256 ;;		wreg, status,2
 15257 ;; Tracked objects:
 15258 ;;		On entry : 0/0
 15259 ;;		On exit  : 0/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;Total ram usage:        0 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:    2
 15269 ;; This function calls:
 15270 ;;		Nothing
 15271 ;; This function is called by:
 15272 ;;		_WAIT_1_SEC_W_BEEP
 15273 ;; This function uses a non-reentrant model
 15274 ;;
 15275                           
 15276                           	psect	text71
 15277  003DEC                     __ptext71:
 15278                           	opt stack 0
 15279  003DEC                     _Activate_Buzzer:
 15280                           	opt stack 25
 15281                           
 15282                           ;Lab9test.c: 522: PR2 = 0b11111001 ;
 15283                           
 15284                           ;incstack = 0
 15285  003DEC  0EF9               	movlw	249
 15286  003DEE  6ECB               	movwf	4043,c	;volatile
 15287                           
 15288                           ;Lab9test.c: 523: T2CON = 0b00000101 ;
 15289  003DF0  0E05               	movlw	5
 15290  003DF2  6ECA               	movwf	4042,c	;volatile
 15291                           
 15292                           ;Lab9test.c: 524: CCPR2L = 0b01001010 ;
 15293  003DF4  0E4A               	movlw	74
 15294  003DF6  6EBB               	movwf	4027,c	;volatile
 15295                           
 15296                           ;Lab9test.c: 525: CCP2CON = 0b00111100 ;
 15297  003DF8  0E3C               	movlw	60
 15298  003DFA  6EBA               	movwf	4026,c	;volatile
 15299  003DFC  0012               	return		;funcret
 15300  003DFE                     __end_of_Activate_Buzzer:
 15301                           	opt stack 0
 15302                           tblptru	equ	0xFF8
 15303                           tblptrh	equ	0xFF7
 15304                           tblptrl	equ	0xFF6
 15305                           tablat	equ	0xFF5
 15306                           prodh	equ	0xFF4
 15307                           prodl	equ	0xFF3
 15308                           intcon	equ	0xFF2
 15309                           intcon2	equ	0xFF1
 15310                           intcon3	equ	0xFF0
 15311                           postinc0	equ	0xFEE
 15312                           wreg	equ	0xFE8
 15313                           postdec1	equ	0xFE5
 15314                           fsr1l	equ	0xFE1
 15315                           indf2	equ	0xFDF
 15316                           postinc2	equ	0xFDE
 15317                           postdec2	equ	0xFDD
 15318                           fsr2h	equ	0xFDA
 15319                           fsr2l	equ	0xFD9
 15320                           status	equ	0xFD8
 15321                           
 15322 ;; *************** function _chkisr *****************
 15323 ;; Defined at:
 15324 ;;		line 794 in file "Lab9test.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;		None
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;		None
 15329 ;; Return value:  Size  Location     Type
 15330 ;;		None               void
 15331 ;; Registers used:
 15332 ;;		wreg, status,2, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15340 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15341 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15342 ;;Total ram usage:       14 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    1
 15345 ;; This function calls:
 15346 ;;		_INT0_ISR
 15347 ;;		_INT1_ISR
 15348 ;;		_INT2_ISR
 15349 ;; This function is called by:
 15350 ;;		Interrupt level 2
 15351 ;; This function uses a non-reentrant model
 15352 ;;
 15353                           
 15354                           	psect	intcode
 15355  000008                     __pintcode:
 15356                           	opt stack 0
 15357  000008                     _chkisr:
 15358                           	opt stack 18
 15359                           
 15360                           ;incstack = 0
 15361  000008  CFFA F001          	movff	pclath,??_chkisr
 15362  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 15363  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 15364  000014  ED34  F01A         	call	int_func,f	;refresh shadow registers
 15365                           pclatu	equ	0xFFB
 15366                           pclath	equ	0xFFA
 15367                           tblptru	equ	0xFF8
 15368                           tblptrh	equ	0xFF7
 15369                           tblptrl	equ	0xFF6
 15370                           tablat	equ	0xFF5
 15371                           prodh	equ	0xFF4
 15372                           prodl	equ	0xFF3
 15373                           intcon	equ	0xFF2
 15374                           intcon2	equ	0xFF1
 15375                           intcon3	equ	0xFF0
 15376                           postinc0	equ	0xFEE
 15377                           fsr0l	equ	0xFE9
 15378                           wreg	equ	0xFE8
 15379                           postdec1	equ	0xFE5
 15380                           fsr1l	equ	0xFE1
 15381                           indf2	equ	0xFDF
 15382                           postinc2	equ	0xFDE
 15383                           postdec2	equ	0xFDD
 15384                           fsr2h	equ	0xFDA
 15385                           fsr2l	equ	0xFD9
 15386                           status	equ	0xFD8
 15387                           
 15388                           	psect	intcode_body
 15389  003468                     __pintcode_body:
 15390                           	opt stack 18
 15391  003468                     int_func:
 15392                           	opt stack 18
 15393  003468  0006               	pop		; remove dummy address from shadow register refresh
 15394  00346A  CFEA F004          	movff	fsr0h,??_chkisr+3
 15395  00346E  CFE1 F005          	movff	fsr1l,??_chkisr+4
 15396  003472  CFE2 F006          	movff	fsr1h,??_chkisr+5
 15397  003476  CFD9 F007          	movff	fsr2l,??_chkisr+6
 15398  00347A  CFDA F008          	movff	fsr2h,??_chkisr+7
 15399  00347E  CFF3 F009          	movff	prodl,??_chkisr+8
 15400  003482  CFF4 F00A          	movff	prodh,??_chkisr+9
 15401  003486  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 15402  00348A  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 15403  00348E  CFF8 F00D          	movff	tblptru,??_chkisr+12
 15404  003492  CFF5 F00E          	movff	tablat,??_chkisr+13
 15405                           
 15406                           ;Lab9test.c: 796: if (INTCONbits.INT0IF == 1) INT0_ISR();
 15407  003496  A2F2               	btfss	intcon,1,c	;volatile
 15408  003498  D003               	goto	i2l5674
 15409  00349A  EC2F  F01F         	call	_INT0_ISR	;wreg free
 15410  00349E  D000               	goto	i2l5674
 15411  0034A0                     i2l5674:
 15412                           
 15413                           ;Lab9test.c: 797: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 15414  0034A0  A0F0               	btfss	intcon3,0,c	;volatile
 15415  0034A2  D003               	goto	i2l5678
 15416  0034A4  EC2A  F01F         	call	_INT1_ISR	;wreg free
 15417  0034A8  D000               	goto	i2l5678
 15418  0034AA                     i2l5678:
 15419                           
 15420                           ;Lab9test.c: 798: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 15421  0034AA  A2F0               	btfss	intcon3,1,c	;volatile
 15422  0034AC  D003               	goto	i2l557
 15423  0034AE  EC1D  F01F         	call	_INT2_ISR	;wreg free
 15424  0034B2  D000               	goto	i2l557
 15425  0034B4                     i2l557:
 15426  0034B4  C00E  FFF5         	movff	??_chkisr+13,tablat
 15427  0034B8  C00D  FFF8         	movff	??_chkisr+12,tblptru
 15428  0034BC  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 15429  0034C0  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 15430  0034C4  C00A  FFF4         	movff	??_chkisr+9,prodh
 15431  0034C8  C009  FFF3         	movff	??_chkisr+8,prodl
 15432  0034CC  C008  FFDA         	movff	??_chkisr+7,fsr2h
 15433  0034D0  C007  FFD9         	movff	??_chkisr+6,fsr2l
 15434  0034D4  C006  FFE2         	movff	??_chkisr+5,fsr1h
 15435  0034D8  C005  FFE1         	movff	??_chkisr+4,fsr1l
 15436  0034DC  C004  FFEA         	movff	??_chkisr+3,fsr0h
 15437  0034E0  C003  FFE9         	movff	??_chkisr+2,fsr0l
 15438  0034E4  C002  FFFB         	movff	??_chkisr+1,pclatu
 15439  0034E8  C001  FFFA         	movff	??_chkisr,pclath
 15440  0034EC  0011               	retfie		f
 15441  0034EE                     __end_of_chkisr:
 15442                           	opt stack 0
 15443                           pclatu	equ	0xFFB
 15444                           pclath	equ	0xFFA
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           intcon2	equ	0xFF1
 15453                           intcon3	equ	0xFF0
 15454                           postinc0	equ	0xFEE
 15455                           fsr0h	equ	0xFEA
 15456                           fsr0l	equ	0xFE9
 15457                           wreg	equ	0xFE8
 15458                           postdec1	equ	0xFE5
 15459                           fsr1h	equ	0xFE2
 15460                           fsr1l	equ	0xFE1
 15461                           indf2	equ	0xFDF
 15462                           postinc2	equ	0xFDE
 15463                           postdec2	equ	0xFDD
 15464                           fsr2h	equ	0xFDA
 15465                           fsr2l	equ	0xFD9
 15466                           status	equ	0xFD8
 15467                           
 15468 ;; *************** function _INT2_ISR *****************
 15469 ;; Defined at:
 15470 ;;		line 813 in file "Lab9test.c"
 15471 ;; Parameters:    Size  Location     Type
 15472 ;;		None
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;		None
 15475 ;; Return value:  Size  Location     Type
 15476 ;;		None               void
 15477 ;; Registers used:
 15478 ;;		wreg, status,2
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;Total ram usage:        0 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		_chkisr
 15494 ;; This function uses a non-reentrant model
 15495 ;;
 15496                           
 15497                           	psect	text73
 15498  003E3A                     __ptext73:
 15499                           	opt stack 0
 15500  003E3A                     _INT2_ISR:
 15501                           	opt stack 18
 15502                           
 15503                           ;Lab9test.c: 815: INTCON3bits.INT2IF=0;
 15504                           
 15505                           ;incstack = 0
 15506  003E3A  92F0               	bcf	intcon3,1,c	;volatile
 15507                           
 15508                           ;Lab9test.c: 816: INT2_flag = 1;
 15509  003E3C  0E00               	movlw	0
 15510  003E3E  0100               	movlb	0	; () banked
 15511  003E40  6F88               	movwf	(_INT2_flag+1)& (0+255),b
 15512  003E42  0E01               	movlw	1
 15513  003E44  6F87               	movwf	_INT2_flag& (0+255),b
 15514                           
 15515                           ; BSR set to: 0
 15516  003E46  0012               	return		;funcret
 15517  003E48                     __end_of_INT2_ISR:
 15518                           	opt stack 0
 15519                           pclatu	equ	0xFFB
 15520                           pclath	equ	0xFFA
 15521                           tblptru	equ	0xFF8
 15522                           tblptrh	equ	0xFF7
 15523                           tblptrl	equ	0xFF6
 15524                           tablat	equ	0xFF5
 15525                           prodh	equ	0xFF4
 15526                           prodl	equ	0xFF3
 15527                           intcon	equ	0xFF2
 15528                           intcon2	equ	0xFF1
 15529                           intcon3	equ	0xFF0
 15530                           postinc0	equ	0xFEE
 15531                           fsr0h	equ	0xFEA
 15532                           fsr0l	equ	0xFE9
 15533                           wreg	equ	0xFE8
 15534                           postdec1	equ	0xFE5
 15535                           fsr1h	equ	0xFE2
 15536                           fsr1l	equ	0xFE1
 15537                           indf2	equ	0xFDF
 15538                           postinc2	equ	0xFDE
 15539                           postdec2	equ	0xFDD
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function _INT1_ISR *****************
 15545 ;; Defined at:
 15546 ;;		line 807 in file "Lab9test.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;		None
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;		None
 15551 ;; Return value:  Size  Location     Type
 15552 ;;		None               void
 15553 ;; Registers used:
 15554 ;;		wreg, status,2
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;Total ram usage:        0 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; This function calls:
 15567 ;;		Nothing
 15568 ;; This function is called by:
 15569 ;;		_chkisr
 15570 ;; This function uses a non-reentrant model
 15571 ;;
 15572                           
 15573                           	psect	text74
 15574  003E54                     __ptext74:
 15575                           	opt stack 0
 15576  003E54                     _INT1_ISR:
 15577                           	opt stack 18
 15578                           
 15579                           ;Lab9test.c: 809: INTCON3bits.INT1IF=0;
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;incstack = 0
 15583  003E54  90F0               	bcf	intcon3,0,c	;volatile
 15584                           
 15585                           ;Lab9test.c: 810: EWPED_SW = 1;
 15586  003E56  0E01               	movlw	1
 15587  003E58  0100               	movlb	0	; () banked
 15588  003E5A  6F8D               	movwf	_EWPED_SW& (0+255),b
 15589                           
 15590                           ; BSR set to: 0
 15591  003E5C  0012               	return		;funcret
 15592  003E5E                     __end_of_INT1_ISR:
 15593                           	opt stack 0
 15594                           pclatu	equ	0xFFB
 15595                           pclath	equ	0xFFA
 15596                           tblptru	equ	0xFF8
 15597                           tblptrh	equ	0xFF7
 15598                           tblptrl	equ	0xFF6
 15599                           tablat	equ	0xFF5
 15600                           prodh	equ	0xFF4
 15601                           prodl	equ	0xFF3
 15602                           intcon	equ	0xFF2
 15603                           intcon2	equ	0xFF1
 15604                           intcon3	equ	0xFF0
 15605                           postinc0	equ	0xFEE
 15606                           fsr0h	equ	0xFEA
 15607                           fsr0l	equ	0xFE9
 15608                           wreg	equ	0xFE8
 15609                           postdec1	equ	0xFE5
 15610                           fsr1h	equ	0xFE2
 15611                           fsr1l	equ	0xFE1
 15612                           indf2	equ	0xFDF
 15613                           postinc2	equ	0xFDE
 15614                           postdec2	equ	0xFDD
 15615                           fsr2h	equ	0xFDA
 15616                           fsr2l	equ	0xFD9
 15617                           status	equ	0xFD8
 15618                           
 15619 ;; *************** function _INT0_ISR *****************
 15620 ;; Defined at:
 15621 ;;		line 801 in file "Lab9test.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;		None
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;		None
 15626 ;; Return value:  Size  Location     Type
 15627 ;;		None               void
 15628 ;; Registers used:
 15629 ;;		wreg, status,2
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15639 ;;Total ram usage:        0 bytes
 15640 ;; Hardware stack levels used:    1
 15641 ;; This function calls:
 15642 ;;		Nothing
 15643 ;; This function is called by:
 15644 ;;		_chkisr
 15645 ;; This function uses a non-reentrant model
 15646 ;;
 15647                           
 15648                           	psect	text75
 15649  003E5E                     __ptext75:
 15650                           	opt stack 0
 15651  003E5E                     _INT0_ISR:
 15652                           	opt stack 18
 15653                           
 15654                           ;Lab9test.c: 803: INTCONbits.INT0IF=0;
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;incstack = 0
 15658  003E5E  92F2               	bcf	intcon,1,c	;volatile
 15659                           
 15660                           ;Lab9test.c: 804: NSPED_SW = 1;
 15661  003E60  0E01               	movlw	1
 15662  003E62  0100               	movlb	0	; () banked
 15663  003E64  6F8E               	movwf	_NSPED_SW& (0+255),b
 15664                           
 15665                           ; BSR set to: 0
 15666  003E66  0012               	return		;funcret
 15667  003E68                     __end_of_INT0_ISR:
 15668                           	opt stack 0
 15669                           pclatu	equ	0xFFB
 15670                           pclath	equ	0xFFA
 15671                           tblptru	equ	0xFF8
 15672                           tblptrh	equ	0xFF7
 15673                           tblptrl	equ	0xFF6
 15674                           tablat	equ	0xFF5
 15675                           prodh	equ	0xFF4
 15676                           prodl	equ	0xFF3
 15677                           intcon	equ	0xFF2
 15678                           intcon2	equ	0xFF1
 15679                           intcon3	equ	0xFF0
 15680                           postinc0	equ	0xFEE
 15681                           fsr0h	equ	0xFEA
 15682                           fsr0l	equ	0xFE9
 15683                           wreg	equ	0xFE8
 15684                           postdec1	equ	0xFE5
 15685                           fsr1h	equ	0xFE2
 15686                           fsr1l	equ	0xFE1
 15687                           indf2	equ	0xFDF
 15688                           postinc2	equ	0xFDE
 15689                           postdec2	equ	0xFDD
 15690                           fsr2h	equ	0xFDA
 15691                           fsr2l	equ	0xFD9
 15692                           status	equ	0xFD8
 15693                           pclatu	equ	0xFFB
 15694                           pclath	equ	0xFFA
 15695                           tblptru	equ	0xFF8
 15696                           tblptrh	equ	0xFF7
 15697                           tblptrl	equ	0xFF6
 15698                           tablat	equ	0xFF5
 15699                           prodh	equ	0xFF4
 15700                           prodl	equ	0xFF3
 15701                           intcon	equ	0xFF2
 15702                           intcon2	equ	0xFF1
 15703                           intcon3	equ	0xFF0
 15704                           postinc0	equ	0xFEE
 15705                           fsr0h	equ	0xFEA
 15706                           fsr0l	equ	0xFE9
 15707                           wreg	equ	0xFE8
 15708                           postdec1	equ	0xFE5
 15709                           fsr1h	equ	0xFE2
 15710                           fsr1l	equ	0xFE1
 15711                           indf2	equ	0xFDF
 15712                           postinc2	equ	0xFDE
 15713                           postdec2	equ	0xFDD
 15714                           fsr2h	equ	0xFDA
 15715                           fsr2l	equ	0xFD9
 15716                           status	equ	0xFD8
 15717                           
 15718                           	psect	rparam
 15719  0000                     pclatu	equ	0xFFB
 15720                           pclath	equ	0xFFA
 15721                           tblptru	equ	0xFF8
 15722                           tblptrh	equ	0xFF7
 15723                           tblptrl	equ	0xFF6
 15724                           tablat	equ	0xFF5
 15725                           prodh	equ	0xFF4
 15726                           prodl	equ	0xFF3
 15727                           intcon	equ	0xFF2
 15728                           intcon2	equ	0xFF1
 15729                           intcon3	equ	0xFF0
 15730                           postinc0	equ	0xFEE
 15731                           fsr0h	equ	0xFEA
 15732                           fsr0l	equ	0xFE9
 15733                           wreg	equ	0xFE8
 15734                           postdec1	equ	0xFE5
 15735                           fsr1h	equ	0xFE2
 15736                           fsr1l	equ	0xFE1
 15737                           indf2	equ	0xFDF
 15738                           postinc2	equ	0xFDE
 15739                           postdec2	equ	0xFDD
 15740                           fsr2h	equ	0xFDA
 15741                           fsr2l	equ	0xFD9
 15742                           status	equ	0xFD8


Data Sizes:
    Strings     215
    Constant    593
    Data        46
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     99     112
    BANK0           128     25     118
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_18(CODE[31]), STR_17(CODE[31]), STR_16(CODE[31]), STR_15(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Night_Mode->_WAIT_N_SEC
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_WAIT_N_SEC
    _update_LCD_count->_drawtext
    _WAIT_1_SEC->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _init_UART->_OpenUSART
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___awdiv->___awmod

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _update_LCD_misc->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  616979
                                             95 COMRAM     4     4      0
                           _Day_Mode
                            _Do_Init
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  251565
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   74488
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8784
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4132
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4132
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  283940
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0  151997
                                             93 COMRAM     2     2      0
                         _WAIT_1_SEC
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     3     2      1   32239
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0  119628
                      _WAIT_HALF_SEC
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   90808
                                             88 COMRAM     5     5      0
                            _Do_Init
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   54180
                                             77 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   13223
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   12944
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    4526
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     584
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     803
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2295
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     622
                                             14 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     501
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     566
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4019
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3703
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     130
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     848
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2898
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2391
                                             34 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2128
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _Init_TRIS
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   32375
                                             74 COMRAM     2     1      1
                  _WAIT_1_SEC_W_BEEP
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 3     2      1   32115
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   26891
                                             54 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   12984
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    3092
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2383
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2525
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           _Do_Init
             _Init_ADC
             _Init_TRIS
             _init_UART
               _OpenUSART
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Init
     _Init_ADC
     _Init_TRIS
     _init_UART
       _OpenUSART
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           _Do_Init
             _Init_ADC
             _Init_TRIS
             _init_UART
               _OpenUSART
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   _get_full_ADC
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      76       5       92.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     63      70       1       88.2%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6       6        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 03 12:49:37 2022

                     drawCircle@f 0028                       drawCircle@r 001E  
                     drawCircle@x 002A                       drawCircle@y 002C  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001A  
                    drawCircle@y0 001C                      ___awdiv@sign 001A  
             ___wmul@multiplicand 001F          update_LCD_color@Circle_Y 0043  
                    ___ftadd@exp1 0047                      ___ftadd@exp2 0046  
                    ___ftadd@sign 0045                               l203 3C40  
                             l209 3466                               l225 2410  
                             l234 2366                               l227 22EA  
                             l411 2EFC                               l307 33DE  
                             l413 2F50                               l149 38A0  
                             l502 3A38                               l262 2EC6  
                             l159 3DD4                               l263 2E32  
                             l504 3A3C                               l440 3CE2  
                             l273 2026                               l505 3A42  
                             l417 2F8E                               l265 2EA2  
                             l425 319E                               l530 2B44  
                             l514 1916                               l506 3A46  
                             l266 2EC4                               l291 2480  
                             l507 3A68                               l523 22BA  
                             l437 3CC2                               l446 3D7E  
                             l471 3854                               l480 3A20  
                             l720 368E                               l475 39F0  
                             l732 3CBC                               l484 39A8  
                             l724 36A8                               l396 3E22  
                             l548 1B5A                               l493 3A80  
                             l477 39F4                               l725 36AA  
                             l478 39FA                               l486 39AC  
                             l726 36B4                               l495 3A84  
                             l479 39FE                               l487 39B2  
                             l727 36B6                               l496 3A8A  
                             l488 39B6                               l497 3A8E  
                             l489 39D8                               l729 36D0  
                             l498 3AB0                               l666 074A  
                             l595 15B4                               l588 1D9E  
                             l925 32CA                               l950 3BAC  
                             l696 0AB6                               l938 35F0  
   update_LCD_PED_Count@direction 004A                               _PR2 000FCB  
               _Deactivate_Buzzer 3E68                               _dir 006A  
                             _nbr 008B                               _txt 0064  
                  drawFastHLine@w 0017                    drawFastHLine@x 0020  
                  drawFastHLine@y 0016                      ___awmod@sign 0014  
         __end_of_update_LCD_misc 1B5C                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001B                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 3C42              PED_Control@Direction 0001  
                    ___ftdiv@cntr 0030                      ___ftdiv@sign 0035  
                    __CFG_WDT$OFF 000000                              l1101 1E0E  
                            l1112 1ED0                              l1016 2872  
                            l1121 1EEC                              l1025 2862  
                            l1132 2CD8                              l1140 26F8  
                  drawFastVLine@h 0017                              l1057 3054  
                            l1129 2D0C                              l1137 2768  
                            l1161 296A                              l1226 3346  
                            l1146 2758                              l1155 3234  
                            l1171 3D20                              l1139 26D0  
                            l1332 3B70                              l1068 302C  
                            l1236 3650                              l1182 2C2A  
                            l1256 37F8                              l1097 1DE4  
                            l1098 1F62                              l1178 3AF4  
                  drawFastVLine@x 0020                              l1197 3D4E  
                  drawFastVLine@y 0016                              l6002 32B0  
                            l6006 32C0                              l6030 35B4  
                            l6022 3594                              l6102 3B3E  
                            l6104 3B44                              l6200 2678  
                            l6042 35E6                              l6034 35CA  
                            l6026 35A2                              l6018 3586  
                            l6050 22CC                              l6028 35AC  
                            l6060 22EE                              l6300 2834  
                            l6140 1D5E                              l6132 1C9A  
                            l6038 35D6                              l6070 235A  
                            l6054 22D8                              l6302 283A  
                            l6206 2696                              l7110 2E6A  
                            l6080 2388                              l6072 235E  
                            l6064 22F6                              l6240 272A  
                            l6160 13AA                              l7104 2DFC  
                            l6090 2404                              l6082 23B0  
                            l6058 22E6                              l6322 31D2  
                            l6314 3ACA                              l6306 284E  
                            l6242 2730                              l6154 1302  
                            l7130 2EB0                              l7122 2E98  
                            l6068 2326                              l7212 2AD8  
                            l6500 2534                              l6332 3230  
                            l6404 3336                              l6420 3640  
                            l6412 3604                              l6308 285C  
                            l6236 271A                              l6228 2706  
                            l6172 14DE                              l6164 13BA  
                            l7310 381C                              l7302 3808  
                            l7230 176A                              l6326 3204  
                            l6414 3612                              l6262 278A  
                            l6246 2744                              l6190 3D46  
                            l7126 2EA6                              l5720 33F0  
                            l6088 23DC                              l6096 240C  
                            l7208 2A7E                              l6416 361A  
                            l6256 277A                              l6248 2752  
                            l7160 33D4                              l7144 3368  
                            l7136 2EC0                              l6442 2D36  
                            l7218 2B34                              l7234 1840  
                            l7226 1696                              l5810 3692  
                            l5802 367E                              l6370 2BD4  
                            l6346 2B64                              l6426 37A0  
                            l6178 1590                              l5724 3428  
                            l6364 2BBE                              l6428 37AE  
                            l6284 2800                              l6276 27CE  
                            l6700 066A                              l6540 0042  
                            l7180 2132                              l7324 3BB4  
                            l7148 33A0                              l5734 344E  
                            l6454 2D7A                              l7318 3840  
                            l7270 39BC                              l5806 3686  
                            l5750 2FDC                              l5742 2FA0  
                            l6382 2C18                              l6374 2BE8  
                            l6630 03A0                              l6622 0330  
                            l6614 02C8                              l6542 0058  
                            l7334 3BD2                              l7158 33C6  
                            l5736 345C                              l6480 2466  
                            l5904 1F0A                              l6376 2BF6  
                            l6368 2BCE                              l6392 32EE  
                            l6296 2824                              l6288 2810  
                            l6712 0718                              l6632 03B6  
                            l6552 009A                              l6560 00FE  
                            l6536 002C                              l7192 2242  
                            l7184 218C                              l7328 3BBE  
                            l6466 2DD8                              l6458 2D94  
                            l5818 36A0                              l5770 3046  
                            l5754 2FF4                              l5746 2FB0  
                            l5914 1F3C                              l6378 2C00  
                            l6394 32FC                              l5930 28BA  
                            l6714 072C                              l6706 06F8  
                            l6650 04A0                              l6642 0422  
                            l6626 0358                              l6570 0160  
                            l6546 0064                              l6468 2DDE  
                            l5764 3034                              l5756 3014  
                            l5748 2FBC                              l6812 2C72  
                            l6396 3304                              l5924 2892  
                            l6740 08C4                              l6724 0776  
                            l6708 0708                              l6644 042E  
                            l6652 04B4                              l6628 036E  
                            l6580 0198                              l6572 0178  
                            l6548 007A                              l7188 21E8  
                            l7508 3106                              l5790 396E  
                            l7278 3A94                              l7286 3A4C  
                            l7294 3A04                              l5758 3020  
                            l6806 2C4A                              l5862 1E1C  
                            l5926 28AC                              l6734 08A4  
                            l6718 0750                              l6670 0570  
                            l6662 0530                              l6638 03FC  
                            l6742 08D4                              l6582 01C0  
                            l6566 0124                              l7198 229E  
                            l7534 315A                              l6496 24E2  
                            l6832 2CB2                              l6808 2C64  
                            l5856 1DF2                              l5952 2916  
                            l5944 28EE                              l6752 0920  
                            l6736 08B4                              l6728 07C8  
                            l6656 051C                              l6648 0472  
                            l6576 018C                              l5778 3C22  
                            l5786 3952                              l7298 37FE  
                            l6842 2CE6                              l5890 1E94  
                            l5962 2944                              l5954 291C  
                            l6770 09BC                              l6762 097C  
                            l6690 0626                              l6674 05B4  
                            l6666 056A                              l6658 0522  
                            l7458 2ED2                              l5980 325E  
                            l6924 3BEA                              l5884 1E74  
                            l5868 1E28                              l5948 2900  
                            l6756 094E                              l6748 08FC  
                            l6684 05FC                              l6588 01DC  
                            l7484 2F38                              l5990 3286  
                            l5974 324C                              l6918 20FC  
                            l6926 3BF4                              l5798 3674  
                            l6854 3B88                              l5886 1E80  
                            l5878 1E50                              l5958 292E  
                            l6790 0A58                              l6782 0A22  
                            l6774 09F0                              l6694 0636  
                            l6678 05D6                              l6598 0224  
                            l7806 30F2                              l5896 1EB8  
                            l5888 1E8C                              l6784 0A2E  
                            l6776 09FC                              l6768 09B0  
                            l6696 064A                              l6688 060C  
                            l6960 19EE                              l6944 19A8  
                            l5986 3274                              l6890 200C  
                            l5898 1EC4                              l6794 0A76  
                            l6946 19B0                              l5988 327E  
                            l6788 0A4C                              l6972 1A28  
                            l6964 1A02                              l6956 19DA  
                            l5998 32A4                              l6798 0A96  
                            l6974 1A2E                              l6992 1B20  
                            l6968 1A16                              l6996 1B36  
                            l7798 3078                              STR_1 FCCA  
                            STR_2 FD15                              STR_3 FD1B  
                            STR_4 FD1F                              STR_5 FD2D  
                            STR_6 FCFD                              STR_7 FD0E  
                            STR_8 FCF1                              STR_9 FD07  
                            u5120 341E                              u6011 2688  
                    printf@tmpval 00E6                              u7001 2C5A  
                            u6201 2B56                              u6220 2B82  
                            u5351 1DB0                              u7200 2E2A  
                            u5361 1DC4                              u6225 2B7A  
                            _MODE 0089                              u7210 2E60  
                            u6360 2D5E                              u5561 2884  
                            u5581 28A2                              u6550 0264  
                            u5840 23BE                              u7280 3396  
                            u6555 025A                              u6770 0742  
                            _RBPU 007F8F                              u5991 266A  
                            u6981 2C3C                              _TRMT 007D61  
             ??_Deactivate_Buzzer 000F                              _main 3056  
                            _font FA07                      ___ftpack@arg 000F  
                    ___ftpack@exp 0012                              fsr0h 000FEA  
                            fsr1h 000FE2                    ??_get_full_ADC 0011  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 006C  
                 drawFastHLine@hi 001E                   drawFastHLine@lo 001F  
        __end_of_update_LCD_color 1918                              pclat 000FFA  
        __end_of_update_LCD_count 22BC                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   __end_of_Do_Init 3D0A  
                 ??_drawFastHLine 001A                   ??_drawFastVLine 001A  
                    ___ftmul@cntr 0030                      ___param_bank 000010  
                    ___ftmul@sign 0031                      ___fttol@exp1 0047  
                    ___fttol@lval 0043                      _Act_Mode_Txt 00D1  
                __end_of_INT0_ISR 3E68                  __end_of_INT1_ISR 3E5E  
                __end_of_INT2_ISR 3E48                       ?_WAIT_1_SEC 0001  
       __end_of_Deactivate_Buzzer 3E70                   drawFastVLine@hi 001E  
                 drawFastVLine@lo 001F                       _SW_EWLT_Txt 006D  
                     _SW_MODE_Txt 00D7                             ?_main 0001  
                 __end_of___awdiv 32CC                   __end_of___ftadd 1F64  
                 drawCircle@ddF_x 0024                             STR_10 FD27  
                 drawCircle@ddF_y 0026                             STR_11 FD23  
                           STR_12 FCB5                             STR_13 FD2D  
                           STR_14 FD2B                             STR_15 FCDE  
                           STR_16 FC58                             STR_17 FC77  
                           STR_18 FC96                   __end_of___awmod 35F2  
                 __end_of___ftdiv 2D0E                   __end_of___ftneg 3D2E  
                 __end_of___lldiv 3358                   __end_of___ftmul 296C  
                           _T0CON 000FD5                   ___awdiv@divisor 0017  
                 __end_of___llmod 3662                   __end_of___ftsub 3AF6  
                 __end_of___fttol 2C2C                             _T2CON 000FCA  
                           _T3CON 000FB1                       ?_WAIT_N_SEC 0001  
                           i2l557 34B4                   ___awdiv@counter 0019  
                 drawCircle@color 0020                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _PORTD 000F83  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Count 0066  
                    ?_PED_Control 004B                             _Rcmd1 254A  
                           _Rcmd3 296C                      ___lltoft@exp 001F  
                     _SW_NSLT_Txt 00D9                     drawRect@color 0029  
                   ___awtoft@sign 0026                   __end_of_dpowers FC0A  
                           _array 00B4                             _font2 FB06  
           fillCircleHelper@ddF_x 002F             fillCircleHelper@ddF_y 0031  
                           _scale 11D6                   __end_of_isdigit 3D50  
                   ___ftpack@sign 0013             fillCircleHelper@delta 0029  
                           _putch 3E1E             fillCircleHelper@color 002B  
                           _volts 0080                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
          ??_update_LCD_PED_Count 0049                  __end_of_Day_Mode 2F90  
                 write_data@data_ 0011                   __initialization 3738  
           __end_of_WAIT_HALF_SEC 3D86                      __end_of_main 30FC  
                    __end_of_font FB06                  __end_of_Init_ADC 3E3A  
                __end_of_Rcmd2red 3B34                        _Night_Mode 30FC  
                __end_of_Set_EWLT 3A6A                  __end_of_Set_NSLT 39DA  
                          ??_main 0060                     ___fttol@sign1 0042  
                   __activetblptr 000002                 __end_of_LCD_Reset 3DEC  
                    _SW_EWPED_Txt 006F              __size_of__tdiv_to_l_ 0110  
       ??_TFT_GreenTab_Initialize 0029                  ?_update_LCD_misc 0001  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                  ___llmod@dividend 000F  
                          ?_scale 0032                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _CCPR2L 000FBB  
                ___awdiv@dividend 0015                  __end_of___awtoft 3BAE  
                          ?_putch 0001                  __end_of___ftpack 3056  
                __end_of___lltoft 37FA                         ??_Do_Init 0012  
                          i2l5674 34A0                            i2l5678 34AA  
                          _OSCCON 000FD3                __size_of_Init_TRIS 0016  
                          _SPBRGH 000FB0               __size_of_WAIT_1_SEC 0082  
                          _SSPBUF 000FC9                      _SW_NSPED_Txt 00DB  
                __end_of_delay_ms 38A8               __size_of_WAIT_N_SEC 0032  
                          _Set_EW 3A6A                            _Set_NS 39DA  
                __end_of_fillRect 3992                  __end_of_drawChar 2412  
                __end_of__powers_ FC58                  __end_of_drawRect 3738  
              __size_of_OpenUSART 0070                            ___ftge 31A0  
        __size_of_Activate_Buzzer 0012                            ___wmul 3C96  
                       ??___awdiv 0019         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 2DEC                         ??___ftadd 0042  
                       ??___awmod 0013                         ??___ftdiv 002D  
                       ??___ftneg 0012                         ??___lldiv 0017  
                       ??___ftmul 0029                         ??___llmod 0017  
                       ??___ftsub 004E                         ??___fttol 003D  
                          _chkisr 0008                            _buffer 0095  
                          _fround 1B5C                            clear_0 373E  
                          clear_1 374A                  ___awdiv@quotient 001B  
                 ___awmod@divisor 0011        __size_of_Deactivate_Buzzer 0008  
                 ___awmod@counter 0013                            _printf 001C  
               WAIT_N_SEC@seconds 005E                      drawtext@size 003E  
                          _strcpy 3BE0                            _strlen 3B34  
           ___ftmul@f3_as_product 002D              __end_of_get_full_ADC 3CE4  
                    __pdataCOMRAM 006C                         ??_isdigit 000F  
                     Set_EW@color 0044                      __mediumconst FA06  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 000F  
                __end_of_spiwrite 3DDA                       Set_NS@color 0044  
                      __accesstop 0080           __end_of__initialization 3790  
                       ?_INT0_ISR 0001                         ?_INT1_ISR 0001  
                       ?_INT2_ISR 0001                        ___ftadd@f1 003C  
                      ___ftadd@f2 003F                        ___ftge@ff1 000F  
                      ___ftge@ff2 0012                     ___rparam_used 000001  
                      ___ftdiv@f1 0027                        ___ftdiv@f2 002A  
                      ___ftdiv@f3 0031                        ___ftneg@f1 000F  
                      ___awtoft@c 0023                        ___ftmul@f1 0023  
                      ___ftmul@f2 0026                        ___ftsub@f1 0048  
                      ___ftsub@f2 004B                        ___fttol@f1 0039  
                   __end_of_Rcmd1 265A                     __end_of_Rcmd3 2A5E  
                  __pcstackCOMRAM 0001                      __pidataBANK0 3C6C  
                      ___lltoft@c 0017                     __end_of_font2 FBE2  
                   __end_of_scale 15B6                     __end_of_putch 3E2C  
                     ?_Night_Mode 0001                 __end_of_Init_TRIS 3D9C  
                  drawPixel@color 0017            __size_of_write_command 0010  
                      __div_to_l_ 276A                         ?_Day_Mode 0001  
      fillCircleHelper@cornername 0027                           ??_Rcmd1 0029  
                         ??_Rcmd3 0029                __size_of_drawPixel 0030  
               __end_of_OpenUSART 36D2                   __div_to_l_@exp1 001A  
                 __div_to_l_@cntr 0019                           ??_scale 0035  
            __size_of_PED_Control 005C                   __div_to_l_@quot 0015  
                         ??_putch 000F                        __pbssBANK0 0080  
                       ?_Init_ADC 0001                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014        __end_of_Select_ADC_Channel 3E54  
                      ??_INT0_ISR 0001                        ??_INT1_ISR 0001  
                      ??_INT2_ISR 0001                   spiwrite@spidata 0010  
                       ?_Set_EWLT 0001                     __div_to_l_@f1 000F  
                   __div_to_l_@f2 0012                         ?_Set_NSLT 0001  
               ?_update_LCD_color 0041                 ?_update_LCD_count 0048  
                         ?_Set_EW 0001                           ?_Set_NS 0001  
              __CFG_CCP2MX$PORTBE 000000                ??_update_LCD_color 0042  
              ??_update_LCD_count 0049                           ?___ftge 000F  
                         ?___wmul 001D                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
       update_LCD_PED_Count@count 0048                           ?_fround 0032  
                    ??_WAIT_1_SEC 005E                         ?___awtoft 0023  
                       ?___ftpack 000F                        _fillCircle 38A8  
                         ?_printf 004E         Select_ADC_Channel@channel 000F  
                       ?___lltoft 0017                           ?_strcpy 000F  
                         ?_strlen 000F                      ??_WAIT_N_SEC 005E  
               ??_Activate_Buzzer 000F                        _fillScreen 3D50  
                      _drawCircle 1F64                        ??_Day_Mode 0060  
                       ?_delay_ms 0023                         ?_fillRect 0021  
       update_LCD_count@direction 004A                         ?_drawChar 002C  
                         _SSPCON1 000FC6                         ?_drawRect 0021  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 2EC8  
                       ?_drawtext 0037                           _SW_EWLT 008F  
                         _SW_MODE 0091                        ??_Init_ADC 000F  
                         _Do_Init 3CE4                           _SW_NSLT 0092  
                      ??_Rcmd2red 0012               __size_of_Night_Mode 00A4  
                   _write_command 3E0E                __end_of_WAIT_1_SEC 3570  
                      ??_Set_EWLT 0044                        ??_Set_NSLT 0044  
                     WAIT_N_SEC@i 005F                 __end_of__npowers_ FC31  
                         __Hparam 0000                        _scale$2517 0035  
              __end_of_WAIT_N_SEC 3BE0                           __Lparam 0000  
                 __size_of_Set_EW 0048                   __size_of_Set_NS 0048  
           __end_of_drawFastHLine 33E0                 __end_of_drawPixel 3C42  
           __end_of_drawFastVLine 3468                  _fillCircleHelper 2412  
                 __size_of___ftge 0096                           ___awdiv 3236  
                         ___ftadd 1DA0                           ___awmod 3570  
                         ___ftdiv 2C2C                           ___ftneg 3D0A  
                         ___lldiv 32CC                   __size_of___wmul 0028  
                         ___ftmul 2874                           ___llmod 35F2  
                         ___ftsub 3AB2                           ___fttol 2B46  
           __size_of_get_full_ADC 0026                   __size_of_chkisr 34E6  
                       ?_spiwrite 0001                           __pcinit 3738  
                      ??___awtoft 0026                        ??___ftpack 0014  
                 __size_of_fround 0244                           __ramtop 1000  
                      ??___lltoft 001B                           __ptext0 3056  
                         __ptext1 3E48                           __ptext2 30FC  
                         __ptext3 0AB8                           __ptext4 3D50  
                         __ptext5 2DEC                           __ptext6 36D2  
                         __ptext7 3358                           __ptext8 3C42  
                         __ptext9 296C                   __size_of_printf 0A9C  
               __end_of_init_UART 3DC6                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
                     ?__div_to_l_ 000F                           _dpowers FBE2  
                         _isdigit 3D2E                         _T3CONbits 000FB1  
                ___awmod@dividend 000F                        ??_delay_ms 0025  
                   drawtext@_text 0038                     drawtext@color 003A  
                      ??_fillRect 0026                        ??_drawChar 0033  
                       _LCD_Reset 3DDA                        ??_drawRect 002B  
                   _setAddrWindow 38FA                    __pintcode_body 3468  
              drawFastHLine@color 0018                        delay_ms@ms 0023  
            end_of_initialization 3790                         _INT0_flag 0083  
                       _INT1_flag 0085                         _INT2_flag 0087  
                      ??_drawtext 003F                    ?_write_command 0001  
                   __Lmediumconst FA06                           int_func 3468  
                       _PED_Count 0067                      _get_full_ADC 3CBE  
                 ___lldiv@divisor 0013                      PED_Control@i 004C  
   __size_of_update_LCD_PED_Count 00E8                   ___lldiv@counter 001B  
                       _RCSTAbits 000FAB                           printf@c 00F5  
                         printf@f 004E                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                 _WAIT_1_SEC_W_BEEP 3D9C  
                  __tdiv_to_l_@f1 000F                    __tdiv_to_l_@f2 0012  
                      ??_spiwrite 000F                           strlen@s 000F  
                 fillCircle@color 003F                ?_WAIT_1_SEC_W_BEEP 0001  
                   ??__tdiv_to_l_ 0015                       ?_fillCircle 0039  
                       _PORTAbits 000F80                  drawtext@cursor_x 0047  
                drawtext@cursor_y 0046                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                       ?_fillScreen 0022  
                     ?_drawCircle 001A                        drawChar@bg 0030  
             ??_WAIT_1_SEC_W_BEEP 000F                         _TRISCbits 000F94  
                  ?_setAddrWindow 0012                        ?_LCD_Reset 0001  
                drawtext@textsize 0042            __size_of_WAIT_HALF_SEC 001A  
        __size_of_update_LCD_misc 0244                        drawPixel@x 0019  
                      drawPixel@y 0016                       ___ftdiv@exp 0034  
                     printf@width 00EE                         _TXSTAbits 000FAC  
              PED_Control@Num_Sec 004B                get_full_ADC@result 0013  
               __size_of_INT0_ISR 000A               __size_of__div_to_l_ 010A  
               __size_of_INT1_ISR 000A                 __size_of_INT2_ISR 000E  
       __end_of_WAIT_1_SEC_W_BEEP 3DB2                       ___ftmul@exp 002C  
                  __end_of_Set_EW 3AB2                    __end_of_Set_NS 3A22  
                  __end_of___ftge 3236                    __end_of___wmul 3CBE  
                   delay_ms@count 0027                        _write_data 3DFE  
                   __pidataCOMRAM 3E70                    __end_of_chkisr 34EE  
                    ??_Night_Mode 0060          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003C                    __end_of_fround 1DA0  
                  __end_of_printf 0AB8                    __end_of_strcpy 3C12  
                  __end_of_strlen 3B72               start_initialization 3738  
                       _Init_TRIS 3D86               __end_of__tdiv_to_l_ 276A  
               __size_of_Day_Mode 00C8                   ??_write_command 0011  
                       _OpenUSART 3662               __size_of_fillCircle 0052  
                 ___llmod@divisor 0013                  __CFG_OSC$INTIO67 000000  
               __size_of_Init_ADC 000E                   ___llmod@counter 0017  
              __end_of_Night_Mode 31A0                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                        ??_Set_EW 0044                          ??_Set_NS 0044  
               __size_of_Set_EWLT 0048                   _Activate_Buzzer 3DEC  
               __size_of_Set_NSLT 0048                          ??___ftge 0015  
                        ??___wmul 0021                     _WAIT_HALF_SEC 3D6C  
                        ??_chkisr 0001                       __pdataBANK0 00B4  
              _Select_ADC_Channel 3E48                          ??_fround 0035  
                 setAddrWindow@x0 0015                   setAddrWindow@x1 0013  
                 setAddrWindow@y0 0012                   setAddrWindow@y1 0014  
                        ??_printf 0053                          ??_strcpy 0013  
                        ??_strlen 0011                      _PED_EW_Count 00CB  
       __size_of_update_LCD_color 0362         __size_of_update_LCD_count 01AA  
                      fround@prec 003B                 __size_of___awtoft 003C  
               __size_of___ftpack 00C6               ?_Select_ADC_Channel 0001  
               __size_of___lltoft 0060                       __pbssCOMRAM 0064  
                   ??_PED_Control 004C                   ??_setAddrWindow 0015  
                      ?_Init_TRIS 0001                     __pcstackBANK0 00DD  
                    _PED_NS_Count 00CE                       ??_LCD_Reset 0029  
                    _isdigit$2209 0010          __end_of_fillCircleHelper 254A  
               __size_of_delay_ms 0052                          ?_Do_Init 0001  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 000F                 __size_of_drawRect 0066  
               __size_of_drawtext 00DE              ??_Select_ADC_Channel 000F  
      __size_of_WAIT_1_SEC_W_BEEP 0016                 ??_update_LCD_misc 0059  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 3C6C  
                  ?_WAIT_HALF_SEC 0001                     __pmediumconst FA06  
                        ?___awdiv 0015                          ?___ftadd 003C  
                        ?___awmod 000F                          ?___ftdiv 0027  
                        ?___ftneg 000F                          ?___lldiv 000F  
                        ?___ftmul 0023                          ?___llmod 000F  
                        ?___ftsub 0048                         __npowers_ FC0A  
                        ?___fttol 0039                         __tft_type 0068  
                       _direction 0094                drawFastVLine@color 0018  
                     ?_write_data 0001                         _drawPixel 3C12  
                     __tdiv_to_l_ 265A                 __size_of_spiwrite 0014  
                    ??__div_to_l_ 0015                          ?_isdigit 0001  
               _Initialize_Screen 0AB8                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 3DB2  
              ?_Initialize_Screen 0001                    __size_of_scale 03E0  
                  __size_of_putch 000E               __end_of_PED_Control 3856  
         __end_of_Activate_Buzzer 3DFE                          _INT0_ISR 3E5E  
                        _INT1_ISR 3E54                          _INT2_ISR 3E3A  
                  ___wmul@product 0021               ??_Initialize_Screen 0048  
                        _EWPED_SW 008D                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 2874  
                        _PIR2bits 000FA1                          _NSPED_SW 008E  
                        _EW_Count 00C2                         fillRect@h 0023  
                       fillRect@i 002A                         fillRect@w 0022  
                       fillRect@x 0029                         fillRect@y 0021  
                       drawChar@c 002D                         drawChar@i 0036  
                       drawChar@j 0035                      ??_fillCircle 0041  
                       drawChar@x 0034                         drawChar@y 002C  
                      ?_drawPixel 0016            __size_of_fillRectangle 00DC  
                        _NS_Count 00C8                        _ADCON0bits 000FC2  
               ___wmul@multiplier 001D         __end_of_Initialize_Screen 11D6  
                    ??_fillScreen 0024                         drawRect@h 0027  
                       drawRect@w 0025                         drawRect@x 0021  
                       drawRect@y 0023                     _FlashingR_Txt 00D3  
                   _FlashingS_Txt 00D5                      ??_drawCircle 0022  
                      printf@flag 00EC      __end_of_update_LCD_PED_Count 2B46  
                      printf@fval 00F0                         main@nStep 0062  
                        _SW_EWPED 0090                        printf@prec 00F3  
           update_LCD_color@color 0041                          _Day_Mode 2EC8  
                        _SW_NSPED 0093         update_LCD_color@direction 0042  
                     ??_Init_TRIS 000F                        ?_init_UART 0001  
          __size_of_drawFastHLine 0088                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 3764  
                       copy_data1 3784                         drawtext@i 0044  
          __size_of_drawFastVLine 0088                         drawtext@x 0041  
                       drawtext@y 0037                          _Init_ADC 3E2C  
               write_command@cmd_ 0011                       ??_OpenUSART 0011  
                        _Rcmd2red 3AF6                  __size_of_Do_Init 0026  
             __size_of_write_data 0010                   OpenUSART@config 0011  
                        _Set_EWLT 3A22                __end_of_fillCircle 38FA  
                        _Set_NSLT 3992                          __Hrparam 0000  
                 ??_WAIT_HALF_SEC 000F                __end_of_fillScreen 3D6C  
           update_LCD_count@count 0048                          __Lrparam 0000  
              __end_of_drawCircle 2112                  __size_of___awdiv 0096  
                __size_of___ftadd 01C4                  __size_of___awmod 0082  
                __size_of___ftdiv 00E2                  __size_of___ftneg 0024  
                __size_of___lldiv 008C                  __size_of___ftmul 00F8  
                __size_of___llmod 0070                  __size_of___ftsub 0044  
                __size_of___fttol 00E6                          ___awtoft 3B72  
                        ___ftpack 2F90                       _fround$2515 0038  
                     _fround$2516 0035                          ___lltoft 379A  
                _update_LCD_color 15B6                  _update_LCD_count 2112  
                __size_of_isdigit 0022                       _PED_Control 37FA  
                        _delay_ms 3856                          __ptext10 3AF6  
                        __ptext11 254A                          __ptext20 11D6  
                        __ptext12 3DDA                          __ptext21 3E1E  
                        __ptext13 3856                          __ptext30 2B46  
                        __ptext22 3D2E                          __ptext14 2EC8  
                        __ptext31 3AB2                          __ptext23 1B5C  
                        __ptext15 3BAE                          __ptext40 3DB2  
                        __ptext32 1DA0                          __ptext24 2874  
                        __ptext16 2112                          __ptext41 3662  
                        __ptext33 3D0A                          __ptext25 265A  
                        __ptext17 34EE                          __ptext50 38A8  
                        __ptext42 3D86                          __ptext34 31A0  
                        __ptext26 276A                          __ptext18 1918  
                        __ptext51 2412                          __ptext43 3E2C  
                        __ptext35 3CBE                          __ptext27 379A  
                        __ptext19 001C                          __ptext60 3C12  
                        __ptext52 1F64                          __ptext44 3BE0  
                        __ptext36 2C2C                          __ptext28 35F2  
                        __ptext61 38FA                          __ptext53 37FA  
                        __ptext45 3992                          __ptext37 3B72  
                        __ptext29 32CC                          __ptext70 3E68  
                        __ptext62 3DFE                          __ptext54 2A5E  
                        __ptext46 39DA                          __ptext38 2F90  
                        __ptext71 3DEC                          __ptext63 3E0E  
                        __ptext55 2D0E                          __ptext47 3A22  
                        __ptext39 3CE4                          __ptext64 3DC6  
                        __ptext56 3B34                          __ptext48 3A6A  
                        __ptext73 3E3A                          __ptext65 3C96  
                        __ptext57 22BC                          __ptext49 15B6  
                        __ptext74 3E54                          __ptext66 3570  
                        __ptext58 3948                          __ptext75 3E5E  
                        __ptext67 3236                          __ptext59 33E0  
                        __ptext68 3D9C                          __ptext69 3D6C  
                        _fillRect 3948                          _drawChar 22BC  
                        __powers_ FC31                          _drawRect 36D2  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 0069  
                        _drawtext 2D0E                        strcpy@from 0011  
                   _fillRectangle 2DEC                  ?_Activate_Buzzer 0001  
                   __size_of_main 00A6                   fillRectangle@hi 001F  
                 fillRectangle@lo 0020                     _drawFastHLine 3358  
                   _drawFastVLine 33E0                         printf@exp 00EA  
                        _spiwrite 3DC6                         printf@val 00E2  
                     ??_drawPixel 0019                          _rowstart 006B  
              fillCircleHelper@x0 0021                fillCircleHelper@y0 0023  
      __size_of_Initialize_Screen 071E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 000F                       ??_init_UART 0012  
                        isdigit@c 0011                     Set_EWLT@color 0044  
                        scale@scl 0038                        _EWLT_Count 00BF  
               ?_fillCircleHelper 0021                         spiwrite@x 000F  
                        intlevel2 0000                   _update_LCD_misc 1918  
                  ?_fillRectangle 0016                  __tdiv_to_l_@exp1 001D  
                __tdiv_to_l_@cntr 001C                  __tdiv_to_l_@quot 0018  
              ??_fillCircleHelper 002D             __end_of_write_command 3E1E  
                ___lldiv@dividend 000F                   fillScreen@color 0022  
            update_LCD_misc@nStep 0059              _update_LCD_PED_Count 2A5E  
            update_LCD_misc@volts 005B                      fillCircle@x0 0039  
                    fillCircle@y0 003B                    ?_drawFastHLine 0016  
                  fillRectangle@h 0018                    fillRectangle@w 0017  
                  fillRectangle@x 0021                    fillRectangle@y 0016  
                  ?_drawFastVLine 0016                          printf@ap 00E0  
               fillCircleHelper@f 0033                 fillCircleHelper@r 0025  
               fillCircleHelper@x 0035                 fillCircleHelper@y 0037  
                    ??_write_data 0011                        _WAIT_1_SEC 34EE  
                   fillRect@color 0024                      ?__tdiv_to_l_ 000F  
                     _printf$2518 00DD                        _WAIT_N_SEC 3BAE  
                ___lldiv@quotient 0017                          strcpy@cp 0013  
                        strlen@cp 0013                          strcpy@to 000F  
                   Set_NSLT@color 0044                        _NSLT_Count 00C5  
                     fillCircle@r 003D             __end_of_setAddrWindow 3948  
              fillRectangle@color 0019                     drawChar@color 002E  
              __end_of_write_data 3E0E                      drawChar@line 0033  
                   ?_get_full_ADC 000F                      drawChar@size 0032  
           ?_update_LCD_PED_Count 0048       __size_of_Select_ADC_Channel 000C  
