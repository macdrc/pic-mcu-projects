

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 08 17:29:36 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  003FDE                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _wrap
   101  003FDE  01                 	db	1
   102                           
   103                           ;initializer for _SW_EWLT_Txt
   104  003FDF  30                 	db	48
   105  003FE0  00                 	db	0
   106                           
   107                           ;initializer for _SW_EWPED_Txt
   108  003FE1  30                 	db	48
   109  003FE2  00                 	db	0
   110                           
   111                           	psect	idataBANK0
   112  003DD8                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _array
   116  003DD8  40                 	db	64
   117  003DD9  79                 	db	121
   118  003DDA  24                 	db	36
   119  003DDB  30                 	db	48
   120  003DDC  19                 	db	25
   121  003DDD  12                 	db	18
   122  003DDE  02                 	db	2
   123  003DDF  78                 	db	120
   124  003DE0  00                 	db	0
   125  003DE1  10                 	db	16
   126  003DE2  FF                 	db	255
   127                           
   128                           ;initializer for _EWLT_Count
   129  003DE3  30                 	db	48
   130  003DE4  30                 	db	48
   131  003DE5  00                 	db	0
   132                           
   133                           ;initializer for _EW_Count
   134  003DE6  30                 	db	48
   135  003DE7  30                 	db	48
   136  003DE8  00                 	db	0
   137                           
   138                           ;initializer for _NSLT_Count
   139  003DE9  30                 	db	48
   140  003DEA  30                 	db	48
   141  003DEB  00                 	db	0
   142                           
   143                           ;initializer for _NS_Count
   144  003DEC  30                 	db	48
   145  003DED  30                 	db	48
   146  003DEE  00                 	db	0
   147                           
   148                           ;initializer for _PED_EW_Count
   149  003DEF  30                 	db	48
   150  003DF0  30                 	db	48
   151  003DF1  00                 	db	0
   152                           
   153                           ;initializer for _PED_NS_Count
   154  003DF2  30                 	db	48
   155  003DF3  30                 	db	48
   156  003DF4  00                 	db	0
   157                           
   158                           ;initializer for _Act_Mode_Txt
   159  003DF5  44                 	db	68
   160  003DF6  00                 	db	0
   161                           
   162                           ;initializer for _FlashingR_Txt
   163  003DF7  30                 	db	48
   164  003DF8  00                 	db	0
   165                           
   166                           ;initializer for _FlashingS_Txt
   167  003DF9  30                 	db	48
   168  003DFA  00                 	db	0
   169                           
   170                           ;initializer for _SW_MODE_Txt
   171  003DFB  44                 	db	68
   172  003DFC  00                 	db	0
   173                           
   174                           ;initializer for _SW_NSLT_Txt
   175  003DFD  30                 	db	48
   176  003DFE  00                 	db	0
   177                           
   178                           ;initializer for _SW_NSPED_Txt
   179  003DFF  30                 	db	48
   180  003E00  00                 	db	0
   181                           
   182                           	psect	mediumconst
   183  00FCD6                     __pmediumconst:
   184                           	opt stack 0
   185  00FCD6  00                 	db	0
   186  00FCD7                     _font:
   187                           	opt stack 0
   188  00FCD7  00                 	db	0
   189  00FCD8  00                 	db	0
   190  00FCD9  00                 	db	0
   191  00FCDA  00                 	db	0
   192  00FCDB  00                 	db	0
   193  00FCDC  00                 	db	0
   194  00FCDD  00                 	db	0
   195  00FCDE  5F                 	db	95
   196  00FCDF  00                 	db	0
   197  00FCE0  00                 	db	0
   198  00FCE1  00                 	db	0
   199  00FCE2  07                 	db	7
   200  00FCE3  00                 	db	0
   201  00FCE4  07                 	db	7
   202  00FCE5  00                 	db	0
   203  00FCE6  14                 	db	20
   204  00FCE7  7F                 	db	127
   205  00FCE8  14                 	db	20
   206  00FCE9  7F                 	db	127
   207  00FCEA  14                 	db	20
   208  00FCEB  24                 	db	36
   209  00FCEC  2A                 	db	42
   210  00FCED  7F                 	db	127
   211  00FCEE  2A                 	db	42
   212  00FCEF  12                 	db	18
   213  00FCF0  23                 	db	35
   214  00FCF1  13                 	db	19
   215  00FCF2  08                 	db	8
   216  00FCF3  64                 	db	100
   217  00FCF4  62                 	db	98
   218  00FCF5  36                 	db	54
   219  00FCF6  49                 	db	73
   220  00FCF7  56                 	db	86
   221  00FCF8  20                 	db	32
   222  00FCF9  50                 	db	80
   223  00FCFA  00                 	db	0
   224  00FCFB  08                 	db	8
   225  00FCFC  07                 	db	7
   226  00FCFD  03                 	db	3
   227  00FCFE  00                 	db	0
   228  00FCFF  00                 	db	0
   229  00FD00  1C                 	db	28
   230  00FD01  22                 	db	34
   231  00FD02  41                 	db	65
   232  00FD03  00                 	db	0
   233  00FD04  00                 	db	0
   234  00FD05  41                 	db	65
   235  00FD06  22                 	db	34
   236  00FD07  1C                 	db	28
   237  00FD08  00                 	db	0
   238  00FD09  2A                 	db	42
   239  00FD0A  1C                 	db	28
   240  00FD0B  7F                 	db	127
   241  00FD0C  1C                 	db	28
   242  00FD0D  2A                 	db	42
   243  00FD0E  08                 	db	8
   244  00FD0F  08                 	db	8
   245  00FD10  3E                 	db	62
   246  00FD11  08                 	db	8
   247  00FD12  08                 	db	8
   248  00FD13  00                 	db	0
   249  00FD14  80                 	db	128
   250  00FD15  70                 	db	112
   251  00FD16  30                 	db	48
   252  00FD17  00                 	db	0
   253  00FD18  08                 	db	8
   254  00FD19  08                 	db	8
   255  00FD1A  08                 	db	8
   256  00FD1B  08                 	db	8
   257  00FD1C  08                 	db	8
   258  00FD1D  00                 	db	0
   259  00FD1E  00                 	db	0
   260  00FD1F  60                 	db	96
   261  00FD20  60                 	db	96
   262  00FD21  00                 	db	0
   263  00FD22  20                 	db	32
   264  00FD23  10                 	db	16
   265  00FD24  08                 	db	8
   266  00FD25  04                 	db	4
   267  00FD26  02                 	db	2
   268  00FD27  3E                 	db	62
   269  00FD28  51                 	db	81
   270  00FD29  49                 	db	73
   271  00FD2A  45                 	db	69
   272  00FD2B  3E                 	db	62
   273  00FD2C  00                 	db	0
   274  00FD2D  42                 	db	66
   275  00FD2E  7F                 	db	127
   276  00FD2F  40                 	db	64
   277  00FD30  00                 	db	0
   278  00FD31  72                 	db	114
   279  00FD32  49                 	db	73
   280  00FD33  49                 	db	73
   281  00FD34  49                 	db	73
   282  00FD35  46                 	db	70
   283  00FD36  21                 	db	33
   284  00FD37  41                 	db	65
   285  00FD38  49                 	db	73
   286  00FD39  4D                 	db	77
   287  00FD3A  33                 	db	51
   288  00FD3B  18                 	db	24
   289  00FD3C  14                 	db	20
   290  00FD3D  12                 	db	18
   291  00FD3E  7F                 	db	127
   292  00FD3F  10                 	db	16
   293  00FD40  27                 	db	39
   294  00FD41  45                 	db	69
   295  00FD42  45                 	db	69
   296  00FD43  45                 	db	69
   297  00FD44  39                 	db	57
   298  00FD45  3C                 	db	60
   299  00FD46  4A                 	db	74
   300  00FD47  49                 	db	73
   301  00FD48  49                 	db	73
   302  00FD49  31                 	db	49
   303  00FD4A  41                 	db	65
   304  00FD4B  21                 	db	33
   305  00FD4C  11                 	db	17
   306  00FD4D  09                 	db	9
   307  00FD4E  07                 	db	7
   308  00FD4F  36                 	db	54
   309  00FD50  49                 	db	73
   310  00FD51  49                 	db	73
   311  00FD52  49                 	db	73
   312  00FD53  36                 	db	54
   313  00FD54  46                 	db	70
   314  00FD55  49                 	db	73
   315  00FD56  49                 	db	73
   316  00FD57  29                 	db	41
   317  00FD58  1E                 	db	30
   318  00FD59  00                 	db	0
   319  00FD5A  00                 	db	0
   320  00FD5B  14                 	db	20
   321  00FD5C  00                 	db	0
   322  00FD5D  00                 	db	0
   323  00FD5E  00                 	db	0
   324  00FD5F  40                 	db	64
   325  00FD60  34                 	db	52
   326  00FD61  00                 	db	0
   327  00FD62  00                 	db	0
   328  00FD63  00                 	db	0
   329  00FD64  08                 	db	8
   330  00FD65  14                 	db	20
   331  00FD66  22                 	db	34
   332  00FD67  41                 	db	65
   333  00FD68  14                 	db	20
   334  00FD69  14                 	db	20
   335  00FD6A  14                 	db	20
   336  00FD6B  14                 	db	20
   337  00FD6C  14                 	db	20
   338  00FD6D  00                 	db	0
   339  00FD6E  41                 	db	65
   340  00FD6F  22                 	db	34
   341  00FD70  14                 	db	20
   342  00FD71  08                 	db	8
   343  00FD72  02                 	db	2
   344  00FD73  01                 	db	1
   345  00FD74  59                 	db	89
   346  00FD75  09                 	db	9
   347  00FD76  06                 	db	6
   348  00FD77  3E                 	db	62
   349  00FD78  41                 	db	65
   350  00FD79  5D                 	db	93
   351  00FD7A  59                 	db	89
   352  00FD7B  4E                 	db	78
   353  00FD7C  7C                 	db	124
   354  00FD7D  12                 	db	18
   355  00FD7E  11                 	db	17
   356  00FD7F  12                 	db	18
   357  00FD80  7C                 	db	124
   358  00FD81  7F                 	db	127
   359  00FD82  49                 	db	73
   360  00FD83  49                 	db	73
   361  00FD84  49                 	db	73
   362  00FD85  36                 	db	54
   363  00FD86  3E                 	db	62
   364  00FD87  41                 	db	65
   365  00FD88  41                 	db	65
   366  00FD89  41                 	db	65
   367  00FD8A  22                 	db	34
   368  00FD8B  7F                 	db	127
   369  00FD8C  41                 	db	65
   370  00FD8D  41                 	db	65
   371  00FD8E  41                 	db	65
   372  00FD8F  3E                 	db	62
   373  00FD90  7F                 	db	127
   374  00FD91  49                 	db	73
   375  00FD92  49                 	db	73
   376  00FD93  49                 	db	73
   377  00FD94  41                 	db	65
   378  00FD95  7F                 	db	127
   379  00FD96  09                 	db	9
   380  00FD97  09                 	db	9
   381  00FD98  09                 	db	9
   382  00FD99  01                 	db	1
   383  00FD9A  3E                 	db	62
   384  00FD9B  41                 	db	65
   385  00FD9C  41                 	db	65
   386  00FD9D  51                 	db	81
   387  00FD9E  73                 	db	115
   388  00FD9F  7F                 	db	127
   389  00FDA0  08                 	db	8
   390  00FDA1  08                 	db	8
   391  00FDA2  08                 	db	8
   392  00FDA3  7F                 	db	127
   393  00FDA4  00                 	db	0
   394  00FDA5  41                 	db	65
   395  00FDA6  7F                 	db	127
   396  00FDA7  41                 	db	65
   397  00FDA8  00                 	db	0
   398  00FDA9  20                 	db	32
   399  00FDAA  40                 	db	64
   400  00FDAB  41                 	db	65
   401  00FDAC  3F                 	db	63
   402  00FDAD  01                 	db	1
   403  00FDAE  7F                 	db	127
   404  00FDAF  08                 	db	8
   405  00FDB0  14                 	db	20
   406  00FDB1  22                 	db	34
   407  00FDB2  41                 	db	65
   408  00FDB3  7F                 	db	127
   409  00FDB4  40                 	db	64
   410  00FDB5  40                 	db	64
   411  00FDB6  40                 	db	64
   412  00FDB7  40                 	db	64
   413  00FDB8  7F                 	db	127
   414  00FDB9  02                 	db	2
   415  00FDBA  1C                 	db	28
   416  00FDBB  02                 	db	2
   417  00FDBC  7F                 	db	127
   418  00FDBD  7F                 	db	127
   419  00FDBE  04                 	db	4
   420  00FDBF  08                 	db	8
   421  00FDC0  10                 	db	16
   422  00FDC1  7F                 	db	127
   423  00FDC2  3E                 	db	62
   424  00FDC3  41                 	db	65
   425  00FDC4  41                 	db	65
   426  00FDC5  41                 	db	65
   427  00FDC6  3E                 	db	62
   428  00FDC7  7F                 	db	127
   429  00FDC8  09                 	db	9
   430  00FDC9  09                 	db	9
   431  00FDCA  09                 	db	9
   432  00FDCB  06                 	db	6
   433  00FDCC  3E                 	db	62
   434  00FDCD  41                 	db	65
   435  00FDCE  51                 	db	81
   436  00FDCF  21                 	db	33
   437  00FDD0  5E                 	db	94
   438  00FDD1  7F                 	db	127
   439  00FDD2  09                 	db	9
   440  00FDD3  19                 	db	25
   441  00FDD4  29                 	db	41
   442  00FDD5  46                 	db	70
   443  00FDD6                     __end_of_font:
   444                           	opt stack 0
   445  00FDD6                     _font2:
   446                           	opt stack 0
   447  00FDD6  26                 	db	38
   448  00FDD7  49                 	db	73
   449  00FDD8  49                 	db	73
   450  00FDD9  49                 	db	73
   451  00FDDA  32                 	db	50
   452  00FDDB  03                 	db	3
   453  00FDDC  01                 	db	1
   454  00FDDD  7F                 	db	127
   455  00FDDE  01                 	db	1
   456  00FDDF  03                 	db	3
   457  00FDE0  3F                 	db	63
   458  00FDE1  40                 	db	64
   459  00FDE2  40                 	db	64
   460  00FDE3  40                 	db	64
   461  00FDE4  3F                 	db	63
   462  00FDE5  1F                 	db	31
   463  00FDE6  20                 	db	32
   464  00FDE7  40                 	db	64
   465  00FDE8  20                 	db	32
   466  00FDE9  1F                 	db	31
   467  00FDEA  3F                 	db	63
   468  00FDEB  40                 	db	64
   469  00FDEC  38                 	db	56
   470  00FDED  40                 	db	64
   471  00FDEE  3F                 	db	63
   472  00FDEF  63                 	db	99
   473  00FDF0  14                 	db	20
   474  00FDF1  08                 	db	8
   475  00FDF2  14                 	db	20
   476  00FDF3  63                 	db	99
   477  00FDF4  03                 	db	3
   478  00FDF5  04                 	db	4
   479  00FDF6  78                 	db	120
   480  00FDF7  04                 	db	4
   481  00FDF8  03                 	db	3
   482  00FDF9  61                 	db	97
   483  00FDFA  59                 	db	89
   484  00FDFB  49                 	db	73
   485  00FDFC  4D                 	db	77
   486  00FDFD  43                 	db	67
   487  00FDFE  00                 	db	0
   488  00FDFF  7F                 	db	127
   489  00FE00  41                 	db	65
   490  00FE01  41                 	db	65
   491  00FE02  41                 	db	65
   492  00FE03  02                 	db	2
   493  00FE04  04                 	db	4
   494  00FE05  08                 	db	8
   495  00FE06  10                 	db	16
   496  00FE07  20                 	db	32
   497  00FE08  00                 	db	0
   498  00FE09  41                 	db	65
   499  00FE0A  41                 	db	65
   500  00FE0B  41                 	db	65
   501  00FE0C  7F                 	db	127
   502  00FE0D  04                 	db	4
   503  00FE0E  02                 	db	2
   504  00FE0F  01                 	db	1
   505  00FE10  02                 	db	2
   506  00FE11  04                 	db	4
   507  00FE12  40                 	db	64
   508  00FE13  40                 	db	64
   509  00FE14  40                 	db	64
   510  00FE15  40                 	db	64
   511  00FE16  40                 	db	64
   512  00FE17  00                 	db	0
   513  00FE18  03                 	db	3
   514  00FE19  07                 	db	7
   515  00FE1A  08                 	db	8
   516  00FE1B  00                 	db	0
   517  00FE1C  20                 	db	32
   518  00FE1D  54                 	db	84
   519  00FE1E  54                 	db	84
   520  00FE1F  78                 	db	120
   521  00FE20  40                 	db	64
   522  00FE21  7F                 	db	127
   523  00FE22  28                 	db	40
   524  00FE23  44                 	db	68
   525  00FE24  44                 	db	68
   526  00FE25  38                 	db	56
   527  00FE26  38                 	db	56
   528  00FE27  44                 	db	68
   529  00FE28  44                 	db	68
   530  00FE29  44                 	db	68
   531  00FE2A  28                 	db	40
   532  00FE2B  38                 	db	56
   533  00FE2C  44                 	db	68
   534  00FE2D  44                 	db	68
   535  00FE2E  28                 	db	40
   536  00FE2F  7F                 	db	127
   537  00FE30  38                 	db	56
   538  00FE31  54                 	db	84
   539  00FE32  54                 	db	84
   540  00FE33  54                 	db	84
   541  00FE34  18                 	db	24
   542  00FE35  00                 	db	0
   543  00FE36  08                 	db	8
   544  00FE37  7E                 	db	126
   545  00FE38  09                 	db	9
   546  00FE39  02                 	db	2
   547  00FE3A  18                 	db	24
   548  00FE3B  A4                 	db	164
   549  00FE3C  A4                 	db	164
   550  00FE3D  9C                 	db	156
   551  00FE3E  78                 	db	120
   552  00FE3F  7F                 	db	127
   553  00FE40  08                 	db	8
   554  00FE41  04                 	db	4
   555  00FE42  04                 	db	4
   556  00FE43  78                 	db	120
   557  00FE44  00                 	db	0
   558  00FE45  44                 	db	68
   559  00FE46  7D                 	db	125
   560  00FE47  40                 	db	64
   561  00FE48  00                 	db	0
   562  00FE49  20                 	db	32
   563  00FE4A  40                 	db	64
   564  00FE4B  40                 	db	64
   565  00FE4C  3D                 	db	61
   566  00FE4D  00                 	db	0
   567  00FE4E  7F                 	db	127
   568  00FE4F  10                 	db	16
   569  00FE50  28                 	db	40
   570  00FE51  44                 	db	68
   571  00FE52  00                 	db	0
   572  00FE53  00                 	db	0
   573  00FE54  41                 	db	65
   574  00FE55  7F                 	db	127
   575  00FE56  40                 	db	64
   576  00FE57  00                 	db	0
   577  00FE58  7C                 	db	124
   578  00FE59  04                 	db	4
   579  00FE5A  78                 	db	120
   580  00FE5B  04                 	db	4
   581  00FE5C  78                 	db	120
   582  00FE5D  7C                 	db	124
   583  00FE5E  08                 	db	8
   584  00FE5F  04                 	db	4
   585  00FE60  04                 	db	4
   586  00FE61  78                 	db	120
   587  00FE62  38                 	db	56
   588  00FE63  44                 	db	68
   589  00FE64  44                 	db	68
   590  00FE65  44                 	db	68
   591  00FE66  38                 	db	56
   592  00FE67  FC                 	db	252
   593  00FE68  18                 	db	24
   594  00FE69  24                 	db	36
   595  00FE6A  24                 	db	36
   596  00FE6B  18                 	db	24
   597  00FE6C  18                 	db	24
   598  00FE6D  24                 	db	36
   599  00FE6E  24                 	db	36
   600  00FE6F  18                 	db	24
   601  00FE70  FC                 	db	252
   602  00FE71  7C                 	db	124
   603  00FE72  08                 	db	8
   604  00FE73  04                 	db	4
   605  00FE74  04                 	db	4
   606  00FE75  08                 	db	8
   607  00FE76  48                 	db	72
   608  00FE77  54                 	db	84
   609  00FE78  54                 	db	84
   610  00FE79  54                 	db	84
   611  00FE7A  24                 	db	36
   612  00FE7B  04                 	db	4
   613  00FE7C  04                 	db	4
   614  00FE7D  3F                 	db	63
   615  00FE7E  44                 	db	68
   616  00FE7F  24                 	db	36
   617  00FE80  3C                 	db	60
   618  00FE81  40                 	db	64
   619  00FE82  40                 	db	64
   620  00FE83  20                 	db	32
   621  00FE84  7C                 	db	124
   622  00FE85  1C                 	db	28
   623  00FE86  20                 	db	32
   624  00FE87  40                 	db	64
   625  00FE88  20                 	db	32
   626  00FE89  1C                 	db	28
   627  00FE8A  3C                 	db	60
   628  00FE8B  40                 	db	64
   629  00FE8C  30                 	db	48
   630  00FE8D  40                 	db	64
   631  00FE8E  3C                 	db	60
   632  00FE8F  44                 	db	68
   633  00FE90  28                 	db	40
   634  00FE91  10                 	db	16
   635  00FE92  28                 	db	40
   636  00FE93  44                 	db	68
   637  00FE94  4C                 	db	76
   638  00FE95  90                 	db	144
   639  00FE96  90                 	db	144
   640  00FE97  90                 	db	144
   641  00FE98  7C                 	db	124
   642  00FE99  44                 	db	68
   643  00FE9A  64                 	db	100
   644  00FE9B  54                 	db	84
   645  00FE9C  4C                 	db	76
   646  00FE9D  44                 	db	68
   647  00FE9E  00                 	db	0
   648  00FE9F  08                 	db	8
   649  00FEA0  36                 	db	54
   650  00FEA1  41                 	db	65
   651  00FEA2  00                 	db	0
   652  00FEA3  00                 	db	0
   653  00FEA4  00                 	db	0
   654  00FEA5  77                 	db	119
   655  00FEA6  00                 	db	0
   656  00FEA7  00                 	db	0
   657  00FEA8  00                 	db	0
   658  00FEA9  41                 	db	65
   659  00FEAA  36                 	db	54
   660  00FEAB  08                 	db	8
   661  00FEAC  00                 	db	0
   662  00FEAD  02                 	db	2
   663  00FEAE  01                 	db	1
   664  00FEAF  02                 	db	2
   665  00FEB0  04                 	db	4
   666  00FEB1  02                 	db	2
   667  00FEB2                     __end_of_font2:
   668                           	opt stack 0
   669  00FEB2                     _dpowers:
   670                           	opt stack 0
   671  00FEB2  0001               	dw	1
   672  00FEB4  0000               	dw	0
   673  00FEB6  000A               	dw	10
   674  00FEB8  0000               	dw	0
   675  00FEBA  0064               	dw	100
   676  00FEBC  0000               	dw	0
   677  00FEBE  03E8               	dw	1000
   678  00FEC0  0000               	dw	0
   679  00FEC2  2710               	dw	10000
   680  00FEC4  0000               	dw	0
   681  00FEC6  86A0               	dw	34464
   682  00FEC8  0001               	dw	1
   683  00FECA  4240               	dw	16960
   684  00FECC  000F               	dw	15
   685  00FECE  9680               	dw	38528
   686  00FED0  0098               	dw	152
   687  00FED2  E100               	dw	57600
   688  00FED4  05F5               	dw	1525
   689  00FED6  CA00               	dw	51712
   690  00FED8  3B9A               	dw	15258
   691  00FEDA                     __end_of_dpowers:
   692                           	opt stack 0
   693  00FEDA                     __npowers_:
   694                           	opt stack 0
   695  00FEDA  00                 	db	0
   696  00FEDB  80                 	db	128
   697  00FEDC  3F                 	db	63
   698  00FEDD  CD                 	db	205
   699  00FEDE  CC                 	db	204
   700  00FEDF  3D                 	db	61
   701  00FEE0  D7                 	db	215
   702  00FEE1  23                 	db	35
   703  00FEE2  3C                 	db	60
   704  00FEE3  12                 	db	18
   705  00FEE4  83                 	db	131
   706  00FEE5  3A                 	db	58
   707  00FEE6  B7                 	db	183
   708  00FEE7  D1                 	db	209
   709  00FEE8  38                 	db	56
   710  00FEE9  C6                 	db	198
   711  00FEEA  27                 	db	39
   712  00FEEB  37                 	db	55
   713  00FEEC  38                 	db	56
   714  00FEED  86                 	db	134
   715  00FEEE  35                 	db	53
   716  00FEEF  C0                 	db	192
   717  00FEF0  D6                 	db	214
   718  00FEF1  33                 	db	51
   719  00FEF2  CC                 	db	204
   720  00FEF3  2B                 	db	43
   721  00FEF4  32                 	db	50
   722  00FEF5  70                 	db	112
   723  00FEF6  89                 	db	137
   724  00FEF7  30                 	db	48
   725  00FEF8  E7                 	db	231
   726  00FEF9  DB                 	db	219
   727  00FEFA  2E                 	db	46
   728  00FEFB  E5                 	db	229
   729  00FEFC  3C                 	db	60
   730  00FEFD  1E                 	db	30
   731  00FEFE  42                 	db	66
   732  00FEFF  A2                 	db	162
   733  00FF00  0D                 	db	13
   734  00FF01                     __end_of__npowers_:
   735                           	opt stack 0
   736  00FF01                     __powers_:
   737                           	opt stack 0
   738  00FF01  00                 	db	0
   739  00FF02  80                 	db	128
   740  00FF03  3F                 	db	63
   741  00FF04  00                 	db	0
   742  00FF05  20                 	db	32
   743  00FF06  41                 	db	65
   744  00FF07  00                 	db	0
   745  00FF08  C8                 	db	200
   746  00FF09  42                 	db	66
   747  00FF0A  00                 	db	0
   748  00FF0B  7A                 	db	122
   749  00FF0C  44                 	db	68
   750  00FF0D  40                 	db	64
   751  00FF0E  1C                 	db	28
   752  00FF0F  46                 	db	70
   753  00FF10  50                 	db	80
   754  00FF11  C3                 	db	195
   755  00FF12  47                 	db	71
   756  00FF13  24                 	db	36
   757  00FF14  74                 	db	116
   758  00FF15  49                 	db	73
   759  00FF16  97                 	db	151
   760  00FF17  18                 	db	24
   761  00FF18  4B                 	db	75
   762  00FF19  BC                 	db	188
   763  00FF1A  BE                 	db	190
   764  00FF1B  4C                 	db	76
   765  00FF1C  6B                 	db	107
   766  00FF1D  6E                 	db	110
   767  00FF1E  4E                 	db	78
   768  00FF1F  03                 	db	3
   769  00FF20  15                 	db	21
   770  00FF21  50                 	db	80
   771  00FF22  79                 	db	121
   772  00FF23  AD                 	db	173
   773  00FF24  60                 	db	96
   774  00FF25  F3                 	db	243
   775  00FF26  49                 	db	73
   776  00FF27  71                 	db	113
   777  00FF28                     __end_of__powers_:
   778                           	opt stack 0
   779  0000                     _ADCON0	set	4034
   780  0000                     _ADCON0bits	set	4034
   781  0000                     _ADCON1	set	4033
   782  0000                     _ADCON2	set	4032
   783  0000                     _ADRESH	set	4036
   784  0000                     _ADRESL	set	4035
   785  0000                     _CCP2CON	set	4026
   786  0000                     _CCPR2L	set	4027
   787  0000                     _INTCON2bits	set	4081
   788  0000                     _INTCON3bits	set	4080
   789  0000                     _INTCONbits	set	4082
   790  0000                     _OSCCON	set	4051
   791  0000                     _PIE1bits	set	3997
   792  0000                     _PIR1bits	set	3998
   793  0000                     _PIR2bits	set	4001
   794  0000                     _PORTAbits	set	3968
   795  0000                     _PORTBbits	set	3969
   796  0000                     _PORTCbits	set	3970
   797  0000                     _PORTD	set	3971
   798  0000                     _PORTDbits	set	3971
   799  0000                     _PORTEbits	set	3972
   800  0000                     _PR2	set	4043
   801  0000                     _RCSTA	set	4011
   802  0000                     _RCSTAbits	set	4011
   803  0000                     _SPBRG	set	4015
   804  0000                     _SPBRGH	set	4016
   805  0000                     _SSPBUF	set	4041
   806  0000                     _SSPCON1	set	4038
   807  0000                     _SSPSTAT	set	4039
   808  0000                     _SSPSTATbits	set	4039
   809  0000                     _T0CON	set	4053
   810  0000                     _T0CONbits	set	4053
   811  0000                     _T2CON	set	4042
   812  0000                     _T3CON	set	4017
   813  0000                     _T3CONbits	set	4017
   814  0000                     _TMR0H	set	4055
   815  0000                     _TMR0L	set	4054
   816  0000                     _TRISA	set	3986
   817  0000                     _TRISB	set	3987
   818  0000                     _TRISC	set	3988
   819  0000                     _TRISCbits	set	3988
   820  0000                     _TRISD	set	3989
   821  0000                     _TRISE	set	3990
   822  0000                     _TXREG	set	4013
   823  0000                     _TXSTA	set	4012
   824  0000                     _TXSTAbits	set	4012
   825  0000                     _RBPU	set	32655
   826  0000                     _TRMT	set	32097
   827  00FF28                     STR_18:
   828                           
   829                           ; BSR set to: 0
   830  00FF28  49                 	db	73	;'I'
   831  00FF29  4E                 	db	78	;'N'
   832  00FF2A  54                 	db	84	;'T'
   833  00FF2B  30                 	db	48	;'0'
   834  00FF2C  20                 	db	32
   835  00FF2D  69                 	db	105	;'i'
   836  00FF2E  6E                 	db	110	;'n'
   837  00FF2F  74                 	db	116	;'t'
   838  00FF30  65                 	db	101	;'e'
   839  00FF31  72                 	db	114	;'r'
   840  00FF32  72                 	db	114	;'r'
   841  00FF33  75                 	db	117	;'u'
   842  00FF34  70                 	db	112	;'p'
   843  00FF35  74                 	db	116	;'t'
   844  00FF36  20                 	db	32
   845  00FF37  70                 	db	112	;'p'
   846  00FF38  69                 	db	105	;'i'
   847  00FF39  6E                 	db	110	;'n'
   848  00FF3A  20                 	db	32
   849  00FF3B  64                 	db	100	;'d'
   850  00FF3C  65                 	db	101	;'e'
   851  00FF3D  74                 	db	116	;'t'
   852  00FF3E  65                 	db	101	;'e'
   853  00FF3F  63                 	db	99	;'c'
   854  00FF40  74                 	db	116	;'t'
   855  00FF41  65                 	db	101	;'e'
   856  00FF42  64                 	db	100	;'d'
   857  00FF43  20                 	db	32
   858  00FF44  0D                 	db	13
   859  00FF45  0A                 	db	10
   860  00FF46  00                 	db	0
   861  00FF47                     STR_19:
   862                           
   863                           ; BSR set to: 0
   864  00FF47  49                 	db	73	;'I'
   865  00FF48  4E                 	db	78	;'N'
   866  00FF49  54                 	db	84	;'T'
   867  00FF4A  31                 	db	49	;'1'
   868  00FF4B  20                 	db	32
   869  00FF4C  69                 	db	105	;'i'
   870  00FF4D  6E                 	db	110	;'n'
   871  00FF4E  74                 	db	116	;'t'
   872  00FF4F  65                 	db	101	;'e'
   873  00FF50  72                 	db	114	;'r'
   874  00FF51  72                 	db	114	;'r'
   875  00FF52  75                 	db	117	;'u'
   876  00FF53  70                 	db	112	;'p'
   877  00FF54  74                 	db	116	;'t'
   878  00FF55  20                 	db	32
   879  00FF56  70                 	db	112	;'p'
   880  00FF57  69                 	db	105	;'i'
   881  00FF58  6E                 	db	110	;'n'
   882  00FF59  20                 	db	32
   883  00FF5A  64                 	db	100	;'d'
   884  00FF5B  65                 	db	101	;'e'
   885  00FF5C  74                 	db	116	;'t'
   886  00FF5D  65                 	db	101	;'e'
   887  00FF5E  63                 	db	99	;'c'
   888  00FF5F  74                 	db	116	;'t'
   889  00FF60  65                 	db	101	;'e'
   890  00FF61  64                 	db	100	;'d'
   891  00FF62  20                 	db	32
   892  00FF63  0D                 	db	13
   893  00FF64  0A                 	db	10
   894  00FF65  00                 	db	0
   895  00FF66                     STR_20:
   896                           
   897                           ; BSR set to: 0
   898  00FF66  49                 	db	73	;'I'
   899  00FF67  4E                 	db	78	;'N'
   900  00FF68  54                 	db	84	;'T'
   901  00FF69  32                 	db	50	;'2'
   902  00FF6A  20                 	db	32
   903  00FF6B  69                 	db	105	;'i'
   904  00FF6C  6E                 	db	110	;'n'
   905  00FF6D  74                 	db	116	;'t'
   906  00FF6E  65                 	db	101	;'e'
   907  00FF6F  72                 	db	114	;'r'
   908  00FF70  72                 	db	114	;'r'
   909  00FF71  75                 	db	117	;'u'
   910  00FF72  70                 	db	112	;'p'
   911  00FF73  74                 	db	116	;'t'
   912  00FF74  20                 	db	32
   913  00FF75  70                 	db	112	;'p'
   914  00FF76  69                 	db	105	;'i'
   915  00FF77  6E                 	db	110	;'n'
   916  00FF78  20                 	db	32
   917  00FF79  64                 	db	100	;'d'
   918  00FF7A  65                 	db	101	;'e'
   919  00FF7B  74                 	db	116	;'t'
   920  00FF7C  65                 	db	101	;'e'
   921  00FF7D  63                 	db	99	;'c'
   922  00FF7E  74                 	db	116	;'t'
   923  00FF7F  65                 	db	101	;'e'
   924  00FF80  64                 	db	100	;'d'
   925  00FF81  20                 	db	32
   926  00FF82  0D                 	db	13
   927  00FF83  0A                 	db	10
   928  00FF84  00                 	db	0
   929  00FF85                     STR_12:
   930                           
   931                           ; BSR set to: 0
   932  00FF85  45                 	db	69	;'E'
   933  00FF86  57                 	db	87	;'W'
   934  00FF87  50                 	db	80	;'P'
   935  00FF88  20                 	db	32
   936  00FF89  45                 	db	69	;'E'
   937  00FF8A  57                 	db	87	;'W'
   938  00FF8B  4C                 	db	76	;'L'
   939  00FF8C  54                 	db	84	;'T'
   940  00FF8D  20                 	db	32
   941  00FF8E  4E                 	db	78	;'N'
   942  00FF8F  53                 	db	83	;'S'
   943  00FF90  50                 	db	80	;'P'
   944  00FF91  20                 	db	32
   945  00FF92  4E                 	db	78	;'N'
   946  00FF93  53                 	db	83	;'S'
   947  00FF94  4C                 	db	76	;'L'
   948  00FF95  54                 	db	84	;'T'
   949  00FF96  20                 	db	32
   950  00FF97  4D                 	db	77	;'M'
   951  00FF98  44                 	db	68	;'D'
   952  00FF99  00                 	db	0
   953  00FF9A                     STR_1:
   954                           
   955                           ; BSR set to: 0
   956  00FF9A  45                 	db	69	;'E'
   957  00FF9B  43                 	db	67	;'C'
   958  00FF9C  45                 	db	69	;'E'
   959  00FF9D  33                 	db	51	;'3'
   960  00FF9E  33                 	db	51	;'3'
   961  00FF9F  30                 	db	48	;'0'
   962  00FFA0  31                 	db	49	;'1'
   963  00FFA1  4C                 	db	76	;'L'
   964  00FFA2  20                 	db	32
   965  00FFA3  46                 	db	70	;'F'
   966  00FFA4  61                 	db	97	;'a'
   967  00FFA5  6C                 	db	108	;'l'
   968  00FFA6  6C                 	db	108	;'l'
   969  00FFA7  20                 	db	32
   970  00FFA8  32                 	db	50	;'2'
   971  00FFA9  32                 	db	50	;'2'
   972  00FFAA  2D                 	db	45
   973  00FFAB  53                 	db	83	;'S'
   974  00FFAC  31                 	db	49	;'1'
   975  00FFAD  00                 	db	0
   976  00FFAE                     STR_17:
   977                           
   978                           ; BSR set to: 0
   979  00FFAE  76                 	db	118	;'v'
   980  00FFAF  6F                 	db	111	;'o'
   981  00FFB0  6C                 	db	108	;'l'
   982  00FFB1  74                 	db	116	;'t'
   983  00FFB2  73                 	db	115	;'s'
   984  00FFB3  20                 	db	32
   985  00FFB4  61                 	db	97	;'a'
   986  00FFB5  72                 	db	114	;'r'
   987  00FFB6  65                 	db	101	;'e'
   988  00FFB7  20                 	db	32
   989  00FFB8  25                 	db	37
   990  00FFB9  30                 	db	48	;'0'
   991  00FFBA  2E                 	db	46
   992  00FFBB  33                 	db	51	;'3'
   993  00FFBC  66                 	db	102	;'f'
   994  00FFBD  0D                 	db	13
   995  00FFBE  0A                 	db	10
   996  00FFBF  0A                 	db	10
   997  00FFC0  00                 	db	0
   998  00FFC1                     STR_8:
   999                           
  1000                           ; BSR set to: 0
  1001  00FFC1  4E                 	db	78	;'N'
  1002  00FFC2  4F                 	db	79	;'O'
  1003  00FFC3  52                 	db	82	;'R'
  1004  00FFC4  54                 	db	84	;'T'
  1005  00FFC5  48                 	db	72	;'H'
  1006  00FFC6  2F                 	db	47
  1007  00FFC7  53                 	db	83	;'S'
  1008  00FFC8  4F                 	db	79	;'O'
  1009  00FFC9  55                 	db	85	;'U'
  1010  00FFCA  54                 	db	84	;'T'
  1011  00FFCB  48                 	db	72	;'H'
  1012  00FFCC  00                 	db	0
  1013  00FFCD                     STR_6:
  1014                           
  1015                           ; BSR set to: 0
  1016  00FFCD  45                 	db	69	;'E'
  1017  00FFCE  41                 	db	65	;'A'
  1018  00FFCF  53                 	db	83	;'S'
  1019  00FFD0  54                 	db	84	;'T'
  1020  00FFD1  2F                 	db	47
  1021  00FFD2  57                 	db	87	;'W'
  1022  00FFD3  45                 	db	69	;'E'
  1023  00FFD4  53                 	db	83	;'S'
  1024  00FFD5  54                 	db	84	;'T'
  1025  00FFD6  00                 	db	0
  1026  00FFD7                     STR_9:
  1027                           
  1028                           ; BSR set to: 0
  1029  00FFD7  4E                 	db	78	;'N'
  1030  00FFD8  2F                 	db	47
  1031  00FFD9  53                 	db	83	;'S'
  1032  00FFDA  20                 	db	32
  1033  00FFDB  4C                 	db	76	;'L'
  1034  00FFDC  54                 	db	84	;'T'
  1035  00FFDD  00                 	db	0
  1036  00FFDE                     STR_7:
  1037                           
  1038                           ; BSR set to: 0
  1039  00FFDE  45                 	db	69	;'E'
  1040  00FFDF  2F                 	db	47
  1041  00FFE0  57                 	db	87	;'W'
  1042  00FFE1  20                 	db	32
  1043  00FFE2  4C                 	db	76	;'L'
  1044  00FFE3  54                 	db	84	;'T'
  1045  00FFE4  00                 	db	0
  1046  00FFE5                     STR_2:
  1047                           
  1048                           ; BSR set to: 0
  1049  00FFE5  4D                 	db	77	;'M'
  1050  00FFE6  6F                 	db	111	;'o'
  1051  00FFE7  64                 	db	100	;'d'
  1052  00FFE8  65                 	db	101	;'e'
  1053  00FFE9  3A                 	db	58	;':'
  1054  00FFEA  00                 	db	0
  1055  00FFEB                     STR_3:
  1056                           
  1057                           ; BSR set to: 0
  1058  00FFEB  46                 	db	70	;'F'
  1059  00FFEC  52                 	db	82	;'R'
  1060  00FFED  3A                 	db	58	;':'
  1061  00FFEE  00                 	db	0
  1062  00FFEF                     STR_4:
  1063                           
  1064                           ; BSR set to: 0
  1065  00FFEF  46                 	db	70	;'F'
  1066  00FFF0  53                 	db	83	;'S'
  1067  00FFF1  3A                 	db	58	;':'
  1068  00FFF2  00                 	db	0
  1069  00FFF3                     STR_11:
  1070                           
  1071                           ; BSR set to: 0
  1072  00FFF3  50                 	db	80	;'P'
  1073  00FFF4  4E                 	db	78	;'N'
  1074  00FFF5  53                 	db	83	;'S'
  1075  00FFF6  00                 	db	0
  1076  00FFF7                     STR_10:
  1077                           
  1078                           ; BSR set to: 0
  1079  00FFF7  50                 	db	80	;'P'
  1080  00FFF8  45                 	db	69	;'E'
  1081  00FFF9  57                 	db	87	;'W'
  1082  00FFFA  00                 	db	0
  1083  00FFFB                     STR_14:
  1084                           
  1085                           ; BSR set to: 0
  1086  00FFFB  20                 	db	32
  1087  00FFFC  00                 	db	0
  1088  00FFFD                     STR_5:
  1089                           
  1090                           ; BSR set to: 0
  1091  00FFFD  2A                 	db	42
  1092  00FFFE  00                 	db	0
  1093  0000                     
  1094                           ; #config settings
  1095  00FFFF  00                 	db	0	; dummy byte at the end
  1096  0000                     
  1097                           	psect	cinit
  1098  003858                     __pcinit:
  1099                           	opt stack 0
  1100  003858                     start_initialization:
  1101                           	opt stack 0
  1102  003858                     __initialization:
  1103                           	opt stack 0
  1104                           
  1105                           ; Clear objects allocated to BANK0 (55 bytes)
  1106  003858  EE00  F080         	lfsr	0,__pbssBANK0
  1107  00385C  0E37               	movlw	55
  1108  00385E                     clear_0:
  1109  00385E  6AEE               	clrf	postinc0,c
  1110  003860  06E8               	decf	wreg,f,c
  1111  003862  E1FD               	bnz	clear_0
  1112                           
  1113                           ; Clear objects allocated to COMRAM (8 bytes)
  1114  003864  EE00  F064         	lfsr	0,__pbssCOMRAM
  1115  003868  0E08               	movlw	8
  1116  00386A                     clear_1:
  1117  00386A  6AEE               	clrf	postinc0,c
  1118  00386C  06E8               	decf	wreg,f,c
  1119  00386E  E1FD               	bnz	clear_1
  1120                           
  1121                           ; Initialize objects allocated to BANK0 (41 bytes)
  1122                           ; load TBLPTR registers with __pidataBANK0
  1123  003870  0ED8               	movlw	low __pidataBANK0
  1124  003872  6EF6               	movwf	tblptrl,c
  1125  003874  0E3D               	movlw	high __pidataBANK0
  1126  003876  6EF7               	movwf	tblptrh,c
  1127  003878  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1128  00387A  6EF8               	movwf	tblptru,c
  1129  00387C  EE00  F0B7         	lfsr	0,__pdataBANK0
  1130  003880  EE10 F029          	lfsr	1,41
  1131  003884                     copy_data0:
  1132  003884  0009               	tblrd		*+
  1133  003886  CFF5 FFEE          	movff	tablat,postinc0
  1134  00388A  50E5               	movf	postdec1,w,c
  1135  00388C  50E1               	movf	fsr1l,w,c
  1136  00388E  E1FA               	bnz	copy_data0
  1137                           
  1138                           ; Initialize objects allocated to COMRAM (5 bytes)
  1139                           ; load TBLPTR registers with __pidataCOMRAM
  1140  003890  0EDE               	movlw	low __pidataCOMRAM
  1141  003892  6EF6               	movwf	tblptrl,c
  1142  003894  0E3F               	movlw	high __pidataCOMRAM
  1143  003896  6EF7               	movwf	tblptrh,c
  1144  003898  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1145  00389A  6EF8               	movwf	tblptru,c
  1146  00389C  EE00  F06C         	lfsr	0,__pdataCOMRAM
  1147  0038A0  EE10 F005          	lfsr	1,5
  1148  0038A4                     copy_data1:
  1149  0038A4  0009               	tblrd		*+
  1150  0038A6  CFF5 FFEE          	movff	tablat,postinc0
  1151  0038AA  50E5               	movf	postdec1,w,c
  1152  0038AC  50E1               	movf	fsr1l,w,c
  1153  0038AE  E1FA               	bnz	copy_data1
  1154  0038B0                     end_of_initialization:
  1155                           	opt stack 0
  1156  0038B0                     __end_of__initialization:
  1157                           	opt stack 0
  1158  0038B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1159  0038B2  6EF8               	movwf	tblptru,c
  1160  0038B4  0100               	movlb	0
  1161  0038B6  EF62  F018         	goto	_main	;jump to C main() function
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           postdec1	equ	0xFE5
  1169                           fsr1l	equ	0xFE1
  1170                           
  1171                           	psect	bssCOMRAM
  1172  000064                     __pbssCOMRAM:
  1173                           	opt stack 0
  1174  000064                     _txt:
  1175                           	opt stack 0
  1176  000064                     	ds	2
  1177  000066                     _Count:
  1178                           	opt stack 0
  1179  000066                     	ds	1
  1180  000067                     _PED_Count:
  1181                           	opt stack 0
  1182  000067                     	ds	1
  1183  000068                     __tft_type:
  1184                           	opt stack 0
  1185  000068                     	ds	1
  1186  000069                     _colstart:
  1187                           	opt stack 0
  1188  000069                     	ds	1
  1189  00006A                     _dir:
  1190                           	opt stack 0
  1191  00006A                     	ds	1
  1192  00006B                     _rowstart:
  1193                           	opt stack 0
  1194  00006B                     	ds	1
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           postdec1	equ	0xFE5
  1202                           fsr1l	equ	0xFE1
  1203                           
  1204                           	psect	dataCOMRAM
  1205  00006C                     __pdataCOMRAM:
  1206                           	opt stack 0
  1207  00006C                     _wrap:
  1208                           	opt stack 0
  1209  00006C                     	ds	1
  1210  00006D                     _SW_EWLT_Txt:
  1211                           	opt stack 0
  1212  00006D                     	ds	2
  1213  00006F                     _SW_EWPED_Txt:
  1214                           	opt stack 0
  1215  00006F                     	ds	2
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           
  1225                           	psect	bssBANK0
  1226  000080                     __pbssBANK0:
  1227                           	opt stack 0
  1228  000080                     _volts:
  1229                           	opt stack 0
  1230  000080                     	ds	3
  1231  000083                     _FLASHING:
  1232                           	opt stack 0
  1233  000083                     	ds	2
  1234  000085                     _INT0_flag:
  1235                           	opt stack 0
  1236  000085                     	ds	2
  1237  000087                     _INT1_flag:
  1238                           	opt stack 0
  1239  000087                     	ds	2
  1240  000089                     _INT2_flag:
  1241                           	opt stack 0
  1242  000089                     	ds	2
  1243  00008B                     _MODE:
  1244                           	opt stack 0
  1245  00008B                     	ds	2
  1246  00008D                     _nbr:
  1247                           	opt stack 0
  1248  00008D                     	ds	2
  1249  00008F                     _EWPED_SW:
  1250                           	opt stack 0
  1251  00008F                     	ds	1
  1252  000090                     _FLASHING_REQUEST:
  1253                           	opt stack 0
  1254  000090                     	ds	1
  1255  000091                     _NSPED_SW:
  1256                           	opt stack 0
  1257  000091                     	ds	1
  1258  000092                     _SW_EWLT:
  1259                           	opt stack 0
  1260  000092                     	ds	1
  1261  000093                     _SW_EWPED:
  1262                           	opt stack 0
  1263  000093                     	ds	1
  1264  000094                     _SW_MODE:
  1265                           	opt stack 0
  1266  000094                     	ds	1
  1267  000095                     _SW_NSLT:
  1268                           	opt stack 0
  1269  000095                     	ds	1
  1270  000096                     _SW_NSPED:
  1271                           	opt stack 0
  1272  000096                     	ds	1
  1273  000097                     _direction:
  1274                           	opt stack 0
  1275  000097                     	ds	1
  1276  000098                     _buffer:
  1277                           	opt stack 0
  1278  000098                     	ds	31
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           
  1288                           	psect	dataBANK0
  1289  0000B7                     __pdataBANK0:
  1290                           	opt stack 0
  1291  0000B7                     _array:
  1292                           	opt stack 0
  1293  0000B7                     	ds	11
  1294  0000C2                     _EWLT_Count:
  1295                           	opt stack 0
  1296  0000C2                     	ds	3
  1297  0000C5                     _EW_Count:
  1298                           	opt stack 0
  1299  0000C5                     	ds	3
  1300  0000C8                     _NSLT_Count:
  1301                           	opt stack 0
  1302  0000C8                     	ds	3
  1303  0000CB                     _NS_Count:
  1304                           	opt stack 0
  1305  0000CB                     	ds	3
  1306  0000CE                     _PED_EW_Count:
  1307                           	opt stack 0
  1308  0000CE                     	ds	3
  1309  0000D1                     _PED_NS_Count:
  1310                           	opt stack 0
  1311  0000D1                     	ds	3
  1312  0000D4                     _Act_Mode_Txt:
  1313                           	opt stack 0
  1314  0000D4                     	ds	2
  1315  0000D6                     _FlashingR_Txt:
  1316                           	opt stack 0
  1317  0000D6                     	ds	2
  1318  0000D8                     _FlashingS_Txt:
  1319                           	opt stack 0
  1320  0000D8                     	ds	2
  1321  0000DA                     _SW_MODE_Txt:
  1322                           	opt stack 0
  1323  0000DA                     	ds	2
  1324  0000DC                     _SW_NSLT_Txt:
  1325                           	opt stack 0
  1326  0000DC                     	ds	2
  1327  0000DE                     _SW_NSPED_Txt:
  1328                           	opt stack 0
  1329  0000DE                     	ds	2
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           postdec1	equ	0xFE5
  1337                           fsr1l	equ	0xFE1
  1338                           
  1339                           	psect	cstackBANK0
  1340  0000E0                     __pcstackBANK0:
  1341                           	opt stack 0
  1342  0000E0                     _printf$2527:
  1343                           	opt stack 0
  1344                           
  1345                           ; 3 bytes @ 0x0
  1346  0000E0                     	ds	3
  1347  0000E3                     printf@ap:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x3
  1351  0000E3                     	ds	2
  1352  0000E5                     printf@val:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x5
  1356  0000E5                     	ds	4
  1357  0000E9                     printf@tmpval:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x9
  1361  0000E9                     	ds	4
  1362  0000ED                     printf@exp:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0xD
  1366  0000ED                     	ds	2
  1367  0000EF                     printf@flag:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0xF
  1371  0000EF                     	ds	2
  1372  0000F1                     printf@width:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x11
  1376  0000F1                     	ds	2
  1377  0000F3                     printf@fval:
  1378                           	opt stack 0
  1379                           
  1380                           ; 3 bytes @ 0x13
  1381  0000F3                     	ds	3
  1382  0000F6                     printf@prec:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x16
  1386  0000F6                     	ds	2
  1387  0000F8                     printf@c:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x18
  1391  0000F8                     	ds	1
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	cstackCOMRAM
  1402  000001                     __pcstackCOMRAM:
  1403                           	opt stack 0
  1404  000001                     ??_chkisr:
  1405  000001                     
  1406                           ; 1 bytes @ 0x0
  1407  000001                     	ds	14
  1408  00000F                     ??_isdigit:
  1409  00000F                     ?_strlen:
  1410                           	opt stack 0
  1411  00000F                     ?_get_full_ADC:
  1412                           	opt stack 0
  1413  00000F                     ?___awmod:
  1414                           	opt stack 0
  1415  00000F                     ?___ftpack:
  1416                           	opt stack 0
  1417  00000F                     ?___ftneg:
  1418                           	opt stack 0
  1419  00000F                     ?__tdiv_to_l_:
  1420                           	opt stack 0
  1421  00000F                     ?__div_to_l_:
  1422                           	opt stack 0
  1423  00000F                     ?___lldiv:
  1424                           	opt stack 0
  1425  00000F                     ?___llmod:
  1426                           	opt stack 0
  1427  00000F                     spiwrite@x:
  1428                           	opt stack 0
  1429  00000F                     putch@c:
  1430                           	opt stack 0
  1431  00000F                     Select_ADC_Channel@channel:
  1432                           	opt stack 0
  1433  00000F                     OpenUSART@spbrg:
  1434                           	opt stack 0
  1435  00000F                     ___awmod@dividend:
  1436                           	opt stack 0
  1437  00000F                     strcpy@to:
  1438                           	opt stack 0
  1439  00000F                     strlen@s:
  1440                           	opt stack 0
  1441  00000F                     __div_to_l_@f1:
  1442                           	opt stack 0
  1443  00000F                     ___ftpack@arg:
  1444                           	opt stack 0
  1445  00000F                     __tdiv_to_l_@f1:
  1446                           	opt stack 0
  1447  00000F                     ___ftge@ff1:
  1448                           	opt stack 0
  1449  00000F                     ___ftneg@f1:
  1450                           	opt stack 0
  1451  00000F                     ___lldiv@dividend:
  1452                           	opt stack 0
  1453  00000F                     ___llmod@dividend:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0xE
  1457  00000F                     	ds	1
  1458  000010                     spiwrite@spidata:
  1459                           	opt stack 0
  1460  000010                     _isdigit$2218:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0xF
  1464  000010                     	ds	1
  1465  000011                     ??_strlen:
  1466  000011                     ??_get_full_ADC:
  1467  000011                     write_command@cmd_:
  1468                           	opt stack 0
  1469  000011                     write_data@data_:
  1470                           	opt stack 0
  1471  000011                     OpenUSART@config:
  1472                           	opt stack 0
  1473  000011                     isdigit@c:
  1474                           	opt stack 0
  1475  000011                     ___awmod@divisor:
  1476                           	opt stack 0
  1477  000011                     strcpy@from:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x10
  1481  000011                     	ds	1
  1482  000012                     setAddrWindow@y0:
  1483                           	opt stack 0
  1484  000012                     ___ftpack@exp:
  1485                           	opt stack 0
  1486  000012                     __div_to_l_@f2:
  1487                           	opt stack 0
  1488  000012                     __tdiv_to_l_@f2:
  1489                           	opt stack 0
  1490  000012                     ___ftge@ff2:
  1491                           	opt stack 0
  1492                           
  1493                           ; 3 bytes @ 0x11
  1494  000012                     	ds	1
  1495  000013                     setAddrWindow@x1:
  1496                           	opt stack 0
  1497  000013                     ___awmod@counter:
  1498                           	opt stack 0
  1499  000013                     ___ftpack@sign:
  1500                           	opt stack 0
  1501  000013                     get_full_ADC@result:
  1502                           	opt stack 0
  1503  000013                     strcpy@cp:
  1504                           	opt stack 0
  1505  000013                     strlen@cp:
  1506                           	opt stack 0
  1507  000013                     ___lldiv@divisor:
  1508                           	opt stack 0
  1509  000013                     ___llmod@divisor:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x12
  1513  000013                     	ds	1
  1514  000014                     ??___ftpack:
  1515  000014                     setAddrWindow@y1:
  1516                           	opt stack 0
  1517  000014                     ___awmod@sign:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x13
  1521  000014                     	ds	1
  1522  000015                     ??__tdiv_to_l_:
  1523  000015                     ??___ftge:
  1524  000015                     ?___awdiv:
  1525                           	opt stack 0
  1526  000015                     setAddrWindow@x0:
  1527                           	opt stack 0
  1528  000015                     ___awdiv@dividend:
  1529                           	opt stack 0
  1530  000015                     __div_to_l_@quot:
  1531                           	opt stack 0
  1532                           
  1533                           ; 4 bytes @ 0x14
  1534  000015                     	ds	1
  1535  000016                     drawPixel@y:
  1536                           	opt stack 0
  1537  000016                     drawFastVLine@y:
  1538                           	opt stack 0
  1539  000016                     fillRectangle@y:
  1540                           	opt stack 0
  1541  000016                     drawFastHLine@y:
  1542                           	opt stack 0
  1543                           
  1544                           ; 1 bytes @ 0x15
  1545  000016                     	ds	1
  1546  000017                     ?___lltoft:
  1547                           	opt stack 0
  1548  000017                     drawFastVLine@h:
  1549                           	opt stack 0
  1550  000017                     fillRectangle@w:
  1551                           	opt stack 0
  1552  000017                     drawFastHLine@w:
  1553                           	opt stack 0
  1554  000017                     ___llmod@counter:
  1555                           	opt stack 0
  1556  000017                     drawPixel@color:
  1557                           	opt stack 0
  1558  000017                     ___awdiv@divisor:
  1559                           	opt stack 0
  1560  000017                     ___lldiv@quotient:
  1561                           	opt stack 0
  1562  000017                     ___lltoft@c:
  1563                           	opt stack 0
  1564                           
  1565                           ; 4 bytes @ 0x16
  1566  000017                     	ds	1
  1567  000018                     fillRectangle@h:
  1568                           	opt stack 0
  1569  000018                     drawFastVLine@color:
  1570                           	opt stack 0
  1571  000018                     drawFastHLine@color:
  1572                           	opt stack 0
  1573  000018                     __tdiv_to_l_@quot:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x17
  1577  000018                     	ds	1
  1578  000019                     drawPixel@x:
  1579                           	opt stack 0
  1580  000019                     ___awdiv@counter:
  1581                           	opt stack 0
  1582  000019                     __div_to_l_@cntr:
  1583                           	opt stack 0
  1584  000019                     fillRectangle@color:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x18
  1588  000019                     	ds	1
  1589  00001A                     ??_drawFastVLine:
  1590  00001A                     ??_drawFastHLine:
  1591  00001A                     ___awdiv@sign:
  1592                           	opt stack 0
  1593  00001A                     __div_to_l_@exp1:
  1594                           	opt stack 0
  1595  00001A                     drawCircle@x0:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x19
  1599  00001A                     	ds	1
  1600  00001B                     ??_fillRectangle:
  1601  00001B                     ??___lltoft:
  1602  00001B                     ___lldiv@counter:
  1603                           	opt stack 0
  1604  00001B                     ___awdiv@quotient:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x1A
  1608  00001B                     	ds	1
  1609  00001C                     __tdiv_to_l_@cntr:
  1610                           	opt stack 0
  1611  00001C                     drawCircle@y0:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x1B
  1615  00001C                     	ds	1
  1616  00001D                     ?___wmul:
  1617                           	opt stack 0
  1618  00001D                     __tdiv_to_l_@exp1:
  1619                           	opt stack 0
  1620  00001D                     ___wmul@multiplier:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x1C
  1624  00001D                     	ds	1
  1625  00001E                     drawFastVLine@hi:
  1626                           	opt stack 0
  1627  00001E                     drawFastHLine@hi:
  1628                           	opt stack 0
  1629  00001E                     drawCircle@r:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x1D
  1633  00001E                     	ds	1
  1634  00001F                     drawFastVLine@lo:
  1635                           	opt stack 0
  1636  00001F                     fillRectangle@hi:
  1637                           	opt stack 0
  1638  00001F                     drawFastHLine@lo:
  1639                           	opt stack 0
  1640  00001F                     ___lltoft@exp:
  1641                           	opt stack 0
  1642  00001F                     ___wmul@multiplicand:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x1E
  1646  00001F                     	ds	1
  1647  000020                     drawFastVLine@x:
  1648                           	opt stack 0
  1649  000020                     fillRectangle@lo:
  1650                           	opt stack 0
  1651  000020                     drawFastHLine@x:
  1652                           	opt stack 0
  1653  000020                     drawCircle@color:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x1F
  1657  000020                     	ds	1
  1658  000021                     fillRect@y:
  1659                           	opt stack 0
  1660  000021                     fillRectangle@x:
  1661                           	opt stack 0
  1662  000021                     fillCircleHelper@x0:
  1663                           	opt stack 0
  1664  000021                     drawRect@x:
  1665                           	opt stack 0
  1666  000021                     ___wmul@product:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x20
  1670  000021                     	ds	1
  1671  000022                     ??_drawCircle:
  1672  000022                     fillRect@w:
  1673                           	opt stack 0
  1674  000022                     fillScreen@color:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x21
  1678  000022                     	ds	1
  1679  000023                     ?___ftmul:
  1680                           	opt stack 0
  1681  000023                     ?___awtoft:
  1682                           	opt stack 0
  1683  000023                     fillRect@h:
  1684                           	opt stack 0
  1685  000023                     delay_ms@ms:
  1686                           	opt stack 0
  1687  000023                     fillCircleHelper@y0:
  1688                           	opt stack 0
  1689  000023                     drawRect@y:
  1690                           	opt stack 0
  1691  000023                     ___awtoft@c:
  1692                           	opt stack 0
  1693  000023                     ___ftmul@f1:
  1694                           	opt stack 0
  1695                           
  1696                           ; 3 bytes @ 0x22
  1697  000023                     	ds	1
  1698  000024                     fillRect@color:
  1699                           	opt stack 0
  1700  000024                     drawCircle@ddF_x:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x23
  1704  000024                     	ds	1
  1705  000025                     ??_delay_ms:
  1706  000025                     fillCircleHelper@r:
  1707                           	opt stack 0
  1708  000025                     drawRect@w:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x24
  1712  000025                     	ds	1
  1713  000026                     ??_fillRect:
  1714  000026                     ___awtoft@sign:
  1715                           	opt stack 0
  1716  000026                     drawCircle@ddF_y:
  1717                           	opt stack 0
  1718  000026                     ___ftmul@f2:
  1719                           	opt stack 0
  1720                           
  1721                           ; 3 bytes @ 0x25
  1722  000026                     	ds	1
  1723  000027                     ?___ftdiv:
  1724                           	opt stack 0
  1725  000027                     delay_ms@count:
  1726                           	opt stack 0
  1727  000027                     fillCircleHelper@cornername:
  1728                           	opt stack 0
  1729  000027                     drawRect@h:
  1730                           	opt stack 0
  1731  000027                     ___ftdiv@f1:
  1732                           	opt stack 0
  1733                           
  1734                           ; 3 bytes @ 0x26
  1735  000027                     	ds	1
  1736  000028                     drawCircle@f:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x27
  1740  000028                     	ds	1
  1741  000029                     ??___ftmul:
  1742  000029                     fillRect@x:
  1743                           	opt stack 0
  1744  000029                     fillCircleHelper@delta:
  1745                           	opt stack 0
  1746  000029                     drawRect@color:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x28
  1750  000029                     	ds	1
  1751  00002A                     fillRect@i:
  1752                           	opt stack 0
  1753  00002A                     drawCircle@x:
  1754                           	opt stack 0
  1755  00002A                     ___ftdiv@f2:
  1756                           	opt stack 0
  1757                           
  1758                           ; 3 bytes @ 0x29
  1759  00002A                     	ds	1
  1760  00002B                     ??_drawRect:
  1761  00002B                     fillCircleHelper@color:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x2A
  1765  00002B                     	ds	1
  1766  00002C                     drawChar@y:
  1767                           	opt stack 0
  1768  00002C                     ___ftmul@exp:
  1769                           	opt stack 0
  1770  00002C                     drawCircle@y:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x2B
  1774  00002C                     	ds	1
  1775  00002D                     ??___ftdiv:
  1776  00002D                     ??_fillCircleHelper:
  1777  00002D                     drawChar@c:
  1778                           	opt stack 0
  1779  00002D                     ___ftmul@f3_as_product:
  1780                           	opt stack 0
  1781                           
  1782                           ; 3 bytes @ 0x2C
  1783  00002D                     	ds	1
  1784  00002E                     drawChar@color:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x2D
  1788  00002E                     	ds	1
  1789  00002F                     fillCircleHelper@ddF_x:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x2E
  1793  00002F                     	ds	1
  1794  000030                     ___ftdiv@cntr:
  1795                           	opt stack 0
  1796  000030                     ___ftmul@cntr:
  1797                           	opt stack 0
  1798  000030                     drawChar@bg:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x2F
  1802  000030                     	ds	1
  1803  000031                     ___ftmul@sign:
  1804                           	opt stack 0
  1805  000031                     fillCircleHelper@ddF_y:
  1806                           	opt stack 0
  1807  000031                     ___ftdiv@f3:
  1808                           	opt stack 0
  1809                           
  1810                           ; 3 bytes @ 0x30
  1811  000031                     	ds	1
  1812  000032                     ?_fround:
  1813                           	opt stack 0
  1814  000032                     ?_scale:
  1815                           	opt stack 0
  1816  000032                     drawChar@size:
  1817                           	opt stack 0
  1818                           
  1819                           ; 1 bytes @ 0x31
  1820  000032                     	ds	1
  1821  000033                     drawChar@line:
  1822                           	opt stack 0
  1823  000033                     fillCircleHelper@f:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x32
  1827  000033                     	ds	1
  1828  000034                     drawChar@x:
  1829                           	opt stack 0
  1830  000034                     ___ftdiv@exp:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x33
  1834  000034                     	ds	1
  1835  000035                     drawChar@j:
  1836                           	opt stack 0
  1837  000035                     ___ftdiv@sign:
  1838                           	opt stack 0
  1839  000035                     fillCircleHelper@x:
  1840                           	opt stack 0
  1841  000035                     _fround$2525:
  1842                           	opt stack 0
  1843  000035                     _scale$2526:
  1844                           	opt stack 0
  1845                           
  1846                           ; 3 bytes @ 0x34
  1847  000035                     	ds	1
  1848  000036                     drawChar@i:
  1849                           	opt stack 0
  1850                           
  1851                           ; 1 bytes @ 0x35
  1852  000036                     	ds	1
  1853  000037                     drawtext@y:
  1854                           	opt stack 0
  1855  000037                     fillCircleHelper@y:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x36
  1859  000037                     	ds	1
  1860  000038                     scale@scl:
  1861                           	opt stack 0
  1862  000038                     drawtext@_text:
  1863                           	opt stack 0
  1864  000038                     _fround$2524:
  1865                           	opt stack 0
  1866                           
  1867                           ; 3 bytes @ 0x37
  1868  000038                     	ds	1
  1869  000039                     ?___fttol:
  1870                           	opt stack 0
  1871  000039                     fillCircle@x0:
  1872                           	opt stack 0
  1873  000039                     ___fttol@f1:
  1874                           	opt stack 0
  1875                           
  1876                           ; 3 bytes @ 0x38
  1877  000039                     	ds	1
  1878  00003A                     drawtext@color:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x39
  1882  00003A                     	ds	1
  1883  00003B                     fround@prec:
  1884                           	opt stack 0
  1885  00003B                     fillCircle@y0:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x3A
  1889  00003B                     	ds	1
  1890  00003C                     ?___ftadd:
  1891                           	opt stack 0
  1892  00003C                     drawtext@bg:
  1893                           	opt stack 0
  1894  00003C                     ___ftadd@f1:
  1895                           	opt stack 0
  1896                           
  1897                           ; 3 bytes @ 0x3B
  1898  00003C                     	ds	1
  1899  00003D                     ??___fttol:
  1900  00003D                     fillCircle@r:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x3C
  1904  00003D                     	ds	1
  1905  00003E                     drawtext@size:
  1906                           	opt stack 0
  1907                           
  1908                           ; 1 bytes @ 0x3D
  1909  00003E                     	ds	1
  1910  00003F                     ??_drawtext:
  1911  00003F                     fillCircle@color:
  1912                           	opt stack 0
  1913  00003F                     ___ftadd@f2:
  1914                           	opt stack 0
  1915                           
  1916                           ; 3 bytes @ 0x3E
  1917  00003F                     	ds	2
  1918  000041                     drawtext@x:
  1919                           	opt stack 0
  1920  000041                     update_LCD_color@color:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x40
  1924  000041                     	ds	1
  1925  000042                     ??___ftadd:
  1926  000042                     update_LCD_color@direction:
  1927                           	opt stack 0
  1928  000042                     ___fttol@sign1:
  1929                           	opt stack 0
  1930  000042                     drawtext@textsize:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x41
  1934  000042                     	ds	1
  1935  000043                     update_LCD_color@Circle_Y:
  1936                           	opt stack 0
  1937  000043                     ___fttol@lval:
  1938                           	opt stack 0
  1939                           
  1940                           ; 4 bytes @ 0x42
  1941  000043                     	ds	1
  1942  000044                     Set_NS@color:
  1943                           	opt stack 0
  1944  000044                     Set_NSLT@color:
  1945                           	opt stack 0
  1946  000044                     Set_EW@color:
  1947                           	opt stack 0
  1948  000044                     Set_EWLT@color:
  1949                           	opt stack 0
  1950  000044                     drawtext@i:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x43
  1954  000044                     	ds	1
  1955  000045                     ___ftadd@sign:
  1956                           	opt stack 0
  1957                           
  1958                           ; 1 bytes @ 0x44
  1959  000045                     	ds	1
  1960  000046                     drawtext@cursor_y:
  1961                           	opt stack 0
  1962  000046                     ___ftadd@exp2:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0x45
  1966  000046                     	ds	1
  1967  000047                     drawtext@cursor_x:
  1968                           	opt stack 0
  1969  000047                     ___ftadd@exp1:
  1970                           	opt stack 0
  1971  000047                     ___fttol@exp1:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x46
  1975  000047                     	ds	1
  1976  000048                     ?___ftsub:
  1977                           	opt stack 0
  1978  000048                     update_LCD_count@count:
  1979                           	opt stack 0
  1980  000048                     update_LCD_PED_Count@count:
  1981                           	opt stack 0
  1982  000048                     ___ftsub@f1:
  1983                           	opt stack 0
  1984                           
  1985                           ; 3 bytes @ 0x47
  1986  000048                     	ds	1
  1987  000049                     ??_update_LCD_count:
  1988  000049                     ??_update_LCD_PED_Count:
  1989                           
  1990                           ; 0 bytes @ 0x48
  1991  000049                     	ds	1
  1992  00004A                     update_LCD_count@direction:
  1993                           	opt stack 0
  1994  00004A                     update_LCD_PED_Count@direction:
  1995                           	opt stack 0
  1996                           
  1997                           ; 1 bytes @ 0x49
  1998  00004A                     	ds	1
  1999  00004B                     PED_Control@Num_Sec:
  2000                           	opt stack 0
  2001  00004B                     ___ftsub@f2:
  2002                           	opt stack 0
  2003                           
  2004                           ; 3 bytes @ 0x4A
  2005  00004B                     	ds	1
  2006  00004C                     PED_Control@i:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0x4B
  2010  00004C                     	ds	2
  2011  00004E                     ?_printf:
  2012                           	opt stack 0
  2013  00004E                     printf@f:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x4D
  2017  00004E                     	ds	5
  2018  000053                     ??_printf:
  2019                           
  2020                           ; 0 bytes @ 0x52
  2021  000053                     	ds	6
  2022  000059                     update_LCD_misc@nStep:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x58
  2026  000059                     	ds	2
  2027  00005B                     update_LCD_misc@volts:
  2028                           	opt stack 0
  2029                           
  2030                           ; 3 bytes @ 0x5A
  2031  00005B                     	ds	3
  2032  00005E                     WAIT_N_SEC@seconds:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x5D
  2036  00005E                     	ds	1
  2037  00005F                     WAIT_N_SEC@i:
  2038                           	opt stack 0
  2039                           
  2040                           ; 1 bytes @ 0x5E
  2041  00005F                     	ds	1
  2042  000060                     ??_main:
  2043                           
  2044                           ; 0 bytes @ 0x5F
  2045  000060                     	ds	2
  2046  000062                     main@nStep:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x61
  2050  000062                     	ds	2
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           postdec1	equ	0xFE5
  2058                           fsr1l	equ	0xFE1
  2059                           
  2060 ;;
  2061 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2062 ;;
  2063 ;; *************** function _main *****************
  2064 ;; Defined at:
  2065 ;;		line 304 in file "Lab9test.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  nStep           2   97[COMRAM] int 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        4 bytes
  2084 ;; Hardware stack levels required when called:   13
  2085 ;; This function calls:
  2086 ;;		_Day_Mode
  2087 ;;		_Do_Flashing
  2088 ;;		_Do_Init
  2089 ;;		_Init_ADC
  2090 ;;		_Init_TRIS
  2091 ;;		_Initialize_Screen
  2092 ;;		_Night_Mode
  2093 ;;		_Select_ADC_Channel
  2094 ;;		___awtoft
  2095 ;;		___ftdiv
  2096 ;;		___ftge
  2097 ;;		_get_full_ADC
  2098 ;;		_init_UART
  2099 ;; This function is called by:
  2100 ;;		Startup code after reset
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text0
  2105  0030C4                     __ptext0:
  2106                           	opt stack 0
  2107  0030C4                     _main:
  2108                           	opt stack 18
  2109                           
  2110                           ;Lab9test.c: 306: Init_ADC();
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;incstack = 0
  2114  0030C4  ECD9  F01F         	call	_Init_ADC	;wreg free
  2115                           
  2116                           ;Lab9test.c: 307: Init_TRIS();
  2117  0030C8  EC91  F01F         	call	_Init_TRIS	;wreg free
  2118                           
  2119                           ;Lab9test.c: 308: init_UART ();
  2120  0030CC  EC9C  F01F         	call	_init_UART	;wreg free
  2121                           
  2122                           ;Lab9test.c: 309: Select_ADC_Channel(0);
  2123  0030D0  0E00               	movlw	0
  2124  0030D2  ECE0  F01F         	call	_Select_ADC_Channel
  2125                           
  2126                           ;Lab9test.c: 311: OSCCON = 0x70;
  2127  0030D6  0E70               	movlw	112
  2128  0030D8  6ED3               	movwf	4051,c	;volatile
  2129                           
  2130                           ;Lab9test.c: 312: RBPU = 0;
  2131  0030DA  9EF1               	bcf	intcon2,7,c	;volatile
  2132                           
  2133                           ;Lab9test.c: 313: Initialize_Screen();
  2134  0030DC  EC5C  F005         	call	_Initialize_Screen	;wreg free
  2135                           
  2136                           ;Lab9test.c: 314: Do_Init();
  2137  0030E0  EC28  F01F         	call	_Do_Init	;wreg free
  2138  0030E4  D000               	goto	l7983
  2139  0030E6                     l7983:
  2140                           
  2141                           ;Lab9test.c: 317: {
  2142                           ;Lab9test.c: 318: int nStep = get_full_ADC ();
  2143  0030E6  EC15  F01F         	call	_get_full_ADC	;wreg free
  2144  0030EA  C00F  F062         	movff	?_get_full_ADC,main@nStep
  2145  0030EE  C010  F063         	movff	?_get_full_ADC+1,main@nStep+1
  2146                           
  2147                           ;Lab9test.c: 319: volts = nStep*4/1024.0;
  2148  0030F2  C062  F060         	movff	main@nStep,??_main
  2149  0030F6  C063  F061         	movff	main@nStep+1,??_main+1
  2150  0030FA  90D8               	bcf	status,0,c
  2151  0030FC  3660               	rlcf	??_main,f,c
  2152  0030FE  3661               	rlcf	??_main+1,f,c
  2153  003100  90D8               	bcf	status,0,c
  2154  003102  3660               	rlcf	??_main,f,c
  2155  003104  3661               	rlcf	??_main+1,f,c
  2156  003106  C060  F023         	movff	??_main,___awtoft@c
  2157  00310A  C061  F024         	movff	??_main+1,___awtoft@c+1
  2158  00310E  EC6F  F01E         	call	___awtoft	;wreg free
  2159  003112  C023  F027         	movff	?___awtoft,___ftdiv@f1
  2160  003116  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  2161  00311A  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  2162  00311E  0E00               	movlw	0
  2163  003120  6E2A               	movwf	___ftdiv@f2,c
  2164  003122  0E80               	movlw	128
  2165  003124  6E2B               	movwf	___ftdiv@f2+1,c
  2166  003126  0E44               	movlw	68
  2167  003128  6E2C               	movwf	___ftdiv@f2+2,c
  2168  00312A  EC48  F016         	call	___ftdiv	;wreg free
  2169  00312E  C027  F080         	movff	?___ftdiv,_volts
  2170  003132  C028  F081         	movff	?___ftdiv+1,_volts+1
  2171  003136  C029  F082         	movff	?___ftdiv+2,_volts+2
  2172                           
  2173                           ;Lab9test.c: 321: if (volts < 2.3)
  2174  00313A  C080  F00F         	movff	_volts,___ftge@ff1
  2175  00313E  C081  F010         	movff	_volts+1,___ftge@ff1+1
  2176  003142  C082  F011         	movff	_volts+2,___ftge@ff1+2
  2177  003146  0E33               	movlw	51
  2178  003148  6E12               	movwf	___ftge@ff2,c
  2179  00314A  0E13               	movlw	19
  2180  00314C  6E13               	movwf	___ftge@ff2+1,c
  2181  00314E  0E40               	movlw	64
  2182  003150  6E14               	movwf	___ftge@ff2+2,c
  2183  003152  EC1D  F019         	call	___ftge	;wreg free
  2184  003156  B0D8               	btfsc	status,0,c
  2185  003158  D003               	goto	l7991
  2186                           
  2187                           ;Lab9test.c: 322: {
  2188                           ;Lab9test.c: 323: Day_Mode();
  2189  00315A  EC96  F017         	call	_Day_Mode	;wreg free
  2190                           
  2191                           ;Lab9test.c: 325: }
  2192  00315E  D003               	goto	l7993
  2193  003160                     l7991:
  2194                           
  2195                           ;Lab9test.c: 326: else
  2196                           ;Lab9test.c: 327: {
  2197                           ;Lab9test.c: 328: Night_Mode();
  2198  003160  ECC0  F018         	call	_Night_Mode	;wreg free
  2199  003164  D000               	goto	l7993
  2200  003166                     l7993:
  2201                           
  2202                           ;Lab9test.c: 329: }
  2203                           ;Lab9test.c: 330: if (FLASHING_REQUEST == 1)
  2204  003166  0100               	movlb	0	; () banked
  2205  003168  0590               	decf	_FLASHING_REQUEST& (0+255),w,b
  2206  00316A  A4D8               	btfss	status,2,c
  2207  00316C  D003               	goto	l7997
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;Lab9test.c: 331: {
  2211                           ;Lab9test.c: 332: Do_Flashing();
  2212  00316E  EC8D  F01C         	call	_Do_Flashing	;wreg free
  2213                           
  2214                           ;Lab9test.c: 333: }
  2215  003172  D7B9               	goto	l7983
  2216  003174                     l7997:
  2217                           
  2218                           ;Lab9test.c: 334: else
  2219                           ;Lab9test.c: 335: {
  2220                           ;Lab9test.c: 336: FLASHING_REQUEST = 0;
  2221  003174  0E00               	movlw	0
  2222  003176  0100               	movlb	0	; () banked
  2223  003178  6F90               	movwf	_FLASHING_REQUEST& (0+255),b
  2224                           
  2225                           ; BSR set to: 0
  2226                           
  2227                           ; BSR set to: 0
  2228  00317A  D7B5               	goto	l7983
  2229                           
  2230                           ; BSR set to: 0
  2231                           
  2232                           ; BSR set to: 0
  2233  00317C  EF0C  F000         	goto	start
  2234  003180                     __end_of_main:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           intcon2	equ	0xFF1
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           postdec1	equ	0xFE5
  2244                           fsr1l	equ	0xFE1
  2245                           status	equ	0xFD8
  2246                           
  2247 ;; *************** function _Select_ADC_Channel *****************
  2248 ;; Defined at:
  2249 ;;		line 472 in file "Lab9test.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  channel         1    wreg     unsigned char 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  channel         1   14[COMRAM] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;		None               void
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0, prodl, prodh
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;Total ram usage:        1 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    2
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text1
  2278  003FC0                     __ptext1:
  2279                           	opt stack 0
  2280  003FC0                     _Select_ADC_Channel:
  2281                           	opt stack 28
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;incstack = 0
  2285                           ;Select_ADC_Channel@channel stored from wreg
  2286  003FC0  6E0F               	movwf	Select_ADC_Channel@channel,c
  2287                           
  2288                           ;Lab9test.c: 474: ADCON0 = channel * 4 + 1;
  2289  003FC2  500F               	movf	Select_ADC_Channel@channel,w,c
  2290  003FC4  0D04               	mullw	4
  2291  003FC6  28F3               	incf	prodl,w,c
  2292  003FC8  6EC2               	movwf	4034,c	;volatile
  2293  003FCA  0012               	return		;funcret
  2294  003FCC                     __end_of_Select_ADC_Channel:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodl	equ	0xFF3
  2301                           intcon2	equ	0xFF1
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _Night_Mode *****************
  2309 ;; Defined at:
  2310 ;;		line 401 in file "Lab9test.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;		None               void
  2317 ;; Registers used:
  2318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;Total ram usage:        0 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:   12
  2331 ;; This function calls:
  2332 ;;		_Set_EW
  2333 ;;		_Set_EWLT
  2334 ;;		_Set_NS
  2335 ;;		_Set_NSLT
  2336 ;;		_WAIT_N_SEC
  2337 ;; This function is called by:
  2338 ;;		_main
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text2
  2343  003180                     __ptext2:
  2344                           	opt stack 0
  2345  003180                     _Night_Mode:
  2346                           	opt stack 18
  2347                           
  2348                           ;Lab9test.c: 403: PORTBbits.RB7 = 1;
  2349                           
  2350                           ;incstack = 0
  2351  003180  8E81               	bsf	3969,7,c	;volatile
  2352                           
  2353                           ;Lab9test.c: 404: Act_Mode_Txt[0] = 'N';
  2354  003182  0E4E               	movlw	78
  2355  003184  0100               	movlb	0	; () banked
  2356  003186  6FD4               	movwf	_Act_Mode_Txt& (0+255),b
  2357                           
  2358                           ;Lab9test.c: 405: MODE = 0;
  2359  003188  0E00               	movlw	0
  2360  00318A  0100               	movlb	0	; () banked
  2361  00318C  6F8C               	movwf	(_MODE+1)& (0+255),b
  2362  00318E  0E00               	movlw	0
  2363  003190  6F8B               	movwf	_MODE& (0+255),b
  2364                           
  2365                           ;Lab9test.c: 407: EWPED_SW = 0;
  2366  003192  0E00               	movlw	0
  2367  003194  0100               	movlb	0	; () banked
  2368  003196  6F8F               	movwf	_EWPED_SW& (0+255),b
  2369                           
  2370                           ;Lab9test.c: 408: NSPED_SW = 0;
  2371  003198  0E00               	movlw	0
  2372  00319A  0100               	movlb	0	; () banked
  2373  00319C  6F91               	movwf	_NSPED_SW& (0+255),b
  2374  00319E  D000               	goto	l7665
  2375  0031A0                     l7665:
  2376                           
  2377                           ;Lab9test.c: 412: {
  2378                           ;Lab9test.c: 413: Set_NSLT (1);
  2379  0031A0  0E01               	movlw	1
  2380  0031A2  EC7F  F01D         	call	_Set_NSLT
  2381                           
  2382                           ;Lab9test.c: 414: Set_EW (1);
  2383  0031A6  0E01               	movlw	1
  2384  0031A8  ECEB  F01D         	call	_Set_EW
  2385                           
  2386                           ;Lab9test.c: 415: Set_EWLT (1);
  2387  0031AC  0E01               	movlw	1
  2388  0031AE  ECC7  F01D         	call	_Set_EWLT
  2389                           
  2390                           ;Lab9test.c: 416: Set_NS (2);
  2391  0031B2  0E02               	movlw	2
  2392  0031B4  ECA3  F01D         	call	_Set_NS
  2393                           
  2394                           ;Lab9test.c: 418: WAIT_N_SEC (8);
  2395  0031B8  0E08               	movlw	8
  2396  0031BA  EC8D  F01E         	call	_WAIT_N_SEC
  2397                           
  2398                           ;Lab9test.c: 419: Set_NS (3);
  2399  0031BE  0E03               	movlw	3
  2400  0031C0  ECA3  F01D         	call	_Set_NS
  2401                           
  2402                           ;Lab9test.c: 421: WAIT_N_SEC (2);
  2403  0031C4  0E02               	movlw	2
  2404  0031C6  EC8D  F01E         	call	_WAIT_N_SEC
  2405                           
  2406                           ;Lab9test.c: 422: Set_NS (1);
  2407  0031CA  0E01               	movlw	1
  2408  0031CC  ECA3  F01D         	call	_Set_NS
  2409                           
  2410                           ;Lab9test.c: 424: if (PORTAbits.RA4 == 1)
  2411  0031D0  A880               	btfss	3968,4,c	;volatile
  2412  0031D2  D010               	goto	l7691
  2413                           
  2414                           ;Lab9test.c: 425: {
  2415                           ;Lab9test.c: 426: Set_EWLT (2);
  2416  0031D4  0E02               	movlw	2
  2417  0031D6  ECC7  F01D         	call	_Set_EWLT
  2418                           
  2419                           ;Lab9test.c: 427: WAIT_N_SEC (6);
  2420  0031DA  0E06               	movlw	6
  2421  0031DC  EC8D  F01E         	call	_WAIT_N_SEC
  2422                           
  2423                           ;Lab9test.c: 428: Set_EWLT (3);
  2424  0031E0  0E03               	movlw	3
  2425  0031E2  ECC7  F01D         	call	_Set_EWLT
  2426                           
  2427                           ;Lab9test.c: 429: WAIT_N_SEC (2);
  2428  0031E6  0E02               	movlw	2
  2429  0031E8  EC8D  F01E         	call	_WAIT_N_SEC
  2430                           
  2431                           ;Lab9test.c: 430: Set_EWLT (1);
  2432  0031EC  0E01               	movlw	1
  2433  0031EE  ECC7  F01D         	call	_Set_EWLT
  2434  0031F2  D000               	goto	l7691
  2435  0031F4                     l7691:
  2436                           
  2437                           ;Lab9test.c: 431: }
  2438                           ;Lab9test.c: 433: Set_EW (2);
  2439  0031F4  0E02               	movlw	2
  2440  0031F6  ECEB  F01D         	call	_Set_EW
  2441                           
  2442                           ;Lab9test.c: 434: WAIT_N_SEC (9);
  2443  0031FA  0E09               	movlw	9
  2444  0031FC  EC8D  F01E         	call	_WAIT_N_SEC
  2445                           
  2446                           ;Lab9test.c: 436: Set_EW (3);
  2447  003200  0E03               	movlw	3
  2448  003202  ECEB  F01D         	call	_Set_EW
  2449                           
  2450                           ;Lab9test.c: 437: WAIT_N_SEC (2);
  2451  003206  0E02               	movlw	2
  2452  003208  EC8D  F01E         	call	_WAIT_N_SEC
  2453                           
  2454                           ;Lab9test.c: 439: Set_EW (1);
  2455  00320C  0E01               	movlw	1
  2456  00320E  ECEB  F01D         	call	_Set_EW
  2457                           
  2458                           ;Lab9test.c: 441: if (PORTAbits.RA3 == 1)
  2459  003212  A680               	btfss	3968,3,c	;volatile
  2460  003214  D011               	goto	l433
  2461                           
  2462                           ;Lab9test.c: 442: {
  2463                           ;Lab9test.c: 443: Set_NSLT (2);
  2464  003216  0E02               	movlw	2
  2465  003218  EC7F  F01D         	call	_Set_NSLT
  2466                           
  2467                           ;Lab9test.c: 444: WAIT_N_SEC (7);
  2468  00321C  0E07               	movlw	7
  2469  00321E  EC8D  F01E         	call	_WAIT_N_SEC
  2470                           
  2471                           ;Lab9test.c: 446: Set_NSLT (3);
  2472  003222  0E03               	movlw	3
  2473  003224  EC7F  F01D         	call	_Set_NSLT
  2474                           
  2475                           ;Lab9test.c: 447: WAIT_N_SEC (2);
  2476  003228  0E02               	movlw	2
  2477  00322A  EC8D  F01E         	call	_WAIT_N_SEC
  2478                           
  2479                           ;Lab9test.c: 449: Set_NSLT (1);
  2480  00322E  0E01               	movlw	1
  2481  003230  EC7F  F01D         	call	_Set_NSLT
  2482                           
  2483                           ;Lab9test.c: 450: }
  2484                           ;Lab9test.c: 451: break;
  2485  003234  D001               	goto	l433
  2486  003236  D7B4               	goto	l7665
  2487  003238                     l433:
  2488  003238  0012               	return		;funcret
  2489  00323A                     __end_of_Night_Mode:
  2490                           	opt stack 0
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           prodl	equ	0xFF3
  2496                           intcon2	equ	0xFF1
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           postdec1	equ	0xFE5
  2500                           fsr1l	equ	0xFE1
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function _Initialize_Screen *****************
  2504 ;; Defined at:
  2505 ;;		line 201 in file "Lab9test.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;		None               void
  2512 ;; Registers used:
  2513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        0 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    9
  2526 ;; This function calls:
  2527 ;;		_LCD_Reset
  2528 ;;		_TFT_GreenTab_Initialize
  2529 ;;		_drawCircle
  2530 ;;		_drawRect
  2531 ;;		_drawtext
  2532 ;;		_fillCircle
  2533 ;;		_fillScreen
  2534 ;;		_strcpy
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text3
  2541  000AB8                     __ptext3:
  2542                           	opt stack 0
  2543  000AB8                     _Initialize_Screen:
  2544                           	opt stack 21
  2545                           
  2546                           ;Lab9test.c: 203: LCD_Reset();
  2547                           
  2548                           ;incstack = 0
  2549  000AB8  ECB0  F01F         	call	_LCD_Reset	;wreg free
  2550                           
  2551                           ;Lab9test.c: 204: TFT_GreenTab_Initialize();
  2552  000ABC  ECD7  F01E         	call	_TFT_GreenTab_Initialize	;wreg free
  2553                           
  2554                           ;Lab9test.c: 205: fillScreen(0x0000);
  2555  000AC0  0E00               	movlw	0
  2556  000AC2  6E23               	movwf	fillScreen@color+1,c
  2557  000AC4  0E00               	movlw	0
  2558  000AC6  6E22               	movwf	fillScreen@color,c
  2559  000AC8  EC5E  F01F         	call	_fillScreen	;wreg free
  2560                           
  2561                           ;Lab9test.c: 208: txt = buffer;
  2562  000ACC  0E98               	movlw	low _buffer
  2563  000ACE  6E64               	movwf	_txt,c
  2564  000AD0  0E00               	movlw	high _buffer
  2565  000AD2  6E65               	movwf	_txt+1,c
  2566                           
  2567                           ;Lab9test.c: 209: strcpy(txt, "ECE3301L Fall 22-S1");
  2568  000AD4  C064  F00F         	movff	_txt,strcpy@to
  2569  000AD8  C065  F010         	movff	_txt+1,strcpy@to+1
  2570  000ADC  0E9A               	movlw	low STR_1
  2571  000ADE  6E11               	movwf	strcpy@from,c
  2572  000AE0  0EFF               	movlw	high STR_1
  2573  000AE2  6E12               	movwf	strcpy@from+1,c
  2574  000AE4  ECA6  F01E         	call	_strcpy	;wreg free
  2575                           
  2576                           ;Lab9test.c: 210: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2577  000AE8  0E02               	movlw	2
  2578  000AEA  6E37               	movwf	drawtext@y,c
  2579  000AEC  C064  F038         	movff	_txt,drawtext@_text
  2580  000AF0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2581  000AF4  0EFF               	movlw	255
  2582  000AF6  6E3B               	movwf	drawtext@color+1,c
  2583  000AF8  683A               	setf	drawtext@color,c
  2584  000AFA  0E00               	movlw	0
  2585  000AFC  6E3D               	movwf	drawtext@bg+1,c
  2586  000AFE  0E00               	movlw	0
  2587  000B00  6E3C               	movwf	drawtext@bg,c
  2588  000B02  0E01               	movlw	1
  2589  000B04  6E3E               	movwf	drawtext@size,c
  2590  000B06  0E02               	movlw	2
  2591  000B08  ECB9  F016         	call	_drawtext
  2592                           
  2593                           ;Lab9test.c: 213: strcpy(txt, "Mode:");
  2594  000B0C  C064  F00F         	movff	_txt,strcpy@to
  2595  000B10  C065  F010         	movff	_txt+1,strcpy@to+1
  2596  000B14  0EE5               	movlw	low STR_2
  2597  000B16  6E11               	movwf	strcpy@from,c
  2598  000B18  0EFF               	movlw	high STR_2
  2599  000B1A  6E12               	movwf	strcpy@from+1,c
  2600  000B1C  ECA6  F01E         	call	_strcpy	;wreg free
  2601                           
  2602                           ;Lab9test.c: 214: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2603  000B20  0E0A               	movlw	10
  2604  000B22  6E37               	movwf	drawtext@y,c
  2605  000B24  C064  F038         	movff	_txt,drawtext@_text
  2606  000B28  C065  F039         	movff	_txt+1,drawtext@_text+1
  2607  000B2C  0EFF               	movlw	255
  2608  000B2E  6E3B               	movwf	drawtext@color+1,c
  2609  000B30  683A               	setf	drawtext@color,c
  2610  000B32  0E00               	movlw	0
  2611  000B34  6E3D               	movwf	drawtext@bg+1,c
  2612  000B36  0E00               	movlw	0
  2613  000B38  6E3C               	movwf	drawtext@bg,c
  2614  000B3A  0E01               	movlw	1
  2615  000B3C  6E3E               	movwf	drawtext@size,c
  2616  000B3E  0E02               	movlw	2
  2617  000B40  ECB9  F016         	call	_drawtext
  2618                           
  2619                           ;Lab9test.c: 215: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2620  000B44  0E0A               	movlw	10
  2621  000B46  6E37               	movwf	drawtext@y,c
  2622  000B48  0ED4               	movlw	low _Act_Mode_Txt
  2623  000B4A  6E38               	movwf	drawtext@_text,c
  2624  000B4C  0E00               	movlw	high _Act_Mode_Txt
  2625  000B4E  6E39               	movwf	drawtext@_text+1,c
  2626  000B50  0EFF               	movlw	255
  2627  000B52  6E3B               	movwf	drawtext@color+1,c
  2628  000B54  683A               	setf	drawtext@color,c
  2629  000B56  0E00               	movlw	0
  2630  000B58  6E3D               	movwf	drawtext@bg+1,c
  2631  000B5A  0E00               	movlw	0
  2632  000B5C  6E3C               	movwf	drawtext@bg,c
  2633  000B5E  0E01               	movlw	1
  2634  000B60  6E3E               	movwf	drawtext@size,c
  2635  000B62  0E23               	movlw	35
  2636  000B64  ECB9  F016         	call	_drawtext
  2637                           
  2638                           ;Lab9test.c: 218: strcpy(txt, "FR:");
  2639  000B68  C064  F00F         	movff	_txt,strcpy@to
  2640  000B6C  C065  F010         	movff	_txt+1,strcpy@to+1
  2641  000B70  0EEB               	movlw	low STR_3
  2642  000B72  6E11               	movwf	strcpy@from,c
  2643  000B74  0EFF               	movlw	high STR_3
  2644  000B76  6E12               	movwf	strcpy@from+1,c
  2645  000B78  ECA6  F01E         	call	_strcpy	;wreg free
  2646                           
  2647                           ;Lab9test.c: 219: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2648  000B7C  0E0A               	movlw	10
  2649  000B7E  6E37               	movwf	drawtext@y,c
  2650  000B80  C064  F038         	movff	_txt,drawtext@_text
  2651  000B84  C065  F039         	movff	_txt+1,drawtext@_text+1
  2652  000B88  0EFF               	movlw	255
  2653  000B8A  6E3B               	movwf	drawtext@color+1,c
  2654  000B8C  683A               	setf	drawtext@color,c
  2655  000B8E  0E00               	movlw	0
  2656  000B90  6E3D               	movwf	drawtext@bg+1,c
  2657  000B92  0E00               	movlw	0
  2658  000B94  6E3C               	movwf	drawtext@bg,c
  2659  000B96  0E01               	movlw	1
  2660  000B98  6E3E               	movwf	drawtext@size,c
  2661  000B9A  0E32               	movlw	50
  2662  000B9C  ECB9  F016         	call	_drawtext
  2663                           
  2664                           ;Lab9test.c: 220: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2665  000BA0  0E0A               	movlw	10
  2666  000BA2  6E37               	movwf	drawtext@y,c
  2667  000BA4  0ED6               	movlw	low _FlashingR_Txt
  2668  000BA6  6E38               	movwf	drawtext@_text,c
  2669  000BA8  0E00               	movlw	high _FlashingR_Txt
  2670  000BAA  6E39               	movwf	drawtext@_text+1,c
  2671  000BAC  0EFF               	movlw	255
  2672  000BAE  6E3B               	movwf	drawtext@color+1,c
  2673  000BB0  683A               	setf	drawtext@color,c
  2674  000BB2  0E00               	movlw	0
  2675  000BB4  6E3D               	movwf	drawtext@bg+1,c
  2676  000BB6  0E00               	movlw	0
  2677  000BB8  6E3C               	movwf	drawtext@bg,c
  2678  000BBA  0E01               	movlw	1
  2679  000BBC  6E3E               	movwf	drawtext@size,c
  2680  000BBE  0E46               	movlw	70
  2681  000BC0  ECB9  F016         	call	_drawtext
  2682                           
  2683                           ;Lab9test.c: 223: strcpy(txt, "FS:");
  2684  000BC4  C064  F00F         	movff	_txt,strcpy@to
  2685  000BC8  C065  F010         	movff	_txt+1,strcpy@to+1
  2686  000BCC  0EEF               	movlw	low STR_4
  2687  000BCE  6E11               	movwf	strcpy@from,c
  2688  000BD0  0EFF               	movlw	high STR_4
  2689  000BD2  6E12               	movwf	strcpy@from+1,c
  2690  000BD4  ECA6  F01E         	call	_strcpy	;wreg free
  2691                           
  2692                           ;Lab9test.c: 224: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2693  000BD8  0E0A               	movlw	10
  2694  000BDA  6E37               	movwf	drawtext@y,c
  2695  000BDC  C064  F038         	movff	_txt,drawtext@_text
  2696  000BE0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2697  000BE4  0EFF               	movlw	255
  2698  000BE6  6E3B               	movwf	drawtext@color+1,c
  2699  000BE8  683A               	setf	drawtext@color,c
  2700  000BEA  0E00               	movlw	0
  2701  000BEC  6E3D               	movwf	drawtext@bg+1,c
  2702  000BEE  0E00               	movlw	0
  2703  000BF0  6E3C               	movwf	drawtext@bg,c
  2704  000BF2  0E01               	movlw	1
  2705  000BF4  6E3E               	movwf	drawtext@size,c
  2706  000BF6  0E50               	movlw	80
  2707  000BF8  ECB9  F016         	call	_drawtext
  2708                           
  2709                           ;Lab9test.c: 225: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2710  000BFC  0E0A               	movlw	10
  2711  000BFE  6E37               	movwf	drawtext@y,c
  2712  000C00  0ED8               	movlw	low _FlashingS_Txt
  2713  000C02  6E38               	movwf	drawtext@_text,c
  2714  000C04  0E00               	movlw	high _FlashingS_Txt
  2715  000C06  6E39               	movwf	drawtext@_text+1,c
  2716  000C08  0EFF               	movlw	255
  2717  000C0A  6E3B               	movwf	drawtext@color+1,c
  2718  000C0C  683A               	setf	drawtext@color,c
  2719  000C0E  0E00               	movlw	0
  2720  000C10  6E3D               	movwf	drawtext@bg+1,c
  2721  000C12  0E00               	movlw	0
  2722  000C14  6E3C               	movwf	drawtext@bg,c
  2723  000C16  0E01               	movlw	1
  2724  000C18  6E3E               	movwf	drawtext@size,c
  2725  000C1A  0E64               	movlw	100
  2726  000C1C  ECB9  F016         	call	_drawtext
  2727                           
  2728                           ;Lab9test.c: 228: strcpy(txt, "*");
  2729  000C20  C064  F00F         	movff	_txt,strcpy@to
  2730  000C24  C065  F010         	movff	_txt+1,strcpy@to+1
  2731  000C28  0EFD               	movlw	low STR_5
  2732  000C2A  6E11               	movwf	strcpy@from,c
  2733  000C2C  0EFF               	movlw	high STR_5
  2734  000C2E  6E12               	movwf	strcpy@from+1,c
  2735  000C30  ECA6  F01E         	call	_strcpy	;wreg free
  2736                           
  2737                           ;Lab9test.c: 229: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2738  000C34  0E0A               	movlw	10
  2739  000C36  6E37               	movwf	drawtext@y,c
  2740  000C38  C064  F038         	movff	_txt,drawtext@_text
  2741  000C3C  C065  F039         	movff	_txt+1,drawtext@_text+1
  2742  000C40  0EFF               	movlw	255
  2743  000C42  6E3B               	movwf	drawtext@color+1,c
  2744  000C44  683A               	setf	drawtext@color,c
  2745  000C46  0E00               	movlw	0
  2746  000C48  6E3D               	movwf	drawtext@bg+1,c
  2747  000C4A  0E00               	movlw	0
  2748  000C4C  6E3C               	movwf	drawtext@bg,c
  2749  000C4E  0E01               	movlw	1
  2750  000C50  6E3E               	movwf	drawtext@size,c
  2751  000C52  0E78               	movlw	120
  2752  000C54  ECB9  F016         	call	_drawtext
  2753                           
  2754                           ;Lab9test.c: 232: strcpy(txt, "EAST/WEST");
  2755  000C58  C064  F00F         	movff	_txt,strcpy@to
  2756  000C5C  C065  F010         	movff	_txt+1,strcpy@to+1
  2757  000C60  0ECD               	movlw	low STR_6
  2758  000C62  6E11               	movwf	strcpy@from,c
  2759  000C64  0EFF               	movlw	high STR_6
  2760  000C66  6E12               	movwf	strcpy@from+1,c
  2761  000C68  ECA6  F01E         	call	_strcpy	;wreg free
  2762                           
  2763                           ;Lab9test.c: 233: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2764  000C6C  0E14               	movlw	20
  2765  000C6E  6E37               	movwf	drawtext@y,c
  2766  000C70  C064  F038         	movff	_txt,drawtext@_text
  2767  000C74  C065  F039         	movff	_txt+1,drawtext@_text+1
  2768  000C78  0E07               	movlw	7
  2769  000C7A  6E3B               	movwf	drawtext@color+1,c
  2770  000C7C  683A               	setf	drawtext@color,c
  2771  000C7E  0E00               	movlw	0
  2772  000C80  6E3D               	movwf	drawtext@bg+1,c
  2773  000C82  0E00               	movlw	0
  2774  000C84  6E3C               	movwf	drawtext@bg,c
  2775  000C86  0E01               	movlw	1
  2776  000C88  6E3E               	movwf	drawtext@size,c
  2777  000C8A  0E1E               	movlw	30
  2778  000C8C  ECB9  F016         	call	_drawtext
  2779                           
  2780                           ;Lab9test.c: 234: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2781  000C90  0E00               	movlw	0
  2782  000C92  6E22               	movwf	drawRect@x+1,c
  2783  000C94  0E1E               	movlw	30
  2784  000C96  6E21               	movwf	drawRect@x,c
  2785  000C98  0E00               	movlw	0
  2786  000C9A  6E24               	movwf	drawRect@y+1,c
  2787  000C9C  0E1B               	movlw	27
  2788  000C9E  6E23               	movwf	drawRect@y,c
  2789  000CA0  0E00               	movlw	0
  2790  000CA2  6E26               	movwf	drawRect@w+1,c
  2791  000CA4  0E3C               	movlw	60
  2792  000CA6  6E25               	movwf	drawRect@w,c
  2793  000CA8  0E00               	movlw	0
  2794  000CAA  6E28               	movwf	drawRect@h+1,c
  2795  000CAC  0E12               	movlw	18
  2796  000CAE  6E27               	movwf	drawRect@h,c
  2797  000CB0  0E07               	movlw	7
  2798  000CB2  6E2A               	movwf	drawRect@color+1,c
  2799  000CB4  6829               	setf	drawRect@color,c
  2800  000CB6  ECF9  F01B         	call	_drawRect	;wreg free
  2801                           
  2802                           ;Lab9test.c: 235: fillCircle(40, 20 + 15, 7, 0xF800);
  2803  000CBA  0E00               	movlw	0
  2804  000CBC  6E3A               	movwf	fillCircle@x0+1,c
  2805  000CBE  0E28               	movlw	40
  2806  000CC0  6E39               	movwf	fillCircle@x0,c
  2807  000CC2  0E00               	movlw	0
  2808  000CC4  6E3C               	movwf	fillCircle@y0+1,c
  2809  000CC6  0E23               	movlw	35
  2810  000CC8  6E3B               	movwf	fillCircle@y0,c
  2811  000CCA  0E00               	movlw	0
  2812  000CCC  6E3E               	movwf	fillCircle@r+1,c
  2813  000CCE  0E07               	movlw	7
  2814  000CD0  6E3D               	movwf	fillCircle@r,c
  2815  000CD2  0EF8               	movlw	248
  2816  000CD4  6E40               	movwf	fillCircle@color+1,c
  2817  000CD6  0E00               	movlw	0
  2818  000CD8  6E3F               	movwf	fillCircle@color,c
  2819  000CDA  EC0A  F01D         	call	_fillCircle	;wreg free
  2820                           
  2821                           ;Lab9test.c: 236: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2822  000CDE  0E00               	movlw	0
  2823  000CE0  6E1B               	movwf	drawCircle@x0+1,c
  2824  000CE2  0E3C               	movlw	60
  2825  000CE4  6E1A               	movwf	drawCircle@x0,c
  2826  000CE6  0E00               	movlw	0
  2827  000CE8  6E1D               	movwf	drawCircle@y0+1,c
  2828  000CEA  0E23               	movlw	35
  2829  000CEC  6E1C               	movwf	drawCircle@y0,c
  2830  000CEE  0E00               	movlw	0
  2831  000CF0  6E1F               	movwf	drawCircle@r+1,c
  2832  000CF2  0E07               	movlw	7
  2833  000CF4  6E1E               	movwf	drawCircle@r,c
  2834  000CF6  0EFF               	movlw	255
  2835  000CF8  6E21               	movwf	drawCircle@color+1,c
  2836  000CFA  0EE0               	movlw	224
  2837  000CFC  6E20               	movwf	drawCircle@color,c
  2838  000CFE  ECE4  F00F         	call	_drawCircle	;wreg free
  2839                           
  2840                           ;Lab9test.c: 237: drawCircle(80, 20 + 15, 7, 0x07E0);
  2841  000D02  0E00               	movlw	0
  2842  000D04  6E1B               	movwf	drawCircle@x0+1,c
  2843  000D06  0E50               	movlw	80
  2844  000D08  6E1A               	movwf	drawCircle@x0,c
  2845  000D0A  0E00               	movlw	0
  2846  000D0C  6E1D               	movwf	drawCircle@y0+1,c
  2847  000D0E  0E23               	movlw	35
  2848  000D10  6E1C               	movwf	drawCircle@y0,c
  2849  000D12  0E00               	movlw	0
  2850  000D14  6E1F               	movwf	drawCircle@r+1,c
  2851  000D16  0E07               	movlw	7
  2852  000D18  6E1E               	movwf	drawCircle@r,c
  2853  000D1A  0E07               	movlw	7
  2854  000D1C  6E21               	movwf	drawCircle@color+1,c
  2855  000D1E  0EE0               	movlw	224
  2856  000D20  6E20               	movwf	drawCircle@color,c
  2857  000D22  ECE4  F00F         	call	_drawCircle	;wreg free
  2858                           
  2859                           ;Lab9test.c: 238: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2860  000D26  0E1E               	movlw	30
  2861  000D28  6E37               	movwf	drawtext@y,c
  2862  000D2A  0EC5               	movlw	low _EW_Count
  2863  000D2C  6E38               	movwf	drawtext@_text,c
  2864  000D2E  0E00               	movlw	high _EW_Count
  2865  000D30  6E39               	movwf	drawtext@_text+1,c
  2866  000D32  0E07               	movlw	7
  2867  000D34  6E3B               	movwf	drawtext@color+1,c
  2868  000D36  683A               	setf	drawtext@color,c
  2869  000D38  0E00               	movlw	0
  2870  000D3A  6E3D               	movwf	drawtext@bg+1,c
  2871  000D3C  0E00               	movlw	0
  2872  000D3E  6E3C               	movwf	drawtext@bg,c
  2873  000D40  0E02               	movlw	2
  2874  000D42  6E3E               	movwf	drawtext@size,c
  2875  000D44  0E64               	movlw	100
  2876  000D46  ECB9  F016         	call	_drawtext
  2877                           
  2878                           ;Lab9test.c: 241: strcpy(txt, "E/W LT");
  2879  000D4A  C064  F00F         	movff	_txt,strcpy@to
  2880  000D4E  C065  F010         	movff	_txt+1,strcpy@to+1
  2881  000D52  0EDE               	movlw	low STR_7
  2882  000D54  6E11               	movwf	strcpy@from,c
  2883  000D56  0EFF               	movlw	high STR_7
  2884  000D58  6E12               	movwf	strcpy@from+1,c
  2885  000D5A  ECA6  F01E         	call	_strcpy	;wreg free
  2886                           
  2887                           ;Lab9test.c: 242: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2888  000D5E  0E32               	movlw	50
  2889  000D60  6E37               	movwf	drawtext@y,c
  2890  000D62  C064  F038         	movff	_txt,drawtext@_text
  2891  000D66  C065  F039         	movff	_txt+1,drawtext@_text+1
  2892  000D6A  0EFF               	movlw	255
  2893  000D6C  6E3B               	movwf	drawtext@color+1,c
  2894  000D6E  683A               	setf	drawtext@color,c
  2895  000D70  0E00               	movlw	0
  2896  000D72  6E3D               	movwf	drawtext@bg+1,c
  2897  000D74  0E00               	movlw	0
  2898  000D76  6E3C               	movwf	drawtext@bg,c
  2899  000D78  0E01               	movlw	1
  2900  000D7A  6E3E               	movwf	drawtext@size,c
  2901  000D7C  0E1E               	movlw	30
  2902  000D7E  ECB9  F016         	call	_drawtext
  2903                           
  2904                           ;Lab9test.c: 243: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2905  000D82  0E00               	movlw	0
  2906  000D84  6E22               	movwf	drawRect@x+1,c
  2907  000D86  0E1E               	movlw	30
  2908  000D88  6E21               	movwf	drawRect@x,c
  2909  000D8A  0E00               	movlw	0
  2910  000D8C  6E24               	movwf	drawRect@y+1,c
  2911  000D8E  0E39               	movlw	57
  2912  000D90  6E23               	movwf	drawRect@y,c
  2913  000D92  0E00               	movlw	0
  2914  000D94  6E26               	movwf	drawRect@w+1,c
  2915  000D96  0E3C               	movlw	60
  2916  000D98  6E25               	movwf	drawRect@w,c
  2917  000D9A  0E00               	movlw	0
  2918  000D9C  6E28               	movwf	drawRect@h+1,c
  2919  000D9E  0E12               	movlw	18
  2920  000DA0  6E27               	movwf	drawRect@h,c
  2921  000DA2  0EFF               	movlw	255
  2922  000DA4  6E2A               	movwf	drawRect@color+1,c
  2923  000DA6  6829               	setf	drawRect@color,c
  2924  000DA8  ECF9  F01B         	call	_drawRect	;wreg free
  2925                           
  2926                           ;Lab9test.c: 244: fillCircle(40, 50 + 15, 7, 0xF800);
  2927  000DAC  0E00               	movlw	0
  2928  000DAE  6E3A               	movwf	fillCircle@x0+1,c
  2929  000DB0  0E28               	movlw	40
  2930  000DB2  6E39               	movwf	fillCircle@x0,c
  2931  000DB4  0E00               	movlw	0
  2932  000DB6  6E3C               	movwf	fillCircle@y0+1,c
  2933  000DB8  0E41               	movlw	65
  2934  000DBA  6E3B               	movwf	fillCircle@y0,c
  2935  000DBC  0E00               	movlw	0
  2936  000DBE  6E3E               	movwf	fillCircle@r+1,c
  2937  000DC0  0E07               	movlw	7
  2938  000DC2  6E3D               	movwf	fillCircle@r,c
  2939  000DC4  0EF8               	movlw	248
  2940  000DC6  6E40               	movwf	fillCircle@color+1,c
  2941  000DC8  0E00               	movlw	0
  2942  000DCA  6E3F               	movwf	fillCircle@color,c
  2943  000DCC  EC0A  F01D         	call	_fillCircle	;wreg free
  2944                           
  2945                           ;Lab9test.c: 245: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2946  000DD0  0E00               	movlw	0
  2947  000DD2  6E1B               	movwf	drawCircle@x0+1,c
  2948  000DD4  0E3C               	movlw	60
  2949  000DD6  6E1A               	movwf	drawCircle@x0,c
  2950  000DD8  0E00               	movlw	0
  2951  000DDA  6E1D               	movwf	drawCircle@y0+1,c
  2952  000DDC  0E41               	movlw	65
  2953  000DDE  6E1C               	movwf	drawCircle@y0,c
  2954  000DE0  0E00               	movlw	0
  2955  000DE2  6E1F               	movwf	drawCircle@r+1,c
  2956  000DE4  0E07               	movlw	7
  2957  000DE6  6E1E               	movwf	drawCircle@r,c
  2958  000DE8  0EFF               	movlw	255
  2959  000DEA  6E21               	movwf	drawCircle@color+1,c
  2960  000DEC  0EE0               	movlw	224
  2961  000DEE  6E20               	movwf	drawCircle@color,c
  2962  000DF0  ECE4  F00F         	call	_drawCircle	;wreg free
  2963                           
  2964                           ;Lab9test.c: 246: drawCircle(80, 50 + 15, 7, 0x07E0);
  2965  000DF4  0E00               	movlw	0
  2966  000DF6  6E1B               	movwf	drawCircle@x0+1,c
  2967  000DF8  0E50               	movlw	80
  2968  000DFA  6E1A               	movwf	drawCircle@x0,c
  2969  000DFC  0E00               	movlw	0
  2970  000DFE  6E1D               	movwf	drawCircle@y0+1,c
  2971  000E00  0E41               	movlw	65
  2972  000E02  6E1C               	movwf	drawCircle@y0,c
  2973  000E04  0E00               	movlw	0
  2974  000E06  6E1F               	movwf	drawCircle@r+1,c
  2975  000E08  0E07               	movlw	7
  2976  000E0A  6E1E               	movwf	drawCircle@r,c
  2977  000E0C  0E07               	movlw	7
  2978  000E0E  6E21               	movwf	drawCircle@color+1,c
  2979  000E10  0EE0               	movlw	224
  2980  000E12  6E20               	movwf	drawCircle@color,c
  2981  000E14  ECE4  F00F         	call	_drawCircle	;wreg free
  2982                           
  2983                           ;Lab9test.c: 247: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2984  000E18  0E3C               	movlw	60
  2985  000E1A  6E37               	movwf	drawtext@y,c
  2986  000E1C  0EC2               	movlw	low _EWLT_Count
  2987  000E1E  6E38               	movwf	drawtext@_text,c
  2988  000E20  0E00               	movlw	high _EWLT_Count
  2989  000E22  6E39               	movwf	drawtext@_text+1,c
  2990  000E24  0EFF               	movlw	255
  2991  000E26  6E3B               	movwf	drawtext@color+1,c
  2992  000E28  683A               	setf	drawtext@color,c
  2993  000E2A  0E00               	movlw	0
  2994  000E2C  6E3D               	movwf	drawtext@bg+1,c
  2995  000E2E  0E00               	movlw	0
  2996  000E30  6E3C               	movwf	drawtext@bg,c
  2997  000E32  0E02               	movlw	2
  2998  000E34  6E3E               	movwf	drawtext@size,c
  2999  000E36  0E64               	movlw	100
  3000  000E38  ECB9  F016         	call	_drawtext
  3001                           
  3002                           ;Lab9test.c: 250: strcpy(txt, "NORTH/SOUTH");
  3003  000E3C  C064  F00F         	movff	_txt,strcpy@to
  3004  000E40  C065  F010         	movff	_txt+1,strcpy@to+1
  3005  000E44  0EC1               	movlw	low STR_8
  3006  000E46  6E11               	movwf	strcpy@from,c
  3007  000E48  0EFF               	movlw	high STR_8
  3008  000E4A  6E12               	movwf	strcpy@from+1,c
  3009  000E4C  ECA6  F01E         	call	_strcpy	;wreg free
  3010                           
  3011                           ;Lab9test.c: 251: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  3012  000E50  0E50               	movlw	80
  3013  000E52  6E37               	movwf	drawtext@y,c
  3014  000E54  C064  F038         	movff	_txt,drawtext@_text
  3015  000E58  C065  F039         	movff	_txt+1,drawtext@_text+1
  3016  000E5C  0E00               	movlw	0
  3017  000E5E  6E3B               	movwf	drawtext@color+1,c
  3018  000E60  0E1F               	movlw	31
  3019  000E62  6E3A               	movwf	drawtext@color,c
  3020  000E64  0E00               	movlw	0
  3021  000E66  6E3D               	movwf	drawtext@bg+1,c
  3022  000E68  0E00               	movlw	0
  3023  000E6A  6E3C               	movwf	drawtext@bg,c
  3024  000E6C  0E01               	movlw	1
  3025  000E6E  6E3E               	movwf	drawtext@size,c
  3026  000E70  0E1E               	movlw	30
  3027  000E72  ECB9  F016         	call	_drawtext
  3028                           
  3029                           ;Lab9test.c: 252: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  3030  000E76  0E00               	movlw	0
  3031  000E78  6E22               	movwf	drawRect@x+1,c
  3032  000E7A  0E1E               	movlw	30
  3033  000E7C  6E21               	movwf	drawRect@x,c
  3034  000E7E  0E00               	movlw	0
  3035  000E80  6E24               	movwf	drawRect@y+1,c
  3036  000E82  0E57               	movlw	87
  3037  000E84  6E23               	movwf	drawRect@y,c
  3038  000E86  0E00               	movlw	0
  3039  000E88  6E26               	movwf	drawRect@w+1,c
  3040  000E8A  0E3C               	movlw	60
  3041  000E8C  6E25               	movwf	drawRect@w,c
  3042  000E8E  0E00               	movlw	0
  3043  000E90  6E28               	movwf	drawRect@h+1,c
  3044  000E92  0E12               	movlw	18
  3045  000E94  6E27               	movwf	drawRect@h,c
  3046  000E96  0E00               	movlw	0
  3047  000E98  6E2A               	movwf	drawRect@color+1,c
  3048  000E9A  0E1F               	movlw	31
  3049  000E9C  6E29               	movwf	drawRect@color,c
  3050  000E9E  ECF9  F01B         	call	_drawRect	;wreg free
  3051                           
  3052                           ;Lab9test.c: 253: drawCircle(40, 80 + 15 , 7, 0xF800);
  3053  000EA2  0E00               	movlw	0
  3054  000EA4  6E1B               	movwf	drawCircle@x0+1,c
  3055  000EA6  0E28               	movlw	40
  3056  000EA8  6E1A               	movwf	drawCircle@x0,c
  3057  000EAA  0E00               	movlw	0
  3058  000EAC  6E1D               	movwf	drawCircle@y0+1,c
  3059  000EAE  0E5F               	movlw	95
  3060  000EB0  6E1C               	movwf	drawCircle@y0,c
  3061  000EB2  0E00               	movlw	0
  3062  000EB4  6E1F               	movwf	drawCircle@r+1,c
  3063  000EB6  0E07               	movlw	7
  3064  000EB8  6E1E               	movwf	drawCircle@r,c
  3065  000EBA  0EF8               	movlw	248
  3066  000EBC  6E21               	movwf	drawCircle@color+1,c
  3067  000EBE  0E00               	movlw	0
  3068  000EC0  6E20               	movwf	drawCircle@color,c
  3069  000EC2  ECE4  F00F         	call	_drawCircle	;wreg free
  3070                           
  3071                           ;Lab9test.c: 254: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  3072  000EC6  0E00               	movlw	0
  3073  000EC8  6E1B               	movwf	drawCircle@x0+1,c
  3074  000ECA  0E3C               	movlw	60
  3075  000ECC  6E1A               	movwf	drawCircle@x0,c
  3076  000ECE  0E00               	movlw	0
  3077  000ED0  6E1D               	movwf	drawCircle@y0+1,c
  3078  000ED2  0E5F               	movlw	95
  3079  000ED4  6E1C               	movwf	drawCircle@y0,c
  3080  000ED6  0E00               	movlw	0
  3081  000ED8  6E1F               	movwf	drawCircle@r+1,c
  3082  000EDA  0E07               	movlw	7
  3083  000EDC  6E1E               	movwf	drawCircle@r,c
  3084  000EDE  0EFF               	movlw	255
  3085  000EE0  6E21               	movwf	drawCircle@color+1,c
  3086  000EE2  0EE0               	movlw	224
  3087  000EE4  6E20               	movwf	drawCircle@color,c
  3088  000EE6  ECE4  F00F         	call	_drawCircle	;wreg free
  3089                           
  3090                           ;Lab9test.c: 255: fillCircle(80, 80 + 15 , 7, 0x07E0);
  3091  000EEA  0E00               	movlw	0
  3092  000EEC  6E3A               	movwf	fillCircle@x0+1,c
  3093  000EEE  0E50               	movlw	80
  3094  000EF0  6E39               	movwf	fillCircle@x0,c
  3095  000EF2  0E00               	movlw	0
  3096  000EF4  6E3C               	movwf	fillCircle@y0+1,c
  3097  000EF6  0E5F               	movlw	95
  3098  000EF8  6E3B               	movwf	fillCircle@y0,c
  3099  000EFA  0E00               	movlw	0
  3100  000EFC  6E3E               	movwf	fillCircle@r+1,c
  3101  000EFE  0E07               	movlw	7
  3102  000F00  6E3D               	movwf	fillCircle@r,c
  3103  000F02  0E07               	movlw	7
  3104  000F04  6E40               	movwf	fillCircle@color+1,c
  3105  000F06  0EE0               	movlw	224
  3106  000F08  6E3F               	movwf	fillCircle@color,c
  3107  000F0A  EC0A  F01D         	call	_fillCircle	;wreg free
  3108                           
  3109                           ;Lab9test.c: 256: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  3110  000F0E  0E5A               	movlw	90
  3111  000F10  6E37               	movwf	drawtext@y,c
  3112  000F12  0ECB               	movlw	low _NS_Count
  3113  000F14  6E38               	movwf	drawtext@_text,c
  3114  000F16  0E00               	movlw	high _NS_Count
  3115  000F18  6E39               	movwf	drawtext@_text+1,c
  3116  000F1A  0E00               	movlw	0
  3117  000F1C  6E3B               	movwf	drawtext@color+1,c
  3118  000F1E  0E1F               	movlw	31
  3119  000F20  6E3A               	movwf	drawtext@color,c
  3120  000F22  0E00               	movlw	0
  3121  000F24  6E3D               	movwf	drawtext@bg+1,c
  3122  000F26  0E00               	movlw	0
  3123  000F28  6E3C               	movwf	drawtext@bg,c
  3124  000F2A  0E02               	movlw	2
  3125  000F2C  6E3E               	movwf	drawtext@size,c
  3126  000F2E  0E64               	movlw	100
  3127  000F30  ECB9  F016         	call	_drawtext
  3128                           
  3129                           ;Lab9test.c: 259: strcpy(txt, "N/S LT");
  3130  000F34  C064  F00F         	movff	_txt,strcpy@to
  3131  000F38  C065  F010         	movff	_txt+1,strcpy@to+1
  3132  000F3C  0ED7               	movlw	low STR_9
  3133  000F3E  6E11               	movwf	strcpy@from,c
  3134  000F40  0EFF               	movlw	high STR_9
  3135  000F42  6E12               	movwf	strcpy@from+1,c
  3136  000F44  ECA6  F01E         	call	_strcpy	;wreg free
  3137                           
  3138                           ;Lab9test.c: 260: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  3139  000F48  0E6E               	movlw	110
  3140  000F4A  6E37               	movwf	drawtext@y,c
  3141  000F4C  C064  F038         	movff	_txt,drawtext@_text
  3142  000F50  C065  F039         	movff	_txt+1,drawtext@_text+1
  3143  000F54  0EF8               	movlw	248
  3144  000F56  6E3B               	movwf	drawtext@color+1,c
  3145  000F58  0E1F               	movlw	31
  3146  000F5A  6E3A               	movwf	drawtext@color,c
  3147  000F5C  0E00               	movlw	0
  3148  000F5E  6E3D               	movwf	drawtext@bg+1,c
  3149  000F60  0E00               	movlw	0
  3150  000F62  6E3C               	movwf	drawtext@bg,c
  3151  000F64  0E01               	movlw	1
  3152  000F66  6E3E               	movwf	drawtext@size,c
  3153  000F68  0E1E               	movlw	30
  3154  000F6A  ECB9  F016         	call	_drawtext
  3155                           
  3156                           ;Lab9test.c: 261: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  3157  000F6E  0E00               	movlw	0
  3158  000F70  6E22               	movwf	drawRect@x+1,c
  3159  000F72  0E1E               	movlw	30
  3160  000F74  6E21               	movwf	drawRect@x,c
  3161  000F76  0E00               	movlw	0
  3162  000F78  6E24               	movwf	drawRect@y+1,c
  3163  000F7A  0E75               	movlw	117
  3164  000F7C  6E23               	movwf	drawRect@y,c
  3165  000F7E  0E00               	movlw	0
  3166  000F80  6E26               	movwf	drawRect@w+1,c
  3167  000F82  0E3C               	movlw	60
  3168  000F84  6E25               	movwf	drawRect@w,c
  3169  000F86  0E00               	movlw	0
  3170  000F88  6E28               	movwf	drawRect@h+1,c
  3171  000F8A  0E12               	movlw	18
  3172  000F8C  6E27               	movwf	drawRect@h,c
  3173  000F8E  0EF8               	movlw	248
  3174  000F90  6E2A               	movwf	drawRect@color+1,c
  3175  000F92  0E1F               	movlw	31
  3176  000F94  6E29               	movwf	drawRect@color,c
  3177  000F96  ECF9  F01B         	call	_drawRect	;wreg free
  3178                           
  3179                           ;Lab9test.c: 262: fillCircle(40, 110 + 15, 7, 0xF800);
  3180  000F9A  0E00               	movlw	0
  3181  000F9C  6E3A               	movwf	fillCircle@x0+1,c
  3182  000F9E  0E28               	movlw	40
  3183  000FA0  6E39               	movwf	fillCircle@x0,c
  3184  000FA2  0E00               	movlw	0
  3185  000FA4  6E3C               	movwf	fillCircle@y0+1,c
  3186  000FA6  0E7D               	movlw	125
  3187  000FA8  6E3B               	movwf	fillCircle@y0,c
  3188  000FAA  0E00               	movlw	0
  3189  000FAC  6E3E               	movwf	fillCircle@r+1,c
  3190  000FAE  0E07               	movlw	7
  3191  000FB0  6E3D               	movwf	fillCircle@r,c
  3192  000FB2  0EF8               	movlw	248
  3193  000FB4  6E40               	movwf	fillCircle@color+1,c
  3194  000FB6  0E00               	movlw	0
  3195  000FB8  6E3F               	movwf	fillCircle@color,c
  3196  000FBA  EC0A  F01D         	call	_fillCircle	;wreg free
  3197                           
  3198                           ;Lab9test.c: 263: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3199  000FBE  0E00               	movlw	0
  3200  000FC0  6E1B               	movwf	drawCircle@x0+1,c
  3201  000FC2  0E3C               	movlw	60
  3202  000FC4  6E1A               	movwf	drawCircle@x0,c
  3203  000FC6  0E00               	movlw	0
  3204  000FC8  6E1D               	movwf	drawCircle@y0+1,c
  3205  000FCA  0E7D               	movlw	125
  3206  000FCC  6E1C               	movwf	drawCircle@y0,c
  3207  000FCE  0E00               	movlw	0
  3208  000FD0  6E1F               	movwf	drawCircle@r+1,c
  3209  000FD2  0E07               	movlw	7
  3210  000FD4  6E1E               	movwf	drawCircle@r,c
  3211  000FD6  0EFF               	movlw	255
  3212  000FD8  6E21               	movwf	drawCircle@color+1,c
  3213  000FDA  0EE0               	movlw	224
  3214  000FDC  6E20               	movwf	drawCircle@color,c
  3215  000FDE  ECE4  F00F         	call	_drawCircle	;wreg free
  3216                           
  3217                           ;Lab9test.c: 264: drawCircle(80, 110 + 15, 7, 0x07E0);
  3218  000FE2  0E00               	movlw	0
  3219  000FE4  6E1B               	movwf	drawCircle@x0+1,c
  3220  000FE6  0E50               	movlw	80
  3221  000FE8  6E1A               	movwf	drawCircle@x0,c
  3222  000FEA  0E00               	movlw	0
  3223  000FEC  6E1D               	movwf	drawCircle@y0+1,c
  3224  000FEE  0E7D               	movlw	125
  3225  000FF0  6E1C               	movwf	drawCircle@y0,c
  3226  000FF2  0E00               	movlw	0
  3227  000FF4  6E1F               	movwf	drawCircle@r+1,c
  3228  000FF6  0E07               	movlw	7
  3229  000FF8  6E1E               	movwf	drawCircle@r,c
  3230  000FFA  0E07               	movlw	7
  3231  000FFC  6E21               	movwf	drawCircle@color+1,c
  3232  000FFE  0EE0               	movlw	224
  3233  001000  6E20               	movwf	drawCircle@color,c
  3234  001002  ECE4  F00F         	call	_drawCircle	;wreg free
  3235                           
  3236                           ;Lab9test.c: 265: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3237  001006  0E78               	movlw	120
  3238  001008  6E37               	movwf	drawtext@y,c
  3239  00100A  0EC8               	movlw	low _NSLT_Count
  3240  00100C  6E38               	movwf	drawtext@_text,c
  3241  00100E  0E00               	movlw	high _NSLT_Count
  3242  001010  6E39               	movwf	drawtext@_text+1,c
  3243  001012  0EF8               	movlw	248
  3244  001014  6E3B               	movwf	drawtext@color+1,c
  3245  001016  0E1F               	movlw	31
  3246  001018  6E3A               	movwf	drawtext@color,c
  3247  00101A  0E00               	movlw	0
  3248  00101C  6E3D               	movwf	drawtext@bg+1,c
  3249  00101E  0E00               	movlw	0
  3250  001020  6E3C               	movwf	drawtext@bg,c
  3251  001022  0E02               	movlw	2
  3252  001024  6E3E               	movwf	drawtext@size,c
  3253  001026  0E64               	movlw	100
  3254  001028  ECB9  F016         	call	_drawtext
  3255                           
  3256                           ;Lab9test.c: 269: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  3257  00102C  0E1E               	movlw	30
  3258  00102E  6E37               	movwf	drawtext@y,c
  3259  001030  0ECE               	movlw	low _PED_EW_Count
  3260  001032  6E38               	movwf	drawtext@_text,c
  3261  001034  0E00               	movlw	high _PED_EW_Count
  3262  001036  6E39               	movwf	drawtext@_text+1,c
  3263  001038  0E07               	movlw	7
  3264  00103A  6E3B               	movwf	drawtext@color+1,c
  3265  00103C  683A               	setf	drawtext@color,c
  3266  00103E  0E00               	movlw	0
  3267  001040  6E3D               	movwf	drawtext@bg+1,c
  3268  001042  0E00               	movlw	0
  3269  001044  6E3C               	movwf	drawtext@bg,c
  3270  001046  0E02               	movlw	2
  3271  001048  6E3E               	movwf	drawtext@size,c
  3272  00104A  0E02               	movlw	2
  3273  00104C  ECB9  F016         	call	_drawtext
  3274                           
  3275                           ;Lab9test.c: 270: strcpy(txt, "PEW");
  3276  001050  C064  F00F         	movff	_txt,strcpy@to
  3277  001054  C065  F010         	movff	_txt+1,strcpy@to+1
  3278  001058  0EF7               	movlw	low STR_10
  3279  00105A  6E11               	movwf	strcpy@from,c
  3280  00105C  0EFF               	movlw	high STR_10
  3281  00105E  6E12               	movwf	strcpy@from+1,c
  3282  001060  ECA6  F01E         	call	_strcpy	;wreg free
  3283                           
  3284                           ;Lab9test.c: 271: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  3285  001064  0E14               	movlw	20
  3286  001066  6E37               	movwf	drawtext@y,c
  3287  001068  C064  F038         	movff	_txt,drawtext@_text
  3288  00106C  C065  F039         	movff	_txt+1,drawtext@_text+1
  3289  001070  0E07               	movlw	7
  3290  001072  6E3B               	movwf	drawtext@color+1,c
  3291  001074  683A               	setf	drawtext@color,c
  3292  001076  0E00               	movlw	0
  3293  001078  6E3D               	movwf	drawtext@bg+1,c
  3294  00107A  0E00               	movlw	0
  3295  00107C  6E3C               	movwf	drawtext@bg,c
  3296  00107E  0E01               	movlw	1
  3297  001080  6E3E               	movwf	drawtext@size,c
  3298  001082  0E03               	movlw	3
  3299  001084  ECB9  F016         	call	_drawtext
  3300                           
  3301                           ;Lab9test.c: 274: strcpy(txt, "PNS");
  3302  001088  C064  F00F         	movff	_txt,strcpy@to
  3303  00108C  C065  F010         	movff	_txt+1,strcpy@to+1
  3304  001090  0EF3               	movlw	low STR_11
  3305  001092  6E11               	movwf	strcpy@from,c
  3306  001094  0EFF               	movlw	high STR_11
  3307  001096  6E12               	movwf	strcpy@from+1,c
  3308  001098  ECA6  F01E         	call	_strcpy	;wreg free
  3309                           
  3310                           ;Lab9test.c: 275: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3311  00109C  0E50               	movlw	80
  3312  00109E  6E37               	movwf	drawtext@y,c
  3313  0010A0  C064  F038         	movff	_txt,drawtext@_text
  3314  0010A4  C065  F039         	movff	_txt+1,drawtext@_text+1
  3315  0010A8  0E00               	movlw	0
  3316  0010AA  6E3B               	movwf	drawtext@color+1,c
  3317  0010AC  0E1F               	movlw	31
  3318  0010AE  6E3A               	movwf	drawtext@color,c
  3319  0010B0  0E00               	movlw	0
  3320  0010B2  6E3D               	movwf	drawtext@bg+1,c
  3321  0010B4  0E00               	movlw	0
  3322  0010B6  6E3C               	movwf	drawtext@bg,c
  3323  0010B8  0E01               	movlw	1
  3324  0010BA  6E3E               	movwf	drawtext@size,c
  3325  0010BC  0E03               	movlw	3
  3326  0010BE  ECB9  F016         	call	_drawtext
  3327                           
  3328                           ;Lab9test.c: 276: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3329  0010C2  0E5A               	movlw	90
  3330  0010C4  6E37               	movwf	drawtext@y,c
  3331  0010C6  0ED1               	movlw	low _PED_NS_Count
  3332  0010C8  6E38               	movwf	drawtext@_text,c
  3333  0010CA  0E00               	movlw	high _PED_NS_Count
  3334  0010CC  6E39               	movwf	drawtext@_text+1,c
  3335  0010CE  0E00               	movlw	0
  3336  0010D0  6E3B               	movwf	drawtext@color+1,c
  3337  0010D2  0E1F               	movlw	31
  3338  0010D4  6E3A               	movwf	drawtext@color,c
  3339  0010D6  0E00               	movlw	0
  3340  0010D8  6E3D               	movwf	drawtext@bg+1,c
  3341  0010DA  0E00               	movlw	0
  3342  0010DC  6E3C               	movwf	drawtext@bg,c
  3343  0010DE  0E02               	movlw	2
  3344  0010E0  6E3E               	movwf	drawtext@size,c
  3345  0010E2  0E02               	movlw	2
  3346  0010E4  ECB9  F016         	call	_drawtext
  3347                           
  3348                           ;Lab9test.c: 279: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3349  0010E8  C064  F00F         	movff	_txt,strcpy@to
  3350  0010EC  C065  F010         	movff	_txt+1,strcpy@to+1
  3351  0010F0  0E85               	movlw	low STR_12
  3352  0010F2  6E11               	movwf	strcpy@from,c
  3353  0010F4  0EFF               	movlw	high STR_12
  3354  0010F6  6E12               	movwf	strcpy@from+1,c
  3355  0010F8  ECA6  F01E         	call	_strcpy	;wreg free
  3356                           
  3357                           ;Lab9test.c: 280: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3358  0010FC  0E8C               	movlw	140
  3359  0010FE  6E37               	movwf	drawtext@y,c
  3360  001100  C064  F038         	movff	_txt,drawtext@_text
  3361  001104  C065  F039         	movff	_txt+1,drawtext@_text+1
  3362  001108  0EFF               	movlw	255
  3363  00110A  6E3B               	movwf	drawtext@color+1,c
  3364  00110C  683A               	setf	drawtext@color,c
  3365  00110E  0E00               	movlw	0
  3366  001110  6E3D               	movwf	drawtext@bg+1,c
  3367  001112  0E00               	movlw	0
  3368  001114  6E3C               	movwf	drawtext@bg,c
  3369  001116  0E01               	movlw	1
  3370  001118  6E3E               	movwf	drawtext@size,c
  3371  00111A  0E01               	movlw	1
  3372  00111C  ECB9  F016         	call	_drawtext
  3373                           
  3374                           ;Lab9test.c: 281: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3375  001120  0E95               	movlw	149
  3376  001122  6E37               	movwf	drawtext@y,c
  3377  001124  0E6F               	movlw	low _SW_EWPED_Txt
  3378  001126  6E38               	movwf	drawtext@_text,c
  3379  001128  0E00               	movlw	high _SW_EWPED_Txt
  3380  00112A  6E39               	movwf	drawtext@_text+1,c
  3381  00112C  0EFF               	movlw	255
  3382  00112E  6E3B               	movwf	drawtext@color+1,c
  3383  001130  683A               	setf	drawtext@color,c
  3384  001132  0E00               	movlw	0
  3385  001134  6E3D               	movwf	drawtext@bg+1,c
  3386  001136  0E00               	movlw	0
  3387  001138  6E3C               	movwf	drawtext@bg,c
  3388  00113A  0E01               	movlw	1
  3389  00113C  6E3E               	movwf	drawtext@size,c
  3390  00113E  0E06               	movlw	6
  3391  001140  ECB9  F016         	call	_drawtext
  3392                           
  3393                           ;Lab9test.c: 282: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3394  001144  0E95               	movlw	149
  3395  001146  6E37               	movwf	drawtext@y,c
  3396  001148  0E6D               	movlw	low _SW_EWLT_Txt
  3397  00114A  6E38               	movwf	drawtext@_text,c
  3398  00114C  0E00               	movlw	high _SW_EWLT_Txt
  3399  00114E  6E39               	movwf	drawtext@_text+1,c
  3400  001150  0EFF               	movlw	255
  3401  001152  6E3B               	movwf	drawtext@color+1,c
  3402  001154  683A               	setf	drawtext@color,c
  3403  001156  0E00               	movlw	0
  3404  001158  6E3D               	movwf	drawtext@bg+1,c
  3405  00115A  0E00               	movlw	0
  3406  00115C  6E3C               	movwf	drawtext@bg,c
  3407  00115E  0E01               	movlw	1
  3408  001160  6E3E               	movwf	drawtext@size,c
  3409  001162  0E20               	movlw	32
  3410  001164  ECB9  F016         	call	_drawtext
  3411                           
  3412                           ;Lab9test.c: 283: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3413  001168  0E95               	movlw	149
  3414  00116A  6E37               	movwf	drawtext@y,c
  3415  00116C  0EDE               	movlw	low _SW_NSPED_Txt
  3416  00116E  6E38               	movwf	drawtext@_text,c
  3417  001170  0E00               	movlw	high _SW_NSPED_Txt
  3418  001172  6E39               	movwf	drawtext@_text+1,c
  3419  001174  0EFF               	movlw	255
  3420  001176  6E3B               	movwf	drawtext@color+1,c
  3421  001178  683A               	setf	drawtext@color,c
  3422  00117A  0E00               	movlw	0
  3423  00117C  6E3D               	movwf	drawtext@bg+1,c
  3424  00117E  0E00               	movlw	0
  3425  001180  6E3C               	movwf	drawtext@bg,c
  3426  001182  0E01               	movlw	1
  3427  001184  6E3E               	movwf	drawtext@size,c
  3428  001186  0E3A               	movlw	58
  3429  001188  ECB9  F016         	call	_drawtext
  3430                           
  3431                           ;Lab9test.c: 284: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3432  00118C  0E95               	movlw	149
  3433  00118E  6E37               	movwf	drawtext@y,c
  3434  001190  0EDC               	movlw	low _SW_NSLT_Txt
  3435  001192  6E38               	movwf	drawtext@_text,c
  3436  001194  0E00               	movlw	high _SW_NSLT_Txt
  3437  001196  6E39               	movwf	drawtext@_text+1,c
  3438  001198  0EFF               	movlw	255
  3439  00119A  6E3B               	movwf	drawtext@color+1,c
  3440  00119C  683A               	setf	drawtext@color,c
  3441  00119E  0E00               	movlw	0
  3442  0011A0  6E3D               	movwf	drawtext@bg+1,c
  3443  0011A2  0E00               	movlw	0
  3444  0011A4  6E3C               	movwf	drawtext@bg,c
  3445  0011A6  0E01               	movlw	1
  3446  0011A8  6E3E               	movwf	drawtext@size,c
  3447  0011AA  0E57               	movlw	87
  3448  0011AC  ECB9  F016         	call	_drawtext
  3449                           
  3450                           ;Lab9test.c: 286: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3451  0011B0  0E95               	movlw	149
  3452  0011B2  6E37               	movwf	drawtext@y,c
  3453  0011B4  0EDA               	movlw	low _SW_MODE_Txt
  3454  0011B6  6E38               	movwf	drawtext@_text,c
  3455  0011B8  0E00               	movlw	high _SW_MODE_Txt
  3456  0011BA  6E39               	movwf	drawtext@_text+1,c
  3457  0011BC  0EFF               	movlw	255
  3458  0011BE  6E3B               	movwf	drawtext@color+1,c
  3459  0011C0  683A               	setf	drawtext@color,c
  3460  0011C2  0E00               	movlw	0
  3461  0011C4  6E3D               	movwf	drawtext@bg+1,c
  3462  0011C6  0E00               	movlw	0
  3463  0011C8  6E3C               	movwf	drawtext@bg,c
  3464  0011CA  0E01               	movlw	1
  3465  0011CC  6E3E               	movwf	drawtext@size,c
  3466  0011CE  0E70               	movlw	112
  3467  0011D0  ECB9  F016         	call	_drawtext
  3468  0011D4  0012               	return		;funcret
  3469  0011D6                     __end_of_Initialize_Screen:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodl	equ	0xFF3
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postdec1	equ	0xFE5
  3480                           fsr1l	equ	0xFE1
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _fillScreen *****************
  3484 ;; Defined at:
  3485 ;;		line 652 in file "ST7735_TFT.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  color           2   33[COMRAM] unsigned int 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;Total ram usage:        2 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    6
  3506 ;; This function calls:
  3507 ;;		_fillRectangle
  3508 ;; This function is called by:
  3509 ;;		_Initialize_Screen
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text4
  3514  003EBC                     __ptext4:
  3515                           	opt stack 0
  3516  003EBC                     _fillScreen:
  3517                           	opt stack 23
  3518                           
  3519                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3520                           
  3521                           ;incstack = 0
  3522  003EBC  0E00               	movlw	0
  3523  003EBE  6E16               	movwf	fillRectangle@y,c
  3524  003EC0  0E80               	movlw	128
  3525  003EC2  6E17               	movwf	fillRectangle@w,c
  3526  003EC4  0EA0               	movlw	160
  3527  003EC6  6E18               	movwf	fillRectangle@h,c
  3528  003EC8  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3529  003ECC  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3530  003ED0  0E00               	movlw	0
  3531  003ED2  EC28  F017         	call	_fillRectangle
  3532  003ED6  0012               	return		;funcret
  3533  003ED8                     __end_of_fillScreen:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodl	equ	0xFF3
  3540                           intcon2	equ	0xFF1
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1l	equ	0xFE1
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _fillRectangle *****************
  3548 ;; Defined at:
  3549 ;;		line 536 in file "ST7735_TFT.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  x               1    wreg     unsigned char 
  3552 ;;  y               1   21[COMRAM] unsigned char 
  3553 ;;  w               1   22[COMRAM] unsigned char 
  3554 ;;  h               1   23[COMRAM] unsigned char 
  3555 ;;  color           2   24[COMRAM] unsigned int 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  x               1   32[COMRAM] unsigned char 
  3558 ;;  lo              1   31[COMRAM] unsigned char 
  3559 ;;  hi              1   30[COMRAM] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;		None               void
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:       12 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    5
  3576 ;; This function calls:
  3577 ;;		_setAddrWindow
  3578 ;;		_spiwrite
  3579 ;; This function is called by:
  3580 ;;		_fillScreen
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text5
  3585  002E50                     __ptext5:
  3586                           	opt stack 0
  3587  002E50                     _fillRectangle:
  3588                           	opt stack 23
  3589                           
  3590                           ;incstack = 0
  3591                           ;fillRectangle@x stored from wreg
  3592  002E50  6E21               	movwf	fillRectangle@x,c
  3593                           
  3594                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3595                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3596  002E52  0E80               	movlw	128
  3597  002E54  6021               	cpfslt	fillRectangle@x,c
  3598  002E56  D069               	goto	l264
  3599  002E58  0E9F               	movlw	159
  3600  002E5A  6416               	cpfsgt	fillRectangle@y,c
  3601  002E5C  D001               	goto	l7253
  3602                           
  3603                           ;ST7735_TFT.c: 540: return;
  3604  002E5E  D065               	goto	l264
  3605  002E60                     l7253:
  3606                           
  3607                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3608  002E60  0EFF               	movlw	255
  3609  002E62  6E1B               	movwf	??_fillRectangle& (0+255),c
  3610  002E64  0EFF               	movlw	255
  3611  002E66  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3612  002E68  5017               	movf	fillRectangle@w,w,c
  3613  002E6A  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3614  002E6E  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3615  002E70  261D               	addwf	??_fillRectangle+2,f,c
  3616  002E72  0E00               	movlw	0
  3617  002E74  221E               	addwfc	??_fillRectangle+3,f,c
  3618  002E76  501B               	movf	??_fillRectangle,w,c
  3619  002E78  261D               	addwf	??_fillRectangle+2,f,c
  3620  002E7A  501C               	movf	??_fillRectangle+1,w,c
  3621  002E7C  221E               	addwfc	??_fillRectangle+3,f,c
  3622  002E7E  BE1E               	btfsc	??_fillRectangle+3,7,c
  3623  002E80  D00A               	goto	l265
  3624  002E82  501E               	movf	??_fillRectangle+3,w,c
  3625  002E84  E104               	bnz	u7360
  3626  002E86  0E80               	movlw	128
  3627  002E88  5C1D               	subwf	??_fillRectangle+2,w,c
  3628  002E8A  A0D8               	btfss	status,0,c
  3629  002E8C  D004               	goto	l265
  3630  002E8E                     u7360:
  3631                           
  3632                           ;ST7735_TFT.c: 542: w = 128 - x;
  3633  002E8E  5021               	movf	fillRectangle@x,w,c
  3634  002E90  0800               	sublw	0
  3635  002E92  0F80               	addlw	128
  3636  002E94  6E17               	movwf	fillRectangle@w,c
  3637  002E96                     l265:
  3638                           
  3639                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3640  002E96  0EFF               	movlw	255
  3641  002E98  6E1B               	movwf	??_fillRectangle& (0+255),c
  3642  002E9A  0EFF               	movlw	255
  3643  002E9C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3644  002E9E  5018               	movf	fillRectangle@h,w,c
  3645  002EA0  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3646  002EA4  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3647  002EA6  261D               	addwf	??_fillRectangle+2,f,c
  3648  002EA8  0E00               	movlw	0
  3649  002EAA  221E               	addwfc	??_fillRectangle+3,f,c
  3650  002EAC  501B               	movf	??_fillRectangle,w,c
  3651  002EAE  261D               	addwf	??_fillRectangle+2,f,c
  3652  002EB0  501C               	movf	??_fillRectangle+1,w,c
  3653  002EB2  221E               	addwfc	??_fillRectangle+3,f,c
  3654  002EB4  BE1E               	btfsc	??_fillRectangle+3,7,c
  3655  002EB6  D00B               	goto	l7259
  3656  002EB8  501E               	movf	??_fillRectangle+3,w,c
  3657  002EBA  E104               	bnz	u7370
  3658  002EBC  0EA0               	movlw	160
  3659  002EBE  5C1D               	subwf	??_fillRectangle+2,w,c
  3660  002EC0  A0D8               	btfss	status,0,c
  3661  002EC2  D005               	goto	l7259
  3662  002EC4                     u7370:
  3663                           
  3664                           ;ST7735_TFT.c: 544: h = 160 - y;
  3665  002EC4  5016               	movf	fillRectangle@y,w,c
  3666  002EC6  0800               	sublw	0
  3667  002EC8  0FA0               	addlw	160
  3668  002ECA  6E18               	movwf	fillRectangle@h,c
  3669  002ECC  D000               	goto	l7259
  3670  002ECE                     l7259:
  3671                           
  3672                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3673  002ECE  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3674  002ED2  5021               	movf	fillRectangle@x,w,c
  3675  002ED4  2417               	addwf	fillRectangle@w,w,c
  3676  002ED6  6E1B               	movwf	??_fillRectangle& (0+255),c
  3677  002ED8  041B               	decf	??_fillRectangle,w,c
  3678  002EDA  6E13               	movwf	setAddrWindow@x1,c
  3679  002EDC  5016               	movf	fillRectangle@y,w,c
  3680  002EDE  2418               	addwf	fillRectangle@h,w,c
  3681  002EE0  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3682  002EE2  041C               	decf	??_fillRectangle+1,w,c
  3683  002EE4  6E14               	movwf	setAddrWindow@y1,c
  3684  002EE6  5021               	movf	fillRectangle@x,w,c
  3685  002EE8  EC33  F01D         	call	_setAddrWindow
  3686                           
  3687                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3688  002EEC  501A               	movf	fillRectangle@color+1,w,c
  3689  002EEE  6E1F               	movwf	fillRectangle@hi,c
  3690  002EF0  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3691                           
  3692                           ;ST7735_TFT.c: 547: PORTCbits.RC2 = 1;
  3693  002EF4  8482               	bsf	3970,2,c	;volatile
  3694                           
  3695                           ;ST7735_TFT.c: 548: PORTCbits.RC4 = 0;
  3696  002EF6  9882               	bcf	3970,4,c	;volatile
  3697                           
  3698                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3699  002EF8  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3700  002EFC                     l7271:
  3701  002EFC  5016               	movf	fillRectangle@y,w,c
  3702  002EFE  B4D8               	btfsc	status,2,c
  3703  002F00  D013               	goto	l268
  3704  002F02  D001               	goto	l267
  3705  002F04  D011               	goto	l268
  3706  002F06                     l267:
  3707                           
  3708                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3709  002F06  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3710  002F0A                     l7275:
  3711  002F0A  5021               	movf	fillRectangle@x,w,c
  3712  002F0C  B4D8               	btfsc	status,2,c
  3713  002F0E  D00A               	goto	l7285
  3714  002F10  D001               	goto	l7279
  3715  002F12  D008               	goto	l7285
  3716  002F14                     l7279:
  3717                           
  3718                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3719  002F14  501F               	movf	fillRectangle@hi,w,c
  3720  002F16  ECA6  F01F         	call	_spiwrite
  3721                           
  3722                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3723  002F1A  5020               	movf	fillRectangle@lo,w,c
  3724  002F1C  ECA6  F01F         	call	_spiwrite
  3725  002F20  0621               	decf	fillRectangle@x,f,c
  3726  002F22  D7F3               	goto	l7275
  3727  002F24                     l7285:
  3728  002F24  0616               	decf	fillRectangle@y,f,c
  3729  002F26  D7EA               	goto	l7271
  3730  002F28                     l268:
  3731                           
  3732                           ;ST7735_TFT.c: 554: }
  3733                           ;ST7735_TFT.c: 555: }
  3734                           ;ST7735_TFT.c: 556: PORTCbits.RC4 = 1;
  3735  002F28  8882               	bsf	3970,4,c	;volatile
  3736  002F2A                     l264:
  3737  002F2A  0012               	return		;funcret
  3738  002F2C                     __end_of_fillRectangle:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           prodl	equ	0xFF3
  3745                           intcon2	equ	0xFF1
  3746                           postinc0	equ	0xFEE
  3747                           wreg	equ	0xFE8
  3748                           postdec1	equ	0xFE5
  3749                           fsr1l	equ	0xFE1
  3750                           status	equ	0xFD8
  3751                           
  3752 ;; *************** function _drawRect *****************
  3753 ;; Defined at:
  3754 ;;		line 718 in file "ST7735_TFT.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  x               2   32[COMRAM] unsigned int 
  3757 ;;  y               2   34[COMRAM] unsigned int 
  3758 ;;  w               2   36[COMRAM] unsigned int 
  3759 ;;  h               2   38[COMRAM] unsigned int 
  3760 ;;  color           2   40[COMRAM] unsigned int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;		None               void
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3772 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;Total ram usage:       11 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    6
  3779 ;; This function calls:
  3780 ;;		_drawFastHLine
  3781 ;;		_drawFastVLine
  3782 ;; This function is called by:
  3783 ;;		_Initialize_Screen
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text6
  3788  0037F2                     __ptext6:
  3789                           	opt stack 0
  3790  0037F2                     _drawRect:
  3791                           	opt stack 23
  3792                           
  3793                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3794                           
  3795                           ;incstack = 0
  3796  0037F2  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3797  0037F6  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3798  0037FA  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3799  0037FE  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3800  003802  5021               	movf	drawRect@x,w,c
  3801  003804  ECF9  F019         	call	_drawFastHLine
  3802                           
  3803                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3804  003808  5023               	movf	drawRect@y,w,c
  3805  00380A  2427               	addwf	drawRect@h,w,c
  3806  00380C  6E2B               	movwf	??_drawRect& (0+255),c
  3807  00380E  042B               	decf	??_drawRect,w,c
  3808  003810  6E16               	movwf	drawFastHLine@y,c
  3809  003812  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3810  003816  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3811  00381A  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3812  00381E  5021               	movf	drawRect@x,w,c
  3813  003820  ECF9  F019         	call	_drawFastHLine
  3814                           
  3815                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3816  003824  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3817  003828  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3818  00382C  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3819  003830  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3820  003834  5021               	movf	drawRect@x,w,c
  3821  003836  EC3D  F01A         	call	_drawFastVLine
  3822                           
  3823                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3824  00383A  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3825  00383E  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3826  003842  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3827  003846  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3828  00384A  5021               	movf	drawRect@x,w,c
  3829  00384C  2425               	addwf	drawRect@w,w,c
  3830  00384E  6E2B               	movwf	??_drawRect& (0+255),c
  3831  003850  042B               	decf	??_drawRect,w,c
  3832  003852  EC3D  F01A         	call	_drawFastVLine
  3833  003856  0012               	return		;funcret
  3834  003858                     __end_of_drawRect:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           prodl	equ	0xFF3
  3841                           intcon2	equ	0xFF1
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1l	equ	0xFE1
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _drawFastHLine *****************
  3849 ;; Defined at:
  3850 ;;		line 657 in file "ST7735_TFT.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  x               1    wreg     unsigned char 
  3853 ;;  y               1   21[COMRAM] unsigned char 
  3854 ;;  w               1   22[COMRAM] unsigned char 
  3855 ;;  color           2   23[COMRAM] unsigned int 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  x               1   31[COMRAM] unsigned char 
  3858 ;;  lo              1   30[COMRAM] unsigned char 
  3859 ;;  hi              1   29[COMRAM] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;		None               void
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:       11 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    5
  3876 ;; This function calls:
  3877 ;;		_setAddrWindow
  3878 ;;		_spiwrite
  3879 ;; This function is called by:
  3880 ;;		_drawRect
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text7
  3885  0033F2                     __ptext7:
  3886                           	opt stack 0
  3887  0033F2                     _drawFastHLine:
  3888                           	opt stack 23
  3889                           
  3890                           ;incstack = 0
  3891                           ;drawFastHLine@x stored from wreg
  3892  0033F2  6E20               	movwf	drawFastHLine@x,c
  3893                           
  3894                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3895                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3896  0033F4  0E80               	movlw	128
  3897  0033F6  6020               	cpfslt	drawFastHLine@x,c
  3898  0033F8  D03F               	goto	l309
  3899  0033FA  0E9F               	movlw	159
  3900  0033FC  6416               	cpfsgt	drawFastHLine@y,c
  3901  0033FE  D001               	goto	l7293
  3902                           
  3903                           ;ST7735_TFT.c: 661: return;
  3904  003400  D03B               	goto	l309
  3905  003402                     l7293:
  3906                           
  3907                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3908  003402  0EFF               	movlw	255
  3909  003404  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3910  003406  0EFF               	movlw	255
  3911  003408  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3912  00340A  5017               	movf	drawFastHLine@w,w,c
  3913  00340C  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3914  003410  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3915  003412  261C               	addwf	??_drawFastHLine+2,f,c
  3916  003414  0E00               	movlw	0
  3917  003416  221D               	addwfc	??_drawFastHLine+3,f,c
  3918  003418  501A               	movf	??_drawFastHLine,w,c
  3919  00341A  261C               	addwf	??_drawFastHLine+2,f,c
  3920  00341C  501B               	movf	??_drawFastHLine+1,w,c
  3921  00341E  221D               	addwfc	??_drawFastHLine+3,f,c
  3922  003420  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3923  003422  D00B               	goto	l7297
  3924  003424  501D               	movf	??_drawFastHLine+3,w,c
  3925  003426  E104               	bnz	u7440
  3926  003428  0E80               	movlw	128
  3927  00342A  5C1C               	subwf	??_drawFastHLine+2,w,c
  3928  00342C  A0D8               	btfss	status,0,c
  3929  00342E  D005               	goto	l7297
  3930  003430                     u7440:
  3931                           
  3932                           ;ST7735_TFT.c: 663: w = 128 - x;
  3933  003430  5020               	movf	drawFastHLine@x,w,c
  3934  003432  0800               	sublw	0
  3935  003434  0F80               	addlw	128
  3936  003436  6E17               	movwf	drawFastHLine@w,c
  3937  003438  D000               	goto	l7297
  3938  00343A                     l7297:
  3939                           
  3940                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3941  00343A  5019               	movf	drawFastHLine@color+1,w,c
  3942  00343C  6E1E               	movwf	drawFastHLine@hi,c
  3943  00343E  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3944                           
  3945                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3946  003442  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3947  003446  5020               	movf	drawFastHLine@x,w,c
  3948  003448  2417               	addwf	drawFastHLine@w,w,c
  3949  00344A  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3950  00344C  041A               	decf	??_drawFastHLine,w,c
  3951  00344E  6E13               	movwf	setAddrWindow@x1,c
  3952  003450  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3953  003454  5020               	movf	drawFastHLine@x,w,c
  3954  003456  EC33  F01D         	call	_setAddrWindow
  3955                           
  3956                           ;ST7735_TFT.c: 666: PORTCbits.RC2 = 1;
  3957  00345A  8482               	bsf	3970,2,c	;volatile
  3958                           
  3959                           ;ST7735_TFT.c: 667: PORTCbits.RC4 = 0;
  3960  00345C  9882               	bcf	3970,4,c	;volatile
  3961                           
  3962                           ;ST7735_TFT.c: 669: while (w--) {
  3963  00345E  D007               	goto	l7309
  3964  003460                     l7307:
  3965                           
  3966                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3967  003460  501E               	movf	drawFastHLine@hi,w,c
  3968  003462  ECA6  F01F         	call	_spiwrite
  3969                           
  3970                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3971  003466  501F               	movf	drawFastHLine@lo,w,c
  3972  003468  ECA6  F01F         	call	_spiwrite
  3973  00346C  D000               	goto	l7309
  3974  00346E                     l7309:
  3975  00346E  0617               	decf	drawFastHLine@w,f,c
  3976  003470  2817               	incf	drawFastHLine@w,w,c
  3977  003472  A4D8               	btfss	status,2,c
  3978  003474  D7F5               	goto	l7307
  3979                           
  3980                           ;ST7735_TFT.c: 672: }
  3981                           ;ST7735_TFT.c: 673: PORTCbits.RC4 = 1;
  3982  003476  8882               	bsf	3970,4,c	;volatile
  3983  003478                     l309:
  3984  003478  0012               	return		;funcret
  3985  00347A                     __end_of_drawFastHLine:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodl	equ	0xFF3
  3992                           intcon2	equ	0xFF1
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1l	equ	0xFE1
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _TFT_GreenTab_Initialize *****************
  4000 ;; Defined at:
  4001 ;;		line 677 in file "ST7735_TFT.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    5
  4022 ;; This function calls:
  4023 ;;		_Rcmd1
  4024 ;;		_Rcmd2red
  4025 ;;		_Rcmd3
  4026 ;;		_write_command
  4027 ;;		_write_data
  4028 ;; This function is called by:
  4029 ;;		_Initialize_Screen
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text8
  4034  003DAE                     __ptext8:
  4035                           	opt stack 0
  4036  003DAE                     _TFT_GreenTab_Initialize:
  4037                           	opt stack 24
  4038                           
  4039                           ;ST7735_TFT.c: 679: PORTCbits.RC4 = 1;
  4040                           
  4041                           ;incstack = 0
  4042  003DAE  8882               	bsf	3970,4,c	;volatile
  4043                           
  4044                           ;ST7735_TFT.c: 680: PORTCbits.RC2 = 0;
  4045  003DB0  9482               	bcf	3970,2,c	;volatile
  4046                           
  4047                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  4048  003DB2  0E80               	movlw	128
  4049  003DB4  6EC7               	movwf	4039,c	;volatile
  4050                           
  4051                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  4052  003DB6  0E30               	movlw	48
  4053  003DB8  6EC6               	movwf	4038,c	;volatile
  4054                           
  4055                           ;ST7735_TFT.c: 686: Rcmd1();
  4056  003DBA  ECD7  F012         	call	_Rcmd1	;wreg free
  4057                           
  4058                           ;ST7735_TFT.c: 687: Rcmd2red();
  4059  003DBE  EC31  F01E         	call	_Rcmd2red	;wreg free
  4060                           
  4061                           ;ST7735_TFT.c: 688: Rcmd3();
  4062  003DC2  ECE8  F014         	call	_Rcmd3	;wreg free
  4063                           
  4064                           ;ST7735_TFT.c: 689: write_command(0x36);
  4065  003DC6  0E36               	movlw	54
  4066  003DC8  ECCA  F01F         	call	_write_command
  4067                           
  4068                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4069  003DCC  0EC0               	movlw	192
  4070  003DCE  ECC2  F01F         	call	_write_data
  4071                           
  4072                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4073  003DD2  0E01               	movlw	1
  4074  003DD4  6E68               	movwf	__tft_type,c
  4075  003DD6  0012               	return		;funcret
  4076  003DD8                     __end_of_TFT_GreenTab_Initialize:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodl	equ	0xFF3
  4083                           intcon2	equ	0xFF1
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           postdec1	equ	0xFE5
  4087                           fsr1l	equ	0xFE1
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _Rcmd3 *****************
  4091 ;; Defined at:
  4092 ;;		line 371 in file "ST7735_TFT.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    4
  4113 ;; This function calls:
  4114 ;;		_delay_ms
  4115 ;;		_write_command
  4116 ;;		_write_data
  4117 ;; This function is called by:
  4118 ;;		_TFT_GreenTab_Initialize
  4119 ;;		_TFT_BlackTab_Initialize
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text9
  4124  0029D0                     __ptext9:
  4125                           	opt stack 0
  4126  0029D0                     _Rcmd3:
  4127                           	opt stack 24
  4128                           
  4129                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4130                           
  4131                           ;incstack = 0
  4132  0029D0  0EE0               	movlw	224
  4133  0029D2  ECCA  F01F         	call	_write_command
  4134                           
  4135                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4136  0029D6  0E02               	movlw	2
  4137  0029D8  ECC2  F01F         	call	_write_data
  4138  0029DC  0E1C               	movlw	28
  4139  0029DE  ECC2  F01F         	call	_write_data
  4140  0029E2  0E07               	movlw	7
  4141  0029E4  ECC2  F01F         	call	_write_data
  4142  0029E8  0E12               	movlw	18
  4143  0029EA  ECC2  F01F         	call	_write_data
  4144                           
  4145                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4146  0029EE  0E37               	movlw	55
  4147  0029F0  ECC2  F01F         	call	_write_data
  4148  0029F4  0E32               	movlw	50
  4149  0029F6  ECC2  F01F         	call	_write_data
  4150  0029FA  0E29               	movlw	41
  4151  0029FC  ECC2  F01F         	call	_write_data
  4152  002A00  0E2D               	movlw	45
  4153  002A02  ECC2  F01F         	call	_write_data
  4154                           
  4155                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4156  002A06  0E29               	movlw	41
  4157  002A08  ECC2  F01F         	call	_write_data
  4158  002A0C  0E25               	movlw	37
  4159  002A0E  ECC2  F01F         	call	_write_data
  4160  002A12  0E2B               	movlw	43
  4161  002A14  ECC2  F01F         	call	_write_data
  4162  002A18  0E39               	movlw	57
  4163  002A1A  ECC2  F01F         	call	_write_data
  4164                           
  4165                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4166  002A1E  0E00               	movlw	0
  4167  002A20  ECC2  F01F         	call	_write_data
  4168  002A24  0E01               	movlw	1
  4169  002A26  ECC2  F01F         	call	_write_data
  4170  002A2A  0E03               	movlw	3
  4171  002A2C  ECC2  F01F         	call	_write_data
  4172  002A30  0E10               	movlw	16
  4173  002A32  ECC2  F01F         	call	_write_data
  4174                           
  4175                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4176  002A36  0EE1               	movlw	225
  4177  002A38  ECCA  F01F         	call	_write_command
  4178                           
  4179                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4180  002A3C  0E03               	movlw	3
  4181  002A3E  ECC2  F01F         	call	_write_data
  4182  002A42  0E1D               	movlw	29
  4183  002A44  ECC2  F01F         	call	_write_data
  4184  002A48  0E07               	movlw	7
  4185  002A4A  ECC2  F01F         	call	_write_data
  4186  002A4E  0E06               	movlw	6
  4187  002A50  ECC2  F01F         	call	_write_data
  4188                           
  4189                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4190  002A54  0E2E               	movlw	46
  4191  002A56  ECC2  F01F         	call	_write_data
  4192  002A5A  0E2C               	movlw	44
  4193  002A5C  ECC2  F01F         	call	_write_data
  4194  002A60  0E29               	movlw	41
  4195  002A62  ECC2  F01F         	call	_write_data
  4196  002A66  0E2D               	movlw	45
  4197  002A68  ECC2  F01F         	call	_write_data
  4198                           
  4199                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4200  002A6C  0E2E               	movlw	46
  4201  002A6E  ECC2  F01F         	call	_write_data
  4202  002A72  0E2E               	movlw	46
  4203  002A74  ECC2  F01F         	call	_write_data
  4204  002A78  0E37               	movlw	55
  4205  002A7A  ECC2  F01F         	call	_write_data
  4206  002A7E  0E3F               	movlw	63
  4207  002A80  ECC2  F01F         	call	_write_data
  4208                           
  4209                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4210  002A84  0E00               	movlw	0
  4211  002A86  ECC2  F01F         	call	_write_data
  4212  002A8A  0E00               	movlw	0
  4213  002A8C  ECC2  F01F         	call	_write_data
  4214  002A90  0E02               	movlw	2
  4215  002A92  ECC2  F01F         	call	_write_data
  4216  002A96  0E10               	movlw	16
  4217  002A98  ECC2  F01F         	call	_write_data
  4218                           
  4219                           ;ST7735_TFT.c: 383: write_command(0x13);
  4220  002A9C  0E13               	movlw	19
  4221  002A9E  ECCA  F01F         	call	_write_command
  4222                           
  4223                           ;ST7735_TFT.c: 384: delay_ms(10);
  4224  002AA2  0E00               	movlw	0
  4225  002AA4  6E24               	movwf	delay_ms@ms+1,c
  4226  002AA6  0E0A               	movlw	10
  4227  002AA8  6E23               	movwf	delay_ms@ms,c
  4228  002AAA  ECE1  F01C         	call	_delay_ms	;wreg free
  4229                           
  4230                           ;ST7735_TFT.c: 385: write_command(0x29);
  4231  002AAE  0E29               	movlw	41
  4232  002AB0  ECCA  F01F         	call	_write_command
  4233                           
  4234                           ;ST7735_TFT.c: 386: delay_ms(100);
  4235  002AB4  0E00               	movlw	0
  4236  002AB6  6E24               	movwf	delay_ms@ms+1,c
  4237  002AB8  0E64               	movlw	100
  4238  002ABA  6E23               	movwf	delay_ms@ms,c
  4239  002ABC  ECE1  F01C         	call	_delay_ms	;wreg free
  4240  002AC0  0012               	return		;funcret
  4241  002AC2                     __end_of_Rcmd3:
  4242                           	opt stack 0
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           prodl	equ	0xFF3
  4248                           intcon2	equ	0xFF1
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           fsr1l	equ	0xFE1
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _Rcmd2red *****************
  4256 ;; Defined at:
  4257 ;;		line 361 in file "ST7735_TFT.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;		None               void
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        0 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    4
  4278 ;; This function calls:
  4279 ;;		_write_command
  4280 ;;		_write_data
  4281 ;; This function is called by:
  4282 ;;		_TFT_GreenTab_Initialize
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text10
  4287  003C62                     __ptext10:
  4288                           	opt stack 0
  4289  003C62                     _Rcmd2red:
  4290                           	opt stack 24
  4291                           
  4292                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4293                           
  4294                           ;incstack = 0
  4295  003C62  0E2A               	movlw	42
  4296  003C64  ECCA  F01F         	call	_write_command
  4297                           
  4298                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4299  003C68  0E00               	movlw	0
  4300  003C6A  ECC2  F01F         	call	_write_data
  4301  003C6E  0E00               	movlw	0
  4302  003C70  ECC2  F01F         	call	_write_data
  4303                           
  4304                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4305  003C74  0E00               	movlw	0
  4306  003C76  ECC2  F01F         	call	_write_data
  4307  003C7A  0E7F               	movlw	127
  4308  003C7C  ECC2  F01F         	call	_write_data
  4309                           
  4310                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4311  003C80  0E2B               	movlw	43
  4312  003C82  ECCA  F01F         	call	_write_command
  4313                           
  4314                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4315  003C86  0E00               	movlw	0
  4316  003C88  ECC2  F01F         	call	_write_data
  4317  003C8C  0E00               	movlw	0
  4318  003C8E  ECC2  F01F         	call	_write_data
  4319                           
  4320                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4321  003C92  0E00               	movlw	0
  4322  003C94  ECC2  F01F         	call	_write_data
  4323  003C98  0E9F               	movlw	159
  4324  003C9A  ECC2  F01F         	call	_write_data
  4325  003C9E  0012               	return		;funcret
  4326  003CA0                     __end_of_Rcmd2red:
  4327                           	opt stack 0
  4328                           tblptru	equ	0xFF8
  4329                           tblptrh	equ	0xFF7
  4330                           tblptrl	equ	0xFF6
  4331                           tablat	equ	0xFF5
  4332                           prodl	equ	0xFF3
  4333                           intcon2	equ	0xFF1
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postdec1	equ	0xFE5
  4337                           fsr1l	equ	0xFE1
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _Rcmd1 *****************
  4341 ;; Defined at:
  4342 ;;		line 314 in file "ST7735_TFT.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;		None
  4347 ;; Return value:  Size  Location     Type
  4348 ;;		None               void
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;Total ram usage:        0 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    4
  4363 ;; This function calls:
  4364 ;;		_delay_ms
  4365 ;;		_write_command
  4366 ;;		_write_data
  4367 ;; This function is called by:
  4368 ;;		_TFT_GreenTab_Initialize
  4369 ;;		_TFT_BlackTab_Initialize
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text11
  4374  0025AE                     __ptext11:
  4375                           	opt stack 0
  4376  0025AE                     _Rcmd1:
  4377                           	opt stack 24
  4378                           
  4379                           ;ST7735_TFT.c: 316: write_command(0x01);
  4380                           
  4381                           ;incstack = 0
  4382  0025AE  0E01               	movlw	1
  4383  0025B0  ECCA  F01F         	call	_write_command
  4384                           
  4385                           ;ST7735_TFT.c: 317: delay_ms(150);
  4386  0025B4  0E00               	movlw	0
  4387  0025B6  6E24               	movwf	delay_ms@ms+1,c
  4388  0025B8  0E96               	movlw	150
  4389  0025BA  6E23               	movwf	delay_ms@ms,c
  4390  0025BC  ECE1  F01C         	call	_delay_ms	;wreg free
  4391                           
  4392                           ;ST7735_TFT.c: 318: write_command(0x11);
  4393  0025C0  0E11               	movlw	17
  4394  0025C2  ECCA  F01F         	call	_write_command
  4395                           
  4396                           ;ST7735_TFT.c: 319: delay_ms(500);
  4397  0025C6  0E01               	movlw	1
  4398  0025C8  6E24               	movwf	delay_ms@ms+1,c
  4399  0025CA  0EF4               	movlw	244
  4400  0025CC  6E23               	movwf	delay_ms@ms,c
  4401  0025CE  ECE1  F01C         	call	_delay_ms	;wreg free
  4402                           
  4403                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4404  0025D2  0EB1               	movlw	177
  4405  0025D4  ECCA  F01F         	call	_write_command
  4406                           
  4407                           ;ST7735_TFT.c: 321: write_data(0x01);
  4408  0025D8  0E01               	movlw	1
  4409  0025DA  ECC2  F01F         	call	_write_data
  4410                           
  4411                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4412  0025DE  0E2C               	movlw	44
  4413  0025E0  ECC2  F01F         	call	_write_data
  4414                           
  4415                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4416  0025E4  0E2D               	movlw	45
  4417  0025E6  ECC2  F01F         	call	_write_data
  4418                           
  4419                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4420  0025EA  0EB2               	movlw	178
  4421  0025EC  ECCA  F01F         	call	_write_command
  4422                           
  4423                           ;ST7735_TFT.c: 325: write_data(0x01);
  4424  0025F0  0E01               	movlw	1
  4425  0025F2  ECC2  F01F         	call	_write_data
  4426                           
  4427                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4428  0025F6  0E2C               	movlw	44
  4429  0025F8  ECC2  F01F         	call	_write_data
  4430                           
  4431                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4432  0025FC  0E2D               	movlw	45
  4433  0025FE  ECC2  F01F         	call	_write_data
  4434                           
  4435                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4436  002602  0EB3               	movlw	179
  4437  002604  ECCA  F01F         	call	_write_command
  4438                           
  4439                           ;ST7735_TFT.c: 329: write_data(0x01);
  4440  002608  0E01               	movlw	1
  4441  00260A  ECC2  F01F         	call	_write_data
  4442                           
  4443                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4444  00260E  0E2C               	movlw	44
  4445  002610  ECC2  F01F         	call	_write_data
  4446                           
  4447                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4448  002614  0E2D               	movlw	45
  4449  002616  ECC2  F01F         	call	_write_data
  4450                           
  4451                           ;ST7735_TFT.c: 332: write_data(0x01);
  4452  00261A  0E01               	movlw	1
  4453  00261C  ECC2  F01F         	call	_write_data
  4454                           
  4455                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4456  002620  0E2C               	movlw	44
  4457  002622  ECC2  F01F         	call	_write_data
  4458                           
  4459                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4460  002626  0E2D               	movlw	45
  4461  002628  ECC2  F01F         	call	_write_data
  4462                           
  4463                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4464  00262C  0EB4               	movlw	180
  4465  00262E  ECCA  F01F         	call	_write_command
  4466                           
  4467                           ;ST7735_TFT.c: 336: write_data(0x07);
  4468  002632  0E07               	movlw	7
  4469  002634  ECC2  F01F         	call	_write_data
  4470                           
  4471                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4472  002638  0EC0               	movlw	192
  4473  00263A  ECCA  F01F         	call	_write_command
  4474                           
  4475                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4476  00263E  0EA2               	movlw	162
  4477  002640  ECC2  F01F         	call	_write_data
  4478                           
  4479                           ;ST7735_TFT.c: 339: write_data(0x02);
  4480  002644  0E02               	movlw	2
  4481  002646  ECC2  F01F         	call	_write_data
  4482                           
  4483                           ;ST7735_TFT.c: 340: write_data(0x84);
  4484  00264A  0E84               	movlw	132
  4485  00264C  ECC2  F01F         	call	_write_data
  4486                           
  4487                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4488  002650  0EC1               	movlw	193
  4489  002652  ECCA  F01F         	call	_write_command
  4490                           
  4491                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4492  002656  0EC5               	movlw	197
  4493  002658  ECC2  F01F         	call	_write_data
  4494                           
  4495                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4496  00265C  0EC2               	movlw	194
  4497  00265E  ECCA  F01F         	call	_write_command
  4498                           
  4499                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4500  002662  0E0A               	movlw	10
  4501  002664  ECC2  F01F         	call	_write_data
  4502                           
  4503                           ;ST7735_TFT.c: 345: write_data(0x00);
  4504  002668  0E00               	movlw	0
  4505  00266A  ECC2  F01F         	call	_write_data
  4506                           
  4507                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4508  00266E  0EC3               	movlw	195
  4509  002670  ECCA  F01F         	call	_write_command
  4510                           
  4511                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4512  002674  0E8A               	movlw	138
  4513  002676  ECC2  F01F         	call	_write_data
  4514                           
  4515                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4516  00267A  0E2A               	movlw	42
  4517  00267C  ECC2  F01F         	call	_write_data
  4518                           
  4519                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4520  002680  0EC4               	movlw	196
  4521  002682  ECCA  F01F         	call	_write_command
  4522                           
  4523                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4524  002686  0E8A               	movlw	138
  4525  002688  ECC2  F01F         	call	_write_data
  4526                           
  4527                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4528  00268C  0EEE               	movlw	238
  4529  00268E  ECC2  F01F         	call	_write_data
  4530                           
  4531                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4532  002692  0EC5               	movlw	197
  4533  002694  ECCA  F01F         	call	_write_command
  4534                           
  4535                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4536  002698  0E0E               	movlw	14
  4537  00269A  ECC2  F01F         	call	_write_data
  4538                           
  4539                           ;ST7735_TFT.c: 354: write_command(0x20);
  4540  00269E  0E20               	movlw	32
  4541  0026A0  ECCA  F01F         	call	_write_command
  4542                           
  4543                           ;ST7735_TFT.c: 355: write_command(0x36);
  4544  0026A4  0E36               	movlw	54
  4545  0026A6  ECCA  F01F         	call	_write_command
  4546                           
  4547                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4548  0026AA  0EC8               	movlw	200
  4549  0026AC  ECC2  F01F         	call	_write_data
  4550                           
  4551                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4552  0026B0  0E3A               	movlw	58
  4553  0026B2  ECCA  F01F         	call	_write_command
  4554                           
  4555                           ;ST7735_TFT.c: 358: write_data(0x05);
  4556  0026B6  0E05               	movlw	5
  4557  0026B8  ECC2  F01F         	call	_write_data
  4558  0026BC  0012               	return		;funcret
  4559  0026BE                     __end_of_Rcmd1:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodl	equ	0xFF3
  4566                           intcon2	equ	0xFF1
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1l	equ	0xFE1
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _LCD_Reset *****************
  4574 ;; Defined at:
  4575 ;;		line 250 in file "ST7735_TFT.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;		None               void
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    4
  4596 ;; This function calls:
  4597 ;;		_delay_ms
  4598 ;; This function is called by:
  4599 ;;		_Initialize_Screen
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text12
  4604  003F60                     __ptext12:
  4605                           	opt stack 0
  4606  003F60                     _LCD_Reset:
  4607                           	opt stack 25
  4608                           
  4609                           ;ST7735_TFT.c: 252: PORTCbits.RC1 = 0;
  4610                           
  4611                           ;incstack = 0
  4612  003F60  9282               	bcf	3970,1,c	;volatile
  4613                           
  4614                           ;ST7735_TFT.c: 253: delay_ms(100);
  4615  003F62  0E00               	movlw	0
  4616  003F64  6E24               	movwf	delay_ms@ms+1,c
  4617  003F66  0E64               	movlw	100
  4618  003F68  6E23               	movwf	delay_ms@ms,c
  4619  003F6A  ECE1  F01C         	call	_delay_ms	;wreg free
  4620                           
  4621                           ;ST7735_TFT.c: 254: PORTCbits.RC1 = 1;
  4622  003F6E  8282               	bsf	3970,1,c	;volatile
  4623  003F70  0012               	return		;funcret
  4624  003F72                     __end_of_LCD_Reset:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodl	equ	0xFF3
  4631                           intcon2	equ	0xFF1
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           postdec1	equ	0xFE5
  4635                           fsr1l	equ	0xFE1
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _delay_ms *****************
  4639 ;; Defined at:
  4640 ;;		line 97 in file "ST7735_TFT.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  ms              2   34[COMRAM] int 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  count           2   38[COMRAM] int 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        6 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    3
  4661 ;; This function calls:
  4662 ;;		___wmul
  4663 ;; This function is called by:
  4664 ;;		_LCD_Reset
  4665 ;;		_Rcmd1
  4666 ;;		_Rcmd3
  4667 ;;		_Bcmd
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text13
  4672  0039C2                     __ptext13:
  4673                           	opt stack 0
  4674  0039C2                     _delay_ms:
  4675                           	opt stack 24
  4676                           
  4677                           ;ST7735_TFT.c: 103: int count;
  4678                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4679                           
  4680                           ;incstack = 0
  4681  0039C2  C023  F01D         	movff	delay_ms@ms,___wmul@multiplier
  4682  0039C6  C024  F01E         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4683  0039CA  0E00               	movlw	0
  4684  0039CC  6E20               	movwf	___wmul@multiplicand+1,c
  4685  0039CE  0EFA               	movlw	250
  4686  0039D0  6E1F               	movwf	___wmul@multiplicand,c
  4687  0039D2  EC01  F01F         	call	___wmul	;wreg free
  4688  0039D6  C01D  F027         	movff	?___wmul,delay_ms@count
  4689  0039DA  C01E  F028         	movff	?___wmul+1,delay_ms@count+1
  4690                           
  4691                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4692  0039DE  C027  F025         	movff	delay_ms@count,??_delay_ms
  4693  0039E2  C028  F026         	movff	delay_ms@count+1,??_delay_ms+1
  4694  0039E6  1E25               	comf	??_delay_ms,f,c
  4695  0039E8  1E26               	comf	??_delay_ms+1,f,c
  4696  0039EA  4A25               	infsnz	??_delay_ms,f,c
  4697  0039EC  2A26               	incf	??_delay_ms+1,f,c
  4698  0039EE  0EFF               	movlw	255
  4699  0039F0  2425               	addwf	??_delay_ms,w,c
  4700  0039F2  6E27               	movwf	delay_ms@count,c
  4701  0039F4  0EFF               	movlw	255
  4702  0039F6  2026               	addwfc	??_delay_ms+1,w,c
  4703  0039F8  6E28               	movwf	delay_ms@count+1,c
  4704                           
  4705                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4706  0039FA  0EB8               	movlw	184
  4707  0039FC  6EB1               	movwf	4017,c	;volatile
  4708                           
  4709                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4710  0039FE  C027  FFD6         	movff	delay_ms@count,4054	;volatile
  4711                           
  4712                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4713  003A02  5028               	movf	delay_ms@count+1,w,c
  4714  003A04  6ED7               	movwf	4055,c	;volatile
  4715                           
  4716                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4717  003A06  92A1               	bcf	4001,1,c	;volatile
  4718                           
  4719                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4720  003A08  80B1               	bsf	4017,0,c	;volatile
  4721                           
  4722                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4723  003A0A  D000               	goto	l151
  4724  003A0C                     l151:
  4725  003A0C  A2A1               	btfss	4001,1,c	;volatile
  4726  003A0E  D7FE               	goto	l151
  4727                           
  4728                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4729  003A10  90B1               	bcf	4017,0,c	;volatile
  4730  003A12  0012               	return		;funcret
  4731  003A14                     __end_of_delay_ms:
  4732                           	opt stack 0
  4733                           tblptru	equ	0xFF8
  4734                           tblptrh	equ	0xFF7
  4735                           tblptrl	equ	0xFF6
  4736                           tablat	equ	0xFF5
  4737                           prodl	equ	0xFF3
  4738                           intcon2	equ	0xFF1
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           postdec1	equ	0xFE5
  4742                           fsr1l	equ	0xFE1
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function _Do_Flashing *****************
  4746 ;; Defined at:
  4747 ;;		line 856 in file "Lab9test.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        0 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:   11
  4768 ;; This function calls:
  4769 ;;		_WAIT_1_SEC
  4770 ;; This function is called by:
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text14
  4776  00391A                     __ptext14:
  4777                           	opt stack 0
  4778  00391A                     _Do_Flashing:
  4779                           	opt stack 19
  4780                           
  4781                           ;Lab9test.c: 858: FLASHING = 1;
  4782                           
  4783                           ;incstack = 0
  4784  00391A  0E00               	movlw	0
  4785  00391C  0100               	movlb	0	; () banked
  4786  00391E  6F84               	movwf	(_FLASHING+1)& (0+255),b
  4787  003920  0E01               	movlw	1
  4788  003922  6F83               	movwf	_FLASHING& (0+255),b
  4789                           
  4790                           ;Lab9test.c: 859: FLASHING_REQUEST = 0;
  4791  003924  0E00               	movlw	0
  4792  003926  0100               	movlb	0	; () banked
  4793  003928  6F90               	movwf	_FLASHING_REQUEST& (0+255),b
  4794                           
  4795                           ;Lab9test.c: 861: while(FLASHING == 1)
  4796  00392A  D01A               	goto	l7733
  4797  00392C                     l7709:
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;Lab9test.c: 862: {
  4801                           ;Lab9test.c: 863: if (FLASHING_REQUEST == 1)
  4802  00392C  0100               	movlb	0	; () banked
  4803  00392E  0590               	decf	_FLASHING_REQUEST& (0+255),w,b
  4804  003930  A4D8               	btfss	status,2,c
  4805  003932  D009               	goto	l7713
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;Lab9test.c: 864: {
  4809                           ;Lab9test.c: 865: FLASHING_REQUEST = 0;
  4810  003934  0E00               	movlw	0
  4811  003936  0100               	movlb	0	; () banked
  4812  003938  6F90               	movwf	_FLASHING_REQUEST& (0+255),b
  4813                           
  4814                           ;Lab9test.c: 866: FLASHING = 0;
  4815  00393A  0E00               	movlw	0
  4816  00393C  0100               	movlb	0	; () banked
  4817  00393E  6F84               	movwf	(_FLASHING+1)& (0+255),b
  4818  003940  0E00               	movlw	0
  4819  003942  6F83               	movwf	_FLASHING& (0+255),b
  4820  003944  D000               	goto	l7713
  4821  003946                     l7713:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;Lab9test.c: 867: }
  4825                           ;Lab9test.c: 869: PORTAbits.RA1 = 1;
  4826  003946  8280               	bsf	3968,1,c	;volatile
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;Lab9test.c: 870: PORTBbits.RB4 = 1;
  4830  003948  8881               	bsf	3969,4,c	;volatile
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;Lab9test.c: 871: PORTAbits.RA5 = 1;
  4834  00394A  8A80               	bsf	3968,5,c	;volatile
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;Lab9test.c: 872: PORTEbits.RE1 = 1;
  4838  00394C  8284               	bsf	3972,1,c	;volatile
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;Lab9test.c: 873: WAIT_1_SEC();
  4842  00394E  EC07  F01B         	call	_WAIT_1_SEC	;wreg free
  4843                           
  4844                           ;Lab9test.c: 875: PORTAbits.RA1 = 0;
  4845  003952  9280               	bcf	3968,1,c	;volatile
  4846                           
  4847                           ;Lab9test.c: 876: PORTBbits.RB4 = 0;
  4848  003954  9881               	bcf	3969,4,c	;volatile
  4849                           
  4850                           ;Lab9test.c: 877: PORTAbits.RA5 = 0;
  4851  003956  9A80               	bcf	3968,5,c	;volatile
  4852                           
  4853                           ;Lab9test.c: 878: PORTEbits.RE1 = 0;
  4854  003958  9284               	bcf	3972,1,c	;volatile
  4855                           
  4856                           ;Lab9test.c: 879: WAIT_1_SEC();
  4857  00395A  EC07  F01B         	call	_WAIT_1_SEC	;wreg free
  4858  00395E  D000               	goto	l7733
  4859  003960                     l7733:
  4860  003960  0100               	movlb	0	; () banked
  4861  003962  0583               	decf	_FLASHING& (0+255),w,b
  4862  003964  0100               	movlb	0	; () banked
  4863  003966  1184               	iorwf	(_FLASHING+1)& (0+255),w,b
  4864  003968  B4D8               	btfsc	status,2,c
  4865  00396A  D7E0               	goto	l7709
  4866                           
  4867                           ; BSR set to: 0
  4868                           
  4869                           ; BSR set to: 0
  4870  00396C  0012               	return		;funcret
  4871  00396E                     __end_of_Do_Flashing:
  4872                           	opt stack 0
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodl	equ	0xFF3
  4878                           intcon2	equ	0xFF1
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1l	equ	0xFE1
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _Day_Mode *****************
  4886 ;; Defined at:
  4887 ;;		line 342 in file "Lab9test.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;		None
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;		None               void
  4894 ;; Registers used:
  4895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        0 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:   12
  4908 ;; This function calls:
  4909 ;;		_PED_Control
  4910 ;;		_Set_EW
  4911 ;;		_Set_EWLT
  4912 ;;		_Set_NS
  4913 ;;		_Set_NSLT
  4914 ;;		_WAIT_N_SEC
  4915 ;; This function is called by:
  4916 ;;		_main
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text15
  4921  002F2C                     __ptext15:
  4922                           	opt stack 0
  4923  002F2C                     _Day_Mode:
  4924                           	opt stack 18
  4925                           
  4926                           ;Lab9test.c: 344: PORTBbits.RB7 = 0;
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;incstack = 0
  4930  002F2C  9E81               	bcf	3969,7,c	;volatile
  4931                           
  4932                           ;Lab9test.c: 345: Act_Mode_Txt[0] = 'D';
  4933  002F2E  0E44               	movlw	68
  4934  002F30  0100               	movlb	0	; () banked
  4935  002F32  6FD4               	movwf	_Act_Mode_Txt& (0+255),b
  4936                           
  4937                           ;Lab9test.c: 346: MODE = 1;
  4938  002F34  0E00               	movlw	0
  4939  002F36  0100               	movlb	0	; () banked
  4940  002F38  6F8C               	movwf	(_MODE+1)& (0+255),b
  4941  002F3A  0E01               	movlw	1
  4942  002F3C  6F8B               	movwf	_MODE& (0+255),b
  4943  002F3E  D000               	goto	l7615
  4944  002F40                     l7615:
  4945                           
  4946                           ;Lab9test.c: 348: {
  4947                           ;Lab9test.c: 349: Set_NSLT (1);
  4948  002F40  0E01               	movlw	1
  4949  002F42  EC7F  F01D         	call	_Set_NSLT
  4950                           
  4951                           ;Lab9test.c: 350: Set_EW (1);
  4952  002F46  0E01               	movlw	1
  4953  002F48  ECEB  F01D         	call	_Set_EW
  4954                           
  4955                           ;Lab9test.c: 351: Set_EWLT (1);
  4956  002F4C  0E01               	movlw	1
  4957  002F4E  ECC7  F01D         	call	_Set_EWLT
  4958                           
  4959                           ;Lab9test.c: 352: Set_NS (2);
  4960  002F52  0E02               	movlw	2
  4961  002F54  ECA3  F01D         	call	_Set_NS
  4962                           
  4963                           ;Lab9test.c: 354: if (NSPED_SW == 1)
  4964  002F58  0100               	movlb	0	; () banked
  4965  002F5A  0591               	decf	_NSPED_SW& (0+255),w,b
  4966  002F5C  A4D8               	btfss	status,2,c
  4967  002F5E  D005               	goto	l419
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;Lab9test.c: 355: {
  4971                           ;Lab9test.c: 356: PED_Control(0, 9);
  4972  002F60  0E09               	movlw	9
  4973  002F62  6E4B               	movwf	PED_Control@Num_Sec,c
  4974  002F64  0E00               	movlw	0
  4975  002F66  ECB7  F01C         	call	_PED_Control
  4976  002F6A                     l419:
  4977                           
  4978                           ;Lab9test.c: 357: }
  4979                           ;Lab9test.c: 358: WAIT_N_SEC (8);
  4980  002F6A  0E08               	movlw	8
  4981  002F6C  EC8D  F01E         	call	_WAIT_N_SEC
  4982                           
  4983                           ;Lab9test.c: 360: Set_NS (3);
  4984  002F70  0E03               	movlw	3
  4985  002F72  ECA3  F01D         	call	_Set_NS
  4986                           
  4987                           ;Lab9test.c: 361: WAIT_N_SEC (3);
  4988  002F76  0E03               	movlw	3
  4989  002F78  EC8D  F01E         	call	_WAIT_N_SEC
  4990                           
  4991                           ;Lab9test.c: 363: Set_NS (1);
  4992  002F7C  0E01               	movlw	1
  4993  002F7E  ECA3  F01D         	call	_Set_NS
  4994                           
  4995                           ;Lab9test.c: 365: if (PORTAbits.RA4 == 1)
  4996  002F82  A880               	btfss	3968,4,c	;volatile
  4997  002F84  D010               	goto	l7641
  4998                           
  4999                           ;Lab9test.c: 366: {
  5000                           ;Lab9test.c: 367: Set_EWLT (2);
  5001  002F86  0E02               	movlw	2
  5002  002F88  ECC7  F01D         	call	_Set_EWLT
  5003                           
  5004                           ;Lab9test.c: 368: WAIT_N_SEC (7);
  5005  002F8C  0E07               	movlw	7
  5006  002F8E  EC8D  F01E         	call	_WAIT_N_SEC
  5007                           
  5008                           ;Lab9test.c: 369: Set_EWLT (3);
  5009  002F92  0E03               	movlw	3
  5010  002F94  ECC7  F01D         	call	_Set_EWLT
  5011                           
  5012                           ;Lab9test.c: 370: WAIT_N_SEC (3);
  5013  002F98  0E03               	movlw	3
  5014  002F9A  EC8D  F01E         	call	_WAIT_N_SEC
  5015                           
  5016                           ;Lab9test.c: 371: Set_EWLT (1);
  5017  002F9E  0E01               	movlw	1
  5018  002FA0  ECC7  F01D         	call	_Set_EWLT
  5019  002FA4  D000               	goto	l7641
  5020  002FA6                     l7641:
  5021                           
  5022                           ;Lab9test.c: 372: }
  5023                           ;Lab9test.c: 374: Set_EW (2);
  5024  002FA6  0E02               	movlw	2
  5025  002FA8  ECEB  F01D         	call	_Set_EW
  5026                           
  5027                           ;Lab9test.c: 376: if (EWPED_SW == 1)
  5028  002FAC  0100               	movlb	0	; () banked
  5029  002FAE  058F               	decf	_EWPED_SW& (0+255),w,b
  5030  002FB0  A4D8               	btfss	status,2,c
  5031  002FB2  D005               	goto	l421
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;Lab9test.c: 377: {
  5035                           ;Lab9test.c: 378: PED_Control(1, 8);
  5036  002FB4  0E08               	movlw	8
  5037  002FB6  6E4B               	movwf	PED_Control@Num_Sec,c
  5038  002FB8  0E01               	movlw	1
  5039  002FBA  ECB7  F01C         	call	_PED_Control
  5040  002FBE                     l421:
  5041                           
  5042                           ;Lab9test.c: 379: }
  5043                           ;Lab9test.c: 380: WAIT_N_SEC (6);
  5044  002FBE  0E06               	movlw	6
  5045  002FC0  EC8D  F01E         	call	_WAIT_N_SEC
  5046                           
  5047                           ;Lab9test.c: 382: Set_EW (3);
  5048  002FC4  0E03               	movlw	3
  5049  002FC6  ECEB  F01D         	call	_Set_EW
  5050                           
  5051                           ;Lab9test.c: 383: WAIT_N_SEC (3);
  5052  002FCA  0E03               	movlw	3
  5053  002FCC  EC8D  F01E         	call	_WAIT_N_SEC
  5054                           
  5055                           ;Lab9test.c: 385: Set_EW (1);
  5056  002FD0  0E01               	movlw	1
  5057  002FD2  ECEB  F01D         	call	_Set_EW
  5058                           
  5059                           ;Lab9test.c: 387: if (PORTAbits.RA3 == 1)
  5060  002FD6  A680               	btfss	3968,3,c	;volatile
  5061  002FD8  D011               	goto	l425
  5062                           
  5063                           ;Lab9test.c: 388: {
  5064                           ;Lab9test.c: 389: Set_NSLT (2);
  5065  002FDA  0E02               	movlw	2
  5066  002FDC  EC7F  F01D         	call	_Set_NSLT
  5067                           
  5068                           ;Lab9test.c: 390: WAIT_N_SEC (6);
  5069  002FE0  0E06               	movlw	6
  5070  002FE2  EC8D  F01E         	call	_WAIT_N_SEC
  5071                           
  5072                           ;Lab9test.c: 392: Set_NSLT (3);
  5073  002FE6  0E03               	movlw	3
  5074  002FE8  EC7F  F01D         	call	_Set_NSLT
  5075                           
  5076                           ;Lab9test.c: 393: WAIT_N_SEC (3);
  5077  002FEC  0E03               	movlw	3
  5078  002FEE  EC8D  F01E         	call	_WAIT_N_SEC
  5079                           
  5080                           ;Lab9test.c: 395: Set_NSLT (1);
  5081  002FF2  0E01               	movlw	1
  5082  002FF4  EC7F  F01D         	call	_Set_NSLT
  5083                           
  5084                           ;Lab9test.c: 396: }
  5085                           ;Lab9test.c: 397: break;
  5086  002FF8  D001               	goto	l425
  5087  002FFA  D7A2               	goto	l7615
  5088  002FFC                     l425:
  5089  002FFC  0012               	return		;funcret
  5090  002FFE                     __end_of_Day_Mode:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodl	equ	0xFF3
  5097                           intcon2	equ	0xFF1
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           postdec1	equ	0xFE5
  5101                           fsr1l	equ	0xFE1
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _WAIT_N_SEC *****************
  5105 ;; Defined at:
  5106 ;;		line 514 in file "Lab9test.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  seconds         1    wreg     unsigned char 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  seconds         1   93[COMRAM] unsigned char 
  5111 ;;  i               1   94[COMRAM] unsigned char 
  5112 ;; Return value:  Size  Location     Type
  5113 ;;		None               void
  5114 ;; Registers used:
  5115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;Total ram usage:        2 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:   11
  5128 ;; This function calls:
  5129 ;;		_WAIT_1_SEC
  5130 ;;		_update_LCD_count
  5131 ;; This function is called by:
  5132 ;;		_Day_Mode
  5133 ;;		_Night_Mode
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text16
  5138  003D1A                     __ptext16:
  5139                           	opt stack 0
  5140  003D1A                     _WAIT_N_SEC:
  5141                           	opt stack 18
  5142                           
  5143                           ;incstack = 0
  5144                           ;WAIT_N_SEC@seconds stored from wreg
  5145  003D1A  6E5E               	movwf	WAIT_N_SEC@seconds,c
  5146                           
  5147                           ;Lab9test.c: 516: char i;
  5148                           ;Lab9test.c: 517: for (i = seconds; i > 0; i--)
  5149  003D1C  C05E  F05F         	movff	WAIT_N_SEC@seconds,WAIT_N_SEC@i
  5150  003D20                     l7481:
  5151  003D20  505F               	movf	WAIT_N_SEC@i,w,c
  5152  003D22  B4D8               	btfsc	status,2,c
  5153  003D24  D00C               	goto	l7491
  5154  003D26  D001               	goto	l7485
  5155  003D28  D00A               	goto	l7491
  5156  003D2A                     l7485:
  5157                           
  5158                           ;Lab9test.c: 518: {
  5159                           ;Lab9test.c: 519: update_LCD_count(direction, i);
  5160  003D2A  C05F  F048         	movff	WAIT_N_SEC@i,update_LCD_count@count
  5161  003D2E  0100               	movlb	0	; () banked
  5162  003D30  5197               	movf	_direction& (0+255),w,b
  5163  003D32  ECBB  F010         	call	_update_LCD_count
  5164                           
  5165                           ;Lab9test.c: 520: WAIT_1_SEC();
  5166  003D36  EC07  F01B         	call	_WAIT_1_SEC	;wreg free
  5167  003D3A  065F               	decf	WAIT_N_SEC@i,f,c
  5168  003D3C  D7F1               	goto	l7481
  5169  003D3E                     l7491:
  5170                           
  5171                           ;Lab9test.c: 521: }
  5172                           ;Lab9test.c: 522: update_LCD_count(direction, 0);
  5173  003D3E  0E00               	movlw	0
  5174  003D40  6E48               	movwf	update_LCD_count@count,c
  5175  003D42  0100               	movlb	0	; () banked
  5176  003D44  5197               	movf	_direction& (0+255),w,b
  5177  003D46  ECBB  F010         	call	_update_LCD_count
  5178  003D4A  0012               	return		;funcret
  5179  003D4C                     __end_of_WAIT_N_SEC:
  5180                           	opt stack 0
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodl	equ	0xFF3
  5186                           intcon2	equ	0xFF1
  5187                           postinc0	equ	0xFEE
  5188                           wreg	equ	0xFE8
  5189                           postdec1	equ	0xFE5
  5190                           fsr1l	equ	0xFE1
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _update_LCD_count *****************
  5194 ;; Defined at:
  5195 ;;		line 676 in file "Lab9test.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  direction       1    wreg     unsigned char 
  5198 ;;  count           1   71[COMRAM] unsigned char 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  direction       1   73[COMRAM] unsigned char 
  5201 ;; Return value:  Size  Location     Type
  5202 ;;		None               void
  5203 ;; Registers used:
  5204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5210 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;Total ram usage:        3 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:    9
  5217 ;; This function calls:
  5218 ;;		___awdiv
  5219 ;;		___awmod
  5220 ;;		_drawtext
  5221 ;; This function is called by:
  5222 ;;		_WAIT_N_SEC
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text17
  5227  002176                     __ptext17:
  5228                           	opt stack 0
  5229  002176                     _update_LCD_count:
  5230                           	opt stack 19
  5231                           
  5232                           ;incstack = 0
  5233                           ;update_LCD_count@direction stored from wreg
  5234  002176  6E4A               	movwf	update_LCD_count@direction,c
  5235                           
  5236                           ;Lab9test.c: 678: PORTD = (PORTD & 0x80) | array[count];
  5237  002178  5048               	movf	update_LCD_count@count,w,c
  5238  00217A  0D01               	mullw	1
  5239  00217C  0EB7               	movlw	low _array
  5240  00217E  24F3               	addwf	prodl,w,c
  5241  002180  6ED9               	movwf	fsr2l,c
  5242  002182  0E00               	movlw	high _array
  5243  002184  20F4               	addwfc	prodh,w,c
  5244  002186  6EDA               	movwf	fsr2h,c
  5245  002188  50DF               	movf	indf2,w,c
  5246  00218A  6E49               	movwf	??_update_LCD_count& (0+255),c
  5247  00218C  5083               	movf	3971,w,c	;volatile
  5248  00218E  0B80               	andlw	128
  5249  002190  1049               	iorwf	??_update_LCD_count,w,c
  5250  002192  6E83               	movwf	3971,c	;volatile
  5251                           
  5252                           ;Lab9test.c: 679: switch (direction)
  5253  002194  D0B6               	goto	l7347
  5254  002196                     l7329:
  5255                           
  5256                           ;Lab9test.c: 682: EW_Count[0] = count/10 + '0';
  5257  002196  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5258  00219A  6A16               	clrf	___awdiv@dividend+1,c
  5259  00219C  0E00               	movlw	0
  5260  00219E  6E18               	movwf	___awdiv@divisor+1,c
  5261  0021A0  0E0A               	movlw	10
  5262  0021A2  6E17               	movwf	___awdiv@divisor,c
  5263  0021A4  EC68  F019         	call	___awdiv	;wreg free
  5264  0021A8  5015               	movf	?___awdiv,w,c
  5265  0021AA  0F30               	addlw	48
  5266  0021AC  0100               	movlb	0	; () banked
  5267  0021AE  6FC5               	movwf	_EW_Count& (0+255),b
  5268                           
  5269                           ;Lab9test.c: 683: EW_Count[1] = count%10 + '0';
  5270  0021B0  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5271  0021B4  6A10               	clrf	___awmod@dividend+1,c
  5272  0021B6  0E00               	movlw	0
  5273  0021B8  6E12               	movwf	___awmod@divisor+1,c
  5274  0021BA  0E0A               	movlw	10
  5275  0021BC  6E11               	movwf	___awmod@divisor,c
  5276  0021BE  EC48  F01B         	call	___awmod	;wreg free
  5277  0021C2  500F               	movf	?___awmod,w,c
  5278  0021C4  0F30               	addlw	48
  5279  0021C6  0100               	movlb	0	; () banked
  5280  0021C8  6FC6               	movwf	(_EW_Count+1)& (0+255),b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;Lab9test.c: 684: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5284  0021CA  0E1E               	movlw	30
  5285  0021CC  6E37               	movwf	drawtext@y,c
  5286  0021CE  0EC5               	movlw	low _EW_Count
  5287  0021D0  6E38               	movwf	drawtext@_text,c
  5288  0021D2  0E00               	movlw	high _EW_Count
  5289  0021D4  6E39               	movwf	drawtext@_text+1,c
  5290  0021D6  0E07               	movlw	7
  5291  0021D8  6E3B               	movwf	drawtext@color+1,c
  5292  0021DA  683A               	setf	drawtext@color,c
  5293  0021DC  0E00               	movlw	0
  5294  0021DE  6E3D               	movwf	drawtext@bg+1,c
  5295  0021E0  0E00               	movlw	0
  5296  0021E2  6E3C               	movwf	drawtext@bg,c
  5297  0021E4  0E02               	movlw	2
  5298  0021E6  6E3E               	movwf	drawtext@size,c
  5299  0021E8  0E64               	movlw	100
  5300  0021EA  ECB9  F016         	call	_drawtext
  5301                           
  5302                           ;Lab9test.c: 685: break;
  5303  0021EE  D097               	goto	l531
  5304  0021F0                     l7333:
  5305                           
  5306                           ;Lab9test.c: 688: NS_Count[0] = count/10 + '0';
  5307  0021F0  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5308  0021F4  6A16               	clrf	___awdiv@dividend+1,c
  5309  0021F6  0E00               	movlw	0
  5310  0021F8  6E18               	movwf	___awdiv@divisor+1,c
  5311  0021FA  0E0A               	movlw	10
  5312  0021FC  6E17               	movwf	___awdiv@divisor,c
  5313  0021FE  EC68  F019         	call	___awdiv	;wreg free
  5314  002202  5015               	movf	?___awdiv,w,c
  5315  002204  0F30               	addlw	48
  5316  002206  0100               	movlb	0	; () banked
  5317  002208  6FCB               	movwf	_NS_Count& (0+255),b
  5318                           
  5319                           ;Lab9test.c: 689: NS_Count[1] = count%10 + '0';
  5320  00220A  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5321  00220E  6A10               	clrf	___awmod@dividend+1,c
  5322  002210  0E00               	movlw	0
  5323  002212  6E12               	movwf	___awmod@divisor+1,c
  5324  002214  0E0A               	movlw	10
  5325  002216  6E11               	movwf	___awmod@divisor,c
  5326  002218  EC48  F01B         	call	___awmod	;wreg free
  5327  00221C  500F               	movf	?___awmod,w,c
  5328  00221E  0F30               	addlw	48
  5329  002220  0100               	movlb	0	; () banked
  5330  002222  6FCC               	movwf	(_NS_Count+1)& (0+255),b
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;Lab9test.c: 690: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5334  002224  0E5A               	movlw	90
  5335  002226  6E37               	movwf	drawtext@y,c
  5336  002228  0ECB               	movlw	low _NS_Count
  5337  00222A  6E38               	movwf	drawtext@_text,c
  5338  00222C  0E00               	movlw	high _NS_Count
  5339  00222E  6E39               	movwf	drawtext@_text+1,c
  5340  002230  0E00               	movlw	0
  5341  002232  6E3B               	movwf	drawtext@color+1,c
  5342  002234  0E1F               	movlw	31
  5343  002236  6E3A               	movwf	drawtext@color,c
  5344  002238  0E00               	movlw	0
  5345  00223A  6E3D               	movwf	drawtext@bg+1,c
  5346  00223C  0E00               	movlw	0
  5347  00223E  6E3C               	movwf	drawtext@bg,c
  5348  002240  0E02               	movlw	2
  5349  002242  6E3E               	movwf	drawtext@size,c
  5350  002244  0E64               	movlw	100
  5351  002246  ECB9  F016         	call	_drawtext
  5352                           
  5353                           ;Lab9test.c: 691: break;
  5354  00224A  D069               	goto	l531
  5355  00224C                     l7337:
  5356                           
  5357                           ;Lab9test.c: 694: EWLT_Count[0] = count/10 + '0';
  5358  00224C  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5359  002250  6A16               	clrf	___awdiv@dividend+1,c
  5360  002252  0E00               	movlw	0
  5361  002254  6E18               	movwf	___awdiv@divisor+1,c
  5362  002256  0E0A               	movlw	10
  5363  002258  6E17               	movwf	___awdiv@divisor,c
  5364  00225A  EC68  F019         	call	___awdiv	;wreg free
  5365  00225E  5015               	movf	?___awdiv,w,c
  5366  002260  0F30               	addlw	48
  5367  002262  0100               	movlb	0	; () banked
  5368  002264  6FC2               	movwf	_EWLT_Count& (0+255),b
  5369                           
  5370                           ;Lab9test.c: 695: EWLT_Count[1] = count%10 + '0';
  5371  002266  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5372  00226A  6A10               	clrf	___awmod@dividend+1,c
  5373  00226C  0E00               	movlw	0
  5374  00226E  6E12               	movwf	___awmod@divisor+1,c
  5375  002270  0E0A               	movlw	10
  5376  002272  6E11               	movwf	___awmod@divisor,c
  5377  002274  EC48  F01B         	call	___awmod	;wreg free
  5378  002278  500F               	movf	?___awmod,w,c
  5379  00227A  0F30               	addlw	48
  5380  00227C  0100               	movlb	0	; () banked
  5381  00227E  6FC3               	movwf	(_EWLT_Count+1)& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;Lab9test.c: 696: drawtext(100, 50 + 10, EWLT_Count,
  5385                           ;Lab9test.c: 697: 0xFFFF, 0x0000, 2);
  5386  002280  0E3C               	movlw	60
  5387  002282  6E37               	movwf	drawtext@y,c
  5388  002284  0EC2               	movlw	low _EWLT_Count
  5389  002286  6E38               	movwf	drawtext@_text,c
  5390  002288  0E00               	movlw	high _EWLT_Count
  5391  00228A  6E39               	movwf	drawtext@_text+1,c
  5392  00228C  0EFF               	movlw	255
  5393  00228E  6E3B               	movwf	drawtext@color+1,c
  5394  002290  683A               	setf	drawtext@color,c
  5395  002292  0E00               	movlw	0
  5396  002294  6E3D               	movwf	drawtext@bg+1,c
  5397  002296  0E00               	movlw	0
  5398  002298  6E3C               	movwf	drawtext@bg,c
  5399  00229A  0E02               	movlw	2
  5400  00229C  6E3E               	movwf	drawtext@size,c
  5401  00229E  0E64               	movlw	100
  5402  0022A0  ECB9  F016         	call	_drawtext
  5403                           
  5404                           ;Lab9test.c: 698: break;
  5405  0022A4  D03C               	goto	l531
  5406  0022A6                     l7341:
  5407                           
  5408                           ;Lab9test.c: 701: NSLT_Count[0] = count/10 + '0';
  5409  0022A6  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5410  0022AA  6A16               	clrf	___awdiv@dividend+1,c
  5411  0022AC  0E00               	movlw	0
  5412  0022AE  6E18               	movwf	___awdiv@divisor+1,c
  5413  0022B0  0E0A               	movlw	10
  5414  0022B2  6E17               	movwf	___awdiv@divisor,c
  5415  0022B4  EC68  F019         	call	___awdiv	;wreg free
  5416  0022B8  5015               	movf	?___awdiv,w,c
  5417  0022BA  0F30               	addlw	48
  5418  0022BC  0100               	movlb	0	; () banked
  5419  0022BE  6FC8               	movwf	_NSLT_Count& (0+255),b
  5420                           
  5421                           ;Lab9test.c: 702: NSLT_Count[1] = count%10 + '0';
  5422  0022C0  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5423  0022C4  6A10               	clrf	___awmod@dividend+1,c
  5424  0022C6  0E00               	movlw	0
  5425  0022C8  6E12               	movwf	___awmod@divisor+1,c
  5426  0022CA  0E0A               	movlw	10
  5427  0022CC  6E11               	movwf	___awmod@divisor,c
  5428  0022CE  EC48  F01B         	call	___awmod	;wreg free
  5429  0022D2  500F               	movf	?___awmod,w,c
  5430  0022D4  0F30               	addlw	48
  5431  0022D6  0100               	movlb	0	; () banked
  5432  0022D8  6FC9               	movwf	(_NSLT_Count+1)& (0+255),b
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;Lab9test.c: 703: drawtext(100, 110 + 10, NSLT_Count,
  5436                           ;Lab9test.c: 704: 0xF81F, 0x0000, 2);
  5437  0022DA  0E78               	movlw	120
  5438  0022DC  6E37               	movwf	drawtext@y,c
  5439  0022DE  0EC8               	movlw	low _NSLT_Count
  5440  0022E0  6E38               	movwf	drawtext@_text,c
  5441  0022E2  0E00               	movlw	high _NSLT_Count
  5442  0022E4  6E39               	movwf	drawtext@_text+1,c
  5443  0022E6  0EF8               	movlw	248
  5444  0022E8  6E3B               	movwf	drawtext@color+1,c
  5445  0022EA  0E1F               	movlw	31
  5446  0022EC  6E3A               	movwf	drawtext@color,c
  5447  0022EE  0E00               	movlw	0
  5448  0022F0  6E3D               	movwf	drawtext@bg+1,c
  5449  0022F2  0E00               	movlw	0
  5450  0022F4  6E3C               	movwf	drawtext@bg,c
  5451  0022F6  0E02               	movlw	2
  5452  0022F8  6E3E               	movwf	drawtext@size,c
  5453  0022FA  0E64               	movlw	100
  5454  0022FC  ECB9  F016         	call	_drawtext
  5455                           
  5456                           ;Lab9test.c: 706: }
  5457                           
  5458                           ;Lab9test.c: 705: break;
  5459  002300  D00E               	goto	l531
  5460  002302                     l7347:
  5461  002302  504A               	movf	update_LCD_count@direction,w,c
  5462                           
  5463                           ; Switch size 1, requested type "space"
  5464                           ; Number of cases is 4, Range of values is 0 to 3
  5465                           ; switch strategies available:
  5466                           ; Name         Instructions Cycles
  5467                           ; simple_byte           13     7 (average)
  5468                           ;	Chosen strategy is simple_byte
  5469  002304  0A00               	xorlw	0	; case 0
  5470  002306  B4D8               	btfsc	status,2,c
  5471  002308  D746               	goto	l7329
  5472  00230A  0A01               	xorlw	1	; case 1
  5473  00230C  B4D8               	btfsc	status,2,c
  5474  00230E  D79E               	goto	l7337
  5475  002310  0A03               	xorlw	3	; case 2
  5476  002312  B4D8               	btfsc	status,2,c
  5477  002314  D76D               	goto	l7333
  5478  002316  0A01               	xorlw	1	; case 3
  5479  002318  B4D8               	btfsc	status,2,c
  5480  00231A  D7C5               	goto	l7341
  5481  00231C  D000               	goto	l531
  5482  00231E                     l531:
  5483  00231E  0012               	return		;funcret
  5484  002320                     __end_of_update_LCD_count:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon2	equ	0xFF1
  5493                           postinc0	equ	0xFEE
  5494                           wreg	equ	0xFE8
  5495                           postdec1	equ	0xFE5
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function _WAIT_1_SEC *****************
  5503 ;; Defined at:
  5504 ;;		line 487 in file "Lab9test.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;		None               void
  5511 ;; Registers used:
  5512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:        0 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:   10
  5525 ;; This function calls:
  5526 ;;		_WAIT_HALF_SEC
  5527 ;;		_drawtext
  5528 ;;		_strcpy
  5529 ;;		_update_LCD_misc
  5530 ;; This function is called by:
  5531 ;;		_WAIT_N_SEC
  5532 ;;		_Do_Flashing
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text18
  5537  00360E                     __ptext18:
  5538                           	opt stack 0
  5539  00360E                     _WAIT_1_SEC:
  5540                           	opt stack 18
  5541                           
  5542                           ;Lab9test.c: 489: PORTDbits.RD7 = 1;
  5543                           
  5544                           ;incstack = 0
  5545  00360E  8E83               	bsf	3971,7,c	;volatile
  5546                           
  5547                           ;Lab9test.c: 490: strcpy(txt,"*");
  5548  003610  C064  F00F         	movff	_txt,strcpy@to
  5549  003614  C065  F010         	movff	_txt+1,strcpy@to+1
  5550  003618  0EFD               	movlw	low STR_5
  5551  00361A  6E11               	movwf	strcpy@from,c
  5552  00361C  0EFF               	movlw	high STR_5
  5553  00361E  6E12               	movwf	strcpy@from+1,c
  5554  003620  ECA6  F01E         	call	_strcpy	;wreg free
  5555                           
  5556                           ;Lab9test.c: 491: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5557  003624  0E0A               	movlw	10
  5558  003626  6E37               	movwf	drawtext@y,c
  5559  003628  C064  F038         	movff	_txt,drawtext@_text
  5560  00362C  C065  F039         	movff	_txt+1,drawtext@_text+1
  5561  003630  0EFF               	movlw	255
  5562  003632  6E3B               	movwf	drawtext@color+1,c
  5563  003634  683A               	setf	drawtext@color,c
  5564  003636  0E00               	movlw	0
  5565  003638  6E3D               	movwf	drawtext@bg+1,c
  5566  00363A  0E00               	movlw	0
  5567  00363C  6E3C               	movwf	drawtext@bg,c
  5568  00363E  0E01               	movlw	1
  5569  003640  6E3E               	movwf	drawtext@size,c
  5570  003642  0E78               	movlw	120
  5571  003644  ECB9  F016         	call	_drawtext
  5572                           
  5573                           ;Lab9test.c: 493: WAIT_HALF_SEC();
  5574  003648  EC6C  F01F         	call	_WAIT_HALF_SEC	;wreg free
  5575                           
  5576                           ;Lab9test.c: 495: PORTDbits.RD7 = 0;
  5577  00364C  9E83               	bcf	3971,7,c	;volatile
  5578                           
  5579                           ;Lab9test.c: 496: strcpy(txt," ");
  5580  00364E  C064  F00F         	movff	_txt,strcpy@to
  5581  003652  C065  F010         	movff	_txt+1,strcpy@to+1
  5582  003656  0EFB               	movlw	low STR_14
  5583  003658  6E11               	movwf	strcpy@from,c
  5584  00365A  0EFF               	movlw	high STR_14
  5585  00365C  6E12               	movwf	strcpy@from+1,c
  5586  00365E  ECA6  F01E         	call	_strcpy	;wreg free
  5587                           
  5588                           ;Lab9test.c: 497: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5589  003662  0E0A               	movlw	10
  5590  003664  6E37               	movwf	drawtext@y,c
  5591  003666  C064  F038         	movff	_txt,drawtext@_text
  5592  00366A  C065  F039         	movff	_txt+1,drawtext@_text+1
  5593  00366E  0EFF               	movlw	255
  5594  003670  6E3B               	movwf	drawtext@color+1,c
  5595  003672  683A               	setf	drawtext@color,c
  5596  003674  0E00               	movlw	0
  5597  003676  6E3D               	movwf	drawtext@bg+1,c
  5598  003678  0E00               	movlw	0
  5599  00367A  6E3C               	movwf	drawtext@bg,c
  5600  00367C  0E01               	movlw	1
  5601  00367E  6E3E               	movwf	drawtext@size,c
  5602  003680  0E78               	movlw	120
  5603  003682  ECB9  F016         	call	_drawtext
  5604                           
  5605                           ;Lab9test.c: 499: WAIT_HALF_SEC();
  5606  003686  EC6C  F01F         	call	_WAIT_HALF_SEC	;wreg free
  5607                           
  5608                           ;Lab9test.c: 500: update_LCD_misc();
  5609  00368A  EC8C  F00C         	call	_update_LCD_misc	;wreg free
  5610  00368E  0012               	return		;funcret
  5611  003690                     __end_of_WAIT_1_SEC:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon2	equ	0xFF1
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           postdec1	equ	0xFE5
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _update_LCD_misc *****************
  5630 ;; Defined at:
  5631 ;;		line 729 in file "Lab9test.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  volts           3   90[COMRAM] float 
  5636 ;;  nStep           2   88[COMRAM] int 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;		None               void
  5639 ;; Registers used:
  5640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;Total ram usage:        5 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    9
  5653 ;; This function calls:
  5654 ;;		_Do_Init
  5655 ;;		___awtoft
  5656 ;;		___ftdiv
  5657 ;;		___ftge
  5658 ;;		___wmul
  5659 ;;		_drawtext
  5660 ;;		_get_full_ADC
  5661 ;;		_printf
  5662 ;; This function is called by:
  5663 ;;		_WAIT_1_SEC
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text19
  5668  001918                     __ptext19:
  5669                           	opt stack 0
  5670  001918                     _update_LCD_misc:
  5671                           	opt stack 18
  5672                           
  5673                           ;Lab9test.c: 731: int nStep = get_full_ADC ();
  5674                           
  5675                           ;incstack = 0
  5676  001918  EC15  F01F         	call	_get_full_ADC	;wreg free
  5677  00191C  C00F  F059         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5678  001920  C010  F05A         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5679                           
  5680                           ;Lab9test.c: 732: float volts = nStep*5/1024.0;
  5681  001924  C059  F01D         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5682  001928  C05A  F01E         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5683  00192C  0E00               	movlw	0
  5684  00192E  6E20               	movwf	___wmul@multiplicand+1,c
  5685  001930  0E05               	movlw	5
  5686  001932  6E1F               	movwf	___wmul@multiplicand,c
  5687  001934  EC01  F01F         	call	___wmul	;wreg free
  5688  001938  C01D  F023         	movff	?___wmul,___awtoft@c
  5689  00193C  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  5690  001940  EC6F  F01E         	call	___awtoft	;wreg free
  5691  001944  C023  F027         	movff	?___awtoft,___ftdiv@f1
  5692  001948  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  5693  00194C  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  5694  001950  0E00               	movlw	0
  5695  001952  6E2A               	movwf	___ftdiv@f2,c
  5696  001954  0E80               	movlw	128
  5697  001956  6E2B               	movwf	___ftdiv@f2+1,c
  5698  001958  0E44               	movlw	68
  5699  00195A  6E2C               	movwf	___ftdiv@f2+2,c
  5700  00195C  EC48  F016         	call	___ftdiv	;wreg free
  5701  001960  C027  F05B         	movff	?___ftdiv,update_LCD_misc@volts
  5702  001964  C028  F05C         	movff	?___ftdiv+1,update_LCD_misc@volts+1
  5703  001968  C029  F05D         	movff	?___ftdiv+2,update_LCD_misc@volts+2
  5704                           
  5705                           ;Lab9test.c: 734: printf ("volts are %0.3f\r\n\n", volts);
  5706  00196C  0EAE               	movlw	low STR_17
  5707  00196E  6E4E               	movwf	printf@f,c
  5708  001970  0EFF               	movlw	high STR_17
  5709  001972  6E4F               	movwf	printf@f+1,c
  5710  001974  C05B  F050         	movff	update_LCD_misc@volts,?_printf+2
  5711  001978  C05C  F051         	movff	update_LCD_misc@volts+1,?_printf+3
  5712  00197C  C05D  F052         	movff	update_LCD_misc@volts+2,?_printf+4
  5713  001980  EC0E  F000         	call	_printf	;wreg free
  5714                           
  5715                           ;Lab9test.c: 737: if (volts < 2.570)
  5716  001984  C05B  F00F         	movff	update_LCD_misc@volts,___ftge@ff1
  5717  001988  C05C  F010         	movff	update_LCD_misc@volts+1,___ftge@ff1+1
  5718  00198C  C05D  F011         	movff	update_LCD_misc@volts+2,___ftge@ff1+2
  5719  001990  0E7B               	movlw	123
  5720  001992  6E12               	movwf	___ftge@ff2,c
  5721  001994  0E24               	movlw	36
  5722  001996  6E13               	movwf	___ftge@ff2+1,c
  5723  001998  0E40               	movlw	64
  5724  00199A  6E14               	movwf	___ftge@ff2+2,c
  5725  00199C  EC1D  F019         	call	___ftge	;wreg free
  5726  0019A0  B0D8               	btfsc	status,0,c
  5727  0019A2  D002               	goto	l7081
  5728                           
  5729                           ;Lab9test.c: 738: {
  5730                           ;Lab9test.c: 739: SW_MODE = 1;
  5731  0019A4  0E01               	movlw	1
  5732  0019A6  D001               	goto	L1
  5733  0019A8                     l7081:
  5734                           
  5735                           ;Lab9test.c: 741: else
  5736                           ;Lab9test.c: 742: {
  5737                           ;Lab9test.c: 743: SW_MODE = 0;
  5738  0019A8  0E00               	movlw	0
  5739  0019AA                     L1:
  5740  0019AA  0100               	movlb	0	; () banked
  5741  0019AC  6F94               	movwf	_SW_MODE& (0+255),b
  5742  0019AE  D000               	goto	l7083
  5743  0019B0                     l7083:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;Lab9test.c: 744: }
  5747                           ;Lab9test.c: 747: SW_EWPED = EWPED_SW;
  5748  0019B0  C08F  F093         	movff	_EWPED_SW,_SW_EWPED
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;Lab9test.c: 748: SW_EWLT = PORTAbits.RA4;
  5752  0019B4  0E00               	movlw	0
  5753  0019B6  B880               	btfsc	3968,4,c	;volatile
  5754  0019B8  0E01               	movlw	1
  5755  0019BA  0100               	movlb	0	; () banked
  5756  0019BC  6F92               	movwf	_SW_EWLT& (0+255),b
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;Lab9test.c: 749: SW_NSPED = NSPED_SW;
  5760  0019BE  C091  F096         	movff	_NSPED_SW,_SW_NSPED
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;Lab9test.c: 750: SW_NSLT = PORTAbits.RA3;
  5764  0019C2  0E00               	movlw	0
  5765  0019C4  B680               	btfsc	3968,3,c	;volatile
  5766  0019C6  0E01               	movlw	1
  5767  0019C8  0100               	movlb	0	; () banked
  5768  0019CA  6F95               	movwf	_SW_NSLT& (0+255),b
  5769                           
  5770                           ;Lab9test.c: 752: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5771  0019CC  0100               	movlb	0	; () banked
  5772  0019CE  5194               	movf	_SW_MODE& (0+255),w,b
  5773  0019D0  0100               	movlb	0	; () banked
  5774  0019D2  A4D8               	btfss	status,2,c
  5775  0019D4  D002               	goto	l7093
  5776                           
  5777                           ; BSR set to: 0
  5778  0019D6  0E4E               	movlw	78
  5779  0019D8  D001               	goto	L2
  5780  0019DA                     l7093:
  5781                           
  5782                           ; BSR set to: 0
  5783  0019DA  0E44               	movlw	68
  5784  0019DC                     L2:
  5785  0019DC  0100               	movlb	0	; () banked
  5786  0019DE  6FDA               	movwf	_SW_MODE_Txt& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;Lab9test.c: 753: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5790  0019E0  0100               	movlb	0	; () banked
  5791  0019E2  5196               	movf	_SW_NSPED& (0+255),w,b
  5792  0019E4  0100               	movlb	0	; () banked
  5793  0019E6  A4D8               	btfss	status,2,c
  5794  0019E8  D002               	goto	l7097
  5795                           
  5796                           ; BSR set to: 0
  5797  0019EA  0E30               	movlw	48
  5798  0019EC  D001               	goto	L3
  5799  0019EE                     l7097:
  5800                           
  5801                           ; BSR set to: 0
  5802  0019EE  0E31               	movlw	49
  5803  0019F0                     L3:
  5804  0019F0  0100               	movlb	0	; () banked
  5805  0019F2  6FDE               	movwf	_SW_NSPED_Txt& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;Lab9test.c: 754: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5809  0019F4  0100               	movlb	0	; () banked
  5810  0019F6  5195               	movf	_SW_NSLT& (0+255),w,b
  5811  0019F8  0100               	movlb	0	; () banked
  5812  0019FA  A4D8               	btfss	status,2,c
  5813  0019FC  D002               	goto	l7101
  5814                           
  5815                           ; BSR set to: 0
  5816  0019FE  0E30               	movlw	48
  5817  001A00  D001               	goto	L4
  5818  001A02                     l7101:
  5819                           
  5820                           ; BSR set to: 0
  5821  001A02  0E31               	movlw	49
  5822  001A04                     L4:
  5823  001A04  0100               	movlb	0	; () banked
  5824  001A06  6FDC               	movwf	_SW_NSLT_Txt& (0+255),b
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;Lab9test.c: 755: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5828  001A08  0100               	movlb	0	; () banked
  5829  001A0A  5193               	movf	_SW_EWPED& (0+255),w,b
  5830  001A0C  0100               	movlb	0	; () banked
  5831  001A0E  A4D8               	btfss	status,2,c
  5832  001A10  D002               	goto	l7105
  5833                           
  5834                           ; BSR set to: 0
  5835  001A12  0E30               	movlw	48
  5836  001A14  D001               	goto	L5
  5837  001A16                     l7105:
  5838                           
  5839                           ; BSR set to: 0
  5840  001A16  0E31               	movlw	49
  5841  001A18                     L5:
  5842  001A18  6E6F               	movwf	_SW_EWPED_Txt,c
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;Lab9test.c: 756: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5846  001A1A  0100               	movlb	0	; () banked
  5847  001A1C  5192               	movf	_SW_EWLT& (0+255),w,b
  5848  001A1E  0100               	movlb	0	; () banked
  5849  001A20  A4D8               	btfss	status,2,c
  5850  001A22  D002               	goto	l7109
  5851                           
  5852                           ; BSR set to: 0
  5853  001A24  0E30               	movlw	48
  5854  001A26  D001               	goto	L6
  5855  001A28                     l7109:
  5856                           
  5857                           ; BSR set to: 0
  5858  001A28  0E31               	movlw	49
  5859  001A2A                     L6:
  5860  001A2A  6E6D               	movwf	_SW_EWLT_Txt,c
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;Lab9test.c: 757: if (FLASHING_REQUEST == 0)FlashingR_Txt[0] = '0'; else FlashingR_Txt[0
      +                          ] = '1';
  5864  001A2C  0100               	movlb	0	; () banked
  5865  001A2E  5190               	movf	_FLASHING_REQUEST& (0+255),w,b
  5866  001A30  A4D8               	btfss	status,2,c
  5867  001A32  D002               	goto	l7113
  5868                           
  5869                           ; BSR set to: 0
  5870  001A34  0E30               	movlw	48
  5871  001A36  D001               	goto	L7
  5872  001A38                     l7113:
  5873                           
  5874                           ; BSR set to: 0
  5875  001A38  0E31               	movlw	49
  5876  001A3A                     L7:
  5877  001A3A  0100               	movlb	0	; () banked
  5878  001A3C  6FD6               	movwf	_FlashingR_Txt& (0+255),b
  5879  001A3E  D000               	goto	l7115
  5880  001A40                     l7115:
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;Lab9test.c: 758: if (FLASHING == 0)FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  5884  001A40  0100               	movlb	0	; () banked
  5885  001A42  5183               	movf	_FLASHING& (0+255),w,b
  5886  001A44  0100               	movlb	0	; () banked
  5887  001A46  1184               	iorwf	(_FLASHING+1)& (0+255),w,b
  5888  001A48  A4D8               	btfss	status,2,c
  5889  001A4A  D002               	goto	l7119
  5890                           
  5891                           ; BSR set to: 0
  5892  001A4C  0E30               	movlw	48
  5893  001A4E  D001               	goto	L8
  5894  001A50                     l7119:
  5895                           
  5896                           ; BSR set to: 0
  5897  001A50  0E31               	movlw	49
  5898  001A52                     L8:
  5899  001A52  0100               	movlb	0	; () banked
  5900  001A54  6FD8               	movwf	_FlashingS_Txt& (0+255),b
  5901  001A56  D000               	goto	l7121
  5902  001A58                     l7121:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;Lab9test.c: 763: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5906  001A58  0E0A               	movlw	10
  5907  001A5A  6E37               	movwf	drawtext@y,c
  5908  001A5C  0ED4               	movlw	low _Act_Mode_Txt
  5909  001A5E  6E38               	movwf	drawtext@_text,c
  5910  001A60  0E00               	movlw	high _Act_Mode_Txt
  5911  001A62  6E39               	movwf	drawtext@_text+1,c
  5912  001A64  0EFF               	movlw	255
  5913  001A66  6E3B               	movwf	drawtext@color+1,c
  5914  001A68  683A               	setf	drawtext@color,c
  5915  001A6A  0E00               	movlw	0
  5916  001A6C  6E3D               	movwf	drawtext@bg+1,c
  5917  001A6E  0E00               	movlw	0
  5918  001A70  6E3C               	movwf	drawtext@bg,c
  5919  001A72  0E01               	movlw	1
  5920  001A74  6E3E               	movwf	drawtext@size,c
  5921  001A76  0E23               	movlw	35
  5922  001A78  ECB9  F016         	call	_drawtext
  5923                           
  5924                           ;Lab9test.c: 764: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5925  001A7C  0E95               	movlw	149
  5926  001A7E  6E37               	movwf	drawtext@y,c
  5927  001A80  0E6F               	movlw	low _SW_EWPED_Txt
  5928  001A82  6E38               	movwf	drawtext@_text,c
  5929  001A84  0E00               	movlw	high _SW_EWPED_Txt
  5930  001A86  6E39               	movwf	drawtext@_text+1,c
  5931  001A88  0EFF               	movlw	255
  5932  001A8A  6E3B               	movwf	drawtext@color+1,c
  5933  001A8C  683A               	setf	drawtext@color,c
  5934  001A8E  0E00               	movlw	0
  5935  001A90  6E3D               	movwf	drawtext@bg+1,c
  5936  001A92  0E00               	movlw	0
  5937  001A94  6E3C               	movwf	drawtext@bg,c
  5938  001A96  0E01               	movlw	1
  5939  001A98  6E3E               	movwf	drawtext@size,c
  5940  001A9A  0E06               	movlw	6
  5941  001A9C  ECB9  F016         	call	_drawtext
  5942                           
  5943                           ;Lab9test.c: 765: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5944  001AA0  0E95               	movlw	149
  5945  001AA2  6E37               	movwf	drawtext@y,c
  5946  001AA4  0E6D               	movlw	low _SW_EWLT_Txt
  5947  001AA6  6E38               	movwf	drawtext@_text,c
  5948  001AA8  0E00               	movlw	high _SW_EWLT_Txt
  5949  001AAA  6E39               	movwf	drawtext@_text+1,c
  5950  001AAC  0EFF               	movlw	255
  5951  001AAE  6E3B               	movwf	drawtext@color+1,c
  5952  001AB0  683A               	setf	drawtext@color,c
  5953  001AB2  0E00               	movlw	0
  5954  001AB4  6E3D               	movwf	drawtext@bg+1,c
  5955  001AB6  0E00               	movlw	0
  5956  001AB8  6E3C               	movwf	drawtext@bg,c
  5957  001ABA  0E01               	movlw	1
  5958  001ABC  6E3E               	movwf	drawtext@size,c
  5959  001ABE  0E20               	movlw	32
  5960  001AC0  ECB9  F016         	call	_drawtext
  5961                           
  5962                           ;Lab9test.c: 766: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5963  001AC4  0E95               	movlw	149
  5964  001AC6  6E37               	movwf	drawtext@y,c
  5965  001AC8  0EDE               	movlw	low _SW_NSPED_Txt
  5966  001ACA  6E38               	movwf	drawtext@_text,c
  5967  001ACC  0E00               	movlw	high _SW_NSPED_Txt
  5968  001ACE  6E39               	movwf	drawtext@_text+1,c
  5969  001AD0  0EFF               	movlw	255
  5970  001AD2  6E3B               	movwf	drawtext@color+1,c
  5971  001AD4  683A               	setf	drawtext@color,c
  5972  001AD6  0E00               	movlw	0
  5973  001AD8  6E3D               	movwf	drawtext@bg+1,c
  5974  001ADA  0E00               	movlw	0
  5975  001ADC  6E3C               	movwf	drawtext@bg,c
  5976  001ADE  0E01               	movlw	1
  5977  001AE0  6E3E               	movwf	drawtext@size,c
  5978  001AE2  0E3A               	movlw	58
  5979  001AE4  ECB9  F016         	call	_drawtext
  5980                           
  5981                           ;Lab9test.c: 767: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5982  001AE8  0E95               	movlw	149
  5983  001AEA  6E37               	movwf	drawtext@y,c
  5984  001AEC  0EDC               	movlw	low _SW_NSLT_Txt
  5985  001AEE  6E38               	movwf	drawtext@_text,c
  5986  001AF0  0E00               	movlw	high _SW_NSLT_Txt
  5987  001AF2  6E39               	movwf	drawtext@_text+1,c
  5988  001AF4  0EFF               	movlw	255
  5989  001AF6  6E3B               	movwf	drawtext@color+1,c
  5990  001AF8  683A               	setf	drawtext@color,c
  5991  001AFA  0E00               	movlw	0
  5992  001AFC  6E3D               	movwf	drawtext@bg+1,c
  5993  001AFE  0E00               	movlw	0
  5994  001B00  6E3C               	movwf	drawtext@bg,c
  5995  001B02  0E01               	movlw	1
  5996  001B04  6E3E               	movwf	drawtext@size,c
  5997  001B06  0E57               	movlw	87
  5998  001B08  ECB9  F016         	call	_drawtext
  5999                           
  6000                           ;Lab9test.c: 769: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  6001  001B0C  0E95               	movlw	149
  6002  001B0E  6E37               	movwf	drawtext@y,c
  6003  001B10  0EDA               	movlw	low _SW_MODE_Txt
  6004  001B12  6E38               	movwf	drawtext@_text,c
  6005  001B14  0E00               	movlw	high _SW_MODE_Txt
  6006  001B16  6E39               	movwf	drawtext@_text+1,c
  6007  001B18  0EFF               	movlw	255
  6008  001B1A  6E3B               	movwf	drawtext@color+1,c
  6009  001B1C  683A               	setf	drawtext@color,c
  6010  001B1E  0E00               	movlw	0
  6011  001B20  6E3D               	movwf	drawtext@bg+1,c
  6012  001B22  0E00               	movlw	0
  6013  001B24  6E3C               	movwf	drawtext@bg,c
  6014  001B26  0E01               	movlw	1
  6015  001B28  6E3E               	movwf	drawtext@size,c
  6016  001B2A  0E70               	movlw	112
  6017  001B2C  ECB9  F016         	call	_drawtext
  6018                           
  6019                           ;Lab9test.c: 771: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  6020  001B30  0E0A               	movlw	10
  6021  001B32  6E37               	movwf	drawtext@y,c
  6022  001B34  0ED8               	movlw	low _FlashingS_Txt
  6023  001B36  6E38               	movwf	drawtext@_text,c
  6024  001B38  0E00               	movlw	high _FlashingS_Txt
  6025  001B3A  6E39               	movwf	drawtext@_text+1,c
  6026  001B3C  0EFF               	movlw	255
  6027  001B3E  6E3B               	movwf	drawtext@color+1,c
  6028  001B40  683A               	setf	drawtext@color,c
  6029  001B42  0E00               	movlw	0
  6030  001B44  6E3D               	movwf	drawtext@bg+1,c
  6031  001B46  0E00               	movlw	0
  6032  001B48  6E3C               	movwf	drawtext@bg,c
  6033  001B4A  0E01               	movlw	1
  6034  001B4C  6E3E               	movwf	drawtext@size,c
  6035  001B4E  0E64               	movlw	100
  6036  001B50  ECB9  F016         	call	_drawtext
  6037                           
  6038                           ;Lab9test.c: 772: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  6039  001B54  0E0A               	movlw	10
  6040  001B56  6E37               	movwf	drawtext@y,c
  6041  001B58  0ED6               	movlw	low _FlashingR_Txt
  6042  001B5A  6E38               	movwf	drawtext@_text,c
  6043  001B5C  0E00               	movlw	high _FlashingR_Txt
  6044  001B5E  6E39               	movwf	drawtext@_text+1,c
  6045  001B60  0EFF               	movlw	255
  6046  001B62  6E3B               	movwf	drawtext@color+1,c
  6047  001B64  683A               	setf	drawtext@color,c
  6048  001B66  0E00               	movlw	0
  6049  001B68  6E3D               	movwf	drawtext@bg+1,c
  6050  001B6A  0E00               	movlw	0
  6051  001B6C  6E3C               	movwf	drawtext@bg,c
  6052  001B6E  0E01               	movlw	1
  6053  001B70  6E3E               	movwf	drawtext@size,c
  6054  001B72  0E46               	movlw	70
  6055  001B74  ECB9  F016         	call	_drawtext
  6056                           
  6057                           ;Lab9test.c: 774: Do_Init();
  6058  001B78  EC28  F01F         	call	_Do_Init	;wreg free
  6059                           
  6060                           ;Lab9test.c: 777: if (NSPED_SW == 1)
  6061  001B7C  0100               	movlb	0	; () banked
  6062  001B7E  0591               	decf	_NSPED_SW& (0+255),w,b
  6063  001B80  A4D8               	btfss	status,2,c
  6064  001B82  D007               	goto	l7143
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;Lab9test.c: 778: {
  6068                           ;Lab9test.c: 780: printf ("INT0 interrupt pin detected \r\n");
  6069  001B84  0E28               	movlw	low STR_18
  6070  001B86  6E4E               	movwf	printf@f,c
  6071  001B88  0EFF               	movlw	high STR_18
  6072  001B8A  6E4F               	movwf	printf@f+1,c
  6073  001B8C  EC0E  F000         	call	_printf	;wreg free
  6074  001B90  D000               	goto	l7143
  6075  001B92                     l7143:
  6076                           
  6077                           ;Lab9test.c: 781: }
  6078                           ;Lab9test.c: 783: if (EWPED_SW == 1)
  6079  001B92  0100               	movlb	0	; () banked
  6080  001B94  058F               	decf	_EWPED_SW& (0+255),w,b
  6081  001B96  A4D8               	btfss	status,2,c
  6082  001B98  D007               	goto	l7147
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;Lab9test.c: 784: {
  6086                           ;Lab9test.c: 786: printf ("INT1 interrupt pin detected \r\n");
  6087  001B9A  0E47               	movlw	low STR_19
  6088  001B9C  6E4E               	movwf	printf@f,c
  6089  001B9E  0EFF               	movlw	high STR_19
  6090  001BA0  6E4F               	movwf	printf@f+1,c
  6091  001BA2  EC0E  F000         	call	_printf	;wreg free
  6092  001BA6  D000               	goto	l7147
  6093  001BA8                     l7147:
  6094                           
  6095                           ;Lab9test.c: 787: }
  6096                           ;Lab9test.c: 789: if (FLASHING_REQUEST == 1)
  6097  001BA8  0100               	movlb	0	; () banked
  6098  001BAA  0590               	decf	_FLASHING_REQUEST& (0+255),w,b
  6099  001BAC  A4D8               	btfss	status,2,c
  6100  001BAE  D007               	goto	l560
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;Lab9test.c: 790: {
  6104                           ;Lab9test.c: 791: printf ("INT2 interrupt pin detected \r\n");
  6105  001BB0  0E66               	movlw	low STR_20
  6106  001BB2  6E4E               	movwf	printf@f,c
  6107  001BB4  0EFF               	movlw	high STR_20
  6108  001BB6  6E4F               	movwf	printf@f+1,c
  6109  001BB8  EC0E  F000         	call	_printf	;wreg free
  6110  001BBC  D000               	goto	l560
  6111  001BBE                     l560:
  6112  001BBE  0012               	return		;funcret
  6113  001BC0                     __end_of_update_LCD_misc:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon2	equ	0xFF1
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           fsr1l	equ	0xFE1
  6126                           indf2	equ	0xFDF
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function _printf *****************
  6132 ;; Defined at:
  6133 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  f               2   77[COMRAM] PTR const unsigned char 
  6136 ;;		 -> STR_20(31), STR_19(31), STR_18(31), STR_17(19), 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  tmpval          4    9[BANK0 ] struct .
  6139 ;;  val             4    5[BANK0 ] unsigned long 
  6140 ;;  fval            3   19[BANK0 ] unsigned long 
  6141 ;;  cp              3    0        PTR const unsigned char 
  6142 ;;  prec            2   22[BANK0 ] int 
  6143 ;;  width           2   17[BANK0 ] int 
  6144 ;;  flag            2   15[BANK0 ] unsigned short 
  6145 ;;  exp             2   13[BANK0 ] int 
  6146 ;;  ap              2    3[BANK0 ] PTR void [1]
  6147 ;;		 -> ?_printf(2), 
  6148 ;;  len             2    0        unsigned int 
  6149 ;;  c               1   24[BANK0 ] char 
  6150 ;;  d               1    0        unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  2   77[COMRAM] int 
  6153 ;; Registers used:
  6154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6160 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6161 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;      Totals:        11      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;Total ram usage:       36 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    5
  6167 ;; This function calls:
  6168 ;;		___awdiv
  6169 ;;		___ftadd
  6170 ;;		___ftge
  6171 ;;		___ftmul
  6172 ;;		___ftneg
  6173 ;;		___ftsub
  6174 ;;		___fttol
  6175 ;;		___lldiv
  6176 ;;		___llmod
  6177 ;;		___lltoft
  6178 ;;		___wmul
  6179 ;;		__div_to_l_
  6180 ;;		__tdiv_to_l_
  6181 ;;		_fround
  6182 ;;		_isdigit
  6183 ;;		_putch
  6184 ;;		_scale
  6185 ;; This function is called by:
  6186 ;;		_update_LCD_misc
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text20
  6191  00001C                     __ptext20:
  6192                           	opt stack 0
  6193  00001C                     _printf:
  6194                           	opt stack 21
  6195                           
  6196                           ;doprnt.c: 466: va_list ap;
  6197                           ;doprnt.c: 499: signed char c;
  6198                           ;doprnt.c: 501: int width;
  6199                           ;doprnt.c: 504: int prec;
  6200                           ;doprnt.c: 508: unsigned short flag;
  6201                           ;doprnt.c: 515: char d;
  6202                           ;doprnt.c: 516: double fval;
  6203                           ;doprnt.c: 517: int exp;
  6204                           ;doprnt.c: 523: union {
  6205                           ;doprnt.c: 524: unsigned long vd;
  6206                           ;doprnt.c: 525: double integ;
  6207                           ;doprnt.c: 526: } tmpval;
  6208                           ;doprnt.c: 528: unsigned long val;
  6209                           ;doprnt.c: 529: unsigned len;
  6210                           ;doprnt.c: 530: const char * cp;
  6211                           ;doprnt.c: 533: *ap = __va_start();
  6212                           
  6213                           ;incstack = 0
  6214  00001C  0E50               	movlw	low (?_printf+2)
  6215  00001E  0100               	movlb	0	; () banked
  6216  000020  6FE3               	movwf	printf@ap& (0+255),b
  6217  000022  0E00               	movlw	high (?_printf+2)
  6218  000024  0100               	movlb	0	; () banked
  6219  000026  6FE4               	movwf	(printf@ap+1)& (0+255),b
  6220                           
  6221                           ;doprnt.c: 536: while(c = *f++) {
  6222  000028  EF4B  F005         	goto	l6935
  6223  00002C                     l6673:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;doprnt.c: 538: if(c != '%')
  6227  00002C  0E25               	movlw	37
  6228  00002E  0100               	movlb	0	; () banked
  6229  000030  19F8               	xorwf	printf@c& (0+255),w,b
  6230  000032  B4D8               	btfsc	status,2,c
  6231  000034  D006               	goto	l6677
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;doprnt.c: 540: {
  6235                           ;doprnt.c: 541: (putch(c) );
  6236  000036  0100               	movlb	0	; () banked
  6237  000038  51F8               	movf	printf@c& (0+255),w,b
  6238  00003A  ECD2  F01F         	call	_putch
  6239                           
  6240                           ;doprnt.c: 542: continue;
  6241  00003E  EF4B  F005         	goto	l6935
  6242  000042                     l6677:
  6243                           
  6244                           ;doprnt.c: 543: }
  6245                           ;doprnt.c: 546: width = 0;
  6246  000042  0E00               	movlw	0
  6247  000044  0100               	movlb	0	; () banked
  6248  000046  6FF2               	movwf	(printf@width+1)& (0+255),b
  6249  000048  0E00               	movlw	0
  6250  00004A  6FF1               	movwf	printf@width& (0+255),b
  6251                           
  6252                           ;doprnt.c: 548: flag = 0;
  6253  00004C  0E00               	movlw	0
  6254  00004E  0100               	movlb	0	; () banked
  6255  000050  6FF0               	movwf	(printf@flag+1)& (0+255),b
  6256  000052  0E00               	movlw	0
  6257  000054  6FEF               	movwf	printf@flag& (0+255),b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;doprnt.c: 551: switch(*f) {
  6261                           
  6262                           ;doprnt.c: 550: for(;;) {
  6263  000056  D006               	goto	l6683
  6264  000058                     l6679:
  6265                           
  6266                           ;doprnt.c: 580: flag |= 0x04;
  6267  000058  0100               	movlb	0	; () banked
  6268  00005A  85EF               	bsf	printf@flag& (0+255),2,b
  6269                           
  6270                           ;doprnt.c: 581: f++;
  6271  00005C  4A4E               	infsnz	printf@f,f,c
  6272  00005E  2A4F               	incf	printf@f+1,f,c
  6273                           
  6274                           ;doprnt.c: 582: continue;
  6275  000060  D001               	goto	l6683
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;doprnt.c: 584: }
  6279  000062  D00B               	goto	l6685
  6280  000064                     l6683:
  6281  000064  C04E  FFF6         	movff	printf@f,tblptrl
  6282  000068  C04F  FFF7         	movff	printf@f+1,tblptrh
  6283  00006C                     	if	0	;tblptru may be non-zero
  6284  00006C                     	endif
  6285  00006C                     	if	0	;tblptru may be non-zero
  6286  00006C                     	endif
  6287  00006C  0008               	tblrd		*
  6288  00006E  50F5               	movf	tablat,w,c
  6289                           
  6290                           ; Switch size 1, requested type "space"
  6291                           ; Number of cases is 1, Range of values is 48 to 48
  6292                           ; switch strategies available:
  6293                           ; Name         Instructions Cycles
  6294                           ; simple_byte            4     3 (average)
  6295                           ;	Chosen strategy is simple_byte
  6296  000070  0A30               	xorlw	48	; case 48
  6297  000072  B4D8               	btfsc	status,2,c
  6298  000074  D7F1               	goto	l6679
  6299                           
  6300                           ;doprnt.c: 585: break;
  6301  000076  D001               	goto	l6685
  6302                           
  6303                           ;doprnt.c: 586: }
  6304  000078  D7F5               	goto	l6683
  6305  00007A                     l6685:
  6306                           
  6307                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6308  00007A  C04E  FFF6         	movff	printf@f,tblptrl
  6309  00007E  C04F  FFF7         	movff	printf@f+1,tblptrh
  6310  000082                     	if	0	;tblptru may be non-zero
  6311  000082                     	endif
  6312  000082                     	if	0	;tblptru may be non-zero
  6313  000082                     	endif
  6314  000082  0008               	tblrd		*
  6315  000084  50F5               	movf	tablat,w,c
  6316  000086  EC4D  F01F         	call	_isdigit
  6317  00008A  A0D8               	btfss	status,0,c
  6318  00008C  D038               	goto	l6697
  6319                           
  6320                           ;doprnt.c: 598: width = 0;
  6321  00008E  0E00               	movlw	0
  6322  000090  0100               	movlb	0	; () banked
  6323  000092  6FF2               	movwf	(printf@width+1)& (0+255),b
  6324  000094  0E00               	movlw	0
  6325  000096  6FF1               	movwf	printf@width& (0+255),b
  6326  000098  D000               	goto	l6689
  6327  00009A                     l6689:
  6328                           
  6329                           ;doprnt.c: 600: width *= 10;
  6330  00009A  C0F1  F01D         	movff	printf@width,___wmul@multiplier
  6331  00009E  C0F2  F01E         	movff	printf@width+1,___wmul@multiplier+1
  6332  0000A2  0E00               	movlw	0
  6333  0000A4  6E20               	movwf	___wmul@multiplicand+1,c
  6334  0000A6  0E0A               	movlw	10
  6335  0000A8  6E1F               	movwf	___wmul@multiplicand,c
  6336  0000AA  EC01  F01F         	call	___wmul	;wreg free
  6337  0000AE  C01D  F0F1         	movff	?___wmul,printf@width
  6338  0000B2  C01E  F0F2         	movff	?___wmul+1,printf@width+1
  6339                           
  6340                           ;doprnt.c: 601: width += *f++ - '0';
  6341  0000B6  0ED0               	movlw	208
  6342  0000B8  6E53               	movwf	??_printf& (0+255),c
  6343  0000BA  0EFF               	movlw	255
  6344  0000BC  6E54               	movwf	(??_printf+1)& (0+255),c
  6345  0000BE  C04E  FFF6         	movff	printf@f,tblptrl
  6346  0000C2  C04F  FFF7         	movff	printf@f+1,tblptrh
  6347  0000C6                     	if	0	;tblptru may be non-zero
  6348  0000C6                     	endif
  6349  0000C6                     	if	0	;tblptru may be non-zero
  6350  0000C6                     	endif
  6351  0000C6  0008               	tblrd		*
  6352  0000C8  50F5               	movf	tablat,w,c
  6353  0000CA  6E55               	movwf	(??_printf+2)& (0+255),c
  6354  0000CC  6A56               	clrf	(??_printf+3)& (0+255),c
  6355  0000CE  5053               	movf	??_printf,w,c
  6356  0000D0  2655               	addwf	??_printf+2,f,c
  6357  0000D2  5054               	movf	??_printf+1,w,c
  6358  0000D4  2256               	addwfc	??_printf+3,f,c
  6359  0000D6  5055               	movf	??_printf+2,w,c
  6360  0000D8  0100               	movlb	0	; () banked
  6361  0000DA  27F1               	addwf	printf@width& (0+255),f,b
  6362  0000DC  5056               	movf	??_printf+3,w,c
  6363  0000DE  0100               	movlb	0	; () banked
  6364  0000E0  23F2               	addwfc	(printf@width+1)& (0+255),f,b
  6365                           
  6366                           ; BSR set to: 0
  6367  0000E2  4A4E               	infsnz	printf@f,f,c
  6368  0000E4  2A4F               	incf	printf@f+1,f,c
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6372  0000E6  C04E  FFF6         	movff	printf@f,tblptrl
  6373  0000EA  C04F  FFF7         	movff	printf@f+1,tblptrh
  6374  0000EE                     	if	0	;tblptru may be non-zero
  6375  0000EE                     	endif
  6376  0000EE                     	if	0	;tblptru may be non-zero
  6377  0000EE                     	endif
  6378  0000EE  0008               	tblrd		*
  6379  0000F0  50F5               	movf	tablat,w,c
  6380  0000F2  EC4D  F01F         	call	_isdigit
  6381  0000F6  A0D8               	btfss	status,0,c
  6382  0000F8  D002               	goto	l6697
  6383  0000FA  D7CF               	goto	l6689
  6384  0000FC  D000               	goto	l6697
  6385  0000FE                     l6697:
  6386                           
  6387                           ;doprnt.c: 608: }
  6388                           ;doprnt.c: 611: if(*f == '.') {
  6389  0000FE  C04E  FFF6         	movff	printf@f,tblptrl
  6390  000102  C04F  FFF7         	movff	printf@f+1,tblptrh
  6391  000106                     	if	0	;tblptru may be non-zero
  6392  000106                     	endif
  6393  000106                     	if	0	;tblptru may be non-zero
  6394  000106                     	endif
  6395  000106  0008               	tblrd		*
  6396  000108  50F5               	movf	tablat,w,c
  6397  00010A  0A2E               	xorlw	46
  6398  00010C  A4D8               	btfss	status,2,c
  6399  00010E  D034               	goto	l6709
  6400                           
  6401                           ;doprnt.c: 612: flag |= 0x4000;
  6402  000110  0100               	movlb	0	; () banked
  6403  000112  8DF0               	bsf	(printf@flag+1)& (0+255),6,b
  6404                           
  6405                           ;doprnt.c: 613: f++;
  6406  000114  4A4E               	infsnz	printf@f,f,c
  6407  000116  2A4F               	incf	printf@f+1,f,c
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;doprnt.c: 620: {
  6411                           ;doprnt.c: 621: prec = 0;
  6412  000118  0E00               	movlw	0
  6413  00011A  0100               	movlb	0	; () banked
  6414  00011C  6FF7               	movwf	(printf@prec+1)& (0+255),b
  6415  00011E  0E00               	movlw	0
  6416  000120  6FF6               	movwf	printf@prec& (0+255),b
  6417                           
  6418                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6419  000122  D01E               	goto	l6707
  6420  000124                     l6703:
  6421                           
  6422                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6423  000124  C0F6  F01D         	movff	printf@prec,___wmul@multiplier
  6424  000128  C0F7  F01E         	movff	printf@prec+1,___wmul@multiplier+1
  6425  00012C  0E00               	movlw	0
  6426  00012E  6E20               	movwf	___wmul@multiplicand+1,c
  6427  000130  0E0A               	movlw	10
  6428  000132  6E1F               	movwf	___wmul@multiplicand,c
  6429  000134  EC01  F01F         	call	___wmul	;wreg free
  6430  000138  C04E  FFF6         	movff	printf@f,tblptrl
  6431  00013C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6432  000140                     	if	0	;tblptru may be non-zero
  6433  000140                     	endif
  6434  000140                     	if	0	;tblptru may be non-zero
  6435  000140                     	endif
  6436  000140  0008               	tblrd		*
  6437  000142  50F5               	movf	tablat,w,c
  6438  000144  261D               	addwf	?___wmul,f,c
  6439  000146  0E00               	movlw	0
  6440  000148  221E               	addwfc	?___wmul+1,f,c
  6441  00014A  0ED0               	movlw	208
  6442  00014C  241D               	addwf	?___wmul,w,c
  6443  00014E  0100               	movlb	0	; () banked
  6444  000150  6FF6               	movwf	printf@prec& (0+255),b
  6445  000152  0EFF               	movlw	255
  6446  000154  201E               	addwfc	?___wmul+1,w,c
  6447  000156  0100               	movlb	0	; () banked
  6448  000158  6FF7               	movwf	(printf@prec+1)& (0+255),b
  6449                           
  6450                           ; BSR set to: 0
  6451  00015A  4A4E               	infsnz	printf@f,f,c
  6452  00015C  2A4F               	incf	printf@f+1,f,c
  6453  00015E  D000               	goto	l6707
  6454  000160                     l6707:
  6455                           
  6456                           ; BSR set to: 0
  6457  000160  C04E  FFF6         	movff	printf@f,tblptrl
  6458  000164  C04F  FFF7         	movff	printf@f+1,tblptrh
  6459  000168                     	if	0	;tblptru may be non-zero
  6460  000168                     	endif
  6461  000168                     	if	0	;tblptru may be non-zero
  6462  000168                     	endif
  6463  000168  0008               	tblrd		*
  6464  00016A  50F5               	movf	tablat,w,c
  6465  00016C  EC4D  F01F         	call	_isdigit
  6466  000170  A0D8               	btfss	status,0,c
  6467  000172  D012               	goto	l6717
  6468  000174  D7D7               	goto	l6703
  6469                           
  6470                           ;doprnt.c: 624: }
  6471                           ;doprnt.c: 625: } else {
  6472  000176  D010               	goto	l6717
  6473  000178                     l6709:
  6474                           
  6475                           ;doprnt.c: 626: prec = 0;
  6476  000178  0E00               	movlw	0
  6477  00017A  0100               	movlb	0	; () banked
  6478  00017C  6FF7               	movwf	(printf@prec+1)& (0+255),b
  6479  00017E  0E00               	movlw	0
  6480  000180  6FF6               	movwf	printf@prec& (0+255),b
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;doprnt.c: 628: flag |= 0x1000;
  6484  000182  0100               	movlb	0	; () banked
  6485  000184  89F0               	bsf	(printf@flag+1)& (0+255),4,b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;doprnt.c: 630: }
  6489                           ;doprnt.c: 635: switch(c = *f++) {
  6490  000186  D008               	goto	l6717
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;doprnt.c: 638: goto alldone;
  6494                           
  6495                           ;doprnt.c: 637: case 0:
  6496  000188  EF5B  F005         	goto	l717
  6497  00018C                     l6713:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;doprnt.c: 663: flag |= 0x400;
  6501  00018C  0100               	movlb	0	; () banked
  6502  00018E  85F0               	bsf	(printf@flag+1)& (0+255),2,b
  6503                           
  6504                           ;doprnt.c: 664: break;
  6505  000190  D017               	goto	l6719
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;doprnt.c: 813: continue;
  6509                           
  6510                           ;doprnt.c: 802: default:
  6511  000192  EF4B  F005         	goto	l6935
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;doprnt.c: 822: }
  6515  000196  D014               	goto	l6719
  6516  000198                     l6717:
  6517  000198  C04E  FFF6         	movff	printf@f,tblptrl
  6518  00019C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6519  0001A0  4A4E               	infsnz	printf@f,f,c
  6520  0001A2  2A4F               	incf	printf@f+1,f,c
  6521  0001A4                     	if	0	;tblptru may be non-zero
  6522  0001A4                     	endif
  6523  0001A4                     	if	0	;tblptru may be non-zero
  6524  0001A4                     	endif
  6525  0001A4  0008               	tblrd		*
  6526  0001A6  CFF5 F0F8          	movff	tablat,printf@c
  6527  0001AA  0100               	movlb	0	; () banked
  6528  0001AC  51F8               	movf	printf@c& (0+255),w,b
  6529                           
  6530                           ; Switch size 1, requested type "space"
  6531                           ; Number of cases is 2, Range of values is 0 to 102
  6532                           ; switch strategies available:
  6533                           ; Name         Instructions Cycles
  6534                           ; simple_byte            7     4 (average)
  6535                           ;	Chosen strategy is simple_byte
  6536  0001AE  0A00               	xorlw	0	; case 0
  6537  0001B0  B4D8               	btfsc	status,2,c
  6538  0001B2  EF5B  F005         	goto	l717
  6539  0001B6  0A66               	xorlw	102	; case 102
  6540  0001B8  B4D8               	btfsc	status,2,c
  6541  0001BA  D7E8               	goto	l6713
  6542  0001BC  EF4B  F005         	goto	l6935
  6543  0001C0                     l6719:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;doprnt.c: 825: if(flag & (0x700)) {
  6547  0001C0  0E07               	movlw	7
  6548  0001C2  0100               	movlb	0	; () banked
  6549  0001C4  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  6550  0001C6  B4D8               	btfsc	status,2,c
  6551  0001C8  D385               	goto	l6879
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;doprnt.c: 827: if(flag & 0x1000)
  6555  0001CA  0100               	movlb	0	; () banked
  6556  0001CC  A9F0               	btfss	(printf@flag+1)& (0+255),4,b
  6557  0001CE  D006               	goto	l6725
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;doprnt.c: 829: prec = 6;
  6561  0001D0  0E00               	movlw	0
  6562  0001D2  0100               	movlb	0	; () banked
  6563  0001D4  6FF7               	movwf	(printf@prec+1)& (0+255),b
  6564  0001D6  0E06               	movlw	6
  6565  0001D8  6FF6               	movwf	printf@prec& (0+255),b
  6566  0001DA  D000               	goto	l6725
  6567  0001DC                     l6725:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6571  0001DC  C0E3  FFD9         	movff	printf@ap,fsr2l
  6572  0001E0  C0E4  FFDA         	movff	printf@ap+1,fsr2h
  6573  0001E4  CFDE F0F3          	movff	postinc2,printf@fval
  6574  0001E8  CFDE F0F4          	movff	postinc2,printf@fval+1
  6575  0001EC  CFDD F0F5          	movff	postdec2,printf@fval+2
  6576                           
  6577                           ; BSR set to: 0
  6578  0001F0  0E03               	movlw	3
  6579  0001F2  0100               	movlb	0	; () banked
  6580  0001F4  27E3               	addwf	printf@ap& (0+255),f,b
  6581  0001F6  0E00               	movlw	0
  6582  0001F8  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;doprnt.c: 831: if(fval < 0.0) {
  6586  0001FA  0100               	movlb	0	; () banked
  6587  0001FC  AFF5               	btfss	(printf@fval+2)& (0+255),7,b
  6588  0001FE  D012               	goto	l6735
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;doprnt.c: 832: fval = -fval;
  6592  000200  C0F3  F00F         	movff	printf@fval,___ftneg@f1
  6593  000204  C0F4  F010         	movff	printf@fval+1,___ftneg@f1+1
  6594  000208  C0F5  F011         	movff	printf@fval+2,___ftneg@f1+2
  6595  00020C  EC3B  F01F         	call	___ftneg	;wreg free
  6596  000210  C00F  F0F3         	movff	?___ftneg,printf@fval
  6597  000214  C010  F0F4         	movff	?___ftneg+1,printf@fval+1
  6598  000218  C011  F0F5         	movff	?___ftneg+2,printf@fval+2
  6599                           
  6600                           ;doprnt.c: 833: flag |= 0x03;
  6601  00021C  0E03               	movlw	3
  6602  00021E  0100               	movlb	0	; () banked
  6603  000220  13EF               	iorwf	printf@flag& (0+255),f,b
  6604  000222  D000               	goto	l6735
  6605  000224                     l6735:
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;doprnt.c: 834: }
  6609                           ;doprnt.c: 835: exp = 0;
  6610  000224  0E00               	movlw	0
  6611  000226  0100               	movlb	0	; () banked
  6612  000228  6FEE               	movwf	(printf@exp+1)& (0+255),b
  6613  00022A  0E00               	movlw	0
  6614  00022C  6FED               	movwf	printf@exp& (0+255),b
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;doprnt.c: 836: if( fval!=0) {
  6618  00022E  0100               	movlb	0	; () banked
  6619  000230  51F3               	movf	printf@fval& (0+255),w,b
  6620  000232  0100               	movlb	0	; () banked
  6621  000234  11F4               	iorwf	(printf@fval+1)& (0+255),w,b
  6622  000236  0100               	movlb	0	; () banked
  6623  000238  11F5               	iorwf	(printf@fval+2)& (0+255),w,b
  6624  00023A  B4D8               	btfsc	status,2,c
  6625  00023C  D08D               	goto	l6763
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6629  00023E  0E82               	movlw	130
  6630  000240  6E53               	movwf	??_printf& (0+255),c
  6631  000242  0EFF               	movlw	255
  6632  000244  6E54               	movwf	(??_printf+1)& (0+255),c
  6633  000246  C0F3  F055         	movff	printf@fval,??_printf+2
  6634  00024A  C0F4  F056         	movff	printf@fval+1,??_printf+3
  6635  00024E  C0F5  F057         	movff	printf@fval+2,??_printf+4
  6636  000252  C0F6  F058         	movff	printf@fval+3,??_printf+5
  6637  000256  0E10               	movlw	16
  6638  000258  D005               	goto	u6690
  6639  00025A                     u6695:
  6640  00025A  90D8               	bcf	status,0,c
  6641  00025C  3258               	rrcf	??_printf+5,f,c
  6642  00025E  3257               	rrcf	??_printf+4,f,c
  6643  000260  3256               	rrcf	??_printf+3,f,c
  6644  000262  3255               	rrcf	??_printf+2,f,c
  6645  000264                     u6690:
  6646  000264  2EE8               	decfsz	wreg,f,c
  6647  000266  D7F9               	goto	u6695
  6648  000268  5055               	movf	??_printf+2,w,c
  6649  00026A  2453               	addwf	??_printf,w,c
  6650  00026C  0100               	movlb	0	; () banked
  6651  00026E  6FED               	movwf	printf@exp& (0+255),b
  6652  000270  0E00               	movlw	0
  6653  000272  2054               	addwfc	??_printf+1,w,c
  6654  000274  0100               	movlb	0	; () banked
  6655  000276  6FEE               	movwf	(printf@exp+1)& (0+255),b
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;doprnt.c: 838: exp--;
  6659  000278  0100               	movlb	0	; () banked
  6660  00027A  07ED               	decf	printf@exp& (0+255),f,b
  6661  00027C  A0D8               	btfss	status,0,c
  6662  00027E  07EE               	decf	(printf@exp+1)& (0+255),f,b
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;doprnt.c: 839: exp *= 3;
  6666  000280  C0ED  F01D         	movff	printf@exp,___wmul@multiplier
  6667  000284  C0EE  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  6668  000288  0E00               	movlw	0
  6669  00028A  6E20               	movwf	___wmul@multiplicand+1,c
  6670  00028C  0E03               	movlw	3
  6671  00028E  6E1F               	movwf	___wmul@multiplicand,c
  6672  000290  EC01  F01F         	call	___wmul	;wreg free
  6673  000294  C01D  F0ED         	movff	?___wmul,printf@exp
  6674  000298  C01E  F0EE         	movff	?___wmul+1,printf@exp+1
  6675                           
  6676                           ;doprnt.c: 840: exp /= 10;
  6677  00029C  C0ED  F015         	movff	printf@exp,___awdiv@dividend
  6678  0002A0  C0EE  F016         	movff	printf@exp+1,___awdiv@dividend+1
  6679  0002A4  0E00               	movlw	0
  6680  0002A6  6E18               	movwf	___awdiv@divisor+1,c
  6681  0002A8  0E0A               	movlw	10
  6682  0002AA  6E17               	movwf	___awdiv@divisor,c
  6683  0002AC  EC68  F019         	call	___awdiv	;wreg free
  6684  0002B0  C015  F0ED         	movff	?___awdiv,printf@exp
  6685  0002B4  C016  F0EE         	movff	?___awdiv+1,printf@exp+1
  6686                           
  6687                           ;doprnt.c: 841: if(exp < 0)
  6688  0002B8  0100               	movlb	0	; () banked
  6689  0002BA  AFEE               	btfss	(printf@exp+1)& (0+255),7,b
  6690  0002BC  D005               	goto	l6751
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;doprnt.c: 842: exp--;
  6694  0002BE  0100               	movlb	0	; () banked
  6695  0002C0  07ED               	decf	printf@exp& (0+255),f,b
  6696  0002C2  A0D8               	btfss	status,0,c
  6697  0002C4  07EE               	decf	(printf@exp+1)& (0+255),f,b
  6698  0002C6  D000               	goto	l6751
  6699  0002C8                     l6751:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6703  0002C8  0100               	movlb	0	; () banked
  6704  0002CA  51ED               	movf	printf@exp& (0+255),w,b
  6705  0002CC  0800               	sublw	0
  6706  0002CE  ECEB  F008         	call	_scale
  6707  0002D2  C032  F0E9         	movff	?_scale,printf@tmpval
  6708  0002D6  C033  F0EA         	movff	?_scale+1,printf@tmpval+1
  6709  0002DA  C034  F0EB         	movff	?_scale+2,printf@tmpval+2
  6710                           
  6711                           ;doprnt.c: 847: tmpval.integ *= fval;
  6712  0002DE  C0E9  F023         	movff	printf@tmpval,___ftmul@f1
  6713  0002E2  C0EA  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  6714  0002E6  C0EB  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  6715  0002EA  C0F3  F026         	movff	printf@fval,___ftmul@f2
  6716  0002EE  C0F4  F027         	movff	printf@fval+1,___ftmul@f2+1
  6717  0002F2  C0F5  F028         	movff	printf@fval+2,___ftmul@f2+2
  6718  0002F6  EC6C  F014         	call	___ftmul	;wreg free
  6719  0002FA  C023  F0E9         	movff	?___ftmul,printf@tmpval
  6720  0002FE  C024  F0EA         	movff	?___ftmul+1,printf@tmpval+1
  6721  000302  C025  F0EB         	movff	?___ftmul+2,printf@tmpval+2
  6722                           
  6723                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6724  000306  C0E9  F00F         	movff	printf@tmpval,___ftge@ff1
  6725  00030A  C0EA  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6726  00030E  C0EB  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6727  000312  0E00               	movlw	0
  6728  000314  6E12               	movwf	___ftge@ff2,c
  6729  000316  0E80               	movlw	128
  6730  000318  6E13               	movwf	___ftge@ff2+1,c
  6731  00031A  0E3F               	movlw	63
  6732  00031C  6E14               	movwf	___ftge@ff2+2,c
  6733  00031E  EC1D  F019         	call	___ftge	;wreg free
  6734  000322  B0D8               	btfsc	status,0,c
  6735  000324  D005               	goto	l6759
  6736                           
  6737                           ;doprnt.c: 849: exp--;
  6738  000326  0100               	movlb	0	; () banked
  6739  000328  07ED               	decf	printf@exp& (0+255),f,b
  6740  00032A  A0D8               	btfss	status,0,c
  6741  00032C  07EE               	decf	(printf@exp+1)& (0+255),f,b
  6742  00032E  D014               	goto	l6763
  6743  000330                     l6759:
  6744                           
  6745                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6746  000330  C0E9  F00F         	movff	printf@tmpval,___ftge@ff1
  6747  000334  C0EA  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6748  000338  C0EB  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6749  00033C  0E00               	movlw	0
  6750  00033E  6E12               	movwf	___ftge@ff2,c
  6751  000340  0E20               	movlw	32
  6752  000342  6E13               	movwf	___ftge@ff2+1,c
  6753  000344  0E41               	movlw	65
  6754  000346  6E14               	movwf	___ftge@ff2+2,c
  6755  000348  EC1D  F019         	call	___ftge	;wreg free
  6756  00034C  A0D8               	btfss	status,0,c
  6757  00034E  D004               	goto	l6763
  6758                           
  6759                           ;doprnt.c: 851: exp++;
  6760  000350  0100               	movlb	0	; () banked
  6761  000352  4BED               	infsnz	printf@exp& (0+255),f,b
  6762  000354  2BEE               	incf	(printf@exp+1)& (0+255),f,b
  6763                           
  6764                           ; BSR set to: 0
  6765                           
  6766                           ; BSR set to: 0
  6767  000356  D000               	goto	l6763
  6768  000358                     l6763:
  6769                           
  6770                           ;doprnt.c: 852: }
  6771                           ;doprnt.c: 1112: if(prec <= 12)
  6772  000358  0100               	movlb	0	; () banked
  6773  00035A  BFF7               	btfsc	(printf@prec+1)& (0+255),7,b
  6774  00035C  D008               	goto	l6765
  6775  00035E  0100               	movlb	0	; () banked
  6776  000360  51F7               	movf	(printf@prec+1)& (0+255),w,b
  6777  000362  E11E               	bnz	l6767
  6778  000364  0E0D               	movlw	13
  6779  000366  0100               	movlb	0	; () banked
  6780  000368  5DF6               	subwf	printf@prec& (0+255),w,b
  6781  00036A  B0D8               	btfsc	status,0,c
  6782  00036C  D019               	goto	l6767
  6783  00036E                     l6765:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;doprnt.c: 1113: fval += fround(prec);
  6787  00036E  C0F3  F03C         	movff	printf@fval,___ftadd@f1
  6788  000372  C0F4  F03D         	movff	printf@fval+1,___ftadd@f1+1
  6789  000376  C0F5  F03E         	movff	printf@fval+2,___ftadd@f1+2
  6790  00037A  0100               	movlb	0	; () banked
  6791  00037C  51F6               	movf	printf@prec& (0+255),w,b
  6792  00037E  ECE0  F00D         	call	_fround
  6793  000382  C032  F03F         	movff	?_fround,___ftadd@f2
  6794  000386  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  6795  00038A  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  6796  00038E  EC02  F00F         	call	___ftadd	;wreg free
  6797  000392  C03C  F0F3         	movff	?___ftadd,printf@fval
  6798  000396  C03D  F0F4         	movff	?___ftadd+1,printf@fval+1
  6799  00039A  C03E  F0F5         	movff	?___ftadd+2,printf@fval+2
  6800  00039E  D000               	goto	l6767
  6801  0003A0                     l6767:
  6802                           
  6803                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6804  0003A0  0100               	movlb	0	; () banked
  6805  0003A2  BFEE               	btfsc	(printf@exp+1)& (0+255),7,b
  6806  0003A4  D008               	goto	l6769
  6807  0003A6  0100               	movlb	0	; () banked
  6808  0003A8  51EE               	movf	(printf@exp+1)& (0+255),w,b
  6809  0003AA  E128               	bnz	l6775
  6810  0003AC  0E0A               	movlw	10
  6811  0003AE  0100               	movlb	0	; () banked
  6812  0003B0  5DED               	subwf	printf@exp& (0+255),w,b
  6813  0003B2  B0D8               	btfsc	status,0,c
  6814  0003B4  D023               	goto	l6775
  6815  0003B6                     l6769:
  6816                           
  6817                           ; BSR set to: 0
  6818  0003B6  0100               	movlb	0	; () banked
  6819  0003B8  51F3               	movf	printf@fval& (0+255),w,b
  6820  0003BA  0100               	movlb	0	; () banked
  6821  0003BC  11F4               	iorwf	(printf@fval+1)& (0+255),w,b
  6822  0003BE  0100               	movlb	0	; () banked
  6823  0003C0  11F5               	iorwf	(printf@fval+2)& (0+255),w,b
  6824  0003C2  B4D8               	btfsc	status,2,c
  6825  0003C4  D077               	goto	l6789
  6826                           
  6827                           ; BSR set to: 0
  6828  0003C6  C0F3  F039         	movff	printf@fval,___fttol@f1
  6829  0003CA  C0F4  F03A         	movff	printf@fval+1,___fttol@f1+1
  6830  0003CE  C0F5  F03B         	movff	printf@fval+2,___fttol@f1+2
  6831  0003D2  ECD5  F015         	call	___fttol	;wreg free
  6832  0003D6  5039               	movf	?___fttol,w,c
  6833  0003D8  103A               	iorwf	?___fttol+1,w,c
  6834  0003DA  103B               	iorwf	?___fttol+2,w,c
  6835  0003DC  103C               	iorwf	?___fttol+3,w,c
  6836  0003DE  A4D8               	btfss	status,2,c
  6837  0003E0  D069               	goto	l6789
  6838  0003E2  0100               	movlb	0	; () banked
  6839  0003E4  BFEE               	btfsc	(printf@exp+1)& (0+255),7,b
  6840  0003E6  D066               	goto	l6789
  6841  0003E8  0100               	movlb	0	; () banked
  6842  0003EA  51EE               	movf	(printf@exp+1)& (0+255),w,b
  6843  0003EC  E107               	bnz	l6775
  6844  0003EE  0E02               	movlw	2
  6845  0003F0  0100               	movlb	0	; () banked
  6846  0003F2  5DED               	subwf	printf@exp& (0+255),w,b
  6847  0003F4  B0D8               	btfsc	status,0,c
  6848  0003F6  D002               	goto	l6775
  6849  0003F8  D05D               	goto	l6789
  6850  0003FA  D000               	goto	l6775
  6851  0003FC                     l6775:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6855  0003FC  C0E9  F00F         	movff	printf@tmpval,___ftge@ff1
  6856  000400  C0EA  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  6857  000404  C0EB  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  6858  000408  0E70               	movlw	112
  6859  00040A  6E12               	movwf	___ftge@ff2,c
  6860  00040C  0E89               	movlw	137
  6861  00040E  6E13               	movwf	___ftge@ff2+1,c
  6862  000410  0E40               	movlw	64
  6863  000412  6E14               	movwf	___ftge@ff2+2,c
  6864  000414  EC1D  F019         	call	___ftge	;wreg free
  6865  000418  B0D8               	btfsc	status,0,c
  6866  00041A  D003               	goto	l6779
  6867                           
  6868                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6869  00041C  0100               	movlb	0	; () banked
  6870  00041E  0EF7               	movlw	247
  6871  000420  D002               	goto	L9
  6872  000422                     l6779:
  6873                           
  6874                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6875  000422  0100               	movlb	0	; () banked
  6876  000424  0EF8               	movlw	248
  6877  000426                     L9:
  6878  000426  27ED               	addwf	printf@exp& (0+255),f,b
  6879  000428  0EFF               	movlw	255
  6880  00042A  23EE               	addwfc	(printf@exp+1)& (0+255),f,b
  6881  00042C  D000               	goto	l6781
  6882  00042E                     l6781:
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;doprnt.c: 1124: }
  6886                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6887  00042E  0100               	movlb	0	; () banked
  6888  000430  51ED               	movf	printf@exp& (0+255),w,b
  6889  000432  ECEB  F008         	call	_scale
  6890  000436  C032  F0E9         	movff	?_scale,printf@tmpval
  6891  00043A  C033  F0EA         	movff	?_scale+1,printf@tmpval+1
  6892  00043E  C034  F0EB         	movff	?_scale+2,printf@tmpval+2
  6893                           
  6894                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6895  000442  D017               	goto	l6785
  6896  000444  C0F3  F00F         	movff	printf@fval,__div_to_l_@f1
  6897  000448  C0F4  F010         	movff	printf@fval+1,__div_to_l_@f1+1
  6898  00044C  C0F5  F011         	movff	printf@fval+2,__div_to_l_@f1+2
  6899  000450  C0E9  F012         	movff	printf@tmpval,__div_to_l_@f2
  6900  000454  C0EA  F013         	movff	printf@tmpval+1,__div_to_l_@f2+1
  6901  000458  C0EB  F014         	movff	printf@tmpval+2,__div_to_l_@f2+2
  6902  00045C  ECE7  F013         	call	__div_to_l_	;wreg free
  6903  000460  C00F  F0E5         	movff	?__div_to_l_,printf@val
  6904  000464  C010  F0E6         	movff	?__div_to_l_+1,printf@val+1
  6905  000468  C011  F0E7         	movff	?__div_to_l_+2,printf@val+2
  6906  00046C  C012  F0E8         	movff	?__div_to_l_+3,printf@val+3
  6907  000470  D017               	goto	l6787
  6908  000472                     l6785:
  6909  000472  C0F3  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  6910  000476  C0F4  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6911  00047A  C0F5  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6912  00047E  C0E9  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  6913  000482  C0EA  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6914  000486  C0EB  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6915  00048A  EC5F  F013         	call	__tdiv_to_l_	;wreg free
  6916  00048E  C00F  F0E5         	movff	?__tdiv_to_l_,printf@val
  6917  000492  C010  F0E6         	movff	?__tdiv_to_l_+1,printf@val+1
  6918  000496  C011  F0E7         	movff	?__tdiv_to_l_+2,printf@val+2
  6919  00049A  C012  F0E8         	movff	?__tdiv_to_l_+3,printf@val+3
  6920  00049E  D000               	goto	l6787
  6921  0004A0                     l6787:
  6922                           
  6923                           ;doprnt.c: 1129: fval = 0.0;
  6924  0004A0  0E00               	movlw	0
  6925  0004A2  0100               	movlb	0	; () banked
  6926  0004A4  6FF3               	movwf	printf@fval& (0+255),b
  6927  0004A6  0E00               	movlw	0
  6928  0004A8  0100               	movlb	0	; () banked
  6929  0004AA  6FF4               	movwf	(printf@fval+1)& (0+255),b
  6930  0004AC  0E00               	movlw	0
  6931  0004AE  0100               	movlb	0	; () banked
  6932  0004B0  6FF5               	movwf	(printf@fval+2)& (0+255),b
  6933                           
  6934                           ;doprnt.c: 1130: } else {
  6935  0004B2  D034               	goto	l6793
  6936  0004B4                     l6789:
  6937                           
  6938                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6939  0004B4  C0F3  F039         	movff	printf@fval,___fttol@f1
  6940  0004B8  C0F4  F03A         	movff	printf@fval+1,___fttol@f1+1
  6941  0004BC  C0F5  F03B         	movff	printf@fval+2,___fttol@f1+2
  6942  0004C0  ECD5  F015         	call	___fttol	;wreg free
  6943  0004C4  C039  F0E5         	movff	?___fttol,printf@val
  6944  0004C8  C03A  F0E6         	movff	?___fttol+1,printf@val+1
  6945  0004CC  C03B  F0E7         	movff	?___fttol+2,printf@val+2
  6946  0004D0  C03C  F0E8         	movff	?___fttol+3,printf@val+3
  6947                           
  6948                           ;doprnt.c: 1132: fval -= (double)val;
  6949  0004D4  C0F3  F048         	movff	printf@fval,___ftsub@f1
  6950  0004D8  C0F4  F049         	movff	printf@fval+1,___ftsub@f1+1
  6951  0004DC  C0F5  F04A         	movff	printf@fval+2,___ftsub@f1+2
  6952  0004E0  C0E5  F017         	movff	printf@val,___lltoft@c
  6953  0004E4  C0E6  F018         	movff	printf@val+1,___lltoft@c+1
  6954  0004E8  C0E7  F019         	movff	printf@val+2,___lltoft@c+2
  6955  0004EC  C0E8  F01A         	movff	printf@val+3,___lltoft@c+3
  6956  0004F0  EC5D  F01C         	call	___lltoft	;wreg free
  6957  0004F4  C017  F04B         	movff	?___lltoft,___ftsub@f2
  6958  0004F8  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  6959  0004FC  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  6960  000500  EC0F  F01E         	call	___ftsub	;wreg free
  6961  000504  C048  F0F3         	movff	?___ftsub,printf@fval
  6962  000508  C049  F0F4         	movff	?___ftsub+1,printf@fval+1
  6963  00050C  C04A  F0F5         	movff	?___ftsub+2,printf@fval+2
  6964                           
  6965                           ;doprnt.c: 1133: exp = 0;
  6966  000510  0E00               	movlw	0
  6967  000512  0100               	movlb	0	; () banked
  6968  000514  6FEE               	movwf	(printf@exp+1)& (0+255),b
  6969  000516  0E00               	movlw	0
  6970  000518  6FED               	movwf	printf@exp& (0+255),b
  6971  00051A  D000               	goto	l6793
  6972  00051C                     l6793:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;doprnt.c: 1134: }
  6976                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6977  00051C  0E01               	movlw	1
  6978  00051E  0100               	movlb	0	; () banked
  6979  000520  6FF8               	movwf	printf@c& (0+255),b
  6980  000522                     l6795:
  6981                           
  6982                           ; BSR set to: 0
  6983  000522  0E0A               	movlw	10
  6984  000524  0100               	movlb	0	; () banked
  6985  000526  19F8               	xorwf	printf@c& (0+255),w,b
  6986  000528  B4D8               	btfsc	status,2,c
  6987  00052A  D022               	goto	l6807
  6988  00052C  D001               	goto	l6799
  6989                           
  6990                           ; BSR set to: 0
  6991  00052E  D020               	goto	l6807
  6992  000530                     l6799:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;doprnt.c: 1137: if(val < dpowers[c])
  6996  000530  0100               	movlb	0	; () banked
  6997  000532  51F8               	movf	printf@c& (0+255),w,b
  6998  000534  0D04               	mullw	4
  6999  000536  0EB2               	movlw	low _dpowers
  7000  000538  24F3               	addwf	prodl,w,c
  7001  00053A  6EF6               	movwf	tblptrl,c
  7002  00053C  0EFE               	movlw	high _dpowers
  7003  00053E  20F4               	addwfc	prodh,w,c
  7004  000540  6EF7               	movwf	tblptrh,c
  7005  000542                     	if	0	;There are less than 3 active tblptr bytes
  7006  000542                     	endif
  7007  000542  0009               	tblrd		*+
  7008  000544  50F5               	movf	tablat,w,c
  7009  000546  0100               	movlb	0	; () banked
  7010  000548  5DE5               	subwf	printf@val& (0+255),w,b
  7011  00054A  0009               	tblrd		*+
  7012  00054C  50F5               	movf	tablat,w,c
  7013  00054E  0100               	movlb	0	; () banked
  7014  000550  59E6               	subwfb	(printf@val+1)& (0+255),w,b
  7015  000552  0009               	tblrd		*+
  7016  000554  50F5               	movf	tablat,w,c
  7017  000556  0100               	movlb	0	; () banked
  7018  000558  59E7               	subwfb	(printf@val+2)& (0+255),w,b
  7019  00055A  0009               	tblrd		*+
  7020  00055C  50F5               	movf	tablat,w,c
  7021  00055E  0100               	movlb	0	; () banked
  7022  000560  59E8               	subwfb	(printf@val+3)& (0+255),w,b
  7023  000562  A0D8               	btfss	status,0,c
  7024  000564  D005               	goto	l6807
  7025  000566  D001               	goto	l6803
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;doprnt.c: 1138: break;
  7029  000568  D003               	goto	l6807
  7030  00056A                     l6803:
  7031                           
  7032                           ; BSR set to: 0
  7033  00056A  0100               	movlb	0	; () banked
  7034  00056C  2BF8               	incf	printf@c& (0+255),f,b
  7035  00056E  D7D9               	goto	l6795
  7036  000570                     l6807:
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;doprnt.c: 1142: width -= prec + c + exp;
  7040  000570  C0F8  F053         	movff	printf@c,??_printf
  7041  000574  6A54               	clrf	(??_printf+1)& (0+255),c
  7042  000576  BE53               	btfsc	??_printf& (0+255),7,c
  7043  000578  0654               	decf	(??_printf+1)& (0+255),f,c
  7044  00057A  0100               	movlb	0	; () banked
  7045  00057C  51F6               	movf	printf@prec& (0+255),w,b
  7046  00057E  2653               	addwf	??_printf,f,c
  7047  000580  0100               	movlb	0	; () banked
  7048  000582  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7049  000584  2254               	addwfc	??_printf+1,f,c
  7050  000586  0100               	movlb	0	; () banked
  7051  000588  51ED               	movf	printf@exp& (0+255),w,b
  7052  00058A  2653               	addwf	??_printf,f,c
  7053  00058C  0100               	movlb	0	; () banked
  7054  00058E  51EE               	movf	(printf@exp+1)& (0+255),w,b
  7055  000590  2254               	addwfc	??_printf+1,f,c
  7056  000592  5053               	movf	??_printf,w,c
  7057  000594  0100               	movlb	0	; () banked
  7058  000596  5FF1               	subwf	printf@width& (0+255),f,b
  7059  000598  5054               	movf	??_printf+1,w,c
  7060  00059A  0100               	movlb	0	; () banked
  7061  00059C  5BF2               	subwfb	(printf@width+1)& (0+255),f,b
  7062                           
  7063                           ;doprnt.c: 1143: if(
  7064                           ;doprnt.c: 1147: prec)
  7065  00059E  0100               	movlb	0	; () banked
  7066  0005A0  51F6               	movf	printf@prec& (0+255),w,b
  7067  0005A2  0100               	movlb	0	; () banked
  7068  0005A4  11F7               	iorwf	(printf@prec+1)& (0+255),w,b
  7069  0005A6  B4D8               	btfsc	status,2,c
  7070  0005A8  D005               	goto	l6811
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;doprnt.c: 1148: width--;
  7074  0005AA  0100               	movlb	0	; () banked
  7075  0005AC  07F1               	decf	printf@width& (0+255),f,b
  7076  0005AE  A0D8               	btfss	status,0,c
  7077  0005B0  07F2               	decf	(printf@width+1)& (0+255),f,b
  7078  0005B2  D000               	goto	l6811
  7079  0005B4                     l6811:
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;doprnt.c: 1149: if(flag & 0x03)
  7083  0005B4  0E03               	movlw	3
  7084  0005B6  0100               	movlb	0	; () banked
  7085  0005B8  15EF               	andwf	printf@flag& (0+255),w,b
  7086  0005BA  6E53               	movwf	??_printf& (0+255),c
  7087  0005BC  0E00               	movlw	0
  7088  0005BE  0100               	movlb	0	; () banked
  7089  0005C0  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7090  0005C2  6E54               	movwf	(??_printf+1)& (0+255),c
  7091  0005C4  5053               	movf	??_printf,w,c
  7092  0005C6  1054               	iorwf	??_printf+1,w,c
  7093  0005C8  B4D8               	btfsc	status,2,c
  7094  0005CA  D005               	goto	l6815
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;doprnt.c: 1150: width--;
  7098  0005CC  0100               	movlb	0	; () banked
  7099  0005CE  07F1               	decf	printf@width& (0+255),f,b
  7100  0005D0  A0D8               	btfss	status,0,c
  7101  0005D2  07F2               	decf	(printf@width+1)& (0+255),f,b
  7102  0005D4  D000               	goto	l6815
  7103  0005D6                     l6815:
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;doprnt.c: 1153: if(flag & 0x04) {
  7107  0005D6  0100               	movlb	0	; () banked
  7108  0005D8  A5EF               	btfss	printf@flag& (0+255),2,b
  7109  0005DA  D02D               	goto	l6831
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;doprnt.c: 1157: if(flag & 0x03)
  7113  0005DC  0E03               	movlw	3
  7114  0005DE  0100               	movlb	0	; () banked
  7115  0005E0  15EF               	andwf	printf@flag& (0+255),w,b
  7116  0005E2  6E53               	movwf	??_printf& (0+255),c
  7117  0005E4  0E00               	movlw	0
  7118  0005E6  0100               	movlb	0	; () banked
  7119  0005E8  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7120  0005EA  6E54               	movwf	(??_printf+1)& (0+255),c
  7121  0005EC  5053               	movf	??_printf,w,c
  7122  0005EE  1054               	iorwf	??_printf+1,w,c
  7123  0005F0  B4D8               	btfsc	status,2,c
  7124  0005F2  D00C               	goto	l6825
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;doprnt.c: 1159: (putch('-') );
  7128  0005F4  0E2D               	movlw	45
  7129  0005F6  ECD2  F01F         	call	_putch
  7130                           
  7131                           ;doprnt.c: 1168: while(width > 0) {
  7132  0005FA  D008               	goto	l6825
  7133  0005FC                     l6821:
  7134                           
  7135                           ;doprnt.c: 1169: (putch('0') );
  7136  0005FC  0E30               	movlw	48
  7137  0005FE  ECD2  F01F         	call	_putch
  7138                           
  7139                           ;doprnt.c: 1170: width--;
  7140  000602  0100               	movlb	0	; () banked
  7141  000604  07F1               	decf	printf@width& (0+255),f,b
  7142  000606  A0D8               	btfss	status,0,c
  7143  000608  07F2               	decf	(printf@width+1)& (0+255),f,b
  7144  00060A  D000               	goto	l6825
  7145  00060C                     l6825:
  7146  00060C  0100               	movlb	0	; () banked
  7147  00060E  BFF2               	btfsc	(printf@width+1)& (0+255),7,b
  7148  000610  D073               	goto	l6843
  7149  000612  0100               	movlb	0	; () banked
  7150  000614  51F2               	movf	(printf@width+1)& (0+255),w,b
  7151  000616  E1F2               	bnz	l6821
  7152  000618  0100               	movlb	0	; () banked
  7153  00061A  05F1               	decf	printf@width& (0+255),w,b
  7154  00061C  A0D8               	btfss	status,0,c
  7155  00061E  D06C               	goto	l6843
  7156  000620  D7ED               	goto	l6821
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;doprnt.c: 1171: }
  7160                           ;doprnt.c: 1173: } else
  7161  000622  D06A               	goto	l6843
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;doprnt.c: 1175: {
  7165                           ;doprnt.c: 1180: while(width > 0) {
  7166  000624  D008               	goto	l6831
  7167  000626                     l6827:
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;doprnt.c: 1181: (putch(' ') );
  7171  000626  0E20               	movlw	32
  7172  000628  ECD2  F01F         	call	_putch
  7173                           
  7174                           ;doprnt.c: 1182: width--;
  7175  00062C  0100               	movlb	0	; () banked
  7176  00062E  07F1               	decf	printf@width& (0+255),f,b
  7177  000630  A0D8               	btfss	status,0,c
  7178  000632  07F2               	decf	(printf@width+1)& (0+255),f,b
  7179  000634  D000               	goto	l6831
  7180  000636                     l6831:
  7181                           
  7182                           ; BSR set to: 0
  7183  000636  0100               	movlb	0	; () banked
  7184  000638  BFF2               	btfsc	(printf@width+1)& (0+255),7,b
  7185  00063A  D007               	goto	l6833
  7186  00063C  0100               	movlb	0	; () banked
  7187  00063E  51F2               	movf	(printf@width+1)& (0+255),w,b
  7188  000640  E1F2               	bnz	l6827
  7189  000642  0100               	movlb	0	; () banked
  7190  000644  05F1               	decf	printf@width& (0+255),w,b
  7191  000646  B0D8               	btfsc	status,0,c
  7192  000648  D7EE               	goto	l6827
  7193  00064A                     l6833:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;doprnt.c: 1183: }
  7197                           ;doprnt.c: 1188: if(flag & 0x03)
  7198  00064A  0E03               	movlw	3
  7199  00064C  0100               	movlb	0	; () banked
  7200  00064E  15EF               	andwf	printf@flag& (0+255),w,b
  7201  000650  6E53               	movwf	??_printf& (0+255),c
  7202  000652  0E00               	movlw	0
  7203  000654  0100               	movlb	0	; () banked
  7204  000656  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7205  000658  6E54               	movwf	(??_printf+1)& (0+255),c
  7206  00065A  5053               	movf	??_printf,w,c
  7207  00065C  1054               	iorwf	??_printf+1,w,c
  7208  00065E  B4D8               	btfsc	status,2,c
  7209  000660  D04B               	goto	l6843
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;doprnt.c: 1190: (putch('-') );
  7213  000662  0E2D               	movlw	45
  7214  000664  ECD2  F01F         	call	_putch
  7215                           
  7216                           ;doprnt.c: 1195: }
  7217                           ;doprnt.c: 1196: while(c--) {
  7218  000668  D047               	goto	l6843
  7219  00066A                     l6837:
  7220                           
  7221                           ;doprnt.c: 1200: {
  7222                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7223  00066A  C0E5  F00F         	movff	printf@val,___lldiv@dividend
  7224  00066E  C0E6  F010         	movff	printf@val+1,___lldiv@dividend+1
  7225  000672  C0E7  F011         	movff	printf@val+2,___lldiv@dividend+2
  7226  000676  C0E8  F012         	movff	printf@val+3,___lldiv@dividend+3
  7227  00067A  0100               	movlb	0	; () banked
  7228  00067C  51F8               	movf	printf@c& (0+255),w,b
  7229  00067E  0D04               	mullw	4
  7230  000680  0EB2               	movlw	low _dpowers
  7231  000682  24F3               	addwf	prodl,w,c
  7232  000684  6EF6               	movwf	tblptrl,c
  7233  000686  0EFE               	movlw	high _dpowers
  7234  000688  20F4               	addwfc	prodh,w,c
  7235  00068A  6EF7               	movwf	tblptrh,c
  7236  00068C                     	if	0	;There are less than 3 active tblptr bytes
  7237  00068C                     	endif
  7238  00068C  0009               	tblrd		*+
  7239  00068E  CFF5 F013          	movff	tablat,___lldiv@divisor
  7240  000692  0009               	tblrd		*+
  7241  000694  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  7242  000698  0009               	tblrd		*+
  7243  00069A  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  7244  00069E  000A               	tblrd		*-
  7245  0006A0  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  7246  0006A4  ECB3  F019         	call	___lldiv	;wreg free
  7247  0006A8  C00F  F0E9         	movff	?___lldiv,printf@tmpval
  7248  0006AC  C010  F0EA         	movff	?___lldiv+1,printf@tmpval+1
  7249  0006B0  C011  F0EB         	movff	?___lldiv+2,printf@tmpval+2
  7250  0006B4  C012  F0EC         	movff	?___lldiv+3,printf@tmpval+3
  7251                           
  7252                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7253  0006B8  C0E9  F00F         	movff	printf@tmpval,___llmod@dividend
  7254  0006BC  C0EA  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  7255  0006C0  C0EB  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  7256  0006C4  C0EC  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  7257  0006C8  0E0A               	movlw	10
  7258  0006CA  6E13               	movwf	___llmod@divisor,c
  7259  0006CC  0E00               	movlw	0
  7260  0006CE  6E14               	movwf	___llmod@divisor+1,c
  7261  0006D0  0E00               	movlw	0
  7262  0006D2  6E15               	movwf	___llmod@divisor+2,c
  7263  0006D4  0E00               	movlw	0
  7264  0006D6  6E16               	movwf	___llmod@divisor+3,c
  7265  0006D8  EC89  F01B         	call	___llmod	;wreg free
  7266  0006DC  C00F  F0E9         	movff	?___llmod,printf@tmpval
  7267  0006E0  C010  F0EA         	movff	?___llmod+1,printf@tmpval+1
  7268  0006E4  C011  F0EB         	movff	?___llmod+2,printf@tmpval+2
  7269  0006E8  C012  F0EC         	movff	?___llmod+3,printf@tmpval+3
  7270                           
  7271                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7272  0006EC  0100               	movlb	0	; () banked
  7273  0006EE  51E9               	movf	printf@tmpval& (0+255),w,b
  7274  0006F0  0F30               	addlw	48
  7275  0006F2  ECD2  F01F         	call	_putch
  7276  0006F6  D000               	goto	l6843
  7277  0006F8                     l6843:
  7278  0006F8  0100               	movlb	0	; () banked
  7279  0006FA  07F8               	decf	printf@c& (0+255),f,b
  7280  0006FC  0100               	movlb	0	; () banked
  7281  0006FE  29F8               	incf	printf@c& (0+255),w,b
  7282  000700  B4D8               	btfsc	status,2,c
  7283  000702  D00A               	goto	l6849
  7284  000704  D7B2               	goto	l6837
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;doprnt.c: 1204: }
  7288                           ;doprnt.c: 1206: }
  7289                           ;doprnt.c: 1207: while(exp > 0) {
  7290  000706  D008               	goto	l6849
  7291  000708                     l6845:
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;doprnt.c: 1208: (putch('0') );
  7295  000708  0E30               	movlw	48
  7296  00070A  ECD2  F01F         	call	_putch
  7297                           
  7298                           ;doprnt.c: 1209: exp--;
  7299  00070E  0100               	movlb	0	; () banked
  7300  000710  07ED               	decf	printf@exp& (0+255),f,b
  7301  000712  A0D8               	btfss	status,0,c
  7302  000714  07EE               	decf	(printf@exp+1)& (0+255),f,b
  7303  000716  D000               	goto	l6849
  7304  000718                     l6849:
  7305                           
  7306                           ; BSR set to: 0
  7307  000718  0100               	movlb	0	; () banked
  7308  00071A  BFEE               	btfsc	(printf@exp+1)& (0+255),7,b
  7309  00071C  D007               	goto	l6851
  7310  00071E  0100               	movlb	0	; () banked
  7311  000720  51EE               	movf	(printf@exp+1)& (0+255),w,b
  7312  000722  E1F2               	bnz	l6845
  7313  000724  0100               	movlb	0	; () banked
  7314  000726  05ED               	decf	printf@exp& (0+255),w,b
  7315  000728  B0D8               	btfsc	status,0,c
  7316  00072A  D7EE               	goto	l6845
  7317  00072C                     l6851:
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;doprnt.c: 1210: }
  7321                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7322  00072C  0100               	movlb	0	; () banked
  7323  00072E  BFF7               	btfsc	(printf@prec+1)& (0+255),7,b
  7324  000730  D00C               	goto	l687
  7325  000732  0100               	movlb	0	; () banked
  7326  000734  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7327  000736  E105               	bnz	u6910
  7328  000738  0E09               	movlw	9
  7329  00073A  0100               	movlb	0	; () banked
  7330  00073C  5DF6               	subwf	printf@prec& (0+255),w,b
  7331  00073E  A0D8               	btfss	status,0,c
  7332  000740  D004               	goto	l687
  7333  000742                     u6910:
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7337  000742  0E08               	movlw	8
  7338  000744  0100               	movlb	0	; () banked
  7339  000746  6FF8               	movwf	printf@c& (0+255),b
  7340  000748  D003               	goto	l6855
  7341  00074A                     l687:
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;doprnt.c: 1213: else
  7345                           ;doprnt.c: 1214: c = prec;
  7346  00074A  C0F6  F0F8         	movff	printf@prec,printf@c
  7347  00074E  D000               	goto	l6855
  7348  000750                     l6855:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;doprnt.c: 1215: prec -= c;
  7352  000750  0100               	movlb	0	; () banked
  7353  000752  51F8               	movf	printf@c& (0+255),w,b
  7354  000754  0100               	movlb	0	; () banked
  7355  000756  5FF6               	subwf	printf@prec& (0+255),f,b
  7356  000758  0E00               	movlw	0
  7357  00075A  0100               	movlb	0	; () banked
  7358  00075C  BFF8               	btfsc	printf@c& (0+255),7,b
  7359  00075E  0EFF               	movlw	255
  7360  000760  0100               	movlb	0	; () banked
  7361  000762  5BF7               	subwfb	(printf@prec+1)& (0+255),f,b
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;doprnt.c: 1219: if(c)
  7365  000764  0100               	movlb	0	; () banked
  7366  000766  51F8               	movf	printf@c& (0+255),w,b
  7367  000768  0100               	movlb	0	; () banked
  7368  00076A  B4D8               	btfsc	status,2,c
  7369  00076C  D004               	goto	l6861
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;doprnt.c: 1221: (putch('.') );
  7373  00076E  0E2E               	movlw	46
  7374  000770  ECD2  F01F         	call	_putch
  7375  000774  D000               	goto	l6861
  7376  000776                     l6861:
  7377                           
  7378                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7379  000776  0100               	movlb	0	; () banked
  7380  000778  51F8               	movf	printf@c& (0+255),w,b
  7381  00077A  ECEB  F008         	call	_scale
  7382  00077E  C032  F0E0         	movff	?_scale,_printf$2527
  7383  000782  C033  F0E1         	movff	?_scale+1,_printf$2527+1
  7384  000786  C034  F0E2         	movff	?_scale+2,_printf$2527+2
  7385                           
  7386                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7387  00078A  C0F3  F026         	movff	printf@fval,___ftmul@f2
  7388  00078E  C0F4  F027         	movff	printf@fval+1,___ftmul@f2+1
  7389  000792  C0F5  F028         	movff	printf@fval+2,___ftmul@f2+2
  7390  000796  C0E0  F023         	movff	_printf$2527,___ftmul@f1
  7391  00079A  C0E1  F024         	movff	_printf$2527+1,___ftmul@f1+1
  7392  00079E  C0E2  F025         	movff	_printf$2527+2,___ftmul@f1+2
  7393  0007A2  EC6C  F014         	call	___ftmul	;wreg free
  7394  0007A6  C023  F039         	movff	?___ftmul,___fttol@f1
  7395  0007AA  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  7396  0007AE  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  7397  0007B2  ECD5  F015         	call	___fttol	;wreg free
  7398  0007B6  C039  F0E5         	movff	?___fttol,printf@val
  7399  0007BA  C03A  F0E6         	movff	?___fttol+1,printf@val+1
  7400  0007BE  C03B  F0E7         	movff	?___fttol+2,printf@val+2
  7401  0007C2  C03C  F0E8         	movff	?___fttol+3,printf@val+3
  7402                           
  7403                           ;doprnt.c: 1228: while(c--) {
  7404  0007C6  D06E               	goto	l6871
  7405  0007C8                     l6865:
  7406                           
  7407                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7408  0007C8  C0E5  F00F         	movff	printf@val,___lldiv@dividend
  7409  0007CC  C0E6  F010         	movff	printf@val+1,___lldiv@dividend+1
  7410  0007D0  C0E7  F011         	movff	printf@val+2,___lldiv@dividend+2
  7411  0007D4  C0E8  F012         	movff	printf@val+3,___lldiv@dividend+3
  7412  0007D8  0100               	movlb	0	; () banked
  7413  0007DA  51F8               	movf	printf@c& (0+255),w,b
  7414  0007DC  0D04               	mullw	4
  7415  0007DE  0EB2               	movlw	low _dpowers
  7416  0007E0  24F3               	addwf	prodl,w,c
  7417  0007E2  6EF6               	movwf	tblptrl,c
  7418  0007E4  0EFE               	movlw	high _dpowers
  7419  0007E6  20F4               	addwfc	prodh,w,c
  7420  0007E8  6EF7               	movwf	tblptrh,c
  7421  0007EA                     	if	0	;There are less than 3 active tblptr bytes
  7422  0007EA                     	endif
  7423  0007EA  0009               	tblrd		*+
  7424  0007EC  CFF5 F013          	movff	tablat,___lldiv@divisor
  7425  0007F0  0009               	tblrd		*+
  7426  0007F2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  7427  0007F6  0009               	tblrd		*+
  7428  0007F8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  7429  0007FC  000A               	tblrd		*-
  7430  0007FE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  7431  000802  ECB3  F019         	call	___lldiv	;wreg free
  7432  000806  C00F  F0E9         	movff	?___lldiv,printf@tmpval
  7433  00080A  C010  F0EA         	movff	?___lldiv+1,printf@tmpval+1
  7434  00080E  C011  F0EB         	movff	?___lldiv+2,printf@tmpval+2
  7435  000812  C012  F0EC         	movff	?___lldiv+3,printf@tmpval+3
  7436                           
  7437                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7438  000816  C0E9  F00F         	movff	printf@tmpval,___llmod@dividend
  7439  00081A  C0EA  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  7440  00081E  C0EB  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  7441  000822  C0EC  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  7442  000826  0E0A               	movlw	10
  7443  000828  6E13               	movwf	___llmod@divisor,c
  7444  00082A  0E00               	movlw	0
  7445  00082C  6E14               	movwf	___llmod@divisor+1,c
  7446  00082E  0E00               	movlw	0
  7447  000830  6E15               	movwf	___llmod@divisor+2,c
  7448  000832  0E00               	movlw	0
  7449  000834  6E16               	movwf	___llmod@divisor+3,c
  7450  000836  EC89  F01B         	call	___llmod	;wreg free
  7451  00083A  C00F  F0E9         	movff	?___llmod,printf@tmpval
  7452  00083E  C010  F0EA         	movff	?___llmod+1,printf@tmpval+1
  7453  000842  C011  F0EB         	movff	?___llmod+2,printf@tmpval+2
  7454  000846  C012  F0EC         	movff	?___llmod+3,printf@tmpval+3
  7455                           
  7456                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7457  00084A  0100               	movlb	0	; () banked
  7458  00084C  51E9               	movf	printf@tmpval& (0+255),w,b
  7459  00084E  0F30               	addlw	48
  7460  000850  ECD2  F01F         	call	_putch
  7461                           
  7462                           ;doprnt.c: 1232: val %= dpowers[c];
  7463  000854  C0E5  F00F         	movff	printf@val,___llmod@dividend
  7464  000858  C0E6  F010         	movff	printf@val+1,___llmod@dividend+1
  7465  00085C  C0E7  F011         	movff	printf@val+2,___llmod@dividend+2
  7466  000860  C0E8  F012         	movff	printf@val+3,___llmod@dividend+3
  7467  000864  0100               	movlb	0	; () banked
  7468  000866  51F8               	movf	printf@c& (0+255),w,b
  7469  000868  0D04               	mullw	4
  7470  00086A  0EB2               	movlw	low _dpowers
  7471  00086C  24F3               	addwf	prodl,w,c
  7472  00086E  6EF6               	movwf	tblptrl,c
  7473  000870  0EFE               	movlw	high _dpowers
  7474  000872  20F4               	addwfc	prodh,w,c
  7475  000874  6EF7               	movwf	tblptrh,c
  7476  000876                     	if	0	;There are less than 3 active tblptr bytes
  7477  000876                     	endif
  7478  000876  0009               	tblrd		*+
  7479  000878  CFF5 F013          	movff	tablat,___llmod@divisor
  7480  00087C  0009               	tblrd		*+
  7481  00087E  CFF5 F014          	movff	tablat,___llmod@divisor+1
  7482  000882  0009               	tblrd		*+
  7483  000884  CFF5 F015          	movff	tablat,___llmod@divisor+2
  7484  000888  000A               	tblrd		*-
  7485  00088A  CFF5 F016          	movff	tablat,___llmod@divisor+3
  7486  00088E  EC89  F01B         	call	___llmod	;wreg free
  7487  000892  C00F  F0E5         	movff	?___llmod,printf@val
  7488  000896  C010  F0E6         	movff	?___llmod+1,printf@val+1
  7489  00089A  C011  F0E7         	movff	?___llmod+2,printf@val+2
  7490  00089E  C012  F0E8         	movff	?___llmod+3,printf@val+3
  7491  0008A2  D000               	goto	l6871
  7492  0008A4                     l6871:
  7493  0008A4  0100               	movlb	0	; () banked
  7494  0008A6  07F8               	decf	printf@c& (0+255),f,b
  7495  0008A8  0100               	movlb	0	; () banked
  7496  0008AA  29F8               	incf	printf@c& (0+255),w,b
  7497  0008AC  B4D8               	btfsc	status,2,c
  7498  0008AE  D00A               	goto	l6877
  7499  0008B0  D78B               	goto	l6865
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;doprnt.c: 1233: }
  7503                           ;doprnt.c: 1235: while(prec) {
  7504  0008B2  D008               	goto	l6877
  7505  0008B4                     l6873:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;doprnt.c: 1236: (putch('0') );
  7509  0008B4  0E30               	movlw	48
  7510  0008B6  ECD2  F01F         	call	_putch
  7511                           
  7512                           ;doprnt.c: 1237: prec--;
  7513  0008BA  0100               	movlb	0	; () banked
  7514  0008BC  07F6               	decf	printf@prec& (0+255),f,b
  7515  0008BE  A0D8               	btfss	status,0,c
  7516  0008C0  07F7               	decf	(printf@prec+1)& (0+255),f,b
  7517  0008C2  D000               	goto	l6877
  7518  0008C4                     l6877:
  7519                           
  7520                           ; BSR set to: 0
  7521  0008C4  0100               	movlb	0	; () banked
  7522  0008C6  51F6               	movf	printf@prec& (0+255),w,b
  7523  0008C8  0100               	movlb	0	; () banked
  7524  0008CA  11F7               	iorwf	(printf@prec+1)& (0+255),w,b
  7525  0008CC  B4D8               	btfsc	status,2,c
  7526  0008CE  D0E3               	goto	l6935
  7527  0008D0  D7F1               	goto	l6873
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;doprnt.c: 1238: }
  7531                           ;doprnt.c: 1245: continue;
  7532  0008D2  D0E1               	goto	l6935
  7533  0008D4                     l6879:
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;doprnt.c: 1246: }
  7537                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7538  0008D4  0100               	movlb	0	; () banked
  7539  0008D6  51F6               	movf	printf@prec& (0+255),w,b
  7540  0008D8  0100               	movlb	0	; () banked
  7541  0008DA  11F7               	iorwf	(printf@prec+1)& (0+255),w,b
  7542  0008DC  A4D8               	btfss	status,2,c
  7543  0008DE  D00E               	goto	l6885
  7544                           
  7545                           ; BSR set to: 0
  7546  0008E0  0100               	movlb	0	; () banked
  7547  0008E2  51E5               	movf	printf@val& (0+255),w,b
  7548  0008E4  0100               	movlb	0	; () banked
  7549  0008E6  11E6               	iorwf	(printf@val+1)& (0+255),w,b
  7550  0008E8  0100               	movlb	0	; () banked
  7551  0008EA  11E7               	iorwf	(printf@val+2)& (0+255),w,b
  7552  0008EC  0100               	movlb	0	; () banked
  7553  0008EE  11E8               	iorwf	(printf@val+3)& (0+255),w,b
  7554  0008F0  A4D8               	btfss	status,2,c
  7555  0008F2  D004               	goto	l6885
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;doprnt.c: 1291: prec++;
  7559  0008F4  0100               	movlb	0	; () banked
  7560  0008F6  4BF6               	infsnz	printf@prec& (0+255),f,b
  7561  0008F8  2BF7               	incf	(printf@prec+1)& (0+255),f,b
  7562  0008FA  D000               	goto	l6885
  7563  0008FC                     l6885:
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;doprnt.c: 1339: if(c < prec)
  7567  0008FC  0E80               	movlw	128
  7568  0008FE  0100               	movlb	0	; () banked
  7569  000900  BFF8               	btfsc	printf@c& (0+255),7,b
  7570  000902  0E7F               	movlw	127
  7571  000904  6E53               	movwf	??_printf& (0+255),c
  7572  000906  0100               	movlb	0	; () banked
  7573  000908  51F6               	movf	printf@prec& (0+255),w,b
  7574  00090A  0100               	movlb	0	; () banked
  7575  00090C  5DF8               	subwf	printf@c& (0+255),w,b
  7576  00090E  0100               	movlb	0	; () banked
  7577  000910  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7578  000912  0A80               	xorlw	128
  7579  000914  5853               	subwfb	??_printf& (0+255),w,c
  7580  000916  B0D8               	btfsc	status,0,c
  7581  000918  D003               	goto	l6889
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;doprnt.c: 1340: c = prec;
  7585  00091A  C0F6  F0F8         	movff	printf@prec,printf@c
  7586  00091E  D017               	goto	l6893
  7587  000920                     l6889:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;doprnt.c: 1341: else if(prec < c)
  7591  000920  0100               	movlb	0	; () banked
  7592  000922  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7593  000924  0A80               	xorlw	128
  7594  000926  6E53               	movwf	??_printf& (0+255),c
  7595  000928  0100               	movlb	0	; () banked
  7596  00092A  51F8               	movf	printf@c& (0+255),w,b
  7597  00092C  0100               	movlb	0	; () banked
  7598  00092E  5DF6               	subwf	printf@prec& (0+255),w,b
  7599  000930  0E80               	movlw	128
  7600  000932  0100               	movlb	0	; () banked
  7601  000934  BFF8               	btfsc	printf@c& (0+255),7,b
  7602  000936  0E7F               	movlw	127
  7603  000938  5853               	subwfb	??_printf& (0+255),w,c
  7604  00093A  B0D8               	btfsc	status,0,c
  7605  00093C  D008               	goto	l6893
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;doprnt.c: 1342: prec = c;
  7609  00093E  0100               	movlb	0	; () banked
  7610  000940  51F8               	movf	printf@c& (0+255),w,b
  7611  000942  0100               	movlb	0	; () banked
  7612  000944  6FF6               	movwf	printf@prec& (0+255),b
  7613  000946  6BF7               	clrf	(printf@prec+1)& (0+255),b
  7614  000948  BFF6               	btfsc	printf@prec& (0+255),7,b
  7615  00094A  07F7               	decf	(printf@prec+1)& (0+255),f,b
  7616                           
  7617                           ; BSR set to: 0
  7618  00094C  D000               	goto	l6893
  7619  00094E                     l6893:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7623  00094E  0100               	movlb	0	; () banked
  7624  000950  51F1               	movf	printf@width& (0+255),w,b
  7625  000952  0100               	movlb	0	; () banked
  7626  000954  11F2               	iorwf	(printf@width+1)& (0+255),w,b
  7627  000956  B4D8               	btfsc	status,2,c
  7628  000958  D011               	goto	l6899
  7629                           
  7630                           ; BSR set to: 0
  7631  00095A  0E03               	movlw	3
  7632  00095C  0100               	movlb	0	; () banked
  7633  00095E  15EF               	andwf	printf@flag& (0+255),w,b
  7634  000960  6E53               	movwf	??_printf& (0+255),c
  7635  000962  0E00               	movlw	0
  7636  000964  0100               	movlb	0	; () banked
  7637  000966  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7638  000968  6E54               	movwf	(??_printf+1)& (0+255),c
  7639  00096A  5053               	movf	??_printf,w,c
  7640  00096C  1054               	iorwf	??_printf+1,w,c
  7641  00096E  B4D8               	btfsc	status,2,c
  7642  000970  D005               	goto	l6899
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;doprnt.c: 1346: width--;
  7646  000972  0100               	movlb	0	; () banked
  7647  000974  07F1               	decf	printf@width& (0+255),f,b
  7648  000976  A0D8               	btfss	status,0,c
  7649  000978  07F2               	decf	(printf@width+1)& (0+255),f,b
  7650  00097A  D000               	goto	l6899
  7651  00097C                     l6899:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7655  00097C  0100               	movlb	0	; () banked
  7656  00097E  ADF0               	btfss	(printf@flag+1)& (0+255),6,b
  7657  000980  D01D               	goto	l6907
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;doprnt.c: 1349: if(width > prec)
  7661  000982  0100               	movlb	0	; () banked
  7662  000984  51F1               	movf	printf@width& (0+255),w,b
  7663  000986  0100               	movlb	0	; () banked
  7664  000988  5DF6               	subwf	printf@prec& (0+255),w,b
  7665  00098A  0100               	movlb	0	; () banked
  7666  00098C  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7667  00098E  0A80               	xorlw	128
  7668  000990  6E53               	movwf	??_printf& (0+255),c
  7669  000992  0100               	movlb	0	; () banked
  7670  000994  51F2               	movf	(printf@width+1)& (0+255),w,b
  7671  000996  0A80               	xorlw	128
  7672  000998  5853               	subwfb	??_printf& (0+255),w,c
  7673  00099A  B0D8               	btfsc	status,0,c
  7674  00099C  D009               	goto	l6905
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;doprnt.c: 1350: width -= prec;
  7678  00099E  0100               	movlb	0	; () banked
  7679  0009A0  51F6               	movf	printf@prec& (0+255),w,b
  7680  0009A2  0100               	movlb	0	; () banked
  7681  0009A4  5FF1               	subwf	printf@width& (0+255),f,b
  7682  0009A6  0100               	movlb	0	; () banked
  7683  0009A8  51F7               	movf	(printf@prec+1)& (0+255),w,b
  7684  0009AA  0100               	movlb	0	; () banked
  7685  0009AC  5BF2               	subwfb	(printf@width+1)& (0+255),f,b
  7686  0009AE  D006               	goto	l6907
  7687  0009B0                     l6905:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;doprnt.c: 1351: else
  7691                           ;doprnt.c: 1352: width = 0;
  7692  0009B0  0E00               	movlw	0
  7693  0009B2  0100               	movlb	0	; () banked
  7694  0009B4  6FF2               	movwf	(printf@width+1)& (0+255),b
  7695  0009B6  0E00               	movlw	0
  7696  0009B8  6FF1               	movwf	printf@width& (0+255),b
  7697                           
  7698                           ; BSR set to: 0
  7699  0009BA  D000               	goto	l6907
  7700  0009BC                     l6907:
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;doprnt.c: 1353: }
  7704                           ;doprnt.c: 1381: if(width > c)
  7705  0009BC  0E80               	movlw	128
  7706  0009BE  0100               	movlb	0	; () banked
  7707  0009C0  BFF8               	btfsc	printf@c& (0+255),7,b
  7708  0009C2  0E7F               	movlw	127
  7709  0009C4  6E53               	movwf	??_printf& (0+255),c
  7710  0009C6  0100               	movlb	0	; () banked
  7711  0009C8  51F1               	movf	printf@width& (0+255),w,b
  7712  0009CA  0100               	movlb	0	; () banked
  7713  0009CC  5DF8               	subwf	printf@c& (0+255),w,b
  7714  0009CE  0100               	movlb	0	; () banked
  7715  0009D0  51F2               	movf	(printf@width+1)& (0+255),w,b
  7716  0009D2  0A80               	xorlw	128
  7717  0009D4  5853               	subwfb	??_printf& (0+255),w,c
  7718  0009D6  B0D8               	btfsc	status,0,c
  7719  0009D8  D00B               	goto	l6911
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;doprnt.c: 1382: width -= c;
  7723  0009DA  0100               	movlb	0	; () banked
  7724  0009DC  51F8               	movf	printf@c& (0+255),w,b
  7725  0009DE  0100               	movlb	0	; () banked
  7726  0009E0  5FF1               	subwf	printf@width& (0+255),f,b
  7727  0009E2  0E00               	movlw	0
  7728  0009E4  0100               	movlb	0	; () banked
  7729  0009E6  BFF8               	btfsc	printf@c& (0+255),7,b
  7730  0009E8  0EFF               	movlw	255
  7731  0009EA  0100               	movlb	0	; () banked
  7732  0009EC  5BF2               	subwfb	(printf@width+1)& (0+255),f,b
  7733  0009EE  D006               	goto	l6913
  7734  0009F0                     l6911:
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;doprnt.c: 1383: else
  7738                           ;doprnt.c: 1384: width = 0;
  7739  0009F0  0E00               	movlw	0
  7740  0009F2  0100               	movlb	0	; () banked
  7741  0009F4  6FF2               	movwf	(printf@width+1)& (0+255),b
  7742  0009F6  0E00               	movlw	0
  7743  0009F8  6FF1               	movwf	printf@width& (0+255),b
  7744  0009FA  D000               	goto	l6913
  7745  0009FC                     l6913:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;doprnt.c: 1387: if(flag & 0x04) {
  7749  0009FC  0100               	movlb	0	; () banked
  7750  0009FE  A5EF               	btfss	printf@flag& (0+255),2,b
  7751  000A00  D025               	goto	l6925
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;doprnt.c: 1392: if(flag & 0x03)
  7755  000A02  0E03               	movlw	3
  7756  000A04  0100               	movlb	0	; () banked
  7757  000A06  15EF               	andwf	printf@flag& (0+255),w,b
  7758  000A08  6E53               	movwf	??_printf& (0+255),c
  7759  000A0A  0E00               	movlw	0
  7760  000A0C  0100               	movlb	0	; () banked
  7761  000A0E  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7762  000A10  6E54               	movwf	(??_printf+1)& (0+255),c
  7763  000A12  5053               	movf	??_printf,w,c
  7764  000A14  1054               	iorwf	??_printf+1,w,c
  7765  000A16  B4D8               	btfsc	status,2,c
  7766  000A18  D004               	goto	l6919
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;doprnt.c: 1393: (putch('-') );
  7770  000A1A  0E2D               	movlw	45
  7771  000A1C  ECD2  F01F         	call	_putch
  7772  000A20  D000               	goto	l6919
  7773  000A22                     l6919:
  7774                           
  7775                           ;doprnt.c: 1415: if(width)
  7776  000A22  0100               	movlb	0	; () banked
  7777  000A24  51F1               	movf	printf@width& (0+255),w,b
  7778  000A26  0100               	movlb	0	; () banked
  7779  000A28  11F2               	iorwf	(printf@width+1)& (0+255),w,b
  7780  000A2A  B4D8               	btfsc	status,2,c
  7781  000A2C  D034               	goto	l6935
  7782  000A2E                     l6921:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;doprnt.c: 1417: (putch('0') );
  7786  000A2E  0E30               	movlw	48
  7787  000A30  ECD2  F01F         	call	_putch
  7788                           
  7789                           ;doprnt.c: 1418: while(--width);
  7790  000A34  0100               	movlb	0	; () banked
  7791  000A36  07F1               	decf	printf@width& (0+255),f,b
  7792  000A38  A0D8               	btfss	status,0,c
  7793  000A3A  07F2               	decf	(printf@width+1)& (0+255),f,b
  7794  000A3C  0100               	movlb	0	; () banked
  7795  000A3E  51F1               	movf	printf@width& (0+255),w,b
  7796  000A40  0100               	movlb	0	; () banked
  7797  000A42  11F2               	iorwf	(printf@width+1)& (0+255),w,b
  7798  000A44  B4D8               	btfsc	status,2,c
  7799  000A46  D027               	goto	l6935
  7800  000A48  D7F2               	goto	l6921
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;doprnt.c: 1420: } else
  7804                           
  7805                           ; BSR set to: 0
  7806  000A4A  D025               	goto	l6935
  7807  000A4C                     l6925:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;doprnt.c: 1422: {
  7811                           ;doprnt.c: 1424: if(width
  7812                           ;doprnt.c: 1428: )
  7813  000A4C  0100               	movlb	0	; () banked
  7814  000A4E  51F1               	movf	printf@width& (0+255),w,b
  7815  000A50  0100               	movlb	0	; () banked
  7816  000A52  11F2               	iorwf	(printf@width+1)& (0+255),w,b
  7817  000A54  B4D8               	btfsc	status,2,c
  7818  000A56  D00F               	goto	l6931
  7819  000A58                     l6927:
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;doprnt.c: 1430: (putch(' ') );
  7823  000A58  0E20               	movlw	32
  7824  000A5A  ECD2  F01F         	call	_putch
  7825                           
  7826                           ;doprnt.c: 1431: while(--width);
  7827  000A5E  0100               	movlb	0	; () banked
  7828  000A60  07F1               	decf	printf@width& (0+255),f,b
  7829  000A62  A0D8               	btfss	status,0,c
  7830  000A64  07F2               	decf	(printf@width+1)& (0+255),f,b
  7831  000A66  0100               	movlb	0	; () banked
  7832  000A68  51F1               	movf	printf@width& (0+255),w,b
  7833  000A6A  0100               	movlb	0	; () banked
  7834  000A6C  11F2               	iorwf	(printf@width+1)& (0+255),w,b
  7835  000A6E  B4D8               	btfsc	status,2,c
  7836  000A70  D002               	goto	l6931
  7837  000A72  D7F2               	goto	l6927
  7838                           
  7839                           ; BSR set to: 0
  7840  000A74  D000               	goto	l6931
  7841  000A76                     l6931:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;doprnt.c: 1438: if(flag & 0x03)
  7845  000A76  0E03               	movlw	3
  7846  000A78  0100               	movlb	0	; () banked
  7847  000A7A  15EF               	andwf	printf@flag& (0+255),w,b
  7848  000A7C  6E53               	movwf	??_printf& (0+255),c
  7849  000A7E  0E00               	movlw	0
  7850  000A80  0100               	movlb	0	; () banked
  7851  000A82  15F0               	andwf	(printf@flag+1)& (0+255),w,b
  7852  000A84  6E54               	movwf	(??_printf+1)& (0+255),c
  7853  000A86  5053               	movf	??_printf,w,c
  7854  000A88  1054               	iorwf	??_printf+1,w,c
  7855  000A8A  B4D8               	btfsc	status,2,c
  7856  000A8C  D004               	goto	l6935
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;doprnt.c: 1439: (putch('-') );
  7860  000A8E  0E2D               	movlw	45
  7861  000A90  ECD2  F01F         	call	_putch
  7862  000A94  D000               	goto	l6935
  7863  000A96                     l6935:
  7864  000A96  C04E  FFF6         	movff	printf@f,tblptrl
  7865  000A9A  C04F  FFF7         	movff	printf@f+1,tblptrh
  7866  000A9E  4A4E               	infsnz	printf@f,f,c
  7867  000AA0  2A4F               	incf	printf@f+1,f,c
  7868  000AA2                     	if	0	;tblptru may be non-zero
  7869  000AA2                     	endif
  7870  000AA2                     	if	0	;tblptru may be non-zero
  7871  000AA2                     	endif
  7872  000AA2  0008               	tblrd		*
  7873  000AA4  CFF5 F0F8          	movff	tablat,printf@c
  7874  000AA8  0100               	movlb	0	; () banked
  7875  000AAA  51F8               	movf	printf@c& (0+255),w,b
  7876  000AAC  B4D8               	btfsc	status,2,c
  7877  000AAE  D003               	goto	l717
  7878  000AB0  EF16  F000         	goto	l6673
  7879                           
  7880                           ; BSR set to: 0
  7881  000AB4  D000               	goto	l717
  7882  000AB6                     l717:
  7883                           
  7884                           ; BSR set to: 0
  7885  000AB6  0012               	return		;funcret
  7886  000AB8                     __end_of_printf:
  7887                           	opt stack 0
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon2	equ	0xFF1
  7895                           postinc0	equ	0xFEE
  7896                           wreg	equ	0xFE8
  7897                           postdec1	equ	0xFE5
  7898                           fsr1l	equ	0xFE1
  7899                           indf2	equ	0xFDF
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function _scale *****************
  7907 ;; Defined at:
  7908 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;  scl             1    wreg     char 
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;  scl             1   55[COMRAM] char 
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  3   49[COMRAM] char 
  7915 ;; Registers used:
  7916 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7922 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;Total ram usage:        7 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    4
  7929 ;; This function calls:
  7930 ;;		___awdiv
  7931 ;;		___awmod
  7932 ;;		___ftmul
  7933 ;;		___wmul
  7934 ;; This function is called by:
  7935 ;;		_printf
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text21
  7940  0011D6                     __ptext21:
  7941                           	opt stack 0
  7942  0011D6                     _scale:
  7943                           	opt stack 21
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;incstack = 0
  7947                           ;scale@scl stored from wreg
  7948  0011D6  6E38               	movwf	scale@scl,c
  7949                           
  7950                           ;doprnt.c: 428: if(scl < 0) {
  7951  0011D8  AE38               	btfss	scale@scl,7,c
  7952  0011DA  D0EF               	goto	l6301
  7953                           
  7954                           ;doprnt.c: 429: scl = -scl;
  7955  0011DC  6C38               	negf	scale@scl,c
  7956                           
  7957                           ;doprnt.c: 430: if(scl>=110)
  7958  0011DE  5038               	movf	scale@scl,w,c
  7959  0011E0  0A80               	xorlw	128
  7960  0011E2  0F12               	addlw	-238
  7961  0011E4  A0D8               	btfss	status,0,c
  7962  0011E6  D08D               	goto	l6291
  7963                           
  7964                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7965  0011E8  0E00               	movlw	0
  7966  0011EA  6E20               	movwf	___wmul@multiplicand+1,c
  7967  0011EC  0E03               	movlw	3
  7968  0011EE  6E1F               	movwf	___wmul@multiplicand,c
  7969  0011F0  0E00               	movlw	0
  7970  0011F2  6E18               	movwf	___awdiv@divisor+1,c
  7971  0011F4  0E0A               	movlw	10
  7972  0011F6  6E17               	movwf	___awdiv@divisor,c
  7973  0011F8  0E00               	movlw	0
  7974  0011FA  6E12               	movwf	___awmod@divisor+1,c
  7975  0011FC  0E64               	movlw	100
  7976  0011FE  6E11               	movwf	___awmod@divisor,c
  7977  001200  5038               	movf	scale@scl,w,c
  7978  001202  6E0F               	movwf	___awmod@dividend,c
  7979  001204  6A10               	clrf	___awmod@dividend+1,c
  7980  001206  BE0F               	btfsc	___awmod@dividend,7,c
  7981  001208  0610               	decf	___awmod@dividend+1,f,c
  7982  00120A  EC48  F01B         	call	___awmod	;wreg free
  7983  00120E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  7984  001212  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  7985  001216  EC68  F019         	call	___awdiv	;wreg free
  7986  00121A  0E09               	movlw	9
  7987  00121C  2415               	addwf	?___awdiv,w,c
  7988  00121E  6E1D               	movwf	___wmul@multiplier,c
  7989  001220  0E00               	movlw	0
  7990  001222  2016               	addwfc	?___awdiv+1,w,c
  7991  001224  6E1E               	movwf	___wmul@multiplier+1,c
  7992  001226  EC01  F01F         	call	___wmul	;wreg free
  7993  00122A  0EDA               	movlw	low __npowers_
  7994  00122C  241D               	addwf	?___wmul,w,c
  7995  00122E  6EF6               	movwf	tblptrl,c
  7996  001230  0EFE               	movlw	high __npowers_
  7997  001232  201E               	addwfc	?___wmul+1,w,c
  7998  001234  6EF7               	movwf	tblptrh,c
  7999  001236                     	if	0	;There are less than 3 active tblptr bytes
  8000  001236                     	endif
  8001  001236  0009               	tblrd		*+
  8002  001238  CFF5 F026          	movff	tablat,___ftmul@f2
  8003  00123C  0009               	tblrd		*+
  8004  00123E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8005  001242  000A               	tblrd		*-
  8006  001244  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8007  001248  0E00               	movlw	0
  8008  00124A  6E18               	movwf	___awdiv@divisor+1,c
  8009  00124C  0E64               	movlw	100
  8010  00124E  6E17               	movwf	___awdiv@divisor,c
  8011  001250  5038               	movf	scale@scl,w,c
  8012  001252  6E15               	movwf	___awdiv@dividend,c
  8013  001254  6A16               	clrf	___awdiv@dividend+1,c
  8014  001256  BE15               	btfsc	___awdiv@dividend,7,c
  8015  001258  0616               	decf	___awdiv@dividend+1,f,c
  8016  00125A  EC68  F019         	call	___awdiv	;wreg free
  8017  00125E  0E12               	movlw	18
  8018  001260  2415               	addwf	?___awdiv,w,c
  8019  001262  6E1D               	movwf	___wmul@multiplier,c
  8020  001264  0E00               	movlw	0
  8021  001266  2016               	addwfc	?___awdiv+1,w,c
  8022  001268  6E1E               	movwf	___wmul@multiplier+1,c
  8023  00126A  0E00               	movlw	0
  8024  00126C  6E20               	movwf	___wmul@multiplicand+1,c
  8025  00126E  0E03               	movlw	3
  8026  001270  6E1F               	movwf	___wmul@multiplicand,c
  8027  001272  EC01  F01F         	call	___wmul	;wreg free
  8028  001276  0EDA               	movlw	low __npowers_
  8029  001278  241D               	addwf	?___wmul,w,c
  8030  00127A  6EF6               	movwf	tblptrl,c
  8031  00127C  0EFE               	movlw	high __npowers_
  8032  00127E  201E               	addwfc	?___wmul+1,w,c
  8033  001280  6EF7               	movwf	tblptrh,c
  8034  001282                     	if	0	;There are less than 3 active tblptr bytes
  8035  001282                     	endif
  8036  001282  0009               	tblrd		*+
  8037  001284  CFF5 F023          	movff	tablat,___ftmul@f1
  8038  001288  0009               	tblrd		*+
  8039  00128A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8040  00128E  000A               	tblrd		*-
  8041  001290  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8042  001294  EC6C  F014         	call	___ftmul	;wreg free
  8043  001298  C023  F035         	movff	?___ftmul,_scale$2526
  8044  00129C  C024  F036         	movff	?___ftmul+1,_scale$2526+1
  8045  0012A0  C025  F037         	movff	?___ftmul+2,_scale$2526+2
  8046                           
  8047                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8048  0012A4  C035  F023         	movff	_scale$2526,___ftmul@f1
  8049  0012A8  C036  F024         	movff	_scale$2526+1,___ftmul@f1+1
  8050  0012AC  C037  F025         	movff	_scale$2526+2,___ftmul@f1+2
  8051  0012B0  0E00               	movlw	0
  8052  0012B2  6E20               	movwf	___wmul@multiplicand+1,c
  8053  0012B4  0E03               	movlw	3
  8054  0012B6  6E1F               	movwf	___wmul@multiplicand,c
  8055  0012B8  0E00               	movlw	0
  8056  0012BA  6E12               	movwf	___awmod@divisor+1,c
  8057  0012BC  0E0A               	movlw	10
  8058  0012BE  6E11               	movwf	___awmod@divisor,c
  8059  0012C0  5038               	movf	scale@scl,w,c
  8060  0012C2  6E0F               	movwf	___awmod@dividend,c
  8061  0012C4  6A10               	clrf	___awmod@dividend+1,c
  8062  0012C6  BE0F               	btfsc	___awmod@dividend,7,c
  8063  0012C8  0610               	decf	___awmod@dividend+1,f,c
  8064  0012CA  EC48  F01B         	call	___awmod	;wreg free
  8065  0012CE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8066  0012D2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8067  0012D6  EC01  F01F         	call	___wmul	;wreg free
  8068  0012DA  0EDA               	movlw	low __npowers_
  8069  0012DC  241D               	addwf	?___wmul,w,c
  8070  0012DE  6EF6               	movwf	tblptrl,c
  8071  0012E0  0EFE               	movlw	high __npowers_
  8072  0012E2  201E               	addwfc	?___wmul+1,w,c
  8073  0012E4  6EF7               	movwf	tblptrh,c
  8074  0012E6                     	if	0	;There are less than 3 active tblptr bytes
  8075  0012E6                     	endif
  8076  0012E6  0009               	tblrd		*+
  8077  0012E8  CFF5 F026          	movff	tablat,___ftmul@f2
  8078  0012EC  0009               	tblrd		*+
  8079  0012EE  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8080  0012F2  000A               	tblrd		*-
  8081  0012F4  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8082  0012F8  EC6C  F014         	call	___ftmul	;wreg free
  8083  0012FC  D141               	goto	L13
  8084  0012FE  D15A               	goto	l616
  8085  001300  D054               	goto	l6297
  8086  001302                     l6291:
  8087                           
  8088                           ;doprnt.c: 432: else if(scl > 10)
  8089  001302  5038               	movf	scale@scl,w,c
  8090  001304  0A80               	xorlw	128
  8091  001306  0F75               	addlw	-139
  8092  001308  A0D8               	btfss	status,0,c
  8093  00130A  D04F               	goto	l6297
  8094                           
  8095                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8096  00130C  0E00               	movlw	0
  8097  00130E  6E18               	movwf	___awdiv@divisor+1,c
  8098  001310  0E0A               	movlw	10
  8099  001312  6E17               	movwf	___awdiv@divisor,c
  8100  001314  5038               	movf	scale@scl,w,c
  8101  001316  6E15               	movwf	___awdiv@dividend,c
  8102  001318  6A16               	clrf	___awdiv@dividend+1,c
  8103  00131A  BE15               	btfsc	___awdiv@dividend,7,c
  8104  00131C  0616               	decf	___awdiv@dividend+1,f,c
  8105  00131E  EC68  F019         	call	___awdiv	;wreg free
  8106  001322  0E09               	movlw	9
  8107  001324  2415               	addwf	?___awdiv,w,c
  8108  001326  6E1D               	movwf	___wmul@multiplier,c
  8109  001328  0E00               	movlw	0
  8110  00132A  2016               	addwfc	?___awdiv+1,w,c
  8111  00132C  6E1E               	movwf	___wmul@multiplier+1,c
  8112  00132E  0E00               	movlw	0
  8113  001330  6E20               	movwf	___wmul@multiplicand+1,c
  8114  001332  0E03               	movlw	3
  8115  001334  6E1F               	movwf	___wmul@multiplicand,c
  8116  001336  EC01  F01F         	call	___wmul	;wreg free
  8117  00133A  0EDA               	movlw	low __npowers_
  8118  00133C  241D               	addwf	?___wmul,w,c
  8119  00133E  6EF6               	movwf	tblptrl,c
  8120  001340  0EFE               	movlw	high __npowers_
  8121  001342  201E               	addwfc	?___wmul+1,w,c
  8122  001344  6EF7               	movwf	tblptrh,c
  8123  001346                     	if	0	;There are less than 3 active tblptr bytes
  8124  001346                     	endif
  8125  001346  0009               	tblrd		*+
  8126  001348  CFF5 F023          	movff	tablat,___ftmul@f1
  8127  00134C  0009               	tblrd		*+
  8128  00134E  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8129  001352  000A               	tblrd		*-
  8130  001354  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8131  001358  0E00               	movlw	0
  8132  00135A  6E20               	movwf	___wmul@multiplicand+1,c
  8133  00135C  0E03               	movlw	3
  8134  00135E  6E1F               	movwf	___wmul@multiplicand,c
  8135  001360  0E00               	movlw	0
  8136  001362  6E12               	movwf	___awmod@divisor+1,c
  8137  001364  0E0A               	movlw	10
  8138  001366  6E11               	movwf	___awmod@divisor,c
  8139  001368  5038               	movf	scale@scl,w,c
  8140  00136A  6E0F               	movwf	___awmod@dividend,c
  8141  00136C  6A10               	clrf	___awmod@dividend+1,c
  8142  00136E  BE0F               	btfsc	___awmod@dividend,7,c
  8143  001370  0610               	decf	___awmod@dividend+1,f,c
  8144  001372  EC48  F01B         	call	___awmod	;wreg free
  8145  001376  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8146  00137A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8147  00137E  EC01  F01F         	call	___wmul	;wreg free
  8148  001382  0EDA               	movlw	low __npowers_
  8149  001384  241D               	addwf	?___wmul,w,c
  8150  001386  6EF6               	movwf	tblptrl,c
  8151  001388  0EFE               	movlw	high __npowers_
  8152  00138A  201E               	addwfc	?___wmul+1,w,c
  8153  00138C  6EF7               	movwf	tblptrh,c
  8154  00138E                     	if	0	;There are less than 3 active tblptr bytes
  8155  00138E                     	endif
  8156  00138E  0009               	tblrd		*+
  8157  001390  CFF5 F026          	movff	tablat,___ftmul@f2
  8158  001394  0009               	tblrd		*+
  8159  001396  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8160  00139A  000A               	tblrd		*-
  8161  00139C  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8162  0013A0  EC6C  F014         	call	___ftmul	;wreg free
  8163  0013A4  D0ED               	goto	L13
  8164  0013A6  D106               	goto	l616
  8165  0013A8  D000               	goto	l6297
  8166  0013AA                     l6297:
  8167                           
  8168                           ;doprnt.c: 434: return _npowers_[scl];
  8169  0013AA  5038               	movf	scale@scl,w,c
  8170  0013AC  0D03               	mullw	3
  8171  0013AE  0EDA               	movlw	low __npowers_
  8172  0013B0  24F3               	addwf	prodl,w,c
  8173  0013B2  6EF6               	movwf	tblptrl,c
  8174  0013B4  0EFE               	movlw	high __npowers_
  8175  0013B6  D0F2               	goto	L12
  8176  0013B8  D0FD               	goto	l616
  8177  0013BA                     l6301:
  8178                           
  8179                           ;doprnt.c: 435: }
  8180                           ;doprnt.c: 436: if(scl>=110)
  8181  0013BA  5038               	movf	scale@scl,w,c
  8182  0013BC  0A80               	xorlw	128
  8183  0013BE  0F12               	addlw	-238
  8184  0013C0  A0D8               	btfss	status,0,c
  8185  0013C2  D08D               	goto	l6309
  8186                           
  8187                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8188  0013C4  0E00               	movlw	0
  8189  0013C6  6E20               	movwf	___wmul@multiplicand+1,c
  8190  0013C8  0E03               	movlw	3
  8191  0013CA  6E1F               	movwf	___wmul@multiplicand,c
  8192  0013CC  0E00               	movlw	0
  8193  0013CE  6E18               	movwf	___awdiv@divisor+1,c
  8194  0013D0  0E0A               	movlw	10
  8195  0013D2  6E17               	movwf	___awdiv@divisor,c
  8196  0013D4  0E00               	movlw	0
  8197  0013D6  6E12               	movwf	___awmod@divisor+1,c
  8198  0013D8  0E64               	movlw	100
  8199  0013DA  6E11               	movwf	___awmod@divisor,c
  8200  0013DC  5038               	movf	scale@scl,w,c
  8201  0013DE  6E0F               	movwf	___awmod@dividend,c
  8202  0013E0  6A10               	clrf	___awmod@dividend+1,c
  8203  0013E2  BE0F               	btfsc	___awmod@dividend,7,c
  8204  0013E4  0610               	decf	___awmod@dividend+1,f,c
  8205  0013E6  EC48  F01B         	call	___awmod	;wreg free
  8206  0013EA  C00F  F015         	movff	?___awmod,___awdiv@dividend
  8207  0013EE  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  8208  0013F2  EC68  F019         	call	___awdiv	;wreg free
  8209  0013F6  0E09               	movlw	9
  8210  0013F8  2415               	addwf	?___awdiv,w,c
  8211  0013FA  6E1D               	movwf	___wmul@multiplier,c
  8212  0013FC  0E00               	movlw	0
  8213  0013FE  2016               	addwfc	?___awdiv+1,w,c
  8214  001400  6E1E               	movwf	___wmul@multiplier+1,c
  8215  001402  EC01  F01F         	call	___wmul	;wreg free
  8216  001406  0E01               	movlw	low __powers_
  8217  001408  241D               	addwf	?___wmul,w,c
  8218  00140A  6EF6               	movwf	tblptrl,c
  8219  00140C  0EFF               	movlw	high __powers_
  8220  00140E  201E               	addwfc	?___wmul+1,w,c
  8221  001410  6EF7               	movwf	tblptrh,c
  8222  001412                     	if	0	;There are less than 3 active tblptr bytes
  8223  001412                     	endif
  8224  001412  0009               	tblrd		*+
  8225  001414  CFF5 F026          	movff	tablat,___ftmul@f2
  8226  001418  0009               	tblrd		*+
  8227  00141A  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8228  00141E  000A               	tblrd		*-
  8229  001420  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8230  001424  0E00               	movlw	0
  8231  001426  6E18               	movwf	___awdiv@divisor+1,c
  8232  001428  0E64               	movlw	100
  8233  00142A  6E17               	movwf	___awdiv@divisor,c
  8234  00142C  5038               	movf	scale@scl,w,c
  8235  00142E  6E15               	movwf	___awdiv@dividend,c
  8236  001430  6A16               	clrf	___awdiv@dividend+1,c
  8237  001432  BE15               	btfsc	___awdiv@dividend,7,c
  8238  001434  0616               	decf	___awdiv@dividend+1,f,c
  8239  001436  EC68  F019         	call	___awdiv	;wreg free
  8240  00143A  0E12               	movlw	18
  8241  00143C  2415               	addwf	?___awdiv,w,c
  8242  00143E  6E1D               	movwf	___wmul@multiplier,c
  8243  001440  0E00               	movlw	0
  8244  001442  2016               	addwfc	?___awdiv+1,w,c
  8245  001444  6E1E               	movwf	___wmul@multiplier+1,c
  8246  001446  0E00               	movlw	0
  8247  001448  6E20               	movwf	___wmul@multiplicand+1,c
  8248  00144A  0E03               	movlw	3
  8249  00144C  6E1F               	movwf	___wmul@multiplicand,c
  8250  00144E  EC01  F01F         	call	___wmul	;wreg free
  8251  001452  0E01               	movlw	low __powers_
  8252  001454  241D               	addwf	?___wmul,w,c
  8253  001456  6EF6               	movwf	tblptrl,c
  8254  001458  0EFF               	movlw	high __powers_
  8255  00145A  201E               	addwfc	?___wmul+1,w,c
  8256  00145C  6EF7               	movwf	tblptrh,c
  8257  00145E                     	if	0	;There are less than 3 active tblptr bytes
  8258  00145E                     	endif
  8259  00145E  0009               	tblrd		*+
  8260  001460  CFF5 F023          	movff	tablat,___ftmul@f1
  8261  001464  0009               	tblrd		*+
  8262  001466  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8263  00146A  000A               	tblrd		*-
  8264  00146C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8265  001470  EC6C  F014         	call	___ftmul	;wreg free
  8266  001474  C023  F035         	movff	?___ftmul,_scale$2526
  8267  001478  C024  F036         	movff	?___ftmul+1,_scale$2526+1
  8268  00147C  C025  F037         	movff	?___ftmul+2,_scale$2526+2
  8269                           
  8270                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8271  001480  C035  F023         	movff	_scale$2526,___ftmul@f1
  8272  001484  C036  F024         	movff	_scale$2526+1,___ftmul@f1+1
  8273  001488  C037  F025         	movff	_scale$2526+2,___ftmul@f1+2
  8274  00148C  0E00               	movlw	0
  8275  00148E  6E20               	movwf	___wmul@multiplicand+1,c
  8276  001490  0E03               	movlw	3
  8277  001492  6E1F               	movwf	___wmul@multiplicand,c
  8278  001494  0E00               	movlw	0
  8279  001496  6E12               	movwf	___awmod@divisor+1,c
  8280  001498  0E0A               	movlw	10
  8281  00149A  6E11               	movwf	___awmod@divisor,c
  8282  00149C  5038               	movf	scale@scl,w,c
  8283  00149E  6E0F               	movwf	___awmod@dividend,c
  8284  0014A0  6A10               	clrf	___awmod@dividend+1,c
  8285  0014A2  BE0F               	btfsc	___awmod@dividend,7,c
  8286  0014A4  0610               	decf	___awmod@dividend+1,f,c
  8287  0014A6  EC48  F01B         	call	___awmod	;wreg free
  8288  0014AA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8289  0014AE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8290  0014B2  EC01  F01F         	call	___wmul	;wreg free
  8291  0014B6  0E01               	movlw	low __powers_
  8292  0014B8  241D               	addwf	?___wmul,w,c
  8293  0014BA  6EF6               	movwf	tblptrl,c
  8294  0014BC  0EFF               	movlw	high __powers_
  8295  0014BE  201E               	addwfc	?___wmul+1,w,c
  8296  0014C0  6EF7               	movwf	tblptrh,c
  8297  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  8298  0014C2                     	endif
  8299  0014C2  0009               	tblrd		*+
  8300  0014C4  CFF5 F026          	movff	tablat,___ftmul@f2
  8301  0014C8  0009               	tblrd		*+
  8302  0014CA  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8303  0014CE  000A               	tblrd		*-
  8304  0014D0  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8305  0014D4  EC6C  F014         	call	___ftmul	;wreg free
  8306  0014D8  D053               	goto	L13
  8307  0014DA  D06C               	goto	l616
  8308  0014DC  D059               	goto	l6315
  8309  0014DE                     l6309:
  8310                           
  8311                           ;doprnt.c: 438: else if(scl > 10)
  8312  0014DE  5038               	movf	scale@scl,w,c
  8313  0014E0  0A80               	xorlw	128
  8314  0014E2  0F75               	addlw	-139
  8315  0014E4  A0D8               	btfss	status,0,c
  8316  0014E6  D054               	goto	l6315
  8317                           
  8318                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8319  0014E8  0E00               	movlw	0
  8320  0014EA  6E18               	movwf	___awdiv@divisor+1,c
  8321  0014EC  0E0A               	movlw	10
  8322  0014EE  6E17               	movwf	___awdiv@divisor,c
  8323  0014F0  5038               	movf	scale@scl,w,c
  8324  0014F2  6E15               	movwf	___awdiv@dividend,c
  8325  0014F4  6A16               	clrf	___awdiv@dividend+1,c
  8326  0014F6  BE15               	btfsc	___awdiv@dividend,7,c
  8327  0014F8  0616               	decf	___awdiv@dividend+1,f,c
  8328  0014FA  EC68  F019         	call	___awdiv	;wreg free
  8329  0014FE  0E09               	movlw	9
  8330  001500  2415               	addwf	?___awdiv,w,c
  8331  001502  6E1D               	movwf	___wmul@multiplier,c
  8332  001504  0E00               	movlw	0
  8333  001506  2016               	addwfc	?___awdiv+1,w,c
  8334  001508  6E1E               	movwf	___wmul@multiplier+1,c
  8335  00150A  0E00               	movlw	0
  8336  00150C  6E20               	movwf	___wmul@multiplicand+1,c
  8337  00150E  0E03               	movlw	3
  8338  001510  6E1F               	movwf	___wmul@multiplicand,c
  8339  001512  EC01  F01F         	call	___wmul	;wreg free
  8340  001516  0E01               	movlw	low __powers_
  8341  001518  241D               	addwf	?___wmul,w,c
  8342  00151A  6EF6               	movwf	tblptrl,c
  8343  00151C  0EFF               	movlw	high __powers_
  8344  00151E  201E               	addwfc	?___wmul+1,w,c
  8345  001520  6EF7               	movwf	tblptrh,c
  8346  001522                     	if	0	;There are less than 3 active tblptr bytes
  8347  001522                     	endif
  8348  001522  0009               	tblrd		*+
  8349  001524  CFF5 F023          	movff	tablat,___ftmul@f1
  8350  001528  0009               	tblrd		*+
  8351  00152A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8352  00152E  000A               	tblrd		*-
  8353  001530  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8354  001534  0E00               	movlw	0
  8355  001536  6E20               	movwf	___wmul@multiplicand+1,c
  8356  001538  0E03               	movlw	3
  8357  00153A  6E1F               	movwf	___wmul@multiplicand,c
  8358  00153C  0E00               	movlw	0
  8359  00153E  6E12               	movwf	___awmod@divisor+1,c
  8360  001540  0E0A               	movlw	10
  8361  001542  6E11               	movwf	___awmod@divisor,c
  8362  001544  5038               	movf	scale@scl,w,c
  8363  001546  6E0F               	movwf	___awmod@dividend,c
  8364  001548  6A10               	clrf	___awmod@dividend+1,c
  8365  00154A  BE0F               	btfsc	___awmod@dividend,7,c
  8366  00154C  0610               	decf	___awmod@dividend+1,f,c
  8367  00154E  EC48  F01B         	call	___awmod	;wreg free
  8368  001552  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8369  001556  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8370  00155A  EC01  F01F         	call	___wmul	;wreg free
  8371  00155E  0E01               	movlw	low __powers_
  8372  001560  241D               	addwf	?___wmul,w,c
  8373  001562  6EF6               	movwf	tblptrl,c
  8374  001564  0EFF               	movlw	high __powers_
  8375  001566  201E               	addwfc	?___wmul+1,w,c
  8376  001568  6EF7               	movwf	tblptrh,c
  8377  00156A                     	if	0	;There are less than 3 active tblptr bytes
  8378  00156A                     	endif
  8379  00156A  0009               	tblrd		*+
  8380  00156C  CFF5 F026          	movff	tablat,___ftmul@f2
  8381  001570  0009               	tblrd		*+
  8382  001572  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8383  001576  000A               	tblrd		*-
  8384  001578  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8385  00157C  EC6C  F014         	call	___ftmul	;wreg free
  8386  001580                     L13:
  8387  001580  C023  F032         	movff	?___ftmul,?_scale
  8388  001584  C024  F033         	movff	?___ftmul+1,?_scale+1
  8389  001588  C025  F034         	movff	?___ftmul+2,?_scale+2
  8390  00158C  D013               	goto	l616
  8391  00158E  D000               	goto	l6315
  8392  001590                     l6315:
  8393                           
  8394                           ;doprnt.c: 440: return _powers_[scl];
  8395  001590  5038               	movf	scale@scl,w,c
  8396  001592  0D03               	mullw	3
  8397  001594  0E01               	movlw	low __powers_
  8398  001596  24F3               	addwf	prodl,w,c
  8399  001598  6EF6               	movwf	tblptrl,c
  8400  00159A  0EFF               	movlw	high __powers_
  8401  00159C                     L12:
  8402  00159C  20F4               	addwfc	prodh,w,c
  8403  00159E  6EF7               	movwf	tblptrh,c
  8404  0015A0                     	if	0	;There are less than 3 active tblptr bytes
  8405  0015A0                     	endif
  8406  0015A0  0009               	tblrd		*+
  8407  0015A2  CFF5 F032          	movff	tablat,?_scale
  8408  0015A6  0009               	tblrd		*+
  8409  0015A8  CFF5 F033          	movff	tablat,?_scale+1
  8410  0015AC  000A               	tblrd		*-
  8411  0015AE  CFF5 F034          	movff	tablat,?_scale+2
  8412  0015B2  D000               	goto	l616
  8413  0015B4                     l616:
  8414  0015B4  0012               	return		;funcret
  8415  0015B6                     __end_of_scale:
  8416                           	opt stack 0
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           intcon2	equ	0xFF1
  8424                           postinc0	equ	0xFEE
  8425                           wreg	equ	0xFE8
  8426                           postdec1	equ	0xFE5
  8427                           fsr1l	equ	0xFE1
  8428                           indf2	equ	0xFDF
  8429                           postinc2	equ	0xFDE
  8430                           postdec2	equ	0xFDD
  8431                           fsr2h	equ	0xFDA
  8432                           fsr2l	equ	0xFD9
  8433                           status	equ	0xFD8
  8434                           
  8435 ;; *************** function _putch *****************
  8436 ;; Defined at:
  8437 ;;		line 296 in file "Lab9test.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  c               1    wreg     unsigned char 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  c               1   14[COMRAM] unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;		None               void
  8444 ;; Registers used:
  8445 ;;		wreg
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;Total ram usage:        1 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    2
  8458 ;; This function calls:
  8459 ;;		Nothing
  8460 ;; This function is called by:
  8461 ;;		_printf
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text22
  8466  003FA4                     __ptext22:
  8467                           	opt stack 0
  8468  003FA4                     _putch:
  8469                           	opt stack 23
  8470                           
  8471                           ;incstack = 0
  8472                           ;putch@c stored from wreg
  8473  003FA4  6E0F               	movwf	putch@c,c
  8474                           
  8475                           ;Lab9test.c: 298: while (!TRMT);
  8476  003FA6  D000               	goto	l402
  8477  003FA8                     l402:
  8478  003FA8  A2AC               	btfss	4012,1,c	;volatile
  8479  003FAA  D7FE               	goto	l402
  8480                           
  8481                           ;Lab9test.c: 299: TXREG = c;
  8482  003FAC  C00F  FFAD         	movff	putch@c,4013	;volatile
  8483  003FB0  0012               	return		;funcret
  8484  003FB2                     __end_of_putch:
  8485                           	opt stack 0
  8486                           tblptru	equ	0xFF8
  8487                           tblptrh	equ	0xFF7
  8488                           tblptrl	equ	0xFF6
  8489                           tablat	equ	0xFF5
  8490                           prodh	equ	0xFF4
  8491                           prodl	equ	0xFF3
  8492                           intcon2	equ	0xFF1
  8493                           postinc0	equ	0xFEE
  8494                           wreg	equ	0xFE8
  8495                           postdec1	equ	0xFE5
  8496                           fsr1l	equ	0xFE1
  8497                           indf2	equ	0xFDF
  8498                           postinc2	equ	0xFDE
  8499                           postdec2	equ	0xFDD
  8500                           fsr2h	equ	0xFDA
  8501                           fsr2l	equ	0xFD9
  8502                           status	equ	0xFD8
  8503                           
  8504 ;; *************** function _isdigit *****************
  8505 ;; Defined at:
  8506 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  c               1    wreg     unsigned char 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  c               1   16[COMRAM] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;		None               void
  8513 ;; Registers used:
  8514 ;;		wreg, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;Total ram usage:        3 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    2
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_printf
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text23
  8535  003E9A                     __ptext23:
  8536                           	opt stack 0
  8537  003E9A                     _isdigit:
  8538                           	opt stack 23
  8539                           
  8540                           ;incstack = 0
  8541                           ;isdigit@c stored from wreg
  8542  003E9A  6E11               	movwf	isdigit@c,c
  8543  003E9C  0E00               	movlw	0
  8544  003E9E  6E10               	movwf	_isdigit$2218,c
  8545  003EA0  0E3A               	movlw	58
  8546  003EA2  6011               	cpfslt	isdigit@c,c
  8547  003EA4  D006               	goto	l6327
  8548  003EA6  0E2F               	movlw	47
  8549  003EA8  6411               	cpfsgt	isdigit@c,c
  8550  003EAA  D003               	goto	l6327
  8551  003EAC  0E01               	movlw	1
  8552  003EAE  6E10               	movwf	_isdigit$2218,c
  8553  003EB0  D000               	goto	l6327
  8554  003EB2                     l6327:
  8555  003EB2  C010  F00F         	movff	_isdigit$2218,??_isdigit
  8556  003EB6  300F               	rrcf	??_isdigit,w,c
  8557  003EB8  D000               	goto	l1218
  8558  003EBA                     l1218:
  8559  003EBA  0012               	return		;funcret
  8560  003EBC                     __end_of_isdigit:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon2	equ	0xFF1
  8569                           postinc0	equ	0xFEE
  8570                           wreg	equ	0xFE8
  8571                           postdec1	equ	0xFE5
  8572                           fsr1l	equ	0xFE1
  8573                           indf2	equ	0xFDF
  8574                           postinc2	equ	0xFDE
  8575                           postdec2	equ	0xFDD
  8576                           fsr2h	equ	0xFDA
  8577                           fsr2l	equ	0xFD9
  8578                           status	equ	0xFD8
  8579                           
  8580 ;; *************** function _fround *****************
  8581 ;; Defined at:
  8582 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8583 ;; Parameters:    Size  Location     Type
  8584 ;;  prec            1    wreg     unsigned char 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;  prec            1   58[COMRAM] unsigned char 
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  3   49[COMRAM] unsigned char 
  8589 ;; Registers used:
  8590 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8596 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;Total ram usage:       10 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; Hardware stack levels required when called:    4
  8603 ;; This function calls:
  8604 ;;		___awdiv
  8605 ;;		___awmod
  8606 ;;		___ftmul
  8607 ;;		___wmul
  8608 ;; This function is called by:
  8609 ;;		_printf
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text24
  8614  001BC0                     __ptext24:
  8615                           	opt stack 0
  8616  001BC0                     _fround:
  8617                           	opt stack 21
  8618                           
  8619                           ;incstack = 0
  8620                           ;fround@prec stored from wreg
  8621  001BC0  6E3B               	movwf	fround@prec,c
  8622                           
  8623                           ;doprnt.c: 413: if(prec>=110)
  8624  001BC2  0E6D               	movlw	109
  8625  001BC4  643B               	cpfsgt	fround@prec,c
  8626  001BC6  D09B               	goto	l6269
  8627                           
  8628                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8629  001BC8  0E00               	movlw	0
  8630  001BCA  6E20               	movwf	___wmul@multiplicand+1,c
  8631  001BCC  0E03               	movlw	3
  8632  001BCE  6E1F               	movwf	___wmul@multiplicand,c
  8633  001BD0  0E00               	movlw	0
  8634  001BD2  6E18               	movwf	___awdiv@divisor+1,c
  8635  001BD4  0E0A               	movlw	10
  8636  001BD6  6E17               	movwf	___awdiv@divisor,c
  8637  001BD8  0E00               	movlw	0
  8638  001BDA  6E12               	movwf	___awmod@divisor+1,c
  8639  001BDC  0E64               	movlw	100
  8640  001BDE  6E11               	movwf	___awmod@divisor,c
  8641  001BE0  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8642  001BE4  6A10               	clrf	___awmod@dividend+1,c
  8643  001BE6  EC48  F01B         	call	___awmod	;wreg free
  8644  001BEA  C00F  F015         	movff	?___awmod,___awdiv@dividend
  8645  001BEE  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  8646  001BF2  EC68  F019         	call	___awdiv	;wreg free
  8647  001BF6  0E09               	movlw	9
  8648  001BF8  2415               	addwf	?___awdiv,w,c
  8649  001BFA  6E1D               	movwf	___wmul@multiplier,c
  8650  001BFC  0E00               	movlw	0
  8651  001BFE  2016               	addwfc	?___awdiv+1,w,c
  8652  001C00  6E1E               	movwf	___wmul@multiplier+1,c
  8653  001C02  EC01  F01F         	call	___wmul	;wreg free
  8654  001C06  0EDA               	movlw	low __npowers_
  8655  001C08  241D               	addwf	?___wmul,w,c
  8656  001C0A  6EF6               	movwf	tblptrl,c
  8657  001C0C  0EFE               	movlw	high __npowers_
  8658  001C0E  201E               	addwfc	?___wmul+1,w,c
  8659  001C10  6EF7               	movwf	tblptrh,c
  8660  001C12                     	if	0	;There are less than 3 active tblptr bytes
  8661  001C12                     	endif
  8662  001C12  0009               	tblrd		*+
  8663  001C14  CFF5 F026          	movff	tablat,___ftmul@f2
  8664  001C18  0009               	tblrd		*+
  8665  001C1A  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8666  001C1E  000A               	tblrd		*-
  8667  001C20  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8668  001C24  0E00               	movlw	0
  8669  001C26  6E18               	movwf	___awdiv@divisor+1,c
  8670  001C28  0E64               	movlw	100
  8671  001C2A  6E17               	movwf	___awdiv@divisor,c
  8672  001C2C  C03B  F015         	movff	fround@prec,___awdiv@dividend
  8673  001C30  6A16               	clrf	___awdiv@dividend+1,c
  8674  001C32  EC68  F019         	call	___awdiv	;wreg free
  8675  001C36  0E12               	movlw	18
  8676  001C38  2415               	addwf	?___awdiv,w,c
  8677  001C3A  6E1D               	movwf	___wmul@multiplier,c
  8678  001C3C  0E00               	movlw	0
  8679  001C3E  2016               	addwfc	?___awdiv+1,w,c
  8680  001C40  6E1E               	movwf	___wmul@multiplier+1,c
  8681  001C42  0E00               	movlw	0
  8682  001C44  6E20               	movwf	___wmul@multiplicand+1,c
  8683  001C46  0E03               	movlw	3
  8684  001C48  6E1F               	movwf	___wmul@multiplicand,c
  8685  001C4A  EC01  F01F         	call	___wmul	;wreg free
  8686  001C4E  0EDA               	movlw	low __npowers_
  8687  001C50  241D               	addwf	?___wmul,w,c
  8688  001C52  6EF6               	movwf	tblptrl,c
  8689  001C54  0EFE               	movlw	high __npowers_
  8690  001C56  201E               	addwfc	?___wmul+1,w,c
  8691  001C58  6EF7               	movwf	tblptrh,c
  8692  001C5A                     	if	0	;There are less than 3 active tblptr bytes
  8693  001C5A                     	endif
  8694  001C5A  0009               	tblrd		*+
  8695  001C5C  CFF5 F023          	movff	tablat,___ftmul@f1
  8696  001C60  0009               	tblrd		*+
  8697  001C62  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8698  001C66  000A               	tblrd		*-
  8699  001C68  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8700  001C6C  EC6C  F014         	call	___ftmul	;wreg free
  8701  001C70  C023  F038         	movff	?___ftmul,_fround$2524
  8702  001C74  C024  F039         	movff	?___ftmul+1,_fround$2524+1
  8703  001C78  C025  F03A         	movff	?___ftmul+2,_fround$2524+2
  8704                           
  8705                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8706  001C7C  0E00               	movlw	0
  8707  001C7E  6E20               	movwf	___wmul@multiplicand+1,c
  8708  001C80  0E03               	movlw	3
  8709  001C82  6E1F               	movwf	___wmul@multiplicand,c
  8710  001C84  0E00               	movlw	0
  8711  001C86  6E12               	movwf	___awmod@divisor+1,c
  8712  001C88  0E0A               	movlw	10
  8713  001C8A  6E11               	movwf	___awmod@divisor,c
  8714  001C8C  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8715  001C90  6A10               	clrf	___awmod@dividend+1,c
  8716  001C92  EC48  F01B         	call	___awmod	;wreg free
  8717  001C96  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8718  001C9A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8719  001C9E  EC01  F01F         	call	___wmul	;wreg free
  8720  001CA2  0EDA               	movlw	low __npowers_
  8721  001CA4  241D               	addwf	?___wmul,w,c
  8722  001CA6  6EF6               	movwf	tblptrl,c
  8723  001CA8  0EFE               	movlw	high __npowers_
  8724  001CAA  201E               	addwfc	?___wmul+1,w,c
  8725  001CAC  6EF7               	movwf	tblptrh,c
  8726  001CAE                     	if	0	;There are less than 3 active tblptr bytes
  8727  001CAE                     	endif
  8728  001CAE  0009               	tblrd		*+
  8729  001CB0  CFF5 F026          	movff	tablat,___ftmul@f2
  8730  001CB4  0009               	tblrd		*+
  8731  001CB6  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8732  001CBA  000A               	tblrd		*-
  8733  001CBC  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8734  001CC0  C038  F023         	movff	_fround$2524,___ftmul@f1
  8735  001CC4  C039  F024         	movff	_fround$2524+1,___ftmul@f1+1
  8736  001CC8  C03A  F025         	movff	_fround$2524+2,___ftmul@f1+2
  8737  001CCC  EC6C  F014         	call	___ftmul	;wreg free
  8738  001CD0  C023  F035         	movff	?___ftmul,_fround$2525
  8739  001CD4  C024  F036         	movff	?___ftmul+1,_fround$2525+1
  8740  001CD8  C025  F037         	movff	?___ftmul+2,_fround$2525+2
  8741                           
  8742                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8743  001CDC  C035  F023         	movff	_fround$2525,___ftmul@f1
  8744  001CE0  C036  F024         	movff	_fround$2525+1,___ftmul@f1+1
  8745  001CE4  C037  F025         	movff	_fround$2525+2,___ftmul@f1+2
  8746  001CE8  0E00               	movlw	0
  8747  001CEA  6E26               	movwf	___ftmul@f2,c
  8748  001CEC  0E00               	movlw	0
  8749  001CEE  6E27               	movwf	___ftmul@f2+1,c
  8750  001CF0  0E3F               	movlw	63
  8751  001CF2  6E28               	movwf	___ftmul@f2+2,c
  8752  001CF4  EC6C  F014         	call	___ftmul	;wreg free
  8753  001CF8  D07D               	goto	L15
  8754  001CFA  D083               	goto	l609
  8755  001CFC  D062               	goto	l6277
  8756  001CFE                     l6269:
  8757                           
  8758                           ;doprnt.c: 415: else if(prec > 10)
  8759  001CFE  0E0A               	movlw	10
  8760  001D00  643B               	cpfsgt	fround@prec,c
  8761  001D02  D05F               	goto	l6277
  8762                           
  8763                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8764  001D04  0E00               	movlw	0
  8765  001D06  6E20               	movwf	___wmul@multiplicand+1,c
  8766  001D08  0E03               	movlw	3
  8767  001D0A  6E1F               	movwf	___wmul@multiplicand,c
  8768  001D0C  0E00               	movlw	0
  8769  001D0E  6E12               	movwf	___awmod@divisor+1,c
  8770  001D10  0E0A               	movlw	10
  8771  001D12  6E11               	movwf	___awmod@divisor,c
  8772  001D14  C03B  F00F         	movff	fround@prec,___awmod@dividend
  8773  001D18  6A10               	clrf	___awmod@dividend+1,c
  8774  001D1A  EC48  F01B         	call	___awmod	;wreg free
  8775  001D1E  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8776  001D22  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8777  001D26  EC01  F01F         	call	___wmul	;wreg free
  8778  001D2A  0EDA               	movlw	low __npowers_
  8779  001D2C  241D               	addwf	?___wmul,w,c
  8780  001D2E  6EF6               	movwf	tblptrl,c
  8781  001D30  0EFE               	movlw	high __npowers_
  8782  001D32  201E               	addwfc	?___wmul+1,w,c
  8783  001D34  6EF7               	movwf	tblptrh,c
  8784  001D36                     	if	0	;There are less than 3 active tblptr bytes
  8785  001D36                     	endif
  8786  001D36  0009               	tblrd		*+
  8787  001D38  CFF5 F026          	movff	tablat,___ftmul@f2
  8788  001D3C  0009               	tblrd		*+
  8789  001D3E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8790  001D42  000A               	tblrd		*-
  8791  001D44  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8792  001D48  0E00               	movlw	0
  8793  001D4A  6E18               	movwf	___awdiv@divisor+1,c
  8794  001D4C  0E0A               	movlw	10
  8795  001D4E  6E17               	movwf	___awdiv@divisor,c
  8796  001D50  C03B  F015         	movff	fround@prec,___awdiv@dividend
  8797  001D54  6A16               	clrf	___awdiv@dividend+1,c
  8798  001D56  EC68  F019         	call	___awdiv	;wreg free
  8799  001D5A  0E09               	movlw	9
  8800  001D5C  2415               	addwf	?___awdiv,w,c
  8801  001D5E  6E1D               	movwf	___wmul@multiplier,c
  8802  001D60  0E00               	movlw	0
  8803  001D62  2016               	addwfc	?___awdiv+1,w,c
  8804  001D64  6E1E               	movwf	___wmul@multiplier+1,c
  8805  001D66  0E00               	movlw	0
  8806  001D68  6E20               	movwf	___wmul@multiplicand+1,c
  8807  001D6A  0E03               	movlw	3
  8808  001D6C  6E1F               	movwf	___wmul@multiplicand,c
  8809  001D6E  EC01  F01F         	call	___wmul	;wreg free
  8810  001D72  0EDA               	movlw	low __npowers_
  8811  001D74  241D               	addwf	?___wmul,w,c
  8812  001D76  6EF6               	movwf	tblptrl,c
  8813  001D78  0EFE               	movlw	high __npowers_
  8814  001D7A  201E               	addwfc	?___wmul+1,w,c
  8815  001D7C  6EF7               	movwf	tblptrh,c
  8816  001D7E                     	if	0	;There are less than 3 active tblptr bytes
  8817  001D7E                     	endif
  8818  001D7E  0009               	tblrd		*+
  8819  001D80  CFF5 F023          	movff	tablat,___ftmul@f1
  8820  001D84  0009               	tblrd		*+
  8821  001D86  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8822  001D8A  000A               	tblrd		*-
  8823  001D8C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8824  001D90  EC6C  F014         	call	___ftmul	;wreg free
  8825  001D94  C023  F038         	movff	?___ftmul,_fround$2524
  8826  001D98  C024  F039         	movff	?___ftmul+1,_fround$2524+1
  8827  001D9C  C025  F03A         	movff	?___ftmul+2,_fround$2524+2
  8828                           
  8829                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8830  001DA0  C038  F023         	movff	_fround$2524,___ftmul@f1
  8831  001DA4  C039  F024         	movff	_fround$2524+1,___ftmul@f1+1
  8832  001DA8  C03A  F025         	movff	_fround$2524+2,___ftmul@f1+2
  8833  001DAC  0E00               	movlw	0
  8834  001DAE  6E26               	movwf	___ftmul@f2,c
  8835  001DB0  0E00               	movlw	0
  8836  001DB2  6E27               	movwf	___ftmul@f2+1,c
  8837  001DB4  0E3F               	movlw	63
  8838  001DB6  6E28               	movwf	___ftmul@f2+2,c
  8839  001DB8  EC6C  F014         	call	___ftmul	;wreg free
  8840  001DBC  D01B               	goto	L15
  8841  001DBE  D021               	goto	l609
  8842  001DC0  D000               	goto	l6277
  8843  001DC2                     l6277:
  8844                           
  8845                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8846  001DC2  503B               	movf	fround@prec,w,c
  8847  001DC4  0D03               	mullw	3
  8848  001DC6  0EDA               	movlw	low __npowers_
  8849  001DC8  24F3               	addwf	prodl,w,c
  8850  001DCA  6EF6               	movwf	tblptrl,c
  8851  001DCC  0EFE               	movlw	high __npowers_
  8852  001DCE  20F4               	addwfc	prodh,w,c
  8853  001DD0  6EF7               	movwf	tblptrh,c
  8854  001DD2                     	if	0	;There are less than 3 active tblptr bytes
  8855  001DD2                     	endif
  8856  001DD2  0009               	tblrd		*+
  8857  001DD4  CFF5 F023          	movff	tablat,___ftmul@f1
  8858  001DD8  0009               	tblrd		*+
  8859  001DDA  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8860  001DDE  000A               	tblrd		*-
  8861  001DE0  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8862  001DE4  0E00               	movlw	0
  8863  001DE6  6E26               	movwf	___ftmul@f2,c
  8864  001DE8  0E00               	movlw	0
  8865  001DEA  6E27               	movwf	___ftmul@f2+1,c
  8866  001DEC  0E3F               	movlw	63
  8867  001DEE  6E28               	movwf	___ftmul@f2+2,c
  8868  001DF0  EC6C  F014         	call	___ftmul	;wreg free
  8869  001DF4                     L15:
  8870  001DF4  C023  F032         	movff	?___ftmul,?_fround
  8871  001DF8  C024  F033         	movff	?___ftmul+1,?_fround+1
  8872  001DFC  C025  F034         	movff	?___ftmul+2,?_fround+2
  8873  001E00  D000               	goto	l609
  8874  001E02                     l609:
  8875  001E02  0012               	return		;funcret
  8876  001E04                     __end_of_fround:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon2	equ	0xFF1
  8885                           postinc0	equ	0xFEE
  8886                           wreg	equ	0xFE8
  8887                           postdec1	equ	0xFE5
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           fsr2h	equ	0xFDA
  8893                           fsr2l	equ	0xFD9
  8894                           status	equ	0xFD8
  8895                           
  8896 ;; *************** function ___ftmul *****************
  8897 ;; Defined at:
  8898 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  f1              3   34[COMRAM] float 
  8901 ;;  f2              3   37[COMRAM] float 
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  8904 ;;  sign            1   48[COMRAM] unsigned char 
  8905 ;;  cntr            1   47[COMRAM] unsigned char 
  8906 ;;  exp             1   43[COMRAM] unsigned char 
  8907 ;; Return value:  Size  Location     Type
  8908 ;;                  3   34[COMRAM] float 
  8909 ;; Registers used:
  8910 ;;		wreg, status,2, status,0, cstack
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8916 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;Total ram usage:       15 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    3
  8923 ;; This function calls:
  8924 ;;		___ftpack
  8925 ;; This function is called by:
  8926 ;;		_fround
  8927 ;;		_scale
  8928 ;;		_printf
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text25
  8933  0028D8                     __ptext25:
  8934                           	opt stack 0
  8935  0028D8                     ___ftmul:
  8936                           	opt stack 21
  8937                           
  8938                           ;incstack = 0
  8939  0028D8  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  8940  0028DC  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8941  0028DE  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8942  0028E0  3424               	rlcf	___ftmul@f1+1,w,c
  8943  0028E2  3629               	rlcf	??___ftmul& (0+255),f,c
  8944  0028E4  E301               	bnc	u5701
  8945  0028E6  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8946  0028E8                     u5701:
  8947  0028E8  5029               	movf	??___ftmul,w,c
  8948  0028EA  6E2C               	movwf	___ftmul@exp,c
  8949  0028EC  502C               	movf	___ftmul@exp,w,c
  8950  0028EE  A4D8               	btfss	status,2,c
  8951  0028F0  D002               	goto	l6061
  8952  0028F2  D00E               	goto	l6063
  8953  0028F4  D06C               	goto	l1182
  8954  0028F6                     l6061:
  8955  0028F6  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  8956  0028FA  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8957  0028FC  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8958  0028FE  3427               	rlcf	___ftmul@f2+1,w,c
  8959  002900  3629               	rlcf	??___ftmul& (0+255),f,c
  8960  002902  E301               	bnc	u5721
  8961  002904  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8962  002906                     u5721:
  8963  002906  5029               	movf	??___ftmul,w,c
  8964  002908  6E31               	movwf	___ftmul@sign,c
  8965  00290A  5031               	movf	___ftmul@sign,w,c
  8966  00290C  A4D8               	btfss	status,2,c
  8967  00290E  D007               	goto	l6067
  8968  002910                     l6063:
  8969  002910  0E00               	movlw	0
  8970  002912  6E23               	movwf	?___ftmul,c
  8971  002914  0E00               	movlw	0
  8972  002916  6E24               	movwf	?___ftmul+1,c
  8973  002918  0E00               	movlw	0
  8974  00291A  6E25               	movwf	?___ftmul+2,c
  8975  00291C  D058               	goto	l1182
  8976  00291E                     l6067:
  8977  00291E  5031               	movf	___ftmul@sign,w,c
  8978  002920  0F7B               	addlw	123
  8979  002922  262C               	addwf	___ftmul@exp,f,c
  8980  002924  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  8981  002928  5028               	movf	___ftmul@f2+2,w,c
  8982  00292A  1A31               	xorwf	___ftmul@sign,f,c
  8983  00292C  0E80               	movlw	128
  8984  00292E  1631               	andwf	___ftmul@sign,f,c
  8985  002930  8E24               	bsf	___ftmul@f1+1,7,c
  8986  002932  8E27               	bsf	___ftmul@f2+1,7,c
  8987  002934  0EFF               	movlw	255
  8988  002936  1626               	andwf	___ftmul@f2,f,c
  8989  002938  0EFF               	movlw	255
  8990  00293A  1627               	andwf	___ftmul@f2+1,f,c
  8991  00293C  0E00               	movlw	0
  8992  00293E  1628               	andwf	___ftmul@f2+2,f,c
  8993  002940  0E00               	movlw	0
  8994  002942  6E2D               	movwf	___ftmul@f3_as_product,c
  8995  002944  0E00               	movlw	0
  8996  002946  6E2E               	movwf	___ftmul@f3_as_product+1,c
  8997  002948  0E00               	movlw	0
  8998  00294A  6E2F               	movwf	___ftmul@f3_as_product+2,c
  8999  00294C  0E07               	movlw	7
  9000  00294E  6E30               	movwf	___ftmul@cntr,c
  9001  002950  D000               	goto	l6081
  9002  002952                     l6081:
  9003  002952  A023               	btfss	___ftmul@f1,0,c
  9004  002954  D007               	goto	l6085
  9005  002956  5026               	movf	___ftmul@f2,w,c
  9006  002958  262D               	addwf	___ftmul@f3_as_product,f,c
  9007  00295A  5027               	movf	___ftmul@f2+1,w,c
  9008  00295C  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  9009  00295E  5028               	movf	___ftmul@f2+2,w,c
  9010  002960  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  9011  002962  D000               	goto	l6085
  9012  002964                     l6085:
  9013  002964  90D8               	bcf	status,0,c
  9014  002966  3225               	rrcf	___ftmul@f1+2,f,c
  9015  002968  3224               	rrcf	___ftmul@f1+1,f,c
  9016  00296A  3223               	rrcf	___ftmul@f1,f,c
  9017  00296C  90D8               	bcf	status,0,c
  9018  00296E  3626               	rlcf	___ftmul@f2,f,c
  9019  002970  3627               	rlcf	___ftmul@f2+1,f,c
  9020  002972  3628               	rlcf	___ftmul@f2+2,f,c
  9021  002974  2E30               	decfsz	___ftmul@cntr,f,c
  9022  002976  D7ED               	goto	l6081
  9023  002978  D000               	goto	l6089
  9024  00297A                     l6089:
  9025  00297A  0E09               	movlw	9
  9026  00297C  6E30               	movwf	___ftmul@cntr,c
  9027  00297E  D000               	goto	l6091
  9028  002980                     l6091:
  9029  002980  A023               	btfss	___ftmul@f1,0,c
  9030  002982  D007               	goto	l6095
  9031  002984  5026               	movf	___ftmul@f2,w,c
  9032  002986  262D               	addwf	___ftmul@f3_as_product,f,c
  9033  002988  5027               	movf	___ftmul@f2+1,w,c
  9034  00298A  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  9035  00298C  5028               	movf	___ftmul@f2+2,w,c
  9036  00298E  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  9037  002990  D000               	goto	l6095
  9038  002992                     l6095:
  9039  002992  90D8               	bcf	status,0,c
  9040  002994  3225               	rrcf	___ftmul@f1+2,f,c
  9041  002996  3224               	rrcf	___ftmul@f1+1,f,c
  9042  002998  3223               	rrcf	___ftmul@f1,f,c
  9043  00299A  90D8               	bcf	status,0,c
  9044  00299C  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  9045  00299E  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  9046  0029A0  322D               	rrcf	___ftmul@f3_as_product,f,c
  9047  0029A2  2E30               	decfsz	___ftmul@cntr,f,c
  9048  0029A4  D7ED               	goto	l6091
  9049  0029A6  D000               	goto	l6099
  9050  0029A8                     l6099:
  9051  0029A8  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9052  0029AC  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9053  0029B0  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9054  0029B4  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  9055  0029B8  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  9056  0029BC  ECFF  F017         	call	___ftpack	;wreg free
  9057  0029C0  C00F  F023         	movff	?___ftpack,?___ftmul
  9058  0029C4  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  9059  0029C8  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  9060  0029CC  D000               	goto	l1182
  9061  0029CE                     l1182:
  9062  0029CE  0012               	return		;funcret
  9063  0029D0                     __end_of___ftmul:
  9064                           	opt stack 0
  9065                           tblptru	equ	0xFF8
  9066                           tblptrh	equ	0xFF7
  9067                           tblptrl	equ	0xFF6
  9068                           tablat	equ	0xFF5
  9069                           prodh	equ	0xFF4
  9070                           prodl	equ	0xFF3
  9071                           intcon2	equ	0xFF1
  9072                           postinc0	equ	0xFEE
  9073                           wreg	equ	0xFE8
  9074                           postdec1	equ	0xFE5
  9075                           fsr1l	equ	0xFE1
  9076                           indf2	equ	0xFDF
  9077                           postinc2	equ	0xFDE
  9078                           postdec2	equ	0xFDD
  9079                           fsr2h	equ	0xFDA
  9080                           fsr2l	equ	0xFD9
  9081                           status	equ	0xFD8
  9082                           
  9083 ;; *************** function __tdiv_to_l_ *****************
  9084 ;; Defined at:
  9085 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  9086 ;; Parameters:    Size  Location     Type
  9087 ;;  f1              3   14[COMRAM] float 
  9088 ;;  f2              3   17[COMRAM] float 
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;  quot            4   23[COMRAM] unsigned long 
  9091 ;;  exp1            1   28[COMRAM] unsigned char 
  9092 ;;  cntr            1   27[COMRAM] unsigned char 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  4   14[COMRAM] unsigned long 
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9102 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;Total ram usage:       15 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    2
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_printf
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           	psect	text26
  9117  0026BE                     __ptext26:
  9118                           	opt stack 0
  9119  0026BE                     __tdiv_to_l_:
  9120                           	opt stack 23
  9121                           
  9122                           ;incstack = 0
  9123  0026BE  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9124  0026C2  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9125  0026C4  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9126  0026C6  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  9127  0026C8  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9128  0026CA  E301               	bnc	u6131
  9129  0026CC  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9130  0026CE                     u6131:
  9131  0026CE  5015               	movf	??__tdiv_to_l_,w,c
  9132  0026D0  6E1D               	movwf	__tdiv_to_l_@exp1,c
  9133  0026D2  501D               	movf	__tdiv_to_l_@exp1,w,c
  9134  0026D4  A4D8               	btfss	status,2,c
  9135  0026D6  D002               	goto	l6337
  9136  0026D8  D05D               	goto	l6379
  9137  0026DA  D078               	goto	l1158
  9138  0026DC                     l6337:
  9139  0026DC  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9140  0026E0  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9141  0026E2  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9142  0026E4  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  9143  0026E6  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9144  0026E8  E301               	bnc	u6151
  9145  0026EA  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9146  0026EC                     u6151:
  9147  0026EC  5015               	movf	??__tdiv_to_l_,w,c
  9148  0026EE  6E1C               	movwf	__tdiv_to_l_@cntr,c
  9149  0026F0  501C               	movf	__tdiv_to_l_@cntr,w,c
  9150  0026F2  A4D8               	btfss	status,2,c
  9151  0026F4  D002               	goto	l6343
  9152  0026F6  D04E               	goto	l6379
  9153  0026F8  D069               	goto	l1158
  9154  0026FA                     l6343:
  9155  0026FA  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  9156  0026FC  0EFF               	movlw	255
  9157  0026FE  160F               	andwf	__tdiv_to_l_@f1,f,c
  9158  002700  0EFF               	movlw	255
  9159  002702  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  9160  002704  0E00               	movlw	0
  9161  002706  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  9162  002708  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  9163  00270A  0EFF               	movlw	255
  9164  00270C  1612               	andwf	__tdiv_to_l_@f2,f,c
  9165  00270E  0EFF               	movlw	255
  9166  002710  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  9167  002712  0E00               	movlw	0
  9168  002714  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  9169  002716  0E00               	movlw	0
  9170  002718  6E18               	movwf	__tdiv_to_l_@quot,c
  9171  00271A  0E00               	movlw	0
  9172  00271C  6E19               	movwf	__tdiv_to_l_@quot+1,c
  9173  00271E  0E00               	movlw	0
  9174  002720  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  9175  002722  0E00               	movlw	0
  9176  002724  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  9177  002726  0E7F               	movlw	127
  9178  002728  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  9179  00272A  501C               	movf	__tdiv_to_l_@cntr,w,c
  9180  00272C  0F98               	addlw	152
  9181  00272E  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  9182  002730  0E18               	movlw	24
  9183  002732  6E1C               	movwf	__tdiv_to_l_@cntr,c
  9184  002734                     l1160:
  9185  002734  90D8               	bcf	status,0,c
  9186  002736  3618               	rlcf	__tdiv_to_l_@quot,f,c
  9187  002738  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  9188  00273A  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  9189  00273C  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  9190  00273E  5012               	movf	__tdiv_to_l_@f2,w,c
  9191  002740  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  9192  002742  5013               	movf	__tdiv_to_l_@f2+1,w,c
  9193  002744  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  9194  002746  5014               	movf	__tdiv_to_l_@f2+2,w,c
  9195  002748  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  9196  00274A  A0D8               	btfss	status,0,c
  9197  00274C  D007               	goto	l1161
  9198  00274E  5012               	movf	__tdiv_to_l_@f2,w,c
  9199  002750  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  9200  002752  5013               	movf	__tdiv_to_l_@f2+1,w,c
  9201  002754  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  9202  002756  5014               	movf	__tdiv_to_l_@f2+2,w,c
  9203  002758  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  9204  00275A  8018               	bsf	__tdiv_to_l_@quot,0,c
  9205  00275C                     l1161:
  9206  00275C  90D8               	bcf	status,0,c
  9207  00275E  360F               	rlcf	__tdiv_to_l_@f1,f,c
  9208  002760  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  9209  002762  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  9210  002764  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  9211  002766  D7E6               	goto	l1160
  9212  002768  D000               	goto	l6365
  9213  00276A                     l6365:
  9214  00276A  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  9215  00276C  D010               	goto	l6377
  9216  00276E  501D               	movf	__tdiv_to_l_@exp1,w,c
  9217  002770  0A80               	xorlw	128
  9218  002772  0F97               	addlw	151
  9219  002774  B0D8               	btfsc	status,0,c
  9220  002776  D003               	goto	l6373
  9221  002778  D00D               	goto	l6379
  9222  00277A  D028               	goto	l1158
  9223  00277C  D000               	goto	l6373
  9224  00277E                     l6373:
  9225  00277E  90D8               	bcf	status,0,c
  9226  002780  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  9227  002782  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  9228  002784  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  9229  002786  3218               	rrcf	__tdiv_to_l_@quot,f,c
  9230  002788  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  9231  00278A  D7F9               	goto	l6373
  9232  00278C  D017               	goto	l1167
  9233  00278E                     l6377:
  9234  00278E  0E17               	movlw	23
  9235  002790  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  9236  002792  D011               	goto	l6385
  9237  002794                     l6379:
  9238  002794  0E00               	movlw	0
  9239  002796  6E0F               	movwf	?__tdiv_to_l_,c
  9240  002798  0E00               	movlw	0
  9241  00279A  6E10               	movwf	?__tdiv_to_l_+1,c
  9242  00279C  0E00               	movlw	0
  9243  00279E  6E11               	movwf	?__tdiv_to_l_+2,c
  9244  0027A0  0E00               	movlw	0
  9245  0027A2  6E12               	movwf	?__tdiv_to_l_+3,c
  9246  0027A4  D013               	goto	l1158
  9247  0027A6  D007               	goto	l6385
  9248  0027A8                     l6383:
  9249  0027A8  90D8               	bcf	status,0,c
  9250  0027AA  3618               	rlcf	__tdiv_to_l_@quot,f,c
  9251  0027AC  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  9252  0027AE  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  9253  0027B0  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  9254  0027B2  061D               	decf	__tdiv_to_l_@exp1,f,c
  9255  0027B4  D000               	goto	l6385
  9256  0027B6                     l6385:
  9257  0027B6  501D               	movf	__tdiv_to_l_@exp1,w,c
  9258  0027B8  A4D8               	btfss	status,2,c
  9259  0027BA  D7F6               	goto	l6383
  9260  0027BC                     l1167:
  9261  0027BC  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9262  0027C0  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9263  0027C4  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9264  0027C8  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9265  0027CC                     l1158:
  9266  0027CC  0012               	return		;funcret
  9267  0027CE                     __end_of__tdiv_to_l_:
  9268                           	opt stack 0
  9269                           tblptru	equ	0xFF8
  9270                           tblptrh	equ	0xFF7
  9271                           tblptrl	equ	0xFF6
  9272                           tablat	equ	0xFF5
  9273                           prodh	equ	0xFF4
  9274                           prodl	equ	0xFF3
  9275                           intcon2	equ	0xFF1
  9276                           postinc0	equ	0xFEE
  9277                           wreg	equ	0xFE8
  9278                           postdec1	equ	0xFE5
  9279                           fsr1l	equ	0xFE1
  9280                           indf2	equ	0xFDF
  9281                           postinc2	equ	0xFDE
  9282                           postdec2	equ	0xFDD
  9283                           fsr2h	equ	0xFDA
  9284                           fsr2l	equ	0xFD9
  9285                           status	equ	0xFD8
  9286                           
  9287 ;; *************** function __div_to_l_ *****************
  9288 ;; Defined at:
  9289 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;  f1              3   14[COMRAM] unsigned long 
  9292 ;;  f2              3   17[COMRAM] unsigned long 
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;  quot            4   20[COMRAM] unsigned long 
  9295 ;;  exp1            1   25[COMRAM] unsigned char 
  9296 ;;  cntr            1   24[COMRAM] unsigned char 
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  4   14[COMRAM] unsigned long 
  9299 ;; Registers used:
  9300 ;;		wreg, status,2, status,0
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9306 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;Total ram usage:       12 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    2
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		_printf
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           	psect	text27
  9321  0027CE                     __ptext27:
  9322                           	opt stack 0
  9323  0027CE                     __div_to_l_:
  9324                           	opt stack 23
  9325                           
  9326                           ;incstack = 0
  9327  0027CE  3411               	rlcf	__div_to_l_@f1+2,w,c
  9328  0027D0  3412               	rlcf	__div_to_l_@f1+3,w,c
  9329  0027D2  6E1A               	movwf	__div_to_l_@exp1,c
  9330  0027D4  501A               	movf	__div_to_l_@exp1,w,c
  9331  0027D6  A4D8               	btfss	status,2,c
  9332  0027D8  D002               	goto	l6393
  9333  0027DA  D061               	goto	l6439
  9334  0027DC  D07C               	goto	l1037
  9335  0027DE                     l6393:
  9336  0027DE  3414               	rlcf	__div_to_l_@f2+2,w,c
  9337  0027E0  3415               	rlcf	__div_to_l_@f2+3,w,c
  9338  0027E2  6E19               	movwf	__div_to_l_@cntr,c
  9339  0027E4  5019               	movf	__div_to_l_@cntr,w,c
  9340  0027E6  A4D8               	btfss	status,2,c
  9341  0027E8  D002               	goto	l6399
  9342  0027EA  D059               	goto	l6439
  9343  0027EC  D074               	goto	l1037
  9344  0027EE                     l6399:
  9345  0027EE  8E11               	bsf	__div_to_l_@f1+2,7,c
  9346  0027F0  0EFF               	movlw	255
  9347  0027F2  160F               	andwf	__div_to_l_@f1,f,c
  9348  0027F4  0EFF               	movlw	255
  9349  0027F6  1610               	andwf	__div_to_l_@f1+1,f,c
  9350  0027F8  0EFF               	movlw	255
  9351  0027FA  1611               	andwf	__div_to_l_@f1+2,f,c
  9352  0027FC  0E00               	movlw	0
  9353  0027FE  1612               	andwf	__div_to_l_@f1+3,f,c
  9354  002800  8E14               	bsf	__div_to_l_@f2+2,7,c
  9355  002802  0EFF               	movlw	255
  9356  002804  1612               	andwf	__div_to_l_@f2,f,c
  9357  002806  0EFF               	movlw	255
  9358  002808  1613               	andwf	__div_to_l_@f2+1,f,c
  9359  00280A  0EFF               	movlw	255
  9360  00280C  1614               	andwf	__div_to_l_@f2+2,f,c
  9361  00280E  0E00               	movlw	0
  9362  002810  1615               	andwf	__div_to_l_@f2+3,f,c
  9363  002812  0E00               	movlw	0
  9364  002814  6E15               	movwf	__div_to_l_@quot,c
  9365  002816  0E00               	movlw	0
  9366  002818  6E16               	movwf	__div_to_l_@quot+1,c
  9367  00281A  0E00               	movlw	0
  9368  00281C  6E17               	movwf	__div_to_l_@quot+2,c
  9369  00281E  0E00               	movlw	0
  9370  002820  6E18               	movwf	__div_to_l_@quot+3,c
  9371  002822  0E7F               	movlw	127
  9372  002824  5E1A               	subwf	__div_to_l_@exp1,f,c
  9373  002826  5019               	movf	__div_to_l_@cntr,w,c
  9374  002828  0FA0               	addlw	160
  9375  00282A  5E1A               	subwf	__div_to_l_@exp1,f,c
  9376  00282C  0E20               	movlw	32
  9377  00282E  6E19               	movwf	__div_to_l_@cntr,c
  9378  002830  D000               	goto	l6413
  9379  002832                     l6413:
  9380  002832  90D8               	bcf	status,0,c
  9381  002834  3615               	rlcf	__div_to_l_@quot,f,c
  9382  002836  3616               	rlcf	__div_to_l_@quot+1,f,c
  9383  002838  3617               	rlcf	__div_to_l_@quot+2,f,c
  9384  00283A  3618               	rlcf	__div_to_l_@quot+3,f,c
  9385  00283C  5012               	movf	__div_to_l_@f2,w,c
  9386  00283E  5C0F               	subwf	__div_to_l_@f1,w,c
  9387  002840  5013               	movf	__div_to_l_@f2+1,w,c
  9388  002842  5810               	subwfb	__div_to_l_@f1+1,w,c
  9389  002844  5014               	movf	__div_to_l_@f2+2,w,c
  9390  002846  5811               	subwfb	__div_to_l_@f1+2,w,c
  9391  002848  5015               	movf	__div_to_l_@f2+3,w,c
  9392  00284A  5812               	subwfb	__div_to_l_@f1+3,w,c
  9393  00284C  A0D8               	btfss	status,0,c
  9394  00284E  D00A               	goto	l6421
  9395  002850  5012               	movf	__div_to_l_@f2,w,c
  9396  002852  5E0F               	subwf	__div_to_l_@f1,f,c
  9397  002854  5013               	movf	__div_to_l_@f2+1,w,c
  9398  002856  5A10               	subwfb	__div_to_l_@f1+1,f,c
  9399  002858  5014               	movf	__div_to_l_@f2+2,w,c
  9400  00285A  5A11               	subwfb	__div_to_l_@f1+2,f,c
  9401  00285C  5015               	movf	__div_to_l_@f2+3,w,c
  9402  00285E  5A12               	subwfb	__div_to_l_@f1+3,f,c
  9403  002860  8015               	bsf	__div_to_l_@quot,0,c
  9404  002862  D000               	goto	l6421
  9405  002864                     l6421:
  9406  002864  90D8               	bcf	status,0,c
  9407  002866  360F               	rlcf	__div_to_l_@f1,f,c
  9408  002868  3610               	rlcf	__div_to_l_@f1+1,f,c
  9409  00286A  3611               	rlcf	__div_to_l_@f1+2,f,c
  9410  00286C  3612               	rlcf	__div_to_l_@f1+3,f,c
  9411  00286E  2E19               	decfsz	__div_to_l_@cntr,f,c
  9412  002870  D7E0               	goto	l6413
  9413  002872  D000               	goto	l6425
  9414  002874                     l6425:
  9415  002874  AE1A               	btfss	__div_to_l_@exp1,7,c
  9416  002876  D010               	goto	l6437
  9417  002878  501A               	movf	__div_to_l_@exp1,w,c
  9418  00287A  0A80               	xorlw	128
  9419  00287C  0F9F               	addlw	159
  9420  00287E  B0D8               	btfsc	status,0,c
  9421  002880  D003               	goto	l6433
  9422  002882  D00D               	goto	l6439
  9423  002884  D028               	goto	l1037
  9424  002886  D000               	goto	l6433
  9425  002888                     l6433:
  9426  002888  90D8               	bcf	status,0,c
  9427  00288A  3218               	rrcf	__div_to_l_@quot+3,f,c
  9428  00288C  3217               	rrcf	__div_to_l_@quot+2,f,c
  9429  00288E  3216               	rrcf	__div_to_l_@quot+1,f,c
  9430  002890  3215               	rrcf	__div_to_l_@quot,f,c
  9431  002892  3E1A               	incfsz	__div_to_l_@exp1,f,c
  9432  002894  D7F9               	goto	l6433
  9433  002896  D017               	goto	l1046
  9434  002898                     l6437:
  9435  002898  0E1F               	movlw	31
  9436  00289A  641A               	cpfsgt	__div_to_l_@exp1,c
  9437  00289C  D011               	goto	l6445
  9438  00289E                     l6439:
  9439  00289E  0E00               	movlw	0
  9440  0028A0  6E0F               	movwf	?__div_to_l_,c
  9441  0028A2  0E00               	movlw	0
  9442  0028A4  6E10               	movwf	?__div_to_l_+1,c
  9443  0028A6  0E00               	movlw	0
  9444  0028A8  6E11               	movwf	?__div_to_l_+2,c
  9445  0028AA  0E00               	movlw	0
  9446  0028AC  6E12               	movwf	?__div_to_l_+3,c
  9447  0028AE  D013               	goto	l1037
  9448  0028B0  D007               	goto	l6445
  9449  0028B2                     l6443:
  9450  0028B2  90D8               	bcf	status,0,c
  9451  0028B4  3615               	rlcf	__div_to_l_@quot,f,c
  9452  0028B6  3616               	rlcf	__div_to_l_@quot+1,f,c
  9453  0028B8  3617               	rlcf	__div_to_l_@quot+2,f,c
  9454  0028BA  3618               	rlcf	__div_to_l_@quot+3,f,c
  9455  0028BC  061A               	decf	__div_to_l_@exp1,f,c
  9456  0028BE  D000               	goto	l6445
  9457  0028C0                     l6445:
  9458  0028C0  501A               	movf	__div_to_l_@exp1,w,c
  9459  0028C2  A4D8               	btfss	status,2,c
  9460  0028C4  D7F6               	goto	l6443
  9461  0028C6                     l1046:
  9462  0028C6  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  9463  0028CA  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9464  0028CE  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9465  0028D2  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9466  0028D6                     l1037:
  9467  0028D6  0012               	return		;funcret
  9468  0028D8                     __end_of__div_to_l_:
  9469                           	opt stack 0
  9470                           tblptru	equ	0xFF8
  9471                           tblptrh	equ	0xFF7
  9472                           tblptrl	equ	0xFF6
  9473                           tablat	equ	0xFF5
  9474                           prodh	equ	0xFF4
  9475                           prodl	equ	0xFF3
  9476                           intcon2	equ	0xFF1
  9477                           postinc0	equ	0xFEE
  9478                           wreg	equ	0xFE8
  9479                           postdec1	equ	0xFE5
  9480                           fsr1l	equ	0xFE1
  9481                           indf2	equ	0xFDF
  9482                           postinc2	equ	0xFDE
  9483                           postdec2	equ	0xFDD
  9484                           fsr2h	equ	0xFDA
  9485                           fsr2l	equ	0xFD9
  9486                           status	equ	0xFD8
  9487                           
  9488 ;; *************** function ___lltoft *****************
  9489 ;; Defined at:
  9490 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  c               4   22[COMRAM] unsigned long 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  exp             1   30[COMRAM] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  3   22[COMRAM] float 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;Total ram usage:        9 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    3
  9511 ;; This function calls:
  9512 ;;		___ftpack
  9513 ;; This function is called by:
  9514 ;;		_printf
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text28
  9519  0038BA                     __ptext28:
  9520                           	opt stack 0
  9521  0038BA                     ___lltoft:
  9522                           	opt stack 22
  9523                           
  9524                           ;incstack = 0
  9525  0038BA  0E8E               	movlw	142
  9526  0038BC  6E1F               	movwf	___lltoft@exp,c
  9527  0038BE  D007               	goto	l6565
  9528  0038C0                     l6563:
  9529  0038C0  90D8               	bcf	status,0,c
  9530  0038C2  321A               	rrcf	___lltoft@c+3,f,c
  9531  0038C4  3219               	rrcf	___lltoft@c+2,f,c
  9532  0038C6  3218               	rrcf	___lltoft@c+1,f,c
  9533  0038C8  3217               	rrcf	___lltoft@c,f,c
  9534  0038CA  2A1F               	incf	___lltoft@exp,f,c
  9535  0038CC  D000               	goto	l6565
  9536  0038CE                     l6565:
  9537  0038CE  0E00               	movlw	0
  9538  0038D0  1417               	andwf	___lltoft@c,w,c
  9539  0038D2  6E1B               	movwf	??___lltoft& (0+255),c
  9540  0038D4  0E00               	movlw	0
  9541  0038D6  1418               	andwf	___lltoft@c+1,w,c
  9542  0038D8  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  9543  0038DA  0E00               	movlw	0
  9544  0038DC  1419               	andwf	___lltoft@c+2,w,c
  9545  0038DE  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  9546  0038E0  0EFF               	movlw	255
  9547  0038E2  141A               	andwf	___lltoft@c+3,w,c
  9548  0038E4  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  9549  0038E6  501B               	movf	??___lltoft,w,c
  9550  0038E8  101C               	iorwf	??___lltoft+1,w,c
  9551  0038EA  101D               	iorwf	??___lltoft+2,w,c
  9552  0038EC  101E               	iorwf	??___lltoft+3,w,c
  9553  0038EE  A4D8               	btfss	status,2,c
  9554  0038F0  D7E7               	goto	l6563
  9555  0038F2  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  9556  0038F6  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  9557  0038FA  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  9558  0038FE  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  9559  003902  0E00               	movlw	0
  9560  003904  6E13               	movwf	___ftpack@sign,c
  9561  003906  ECFF  F017         	call	___ftpack	;wreg free
  9562  00390A  C00F  F017         	movff	?___ftpack,?___lltoft
  9563  00390E  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  9564  003912  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  9565  003916  D000               	goto	l1277
  9566  003918                     l1277:
  9567  003918  0012               	return		;funcret
  9568  00391A                     __end_of___lltoft:
  9569                           	opt stack 0
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           intcon2	equ	0xFF1
  9577                           postinc0	equ	0xFEE
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function ___llmod *****************
  9589 ;; Defined at:
  9590 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  dividend        4   14[COMRAM] unsigned long 
  9593 ;;  divisor         4   18[COMRAM] unsigned long 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  counter         1   22[COMRAM] unsigned char 
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  4   14[COMRAM] unsigned long 
  9598 ;; Registers used:
  9599 ;;		wreg, status,2, status,0
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9605 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;Total ram usage:        9 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    2
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_printf
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text29
  9620  003712                     __ptext29:
  9621                           	opt stack 0
  9622  003712                     ___llmod:
  9623                           	opt stack 23
  9624                           
  9625                           ;incstack = 0
  9626  003712  5013               	movf	___llmod@divisor,w,c
  9627  003714  1014               	iorwf	___llmod@divisor+1,w,c
  9628  003716  1015               	iorwf	___llmod@divisor+2,w,c
  9629  003718  1016               	iorwf	___llmod@divisor+3,w,c
  9630  00371A  B4D8               	btfsc	status,2,c
  9631  00371C  D029               	goto	l1257
  9632  00371E  0E01               	movlw	1
  9633  003720  6E17               	movwf	___llmod@counter,c
  9634  003722  D007               	goto	l6551
  9635  003724                     l6549:
  9636  003724  90D8               	bcf	status,0,c
  9637  003726  3613               	rlcf	___llmod@divisor,f,c
  9638  003728  3614               	rlcf	___llmod@divisor+1,f,c
  9639  00372A  3615               	rlcf	___llmod@divisor+2,f,c
  9640  00372C  3616               	rlcf	___llmod@divisor+3,f,c
  9641  00372E  2A17               	incf	___llmod@counter,f,c
  9642  003730  D000               	goto	l6551
  9643  003732                     l6551:
  9644  003732  BE16               	btfsc	___llmod@divisor+3,7,c
  9645  003734  D002               	goto	l6553
  9646  003736  D7F6               	goto	l6549
  9647  003738  D000               	goto	l6553
  9648  00373A                     l6553:
  9649  00373A  5013               	movf	___llmod@divisor,w,c
  9650  00373C  5C0F               	subwf	___llmod@dividend,w,c
  9651  00373E  5014               	movf	___llmod@divisor+1,w,c
  9652  003740  5810               	subwfb	___llmod@dividend+1,w,c
  9653  003742  5015               	movf	___llmod@divisor+2,w,c
  9654  003744  5811               	subwfb	___llmod@dividend+2,w,c
  9655  003746  5016               	movf	___llmod@divisor+3,w,c
  9656  003748  5812               	subwfb	___llmod@dividend+3,w,c
  9657  00374A  A0D8               	btfss	status,0,c
  9658  00374C  D009               	goto	l6557
  9659  00374E  5013               	movf	___llmod@divisor,w,c
  9660  003750  5E0F               	subwf	___llmod@dividend,f,c
  9661  003752  5014               	movf	___llmod@divisor+1,w,c
  9662  003754  5A10               	subwfb	___llmod@dividend+1,f,c
  9663  003756  5015               	movf	___llmod@divisor+2,w,c
  9664  003758  5A11               	subwfb	___llmod@dividend+2,f,c
  9665  00375A  5016               	movf	___llmod@divisor+3,w,c
  9666  00375C  5A12               	subwfb	___llmod@dividend+3,f,c
  9667  00375E  D000               	goto	l6557
  9668  003760                     l6557:
  9669  003760  90D8               	bcf	status,0,c
  9670  003762  3216               	rrcf	___llmod@divisor+3,f,c
  9671  003764  3215               	rrcf	___llmod@divisor+2,f,c
  9672  003766  3214               	rrcf	___llmod@divisor+1,f,c
  9673  003768  3213               	rrcf	___llmod@divisor,f,c
  9674  00376A  2E17               	decfsz	___llmod@counter,f,c
  9675  00376C  D7E6               	goto	l6553
  9676  00376E  D000               	goto	l1257
  9677  003770                     l1257:
  9678  003770  C00F  F00F         	movff	___llmod@dividend,?___llmod
  9679  003774  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  9680  003778  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  9681  00377C  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  9682  003780  0012               	return		;funcret
  9683  003782                     __end_of___llmod:
  9684                           	opt stack 0
  9685                           tblptru	equ	0xFF8
  9686                           tblptrh	equ	0xFF7
  9687                           tblptrl	equ	0xFF6
  9688                           tablat	equ	0xFF5
  9689                           prodh	equ	0xFF4
  9690                           prodl	equ	0xFF3
  9691                           intcon2	equ	0xFF1
  9692                           postinc0	equ	0xFEE
  9693                           wreg	equ	0xFE8
  9694                           postdec1	equ	0xFE5
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function ___lldiv *****************
  9704 ;; Defined at:
  9705 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  dividend        4   14[COMRAM] unsigned long 
  9708 ;;  divisor         4   18[COMRAM] unsigned long 
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;  quotient        4   22[COMRAM] unsigned long 
  9711 ;;  counter         1   26[COMRAM] unsigned char 
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  4   14[COMRAM] unsigned long 
  9714 ;; Registers used:
  9715 ;;		wreg, status,2, status,0
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9721 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;Total ram usage:       13 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    2
  9728 ;; This function calls:
  9729 ;;		Nothing
  9730 ;; This function is called by:
  9731 ;;		_printf
  9732 ;; This function uses a non-reentrant model
  9733 ;;
  9734                           
  9735                           	psect	text30
  9736  003366                     __ptext30:
  9737                           	opt stack 0
  9738  003366                     ___lldiv:
  9739                           	opt stack 23
  9740                           
  9741                           ;incstack = 0
  9742  003366  0E00               	movlw	0
  9743  003368  6E17               	movwf	___lldiv@quotient,c
  9744  00336A  0E00               	movlw	0
  9745  00336C  6E18               	movwf	___lldiv@quotient+1,c
  9746  00336E  0E00               	movlw	0
  9747  003370  6E19               	movwf	___lldiv@quotient+2,c
  9748  003372  0E00               	movlw	0
  9749  003374  6E1A               	movwf	___lldiv@quotient+3,c
  9750  003376  5013               	movf	___lldiv@divisor,w,c
  9751  003378  1014               	iorwf	___lldiv@divisor+1,w,c
  9752  00337A  1015               	iorwf	___lldiv@divisor+2,w,c
  9753  00337C  1016               	iorwf	___lldiv@divisor+3,w,c
  9754  00337E  B4D8               	btfsc	status,2,c
  9755  003380  D02F               	goto	l1247
  9756  003382  0E01               	movlw	1
  9757  003384  6E1B               	movwf	___lldiv@counter,c
  9758  003386  D007               	goto	l6531
  9759  003388                     l6529:
  9760  003388  90D8               	bcf	status,0,c
  9761  00338A  3613               	rlcf	___lldiv@divisor,f,c
  9762  00338C  3614               	rlcf	___lldiv@divisor+1,f,c
  9763  00338E  3615               	rlcf	___lldiv@divisor+2,f,c
  9764  003390  3616               	rlcf	___lldiv@divisor+3,f,c
  9765  003392  2A1B               	incf	___lldiv@counter,f,c
  9766  003394  D000               	goto	l6531
  9767  003396                     l6531:
  9768  003396  BE16               	btfsc	___lldiv@divisor+3,7,c
  9769  003398  D002               	goto	l6533
  9770  00339A  D7F6               	goto	l6529
  9771  00339C  D000               	goto	l6533
  9772  00339E                     l6533:
  9773  00339E  90D8               	bcf	status,0,c
  9774  0033A0  3617               	rlcf	___lldiv@quotient,f,c
  9775  0033A2  3618               	rlcf	___lldiv@quotient+1,f,c
  9776  0033A4  3619               	rlcf	___lldiv@quotient+2,f,c
  9777  0033A6  361A               	rlcf	___lldiv@quotient+3,f,c
  9778  0033A8  5013               	movf	___lldiv@divisor,w,c
  9779  0033AA  5C0F               	subwf	___lldiv@dividend,w,c
  9780  0033AC  5014               	movf	___lldiv@divisor+1,w,c
  9781  0033AE  5810               	subwfb	___lldiv@dividend+1,w,c
  9782  0033B0  5015               	movf	___lldiv@divisor+2,w,c
  9783  0033B2  5811               	subwfb	___lldiv@dividend+2,w,c
  9784  0033B4  5016               	movf	___lldiv@divisor+3,w,c
  9785  0033B6  5812               	subwfb	___lldiv@dividend+3,w,c
  9786  0033B8  A0D8               	btfss	status,0,c
  9787  0033BA  D00A               	goto	l6541
  9788  0033BC  5013               	movf	___lldiv@divisor,w,c
  9789  0033BE  5E0F               	subwf	___lldiv@dividend,f,c
  9790  0033C0  5014               	movf	___lldiv@divisor+1,w,c
  9791  0033C2  5A10               	subwfb	___lldiv@dividend+1,f,c
  9792  0033C4  5015               	movf	___lldiv@divisor+2,w,c
  9793  0033C6  5A11               	subwfb	___lldiv@dividend+2,f,c
  9794  0033C8  5016               	movf	___lldiv@divisor+3,w,c
  9795  0033CA  5A12               	subwfb	___lldiv@dividend+3,f,c
  9796  0033CC  8017               	bsf	___lldiv@quotient,0,c
  9797  0033CE  D000               	goto	l6541
  9798  0033D0                     l6541:
  9799  0033D0  90D8               	bcf	status,0,c
  9800  0033D2  3216               	rrcf	___lldiv@divisor+3,f,c
  9801  0033D4  3215               	rrcf	___lldiv@divisor+2,f,c
  9802  0033D6  3214               	rrcf	___lldiv@divisor+1,f,c
  9803  0033D8  3213               	rrcf	___lldiv@divisor,f,c
  9804  0033DA  2E1B               	decfsz	___lldiv@counter,f,c
  9805  0033DC  D7E0               	goto	l6533
  9806  0033DE  D000               	goto	l1247
  9807  0033E0                     l1247:
  9808  0033E0  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  9809  0033E4  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  9810  0033E8  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  9811  0033EC  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  9812  0033F0  0012               	return		;funcret
  9813  0033F2                     __end_of___lldiv:
  9814                           	opt stack 0
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon2	equ	0xFF1
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           postdec1	equ	0xFE5
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           fsr2h	equ	0xFDA
  9830                           fsr2l	equ	0xFD9
  9831                           status	equ	0xFD8
  9832                           
  9833 ;; *************** function ___fttol *****************
  9834 ;; Defined at:
  9835 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;  f1              3   56[COMRAM] float 
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;  lval            4   66[COMRAM] unsigned long 
  9840 ;;  exp1            1   70[COMRAM] unsigned char 
  9841 ;;  sign1           1   65[COMRAM] unsigned char 
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  4   56[COMRAM] long 
  9844 ;; Registers used:
  9845 ;;		wreg, status,2, status,0
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;Total ram usage:       15 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    2
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		_printf
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           	psect	text31
  9866  002BAA                     __ptext31:
  9867                           	opt stack 0
  9868  002BAA                     ___fttol:
  9869                           	opt stack 23
  9870                           
  9871                           ;incstack = 0
  9872  002BAA  C03B  F03D         	movff	___fttol@f1+2,??___fttol
  9873  002BAE  6A3E               	clrf	(??___fttol+1)& (0+255),c
  9874  002BB0  6A3F               	clrf	(??___fttol+2)& (0+255),c
  9875  002BB2  343A               	rlcf	___fttol@f1+1,w,c
  9876  002BB4  363D               	rlcf	??___fttol& (0+255),f,c
  9877  002BB6  E301               	bnc	u6341
  9878  002BB8  803E               	bsf	(??___fttol+1)& (0+255),0,c
  9879  002BBA                     u6341:
  9880  002BBA  503D               	movf	??___fttol,w,c
  9881  002BBC  6E47               	movwf	___fttol@exp1,c
  9882  002BBE  5047               	movf	___fttol@exp1,w,c
  9883  002BC0  A4D8               	btfss	status,2,c
  9884  002BC2  D002               	goto	l6483
  9885  002BC4  D039               	goto	l6507
  9886  002BC6  D063               	goto	l1203
  9887  002BC8                     l6483:
  9888  002BC8  0E17               	movlw	23
  9889  002BCA  6E3D               	movwf	??___fttol& (0+255),c
  9890  002BCC  C039  F03E         	movff	___fttol@f1,??___fttol+1
  9891  002BD0  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
  9892  002BD4  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
  9893  002BD8  283D               	incf	??___fttol,w,c
  9894  002BDA  6E41               	movwf	(??___fttol+4)& (0+255),c
  9895  002BDC  D004               	goto	u6360
  9896  002BDE                     u6365:
  9897  002BDE  90D8               	bcf	status,0,c
  9898  002BE0  3240               	rrcf	??___fttol+3,f,c
  9899  002BE2  323F               	rrcf	??___fttol+2,f,c
  9900  002BE4  323E               	rrcf	??___fttol+1,f,c
  9901  002BE6                     u6360:
  9902  002BE6  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
  9903  002BE8  D7FA               	goto	u6365
  9904  002BEA  503E               	movf	??___fttol+1,w,c
  9905  002BEC  6E42               	movwf	___fttol@sign1,c
  9906  002BEE  8E3A               	bsf	___fttol@f1+1,7,c
  9907  002BF0  0EFF               	movlw	255
  9908  002BF2  1639               	andwf	___fttol@f1,f,c
  9909  002BF4  0EFF               	movlw	255
  9910  002BF6  163A               	andwf	___fttol@f1+1,f,c
  9911  002BF8  0E00               	movlw	0
  9912  002BFA  163B               	andwf	___fttol@f1+2,f,c
  9913  002BFC  5039               	movf	___fttol@f1,w,c
  9914  002BFE  6E43               	movwf	___fttol@lval,c
  9915  002C00  503A               	movf	___fttol@f1+1,w,c
  9916  002C02  6E44               	movwf	___fttol@lval+1,c
  9917  002C04  503B               	movf	___fttol@f1+2,w,c
  9918  002C06  6E45               	movwf	___fttol@lval+2,c
  9919  002C08  6A46               	clrf	___fttol@lval+3,c
  9920  002C0A  0E8E               	movlw	142
  9921  002C0C  5E47               	subwf	___fttol@exp1,f,c
  9922  002C0E  AE47               	btfss	___fttol@exp1,7,c
  9923  002C10  D010               	goto	l6505
  9924  002C12  5047               	movf	___fttol@exp1,w,c
  9925  002C14  0A80               	xorlw	128
  9926  002C16  0F8F               	addlw	143
  9927  002C18  B0D8               	btfsc	status,0,c
  9928  002C1A  D003               	goto	l6501
  9929  002C1C  D00D               	goto	l6507
  9930  002C1E  D037               	goto	l1203
  9931  002C20  D000               	goto	l6501
  9932  002C22                     l6501:
  9933  002C22  90D8               	bcf	status,0,c
  9934  002C24  3246               	rrcf	___fttol@lval+3,f,c
  9935  002C26  3245               	rrcf	___fttol@lval+2,f,c
  9936  002C28  3244               	rrcf	___fttol@lval+1,f,c
  9937  002C2A  3243               	rrcf	___fttol@lval,f,c
  9938  002C2C  3E47               	incfsz	___fttol@exp1,f,c
  9939  002C2E  D7F9               	goto	l6501
  9940  002C30  D019               	goto	l6515
  9941  002C32                     l6505:
  9942  002C32  0E17               	movlw	23
  9943  002C34  6447               	cpfsgt	___fttol@exp1,c
  9944  002C36  D011               	goto	l6513
  9945  002C38                     l6507:
  9946  002C38  0E00               	movlw	0
  9947  002C3A  6E39               	movwf	?___fttol,c
  9948  002C3C  0E00               	movlw	0
  9949  002C3E  6E3A               	movwf	?___fttol+1,c
  9950  002C40  0E00               	movlw	0
  9951  002C42  6E3B               	movwf	?___fttol+2,c
  9952  002C44  0E00               	movlw	0
  9953  002C46  6E3C               	movwf	?___fttol+3,c
  9954  002C48  D022               	goto	l1203
  9955  002C4A  D007               	goto	l6513
  9956  002C4C                     l6511:
  9957  002C4C  90D8               	bcf	status,0,c
  9958  002C4E  3643               	rlcf	___fttol@lval,f,c
  9959  002C50  3644               	rlcf	___fttol@lval+1,f,c
  9960  002C52  3645               	rlcf	___fttol@lval+2,f,c
  9961  002C54  3646               	rlcf	___fttol@lval+3,f,c
  9962  002C56  0647               	decf	___fttol@exp1,f,c
  9963  002C58  D000               	goto	l6513
  9964  002C5A                     l6513:
  9965  002C5A  5047               	movf	___fttol@exp1,w,c
  9966  002C5C  B4D8               	btfsc	status,2,c
  9967  002C5E  D002               	goto	l6515
  9968  002C60  D7F5               	goto	l6511
  9969  002C62  D000               	goto	l6515
  9970  002C64                     l6515:
  9971  002C64  5042               	movf	___fttol@sign1,w,c
  9972  002C66  B4D8               	btfsc	status,2,c
  9973  002C68  D009               	goto	l6519
  9974  002C6A  1E46               	comf	___fttol@lval+3,f,c
  9975  002C6C  1E45               	comf	___fttol@lval+2,f,c
  9976  002C6E  1E44               	comf	___fttol@lval+1,f,c
  9977  002C70  6C43               	negf	___fttol@lval,c
  9978  002C72  0E00               	movlw	0
  9979  002C74  2244               	addwfc	___fttol@lval+1,f,c
  9980  002C76  2245               	addwfc	___fttol@lval+2,f,c
  9981  002C78  2246               	addwfc	___fttol@lval+3,f,c
  9982  002C7A  D000               	goto	l6519
  9983  002C7C                     l6519:
  9984  002C7C  C043  F039         	movff	___fttol@lval,?___fttol
  9985  002C80  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
  9986  002C84  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
  9987  002C88  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
  9988  002C8C  D000               	goto	l1203
  9989  002C8E                     l1203:
  9990  002C8E  0012               	return		;funcret
  9991  002C90                     __end_of___fttol:
  9992                           	opt stack 0
  9993                           tblptru	equ	0xFF8
  9994                           tblptrh	equ	0xFF7
  9995                           tblptrl	equ	0xFF6
  9996                           tablat	equ	0xFF5
  9997                           prodh	equ	0xFF4
  9998                           prodl	equ	0xFF3
  9999                           intcon2	equ	0xFF1
 10000                           postinc0	equ	0xFEE
 10001                           wreg	equ	0xFE8
 10002                           postdec1	equ	0xFE5
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function ___ftsub *****************
 10012 ;; Defined at:
 10013 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  f1              3   71[COMRAM] float 
 10016 ;;  f2              3   74[COMRAM] float 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  3   71[COMRAM] float 
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0, cstack
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10028 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10031 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10032 ;;Total ram usage:        6 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:    4
 10035 ;; This function calls:
 10036 ;;		___ftadd
 10037 ;; This function is called by:
 10038 ;;		_printf
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           	psect	text32
 10043  003C1E                     __ptext32:
 10044                           	opt stack 0
 10045  003C1E                     ___ftsub:
 10046                           	opt stack 21
 10047                           
 10048                           ;incstack = 0
 10049  003C1E  504B               	movf	___ftsub@f2,w,c
 10050  003C20  104C               	iorwf	___ftsub@f2+1,w,c
 10051  003C22  104D               	iorwf	___ftsub@f2+2,w,c
 10052  003C24  B4D8               	btfsc	status,2,c
 10053  003C26  D007               	goto	l6451
 10054  003C28  0E00               	movlw	0
 10055  003C2A  1A4B               	xorwf	___ftsub@f2,f,c
 10056  003C2C  0E00               	movlw	0
 10057  003C2E  1A4C               	xorwf	___ftsub@f2+1,f,c
 10058  003C30  0E80               	movlw	128
 10059  003C32  1A4D               	xorwf	___ftsub@f2+2,f,c
 10060  003C34  D000               	goto	l6451
 10061  003C36                     l6451:
 10062  003C36  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
 10063  003C3A  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
 10064  003C3E  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
 10065  003C42  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
 10066  003C46  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
 10067  003C4A  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
 10068  003C4E  EC02  F00F         	call	___ftadd	;wreg free
 10069  003C52  C03C  F048         	movff	?___ftadd,?___ftsub
 10070  003C56  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
 10071  003C5A  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
 10072  003C5E  D000               	goto	l1199
 10073  003C60                     l1199:
 10074  003C60  0012               	return		;funcret
 10075  003C62                     __end_of___ftsub:
 10076                           	opt stack 0
 10077                           tblptru	equ	0xFF8
 10078                           tblptrh	equ	0xFF7
 10079                           tblptrl	equ	0xFF6
 10080                           tablat	equ	0xFF5
 10081                           prodh	equ	0xFF4
 10082                           prodl	equ	0xFF3
 10083                           intcon2	equ	0xFF1
 10084                           postinc0	equ	0xFEE
 10085                           wreg	equ	0xFE8
 10086                           postdec1	equ	0xFE5
 10087                           fsr1l	equ	0xFE1
 10088                           indf2	equ	0xFDF
 10089                           postinc2	equ	0xFDE
 10090                           postdec2	equ	0xFDD
 10091                           fsr2h	equ	0xFDA
 10092                           fsr2l	equ	0xFD9
 10093                           status	equ	0xFD8
 10094                           
 10095 ;; *************** function ___ftadd *****************
 10096 ;; Defined at:
 10097 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  f1              3   59[COMRAM] float 
 10100 ;;  f2              3   62[COMRAM] float 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  exp1            1   70[COMRAM] unsigned char 
 10103 ;;  exp2            1   69[COMRAM] unsigned char 
 10104 ;;  sign            1   68[COMRAM] unsigned char 
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  3   59[COMRAM] float 
 10107 ;; Registers used:
 10108 ;;		wreg, status,2, status,0, cstack
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10114 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10118 ;;Total ram usage:       12 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    3
 10121 ;; This function calls:
 10122 ;;		___ftpack
 10123 ;; This function is called by:
 10124 ;;		_printf
 10125 ;;		___ftsub
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text33
 10130  001E04                     __ptext33:
 10131                           	opt stack 0
 10132  001E04                     ___ftadd:
 10133                           	opt stack 21
 10134                           
 10135                           ;incstack = 0
 10136  001E04  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
 10137  001E08  6A43               	clrf	(??___ftadd+1)& (0+255),c
 10138  001E0A  6A44               	clrf	(??___ftadd+2)& (0+255),c
 10139  001E0C  343D               	rlcf	___ftadd@f1+1,w,c
 10140  001E0E  3642               	rlcf	??___ftadd& (0+255),f,c
 10141  001E10  E301               	bnc	u5491
 10142  001E12  8043               	bsf	(??___ftadd+1)& (0+255),0,c
 10143  001E14                     u5491:
 10144  001E14  5042               	movf	??___ftadd,w,c
 10145  001E16  6E47               	movwf	___ftadd@exp1,c
 10146  001E18  C041  F042         	movff	___ftadd@f2+2,??___ftadd
 10147  001E1C  6A43               	clrf	(??___ftadd+1)& (0+255),c
 10148  001E1E  6A44               	clrf	(??___ftadd+2)& (0+255),c
 10149  001E20  3440               	rlcf	___ftadd@f2+1,w,c
 10150  001E22  3642               	rlcf	??___ftadd& (0+255),f,c
 10151  001E24  E301               	bnc	u5501
 10152  001E26  8043               	bsf	(??___ftadd+1)& (0+255),0,c
 10153  001E28                     u5501:
 10154  001E28  5042               	movf	??___ftadd,w,c
 10155  001E2A  6E46               	movwf	___ftadd@exp2,c
 10156  001E2C  5047               	movf	___ftadd@exp1,w,c
 10157  001E2E  B4D8               	btfsc	status,2,c
 10158  001E30  D00B               	goto	l1118
 10159  001E32  5046               	movf	___ftadd@exp2,w,c
 10160  001E34  5C47               	subwf	___ftadd@exp1,w,c
 10161  001E36  B0D8               	btfsc	status,0,c
 10162  001E38  D00E               	goto	l5993
 10163  001E3A  5047               	movf	___ftadd@exp1,w,c
 10164  001E3C  0800               	sublw	0
 10165  001E3E  2446               	addwf	___ftadd@exp2,w,c
 10166  001E40  6E42               	movwf	??___ftadd& (0+255),c
 10167  001E42  0E18               	movlw	24
 10168  001E44  6442               	cpfsgt	??___ftadd,c
 10169  001E46  D007               	goto	l5993
 10170  001E48                     l1118:
 10171  001E48  C03F  F03C         	movff	___ftadd@f2,?___ftadd
 10172  001E4C  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
 10173  001E50  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
 10174  001E54  D0B8               	goto	l1119
 10175  001E56                     l5993:
 10176  001E56  5046               	movf	___ftadd@exp2,w,c
 10177  001E58  B4D8               	btfsc	status,2,c
 10178  001E5A  D00B               	goto	l1122
 10179  001E5C  5047               	movf	___ftadd@exp1,w,c
 10180  001E5E  5C46               	subwf	___ftadd@exp2,w,c
 10181  001E60  B0D8               	btfsc	status,0,c
 10182  001E62  D00E               	goto	l5999
 10183  001E64  5046               	movf	___ftadd@exp2,w,c
 10184  001E66  0800               	sublw	0
 10185  001E68  2447               	addwf	___ftadd@exp1,w,c
 10186  001E6A  6E42               	movwf	??___ftadd& (0+255),c
 10187  001E6C  0E18               	movlw	24
 10188  001E6E  6442               	cpfsgt	??___ftadd,c
 10189  001E70  D007               	goto	l5999
 10190  001E72                     l1122:
 10191  001E72  C03C  F03C         	movff	___ftadd@f1,?___ftadd
 10192  001E76  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
 10193  001E7A  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
 10194  001E7E  D0A3               	goto	l1119
 10195  001E80                     l5999:
 10196  001E80  0E06               	movlw	6
 10197  001E82  6E45               	movwf	___ftadd@sign,c
 10198  001E84  AE3E               	btfss	___ftadd@f1+2,7,c
 10199  001E86  D002               	goto	l6005
 10200  001E88  8E45               	bsf	___ftadd@sign,7,c
 10201  001E8A  D000               	goto	l6005
 10202  001E8C                     l6005:
 10203  001E8C  BE41               	btfsc	___ftadd@f2+2,7,c
 10204  001E8E  8C45               	bsf	___ftadd@sign,6,c
 10205  001E90  8E3D               	bsf	___ftadd@f1+1,7,c
 10206  001E92  0EFF               	movlw	255
 10207  001E94  163C               	andwf	___ftadd@f1,f,c
 10208  001E96  0EFF               	movlw	255
 10209  001E98  163D               	andwf	___ftadd@f1+1,f,c
 10210  001E9A  0E00               	movlw	0
 10211  001E9C  163E               	andwf	___ftadd@f1+2,f,c
 10212  001E9E  8E40               	bsf	___ftadd@f2+1,7,c
 10213  001EA0  0EFF               	movlw	255
 10214  001EA2  163F               	andwf	___ftadd@f2,f,c
 10215  001EA4  0EFF               	movlw	255
 10216  001EA6  1640               	andwf	___ftadd@f2+1,f,c
 10217  001EA8  0E00               	movlw	0
 10218  001EAA  1641               	andwf	___ftadd@f2+2,f,c
 10219  001EAC  5046               	movf	___ftadd@exp2,w,c
 10220  001EAE  5C47               	subwf	___ftadd@exp1,w,c
 10221  001EB0  B0D8               	btfsc	status,0,c
 10222  001EB2  D01E               	goto	l6025
 10223  001EB4                     l6015:
 10224  001EB4  90D8               	bcf	status,0,c
 10225  001EB6  363F               	rlcf	___ftadd@f2,f,c
 10226  001EB8  3640               	rlcf	___ftadd@f2+1,f,c
 10227  001EBA  3641               	rlcf	___ftadd@f2+2,f,c
 10228  001EBC  0646               	decf	___ftadd@exp2,f,c
 10229  001EBE  5047               	movf	___ftadd@exp1,w,c
 10230  001EC0  1846               	xorwf	___ftadd@exp2,w,c
 10231  001EC2  B4D8               	btfsc	status,2,c
 10232  001EC4  D00F               	goto	l6023
 10233  001EC6  0645               	decf	___ftadd@sign,f,c
 10234  001EC8  C045  F042         	movff	___ftadd@sign,??___ftadd
 10235  001ECC  0E07               	movlw	7
 10236  001ECE  1642               	andwf	??___ftadd,f,c
 10237  001ED0  B4D8               	btfsc	status,2,c
 10238  001ED2  D008               	goto	l6023
 10239  001ED4  D7EF               	goto	l6015
 10240  001ED6  D006               	goto	l6023
 10241  001ED8                     l6021:
 10242  001ED8  90D8               	bcf	status,0,c
 10243  001EDA  323E               	rrcf	___ftadd@f1+2,f,c
 10244  001EDC  323D               	rrcf	___ftadd@f1+1,f,c
 10245  001EDE  323C               	rrcf	___ftadd@f1,f,c
 10246  001EE0  2A47               	incf	___ftadd@exp1,f,c
 10247  001EE2  D000               	goto	l6023
 10248  001EE4                     l6023:
 10249  001EE4  5046               	movf	___ftadd@exp2,w,c
 10250  001EE6  1847               	xorwf	___ftadd@exp1,w,c
 10251  001EE8  B4D8               	btfsc	status,2,c
 10252  001EEA  D024               	goto	l1133
 10253  001EEC  D7F5               	goto	l6021
 10254  001EEE  D022               	goto	l1133
 10255  001EF0                     l6025:
 10256  001EF0  5047               	movf	___ftadd@exp1,w,c
 10257  001EF2  5C46               	subwf	___ftadd@exp2,w,c
 10258  001EF4  B0D8               	btfsc	status,0,c
 10259  001EF6  D01E               	goto	l1133
 10260  001EF8                     l6027:
 10261  001EF8  90D8               	bcf	status,0,c
 10262  001EFA  363C               	rlcf	___ftadd@f1,f,c
 10263  001EFC  363D               	rlcf	___ftadd@f1+1,f,c
 10264  001EFE  363E               	rlcf	___ftadd@f1+2,f,c
 10265  001F00  0647               	decf	___ftadd@exp1,f,c
 10266  001F02  5047               	movf	___ftadd@exp1,w,c
 10267  001F04  1846               	xorwf	___ftadd@exp2,w,c
 10268  001F06  B4D8               	btfsc	status,2,c
 10269  001F08  D00F               	goto	l6035
 10270  001F0A  0645               	decf	___ftadd@sign,f,c
 10271  001F0C  C045  F042         	movff	___ftadd@sign,??___ftadd
 10272  001F10  0E07               	movlw	7
 10273  001F12  1642               	andwf	??___ftadd,f,c
 10274  001F14  B4D8               	btfsc	status,2,c
 10275  001F16  D008               	goto	l6035
 10276  001F18  D7EF               	goto	l6027
 10277  001F1A  D006               	goto	l6035
 10278  001F1C                     l6033:
 10279  001F1C  90D8               	bcf	status,0,c
 10280  001F1E  3241               	rrcf	___ftadd@f2+2,f,c
 10281  001F20  3240               	rrcf	___ftadd@f2+1,f,c
 10282  001F22  323F               	rrcf	___ftadd@f2,f,c
 10283  001F24  2A46               	incf	___ftadd@exp2,f,c
 10284  001F26  D000               	goto	l6035
 10285  001F28                     l6035:
 10286  001F28  5046               	movf	___ftadd@exp2,w,c
 10287  001F2A  1847               	xorwf	___ftadd@exp1,w,c
 10288  001F2C  B4D8               	btfsc	status,2,c
 10289  001F2E  D002               	goto	l1133
 10290  001F30  D7F5               	goto	l6033
 10291  001F32  D000               	goto	l1133
 10292  001F34                     l1133:
 10293  001F34  AE45               	btfss	___ftadd@sign,7,c
 10294  001F36  D00C               	goto	l1142
 10295  001F38  0EFF               	movlw	255
 10296  001F3A  1A3C               	xorwf	___ftadd@f1,f,c
 10297  001F3C  0EFF               	movlw	255
 10298  001F3E  1A3D               	xorwf	___ftadd@f1+1,f,c
 10299  001F40  0EFF               	movlw	255
 10300  001F42  1A3E               	xorwf	___ftadd@f1+2,f,c
 10301  001F44  0E01               	movlw	1
 10302  001F46  263C               	addwf	___ftadd@f1,f,c
 10303  001F48  0E00               	movlw	0
 10304  001F4A  223D               	addwfc	___ftadd@f1+1,f,c
 10305  001F4C  0E00               	movlw	0
 10306  001F4E  223E               	addwfc	___ftadd@f1+2,f,c
 10307  001F50                     l1142:
 10308  001F50  AC45               	btfss	___ftadd@sign,6,c
 10309  001F52  D00D               	goto	l6041
 10310  001F54  0EFF               	movlw	255
 10311  001F56  1A3F               	xorwf	___ftadd@f2,f,c
 10312  001F58  0EFF               	movlw	255
 10313  001F5A  1A40               	xorwf	___ftadd@f2+1,f,c
 10314  001F5C  0EFF               	movlw	255
 10315  001F5E  1A41               	xorwf	___ftadd@f2+2,f,c
 10316  001F60  0E01               	movlw	1
 10317  001F62  263F               	addwf	___ftadd@f2,f,c
 10318  001F64  0E00               	movlw	0
 10319  001F66  2240               	addwfc	___ftadd@f2+1,f,c
 10320  001F68  0E00               	movlw	0
 10321  001F6A  2241               	addwfc	___ftadd@f2+2,f,c
 10322  001F6C  D000               	goto	l6041
 10323  001F6E                     l6041:
 10324  001F6E  0E00               	movlw	0
 10325  001F70  6E45               	movwf	___ftadd@sign,c
 10326  001F72  503C               	movf	___ftadd@f1,w,c
 10327  001F74  263F               	addwf	___ftadd@f2,f,c
 10328  001F76  503D               	movf	___ftadd@f1+1,w,c
 10329  001F78  2240               	addwfc	___ftadd@f2+1,f,c
 10330  001F7A  503E               	movf	___ftadd@f1+2,w,c
 10331  001F7C  2241               	addwfc	___ftadd@f2+2,f,c
 10332  001F7E  AE41               	btfss	___ftadd@f2+2,7,c
 10333  001F80  D00F               	goto	l6051
 10334  001F82  0EFF               	movlw	255
 10335  001F84  1A3F               	xorwf	___ftadd@f2,f,c
 10336  001F86  0EFF               	movlw	255
 10337  001F88  1A40               	xorwf	___ftadd@f2+1,f,c
 10338  001F8A  0EFF               	movlw	255
 10339  001F8C  1A41               	xorwf	___ftadd@f2+2,f,c
 10340  001F8E  0E01               	movlw	1
 10341  001F90  263F               	addwf	___ftadd@f2,f,c
 10342  001F92  0E00               	movlw	0
 10343  001F94  2240               	addwfc	___ftadd@f2+1,f,c
 10344  001F96  0E00               	movlw	0
 10345  001F98  2241               	addwfc	___ftadd@f2+2,f,c
 10346  001F9A  0E01               	movlw	1
 10347  001F9C  6E45               	movwf	___ftadd@sign,c
 10348  001F9E  D000               	goto	l6051
 10349  001FA0                     l6051:
 10350  001FA0  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
 10351  001FA4  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 10352  001FA8  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 10353  001FAC  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
 10354  001FB0  C045  F013         	movff	___ftadd@sign,___ftpack@sign
 10355  001FB4  ECFF  F017         	call	___ftpack	;wreg free
 10356  001FB8  C00F  F03C         	movff	?___ftpack,?___ftadd
 10357  001FBC  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
 10358  001FC0  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
 10359  001FC4  D000               	goto	l1119
 10360  001FC6                     l1119:
 10361  001FC6  0012               	return		;funcret
 10362  001FC8                     __end_of___ftadd:
 10363                           	opt stack 0
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           prodh	equ	0xFF4
 10369                           prodl	equ	0xFF3
 10370                           intcon2	equ	0xFF1
 10371                           postinc0	equ	0xFEE
 10372                           wreg	equ	0xFE8
 10373                           postdec1	equ	0xFE5
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function ___ftneg *****************
 10383 ;; Defined at:
 10384 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  f1              3   14[COMRAM] float 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  3   14[COMRAM] float 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:        3 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    2
 10405 ;; This function calls:
 10406 ;;		Nothing
 10407 ;; This function is called by:
 10408 ;;		_printf
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           	psect	text34
 10413  003E76                     __ptext34:
 10414                           	opt stack 0
 10415  003E76                     ___ftneg:
 10416                           	opt stack 23
 10417                           
 10418                           ;incstack = 0
 10419  003E76  500F               	movf	___ftneg@f1,w,c
 10420  003E78  1010               	iorwf	___ftneg@f1+1,w,c
 10421  003E7A  1011               	iorwf	___ftneg@f1+2,w,c
 10422  003E7C  B4D8               	btfsc	status,2,c
 10423  003E7E  D006               	goto	l1192
 10424  003E80  0E00               	movlw	0
 10425  003E82  1A0F               	xorwf	___ftneg@f1,f,c
 10426  003E84  0E00               	movlw	0
 10427  003E86  1A10               	xorwf	___ftneg@f1+1,f,c
 10428  003E88  0E80               	movlw	128
 10429  003E8A  1A11               	xorwf	___ftneg@f1+2,f,c
 10430  003E8C                     l1192:
 10431  003E8C  C00F  F00F         	movff	___ftneg@f1,?___ftneg
 10432  003E90  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
 10433  003E94  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
 10434  003E98  0012               	return		;funcret
 10435  003E9A                     __end_of___ftneg:
 10436                           	opt stack 0
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           intcon2	equ	0xFF1
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           postdec1	equ	0xFE5
 10447                           fsr1l	equ	0xFE1
 10448                           indf2	equ	0xFDF
 10449                           postinc2	equ	0xFDE
 10450                           postdec2	equ	0xFDD
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function ___ftge *****************
 10456 ;; Defined at:
 10457 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  ff1             3   14[COMRAM] float 
 10460 ;;  ff2             3   17[COMRAM] float 
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;		None
 10463 ;; Return value:  Size  Location     Type
 10464 ;;		None               void
 10465 ;; Registers used:
 10466 ;;		wreg, status,2, status,0
 10467 ;; Tracked objects:
 10468 ;;		On entry : 0/0
 10469 ;;		On exit  : 0/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10472 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10474 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;Total ram usage:        9 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; Hardware stack levels required when called:    2
 10479 ;; This function calls:
 10480 ;;		Nothing
 10481 ;; This function is called by:
 10482 ;;		_main
 10483 ;;		_update_LCD_misc
 10484 ;;		_printf
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text35
 10489  00323A                     __ptext35:
 10490                           	opt stack 0
 10491  00323A                     ___ftge:
 10492                           	opt stack 28
 10493                           
 10494                           ;incstack = 0
 10495  00323A  AE11               	btfss	___ftge@ff1+2,7,c
 10496  00323C  D017               	goto	l6459
 10497  00323E  C00F  F015         	movff	___ftge@ff1,??___ftge
 10498  003242  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 10499  003246  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 10500  00324A  1E15               	comf	??___ftge,f,c
 10501  00324C  1E16               	comf	??___ftge+1,f,c
 10502  00324E  1E17               	comf	??___ftge+2,f,c
 10503  003250  2A15               	incf	??___ftge,f,c
 10504  003252  0E00               	movlw	0
 10505  003254  2216               	addwfc	??___ftge+1,f,c
 10506  003256  2217               	addwfc	??___ftge+2,f,c
 10507  003258  0E00               	movlw	0
 10508  00325A  2415               	addwf	??___ftge,w,c
 10509  00325C  6E0F               	movwf	___ftge@ff1,c
 10510  00325E  0E00               	movlw	0
 10511  003260  2016               	addwfc	??___ftge+1,w,c
 10512  003262  6E10               	movwf	___ftge@ff1+1,c
 10513  003264  0E80               	movlw	128
 10514  003266  2017               	addwfc	??___ftge+2,w,c
 10515  003268  6E11               	movwf	___ftge@ff1+2,c
 10516  00326A  D000               	goto	l6459
 10517  00326C                     l6459:
 10518  00326C  AE14               	btfss	___ftge@ff2+2,7,c
 10519  00326E  D017               	goto	l6463
 10520  003270  C012  F015         	movff	___ftge@ff2,??___ftge
 10521  003274  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 10522  003278  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 10523  00327C  1E15               	comf	??___ftge,f,c
 10524  00327E  1E16               	comf	??___ftge+1,f,c
 10525  003280  1E17               	comf	??___ftge+2,f,c
 10526  003282  2A15               	incf	??___ftge,f,c
 10527  003284  0E00               	movlw	0
 10528  003286  2216               	addwfc	??___ftge+1,f,c
 10529  003288  2217               	addwfc	??___ftge+2,f,c
 10530  00328A  0E00               	movlw	0
 10531  00328C  2415               	addwf	??___ftge,w,c
 10532  00328E  6E12               	movwf	___ftge@ff2,c
 10533  003290  0E00               	movlw	0
 10534  003292  2016               	addwfc	??___ftge+1,w,c
 10535  003294  6E13               	movwf	___ftge@ff2+1,c
 10536  003296  0E80               	movlw	128
 10537  003298  2017               	addwfc	??___ftge+2,w,c
 10538  00329A  6E14               	movwf	___ftge@ff2+2,c
 10539  00329C  D000               	goto	l6463
 10540  00329E                     l6463:
 10541  00329E  0E00               	movlw	0
 10542  0032A0  1A0F               	xorwf	___ftge@ff1,f,c
 10543  0032A2  0E00               	movlw	0
 10544  0032A4  1A10               	xorwf	___ftge@ff1+1,f,c
 10545  0032A6  0E80               	movlw	128
 10546  0032A8  1A11               	xorwf	___ftge@ff1+2,f,c
 10547  0032AA  0E00               	movlw	0
 10548  0032AC  1A12               	xorwf	___ftge@ff2,f,c
 10549  0032AE  0E00               	movlw	0
 10550  0032B0  1A13               	xorwf	___ftge@ff2+1,f,c
 10551  0032B2  0E80               	movlw	128
 10552  0032B4  1A14               	xorwf	___ftge@ff2+2,f,c
 10553  0032B6  5012               	movf	___ftge@ff2,w,c
 10554  0032B8  5C0F               	subwf	___ftge@ff1,w,c
 10555  0032BA  5013               	movf	___ftge@ff2+1,w,c
 10556  0032BC  5810               	subwfb	___ftge@ff1+1,w,c
 10557  0032BE  5014               	movf	___ftge@ff2+2,w,c
 10558  0032C0  5811               	subwfb	___ftge@ff1+2,w,c
 10559  0032C2  B0D8               	btfsc	status,0,c
 10560  0032C4  D002               	goto	l6469
 10561  0032C6  90D8               	bcf	status,0,c
 10562  0032C8  D002               	goto	l1176
 10563  0032CA                     l6469:
 10564  0032CA  80D8               	bsf	status,0,c
 10565  0032CC  D000               	goto	l1176
 10566  0032CE                     l1176:
 10567  0032CE  0012               	return		;funcret
 10568  0032D0                     __end_of___ftge:
 10569                           	opt stack 0
 10570                           tblptru	equ	0xFF8
 10571                           tblptrh	equ	0xFF7
 10572                           tblptrl	equ	0xFF6
 10573                           tablat	equ	0xFF5
 10574                           prodh	equ	0xFF4
 10575                           prodl	equ	0xFF3
 10576                           intcon2	equ	0xFF1
 10577                           postinc0	equ	0xFEE
 10578                           wreg	equ	0xFE8
 10579                           postdec1	equ	0xFE5
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _get_full_ADC *****************
 10589 ;; Defined at:
 10590 ;;		line 477 in file "Lab9test.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;  result          2   18[COMRAM] int 
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  2   14[COMRAM] unsigned int 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:        6 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    2
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_main
 10615 ;;		_update_LCD_misc
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text36
 10620  003E2A                     __ptext36:
 10621                           	opt stack 0
 10622  003E2A                     _get_full_ADC:
 10623                           	opt stack 28
 10624                           
 10625                           ;Lab9test.c: 479: int result;
 10626                           ;Lab9test.c: 480: ADCON0bits.GO=1;
 10627                           
 10628                           ;incstack = 0
 10629  003E2A  82C2               	bsf	4034,1,c	;volatile
 10630                           
 10631                           ;Lab9test.c: 481: while(ADCON0bits.DONE==1);
 10632  003E2C  D000               	goto	l445
 10633  003E2E                     l445:
 10634  003E2E  B2C2               	btfsc	4034,1,c	;volatile
 10635  003E30  D7FE               	goto	l445
 10636                           
 10637                           ;Lab9test.c: 482: result = (ADRESH * 0x100) + ADRESL;
 10638  003E32  50C4               	movf	4036,w,c	;volatile
 10639  003E34  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
 10640  003E36  6A11               	clrf	??_get_full_ADC& (0+255),c
 10641  003E38  50C3               	movf	4035,w,c	;volatile
 10642  003E3A  2411               	addwf	??_get_full_ADC,w,c
 10643  003E3C  6E13               	movwf	get_full_ADC@result,c
 10644  003E3E  0E00               	movlw	0
 10645  003E40  2012               	addwfc	??_get_full_ADC+1,w,c
 10646  003E42  6E14               	movwf	get_full_ADC@result+1,c
 10647                           
 10648                           ;Lab9test.c: 484: return result;
 10649  003E44  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
 10650  003E48  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 10651  003E4C  D000               	goto	l448
 10652  003E4E                     l448:
 10653  003E4E  0012               	return		;funcret
 10654  003E50                     __end_of_get_full_ADC:
 10655                           	opt stack 0
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon2	equ	0xFF1
 10663                           postinc0	equ	0xFEE
 10664                           wreg	equ	0xFE8
 10665                           postdec1	equ	0xFE5
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           fsr2h	equ	0xFDA
 10671                           fsr2l	equ	0xFD9
 10672                           status	equ	0xFD8
 10673                           
 10674 ;; *************** function ___ftdiv *****************
 10675 ;; Defined at:
 10676 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;  f1              3   38[COMRAM] float 
 10679 ;;  f2              3   41[COMRAM] float 
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  f3              3   48[COMRAM] float 
 10682 ;;  sign            1   52[COMRAM] unsigned char 
 10683 ;;  exp             1   51[COMRAM] unsigned char 
 10684 ;;  cntr            1   47[COMRAM] unsigned char 
 10685 ;; Return value:  Size  Location     Type
 10686 ;;                  3   38[COMRAM] float 
 10687 ;; Registers used:
 10688 ;;		wreg, status,2, status,0, cstack
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10694 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;Total ram usage:       15 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:    3
 10701 ;; This function calls:
 10702 ;;		___ftpack
 10703 ;; This function is called by:
 10704 ;;		_main
 10705 ;;		_update_LCD_misc
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text37
 10710  002C90                     __ptext37:
 10711                           	opt stack 0
 10712  002C90                     ___ftdiv:
 10713                           	opt stack 27
 10714                           
 10715                           ;incstack = 0
 10716  002C90  C029  F02D         	movff	___ftdiv@f1+2,??___ftdiv
 10717  002C94  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10718  002C96  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10719  002C98  3428               	rlcf	___ftdiv@f1+1,w,c
 10720  002C9A  362D               	rlcf	??___ftdiv& (0+255),f,c
 10721  002C9C  E301               	bnc	u7121
 10722  002C9E  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10723  002CA0                     u7121:
 10724  002CA0  502D               	movf	??___ftdiv,w,c
 10725  002CA2  6E34               	movwf	___ftdiv@exp,c
 10726  002CA4  5034               	movf	___ftdiv@exp,w,c
 10727  002CA6  A4D8               	btfss	status,2,c
 10728  002CA8  D002               	goto	l6943
 10729  002CAA  D00E               	goto	l6945
 10730  002CAC  D061               	goto	l1150
 10731  002CAE                     l6943:
 10732  002CAE  C02C  F02D         	movff	___ftdiv@f2+2,??___ftdiv
 10733  002CB2  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10734  002CB4  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10735  002CB6  342B               	rlcf	___ftdiv@f2+1,w,c
 10736  002CB8  362D               	rlcf	??___ftdiv& (0+255),f,c
 10737  002CBA  E301               	bnc	u7141
 10738  002CBC  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10739  002CBE                     u7141:
 10740  002CBE  502D               	movf	??___ftdiv,w,c
 10741  002CC0  6E35               	movwf	___ftdiv@sign,c
 10742  002CC2  5035               	movf	___ftdiv@sign,w,c
 10743  002CC4  A4D8               	btfss	status,2,c
 10744  002CC6  D007               	goto	l6949
 10745  002CC8                     l6945:
 10746  002CC8  0E00               	movlw	0
 10747  002CCA  6E27               	movwf	?___ftdiv,c
 10748  002CCC  0E00               	movlw	0
 10749  002CCE  6E28               	movwf	?___ftdiv+1,c
 10750  002CD0  0E00               	movlw	0
 10751  002CD2  6E29               	movwf	?___ftdiv+2,c
 10752  002CD4  D04D               	goto	l1150
 10753  002CD6                     l6949:
 10754  002CD6  0E00               	movlw	0
 10755  002CD8  6E31               	movwf	___ftdiv@f3,c
 10756  002CDA  0E00               	movlw	0
 10757  002CDC  6E32               	movwf	___ftdiv@f3+1,c
 10758  002CDE  0E00               	movlw	0
 10759  002CE0  6E33               	movwf	___ftdiv@f3+2,c
 10760  002CE2  5035               	movf	___ftdiv@sign,w,c
 10761  002CE4  0F89               	addlw	137
 10762  002CE6  5E34               	subwf	___ftdiv@exp,f,c
 10763  002CE8  C029  F035         	movff	___ftdiv@f1+2,___ftdiv@sign
 10764  002CEC  502C               	movf	___ftdiv@f2+2,w,c
 10765  002CEE  1A35               	xorwf	___ftdiv@sign,f,c
 10766  002CF0  0E80               	movlw	128
 10767  002CF2  1635               	andwf	___ftdiv@sign,f,c
 10768  002CF4  8E28               	bsf	___ftdiv@f1+1,7,c
 10769  002CF6  0EFF               	movlw	255
 10770  002CF8  1627               	andwf	___ftdiv@f1,f,c
 10771  002CFA  0EFF               	movlw	255
 10772  002CFC  1628               	andwf	___ftdiv@f1+1,f,c
 10773  002CFE  0E00               	movlw	0
 10774  002D00  1629               	andwf	___ftdiv@f1+2,f,c
 10775  002D02  8E2B               	bsf	___ftdiv@f2+1,7,c
 10776  002D04  0EFF               	movlw	255
 10777  002D06  162A               	andwf	___ftdiv@f2,f,c
 10778  002D08  0EFF               	movlw	255
 10779  002D0A  162B               	andwf	___ftdiv@f2+1,f,c
 10780  002D0C  0E00               	movlw	0
 10781  002D0E  162C               	andwf	___ftdiv@f2+2,f,c
 10782  002D10  0E18               	movlw	24
 10783  002D12  6E30               	movwf	___ftdiv@cntr,c
 10784  002D14  D000               	goto	l6969
 10785  002D16                     l6969:
 10786  002D16  90D8               	bcf	status,0,c
 10787  002D18  3631               	rlcf	___ftdiv@f3,f,c
 10788  002D1A  3632               	rlcf	___ftdiv@f3+1,f,c
 10789  002D1C  3633               	rlcf	___ftdiv@f3+2,f,c
 10790  002D1E  502A               	movf	___ftdiv@f2,w,c
 10791  002D20  5C27               	subwf	___ftdiv@f1,w,c
 10792  002D22  502B               	movf	___ftdiv@f2+1,w,c
 10793  002D24  5828               	subwfb	___ftdiv@f1+1,w,c
 10794  002D26  502C               	movf	___ftdiv@f2+2,w,c
 10795  002D28  5829               	subwfb	___ftdiv@f1+2,w,c
 10796  002D2A  A0D8               	btfss	status,0,c
 10797  002D2C  D007               	goto	l1153
 10798  002D2E  502A               	movf	___ftdiv@f2,w,c
 10799  002D30  5E27               	subwf	___ftdiv@f1,f,c
 10800  002D32  502B               	movf	___ftdiv@f2+1,w,c
 10801  002D34  5A28               	subwfb	___ftdiv@f1+1,f,c
 10802  002D36  502C               	movf	___ftdiv@f2+2,w,c
 10803  002D38  5A29               	subwfb	___ftdiv@f1+2,f,c
 10804  002D3A  8031               	bsf	___ftdiv@f3,0,c
 10805  002D3C                     l1153:
 10806  002D3C  90D8               	bcf	status,0,c
 10807  002D3E  3627               	rlcf	___ftdiv@f1,f,c
 10808  002D40  3628               	rlcf	___ftdiv@f1+1,f,c
 10809  002D42  3629               	rlcf	___ftdiv@f1+2,f,c
 10810  002D44  2E30               	decfsz	___ftdiv@cntr,f,c
 10811  002D46  D7E7               	goto	l6969
 10812  002D48  D000               	goto	l6979
 10813  002D4A                     l6979:
 10814  002D4A  C031  F00F         	movff	___ftdiv@f3,___ftpack@arg
 10815  002D4E  C032  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10816  002D52  C033  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10817  002D56  C034  F012         	movff	___ftdiv@exp,___ftpack@exp
 10818  002D5A  C035  F013         	movff	___ftdiv@sign,___ftpack@sign
 10819  002D5E  ECFF  F017         	call	___ftpack	;wreg free
 10820  002D62  C00F  F027         	movff	?___ftpack,?___ftdiv
 10821  002D66  C010  F028         	movff	?___ftpack+1,?___ftdiv+1
 10822  002D6A  C011  F029         	movff	?___ftpack+2,?___ftdiv+2
 10823  002D6E  D000               	goto	l1150
 10824  002D70                     l1150:
 10825  002D70  0012               	return		;funcret
 10826  002D72                     __end_of___ftdiv:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon2	equ	0xFF1
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           postdec1	equ	0xFE5
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function ___awtoft *****************
 10847 ;; Defined at:
 10848 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  c               2   34[COMRAM] int 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  sign            1   37[COMRAM] unsigned char 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  3   34[COMRAM] float 
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0, cstack
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10862 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;Total ram usage:        4 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; Hardware stack levels required when called:    3
 10869 ;; This function calls:
 10870 ;;		___ftpack
 10871 ;; This function is called by:
 10872 ;;		_main
 10873 ;;		_update_LCD_misc
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           	psect	text38
 10878  003CDE                     __ptext38:
 10879                           	opt stack 0
 10880  003CDE                     ___awtoft:
 10881                           	opt stack 27
 10882                           
 10883                           ;incstack = 0
 10884  003CDE  0E00               	movlw	0
 10885  003CE0  6E26               	movwf	___awtoft@sign,c
 10886  003CE2  AE24               	btfss	___awtoft@c+1,7,c
 10887  003CE4  D007               	goto	l6991
 10888  003CE6  6C23               	negf	___awtoft@c,c
 10889  003CE8  1E24               	comf	___awtoft@c+1,f,c
 10890  003CEA  B0D8               	btfsc	status,0,c
 10891  003CEC  2A24               	incf	___awtoft@c+1,f,c
 10892  003CEE  0E01               	movlw	1
 10893  003CF0  6E26               	movwf	___awtoft@sign,c
 10894  003CF2  D000               	goto	l6991
 10895  003CF4                     l6991:
 10896  003CF4  C023  F00F         	movff	___awtoft@c,___ftpack@arg
 10897  003CF8  C024  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 10898  003CFC  6A11               	clrf	___ftpack@arg+2,c
 10899  003CFE  0E8E               	movlw	142
 10900  003D00  6E12               	movwf	___ftpack@exp,c
 10901  003D02  C026  F013         	movff	___awtoft@sign,___ftpack@sign
 10902  003D06  ECFF  F017         	call	___ftpack	;wreg free
 10903  003D0A  C00F  F023         	movff	?___ftpack,?___awtoft
 10904  003D0E  C010  F024         	movff	?___ftpack+1,?___awtoft+1
 10905  003D12  C011  F025         	movff	?___ftpack+2,?___awtoft+2
 10906  003D16  D000               	goto	l971
 10907  003D18                     l971:
 10908  003D18  0012               	return		;funcret
 10909  003D1A                     __end_of___awtoft:
 10910                           	opt stack 0
 10911                           tblptru	equ	0xFF8
 10912                           tblptrh	equ	0xFF7
 10913                           tblptrl	equ	0xFF6
 10914                           tablat	equ	0xFF5
 10915                           prodh	equ	0xFF4
 10916                           prodl	equ	0xFF3
 10917                           intcon2	equ	0xFF1
 10918                           postinc0	equ	0xFEE
 10919                           wreg	equ	0xFE8
 10920                           postdec1	equ	0xFE5
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8
 10928                           
 10929 ;; *************** function ___ftpack *****************
 10930 ;; Defined at:
 10931 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  arg             3   14[COMRAM] unsigned um
 10934 ;;  exp             1   17[COMRAM] unsigned char 
 10935 ;;  sign            1   18[COMRAM] unsigned char 
 10936 ;; Auto vars:     Size  Location     Type
 10937 ;;		None
 10938 ;; Return value:  Size  Location     Type
 10939 ;;                  3   14[COMRAM] float 
 10940 ;; Registers used:
 10941 ;;		wreg, status,2, status,0
 10942 ;; Tracked objects:
 10943 ;;		On entry : 0/0
 10944 ;;		On exit  : 0/0
 10945 ;;		Unchanged: 0/0
 10946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10947 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;Total ram usage:        8 bytes
 10952 ;; Hardware stack levels used:    1
 10953 ;; Hardware stack levels required when called:    2
 10954 ;; This function calls:
 10955 ;;		Nothing
 10956 ;; This function is called by:
 10957 ;;		___awtoft
 10958 ;;		___ftadd
 10959 ;;		___ftdiv
 10960 ;;		___ftmul
 10961 ;;		___lltoft
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text39
 10966  002FFE                     __ptext39:
 10967                           	opt stack 0
 10968  002FFE                     ___ftpack:
 10969                           	opt stack 27
 10970                           
 10971                           ;incstack = 0
 10972  002FFE  5012               	movf	___ftpack@exp,w,c
 10973  003000  B4D8               	btfsc	status,2,c
 10974  003002  D005               	goto	l5879
 10975  003004  500F               	movf	___ftpack@arg,w,c
 10976  003006  1010               	iorwf	___ftpack@arg+1,w,c
 10977  003008  1011               	iorwf	___ftpack@arg+2,w,c
 10978  00300A  A4D8               	btfss	status,2,c
 10979  00300C  D00E               	goto	l5885
 10980  00300E                     l5879:
 10981  00300E  0E00               	movlw	0
 10982  003010  6E0F               	movwf	?___ftpack,c
 10983  003012  0E00               	movlw	0
 10984  003014  6E10               	movwf	?___ftpack+1,c
 10985  003016  0E00               	movlw	0
 10986  003018  6E11               	movwf	?___ftpack+2,c
 10987  00301A  D053               	goto	l1078
 10988  00301C  D006               	goto	l5885
 10989  00301E                     l5883:
 10990  00301E  2A12               	incf	___ftpack@exp,f,c
 10991  003020  90D8               	bcf	status,0,c
 10992  003022  3211               	rrcf	___ftpack@arg+2,f,c
 10993  003024  3210               	rrcf	___ftpack@arg+1,f,c
 10994  003026  320F               	rrcf	___ftpack@arg,f,c
 10995  003028  D000               	goto	l5885
 10996  00302A                     l5885:
 10997  00302A  0E00               	movlw	0
 10998  00302C  140F               	andwf	___ftpack@arg,w,c
 10999  00302E  6E14               	movwf	??___ftpack& (0+255),c
 11000  003030  0E00               	movlw	0
 11001  003032  1410               	andwf	___ftpack@arg+1,w,c
 11002  003034  6E15               	movwf	(??___ftpack+1)& (0+255),c
 11003  003036  0EFE               	movlw	254
 11004  003038  1411               	andwf	___ftpack@arg+2,w,c
 11005  00303A  6E16               	movwf	(??___ftpack+2)& (0+255),c
 11006  00303C  5014               	movf	??___ftpack,w,c
 11007  00303E  1015               	iorwf	??___ftpack+1,w,c
 11008  003040  1016               	iorwf	??___ftpack+2,w,c
 11009  003042  B4D8               	btfsc	status,2,c
 11010  003044  D00E               	goto	l5891
 11011  003046  D7EB               	goto	l5883
 11012  003048  D00C               	goto	l5891
 11013  00304A                     l5887:
 11014  00304A  2A12               	incf	___ftpack@exp,f,c
 11015  00304C  0E01               	movlw	1
 11016  00304E  260F               	addwf	___ftpack@arg,f,c
 11017  003050  0E00               	movlw	0
 11018  003052  2210               	addwfc	___ftpack@arg+1,f,c
 11019  003054  0E00               	movlw	0
 11020  003056  2211               	addwfc	___ftpack@arg+2,f,c
 11021  003058  90D8               	bcf	status,0,c
 11022  00305A  3211               	rrcf	___ftpack@arg+2,f,c
 11023  00305C  3210               	rrcf	___ftpack@arg+1,f,c
 11024  00305E  320F               	rrcf	___ftpack@arg,f,c
 11025  003060  D000               	goto	l5891
 11026  003062                     l5891:
 11027  003062  0E00               	movlw	0
 11028  003064  140F               	andwf	___ftpack@arg,w,c
 11029  003066  6E14               	movwf	??___ftpack& (0+255),c
 11030  003068  0E00               	movlw	0
 11031  00306A  1410               	andwf	___ftpack@arg+1,w,c
 11032  00306C  6E15               	movwf	(??___ftpack+1)& (0+255),c
 11033  00306E  0EFF               	movlw	255
 11034  003070  1411               	andwf	___ftpack@arg+2,w,c
 11035  003072  6E16               	movwf	(??___ftpack+2)& (0+255),c
 11036  003074  5014               	movf	??___ftpack,w,c
 11037  003076  1015               	iorwf	??___ftpack+1,w,c
 11038  003078  1016               	iorwf	??___ftpack+2,w,c
 11039  00307A  B4D8               	btfsc	status,2,c
 11040  00307C  D008               	goto	l5895
 11041  00307E  D7E5               	goto	l5887
 11042  003080  D006               	goto	l5895
 11043  003082                     l5893:
 11044  003082  0612               	decf	___ftpack@exp,f,c
 11045  003084  90D8               	bcf	status,0,c
 11046  003086  360F               	rlcf	___ftpack@arg,f,c
 11047  003088  3610               	rlcf	___ftpack@arg+1,f,c
 11048  00308A  3611               	rlcf	___ftpack@arg+2,f,c
 11049  00308C  D000               	goto	l5895
 11050  00308E                     l5895:
 11051  00308E  BE10               	btfsc	___ftpack@arg+1,7,c
 11052  003090  D004               	goto	l1089
 11053  003092  0E02               	movlw	2
 11054  003094  6012               	cpfslt	___ftpack@exp,c
 11055  003096  D7F5               	goto	l5893
 11056  003098  D000               	goto	l1089
 11057  00309A                     l1089:
 11058  00309A  B012               	btfsc	___ftpack@exp,0,c
 11059  00309C  D002               	goto	l5901
 11060  00309E  9E10               	bcf	___ftpack@arg+1,7,c
 11061  0030A0  D000               	goto	l5901
 11062  0030A2                     l5901:
 11063  0030A2  90D8               	bcf	status,0,c
 11064  0030A4  3212               	rrcf	___ftpack@exp,f,c
 11065  0030A6  5012               	movf	___ftpack@exp,w,c
 11066  0030A8  1211               	iorwf	___ftpack@arg+2,f,c
 11067  0030AA  5013               	movf	___ftpack@sign,w,c
 11068  0030AC  B4D8               	btfsc	status,2,c
 11069  0030AE  D002               	goto	l5907
 11070  0030B0  8E11               	bsf	___ftpack@arg+2,7,c
 11071  0030B2  D000               	goto	l5907
 11072  0030B4                     l5907:
 11073  0030B4  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 11074  0030B8  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 11075  0030BC  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 11076  0030C0  D000               	goto	l1078
 11077  0030C2                     l1078:
 11078  0030C2  0012               	return		;funcret
 11079  0030C4                     __end_of___ftpack:
 11080                           	opt stack 0
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon2	equ	0xFF1
 11088                           postinc0	equ	0xFEE
 11089                           wreg	equ	0xFE8
 11090                           postdec1	equ	0xFE5
 11091                           fsr1l	equ	0xFE1
 11092                           indf2	equ	0xFDF
 11093                           postinc2	equ	0xFDE
 11094                           postdec2	equ	0xFDD
 11095                           fsr2h	equ	0xFDA
 11096                           fsr2l	equ	0xFD9
 11097                           status	equ	0xFD8
 11098                           
 11099 ;; *************** function _Do_Init *****************
 11100 ;; Defined at:
 11101 ;;		line 800 in file "Lab9test.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;		None
 11104 ;; Auto vars:     Size  Location     Type
 11105 ;;		None
 11106 ;; Return value:  Size  Location     Type
 11107 ;;		None               void
 11108 ;; Registers used:
 11109 ;;		wreg, status,2, cstack
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;Total ram usage:        0 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    4
 11122 ;; This function calls:
 11123 ;;		_Init_ADC
 11124 ;;		_Init_TRIS
 11125 ;;		_init_UART
 11126 ;; This function is called by:
 11127 ;;		_main
 11128 ;;		_update_LCD_misc
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           	psect	text40
 11133  003E50                     __ptext40:
 11134                           	opt stack 0
 11135  003E50                     _Do_Init:
 11136                           	opt stack 22
 11137                           
 11138                           ;Lab9test.c: 803: Init_ADC();
 11139                           
 11140                           ;incstack = 0
 11141  003E50  ECD9  F01F         	call	_Init_ADC	;wreg free
 11142                           
 11143                           ;Lab9test.c: 804: Init_TRIS();
 11144  003E54  EC91  F01F         	call	_Init_TRIS	;wreg free
 11145                           
 11146                           ;Lab9test.c: 805: init_UART ();
 11147  003E58  EC9C  F01F         	call	_init_UART	;wreg free
 11148                           
 11149                           ;Lab9test.c: 806: OSCCON = 0x70;
 11150  003E5C  0E70               	movlw	112
 11151  003E5E  6ED3               	movwf	4051,c	;volatile
 11152                           
 11153                           ;Lab9test.c: 808: INTCONbits.INT0IF = 0;
 11154  003E60  92F2               	bcf	intcon,1,c	;volatile
 11155                           
 11156                           ;Lab9test.c: 809: INTCON3bits.INT1IF = 0;
 11157  003E62  90F0               	bcf	intcon3,0,c	;volatile
 11158                           
 11159                           ;Lab9test.c: 810: INTCON3bits.INT2IF =0;
 11160  003E64  92F0               	bcf	intcon3,1,c	;volatile
 11161                           
 11162                           ;Lab9test.c: 812: INTCON2bits.INTEDG0 = 0 ;
 11163  003E66  9CF1               	bcf	intcon2,6,c	;volatile
 11164                           
 11165                           ;Lab9test.c: 813: INTCON2bits.INTEDG1 = 0;
 11166  003E68  9AF1               	bcf	intcon2,5,c	;volatile
 11167                           
 11168                           ;Lab9test.c: 814: INTCON2bits.INTEDG2 = 1;
 11169  003E6A  88F1               	bsf	intcon2,4,c	;volatile
 11170                           
 11171                           ;Lab9test.c: 816: INTCONbits.INT0IE = 1;
 11172  003E6C  88F2               	bsf	intcon,4,c	;volatile
 11173                           
 11174                           ;Lab9test.c: 817: INTCON3bits.INT1IE = 1;
 11175  003E6E  86F0               	bsf	intcon3,3,c	;volatile
 11176                           
 11177                           ;Lab9test.c: 818: INTCON3bits.INT2IE = 1;
 11178  003E70  88F0               	bsf	intcon3,4,c	;volatile
 11179                           
 11180                           ;Lab9test.c: 820: INTCONbits.GIE = 1;
 11181  003E72  8EF2               	bsf	intcon,7,c	;volatile
 11182  003E74  0012               	return		;funcret
 11183  003E76                     __end_of_Do_Init:
 11184                           	opt stack 0
 11185                           tblptru	equ	0xFF8
 11186                           tblptrh	equ	0xFF7
 11187                           tblptrl	equ	0xFF6
 11188                           tablat	equ	0xFF5
 11189                           prodh	equ	0xFF4
 11190                           prodl	equ	0xFF3
 11191                           intcon	equ	0xFF2
 11192                           intcon2	equ	0xFF1
 11193                           intcon3	equ	0xFF0
 11194                           postinc0	equ	0xFEE
 11195                           wreg	equ	0xFE8
 11196                           postdec1	equ	0xFE5
 11197                           fsr1l	equ	0xFE1
 11198                           indf2	equ	0xFDF
 11199                           postinc2	equ	0xFDE
 11200                           postdec2	equ	0xFDD
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205 ;; *************** function _init_UART *****************
 11206 ;; Defined at:
 11207 ;;		line 289 in file "Lab9test.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;		None
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;		None               void
 11214 ;; Registers used:
 11215 ;;		wreg, status,2, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;Total ram usage:        0 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    3
 11228 ;; This function calls:
 11229 ;;		_OpenUSART
 11230 ;; This function is called by:
 11231 ;;		_main
 11232 ;;		_Do_Init
 11233 ;; This function uses a non-reentrant model
 11234 ;;
 11235                           
 11236                           	psect	text41
 11237  003F38                     __ptext41:
 11238                           	opt stack 0
 11239  003F38                     _init_UART:
 11240                           	opt stack 27
 11241                           
 11242                           ;Lab9test.c: 291: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
 11243                           ;Lab9test.c: 292: & 0b11111111 & 0b11111111, 25);
 11244                           
 11245                           ;incstack = 0
 11246  003F38  0E00               	movlw	0
 11247  003F3A  6E10               	movwf	OpenUSART@spbrg+1,c
 11248  003F3C  0E19               	movlw	25
 11249  003F3E  6E0F               	movwf	OpenUSART@spbrg,c
 11250  003F40  0E3C               	movlw	60
 11251  003F42  ECC1  F01B         	call	_OpenUSART
 11252                           
 11253                           ;Lab9test.c: 293: OSCCON = 0x60;
 11254  003F46  0E60               	movlw	96
 11255  003F48  6ED3               	movwf	4051,c	;volatile
 11256  003F4A  0012               	return		;funcret
 11257  003F4C                     __end_of_init_UART:
 11258                           	opt stack 0
 11259                           tblptru	equ	0xFF8
 11260                           tblptrh	equ	0xFF7
 11261                           tblptrl	equ	0xFF6
 11262                           tablat	equ	0xFF5
 11263                           prodh	equ	0xFF4
 11264                           prodl	equ	0xFF3
 11265                           intcon	equ	0xFF2
 11266                           intcon2	equ	0xFF1
 11267                           intcon3	equ	0xFF0
 11268                           postinc0	equ	0xFEE
 11269                           wreg	equ	0xFE8
 11270                           postdec1	equ	0xFE5
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function _OpenUSART *****************
 11280 ;; Defined at:
 11281 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  config          1    wreg     unsigned char 
 11284 ;;  spbrg           2   14[COMRAM] unsigned int 
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  config          1   16[COMRAM] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;		None               void
 11289 ;; Registers used:
 11290 ;;		wreg, status,2
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;Total ram usage:        3 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:    2
 11303 ;; This function calls:
 11304 ;;		Nothing
 11305 ;; This function is called by:
 11306 ;;		_init_UART
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           	psect	text42
 11311  003782                     __ptext42:
 11312                           	opt stack 0
 11313  003782                     _OpenUSART:
 11314                           	opt stack 27
 11315                           
 11316                           ;incstack = 0
 11317                           ;OpenUSART@config stored from wreg
 11318  003782  6E11               	movwf	OpenUSART@config,c
 11319  003784  0E00               	movlw	0
 11320  003786  6EAC               	movwf	4012,c	;volatile
 11321  003788  0E00               	movlw	0
 11322  00378A  6EAB               	movwf	4011,c	;volatile
 11323  00378C  A011               	btfss	OpenUSART@config,0,c
 11324  00378E  D002               	goto	l5935
 11325  003790  88AC               	bsf	4012,4,c	;volatile
 11326  003792  D000               	goto	l5935
 11327  003794                     l5935:
 11328  003794  A211               	btfss	OpenUSART@config,1,c
 11329  003796  D003               	goto	l5939
 11330  003798  8CAC               	bsf	4012,6,c	;volatile
 11331  00379A  8CAB               	bsf	4011,6,c	;volatile
 11332  00379C  D000               	goto	l5939
 11333  00379E                     l5939:
 11334  00379E  A411               	btfss	OpenUSART@config,2,c
 11335  0037A0  D002               	goto	l5943
 11336  0037A2  8EAC               	bsf	4012,7,c	;volatile
 11337  0037A4  D000               	goto	l5943
 11338  0037A6                     l5943:
 11339  0037A6  A611               	btfss	OpenUSART@config,3,c
 11340  0037A8  D002               	goto	l741
 11341  0037AA  88AB               	bsf	4011,4,c	;volatile
 11342  0037AC  D002               	goto	l5947
 11343  0037AE                     l741:
 11344  0037AE  8AAB               	bsf	4011,5,c	;volatile
 11345  0037B0  D000               	goto	l5947
 11346  0037B2                     l5947:
 11347  0037B2  B811               	btfsc	OpenUSART@config,4,c
 11348  0037B4  84AC               	bsf	4012,2,c	;volatile
 11349  0037B6  989E               	bcf	3998,4,c	;volatile
 11350  0037B8  AA11               	btfss	OpenUSART@config,5,c
 11351  0037BA  D002               	goto	l5955
 11352  0037BC  86AB               	bsf	4011,3,c	;volatile
 11353  0037BE  D000               	goto	l5955
 11354  0037C0                     l5955:
 11355  0037C0  AC11               	btfss	OpenUSART@config,6,c
 11356  0037C2  D002               	goto	l745
 11357  0037C4  8A9D               	bsf	3997,5,c	;volatile
 11358  0037C6  D001               	goto	l746
 11359  0037C8                     l745:
 11360  0037C8  9A9D               	bcf	3997,5,c	;volatile
 11361  0037CA                     l746:
 11362  0037CA  9A9E               	bcf	3998,5,c	;volatile
 11363  0037CC  AE11               	btfss	OpenUSART@config,7,c
 11364  0037CE  D002               	goto	l747
 11365  0037D0  889D               	bsf	3997,4,c	;volatile
 11366  0037D2  D001               	goto	l748
 11367  0037D4                     l747:
 11368  0037D4  989D               	bcf	3997,4,c	;volatile
 11369  0037D6                     l748:
 11370  0037D6  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 11371  0037DA  5010               	movf	OpenUSART@spbrg+1,w,c
 11372  0037DC  6EB0               	movwf	4016,c	;volatile
 11373  0037DE  8AAC               	bsf	4012,5,c	;volatile
 11374  0037E0  8EAB               	bsf	4011,7,c	;volatile
 11375  0037E2  9C94               	bcf	3988,6,c	;volatile
 11376  0037E4  8E94               	bsf	3988,7,c	;volatile
 11377  0037E6  B8AC               	btfsc	4012,4,c	;volatile
 11378  0037E8  BEAC               	btfsc	4012,7,c	;volatile
 11379  0037EA  D002               	goto	l750
 11380  0037EC  8C94               	bsf	3988,6,c	;volatile
 11381  0037EE  D000               	goto	l750
 11382  0037F0                     l750:
 11383  0037F0  0012               	return		;funcret
 11384  0037F2                     __end_of_OpenUSART:
 11385                           	opt stack 0
 11386                           tblptru	equ	0xFF8
 11387                           tblptrh	equ	0xFF7
 11388                           tblptrl	equ	0xFF6
 11389                           tablat	equ	0xFF5
 11390                           prodh	equ	0xFF4
 11391                           prodl	equ	0xFF3
 11392                           intcon	equ	0xFF2
 11393                           intcon2	equ	0xFF1
 11394                           intcon3	equ	0xFF0
 11395                           postinc0	equ	0xFEE
 11396                           wreg	equ	0xFE8
 11397                           postdec1	equ	0xFE5
 11398                           fsr1l	equ	0xFE1
 11399                           indf2	equ	0xFDF
 11400                           postinc2	equ	0xFDE
 11401                           postdec2	equ	0xFDD
 11402                           fsr2h	equ	0xFDA
 11403                           fsr2l	equ	0xFD9
 11404                           status	equ	0xFD8
 11405                           
 11406 ;; *************** function _Init_TRIS *****************
 11407 ;; Defined at:
 11408 ;;		line 463 in file "Lab9test.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;		None
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;		None
 11413 ;; Return value:  Size  Location     Type
 11414 ;;		None               void
 11415 ;; Registers used:
 11416 ;;		wreg, status,2
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11426 ;;Total ram usage:        0 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    2
 11429 ;; This function calls:
 11430 ;;		Nothing
 11431 ;; This function is called by:
 11432 ;;		_main
 11433 ;;		_Do_Init
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text43
 11438  003F22                     __ptext43:
 11439                           	opt stack 0
 11440  003F22                     _Init_TRIS:
 11441                           	opt stack 23
 11442                           
 11443                           ;Lab9test.c: 465: TRISA = 0b00011001;
 11444                           
 11445                           ;incstack = 0
 11446  003F22  0E19               	movlw	25
 11447  003F24  6E92               	movwf	3986,c	;volatile
 11448                           
 11449                           ;Lab9test.c: 466: TRISB = 0b00000111;
 11450  003F26  0E07               	movlw	7
 11451  003F28  6E93               	movwf	3987,c	;volatile
 11452                           
 11453                           ;Lab9test.c: 467: TRISC = 0x00;
 11454  003F2A  0E00               	movlw	0
 11455  003F2C  6E94               	movwf	3988,c	;volatile
 11456                           
 11457                           ;Lab9test.c: 468: TRISD = 0x00;
 11458  003F2E  0E00               	movlw	0
 11459  003F30  6E95               	movwf	3989,c	;volatile
 11460                           
 11461                           ;Lab9test.c: 469: TRISE = 0x00;
 11462  003F32  0E00               	movlw	0
 11463  003F34  6E96               	movwf	3990,c	;volatile
 11464  003F36  0012               	return		;funcret
 11465  003F38                     __end_of_Init_TRIS:
 11466                           	opt stack 0
 11467                           tblptru	equ	0xFF8
 11468                           tblptrh	equ	0xFF7
 11469                           tblptrl	equ	0xFF6
 11470                           tablat	equ	0xFF5
 11471                           prodh	equ	0xFF4
 11472                           prodl	equ	0xFF3
 11473                           intcon	equ	0xFF2
 11474                           intcon2	equ	0xFF1
 11475                           intcon3	equ	0xFF0
 11476                           postinc0	equ	0xFEE
 11477                           wreg	equ	0xFE8
 11478                           postdec1	equ	0xFE5
 11479                           fsr1l	equ	0xFE1
 11480                           indf2	equ	0xFDF
 11481                           postinc2	equ	0xFDE
 11482                           postdec2	equ	0xFDD
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487 ;; *************** function _Init_ADC *****************
 11488 ;; Defined at:
 11489 ;;		line 456 in file "Lab9test.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;		None
 11492 ;; Auto vars:     Size  Location     Type
 11493 ;;		None
 11494 ;; Return value:  Size  Location     Type
 11495 ;;		None               void
 11496 ;; Registers used:
 11497 ;;		wreg, status,2
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;Total ram usage:        0 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    2
 11510 ;; This function calls:
 11511 ;;		Nothing
 11512 ;; This function is called by:
 11513 ;;		_main
 11514 ;;		_Do_Init
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text44
 11519  003FB2                     __ptext44:
 11520                           	opt stack 0
 11521  003FB2                     _Init_ADC:
 11522                           	opt stack 23
 11523                           
 11524                           ;Lab9test.c: 458: ADCON0 = 0b00000001;
 11525                           
 11526                           ;incstack = 0
 11527  003FB2  0E01               	movlw	1
 11528  003FB4  6EC2               	movwf	4034,c	;volatile
 11529                           
 11530                           ;Lab9test.c: 459: ADCON1 = 0b00001110;
 11531  003FB6  0E0E               	movlw	14
 11532  003FB8  6EC1               	movwf	4033,c	;volatile
 11533                           
 11534                           ;Lab9test.c: 460: ADCON2 = 0xA9;
 11535  003FBA  0EA9               	movlw	169
 11536  003FBC  6EC0               	movwf	4032,c	;volatile
 11537  003FBE  0012               	return		;funcret
 11538  003FC0                     __end_of_Init_ADC:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           intcon2	equ	0xFF1
 11548                           intcon3	equ	0xFF0
 11549                           postinc0	equ	0xFEE
 11550                           wreg	equ	0xFE8
 11551                           postdec1	equ	0xFE5
 11552                           fsr1l	equ	0xFE1
 11553                           indf2	equ	0xFDF
 11554                           postinc2	equ	0xFDE
 11555                           postdec2	equ	0xFDD
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _Set_NSLT *****************
 11561 ;; Defined at:
 11562 ;;		line 589 in file "Lab9test.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  color           1    wreg     unsigned char 
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  color           1   67[COMRAM] unsigned char 
 11567 ;; Return value:  Size  Location     Type
 11568 ;;		None               void
 11569 ;; Registers used:
 11570 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;Total ram usage:        1 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    9
 11583 ;; This function calls:
 11584 ;;		_update_LCD_color
 11585 ;; This function is called by:
 11586 ;;		_Day_Mode
 11587 ;;		_Night_Mode
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           	psect	text45
 11592  003AFE                     __ptext45:
 11593                           	opt stack 0
 11594  003AFE                     _Set_NSLT:
 11595                           	opt stack 20
 11596                           
 11597                           ;incstack = 0
 11598                           ;Set_NSLT@color stored from wreg
 11599  003AFE  6E44               	movwf	Set_NSLT@color,c
 11600                           
 11601                           ;Lab9test.c: 591: direction = 3;
 11602  003B00  0E03               	movlw	3
 11603  003B02  0100               	movlb	0	; () banked
 11604  003B04  6F97               	movwf	_direction& (0+255),b
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;Lab9test.c: 592: update_LCD_color(direction, color);
 11608  003B06  C044  F041         	movff	Set_NSLT@color,update_LCD_color@color
 11609  003B0A  0100               	movlb	0	; () banked
 11610  003B0C  5197               	movf	_direction& (0+255),w,b
 11611  003B0E  ECDB  F00A         	call	_update_LCD_color
 11612                           
 11613                           ;Lab9test.c: 593: switch (color)
 11614  003B12  D00A               	goto	l7431
 11615  003B14                     l492:
 11616  003B14  9881               	bcf	3969,4,c	;volatile
 11617  003B16  D001               	goto	L16
 11618  003B18                     l494:
 11619  003B18  8881               	bsf	3969,4,c	;volatile
 11620  003B1A                     L16:
 11621  003B1A  9A81               	bcf	3969,5,c	;volatile
 11622  003B1C  D013               	goto	l497
 11623  003B1E                     l495:
 11624  003B1E  9881               	bcf	3969,4,c	;volatile
 11625  003B20  D001               	goto	L17
 11626  003B22                     l496:
 11627  003B22  8881               	bsf	3969,4,c	;volatile
 11628  003B24                     L17:
 11629  003B24  8A81               	bsf	3969,5,c	;volatile
 11630                           
 11631                           ;Lab9test.c: 599: }
 11632  003B26  D00E               	goto	l497
 11633  003B28                     l7431:
 11634  003B28  5044               	movf	Set_NSLT@color,w,c
 11635                           
 11636                           ; Switch size 1, requested type "space"
 11637                           ; Number of cases is 4, Range of values is 0 to 3
 11638                           ; switch strategies available:
 11639                           ; Name         Instructions Cycles
 11640                           ; simple_byte           13     7 (average)
 11641                           ;	Chosen strategy is simple_byte
 11642  003B2A  0A00               	xorlw	0	; case 0
 11643  003B2C  B4D8               	btfsc	status,2,c
 11644  003B2E  D7F2               	goto	l492
 11645  003B30  0A01               	xorlw	1	; case 1
 11646  003B32  B4D8               	btfsc	status,2,c
 11647  003B34  D7F1               	goto	l494
 11648  003B36  0A03               	xorlw	3	; case 2
 11649  003B38  B4D8               	btfsc	status,2,c
 11650  003B3A  D7F1               	goto	l495
 11651  003B3C  0A01               	xorlw	1	; case 3
 11652  003B3E  B4D8               	btfsc	status,2,c
 11653  003B40  D7F0               	goto	l496
 11654  003B42  D000               	goto	l497
 11655  003B44                     l497:
 11656  003B44  0012               	return		;funcret
 11657  003B46                     __end_of_Set_NSLT:
 11658                           	opt stack 0
 11659                           tblptru	equ	0xFF8
 11660                           tblptrh	equ	0xFF7
 11661                           tblptrl	equ	0xFF6
 11662                           tablat	equ	0xFF5
 11663                           prodh	equ	0xFF4
 11664                           prodl	equ	0xFF3
 11665                           intcon	equ	0xFF2
 11666                           intcon2	equ	0xFF1
 11667                           intcon3	equ	0xFF0
 11668                           postinc0	equ	0xFEE
 11669                           wreg	equ	0xFE8
 11670                           postdec1	equ	0xFE5
 11671                           fsr1l	equ	0xFE1
 11672                           indf2	equ	0xFDF
 11673                           postinc2	equ	0xFDE
 11674                           postdec2	equ	0xFDD
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679 ;; *************** function _Set_NS *****************
 11680 ;; Defined at:
 11681 ;;		line 576 in file "Lab9test.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;  color           1    wreg     unsigned char 
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  color           1   67[COMRAM] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;Total ram usage:        1 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    9
 11702 ;; This function calls:
 11703 ;;		_update_LCD_color
 11704 ;; This function is called by:
 11705 ;;		_Day_Mode
 11706 ;;		_Night_Mode
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text46
 11711  003B46                     __ptext46:
 11712                           	opt stack 0
 11713  003B46                     _Set_NS:
 11714                           	opt stack 20
 11715                           
 11716                           ;incstack = 0
 11717                           ;Set_NS@color stored from wreg
 11718  003B46  6E44               	movwf	Set_NS@color,c
 11719                           
 11720                           ;Lab9test.c: 578: direction = 2;
 11721  003B48  0E02               	movlw	2
 11722  003B4A  0100               	movlb	0	; () banked
 11723  003B4C  6F97               	movwf	_direction& (0+255),b
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;Lab9test.c: 579: update_LCD_color(direction, color);
 11727  003B4E  C044  F041         	movff	Set_NS@color,update_LCD_color@color
 11728  003B52  0100               	movlb	0	; () banked
 11729  003B54  5197               	movf	_direction& (0+255),w,b
 11730  003B56  ECDB  F00A         	call	_update_LCD_color
 11731                           
 11732                           ;Lab9test.c: 580: switch (color)
 11733  003B5A  D00A               	goto	l7455
 11734  003B5C                     l483:
 11735  003B5C  9280               	bcf	3968,1,c	;volatile
 11736  003B5E  D001               	goto	L18
 11737  003B60                     l485:
 11738  003B60  8280               	bsf	3968,1,c	;volatile
 11739  003B62                     L18:
 11740  003B62  9480               	bcf	3968,2,c	;volatile
 11741  003B64  D013               	goto	l488
 11742  003B66                     l486:
 11743  003B66  9280               	bcf	3968,1,c	;volatile
 11744  003B68  D001               	goto	L19
 11745  003B6A                     l487:
 11746  003B6A  8280               	bsf	3968,1,c	;volatile
 11747  003B6C                     L19:
 11748  003B6C  8480               	bsf	3968,2,c	;volatile
 11749                           
 11750                           ;Lab9test.c: 586: }
 11751  003B6E  D00E               	goto	l488
 11752  003B70                     l7455:
 11753  003B70  5044               	movf	Set_NS@color,w,c
 11754                           
 11755                           ; Switch size 1, requested type "space"
 11756                           ; Number of cases is 4, Range of values is 0 to 3
 11757                           ; switch strategies available:
 11758                           ; Name         Instructions Cycles
 11759                           ; simple_byte           13     7 (average)
 11760                           ;	Chosen strategy is simple_byte
 11761  003B72  0A00               	xorlw	0	; case 0
 11762  003B74  B4D8               	btfsc	status,2,c
 11763  003B76  D7F2               	goto	l483
 11764  003B78  0A01               	xorlw	1	; case 1
 11765  003B7A  B4D8               	btfsc	status,2,c
 11766  003B7C  D7F1               	goto	l485
 11767  003B7E  0A03               	xorlw	3	; case 2
 11768  003B80  B4D8               	btfsc	status,2,c
 11769  003B82  D7F1               	goto	l486
 11770  003B84  0A01               	xorlw	1	; case 3
 11771  003B86  B4D8               	btfsc	status,2,c
 11772  003B88  D7F0               	goto	l487
 11773  003B8A  D000               	goto	l488
 11774  003B8C                     l488:
 11775  003B8C  0012               	return		;funcret
 11776  003B8E                     __end_of_Set_NS:
 11777                           	opt stack 0
 11778                           tblptru	equ	0xFF8
 11779                           tblptrh	equ	0xFF7
 11780                           tblptrl	equ	0xFF6
 11781                           tablat	equ	0xFF5
 11782                           prodh	equ	0xFF4
 11783                           prodl	equ	0xFF3
 11784                           intcon	equ	0xFF2
 11785                           intcon2	equ	0xFF1
 11786                           intcon3	equ	0xFF0
 11787                           postinc0	equ	0xFEE
 11788                           wreg	equ	0xFE8
 11789                           postdec1	equ	0xFE5
 11790                           fsr1l	equ	0xFE1
 11791                           indf2	equ	0xFDF
 11792                           postinc2	equ	0xFDE
 11793                           postdec2	equ	0xFDD
 11794                           fsr2h	equ	0xFDA
 11795                           fsr2l	equ	0xFD9
 11796                           status	equ	0xFD8
 11797                           
 11798 ;; *************** function _Set_EWLT *****************
 11799 ;; Defined at:
 11800 ;;		line 615 in file "Lab9test.c"
 11801 ;; Parameters:    Size  Location     Type
 11802 ;;  color           1    wreg     unsigned char 
 11803 ;; Auto vars:     Size  Location     Type
 11804 ;;  color           1   67[COMRAM] unsigned char 
 11805 ;; Return value:  Size  Location     Type
 11806 ;;		None               void
 11807 ;; Registers used:
 11808 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11809 ;; Tracked objects:
 11810 ;;		On entry : 0/0
 11811 ;;		On exit  : 0/0
 11812 ;;		Unchanged: 0/0
 11813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11818 ;;Total ram usage:        1 bytes
 11819 ;; Hardware stack levels used:    1
 11820 ;; Hardware stack levels required when called:    9
 11821 ;; This function calls:
 11822 ;;		_update_LCD_color
 11823 ;; This function is called by:
 11824 ;;		_Day_Mode
 11825 ;;		_Night_Mode
 11826 ;; This function uses a non-reentrant model
 11827 ;;
 11828                           
 11829                           	psect	text47
 11830  003B8E                     __ptext47:
 11831                           	opt stack 0
 11832  003B8E                     _Set_EWLT:
 11833                           	opt stack 20
 11834                           
 11835                           ;incstack = 0
 11836                           ;Set_EWLT@color stored from wreg
 11837  003B8E  6E44               	movwf	Set_EWLT@color,c
 11838                           
 11839                           ;Lab9test.c: 617: direction = 1;
 11840  003B90  0E01               	movlw	1
 11841  003B92  0100               	movlb	0	; () banked
 11842  003B94  6F97               	movwf	_direction& (0+255),b
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;Lab9test.c: 618: update_LCD_color(direction, color);
 11846  003B96  C044  F041         	movff	Set_EWLT@color,update_LCD_color@color
 11847  003B9A  0100               	movlb	0	; () banked
 11848  003B9C  5197               	movf	_direction& (0+255),w,b
 11849  003B9E  ECDB  F00A         	call	_update_LCD_color
 11850                           
 11851                           ;Lab9test.c: 619: switch (color)
 11852  003BA2  D00A               	goto	l7447
 11853  003BA4                     l510:
 11854  003BA4  9284               	bcf	3972,1,c	;volatile
 11855  003BA6  D001               	goto	L20
 11856  003BA8                     l512:
 11857  003BA8  8284               	bsf	3972,1,c	;volatile
 11858  003BAA                     L20:
 11859  003BAA  9484               	bcf	3972,2,c	;volatile
 11860  003BAC  D013               	goto	l515
 11861  003BAE                     l513:
 11862  003BAE  9284               	bcf	3972,1,c	;volatile
 11863  003BB0  D001               	goto	L21
 11864  003BB2                     l514:
 11865  003BB2  8284               	bsf	3972,1,c	;volatile
 11866  003BB4                     L21:
 11867  003BB4  8484               	bsf	3972,2,c	;volatile
 11868                           
 11869                           ;Lab9test.c: 625: }
 11870  003BB6  D00E               	goto	l515
 11871  003BB8                     l7447:
 11872  003BB8  5044               	movf	Set_EWLT@color,w,c
 11873                           
 11874                           ; Switch size 1, requested type "space"
 11875                           ; Number of cases is 4, Range of values is 0 to 3
 11876                           ; switch strategies available:
 11877                           ; Name         Instructions Cycles
 11878                           ; simple_byte           13     7 (average)
 11879                           ;	Chosen strategy is simple_byte
 11880  003BBA  0A00               	xorlw	0	; case 0
 11881  003BBC  B4D8               	btfsc	status,2,c
 11882  003BBE  D7F2               	goto	l510
 11883  003BC0  0A01               	xorlw	1	; case 1
 11884  003BC2  B4D8               	btfsc	status,2,c
 11885  003BC4  D7F1               	goto	l512
 11886  003BC6  0A03               	xorlw	3	; case 2
 11887  003BC8  B4D8               	btfsc	status,2,c
 11888  003BCA  D7F1               	goto	l513
 11889  003BCC  0A01               	xorlw	1	; case 3
 11890  003BCE  B4D8               	btfsc	status,2,c
 11891  003BD0  D7F0               	goto	l514
 11892  003BD2  D000               	goto	l515
 11893  003BD4                     l515:
 11894  003BD4  0012               	return		;funcret
 11895  003BD6                     __end_of_Set_EWLT:
 11896                           	opt stack 0
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           intcon	equ	0xFF2
 11904                           intcon2	equ	0xFF1
 11905                           intcon3	equ	0xFF0
 11906                           postinc0	equ	0xFEE
 11907                           wreg	equ	0xFE8
 11908                           postdec1	equ	0xFE5
 11909                           fsr1l	equ	0xFE1
 11910                           indf2	equ	0xFDF
 11911                           postinc2	equ	0xFDE
 11912                           postdec2	equ	0xFDD
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _Set_EW *****************
 11918 ;; Defined at:
 11919 ;;		line 602 in file "Lab9test.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  color           1    wreg     unsigned char 
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  color           1   67[COMRAM] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;Total ram usage:        1 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    9
 11940 ;; This function calls:
 11941 ;;		_update_LCD_color
 11942 ;; This function is called by:
 11943 ;;		_Day_Mode
 11944 ;;		_Night_Mode
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text48
 11949  003BD6                     __ptext48:
 11950                           	opt stack 0
 11951  003BD6                     _Set_EW:
 11952                           	opt stack 20
 11953                           
 11954                           ;incstack = 0
 11955                           ;Set_EW@color stored from wreg
 11956  003BD6  6E44               	movwf	Set_EW@color,c
 11957                           
 11958                           ;Lab9test.c: 604: direction = 0;
 11959  003BD8  0E00               	movlw	0
 11960  003BDA  0100               	movlb	0	; () banked
 11961  003BDC  6F97               	movwf	_direction& (0+255),b
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;Lab9test.c: 605: update_LCD_color(direction, color);
 11965  003BDE  C044  F041         	movff	Set_EW@color,update_LCD_color@color
 11966  003BE2  0100               	movlb	0	; () banked
 11967  003BE4  5197               	movf	_direction& (0+255),w,b
 11968  003BE6  ECDB  F00A         	call	_update_LCD_color
 11969                           
 11970                           ;Lab9test.c: 606: switch (color)
 11971  003BEA  D00A               	goto	l7439
 11972  003BEC                     l501:
 11973  003BEC  9A80               	bcf	3968,5,c	;volatile
 11974  003BEE  D001               	goto	L22
 11975  003BF0                     l503:
 11976  003BF0  8A80               	bsf	3968,5,c	;volatile
 11977  003BF2                     L22:
 11978  003BF2  9C81               	bcf	3969,6,c	;volatile
 11979  003BF4  D013               	goto	l506
 11980  003BF6                     l504:
 11981  003BF6  9A80               	bcf	3968,5,c	;volatile
 11982  003BF8  D001               	goto	L23
 11983  003BFA                     l505:
 11984  003BFA  8A80               	bsf	3968,5,c	;volatile
 11985  003BFC                     L23:
 11986  003BFC  8C81               	bsf	3969,6,c	;volatile
 11987                           
 11988                           ;Lab9test.c: 612: }
 11989  003BFE  D00E               	goto	l506
 11990  003C00                     l7439:
 11991  003C00  5044               	movf	Set_EW@color,w,c
 11992                           
 11993                           ; Switch size 1, requested type "space"
 11994                           ; Number of cases is 4, Range of values is 0 to 3
 11995                           ; switch strategies available:
 11996                           ; Name         Instructions Cycles
 11997                           ; simple_byte           13     7 (average)
 11998                           ;	Chosen strategy is simple_byte
 11999  003C02  0A00               	xorlw	0	; case 0
 12000  003C04  B4D8               	btfsc	status,2,c
 12001  003C06  D7F2               	goto	l501
 12002  003C08  0A01               	xorlw	1	; case 1
 12003  003C0A  B4D8               	btfsc	status,2,c
 12004  003C0C  D7F1               	goto	l503
 12005  003C0E  0A03               	xorlw	3	; case 2
 12006  003C10  B4D8               	btfsc	status,2,c
 12007  003C12  D7F1               	goto	l504
 12008  003C14  0A01               	xorlw	1	; case 3
 12009  003C16  B4D8               	btfsc	status,2,c
 12010  003C18  D7F0               	goto	l505
 12011  003C1A  D000               	goto	l506
 12012  003C1C                     l506:
 12013  003C1C  0012               	return		;funcret
 12014  003C1E                     __end_of_Set_EW:
 12015                           	opt stack 0
 12016                           tblptru	equ	0xFF8
 12017                           tblptrh	equ	0xFF7
 12018                           tblptrl	equ	0xFF6
 12019                           tablat	equ	0xFF5
 12020                           prodh	equ	0xFF4
 12021                           prodl	equ	0xFF3
 12022                           intcon	equ	0xFF2
 12023                           intcon2	equ	0xFF1
 12024                           intcon3	equ	0xFF0
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           postdec1	equ	0xFE5
 12028                           fsr1l	equ	0xFE1
 12029                           indf2	equ	0xFDF
 12030                           postinc2	equ	0xFDE
 12031                           postdec2	equ	0xFDD
 12032                           fsr2h	equ	0xFDA
 12033                           fsr2l	equ	0xFD9
 12034                           status	equ	0xFD8
 12035                           
 12036 ;; *************** function _update_LCD_color *****************
 12037 ;; Defined at:
 12038 ;;		line 628 in file "Lab9test.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;  direction       1    wreg     unsigned char 
 12041 ;;  color           1   64[COMRAM] unsigned char 
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;  direction       1   65[COMRAM] unsigned char 
 12044 ;;  Circle_Y        1   66[COMRAM] unsigned char 
 12045 ;; Return value:  Size  Location     Type
 12046 ;;		None               void
 12047 ;; Registers used:
 12048 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12057 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;Total ram usage:        3 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    8
 12061 ;; This function calls:
 12062 ;;		_drawCircle
 12063 ;;		_fillCircle
 12064 ;; This function is called by:
 12065 ;;		_Set_NS
 12066 ;;		_Set_NSLT
 12067 ;;		_Set_EW
 12068 ;;		_Set_EWLT
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           	psect	text49
 12073  0015B6                     __ptext49:
 12074                           	opt stack 0
 12075  0015B6                     _update_LCD_color:
 12076                           	opt stack 20
 12077                           
 12078                           ;incstack = 0
 12079                           ;update_LCD_color@direction stored from wreg
 12080  0015B6  6E42               	movwf	update_LCD_color@direction,c
 12081                           
 12082                           ;Lab9test.c: 630: char Circle_Y;
 12083                           ;Lab9test.c: 631: Circle_Y = 20 + 15 + direction * 30;
 12084  0015B8  5042               	movf	update_LCD_color@direction,w,c
 12085  0015BA  0D1E               	mullw	30
 12086  0015BC  50F3               	movf	prodl,w,c
 12087  0015BE  0F23               	addlw	35
 12088  0015C0  6E43               	movwf	update_LCD_color@Circle_Y,c
 12089                           
 12090                           ;Lab9test.c: 633: if (color == 0)
 12091  0015C2  5041               	movf	update_LCD_color@color,w,c
 12092  0015C4  A4D8               	btfss	status,2,c
 12093  0015C6  D067               	goto	l7387
 12094                           
 12095                           ;Lab9test.c: 634: {
 12096                           ;Lab9test.c: 635: fillCircle(40, Circle_Y, 7, 0x0000);
 12097  0015C8  0E00               	movlw	0
 12098  0015CA  6E3A               	movwf	fillCircle@x0+1,c
 12099  0015CC  0E28               	movlw	40
 12100  0015CE  6E39               	movwf	fillCircle@x0,c
 12101  0015D0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12102  0015D4  6A3C               	clrf	fillCircle@y0+1,c
 12103  0015D6  0E00               	movlw	0
 12104  0015D8  6E3E               	movwf	fillCircle@r+1,c
 12105  0015DA  0E07               	movlw	7
 12106  0015DC  6E3D               	movwf	fillCircle@r,c
 12107  0015DE  0E00               	movlw	0
 12108  0015E0  6E40               	movwf	fillCircle@color+1,c
 12109  0015E2  0E00               	movlw	0
 12110  0015E4  6E3F               	movwf	fillCircle@color,c
 12111  0015E6  EC0A  F01D         	call	_fillCircle	;wreg free
 12112                           
 12113                           ;Lab9test.c: 636: fillCircle(60, Circle_Y, 7, 0x0000);
 12114  0015EA  0E00               	movlw	0
 12115  0015EC  6E3A               	movwf	fillCircle@x0+1,c
 12116  0015EE  0E3C               	movlw	60
 12117  0015F0  6E39               	movwf	fillCircle@x0,c
 12118  0015F2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12119  0015F6  6A3C               	clrf	fillCircle@y0+1,c
 12120  0015F8  0E00               	movlw	0
 12121  0015FA  6E3E               	movwf	fillCircle@r+1,c
 12122  0015FC  0E07               	movlw	7
 12123  0015FE  6E3D               	movwf	fillCircle@r,c
 12124  001600  0E00               	movlw	0
 12125  001602  6E40               	movwf	fillCircle@color+1,c
 12126  001604  0E00               	movlw	0
 12127  001606  6E3F               	movwf	fillCircle@color,c
 12128  001608  EC0A  F01D         	call	_fillCircle	;wreg free
 12129                           
 12130                           ;Lab9test.c: 637: fillCircle(80, Circle_Y, 7, 0x0000);
 12131  00160C  0E00               	movlw	0
 12132  00160E  6E3A               	movwf	fillCircle@x0+1,c
 12133  001610  0E50               	movlw	80
 12134  001612  6E39               	movwf	fillCircle@x0,c
 12135  001614  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12136  001618  6A3C               	clrf	fillCircle@y0+1,c
 12137  00161A  0E00               	movlw	0
 12138  00161C  6E3E               	movwf	fillCircle@r+1,c
 12139  00161E  0E07               	movlw	7
 12140  001620  6E3D               	movwf	fillCircle@r,c
 12141  001622  0E00               	movlw	0
 12142  001624  6E40               	movwf	fillCircle@color+1,c
 12143  001626  0E00               	movlw	0
 12144  001628  6E3F               	movwf	fillCircle@color,c
 12145  00162A  EC0A  F01D         	call	_fillCircle	;wreg free
 12146                           
 12147                           ;Lab9test.c: 638: drawCircle(40, Circle_Y, 7, 0xF800);
 12148  00162E  0E00               	movlw	0
 12149  001630  6E1B               	movwf	drawCircle@x0+1,c
 12150  001632  0E28               	movlw	40
 12151  001634  6E1A               	movwf	drawCircle@x0,c
 12152  001636  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12153  00163A  6A1D               	clrf	drawCircle@y0+1,c
 12154  00163C  0E00               	movlw	0
 12155  00163E  6E1F               	movwf	drawCircle@r+1,c
 12156  001640  0E07               	movlw	7
 12157  001642  6E1E               	movwf	drawCircle@r,c
 12158  001644  0EF8               	movlw	248
 12159  001646  6E21               	movwf	drawCircle@color+1,c
 12160  001648  0E00               	movlw	0
 12161  00164A  6E20               	movwf	drawCircle@color,c
 12162  00164C  ECE4  F00F         	call	_drawCircle	;wreg free
 12163                           
 12164                           ;Lab9test.c: 639: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12165  001650  0E00               	movlw	0
 12166  001652  6E1B               	movwf	drawCircle@x0+1,c
 12167  001654  0E3C               	movlw	60
 12168  001656  6E1A               	movwf	drawCircle@x0,c
 12169  001658  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12170  00165C  6A1D               	clrf	drawCircle@y0+1,c
 12171  00165E  0E00               	movlw	0
 12172  001660  6E1F               	movwf	drawCircle@r+1,c
 12173  001662  0E07               	movlw	7
 12174  001664  6E1E               	movwf	drawCircle@r,c
 12175  001666  0EFF               	movlw	255
 12176  001668  6E21               	movwf	drawCircle@color+1,c
 12177  00166A  0EE0               	movlw	224
 12178  00166C  6E20               	movwf	drawCircle@color,c
 12179  00166E  ECE4  F00F         	call	_drawCircle	;wreg free
 12180                           
 12181                           ;Lab9test.c: 640: drawCircle(80, Circle_Y, 7, 0x07E0);
 12182  001672  0E00               	movlw	0
 12183  001674  6E1B               	movwf	drawCircle@x0+1,c
 12184  001676  0E50               	movlw	80
 12185  001678  6E1A               	movwf	drawCircle@x0,c
 12186  00167A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12187  00167E  6A1D               	clrf	drawCircle@y0+1,c
 12188  001680  0E00               	movlw	0
 12189  001682  6E1F               	movwf	drawCircle@r+1,c
 12190  001684  0E07               	movlw	7
 12191  001686  6E1E               	movwf	drawCircle@r,c
 12192  001688  0E07               	movlw	7
 12193  00168A  6E21               	movwf	drawCircle@color+1,c
 12194  00168C  0EE0               	movlw	224
 12195  00168E  6E20               	movwf	drawCircle@color,c
 12196  001690  ECE4  F00F         	call	_drawCircle	;wreg free
 12197  001694  D000               	goto	l7387
 12198  001696                     l7387:
 12199                           
 12200                           ;Lab9test.c: 641: }
 12201                           ;Lab9test.c: 643: if (color == 1)
 12202  001696  0441               	decf	update_LCD_color@color,w,c
 12203  001698  A4D8               	btfss	status,2,c
 12204  00169A  D067               	goto	l7391
 12205                           
 12206                           ;Lab9test.c: 644: {
 12207                           ;Lab9test.c: 645: fillCircle(40, Circle_Y, 7, 0xF800);
 12208  00169C  0E00               	movlw	0
 12209  00169E  6E3A               	movwf	fillCircle@x0+1,c
 12210  0016A0  0E28               	movlw	40
 12211  0016A2  6E39               	movwf	fillCircle@x0,c
 12212  0016A4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12213  0016A8  6A3C               	clrf	fillCircle@y0+1,c
 12214  0016AA  0E00               	movlw	0
 12215  0016AC  6E3E               	movwf	fillCircle@r+1,c
 12216  0016AE  0E07               	movlw	7
 12217  0016B0  6E3D               	movwf	fillCircle@r,c
 12218  0016B2  0EF8               	movlw	248
 12219  0016B4  6E40               	movwf	fillCircle@color+1,c
 12220  0016B6  0E00               	movlw	0
 12221  0016B8  6E3F               	movwf	fillCircle@color,c
 12222  0016BA  EC0A  F01D         	call	_fillCircle	;wreg free
 12223                           
 12224                           ;Lab9test.c: 646: fillCircle(60, Circle_Y, 7, 0x0000);
 12225  0016BE  0E00               	movlw	0
 12226  0016C0  6E3A               	movwf	fillCircle@x0+1,c
 12227  0016C2  0E3C               	movlw	60
 12228  0016C4  6E39               	movwf	fillCircle@x0,c
 12229  0016C6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12230  0016CA  6A3C               	clrf	fillCircle@y0+1,c
 12231  0016CC  0E00               	movlw	0
 12232  0016CE  6E3E               	movwf	fillCircle@r+1,c
 12233  0016D0  0E07               	movlw	7
 12234  0016D2  6E3D               	movwf	fillCircle@r,c
 12235  0016D4  0E00               	movlw	0
 12236  0016D6  6E40               	movwf	fillCircle@color+1,c
 12237  0016D8  0E00               	movlw	0
 12238  0016DA  6E3F               	movwf	fillCircle@color,c
 12239  0016DC  EC0A  F01D         	call	_fillCircle	;wreg free
 12240                           
 12241                           ;Lab9test.c: 647: fillCircle(80, Circle_Y, 7, 0x0000);
 12242  0016E0  0E00               	movlw	0
 12243  0016E2  6E3A               	movwf	fillCircle@x0+1,c
 12244  0016E4  0E50               	movlw	80
 12245  0016E6  6E39               	movwf	fillCircle@x0,c
 12246  0016E8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12247  0016EC  6A3C               	clrf	fillCircle@y0+1,c
 12248  0016EE  0E00               	movlw	0
 12249  0016F0  6E3E               	movwf	fillCircle@r+1,c
 12250  0016F2  0E07               	movlw	7
 12251  0016F4  6E3D               	movwf	fillCircle@r,c
 12252  0016F6  0E00               	movlw	0
 12253  0016F8  6E40               	movwf	fillCircle@color+1,c
 12254  0016FA  0E00               	movlw	0
 12255  0016FC  6E3F               	movwf	fillCircle@color,c
 12256  0016FE  EC0A  F01D         	call	_fillCircle	;wreg free
 12257                           
 12258                           ;Lab9test.c: 648: drawCircle(40, Circle_Y, 7, 0xF800);
 12259  001702  0E00               	movlw	0
 12260  001704  6E1B               	movwf	drawCircle@x0+1,c
 12261  001706  0E28               	movlw	40
 12262  001708  6E1A               	movwf	drawCircle@x0,c
 12263  00170A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12264  00170E  6A1D               	clrf	drawCircle@y0+1,c
 12265  001710  0E00               	movlw	0
 12266  001712  6E1F               	movwf	drawCircle@r+1,c
 12267  001714  0E07               	movlw	7
 12268  001716  6E1E               	movwf	drawCircle@r,c
 12269  001718  0EF8               	movlw	248
 12270  00171A  6E21               	movwf	drawCircle@color+1,c
 12271  00171C  0E00               	movlw	0
 12272  00171E  6E20               	movwf	drawCircle@color,c
 12273  001720  ECE4  F00F         	call	_drawCircle	;wreg free
 12274                           
 12275                           ;Lab9test.c: 649: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12276  001724  0E00               	movlw	0
 12277  001726  6E1B               	movwf	drawCircle@x0+1,c
 12278  001728  0E3C               	movlw	60
 12279  00172A  6E1A               	movwf	drawCircle@x0,c
 12280  00172C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12281  001730  6A1D               	clrf	drawCircle@y0+1,c
 12282  001732  0E00               	movlw	0
 12283  001734  6E1F               	movwf	drawCircle@r+1,c
 12284  001736  0E07               	movlw	7
 12285  001738  6E1E               	movwf	drawCircle@r,c
 12286  00173A  0EFF               	movlw	255
 12287  00173C  6E21               	movwf	drawCircle@color+1,c
 12288  00173E  0EE0               	movlw	224
 12289  001740  6E20               	movwf	drawCircle@color,c
 12290  001742  ECE4  F00F         	call	_drawCircle	;wreg free
 12291                           
 12292                           ;Lab9test.c: 650: drawCircle(80, Circle_Y, 7, 0x07E0);
 12293  001746  0E00               	movlw	0
 12294  001748  6E1B               	movwf	drawCircle@x0+1,c
 12295  00174A  0E50               	movlw	80
 12296  00174C  6E1A               	movwf	drawCircle@x0,c
 12297  00174E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12298  001752  6A1D               	clrf	drawCircle@y0+1,c
 12299  001754  0E00               	movlw	0
 12300  001756  6E1F               	movwf	drawCircle@r+1,c
 12301  001758  0E07               	movlw	7
 12302  00175A  6E1E               	movwf	drawCircle@r,c
 12303  00175C  0E07               	movlw	7
 12304  00175E  6E21               	movwf	drawCircle@color+1,c
 12305  001760  0EE0               	movlw	224
 12306  001762  6E20               	movwf	drawCircle@color,c
 12307  001764  ECE4  F00F         	call	_drawCircle	;wreg free
 12308  001768  D000               	goto	l7391
 12309  00176A                     l7391:
 12310                           
 12311                           ;Lab9test.c: 651: }
 12312                           ;Lab9test.c: 653: if (color == 2)
 12313  00176A  0E02               	movlw	2
 12314  00176C  1841               	xorwf	update_LCD_color@color,w,c
 12315  00176E  A4D8               	btfss	status,2,c
 12316  001770  D067               	goto	l7395
 12317                           
 12318                           ;Lab9test.c: 654: {
 12319                           ;Lab9test.c: 655: fillCircle(40, Circle_Y, 7, 0x0000);
 12320  001772  0E00               	movlw	0
 12321  001774  6E3A               	movwf	fillCircle@x0+1,c
 12322  001776  0E28               	movlw	40
 12323  001778  6E39               	movwf	fillCircle@x0,c
 12324  00177A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12325  00177E  6A3C               	clrf	fillCircle@y0+1,c
 12326  001780  0E00               	movlw	0
 12327  001782  6E3E               	movwf	fillCircle@r+1,c
 12328  001784  0E07               	movlw	7
 12329  001786  6E3D               	movwf	fillCircle@r,c
 12330  001788  0E00               	movlw	0
 12331  00178A  6E40               	movwf	fillCircle@color+1,c
 12332  00178C  0E00               	movlw	0
 12333  00178E  6E3F               	movwf	fillCircle@color,c
 12334  001790  EC0A  F01D         	call	_fillCircle	;wreg free
 12335                           
 12336                           ;Lab9test.c: 656: fillCircle(60, Circle_Y, 7, 0x0000);
 12337  001794  0E00               	movlw	0
 12338  001796  6E3A               	movwf	fillCircle@x0+1,c
 12339  001798  0E3C               	movlw	60
 12340  00179A  6E39               	movwf	fillCircle@x0,c
 12341  00179C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12342  0017A0  6A3C               	clrf	fillCircle@y0+1,c
 12343  0017A2  0E00               	movlw	0
 12344  0017A4  6E3E               	movwf	fillCircle@r+1,c
 12345  0017A6  0E07               	movlw	7
 12346  0017A8  6E3D               	movwf	fillCircle@r,c
 12347  0017AA  0E00               	movlw	0
 12348  0017AC  6E40               	movwf	fillCircle@color+1,c
 12349  0017AE  0E00               	movlw	0
 12350  0017B0  6E3F               	movwf	fillCircle@color,c
 12351  0017B2  EC0A  F01D         	call	_fillCircle	;wreg free
 12352                           
 12353                           ;Lab9test.c: 657: fillCircle(80, Circle_Y, 7, 0x07E0);
 12354  0017B6  0E00               	movlw	0
 12355  0017B8  6E3A               	movwf	fillCircle@x0+1,c
 12356  0017BA  0E50               	movlw	80
 12357  0017BC  6E39               	movwf	fillCircle@x0,c
 12358  0017BE  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12359  0017C2  6A3C               	clrf	fillCircle@y0+1,c
 12360  0017C4  0E00               	movlw	0
 12361  0017C6  6E3E               	movwf	fillCircle@r+1,c
 12362  0017C8  0E07               	movlw	7
 12363  0017CA  6E3D               	movwf	fillCircle@r,c
 12364  0017CC  0E07               	movlw	7
 12365  0017CE  6E40               	movwf	fillCircle@color+1,c
 12366  0017D0  0EE0               	movlw	224
 12367  0017D2  6E3F               	movwf	fillCircle@color,c
 12368  0017D4  EC0A  F01D         	call	_fillCircle	;wreg free
 12369                           
 12370                           ;Lab9test.c: 658: drawCircle(40, Circle_Y, 7, 0xF800);
 12371  0017D8  0E00               	movlw	0
 12372  0017DA  6E1B               	movwf	drawCircle@x0+1,c
 12373  0017DC  0E28               	movlw	40
 12374  0017DE  6E1A               	movwf	drawCircle@x0,c
 12375  0017E0  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12376  0017E4  6A1D               	clrf	drawCircle@y0+1,c
 12377  0017E6  0E00               	movlw	0
 12378  0017E8  6E1F               	movwf	drawCircle@r+1,c
 12379  0017EA  0E07               	movlw	7
 12380  0017EC  6E1E               	movwf	drawCircle@r,c
 12381  0017EE  0EF8               	movlw	248
 12382  0017F0  6E21               	movwf	drawCircle@color+1,c
 12383  0017F2  0E00               	movlw	0
 12384  0017F4  6E20               	movwf	drawCircle@color,c
 12385  0017F6  ECE4  F00F         	call	_drawCircle	;wreg free
 12386                           
 12387                           ;Lab9test.c: 659: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12388  0017FA  0E00               	movlw	0
 12389  0017FC  6E1B               	movwf	drawCircle@x0+1,c
 12390  0017FE  0E3C               	movlw	60
 12391  001800  6E1A               	movwf	drawCircle@x0,c
 12392  001802  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12393  001806  6A1D               	clrf	drawCircle@y0+1,c
 12394  001808  0E00               	movlw	0
 12395  00180A  6E1F               	movwf	drawCircle@r+1,c
 12396  00180C  0E07               	movlw	7
 12397  00180E  6E1E               	movwf	drawCircle@r,c
 12398  001810  0EFF               	movlw	255
 12399  001812  6E21               	movwf	drawCircle@color+1,c
 12400  001814  0EE0               	movlw	224
 12401  001816  6E20               	movwf	drawCircle@color,c
 12402  001818  ECE4  F00F         	call	_drawCircle	;wreg free
 12403                           
 12404                           ;Lab9test.c: 660: drawCircle(80, Circle_Y, 7, 0x07E0);
 12405  00181C  0E00               	movlw	0
 12406  00181E  6E1B               	movwf	drawCircle@x0+1,c
 12407  001820  0E50               	movlw	80
 12408  001822  6E1A               	movwf	drawCircle@x0,c
 12409  001824  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12410  001828  6A1D               	clrf	drawCircle@y0+1,c
 12411  00182A  0E00               	movlw	0
 12412  00182C  6E1F               	movwf	drawCircle@r+1,c
 12413  00182E  0E07               	movlw	7
 12414  001830  6E1E               	movwf	drawCircle@r,c
 12415  001832  0E07               	movlw	7
 12416  001834  6E21               	movwf	drawCircle@color+1,c
 12417  001836  0EE0               	movlw	224
 12418  001838  6E20               	movwf	drawCircle@color,c
 12419  00183A  ECE4  F00F         	call	_drawCircle	;wreg free
 12420  00183E  D000               	goto	l7395
 12421  001840                     l7395:
 12422                           
 12423                           ;Lab9test.c: 661: }
 12424                           ;Lab9test.c: 663: if (color == 3)
 12425  001840  0E03               	movlw	3
 12426  001842  1841               	xorwf	update_LCD_color@color,w,c
 12427  001844  A4D8               	btfss	status,2,c
 12428  001846  D067               	goto	l522
 12429                           
 12430                           ;Lab9test.c: 664: {
 12431                           ;Lab9test.c: 665: fillCircle(40, Circle_Y, 7, 0x0000);
 12432  001848  0E00               	movlw	0
 12433  00184A  6E3A               	movwf	fillCircle@x0+1,c
 12434  00184C  0E28               	movlw	40
 12435  00184E  6E39               	movwf	fillCircle@x0,c
 12436  001850  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12437  001854  6A3C               	clrf	fillCircle@y0+1,c
 12438  001856  0E00               	movlw	0
 12439  001858  6E3E               	movwf	fillCircle@r+1,c
 12440  00185A  0E07               	movlw	7
 12441  00185C  6E3D               	movwf	fillCircle@r,c
 12442  00185E  0E00               	movlw	0
 12443  001860  6E40               	movwf	fillCircle@color+1,c
 12444  001862  0E00               	movlw	0
 12445  001864  6E3F               	movwf	fillCircle@color,c
 12446  001866  EC0A  F01D         	call	_fillCircle	;wreg free
 12447                           
 12448                           ;Lab9test.c: 666: fillCircle(60, Circle_Y, 7, 0xFFE0);
 12449  00186A  0E00               	movlw	0
 12450  00186C  6E3A               	movwf	fillCircle@x0+1,c
 12451  00186E  0E3C               	movlw	60
 12452  001870  6E39               	movwf	fillCircle@x0,c
 12453  001872  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12454  001876  6A3C               	clrf	fillCircle@y0+1,c
 12455  001878  0E00               	movlw	0
 12456  00187A  6E3E               	movwf	fillCircle@r+1,c
 12457  00187C  0E07               	movlw	7
 12458  00187E  6E3D               	movwf	fillCircle@r,c
 12459  001880  0EFF               	movlw	255
 12460  001882  6E40               	movwf	fillCircle@color+1,c
 12461  001884  0EE0               	movlw	224
 12462  001886  6E3F               	movwf	fillCircle@color,c
 12463  001888  EC0A  F01D         	call	_fillCircle	;wreg free
 12464                           
 12465                           ;Lab9test.c: 667: fillCircle(80, Circle_Y, 7, 0x0000);
 12466  00188C  0E00               	movlw	0
 12467  00188E  6E3A               	movwf	fillCircle@x0+1,c
 12468  001890  0E50               	movlw	80
 12469  001892  6E39               	movwf	fillCircle@x0,c
 12470  001894  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12471  001898  6A3C               	clrf	fillCircle@y0+1,c
 12472  00189A  0E00               	movlw	0
 12473  00189C  6E3E               	movwf	fillCircle@r+1,c
 12474  00189E  0E07               	movlw	7
 12475  0018A0  6E3D               	movwf	fillCircle@r,c
 12476  0018A2  0E00               	movlw	0
 12477  0018A4  6E40               	movwf	fillCircle@color+1,c
 12478  0018A6  0E00               	movlw	0
 12479  0018A8  6E3F               	movwf	fillCircle@color,c
 12480  0018AA  EC0A  F01D         	call	_fillCircle	;wreg free
 12481                           
 12482                           ;Lab9test.c: 668: drawCircle(40, Circle_Y, 7, 0xF800);
 12483  0018AE  0E00               	movlw	0
 12484  0018B0  6E1B               	movwf	drawCircle@x0+1,c
 12485  0018B2  0E28               	movlw	40
 12486  0018B4  6E1A               	movwf	drawCircle@x0,c
 12487  0018B6  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12488  0018BA  6A1D               	clrf	drawCircle@y0+1,c
 12489  0018BC  0E00               	movlw	0
 12490  0018BE  6E1F               	movwf	drawCircle@r+1,c
 12491  0018C0  0E07               	movlw	7
 12492  0018C2  6E1E               	movwf	drawCircle@r,c
 12493  0018C4  0EF8               	movlw	248
 12494  0018C6  6E21               	movwf	drawCircle@color+1,c
 12495  0018C8  0E00               	movlw	0
 12496  0018CA  6E20               	movwf	drawCircle@color,c
 12497  0018CC  ECE4  F00F         	call	_drawCircle	;wreg free
 12498                           
 12499                           ;Lab9test.c: 669: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12500  0018D0  0E00               	movlw	0
 12501  0018D2  6E1B               	movwf	drawCircle@x0+1,c
 12502  0018D4  0E3C               	movlw	60
 12503  0018D6  6E1A               	movwf	drawCircle@x0,c
 12504  0018D8  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12505  0018DC  6A1D               	clrf	drawCircle@y0+1,c
 12506  0018DE  0E00               	movlw	0
 12507  0018E0  6E1F               	movwf	drawCircle@r+1,c
 12508  0018E2  0E07               	movlw	7
 12509  0018E4  6E1E               	movwf	drawCircle@r,c
 12510  0018E6  0EFF               	movlw	255
 12511  0018E8  6E21               	movwf	drawCircle@color+1,c
 12512  0018EA  0EE0               	movlw	224
 12513  0018EC  6E20               	movwf	drawCircle@color,c
 12514  0018EE  ECE4  F00F         	call	_drawCircle	;wreg free
 12515                           
 12516                           ;Lab9test.c: 670: drawCircle(80, Circle_Y, 7, 0x07E0);
 12517  0018F2  0E00               	movlw	0
 12518  0018F4  6E1B               	movwf	drawCircle@x0+1,c
 12519  0018F6  0E50               	movlw	80
 12520  0018F8  6E1A               	movwf	drawCircle@x0,c
 12521  0018FA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12522  0018FE  6A1D               	clrf	drawCircle@y0+1,c
 12523  001900  0E00               	movlw	0
 12524  001902  6E1F               	movwf	drawCircle@r+1,c
 12525  001904  0E07               	movlw	7
 12526  001906  6E1E               	movwf	drawCircle@r,c
 12527  001908  0E07               	movlw	7
 12528  00190A  6E21               	movwf	drawCircle@color+1,c
 12529  00190C  0EE0               	movlw	224
 12530  00190E  6E20               	movwf	drawCircle@color,c
 12531  001910  ECE4  F00F         	call	_drawCircle	;wreg free
 12532  001914  D000               	goto	l522
 12533  001916                     l522:
 12534  001916  0012               	return		;funcret
 12535  001918                     __end_of_update_LCD_color:
 12536                           	opt stack 0
 12537                           tblptru	equ	0xFF8
 12538                           tblptrh	equ	0xFF7
 12539                           tblptrl	equ	0xFF6
 12540                           tablat	equ	0xFF5
 12541                           prodh	equ	0xFF4
 12542                           prodl	equ	0xFF3
 12543                           intcon	equ	0xFF2
 12544                           intcon2	equ	0xFF1
 12545                           intcon3	equ	0xFF0
 12546                           postinc0	equ	0xFEE
 12547                           wreg	equ	0xFE8
 12548                           postdec1	equ	0xFE5
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _fillCircle *****************
 12558 ;; Defined at:
 12559 ;;		line 647 in file "ST7735_TFT.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;  x0              2   56[COMRAM] int 
 12562 ;;  y0              2   58[COMRAM] int 
 12563 ;;  r               2   60[COMRAM] int 
 12564 ;;  color           2   62[COMRAM] unsigned int 
 12565 ;; Auto vars:     Size  Location     Type
 12566 ;;		None
 12567 ;; Return value:  Size  Location     Type
 12568 ;;		None               void
 12569 ;; Registers used:
 12570 ;;		wreg, status,2, status,0, cstack
 12571 ;; Tracked objects:
 12572 ;;		On entry : 0/0
 12573 ;;		On exit  : 0/0
 12574 ;;		Unchanged: 0/0
 12575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12576 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12579 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;Total ram usage:        8 bytes
 12581 ;; Hardware stack levels used:    1
 12582 ;; Hardware stack levels required when called:    7
 12583 ;; This function calls:
 12584 ;;		_drawFastVLine
 12585 ;;		_fillCircleHelper
 12586 ;; This function is called by:
 12587 ;;		_Initialize_Screen
 12588 ;;		_update_LCD_color
 12589 ;; This function uses a non-reentrant model
 12590 ;;
 12591                           
 12592                           	psect	text50
 12593  003A14                     __ptext50:
 12594                           	opt stack 0
 12595  003A14                     _fillCircle:
 12596                           	opt stack 20
 12597                           
 12598                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 12599                           
 12600                           ;incstack = 0
 12601  003A14  503D               	movf	fillCircle@r,w,c
 12602  003A16  0800               	sublw	0
 12603  003A18  243B               	addwf	fillCircle@y0,w,c
 12604  003A1A  6E16               	movwf	drawFastVLine@y,c
 12605  003A1C  80D8               	bsf	status,0,c
 12606  003A1E  343D               	rlcf	fillCircle@r,w,c
 12607  003A20  6E17               	movwf	drawFastVLine@h,c
 12608  003A22  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
 12609  003A26  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
 12610  003A2A  5039               	movf	fillCircle@x0,w,c
 12611  003A2C  EC3D  F01A         	call	_drawFastVLine
 12612                           
 12613                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 12614  003A30  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
 12615  003A34  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 12616  003A38  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
 12617  003A3C  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 12618  003A40  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
 12619  003A44  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
 12620  003A48  0E00               	movlw	0
 12621  003A4A  6E28               	movwf	fillCircleHelper@cornername+1,c
 12622  003A4C  0E03               	movlw	3
 12623  003A4E  6E27               	movwf	fillCircleHelper@cornername,c
 12624  003A50  0E00               	movlw	0
 12625  003A52  6E2A               	movwf	fillCircleHelper@delta+1,c
 12626  003A54  0E00               	movlw	0
 12627  003A56  6E29               	movwf	fillCircleHelper@delta,c
 12628  003A58  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
 12629  003A5C  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
 12630  003A60  EC3B  F012         	call	_fillCircleHelper	;wreg free
 12631  003A64  0012               	return		;funcret
 12632  003A66                     __end_of_fillCircle:
 12633                           	opt stack 0
 12634                           tblptru	equ	0xFF8
 12635                           tblptrh	equ	0xFF7
 12636                           tblptrl	equ	0xFF6
 12637                           tablat	equ	0xFF5
 12638                           prodh	equ	0xFF4
 12639                           prodl	equ	0xFF3
 12640                           intcon	equ	0xFF2
 12641                           intcon2	equ	0xFF1
 12642                           intcon3	equ	0xFF0
 12643                           postinc0	equ	0xFEE
 12644                           wreg	equ	0xFE8
 12645                           postdec1	equ	0xFE5
 12646                           fsr1l	equ	0xFE1
 12647                           indf2	equ	0xFDF
 12648                           postinc2	equ	0xFDE
 12649                           postdec2	equ	0xFDD
 12650                           fsr2h	equ	0xFDA
 12651                           fsr2l	equ	0xFD9
 12652                           status	equ	0xFD8
 12653                           
 12654 ;; *************** function _fillCircleHelper *****************
 12655 ;; Defined at:
 12656 ;;		line 622 in file "ST7735_TFT.c"
 12657 ;; Parameters:    Size  Location     Type
 12658 ;;  x0              2   32[COMRAM] int 
 12659 ;;  y0              2   34[COMRAM] int 
 12660 ;;  r               2   36[COMRAM] int 
 12661 ;;  cornername      2   38[COMRAM] unsigned int 
 12662 ;;  delta           2   40[COMRAM] int 
 12663 ;;  color           2   42[COMRAM] unsigned int 
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;  y               2   54[COMRAM] int 
 12666 ;;  x               2   52[COMRAM] int 
 12667 ;;  f               2   50[COMRAM] int 
 12668 ;;  ddF_y           2   48[COMRAM] int 
 12669 ;;  ddF_x           2   46[COMRAM] int 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg, status,2, status,0, cstack
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12679 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12680 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12682 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12683 ;;Total ram usage:       24 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    6
 12686 ;; This function calls:
 12687 ;;		_drawFastVLine
 12688 ;; This function is called by:
 12689 ;;		_fillCircle
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           	psect	text51
 12694  002476                     __ptext51:
 12695                           	opt stack 0
 12696  002476                     _fillCircleHelper:
 12697                           	opt stack 20
 12698                           
 12699                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 12700                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12701                           
 12702                           ;incstack = 0
 12703  002476  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12704  00247A  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12705  00247E  1E2D               	comf	??_fillCircleHelper,f,c
 12706  002480  1E2E               	comf	??_fillCircleHelper+1,f,c
 12707  002482  4A2D               	infsnz	??_fillCircleHelper,f,c
 12708  002484  2A2E               	incf	??_fillCircleHelper+1,f,c
 12709  002486  0E01               	movlw	1
 12710  002488  242D               	addwf	??_fillCircleHelper,w,c
 12711  00248A  6E33               	movwf	fillCircleHelper@f,c
 12712  00248C  0E00               	movlw	0
 12713  00248E  202E               	addwfc	??_fillCircleHelper+1,w,c
 12714  002490  6E34               	movwf	fillCircleHelper@f+1,c
 12715  002492  0E00               	movlw	0
 12716  002494  6E30               	movwf	fillCircleHelper@ddF_x+1,c
 12717  002496  0E01               	movlw	1
 12718  002498  6E2F               	movwf	fillCircleHelper@ddF_x,c
 12719  00249A  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12720  00249E  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12721  0024A2  90D8               	bcf	status,0,c
 12722  0024A4  362D               	rlcf	??_fillCircleHelper,f,c
 12723  0024A6  362E               	rlcf	??_fillCircleHelper+1,f,c
 12724  0024A8  1E2D               	comf	??_fillCircleHelper,f,c
 12725  0024AA  1E2E               	comf	??_fillCircleHelper+1,f,c
 12726  0024AC  4A2D               	infsnz	??_fillCircleHelper,f,c
 12727  0024AE  2A2E               	incf	??_fillCircleHelper+1,f,c
 12728  0024B0  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 12729  0024B4  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 12730  0024B8  0E00               	movlw	0
 12731  0024BA  6E36               	movwf	fillCircleHelper@x+1,c
 12732  0024BC  0E00               	movlw	0
 12733  0024BE  6E35               	movwf	fillCircleHelper@x,c
 12734  0024C0  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
 12735  0024C4  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 12736                           
 12737                           ;ST7735_TFT.c: 626: while (x<y) {
 12738  0024C8  D067               	goto	l6637
 12739  0024CA                     l6617:
 12740                           
 12741                           ;ST7735_TFT.c: 627: if (f >= 0) {
 12742  0024CA  BE34               	btfsc	fillCircleHelper@f+1,7,c
 12743  0024CC  D00B               	goto	l293
 12744                           
 12745                           ;ST7735_TFT.c: 628: y--;
 12746  0024CE  0637               	decf	fillCircleHelper@y,f,c
 12747  0024D0  A0D8               	btfss	status,0,c
 12748  0024D2  0638               	decf	fillCircleHelper@y+1,f,c
 12749                           
 12750                           ;ST7735_TFT.c: 629: ddF_y += 2;
 12751  0024D4  0E02               	movlw	2
 12752  0024D6  2631               	addwf	fillCircleHelper@ddF_y,f,c
 12753  0024D8  0E00               	movlw	0
 12754  0024DA  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
 12755                           
 12756                           ;ST7735_TFT.c: 630: f += ddF_y;
 12757  0024DC  5031               	movf	fillCircleHelper@ddF_y,w,c
 12758  0024DE  2633               	addwf	fillCircleHelper@f,f,c
 12759  0024E0  5032               	movf	fillCircleHelper@ddF_y+1,w,c
 12760  0024E2  2234               	addwfc	fillCircleHelper@f+1,f,c
 12761  0024E4                     l293:
 12762                           
 12763                           ;ST7735_TFT.c: 631: }
 12764                           ;ST7735_TFT.c: 632: x++;
 12765  0024E4  4A35               	infsnz	fillCircleHelper@x,f,c
 12766  0024E6  2A36               	incf	fillCircleHelper@x+1,f,c
 12767                           
 12768                           ;ST7735_TFT.c: 633: ddF_x += 2;
 12769  0024E8  0E02               	movlw	2
 12770  0024EA  262F               	addwf	fillCircleHelper@ddF_x,f,c
 12771  0024EC  0E00               	movlw	0
 12772  0024EE  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
 12773                           
 12774                           ;ST7735_TFT.c: 634: f += ddF_x;
 12775  0024F0  502F               	movf	fillCircleHelper@ddF_x,w,c
 12776  0024F2  2633               	addwf	fillCircleHelper@f,f,c
 12777  0024F4  5030               	movf	fillCircleHelper@ddF_x+1,w,c
 12778  0024F6  2234               	addwfc	fillCircleHelper@f+1,f,c
 12779                           
 12780                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 12781  0024F8  A027               	btfss	fillCircleHelper@cornername,0,c
 12782  0024FA  D025               	goto	l6633
 12783                           
 12784                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 12785  0024FC  5037               	movf	fillCircleHelper@y,w,c
 12786  0024FE  0800               	sublw	0
 12787  002500  2423               	addwf	fillCircleHelper@y0,w,c
 12788  002502  6E16               	movwf	drawFastVLine@y,c
 12789  002504  5037               	movf	fillCircleHelper@y,w,c
 12790  002506  2437               	addwf	fillCircleHelper@y,w,c
 12791  002508  2429               	addwf	fillCircleHelper@delta,w,c
 12792  00250A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12793  00250C  282D               	incf	??_fillCircleHelper,w,c
 12794  00250E  6E17               	movwf	drawFastVLine@h,c
 12795  002510  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12796  002514  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12797  002518  5021               	movf	fillCircleHelper@x0,w,c
 12798  00251A  2435               	addwf	fillCircleHelper@x,w,c
 12799  00251C  EC3D  F01A         	call	_drawFastVLine
 12800                           
 12801                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 12802  002520  5035               	movf	fillCircleHelper@x,w,c
 12803  002522  0800               	sublw	0
 12804  002524  2423               	addwf	fillCircleHelper@y0,w,c
 12805  002526  6E16               	movwf	drawFastVLine@y,c
 12806  002528  5035               	movf	fillCircleHelper@x,w,c
 12807  00252A  2435               	addwf	fillCircleHelper@x,w,c
 12808  00252C  2429               	addwf	fillCircleHelper@delta,w,c
 12809  00252E  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12810  002530  282D               	incf	??_fillCircleHelper,w,c
 12811  002532  6E17               	movwf	drawFastVLine@h,c
 12812  002534  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12813  002538  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12814  00253C  5021               	movf	fillCircleHelper@x0,w,c
 12815  00253E  2437               	addwf	fillCircleHelper@y,w,c
 12816  002540  EC3D  F01A         	call	_drawFastVLine
 12817  002544  D000               	goto	l6633
 12818  002546                     l6633:
 12819                           
 12820                           ;ST7735_TFT.c: 639: }
 12821                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 12822  002546  A227               	btfss	fillCircleHelper@cornername,1,c
 12823  002548  D027               	goto	l6637
 12824                           
 12825                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 12826  00254A  5037               	movf	fillCircleHelper@y,w,c
 12827  00254C  0800               	sublw	0
 12828  00254E  2423               	addwf	fillCircleHelper@y0,w,c
 12829  002550  6E16               	movwf	drawFastVLine@y,c
 12830  002552  5037               	movf	fillCircleHelper@y,w,c
 12831  002554  2437               	addwf	fillCircleHelper@y,w,c
 12832  002556  2429               	addwf	fillCircleHelper@delta,w,c
 12833  002558  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12834  00255A  282D               	incf	??_fillCircleHelper,w,c
 12835  00255C  6E17               	movwf	drawFastVLine@h,c
 12836  00255E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12837  002562  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12838  002566  5035               	movf	fillCircleHelper@x,w,c
 12839  002568  0800               	sublw	0
 12840  00256A  2421               	addwf	fillCircleHelper@x0,w,c
 12841  00256C  EC3D  F01A         	call	_drawFastVLine
 12842                           
 12843                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 12844  002570  5035               	movf	fillCircleHelper@x,w,c
 12845  002572  0800               	sublw	0
 12846  002574  2423               	addwf	fillCircleHelper@y0,w,c
 12847  002576  6E16               	movwf	drawFastVLine@y,c
 12848  002578  5035               	movf	fillCircleHelper@x,w,c
 12849  00257A  2435               	addwf	fillCircleHelper@x,w,c
 12850  00257C  2429               	addwf	fillCircleHelper@delta,w,c
 12851  00257E  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12852  002580  282D               	incf	??_fillCircleHelper,w,c
 12853  002582  6E17               	movwf	drawFastVLine@h,c
 12854  002584  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12855  002588  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12856  00258C  5037               	movf	fillCircleHelper@y,w,c
 12857  00258E  0800               	sublw	0
 12858  002590  2421               	addwf	fillCircleHelper@x0,w,c
 12859  002592  EC3D  F01A         	call	_drawFastVLine
 12860  002596  D000               	goto	l6637
 12861  002598                     l6637:
 12862  002598  5037               	movf	fillCircleHelper@y,w,c
 12863  00259A  5C35               	subwf	fillCircleHelper@x,w,c
 12864  00259C  5036               	movf	fillCircleHelper@x+1,w,c
 12865  00259E  0A80               	xorlw	128
 12866  0025A0  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12867  0025A2  5038               	movf	fillCircleHelper@y+1,w,c
 12868  0025A4  0A80               	xorlw	128
 12869  0025A6  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
 12870  0025A8  A0D8               	btfss	status,0,c
 12871  0025AA  D78F               	goto	l6617
 12872  0025AC  0012               	return		;funcret
 12873  0025AE                     __end_of_fillCircleHelper:
 12874                           	opt stack 0
 12875                           tblptru	equ	0xFF8
 12876                           tblptrh	equ	0xFF7
 12877                           tblptrl	equ	0xFF6
 12878                           tablat	equ	0xFF5
 12879                           prodh	equ	0xFF4
 12880                           prodl	equ	0xFF3
 12881                           intcon	equ	0xFF2
 12882                           intcon2	equ	0xFF1
 12883                           intcon3	equ	0xFF0
 12884                           postinc0	equ	0xFEE
 12885                           wreg	equ	0xFE8
 12886                           postdec1	equ	0xFE5
 12887                           fsr1l	equ	0xFE1
 12888                           indf2	equ	0xFDF
 12889                           postinc2	equ	0xFDE
 12890                           postdec2	equ	0xFDD
 12891                           fsr2h	equ	0xFDA
 12892                           fsr2l	equ	0xFD9
 12893                           status	equ	0xFD8
 12894                           
 12895 ;; *************** function _drawCircle *****************
 12896 ;; Defined at:
 12897 ;;		line 561 in file "ST7735_TFT.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;  x0              2   25[COMRAM] int 
 12900 ;;  y0              2   27[COMRAM] int 
 12901 ;;  r               2   29[COMRAM] int 
 12902 ;;  color           2   31[COMRAM] unsigned int 
 12903 ;; Auto vars:     Size  Location     Type
 12904 ;;  y               2   43[COMRAM] int 
 12905 ;;  x               2   41[COMRAM] int 
 12906 ;;  f               2   39[COMRAM] int 
 12907 ;;  ddF_y           2   37[COMRAM] int 
 12908 ;;  ddF_x           2   35[COMRAM] int 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;		None               void
 12911 ;; Registers used:
 12912 ;;		wreg, status,2, status,0, cstack
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12918 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12921 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12922 ;;Total ram usage:       20 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; Hardware stack levels required when called:    6
 12925 ;; This function calls:
 12926 ;;		_drawPixel
 12927 ;; This function is called by:
 12928 ;;		_Initialize_Screen
 12929 ;;		_update_LCD_color
 12930 ;; This function uses a non-reentrant model
 12931 ;;
 12932                           
 12933                           	psect	text52
 12934  001FC8                     __ptext52:
 12935                           	opt stack 0
 12936  001FC8                     _drawCircle:
 12937                           	opt stack 21
 12938                           
 12939                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12940                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12941                           
 12942                           ;incstack = 0
 12943  001FC8  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12944  001FCC  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12945  001FD0  1E22               	comf	??_drawCircle,f,c
 12946  001FD2  1E23               	comf	??_drawCircle+1,f,c
 12947  001FD4  4A22               	infsnz	??_drawCircle,f,c
 12948  001FD6  2A23               	incf	??_drawCircle+1,f,c
 12949  001FD8  0E01               	movlw	1
 12950  001FDA  2422               	addwf	??_drawCircle,w,c
 12951  001FDC  6E28               	movwf	drawCircle@f,c
 12952  001FDE  0E00               	movlw	0
 12953  001FE0  2023               	addwfc	??_drawCircle+1,w,c
 12954  001FE2  6E29               	movwf	drawCircle@f+1,c
 12955  001FE4  0E00               	movlw	0
 12956  001FE6  6E25               	movwf	drawCircle@ddF_x+1,c
 12957  001FE8  0E01               	movlw	1
 12958  001FEA  6E24               	movwf	drawCircle@ddF_x,c
 12959  001FEC  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12960  001FF0  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12961  001FF4  90D8               	bcf	status,0,c
 12962  001FF6  3622               	rlcf	??_drawCircle,f,c
 12963  001FF8  3623               	rlcf	??_drawCircle+1,f,c
 12964  001FFA  1E22               	comf	??_drawCircle,f,c
 12965  001FFC  1E23               	comf	??_drawCircle+1,f,c
 12966  001FFE  4A22               	infsnz	??_drawCircle,f,c
 12967  002000  2A23               	incf	??_drawCircle+1,f,c
 12968  002002  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
 12969  002006  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12970  00200A  0E00               	movlw	0
 12971  00200C  6E2B               	movwf	drawCircle@x+1,c
 12972  00200E  0E00               	movlw	0
 12973  002010  6E2A               	movwf	drawCircle@x,c
 12974  002012  C01E  F02C         	movff	drawCircle@r,drawCircle@y
 12975  002016  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
 12976                           
 12977                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12978  00201A  501C               	movf	drawCircle@y0,w,c
 12979  00201C  241E               	addwf	drawCircle@r,w,c
 12980  00201E  6E16               	movwf	drawPixel@y,c
 12981  002020  C020  F017         	movff	drawCircle@color,drawPixel@color
 12982  002024  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12983  002028  501A               	movf	drawCircle@x0,w,c
 12984  00202A  ECBF  F01E         	call	_drawPixel
 12985                           
 12986                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12987  00202E  501E               	movf	drawCircle@r,w,c
 12988  002030  0800               	sublw	0
 12989  002032  241C               	addwf	drawCircle@y0,w,c
 12990  002034  6E16               	movwf	drawPixel@y,c
 12991  002036  C020  F017         	movff	drawCircle@color,drawPixel@color
 12992  00203A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12993  00203E  501A               	movf	drawCircle@x0,w,c
 12994  002040  ECBF  F01E         	call	_drawPixel
 12995                           
 12996                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12997  002044  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12998  002048  C020  F017         	movff	drawCircle@color,drawPixel@color
 12999  00204C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13000  002050  501A               	movf	drawCircle@x0,w,c
 13001  002052  241E               	addwf	drawCircle@r,w,c
 13002  002054  ECBF  F01E         	call	_drawPixel
 13003                           
 13004                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 13005  002058  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 13006  00205C  C020  F017         	movff	drawCircle@color,drawPixel@color
 13007  002060  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13008  002064  501E               	movf	drawCircle@r,w,c
 13009  002066  0800               	sublw	0
 13010  002068  241A               	addwf	drawCircle@x0,w,c
 13011  00206A  ECBF  F01E         	call	_drawPixel
 13012                           
 13013                           ;ST7735_TFT.c: 569: while (x < y) {
 13014  00206E  D078               	goto	l7055
 13015  002070                     l7027:
 13016                           
 13017                           ;ST7735_TFT.c: 570: if (f >= 0) {
 13018  002070  BE29               	btfsc	drawCircle@f+1,7,c
 13019  002072  D00B               	goto	l275
 13020                           
 13021                           ;ST7735_TFT.c: 571: y--;
 13022  002074  062C               	decf	drawCircle@y,f,c
 13023  002076  A0D8               	btfss	status,0,c
 13024  002078  062D               	decf	drawCircle@y+1,f,c
 13025                           
 13026                           ;ST7735_TFT.c: 572: ddF_y += 2;
 13027  00207A  0E02               	movlw	2
 13028  00207C  2626               	addwf	drawCircle@ddF_y,f,c
 13029  00207E  0E00               	movlw	0
 13030  002080  2227               	addwfc	drawCircle@ddF_y+1,f,c
 13031                           
 13032                           ;ST7735_TFT.c: 573: f += ddF_y;
 13033  002082  5026               	movf	drawCircle@ddF_y,w,c
 13034  002084  2628               	addwf	drawCircle@f,f,c
 13035  002086  5027               	movf	drawCircle@ddF_y+1,w,c
 13036  002088  2229               	addwfc	drawCircle@f+1,f,c
 13037  00208A                     l275:
 13038                           
 13039                           ;ST7735_TFT.c: 574: }
 13040                           ;ST7735_TFT.c: 575: x++;
 13041  00208A  4A2A               	infsnz	drawCircle@x,f,c
 13042  00208C  2A2B               	incf	drawCircle@x+1,f,c
 13043                           
 13044                           ;ST7735_TFT.c: 576: ddF_x += 2;
 13045  00208E  0E02               	movlw	2
 13046  002090  2624               	addwf	drawCircle@ddF_x,f,c
 13047  002092  0E00               	movlw	0
 13048  002094  2225               	addwfc	drawCircle@ddF_x+1,f,c
 13049                           
 13050                           ;ST7735_TFT.c: 577: f += ddF_x;
 13051  002096  5024               	movf	drawCircle@ddF_x,w,c
 13052  002098  2628               	addwf	drawCircle@f,f,c
 13053  00209A  5025               	movf	drawCircle@ddF_x+1,w,c
 13054  00209C  2229               	addwfc	drawCircle@f+1,f,c
 13055                           
 13056                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 13057  00209E  501C               	movf	drawCircle@y0,w,c
 13058  0020A0  242C               	addwf	drawCircle@y,w,c
 13059  0020A2  6E16               	movwf	drawPixel@y,c
 13060  0020A4  C020  F017         	movff	drawCircle@color,drawPixel@color
 13061  0020A8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13062  0020AC  501A               	movf	drawCircle@x0,w,c
 13063  0020AE  242A               	addwf	drawCircle@x,w,c
 13064  0020B0  ECBF  F01E         	call	_drawPixel
 13065                           
 13066                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 13067  0020B4  501C               	movf	drawCircle@y0,w,c
 13068  0020B6  242C               	addwf	drawCircle@y,w,c
 13069  0020B8  6E16               	movwf	drawPixel@y,c
 13070  0020BA  C020  F017         	movff	drawCircle@color,drawPixel@color
 13071  0020BE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13072  0020C2  502A               	movf	drawCircle@x,w,c
 13073  0020C4  0800               	sublw	0
 13074  0020C6  241A               	addwf	drawCircle@x0,w,c
 13075  0020C8  ECBF  F01E         	call	_drawPixel
 13076                           
 13077                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 13078  0020CC  502C               	movf	drawCircle@y,w,c
 13079  0020CE  0800               	sublw	0
 13080  0020D0  241C               	addwf	drawCircle@y0,w,c
 13081  0020D2  6E16               	movwf	drawPixel@y,c
 13082  0020D4  C020  F017         	movff	drawCircle@color,drawPixel@color
 13083  0020D8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13084  0020DC  501A               	movf	drawCircle@x0,w,c
 13085  0020DE  242A               	addwf	drawCircle@x,w,c
 13086  0020E0  ECBF  F01E         	call	_drawPixel
 13087                           
 13088                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 13089  0020E4  502C               	movf	drawCircle@y,w,c
 13090  0020E6  0800               	sublw	0
 13091  0020E8  241C               	addwf	drawCircle@y0,w,c
 13092  0020EA  6E16               	movwf	drawPixel@y,c
 13093  0020EC  C020  F017         	movff	drawCircle@color,drawPixel@color
 13094  0020F0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13095  0020F4  502A               	movf	drawCircle@x,w,c
 13096  0020F6  0800               	sublw	0
 13097  0020F8  241A               	addwf	drawCircle@x0,w,c
 13098  0020FA  ECBF  F01E         	call	_drawPixel
 13099                           
 13100                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 13101  0020FE  501C               	movf	drawCircle@y0,w,c
 13102  002100  242A               	addwf	drawCircle@x,w,c
 13103  002102  6E16               	movwf	drawPixel@y,c
 13104  002104  C020  F017         	movff	drawCircle@color,drawPixel@color
 13105  002108  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13106  00210C  501A               	movf	drawCircle@x0,w,c
 13107  00210E  242C               	addwf	drawCircle@y,w,c
 13108  002110  ECBF  F01E         	call	_drawPixel
 13109                           
 13110                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 13111  002114  501C               	movf	drawCircle@y0,w,c
 13112  002116  242A               	addwf	drawCircle@x,w,c
 13113  002118  6E16               	movwf	drawPixel@y,c
 13114  00211A  C020  F017         	movff	drawCircle@color,drawPixel@color
 13115  00211E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13116  002122  502C               	movf	drawCircle@y,w,c
 13117  002124  0800               	sublw	0
 13118  002126  241A               	addwf	drawCircle@x0,w,c
 13119  002128  ECBF  F01E         	call	_drawPixel
 13120                           
 13121                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 13122  00212C  502A               	movf	drawCircle@x,w,c
 13123  00212E  0800               	sublw	0
 13124  002130  241C               	addwf	drawCircle@y0,w,c
 13125  002132  6E16               	movwf	drawPixel@y,c
 13126  002134  C020  F017         	movff	drawCircle@color,drawPixel@color
 13127  002138  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13128  00213C  501A               	movf	drawCircle@x0,w,c
 13129  00213E  242C               	addwf	drawCircle@y,w,c
 13130  002140  ECBF  F01E         	call	_drawPixel
 13131                           
 13132                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 13133  002144  502A               	movf	drawCircle@x,w,c
 13134  002146  0800               	sublw	0
 13135  002148  241C               	addwf	drawCircle@y0,w,c
 13136  00214A  6E16               	movwf	drawPixel@y,c
 13137  00214C  C020  F017         	movff	drawCircle@color,drawPixel@color
 13138  002150  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 13139  002154  502C               	movf	drawCircle@y,w,c
 13140  002156  0800               	sublw	0
 13141  002158  241A               	addwf	drawCircle@x0,w,c
 13142  00215A  ECBF  F01E         	call	_drawPixel
 13143  00215E  D000               	goto	l7055
 13144  002160                     l7055:
 13145  002160  502C               	movf	drawCircle@y,w,c
 13146  002162  5C2A               	subwf	drawCircle@x,w,c
 13147  002164  502B               	movf	drawCircle@x+1,w,c
 13148  002166  0A80               	xorlw	128
 13149  002168  6E22               	movwf	??_drawCircle& (0+255),c
 13150  00216A  502D               	movf	drawCircle@y+1,w,c
 13151  00216C  0A80               	xorlw	128
 13152  00216E  5822               	subwfb	??_drawCircle& (0+255),w,c
 13153  002170  A0D8               	btfss	status,0,c
 13154  002172  D77E               	goto	l7027
 13155  002174  0012               	return		;funcret
 13156  002176                     __end_of_drawCircle:
 13157                           	opt stack 0
 13158                           tblptru	equ	0xFF8
 13159                           tblptrh	equ	0xFF7
 13160                           tblptrl	equ	0xFF6
 13161                           tablat	equ	0xFF5
 13162                           prodh	equ	0xFF4
 13163                           prodl	equ	0xFF3
 13164                           intcon	equ	0xFF2
 13165                           intcon2	equ	0xFF1
 13166                           intcon3	equ	0xFF0
 13167                           postinc0	equ	0xFEE
 13168                           wreg	equ	0xFE8
 13169                           postdec1	equ	0xFE5
 13170                           fsr1l	equ	0xFE1
 13171                           indf2	equ	0xFDF
 13172                           postinc2	equ	0xFDE
 13173                           postdec2	equ	0xFDD
 13174                           fsr2h	equ	0xFDA
 13175                           fsr2l	equ	0xFD9
 13176                           status	equ	0xFD8
 13177                           
 13178 ;; *************** function _PED_Control *****************
 13179 ;; Defined at:
 13180 ;;		line 556 in file "Lab9test.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;  Direction       1    wreg     unsigned char 
 13183 ;;  Num_Sec         1   74[COMRAM] unsigned char 
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;  Direction       1    0[COMRAM] unsigned char 
 13186 ;;  i               1   75[COMRAM] unsigned char 
 13187 ;; Return value:  Size  Location     Type
 13188 ;;		None               void
 13189 ;; Registers used:
 13190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13196 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13200 ;;Total ram usage:        2 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:   10
 13203 ;; This function calls:
 13204 ;;		_WAIT_1_SEC_W_BEEP
 13205 ;;		_update_LCD_PED_Count
 13206 ;; This function is called by:
 13207 ;;		_Day_Mode
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           	psect	text53
 13212  00396E                     __ptext53:
 13213                           	opt stack 0
 13214  00396E                     _PED_Control:
 13215                           	opt stack 19
 13216                           
 13217                           ;Lab9test.c: 558: for(char i = Num_Sec-1; i>0; i--)
 13218                           
 13219                           ;incstack = 0
 13220  00396E  044B               	decf	PED_Control@Num_Sec,w,c
 13221  003970  6E4C               	movwf	PED_Control@i,c
 13222  003972                     l7459:
 13223  003972  504C               	movf	PED_Control@i,w,c
 13224  003974  B4D8               	btfsc	status,2,c
 13225  003976  D00C               	goto	l7469
 13226  003978  D001               	goto	l7463
 13227  00397A  D00A               	goto	l7469
 13228  00397C                     l7463:
 13229                           
 13230                           ;Lab9test.c: 559: {
 13231                           ;Lab9test.c: 560: update_LCD_PED_Count(direction, i);
 13232  00397C  C04C  F048         	movff	PED_Control@i,update_LCD_PED_Count@count
 13233  003980  0100               	movlb	0	; () banked
 13234  003982  5197               	movf	_direction& (0+255),w,b
 13235  003984  EC61  F015         	call	_update_LCD_PED_Count
 13236                           
 13237                           ;Lab9test.c: 561: WAIT_1_SEC_W_BEEP();
 13238  003988  EC81  F01A         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 13239  00398C  064C               	decf	PED_Control@i,f,c
 13240  00398E  D7F1               	goto	l7459
 13241  003990                     l7469:
 13242                           
 13243                           ;Lab9test.c: 562: }
 13244                           ;Lab9test.c: 563: update_LCD_PED_Count(direction, 0);
 13245  003990  0E00               	movlw	0
 13246  003992  6E48               	movwf	update_LCD_PED_Count@count,c
 13247  003994  0100               	movlb	0	; () banked
 13248  003996  5197               	movf	_direction& (0+255),w,b
 13249  003998  EC61  F015         	call	_update_LCD_PED_Count
 13250                           
 13251                           ;Lab9test.c: 564: WAIT_1_SEC_W_BEEP();
 13252  00399C  EC81  F01A         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 13253                           
 13254                           ;Lab9test.c: 566: if (NSPED_SW == 1)
 13255  0039A0  0100               	movlb	0	; () banked
 13256  0039A2  0591               	decf	_NSPED_SW& (0+255),w,b
 13257  0039A4  A4D8               	btfss	status,2,c
 13258  0039A6  D004               	goto	l7475
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;Lab9test.c: 567: {
 13262                           ;Lab9test.c: 568: NSPED_SW = 0;
 13263  0039A8  0E00               	movlw	0
 13264  0039AA  0100               	movlb	0	; () banked
 13265  0039AC  6F91               	movwf	_NSPED_SW& (0+255),b
 13266                           
 13267                           ;Lab9test.c: 569: }
 13268  0039AE  D008               	goto	l479
 13269  0039B0                     l7475:
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;Lab9test.c: 570: else if (EWPED_SW == 1)
 13273  0039B0  0100               	movlb	0	; () banked
 13274  0039B2  058F               	decf	_EWPED_SW& (0+255),w,b
 13275  0039B4  A4D8               	btfss	status,2,c
 13276  0039B6  D004               	goto	l479
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;Lab9test.c: 571: {
 13280                           ;Lab9test.c: 572: EWPED_SW = 0;
 13281  0039B8  0E00               	movlw	0
 13282  0039BA  0100               	movlb	0	; () banked
 13283  0039BC  6F8F               	movwf	_EWPED_SW& (0+255),b
 13284                           
 13285                           ; BSR set to: 0
 13286  0039BE  D000               	goto	l479
 13287  0039C0                     l479:
 13288                           
 13289                           ; BSR set to: 0
 13290  0039C0  0012               	return		;funcret
 13291  0039C2                     __end_of_PED_Control:
 13292                           	opt stack 0
 13293                           tblptru	equ	0xFF8
 13294                           tblptrh	equ	0xFF7
 13295                           tblptrl	equ	0xFF6
 13296                           tablat	equ	0xFF5
 13297                           prodh	equ	0xFF4
 13298                           prodl	equ	0xFF3
 13299                           intcon	equ	0xFF2
 13300                           intcon2	equ	0xFF1
 13301                           intcon3	equ	0xFF0
 13302                           postinc0	equ	0xFEE
 13303                           wreg	equ	0xFE8
 13304                           postdec1	equ	0xFE5
 13305                           fsr1l	equ	0xFE1
 13306                           indf2	equ	0xFDF
 13307                           postinc2	equ	0xFDE
 13308                           postdec2	equ	0xFDD
 13309                           fsr2h	equ	0xFDA
 13310                           fsr2l	equ	0xFD9
 13311                           status	equ	0xFD8
 13312                           
 13313 ;; *************** function _update_LCD_PED_Count *****************
 13314 ;; Defined at:
 13315 ;;		line 709 in file "Lab9test.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;  direction       1    wreg     unsigned char 
 13318 ;;  count           1   71[COMRAM] unsigned char 
 13319 ;; Auto vars:     Size  Location     Type
 13320 ;;  direction       1   73[COMRAM] unsigned char 
 13321 ;; Return value:  Size  Location     Type
 13322 ;;		None               void
 13323 ;; Registers used:
 13324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13325 ;; Tracked objects:
 13326 ;;		On entry : 0/0
 13327 ;;		On exit  : 0/0
 13328 ;;		Unchanged: 0/0
 13329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13330 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13333 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13334 ;;Total ram usage:        3 bytes
 13335 ;; Hardware stack levels used:    1
 13336 ;; Hardware stack levels required when called:    9
 13337 ;; This function calls:
 13338 ;;		___awdiv
 13339 ;;		___awmod
 13340 ;;		_drawtext
 13341 ;; This function is called by:
 13342 ;;		_PED_Control
 13343 ;; This function uses a non-reentrant model
 13344 ;;
 13345                           
 13346                           	psect	text54
 13347  002AC2                     __ptext54:
 13348                           	opt stack 0
 13349  002AC2                     _update_LCD_PED_Count:
 13350                           	opt stack 19
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;incstack = 0
 13354                           ;update_LCD_PED_Count@direction stored from wreg
 13355  002AC2  6E4A               	movwf	update_LCD_PED_Count@direction,c
 13356                           
 13357                           ;Lab9test.c: 711: PORTD = (PORTD & 0x80) | array[count];
 13358  002AC4  5048               	movf	update_LCD_PED_Count@count,w,c
 13359  002AC6  0D01               	mullw	1
 13360  002AC8  0EB7               	movlw	low _array
 13361  002ACA  24F3               	addwf	prodl,w,c
 13362  002ACC  6ED9               	movwf	fsr2l,c
 13363  002ACE  0E00               	movlw	high _array
 13364  002AD0  20F4               	addwfc	prodh,w,c
 13365  002AD2  6EDA               	movwf	fsr2h,c
 13366  002AD4  50DF               	movf	indf2,w,c
 13367  002AD6  6E49               	movwf	??_update_LCD_PED_Count& (0+255),c
 13368  002AD8  5083               	movf	3971,w,c	;volatile
 13369  002ADA  0B80               	andlw	128
 13370  002ADC  1049               	iorwf	??_update_LCD_PED_Count,w,c
 13371  002ADE  6E83               	movwf	3971,c	;volatile
 13372                           
 13373                           ;Lab9test.c: 712: switch (direction)
 13374  002AE0  D05B               	goto	l7379
 13375  002AE2                     l7369:
 13376                           
 13377                           ;Lab9test.c: 715: PED_EW_Count[0] = count/10 + '0';
 13378  002AE2  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13379  002AE6  6A16               	clrf	___awdiv@dividend+1,c
 13380  002AE8  0E00               	movlw	0
 13381  002AEA  6E18               	movwf	___awdiv@divisor+1,c
 13382  002AEC  0E0A               	movlw	10
 13383  002AEE  6E17               	movwf	___awdiv@divisor,c
 13384  002AF0  EC68  F019         	call	___awdiv	;wreg free
 13385  002AF4  5015               	movf	?___awdiv,w,c
 13386  002AF6  0F30               	addlw	48
 13387  002AF8  0100               	movlb	0	; () banked
 13388  002AFA  6FCE               	movwf	_PED_EW_Count& (0+255),b
 13389                           
 13390                           ;Lab9test.c: 716: PED_EW_Count[1] = count%10 + '0';
 13391  002AFC  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13392  002B00  6A10               	clrf	___awmod@dividend+1,c
 13393  002B02  0E00               	movlw	0
 13394  002B04  6E12               	movwf	___awmod@divisor+1,c
 13395  002B06  0E0A               	movlw	10
 13396  002B08  6E11               	movwf	___awmod@divisor,c
 13397  002B0A  EC48  F01B         	call	___awmod	;wreg free
 13398  002B0E  500F               	movf	?___awmod,w,c
 13399  002B10  0F30               	addlw	48
 13400  002B12  0100               	movlb	0	; () banked
 13401  002B14  6FCF               	movwf	(_PED_EW_Count+1)& (0+255),b
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;Lab9test.c: 717: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 13405  002B16  0E1E               	movlw	30
 13406  002B18  6E37               	movwf	drawtext@y,c
 13407  002B1A  0ECE               	movlw	low _PED_EW_Count
 13408  002B1C  6E38               	movwf	drawtext@_text,c
 13409  002B1E  0E00               	movlw	high _PED_EW_Count
 13410  002B20  6E39               	movwf	drawtext@_text+1,c
 13411  002B22  0E07               	movlw	7
 13412  002B24  6E3B               	movwf	drawtext@color+1,c
 13413  002B26  683A               	setf	drawtext@color,c
 13414  002B28  0E00               	movlw	0
 13415  002B2A  6E3D               	movwf	drawtext@bg+1,c
 13416  002B2C  0E00               	movlw	0
 13417  002B2E  6E3C               	movwf	drawtext@bg,c
 13418  002B30  0E02               	movlw	2
 13419  002B32  6E3E               	movwf	drawtext@size,c
 13420  002B34  0E02               	movlw	2
 13421  002B36  ECB9  F016         	call	_drawtext
 13422                           
 13423                           ;Lab9test.c: 718: break;
 13424  002B3A  D036               	goto	l538
 13425  002B3C                     l7373:
 13426                           
 13427                           ;Lab9test.c: 721: PED_NS_Count[0] = count/10 + '0';
 13428  002B3C  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13429  002B40  6A16               	clrf	___awdiv@dividend+1,c
 13430  002B42  0E00               	movlw	0
 13431  002B44  6E18               	movwf	___awdiv@divisor+1,c
 13432  002B46  0E0A               	movlw	10
 13433  002B48  6E17               	movwf	___awdiv@divisor,c
 13434  002B4A  EC68  F019         	call	___awdiv	;wreg free
 13435  002B4E  5015               	movf	?___awdiv,w,c
 13436  002B50  0F30               	addlw	48
 13437  002B52  0100               	movlb	0	; () banked
 13438  002B54  6FD1               	movwf	_PED_NS_Count& (0+255),b
 13439                           
 13440                           ;Lab9test.c: 722: PED_NS_Count[1] = count%10 + '0';
 13441  002B56  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13442  002B5A  6A10               	clrf	___awmod@dividend+1,c
 13443  002B5C  0E00               	movlw	0
 13444  002B5E  6E12               	movwf	___awmod@divisor+1,c
 13445  002B60  0E0A               	movlw	10
 13446  002B62  6E11               	movwf	___awmod@divisor,c
 13447  002B64  EC48  F01B         	call	___awmod	;wreg free
 13448  002B68  500F               	movf	?___awmod,w,c
 13449  002B6A  0F30               	addlw	48
 13450  002B6C  0100               	movlb	0	; () banked
 13451  002B6E  6FD2               	movwf	(_PED_NS_Count+1)& (0+255),b
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Lab9test.c: 723: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
 13455  002B70  0E5A               	movlw	90
 13456  002B72  6E37               	movwf	drawtext@y,c
 13457  002B74  0ED1               	movlw	low _PED_NS_Count
 13458  002B76  6E38               	movwf	drawtext@_text,c
 13459  002B78  0E00               	movlw	high _PED_NS_Count
 13460  002B7A  6E39               	movwf	drawtext@_text+1,c
 13461  002B7C  0E00               	movlw	0
 13462  002B7E  6E3B               	movwf	drawtext@color+1,c
 13463  002B80  0E1F               	movlw	31
 13464  002B82  6E3A               	movwf	drawtext@color,c
 13465  002B84  0E00               	movlw	0
 13466  002B86  6E3D               	movwf	drawtext@bg+1,c
 13467  002B88  0E00               	movlw	0
 13468  002B8A  6E3C               	movwf	drawtext@bg,c
 13469  002B8C  0E02               	movlw	2
 13470  002B8E  6E3E               	movwf	drawtext@size,c
 13471  002B90  0E02               	movlw	2
 13472  002B92  ECB9  F016         	call	_drawtext
 13473                           
 13474                           ;Lab9test.c: 725: }
 13475                           
 13476                           ;Lab9test.c: 724: break;
 13477  002B96  D008               	goto	l538
 13478  002B98                     l7379:
 13479  002B98  504A               	movf	update_LCD_PED_Count@direction,w,c
 13480                           
 13481                           ; Switch size 1, requested type "space"
 13482                           ; Number of cases is 2, Range of values is 0 to 2
 13483                           ; switch strategies available:
 13484                           ; Name         Instructions Cycles
 13485                           ; simple_byte            7     4 (average)
 13486                           ;	Chosen strategy is simple_byte
 13487  002B9A  0A00               	xorlw	0	; case 0
 13488  002B9C  B4D8               	btfsc	status,2,c
 13489  002B9E  D7A1               	goto	l7369
 13490  002BA0  0A02               	xorlw	2	; case 2
 13491  002BA2  B4D8               	btfsc	status,2,c
 13492  002BA4  D7CB               	goto	l7373
 13493  002BA6  D000               	goto	l538
 13494  002BA8                     l538:
 13495  002BA8  0012               	return		;funcret
 13496  002BAA                     __end_of_update_LCD_PED_Count:
 13497                           	opt stack 0
 13498                           tblptru	equ	0xFF8
 13499                           tblptrh	equ	0xFF7
 13500                           tblptrl	equ	0xFF6
 13501                           tablat	equ	0xFF5
 13502                           prodh	equ	0xFF4
 13503                           prodl	equ	0xFF3
 13504                           intcon	equ	0xFF2
 13505                           intcon2	equ	0xFF1
 13506                           intcon3	equ	0xFF0
 13507                           postinc0	equ	0xFEE
 13508                           wreg	equ	0xFE8
 13509                           postdec1	equ	0xFE5
 13510                           fsr1l	equ	0xFE1
 13511                           indf2	equ	0xFDF
 13512                           postinc2	equ	0xFDE
 13513                           postdec2	equ	0xFDD
 13514                           fsr2h	equ	0xFDA
 13515                           fsr2l	equ	0xFD9
 13516                           status	equ	0xFD8
 13517                           
 13518 ;; *************** function ___awmod *****************
 13519 ;; Defined at:
 13520 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;  dividend        2   14[COMRAM] int 
 13523 ;;  divisor         2   16[COMRAM] int 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  sign            1   19[COMRAM] unsigned char 
 13526 ;;  counter         1   18[COMRAM] unsigned char 
 13527 ;; Return value:  Size  Location     Type
 13528 ;;                  2   14[COMRAM] int 
 13529 ;; Registers used:
 13530 ;;		wreg, status,2, status,0
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13540 ;;Total ram usage:        6 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:    2
 13543 ;; This function calls:
 13544 ;;		Nothing
 13545 ;; This function is called by:
 13546 ;;		_update_LCD_count
 13547 ;;		_update_LCD_PED_Count
 13548 ;;		_fround
 13549 ;;		_scale
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           	psect	text55
 13554  003690                     __ptext55:
 13555                           	opt stack 0
 13556  003690                     ___awmod:
 13557                           	opt stack 25
 13558                           
 13559                           ;incstack = 0
 13560  003690  0E00               	movlw	0
 13561  003692  6E14               	movwf	___awmod@sign,c
 13562  003694  AE10               	btfss	___awmod@dividend+1,7,c
 13563  003696  D007               	goto	l6155
 13564  003698  6C0F               	negf	___awmod@dividend,c
 13565  00369A  1E10               	comf	___awmod@dividend+1,f,c
 13566  00369C  B0D8               	btfsc	status,0,c
 13567  00369E  2A10               	incf	___awmod@dividend+1,f,c
 13568  0036A0  0E01               	movlw	1
 13569  0036A2  6E14               	movwf	___awmod@sign,c
 13570  0036A4  D000               	goto	l6155
 13571  0036A6                     l6155:
 13572  0036A6  AE12               	btfss	___awmod@divisor+1,7,c
 13573  0036A8  D005               	goto	l6159
 13574  0036AA  6C11               	negf	___awmod@divisor,c
 13575  0036AC  1E12               	comf	___awmod@divisor+1,f,c
 13576  0036AE  B0D8               	btfsc	status,0,c
 13577  0036B0  2A12               	incf	___awmod@divisor+1,f,c
 13578  0036B2  D000               	goto	l6159
 13579  0036B4                     l6159:
 13580  0036B4  5011               	movf	___awmod@divisor,w,c
 13581  0036B6  1012               	iorwf	___awmod@divisor+1,w,c
 13582  0036B8  B4D8               	btfsc	status,2,c
 13583  0036BA  D01D               	goto	l6175
 13584  0036BC  0E01               	movlw	1
 13585  0036BE  6E13               	movwf	___awmod@counter,c
 13586  0036C0  D005               	goto	l6165
 13587  0036C2                     l6163:
 13588  0036C2  90D8               	bcf	status,0,c
 13589  0036C4  3611               	rlcf	___awmod@divisor,f,c
 13590  0036C6  3612               	rlcf	___awmod@divisor+1,f,c
 13591  0036C8  2A13               	incf	___awmod@counter,f,c
 13592  0036CA  D000               	goto	l6165
 13593  0036CC                     l6165:
 13594  0036CC  BE12               	btfsc	___awmod@divisor+1,7,c
 13595  0036CE  D002               	goto	l6167
 13596  0036D0  D7F8               	goto	l6163
 13597  0036D2  D000               	goto	l6167
 13598  0036D4                     l6167:
 13599  0036D4  5011               	movf	___awmod@divisor,w,c
 13600  0036D6  5C0F               	subwf	___awmod@dividend,w,c
 13601  0036D8  5012               	movf	___awmod@divisor+1,w,c
 13602  0036DA  5810               	subwfb	___awmod@dividend+1,w,c
 13603  0036DC  A0D8               	btfss	status,0,c
 13604  0036DE  D005               	goto	l6171
 13605  0036E0  5011               	movf	___awmod@divisor,w,c
 13606  0036E2  5E0F               	subwf	___awmod@dividend,f,c
 13607  0036E4  5012               	movf	___awmod@divisor+1,w,c
 13608  0036E6  5A10               	subwfb	___awmod@dividend+1,f,c
 13609  0036E8  D000               	goto	l6171
 13610  0036EA                     l6171:
 13611  0036EA  90D8               	bcf	status,0,c
 13612  0036EC  3212               	rrcf	___awmod@divisor+1,f,c
 13613  0036EE  3211               	rrcf	___awmod@divisor,f,c
 13614  0036F0  2E13               	decfsz	___awmod@counter,f,c
 13615  0036F2  D7F0               	goto	l6167
 13616  0036F4  D000               	goto	l6175
 13617  0036F6                     l6175:
 13618  0036F6  5014               	movf	___awmod@sign,w,c
 13619  0036F8  B4D8               	btfsc	status,2,c
 13620  0036FA  D005               	goto	l6179
 13621  0036FC  6C0F               	negf	___awmod@dividend,c
 13622  0036FE  1E10               	comf	___awmod@dividend+1,f,c
 13623  003700  B0D8               	btfsc	status,0,c
 13624  003702  2A10               	incf	___awmod@dividend+1,f,c
 13625  003704  D000               	goto	l6179
 13626  003706                     l6179:
 13627  003706  C00F  F00F         	movff	___awmod@dividend,?___awmod
 13628  00370A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 13629  00370E  D000               	goto	l959
 13630  003710                     l959:
 13631  003710  0012               	return		;funcret
 13632  003712                     __end_of___awmod:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           intcon3	equ	0xFF0
 13643                           postinc0	equ	0xFEE
 13644                           wreg	equ	0xFE8
 13645                           postdec1	equ	0xFE5
 13646                           fsr1l	equ	0xFE1
 13647                           indf2	equ	0xFDF
 13648                           postinc2	equ	0xFDE
 13649                           postdec2	equ	0xFDD
 13650                           fsr2h	equ	0xFDA
 13651                           fsr2l	equ	0xFD9
 13652                           status	equ	0xFD8
 13653                           
 13654 ;; *************** function ___awdiv *****************
 13655 ;; Defined at:
 13656 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;  dividend        2   20[COMRAM] int 
 13659 ;;  divisor         2   22[COMRAM] int 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  quotient        2   26[COMRAM] int 
 13662 ;;  sign            1   25[COMRAM] unsigned char 
 13663 ;;  counter         1   24[COMRAM] unsigned char 
 13664 ;; Return value:  Size  Location     Type
 13665 ;;                  2   20[COMRAM] int 
 13666 ;; Registers used:
 13667 ;;		wreg, status,2, status,0
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;Total ram usage:        8 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    2
 13680 ;; This function calls:
 13681 ;;		Nothing
 13682 ;; This function is called by:
 13683 ;;		_update_LCD_count
 13684 ;;		_update_LCD_PED_Count
 13685 ;;		_fround
 13686 ;;		_scale
 13687 ;;		_printf
 13688 ;; This function uses a non-reentrant model
 13689 ;;
 13690                           
 13691                           	psect	text56
 13692  0032D0                     __ptext56:
 13693                           	opt stack 0
 13694  0032D0                     ___awdiv:
 13695                           	opt stack 25
 13696                           
 13697                           ;incstack = 0
 13698  0032D0  0E00               	movlw	0
 13699  0032D2  6E1A               	movwf	___awdiv@sign,c
 13700  0032D4  AE18               	btfss	___awdiv@divisor+1,7,c
 13701  0032D6  D007               	goto	l6111
 13702  0032D8  6C17               	negf	___awdiv@divisor,c
 13703  0032DA  1E18               	comf	___awdiv@divisor+1,f,c
 13704  0032DC  B0D8               	btfsc	status,0,c
 13705  0032DE  2A18               	incf	___awdiv@divisor+1,f,c
 13706  0032E0  0E01               	movlw	1
 13707  0032E2  6E1A               	movwf	___awdiv@sign,c
 13708  0032E4  D000               	goto	l6111
 13709  0032E6                     l6111:
 13710  0032E6  AE16               	btfss	___awdiv@dividend+1,7,c
 13711  0032E8  D007               	goto	l6117
 13712  0032EA  6C15               	negf	___awdiv@dividend,c
 13713  0032EC  1E16               	comf	___awdiv@dividend+1,f,c
 13714  0032EE  B0D8               	btfsc	status,0,c
 13715  0032F0  2A16               	incf	___awdiv@dividend+1,f,c
 13716  0032F2  0E01               	movlw	1
 13717  0032F4  1A1A               	xorwf	___awdiv@sign,f,c
 13718  0032F6  D000               	goto	l6117
 13719  0032F8                     l6117:
 13720  0032F8  0E00               	movlw	0
 13721  0032FA  6E1C               	movwf	___awdiv@quotient+1,c
 13722  0032FC  0E00               	movlw	0
 13723  0032FE  6E1B               	movwf	___awdiv@quotient,c
 13724  003300  5017               	movf	___awdiv@divisor,w,c
 13725  003302  1018               	iorwf	___awdiv@divisor+1,w,c
 13726  003304  B4D8               	btfsc	status,2,c
 13727  003306  D021               	goto	l6139
 13728  003308  0E01               	movlw	1
 13729  00330A  6E19               	movwf	___awdiv@counter,c
 13730  00330C  D005               	goto	l6125
 13731  00330E                     l6123:
 13732  00330E  90D8               	bcf	status,0,c
 13733  003310  3617               	rlcf	___awdiv@divisor,f,c
 13734  003312  3618               	rlcf	___awdiv@divisor+1,f,c
 13735  003314  2A19               	incf	___awdiv@counter,f,c
 13736  003316  D000               	goto	l6125
 13737  003318                     l6125:
 13738  003318  BE18               	btfsc	___awdiv@divisor+1,7,c
 13739  00331A  D002               	goto	l6127
 13740  00331C  D7F8               	goto	l6123
 13741  00331E  D000               	goto	l6127
 13742  003320                     l6127:
 13743  003320  90D8               	bcf	status,0,c
 13744  003322  361B               	rlcf	___awdiv@quotient,f,c
 13745  003324  361C               	rlcf	___awdiv@quotient+1,f,c
 13746  003326  5017               	movf	___awdiv@divisor,w,c
 13747  003328  5C15               	subwf	___awdiv@dividend,w,c
 13748  00332A  5018               	movf	___awdiv@divisor+1,w,c
 13749  00332C  5816               	subwfb	___awdiv@dividend+1,w,c
 13750  00332E  A0D8               	btfss	status,0,c
 13751  003330  D006               	goto	l6135
 13752  003332  5017               	movf	___awdiv@divisor,w,c
 13753  003334  5E15               	subwf	___awdiv@dividend,f,c
 13754  003336  5018               	movf	___awdiv@divisor+1,w,c
 13755  003338  5A16               	subwfb	___awdiv@dividend+1,f,c
 13756  00333A  801B               	bsf	___awdiv@quotient,0,c
 13757  00333C  D000               	goto	l6135
 13758  00333E                     l6135:
 13759  00333E  90D8               	bcf	status,0,c
 13760  003340  3218               	rrcf	___awdiv@divisor+1,f,c
 13761  003342  3217               	rrcf	___awdiv@divisor,f,c
 13762  003344  2E19               	decfsz	___awdiv@counter,f,c
 13763  003346  D7EC               	goto	l6127
 13764  003348  D000               	goto	l6139
 13765  00334A                     l6139:
 13766  00334A  501A               	movf	___awdiv@sign,w,c
 13767  00334C  B4D8               	btfsc	status,2,c
 13768  00334E  D005               	goto	l6143
 13769  003350  6C1B               	negf	___awdiv@quotient,c
 13770  003352  1E1C               	comf	___awdiv@quotient+1,f,c
 13771  003354  B0D8               	btfsc	status,0,c
 13772  003356  2A1C               	incf	___awdiv@quotient+1,f,c
 13773  003358  D000               	goto	l6143
 13774  00335A                     l6143:
 13775  00335A  C01B  F015         	movff	___awdiv@quotient,?___awdiv
 13776  00335E  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
 13777  003362  D000               	goto	l946
 13778  003364                     l946:
 13779  003364  0012               	return		;funcret
 13780  003366                     __end_of___awdiv:
 13781                           	opt stack 0
 13782                           tblptru	equ	0xFF8
 13783                           tblptrh	equ	0xFF7
 13784                           tblptrl	equ	0xFF6
 13785                           tablat	equ	0xFF5
 13786                           prodh	equ	0xFF4
 13787                           prodl	equ	0xFF3
 13788                           intcon	equ	0xFF2
 13789                           intcon2	equ	0xFF1
 13790                           intcon3	equ	0xFF0
 13791                           postinc0	equ	0xFEE
 13792                           wreg	equ	0xFE8
 13793                           postdec1	equ	0xFE5
 13794                           fsr1l	equ	0xFE1
 13795                           indf2	equ	0xFDF
 13796                           postinc2	equ	0xFDE
 13797                           postdec2	equ	0xFDD
 13798                           fsr2h	equ	0xFDA
 13799                           fsr2l	equ	0xFD9
 13800                           status	equ	0xFD8
 13801                           
 13802 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
 13803 ;; Defined at:
 13804 ;;		line 526 in file "Lab9test.c"
 13805 ;; Parameters:    Size  Location     Type
 13806 ;;		None
 13807 ;; Auto vars:     Size  Location     Type
 13808 ;;		None
 13809 ;; Return value:  Size  Location     Type
 13810 ;;		None               void
 13811 ;; Registers used:
 13812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13822 ;;Total ram usage:        0 bytes
 13823 ;; Hardware stack levels used:    1
 13824 ;; Hardware stack levels required when called:    9
 13825 ;; This function calls:
 13826 ;;		_Activate_Buzzer
 13827 ;;		_Deactivate_Buzzer
 13828 ;;		_WAIT_HALF_SEC
 13829 ;;		_drawtext
 13830 ;;		_strcpy
 13831 ;; This function is called by:
 13832 ;;		_PED_Control
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836                           	psect	text57
 13837  003502                     __ptext57:
 13838                           	opt stack 0
 13839  003502                     _WAIT_1_SEC_W_BEEP:
 13840                           	opt stack 19
 13841                           
 13842                           ;Lab9test.c: 528: PORTDbits.RD7 = 1;
 13843                           
 13844                           ;incstack = 0
 13845  003502  8E83               	bsf	3971,7,c	;volatile
 13846                           
 13847                           ;Lab9test.c: 529: Activate_Buzzer();
 13848  003504  ECB9  F01F         	call	_Activate_Buzzer	;wreg free
 13849                           
 13850                           ;Lab9test.c: 530: strcpy(txt,"*");
 13851  003508  C064  F00F         	movff	_txt,strcpy@to
 13852  00350C  C065  F010         	movff	_txt+1,strcpy@to+1
 13853  003510  0EFD               	movlw	low STR_5
 13854  003512  6E11               	movwf	strcpy@from,c
 13855  003514  0EFF               	movlw	high STR_5
 13856  003516  6E12               	movwf	strcpy@from+1,c
 13857  003518  ECA6  F01E         	call	_strcpy	;wreg free
 13858                           
 13859                           ;Lab9test.c: 531: drawtext(120,10,txt,0xFFFF,0x0000,1);
 13860  00351C  0E0A               	movlw	10
 13861  00351E  6E37               	movwf	drawtext@y,c
 13862  003520  C064  F038         	movff	_txt,drawtext@_text
 13863  003524  C065  F039         	movff	_txt+1,drawtext@_text+1
 13864  003528  0EFF               	movlw	255
 13865  00352A  6E3B               	movwf	drawtext@color+1,c
 13866  00352C  683A               	setf	drawtext@color,c
 13867  00352E  0E00               	movlw	0
 13868  003530  6E3D               	movwf	drawtext@bg+1,c
 13869  003532  0E00               	movlw	0
 13870  003534  6E3C               	movwf	drawtext@bg,c
 13871  003536  0E01               	movlw	1
 13872  003538  6E3E               	movwf	drawtext@size,c
 13873  00353A  0E78               	movlw	120
 13874  00353C  ECB9  F016         	call	_drawtext
 13875                           
 13876                           ;Lab9test.c: 532: WAIT_HALF_SEC();
 13877  003540  EC6C  F01F         	call	_WAIT_HALF_SEC	;wreg free
 13878                           
 13879                           ;Lab9test.c: 535: PORTDbits.RD7 = 0;
 13880  003544  9E83               	bcf	3971,7,c	;volatile
 13881                           
 13882                           ;Lab9test.c: 536: Deactivate_Buzzer ();
 13883  003546  ECEB  F01F         	call	_Deactivate_Buzzer	;wreg free
 13884                           
 13885                           ;Lab9test.c: 537: strcpy(txt," ");
 13886  00354A  C064  F00F         	movff	_txt,strcpy@to
 13887  00354E  C065  F010         	movff	_txt+1,strcpy@to+1
 13888  003552  0EFB               	movlw	low STR_14
 13889  003554  6E11               	movwf	strcpy@from,c
 13890  003556  0EFF               	movlw	high STR_14
 13891  003558  6E12               	movwf	strcpy@from+1,c
 13892  00355A  ECA6  F01E         	call	_strcpy	;wreg free
 13893                           
 13894                           ;Lab9test.c: 538: drawtext(120,10,txt,0xFFFF,0x0000,1);
 13895  00355E  0E0A               	movlw	10
 13896  003560  6E37               	movwf	drawtext@y,c
 13897  003562  C064  F038         	movff	_txt,drawtext@_text
 13898  003566  C065  F039         	movff	_txt+1,drawtext@_text+1
 13899  00356A  0EFF               	movlw	255
 13900  00356C  6E3B               	movwf	drawtext@color+1,c
 13901  00356E  683A               	setf	drawtext@color,c
 13902  003570  0E00               	movlw	0
 13903  003572  6E3D               	movwf	drawtext@bg+1,c
 13904  003574  0E00               	movlw	0
 13905  003576  6E3C               	movwf	drawtext@bg,c
 13906  003578  0E01               	movlw	1
 13907  00357A  6E3E               	movwf	drawtext@size,c
 13908  00357C  0E78               	movlw	120
 13909  00357E  ECB9  F016         	call	_drawtext
 13910                           
 13911                           ;Lab9test.c: 539: WAIT_HALF_SEC();
 13912  003582  EC6C  F01F         	call	_WAIT_HALF_SEC	;wreg free
 13913  003586  0012               	return		;funcret
 13914  003588                     __end_of_WAIT_1_SEC_W_BEEP:
 13915                           	opt stack 0
 13916                           tblptru	equ	0xFF8
 13917                           tblptrh	equ	0xFF7
 13918                           tblptrl	equ	0xFF6
 13919                           tablat	equ	0xFF5
 13920                           prodh	equ	0xFF4
 13921                           prodl	equ	0xFF3
 13922                           intcon	equ	0xFF2
 13923                           intcon2	equ	0xFF1
 13924                           intcon3	equ	0xFF0
 13925                           postinc0	equ	0xFEE
 13926                           wreg	equ	0xFE8
 13927                           postdec1	equ	0xFE5
 13928                           fsr1l	equ	0xFE1
 13929                           indf2	equ	0xFDF
 13930                           postinc2	equ	0xFDE
 13931                           postdec2	equ	0xFDD
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _strcpy *****************
 13937 ;; Defined at:
 13938 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;  to              2   14[COMRAM] PTR unsigned char 
 13941 ;;		 -> NULL(0), buffer(31), 
 13942 ;;  from            2   16[COMRAM] PTR const unsigned char 
 13943 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
 13944 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
 13945 ;;		 -> STR_8(12), STR_7(7), STR_6(10), STR_5(2), 
 13946 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(20), 
 13947 ;; Auto vars:     Size  Location     Type
 13948 ;;  cp              2   18[COMRAM] PTR unsigned char 
 13949 ;;		 -> NULL(0), buffer(31), 
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  2   14[COMRAM] PTR unsigned char 
 13952 ;; Registers used:
 13953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;Total ram usage:        6 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; Hardware stack levels required when called:    2
 13966 ;; This function calls:
 13967 ;;		Nothing
 13968 ;; This function is called by:
 13969 ;;		_Initialize_Screen
 13970 ;;		_WAIT_1_SEC
 13971 ;;		_WAIT_1_SEC_W_BEEP
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text58
 13976  003D4C                     __ptext58:
 13977                           	opt stack 0
 13978  003D4C                     _strcpy:
 13979                           	opt stack 25
 13980                           
 13981                           ;incstack = 0
 13982  003D4C  C00F  F013         	movff	strcpy@to,strcpy@cp
 13983  003D50  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 13984  003D54  D005               	goto	l7063
 13985  003D56                     l7061:
 13986  003D56  4A13               	infsnz	strcpy@cp,f,c
 13987  003D58  2A14               	incf	strcpy@cp+1,f,c
 13988  003D5A  4A11               	infsnz	strcpy@from,f,c
 13989  003D5C  2A12               	incf	strcpy@from+1,f,c
 13990  003D5E  D000               	goto	l7063
 13991  003D60                     l7063:
 13992  003D60  C011  FFF6         	movff	strcpy@from,tblptrl
 13993  003D64  C012  FFF7         	movff	strcpy@from+1,tblptrh
 13994  003D68                     	if	0	;tblptru may be non-zero
 13995  003D68                     	endif
 13996  003D68                     	if	0	;tblptru may be non-zero
 13997  003D68                     	endif
 13998  003D68  C013  FFD9         	movff	strcpy@cp,fsr2l
 13999  003D6C  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 14000  003D70  0008               	tblrd		*
 14001  003D72  CFF5 FFDF          	movff	tablat,indf2
 14002  003D76  50DF               	movf	indf2,w,c
 14003  003D78  A4D8               	btfss	status,2,c
 14004  003D7A  D7ED               	goto	l7061
 14005                           
 14006                           ;	Return value of _strcpy is never used
 14007  003D7C  0012               	return		;funcret
 14008  003D7E                     __end_of_strcpy:
 14009                           	opt stack 0
 14010                           tblptru	equ	0xFF8
 14011                           tblptrh	equ	0xFF7
 14012                           tblptrl	equ	0xFF6
 14013                           tablat	equ	0xFF5
 14014                           prodh	equ	0xFF4
 14015                           prodl	equ	0xFF3
 14016                           intcon	equ	0xFF2
 14017                           intcon2	equ	0xFF1
 14018                           intcon3	equ	0xFF0
 14019                           postinc0	equ	0xFEE
 14020                           wreg	equ	0xFE8
 14021                           postdec1	equ	0xFE5
 14022                           fsr1l	equ	0xFE1
 14023                           indf2	equ	0xFDF
 14024                           postinc2	equ	0xFDE
 14025                           postdec2	equ	0xFDD
 14026                           fsr2h	equ	0xFDA
 14027                           fsr2l	equ	0xFD9
 14028                           status	equ	0xFD8
 14029                           
 14030 ;; *************** function _drawtext *****************
 14031 ;; Defined at:
 14032 ;;		line 507 in file "ST7735_TFT.c"
 14033 ;; Parameters:    Size  Location     Type
 14034 ;;  x               1    wreg     unsigned char 
 14035 ;;  y               1   54[COMRAM] unsigned char 
 14036 ;;  _text           2   55[COMRAM] PTR unsigned char 
 14037 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 14038 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 14039 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 14040 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 14041 ;;  color           2   57[COMRAM] unsigned int 
 14042 ;;  bg              2   59[COMRAM] unsigned int 
 14043 ;;  size            1   61[COMRAM] unsigned char 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  x               1   64[COMRAM] unsigned char 
 14046 ;;  i               2   67[COMRAM] unsigned int 
 14047 ;;  textsize        2   65[COMRAM] unsigned int 
 14048 ;;  cursor_x        1   70[COMRAM] unsigned char 
 14049 ;;  cursor_y        1   69[COMRAM] unsigned char 
 14050 ;; Return value:  Size  Location     Type
 14051 ;;		None               void
 14052 ;; Registers used:
 14053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14054 ;; Tracked objects:
 14055 ;;		On entry : 0/0
 14056 ;;		On exit  : 0/0
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14059 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14062 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14063 ;;Total ram usage:       17 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    8
 14066 ;; This function calls:
 14067 ;;		_drawChar
 14068 ;;		_strlen
 14069 ;; This function is called by:
 14070 ;;		_Initialize_Screen
 14071 ;;		_WAIT_1_SEC
 14072 ;;		_WAIT_1_SEC_W_BEEP
 14073 ;;		_update_LCD_count
 14074 ;;		_update_LCD_PED_Count
 14075 ;;		_update_LCD_misc
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           	psect	text59
 14080  002D72                     __ptext59:
 14081                           	opt stack 0
 14082  002D72                     _drawtext:
 14083                           	opt stack 19
 14084                           
 14085                           ;incstack = 0
 14086                           ;drawtext@x stored from wreg
 14087  002D72  6E41               	movwf	drawtext@x,c
 14088                           
 14089                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 14090                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 14091                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 14092  002D74  C041  F047         	movff	drawtext@x,drawtext@cursor_x
 14093  002D78  C037  F046         	movff	drawtext@y,drawtext@cursor_y
 14094                           
 14095                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 14096  002D7C  C038  F00F         	movff	drawtext@_text,strlen@s
 14097  002D80  C039  F010         	movff	drawtext@_text+1,strlen@s+1
 14098  002D84  EC50  F01E         	call	_strlen	;wreg free
 14099  002D88  C00F  F042         	movff	?_strlen,drawtext@textsize
 14100  002D8C  C010  F043         	movff	?_strlen+1,drawtext@textsize+1
 14101                           
 14102                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 14103  002D90  0E00               	movlw	0
 14104  002D92  6E45               	movwf	drawtext@i+1,c
 14105  002D94  0E00               	movlw	0
 14106  002D96  6E44               	movwf	drawtext@i,c
 14107  002D98  D054               	goto	l6605
 14108  002D9A                     l6579:
 14109                           
 14110                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 14111  002D9A  506C               	movf	_wrap,w,c
 14112  002D9C  B4D8               	btfsc	status,2,c
 14113  002D9E  D02C               	goto	l6595
 14114  002DA0  503E               	movf	drawtext@size,w,c
 14115  002DA2  0D05               	mullw	5
 14116  002DA4  5047               	movf	drawtext@cursor_x,w,c
 14117  002DA6  6E3F               	movwf	??_drawtext& (0+255),c
 14118  002DA8  6A40               	clrf	(??_drawtext+1)& (0+255),c
 14119  002DAA  50F3               	movf	prodl,w,c
 14120  002DAC  263F               	addwf	??_drawtext,f,c
 14121  002DAE  50F4               	movf	prodh,w,c
 14122  002DB0  2240               	addwfc	??_drawtext+1,f,c
 14123  002DB2  BE40               	btfsc	??_drawtext+1,7,c
 14124  002DB4  D021               	goto	l6595
 14125  002DB6  5040               	movf	??_drawtext+1,w,c
 14126  002DB8  E104               	bnz	u6500
 14127  002DBA  0E81               	movlw	129
 14128  002DBC  5C3F               	subwf	??_drawtext,w,c
 14129  002DBE  A0D8               	btfss	status,0,c
 14130  002DC0  D01B               	goto	l6595
 14131  002DC2                     u6500:
 14132                           
 14133                           ;ST7735_TFT.c: 515: cursor_x = 0;
 14134  002DC2  0E00               	movlw	0
 14135  002DC4  6E47               	movwf	drawtext@cursor_x,c
 14136                           
 14137                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 14138  002DC6  503E               	movf	drawtext@size,w,c
 14139  002DC8  0D07               	mullw	7
 14140  002DCA  50F3               	movf	prodl,w,c
 14141  002DCC  2446               	addwf	drawtext@cursor_y,w,c
 14142  002DCE  0F03               	addlw	3
 14143  002DD0  6E46               	movwf	drawtext@cursor_y,c
 14144                           
 14145                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 14146  002DD2  0EA0               	movlw	160
 14147  002DD4  6446               	cpfsgt	drawtext@cursor_y,c
 14148  002DD6  D003               	goto	l6591
 14149  002DD8  0EA0               	movlw	160
 14150  002DDA  6E46               	movwf	drawtext@cursor_y,c
 14151  002DDC  D000               	goto	l6591
 14152  002DDE                     l6591:
 14153                           
 14154                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 14155  002DDE  5044               	movf	drawtext@i,w,c
 14156  002DE0  2438               	addwf	drawtext@_text,w,c
 14157  002DE2  6ED9               	movwf	fsr2l,c
 14158  002DE4  5045               	movf	drawtext@i+1,w,c
 14159  002DE6  2039               	addwfc	drawtext@_text+1,w,c
 14160  002DE8  6EDA               	movwf	fsr2h,c
 14161  002DEA  0E20               	movlw	32
 14162  002DEC  18DE               	xorwf	postinc2,w,c
 14163  002DEE  B4D8               	btfsc	status,2,c
 14164  002DF0  D025               	goto	l6603
 14165  002DF2  D002               	goto	l6595
 14166  002DF4  D023               	goto	l6603
 14167  002DF6  D000               	goto	l6595
 14168  002DF8                     l6595:
 14169                           
 14170                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 14171  002DF8  C046  F02C         	movff	drawtext@cursor_y,drawChar@y
 14172  002DFC  5044               	movf	drawtext@i,w,c
 14173  002DFE  2438               	addwf	drawtext@_text,w,c
 14174  002E00  6ED9               	movwf	fsr2l,c
 14175  002E02  5045               	movf	drawtext@i+1,w,c
 14176  002E04  2039               	addwfc	drawtext@_text+1,w,c
 14177  002E06  6EDA               	movwf	fsr2h,c
 14178  002E08  50DF               	movf	indf2,w,c
 14179  002E0A  6E2D               	movwf	drawChar@c,c
 14180  002E0C  C03A  F02E         	movff	drawtext@color,drawChar@color
 14181  002E10  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
 14182  002E14  C03C  F030         	movff	drawtext@bg,drawChar@bg
 14183  002E18  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
 14184  002E1C  C03E  F032         	movff	drawtext@size,drawChar@size
 14185  002E20  5047               	movf	drawtext@cursor_x,w,c
 14186  002E22  EC90  F011         	call	_drawChar
 14187                           
 14188                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 14189  002E26  503E               	movf	drawtext@size,w,c
 14190  002E28  0D06               	mullw	6
 14191  002E2A  50F3               	movf	prodl,w,c
 14192  002E2C  2447               	addwf	drawtext@cursor_x,w,c
 14193  002E2E  6E47               	movwf	drawtext@cursor_x,c
 14194                           
 14195                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 14196  002E30  0E80               	movlw	128
 14197  002E32  6447               	cpfsgt	drawtext@cursor_x,c
 14198  002E34  D003               	goto	l6603
 14199  002E36  0E80               	movlw	128
 14200  002E38  6E47               	movwf	drawtext@cursor_x,c
 14201  002E3A  D000               	goto	l6603
 14202  002E3C                     l6603:
 14203  002E3C  4A44               	infsnz	drawtext@i,f,c
 14204  002E3E  2A45               	incf	drawtext@i+1,f,c
 14205  002E40  D000               	goto	l6605
 14206  002E42                     l6605:
 14207  002E42  5042               	movf	drawtext@textsize,w,c
 14208  002E44  5C44               	subwf	drawtext@i,w,c
 14209  002E46  5043               	movf	drawtext@textsize+1,w,c
 14210  002E48  5845               	subwfb	drawtext@i+1,w,c
 14211  002E4A  A0D8               	btfss	status,0,c
 14212  002E4C  D7A6               	goto	l6579
 14213  002E4E  0012               	return		;funcret
 14214  002E50                     __end_of_drawtext:
 14215                           	opt stack 0
 14216                           tblptru	equ	0xFF8
 14217                           tblptrh	equ	0xFF7
 14218                           tblptrl	equ	0xFF6
 14219                           tablat	equ	0xFF5
 14220                           prodh	equ	0xFF4
 14221                           prodl	equ	0xFF3
 14222                           intcon	equ	0xFF2
 14223                           intcon2	equ	0xFF1
 14224                           intcon3	equ	0xFF0
 14225                           postinc0	equ	0xFEE
 14226                           wreg	equ	0xFE8
 14227                           postdec1	equ	0xFE5
 14228                           fsr1l	equ	0xFE1
 14229                           indf2	equ	0xFDF
 14230                           postinc2	equ	0xFDE
 14231                           postdec2	equ	0xFDD
 14232                           fsr2h	equ	0xFDA
 14233                           fsr2l	equ	0xFD9
 14234                           status	equ	0xFD8
 14235                           
 14236 ;; *************** function _strlen *****************
 14237 ;; Defined at:
 14238 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;  s               2   14[COMRAM] PTR const unsigned char 
 14241 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 14242 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 14243 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 14244 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 14245 ;; Auto vars:     Size  Location     Type
 14246 ;;  cp              2   18[COMRAM] PTR const unsigned char 
 14247 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 14248 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 14249 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 14250 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 14251 ;; Return value:  Size  Location     Type
 14252 ;;                  2   14[COMRAM] unsigned int 
 14253 ;; Registers used:
 14254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14255 ;; Tracked objects:
 14256 ;;		On entry : 0/0
 14257 ;;		On exit  : 0/0
 14258 ;;		Unchanged: 0/0
 14259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14263 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14264 ;;Total ram usage:        6 bytes
 14265 ;; Hardware stack levels used:    1
 14266 ;; Hardware stack levels required when called:    2
 14267 ;; This function calls:
 14268 ;;		Nothing
 14269 ;; This function is called by:
 14270 ;;		_drawtext
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           	psect	text60
 14275  003CA0                     __ptext60:
 14276                           	opt stack 0
 14277  003CA0                     _strlen:
 14278                           	opt stack 24
 14279                           
 14280                           ;incstack = 0
 14281  003CA0  C00F  F013         	movff	strlen@s,strlen@cp
 14282  003CA4  C010  F014         	movff	strlen@s+1,strlen@cp+1
 14283  003CA8  D003               	goto	l6241
 14284  003CAA                     l6239:
 14285  003CAA  4A13               	infsnz	strlen@cp,f,c
 14286  003CAC  2A14               	incf	strlen@cp+1,f,c
 14287  003CAE  D000               	goto	l6241
 14288  003CB0                     l6241:
 14289  003CB0  C013  FFD9         	movff	strlen@cp,fsr2l
 14290  003CB4  C014  FFDA         	movff	strlen@cp+1,fsr2h
 14291  003CB8  50DF               	movf	indf2,w,c
 14292  003CBA  A4D8               	btfss	status,2,c
 14293  003CBC  D7F6               	goto	l6239
 14294  003CBE  C00F  F011         	movff	strlen@s,??_strlen
 14295  003CC2  C010  F012         	movff	strlen@s+1,??_strlen+1
 14296  003CC6  1E11               	comf	??_strlen,f,c
 14297  003CC8  1E12               	comf	??_strlen+1,f,c
 14298  003CCA  4A11               	infsnz	??_strlen,f,c
 14299  003CCC  2A12               	incf	??_strlen+1,f,c
 14300  003CCE  5013               	movf	strlen@cp,w,c
 14301  003CD0  2411               	addwf	??_strlen,w,c
 14302  003CD2  6E0F               	movwf	?_strlen,c
 14303  003CD4  5014               	movf	strlen@cp+1,w,c
 14304  003CD6  2012               	addwfc	??_strlen+1,w,c
 14305  003CD8  6E10               	movwf	?_strlen+1,c
 14306  003CDA  D000               	goto	l1353
 14307  003CDC                     l1353:
 14308  003CDC  0012               	return		;funcret
 14309  003CDE                     __end_of_strlen:
 14310                           	opt stack 0
 14311                           tblptru	equ	0xFF8
 14312                           tblptrh	equ	0xFF7
 14313                           tblptrl	equ	0xFF6
 14314                           tablat	equ	0xFF5
 14315                           prodh	equ	0xFF4
 14316                           prodl	equ	0xFF3
 14317                           intcon	equ	0xFF2
 14318                           intcon2	equ	0xFF1
 14319                           intcon3	equ	0xFF0
 14320                           postinc0	equ	0xFEE
 14321                           wreg	equ	0xFE8
 14322                           postdec1	equ	0xFE5
 14323                           fsr1l	equ	0xFE1
 14324                           indf2	equ	0xFDF
 14325                           postinc2	equ	0xFDE
 14326                           postdec2	equ	0xFDD
 14327                           fsr2h	equ	0xFDA
 14328                           fsr2l	equ	0xFD9
 14329                           status	equ	0xFD8
 14330                           
 14331 ;; *************** function _drawChar *****************
 14332 ;; Defined at:
 14333 ;;		line 480 in file "ST7735_TFT.c"
 14334 ;; Parameters:    Size  Location     Type
 14335 ;;  x               1    wreg     unsigned char 
 14336 ;;  y               1   43[COMRAM] unsigned char 
 14337 ;;  c               1   44[COMRAM] unsigned char 
 14338 ;;  color           2   45[COMRAM] unsigned int 
 14339 ;;  bg              2   47[COMRAM] unsigned int 
 14340 ;;  size            1   49[COMRAM] unsigned char 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  x               1   51[COMRAM] unsigned char 
 14343 ;;  line            1   50[COMRAM] unsigned char 
 14344 ;;  i               1   53[COMRAM] unsigned char 
 14345 ;;  j               1   52[COMRAM] unsigned char 
 14346 ;; Return value:  Size  Location     Type
 14347 ;;		None               void
 14348 ;; Registers used:
 14349 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14355 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;Total ram usage:       11 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    7
 14362 ;; This function calls:
 14363 ;;		___wmul
 14364 ;;		_drawPixel
 14365 ;;		_fillRect
 14366 ;; This function is called by:
 14367 ;;		_drawtext
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           	psect	text61
 14372  002320                     __ptext61:
 14373                           	opt stack 0
 14374  002320                     _drawChar:
 14375                           	opt stack 19
 14376                           
 14377                           ;incstack = 0
 14378                           ;drawChar@x stored from wreg
 14379  002320  6E34               	movwf	drawChar@x,c
 14380                           
 14381                           ;ST7735_TFT.c: 482: char i, j;
 14382                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 14383  002322  0E80               	movlw	128
 14384  002324  6034               	cpfslt	drawChar@x,c
 14385  002326  D0A6               	goto	l227
 14386  002328  0E9F               	movlw	159
 14387  00232A  642C               	cpfsgt	drawChar@y,c
 14388  00232C  D001               	goto	l6187
 14389                           
 14390                           ;ST7735_TFT.c: 484: return;
 14391  00232E  D0A2               	goto	l227
 14392  002330                     l6187:
 14393                           
 14394                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 14395  002330  5032               	movf	drawChar@size,w,c
 14396  002332  A4D8               	btfss	status,2,c
 14397  002334  D003               	goto	l6191
 14398  002336  0E01               	movlw	1
 14399  002338  6E32               	movwf	drawChar@size,c
 14400  00233A  D000               	goto	l6191
 14401  00233C                     l6191:
 14402                           
 14403                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 14404  00233C  0E1F               	movlw	31
 14405  00233E  642D               	cpfsgt	drawChar@c,c
 14406  002340  D004               	goto	l6195
 14407  002342  0E7E               	movlw	126
 14408  002344  642D               	cpfsgt	drawChar@c,c
 14409  002346  D003               	goto	l229
 14410  002348  D000               	goto	l6195
 14411  00234A                     l6195:
 14412                           
 14413                           ;ST7735_TFT.c: 487: c = '?';
 14414  00234A  0E3F               	movlw	63
 14415  00234C  6E2D               	movwf	drawChar@c,c
 14416  00234E                     l229:
 14417                           
 14418                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 14419  00234E  0E00               	movlw	0
 14420  002350  6E36               	movwf	drawChar@i,c
 14421  002352                     l6197:
 14422  002352  0E04               	movlw	4
 14423  002354  6436               	cpfsgt	drawChar@i,c
 14424  002356  D001               	goto	l6201
 14425  002358  D08D               	goto	l227
 14426  00235A                     l6201:
 14427                           
 14428                           ;ST7735_TFT.c: 489: unsigned char line;
 14429                           ;ST7735_TFT.c: 490: if(c < 'S')
 14430  00235A  0E53               	movlw	83
 14431  00235C  602D               	cpfslt	drawChar@c,c
 14432  00235E  D015               	goto	l6205
 14433                           
 14434                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 14435  002360  0EE0               	movlw	224
 14436  002362  242D               	addwf	drawChar@c,w,c
 14437  002364  6E1D               	movwf	___wmul@multiplier,c
 14438  002366  6A1E               	clrf	___wmul@multiplier+1,c
 14439  002368  0EFF               	movlw	255
 14440  00236A  221E               	addwfc	___wmul@multiplier+1,f,c
 14441  00236C  0E00               	movlw	0
 14442  00236E  6E20               	movwf	___wmul@multiplicand+1,c
 14443  002370  0E05               	movlw	5
 14444  002372  6E1F               	movwf	___wmul@multiplicand,c
 14445  002374  EC01  F01F         	call	___wmul	;wreg free
 14446  002378  5036               	movf	drawChar@i,w,c
 14447  00237A  261D               	addwf	?___wmul,f,c
 14448  00237C  0E00               	movlw	0
 14449  00237E  221E               	addwfc	?___wmul+1,f,c
 14450  002380  0ED7               	movlw	low _font
 14451  002382  241D               	addwf	?___wmul,w,c
 14452  002384  6EF6               	movwf	tblptrl,c
 14453  002386  0EFC               	movlw	high _font
 14454  002388  D014               	goto	L24
 14455  00238A                     l6205:
 14456                           
 14457                           ;ST7735_TFT.c: 492: else
 14458                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 14459  00238A  0EAD               	movlw	173
 14460  00238C  242D               	addwf	drawChar@c,w,c
 14461  00238E  6E1D               	movwf	___wmul@multiplier,c
 14462  002390  6A1E               	clrf	___wmul@multiplier+1,c
 14463  002392  0EFF               	movlw	255
 14464  002394  221E               	addwfc	___wmul@multiplier+1,f,c
 14465  002396  0E00               	movlw	0
 14466  002398  6E20               	movwf	___wmul@multiplicand+1,c
 14467  00239A  0E05               	movlw	5
 14468  00239C  6E1F               	movwf	___wmul@multiplicand,c
 14469  00239E  EC01  F01F         	call	___wmul	;wreg free
 14470  0023A2  5036               	movf	drawChar@i,w,c
 14471  0023A4  261D               	addwf	?___wmul,f,c
 14472  0023A6  0E00               	movlw	0
 14473  0023A8  221E               	addwfc	?___wmul+1,f,c
 14474  0023AA  0ED6               	movlw	low _font2
 14475  0023AC  241D               	addwf	?___wmul,w,c
 14476  0023AE  6EF6               	movwf	tblptrl,c
 14477  0023B0  0EFD               	movlw	high _font2
 14478  0023B2                     L24:
 14479  0023B2  201E               	addwfc	?___wmul+1,w,c
 14480  0023B4  6EF7               	movwf	tblptrh,c
 14481  0023B6                     	if	0	;There are less than 3 active tblptr bytes
 14482  0023B6                     	endif
 14483  0023B6  0008               	tblrd		*
 14484  0023B8  CFF5 F033          	movff	tablat,drawChar@line
 14485  0023BC  D000               	goto	l6207
 14486  0023BE                     l6207:
 14487                           
 14488                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 14489  0023BE  0E00               	movlw	0
 14490  0023C0  6E35               	movwf	drawChar@j,c
 14491  0023C2                     l6209:
 14492  0023C2  0E06               	movlw	6
 14493  0023C4  6435               	cpfsgt	drawChar@j,c
 14494  0023C6  D001               	goto	l236
 14495  0023C8  D053               	goto	l6233
 14496  0023CA                     l236:
 14497                           
 14498                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 14499  0023CA  A033               	btfss	drawChar@line,0,c
 14500  0023CC  D023               	goto	l6219
 14501                           
 14502                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 14503  0023CE  0432               	decf	drawChar@size,w,c
 14504  0023D0  A4D8               	btfss	status,2,c
 14505  0023D2  D00C               	goto	l6217
 14506  0023D4  502C               	movf	drawChar@y,w,c
 14507  0023D6  2435               	addwf	drawChar@j,w,c
 14508  0023D8  6E16               	movwf	drawPixel@y,c
 14509  0023DA  C02E  F017         	movff	drawChar@color,drawPixel@color
 14510  0023DE  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 14511  0023E2  5034               	movf	drawChar@x,w,c
 14512  0023E4  2436               	addwf	drawChar@i,w,c
 14513  0023E6  ECBF  F01E         	call	_drawPixel
 14514  0023EA  D03E               	goto	l6227
 14515  0023EC                     l6217:
 14516                           
 14517                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 14518  0023EC  5035               	movf	drawChar@j,w,c
 14519  0023EE  0232               	mulwf	drawChar@size,c
 14520  0023F0  50F3               	movf	prodl,w,c
 14521  0023F2  242C               	addwf	drawChar@y,w,c
 14522  0023F4  6E21               	movwf	fillRect@y,c
 14523  0023F6  C032  F022         	movff	drawChar@size,fillRect@w
 14524  0023FA  C032  F023         	movff	drawChar@size,fillRect@h
 14525  0023FE  C02E  F024         	movff	drawChar@color,fillRect@color
 14526  002402  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 14527  002406  5036               	movf	drawChar@i,w,c
 14528  002408  0232               	mulwf	drawChar@size,c
 14529  00240A  50F3               	movf	prodl,w,c
 14530  00240C  2434               	addwf	drawChar@x,w,c
 14531  00240E  EC5A  F01D         	call	_fillRect
 14532                           
 14533                           ;ST7735_TFT.c: 498: }
 14534  002412  D02A               	goto	l6227
 14535  002414                     l6219:
 14536                           
 14537                           ;ST7735_TFT.c: 499: else if(bg != color) {
 14538  002414  502E               	movf	drawChar@color,w,c
 14539  002416  1830               	xorwf	drawChar@bg,w,c
 14540  002418  E104               	bnz	u5980
 14541  00241A  502F               	movf	drawChar@color+1,w,c
 14542  00241C  1831               	xorwf	drawChar@bg+1,w,c
 14543  00241E  B4D8               	btfsc	status,2,c
 14544  002420  D023               	goto	l6227
 14545  002422                     u5980:
 14546                           
 14547                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 14548  002422  0432               	decf	drawChar@size,w,c
 14549  002424  A4D8               	btfss	status,2,c
 14550  002426  D00C               	goto	l6225
 14551  002428  502C               	movf	drawChar@y,w,c
 14552  00242A  2435               	addwf	drawChar@j,w,c
 14553  00242C  6E16               	movwf	drawPixel@y,c
 14554  00242E  C030  F017         	movff	drawChar@bg,drawPixel@color
 14555  002432  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 14556  002436  5034               	movf	drawChar@x,w,c
 14557  002438  2436               	addwf	drawChar@i,w,c
 14558  00243A  ECBF  F01E         	call	_drawPixel
 14559  00243E  D014               	goto	l6227
 14560  002440                     l6225:
 14561                           
 14562                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 14563  002440  5035               	movf	drawChar@j,w,c
 14564  002442  0232               	mulwf	drawChar@size,c
 14565  002444  50F3               	movf	prodl,w,c
 14566  002446  242C               	addwf	drawChar@y,w,c
 14567  002448  6E21               	movwf	fillRect@y,c
 14568  00244A  C032  F022         	movff	drawChar@size,fillRect@w
 14569  00244E  C032  F023         	movff	drawChar@size,fillRect@h
 14570  002452  C030  F024         	movff	drawChar@bg,fillRect@color
 14571  002456  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 14572  00245A  5036               	movf	drawChar@i,w,c
 14573  00245C  0232               	mulwf	drawChar@size,c
 14574  00245E  50F3               	movf	prodl,w,c
 14575  002460  2434               	addwf	drawChar@x,w,c
 14576  002462  EC5A  F01D         	call	_fillRect
 14577  002466  D000               	goto	l6227
 14578  002468                     l6227:
 14579  002468  2A35               	incf	drawChar@j,f,c
 14580  00246A  90D8               	bcf	status,0,c
 14581  00246C  3233               	rrcf	drawChar@line,f,c
 14582  00246E  D7A9               	goto	l6209
 14583  002470                     l6233:
 14584  002470  2A36               	incf	drawChar@i,f,c
 14585  002472  D76F               	goto	l6197
 14586  002474                     l227:
 14587  002474  0012               	return		;funcret
 14588  002476                     __end_of_drawChar:
 14589                           	opt stack 0
 14590                           tblptru	equ	0xFF8
 14591                           tblptrh	equ	0xFF7
 14592                           tblptrl	equ	0xFF6
 14593                           tablat	equ	0xFF5
 14594                           prodh	equ	0xFF4
 14595                           prodl	equ	0xFF3
 14596                           intcon	equ	0xFF2
 14597                           intcon2	equ	0xFF1
 14598                           intcon3	equ	0xFF0
 14599                           postinc0	equ	0xFEE
 14600                           wreg	equ	0xFE8
 14601                           postdec1	equ	0xFE5
 14602                           fsr1l	equ	0xFE1
 14603                           indf2	equ	0xFDF
 14604                           postinc2	equ	0xFDE
 14605                           postdec2	equ	0xFDD
 14606                           fsr2h	equ	0xFDA
 14607                           fsr2l	equ	0xFD9
 14608                           status	equ	0xFD8
 14609                           
 14610 ;; *************** function _fillRect *****************
 14611 ;; Defined at:
 14612 ;;		line 470 in file "ST7735_TFT.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  x               1    wreg     unsigned char 
 14615 ;;  y               1   32[COMRAM] unsigned char 
 14616 ;;  w               1   33[COMRAM] unsigned char 
 14617 ;;  h               1   34[COMRAM] unsigned char 
 14618 ;;  color           2   35[COMRAM] unsigned int 
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;  x               1   40[COMRAM] unsigned char 
 14621 ;;  i               2   41[COMRAM] int 
 14622 ;; Return value:  Size  Location     Type
 14623 ;;		None               void
 14624 ;; Registers used:
 14625 ;;		wreg, status,2, status,0, cstack
 14626 ;; Tracked objects:
 14627 ;;		On entry : 0/0
 14628 ;;		On exit  : 0/0
 14629 ;;		Unchanged: 0/0
 14630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14631 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14632 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14633 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14634 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14635 ;;Total ram usage:       11 bytes
 14636 ;; Hardware stack levels used:    1
 14637 ;; Hardware stack levels required when called:    6
 14638 ;; This function calls:
 14639 ;;		_drawFastVLine
 14640 ;; This function is called by:
 14641 ;;		_drawChar
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text62
 14646  003AB4                     __ptext62:
 14647                           	opt stack 0
 14648  003AB4                     _fillRect:
 14649                           	opt stack 19
 14650                           
 14651                           ;incstack = 0
 14652                           ;fillRect@x stored from wreg
 14653  003AB4  6E29               	movwf	fillRect@x,c
 14654                           
 14655                           ;ST7735_TFT.c: 472: signed int i;
 14656                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 14657  003AB6  C029  F02A         	movff	fillRect@x,fillRect@i
 14658  003ABA  6A2B               	clrf	fillRect@i+1,c
 14659  003ABC  D00E               	goto	l5927
 14660  003ABE                     l5923:
 14661                           
 14662                           ;ST7735_TFT.c: 475: {
 14663                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 14664  003ABE  C021  F016         	movff	fillRect@y,drawFastVLine@y
 14665  003AC2  C023  F017         	movff	fillRect@h,drawFastVLine@h
 14666  003AC6  C024  F018         	movff	fillRect@color,drawFastVLine@color
 14667  003ACA  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 14668  003ACE  502A               	movf	fillRect@i,w,c
 14669  003AD0  EC3D  F01A         	call	_drawFastVLine
 14670  003AD4  4A2A               	infsnz	fillRect@i,f,c
 14671  003AD6  2A2B               	incf	fillRect@i+1,f,c
 14672  003AD8  D000               	goto	l5927
 14673  003ADA                     l5927:
 14674  003ADA  5022               	movf	fillRect@w,w,c
 14675  003ADC  C029  F026         	movff	fillRect@x,??_fillRect
 14676  003AE0  6A27               	clrf	(??_fillRect+1)& (0+255),c
 14677  003AE2  2626               	addwf	??_fillRect,f,c
 14678  003AE4  0E00               	movlw	0
 14679  003AE6  2227               	addwfc	??_fillRect+1,f,c
 14680  003AE8  5026               	movf	??_fillRect,w,c
 14681  003AEA  5C2A               	subwf	fillRect@i,w,c
 14682  003AEC  502B               	movf	fillRect@i+1,w,c
 14683  003AEE  0A80               	xorlw	128
 14684  003AF0  6E28               	movwf	(??_fillRect+2)& (0+255),c
 14685  003AF2  5027               	movf	??_fillRect+1,w,c
 14686  003AF4  0A80               	xorlw	128
 14687  003AF6  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 14688  003AF8  A0D8               	btfss	status,0,c
 14689  003AFA  D7E1               	goto	l5923
 14690  003AFC  0012               	return		;funcret
 14691  003AFE                     __end_of_fillRect:
 14692                           	opt stack 0
 14693                           tblptru	equ	0xFF8
 14694                           tblptrh	equ	0xFF7
 14695                           tblptrl	equ	0xFF6
 14696                           tablat	equ	0xFF5
 14697                           prodh	equ	0xFF4
 14698                           prodl	equ	0xFF3
 14699                           intcon	equ	0xFF2
 14700                           intcon2	equ	0xFF1
 14701                           intcon3	equ	0xFF0
 14702                           postinc0	equ	0xFEE
 14703                           wreg	equ	0xFE8
 14704                           postdec1	equ	0xFE5
 14705                           fsr1l	equ	0xFE1
 14706                           indf2	equ	0xFDF
 14707                           postinc2	equ	0xFDE
 14708                           postdec2	equ	0xFDD
 14709                           fsr2h	equ	0xFDA
 14710                           fsr2l	equ	0xFD9
 14711                           status	equ	0xFD8
 14712                           
 14713 ;; *************** function _drawFastVLine *****************
 14714 ;; Defined at:
 14715 ;;		line 449 in file "ST7735_TFT.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;  x               1    wreg     unsigned char 
 14718 ;;  y               1   21[COMRAM] unsigned char 
 14719 ;;  h               1   22[COMRAM] unsigned char 
 14720 ;;  color           2   23[COMRAM] unsigned int 
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  x               1   31[COMRAM] unsigned char 
 14723 ;;  lo              1   30[COMRAM] unsigned char 
 14724 ;;  hi              1   29[COMRAM] unsigned char 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;		None               void
 14727 ;; Registers used:
 14728 ;;		wreg, status,2, status,0, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14736 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14737 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14738 ;;Total ram usage:       11 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    5
 14741 ;; This function calls:
 14742 ;;		_setAddrWindow
 14743 ;;		_spiwrite
 14744 ;; This function is called by:
 14745 ;;		_fillRect
 14746 ;;		_fillCircleHelper
 14747 ;;		_fillCircle
 14748 ;;		_drawRect
 14749 ;; This function uses a non-reentrant model
 14750 ;;
 14751                           
 14752                           	psect	text63
 14753  00347A                     __ptext63:
 14754                           	opt stack 0
 14755  00347A                     _drawFastVLine:
 14756                           	opt stack 19
 14757                           
 14758                           ;incstack = 0
 14759                           ;drawFastVLine@x stored from wreg
 14760  00347A  6E20               	movwf	drawFastVLine@x,c
 14761                           
 14762                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 14763                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 14764  00347C  0E80               	movlw	128
 14765  00347E  6020               	cpfslt	drawFastVLine@x,c
 14766  003480  D03F               	goto	l211
 14767  003482  0E9F               	movlw	159
 14768  003484  6416               	cpfsgt	drawFastVLine@y,c
 14769  003486  D001               	goto	l5857
 14770                           
 14771                           ;ST7735_TFT.c: 453: return;
 14772  003488  D03B               	goto	l211
 14773  00348A                     l5857:
 14774                           
 14775                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 14776  00348A  0EFF               	movlw	255
 14777  00348C  6E1A               	movwf	??_drawFastVLine& (0+255),c
 14778  00348E  0EFF               	movlw	255
 14779  003490  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 14780  003492  5017               	movf	drawFastVLine@h,w,c
 14781  003494  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 14782  003498  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 14783  00349A  261C               	addwf	??_drawFastVLine+2,f,c
 14784  00349C  0E00               	movlw	0
 14785  00349E  221D               	addwfc	??_drawFastVLine+3,f,c
 14786  0034A0  501A               	movf	??_drawFastVLine,w,c
 14787  0034A2  261C               	addwf	??_drawFastVLine+2,f,c
 14788  0034A4  501B               	movf	??_drawFastVLine+1,w,c
 14789  0034A6  221D               	addwfc	??_drawFastVLine+3,f,c
 14790  0034A8  BE1D               	btfsc	??_drawFastVLine+3,7,c
 14791  0034AA  D00B               	goto	l5861
 14792  0034AC  501D               	movf	??_drawFastVLine+3,w,c
 14793  0034AE  E104               	bnz	u5260
 14794  0034B0  0EA0               	movlw	160
 14795  0034B2  5C1C               	subwf	??_drawFastVLine+2,w,c
 14796  0034B4  A0D8               	btfss	status,0,c
 14797  0034B6  D005               	goto	l5861
 14798  0034B8                     u5260:
 14799                           
 14800                           ;ST7735_TFT.c: 455: h = 160 - y;
 14801  0034B8  5016               	movf	drawFastVLine@y,w,c
 14802  0034BA  0800               	sublw	0
 14803  0034BC  0FA0               	addlw	160
 14804  0034BE  6E17               	movwf	drawFastVLine@h,c
 14805  0034C0  D000               	goto	l5861
 14806  0034C2                     l5861:
 14807                           
 14808                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 14809  0034C2  5019               	movf	drawFastVLine@color+1,w,c
 14810  0034C4  6E1E               	movwf	drawFastVLine@hi,c
 14811  0034C6  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 14812                           
 14813                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 14814  0034CA  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 14815  0034CE  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 14816  0034D2  5016               	movf	drawFastVLine@y,w,c
 14817  0034D4  2417               	addwf	drawFastVLine@h,w,c
 14818  0034D6  6E1A               	movwf	??_drawFastVLine& (0+255),c
 14819  0034D8  041A               	decf	??_drawFastVLine,w,c
 14820  0034DA  6E14               	movwf	setAddrWindow@y1,c
 14821  0034DC  5020               	movf	drawFastVLine@x,w,c
 14822  0034DE  EC33  F01D         	call	_setAddrWindow
 14823                           
 14824                           ;ST7735_TFT.c: 458: PORTCbits.RC2 = 1;
 14825  0034E2  8482               	bsf	3970,2,c	;volatile
 14826                           
 14827                           ;ST7735_TFT.c: 459: PORTCbits.RC4 = 0;
 14828  0034E4  9882               	bcf	3970,4,c	;volatile
 14829                           
 14830                           ;ST7735_TFT.c: 461: while (h--) {
 14831  0034E6  D007               	goto	l5873
 14832  0034E8                     l5871:
 14833                           
 14834                           ;ST7735_TFT.c: 462: spiwrite(hi);
 14835  0034E8  501E               	movf	drawFastVLine@hi,w,c
 14836  0034EA  ECA6  F01F         	call	_spiwrite
 14837                           
 14838                           ;ST7735_TFT.c: 463: spiwrite(lo);
 14839  0034EE  501F               	movf	drawFastVLine@lo,w,c
 14840  0034F0  ECA6  F01F         	call	_spiwrite
 14841  0034F4  D000               	goto	l5873
 14842  0034F6                     l5873:
 14843  0034F6  0617               	decf	drawFastVLine@h,f,c
 14844  0034F8  2817               	incf	drawFastVLine@h,w,c
 14845  0034FA  A4D8               	btfss	status,2,c
 14846  0034FC  D7F5               	goto	l5871
 14847                           
 14848                           ;ST7735_TFT.c: 464: }
 14849                           ;ST7735_TFT.c: 465: PORTCbits.RC4 = 1;
 14850  0034FE  8882               	bsf	3970,4,c	;volatile
 14851  003500                     l211:
 14852  003500  0012               	return		;funcret
 14853  003502                     __end_of_drawFastVLine:
 14854                           	opt stack 0
 14855                           tblptru	equ	0xFF8
 14856                           tblptrh	equ	0xFF7
 14857                           tblptrl	equ	0xFF6
 14858                           tablat	equ	0xFF5
 14859                           prodh	equ	0xFF4
 14860                           prodl	equ	0xFF3
 14861                           intcon	equ	0xFF2
 14862                           intcon2	equ	0xFF1
 14863                           intcon3	equ	0xFF0
 14864                           postinc0	equ	0xFEE
 14865                           wreg	equ	0xFE8
 14866                           postdec1	equ	0xFE5
 14867                           fsr1l	equ	0xFE1
 14868                           indf2	equ	0xFDF
 14869                           postinc2	equ	0xFDE
 14870                           postdec2	equ	0xFDD
 14871                           fsr2h	equ	0xFDA
 14872                           fsr2l	equ	0xFD9
 14873                           status	equ	0xFD8
 14874                           
 14875 ;; *************** function _drawPixel *****************
 14876 ;; Defined at:
 14877 ;;		line 440 in file "ST7735_TFT.c"
 14878 ;; Parameters:    Size  Location     Type
 14879 ;;  x               1    wreg     unsigned char 
 14880 ;;  y               1   21[COMRAM] unsigned char 
 14881 ;;  color           2   22[COMRAM] unsigned int 
 14882 ;; Auto vars:     Size  Location     Type
 14883 ;;  x               1   24[COMRAM] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;		None               void
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0, cstack
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14893 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14896 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;Total ram usage:        4 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    5
 14900 ;; This function calls:
 14901 ;;		_setAddrWindow
 14902 ;;		_write_data
 14903 ;; This function is called by:
 14904 ;;		_drawChar
 14905 ;;		_drawCircle
 14906 ;;		_drawCircleHelper
 14907 ;; This function uses a non-reentrant model
 14908 ;;
 14909                           
 14910                           	psect	text64
 14911  003D7E                     __ptext64:
 14912                           	opt stack 0
 14913  003D7E                     _drawPixel:
 14914                           	opt stack 20
 14915                           
 14916                           ;incstack = 0
 14917                           ;drawPixel@x stored from wreg
 14918  003D7E  6E19               	movwf	drawPixel@x,c
 14919                           
 14920                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 14921  003D80  0E80               	movlw	128
 14922  003D82  6019               	cpfslt	drawPixel@x,c
 14923  003D84  D013               	goto	l205
 14924  003D86  0E9F               	movlw	159
 14925  003D88  6416               	cpfsgt	drawPixel@y,c
 14926  003D8A  D001               	goto	l5915
 14927                           
 14928                           ;ST7735_TFT.c: 443: return;
 14929  003D8C  D00F               	goto	l205
 14930  003D8E                     l5915:
 14931                           
 14932                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 14933  003D8E  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 14934  003D92  2819               	incf	drawPixel@x,w,c
 14935  003D94  6E13               	movwf	setAddrWindow@x1,c
 14936  003D96  2816               	incf	drawPixel@y,w,c
 14937  003D98  6E14               	movwf	setAddrWindow@y1,c
 14938  003D9A  5019               	movf	drawPixel@x,w,c
 14939  003D9C  EC33  F01D         	call	_setAddrWindow
 14940                           
 14941                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 14942  003DA0  5018               	movf	drawPixel@color+1,w,c
 14943  003DA2  ECC2  F01F         	call	_write_data
 14944                           
 14945                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 14946  003DA6  5017               	movf	drawPixel@color,w,c
 14947  003DA8  ECC2  F01F         	call	_write_data
 14948  003DAC                     l205:
 14949  003DAC  0012               	return		;funcret
 14950  003DAE                     __end_of_drawPixel:
 14951                           	opt stack 0
 14952                           tblptru	equ	0xFF8
 14953                           tblptrh	equ	0xFF7
 14954                           tblptrl	equ	0xFF6
 14955                           tablat	equ	0xFF5
 14956                           prodh	equ	0xFF4
 14957                           prodl	equ	0xFF3
 14958                           intcon	equ	0xFF2
 14959                           intcon2	equ	0xFF1
 14960                           intcon3	equ	0xFF0
 14961                           postinc0	equ	0xFEE
 14962                           wreg	equ	0xFE8
 14963                           postdec1	equ	0xFE5
 14964                           fsr1l	equ	0xFE1
 14965                           indf2	equ	0xFDF
 14966                           postinc2	equ	0xFDE
 14967                           postdec2	equ	0xFDD
 14968                           fsr2h	equ	0xFDA
 14969                           fsr2l	equ	0xFD9
 14970                           status	equ	0xFD8
 14971                           
 14972 ;; *************** function _setAddrWindow *****************
 14973 ;; Defined at:
 14974 ;;		line 425 in file "ST7735_TFT.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;  x0              1    wreg     unsigned char 
 14977 ;;  y0              1   17[COMRAM] unsigned char 
 14978 ;;  x1              1   18[COMRAM] unsigned char 
 14979 ;;  y1              1   19[COMRAM] unsigned char 
 14980 ;; Auto vars:     Size  Location     Type
 14981 ;;  x0              1   20[COMRAM] unsigned char 
 14982 ;; Return value:  Size  Location     Type
 14983 ;;		None               void
 14984 ;; Registers used:
 14985 ;;		wreg, status,2, status,0, cstack
 14986 ;; Tracked objects:
 14987 ;;		On entry : 0/0
 14988 ;;		On exit  : 0/0
 14989 ;;		Unchanged: 0/0
 14990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14991 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14994 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14995 ;;Total ram usage:        4 bytes
 14996 ;; Hardware stack levels used:    1
 14997 ;; Hardware stack levels required when called:    4
 14998 ;; This function calls:
 14999 ;;		_write_command
 15000 ;;		_write_data
 15001 ;; This function is called by:
 15002 ;;		_drawPixel
 15003 ;;		_drawFastVLine
 15004 ;;		_fillRectangle
 15005 ;;		_drawFastHLine
 15006 ;; This function uses a non-reentrant model
 15007 ;;
 15008                           
 15009                           	psect	text65
 15010  003A66                     __ptext65:
 15011                           	opt stack 0
 15012  003A66                     _setAddrWindow:
 15013                           	opt stack 19
 15014                           
 15015                           ;incstack = 0
 15016                           ;setAddrWindow@x0 stored from wreg
 15017  003A66  6E15               	movwf	setAddrWindow@x0,c
 15018                           
 15019                           ;ST7735_TFT.c: 427: write_command(0x2A);
 15020  003A68  0E2A               	movlw	42
 15021  003A6A  ECCA  F01F         	call	_write_command
 15022                           
 15023                           ;ST7735_TFT.c: 428: write_data(0);
 15024  003A6E  0E00               	movlw	0
 15025  003A70  ECC2  F01F         	call	_write_data
 15026                           
 15027                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 15028  003A74  5015               	movf	setAddrWindow@x0,w,c
 15029  003A76  2469               	addwf	_colstart,w,c
 15030  003A78  ECC2  F01F         	call	_write_data
 15031                           
 15032                           ;ST7735_TFT.c: 430: write_data(0);
 15033  003A7C  0E00               	movlw	0
 15034  003A7E  ECC2  F01F         	call	_write_data
 15035                           
 15036                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 15037  003A82  5013               	movf	setAddrWindow@x1,w,c
 15038  003A84  2469               	addwf	_colstart,w,c
 15039  003A86  ECC2  F01F         	call	_write_data
 15040                           
 15041                           ;ST7735_TFT.c: 432: write_command(0x2B);
 15042  003A8A  0E2B               	movlw	43
 15043  003A8C  ECCA  F01F         	call	_write_command
 15044                           
 15045                           ;ST7735_TFT.c: 433: write_data(0);
 15046  003A90  0E00               	movlw	0
 15047  003A92  ECC2  F01F         	call	_write_data
 15048                           
 15049                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 15050  003A96  5012               	movf	setAddrWindow@y0,w,c
 15051  003A98  246B               	addwf	_rowstart,w,c
 15052  003A9A  ECC2  F01F         	call	_write_data
 15053                           
 15054                           ;ST7735_TFT.c: 435: write_data(0);
 15055  003A9E  0E00               	movlw	0
 15056  003AA0  ECC2  F01F         	call	_write_data
 15057                           
 15058                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 15059  003AA4  5014               	movf	setAddrWindow@y1,w,c
 15060  003AA6  246B               	addwf	_rowstart,w,c
 15061  003AA8  ECC2  F01F         	call	_write_data
 15062                           
 15063                           ;ST7735_TFT.c: 437: write_command(0x2C);
 15064  003AAC  0E2C               	movlw	44
 15065  003AAE  ECCA  F01F         	call	_write_command
 15066  003AB2  0012               	return		;funcret
 15067  003AB4                     __end_of_setAddrWindow:
 15068                           	opt stack 0
 15069                           tblptru	equ	0xFF8
 15070                           tblptrh	equ	0xFF7
 15071                           tblptrl	equ	0xFF6
 15072                           tablat	equ	0xFF5
 15073                           prodh	equ	0xFF4
 15074                           prodl	equ	0xFF3
 15075                           intcon	equ	0xFF2
 15076                           intcon2	equ	0xFF1
 15077                           intcon3	equ	0xFF0
 15078                           postinc0	equ	0xFEE
 15079                           wreg	equ	0xFE8
 15080                           postdec1	equ	0xFE5
 15081                           fsr1l	equ	0xFE1
 15082                           indf2	equ	0xFDF
 15083                           postinc2	equ	0xFDE
 15084                           postdec2	equ	0xFDD
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           
 15089 ;; *************** function _write_data *****************
 15090 ;; Defined at:
 15091 ;;		line 242 in file "ST7735_TFT.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;  data_           1    wreg     unsigned char 
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;  data_           1   16[COMRAM] unsigned char 
 15096 ;; Return value:  Size  Location     Type
 15097 ;;		None               void
 15098 ;; Registers used:
 15099 ;;		wreg, status,2, cstack
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : 0/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;Total ram usage:        1 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    3
 15112 ;; This function calls:
 15113 ;;		_spiwrite
 15114 ;; This function is called by:
 15115 ;;		_Rcmd1
 15116 ;;		_Rcmd2red
 15117 ;;		_Rcmd3
 15118 ;;		_setAddrWindow
 15119 ;;		_drawPixel
 15120 ;;		_TFT_GreenTab_Initialize
 15121 ;;		_Bcmd
 15122 ;;		_setScrollDefinition
 15123 ;;		_Rcmd2green
 15124 ;;		_VerticalScroll
 15125 ;; This function uses a non-reentrant model
 15126 ;;
 15127                           
 15128                           	psect	text66
 15129  003F84                     __ptext66:
 15130                           	opt stack 0
 15131  003F84                     _write_data:
 15132                           	opt stack 19
 15133                           
 15134                           ;incstack = 0
 15135                           ;write_data@data_ stored from wreg
 15136  003F84  6E11               	movwf	write_data@data_,c
 15137                           
 15138                           ;ST7735_TFT.c: 244: PORTCbits.RC4 = 0;
 15139  003F86  9882               	bcf	3970,4,c	;volatile
 15140                           
 15141                           ;ST7735_TFT.c: 245: PORTCbits.RC2 = 1;
 15142  003F88  8482               	bsf	3970,2,c	;volatile
 15143                           
 15144                           ;ST7735_TFT.c: 246: spiwrite(data_);
 15145  003F8A  5011               	movf	write_data@data_,w,c
 15146  003F8C  ECA6  F01F         	call	_spiwrite
 15147                           
 15148                           ;ST7735_TFT.c: 247: PORTCbits.RC4 = 1;
 15149  003F90  8882               	bsf	3970,4,c	;volatile
 15150  003F92  0012               	return		;funcret
 15151  003F94                     __end_of_write_data:
 15152                           	opt stack 0
 15153                           tblptru	equ	0xFF8
 15154                           tblptrh	equ	0xFF7
 15155                           tblptrl	equ	0xFF6
 15156                           tablat	equ	0xFF5
 15157                           prodh	equ	0xFF4
 15158                           prodl	equ	0xFF3
 15159                           intcon	equ	0xFF2
 15160                           intcon2	equ	0xFF1
 15161                           intcon3	equ	0xFF0
 15162                           postinc0	equ	0xFEE
 15163                           wreg	equ	0xFE8
 15164                           postdec1	equ	0xFE5
 15165                           fsr1l	equ	0xFE1
 15166                           indf2	equ	0xFDF
 15167                           postinc2	equ	0xFDE
 15168                           postdec2	equ	0xFDD
 15169                           fsr2h	equ	0xFDA
 15170                           fsr2l	equ	0xFD9
 15171                           status	equ	0xFD8
 15172                           
 15173 ;; *************** function _write_command *****************
 15174 ;; Defined at:
 15175 ;;		line 231 in file "ST7735_TFT.c"
 15176 ;; Parameters:    Size  Location     Type
 15177 ;;  cmd_            1    wreg     unsigned char 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  cmd_            1   16[COMRAM] unsigned char 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;		None               void
 15182 ;; Registers used:
 15183 ;;		wreg, status,2, cstack
 15184 ;; Tracked objects:
 15185 ;;		On entry : 0/0
 15186 ;;		On exit  : 0/0
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15193 ;;Total ram usage:        1 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    3
 15196 ;; This function calls:
 15197 ;;		_spiwrite
 15198 ;; This function is called by:
 15199 ;;		_Rcmd1
 15200 ;;		_Rcmd2red
 15201 ;;		_Rcmd3
 15202 ;;		_setAddrWindow
 15203 ;;		_TFT_GreenTab_Initialize
 15204 ;;		_Bcmd
 15205 ;;		_setScrollDefinition
 15206 ;;		_Rcmd2green
 15207 ;;		_VerticalScroll
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           	psect	text67
 15212  003F94                     __ptext67:
 15213                           	opt stack 0
 15214  003F94                     _write_command:
 15215                           	opt stack 19
 15216                           
 15217                           ;incstack = 0
 15218                           ;write_command@cmd_ stored from wreg
 15219  003F94  6E11               	movwf	write_command@cmd_,c
 15220                           
 15221                           ;ST7735_TFT.c: 233: PORTCbits.RC4 = 0;
 15222  003F96  9882               	bcf	3970,4,c	;volatile
 15223                           
 15224                           ;ST7735_TFT.c: 235: PORTCbits.RC2 = 0;
 15225  003F98  9482               	bcf	3970,2,c	;volatile
 15226                           
 15227                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 15228  003F9A  5011               	movf	write_command@cmd_,w,c
 15229  003F9C  ECA6  F01F         	call	_spiwrite
 15230                           
 15231                           ;ST7735_TFT.c: 238: PORTCbits.RC4 = 1;
 15232  003FA0  8882               	bsf	3970,4,c	;volatile
 15233  003FA2  0012               	return		;funcret
 15234  003FA4                     __end_of_write_command:
 15235                           	opt stack 0
 15236                           tblptru	equ	0xFF8
 15237                           tblptrh	equ	0xFF7
 15238                           tblptrl	equ	0xFF6
 15239                           tablat	equ	0xFF5
 15240                           prodh	equ	0xFF4
 15241                           prodl	equ	0xFF3
 15242                           intcon	equ	0xFF2
 15243                           intcon2	equ	0xFF1
 15244                           intcon3	equ	0xFF0
 15245                           postinc0	equ	0xFEE
 15246                           wreg	equ	0xFE8
 15247                           postdec1	equ	0xFE5
 15248                           fsr1l	equ	0xFE1
 15249                           indf2	equ	0xFDF
 15250                           postinc2	equ	0xFDE
 15251                           postdec2	equ	0xFDD
 15252                           fsr2h	equ	0xFDA
 15253                           fsr2l	equ	0xFD9
 15254                           status	equ	0xFD8
 15255                           
 15256 ;; *************** function _spiwrite *****************
 15257 ;; Defined at:
 15258 ;;		line 222 in file "ST7735_TFT.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;  spidata         1    wreg     unsigned char 
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;  spidata         1   15[COMRAM] unsigned char 
 15263 ;;  x               1   14[COMRAM] unsigned char 
 15264 ;; Return value:  Size  Location     Type
 15265 ;;		None               void
 15266 ;; Registers used:
 15267 ;;		wreg
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15277 ;;Total ram usage:        2 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:    2
 15280 ;; This function calls:
 15281 ;;		Nothing
 15282 ;; This function is called by:
 15283 ;;		_write_command
 15284 ;;		_write_data
 15285 ;;		_drawFastVLine
 15286 ;;		_fillRectangle
 15287 ;;		_drawFastHLine
 15288 ;; This function uses a non-reentrant model
 15289 ;;
 15290                           
 15291                           	psect	text68
 15292  003F4C                     __ptext68:
 15293                           	opt stack 0
 15294  003F4C                     _spiwrite:
 15295                           	opt stack 21
 15296                           
 15297                           ;incstack = 0
 15298                           ;spiwrite@spidata stored from wreg
 15299  003F4C  6E10               	movwf	spiwrite@spidata,c
 15300                           
 15301                           ;ST7735_TFT.c: 224: char x;
 15302                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 15303  003F4E  969E               	bcf	3998,3,c	;volatile
 15304                           
 15305                           ;ST7735_TFT.c: 226: x = SSPBUF;
 15306  003F50  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 15307                           
 15308                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 15309  003F54  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 15310                           
 15311                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 15312  003F58  D000               	goto	l161
 15313  003F5A                     l161:
 15314  003F5A  A0C7               	btfss	4039,0,c	;volatile
 15315  003F5C  D7FE               	goto	l161
 15316  003F5E  0012               	return		;funcret
 15317  003F60                     __end_of_spiwrite:
 15318                           	opt stack 0
 15319                           tblptru	equ	0xFF8
 15320                           tblptrh	equ	0xFF7
 15321                           tblptrl	equ	0xFF6
 15322                           tablat	equ	0xFF5
 15323                           prodh	equ	0xFF4
 15324                           prodl	equ	0xFF3
 15325                           intcon	equ	0xFF2
 15326                           intcon2	equ	0xFF1
 15327                           intcon3	equ	0xFF0
 15328                           postinc0	equ	0xFEE
 15329                           wreg	equ	0xFE8
 15330                           postdec1	equ	0xFE5
 15331                           fsr1l	equ	0xFE1
 15332                           indf2	equ	0xFDF
 15333                           postinc2	equ	0xFDE
 15334                           postdec2	equ	0xFDD
 15335                           fsr2h	equ	0xFDA
 15336                           fsr2l	equ	0xFD9
 15337                           status	equ	0xFD8
 15338                           
 15339 ;; *************** function ___wmul *****************
 15340 ;; Defined at:
 15341 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;  multiplier      2   28[COMRAM] unsigned int 
 15344 ;;  multiplicand    2   30[COMRAM] unsigned int 
 15345 ;; Auto vars:     Size  Location     Type
 15346 ;;  product         2   32[COMRAM] unsigned int 
 15347 ;; Return value:  Size  Location     Type
 15348 ;;                  2   28[COMRAM] unsigned int 
 15349 ;; Registers used:
 15350 ;;		wreg, status,2, status,0, prodl, prodh
 15351 ;; Tracked objects:
 15352 ;;		On entry : 0/0
 15353 ;;		On exit  : 0/0
 15354 ;;		Unchanged: 0/0
 15355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15359 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15360 ;;Total ram usage:        6 bytes
 15361 ;; Hardware stack levels used:    1
 15362 ;; Hardware stack levels required when called:    2
 15363 ;; This function calls:
 15364 ;;		Nothing
 15365 ;; This function is called by:
 15366 ;;		_delay_ms
 15367 ;;		_drawChar
 15368 ;;		_update_LCD_misc
 15369 ;;		_fround
 15370 ;;		_scale
 15371 ;;		_printf
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           	psect	text69
 15376  003E02                     __ptext69:
 15377                           	opt stack 0
 15378  003E02                     ___wmul:
 15379                           	opt stack 23
 15380                           
 15381                           ;incstack = 0
 15382  003E02  501D               	movf	___wmul@multiplier,w,c
 15383  003E04  021F               	mulwf	___wmul@multiplicand,c
 15384  003E06  CFF3 F021          	movff	prodl,___wmul@product
 15385  003E0A  CFF4 F022          	movff	prodh,___wmul@product+1
 15386  003E0E  501D               	movf	___wmul@multiplier,w,c
 15387  003E10  0220               	mulwf	___wmul@multiplicand+1,c
 15388  003E12  50F3               	movf	prodl,w,c
 15389  003E14  2622               	addwf	___wmul@product+1,f,c
 15390  003E16  501E               	movf	___wmul@multiplier+1,w,c
 15391  003E18  021F               	mulwf	___wmul@multiplicand,c
 15392  003E1A  50F3               	movf	prodl,w,c
 15393  003E1C  2622               	addwf	___wmul@product+1,f,c
 15394  003E1E  C021  F01D         	movff	___wmul@product,?___wmul
 15395  003E22  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 15396  003E26  D000               	goto	l753
 15397  003E28                     l753:
 15398  003E28  0012               	return		;funcret
 15399  003E2A                     __end_of___wmul:
 15400                           	opt stack 0
 15401                           tblptru	equ	0xFF8
 15402                           tblptrh	equ	0xFF7
 15403                           tblptrl	equ	0xFF6
 15404                           tablat	equ	0xFF5
 15405                           prodh	equ	0xFF4
 15406                           prodl	equ	0xFF3
 15407                           intcon	equ	0xFF2
 15408                           intcon2	equ	0xFF1
 15409                           intcon3	equ	0xFF0
 15410                           postinc0	equ	0xFEE
 15411                           wreg	equ	0xFE8
 15412                           postdec1	equ	0xFE5
 15413                           fsr1l	equ	0xFE1
 15414                           indf2	equ	0xFDF
 15415                           postinc2	equ	0xFDE
 15416                           postdec2	equ	0xFDD
 15417                           fsr2h	equ	0xFDA
 15418                           fsr2l	equ	0xFD9
 15419                           status	equ	0xFD8
 15420                           
 15421 ;; *************** function _WAIT_HALF_SEC *****************
 15422 ;; Defined at:
 15423 ;;		line 503 in file "Lab9test.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;		None
 15426 ;; Auto vars:     Size  Location     Type
 15427 ;;		None
 15428 ;; Return value:  Size  Location     Type
 15429 ;;		None               void
 15430 ;; Registers used:
 15431 ;;		wreg, status,2
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15441 ;;Total ram usage:        0 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    2
 15444 ;; This function calls:
 15445 ;;		Nothing
 15446 ;; This function is called by:
 15447 ;;		_WAIT_1_SEC
 15448 ;;		_WAIT_1_SEC_W_BEEP
 15449 ;; This function uses a non-reentrant model
 15450 ;;
 15451                           
 15452                           	psect	text70
 15453  003ED8                     __ptext70:
 15454                           	opt stack 0
 15455  003ED8                     _WAIT_HALF_SEC:
 15456                           	opt stack 25
 15457                           
 15458                           ;Lab9test.c: 505: T0CON = 0x03;
 15459                           
 15460                           ;incstack = 0
 15461  003ED8  0E03               	movlw	3
 15462  003EDA  6ED5               	movwf	4053,c	;volatile
 15463                           
 15464                           ;Lab9test.c: 506: TMR0L = 0xDB;
 15465  003EDC  0EDB               	movlw	219
 15466  003EDE  6ED6               	movwf	4054,c	;volatile
 15467                           
 15468                           ;Lab9test.c: 507: TMR0H = 0xB;
 15469  003EE0  0E0B               	movlw	11
 15470  003EE2  6ED7               	movwf	4055,c	;volatile
 15471                           
 15472                           ;Lab9test.c: 508: INTCONbits.TMR0IF = 0;
 15473  003EE4  94F2               	bcf	intcon,2,c	;volatile
 15474                           
 15475                           ;Lab9test.c: 509: T0CONbits.TMR0ON = 1;
 15476  003EE6  8ED5               	bsf	4053,7,c	;volatile
 15477                           
 15478                           ;Lab9test.c: 510: while (INTCONbits.TMR0IF == 0);
 15479  003EE8  D000               	goto	l454
 15480  003EEA                     l454:
 15481  003EEA  A4F2               	btfss	intcon,2,c	;volatile
 15482  003EEC  D7FE               	goto	l454
 15483                           
 15484                           ;Lab9test.c: 511: T0CONbits.TMR0ON = 0;
 15485  003EEE  9ED5               	bcf	4053,7,c	;volatile
 15486  003EF0  0012               	return		;funcret
 15487  003EF2                     __end_of_WAIT_HALF_SEC:
 15488                           	opt stack 0
 15489                           tblptru	equ	0xFF8
 15490                           tblptrh	equ	0xFF7
 15491                           tblptrl	equ	0xFF6
 15492                           tablat	equ	0xFF5
 15493                           prodh	equ	0xFF4
 15494                           prodl	equ	0xFF3
 15495                           intcon	equ	0xFF2
 15496                           intcon2	equ	0xFF1
 15497                           intcon3	equ	0xFF0
 15498                           postinc0	equ	0xFEE
 15499                           wreg	equ	0xFE8
 15500                           postdec1	equ	0xFE5
 15501                           fsr1l	equ	0xFE1
 15502                           indf2	equ	0xFDF
 15503                           postinc2	equ	0xFDE
 15504                           postdec2	equ	0xFDD
 15505                           fsr2h	equ	0xFDA
 15506                           fsr2l	equ	0xFD9
 15507                           status	equ	0xFD8
 15508                           
 15509 ;; *************** function _Deactivate_Buzzer *****************
 15510 ;; Defined at:
 15511 ;;		line 550 in file "Lab9test.c"
 15512 ;; Parameters:    Size  Location     Type
 15513 ;;		None
 15514 ;; Auto vars:     Size  Location     Type
 15515 ;;		None
 15516 ;; Return value:  Size  Location     Type
 15517 ;;		None               void
 15518 ;; Registers used:
 15519 ;;		wreg, status,2
 15520 ;; Tracked objects:
 15521 ;;		On entry : 0/0
 15522 ;;		On exit  : 0/0
 15523 ;;		Unchanged: 0/0
 15524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15529 ;;Total ram usage:        0 bytes
 15530 ;; Hardware stack levels used:    1
 15531 ;; Hardware stack levels required when called:    2
 15532 ;; This function calls:
 15533 ;;		Nothing
 15534 ;; This function is called by:
 15535 ;;		_WAIT_1_SEC_W_BEEP
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           	psect	text71
 15540  003FD6                     __ptext71:
 15541                           	opt stack 0
 15542  003FD6                     _Deactivate_Buzzer:
 15543                           	opt stack 25
 15544                           
 15545                           ;Lab9test.c: 552: CCP2CON = 0x0;
 15546                           
 15547                           ;incstack = 0
 15548  003FD6  0E00               	movlw	0
 15549  003FD8  6EBA               	movwf	4026,c	;volatile
 15550                           
 15551                           ;Lab9test.c: 553: PORTBbits.RB3 = 0;
 15552  003FDA  9681               	bcf	3969,3,c	;volatile
 15553  003FDC  0012               	return		;funcret
 15554  003FDE                     __end_of_Deactivate_Buzzer:
 15555                           	opt stack 0
 15556                           tblptru	equ	0xFF8
 15557                           tblptrh	equ	0xFF7
 15558                           tblptrl	equ	0xFF6
 15559                           tablat	equ	0xFF5
 15560                           prodh	equ	0xFF4
 15561                           prodl	equ	0xFF3
 15562                           intcon	equ	0xFF2
 15563                           intcon2	equ	0xFF1
 15564                           intcon3	equ	0xFF0
 15565                           postinc0	equ	0xFEE
 15566                           wreg	equ	0xFE8
 15567                           postdec1	equ	0xFE5
 15568                           fsr1l	equ	0xFE1
 15569                           indf2	equ	0xFDF
 15570                           postinc2	equ	0xFDE
 15571                           postdec2	equ	0xFDD
 15572                           fsr2h	equ	0xFDA
 15573                           fsr2l	equ	0xFD9
 15574                           status	equ	0xFD8
 15575                           
 15576 ;; *************** function _Activate_Buzzer *****************
 15577 ;; Defined at:
 15578 ;;		line 542 in file "Lab9test.c"
 15579 ;; Parameters:    Size  Location     Type
 15580 ;;		None
 15581 ;; Auto vars:     Size  Location     Type
 15582 ;;		None
 15583 ;; Return value:  Size  Location     Type
 15584 ;;		None               void
 15585 ;; Registers used:
 15586 ;;		wreg, status,2
 15587 ;; Tracked objects:
 15588 ;;		On entry : 0/0
 15589 ;;		On exit  : 0/0
 15590 ;;		Unchanged: 0/0
 15591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15596 ;;Total ram usage:        0 bytes
 15597 ;; Hardware stack levels used:    1
 15598 ;; Hardware stack levels required when called:    2
 15599 ;; This function calls:
 15600 ;;		Nothing
 15601 ;; This function is called by:
 15602 ;;		_WAIT_1_SEC_W_BEEP
 15603 ;; This function uses a non-reentrant model
 15604 ;;
 15605                           
 15606                           	psect	text72
 15607  003F72                     __ptext72:
 15608                           	opt stack 0
 15609  003F72                     _Activate_Buzzer:
 15610                           	opt stack 25
 15611                           
 15612                           ;Lab9test.c: 544: PR2 = 0b11111001 ;
 15613                           
 15614                           ;incstack = 0
 15615  003F72  0EF9               	movlw	249
 15616  003F74  6ECB               	movwf	4043,c	;volatile
 15617                           
 15618                           ;Lab9test.c: 545: T2CON = 0b00000101 ;
 15619  003F76  0E05               	movlw	5
 15620  003F78  6ECA               	movwf	4042,c	;volatile
 15621                           
 15622                           ;Lab9test.c: 546: CCPR2L = 0b01001010 ;
 15623  003F7A  0E4A               	movlw	74
 15624  003F7C  6EBB               	movwf	4027,c	;volatile
 15625                           
 15626                           ;Lab9test.c: 547: CCP2CON = 0b00111100 ;
 15627  003F7E  0E3C               	movlw	60
 15628  003F80  6EBA               	movwf	4026,c	;volatile
 15629  003F82  0012               	return		;funcret
 15630  003F84                     __end_of_Activate_Buzzer:
 15631                           	opt stack 0
 15632                           tblptru	equ	0xFF8
 15633                           tblptrh	equ	0xFF7
 15634                           tblptrl	equ	0xFF6
 15635                           tablat	equ	0xFF5
 15636                           prodh	equ	0xFF4
 15637                           prodl	equ	0xFF3
 15638                           intcon	equ	0xFF2
 15639                           intcon2	equ	0xFF1
 15640                           intcon3	equ	0xFF0
 15641                           postinc0	equ	0xFEE
 15642                           wreg	equ	0xFE8
 15643                           postdec1	equ	0xFE5
 15644                           fsr1l	equ	0xFE1
 15645                           indf2	equ	0xFDF
 15646                           postinc2	equ	0xFDE
 15647                           postdec2	equ	0xFDD
 15648                           fsr2h	equ	0xFDA
 15649                           fsr2l	equ	0xFD9
 15650                           status	equ	0xFD8
 15651                           
 15652 ;; *************** function _chkisr *****************
 15653 ;; Defined at:
 15654 ;;		line 823 in file "Lab9test.c"
 15655 ;; Parameters:    Size  Location     Type
 15656 ;;		None
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;		None
 15659 ;; Return value:  Size  Location     Type
 15660 ;;		None               void
 15661 ;; Registers used:
 15662 ;;		wreg, status,2, status,0, cstack
 15663 ;; Tracked objects:
 15664 ;;		On entry : 0/0
 15665 ;;		On exit  : 0/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15670 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;Total ram usage:       14 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    1
 15675 ;; This function calls:
 15676 ;;		_INT0_ISR
 15677 ;;		_INT1_ISR
 15678 ;;		_INT2_ISR
 15679 ;; This function is called by:
 15680 ;;		Interrupt level 2
 15681 ;; This function uses a non-reentrant model
 15682 ;;
 15683                           
 15684                           	psect	intcode
 15685  000008                     __pintcode:
 15686                           	opt stack 0
 15687  000008                     _chkisr:
 15688                           	opt stack 18
 15689                           
 15690                           ;incstack = 0
 15691  000008  CFFA F001          	movff	pclath,??_chkisr
 15692  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 15693  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 15694  000014  EDC4  F01A         	call	int_func,f	;refresh shadow registers
 15695                           pclatu	equ	0xFFB
 15696                           pclath	equ	0xFFA
 15697                           tblptru	equ	0xFF8
 15698                           tblptrh	equ	0xFF7
 15699                           tblptrl	equ	0xFF6
 15700                           tablat	equ	0xFF5
 15701                           prodh	equ	0xFF4
 15702                           prodl	equ	0xFF3
 15703                           intcon	equ	0xFF2
 15704                           intcon2	equ	0xFF1
 15705                           intcon3	equ	0xFF0
 15706                           postinc0	equ	0xFEE
 15707                           fsr0l	equ	0xFE9
 15708                           wreg	equ	0xFE8
 15709                           postdec1	equ	0xFE5
 15710                           fsr1l	equ	0xFE1
 15711                           indf2	equ	0xFDF
 15712                           postinc2	equ	0xFDE
 15713                           postdec2	equ	0xFDD
 15714                           fsr2h	equ	0xFDA
 15715                           fsr2l	equ	0xFD9
 15716                           status	equ	0xFD8
 15717                           
 15718                           	psect	intcode_body
 15719  003588                     __pintcode_body:
 15720                           	opt stack 18
 15721  003588                     int_func:
 15722                           	opt stack 18
 15723  003588  0006               	pop		; remove dummy address from shadow register refresh
 15724  00358A  CFEA F004          	movff	fsr0h,??_chkisr+3
 15725  00358E  CFE1 F005          	movff	fsr1l,??_chkisr+4
 15726  003592  CFE2 F006          	movff	fsr1h,??_chkisr+5
 15727  003596  CFD9 F007          	movff	fsr2l,??_chkisr+6
 15728  00359A  CFDA F008          	movff	fsr2h,??_chkisr+7
 15729  00359E  CFF3 F009          	movff	prodl,??_chkisr+8
 15730  0035A2  CFF4 F00A          	movff	prodh,??_chkisr+9
 15731  0035A6  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 15732  0035AA  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 15733  0035AE  CFF8 F00D          	movff	tblptru,??_chkisr+12
 15734  0035B2  CFF5 F00E          	movff	tablat,??_chkisr+13
 15735                           
 15736                           ;Lab9test.c: 826: if (INTCONbits.INT0IF == 1) INT0_ISR();
 15737  0035B6  A2F2               	btfss	intcon,1,c	;volatile
 15738  0035B8  D003               	goto	i2l5811
 15739  0035BA  EC85  F01F         	call	_INT0_ISR	;wreg free
 15740  0035BE  D000               	goto	i2l5811
 15741  0035C0                     i2l5811:
 15742                           
 15743                           ;Lab9test.c: 827: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 15744  0035C0  A0F0               	btfss	intcon3,0,c	;volatile
 15745  0035C2  D003               	goto	i2l5815
 15746  0035C4  EC79  F01F         	call	_INT1_ISR	;wreg free
 15747  0035C8  D000               	goto	i2l5815
 15748  0035CA                     i2l5815:
 15749                           
 15750                           ;Lab9test.c: 828: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 15751  0035CA  A2F0               	btfss	intcon3,1,c	;volatile
 15752  0035CC  D003               	goto	i2l569
 15753  0035CE  ECE6  F01F         	call	_INT2_ISR	;wreg free
 15754  0035D2  D000               	goto	i2l569
 15755  0035D4                     i2l569:
 15756  0035D4  C00E  FFF5         	movff	??_chkisr+13,tablat
 15757  0035D8  C00D  FFF8         	movff	??_chkisr+12,tblptru
 15758  0035DC  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 15759  0035E0  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 15760  0035E4  C00A  FFF4         	movff	??_chkisr+9,prodh
 15761  0035E8  C009  FFF3         	movff	??_chkisr+8,prodl
 15762  0035EC  C008  FFDA         	movff	??_chkisr+7,fsr2h
 15763  0035F0  C007  FFD9         	movff	??_chkisr+6,fsr2l
 15764  0035F4  C006  FFE2         	movff	??_chkisr+5,fsr1h
 15765  0035F8  C005  FFE1         	movff	??_chkisr+4,fsr1l
 15766  0035FC  C004  FFEA         	movff	??_chkisr+3,fsr0h
 15767  003600  C003  FFE9         	movff	??_chkisr+2,fsr0l
 15768  003604  C002  FFFB         	movff	??_chkisr+1,pclatu
 15769  003608  C001  FFFA         	movff	??_chkisr,pclath
 15770  00360C  0011               	retfie		f
 15771  00360E                     __end_of_chkisr:
 15772                           	opt stack 0
 15773                           pclatu	equ	0xFFB
 15774                           pclath	equ	0xFFA
 15775                           tblptru	equ	0xFF8
 15776                           tblptrh	equ	0xFF7
 15777                           tblptrl	equ	0xFF6
 15778                           tablat	equ	0xFF5
 15779                           prodh	equ	0xFF4
 15780                           prodl	equ	0xFF3
 15781                           intcon	equ	0xFF2
 15782                           intcon2	equ	0xFF1
 15783                           intcon3	equ	0xFF0
 15784                           postinc0	equ	0xFEE
 15785                           fsr0h	equ	0xFEA
 15786                           fsr0l	equ	0xFE9
 15787                           wreg	equ	0xFE8
 15788                           postdec1	equ	0xFE5
 15789                           fsr1h	equ	0xFE2
 15790                           fsr1l	equ	0xFE1
 15791                           indf2	equ	0xFDF
 15792                           postinc2	equ	0xFDE
 15793                           postdec2	equ	0xFDD
 15794                           fsr2h	equ	0xFDA
 15795                           fsr2l	equ	0xFD9
 15796                           status	equ	0xFD8
 15797                           
 15798 ;; *************** function _INT2_ISR *****************
 15799 ;; Defined at:
 15800 ;;		line 849 in file "Lab9test.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;		None
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;		None
 15805 ;; Return value:  Size  Location     Type
 15806 ;;		None               void
 15807 ;; Registers used:
 15808 ;;		wreg, status,2
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15818 ;;Total ram usage:        0 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; This function calls:
 15821 ;;		Nothing
 15822 ;; This function is called by:
 15823 ;;		_chkisr
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           	psect	text74
 15828  003FCC                     __ptext74:
 15829                           	opt stack 0
 15830  003FCC                     _INT2_ISR:
 15831                           	opt stack 18
 15832                           
 15833                           ;Lab9test.c: 851: INTCON3bits.INT2IF=0;
 15834                           
 15835                           ;incstack = 0
 15836  003FCC  92F0               	bcf	intcon3,1,c	;volatile
 15837                           
 15838                           ;Lab9test.c: 852: FLASHING_REQUEST = 1;
 15839  003FCE  0E01               	movlw	1
 15840  003FD0  0100               	movlb	0	; () banked
 15841  003FD2  6F90               	movwf	_FLASHING_REQUEST& (0+255),b
 15842                           
 15843                           ; BSR set to: 0
 15844  003FD4  0012               	return		;funcret
 15845  003FD6                     __end_of_INT2_ISR:
 15846                           	opt stack 0
 15847                           pclatu	equ	0xFFB
 15848                           pclath	equ	0xFFA
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           intcon	equ	0xFF2
 15856                           intcon2	equ	0xFF1
 15857                           intcon3	equ	0xFF0
 15858                           postinc0	equ	0xFEE
 15859                           fsr0h	equ	0xFEA
 15860                           fsr0l	equ	0xFE9
 15861                           wreg	equ	0xFE8
 15862                           postdec1	equ	0xFE5
 15863                           fsr1h	equ	0xFE2
 15864                           fsr1l	equ	0xFE1
 15865                           indf2	equ	0xFDF
 15866                           postinc2	equ	0xFDE
 15867                           postdec2	equ	0xFDD
 15868                           fsr2h	equ	0xFDA
 15869                           fsr2l	equ	0xFD9
 15870                           status	equ	0xFD8
 15871                           
 15872 ;; *************** function _INT1_ISR *****************
 15873 ;; Defined at:
 15874 ;;		line 840 in file "Lab9test.c"
 15875 ;; Parameters:    Size  Location     Type
 15876 ;;		None
 15877 ;; Auto vars:     Size  Location     Type
 15878 ;;		None
 15879 ;; Return value:  Size  Location     Type
 15880 ;;		None               void
 15881 ;; Registers used:
 15882 ;;		wreg, status,2, status,0
 15883 ;; Tracked objects:
 15884 ;;		On entry : 0/0
 15885 ;;		On exit  : 0/0
 15886 ;;		Unchanged: 0/0
 15887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15892 ;;Total ram usage:        0 bytes
 15893 ;; Hardware stack levels used:    1
 15894 ;; This function calls:
 15895 ;;		Nothing
 15896 ;; This function is called by:
 15897 ;;		_chkisr
 15898 ;; This function uses a non-reentrant model
 15899 ;;
 15900                           
 15901                           	psect	text75
 15902  003EF2                     __ptext75:
 15903                           	opt stack 0
 15904  003EF2                     _INT1_ISR:
 15905                           	opt stack 18
 15906                           
 15907                           ;Lab9test.c: 842: INTCON3bits.INT1IF=0;
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;incstack = 0
 15911  003EF2  90F0               	bcf	intcon3,0,c	;volatile
 15912                           
 15913                           ;Lab9test.c: 843: if (MODE == 1)
 15914  003EF4  0100               	movlb	0	; () banked
 15915  003EF6  058B               	decf	_MODE& (0+255),w,b
 15916  003EF8  0100               	movlb	0	; () banked
 15917  003EFA  118C               	iorwf	(_MODE+1)& (0+255),w,b
 15918  003EFC  A4D8               	btfss	status,2,c
 15919  003EFE  D004               	goto	i2l577
 15920                           
 15921                           ; BSR set to: 0
 15922                           ;Lab9test.c: 844: {
 15923                           ;Lab9test.c: 845: EWPED_SW = 1;
 15924  003F00  0E01               	movlw	1
 15925  003F02  0100               	movlb	0	; () banked
 15926  003F04  6F8F               	movwf	_EWPED_SW& (0+255),b
 15927  003F06  D000               	goto	i2l577
 15928  003F08                     i2l577:
 15929                           
 15930                           ; BSR set to: 0
 15931  003F08  0012               	return		;funcret
 15932  003F0A                     __end_of_INT1_ISR:
 15933                           	opt stack 0
 15934                           pclatu	equ	0xFFB
 15935                           pclath	equ	0xFFA
 15936                           tblptru	equ	0xFF8
 15937                           tblptrh	equ	0xFF7
 15938                           tblptrl	equ	0xFF6
 15939                           tablat	equ	0xFF5
 15940                           prodh	equ	0xFF4
 15941                           prodl	equ	0xFF3
 15942                           intcon	equ	0xFF2
 15943                           intcon2	equ	0xFF1
 15944                           intcon3	equ	0xFF0
 15945                           postinc0	equ	0xFEE
 15946                           fsr0h	equ	0xFEA
 15947                           fsr0l	equ	0xFE9
 15948                           wreg	equ	0xFE8
 15949                           postdec1	equ	0xFE5
 15950                           fsr1h	equ	0xFE2
 15951                           fsr1l	equ	0xFE1
 15952                           indf2	equ	0xFDF
 15953                           postinc2	equ	0xFDE
 15954                           postdec2	equ	0xFDD
 15955                           fsr2h	equ	0xFDA
 15956                           fsr2l	equ	0xFD9
 15957                           status	equ	0xFD8
 15958                           
 15959 ;; *************** function _INT0_ISR *****************
 15960 ;; Defined at:
 15961 ;;		line 831 in file "Lab9test.c"
 15962 ;; Parameters:    Size  Location     Type
 15963 ;;		None
 15964 ;; Auto vars:     Size  Location     Type
 15965 ;;		None
 15966 ;; Return value:  Size  Location     Type
 15967 ;;		None               void
 15968 ;; Registers used:
 15969 ;;		wreg, status,2, status,0
 15970 ;; Tracked objects:
 15971 ;;		On entry : 0/0
 15972 ;;		On exit  : 0/0
 15973 ;;		Unchanged: 0/0
 15974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;Total ram usage:        0 bytes
 15980 ;; Hardware stack levels used:    1
 15981 ;; This function calls:
 15982 ;;		Nothing
 15983 ;; This function is called by:
 15984 ;;		_chkisr
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           	psect	text76
 15989  003F0A                     __ptext76:
 15990                           	opt stack 0
 15991  003F0A                     _INT0_ISR:
 15992                           	opt stack 18
 15993                           
 15994                           ;Lab9test.c: 833: INTCONbits.INT0IF=0;
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;incstack = 0
 15998  003F0A  92F2               	bcf	intcon,1,c	;volatile
 15999                           
 16000                           ;Lab9test.c: 834: if (MODE == 1)
 16001  003F0C  0100               	movlb	0	; () banked
 16002  003F0E  058B               	decf	_MODE& (0+255),w,b
 16003  003F10  0100               	movlb	0	; () banked
 16004  003F12  118C               	iorwf	(_MODE+1)& (0+255),w,b
 16005  003F14  A4D8               	btfss	status,2,c
 16006  003F16  D004               	goto	i2l573
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;Lab9test.c: 835: {
 16010                           ;Lab9test.c: 836: NSPED_SW = 1;
 16011  003F18  0E01               	movlw	1
 16012  003F1A  0100               	movlb	0	; () banked
 16013  003F1C  6F91               	movwf	_NSPED_SW& (0+255),b
 16014  003F1E  D000               	goto	i2l573
 16015  003F20                     i2l573:
 16016                           
 16017                           ; BSR set to: 0
 16018  003F20  0012               	return		;funcret
 16019  003F22                     __end_of_INT0_ISR:
 16020                           	opt stack 0
 16021                           pclatu	equ	0xFFB
 16022                           pclath	equ	0xFFA
 16023                           tblptru	equ	0xFF8
 16024                           tblptrh	equ	0xFF7
 16025                           tblptrl	equ	0xFF6
 16026                           tablat	equ	0xFF5
 16027                           prodh	equ	0xFF4
 16028                           prodl	equ	0xFF3
 16029                           intcon	equ	0xFF2
 16030                           intcon2	equ	0xFF1
 16031                           intcon3	equ	0xFF0
 16032                           postinc0	equ	0xFEE
 16033                           fsr0h	equ	0xFEA
 16034                           fsr0l	equ	0xFE9
 16035                           wreg	equ	0xFE8
 16036                           postdec1	equ	0xFE5
 16037                           fsr1h	equ	0xFE2
 16038                           fsr1l	equ	0xFE1
 16039                           indf2	equ	0xFDF
 16040                           postinc2	equ	0xFDE
 16041                           postdec2	equ	0xFDD
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           pclatu	equ	0xFFB
 16046                           pclath	equ	0xFFA
 16047                           tblptru	equ	0xFF8
 16048                           tblptrh	equ	0xFF7
 16049                           tblptrl	equ	0xFF6
 16050                           tablat	equ	0xFF5
 16051                           prodh	equ	0xFF4
 16052                           prodl	equ	0xFF3
 16053                           intcon	equ	0xFF2
 16054                           intcon2	equ	0xFF1
 16055                           intcon3	equ	0xFF0
 16056                           postinc0	equ	0xFEE
 16057                           fsr0h	equ	0xFEA
 16058                           fsr0l	equ	0xFE9
 16059                           wreg	equ	0xFE8
 16060                           postdec1	equ	0xFE5
 16061                           fsr1h	equ	0xFE2
 16062                           fsr1l	equ	0xFE1
 16063                           indf2	equ	0xFDF
 16064                           postinc2	equ	0xFDE
 16065                           postdec2	equ	0xFDD
 16066                           fsr2h	equ	0xFDA
 16067                           fsr2l	equ	0xFD9
 16068                           status	equ	0xFD8
 16069                           
 16070                           	psect	rparam
 16071  0000                     pclatu	equ	0xFFB
 16072                           pclath	equ	0xFFA
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           intcon2	equ	0xFF1
 16081                           intcon3	equ	0xFF0
 16082                           postinc0	equ	0xFEE
 16083                           fsr0h	equ	0xFEA
 16084                           fsr0l	equ	0xFE9
 16085                           wreg	equ	0xFE8
 16086                           postdec1	equ	0xFE5
 16087                           fsr1h	equ	0xFE2
 16088                           fsr1l	equ	0xFE1
 16089                           indf2	equ	0xFDF
 16090                           postinc2	equ	0xFDE
 16091                           postdec2	equ	0xFDD
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8


Data Sizes:
    Strings     215
    Constant    593
    Data        46
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     99     112
    BANK0           128     25     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[12]), STR_7(CODE[7]), STR_6(CODE[10]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_20(CODE[31]), STR_19(CODE[31]), STR_18(CODE[31]), STR_17(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Night_Mode->_WAIT_N_SEC
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_WAIT_N_SEC
    _update_LCD_count->_drawtext
    _WAIT_1_SEC->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _init_UART->_OpenUSART
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    ___awdiv->___awmod
    _WAIT_1_SEC_W_BEEP->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _update_LCD_misc->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  781027
                                             95 COMRAM     4     4      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  255725
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   76048
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8784
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4132
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4132
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  122488
                         _WAIT_1_SEC
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  319780
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0  156157
                                             93 COMRAM     2     2      0
                         _WAIT_1_SEC
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     3     2      1   33539
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0  122488
                      _WAIT_HALF_SEC
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   92108
                                             88 COMRAM     5     5      0
                            _Do_Init
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   54180
                                             77 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   13223
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   12944
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    4526
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     584
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     803
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2295
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     622
                                             14 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     501
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     566
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4019
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3703
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     130
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     848
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2898
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2391
                                             34 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2128
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _Init_TRIS
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   64055
                                             74 COMRAM     2     1      1
                  _WAIT_1_SEC_W_BEEP
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 3     2      1   33415
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2383
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2525
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0   30380
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   28191
                                             54 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   12984
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    3092
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           _Do_Init
             _Init_ADC
             _Init_TRIS
             _init_UART
               _OpenUSART
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _WAIT_1_SEC
       _WAIT_HALF_SEC
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         _Do_Init
           _Init_ADC
           _Init_TRIS
           _init_UART
             _OpenUSART
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _Do_Init
     _Init_ADC
     _Init_TRIS
     _init_UART
       _OpenUSART
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           _Do_Init
             _Init_ADC
             _Init_TRIS
             _init_UART
               _OpenUSART
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   _get_full_ADC
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      79       5       94.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     63      70       1       88.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E9      34        0.0%
DATA                 0      0      E9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 08 17:29:36 2022

                     drawCircle@f 0028                       drawCircle@r 001E  
                     drawCircle@x 002A                       drawCircle@y 002C  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001A  
                    drawCircle@y0 001C                      ___awdiv@sign 001A  
             ___wmul@multiplicand 001F          update_LCD_color@Circle_Y 0043  
                    ___ftadd@exp1 0047                      ___ftadd@exp2 0046  
                    ___ftadd@sign 0045                               l211 3500  
                             l205 3DAC                               l151 3A0C  
                             l161 3F5A                               l402 3FA8  
                             l227 2474                               l236 23CA  
                             l229 234E                               l501 3BEC  
                             l421 2FBE                               l309 3478  
                             l510 3BA4                               l503 3BF0  
                             l504 3BF6                               l512 3BA8  
                             l264 2F2A                               l505 3BFA  
                             l513 3BAE                               l425 2FFC  
                             l265 2E96                               l433 3238  
                             l522 1916                               l506 3C1C  
                             l514 3BB2                               l275 208A  
                             l515 3BD4                               l531 231E  
                             l419 2F6A                               l267 2F06  
                             l268 2F28                               l293 24E4  
                             l445 3E2E                               l454 3EEA  
                             l448 3E4E                               l616 15B4  
                             l560 1BBE                               l609 1E02  
                             l538 2BA8                               l483 3B5C  
                             l492 3B14                               l485 3B60  
                             l741 37AE                               l717 0AB6  
                             l486 3B66                               l494 3B18  
                             l750 37F0                               l479 39C0  
                             l487 3B6A                               l495 3B1E  
                             l488 3B8C                               l496 3B22  
                             l753 3E28                               l497 3B44  
                             l745 37C8                               l746 37CA  
                             l747 37D4                               l748 37D6  
                             l687 074A                               l946 3364  
                             l971 3D18                               l959 3710  
   update_LCD_PED_Count@direction 004A                               _PR2 000FCB  
               _Deactivate_Buzzer 3FD6                               _dir 006A  
                             _nbr 008D                               _txt 0064  
                  drawFastHLine@w 0017                    drawFastHLine@x 0020  
                  drawFastHLine@y 0016                      ___awmod@sign 0014  
         __end_of_update_LCD_misc 1BC0                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001B                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 3DAE              PED_Control@Direction 0001  
                    ___ftdiv@cntr 0030                      ___ftdiv@sign 0035  
                    __CFG_WDT$OFF 000000                              l1122 1E72  
                            l1203 2C8E                    drawFastVLine@h 0017  
                            l1133 1F34                              l1037 28D6  
                            l1150 2D70                              l1142 1F50  
                            l1118 1E48                              l1046 28C6  
                            l1119 1FC6                              l1160 2734  
                            l1153 2D3C                              l1161 275C  
                            l1218 3EBA                              l1078 30C2  
                            l1158 27CC                              l1182 29CE  
                            l1247 33E0                              l1167 27BC  
                            l1176 32CE                              l1192 3E8C  
                            l1353 3CDC                              l1089 309A  
                            l1257 3770                    drawFastVLine@x 0020  
                            l1277 3918                    drawFastVLine@y 0016  
                            l1199 3C60                              l6021 1ED8  
                            l6005 1E8C                              l6111 32E6  
                            l6023 1EE4                              l6015 1EB4  
                            l6201 235A                              l6041 1F6E  
                            l6033 1F1C                              l6025 1EF0  
                            l6123 330E                              l6051 1FA0  
                            l6035 1F28                              l6027 1EF8  
                            l6205 238A                              l6125 3318  
                            l6117 32F8                              l6061 28F6  
                            l6301 13BA                              l7101 1A02  
                            l6207 23BE                              l6143 335A  
                            l6135 333E                              l6127 3320  
                            l6063 2910                              l6225 2440  
                            l6217 23EC                              l6233 2470  
                            l6209 23C2                              l6241 3CB0  
                            l6081 2952                              l7121 1A58  
                            l7113 1A38                              l7105 1A16  
                            l6227 2468                              l6219 2414  
                            l6139 334A                              l6171 36EA  
                            l6163 36C2                              l6155 36A6  
                            l7027 2070                              l6091 2980  
                            l6067 291E                              l6315 1590  
                            l7115 1A40                              l7061 3D56  
                            l6165 36CC                              l6501 2C22  
                            l6421 2864                              l6413 2832  
                            l6085 2964                              l6309 14DE  
                            l7109 1A28                              l6191 233C  
                            l6239 3CAA                              l7063 3D60  
                            l6167 36D4                              l6175 36F6  
                            l6159 36B4                              l7055 2160  
                            l6511 2C4C                              l6343 26FA  
                            l6095 2992                              l6327 3EB2  
                            l7143 1B92                              l7119 1A50  
                            l6513 2C5A                              l6505 2C32  
                            l6433 2888                              l6425 2874  
                            l6337 26DC                              l6089 297A  
                            l7081 19A8                              l6195 234A  
                            l6187 2330                              l6603 2E3C  
                            l6179 3706                              l6451 3C36  
                            l6507 2C38                              l6515 2C64  
                            l6531 3396                              l6443 28B2  
                            l6099 29A8                              l6291 1302  
                            l7147 1BA8                              l7083 19B0  
                            l7307 3460                              l6197 2352  
                            l6605 2E42                              l5901 30A2  
                            l6541 33D0                              l6533 339E  
                            l6445 28C0                              l6437 2898  
                            l6373 277E                              l6365 276A  
                            l6277 1DC2                              l6269 1CFE  
                            l7093 19DA                              l7341 22A6  
                            l7333 21F0                              l7309 346E  
                            l7253 2E60                              l7431 3B28  
                            l6463 329E                              l6519 2C7C  
                            l6551 3732                              l6439 289E  
                            l6383 27A8                              l6703 0124  
                            l7271 2EFC                              l6633 2546  
                            l6617 24CA                              l6529 3388  
                            l6553 373A                              l6393 27DE  
                            l6385 27B6                              l6377 278E  
                            l6297 13AA                              l6713 018C  
                            l7097 19EE                              l7337 224C  
                            l7329 2196                              l5915 3D8E  
                            l5923 3ABE                              l5907 30B4  
                            l6459 326C                              l6483 2BC8  
                            l6563 38C0                              l6379 2794  
                            l6811 05B4                              l6803 056A  
                            l6707 0160                              l7347 2302  
                            l7275 2F0A                              l7259 2ECE  
                            l5861 34C2                              l7373 2B3C  
                            l6637 2598                              l6469 32CA  
                            l6557 3760                              l6549 3724  
                            l6565 38CE                              l6821 05FC  
                            l6725 01DC                              l6717 0198  
                            l6709 0178                              l7293 3402  
                            l7285 2F24                              l5871 34E8  
                            l5927 3ADA                              l6591 2DDE  
                            l7463 397C                              l7391 176A  
                            l7439 3C00                              l7447 3BB8  
                            l7455 3B70                              l5943 37A6  
                            l5935 3794                              l6399 27EE  
                            l6911 09F0                              l6831 0636  
                            l6815 05D6                              l6807 0570  
                            l6751 02C8                              l6735 0224  
                            l6719 01C0                              l7615 2F40  
                            l7279 2F14                              l5873 34F6  
                            l5857 348A                              l7369 2AE2  
                            l6921 0A2E                              l6913 09FC  
                            l6905 09B0                              l6833 064A  
                            l6825 060C                              l6673 002C  
                            l7481 3D20                              l7641 2FA6  
                            l7713 3946                              l7297 343A  
                            l6595 2DF8                              l6579 2D9A  
                            l7379 2B98                              l7475 39B0  
                            l7459 3972                              l7395 1840  
                            l7387 1696                              l5955 37C0  
                            l5947 37B2                              l5939 379E  
                            l5891 3062                              l5883 301E  
                            l6931 0A76                              l6907 09BC  
                            l6851 072C                              l6827 0626  
                            l6843 06F8                              l6763 0358  
                            l6683 0064                              l7491 3D3E  
                            l7469 3990                              l5893 3082  
                            l5885 302A                              l6925 0A4C  
                            l6861 0776                              l6845 0708  
                            l6837 066A                              l6781 042E  
                            l6765 036E                              l6685 007A  
                            l6677 0042                              l7485 3D2A  
                            l7709 392C                              l7733 3960  
                            l5895 308E                              l5887 304A  
                            l5879 300E                              l6943 2CAE  
                            l6927 0A58                              l6919 0A22  
                            l6871 08A4                              l6855 0750  
                            l6775 03FC                              l6767 03A0  
                            l6759 0330                              l6679 0058  
                            l6935 0A96                              l6945 2CC8  
                            l5993 1E56                              l6873 08B4  
                            l6865 07C8                              l6849 0718  
                            l6793 051C                              l6785 0472  
                            l6769 03B6                              l6689 009A  
                            l6697 00FE                              l7665 31A0  
                            l6795 0522                              l6787 04A0  
                            l6779 0422                              l7691 31F4  
                            l6949 2CD6                              l6893 094E  
                            l6885 08FC                              l6877 08C4  
                            l6789 04B4                              l6991 3CF4  
                            l5999 1E80                              l6799 0530  
                            l6879 08D4                              l6969 2D16  
                            l6889 0920                              l6979 2D4A  
                            l6899 097C                              l7991 3160  
                            l7983 30E6                              l7993 3166  
                            l7997 3174                              STR_1 FF9A  
                            STR_2 FFE5                              STR_3 FFEB  
                            STR_4 FFEF                              STR_5 FFFD  
                            STR_6 FFCD                              STR_7 FFDE  
                            STR_8 FFC1                              STR_9 FFD7  
                    printf@tmpval 00E9                              u6131 26CE  
                            u5260 34B8                              u5501 1E28  
                            u6151 26EC                              u7121 2CA0  
                            _MODE 008B                              u6500 2DC2  
                            u7141 2CBE                              u6341 2BBA  
                            u5701 28E8                              u6360 2BE6  
                            u5721 2906                              u5491 1E14  
                            u6365 2BDE                              u7440 3430  
                            u7360 2E8E                              u7370 2EC4  
                            u6910 0742                              u6690 0264  
                            u5980 2422                              _RBPU 007F8F  
                            u6695 025A                              _TRMT 007D61  
             ??_Deactivate_Buzzer 000F                              _main 30C4  
                            _font FCD7                      ___ftpack@arg 000F  
                    ___ftpack@exp 0012                              fsr0h 000FEA  
                            fsr1h 000FE2                    ??_get_full_ADC 0011  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 006C  
                 drawFastHLine@hi 001E                   drawFastHLine@lo 001F  
        __end_of_update_LCD_color 1918                              pclat 000FFA  
        __end_of_update_LCD_count 2320                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   __end_of_Do_Init 3E76  
                 ??_drawFastHLine 001A                   ??_drawFastVLine 001A  
                    ___ftmul@cntr 0030                      ___param_bank 000010  
                    ___ftmul@sign 0031                      ___fttol@exp1 0047  
                    ___fttol@lval 0043                      _Act_Mode_Txt 00D4  
                __end_of_INT0_ISR 3F22                  __end_of_INT1_ISR 3F0A  
                __end_of_INT2_ISR 3FD6                       _Do_Flashing 391A  
                     ?_WAIT_1_SEC 0001         __end_of_Deactivate_Buzzer 3FDE  
                 drawFastVLine@hi 001E                   drawFastVLine@lo 001F  
                     _SW_EWLT_Txt 006D                       _SW_MODE_Txt 00DA  
                           ?_main 0001                   __end_of___awdiv 3366  
                 __end_of___ftadd 1FC8                   drawCircle@ddF_x 0024  
                           STR_10 FFF7                   drawCircle@ddF_y 0026  
                           STR_11 FFF3                             STR_12 FF85  
                           STR_20 FF66                             STR_13 FFFD  
                           STR_14 FFFB                             STR_15 FFFD  
                           STR_16 FFFB                             STR_17 FFAE  
                           STR_18 FF28                             STR_19 FF47  
                 __end_of___awmod 3712                   __end_of___ftdiv 2D72  
                 __end_of___ftneg 3E9A                   __end_of___lldiv 33F2  
                 __end_of___ftmul 29D0                             _T0CON 000FD5  
                 ___awdiv@divisor 0017                   __end_of___llmod 3782  
                 __end_of___ftsub 3C62                   __end_of___fttol 2C90  
                           _T2CON 000FCA                             _T3CON 000FB1  
                     ?_WAIT_N_SEC 0001                             i2l573 3F20  
                           i2l577 3F08                             i2l569 35D4  
                 ___awdiv@counter 0019                   drawCircle@color 0020  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Count 0066                      ?_PED_Control 004B  
                           _Rcmd1 25AE                             _Rcmd3 29D0  
                    ___lltoft@exp 001F                       _SW_NSLT_Txt 00DC  
                   drawRect@color 0029                     ___awtoft@sign 0026  
                 __end_of_dpowers FEDA                             _array 00B7  
                           _font2 FDD6             fillCircleHelper@ddF_x 002F  
           fillCircleHelper@ddF_y 0031                             _scale 11D6  
                 __end_of_isdigit 3EBC                     ___ftpack@sign 0013  
           fillCircleHelper@delta 0029                             _putch 3FA4  
           fillCircleHelper@color 002B                             _volts 0080  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8            ??_update_LCD_PED_Count 0049  
                __end_of_Day_Mode 2FFE                   write_data@data_ 0011  
                 __initialization 3858             __end_of_WAIT_HALF_SEC 3EF2  
                    __end_of_main 3180                      __end_of_font FDD6  
                __end_of_Init_ADC 3FC0                  __end_of_Rcmd2red 3CA0  
                      _Night_Mode 3180                  __end_of_Set_EWLT 3BD6  
                __end_of_Set_NSLT 3B46                            ??_main 0060  
                   ___fttol@sign1 0042                     __activetblptr 000002  
               __end_of_LCD_Reset 3F72                      _SW_EWPED_Txt 006F  
            __size_of__tdiv_to_l_ 0110         ??_TFT_GreenTab_Initialize 0029  
                ?_update_LCD_misc 0001                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 000F                            ?_scale 0032  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0015  
                __end_of___awtoft 3D1A                            ?_putch 0001  
                __end_of___ftpack 30C4                  __end_of___lltoft 391A  
                       ??_Do_Init 0012                            i2l5811 35C0  
                          i2l5815 35CA                            _OSCCON 000FD3  
              __size_of_Init_TRIS 0016                            _SPBRGH 000FB0  
             __size_of_WAIT_1_SEC 0082                            _SSPBUF 000FC9  
                    _SW_NSPED_Txt 00DE                  __end_of_delay_ms 3A14  
             __size_of_WAIT_N_SEC 0032                            _Set_EW 3BD6  
                          _Set_NS 3B46                  __end_of_fillRect 3AFE  
                __end_of_drawChar 2476                  __end_of__powers_ FF28  
                __end_of_drawRect 3858                __size_of_OpenUSART 0070  
                          ___ftge 323A          __size_of_Activate_Buzzer 0012  
                          ___wmul 3E02                         ??___awdiv 0019  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 2E50  
                       ??___ftadd 0042                         ??___awmod 0013  
                       ??___ftdiv 002D                         ??___ftneg 0012  
                       ??___lldiv 0017                         ??___ftmul 0029  
                       ??___llmod 0017                         ??___ftsub 004E  
                       ??___fttol 003D                            _chkisr 0008  
                          _buffer 0098                            _fround 1BC0  
                          clear_0 385E                            clear_1 386A  
                ___awdiv@quotient 001B                   ___awmod@divisor 0011  
      __size_of_Deactivate_Buzzer 0008                   ___awmod@counter 0013  
                          _printf 001C                 WAIT_N_SEC@seconds 005E  
                    drawtext@size 003E                            _strcpy 3D4C  
                          _strlen 3CA0             ___ftmul@f3_as_product 002D  
            __end_of_get_full_ADC 3E50                      __pdataCOMRAM 006C  
                       ??_isdigit 000F                       Set_EW@color 0044  
                    __mediumconst FCD6                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 000F                  __end_of_spiwrite 3F60  
                     Set_NS@color 0044                        __accesstop 0080  
         __end_of__initialization 38B0                         ?_INT0_ISR 0001  
                       ?_INT1_ISR 0001                         ?_INT2_ISR 0001  
                      ___ftadd@f1 003C                        ___ftadd@f2 003F  
                      ___ftge@ff1 000F                        ___ftge@ff2 0012  
                   ___rparam_used 000001                        ___ftdiv@f1 0027  
                      ___ftdiv@f2 002A                        ___ftdiv@f3 0031  
                      ___ftneg@f1 000F                        ___awtoft@c 0023  
                      ___ftmul@f1 0023                        ___ftmul@f2 0026  
                      ___ftsub@f1 0048                        ___ftsub@f2 004B  
                      ___fttol@f1 0039                     __end_of_Rcmd1 26BE  
                   __end_of_Rcmd3 2AC2                    __pcstackCOMRAM 0001  
                    __pidataBANK0 3DD8                        ___lltoft@c 0017  
                   __end_of_font2 FEB2                     __end_of_scale 15B6  
                   __end_of_putch 3FB2                       ?_Night_Mode 0001  
               __end_of_Init_TRIS 3F38                    drawPixel@color 0017  
          __size_of_write_command 0010                        __div_to_l_ 27CE  
                       ?_Day_Mode 0001        fillCircleHelper@cornername 0027  
                         ??_Rcmd1 0029                           ??_Rcmd3 0029  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 37F2  
                 __div_to_l_@exp1 001A                   __div_to_l_@cntr 0019  
                         ??_scale 0035              __size_of_PED_Control 0054  
                 __div_to_l_@quot 0015                           ??_putch 000F  
                      __pbssBANK0 0080                         ?_Init_ADC 0001  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
      __end_of_Select_ADC_Channel 3FCC                        ??_INT0_ISR 0001  
                      ??_INT1_ISR 0001                        ??_INT2_ISR 0001  
                 spiwrite@spidata 0010                         ?_Set_EWLT 0001  
                   __div_to_l_@f1 000F                     __div_to_l_@f2 0012  
                       ?_Set_NSLT 0001                 ?_update_LCD_color 0041  
               ?_update_LCD_count 0048                           ?_Set_EW 0001  
                         ?_Set_NS 0001                __CFG_CCP2MX$PORTBE 000000  
              ??_update_LCD_color 0042                ??_update_LCD_count 0049  
                         ?___ftge 000F                           ?___wmul 001D  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ?_Do_Flashing 0001  
       update_LCD_PED_Count@count 0048                           ?_fround 0032  
                    ??_WAIT_1_SEC 005E                         ?___awtoft 0023  
                       ?___ftpack 000F                        _fillCircle 3A14  
                         ?_printf 004E         Select_ADC_Channel@channel 000F  
                       ?___lltoft 0017                           ?_strcpy 000F  
                         ?_strlen 000F                      ??_WAIT_N_SEC 005E  
               ??_Activate_Buzzer 000F                        _fillScreen 3EBC  
                      _drawCircle 1FC8                        ??_Day_Mode 0060  
                       ?_delay_ms 0023                         ?_fillRect 0021  
       update_LCD_count@direction 004A                         ?_drawChar 002C  
                         _SSPCON1 000FC6                         ?_drawRect 0021  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 2F2C  
                       ?_drawtext 0037                           _SW_EWLT 0092  
                         _SW_MODE 0094                        ??_Init_ADC 000F  
                         _Do_Init 3E50                           _SW_NSLT 0095  
                      ??_Rcmd2red 0012               __size_of_Night_Mode 00BA  
                   _write_command 3F94                __end_of_WAIT_1_SEC 3690  
                      ??_Set_EWLT 0044                        ??_Set_NSLT 0044  
                     WAIT_N_SEC@i 005F                 __end_of__npowers_ FF01  
                         __Hparam 0000                        _scale$2526 0035  
              __end_of_WAIT_N_SEC 3D4C                           __Lparam 0000  
                 __size_of_Set_EW 0048                   __size_of_Set_NS 0048  
           __end_of_drawFastHLine 347A                 __end_of_drawPixel 3DAE  
           __end_of_drawFastVLine 3502                  _fillCircleHelper 2476  
                 __size_of___ftge 0096                           ___awdiv 32D0  
                         ___ftadd 1E04                           ___awmod 3690  
                         ___ftdiv 2C90                           ___ftneg 3E76  
                         ___lldiv 3366                   __size_of___wmul 0028  
                         ___ftmul 28D8                           ___llmod 3712  
                         ___ftsub 3C1E                           ___fttol 2BAA  
           __size_of_get_full_ADC 0026                   __size_of_chkisr 3606  
                       ?_spiwrite 0001                           __pcinit 3858  
                      ??___awtoft 0026                        ??___ftpack 0014  
                 __size_of_fround 0244                           __ramtop 1000  
                      ??___lltoft 001B                           __ptext0 30C4  
                         __ptext1 3FC0                           __ptext2 3180  
                         __ptext3 0AB8                           __ptext4 3EBC  
                         __ptext5 2E50                           __ptext6 37F2  
                         __ptext7 33F2                           __ptext8 3DAE  
                         __ptext9 29D0                   __size_of_printf 0A9C  
               __end_of_init_UART 3F4C                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
                     ?__div_to_l_ 000F                           _dpowers FEB2  
                         _isdigit 3E9A                         _T3CONbits 000FB1  
                ___awmod@dividend 000F                        ??_delay_ms 0025  
                   drawtext@_text 0038                     drawtext@color 003A  
                      ??_fillRect 0026                        ??_drawChar 0033  
                       _LCD_Reset 3F60                        ??_drawRect 002B  
                   _setAddrWindow 3A66                    __pintcode_body 3588  
              drawFastHLine@color 0018                        delay_ms@ms 0023  
            end_of_initialization 38B0                         _INT0_flag 0085  
                       _INT1_flag 0087                         _INT2_flag 0089  
                      ??_drawtext 003F                    ?_write_command 0001  
                   __Lmediumconst FCD6                           int_func 3588  
                       _PED_Count 0067                      _get_full_ADC 3E2A  
                 ___lldiv@divisor 0013                      PED_Control@i 004C  
   __size_of_update_LCD_PED_Count 00E8                   ___lldiv@counter 001B  
                       _RCSTAbits 000FAB                           printf@c 00F8  
                         printf@f 004E                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                 _WAIT_1_SEC_W_BEEP 3502  
                  __tdiv_to_l_@f1 000F                    __tdiv_to_l_@f2 0012  
                      ??_spiwrite 000F                           strlen@s 000F  
                 fillCircle@color 003F                ?_WAIT_1_SEC_W_BEEP 0001  
                   ??__tdiv_to_l_ 0015                       ?_fillCircle 0039  
                       _PORTAbits 000F80                  drawtext@cursor_x 0047  
                drawtext@cursor_y 0046                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                       ?_fillScreen 0022  
                     ?_drawCircle 001A                        drawChar@bg 0030  
             ??_WAIT_1_SEC_W_BEEP 0048                         _TRISCbits 000F94  
                  ?_setAddrWindow 0012                        ?_LCD_Reset 0001  
                drawtext@textsize 0042            __size_of_WAIT_HALF_SEC 001A  
        __size_of_update_LCD_misc 02A8                        drawPixel@x 0019  
                      drawPixel@y 0016                       ___ftdiv@exp 0034  
                     printf@width 00F1                         _TXSTAbits 000FAC  
              PED_Control@Num_Sec 004B                get_full_ADC@result 0013  
               __size_of_INT0_ISR 0018               __size_of__div_to_l_ 010A  
               __size_of_INT1_ISR 0018                 __size_of_INT2_ISR 000A  
       __end_of_WAIT_1_SEC_W_BEEP 3588                       ___ftmul@exp 002C  
                  __end_of_Set_EW 3C1E                    __end_of_Set_NS 3B8E  
                  __end_of___ftge 32D0                    __end_of___wmul 3E2A  
                   delay_ms@count 0027                        _write_data 3F84  
                   __pidataCOMRAM 3FDE                    __end_of_chkisr 360E  
                    ??_Night_Mode 0060          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003C                    __end_of_fround 1E04  
            __size_of_Do_Flashing 0054                    __end_of_printf 0AB8  
                  __end_of_strcpy 3D7E                    __end_of_strlen 3CDE  
             start_initialization 3858                         _Init_TRIS 3F22  
             __end_of__tdiv_to_l_ 27CE                 __size_of_Day_Mode 00D2  
                 ??_write_command 0011                         _OpenUSART 3782  
             __size_of_fillCircle 0052                   ___llmod@divisor 0013  
                __CFG_OSC$INTIO67 000000                 __size_of_Init_ADC 000E  
                 ___llmod@counter 0017                __end_of_Night_Mode 323A  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??_Set_EW 0044  
                        ??_Set_NS 0044                 __size_of_Set_EWLT 0048  
                 _Activate_Buzzer 3F72                 __size_of_Set_NSLT 0048  
                        ??___ftge 0015                          ??___wmul 0021  
                   _WAIT_HALF_SEC 3ED8                          ??_chkisr 0001  
                     __pdataBANK0 00B7                _Select_ADC_Channel 3FC0  
                        ??_fround 0035                   setAddrWindow@x0 0015  
                 setAddrWindow@x1 0013                   setAddrWindow@y0 0012  
                 setAddrWindow@y1 0014                          ??_printf 0053  
                        ??_strcpy 0013                          ??_strlen 0011  
                    _PED_EW_Count 00CE         __size_of_update_LCD_color 0362  
       __size_of_update_LCD_count 01AA                        fround@prec 003B  
               __size_of___awtoft 003C                 __size_of___ftpack 00C6  
             ?_Select_ADC_Channel 0001                 __size_of___lltoft 0060  
                     __pbssCOMRAM 0064                     ??_PED_Control 004C  
                 ??_setAddrWindow 0015                        ?_Init_TRIS 0001  
                   __pcstackBANK0 00E0                      _PED_NS_Count 00D1  
                     ??_LCD_Reset 0029                      _isdigit$2218 0010  
        __end_of_fillCircleHelper 25AE                 __size_of_delay_ms 0052  
                        ?_Do_Init 0001                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 000F  
               __size_of_drawRect 0066                 __size_of_drawtext 00DE  
            ??_Select_ADC_Channel 000F        __size_of_WAIT_1_SEC_W_BEEP 0086  
               ??_update_LCD_misc 0059                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 3DD8                    ?_WAIT_HALF_SEC 0001  
                   __pmediumconst FCD6                          ?___awdiv 0015  
                        ?___ftadd 003C                          ?___awmod 000F  
                        ?___ftdiv 0027                          ?___ftneg 000F  
                        ?___lldiv 000F                          ?___ftmul 0023  
                        ?___llmod 000F                          ?___ftsub 0048  
                       __npowers_ FEDA                          ?___fttol 0039  
                       __tft_type 0068                         _direction 0097  
              drawFastVLine@color 0018                       ?_write_data 0001  
                       _drawPixel 3D7E                       __tdiv_to_l_ 26BE  
               __size_of_spiwrite 0014                      ??__div_to_l_ 0015  
                        ?_isdigit 0001                 _Initialize_Screen 0AB8  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 3F38                ?_Initialize_Screen 0001  
                        _FLASHING 0083                    __size_of_scale 03E0  
                  __size_of_putch 000E               __end_of_PED_Control 39C2  
         __end_of_Activate_Buzzer 3F84                          _INT0_ISR 3F0A  
                        _INT1_ISR 3EF2                          _INT2_ISR 3FCC  
                  ___wmul@product 0021               ??_Initialize_Screen 0048  
                        _EWPED_SW 008F                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 28D8  
                        _PIR2bits 000FA1                          _NSPED_SW 0091  
                        _EW_Count 00C5                         fillRect@h 0023  
                       fillRect@i 002A                         fillRect@w 0022  
                       fillRect@x 0029                         fillRect@y 0021  
                       drawChar@c 002D                         drawChar@i 0036  
                       drawChar@j 0035                      ??_fillCircle 0041  
                       drawChar@x 0034                         drawChar@y 002C  
                      ?_drawPixel 0016            __size_of_fillRectangle 00DC  
                        _NS_Count 00CB                        _ADCON0bits 000FC2  
               ___wmul@multiplier 001D         __end_of_Initialize_Screen 11D6  
                    ??_fillScreen 0024                         drawRect@h 0027  
                       drawRect@w 0025                         drawRect@x 0021  
                       drawRect@y 0023                     _FlashingR_Txt 00D6  
                   _FlashingS_Txt 00D8                      ??_drawCircle 0022  
                      printf@flag 00EF      __end_of_update_LCD_PED_Count 2BAA  
                      printf@fval 00F3                         main@nStep 0062  
                        _SW_EWPED 0093                        printf@prec 00F6  
           update_LCD_color@color 0041                          _Day_Mode 2F2C  
                        _SW_NSPED 0096         update_LCD_color@direction 0042  
                     ??_Init_TRIS 000F                        ?_init_UART 0001  
          __size_of_drawFastHLine 0088                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 3884  
                       copy_data1 38A4                         drawtext@i 0044  
          __size_of_drawFastVLine 0088                         drawtext@x 0041  
                       drawtext@y 0037                          _Init_ADC 3FB2  
               write_command@cmd_ 0011                       ??_OpenUSART 0011  
                        _Rcmd2red 3C62                  __size_of_Do_Init 0026  
             __size_of_write_data 0010                   OpenUSART@config 0011  
                        _Set_EWLT 3B8E                __end_of_fillCircle 3A66  
                        _Set_NSLT 3AFE                          __Hrparam 0000  
                 ??_WAIT_HALF_SEC 000F                __end_of_fillScreen 3ED8  
           update_LCD_count@count 0048                          __Lrparam 0000  
              __end_of_drawCircle 2176                  __size_of___awdiv 0096  
                __size_of___ftadd 01C4                  __size_of___awmod 0082  
                __size_of___ftdiv 00E2                  __size_of___ftneg 0024  
                __size_of___lldiv 008C                  __size_of___ftmul 00F8  
                __size_of___llmod 0070                  __size_of___ftsub 0044  
                __size_of___fttol 00E6                          ___awtoft 3CDE  
                        ___ftpack 2FFE                       _fround$2524 0038  
                     _fround$2525 0035                          ___lltoft 38BA  
                _update_LCD_color 15B6                  _update_LCD_count 2176  
                __size_of_isdigit 0022                       _PED_Control 396E  
                        _delay_ms 39C2                          __ptext10 3C62  
                        __ptext11 25AE                          __ptext20 001C  
                        __ptext12 3F60                          __ptext21 11D6  
                        __ptext13 39C2                          __ptext30 3366  
                        __ptext22 3FA4                          __ptext14 391A  
                        __ptext31 2BAA                          __ptext23 3E9A  
                        __ptext15 2F2C                          __ptext40 3E50  
                        __ptext32 3C1E                          __ptext24 1BC0  
                        __ptext16 3D1A                          __ptext41 3F38  
                        __ptext33 1E04                          __ptext25 28D8  
                        __ptext17 2176                          __ptext50 3A14  
                        __ptext42 3782                          __ptext34 3E76  
                        __ptext26 26BE                          __ptext18 360E  
                        __ptext51 2476                          __ptext43 3F22  
                        __ptext35 323A                          __ptext27 27CE  
                        __ptext19 1918                          __ptext60 3CA0  
                        __ptext52 1FC8                          __ptext44 3FB2  
                        __ptext36 3E2A                          __ptext28 38BA  
                        __ptext61 2320                          __ptext53 396E  
                        __ptext45 3AFE                          __ptext37 2C90  
                        __ptext29 3712                          __ptext70 3ED8  
                        __ptext62 3AB4                          __ptext54 2AC2  
                        __ptext46 3B46                          __ptext38 3CDE  
                        __ptext71 3FD6                          __ptext63 347A  
                        __ptext55 3690                          __ptext47 3B8E  
                        __ptext39 2FFE                          __ptext72 3F72  
                        __ptext64 3D7E                          __ptext56 32D0  
                        __ptext48 3BD6                          __ptext65 3A66  
                        __ptext57 3502                          __ptext49 15B6  
                        __ptext74 3FCC                          __ptext66 3F84  
                        __ptext58 3D4C                          __ptext75 3EF2  
                        __ptext67 3F94                          __ptext59 2D72  
                        __ptext76 3F0A                          __ptext68 3F4C  
                        __ptext69 3E02                          _fillRect 3AB4  
                        _drawChar 2320                          __powers_ FF01  
                        _drawRect 37F2  __size_of_TFT_GreenTab_Initialize 002A  
                _FLASHING_REQUEST 0090                          _colstart 0069  
                        _drawtext 2D72                        strcpy@from 0011  
                   _fillRectangle 2E50                  ?_Activate_Buzzer 0001  
                   __size_of_main 00BC                   fillRectangle@hi 001F  
                 fillRectangle@lo 0020                     _drawFastHLine 33F2  
                   _drawFastVLine 347A                     ??_Do_Flashing 005E  
                       printf@exp 00ED                          _spiwrite 3F4C  
                       printf@val 00E5                       ??_drawPixel 0019  
                        _rowstart 006B                fillCircleHelper@x0 0021  
              fillCircleHelper@y0 0023        __size_of_Initialize_Screen 071E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 000F  
                     ??_init_UART 0012                          isdigit@c 0011  
                   Set_EWLT@color 0044                          scale@scl 0038  
                      _EWLT_Count 00C2                 ?_fillCircleHelper 0021  
                       spiwrite@x 000F                          intlevel2 0000  
                 _update_LCD_misc 1918                    ?_fillRectangle 0016  
                __tdiv_to_l_@exp1 001D                  __tdiv_to_l_@cntr 001C  
                __tdiv_to_l_@quot 0018                ??_fillCircleHelper 002D  
           __end_of_write_command 3FA4                  ___lldiv@dividend 000F  
                 fillScreen@color 0022              update_LCD_misc@nStep 0059  
            _update_LCD_PED_Count 2AC2              update_LCD_misc@volts 005B  
                    fillCircle@x0 0039                      fillCircle@y0 003B  
                  ?_drawFastHLine 0016                    fillRectangle@h 0018  
                  fillRectangle@w 0017                    fillRectangle@x 0021  
                  fillRectangle@y 0016                    ?_drawFastVLine 0016  
                        printf@ap 00E3                 fillCircleHelper@f 0033  
               fillCircleHelper@r 0025                 fillCircleHelper@x 0035  
               fillCircleHelper@y 0037                      ??_write_data 0011  
                      _WAIT_1_SEC 360E                     fillRect@color 0024  
                    ?__tdiv_to_l_ 000F                       _printf$2527 00E0  
                      _WAIT_N_SEC 3D1A                  ___lldiv@quotient 0017  
                        strcpy@cp 0013                          strlen@cp 0013  
                        strcpy@to 000F               __end_of_Do_Flashing 396E  
                   Set_NSLT@color 0044                        _NSLT_Count 00C8  
                     fillCircle@r 003D             __end_of_setAddrWindow 3AB4  
              fillRectangle@color 0019                     drawChar@color 002E  
              __end_of_write_data 3F94                      drawChar@line 0033  
                   ?_get_full_ADC 000F                      drawChar@size 0032  
           ?_update_LCD_PED_Count 0048       __size_of_Select_ADC_Channel 000C  
